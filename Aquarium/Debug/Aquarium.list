
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .tag          00000068  08010000  08010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000198  08010400  08010400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .version      000002a8  08010598  08010598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00018cc8  08010840  08010840  00010840  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000ea14  08029540  08029540  00029540  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08037f54  08037f54  000402b4  2**0
                  CONTENTS
  6 .ARM          00000008  08037f54  08037f54  00037f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08037f5c  08037f5c  000402b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08037f5c  08037f5c  00037f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08037f60  08037f60  00037f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000002b4  20000000  08037f64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b0b4  200002c0  08038218  000402c0  2**6
                  ALLOC
 12 ._user_heap_stack 00000604  2000b374  08038218  0004b374  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000402b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026359  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000071e0  00000000  00000000  0006663d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002460  00000000  00000000  0006d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000020a0  00000000  00000000  0006fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f01  00000000  00000000  00071d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038869  00000000  00000000  00095c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a629a  00000000  00000000  000ce48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00174724  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a870  00000000  00000000  00174774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010840 <__do_global_dtors_aux>:
 8010840:	b510      	push	{r4, lr}
 8010842:	4c05      	ldr	r4, [pc, #20]	; (8010858 <__do_global_dtors_aux+0x18>)
 8010844:	7823      	ldrb	r3, [r4, #0]
 8010846:	b933      	cbnz	r3, 8010856 <__do_global_dtors_aux+0x16>
 8010848:	4b04      	ldr	r3, [pc, #16]	; (801085c <__do_global_dtors_aux+0x1c>)
 801084a:	b113      	cbz	r3, 8010852 <__do_global_dtors_aux+0x12>
 801084c:	4804      	ldr	r0, [pc, #16]	; (8010860 <__do_global_dtors_aux+0x20>)
 801084e:	f3af 8000 	nop.w
 8010852:	2301      	movs	r3, #1
 8010854:	7023      	strb	r3, [r4, #0]
 8010856:	bd10      	pop	{r4, pc}
 8010858:	200002c0 	.word	0x200002c0
 801085c:	00000000 	.word	0x00000000
 8010860:	080294f0 	.word	0x080294f0

08010864 <frame_dummy>:
 8010864:	b508      	push	{r3, lr}
 8010866:	4b03      	ldr	r3, [pc, #12]	; (8010874 <frame_dummy+0x10>)
 8010868:	b11b      	cbz	r3, 8010872 <frame_dummy+0xe>
 801086a:	4903      	ldr	r1, [pc, #12]	; (8010878 <frame_dummy+0x14>)
 801086c:	4803      	ldr	r0, [pc, #12]	; (801087c <frame_dummy+0x18>)
 801086e:	f3af 8000 	nop.w
 8010872:	bd08      	pop	{r3, pc}
 8010874:	00000000 	.word	0x00000000
 8010878:	200002c4 	.word	0x200002c4
 801087c:	080294f0 	.word	0x080294f0

08010880 <strcmp>:
 8010880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010888:	2a01      	cmp	r2, #1
 801088a:	bf28      	it	cs
 801088c:	429a      	cmpcs	r2, r3
 801088e:	d0f7      	beq.n	8010880 <strcmp>
 8010890:	1ad0      	subs	r0, r2, r3
 8010892:	4770      	bx	lr

08010894 <strlen>:
 8010894:	4603      	mov	r3, r0
 8010896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801089a:	2a00      	cmp	r2, #0
 801089c:	d1fb      	bne.n	8010896 <strlen+0x2>
 801089e:	1a18      	subs	r0, r3, r0
 80108a0:	3801      	subs	r0, #1
 80108a2:	4770      	bx	lr
	...

080108b0 <memchr>:
 80108b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80108b4:	2a10      	cmp	r2, #16
 80108b6:	db2b      	blt.n	8010910 <memchr+0x60>
 80108b8:	f010 0f07 	tst.w	r0, #7
 80108bc:	d008      	beq.n	80108d0 <memchr+0x20>
 80108be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80108c2:	3a01      	subs	r2, #1
 80108c4:	428b      	cmp	r3, r1
 80108c6:	d02d      	beq.n	8010924 <memchr+0x74>
 80108c8:	f010 0f07 	tst.w	r0, #7
 80108cc:	b342      	cbz	r2, 8010920 <memchr+0x70>
 80108ce:	d1f6      	bne.n	80108be <memchr+0xe>
 80108d0:	b4f0      	push	{r4, r5, r6, r7}
 80108d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80108d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80108da:	f022 0407 	bic.w	r4, r2, #7
 80108de:	f07f 0700 	mvns.w	r7, #0
 80108e2:	2300      	movs	r3, #0
 80108e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80108e8:	3c08      	subs	r4, #8
 80108ea:	ea85 0501 	eor.w	r5, r5, r1
 80108ee:	ea86 0601 	eor.w	r6, r6, r1
 80108f2:	fa85 f547 	uadd8	r5, r5, r7
 80108f6:	faa3 f587 	sel	r5, r3, r7
 80108fa:	fa86 f647 	uadd8	r6, r6, r7
 80108fe:	faa5 f687 	sel	r6, r5, r7
 8010902:	b98e      	cbnz	r6, 8010928 <memchr+0x78>
 8010904:	d1ee      	bne.n	80108e4 <memchr+0x34>
 8010906:	bcf0      	pop	{r4, r5, r6, r7}
 8010908:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801090c:	f002 0207 	and.w	r2, r2, #7
 8010910:	b132      	cbz	r2, 8010920 <memchr+0x70>
 8010912:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010916:	3a01      	subs	r2, #1
 8010918:	ea83 0301 	eor.w	r3, r3, r1
 801091c:	b113      	cbz	r3, 8010924 <memchr+0x74>
 801091e:	d1f8      	bne.n	8010912 <memchr+0x62>
 8010920:	2000      	movs	r0, #0
 8010922:	4770      	bx	lr
 8010924:	3801      	subs	r0, #1
 8010926:	4770      	bx	lr
 8010928:	2d00      	cmp	r5, #0
 801092a:	bf06      	itte	eq
 801092c:	4635      	moveq	r5, r6
 801092e:	3803      	subeq	r0, #3
 8010930:	3807      	subne	r0, #7
 8010932:	f015 0f01 	tst.w	r5, #1
 8010936:	d107      	bne.n	8010948 <memchr+0x98>
 8010938:	3001      	adds	r0, #1
 801093a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801093e:	bf02      	ittt	eq
 8010940:	3001      	addeq	r0, #1
 8010942:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010946:	3001      	addeq	r0, #1
 8010948:	bcf0      	pop	{r4, r5, r6, r7}
 801094a:	3801      	subs	r0, #1
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop

08010950 <__aeabi_drsub>:
 8010950:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010954:	e002      	b.n	801095c <__adddf3>
 8010956:	bf00      	nop

08010958 <__aeabi_dsub>:
 8010958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801095c <__adddf3>:
 801095c:	b530      	push	{r4, r5, lr}
 801095e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010962:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010966:	ea94 0f05 	teq	r4, r5
 801096a:	bf08      	it	eq
 801096c:	ea90 0f02 	teqeq	r0, r2
 8010970:	bf1f      	itttt	ne
 8010972:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010976:	ea55 0c02 	orrsne.w	ip, r5, r2
 801097a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801097e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010982:	f000 80e2 	beq.w	8010b4a <__adddf3+0x1ee>
 8010986:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801098a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801098e:	bfb8      	it	lt
 8010990:	426d      	neglt	r5, r5
 8010992:	dd0c      	ble.n	80109ae <__adddf3+0x52>
 8010994:	442c      	add	r4, r5
 8010996:	ea80 0202 	eor.w	r2, r0, r2
 801099a:	ea81 0303 	eor.w	r3, r1, r3
 801099e:	ea82 0000 	eor.w	r0, r2, r0
 80109a2:	ea83 0101 	eor.w	r1, r3, r1
 80109a6:	ea80 0202 	eor.w	r2, r0, r2
 80109aa:	ea81 0303 	eor.w	r3, r1, r3
 80109ae:	2d36      	cmp	r5, #54	; 0x36
 80109b0:	bf88      	it	hi
 80109b2:	bd30      	pophi	{r4, r5, pc}
 80109b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80109b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80109bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80109c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80109c4:	d002      	beq.n	80109cc <__adddf3+0x70>
 80109c6:	4240      	negs	r0, r0
 80109c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80109cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80109d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80109d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80109d8:	d002      	beq.n	80109e0 <__adddf3+0x84>
 80109da:	4252      	negs	r2, r2
 80109dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80109e0:	ea94 0f05 	teq	r4, r5
 80109e4:	f000 80a7 	beq.w	8010b36 <__adddf3+0x1da>
 80109e8:	f1a4 0401 	sub.w	r4, r4, #1
 80109ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80109f0:	db0d      	blt.n	8010a0e <__adddf3+0xb2>
 80109f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80109f6:	fa22 f205 	lsr.w	r2, r2, r5
 80109fa:	1880      	adds	r0, r0, r2
 80109fc:	f141 0100 	adc.w	r1, r1, #0
 8010a00:	fa03 f20e 	lsl.w	r2, r3, lr
 8010a04:	1880      	adds	r0, r0, r2
 8010a06:	fa43 f305 	asr.w	r3, r3, r5
 8010a0a:	4159      	adcs	r1, r3
 8010a0c:	e00e      	b.n	8010a2c <__adddf3+0xd0>
 8010a0e:	f1a5 0520 	sub.w	r5, r5, #32
 8010a12:	f10e 0e20 	add.w	lr, lr, #32
 8010a16:	2a01      	cmp	r2, #1
 8010a18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010a1c:	bf28      	it	cs
 8010a1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010a22:	fa43 f305 	asr.w	r3, r3, r5
 8010a26:	18c0      	adds	r0, r0, r3
 8010a28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010a30:	d507      	bpl.n	8010a42 <__adddf3+0xe6>
 8010a32:	f04f 0e00 	mov.w	lr, #0
 8010a36:	f1dc 0c00 	rsbs	ip, ip, #0
 8010a3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010a3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010a42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010a46:	d31b      	bcc.n	8010a80 <__adddf3+0x124>
 8010a48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010a4c:	d30c      	bcc.n	8010a68 <__adddf3+0x10c>
 8010a4e:	0849      	lsrs	r1, r1, #1
 8010a50:	ea5f 0030 	movs.w	r0, r0, rrx
 8010a54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010a58:	f104 0401 	add.w	r4, r4, #1
 8010a5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010a60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010a64:	f080 809a 	bcs.w	8010b9c <__adddf3+0x240>
 8010a68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8010a6c:	bf08      	it	eq
 8010a6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010a72:	f150 0000 	adcs.w	r0, r0, #0
 8010a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010a7a:	ea41 0105 	orr.w	r1, r1, r5
 8010a7e:	bd30      	pop	{r4, r5, pc}
 8010a80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010a84:	4140      	adcs	r0, r0
 8010a86:	eb41 0101 	adc.w	r1, r1, r1
 8010a8a:	3c01      	subs	r4, #1
 8010a8c:	bf28      	it	cs
 8010a8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010a92:	d2e9      	bcs.n	8010a68 <__adddf3+0x10c>
 8010a94:	f091 0f00 	teq	r1, #0
 8010a98:	bf04      	itt	eq
 8010a9a:	4601      	moveq	r1, r0
 8010a9c:	2000      	moveq	r0, #0
 8010a9e:	fab1 f381 	clz	r3, r1
 8010aa2:	bf08      	it	eq
 8010aa4:	3320      	addeq	r3, #32
 8010aa6:	f1a3 030b 	sub.w	r3, r3, #11
 8010aaa:	f1b3 0220 	subs.w	r2, r3, #32
 8010aae:	da0c      	bge.n	8010aca <__adddf3+0x16e>
 8010ab0:	320c      	adds	r2, #12
 8010ab2:	dd08      	ble.n	8010ac6 <__adddf3+0x16a>
 8010ab4:	f102 0c14 	add.w	ip, r2, #20
 8010ab8:	f1c2 020c 	rsb	r2, r2, #12
 8010abc:	fa01 f00c 	lsl.w	r0, r1, ip
 8010ac0:	fa21 f102 	lsr.w	r1, r1, r2
 8010ac4:	e00c      	b.n	8010ae0 <__adddf3+0x184>
 8010ac6:	f102 0214 	add.w	r2, r2, #20
 8010aca:	bfd8      	it	le
 8010acc:	f1c2 0c20 	rsble	ip, r2, #32
 8010ad0:	fa01 f102 	lsl.w	r1, r1, r2
 8010ad4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010ad8:	bfdc      	itt	le
 8010ada:	ea41 010c 	orrle.w	r1, r1, ip
 8010ade:	4090      	lslle	r0, r2
 8010ae0:	1ae4      	subs	r4, r4, r3
 8010ae2:	bfa2      	ittt	ge
 8010ae4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010ae8:	4329      	orrge	r1, r5
 8010aea:	bd30      	popge	{r4, r5, pc}
 8010aec:	ea6f 0404 	mvn.w	r4, r4
 8010af0:	3c1f      	subs	r4, #31
 8010af2:	da1c      	bge.n	8010b2e <__adddf3+0x1d2>
 8010af4:	340c      	adds	r4, #12
 8010af6:	dc0e      	bgt.n	8010b16 <__adddf3+0x1ba>
 8010af8:	f104 0414 	add.w	r4, r4, #20
 8010afc:	f1c4 0220 	rsb	r2, r4, #32
 8010b00:	fa20 f004 	lsr.w	r0, r0, r4
 8010b04:	fa01 f302 	lsl.w	r3, r1, r2
 8010b08:	ea40 0003 	orr.w	r0, r0, r3
 8010b0c:	fa21 f304 	lsr.w	r3, r1, r4
 8010b10:	ea45 0103 	orr.w	r1, r5, r3
 8010b14:	bd30      	pop	{r4, r5, pc}
 8010b16:	f1c4 040c 	rsb	r4, r4, #12
 8010b1a:	f1c4 0220 	rsb	r2, r4, #32
 8010b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8010b22:	fa01 f304 	lsl.w	r3, r1, r4
 8010b26:	ea40 0003 	orr.w	r0, r0, r3
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	bd30      	pop	{r4, r5, pc}
 8010b2e:	fa21 f004 	lsr.w	r0, r1, r4
 8010b32:	4629      	mov	r1, r5
 8010b34:	bd30      	pop	{r4, r5, pc}
 8010b36:	f094 0f00 	teq	r4, #0
 8010b3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010b3e:	bf06      	itte	eq
 8010b40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010b44:	3401      	addeq	r4, #1
 8010b46:	3d01      	subne	r5, #1
 8010b48:	e74e      	b.n	80109e8 <__adddf3+0x8c>
 8010b4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010b4e:	bf18      	it	ne
 8010b50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010b54:	d029      	beq.n	8010baa <__adddf3+0x24e>
 8010b56:	ea94 0f05 	teq	r4, r5
 8010b5a:	bf08      	it	eq
 8010b5c:	ea90 0f02 	teqeq	r0, r2
 8010b60:	d005      	beq.n	8010b6e <__adddf3+0x212>
 8010b62:	ea54 0c00 	orrs.w	ip, r4, r0
 8010b66:	bf04      	itt	eq
 8010b68:	4619      	moveq	r1, r3
 8010b6a:	4610      	moveq	r0, r2
 8010b6c:	bd30      	pop	{r4, r5, pc}
 8010b6e:	ea91 0f03 	teq	r1, r3
 8010b72:	bf1e      	ittt	ne
 8010b74:	2100      	movne	r1, #0
 8010b76:	2000      	movne	r0, #0
 8010b78:	bd30      	popne	{r4, r5, pc}
 8010b7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010b7e:	d105      	bne.n	8010b8c <__adddf3+0x230>
 8010b80:	0040      	lsls	r0, r0, #1
 8010b82:	4149      	adcs	r1, r1
 8010b84:	bf28      	it	cs
 8010b86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010b8a:	bd30      	pop	{r4, r5, pc}
 8010b8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010b90:	bf3c      	itt	cc
 8010b92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010b96:	bd30      	popcc	{r4, r5, pc}
 8010b98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010b9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010ba0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ba4:	f04f 0000 	mov.w	r0, #0
 8010ba8:	bd30      	pop	{r4, r5, pc}
 8010baa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010bae:	bf1a      	itte	ne
 8010bb0:	4619      	movne	r1, r3
 8010bb2:	4610      	movne	r0, r2
 8010bb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010bb8:	bf1c      	itt	ne
 8010bba:	460b      	movne	r3, r1
 8010bbc:	4602      	movne	r2, r0
 8010bbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010bc2:	bf06      	itte	eq
 8010bc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010bc8:	ea91 0f03 	teqeq	r1, r3
 8010bcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010bd0:	bd30      	pop	{r4, r5, pc}
 8010bd2:	bf00      	nop

08010bd4 <__aeabi_ui2d>:
 8010bd4:	f090 0f00 	teq	r0, #0
 8010bd8:	bf04      	itt	eq
 8010bda:	2100      	moveq	r1, #0
 8010bdc:	4770      	bxeq	lr
 8010bde:	b530      	push	{r4, r5, lr}
 8010be0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010be4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010be8:	f04f 0500 	mov.w	r5, #0
 8010bec:	f04f 0100 	mov.w	r1, #0
 8010bf0:	e750      	b.n	8010a94 <__adddf3+0x138>
 8010bf2:	bf00      	nop

08010bf4 <__aeabi_i2d>:
 8010bf4:	f090 0f00 	teq	r0, #0
 8010bf8:	bf04      	itt	eq
 8010bfa:	2100      	moveq	r1, #0
 8010bfc:	4770      	bxeq	lr
 8010bfe:	b530      	push	{r4, r5, lr}
 8010c00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010c04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010c08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010c0c:	bf48      	it	mi
 8010c0e:	4240      	negmi	r0, r0
 8010c10:	f04f 0100 	mov.w	r1, #0
 8010c14:	e73e      	b.n	8010a94 <__adddf3+0x138>
 8010c16:	bf00      	nop

08010c18 <__aeabi_f2d>:
 8010c18:	0042      	lsls	r2, r0, #1
 8010c1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010c1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010c22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010c26:	bf1f      	itttt	ne
 8010c28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010c2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010c30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010c34:	4770      	bxne	lr
 8010c36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8010c3a:	bf08      	it	eq
 8010c3c:	4770      	bxeq	lr
 8010c3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010c42:	bf04      	itt	eq
 8010c44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010c48:	4770      	bxeq	lr
 8010c4a:	b530      	push	{r4, r5, lr}
 8010c4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010c54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010c58:	e71c      	b.n	8010a94 <__adddf3+0x138>
 8010c5a:	bf00      	nop

08010c5c <__aeabi_ul2d>:
 8010c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8010c60:	bf08      	it	eq
 8010c62:	4770      	bxeq	lr
 8010c64:	b530      	push	{r4, r5, lr}
 8010c66:	f04f 0500 	mov.w	r5, #0
 8010c6a:	e00a      	b.n	8010c82 <__aeabi_l2d+0x16>

08010c6c <__aeabi_l2d>:
 8010c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8010c70:	bf08      	it	eq
 8010c72:	4770      	bxeq	lr
 8010c74:	b530      	push	{r4, r5, lr}
 8010c76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010c7a:	d502      	bpl.n	8010c82 <__aeabi_l2d+0x16>
 8010c7c:	4240      	negs	r0, r0
 8010c7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010c82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010c86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010c8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010c8e:	f43f aed8 	beq.w	8010a42 <__adddf3+0xe6>
 8010c92:	f04f 0203 	mov.w	r2, #3
 8010c96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010c9a:	bf18      	it	ne
 8010c9c:	3203      	addne	r2, #3
 8010c9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010ca2:	bf18      	it	ne
 8010ca4:	3203      	addne	r2, #3
 8010ca6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010caa:	f1c2 0320 	rsb	r3, r2, #32
 8010cae:	fa00 fc03 	lsl.w	ip, r0, r3
 8010cb2:	fa20 f002 	lsr.w	r0, r0, r2
 8010cb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8010cba:	ea40 000e 	orr.w	r0, r0, lr
 8010cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8010cc2:	4414      	add	r4, r2
 8010cc4:	e6bd      	b.n	8010a42 <__adddf3+0xe6>
 8010cc6:	bf00      	nop

08010cc8 <__aeabi_dmul>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010cce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010cd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010cd6:	bf1d      	ittte	ne
 8010cd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010cdc:	ea94 0f0c 	teqne	r4, ip
 8010ce0:	ea95 0f0c 	teqne	r5, ip
 8010ce4:	f000 f8de 	bleq	8010ea4 <__aeabi_dmul+0x1dc>
 8010ce8:	442c      	add	r4, r5
 8010cea:	ea81 0603 	eor.w	r6, r1, r3
 8010cee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010cf2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010cf6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010cfa:	bf18      	it	ne
 8010cfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d08:	d038      	beq.n	8010d7c <__aeabi_dmul+0xb4>
 8010d0a:	fba0 ce02 	umull	ip, lr, r0, r2
 8010d0e:	f04f 0500 	mov.w	r5, #0
 8010d12:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010d16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010d1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010d1e:	f04f 0600 	mov.w	r6, #0
 8010d22:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010d26:	f09c 0f00 	teq	ip, #0
 8010d2a:	bf18      	it	ne
 8010d2c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010d30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010d34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010d38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010d3c:	d204      	bcs.n	8010d48 <__aeabi_dmul+0x80>
 8010d3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010d42:	416d      	adcs	r5, r5
 8010d44:	eb46 0606 	adc.w	r6, r6, r6
 8010d48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010d4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010d50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010d54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010d58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010d5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010d60:	bf88      	it	hi
 8010d62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010d66:	d81e      	bhi.n	8010da6 <__aeabi_dmul+0xde>
 8010d68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010d6c:	bf08      	it	eq
 8010d6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010d72:	f150 0000 	adcs.w	r0, r0, #0
 8010d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010d80:	ea46 0101 	orr.w	r1, r6, r1
 8010d84:	ea40 0002 	orr.w	r0, r0, r2
 8010d88:	ea81 0103 	eor.w	r1, r1, r3
 8010d8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010d90:	bfc2      	ittt	gt
 8010d92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010d96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010d9a:	bd70      	popgt	{r4, r5, r6, pc}
 8010d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010da0:	f04f 0e00 	mov.w	lr, #0
 8010da4:	3c01      	subs	r4, #1
 8010da6:	f300 80ab 	bgt.w	8010f00 <__aeabi_dmul+0x238>
 8010daa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010dae:	bfde      	ittt	le
 8010db0:	2000      	movle	r0, #0
 8010db2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010db6:	bd70      	pople	{r4, r5, r6, pc}
 8010db8:	f1c4 0400 	rsb	r4, r4, #0
 8010dbc:	3c20      	subs	r4, #32
 8010dbe:	da35      	bge.n	8010e2c <__aeabi_dmul+0x164>
 8010dc0:	340c      	adds	r4, #12
 8010dc2:	dc1b      	bgt.n	8010dfc <__aeabi_dmul+0x134>
 8010dc4:	f104 0414 	add.w	r4, r4, #20
 8010dc8:	f1c4 0520 	rsb	r5, r4, #32
 8010dcc:	fa00 f305 	lsl.w	r3, r0, r5
 8010dd0:	fa20 f004 	lsr.w	r0, r0, r4
 8010dd4:	fa01 f205 	lsl.w	r2, r1, r5
 8010dd8:	ea40 0002 	orr.w	r0, r0, r2
 8010ddc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010de4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010de8:	fa21 f604 	lsr.w	r6, r1, r4
 8010dec:	eb42 0106 	adc.w	r1, r2, r6
 8010df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010df4:	bf08      	it	eq
 8010df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	f1c4 040c 	rsb	r4, r4, #12
 8010e00:	f1c4 0520 	rsb	r5, r4, #32
 8010e04:	fa00 f304 	lsl.w	r3, r0, r4
 8010e08:	fa20 f005 	lsr.w	r0, r0, r5
 8010e0c:	fa01 f204 	lsl.w	r2, r1, r4
 8010e10:	ea40 0002 	orr.w	r0, r0, r2
 8010e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010e18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010e1c:	f141 0100 	adc.w	r1, r1, #0
 8010e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010e24:	bf08      	it	eq
 8010e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}
 8010e2c:	f1c4 0520 	rsb	r5, r4, #32
 8010e30:	fa00 f205 	lsl.w	r2, r0, r5
 8010e34:	ea4e 0e02 	orr.w	lr, lr, r2
 8010e38:	fa20 f304 	lsr.w	r3, r0, r4
 8010e3c:	fa01 f205 	lsl.w	r2, r1, r5
 8010e40:	ea43 0302 	orr.w	r3, r3, r2
 8010e44:	fa21 f004 	lsr.w	r0, r1, r4
 8010e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010e4c:	fa21 f204 	lsr.w	r2, r1, r4
 8010e50:	ea20 0002 	bic.w	r0, r0, r2
 8010e54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010e58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010e5c:	bf08      	it	eq
 8010e5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	f094 0f00 	teq	r4, #0
 8010e68:	d10f      	bne.n	8010e8a <__aeabi_dmul+0x1c2>
 8010e6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010e6e:	0040      	lsls	r0, r0, #1
 8010e70:	eb41 0101 	adc.w	r1, r1, r1
 8010e74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010e78:	bf08      	it	eq
 8010e7a:	3c01      	subeq	r4, #1
 8010e7c:	d0f7      	beq.n	8010e6e <__aeabi_dmul+0x1a6>
 8010e7e:	ea41 0106 	orr.w	r1, r1, r6
 8010e82:	f095 0f00 	teq	r5, #0
 8010e86:	bf18      	it	ne
 8010e88:	4770      	bxne	lr
 8010e8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010e8e:	0052      	lsls	r2, r2, #1
 8010e90:	eb43 0303 	adc.w	r3, r3, r3
 8010e94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010e98:	bf08      	it	eq
 8010e9a:	3d01      	subeq	r5, #1
 8010e9c:	d0f7      	beq.n	8010e8e <__aeabi_dmul+0x1c6>
 8010e9e:	ea43 0306 	orr.w	r3, r3, r6
 8010ea2:	4770      	bx	lr
 8010ea4:	ea94 0f0c 	teq	r4, ip
 8010ea8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010eac:	bf18      	it	ne
 8010eae:	ea95 0f0c 	teqne	r5, ip
 8010eb2:	d00c      	beq.n	8010ece <__aeabi_dmul+0x206>
 8010eb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010eb8:	bf18      	it	ne
 8010eba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010ebe:	d1d1      	bne.n	8010e64 <__aeabi_dmul+0x19c>
 8010ec0:	ea81 0103 	eor.w	r1, r1, r3
 8010ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010ec8:	f04f 0000 	mov.w	r0, #0
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010ed2:	bf06      	itte	eq
 8010ed4:	4610      	moveq	r0, r2
 8010ed6:	4619      	moveq	r1, r3
 8010ed8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010edc:	d019      	beq.n	8010f12 <__aeabi_dmul+0x24a>
 8010ede:	ea94 0f0c 	teq	r4, ip
 8010ee2:	d102      	bne.n	8010eea <__aeabi_dmul+0x222>
 8010ee4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010ee8:	d113      	bne.n	8010f12 <__aeabi_dmul+0x24a>
 8010eea:	ea95 0f0c 	teq	r5, ip
 8010eee:	d105      	bne.n	8010efc <__aeabi_dmul+0x234>
 8010ef0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010ef4:	bf1c      	itt	ne
 8010ef6:	4610      	movne	r0, r2
 8010ef8:	4619      	movne	r1, r3
 8010efa:	d10a      	bne.n	8010f12 <__aeabi_dmul+0x24a>
 8010efc:	ea81 0103 	eor.w	r1, r1, r3
 8010f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010f04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010f08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f0c:	f04f 0000 	mov.w	r0, #0
 8010f10:	bd70      	pop	{r4, r5, r6, pc}
 8010f12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010f16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}

08010f1c <__aeabi_ddiv>:
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010f2a:	bf1d      	ittte	ne
 8010f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010f30:	ea94 0f0c 	teqne	r4, ip
 8010f34:	ea95 0f0c 	teqne	r5, ip
 8010f38:	f000 f8a7 	bleq	801108a <__aeabi_ddiv+0x16e>
 8010f3c:	eba4 0405 	sub.w	r4, r4, r5
 8010f40:	ea81 0e03 	eor.w	lr, r1, r3
 8010f44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010f48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010f4c:	f000 8088 	beq.w	8011060 <__aeabi_ddiv+0x144>
 8010f50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010f54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010f58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010f5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010f60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010f64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010f68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010f6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010f70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010f74:	429d      	cmp	r5, r3
 8010f76:	bf08      	it	eq
 8010f78:	4296      	cmpeq	r6, r2
 8010f7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010f7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010f82:	d202      	bcs.n	8010f8a <__aeabi_ddiv+0x6e>
 8010f84:	085b      	lsrs	r3, r3, #1
 8010f86:	ea4f 0232 	mov.w	r2, r2, rrx
 8010f8a:	1ab6      	subs	r6, r6, r2
 8010f8c:	eb65 0503 	sbc.w	r5, r5, r3
 8010f90:	085b      	lsrs	r3, r3, #1
 8010f92:	ea4f 0232 	mov.w	r2, r2, rrx
 8010f96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010f9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010f9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fa6:	bf22      	ittt	cs
 8010fa8:	1ab6      	subcs	r6, r6, r2
 8010faa:	4675      	movcs	r5, lr
 8010fac:	ea40 000c 	orrcs.w	r0, r0, ip
 8010fb0:	085b      	lsrs	r3, r3, #1
 8010fb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fbe:	bf22      	ittt	cs
 8010fc0:	1ab6      	subcs	r6, r6, r2
 8010fc2:	4675      	movcs	r5, lr
 8010fc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010fc8:	085b      	lsrs	r3, r3, #1
 8010fca:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fce:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fd6:	bf22      	ittt	cs
 8010fd8:	1ab6      	subcs	r6, r6, r2
 8010fda:	4675      	movcs	r5, lr
 8010fdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010fe0:	085b      	lsrs	r3, r3, #1
 8010fe2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fe6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fee:	bf22      	ittt	cs
 8010ff0:	1ab6      	subcs	r6, r6, r2
 8010ff2:	4675      	movcs	r5, lr
 8010ff4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010ff8:	ea55 0e06 	orrs.w	lr, r5, r6
 8010ffc:	d018      	beq.n	8011030 <__aeabi_ddiv+0x114>
 8010ffe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011002:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8011006:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801100a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801100e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8011012:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011016:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801101a:	d1c0      	bne.n	8010f9e <__aeabi_ddiv+0x82>
 801101c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011020:	d10b      	bne.n	801103a <__aeabi_ddiv+0x11e>
 8011022:	ea41 0100 	orr.w	r1, r1, r0
 8011026:	f04f 0000 	mov.w	r0, #0
 801102a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801102e:	e7b6      	b.n	8010f9e <__aeabi_ddiv+0x82>
 8011030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011034:	bf04      	itt	eq
 8011036:	4301      	orreq	r1, r0
 8011038:	2000      	moveq	r0, #0
 801103a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801103e:	bf88      	it	hi
 8011040:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011044:	f63f aeaf 	bhi.w	8010da6 <__aeabi_dmul+0xde>
 8011048:	ebb5 0c03 	subs.w	ip, r5, r3
 801104c:	bf04      	itt	eq
 801104e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011056:	f150 0000 	adcs.w	r0, r0, #0
 801105a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8011064:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011068:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801106c:	bfc2      	ittt	gt
 801106e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011072:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011076:	bd70      	popgt	{r4, r5, r6, pc}
 8011078:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801107c:	f04f 0e00 	mov.w	lr, #0
 8011080:	3c01      	subs	r4, #1
 8011082:	e690      	b.n	8010da6 <__aeabi_dmul+0xde>
 8011084:	ea45 0e06 	orr.w	lr, r5, r6
 8011088:	e68d      	b.n	8010da6 <__aeabi_dmul+0xde>
 801108a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801108e:	ea94 0f0c 	teq	r4, ip
 8011092:	bf08      	it	eq
 8011094:	ea95 0f0c 	teqeq	r5, ip
 8011098:	f43f af3b 	beq.w	8010f12 <__aeabi_dmul+0x24a>
 801109c:	ea94 0f0c 	teq	r4, ip
 80110a0:	d10a      	bne.n	80110b8 <__aeabi_ddiv+0x19c>
 80110a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80110a6:	f47f af34 	bne.w	8010f12 <__aeabi_dmul+0x24a>
 80110aa:	ea95 0f0c 	teq	r5, ip
 80110ae:	f47f af25 	bne.w	8010efc <__aeabi_dmul+0x234>
 80110b2:	4610      	mov	r0, r2
 80110b4:	4619      	mov	r1, r3
 80110b6:	e72c      	b.n	8010f12 <__aeabi_dmul+0x24a>
 80110b8:	ea95 0f0c 	teq	r5, ip
 80110bc:	d106      	bne.n	80110cc <__aeabi_ddiv+0x1b0>
 80110be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80110c2:	f43f aefd 	beq.w	8010ec0 <__aeabi_dmul+0x1f8>
 80110c6:	4610      	mov	r0, r2
 80110c8:	4619      	mov	r1, r3
 80110ca:	e722      	b.n	8010f12 <__aeabi_dmul+0x24a>
 80110cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80110d0:	bf18      	it	ne
 80110d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80110d6:	f47f aec5 	bne.w	8010e64 <__aeabi_dmul+0x19c>
 80110da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80110de:	f47f af0d 	bne.w	8010efc <__aeabi_dmul+0x234>
 80110e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80110e6:	f47f aeeb 	bne.w	8010ec0 <__aeabi_dmul+0x1f8>
 80110ea:	e712      	b.n	8010f12 <__aeabi_dmul+0x24a>

080110ec <__gedf2>:
 80110ec:	f04f 3cff 	mov.w	ip, #4294967295
 80110f0:	e006      	b.n	8011100 <__cmpdf2+0x4>
 80110f2:	bf00      	nop

080110f4 <__ledf2>:
 80110f4:	f04f 0c01 	mov.w	ip, #1
 80110f8:	e002      	b.n	8011100 <__cmpdf2+0x4>
 80110fa:	bf00      	nop

080110fc <__cmpdf2>:
 80110fc:	f04f 0c01 	mov.w	ip, #1
 8011100:	f84d cd04 	str.w	ip, [sp, #-4]!
 8011104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801110c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011110:	bf18      	it	ne
 8011112:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8011116:	d01b      	beq.n	8011150 <__cmpdf2+0x54>
 8011118:	b001      	add	sp, #4
 801111a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801111e:	bf0c      	ite	eq
 8011120:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8011124:	ea91 0f03 	teqne	r1, r3
 8011128:	bf02      	ittt	eq
 801112a:	ea90 0f02 	teqeq	r0, r2
 801112e:	2000      	moveq	r0, #0
 8011130:	4770      	bxeq	lr
 8011132:	f110 0f00 	cmn.w	r0, #0
 8011136:	ea91 0f03 	teq	r1, r3
 801113a:	bf58      	it	pl
 801113c:	4299      	cmppl	r1, r3
 801113e:	bf08      	it	eq
 8011140:	4290      	cmpeq	r0, r2
 8011142:	bf2c      	ite	cs
 8011144:	17d8      	asrcs	r0, r3, #31
 8011146:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801114a:	f040 0001 	orr.w	r0, r0, #1
 801114e:	4770      	bx	lr
 8011150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011158:	d102      	bne.n	8011160 <__cmpdf2+0x64>
 801115a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801115e:	d107      	bne.n	8011170 <__cmpdf2+0x74>
 8011160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011168:	d1d6      	bne.n	8011118 <__cmpdf2+0x1c>
 801116a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801116e:	d0d3      	beq.n	8011118 <__cmpdf2+0x1c>
 8011170:	f85d 0b04 	ldr.w	r0, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop

08011178 <__aeabi_cdrcmple>:
 8011178:	4684      	mov	ip, r0
 801117a:	4610      	mov	r0, r2
 801117c:	4662      	mov	r2, ip
 801117e:	468c      	mov	ip, r1
 8011180:	4619      	mov	r1, r3
 8011182:	4663      	mov	r3, ip
 8011184:	e000      	b.n	8011188 <__aeabi_cdcmpeq>
 8011186:	bf00      	nop

08011188 <__aeabi_cdcmpeq>:
 8011188:	b501      	push	{r0, lr}
 801118a:	f7ff ffb7 	bl	80110fc <__cmpdf2>
 801118e:	2800      	cmp	r0, #0
 8011190:	bf48      	it	mi
 8011192:	f110 0f00 	cmnmi.w	r0, #0
 8011196:	bd01      	pop	{r0, pc}

08011198 <__aeabi_dcmpeq>:
 8011198:	f84d ed08 	str.w	lr, [sp, #-8]!
 801119c:	f7ff fff4 	bl	8011188 <__aeabi_cdcmpeq>
 80111a0:	bf0c      	ite	eq
 80111a2:	2001      	moveq	r0, #1
 80111a4:	2000      	movne	r0, #0
 80111a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80111aa:	bf00      	nop

080111ac <__aeabi_dcmplt>:
 80111ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111b0:	f7ff ffea 	bl	8011188 <__aeabi_cdcmpeq>
 80111b4:	bf34      	ite	cc
 80111b6:	2001      	movcc	r0, #1
 80111b8:	2000      	movcs	r0, #0
 80111ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80111be:	bf00      	nop

080111c0 <__aeabi_dcmple>:
 80111c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111c4:	f7ff ffe0 	bl	8011188 <__aeabi_cdcmpeq>
 80111c8:	bf94      	ite	ls
 80111ca:	2001      	movls	r0, #1
 80111cc:	2000      	movhi	r0, #0
 80111ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80111d2:	bf00      	nop

080111d4 <__aeabi_dcmpge>:
 80111d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111d8:	f7ff ffce 	bl	8011178 <__aeabi_cdrcmple>
 80111dc:	bf94      	ite	ls
 80111de:	2001      	movls	r0, #1
 80111e0:	2000      	movhi	r0, #0
 80111e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80111e6:	bf00      	nop

080111e8 <__aeabi_dcmpgt>:
 80111e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111ec:	f7ff ffc4 	bl	8011178 <__aeabi_cdrcmple>
 80111f0:	bf34      	ite	cc
 80111f2:	2001      	movcc	r0, #1
 80111f4:	2000      	movcs	r0, #0
 80111f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80111fa:	bf00      	nop

080111fc <__aeabi_dcmpun>:
 80111fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011200:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011204:	d102      	bne.n	801120c <__aeabi_dcmpun+0x10>
 8011206:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801120a:	d10a      	bne.n	8011222 <__aeabi_dcmpun+0x26>
 801120c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011210:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011214:	d102      	bne.n	801121c <__aeabi_dcmpun+0x20>
 8011216:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801121a:	d102      	bne.n	8011222 <__aeabi_dcmpun+0x26>
 801121c:	f04f 0000 	mov.w	r0, #0
 8011220:	4770      	bx	lr
 8011222:	f04f 0001 	mov.w	r0, #1
 8011226:	4770      	bx	lr

08011228 <__aeabi_d2iz>:
 8011228:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801122c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011230:	d215      	bcs.n	801125e <__aeabi_d2iz+0x36>
 8011232:	d511      	bpl.n	8011258 <__aeabi_d2iz+0x30>
 8011234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801123c:	d912      	bls.n	8011264 <__aeabi_d2iz+0x3c>
 801123e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801124a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801124e:	fa23 f002 	lsr.w	r0, r3, r2
 8011252:	bf18      	it	ne
 8011254:	4240      	negne	r0, r0
 8011256:	4770      	bx	lr
 8011258:	f04f 0000 	mov.w	r0, #0
 801125c:	4770      	bx	lr
 801125e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011262:	d105      	bne.n	8011270 <__aeabi_d2iz+0x48>
 8011264:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8011268:	bf08      	it	eq
 801126a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801126e:	4770      	bx	lr
 8011270:	f04f 0000 	mov.w	r0, #0
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop

08011278 <__aeabi_d2uiz>:
 8011278:	004a      	lsls	r2, r1, #1
 801127a:	d211      	bcs.n	80112a0 <__aeabi_d2uiz+0x28>
 801127c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011280:	d211      	bcs.n	80112a6 <__aeabi_d2uiz+0x2e>
 8011282:	d50d      	bpl.n	80112a0 <__aeabi_d2uiz+0x28>
 8011284:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011288:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801128c:	d40e      	bmi.n	80112ac <__aeabi_d2uiz+0x34>
 801128e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011296:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801129a:	fa23 f002 	lsr.w	r0, r3, r2
 801129e:	4770      	bx	lr
 80112a0:	f04f 0000 	mov.w	r0, #0
 80112a4:	4770      	bx	lr
 80112a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80112aa:	d102      	bne.n	80112b2 <__aeabi_d2uiz+0x3a>
 80112ac:	f04f 30ff 	mov.w	r0, #4294967295
 80112b0:	4770      	bx	lr
 80112b2:	f04f 0000 	mov.w	r0, #0
 80112b6:	4770      	bx	lr

080112b8 <__aeabi_d2f>:
 80112b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80112bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80112c0:	bf24      	itt	cs
 80112c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80112c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80112ca:	d90d      	bls.n	80112e8 <__aeabi_d2f+0x30>
 80112cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80112d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80112d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80112d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80112dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80112e0:	bf08      	it	eq
 80112e2:	f020 0001 	biceq.w	r0, r0, #1
 80112e6:	4770      	bx	lr
 80112e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80112ec:	d121      	bne.n	8011332 <__aeabi_d2f+0x7a>
 80112ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80112f2:	bfbc      	itt	lt
 80112f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80112f8:	4770      	bxlt	lr
 80112fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80112fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8011302:	f1c2 0218 	rsb	r2, r2, #24
 8011306:	f1c2 0c20 	rsb	ip, r2, #32
 801130a:	fa10 f30c 	lsls.w	r3, r0, ip
 801130e:	fa20 f002 	lsr.w	r0, r0, r2
 8011312:	bf18      	it	ne
 8011314:	f040 0001 	orrne.w	r0, r0, #1
 8011318:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801131c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011320:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011324:	ea40 000c 	orr.w	r0, r0, ip
 8011328:	fa23 f302 	lsr.w	r3, r3, r2
 801132c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011330:	e7cc      	b.n	80112cc <__aeabi_d2f+0x14>
 8011332:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8011336:	d107      	bne.n	8011348 <__aeabi_d2f+0x90>
 8011338:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801133c:	bf1e      	ittt	ne
 801133e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8011342:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8011346:	4770      	bxne	lr
 8011348:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801134c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8011350:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <__aeabi_uldivmod>:
 8011358:	b953      	cbnz	r3, 8011370 <__aeabi_uldivmod+0x18>
 801135a:	b94a      	cbnz	r2, 8011370 <__aeabi_uldivmod+0x18>
 801135c:	2900      	cmp	r1, #0
 801135e:	bf08      	it	eq
 8011360:	2800      	cmpeq	r0, #0
 8011362:	bf1c      	itt	ne
 8011364:	f04f 31ff 	movne.w	r1, #4294967295
 8011368:	f04f 30ff 	movne.w	r0, #4294967295
 801136c:	f000 b9aa 	b.w	80116c4 <__aeabi_idiv0>
 8011370:	f1ad 0c08 	sub.w	ip, sp, #8
 8011374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8011378:	f000 f83c 	bl	80113f4 <__udivmoddi4>
 801137c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011384:	b004      	add	sp, #16
 8011386:	4770      	bx	lr

08011388 <__aeabi_d2lz>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	2200      	movs	r2, #0
 801138c:	2300      	movs	r3, #0
 801138e:	4604      	mov	r4, r0
 8011390:	460d      	mov	r5, r1
 8011392:	f7ff ff0b 	bl	80111ac <__aeabi_dcmplt>
 8011396:	b928      	cbnz	r0, 80113a4 <__aeabi_d2lz+0x1c>
 8011398:	4620      	mov	r0, r4
 801139a:	4629      	mov	r1, r5
 801139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a0:	f000 b80a 	b.w	80113b8 <__aeabi_d2ulz>
 80113a4:	4620      	mov	r0, r4
 80113a6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80113aa:	f000 f805 	bl	80113b8 <__aeabi_d2ulz>
 80113ae:	4240      	negs	r0, r0
 80113b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80113b4:	bd38      	pop	{r3, r4, r5, pc}
 80113b6:	bf00      	nop

080113b8 <__aeabi_d2ulz>:
 80113b8:	b5d0      	push	{r4, r6, r7, lr}
 80113ba:	4b0c      	ldr	r3, [pc, #48]	; (80113ec <__aeabi_d2ulz+0x34>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4606      	mov	r6, r0
 80113c0:	460f      	mov	r7, r1
 80113c2:	f7ff fc81 	bl	8010cc8 <__aeabi_dmul>
 80113c6:	f7ff ff57 	bl	8011278 <__aeabi_d2uiz>
 80113ca:	4604      	mov	r4, r0
 80113cc:	f7ff fc02 	bl	8010bd4 <__aeabi_ui2d>
 80113d0:	4b07      	ldr	r3, [pc, #28]	; (80113f0 <__aeabi_d2ulz+0x38>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	f7ff fc78 	bl	8010cc8 <__aeabi_dmul>
 80113d8:	4602      	mov	r2, r0
 80113da:	460b      	mov	r3, r1
 80113dc:	4630      	mov	r0, r6
 80113de:	4639      	mov	r1, r7
 80113e0:	f7ff faba 	bl	8010958 <__aeabi_dsub>
 80113e4:	f7ff ff48 	bl	8011278 <__aeabi_d2uiz>
 80113e8:	4621      	mov	r1, r4
 80113ea:	bdd0      	pop	{r4, r6, r7, pc}
 80113ec:	3df00000 	.word	0x3df00000
 80113f0:	41f00000 	.word	0x41f00000

080113f4 <__udivmoddi4>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	9d08      	ldr	r5, [sp, #32]
 80113fa:	4604      	mov	r4, r0
 80113fc:	468e      	mov	lr, r1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d14d      	bne.n	801149e <__udivmoddi4+0xaa>
 8011402:	428a      	cmp	r2, r1
 8011404:	4694      	mov	ip, r2
 8011406:	d969      	bls.n	80114dc <__udivmoddi4+0xe8>
 8011408:	fab2 f282 	clz	r2, r2
 801140c:	b152      	cbz	r2, 8011424 <__udivmoddi4+0x30>
 801140e:	fa01 f302 	lsl.w	r3, r1, r2
 8011412:	f1c2 0120 	rsb	r1, r2, #32
 8011416:	fa20 f101 	lsr.w	r1, r0, r1
 801141a:	fa0c fc02 	lsl.w	ip, ip, r2
 801141e:	ea41 0e03 	orr.w	lr, r1, r3
 8011422:	4094      	lsls	r4, r2
 8011424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011428:	0c21      	lsrs	r1, r4, #16
 801142a:	fbbe f6f8 	udiv	r6, lr, r8
 801142e:	fa1f f78c 	uxth.w	r7, ip
 8011432:	fb08 e316 	mls	r3, r8, r6, lr
 8011436:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801143a:	fb06 f107 	mul.w	r1, r6, r7
 801143e:	4299      	cmp	r1, r3
 8011440:	d90a      	bls.n	8011458 <__udivmoddi4+0x64>
 8011442:	eb1c 0303 	adds.w	r3, ip, r3
 8011446:	f106 30ff 	add.w	r0, r6, #4294967295
 801144a:	f080 811f 	bcs.w	801168c <__udivmoddi4+0x298>
 801144e:	4299      	cmp	r1, r3
 8011450:	f240 811c 	bls.w	801168c <__udivmoddi4+0x298>
 8011454:	3e02      	subs	r6, #2
 8011456:	4463      	add	r3, ip
 8011458:	1a5b      	subs	r3, r3, r1
 801145a:	b2a4      	uxth	r4, r4
 801145c:	fbb3 f0f8 	udiv	r0, r3, r8
 8011460:	fb08 3310 	mls	r3, r8, r0, r3
 8011464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011468:	fb00 f707 	mul.w	r7, r0, r7
 801146c:	42a7      	cmp	r7, r4
 801146e:	d90a      	bls.n	8011486 <__udivmoddi4+0x92>
 8011470:	eb1c 0404 	adds.w	r4, ip, r4
 8011474:	f100 33ff 	add.w	r3, r0, #4294967295
 8011478:	f080 810a 	bcs.w	8011690 <__udivmoddi4+0x29c>
 801147c:	42a7      	cmp	r7, r4
 801147e:	f240 8107 	bls.w	8011690 <__udivmoddi4+0x29c>
 8011482:	4464      	add	r4, ip
 8011484:	3802      	subs	r0, #2
 8011486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801148a:	1be4      	subs	r4, r4, r7
 801148c:	2600      	movs	r6, #0
 801148e:	b11d      	cbz	r5, 8011498 <__udivmoddi4+0xa4>
 8011490:	40d4      	lsrs	r4, r2
 8011492:	2300      	movs	r3, #0
 8011494:	e9c5 4300 	strd	r4, r3, [r5]
 8011498:	4631      	mov	r1, r6
 801149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149e:	428b      	cmp	r3, r1
 80114a0:	d909      	bls.n	80114b6 <__udivmoddi4+0xc2>
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	f000 80ef 	beq.w	8011686 <__udivmoddi4+0x292>
 80114a8:	2600      	movs	r6, #0
 80114aa:	e9c5 0100 	strd	r0, r1, [r5]
 80114ae:	4630      	mov	r0, r6
 80114b0:	4631      	mov	r1, r6
 80114b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b6:	fab3 f683 	clz	r6, r3
 80114ba:	2e00      	cmp	r6, #0
 80114bc:	d14a      	bne.n	8011554 <__udivmoddi4+0x160>
 80114be:	428b      	cmp	r3, r1
 80114c0:	d302      	bcc.n	80114c8 <__udivmoddi4+0xd4>
 80114c2:	4282      	cmp	r2, r0
 80114c4:	f200 80f9 	bhi.w	80116ba <__udivmoddi4+0x2c6>
 80114c8:	1a84      	subs	r4, r0, r2
 80114ca:	eb61 0303 	sbc.w	r3, r1, r3
 80114ce:	2001      	movs	r0, #1
 80114d0:	469e      	mov	lr, r3
 80114d2:	2d00      	cmp	r5, #0
 80114d4:	d0e0      	beq.n	8011498 <__udivmoddi4+0xa4>
 80114d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80114da:	e7dd      	b.n	8011498 <__udivmoddi4+0xa4>
 80114dc:	b902      	cbnz	r2, 80114e0 <__udivmoddi4+0xec>
 80114de:	deff      	udf	#255	; 0xff
 80114e0:	fab2 f282 	clz	r2, r2
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	f040 8092 	bne.w	801160e <__udivmoddi4+0x21a>
 80114ea:	eba1 010c 	sub.w	r1, r1, ip
 80114ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80114f2:	fa1f fe8c 	uxth.w	lr, ip
 80114f6:	2601      	movs	r6, #1
 80114f8:	0c20      	lsrs	r0, r4, #16
 80114fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80114fe:	fb07 1113 	mls	r1, r7, r3, r1
 8011502:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011506:	fb0e f003 	mul.w	r0, lr, r3
 801150a:	4288      	cmp	r0, r1
 801150c:	d908      	bls.n	8011520 <__udivmoddi4+0x12c>
 801150e:	eb1c 0101 	adds.w	r1, ip, r1
 8011512:	f103 38ff 	add.w	r8, r3, #4294967295
 8011516:	d202      	bcs.n	801151e <__udivmoddi4+0x12a>
 8011518:	4288      	cmp	r0, r1
 801151a:	f200 80cb 	bhi.w	80116b4 <__udivmoddi4+0x2c0>
 801151e:	4643      	mov	r3, r8
 8011520:	1a09      	subs	r1, r1, r0
 8011522:	b2a4      	uxth	r4, r4
 8011524:	fbb1 f0f7 	udiv	r0, r1, r7
 8011528:	fb07 1110 	mls	r1, r7, r0, r1
 801152c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8011530:	fb0e fe00 	mul.w	lr, lr, r0
 8011534:	45a6      	cmp	lr, r4
 8011536:	d908      	bls.n	801154a <__udivmoddi4+0x156>
 8011538:	eb1c 0404 	adds.w	r4, ip, r4
 801153c:	f100 31ff 	add.w	r1, r0, #4294967295
 8011540:	d202      	bcs.n	8011548 <__udivmoddi4+0x154>
 8011542:	45a6      	cmp	lr, r4
 8011544:	f200 80bb 	bhi.w	80116be <__udivmoddi4+0x2ca>
 8011548:	4608      	mov	r0, r1
 801154a:	eba4 040e 	sub.w	r4, r4, lr
 801154e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8011552:	e79c      	b.n	801148e <__udivmoddi4+0x9a>
 8011554:	f1c6 0720 	rsb	r7, r6, #32
 8011558:	40b3      	lsls	r3, r6
 801155a:	fa22 fc07 	lsr.w	ip, r2, r7
 801155e:	ea4c 0c03 	orr.w	ip, ip, r3
 8011562:	fa20 f407 	lsr.w	r4, r0, r7
 8011566:	fa01 f306 	lsl.w	r3, r1, r6
 801156a:	431c      	orrs	r4, r3
 801156c:	40f9      	lsrs	r1, r7
 801156e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8011572:	fa00 f306 	lsl.w	r3, r0, r6
 8011576:	fbb1 f8f9 	udiv	r8, r1, r9
 801157a:	0c20      	lsrs	r0, r4, #16
 801157c:	fa1f fe8c 	uxth.w	lr, ip
 8011580:	fb09 1118 	mls	r1, r9, r8, r1
 8011584:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011588:	fb08 f00e 	mul.w	r0, r8, lr
 801158c:	4288      	cmp	r0, r1
 801158e:	fa02 f206 	lsl.w	r2, r2, r6
 8011592:	d90b      	bls.n	80115ac <__udivmoddi4+0x1b8>
 8011594:	eb1c 0101 	adds.w	r1, ip, r1
 8011598:	f108 3aff 	add.w	sl, r8, #4294967295
 801159c:	f080 8088 	bcs.w	80116b0 <__udivmoddi4+0x2bc>
 80115a0:	4288      	cmp	r0, r1
 80115a2:	f240 8085 	bls.w	80116b0 <__udivmoddi4+0x2bc>
 80115a6:	f1a8 0802 	sub.w	r8, r8, #2
 80115aa:	4461      	add	r1, ip
 80115ac:	1a09      	subs	r1, r1, r0
 80115ae:	b2a4      	uxth	r4, r4
 80115b0:	fbb1 f0f9 	udiv	r0, r1, r9
 80115b4:	fb09 1110 	mls	r1, r9, r0, r1
 80115b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80115bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80115c0:	458e      	cmp	lr, r1
 80115c2:	d908      	bls.n	80115d6 <__udivmoddi4+0x1e2>
 80115c4:	eb1c 0101 	adds.w	r1, ip, r1
 80115c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80115cc:	d26c      	bcs.n	80116a8 <__udivmoddi4+0x2b4>
 80115ce:	458e      	cmp	lr, r1
 80115d0:	d96a      	bls.n	80116a8 <__udivmoddi4+0x2b4>
 80115d2:	3802      	subs	r0, #2
 80115d4:	4461      	add	r1, ip
 80115d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80115da:	fba0 9402 	umull	r9, r4, r0, r2
 80115de:	eba1 010e 	sub.w	r1, r1, lr
 80115e2:	42a1      	cmp	r1, r4
 80115e4:	46c8      	mov	r8, r9
 80115e6:	46a6      	mov	lr, r4
 80115e8:	d356      	bcc.n	8011698 <__udivmoddi4+0x2a4>
 80115ea:	d053      	beq.n	8011694 <__udivmoddi4+0x2a0>
 80115ec:	b15d      	cbz	r5, 8011606 <__udivmoddi4+0x212>
 80115ee:	ebb3 0208 	subs.w	r2, r3, r8
 80115f2:	eb61 010e 	sbc.w	r1, r1, lr
 80115f6:	fa01 f707 	lsl.w	r7, r1, r7
 80115fa:	fa22 f306 	lsr.w	r3, r2, r6
 80115fe:	40f1      	lsrs	r1, r6
 8011600:	431f      	orrs	r7, r3
 8011602:	e9c5 7100 	strd	r7, r1, [r5]
 8011606:	2600      	movs	r6, #0
 8011608:	4631      	mov	r1, r6
 801160a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160e:	f1c2 0320 	rsb	r3, r2, #32
 8011612:	40d8      	lsrs	r0, r3
 8011614:	fa0c fc02 	lsl.w	ip, ip, r2
 8011618:	fa21 f303 	lsr.w	r3, r1, r3
 801161c:	4091      	lsls	r1, r2
 801161e:	4301      	orrs	r1, r0
 8011620:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011624:	fa1f fe8c 	uxth.w	lr, ip
 8011628:	fbb3 f0f7 	udiv	r0, r3, r7
 801162c:	fb07 3610 	mls	r6, r7, r0, r3
 8011630:	0c0b      	lsrs	r3, r1, #16
 8011632:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011636:	fb00 f60e 	mul.w	r6, r0, lr
 801163a:	429e      	cmp	r6, r3
 801163c:	fa04 f402 	lsl.w	r4, r4, r2
 8011640:	d908      	bls.n	8011654 <__udivmoddi4+0x260>
 8011642:	eb1c 0303 	adds.w	r3, ip, r3
 8011646:	f100 38ff 	add.w	r8, r0, #4294967295
 801164a:	d22f      	bcs.n	80116ac <__udivmoddi4+0x2b8>
 801164c:	429e      	cmp	r6, r3
 801164e:	d92d      	bls.n	80116ac <__udivmoddi4+0x2b8>
 8011650:	3802      	subs	r0, #2
 8011652:	4463      	add	r3, ip
 8011654:	1b9b      	subs	r3, r3, r6
 8011656:	b289      	uxth	r1, r1
 8011658:	fbb3 f6f7 	udiv	r6, r3, r7
 801165c:	fb07 3316 	mls	r3, r7, r6, r3
 8011660:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011664:	fb06 f30e 	mul.w	r3, r6, lr
 8011668:	428b      	cmp	r3, r1
 801166a:	d908      	bls.n	801167e <__udivmoddi4+0x28a>
 801166c:	eb1c 0101 	adds.w	r1, ip, r1
 8011670:	f106 38ff 	add.w	r8, r6, #4294967295
 8011674:	d216      	bcs.n	80116a4 <__udivmoddi4+0x2b0>
 8011676:	428b      	cmp	r3, r1
 8011678:	d914      	bls.n	80116a4 <__udivmoddi4+0x2b0>
 801167a:	3e02      	subs	r6, #2
 801167c:	4461      	add	r1, ip
 801167e:	1ac9      	subs	r1, r1, r3
 8011680:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8011684:	e738      	b.n	80114f8 <__udivmoddi4+0x104>
 8011686:	462e      	mov	r6, r5
 8011688:	4628      	mov	r0, r5
 801168a:	e705      	b.n	8011498 <__udivmoddi4+0xa4>
 801168c:	4606      	mov	r6, r0
 801168e:	e6e3      	b.n	8011458 <__udivmoddi4+0x64>
 8011690:	4618      	mov	r0, r3
 8011692:	e6f8      	b.n	8011486 <__udivmoddi4+0x92>
 8011694:	454b      	cmp	r3, r9
 8011696:	d2a9      	bcs.n	80115ec <__udivmoddi4+0x1f8>
 8011698:	ebb9 0802 	subs.w	r8, r9, r2
 801169c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80116a0:	3801      	subs	r0, #1
 80116a2:	e7a3      	b.n	80115ec <__udivmoddi4+0x1f8>
 80116a4:	4646      	mov	r6, r8
 80116a6:	e7ea      	b.n	801167e <__udivmoddi4+0x28a>
 80116a8:	4620      	mov	r0, r4
 80116aa:	e794      	b.n	80115d6 <__udivmoddi4+0x1e2>
 80116ac:	4640      	mov	r0, r8
 80116ae:	e7d1      	b.n	8011654 <__udivmoddi4+0x260>
 80116b0:	46d0      	mov	r8, sl
 80116b2:	e77b      	b.n	80115ac <__udivmoddi4+0x1b8>
 80116b4:	3b02      	subs	r3, #2
 80116b6:	4461      	add	r1, ip
 80116b8:	e732      	b.n	8011520 <__udivmoddi4+0x12c>
 80116ba:	4630      	mov	r0, r6
 80116bc:	e709      	b.n	80114d2 <__udivmoddi4+0xde>
 80116be:	4464      	add	r4, ip
 80116c0:	3802      	subs	r0, #2
 80116c2:	e742      	b.n	801154a <__udivmoddi4+0x156>

080116c4 <__aeabi_idiv0>:
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <apInit>:

menu_t menu;
sensor_t sensor;

void apInit(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
	//cliOpen(_DEF_UART1, 57600);
	uartOpen(_DEF_UART1, 57600);
 80116cc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80116d0:	2000      	movs	r0, #0
 80116d2:	f006 fd11 	bl	80180f8 <uartOpen>
	//menuSetCallBack(lcdMain);
	cliAdd("boot", cliBoot);
 80116d6:	4916      	ldr	r1, [pc, #88]	; (8011730 <apInit+0x68>)
 80116d8:	4816      	ldr	r0, [pc, #88]	; (8011734 <apInit+0x6c>)
 80116da:	f002 f8d5 	bl	8013888 <cliAdd>
	menuInit();
 80116de:	f000 f879 	bl	80117d4 <menuInit>
	Mode = Menual_Mode;
 80116e2:	4b15      	ldr	r3, [pc, #84]	; (8011738 <apInit+0x70>)
 80116e4:	2201      	movs	r2, #1
 80116e6:	701a      	strb	r2, [r3, #0]
	sensor.setting_cnt = 3;
 80116e8:	4b14      	ldr	r3, [pc, #80]	; (801173c <apInit+0x74>)
 80116ea:	2203      	movs	r2, #3
 80116ec:	759a      	strb	r2, [r3, #22]
	sensor.setting_index = 0;
 80116ee:	4b13      	ldr	r3, [pc, #76]	; (801173c <apInit+0x74>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	75da      	strb	r2, [r3, #23]
	sensor.setting = false;
 80116f4:	4b11      	ldr	r3, [pc, #68]	; (801173c <apInit+0x74>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	751a      	strb	r2, [r3, #20]
	sensor.setting_mode = false;
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <apInit+0x74>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	755a      	strb	r2, [r3, #21]
	sensor.ds18b20_temp_setting = 25.0;
 8011700:	4b0e      	ldr	r3, [pc, #56]	; (801173c <apInit+0x74>)
 8011702:	4a0f      	ldr	r2, [pc, #60]	; (8011740 <apInit+0x78>)
 8011704:	619a      	str	r2, [r3, #24]
	sensor.water_level_setting = 30;
 8011706:	4b0d      	ldr	r3, [pc, #52]	; (801173c <apInit+0x74>)
 8011708:	221e      	movs	r2, #30
 801170a:	621a      	str	r2, [r3, #32]
	sensor.water_tank_height  = 50;
 801170c:	4b0b      	ldr	r3, [pc, #44]	; (801173c <apInit+0x74>)
 801170e:	2232      	movs	r2, #50	; 0x32
 8011710:	609a      	str	r2, [r3, #8]
	sensor.water_temp_deadband = 2;
 8011712:	4b0a      	ldr	r3, [pc, #40]	; (801173c <apInit+0x74>)
 8011714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011718:	61da      	str	r2, [r3, #28]
	sensor.water_level_deadband = 5;
 801171a:	4b08      	ldr	r3, [pc, #32]	; (801173c <apInit+0x74>)
 801171c:	2205      	movs	r2, #5
 801171e:	625a      	str	r2, [r3, #36]	; 0x24
	sensor.water_quality_setting = 10.0;
 8011720:	4b06      	ldr	r3, [pc, #24]	; (801173c <apInit+0x74>)
 8011722:	4a08      	ldr	r2, [pc, #32]	; (8011744 <apInit+0x7c>)
 8011724:	629a      	str	r2, [r3, #40]	; 0x28
	sensor.water_quality_deadband = 5;
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <apInit+0x74>)
 8011728:	4a07      	ldr	r2, [pc, #28]	; (8011748 <apInit+0x80>)
 801172a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801172c:	bf00      	nop
 801172e:	bd80      	pop	{r7, pc}
 8011730:	08012831 	.word	0x08012831
 8011734:	08029540 	.word	0x08029540
 8011738:	200002dc 	.word	0x200002dc
 801173c:	20000364 	.word	0x20000364
 8011740:	41c80000 	.word	0x41c80000
 8011744:	41200000 	.word	0x41200000
 8011748:	40a00000 	.word	0x40a00000

0801174c <apMain>:

void apMain(void)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8011752:	f001 f90c 	bl	801296e <millis>
 8011756:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8011758:	f001 f909 	bl	801296e <millis>
 801175c:	4602      	mov	r2, r0
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	1ad3      	subs	r3, r2, r3
 8011762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011766:	d302      	bcc.n	801176e <apMain+0x22>
    {
      pre_time = millis();
 8011768:	f001 f901 	bl	801296e <millis>
 801176c:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 801176e:	f000 f805 	bl	801177c <sensorMain>
    //cliMain();
    menuUpdate();
 8011772:	f000 f879 	bl	8011868 <menuUpdate>
    SerialCom();
 8011776:	f006 fab7 	bl	8017ce8 <SerialCom>
    if (millis()-pre_time >= 1000)
 801177a:	e7ed      	b.n	8011758 <apMain+0xc>

0801177c <sensorMain>:
  }
}

void sensorMain(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 8011780:	f002 fa2e 	bl	8013be0 <Ds18b20_ManualConvert>
    Sonar_measure();
 8011784:	f005 fb70 	bl	8016e68 <Sonar_measure>
    tds_measure();
 8011788:	f006 f836 	bl	80177f8 <tds_measure>
    sensor.ds18b20_temp = ds18b20[0].Temperature;
 801178c:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <sensorMain+0x44>)
 801178e:	689b      	ldr	r3, [r3, #8]
 8011790:	4a0c      	ldr	r2, [pc, #48]	; (80117c4 <sensorMain+0x48>)
 8011792:	6013      	str	r3, [r2, #0]
	sensor.sonar_distance = sonar_tbl[0].filter_distance_cm/10;
 8011794:	4b0c      	ldr	r3, [pc, #48]	; (80117c8 <sensorMain+0x4c>)
 8011796:	699b      	ldr	r3, [r3, #24]
 8011798:	4a0c      	ldr	r2, [pc, #48]	; (80117cc <sensorMain+0x50>)
 801179a:	fba2 2303 	umull	r2, r3, r2, r3
 801179e:	08db      	lsrs	r3, r3, #3
 80117a0:	4a08      	ldr	r2, [pc, #32]	; (80117c4 <sensorMain+0x48>)
 80117a2:	6053      	str	r3, [r2, #4]
	sensor.water_level = sensor.water_tank_height - sensor.sonar_distance;
 80117a4:	4b07      	ldr	r3, [pc, #28]	; (80117c4 <sensorMain+0x48>)
 80117a6:	689a      	ldr	r2, [r3, #8]
 80117a8:	4b06      	ldr	r3, [pc, #24]	; (80117c4 <sensorMain+0x48>)
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	4a05      	ldr	r2, [pc, #20]	; (80117c4 <sensorMain+0x48>)
 80117b0:	60d3      	str	r3, [r2, #12]
	sensor.water_quality = tds_tbl[0].filter_tdsValue;
 80117b2:	4b07      	ldr	r3, [pc, #28]	; (80117d0 <sensorMain+0x54>)
 80117b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117b6:	4a03      	ldr	r2, [pc, #12]	; (80117c4 <sensorMain+0x48>)
 80117b8:	6113      	str	r3, [r2, #16]
}
 80117ba:	bf00      	nop
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	200007e0 	.word	0x200007e0
 80117c4:	20000364 	.word	0x20000364
 80117c8:	2000ac30 	.word	0x2000ac30
 80117cc:	cccccccd 	.word	0xcccccccd
 80117d0:	2000ade4 	.word	0x2000ade4

080117d4 <menuInit>:

void menuInit(void)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af02      	add	r7, sp, #8
  menu.menu_cnt = 6;
 80117da:	4b1d      	ldr	r3, [pc, #116]	; (8011850 <menuInit+0x7c>)
 80117dc:	2206      	movs	r2, #6
 80117de:	701a      	strb	r2, [r3, #0]
  menu.menu_index = 0;
 80117e0:	4b1b      	ldr	r3, [pc, #108]	; (8011850 <menuInit+0x7c>)
 80117e2:	2200      	movs	r2, #0
 80117e4:	705a      	strb	r2, [r3, #1]
  menu.menu_run = false;
 80117e6:	4b1a      	ldr	r3, [pc, #104]	; (8011850 <menuInit+0x7c>)
 80117e8:	2200      	movs	r2, #0
 80117ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  buttonObjCreate(&menu.btn_user,  0, 50, 1000, 100);
 80117ee:	2364      	movs	r3, #100	; 0x64
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117f6:	2232      	movs	r2, #50	; 0x32
 80117f8:	2100      	movs	r1, #0
 80117fa:	4816      	ldr	r0, [pc, #88]	; (8011854 <menuInit+0x80>)
 80117fc:	f001 fc2c 	bl	8013058 <buttonObjCreate>
  buttonObjCreate(&menu.btn_left,   1, 50, 1000, 100);
 8011800:	2364      	movs	r3, #100	; 0x64
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011808:	2232      	movs	r2, #50	; 0x32
 801180a:	2101      	movs	r1, #1
 801180c:	4812      	ldr	r0, [pc, #72]	; (8011858 <menuInit+0x84>)
 801180e:	f001 fc23 	bl	8013058 <buttonObjCreate>
  buttonObjCreate(&menu.btn_right,  2, 50, 1000, 100);
 8011812:	2364      	movs	r3, #100	; 0x64
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801181a:	2232      	movs	r2, #50	; 0x32
 801181c:	2102      	movs	r1, #2
 801181e:	480f      	ldr	r0, [pc, #60]	; (801185c <menuInit+0x88>)
 8011820:	f001 fc1a 	bl	8013058 <buttonObjCreate>
  buttonObjCreate(&menu.btn_enter,  3, 50, 1000, 100);
 8011824:	2364      	movs	r3, #100	; 0x64
 8011826:	9300      	str	r3, [sp, #0]
 8011828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801182c:	2232      	movs	r2, #50	; 0x32
 801182e:	2103      	movs	r1, #3
 8011830:	480b      	ldr	r0, [pc, #44]	; (8011860 <menuInit+0x8c>)
 8011832:	f001 fc11 	bl	8013058 <buttonObjCreate>
  buttonObjCreate(&menu.btn_exit,   4, 50, 1000, 100);
 8011836:	2364      	movs	r3, #100	; 0x64
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801183e:	2232      	movs	r2, #50	; 0x32
 8011840:	2104      	movs	r1, #4
 8011842:	4808      	ldr	r0, [pc, #32]	; (8011864 <menuInit+0x90>)
 8011844:	f001 fc08 	bl	8013058 <buttonObjCreate>

  //buzzerSetVolume(1);
  //menuLoadInfo();
}
 8011848:	bf00      	nop
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	200002e0 	.word	0x200002e0
 8011854:	200002e4 	.word	0x200002e4
 8011858:	200002fc 	.word	0x200002fc
 801185c:	20000314 	.word	0x20000314
 8011860:	2000032c 	.word	0x2000032c
 8011864:	20000344 	.word	0x20000344

08011868 <menuUpdate>:

void menuUpdate(void)
{
 8011868:	b590      	push	{r4, r7, lr}
 801186a:	b085      	sub	sp, #20
 801186c:	af02      	add	r7, sp, #8
  buttonObjClearAndUpdate(&menu.btn_user);
 801186e:	48b1      	ldr	r0, [pc, #708]	; (8011b34 <menuUpdate+0x2cc>)
 8011870:	f001 fd71 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_left);
 8011874:	48b0      	ldr	r0, [pc, #704]	; (8011b38 <menuUpdate+0x2d0>)
 8011876:	f001 fd6e 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_right);
 801187a:	48b0      	ldr	r0, [pc, #704]	; (8011b3c <menuUpdate+0x2d4>)
 801187c:	f001 fd6b 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_enter);
 8011880:	48af      	ldr	r0, [pc, #700]	; (8011b40 <menuUpdate+0x2d8>)
 8011882:	f001 fd68 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_exit);
 8011886:	48af      	ldr	r0, [pc, #700]	; (8011b44 <menuUpdate+0x2dc>)
 8011888:	f001 fd65 	bl	8013356 <buttonObjClearAndUpdate>

  if(menu.menu_run == false)
 801188c:	4bae      	ldr	r3, [pc, #696]	; (8011b48 <menuUpdate+0x2e0>)
 801188e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011892:	f083 0301 	eor.w	r3, r3, #1
 8011896:	b2db      	uxtb	r3, r3
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00b      	beq.n	80118b4 <menuUpdate+0x4c>
  {
	  if (buttonObjGetEvent(&menu.btn_enter) & BUTTON_EVT_CLICKED)
 801189c:	48a8      	ldr	r0, [pc, #672]	; (8011b40 <menuUpdate+0x2d8>)
 801189e:	f001 fd67 	bl	8013370 <buttonObjGetEvent>
 80118a2:	4603      	mov	r3, r0
 80118a4:	f003 0304 	and.w	r3, r3, #4
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d003      	beq.n	80118b4 <menuUpdate+0x4c>
	  {
		menu.menu_run = true;
 80118ac:	4ba6      	ldr	r3, [pc, #664]	; (8011b48 <menuUpdate+0x2e0>)
 80118ae:	2201      	movs	r2, #1
 80118b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	  }
  }

	if(menu.menu_run == true)
 80118b4:	4ba4      	ldr	r3, [pc, #656]	; (8011b48 <menuUpdate+0x2e0>)
 80118b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d057      	beq.n	801196e <menuUpdate+0x106>
	{
	  if (buttonObjGetEvent(&menu.btn_left) & BUTTON_EVT_CLICKED)
 80118be:	489e      	ldr	r0, [pc, #632]	; (8011b38 <menuUpdate+0x2d0>)
 80118c0:	f001 fd56 	bl	8013370 <buttonObjGetEvent>
 80118c4:	4603      	mov	r3, r0
 80118c6:	f003 0304 	and.w	r3, r3, #4
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d016      	beq.n	80118fc <menuUpdate+0x94>
	  {
		if (menu.menu_index > 0)
 80118ce:	4b9e      	ldr	r3, [pc, #632]	; (8011b48 <menuUpdate+0x2e0>)
 80118d0:	785b      	ldrb	r3, [r3, #1]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d006      	beq.n	80118e4 <menuUpdate+0x7c>
		{
		  menu.menu_index--;
 80118d6:	4b9c      	ldr	r3, [pc, #624]	; (8011b48 <menuUpdate+0x2e0>)
 80118d8:	785b      	ldrb	r3, [r3, #1]
 80118da:	3b01      	subs	r3, #1
 80118dc:	b2da      	uxtb	r2, r3
 80118de:	4b9a      	ldr	r3, [pc, #616]	; (8011b48 <menuUpdate+0x2e0>)
 80118e0:	705a      	strb	r2, [r3, #1]
 80118e2:	e005      	b.n	80118f0 <menuUpdate+0x88>
		}
		else
		{
		  menu.menu_index = menu.menu_cnt - 1;
 80118e4:	4b98      	ldr	r3, [pc, #608]	; (8011b48 <menuUpdate+0x2e0>)
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	3b01      	subs	r3, #1
 80118ea:	b2da      	uxtb	r2, r3
 80118ec:	4b96      	ldr	r3, [pc, #600]	; (8011b48 <menuUpdate+0x2e0>)
 80118ee:	705a      	strb	r2, [r3, #1]
		}
		menu.pre_time = millis();
 80118f0:	f001 f83d 	bl	801296e <millis>
 80118f4:	4603      	mov	r3, r0
 80118f6:	4a94      	ldr	r2, [pc, #592]	; (8011b48 <menuUpdate+0x2e0>)
 80118f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  }
	  if (buttonObjGetEvent(&menu.btn_right) & BUTTON_EVT_CLICKED)
 80118fc:	488f      	ldr	r0, [pc, #572]	; (8011b3c <menuUpdate+0x2d4>)
 80118fe:	f001 fd37 	bl	8013370 <buttonObjGetEvent>
 8011902:	4603      	mov	r3, r0
 8011904:	f003 0304 	and.w	r3, r3, #4
 8011908:	2b00      	cmp	r3, #0
 801190a:	d017      	beq.n	801193c <menuUpdate+0xd4>
	  {
		menu.menu_index++;
 801190c:	4b8e      	ldr	r3, [pc, #568]	; (8011b48 <menuUpdate+0x2e0>)
 801190e:	785b      	ldrb	r3, [r3, #1]
 8011910:	3301      	adds	r3, #1
 8011912:	b2da      	uxtb	r2, r3
 8011914:	4b8c      	ldr	r3, [pc, #560]	; (8011b48 <menuUpdate+0x2e0>)
 8011916:	705a      	strb	r2, [r3, #1]
		menu.menu_index %= menu.menu_cnt;
 8011918:	4b8b      	ldr	r3, [pc, #556]	; (8011b48 <menuUpdate+0x2e0>)
 801191a:	785b      	ldrb	r3, [r3, #1]
 801191c:	4a8a      	ldr	r2, [pc, #552]	; (8011b48 <menuUpdate+0x2e0>)
 801191e:	7812      	ldrb	r2, [r2, #0]
 8011920:	fbb3 f1f2 	udiv	r1, r3, r2
 8011924:	fb01 f202 	mul.w	r2, r1, r2
 8011928:	1a9b      	subs	r3, r3, r2
 801192a:	b2da      	uxtb	r2, r3
 801192c:	4b86      	ldr	r3, [pc, #536]	; (8011b48 <menuUpdate+0x2e0>)
 801192e:	705a      	strb	r2, [r3, #1]

		menu.pre_time = millis();
 8011930:	f001 f81d 	bl	801296e <millis>
 8011934:	4603      	mov	r3, r0
 8011936:	4a84      	ldr	r2, [pc, #528]	; (8011b48 <menuUpdate+0x2e0>)
 8011938:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	  }
	  if (buttonObjGetEvent(&menu.btn_enter) & BUTTON_EVT_CLICKED)
 801193c:	4880      	ldr	r0, [pc, #512]	; (8011b40 <menuUpdate+0x2d8>)
 801193e:	f001 fd17 	bl	8013370 <buttonObjGetEvent>
 8011942:	4603      	mov	r3, r0
 8011944:	f003 0304 	and.w	r3, r3, #4
 8011948:	2b00      	cmp	r3, #0
 801194a:	d004      	beq.n	8011956 <menuUpdate+0xee>
	  {
		menuRunApp(menu.menu_index);
 801194c:	4b7e      	ldr	r3, [pc, #504]	; (8011b48 <menuUpdate+0x2e0>)
 801194e:	785b      	ldrb	r3, [r3, #1]
 8011950:	4618      	mov	r0, r3
 8011952:	f000 fa9b 	bl	8011e8c <menuRunApp>
	  }
	  if (buttonObjGetEvent(&menu.btn_exit) & BUTTON_EVT_CLICKED)
 8011956:	487b      	ldr	r0, [pc, #492]	; (8011b44 <menuUpdate+0x2dc>)
 8011958:	f001 fd0a 	bl	8013370 <buttonObjGetEvent>
 801195c:	4603      	mov	r3, r0
 801195e:	f003 0304 	and.w	r3, r3, #4
 8011962:	2b00      	cmp	r3, #0
 8011964:	d003      	beq.n	801196e <menuUpdate+0x106>
	  {
		menu.menu_run = false;
 8011966:	4b78      	ldr	r3, [pc, #480]	; (8011b48 <menuUpdate+0x2e0>)
 8011968:	2200      	movs	r2, #0
 801196a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	  }
	}

  static bool blink = 0;

  if (lcdDrawAvailable() == true)
 801196e:	f003 fcb7 	bl	80152e0 <lcdDrawAvailable>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	f000 8272 	beq.w	8011e5e <menuUpdate+0x5f6>
  {
    lcdClearBuffer(black);
 801197a:	2000      	movs	r0, #0
 801197c:	f003 fac4 	bl	8014f08 <lcdClearBuffer>

    lcdDrawVLine((lcdGetWidth()/2)+20, 16, (lcdGetHeight()/2), pink);
 8011980:	f003 fd34 	bl	80153ec <lcdGetWidth>
 8011984:	4603      	mov	r3, r0
 8011986:	0fda      	lsrs	r2, r3, #31
 8011988:	4413      	add	r3, r2
 801198a:	105b      	asrs	r3, r3, #1
 801198c:	b29b      	uxth	r3, r3
 801198e:	3314      	adds	r3, #20
 8011990:	b29b      	uxth	r3, r3
 8011992:	b21c      	sxth	r4, r3
 8011994:	f003 fd32 	bl	80153fc <lcdGetHeight>
 8011998:	4603      	mov	r3, r0
 801199a:	0fda      	lsrs	r2, r3, #31
 801199c:	4413      	add	r3, r2
 801199e:	105b      	asrs	r3, r3, #1
 80119a0:	b21a      	sxth	r2, r3
 80119a2:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80119a6:	2110      	movs	r1, #16
 80119a8:	4620      	mov	r0, r4
 80119aa:	f003 fde5 	bl	8015578 <lcdDrawVLine>
    lcdDrawHLine(0, 16*1, lcdGetWidth(), pink);
 80119ae:	f003 fd1d 	bl	80153ec <lcdGetWidth>
 80119b2:	4603      	mov	r3, r0
 80119b4:	b21a      	sxth	r2, r3
 80119b6:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80119ba:	2110      	movs	r1, #16
 80119bc:	2000      	movs	r0, #0
 80119be:	f003 fe01 	bl	80155c4 <lcdDrawHLine>
    lcdDrawHLine(0, 16*2, lcdGetWidth(), pink);
 80119c2:	f003 fd13 	bl	80153ec <lcdGetWidth>
 80119c6:	4603      	mov	r3, r0
 80119c8:	b21a      	sxth	r2, r3
 80119ca:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80119ce:	2120      	movs	r1, #32
 80119d0:	2000      	movs	r0, #0
 80119d2:	f003 fdf7 	bl	80155c4 <lcdDrawHLine>
    lcdDrawHLine(0, 16*3, lcdGetWidth(), pink);
 80119d6:	f003 fd09 	bl	80153ec <lcdGetWidth>
 80119da:	4603      	mov	r3, r0
 80119dc:	b21a      	sxth	r2, r3
 80119de:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80119e2:	2130      	movs	r1, #48	; 0x30
 80119e4:	2000      	movs	r0, #0
 80119e6:	f003 fded 	bl	80155c4 <lcdDrawHLine>
    lcdDrawHLine(0, 16*4, lcdGetWidth(), pink);
 80119ea:	f003 fcff 	bl	80153ec <lcdGetWidth>
 80119ee:	4603      	mov	r3, r0
 80119f0:	b21a      	sxth	r2, r3
 80119f2:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80119f6:	2140      	movs	r1, #64	; 0x40
 80119f8:	2000      	movs	r0, #0
 80119fa:	f003 fde3 	bl	80155c4 <lcdDrawHLine>
    lcdDrawHLine(0, 16*5, lcdGetWidth(), pink);
 80119fe:	f003 fcf5 	bl	80153ec <lcdGetWidth>
 8011a02:	4603      	mov	r3, r0
 8011a04:	b21a      	sxth	r2, r3
 8011a06:	f64f 6319 	movw	r3, #65049	; 0xfe19
 8011a0a:	2150      	movs	r1, #80	; 0x50
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	f003 fdd9 	bl	80155c4 <lcdDrawHLine>

    lcdSetFont(LCD_FONT_HAN);
 8011a12:	2003      	movs	r0, #3
 8011a14:	f004 f852 	bl	8015abc <lcdSetFont>
    lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움!]");
 8011a18:	4b4c      	ldr	r3, [pc, #304]	; (8011b4c <menuUpdate+0x2e4>)
 8011a1a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8011a1e:	2100      	movs	r1, #0
 8011a20:	2000      	movs	r0, #0
 8011a22:	f003 fe7b 	bl	801571c <lcdPrintf>

    lcdSetFont(LCD_FONT_HAN);
 8011a26:	2003      	movs	r0, #3
 8011a28:	f004 f848 	bl	8015abc <lcdSetFont>
    lcdPrintf(0,16*1, white, "   현재값    세팅값");
 8011a2c:	4b48      	ldr	r3, [pc, #288]	; (8011b50 <menuUpdate+0x2e8>)
 8011a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a32:	2110      	movs	r1, #16
 8011a34:	2000      	movs	r0, #0
 8011a36:	f003 fe71 	bl	801571c <lcdPrintf>

    lcdSetFont(LCD_FONT_HAN);
 8011a3a:	2003      	movs	r0, #3
 8011a3c:	f004 f83e 	bl	8015abc <lcdSetFont>
    lcdPrintf(0,16*2, white, "온도: %3.1f도" , sensor.ds18b20_temp);
 8011a40:	4b44      	ldr	r3, [pc, #272]	; (8011b54 <menuUpdate+0x2ec>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7ff f8e7 	bl	8010c18 <__aeabi_f2d>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	e9cd 2300 	strd	r2, r3, [sp]
 8011a52:	4b41      	ldr	r3, [pc, #260]	; (8011b58 <menuUpdate+0x2f0>)
 8011a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a58:	2120      	movs	r1, #32
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f003 fe5e 	bl	801571c <lcdPrintf>
    lcdPrintf(0,16*3, white, "높이:%3dcm" , sensor.water_level);
 8011a60:	4b3c      	ldr	r3, [pc, #240]	; (8011b54 <menuUpdate+0x2ec>)
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	9300      	str	r3, [sp, #0]
 8011a66:	4b3d      	ldr	r3, [pc, #244]	; (8011b5c <menuUpdate+0x2f4>)
 8011a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a6c:	2130      	movs	r1, #48	; 0x30
 8011a6e:	2000      	movs	r0, #0
 8011a70:	f003 fe54 	bl	801571c <lcdPrintf>
    lcdPrintf(0,16*4, white, "TDS: %4.1fppm" , sensor.water_quality);
 8011a74:	4b37      	ldr	r3, [pc, #220]	; (8011b54 <menuUpdate+0x2ec>)
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7ff f8cd 	bl	8010c18 <__aeabi_f2d>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	e9cd 2300 	strd	r2, r3, [sp]
 8011a86:	4b36      	ldr	r3, [pc, #216]	; (8011b60 <menuUpdate+0x2f8>)
 8011a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a8c:	2140      	movs	r1, #64	; 0x40
 8011a8e:	2000      	movs	r0, #0
 8011a90:	f003 fe44 	bl	801571c <lcdPrintf>

    lcdPrintf((lcdGetWidth()/2)+20,16*2, white, " %3.1f도" , sensor.ds18b20_temp_setting);
 8011a94:	f003 fcaa 	bl	80153ec <lcdGetWidth>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	0fda      	lsrs	r2, r3, #31
 8011a9c:	4413      	add	r3, r2
 8011a9e:	105b      	asrs	r3, r3, #1
 8011aa0:	f103 0414 	add.w	r4, r3, #20
 8011aa4:	4b2b      	ldr	r3, [pc, #172]	; (8011b54 <menuUpdate+0x2ec>)
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7ff f8b5 	bl	8010c18 <__aeabi_f2d>
 8011aae:	4602      	mov	r2, r0
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	e9cd 2300 	strd	r2, r3, [sp]
 8011ab6:	4b2b      	ldr	r3, [pc, #172]	; (8011b64 <menuUpdate+0x2fc>)
 8011ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011abc:	2120      	movs	r1, #32
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f003 fe2c 	bl	801571c <lcdPrintf>
    lcdPrintf((lcdGetWidth()/2)+20,16*3, white, " %3dcm" , sensor.water_level_setting);
 8011ac4:	f003 fc92 	bl	80153ec <lcdGetWidth>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	0fda      	lsrs	r2, r3, #31
 8011acc:	4413      	add	r3, r2
 8011ace:	105b      	asrs	r3, r3, #1
 8011ad0:	f103 0014 	add.w	r0, r3, #20
 8011ad4:	4b1f      	ldr	r3, [pc, #124]	; (8011b54 <menuUpdate+0x2ec>)
 8011ad6:	6a1b      	ldr	r3, [r3, #32]
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	4b23      	ldr	r3, [pc, #140]	; (8011b68 <menuUpdate+0x300>)
 8011adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ae0:	2130      	movs	r1, #48	; 0x30
 8011ae2:	f003 fe1b 	bl	801571c <lcdPrintf>
    lcdPrintf((lcdGetWidth()/2)+20,16*4, white, "%4.1fppm" , sensor.water_quality_setting);
 8011ae6:	f003 fc81 	bl	80153ec <lcdGetWidth>
 8011aea:	4603      	mov	r3, r0
 8011aec:	0fda      	lsrs	r2, r3, #31
 8011aee:	4413      	add	r3, r2
 8011af0:	105b      	asrs	r3, r3, #1
 8011af2:	f103 0414 	add.w	r4, r3, #20
 8011af6:	4b17      	ldr	r3, [pc, #92]	; (8011b54 <menuUpdate+0x2ec>)
 8011af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff f88c 	bl	8010c18 <__aeabi_f2d>
 8011b00:	4602      	mov	r2, r0
 8011b02:	460b      	mov	r3, r1
 8011b04:	e9cd 2300 	strd	r2, r3, [sp]
 8011b08:	4b18      	ldr	r3, [pc, #96]	; (8011b6c <menuUpdate+0x304>)
 8011b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b0e:	2140      	movs	r1, #64	; 0x40
 8011b10:	4620      	mov	r0, r4
 8011b12:	f003 fe03 	bl	801571c <lcdPrintf>
    //lcdDrawBufferImage(50, 20, 50, 50, TEST);
    if(Mode == Auto_Mode)
 8011b16:	4b16      	ldr	r3, [pc, #88]	; (8011b70 <menuUpdate+0x308>)
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	f083 0301 	eor.w	r3, r3, #1
 8011b1e:	b2db      	uxtb	r3, r3
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d029      	beq.n	8011b78 <menuUpdate+0x310>
    {
		lcdPrintf(40, 16*5, white, "MODE : AUTO");
 8011b24:	4b13      	ldr	r3, [pc, #76]	; (8011b74 <menuUpdate+0x30c>)
 8011b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b2a:	2150      	movs	r1, #80	; 0x50
 8011b2c:	2028      	movs	r0, #40	; 0x28
 8011b2e:	f003 fdf5 	bl	801571c <lcdPrintf>
 8011b32:	e028      	b.n	8011b86 <menuUpdate+0x31e>
 8011b34:	200002e4 	.word	0x200002e4
 8011b38:	200002fc 	.word	0x200002fc
 8011b3c:	20000314 	.word	0x20000314
 8011b40:	2000032c 	.word	0x2000032c
 8011b44:	20000344 	.word	0x20000344
 8011b48:	200002e0 	.word	0x200002e0
 8011b4c:	08029548 	.word	0x08029548
 8011b50:	08029568 	.word	0x08029568
 8011b54:	20000364 	.word	0x20000364
 8011b58:	08029584 	.word	0x08029584
 8011b5c:	08029598 	.word	0x08029598
 8011b60:	080295a8 	.word	0x080295a8
 8011b64:	080295b8 	.word	0x080295b8
 8011b68:	080295c4 	.word	0x080295c4
 8011b6c:	080295cc 	.word	0x080295cc
 8011b70:	200002dc 	.word	0x200002dc
 8011b74:	080295d8 	.word	0x080295d8
    }else
    {
    	lcdPrintf(40, 16*5, white, "MODE : Menual");
 8011b78:	4bbb      	ldr	r3, [pc, #748]	; (8011e68 <menuUpdate+0x600>)
 8011b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b7e:	2150      	movs	r1, #80	; 0x50
 8011b80:	2028      	movs	r0, #40	; 0x28
 8011b82:	f003 fdcb 	bl	801571c <lcdPrintf>
    }

    blink = get_blink();
 8011b86:	f006 fdf7 	bl	8018778 <get_blink>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4bb7      	ldr	r3, [pc, #732]	; (8011e6c <menuUpdate+0x604>)
 8011b90:	701a      	strb	r2, [r3, #0]
    draw_fan_status(0, 16*5, blink);
 8011b92:	4bb6      	ldr	r3, [pc, #728]	; (8011e6c <menuUpdate+0x604>)
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	461a      	mov	r2, r3
 8011b98:	2150      	movs	r1, #80	; 0x50
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	f006 fda2 	bl	80186e4 <draw_fan_status>

    lcdDrawRoundRect(0, 0+112,  25, 16, 5, white);
 8011ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	2305      	movs	r3, #5
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	2310      	movs	r3, #16
 8011bac:	2219      	movs	r2, #25
 8011bae:	2170      	movs	r1, #112	; 0x70
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	f003 fa51 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1, 1+112, 23, 14, 5, red);
 8011bb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011bba:	9301      	str	r3, [sp, #4]
 8011bbc:	2305      	movs	r3, #5
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	230e      	movs	r3, #14
 8011bc2:	2217      	movs	r2, #23
 8011bc4:	2171      	movs	r1, #113	; 0x71
 8011bc6:	2001      	movs	r0, #1
 8011bc8:	f003 fb40 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f003 ff75 	bl	8015abc <lcdSetFont>
	lcdPrintf(2,5+112, white, "ATO");
 8011bd2:	4ba7      	ldr	r3, [pc, #668]	; (8011e70 <menuUpdate+0x608>)
 8011bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bd8:	2175      	movs	r1, #117	; 0x75
 8011bda:	2002      	movs	r0, #2
 8011bdc:	f003 fd9e 	bl	801571c <lcdPrintf>

    lcdDrawRoundRect(0+26, 0+112,  25, 16, 5, white);
 8011be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011be4:	9301      	str	r3, [sp, #4]
 8011be6:	2305      	movs	r3, #5
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	2310      	movs	r3, #16
 8011bec:	2219      	movs	r2, #25
 8011bee:	2170      	movs	r1, #112	; 0x70
 8011bf0:	201a      	movs	r0, #26
 8011bf2:	f003 fa31 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+26, 1+112, 23, 14, 5, red);
 8011bf6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011bfa:	9301      	str	r3, [sp, #4]
 8011bfc:	2305      	movs	r3, #5
 8011bfe:	9300      	str	r3, [sp, #0]
 8011c00:	230e      	movs	r3, #14
 8011c02:	2217      	movs	r2, #23
 8011c04:	2171      	movs	r1, #113	; 0x71
 8011c06:	201b      	movs	r0, #27
 8011c08:	f003 fb20 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	f003 ff55 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+26,5+112, white, "Vv");
 8011c12:	4b98      	ldr	r3, [pc, #608]	; (8011e74 <menuUpdate+0x60c>)
 8011c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c18:	2175      	movs	r1, #117	; 0x75
 8011c1a:	201c      	movs	r0, #28
 8011c1c:	f003 fd7e 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+52, 0+112,  25, 16, 5, white);
 8011c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c24:	9301      	str	r3, [sp, #4]
 8011c26:	2305      	movs	r3, #5
 8011c28:	9300      	str	r3, [sp, #0]
 8011c2a:	2310      	movs	r3, #16
 8011c2c:	2219      	movs	r2, #25
 8011c2e:	2170      	movs	r1, #112	; 0x70
 8011c30:	2034      	movs	r0, #52	; 0x34
 8011c32:	f003 fa11 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+52, 1+112, 23, 14, 5, red);
 8011c36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011c3a:	9301      	str	r3, [sp, #4]
 8011c3c:	2305      	movs	r3, #5
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	230e      	movs	r3, #14
 8011c42:	2217      	movs	r2, #23
 8011c44:	2171      	movs	r1, #113	; 0x71
 8011c46:	2035      	movs	r0, #53	; 0x35
 8011c48:	f003 fb00 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	f003 ff35 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+52,5+112, white, "FAN");
 8011c52:	4b89      	ldr	r3, [pc, #548]	; (8011e78 <menuUpdate+0x610>)
 8011c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c58:	2175      	movs	r1, #117	; 0x75
 8011c5a:	2036      	movs	r0, #54	; 0x36
 8011c5c:	f003 fd5e 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+78, 0+112,  25, 16, 5, white);
 8011c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c64:	9301      	str	r3, [sp, #4]
 8011c66:	2305      	movs	r3, #5
 8011c68:	9300      	str	r3, [sp, #0]
 8011c6a:	2310      	movs	r3, #16
 8011c6c:	2219      	movs	r2, #25
 8011c6e:	2170      	movs	r1, #112	; 0x70
 8011c70:	204e      	movs	r0, #78	; 0x4e
 8011c72:	f003 f9f1 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+78, 1+112, 23, 14, 5, red);
 8011c76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	2305      	movs	r3, #5
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	230e      	movs	r3, #14
 8011c82:	2217      	movs	r2, #23
 8011c84:	2171      	movs	r1, #113	; 0x71
 8011c86:	204f      	movs	r0, #79	; 0x4f
 8011c88:	f003 fae0 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	f003 ff15 	bl	8015abc <lcdSetFont>
	lcdPrintf(5+78,5+112, white, "PP");
 8011c92:	4b7a      	ldr	r3, [pc, #488]	; (8011e7c <menuUpdate+0x614>)
 8011c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c98:	2175      	movs	r1, #117	; 0x75
 8011c9a:	2053      	movs	r0, #83	; 0x53
 8011c9c:	f003 fd3e 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+104, 0+112,  25, 16, 5, white);
 8011ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ca4:	9301      	str	r3, [sp, #4]
 8011ca6:	2305      	movs	r3, #5
 8011ca8:	9300      	str	r3, [sp, #0]
 8011caa:	2310      	movs	r3, #16
 8011cac:	2219      	movs	r2, #25
 8011cae:	2170      	movs	r1, #112	; 0x70
 8011cb0:	2068      	movs	r0, #104	; 0x68
 8011cb2:	f003 f9d1 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+104, 1+112, 23, 14, 5, red);
 8011cb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011cba:	9301      	str	r3, [sp, #4]
 8011cbc:	2305      	movs	r3, #5
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	230e      	movs	r3, #14
 8011cc2:	2217      	movs	r2, #23
 8011cc4:	2171      	movs	r1, #113	; 0x71
 8011cc6:	2069      	movs	r0, #105	; 0x69
 8011cc8:	f003 fac0 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011ccc:	2000      	movs	r0, #0
 8011cce:	f003 fef5 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+104,5+110, white, "HTR");
 8011cd2:	4b6b      	ldr	r3, [pc, #428]	; (8011e80 <menuUpdate+0x618>)
 8011cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cd8:	2173      	movs	r1, #115	; 0x73
 8011cda:	206a      	movs	r0, #106	; 0x6a
 8011cdc:	f003 fd1e 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+130, 0+112,  25, 16, 5, white);
 8011ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ce4:	9301      	str	r3, [sp, #4]
 8011ce6:	2305      	movs	r3, #5
 8011ce8:	9300      	str	r3, [sp, #0]
 8011cea:	2310      	movs	r3, #16
 8011cec:	2219      	movs	r2, #25
 8011cee:	2170      	movs	r1, #112	; 0x70
 8011cf0:	2082      	movs	r0, #130	; 0x82
 8011cf2:	f003 f9b1 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+130, 1+112, 23, 14, 5, red);
 8011cf6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011cfa:	9301      	str	r3, [sp, #4]
 8011cfc:	2305      	movs	r3, #5
 8011cfe:	9300      	str	r3, [sp, #0]
 8011d00:	230e      	movs	r3, #14
 8011d02:	2217      	movs	r2, #23
 8011d04:	2171      	movs	r1, #113	; 0x71
 8011d06:	2083      	movs	r0, #131	; 0x83
 8011d08:	f003 faa0 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	f003 fed5 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+130,5+110, white, "SET");
 8011d12:	4b5c      	ldr	r3, [pc, #368]	; (8011e84 <menuUpdate+0x61c>)
 8011d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d18:	2173      	movs	r1, #115	; 0x73
 8011d1a:	2084      	movs	r0, #132	; 0x84
 8011d1c:	f003 fcfe 	bl	801571c <lcdPrintf>

	for (int i=0; i<menu.menu_cnt; i++)
 8011d20:	2300      	movs	r3, #0
 8011d22:	607b      	str	r3, [r7, #4]
 8011d24:	e092      	b.n	8011e4c <menuUpdate+0x5e4>
	{
		if (menu.menu_index == Auto)
 8011d26:	4b58      	ldr	r3, [pc, #352]	; (8011e88 <menuUpdate+0x620>)
 8011d28:	785b      	ldrb	r3, [r3, #1]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d113      	bne.n	8011d56 <menuUpdate+0x4ee>
		{
			lcdDrawFillRoundRect(1, 1+112, 23, 14, 5, blue);
 8011d2e:	231f      	movs	r3, #31
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	2305      	movs	r3, #5
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	230e      	movs	r3, #14
 8011d38:	2217      	movs	r2, #23
 8011d3a:	2171      	movs	r1, #113	; 0x71
 8011d3c:	2001      	movs	r0, #1
 8011d3e:	f003 fa85 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011d42:	2000      	movs	r0, #0
 8011d44:	f003 feba 	bl	8015abc <lcdSetFont>
			lcdPrintf(2,5+112, white, "ATO");
 8011d48:	4b49      	ldr	r3, [pc, #292]	; (8011e70 <menuUpdate+0x608>)
 8011d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d4e:	2175      	movs	r1, #117	; 0x75
 8011d50:	2002      	movs	r0, #2
 8011d52:	f003 fce3 	bl	801571c <lcdPrintf>
		}
		if (menu.menu_index == Valve)
 8011d56:	4b4c      	ldr	r3, [pc, #304]	; (8011e88 <menuUpdate+0x620>)
 8011d58:	785b      	ldrb	r3, [r3, #1]
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d113      	bne.n	8011d86 <menuUpdate+0x51e>
		{
			lcdDrawFillRoundRect(1+26, 1+112, 23, 14, 5, blue);
 8011d5e:	231f      	movs	r3, #31
 8011d60:	9301      	str	r3, [sp, #4]
 8011d62:	2305      	movs	r3, #5
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	230e      	movs	r3, #14
 8011d68:	2217      	movs	r2, #23
 8011d6a:	2171      	movs	r1, #113	; 0x71
 8011d6c:	201b      	movs	r0, #27
 8011d6e:	f003 fa6d 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011d72:	2000      	movs	r0, #0
 8011d74:	f003 fea2 	bl	8015abc <lcdSetFont>
			lcdPrintf(2+26,5+112, white, "Vv");
 8011d78:	4b3e      	ldr	r3, [pc, #248]	; (8011e74 <menuUpdate+0x60c>)
 8011d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d7e:	2175      	movs	r1, #117	; 0x75
 8011d80:	201c      	movs	r0, #28
 8011d82:	f003 fccb 	bl	801571c <lcdPrintf>
		}
		if (menu.menu_index == Fan)
 8011d86:	4b40      	ldr	r3, [pc, #256]	; (8011e88 <menuUpdate+0x620>)
 8011d88:	785b      	ldrb	r3, [r3, #1]
 8011d8a:	2b02      	cmp	r3, #2
 8011d8c:	d113      	bne.n	8011db6 <menuUpdate+0x54e>
		{
			lcdDrawFillRoundRect(1+52, 1+112, 23, 14, 5, blue);
 8011d8e:	231f      	movs	r3, #31
 8011d90:	9301      	str	r3, [sp, #4]
 8011d92:	2305      	movs	r3, #5
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	230e      	movs	r3, #14
 8011d98:	2217      	movs	r2, #23
 8011d9a:	2171      	movs	r1, #113	; 0x71
 8011d9c:	2035      	movs	r0, #53	; 0x35
 8011d9e:	f003 fa55 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011da2:	2000      	movs	r0, #0
 8011da4:	f003 fe8a 	bl	8015abc <lcdSetFont>
			lcdPrintf(2+52,5+112, white, "FAN");
 8011da8:	4b33      	ldr	r3, [pc, #204]	; (8011e78 <menuUpdate+0x610>)
 8011daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dae:	2175      	movs	r1, #117	; 0x75
 8011db0:	2036      	movs	r0, #54	; 0x36
 8011db2:	f003 fcb3 	bl	801571c <lcdPrintf>
		}
		if (menu.menu_index == Pump)
 8011db6:	4b34      	ldr	r3, [pc, #208]	; (8011e88 <menuUpdate+0x620>)
 8011db8:	785b      	ldrb	r3, [r3, #1]
 8011dba:	2b03      	cmp	r3, #3
 8011dbc:	d113      	bne.n	8011de6 <menuUpdate+0x57e>
		{
			lcdDrawFillRoundRect(1+78, 1+112, 23, 14, 5, blue);
 8011dbe:	231f      	movs	r3, #31
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	2305      	movs	r3, #5
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	230e      	movs	r3, #14
 8011dc8:	2217      	movs	r2, #23
 8011dca:	2171      	movs	r1, #113	; 0x71
 8011dcc:	204f      	movs	r0, #79	; 0x4f
 8011dce:	f003 fa3d 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	f003 fe72 	bl	8015abc <lcdSetFont>
			lcdPrintf(5+78,5+112, white, "PP");
 8011dd8:	4b28      	ldr	r3, [pc, #160]	; (8011e7c <menuUpdate+0x614>)
 8011dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dde:	2175      	movs	r1, #117	; 0x75
 8011de0:	2053      	movs	r0, #83	; 0x53
 8011de2:	f003 fc9b 	bl	801571c <lcdPrintf>
		}
		if (menu.menu_index == Heater)
 8011de6:	4b28      	ldr	r3, [pc, #160]	; (8011e88 <menuUpdate+0x620>)
 8011de8:	785b      	ldrb	r3, [r3, #1]
 8011dea:	2b04      	cmp	r3, #4
 8011dec:	d113      	bne.n	8011e16 <menuUpdate+0x5ae>
		{
			lcdDrawFillRoundRect(1+104, 1+112, 23, 14, 5, blue);
 8011dee:	231f      	movs	r3, #31
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	2305      	movs	r3, #5
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	230e      	movs	r3, #14
 8011df8:	2217      	movs	r2, #23
 8011dfa:	2171      	movs	r1, #113	; 0x71
 8011dfc:	2069      	movs	r0, #105	; 0x69
 8011dfe:	f003 fa25 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011e02:	2000      	movs	r0, #0
 8011e04:	f003 fe5a 	bl	8015abc <lcdSetFont>
			lcdPrintf(2+104,5+110, white, "HTR");
 8011e08:	4b1d      	ldr	r3, [pc, #116]	; (8011e80 <menuUpdate+0x618>)
 8011e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e0e:	2173      	movs	r1, #115	; 0x73
 8011e10:	206a      	movs	r0, #106	; 0x6a
 8011e12:	f003 fc83 	bl	801571c <lcdPrintf>
		}
		if (menu.menu_index == Setting)
 8011e16:	4b1c      	ldr	r3, [pc, #112]	; (8011e88 <menuUpdate+0x620>)
 8011e18:	785b      	ldrb	r3, [r3, #1]
 8011e1a:	2b05      	cmp	r3, #5
 8011e1c:	d113      	bne.n	8011e46 <menuUpdate+0x5de>
		{
			lcdDrawFillRoundRect(1+130, 1+112, 23, 14, 5, blue);
 8011e1e:	231f      	movs	r3, #31
 8011e20:	9301      	str	r3, [sp, #4]
 8011e22:	2305      	movs	r3, #5
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	230e      	movs	r3, #14
 8011e28:	2217      	movs	r2, #23
 8011e2a:	2171      	movs	r1, #113	; 0x71
 8011e2c:	2083      	movs	r0, #131	; 0x83
 8011e2e:	f003 fa0d 	bl	801524c <lcdDrawFillRoundRect>
			lcdSetFont(LCD_FONT_07x10);
 8011e32:	2000      	movs	r0, #0
 8011e34:	f003 fe42 	bl	8015abc <lcdSetFont>
			lcdPrintf(2+130,5+110, white, "SET");
 8011e38:	4b12      	ldr	r3, [pc, #72]	; (8011e84 <menuUpdate+0x61c>)
 8011e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e3e:	2173      	movs	r1, #115	; 0x73
 8011e40:	2084      	movs	r0, #132	; 0x84
 8011e42:	f003 fc6b 	bl	801571c <lcdPrintf>
	for (int i=0; i<menu.menu_cnt; i++)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	3301      	adds	r3, #1
 8011e4a:	607b      	str	r3, [r7, #4]
 8011e4c:	4b0e      	ldr	r3, [pc, #56]	; (8011e88 <menuUpdate+0x620>)
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	461a      	mov	r2, r3
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	4293      	cmp	r3, r2
 8011e56:	f6ff af66 	blt.w	8011d26 <menuUpdate+0x4be>
		}
	}

	lcdRequestDraw();
 8011e5a:	f003 fa57 	bl	801530c <lcdRequestDraw>
	}

}
 8011e5e:	bf00      	nop
 8011e60:	370c      	adds	r7, #12
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd90      	pop	{r4, r7, pc}
 8011e66:	bf00      	nop
 8011e68:	080295e4 	.word	0x080295e4
 8011e6c:	20000394 	.word	0x20000394
 8011e70:	080295f4 	.word	0x080295f4
 8011e74:	080295f8 	.word	0x080295f8
 8011e78:	080295fc 	.word	0x080295fc
 8011e7c:	08029600 	.word	0x08029600
 8011e80:	08029604 	.word	0x08029604
 8011e84:	08029608 	.word	0x08029608
 8011e88:	200002e0 	.word	0x200002e0

08011e8c <menuRunApp>:

void menuRunApp(uint8_t index)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b084      	sub	sp, #16
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	4603      	mov	r3, r0
 8011e94:	71fb      	strb	r3, [r7, #7]
  bool is_run = true;
 8011e96:	2301      	movs	r3, #1
 8011e98:	73fb      	strb	r3, [r7, #15]

  switch(index)
 8011e9a:	79fb      	ldrb	r3, [r7, #7]
 8011e9c:	2b05      	cmp	r3, #5
 8011e9e:	d842      	bhi.n	8011f26 <menuRunApp+0x9a>
 8011ea0:	a201      	add	r2, pc, #4	; (adr r2, 8011ea8 <menuRunApp+0x1c>)
 8011ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea6:	bf00      	nop
 8011ea8:	08011ec1 	.word	0x08011ec1
 8011eac:	08011ecd 	.word	0x08011ecd
 8011eb0:	08011edb 	.word	0x08011edb
 8011eb4:	08011ee9 	.word	0x08011ee9
 8011eb8:	08011ef7 	.word	0x08011ef7
 8011ebc:	08011f05 	.word	0x08011f05
  {
  	case Auto:
  		Mode = Auto_Mode;
 8011ec0:	4b27      	ldr	r3, [pc, #156]	; (8011f60 <menuRunApp+0xd4>)
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	701a      	strb	r2, [r3, #0]
  	    AutoMain();
 8011ec6:	f000 f85b 	bl	8011f80 <AutoMain>
  	  break;
 8011eca:	e032      	b.n	8011f32 <menuRunApp+0xa6>
    case Valve:
    	Mode = Menual_Mode;
 8011ecc:	4b24      	ldr	r3, [pc, #144]	; (8011f60 <menuRunApp+0xd4>)
 8011ece:	2201      	movs	r2, #1
 8011ed0:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(Relay1);
 8011ed2:	2009      	movs	r0, #9
 8011ed4:	f002 fe86 	bl	8014be4 <gpioPinToggle>
      break;
 8011ed8:	e02b      	b.n	8011f32 <menuRunApp+0xa6>
    case Fan:
    	Mode = Menual_Mode;
 8011eda:	4b21      	ldr	r3, [pc, #132]	; (8011f60 <menuRunApp+0xd4>)
 8011edc:	2201      	movs	r2, #1
 8011ede:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(Relay2);
 8011ee0:	200a      	movs	r0, #10
 8011ee2:	f002 fe7f 	bl	8014be4 <gpioPinToggle>
      break;
 8011ee6:	e024      	b.n	8011f32 <menuRunApp+0xa6>
    case Pump:
    	Mode = Menual_Mode;
 8011ee8:	4b1d      	ldr	r3, [pc, #116]	; (8011f60 <menuRunApp+0xd4>)
 8011eea:	2201      	movs	r2, #1
 8011eec:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(Relay3);
 8011eee:	200b      	movs	r0, #11
 8011ef0:	f002 fe78 	bl	8014be4 <gpioPinToggle>
      break;
 8011ef4:	e01d      	b.n	8011f32 <menuRunApp+0xa6>
    case Heater:
    	Mode = Menual_Mode;
 8011ef6:	4b1a      	ldr	r3, [pc, #104]	; (8011f60 <menuRunApp+0xd4>)
 8011ef8:	2201      	movs	r2, #1
 8011efa:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(Relay4);
 8011efc:	200c      	movs	r0, #12
 8011efe:	f002 fe71 	bl	8014be4 <gpioPinToggle>
      break;
 8011f02:	e016      	b.n	8011f32 <menuRunApp+0xa6>
    case Setting:
    	Mode = Menual_Mode;
 8011f04:	4b16      	ldr	r3, [pc, #88]	; (8011f60 <menuRunApp+0xd4>)
 8011f06:	2201      	movs	r2, #1
 8011f08:	701a      	strb	r2, [r3, #0]
    	menu.menu_run = false;
 8011f0a:	4b16      	ldr	r3, [pc, #88]	; (8011f64 <menuRunApp+0xd8>)
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    	sensor.setting_mode = true;
 8011f12:	4b15      	ldr	r3, [pc, #84]	; (8011f68 <menuRunApp+0xdc>)
 8011f14:	2201      	movs	r2, #1
 8011f16:	755a      	strb	r2, [r3, #21]
    	//gpioPinToggle(BUZZER);
    	SettingMain();
 8011f18:	f000 f8d0 	bl	80120bc <SettingMain>
    	menu.menu_run = true;
 8011f1c:	4b11      	ldr	r3, [pc, #68]	; (8011f64 <menuRunApp+0xd8>)
 8011f1e:	2201      	movs	r2, #1
 8011f20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      break;
 8011f24:	e005      	b.n	8011f32 <menuRunApp+0xa6>

    default:
    	Mode = Menual_Mode;
 8011f26:	4b0e      	ldr	r3, [pc, #56]	; (8011f60 <menuRunApp+0xd4>)
 8011f28:	2201      	movs	r2, #1
 8011f2a:	701a      	strb	r2, [r3, #0]
    	is_run = false;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8011f30:	bf00      	nop
  }

  if (is_run == true)
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00e      	beq.n	8011f56 <menuRunApp+0xca>
  {
	buttonObjInit(&menu.btn_user);
 8011f38:	480c      	ldr	r0, [pc, #48]	; (8011f6c <menuRunApp+0xe0>)
 8011f3a:	f001 f9e5 	bl	8013308 <buttonObjInit>
    buttonObjInit(&menu.btn_left);
 8011f3e:	480c      	ldr	r0, [pc, #48]	; (8011f70 <menuRunApp+0xe4>)
 8011f40:	f001 f9e2 	bl	8013308 <buttonObjInit>
    buttonObjInit(&menu.btn_right);
 8011f44:	480b      	ldr	r0, [pc, #44]	; (8011f74 <menuRunApp+0xe8>)
 8011f46:	f001 f9df 	bl	8013308 <buttonObjInit>
    buttonObjInit(&menu.btn_enter);
 8011f4a:	480b      	ldr	r0, [pc, #44]	; (8011f78 <menuRunApp+0xec>)
 8011f4c:	f001 f9dc 	bl	8013308 <buttonObjInit>
    buttonObjInit(&menu.btn_exit);
 8011f50:	480a      	ldr	r0, [pc, #40]	; (8011f7c <menuRunApp+0xf0>)
 8011f52:	f001 f9d9 	bl	8013308 <buttonObjInit>
  }
}
 8011f56:	bf00      	nop
 8011f58:	3710      	adds	r7, #16
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	200002dc 	.word	0x200002dc
 8011f64:	200002e0 	.word	0x200002e0
 8011f68:	20000364 	.word	0x20000364
 8011f6c:	200002e4 	.word	0x200002e4
 8011f70:	200002fc 	.word	0x200002fc
 8011f74:	20000314 	.word	0x20000314
 8011f78:	2000032c 	.word	0x2000032c
 8011f7c:	20000344 	.word	0x20000344

08011f80 <AutoMain>:

void AutoMain(void)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b08a      	sub	sp, #40	; 0x28
 8011f84:	af02      	add	r7, sp, #8
  uint32_t pre_time;
  button_obj_t btn_exit;

  buttonObjCreate(&btn_exit,  4, 50, 1000, 100);
 8011f86:	1d38      	adds	r0, r7, #4
 8011f88:	2364      	movs	r3, #100	; 0x64
 8011f8a:	9300      	str	r3, [sp, #0]
 8011f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f90:	2232      	movs	r2, #50	; 0x32
 8011f92:	2104      	movs	r1, #4
 8011f94:	f001 f860 	bl	8013058 <buttonObjCreate>

  pre_time = millis();
 8011f98:	f000 fce9 	bl	801296e <millis>
 8011f9c:	61f8      	str	r0, [r7, #28]
  while(1)
  {
	buttonObjClearAndUpdate(&btn_exit);
 8011f9e:	1d3b      	adds	r3, r7, #4
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f001 f9d8 	bl	8013356 <buttonObjClearAndUpdate>

    if (buttonObjGetEvent(&btn_exit) & BUTTON_EVT_CLICKED)
 8011fa6:	1d3b      	adds	r3, r7, #4
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f001 f9e1 	bl	8013370 <buttonObjGetEvent>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d179      	bne.n	80120ac <AutoMain+0x12c>
    {
      break;
    }
	if (millis()-pre_time >= 1000)
 8011fb8:	f000 fcd9 	bl	801296e <millis>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	1ad3      	subs	r3, r2, r3
 8011fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011fc6:	d302      	bcc.n	8011fce <AutoMain+0x4e>
	{
	  pre_time = millis();
 8011fc8:	f000 fcd1 	bl	801296e <millis>
 8011fcc:	61f8      	str	r0, [r7, #28]

	}
	sensorMain();
 8011fce:	f7ff fbd5 	bl	801177c <sensorMain>
	menuUpdate();
 8011fd2:	f7ff fc49 	bl	8011868 <menuUpdate>


	if(sensor.ds18b20_temp < sensor.ds18b20_temp_setting - sensor.water_temp_deadband)
 8011fd6:	4b38      	ldr	r3, [pc, #224]	; (80120b8 <AutoMain+0x138>)
 8011fd8:	ed93 7a00 	vldr	s14, [r3]
 8011fdc:	4b36      	ldr	r3, [pc, #216]	; (80120b8 <AutoMain+0x138>)
 8011fde:	edd3 6a06 	vldr	s13, [r3, #24]
 8011fe2:	4b35      	ldr	r3, [pc, #212]	; (80120b8 <AutoMain+0x138>)
 8011fe4:	edd3 7a07 	vldr	s15, [r3, #28]
 8011fe8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	d508      	bpl.n	8012008 <AutoMain+0x88>
	{
		gpioPinWrite(Relay4, true); // HTR ON
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	200c      	movs	r0, #12
 8011ffa:	f002 fd69 	bl	8014ad0 <gpioPinWrite>
		gpioPinWrite(Relay2, false);  // FAN OFF
 8011ffe:	2100      	movs	r1, #0
 8012000:	200a      	movs	r0, #10
 8012002:	f002 fd65 	bl	8014ad0 <gpioPinWrite>
 8012006:	e012      	b.n	801202e <AutoMain+0xae>
	}else if(sensor.ds18b20_temp > sensor.ds18b20_temp_setting)
 8012008:	4b2b      	ldr	r3, [pc, #172]	; (80120b8 <AutoMain+0x138>)
 801200a:	ed93 7a00 	vldr	s14, [r3]
 801200e:	4b2a      	ldr	r3, [pc, #168]	; (80120b8 <AutoMain+0x138>)
 8012010:	edd3 7a06 	vldr	s15, [r3, #24]
 8012014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201c:	dd07      	ble.n	801202e <AutoMain+0xae>
	{
		gpioPinWrite(Relay4, false);  // HTR OFF
 801201e:	2100      	movs	r1, #0
 8012020:	200c      	movs	r0, #12
 8012022:	f002 fd55 	bl	8014ad0 <gpioPinWrite>
		gpioPinWrite(Relay2, true); // FAN ON
 8012026:	2101      	movs	r1, #1
 8012028:	200a      	movs	r0, #10
 801202a:	f002 fd51 	bl	8014ad0 <gpioPinWrite>
	}

	if(sensor.water_level < sensor.water_level_setting - sensor.water_level_deadband)
 801202e:	4b22      	ldr	r3, [pc, #136]	; (80120b8 <AutoMain+0x138>)
 8012030:	68da      	ldr	r2, [r3, #12]
 8012032:	4b21      	ldr	r3, [pc, #132]	; (80120b8 <AutoMain+0x138>)
 8012034:	6a19      	ldr	r1, [r3, #32]
 8012036:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <AutoMain+0x138>)
 8012038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203a:	1acb      	subs	r3, r1, r3
 801203c:	429a      	cmp	r2, r3
 801203e:	d204      	bcs.n	801204a <AutoMain+0xca>
	{
		gpioPinWrite(Relay1, true); // VALVE Open
 8012040:	2101      	movs	r1, #1
 8012042:	2009      	movs	r0, #9
 8012044:	f002 fd44 	bl	8014ad0 <gpioPinWrite>
 8012048:	e009      	b.n	801205e <AutoMain+0xde>
	}else if(sensor.water_level > sensor.water_level_setting)
 801204a:	4b1b      	ldr	r3, [pc, #108]	; (80120b8 <AutoMain+0x138>)
 801204c:	68da      	ldr	r2, [r3, #12]
 801204e:	4b1a      	ldr	r3, [pc, #104]	; (80120b8 <AutoMain+0x138>)
 8012050:	6a1b      	ldr	r3, [r3, #32]
 8012052:	429a      	cmp	r2, r3
 8012054:	d903      	bls.n	801205e <AutoMain+0xde>
	{
		gpioPinWrite(Relay1, false);  // VALVE Close
 8012056:	2100      	movs	r1, #0
 8012058:	2009      	movs	r0, #9
 801205a:	f002 fd39 	bl	8014ad0 <gpioPinWrite>
	}

	if(sensor.water_quality < sensor.water_quality_setting - sensor.water_quality_deadband)
 801205e:	4b16      	ldr	r3, [pc, #88]	; (80120b8 <AutoMain+0x138>)
 8012060:	ed93 7a04 	vldr	s14, [r3, #16]
 8012064:	4b14      	ldr	r3, [pc, #80]	; (80120b8 <AutoMain+0x138>)
 8012066:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 801206a:	4b13      	ldr	r3, [pc, #76]	; (80120b8 <AutoMain+0x138>)
 801206c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012070:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207c:	d504      	bpl.n	8012088 <AutoMain+0x108>
	{
		gpioPinWrite(Relay3, false);  // PUMP OFF
 801207e:	2100      	movs	r1, #0
 8012080:	200b      	movs	r0, #11
 8012082:	f002 fd25 	bl	8014ad0 <gpioPinWrite>
 8012086:	e00e      	b.n	80120a6 <AutoMain+0x126>
	}else if(sensor.water_quality > sensor.water_quality_setting)
 8012088:	4b0b      	ldr	r3, [pc, #44]	; (80120b8 <AutoMain+0x138>)
 801208a:	ed93 7a04 	vldr	s14, [r3, #16]
 801208e:	4b0a      	ldr	r3, [pc, #40]	; (80120b8 <AutoMain+0x138>)
 8012090:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801209c:	dd03      	ble.n	80120a6 <AutoMain+0x126>
	{
		gpioPinWrite(Relay3, true); // PUMP ON
 801209e:	2101      	movs	r1, #1
 80120a0:	200b      	movs	r0, #11
 80120a2:	f002 fd15 	bl	8014ad0 <gpioPinWrite>
	}


	SerialCom();
 80120a6:	f005 fe1f 	bl	8017ce8 <SerialCom>
	buttonObjClearAndUpdate(&btn_exit);
 80120aa:	e778      	b.n	8011f9e <AutoMain+0x1e>
      break;
 80120ac:	bf00      	nop
  }

}
 80120ae:	bf00      	nop
 80120b0:	3720      	adds	r7, #32
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	20000364 	.word	0x20000364

080120bc <SettingMain>:

void SettingMain(void)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 80120c2:	f000 fc54 	bl	801296e <millis>
 80120c6:	6078      	str	r0, [r7, #4]
  while(1)
  {
	if (sensor.setting_mode == false)
 80120c8:	4b0e      	ldr	r3, [pc, #56]	; (8012104 <SettingMain+0x48>)
 80120ca:	7d5b      	ldrb	r3, [r3, #21]
 80120cc:	f083 0301 	eor.w	r3, r3, #1
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d111      	bne.n	80120fa <SettingMain+0x3e>
	{
	  break;
	}
	if (millis()-pre_time >= 1000)
 80120d6:	f000 fc4a 	bl	801296e <millis>
 80120da:	4602      	mov	r2, r0
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	1ad3      	subs	r3, r2, r3
 80120e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80120e4:	d302      	bcc.n	80120ec <SettingMain+0x30>
	{
	  pre_time = millis();
 80120e6:	f000 fc42 	bl	801296e <millis>
 80120ea:	6078      	str	r0, [r7, #4]

	}
	sensorMain();
 80120ec:	f7ff fb46 	bl	801177c <sensorMain>
	SettingUpdate();
 80120f0:	f000 f80a 	bl	8012108 <SettingUpdate>
	SerialCom();
 80120f4:	f005 fdf8 	bl	8017ce8 <SerialCom>
	if (sensor.setting_mode == false)
 80120f8:	e7e6      	b.n	80120c8 <SettingMain+0xc>
	  break;
 80120fa:	bf00      	nop
  }
}
 80120fc:	bf00      	nop
 80120fe:	3708      	adds	r7, #8
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}
 8012104:	20000364 	.word	0x20000364

08012108 <SettingUpdate>:

void SettingUpdate(void)
{
 8012108:	b590      	push	{r4, r7, lr}
 801210a:	b085      	sub	sp, #20
 801210c:	af02      	add	r7, sp, #8
  buttonObjClearAndUpdate(&menu.btn_left);
 801210e:	483a      	ldr	r0, [pc, #232]	; (80121f8 <SettingUpdate+0xf0>)
 8012110:	f001 f921 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_right);
 8012114:	4839      	ldr	r0, [pc, #228]	; (80121fc <SettingUpdate+0xf4>)
 8012116:	f001 f91e 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_enter);
 801211a:	4839      	ldr	r0, [pc, #228]	; (8012200 <SettingUpdate+0xf8>)
 801211c:	f001 f91b 	bl	8013356 <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_exit);
 8012120:	4838      	ldr	r0, [pc, #224]	; (8012204 <SettingUpdate+0xfc>)
 8012122:	f001 f918 	bl	8013356 <buttonObjClearAndUpdate>

  if (buttonObjGetEvent(&menu.btn_left) & BUTTON_EVT_CLICKED)
 8012126:	4834      	ldr	r0, [pc, #208]	; (80121f8 <SettingUpdate+0xf0>)
 8012128:	f001 f922 	bl	8013370 <buttonObjGetEvent>
 801212c:	4603      	mov	r3, r0
 801212e:	f003 0304 	and.w	r3, r3, #4
 8012132:	2b00      	cmp	r3, #0
 8012134:	d03d      	beq.n	80121b2 <SettingUpdate+0xaa>
  	  {
  		  if (sensor.setting != true)
 8012136:	4b34      	ldr	r3, [pc, #208]	; (8012208 <SettingUpdate+0x100>)
 8012138:	7d1b      	ldrb	r3, [r3, #20]
 801213a:	f083 0301 	eor.w	r3, r3, #1
 801213e:	b2db      	uxtb	r3, r3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d011      	beq.n	8012168 <SettingUpdate+0x60>
  		  {
  			if (sensor.setting_index > 0)
 8012144:	4b30      	ldr	r3, [pc, #192]	; (8012208 <SettingUpdate+0x100>)
 8012146:	7ddb      	ldrb	r3, [r3, #23]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d006      	beq.n	801215a <SettingUpdate+0x52>
  			{
  				sensor.setting_index--;
 801214c:	4b2e      	ldr	r3, [pc, #184]	; (8012208 <SettingUpdate+0x100>)
 801214e:	7ddb      	ldrb	r3, [r3, #23]
 8012150:	3b01      	subs	r3, #1
 8012152:	b2da      	uxtb	r2, r3
 8012154:	4b2c      	ldr	r3, [pc, #176]	; (8012208 <SettingUpdate+0x100>)
 8012156:	75da      	strb	r2, [r3, #23]
 8012158:	e02b      	b.n	80121b2 <SettingUpdate+0xaa>
  			}
  			else
  			{
  				sensor.setting_index = sensor.setting_cnt - 1;
 801215a:	4b2b      	ldr	r3, [pc, #172]	; (8012208 <SettingUpdate+0x100>)
 801215c:	7d9b      	ldrb	r3, [r3, #22]
 801215e:	3b01      	subs	r3, #1
 8012160:	b2da      	uxtb	r2, r3
 8012162:	4b29      	ldr	r3, [pc, #164]	; (8012208 <SettingUpdate+0x100>)
 8012164:	75da      	strb	r2, [r3, #23]
 8012166:	e024      	b.n	80121b2 <SettingUpdate+0xaa>
  			}
  		  }else
  		  {
  			  if (sensor.setting_index == Water_Temp)
 8012168:	4b27      	ldr	r3, [pc, #156]	; (8012208 <SettingUpdate+0x100>)
 801216a:	7ddb      	ldrb	r3, [r3, #23]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d109      	bne.n	8012184 <SettingUpdate+0x7c>
  			  {
  				  sensor.ds18b20_temp_setting -= 1;
 8012170:	4b25      	ldr	r3, [pc, #148]	; (8012208 <SettingUpdate+0x100>)
 8012172:	edd3 7a06 	vldr	s15, [r3, #24]
 8012176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801217a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801217e:	4b22      	ldr	r3, [pc, #136]	; (8012208 <SettingUpdate+0x100>)
 8012180:	edc3 7a06 	vstr	s15, [r3, #24]
  			  }
  			  if (sensor.setting_index == Water_Level)
 8012184:	4b20      	ldr	r3, [pc, #128]	; (8012208 <SettingUpdate+0x100>)
 8012186:	7ddb      	ldrb	r3, [r3, #23]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d104      	bne.n	8012196 <SettingUpdate+0x8e>
  			  {
  				  sensor.water_level_setting -= 1;
 801218c:	4b1e      	ldr	r3, [pc, #120]	; (8012208 <SettingUpdate+0x100>)
 801218e:	6a1b      	ldr	r3, [r3, #32]
 8012190:	3b01      	subs	r3, #1
 8012192:	4a1d      	ldr	r2, [pc, #116]	; (8012208 <SettingUpdate+0x100>)
 8012194:	6213      	str	r3, [r2, #32]
  			  }
  			  if (sensor.setting_index == Water_Quality)
 8012196:	4b1c      	ldr	r3, [pc, #112]	; (8012208 <SettingUpdate+0x100>)
 8012198:	7ddb      	ldrb	r3, [r3, #23]
 801219a:	2b02      	cmp	r3, #2
 801219c:	d109      	bne.n	80121b2 <SettingUpdate+0xaa>
  			  {
  				  sensor.water_quality_setting -= 1;
 801219e:	4b1a      	ldr	r3, [pc, #104]	; (8012208 <SettingUpdate+0x100>)
 80121a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80121a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80121a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80121ac:	4b16      	ldr	r3, [pc, #88]	; (8012208 <SettingUpdate+0x100>)
 80121ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  			  }
  		  }
  	  }
  	  if (buttonObjGetEvent(&menu.btn_right) & BUTTON_EVT_CLICKED)
 80121b2:	4812      	ldr	r0, [pc, #72]	; (80121fc <SettingUpdate+0xf4>)
 80121b4:	f001 f8dc 	bl	8013370 <buttonObjGetEvent>
 80121b8:	4603      	mov	r3, r0
 80121ba:	f003 0304 	and.w	r3, r3, #4
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d049      	beq.n	8012256 <SettingUpdate+0x14e>
  	  {
  		  if (sensor.setting != true)
 80121c2:	4b11      	ldr	r3, [pc, #68]	; (8012208 <SettingUpdate+0x100>)
 80121c4:	7d1b      	ldrb	r3, [r3, #20]
 80121c6:	f083 0301 	eor.w	r3, r3, #1
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d01d      	beq.n	801220c <SettingUpdate+0x104>
  		  {
  			sensor.setting_index++;
 80121d0:	4b0d      	ldr	r3, [pc, #52]	; (8012208 <SettingUpdate+0x100>)
 80121d2:	7ddb      	ldrb	r3, [r3, #23]
 80121d4:	3301      	adds	r3, #1
 80121d6:	b2da      	uxtb	r2, r3
 80121d8:	4b0b      	ldr	r3, [pc, #44]	; (8012208 <SettingUpdate+0x100>)
 80121da:	75da      	strb	r2, [r3, #23]
  			sensor.setting_index %= sensor.setting_cnt;
 80121dc:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <SettingUpdate+0x100>)
 80121de:	7ddb      	ldrb	r3, [r3, #23]
 80121e0:	4a09      	ldr	r2, [pc, #36]	; (8012208 <SettingUpdate+0x100>)
 80121e2:	7d92      	ldrb	r2, [r2, #22]
 80121e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80121e8:	fb01 f202 	mul.w	r2, r1, r2
 80121ec:	1a9b      	subs	r3, r3, r2
 80121ee:	b2da      	uxtb	r2, r3
 80121f0:	4b05      	ldr	r3, [pc, #20]	; (8012208 <SettingUpdate+0x100>)
 80121f2:	75da      	strb	r2, [r3, #23]
 80121f4:	e02f      	b.n	8012256 <SettingUpdate+0x14e>
 80121f6:	bf00      	nop
 80121f8:	200002fc 	.word	0x200002fc
 80121fc:	20000314 	.word	0x20000314
 8012200:	2000032c 	.word	0x2000032c
 8012204:	20000344 	.word	0x20000344
 8012208:	20000364 	.word	0x20000364
  		  }else
  		  {
  			  if (sensor.setting_index == Water_Temp)
 801220c:	4b96      	ldr	r3, [pc, #600]	; (8012468 <SettingUpdate+0x360>)
 801220e:	7ddb      	ldrb	r3, [r3, #23]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d109      	bne.n	8012228 <SettingUpdate+0x120>
  			  {
  				  sensor.ds18b20_temp_setting += 1;
 8012214:	4b94      	ldr	r3, [pc, #592]	; (8012468 <SettingUpdate+0x360>)
 8012216:	edd3 7a06 	vldr	s15, [r3, #24]
 801221a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801221e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012222:	4b91      	ldr	r3, [pc, #580]	; (8012468 <SettingUpdate+0x360>)
 8012224:	edc3 7a06 	vstr	s15, [r3, #24]
  			  }
  			  if (sensor.setting_index == Water_Level)
 8012228:	4b8f      	ldr	r3, [pc, #572]	; (8012468 <SettingUpdate+0x360>)
 801222a:	7ddb      	ldrb	r3, [r3, #23]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d104      	bne.n	801223a <SettingUpdate+0x132>
  			  {
  				  sensor.water_level_setting += 1;
 8012230:	4b8d      	ldr	r3, [pc, #564]	; (8012468 <SettingUpdate+0x360>)
 8012232:	6a1b      	ldr	r3, [r3, #32]
 8012234:	3301      	adds	r3, #1
 8012236:	4a8c      	ldr	r2, [pc, #560]	; (8012468 <SettingUpdate+0x360>)
 8012238:	6213      	str	r3, [r2, #32]
  			  }
  			  if (sensor.setting_index == Water_Quality)
 801223a:	4b8b      	ldr	r3, [pc, #556]	; (8012468 <SettingUpdate+0x360>)
 801223c:	7ddb      	ldrb	r3, [r3, #23]
 801223e:	2b02      	cmp	r3, #2
 8012240:	d109      	bne.n	8012256 <SettingUpdate+0x14e>
  			  {
  				  sensor.water_quality_setting += 1;
 8012242:	4b89      	ldr	r3, [pc, #548]	; (8012468 <SettingUpdate+0x360>)
 8012244:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801224c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012250:	4b85      	ldr	r3, [pc, #532]	; (8012468 <SettingUpdate+0x360>)
 8012252:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  			  }
  		  }
  	  }
  	  if (buttonObjGetEvent(&menu.btn_enter) & BUTTON_EVT_CLICKED)
 8012256:	4885      	ldr	r0, [pc, #532]	; (801246c <SettingUpdate+0x364>)
 8012258:	f001 f88a 	bl	8013370 <buttonObjGetEvent>
 801225c:	4603      	mov	r3, r0
 801225e:	f003 0304 	and.w	r3, r3, #4
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00e      	beq.n	8012284 <SettingUpdate+0x17c>
  	  {
  		sensor.setting = !sensor.setting;
 8012266:	4b80      	ldr	r3, [pc, #512]	; (8012468 <SettingUpdate+0x360>)
 8012268:	7d1b      	ldrb	r3, [r3, #20]
 801226a:	2b00      	cmp	r3, #0
 801226c:	bf14      	ite	ne
 801226e:	2301      	movne	r3, #1
 8012270:	2300      	moveq	r3, #0
 8012272:	b2db      	uxtb	r3, r3
 8012274:	f083 0301 	eor.w	r3, r3, #1
 8012278:	b2db      	uxtb	r3, r3
 801227a:	f003 0301 	and.w	r3, r3, #1
 801227e:	b2da      	uxtb	r2, r3
 8012280:	4b79      	ldr	r3, [pc, #484]	; (8012468 <SettingUpdate+0x360>)
 8012282:	751a      	strb	r2, [r3, #20]
  	  }
  	  if (buttonObjGetEvent(&menu.btn_exit) & BUTTON_EVT_CLICKED)
 8012284:	487a      	ldr	r0, [pc, #488]	; (8012470 <SettingUpdate+0x368>)
 8012286:	f001 f873 	bl	8013370 <buttonObjGetEvent>
 801228a:	4603      	mov	r3, r0
 801228c:	f003 0304 	and.w	r3, r3, #4
 8012290:	2b00      	cmp	r3, #0
 8012292:	d005      	beq.n	80122a0 <SettingUpdate+0x198>
  	  {
  		sensor.setting = false;
 8012294:	4b74      	ldr	r3, [pc, #464]	; (8012468 <SettingUpdate+0x360>)
 8012296:	2200      	movs	r2, #0
 8012298:	751a      	strb	r2, [r3, #20]
  		sensor.setting_mode = false;
 801229a:	4b73      	ldr	r3, [pc, #460]	; (8012468 <SettingUpdate+0x360>)
 801229c:	2200      	movs	r2, #0
 801229e:	755a      	strb	r2, [r3, #21]
  	  }

  static bool blink = 0;

  if (lcdDrawAvailable() == true)
 80122a0:	f003 f81e 	bl	80152e0 <lcdDrawAvailable>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	f000 82b5 	beq.w	8012816 <SettingUpdate+0x70e>
  {
	lcdClearBuffer(black);
 80122ac:	2000      	movs	r0, #0
 80122ae:	f002 fe2b 	bl	8014f08 <lcdClearBuffer>

	lcdDrawVLine((lcdGetWidth()/2)+20, 16, (lcdGetHeight()/2), pink);
 80122b2:	f003 f89b 	bl	80153ec <lcdGetWidth>
 80122b6:	4603      	mov	r3, r0
 80122b8:	0fda      	lsrs	r2, r3, #31
 80122ba:	4413      	add	r3, r2
 80122bc:	105b      	asrs	r3, r3, #1
 80122be:	b29b      	uxth	r3, r3
 80122c0:	3314      	adds	r3, #20
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	b21c      	sxth	r4, r3
 80122c6:	f003 f899 	bl	80153fc <lcdGetHeight>
 80122ca:	4603      	mov	r3, r0
 80122cc:	0fda      	lsrs	r2, r3, #31
 80122ce:	4413      	add	r3, r2
 80122d0:	105b      	asrs	r3, r3, #1
 80122d2:	b21a      	sxth	r2, r3
 80122d4:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80122d8:	2110      	movs	r1, #16
 80122da:	4620      	mov	r0, r4
 80122dc:	f003 f94c 	bl	8015578 <lcdDrawVLine>
	lcdDrawHLine(0, 16*1, lcdGetWidth(), pink);
 80122e0:	f003 f884 	bl	80153ec <lcdGetWidth>
 80122e4:	4603      	mov	r3, r0
 80122e6:	b21a      	sxth	r2, r3
 80122e8:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80122ec:	2110      	movs	r1, #16
 80122ee:	2000      	movs	r0, #0
 80122f0:	f003 f968 	bl	80155c4 <lcdDrawHLine>
	lcdDrawHLine(0, 16*2, lcdGetWidth(), pink);
 80122f4:	f003 f87a 	bl	80153ec <lcdGetWidth>
 80122f8:	4603      	mov	r3, r0
 80122fa:	b21a      	sxth	r2, r3
 80122fc:	f64f 6319 	movw	r3, #65049	; 0xfe19
 8012300:	2120      	movs	r1, #32
 8012302:	2000      	movs	r0, #0
 8012304:	f003 f95e 	bl	80155c4 <lcdDrawHLine>
	lcdDrawHLine(0, 16*3, lcdGetWidth(), pink);
 8012308:	f003 f870 	bl	80153ec <lcdGetWidth>
 801230c:	4603      	mov	r3, r0
 801230e:	b21a      	sxth	r2, r3
 8012310:	f64f 6319 	movw	r3, #65049	; 0xfe19
 8012314:	2130      	movs	r1, #48	; 0x30
 8012316:	2000      	movs	r0, #0
 8012318:	f003 f954 	bl	80155c4 <lcdDrawHLine>
	lcdDrawHLine(0, 16*4, lcdGetWidth(), pink);
 801231c:	f003 f866 	bl	80153ec <lcdGetWidth>
 8012320:	4603      	mov	r3, r0
 8012322:	b21a      	sxth	r2, r3
 8012324:	f64f 6319 	movw	r3, #65049	; 0xfe19
 8012328:	2140      	movs	r1, #64	; 0x40
 801232a:	2000      	movs	r0, #0
 801232c:	f003 f94a 	bl	80155c4 <lcdDrawHLine>
	lcdDrawHLine(0, 16*5, lcdGetWidth(), pink);
 8012330:	f003 f85c 	bl	80153ec <lcdGetWidth>
 8012334:	4603      	mov	r3, r0
 8012336:	b21a      	sxth	r2, r3
 8012338:	f64f 6319 	movw	r3, #65049	; 0xfe19
 801233c:	2150      	movs	r1, #80	; 0x50
 801233e:	2000      	movs	r0, #0
 8012340:	f003 f940 	bl	80155c4 <lcdDrawHLine>

	lcdSetFont(LCD_FONT_HAN);
 8012344:	2003      	movs	r0, #3
 8012346:	f003 fbb9 	bl	8015abc <lcdSetFont>
	lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움!]");
 801234a:	4b4a      	ldr	r3, [pc, #296]	; (8012474 <SettingUpdate+0x36c>)
 801234c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8012350:	2100      	movs	r1, #0
 8012352:	2000      	movs	r0, #0
 8012354:	f003 f9e2 	bl	801571c <lcdPrintf>

	lcdSetFont(LCD_FONT_HAN);
 8012358:	2003      	movs	r0, #3
 801235a:	f003 fbaf 	bl	8015abc <lcdSetFont>
	lcdPrintf(0,16*1, white, "   현재값    세팅값");
 801235e:	4b46      	ldr	r3, [pc, #280]	; (8012478 <SettingUpdate+0x370>)
 8012360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012364:	2110      	movs	r1, #16
 8012366:	2000      	movs	r0, #0
 8012368:	f003 f9d8 	bl	801571c <lcdPrintf>

	lcdSetFont(LCD_FONT_HAN);
 801236c:	2003      	movs	r0, #3
 801236e:	f003 fba5 	bl	8015abc <lcdSetFont>
	lcdPrintf(0,16*2, white, "온도: %3.1f도" , sensor.ds18b20_temp);
 8012372:	4b3d      	ldr	r3, [pc, #244]	; (8012468 <SettingUpdate+0x360>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	4618      	mov	r0, r3
 8012378:	f7fe fc4e 	bl	8010c18 <__aeabi_f2d>
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	e9cd 2300 	strd	r2, r3, [sp]
 8012384:	4b3d      	ldr	r3, [pc, #244]	; (801247c <SettingUpdate+0x374>)
 8012386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801238a:	2120      	movs	r1, #32
 801238c:	2000      	movs	r0, #0
 801238e:	f003 f9c5 	bl	801571c <lcdPrintf>
	lcdPrintf(0,16*3, white, "높이:%3dcm" , sensor.water_level);
 8012392:	4b35      	ldr	r3, [pc, #212]	; (8012468 <SettingUpdate+0x360>)
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	9300      	str	r3, [sp, #0]
 8012398:	4b39      	ldr	r3, [pc, #228]	; (8012480 <SettingUpdate+0x378>)
 801239a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801239e:	2130      	movs	r1, #48	; 0x30
 80123a0:	2000      	movs	r0, #0
 80123a2:	f003 f9bb 	bl	801571c <lcdPrintf>
	lcdPrintf(0,16*4, white, "TDS: %4.1fppm" , sensor.water_quality);
 80123a6:	4b30      	ldr	r3, [pc, #192]	; (8012468 <SettingUpdate+0x360>)
 80123a8:	691b      	ldr	r3, [r3, #16]
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fe fc34 	bl	8010c18 <__aeabi_f2d>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	e9cd 2300 	strd	r2, r3, [sp]
 80123b8:	4b32      	ldr	r3, [pc, #200]	; (8012484 <SettingUpdate+0x37c>)
 80123ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123be:	2140      	movs	r1, #64	; 0x40
 80123c0:	2000      	movs	r0, #0
 80123c2:	f003 f9ab 	bl	801571c <lcdPrintf>

	lcdPrintf((lcdGetWidth()/2)+20,16*2, white, " %3.1f도" , sensor.ds18b20_temp_setting);
 80123c6:	f003 f811 	bl	80153ec <lcdGetWidth>
 80123ca:	4603      	mov	r3, r0
 80123cc:	0fda      	lsrs	r2, r3, #31
 80123ce:	4413      	add	r3, r2
 80123d0:	105b      	asrs	r3, r3, #1
 80123d2:	f103 0414 	add.w	r4, r3, #20
 80123d6:	4b24      	ldr	r3, [pc, #144]	; (8012468 <SettingUpdate+0x360>)
 80123d8:	699b      	ldr	r3, [r3, #24]
 80123da:	4618      	mov	r0, r3
 80123dc:	f7fe fc1c 	bl	8010c18 <__aeabi_f2d>
 80123e0:	4602      	mov	r2, r0
 80123e2:	460b      	mov	r3, r1
 80123e4:	e9cd 2300 	strd	r2, r3, [sp]
 80123e8:	4b27      	ldr	r3, [pc, #156]	; (8012488 <SettingUpdate+0x380>)
 80123ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123ee:	2120      	movs	r1, #32
 80123f0:	4620      	mov	r0, r4
 80123f2:	f003 f993 	bl	801571c <lcdPrintf>
	lcdPrintf((lcdGetWidth()/2)+20,16*3, white, " %3dcm" , sensor.water_level_setting);
 80123f6:	f002 fff9 	bl	80153ec <lcdGetWidth>
 80123fa:	4603      	mov	r3, r0
 80123fc:	0fda      	lsrs	r2, r3, #31
 80123fe:	4413      	add	r3, r2
 8012400:	105b      	asrs	r3, r3, #1
 8012402:	f103 0014 	add.w	r0, r3, #20
 8012406:	4b18      	ldr	r3, [pc, #96]	; (8012468 <SettingUpdate+0x360>)
 8012408:	6a1b      	ldr	r3, [r3, #32]
 801240a:	9300      	str	r3, [sp, #0]
 801240c:	4b1f      	ldr	r3, [pc, #124]	; (801248c <SettingUpdate+0x384>)
 801240e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012412:	2130      	movs	r1, #48	; 0x30
 8012414:	f003 f982 	bl	801571c <lcdPrintf>
	lcdPrintf((lcdGetWidth()/2)+20,16*4, white, "%4.1fppm" , sensor.water_quality_setting);
 8012418:	f002 ffe8 	bl	80153ec <lcdGetWidth>
 801241c:	4603      	mov	r3, r0
 801241e:	0fda      	lsrs	r2, r3, #31
 8012420:	4413      	add	r3, r2
 8012422:	105b      	asrs	r3, r3, #1
 8012424:	f103 0414 	add.w	r4, r3, #20
 8012428:	4b0f      	ldr	r3, [pc, #60]	; (8012468 <SettingUpdate+0x360>)
 801242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fbf3 	bl	8010c18 <__aeabi_f2d>
 8012432:	4602      	mov	r2, r0
 8012434:	460b      	mov	r3, r1
 8012436:	e9cd 2300 	strd	r2, r3, [sp]
 801243a:	4b15      	ldr	r3, [pc, #84]	; (8012490 <SettingUpdate+0x388>)
 801243c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012440:	2140      	movs	r1, #64	; 0x40
 8012442:	4620      	mov	r0, r4
 8012444:	f003 f96a 	bl	801571c <lcdPrintf>
	//lcdDrawBufferImage(50, 20, 50, 50, TEST);
	if(Mode == Auto_Mode)
 8012448:	4b12      	ldr	r3, [pc, #72]	; (8012494 <SettingUpdate+0x38c>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	f083 0301 	eor.w	r3, r3, #1
 8012450:	b2db      	uxtb	r3, r3
 8012452:	2b00      	cmp	r3, #0
 8012454:	d022      	beq.n	801249c <SettingUpdate+0x394>
	{
		lcdPrintf(40, 16*5, white, "MODE : AUTO");
 8012456:	4b10      	ldr	r3, [pc, #64]	; (8012498 <SettingUpdate+0x390>)
 8012458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801245c:	2150      	movs	r1, #80	; 0x50
 801245e:	2028      	movs	r0, #40	; 0x28
 8012460:	f003 f95c 	bl	801571c <lcdPrintf>
 8012464:	e021      	b.n	80124aa <SettingUpdate+0x3a2>
 8012466:	bf00      	nop
 8012468:	20000364 	.word	0x20000364
 801246c:	2000032c 	.word	0x2000032c
 8012470:	20000344 	.word	0x20000344
 8012474:	08029548 	.word	0x08029548
 8012478:	08029568 	.word	0x08029568
 801247c:	08029584 	.word	0x08029584
 8012480:	08029598 	.word	0x08029598
 8012484:	080295a8 	.word	0x080295a8
 8012488:	080295b8 	.word	0x080295b8
 801248c:	080295c4 	.word	0x080295c4
 8012490:	080295cc 	.word	0x080295cc
 8012494:	200002dc 	.word	0x200002dc
 8012498:	080295d8 	.word	0x080295d8
	}else
	{
		lcdPrintf(40, 16*5, white, "MODE : Manual");
 801249c:	4b6a      	ldr	r3, [pc, #424]	; (8012648 <SettingUpdate+0x540>)
 801249e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124a2:	2150      	movs	r1, #80	; 0x50
 80124a4:	2028      	movs	r0, #40	; 0x28
 80124a6:	f003 f939 	bl	801571c <lcdPrintf>
	}

	blink = get_blink();
 80124aa:	f006 f965 	bl	8018778 <get_blink>
 80124ae:	4603      	mov	r3, r0
 80124b0:	461a      	mov	r2, r3
 80124b2:	4b66      	ldr	r3, [pc, #408]	; (801264c <SettingUpdate+0x544>)
 80124b4:	701a      	strb	r2, [r3, #0]
	draw_fan_status(0, 16*5, blink);
 80124b6:	4b65      	ldr	r3, [pc, #404]	; (801264c <SettingUpdate+0x544>)
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	2150      	movs	r1, #80	; 0x50
 80124be:	2000      	movs	r0, #0
 80124c0:	f006 f910 	bl	80186e4 <draw_fan_status>

	lcdDrawRoundRect(0, 0+112,  25, 16, 5, white);
 80124c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124c8:	9301      	str	r3, [sp, #4]
 80124ca:	2305      	movs	r3, #5
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	2310      	movs	r3, #16
 80124d0:	2219      	movs	r2, #25
 80124d2:	2170      	movs	r1, #112	; 0x70
 80124d4:	2000      	movs	r0, #0
 80124d6:	f002 fdbf 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1, 1+112, 23, 14, 5, red);
 80124da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80124de:	9301      	str	r3, [sp, #4]
 80124e0:	2305      	movs	r3, #5
 80124e2:	9300      	str	r3, [sp, #0]
 80124e4:	230e      	movs	r3, #14
 80124e6:	2217      	movs	r2, #23
 80124e8:	2171      	movs	r1, #113	; 0x71
 80124ea:	2001      	movs	r0, #1
 80124ec:	f002 feae 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 80124f0:	2000      	movs	r0, #0
 80124f2:	f003 fae3 	bl	8015abc <lcdSetFont>
	lcdPrintf(2,5+112, white, "ATO");
 80124f6:	4b56      	ldr	r3, [pc, #344]	; (8012650 <SettingUpdate+0x548>)
 80124f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124fc:	2175      	movs	r1, #117	; 0x75
 80124fe:	2002      	movs	r0, #2
 8012500:	f003 f90c 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+26, 0+112,  25, 16, 5, white);
 8012504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012508:	9301      	str	r3, [sp, #4]
 801250a:	2305      	movs	r3, #5
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	2310      	movs	r3, #16
 8012510:	2219      	movs	r2, #25
 8012512:	2170      	movs	r1, #112	; 0x70
 8012514:	201a      	movs	r0, #26
 8012516:	f002 fd9f 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+26, 1+112, 23, 14, 5, red);
 801251a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801251e:	9301      	str	r3, [sp, #4]
 8012520:	2305      	movs	r3, #5
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	230e      	movs	r3, #14
 8012526:	2217      	movs	r2, #23
 8012528:	2171      	movs	r1, #113	; 0x71
 801252a:	201b      	movs	r0, #27
 801252c:	f002 fe8e 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8012530:	2000      	movs	r0, #0
 8012532:	f003 fac3 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+26,5+112, white, "Vv");
 8012536:	4b47      	ldr	r3, [pc, #284]	; (8012654 <SettingUpdate+0x54c>)
 8012538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801253c:	2175      	movs	r1, #117	; 0x75
 801253e:	201c      	movs	r0, #28
 8012540:	f003 f8ec 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+52, 0+112,  25, 16, 5, white);
 8012544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012548:	9301      	str	r3, [sp, #4]
 801254a:	2305      	movs	r3, #5
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	2310      	movs	r3, #16
 8012550:	2219      	movs	r2, #25
 8012552:	2170      	movs	r1, #112	; 0x70
 8012554:	2034      	movs	r0, #52	; 0x34
 8012556:	f002 fd7f 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+52, 1+112, 23, 14, 5, red);
 801255a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801255e:	9301      	str	r3, [sp, #4]
 8012560:	2305      	movs	r3, #5
 8012562:	9300      	str	r3, [sp, #0]
 8012564:	230e      	movs	r3, #14
 8012566:	2217      	movs	r2, #23
 8012568:	2171      	movs	r1, #113	; 0x71
 801256a:	2035      	movs	r0, #53	; 0x35
 801256c:	f002 fe6e 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 8012570:	2000      	movs	r0, #0
 8012572:	f003 faa3 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+52,5+112, white, "FAN");
 8012576:	4b38      	ldr	r3, [pc, #224]	; (8012658 <SettingUpdate+0x550>)
 8012578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801257c:	2175      	movs	r1, #117	; 0x75
 801257e:	2036      	movs	r0, #54	; 0x36
 8012580:	f003 f8cc 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+78, 0+112,  25, 16, 5, white);
 8012584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012588:	9301      	str	r3, [sp, #4]
 801258a:	2305      	movs	r3, #5
 801258c:	9300      	str	r3, [sp, #0]
 801258e:	2310      	movs	r3, #16
 8012590:	2219      	movs	r2, #25
 8012592:	2170      	movs	r1, #112	; 0x70
 8012594:	204e      	movs	r0, #78	; 0x4e
 8012596:	f002 fd5f 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+78, 1+112, 23, 14, 5, red);
 801259a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801259e:	9301      	str	r3, [sp, #4]
 80125a0:	2305      	movs	r3, #5
 80125a2:	9300      	str	r3, [sp, #0]
 80125a4:	230e      	movs	r3, #14
 80125a6:	2217      	movs	r2, #23
 80125a8:	2171      	movs	r1, #113	; 0x71
 80125aa:	204f      	movs	r0, #79	; 0x4f
 80125ac:	f002 fe4e 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 80125b0:	2000      	movs	r0, #0
 80125b2:	f003 fa83 	bl	8015abc <lcdSetFont>
	lcdPrintf(5+78,5+112, white, "PP");
 80125b6:	4b29      	ldr	r3, [pc, #164]	; (801265c <SettingUpdate+0x554>)
 80125b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125bc:	2175      	movs	r1, #117	; 0x75
 80125be:	2053      	movs	r0, #83	; 0x53
 80125c0:	f003 f8ac 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+104, 0+112,  25, 16, 5, white);
 80125c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125c8:	9301      	str	r3, [sp, #4]
 80125ca:	2305      	movs	r3, #5
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	2310      	movs	r3, #16
 80125d0:	2219      	movs	r2, #25
 80125d2:	2170      	movs	r1, #112	; 0x70
 80125d4:	2068      	movs	r0, #104	; 0x68
 80125d6:	f002 fd3f 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+104, 1+112, 23, 14, 5, red);
 80125da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80125de:	9301      	str	r3, [sp, #4]
 80125e0:	2305      	movs	r3, #5
 80125e2:	9300      	str	r3, [sp, #0]
 80125e4:	230e      	movs	r3, #14
 80125e6:	2217      	movs	r2, #23
 80125e8:	2171      	movs	r1, #113	; 0x71
 80125ea:	2069      	movs	r0, #105	; 0x69
 80125ec:	f002 fe2e 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 80125f0:	2000      	movs	r0, #0
 80125f2:	f003 fa63 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+104,5+110, white, "HTR");
 80125f6:	4b1a      	ldr	r3, [pc, #104]	; (8012660 <SettingUpdate+0x558>)
 80125f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125fc:	2173      	movs	r1, #115	; 0x73
 80125fe:	206a      	movs	r0, #106	; 0x6a
 8012600:	f003 f88c 	bl	801571c <lcdPrintf>

	lcdDrawRoundRect(0+130, 0+112,  25, 16, 5, white);
 8012604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012608:	9301      	str	r3, [sp, #4]
 801260a:	2305      	movs	r3, #5
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	2310      	movs	r3, #16
 8012610:	2219      	movs	r2, #25
 8012612:	2170      	movs	r1, #112	; 0x70
 8012614:	2082      	movs	r0, #130	; 0x82
 8012616:	f002 fd1f 	bl	8015058 <lcdDrawRoundRect>
	lcdDrawFillRoundRect(1+130, 1+112, 23, 14, 5, blue);
 801261a:	231f      	movs	r3, #31
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	2305      	movs	r3, #5
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	230e      	movs	r3, #14
 8012624:	2217      	movs	r2, #23
 8012626:	2171      	movs	r1, #113	; 0x71
 8012628:	2083      	movs	r0, #131	; 0x83
 801262a:	f002 fe0f 	bl	801524c <lcdDrawFillRoundRect>
	lcdSetFont(LCD_FONT_07x10);
 801262e:	2000      	movs	r0, #0
 8012630:	f003 fa44 	bl	8015abc <lcdSetFont>
	lcdPrintf(2+130,5+110, white, "SET");
 8012634:	4b0b      	ldr	r3, [pc, #44]	; (8012664 <SettingUpdate+0x55c>)
 8012636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801263a:	2173      	movs	r1, #115	; 0x73
 801263c:	2084      	movs	r0, #132	; 0x84
 801263e:	f003 f86d 	bl	801571c <lcdPrintf>

	for (int i=0; i<sensor.setting_cnt; i++)
 8012642:	2300      	movs	r3, #0
 8012644:	607b      	str	r3, [r7, #4]
 8012646:	e0dd      	b.n	8012804 <SettingUpdate+0x6fc>
 8012648:	0802960c 	.word	0x0802960c
 801264c:	20000395 	.word	0x20000395
 8012650:	080295f4 	.word	0x080295f4
 8012654:	080295f8 	.word	0x080295f8
 8012658:	080295fc 	.word	0x080295fc
 801265c:	08029600 	.word	0x08029600
 8012660:	08029604 	.word	0x08029604
 8012664:	08029608 	.word	0x08029608
	{
		if (sensor.setting_index == Water_Temp)
 8012668:	4b6d      	ldr	r3, [pc, #436]	; (8012820 <SettingUpdate+0x718>)
 801266a:	7ddb      	ldrb	r3, [r3, #23]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d141      	bne.n	80126f4 <SettingUpdate+0x5ec>
		{
			lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*2)+1, 60, 15, 5, blue);
 8012670:	f002 febc 	bl	80153ec <lcdGetWidth>
 8012674:	4603      	mov	r3, r0
 8012676:	0fda      	lsrs	r2, r3, #31
 8012678:	4413      	add	r3, r2
 801267a:	105b      	asrs	r3, r3, #1
 801267c:	f103 0014 	add.w	r0, r3, #20
 8012680:	231f      	movs	r3, #31
 8012682:	9301      	str	r3, [sp, #4]
 8012684:	2305      	movs	r3, #5
 8012686:	9300      	str	r3, [sp, #0]
 8012688:	230f      	movs	r3, #15
 801268a:	223c      	movs	r2, #60	; 0x3c
 801268c:	2121      	movs	r1, #33	; 0x21
 801268e:	f002 fddd 	bl	801524c <lcdDrawFillRoundRect>
			if(sensor.setting == true)
 8012692:	4b63      	ldr	r3, [pc, #396]	; (8012820 <SettingUpdate+0x718>)
 8012694:	7d1b      	ldrb	r3, [r3, #20]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d011      	beq.n	80126be <SettingUpdate+0x5b6>
			{
				lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*2)+1, 60, 15, 5, red);
 801269a:	f002 fea7 	bl	80153ec <lcdGetWidth>
 801269e:	4603      	mov	r3, r0
 80126a0:	0fda      	lsrs	r2, r3, #31
 80126a2:	4413      	add	r3, r2
 80126a4:	105b      	asrs	r3, r3, #1
 80126a6:	f103 0014 	add.w	r0, r3, #20
 80126aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80126ae:	9301      	str	r3, [sp, #4]
 80126b0:	2305      	movs	r3, #5
 80126b2:	9300      	str	r3, [sp, #0]
 80126b4:	230f      	movs	r3, #15
 80126b6:	223c      	movs	r2, #60	; 0x3c
 80126b8:	2121      	movs	r1, #33	; 0x21
 80126ba:	f002 fdc7 	bl	801524c <lcdDrawFillRoundRect>
			}
			lcdSetFont(LCD_FONT_HAN);
 80126be:	2003      	movs	r0, #3
 80126c0:	f003 f9fc 	bl	8015abc <lcdSetFont>
			lcdPrintf((lcdGetWidth()/2)+20,16*2, white, " %3.1f도" , sensor.ds18b20_temp_setting);
 80126c4:	f002 fe92 	bl	80153ec <lcdGetWidth>
 80126c8:	4603      	mov	r3, r0
 80126ca:	0fda      	lsrs	r2, r3, #31
 80126cc:	4413      	add	r3, r2
 80126ce:	105b      	asrs	r3, r3, #1
 80126d0:	f103 0414 	add.w	r4, r3, #20
 80126d4:	4b52      	ldr	r3, [pc, #328]	; (8012820 <SettingUpdate+0x718>)
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fe fa9d 	bl	8010c18 <__aeabi_f2d>
 80126de:	4602      	mov	r2, r0
 80126e0:	460b      	mov	r3, r1
 80126e2:	e9cd 2300 	strd	r2, r3, [sp]
 80126e6:	4b4f      	ldr	r3, [pc, #316]	; (8012824 <SettingUpdate+0x71c>)
 80126e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126ec:	2120      	movs	r1, #32
 80126ee:	4620      	mov	r0, r4
 80126f0:	f003 f814 	bl	801571c <lcdPrintf>
		}
		if (sensor.setting_index == Water_Level)
 80126f4:	4b4a      	ldr	r3, [pc, #296]	; (8012820 <SettingUpdate+0x718>)
 80126f6:	7ddb      	ldrb	r3, [r3, #23]
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d13a      	bne.n	8012772 <SettingUpdate+0x66a>
		{
			lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*3)+1, 60, 15, 5, blue);
 80126fc:	f002 fe76 	bl	80153ec <lcdGetWidth>
 8012700:	4603      	mov	r3, r0
 8012702:	0fda      	lsrs	r2, r3, #31
 8012704:	4413      	add	r3, r2
 8012706:	105b      	asrs	r3, r3, #1
 8012708:	f103 0014 	add.w	r0, r3, #20
 801270c:	231f      	movs	r3, #31
 801270e:	9301      	str	r3, [sp, #4]
 8012710:	2305      	movs	r3, #5
 8012712:	9300      	str	r3, [sp, #0]
 8012714:	230f      	movs	r3, #15
 8012716:	223c      	movs	r2, #60	; 0x3c
 8012718:	2131      	movs	r1, #49	; 0x31
 801271a:	f002 fd97 	bl	801524c <lcdDrawFillRoundRect>
			if(sensor.setting == true)
 801271e:	4b40      	ldr	r3, [pc, #256]	; (8012820 <SettingUpdate+0x718>)
 8012720:	7d1b      	ldrb	r3, [r3, #20]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d011      	beq.n	801274a <SettingUpdate+0x642>
			{
				lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*3)+1, 60, 15, 5, red);
 8012726:	f002 fe61 	bl	80153ec <lcdGetWidth>
 801272a:	4603      	mov	r3, r0
 801272c:	0fda      	lsrs	r2, r3, #31
 801272e:	4413      	add	r3, r2
 8012730:	105b      	asrs	r3, r3, #1
 8012732:	f103 0014 	add.w	r0, r3, #20
 8012736:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801273a:	9301      	str	r3, [sp, #4]
 801273c:	2305      	movs	r3, #5
 801273e:	9300      	str	r3, [sp, #0]
 8012740:	230f      	movs	r3, #15
 8012742:	223c      	movs	r2, #60	; 0x3c
 8012744:	2131      	movs	r1, #49	; 0x31
 8012746:	f002 fd81 	bl	801524c <lcdDrawFillRoundRect>
			}
			lcdSetFont(LCD_FONT_HAN);
 801274a:	2003      	movs	r0, #3
 801274c:	f003 f9b6 	bl	8015abc <lcdSetFont>
			lcdPrintf((lcdGetWidth()/2)+20,16*3, white, " %3dcm" , sensor.water_level_setting);
 8012750:	f002 fe4c 	bl	80153ec <lcdGetWidth>
 8012754:	4603      	mov	r3, r0
 8012756:	0fda      	lsrs	r2, r3, #31
 8012758:	4413      	add	r3, r2
 801275a:	105b      	asrs	r3, r3, #1
 801275c:	f103 0014 	add.w	r0, r3, #20
 8012760:	4b2f      	ldr	r3, [pc, #188]	; (8012820 <SettingUpdate+0x718>)
 8012762:	6a1b      	ldr	r3, [r3, #32]
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	4b30      	ldr	r3, [pc, #192]	; (8012828 <SettingUpdate+0x720>)
 8012768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801276c:	2130      	movs	r1, #48	; 0x30
 801276e:	f002 ffd5 	bl	801571c <lcdPrintf>
		}
		if (sensor.setting_index == Water_Quality)
 8012772:	4b2b      	ldr	r3, [pc, #172]	; (8012820 <SettingUpdate+0x718>)
 8012774:	7ddb      	ldrb	r3, [r3, #23]
 8012776:	2b02      	cmp	r3, #2
 8012778:	d141      	bne.n	80127fe <SettingUpdate+0x6f6>
		{
			lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*4)+1, 60, 15, 5, blue);
 801277a:	f002 fe37 	bl	80153ec <lcdGetWidth>
 801277e:	4603      	mov	r3, r0
 8012780:	0fda      	lsrs	r2, r3, #31
 8012782:	4413      	add	r3, r2
 8012784:	105b      	asrs	r3, r3, #1
 8012786:	f103 0014 	add.w	r0, r3, #20
 801278a:	231f      	movs	r3, #31
 801278c:	9301      	str	r3, [sp, #4]
 801278e:	2305      	movs	r3, #5
 8012790:	9300      	str	r3, [sp, #0]
 8012792:	230f      	movs	r3, #15
 8012794:	223c      	movs	r2, #60	; 0x3c
 8012796:	2141      	movs	r1, #65	; 0x41
 8012798:	f002 fd58 	bl	801524c <lcdDrawFillRoundRect>
			if(sensor.setting == true)
 801279c:	4b20      	ldr	r3, [pc, #128]	; (8012820 <SettingUpdate+0x718>)
 801279e:	7d1b      	ldrb	r3, [r3, #20]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d011      	beq.n	80127c8 <SettingUpdate+0x6c0>
			{
				lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*4)+1, 60, 15, 5, red);
 80127a4:	f002 fe22 	bl	80153ec <lcdGetWidth>
 80127a8:	4603      	mov	r3, r0
 80127aa:	0fda      	lsrs	r2, r3, #31
 80127ac:	4413      	add	r3, r2
 80127ae:	105b      	asrs	r3, r3, #1
 80127b0:	f103 0014 	add.w	r0, r3, #20
 80127b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80127b8:	9301      	str	r3, [sp, #4]
 80127ba:	2305      	movs	r3, #5
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	230f      	movs	r3, #15
 80127c0:	223c      	movs	r2, #60	; 0x3c
 80127c2:	2141      	movs	r1, #65	; 0x41
 80127c4:	f002 fd42 	bl	801524c <lcdDrawFillRoundRect>
			}
			lcdSetFont(LCD_FONT_HAN);
 80127c8:	2003      	movs	r0, #3
 80127ca:	f003 f977 	bl	8015abc <lcdSetFont>
			lcdPrintf((lcdGetWidth()/2)+20,16*4, white, "%4.1fppm" , sensor.water_quality_setting);
 80127ce:	f002 fe0d 	bl	80153ec <lcdGetWidth>
 80127d2:	4603      	mov	r3, r0
 80127d4:	0fda      	lsrs	r2, r3, #31
 80127d6:	4413      	add	r3, r2
 80127d8:	105b      	asrs	r3, r3, #1
 80127da:	f103 0414 	add.w	r4, r3, #20
 80127de:	4b10      	ldr	r3, [pc, #64]	; (8012820 <SettingUpdate+0x718>)
 80127e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe fa18 	bl	8010c18 <__aeabi_f2d>
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	e9cd 2300 	strd	r2, r3, [sp]
 80127f0:	4b0e      	ldr	r3, [pc, #56]	; (801282c <SettingUpdate+0x724>)
 80127f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127f6:	2140      	movs	r1, #64	; 0x40
 80127f8:	4620      	mov	r0, r4
 80127fa:	f002 ff8f 	bl	801571c <lcdPrintf>
	for (int i=0; i<sensor.setting_cnt; i++)
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	3301      	adds	r3, #1
 8012802:	607b      	str	r3, [r7, #4]
 8012804:	4b06      	ldr	r3, [pc, #24]	; (8012820 <SettingUpdate+0x718>)
 8012806:	7d9b      	ldrb	r3, [r3, #22]
 8012808:	461a      	mov	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4293      	cmp	r3, r2
 801280e:	f6ff af2b 	blt.w	8012668 <SettingUpdate+0x560>
		}
	}

	lcdRequestDraw();
 8012812:	f002 fd7b 	bl	801530c <lcdRequestDraw>
	}
}
 8012816:	bf00      	nop
 8012818:	370c      	adds	r7, #12
 801281a:	46bd      	mov	sp, r7
 801281c:	bd90      	pop	{r4, r7, pc}
 801281e:	bf00      	nop
 8012820:	20000364 	.word	0x20000364
 8012824:	080295b8 	.word	0x080295b8
 8012828:	080295c4 	.word	0x080295c4
 801282c:	080295cc 	.word	0x080295cc

08012830 <cliBoot>:

void cliBoot(cli_args_t *args)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b084      	sub	sp, #16
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8012838:	2300      	movs	r3, #0
 801283a:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "info") == true)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	881b      	ldrh	r3, [r3, #0]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d11e      	bne.n	8012882 <cliBoot+0x52>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	695b      	ldr	r3, [r3, #20]
 8012848:	4926      	ldr	r1, [pc, #152]	; (80128e4 <cliBoot+0xb4>)
 801284a:	2000      	movs	r0, #0
 801284c:	4798      	blx	r3
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d016      	beq.n	8012882 <cliBoot+0x52>
  {
    firm_version_t *p_boot_ver = (firm_version_t *)(FLASH_ADDR_BOOT_VER);
 8012854:	4b24      	ldr	r3, [pc, #144]	; (80128e8 <cliBoot+0xb8>)
 8012856:	60bb      	str	r3, [r7, #8]


    cliPrintf("boot ver   : %s\n", p_boot_ver->version);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	4619      	mov	r1, r3
 801285c:	4823      	ldr	r0, [pc, #140]	; (80128ec <cliBoot+0xbc>)
 801285e:	f000 ff03 	bl	8013668 <cliPrintf>
    cliPrintf("boot name  : %s\n", p_boot_ver->name);
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	3320      	adds	r3, #32
 8012866:	4619      	mov	r1, r3
 8012868:	4821      	ldr	r0, [pc, #132]	; (80128f0 <cliBoot+0xc0>)
 801286a:	f000 fefd 	bl	8013668 <cliPrintf>
    cliPrintf("boot param : 0x%X\n", rtcBackupRegRead(0));
 801286e:	2000      	movs	r0, #0
 8012870:	f003 fe30 	bl	80164d4 <rtcBackupRegRead>
 8012874:	4603      	mov	r3, r0
 8012876:	4619      	mov	r1, r3
 8012878:	481e      	ldr	r0, [pc, #120]	; (80128f4 <cliBoot+0xc4>)
 801287a:	f000 fef5 	bl	8013668 <cliPrintf>

    ret = true;
 801287e:	2301      	movs	r3, #1
 8012880:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "jump_boot") == true)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	2b01      	cmp	r3, #1
 8012888:	d10c      	bne.n	80128a4 <cliBoot+0x74>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	695b      	ldr	r3, [r3, #20]
 801288e:	491a      	ldr	r1, [pc, #104]	; (80128f8 <cliBoot+0xc8>)
 8012890:	2000      	movs	r0, #0
 8012892:	4798      	blx	r3
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d004      	beq.n	80128a4 <cliBoot+0x74>
  {
    resetToBoot(0);
 801289a:	2000      	movs	r0, #0
 801289c:	f003 fdb8 	bl	8016410 <resetToBoot>
    ret = true;
 80128a0:	2301      	movs	r3, #1
 80128a2:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "jump_fw") == true)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d10d      	bne.n	80128c8 <cliBoot+0x98>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	695b      	ldr	r3, [r3, #20]
 80128b0:	4912      	ldr	r1, [pc, #72]	; (80128fc <cliBoot+0xcc>)
 80128b2:	2000      	movs	r0, #0
 80128b4:	4798      	blx	r3
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d005      	beq.n	80128c8 <cliBoot+0x98>
  {
    rtcBackupRegWrite(0, 0);
 80128bc:	2100      	movs	r1, #0
 80128be:	2000      	movs	r0, #0
 80128c0:	f003 fe18 	bl	80164f4 <rtcBackupRegWrite>
    ret = true;
 80128c4:	2301      	movs	r3, #1
 80128c6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
 80128ca:	f083 0301 	eor.w	r3, r3, #1
 80128ce:	b2db      	uxtb	r3, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d002      	beq.n	80128da <cliBoot+0xaa>
  {
    cliPrintf("boot info\n");
 80128d4:	480a      	ldr	r0, [pc, #40]	; (8012900 <cliBoot+0xd0>)
 80128d6:	f000 fec7 	bl	8013668 <cliPrintf>
  }
}
 80128da:	bf00      	nop
 80128dc:	3710      	adds	r7, #16
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	0802961c 	.word	0x0802961c
 80128e8:	08000400 	.word	0x08000400
 80128ec:	08029624 	.word	0x08029624
 80128f0:	08029638 	.word	0x08029638
 80128f4:	0802964c 	.word	0x0802964c
 80128f8:	08029660 	.word	0x08029660
 80128fc:	0802966c 	.word	0x0802966c
 8012900:	08029674 	.word	0x08029674

08012904 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
  HAL_Init();
 801290a:	f00a fe4b 	bl	801d5a4 <HAL_Init>
  SystemClock_Config();
 801290e:	f000 f835 	bl	801297c <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012912:	2300      	movs	r3, #0
 8012914:	607b      	str	r3, [r7, #4]
 8012916:	4b0f      	ldr	r3, [pc, #60]	; (8012954 <bspInit+0x50>)
 8012918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801291a:	4a0e      	ldr	r2, [pc, #56]	; (8012954 <bspInit+0x50>)
 801291c:	f043 0304 	orr.w	r3, r3, #4
 8012920:	6313      	str	r3, [r2, #48]	; 0x30
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <bspInit+0x50>)
 8012924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012926:	f003 0304 	and.w	r3, r3, #4
 801292a:	607b      	str	r3, [r7, #4]
 801292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801292e:	2300      	movs	r3, #0
 8012930:	603b      	str	r3, [r7, #0]
 8012932:	4b08      	ldr	r3, [pc, #32]	; (8012954 <bspInit+0x50>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012936:	4a07      	ldr	r2, [pc, #28]	; (8012954 <bspInit+0x50>)
 8012938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801293c:	6313      	str	r3, [r2, #48]	; 0x30
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <bspInit+0x50>)
 8012940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012946:	603b      	str	r3, [r7, #0]
 8012948:	683b      	ldr	r3, [r7, #0]
}
 801294a:	bf00      	nop
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	40023800 	.word	0x40023800

08012958 <delay>:

void delay(uint32_t ms)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f00a fe91 	bl	801d688 <HAL_Delay>
#endif
}
 8012966:	bf00      	nop
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <millis>:

uint32_t millis(void)
{
 801296e:	b580      	push	{r7, lr}
 8012970:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012972:	f00a fe7d 	bl	801d670 <HAL_GetTick>
 8012976:	4603      	mov	r3, r0
}
 8012978:	4618      	mov	r0, r3
 801297a:	bd80      	pop	{r7, pc}

0801297c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b09a      	sub	sp, #104	; 0x68
 8012980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012986:	2230      	movs	r2, #48	; 0x30
 8012988:	2100      	movs	r1, #0
 801298a:	4618      	mov	r0, r3
 801298c:	f012 faf4 	bl	8024f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012994:	2200      	movs	r2, #0
 8012996:	601a      	str	r2, [r3, #0]
 8012998:	605a      	str	r2, [r3, #4]
 801299a:	609a      	str	r2, [r3, #8]
 801299c:	60da      	str	r2, [r3, #12]
 801299e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80129a0:	f107 030c 	add.w	r3, r7, #12
 80129a4:	2200      	movs	r2, #0
 80129a6:	601a      	str	r2, [r3, #0]
 80129a8:	605a      	str	r2, [r3, #4]
 80129aa:	609a      	str	r2, [r3, #8]
 80129ac:	60da      	str	r2, [r3, #12]
 80129ae:	611a      	str	r2, [r3, #16]
 80129b0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80129b2:	2300      	movs	r3, #0
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	4b30      	ldr	r3, [pc, #192]	; (8012a78 <SystemClock_Config+0xfc>)
 80129b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ba:	4a2f      	ldr	r2, [pc, #188]	; (8012a78 <SystemClock_Config+0xfc>)
 80129bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80129c0:	6413      	str	r3, [r2, #64]	; 0x40
 80129c2:	4b2d      	ldr	r3, [pc, #180]	; (8012a78 <SystemClock_Config+0xfc>)
 80129c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129ca:	60bb      	str	r3, [r7, #8]
 80129cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80129ce:	2300      	movs	r3, #0
 80129d0:	607b      	str	r3, [r7, #4]
 80129d2:	4b2a      	ldr	r3, [pc, #168]	; (8012a7c <SystemClock_Config+0x100>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a29      	ldr	r2, [pc, #164]	; (8012a7c <SystemClock_Config+0x100>)
 80129d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80129dc:	6013      	str	r3, [r2, #0]
 80129de:	4b27      	ldr	r3, [pc, #156]	; (8012a7c <SystemClock_Config+0x100>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80129e6:	607b      	str	r3, [r7, #4]
 80129e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80129ea:	2309      	movs	r3, #9
 80129ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80129ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80129f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80129f4:	2301      	movs	r3, #1
 80129f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80129f8:	2302      	movs	r3, #2
 80129fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80129fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012a00:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8012a02:	2319      	movs	r3, #25
 8012a04:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8012a06:	23c0      	movs	r3, #192	; 0xc0
 8012a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012a0a:	2302      	movs	r3, #2
 8012a0c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8012a0e:	2304      	movs	r3, #4
 8012a10:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012a16:	4618      	mov	r0, r3
 8012a18:	f00c fe70 	bl	801f6fc <HAL_RCC_OscConfig>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d001      	beq.n	8012a26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8012a22:	f000 f82d 	bl	8012a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012a26:	230f      	movs	r3, #15
 8012a28:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012a2a:	2302      	movs	r3, #2
 8012a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8012a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a40:	2103      	movs	r1, #3
 8012a42:	4618      	mov	r0, r3
 8012a44:	f00d f8c8 	bl	801fbd8 <HAL_RCC_ClockConfig>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8012a4e:	f000 f817 	bl	8012a80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012a52:	2302      	movs	r3, #2
 8012a54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8012a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a5c:	f107 030c 	add.w	r3, r7, #12
 8012a60:	4618      	mov	r0, r3
 8012a62:	f00d fa99 	bl	801ff98 <HAL_RCCEx_PeriphCLKConfig>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8012a6c:	f000 f808 	bl	8012a80 <Error_Handler>
  }
}
 8012a70:	bf00      	nop
 8012a72:	3768      	adds	r7, #104	; 0x68
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	40023800 	.word	0x40023800
 8012a7c:	40007000 	.word	0x40007000

08012a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012a80:	b480      	push	{r7}
 8012a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012a84:	b672      	cpsid	i
}
 8012a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012a88:	e7fe      	b.n	8012a88 <Error_Handler+0x8>
	...

08012a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012a92:	2300      	movs	r3, #0
 8012a94:	607b      	str	r3, [r7, #4]
 8012a96:	4b10      	ldr	r3, [pc, #64]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a9a:	4a0f      	ldr	r2, [pc, #60]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8012aa2:	4b0d      	ldr	r3, [pc, #52]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012aaa:	607b      	str	r3, [r7, #4]
 8012aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012aae:	2300      	movs	r3, #0
 8012ab0:	603b      	str	r3, [r7, #0]
 8012ab2:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab6:	4a08      	ldr	r2, [pc, #32]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012abc:	6413      	str	r3, [r2, #64]	; 0x40
 8012abe:	4b06      	ldr	r3, [pc, #24]	; (8012ad8 <HAL_MspInit+0x4c>)
 8012ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ac6:	603b      	str	r3, [r7, #0]
 8012ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012aca:	bf00      	nop
 8012acc:	370c      	adds	r7, #12
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	40023800 	.word	0x40023800

08012adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012adc:	b480      	push	{r7}
 8012ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8012ae0:	e7fe      	b.n	8012ae0 <NMI_Handler+0x4>

08012ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012ae2:	b480      	push	{r7}
 8012ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012ae6:	e7fe      	b.n	8012ae6 <HardFault_Handler+0x4>

08012ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012ae8:	b480      	push	{r7}
 8012aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012aec:	e7fe      	b.n	8012aec <MemManage_Handler+0x4>

08012aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012aee:	b480      	push	{r7}
 8012af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012af2:	e7fe      	b.n	8012af2 <BusFault_Handler+0x4>

08012af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012af4:	b480      	push	{r7}
 8012af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012af8:	e7fe      	b.n	8012af8 <UsageFault_Handler+0x4>

08012afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012afa:	b480      	push	{r7}
 8012afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012afe:	bf00      	nop
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012b0c:	bf00      	nop
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b14:	4770      	bx	lr

08012b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012b16:	b480      	push	{r7}
 8012b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012b1a:	bf00      	nop
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012b28:	f00a fd8e 	bl	801d648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  resetISR();
 8012b2c:	f003 fc4e 	bl	80163cc <resetISR>
  /* USER CODE END SysTick_IRQn 1 */
}
 8012b30:	bf00      	nop
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8012b38:	4802      	ldr	r0, [pc, #8]	; (8012b44 <ADC_IRQHandler+0x10>)
 8012b3a:	f00a fe0c 	bl	801d756 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8012b3e:	bf00      	nop
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	2000ad3c 	.word	0x2000ad3c

08012b48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8012b4c:	4802      	ldr	r0, [pc, #8]	; (8012b58 <TIM3_IRQHandler+0x10>)
 8012b4e:	f00f fd23 	bl	8022598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012b52:	bf00      	nop
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	2000abf0 	.word	0x2000abf0

08012b5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8012b60:	4802      	ldr	r0, [pc, #8]	; (8012b6c <SPI1_IRQHandler+0x10>)
 8012b62:	f00f fa05 	bl	8021f70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8012b66:	bf00      	nop
 8012b68:	bd80      	pop	{r7, pc}
 8012b6a:	bf00      	nop
 8012b6c:	2000ac84 	.word	0x2000ac84

08012b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012b74:	4802      	ldr	r0, [pc, #8]	; (8012b80 <USART1_IRQHandler+0x10>)
 8012b76:	f010 fc57 	bl	8023428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012b7a:	bf00      	nop
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	2000b1dc 	.word	0x2000b1dc

08012b84 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8012b88:	4802      	ldr	r0, [pc, #8]	; (8012b94 <SDIO_IRQHandler+0x10>)
 8012b8a:	f00d fe77 	bl	802087c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8012b8e:	bf00      	nop
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	2000aaac 	.word	0x2000aaac

08012b98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012b9c:	4802      	ldr	r0, [pc, #8]	; (8012ba8 <DMA2_Stream0_IRQHandler+0x10>)
 8012b9e:	f00b fd9b 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8012ba2:	bf00      	nop
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	2000ad84 	.word	0x2000ad84

08012bac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8012bb0:	4802      	ldr	r0, [pc, #8]	; (8012bbc <DMA2_Stream2_IRQHandler+0x10>)
 8012bb2:	f00b fd91 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8012bb6:	bf00      	nop
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	2000b27c 	.word	0x2000b27c

08012bc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8012bc4:	4802      	ldr	r0, [pc, #8]	; (8012bd0 <DMA2_Stream3_IRQHandler+0x10>)
 8012bc6:	f00b fd87 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8012bca:	bf00      	nop
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000ab90 	.word	0x2000ab90

08012bd4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8012bd8:	4802      	ldr	r0, [pc, #8]	; (8012be4 <DMA2_Stream5_IRQHandler+0x10>)
 8012bda:	f00b fd7d 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8012bde:	bf00      	nop
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	2000acdc 	.word	0x2000acdc

08012be8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8012bec:	4802      	ldr	r0, [pc, #8]	; (8012bf8 <DMA2_Stream6_IRQHandler+0x10>)
 8012bee:	f00b fd73 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8012bf2:	bf00      	nop
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	2000ab30 	.word	0x2000ab30

08012bfc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8012c00:	4802      	ldr	r0, [pc, #8]	; (8012c0c <DMA2_Stream7_IRQHandler+0x10>)
 8012c02:	f00b fd69 	bl	801e6d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8012c06:	bf00      	nop
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	2000b21c 	.word	0x2000b21c

08012c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012c10:	b480      	push	{r7}
 8012c12:	af00      	add	r7, sp, #0
	return 1;
 8012c14:	2301      	movs	r3, #1
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr

08012c20 <_kill>:

int _kill(int pid, int sig)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8012c2a:	f012 f95d 	bl	8024ee8 <__errno>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	2216      	movs	r2, #22
 8012c32:	601a      	str	r2, [r3, #0]
	return -1;
 8012c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <_exit>:

void _exit (int status)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8012c48:	f04f 31ff 	mov.w	r1, #4294967295
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7ff ffe7 	bl	8012c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8012c52:	e7fe      	b.n	8012c52 <_exit+0x12>

08012c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b086      	sub	sp, #24
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	60f8      	str	r0, [r7, #12]
 8012c5c:	60b9      	str	r1, [r7, #8]
 8012c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c60:	2300      	movs	r3, #0
 8012c62:	617b      	str	r3, [r7, #20]
 8012c64:	e00a      	b.n	8012c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8012c66:	f3af 8000 	nop.w
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	60ba      	str	r2, [r7, #8]
 8012c72:	b2ca      	uxtb	r2, r1
 8012c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	3301      	adds	r3, #1
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	697a      	ldr	r2, [r7, #20]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	dbf0      	blt.n	8012c66 <_read+0x12>
	}

return len;
 8012c84:	687b      	ldr	r3, [r7, #4]
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b086      	sub	sp, #24
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	60f8      	str	r0, [r7, #12]
 8012c96:	60b9      	str	r1, [r7, #8]
 8012c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	617b      	str	r3, [r7, #20]
 8012c9e:	e009      	b.n	8012cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	1c5a      	adds	r2, r3, #1
 8012ca4:	60ba      	str	r2, [r7, #8]
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	617b      	str	r3, [r7, #20]
 8012cb4:	697a      	ldr	r2, [r7, #20]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	dbf1      	blt.n	8012ca0 <_write+0x12>
	}
	return len;
 8012cbc:	687b      	ldr	r3, [r7, #4]
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3718      	adds	r7, #24
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}

08012cc6 <_close>:

int _close(int file)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b083      	sub	sp, #12
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8012cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	370c      	adds	r7, #12
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr

08012cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
 8012ce6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012cee:	605a      	str	r2, [r3, #4]
	return 0;
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	370c      	adds	r7, #12
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr

08012cfe <_isatty>:

int _isatty(int file)
{
 8012cfe:	b480      	push	{r7}
 8012d00:	b083      	sub	sp, #12
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
	return 1;
 8012d06:	2301      	movs	r3, #1
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	370c      	adds	r7, #12
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d12:	4770      	bx	lr

08012d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b085      	sub	sp, #20
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	607a      	str	r2, [r7, #4]
	return 0;
 8012d20:	2300      	movs	r3, #0
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3714      	adds	r7, #20
 8012d26:	46bd      	mov	sp, r7
 8012d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2c:	4770      	bx	lr
	...

08012d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d38:	4a14      	ldr	r2, [pc, #80]	; (8012d8c <_sbrk+0x5c>)
 8012d3a:	4b15      	ldr	r3, [pc, #84]	; (8012d90 <_sbrk+0x60>)
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d44:	4b13      	ldr	r3, [pc, #76]	; (8012d94 <_sbrk+0x64>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d102      	bne.n	8012d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d4c:	4b11      	ldr	r3, [pc, #68]	; (8012d94 <_sbrk+0x64>)
 8012d4e:	4a12      	ldr	r2, [pc, #72]	; (8012d98 <_sbrk+0x68>)
 8012d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d52:	4b10      	ldr	r3, [pc, #64]	; (8012d94 <_sbrk+0x64>)
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4413      	add	r3, r2
 8012d5a:	693a      	ldr	r2, [r7, #16]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d207      	bcs.n	8012d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d60:	f012 f8c2 	bl	8024ee8 <__errno>
 8012d64:	4603      	mov	r3, r0
 8012d66:	220c      	movs	r2, #12
 8012d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d6e:	e009      	b.n	8012d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d70:	4b08      	ldr	r3, [pc, #32]	; (8012d94 <_sbrk+0x64>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d76:	4b07      	ldr	r3, [pc, #28]	; (8012d94 <_sbrk+0x64>)
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	4a05      	ldr	r2, [pc, #20]	; (8012d94 <_sbrk+0x64>)
 8012d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012d82:	68fb      	ldr	r3, [r7, #12]
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3718      	adds	r7, #24
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	20020000 	.word	0x20020000
 8012d90:	00000400 	.word	0x00000400
 8012d94:	20000398 	.word	0x20000398
 8012d98:	2000b378 	.word	0x2000b378

08012d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012da0:	4b07      	ldr	r3, [pc, #28]	; (8012dc0 <SystemInit+0x24>)
 8012da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012da6:	4a06      	ldr	r2, [pc, #24]	; (8012dc0 <SystemInit+0x24>)
 8012da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  SCB->VTOR = (uint32_t)&__isr_vector_addr;
 8012db0:	4b03      	ldr	r3, [pc, #12]	; (8012dc0 <SystemInit+0x24>)
 8012db2:	4a04      	ldr	r2, [pc, #16]	; (8012dc4 <SystemInit+0x28>)
 8012db4:	609a      	str	r2, [r3, #8]
#endif
}
 8012db6:	bf00      	nop
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	e000ed00 	.word	0xe000ed00
 8012dc4:	08010400 	.word	0x08010400

08012dc8 <Reset_Handler>:
 8012dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e00 <LoopFillZerobss+0x14>
 8012dcc:	2100      	movs	r1, #0
 8012dce:	e003      	b.n	8012dd8 <LoopCopyDataInit>

08012dd0 <CopyDataInit>:
 8012dd0:	4b0c      	ldr	r3, [pc, #48]	; (8012e04 <LoopFillZerobss+0x18>)
 8012dd2:	585b      	ldr	r3, [r3, r1]
 8012dd4:	5043      	str	r3, [r0, r1]
 8012dd6:	3104      	adds	r1, #4

08012dd8 <LoopCopyDataInit>:
 8012dd8:	480b      	ldr	r0, [pc, #44]	; (8012e08 <LoopFillZerobss+0x1c>)
 8012dda:	4b0c      	ldr	r3, [pc, #48]	; (8012e0c <LoopFillZerobss+0x20>)
 8012ddc:	1842      	adds	r2, r0, r1
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d3f6      	bcc.n	8012dd0 <CopyDataInit>
 8012de2:	4a0b      	ldr	r2, [pc, #44]	; (8012e10 <LoopFillZerobss+0x24>)
 8012de4:	e002      	b.n	8012dec <LoopFillZerobss>

08012de6 <FillZerobss>:
 8012de6:	2300      	movs	r3, #0
 8012de8:	f842 3b04 	str.w	r3, [r2], #4

08012dec <LoopFillZerobss>:
 8012dec:	4b09      	ldr	r3, [pc, #36]	; (8012e14 <LoopFillZerobss+0x28>)
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d3f9      	bcc.n	8012de6 <FillZerobss>
 8012df2:	f7ff ffd3 	bl	8012d9c <SystemInit>
 8012df6:	f012 f87d 	bl	8024ef4 <__libc_init_array>
 8012dfa:	f012 f869 	bl	8024ed0 <main>
 8012dfe:	4770      	bx	lr
 8012e00:	20020000 	.word	0x20020000
 8012e04:	08037f64 	.word	0x08037f64
 8012e08:	20000000 	.word	0x20000000
 8012e0c:	200002b4 	.word	0x200002b4
 8012e10:	200002c0 	.word	0x200002c0
 8012e14:	2000b374 	.word	0x2000b374

08012e18 <DMA1_Stream0_IRQHandler>:
 8012e18:	e7fe      	b.n	8012e18 <DMA1_Stream0_IRQHandler>

08012e1a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8012e1a:	b480      	push	{r7}
 8012e1c:	b087      	sub	sp, #28
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	60f8      	str	r0, [r7, #12]
 8012e22:	60b9      	str	r1, [r7, #8]
 8012e24:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8012e26:	2301      	movs	r3, #1
 8012e28:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2200      	movs	r2, #0
 8012e34:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	68ba      	ldr	r2, [r7, #8]
 8012e40:	60da      	str	r2, [r3, #12]

  return ret;
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	371c      	adds	r7, #28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b087      	sub	sp, #28
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8012e60:	2300      	movs	r3, #0
 8012e62:	613b      	str	r3, [r7, #16]
 8012e64:	e026      	b.n	8012eb4 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	68db      	ldr	r3, [r3, #12]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d009      	beq.n	8012e82 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	68da      	ldr	r2, [r3, #12]
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	441a      	add	r2, r3
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	68b9      	ldr	r1, [r7, #8]
 8012e7c:	440b      	add	r3, r1
 8012e7e:	7812      	ldrb	r2, [r2, #0]
 8012e80:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	685a      	ldr	r2, [r3, #4]
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d00c      	beq.n	8012ea8 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	685b      	ldr	r3, [r3, #4]
 8012e92:	3301      	adds	r3, #1
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	6892      	ldr	r2, [r2, #8]
 8012e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e9c:	fb01 f202 	mul.w	r2, r1, r2
 8012ea0:	1a9a      	subs	r2, r3, r2
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	605a      	str	r2, [r3, #4]
 8012ea6:	e002      	b.n	8012eae <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8012eac:	e006      	b.n	8012ebc <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	613b      	str	r3, [r7, #16]
 8012eb4:	693b      	ldr	r3, [r7, #16]
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d8d4      	bhi.n	8012e66 <qbufferRead+0x16>
    }
  }

  return ret;
 8012ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	371c      	adds	r7, #28
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec8:	4770      	bx	lr

08012eca <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8012eca:	b480      	push	{r7}
 8012ecc:	b085      	sub	sp, #20
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	6892      	ldr	r2, [r2, #8]
 8012ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ee4:	fb01 f202 	mul.w	r2, r1, r2
 8012ee8:	1a9b      	subs	r3, r3, r2
 8012eea:	60fb      	str	r3, [r7, #12]

  return ret;
 8012eec:	68fb      	ldr	r3, [r7, #12]
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3714      	adds	r7, #20
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef8:	4770      	bx	lr
	...

08012efc <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8012efc:	b480      	push	{r7}
 8012efe:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8012f00:	4b14      	ldr	r3, [pc, #80]	; (8012f54 <DWT_Delay_Init+0x58>)
 8012f02:	68db      	ldr	r3, [r3, #12]
 8012f04:	4a13      	ldr	r2, [pc, #76]	; (8012f54 <DWT_Delay_Init+0x58>)
 8012f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012f0a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8012f0c:	4b11      	ldr	r3, [pc, #68]	; (8012f54 <DWT_Delay_Init+0x58>)
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	4a10      	ldr	r2, [pc, #64]	; (8012f54 <DWT_Delay_Init+0x58>)
 8012f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012f16:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8012f18:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a0e      	ldr	r2, [pc, #56]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f1e:	f023 0301 	bic.w	r3, r3, #1
 8012f22:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8012f24:	4b0c      	ldr	r3, [pc, #48]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a0b      	ldr	r2, [pc, #44]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f2a:	f043 0301 	orr.w	r3, r3, #1
 8012f2e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8012f30:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f32:	2200      	movs	r2, #0
 8012f34:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8012f36:	bf00      	nop
     __ASM volatile ("NOP");
 8012f38:	bf00      	nop
     __ASM volatile ("NOP");
 8012f3a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8012f3c:	4b06      	ldr	r3, [pc, #24]	; (8012f58 <DWT_Delay_Init+0x5c>)
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d001      	beq.n	8012f48 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8012f44:	2300      	movs	r3, #0
 8012f46:	e000      	b.n	8012f4a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8012f48:	2301      	movs	r3, #1
  }
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	e000edf0 	.word	0xe000edf0
 8012f58:	e0001000 	.word	0xe0001000

08012f5c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b088      	sub	sp, #32
 8012f60:	af00      	add	r7, sp, #0
  bool ret = true;
 8012f62:	2301      	movs	r3, #1
 8012f64:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f66:	1d3b      	adds	r3, r7, #4
 8012f68:	2200      	movs	r2, #0
 8012f6a:	601a      	str	r2, [r3, #0]
 8012f6c:	605a      	str	r2, [r3, #4]
 8012f6e:	609a      	str	r2, [r3, #8]
 8012f70:	60da      	str	r2, [r3, #12]
 8012f72:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f74:	2300      	movs	r3, #0
 8012f76:	603b      	str	r3, [r7, #0]
 8012f78:	4b1b      	ldr	r3, [pc, #108]	; (8012fe8 <buttonInit+0x8c>)
 8012f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f7c:	4a1a      	ldr	r2, [pc, #104]	; (8012fe8 <buttonInit+0x8c>)
 8012f7e:	f043 0301 	orr.w	r3, r3, #1
 8012f82:	6313      	str	r3, [r2, #48]	; 0x30
 8012f84:	4b18      	ldr	r3, [pc, #96]	; (8012fe8 <buttonInit+0x8c>)
 8012f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f88:	f003 0301 	and.w	r3, r3, #1
 8012f8c:	603b      	str	r3, [r7, #0]
 8012f8e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012f90:	2300      	movs	r3, #0
 8012f92:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8012f94:	2300      	movs	r3, #0
 8012f96:	61fb      	str	r3, [r7, #28]
 8012f98:	e01a      	b.n	8012fd0 <buttonInit+0x74>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8012f9a:	4a14      	ldr	r2, [pc, #80]	; (8012fec <buttonInit+0x90>)
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	011b      	lsls	r3, r3, #4
 8012fa0:	4413      	add	r3, r2
 8012fa2:	3304      	adds	r3, #4
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 8012fa8:	4a10      	ldr	r2, [pc, #64]	; (8012fec <buttonInit+0x90>)
 8012faa:	69fb      	ldr	r3, [r7, #28]
 8012fac:	011b      	lsls	r3, r3, #4
 8012fae:	4413      	add	r3, r2
 8012fb0:	3308      	adds	r3, #8
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8012fb6:	4a0d      	ldr	r2, [pc, #52]	; (8012fec <buttonInit+0x90>)
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	011b      	lsls	r3, r3, #4
 8012fbc:	4413      	add	r3, r2
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	1d3a      	adds	r2, r7, #4
 8012fc2:	4611      	mov	r1, r2
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f00c f8e5 	bl	801f194 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	3301      	adds	r3, #1
 8012fce:	61fb      	str	r3, [r7, #28]
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	dde1      	ble.n	8012f9a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8012fd6:	4906      	ldr	r1, [pc, #24]	; (8012ff0 <buttonInit+0x94>)
 8012fd8:	4806      	ldr	r0, [pc, #24]	; (8012ff4 <buttonInit+0x98>)
 8012fda:	f000 fc55 	bl	8013888 <cliAdd>
#endif

  return ret;
 8012fde:	7efb      	ldrb	r3, [r7, #27]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3720      	adds	r7, #32
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	40023800 	.word	0x40023800
 8012fec:	20000004 	.word	0x20000004
 8012ff0:	080133a5 	.word	0x080133a5
 8012ff4:	08029680 	.word	0x08029680

08012ff8 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	4603      	mov	r3, r0
 8013000:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8013002:	2300      	movs	r3, #0
 8013004:	73fb      	strb	r3, [r7, #15]


  if (ch >= BUTTON_MAX_CH)
 8013006:	79fb      	ldrb	r3, [r7, #7]
 8013008:	2b04      	cmp	r3, #4
 801300a:	d901      	bls.n	8013010 <buttonGetPressed+0x18>
  {
    return false;
 801300c:	2300      	movs	r3, #0
 801300e:	e01c      	b.n	801304a <buttonGetPressed+0x52>
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 8013010:	79fb      	ldrb	r3, [r7, #7]
 8013012:	4a10      	ldr	r2, [pc, #64]	; (8013054 <buttonGetPressed+0x5c>)
 8013014:	011b      	lsls	r3, r3, #4
 8013016:	4413      	add	r3, r2
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	79fb      	ldrb	r3, [r7, #7]
 801301c:	490d      	ldr	r1, [pc, #52]	; (8013054 <buttonGetPressed+0x5c>)
 801301e:	011b      	lsls	r3, r3, #4
 8013020:	440b      	add	r3, r1
 8013022:	3304      	adds	r3, #4
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	b29b      	uxth	r3, r3
 8013028:	4619      	mov	r1, r3
 801302a:	4610      	mov	r0, r2
 801302c:	f00c fb1a 	bl	801f664 <HAL_GPIO_ReadPin>
 8013030:	4603      	mov	r3, r0
 8013032:	4619      	mov	r1, r3
 8013034:	79fb      	ldrb	r3, [r7, #7]
 8013036:	4a07      	ldr	r2, [pc, #28]	; (8013054 <buttonGetPressed+0x5c>)
 8013038:	011b      	lsls	r3, r3, #4
 801303a:	4413      	add	r3, r2
 801303c:	330c      	adds	r3, #12
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	4299      	cmp	r1, r3
 8013042:	d101      	bne.n	8013048 <buttonGetPressed+0x50>
  {
    ret = true;
 8013044:	2301      	movs	r3, #1
 8013046:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013048:	7bfb      	ldrb	r3, [r7, #15]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	20000004 	.word	0x20000004

08013058 <buttonObjCreate>:
  BUTTON_OBJ_REPEATED_START,
  BUTTON_OBJ_REPEATED,
};

void buttonObjCreate(button_obj_t *p_obj, uint8_t ch, uint32_t pressed_time, uint32_t repeat_start_time, uint32_t repeat_pressed_time)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b084      	sub	sp, #16
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	607a      	str	r2, [r7, #4]
 8013062:	603b      	str	r3, [r7, #0]
 8013064:	460b      	mov	r3, r1
 8013066:	72fb      	strb	r3, [r7, #11]
  p_obj->ch = ch;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	7afa      	ldrb	r2, [r7, #11]
 801306c:	701a      	strb	r2, [r3, #0]
  p_obj->state = 0;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	705a      	strb	r2, [r3, #1]
  p_obj->pre_time = millis();
 8013074:	f7ff fc7b 	bl	801296e <millis>
 8013078:	4602      	mov	r2, r0
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	611a      	str	r2, [r3, #16]
  p_obj->pressed_time = pressed_time;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	605a      	str	r2, [r3, #4]
  p_obj->repeat_start_time = repeat_start_time;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	683a      	ldr	r2, [r7, #0]
 8013088:	609a      	str	r2, [r3, #8]
  p_obj->repeat_pressed_time = repeat_pressed_time;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	69ba      	ldr	r2, [r7, #24]
 801308e:	60da      	str	r2, [r3, #12]
  p_obj->event_flag = 0;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2200      	movs	r2, #0
 8013094:	751a      	strb	r2, [r3, #20]
  p_obj->state_flag = 0;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2200      	movs	r2, #0
 801309a:	755a      	strb	r2, [r3, #21]
  p_obj->click_count = 0;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	759a      	strb	r2, [r3, #22]
}
 80130a2:	bf00      	nop
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
	...

080130ac <buttonObjUpdateEx>:

bool buttonObjUpdateEx(button_obj_t *p_obj, bool clear_event)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b084      	sub	sp, #16
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
 80130b4:	460b      	mov	r3, r1
 80130b6:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80130b8:	2300      	movs	r3, #0
 80130ba:	73fb      	strb	r3, [r7, #15]


  if (clear_event == true)
 80130bc:	78fb      	ldrb	r3, [r7, #3]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d002      	beq.n	80130c8 <buttonObjUpdateEx+0x1c>
  {
    buttonObjClearEventAll(p_obj);
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 f960 	bl	8013388 <buttonObjClearEventAll>
  }

  switch(p_obj->state)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	785b      	ldrb	r3, [r3, #1]
 80130cc:	2b04      	cmp	r3, #4
 80130ce:	f200 8115 	bhi.w	80132fc <buttonObjUpdateEx+0x250>
 80130d2:	a201      	add	r2, pc, #4	; (adr r2, 80130d8 <buttonObjUpdateEx+0x2c>)
 80130d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130d8:	080130ed 	.word	0x080130ed
 80130dc:	0801310d 	.word	0x0801310d
 80130e0:	08013137 	.word	0x08013137
 80130e4:	080131e9 	.word	0x080131e9
 80130e8:	0801326f 	.word	0x0801326f
  {
    case BUTTON_OBJ_WAIT_FOR_RELEASED:
      if (buttonGetPressed(p_obj->ch) == false)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7ff ff81 	bl	8012ff8 <buttonGetPressed>
 80130f6:	4603      	mov	r3, r0
 80130f8:	f083 0301 	eor.w	r3, r3, #1
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	2b00      	cmp	r3, #0
 8013100:	f000 80f3 	beq.w	80132ea <buttonObjUpdateEx+0x23e>
      {
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2201      	movs	r2, #1
 8013108:	705a      	strb	r2, [r3, #1]
      }
      break;
 801310a:	e0ee      	b.n	80132ea <buttonObjUpdateEx+0x23e>

    case BUTTON_OBJ_WAIT_FOR_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff ff71 	bl	8012ff8 <buttonGetPressed>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	f000 80e8 	beq.w	80132ee <buttonObjUpdateEx+0x242>
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2202      	movs	r2, #2
 8013122:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 8013124:	f7ff fc23 	bl	801296e <millis>
 8013128:	4602      	mov	r2, r0
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	611a      	str	r2, [r3, #16]
        p_obj->click_count = 0;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	759a      	strb	r2, [r3, #22]
      }
      break;
 8013134:	e0db      	b.n	80132ee <buttonObjUpdateEx+0x242>

    case BUTTON_OBJ_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	4618      	mov	r0, r3
 801313c:	f7ff ff5c 	bl	8012ff8 <buttonGetPressed>
 8013140:	4603      	mov	r3, r0
 8013142:	2b00      	cmp	r3, #0
 8013144:	d029      	beq.n	801319a <buttonObjUpdateEx+0xee>
      {
        if (millis()-p_obj->pre_time >= p_obj->pressed_time)
 8013146:	f7ff fc12 	bl	801296e <millis>
 801314a:	4602      	mov	r2, r0
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	691b      	ldr	r3, [r3, #16]
 8013150:	1ad2      	subs	r2, r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	685b      	ldr	r3, [r3, #4]
 8013156:	429a      	cmp	r2, r3
 8013158:	f0c0 80cb 	bcc.w	80132f2 <buttonObjUpdateEx+0x246>
        {
          ret = true;
 801315c:	2301      	movs	r3, #1
 801315e:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED_START;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2203      	movs	r2, #3
 8013164:	705a      	strb	r2, [r3, #1]
          p_obj->pre_time = millis();
 8013166:	f7ff fc02 	bl	801296e <millis>
 801316a:	4602      	mov	r2, r0
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	611a      	str	r2, [r3, #16]
          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	7d1b      	ldrb	r3, [r3, #20]
 8013174:	f043 0304 	orr.w	r3, r3, #4
 8013178:	b2da      	uxtb	r2, r3
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_PRESSED;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	7d5b      	ldrb	r3, [r3, #21]
 8013182:	f043 0301 	orr.w	r3, r3, #1
 8013186:	b2da      	uxtb	r2, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	7d9b      	ldrb	r3, [r3, #22]
 8013190:	3301      	adds	r3, #1
 8013192:	b2da      	uxtb	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	759a      	strb	r2, [r3, #22]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
        }
      }
      break;
 8013198:	e0ab      	b.n	80132f2 <buttonObjUpdateEx+0x246>
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2201      	movs	r2, #1
 801319e:	705a      	strb	r2, [r3, #1]
        if (p_obj->state_flag & BUTTON_STATE_PRESSED)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7d5b      	ldrb	r3, [r3, #21]
 80131a4:	f003 0301 	and.w	r3, r3, #1
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	f000 80a2 	beq.w	80132f2 <buttonObjUpdateEx+0x246>
          p_obj->event_flag |= BUTTON_EVT_RELEASED;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	7d1b      	ldrb	r3, [r3, #20]
 80131b2:	f043 0302 	orr.w	r3, r3, #2
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	751a      	strb	r2, [r3, #20]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	7d5b      	ldrb	r3, [r3, #21]
 80131c0:	f043 0302 	orr.w	r3, r3, #2
 80131c4:	b2da      	uxtb	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	7d5b      	ldrb	r3, [r3, #21]
 80131ce:	f023 0301 	bic.w	r3, r3, #1
 80131d2:	b2da      	uxtb	r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	7d5b      	ldrb	r3, [r3, #21]
 80131dc:	f023 0304 	bic.w	r3, r3, #4
 80131e0:	b2da      	uxtb	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	755a      	strb	r2, [r3, #21]
      break;
 80131e6:	e084      	b.n	80132f2 <buttonObjUpdateEx+0x246>

    case BUTTON_OBJ_REPEATED_START:
      if (buttonGetPressed(p_obj->ch) == true)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7ff ff03 	bl	8012ff8 <buttonGetPressed>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d031      	beq.n	801325c <buttonObjUpdateEx+0x1b0>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_start_time)
 80131f8:	f7ff fbb9 	bl	801296e <millis>
 80131fc:	4602      	mov	r2, r0
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	691b      	ldr	r3, [r3, #16]
 8013202:	1ad2      	subs	r2, r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	689b      	ldr	r3, [r3, #8]
 8013208:	429a      	cmp	r2, r3
 801320a:	d374      	bcc.n	80132f6 <buttonObjUpdateEx+0x24a>
        {
          ret = true;
 801320c:	2301      	movs	r3, #1
 801320e:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 8013210:	f7ff fbad 	bl	801296e <millis>
 8013214:	4602      	mov	r2, r0
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	611a      	str	r2, [r3, #16]

          ret = true;
 801321a:	2301      	movs	r3, #1
 801321c:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2204      	movs	r2, #4
 8013222:	705a      	strb	r2, [r3, #1]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	7d1b      	ldrb	r3, [r3, #20]
 8013228:	f043 0304 	orr.w	r3, r3, #4
 801322c:	b2da      	uxtb	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	7d1b      	ldrb	r3, [r3, #20]
 8013236:	f043 0308 	orr.w	r3, r3, #8
 801323a:	b2da      	uxtb	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	7d5b      	ldrb	r3, [r3, #21]
 8013244:	f043 0304 	orr.w	r3, r3, #4
 8013248:	b2da      	uxtb	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	7d9b      	ldrb	r3, [r3, #22]
 8013252:	3301      	adds	r3, #1
 8013254:	b2da      	uxtb	r2, r3
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	759a      	strb	r2, [r3, #22]
      else
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();
      }
      break;
 801325a:	e04c      	b.n	80132f6 <buttonObjUpdateEx+0x24a>
        p_obj->state = BUTTON_OBJ_PRESSED;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2202      	movs	r2, #2
 8013260:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 8013262:	f7ff fb84 	bl	801296e <millis>
 8013266:	4602      	mov	r2, r0
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	611a      	str	r2, [r3, #16]
      break;
 801326c:	e043      	b.n	80132f6 <buttonObjUpdateEx+0x24a>

    case BUTTON_OBJ_REPEATED:
      if (buttonGetPressed(p_obj->ch) == true)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	781b      	ldrb	r3, [r3, #0]
 8013272:	4618      	mov	r0, r3
 8013274:	f7ff fec0 	bl	8012ff8 <buttonGetPressed>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d02c      	beq.n	80132d8 <buttonObjUpdateEx+0x22c>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_pressed_time)
 801327e:	f7ff fb76 	bl	801296e <millis>
 8013282:	4602      	mov	r2, r0
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	691b      	ldr	r3, [r3, #16]
 8013288:	1ad2      	subs	r2, r2, r3
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	429a      	cmp	r2, r3
 8013290:	d333      	bcc.n	80132fa <buttonObjUpdateEx+0x24e>
        {
          ret = true;
 8013292:	2301      	movs	r3, #1
 8013294:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 8013296:	f7ff fb6a 	bl	801296e <millis>
 801329a:	4602      	mov	r2, r0
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	611a      	str	r2, [r3, #16]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	7d1b      	ldrb	r3, [r3, #20]
 80132a4:	f043 0304 	orr.w	r3, r3, #4
 80132a8:	b2da      	uxtb	r2, r3
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	7d1b      	ldrb	r3, [r3, #20]
 80132b2:	f043 0308 	orr.w	r3, r3, #8
 80132b6:	b2da      	uxtb	r2, r3
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7d5b      	ldrb	r3, [r3, #21]
 80132c0:	f043 0304 	orr.w	r3, r3, #4
 80132c4:	b2da      	uxtb	r2, r3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	7d9b      	ldrb	r3, [r3, #22]
 80132ce:	3301      	adds	r3, #1
 80132d0:	b2da      	uxtb	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	759a      	strb	r2, [r3, #22]
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();

      }
      break;
 80132d6:	e010      	b.n	80132fa <buttonObjUpdateEx+0x24e>
        p_obj->state = BUTTON_OBJ_PRESSED;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	2202      	movs	r2, #2
 80132dc:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 80132de:	f7ff fb46 	bl	801296e <millis>
 80132e2:	4602      	mov	r2, r0
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	611a      	str	r2, [r3, #16]
      break;
 80132e8:	e007      	b.n	80132fa <buttonObjUpdateEx+0x24e>
      break;
 80132ea:	bf00      	nop
 80132ec:	e006      	b.n	80132fc <buttonObjUpdateEx+0x250>
      break;
 80132ee:	bf00      	nop
 80132f0:	e004      	b.n	80132fc <buttonObjUpdateEx+0x250>
      break;
 80132f2:	bf00      	nop
 80132f4:	e002      	b.n	80132fc <buttonObjUpdateEx+0x250>
      break;
 80132f6:	bf00      	nop
 80132f8:	e000      	b.n	80132fc <buttonObjUpdateEx+0x250>
      break;
 80132fa:	bf00      	nop
  }

  return ret;
 80132fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop

08013308 <buttonObjInit>:

bool buttonObjInit(button_obj_t *p_obj)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  p_obj->state = 0;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	705a      	strb	r2, [r3, #1]
  p_obj->pre_time = millis();
 8013316:	f7ff fb2a 	bl	801296e <millis>
 801331a:	4602      	mov	r2, r0
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	611a      	str	r2, [r3, #16]
  p_obj->event_flag = 0;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	751a      	strb	r2, [r3, #20]
  p_obj->state_flag = 0;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2200      	movs	r2, #0
 801332a:	755a      	strb	r2, [r3, #21]
  p_obj->click_count = 0;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	759a      	strb	r2, [r3, #22]
  return true;
 8013332:	2301      	movs	r3, #1
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <buttonObjUpdate>:

bool buttonObjUpdate(button_obj_t *p_obj)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
  return buttonObjUpdateEx(p_obj, false);
 8013344:	2100      	movs	r1, #0
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7ff feb0 	bl	80130ac <buttonObjUpdateEx>
 801334c:	4603      	mov	r3, r0
}
 801334e:	4618      	mov	r0, r3
 8013350:	3708      	adds	r7, #8
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <buttonObjClearAndUpdate>:

bool buttonObjClearAndUpdate(button_obj_t *p_obj)
{
 8013356:	b580      	push	{r7, lr}
 8013358:	b082      	sub	sp, #8
 801335a:	af00      	add	r7, sp, #0
 801335c:	6078      	str	r0, [r7, #4]
  return buttonObjUpdateEx(p_obj, true);
 801335e:	2101      	movs	r1, #1
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7ff fea3 	bl	80130ac <buttonObjUpdateEx>
 8013366:	4603      	mov	r3, r0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <buttonObjGetEvent>:

uint8_t buttonObjGetEvent(button_obj_t *p_obj)
{
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
  return p_obj->event_flag;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	7d1b      	ldrb	r3, [r3, #20]
}
 801337c:	4618      	mov	r0, r3
 801337e:	370c      	adds	r7, #12
 8013380:	46bd      	mov	sp, r7
 8013382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013386:	4770      	bx	lr

08013388 <buttonObjClearEventAll>:

void buttonObjClearEventAll(button_obj_t *p_obj)
{
 8013388:	b480      	push	{r7}
 801338a:	b083      	sub	sp, #12
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  p_obj->event_flag = 0;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2200      	movs	r2, #0
 8013394:	751a      	strb	r2, [r3, #20]
}
 8013396:	bf00      	nop
 8013398:	370c      	adds	r7, #12
 801339a:	46bd      	mov	sp, r7
 801339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a0:	4770      	bx	lr
	...

080133a4 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b0a8      	sub	sp, #160	; 0xa0
 80133a8:	af02      	add	r7, sp, #8
 80133aa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80133ac:	2300      	movs	r3, #0
 80133ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97


  if (args->argc == 1 && args->isStr(0, "show"))
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	881b      	ldrh	r3, [r3, #0]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d12e      	bne.n	8013418 <cliButton+0x74>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	695b      	ldr	r3, [r3, #20]
 80133be:	496e      	ldr	r1, [pc, #440]	; (8013578 <cliButton+0x1d4>)
 80133c0:	2000      	movs	r0, #0
 80133c2:	4798      	blx	r3
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d026      	beq.n	8013418 <cliButton+0x74>
  {
    while(cliKeepLoop())
 80133ca:	e01d      	b.n	8013408 <cliButton+0x64>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80133cc:	2300      	movs	r3, #0
 80133ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80133d2:	e00f      	b.n	80133f4 <cliButton+0x50>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80133d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff fe0c 	bl	8012ff8 <buttonGetPressed>
 80133e0:	4603      	mov	r3, r0
 80133e2:	4619      	mov	r1, r3
 80133e4:	4865      	ldr	r0, [pc, #404]	; (801357c <cliButton+0x1d8>)
 80133e6:	f000 f93f 	bl	8013668 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80133ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133ee:	3301      	adds	r3, #1
 80133f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80133f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80133f8:	2b04      	cmp	r3, #4
 80133fa:	ddeb      	ble.n	80133d4 <cliButton+0x30>
      }
      cliPrintf("\n");
 80133fc:	4860      	ldr	r0, [pc, #384]	; (8013580 <cliButton+0x1dc>)
 80133fe:	f000 f933 	bl	8013668 <cliPrintf>

      delay(100);
 8013402:	2064      	movs	r0, #100	; 0x64
 8013404:	f7ff faa8 	bl	8012958 <delay>
    while(cliKeepLoop())
 8013408:	f000 fa28 	bl	801385c <cliKeepLoop>
 801340c:	4603      	mov	r3, r0
 801340e:	2b00      	cmp	r3, #0
 8013410:	d1dc      	bne.n	80133cc <cliButton+0x28>
    }

    ret = true;
 8013412:	2301      	movs	r3, #1
 8013414:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

#if HW_BUTTON_OBJ_USE == 1
  if (args->argc == 1 && args->isStr(0, "event"))
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	2b01      	cmp	r3, #1
 801341e:	f040 8099 	bne.w	8013554 <cliButton+0x1b0>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	695b      	ldr	r3, [r3, #20]
 8013426:	4957      	ldr	r1, [pc, #348]	; (8013584 <cliButton+0x1e0>)
 8013428:	2000      	movs	r0, #0
 801342a:	4798      	blx	r3
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	f000 8090 	beq.w	8013554 <cliButton+0x1b0>
  {
    button_obj_t button[BUTTON_MAX_CH];
    uint8_t button_event;

    for (int i=0; i<BUTTON_MAX_CH; i++)
 8013434:	2300      	movs	r3, #0
 8013436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801343a:	e017      	b.n	801346c <cliButton+0xc8>
    {
      buttonObjCreate(&button[i], i, 50, 1000, 100);
 801343c:	f107 010c 	add.w	r1, r7, #12
 8013440:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8013444:	4613      	mov	r3, r2
 8013446:	005b      	lsls	r3, r3, #1
 8013448:	4413      	add	r3, r2
 801344a:	00db      	lsls	r3, r3, #3
 801344c:	18c8      	adds	r0, r1, r3
 801344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013452:	b2d9      	uxtb	r1, r3
 8013454:	2364      	movs	r3, #100	; 0x64
 8013456:	9300      	str	r3, [sp, #0]
 8013458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801345c:	2232      	movs	r2, #50	; 0x32
 801345e:	f7ff fdfb 	bl	8013058 <buttonObjCreate>
    for (int i=0; i<BUTTON_MAX_CH; i++)
 8013462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013466:	3301      	adds	r3, #1
 8013468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801346c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013470:	2b04      	cmp	r3, #4
 8013472:	dde3      	ble.n	801343c <cliButton+0x98>
    }

    while(cliKeepLoop())
 8013474:	e066      	b.n	8013544 <cliButton+0x1a0>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8013476:	2300      	movs	r3, #0
 8013478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801347c:	e05b      	b.n	8013536 <cliButton+0x192>
      {
        buttonObjUpdate(&button[i]);
 801347e:	f107 010c 	add.w	r1, r7, #12
 8013482:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013486:	4613      	mov	r3, r2
 8013488:	005b      	lsls	r3, r3, #1
 801348a:	4413      	add	r3, r2
 801348c:	00db      	lsls	r3, r3, #3
 801348e:	440b      	add	r3, r1
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff ff53 	bl	801333c <buttonObjUpdate>

        button_event = buttonObjGetEvent(&button[i]);
 8013496:	f107 010c 	add.w	r1, r7, #12
 801349a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801349e:	4613      	mov	r3, r2
 80134a0:	005b      	lsls	r3, r3, #1
 80134a2:	4413      	add	r3, r2
 80134a4:	00db      	lsls	r3, r3, #3
 80134a6:	440b      	add	r3, r1
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7ff ff61 	bl	8013370 <buttonObjGetEvent>
 80134ae:	4603      	mov	r3, r0
 80134b0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (button_event > 0)
 80134b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d037      	beq.n	801352c <cliButton+0x188>
        {
          if (button_event & BUTTON_EVT_PRESSED)
 80134bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80134c0:	f003 0301 	and.w	r3, r3, #1
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d004      	beq.n	80134d2 <cliButton+0x12e>
            cliPrintf("button %d pressed\n", i);
 80134c8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80134cc:	482e      	ldr	r0, [pc, #184]	; (8013588 <cliButton+0x1e4>)
 80134ce:	f000 f8cb 	bl	8013668 <cliPrintf>
          if (button_event & BUTTON_EVT_CLICKED)
 80134d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80134d6:	f003 0304 	and.w	r3, r3, #4
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d00f      	beq.n	80134fe <cliButton+0x15a>
            cliPrintf("button %d clicked cnt : %d\n", i, button[i].click_count);
 80134de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80134e2:	4613      	mov	r3, r2
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	4413      	add	r3, r2
 80134e8:	00db      	lsls	r3, r3, #3
 80134ea:	3398      	adds	r3, #152	; 0x98
 80134ec:	443b      	add	r3, r7
 80134ee:	3b76      	subs	r3, #118	; 0x76
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	461a      	mov	r2, r3
 80134f4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80134f8:	4824      	ldr	r0, [pc, #144]	; (801358c <cliButton+0x1e8>)
 80134fa:	f000 f8b5 	bl	8013668 <cliPrintf>
          if (button_event & BUTTON_EVT_RELEASED)
 80134fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013502:	f003 0302 	and.w	r3, r3, #2
 8013506:	2b00      	cmp	r3, #0
 8013508:	d004      	beq.n	8013514 <cliButton+0x170>
            cliPrintf("button %d released\n", i);
 801350a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801350e:	4820      	ldr	r0, [pc, #128]	; (8013590 <cliButton+0x1ec>)
 8013510:	f000 f8aa 	bl	8013668 <cliPrintf>

          buttonObjClearEventAll(&button[i]);
 8013514:	f107 010c 	add.w	r1, r7, #12
 8013518:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801351c:	4613      	mov	r3, r2
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	4413      	add	r3, r2
 8013522:	00db      	lsls	r3, r3, #3
 8013524:	440b      	add	r3, r1
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff ff2e 	bl	8013388 <buttonObjClearEventAll>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 801352c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013530:	3301      	adds	r3, #1
 8013532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801353a:	2b04      	cmp	r3, #4
 801353c:	dd9f      	ble.n	801347e <cliButton+0xda>
        }
      }

      delay(5);
 801353e:	2005      	movs	r0, #5
 8013540:	f7ff fa0a 	bl	8012958 <delay>
    while(cliKeepLoop())
 8013544:	f000 f98a 	bl	801385c <cliKeepLoop>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d193      	bne.n	8013476 <cliButton+0xd2>
    }

    ret = true;
 801354e:	2301      	movs	r3, #1
 8013550:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }
  #endif


  if (ret != true)
 8013554:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013558:	f083 0301 	eor.w	r3, r3, #1
 801355c:	b2db      	uxtb	r3, r3
 801355e:	2b00      	cmp	r3, #0
 8013560:	d005      	beq.n	801356e <cliButton+0x1ca>
  {
    cliPrintf("button show\n");
 8013562:	480c      	ldr	r0, [pc, #48]	; (8013594 <cliButton+0x1f0>)
 8013564:	f000 f880 	bl	8013668 <cliPrintf>
	#if HW_BUTTON_OBJ_USE == 1
	cliPrintf("button event\n");
 8013568:	480b      	ldr	r0, [pc, #44]	; (8013598 <cliButton+0x1f4>)
 801356a:	f000 f87d 	bl	8013668 <cliPrintf>
	#endif
  }
}
 801356e:	bf00      	nop
 8013570:	3798      	adds	r7, #152	; 0x98
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	08029688 	.word	0x08029688
 801357c:	08029690 	.word	0x08029690
 8013580:	08029694 	.word	0x08029694
 8013584:	08029698 	.word	0x08029698
 8013588:	080296a0 	.word	0x080296a0
 801358c:	080296b4 	.word	0x080296b4
 8013590:	080296d0 	.word	0x080296d0
 8013594:	080296e4 	.word	0x080296e4
 8013598:	080296f4 	.word	0x080296f4

0801359c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80135a0:	4b1b      	ldr	r3, [pc, #108]	; (8013610 <cliInit+0x74>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80135a6:	4b1a      	ldr	r3, [pc, #104]	; (8013610 <cliInit+0x74>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80135ac:	4b18      	ldr	r3, [pc, #96]	; (8013610 <cliInit+0x74>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80135b2:	4b17      	ldr	r3, [pc, #92]	; (8013610 <cliInit+0x74>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80135ba:	4b15      	ldr	r3, [pc, #84]	; (8013610 <cliInit+0x74>)
 80135bc:	2200      	movs	r2, #0
 80135be:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80135c2:	4b13      	ldr	r3, [pc, #76]	; (8013610 <cliInit+0x74>)
 80135c4:	2200      	movs	r2, #0
 80135c6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80135ca:	4b11      	ldr	r3, [pc, #68]	; (8013610 <cliInit+0x74>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80135d2:	4b0f      	ldr	r3, [pc, #60]	; (8013610 <cliInit+0x74>)
 80135d4:	4a0f      	ldr	r2, [pc, #60]	; (8013614 <cliInit+0x78>)
 80135d6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80135da:	4b0d      	ldr	r3, [pc, #52]	; (8013610 <cliInit+0x74>)
 80135dc:	4a0e      	ldr	r2, [pc, #56]	; (8013618 <cliInit+0x7c>)
 80135de:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80135e2:	4b0b      	ldr	r3, [pc, #44]	; (8013610 <cliInit+0x74>)
 80135e4:	4a0d      	ldr	r2, [pc, #52]	; (801361c <cliInit+0x80>)
 80135e6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80135ea:	4b09      	ldr	r3, [pc, #36]	; (8013610 <cliInit+0x74>)
 80135ec:	4a0c      	ldr	r2, [pc, #48]	; (8013620 <cliInit+0x84>)
 80135ee:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80135f2:	4807      	ldr	r0, [pc, #28]	; (8013610 <cliInit+0x74>)
 80135f4:	f000 f81e 	bl	8013634 <cliLineClean>


  cliAdd("help", cliShowList);
 80135f8:	490a      	ldr	r1, [pc, #40]	; (8013624 <cliInit+0x88>)
 80135fa:	480b      	ldr	r0, [pc, #44]	; (8013628 <cliInit+0x8c>)
 80135fc:	f000 f944 	bl	8013888 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8013600:	490a      	ldr	r1, [pc, #40]	; (801362c <cliInit+0x90>)
 8013602:	480b      	ldr	r0, [pc, #44]	; (8013630 <cliInit+0x94>)
 8013604:	f000 f940 	bl	8013888 <cliAdd>

  return true;
 8013608:	2301      	movs	r3, #1
}
 801360a:	4618      	mov	r0, r3
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	2000039c 	.word	0x2000039c
 8013614:	08013719 	.word	0x08013719
 8013618:	08013769 	.word	0x08013769
 801361c:	080137c1 	.word	0x080137c1
 8013620:	08013809 	.word	0x08013809
 8013624:	0801391d 	.word	0x0801391d
 8013628:	08029704 	.word	0x08029704
 801362c:	0801398d 	.word	0x0801398d
 8013630:	0802970c 	.word	0x0802970c

08013634 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 8013634:	b480      	push	{r7}
 8013636:	b083      	sub	sp, #12
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2200      	movs	r2, #0
 8013640:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	223f      	movs	r2, #63	; 0x3f
 8013650:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2200      	movs	r2, #0
 8013658:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 801365c:	bf00      	nop
 801365e:	370c      	adds	r7, #12
 8013660:	46bd      	mov	sp, r7
 8013662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013666:	4770      	bx	lr

08013668 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8013668:	b40f      	push	{r0, r1, r2, r3}
 801366a:	b580      	push	{r7, lr}
 801366c:	b084      	sub	sp, #16
 801366e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8013670:	f107 031c 	add.w	r3, r7, #28
 8013674:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8013676:	4b0d      	ldr	r3, [pc, #52]	; (80136ac <cliPrintf+0x44>)
 8013678:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	f103 0011 	add.w	r0, r3, #17
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	69ba      	ldr	r2, [r7, #24]
 8013684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013688:	f013 f908 	bl	802689c <vsniprintf>
 801368c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	7818      	ldrb	r0, [r3, #0]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	3311      	adds	r3, #17
 8013696:	68ba      	ldr	r2, [r7, #8]
 8013698:	4619      	mov	r1, r3
 801369a:	f004 feab 	bl	80183f4 <uartWrite>
}
 801369e:	bf00      	nop
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80136a8:	b004      	add	sp, #16
 80136aa:	4770      	bx	lr
 80136ac:	2000039c 	.word	0x2000039c

080136b0 <cliToUpper>:

void cliToUpper(char *str)
{
 80136b0:	b480      	push	{r7}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80136b8:	2300      	movs	r3, #0
 80136ba:	81fb      	strh	r3, [r7, #14]
 80136bc:	e018      	b.n	80136f0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80136be:	89fb      	ldrh	r3, [r7, #14]
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	4413      	add	r3, r2
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80136c8:	7b7b      	ldrb	r3, [r7, #13]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d014      	beq.n	80136f8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80136ce:	7b7b      	ldrb	r3, [r7, #13]
 80136d0:	2b60      	cmp	r3, #96	; 0x60
 80136d2:	d905      	bls.n	80136e0 <cliToUpper+0x30>
 80136d4:	7b7b      	ldrb	r3, [r7, #13]
 80136d6:	2b7a      	cmp	r3, #122	; 0x7a
 80136d8:	d802      	bhi.n	80136e0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80136da:	7b7b      	ldrb	r3, [r7, #13]
 80136dc:	3b20      	subs	r3, #32
 80136de:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80136e0:	89fb      	ldrh	r3, [r7, #14]
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	4413      	add	r3, r2
 80136e6:	7b7a      	ldrb	r2, [r7, #13]
 80136e8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80136ea:	89fb      	ldrh	r3, [r7, #14]
 80136ec:	3301      	adds	r3, #1
 80136ee:	81fb      	strh	r3, [r7, #14]
 80136f0:	89fb      	ldrh	r3, [r7, #14]
 80136f2:	2b0f      	cmp	r3, #15
 80136f4:	d9e3      	bls.n	80136be <cliToUpper+0xe>
 80136f6:	e000      	b.n	80136fa <cliToUpper+0x4a>
      break;
 80136f8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80136fa:	89fb      	ldrh	r3, [r7, #14]
 80136fc:	2b10      	cmp	r3, #16
 80136fe:	d105      	bne.n	801370c <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8013700:	89fb      	ldrh	r3, [r7, #14]
 8013702:	3b01      	subs	r3, #1
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	4413      	add	r3, r2
 8013708:	2200      	movs	r2, #0
 801370a:	701a      	strb	r2, [r3, #0]
  }
}
 801370c:	bf00      	nop
 801370e:	3714      	adds	r7, #20
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	4603      	mov	r3, r0
 8013720:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8013722:	2300      	movs	r3, #0
 8013724:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8013726:	4b0f      	ldr	r3, [pc, #60]	; (8013764 <cliArgsGetData+0x4c>)
 8013728:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 801372a:	79fb      	ldrb	r3, [r7, #7]
 801372c:	b29a      	uxth	r2, r3
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8013734:	429a      	cmp	r2, r3
 8013736:	d301      	bcc.n	801373c <cliArgsGetData+0x24>
  {
    return 0;
 8013738:	2300      	movs	r3, #0
 801373a:	e00e      	b.n	801375a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8013742:	79fb      	ldrb	r3, [r7, #7]
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	4413      	add	r3, r2
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2200      	movs	r2, #0
 801374c:	2100      	movs	r1, #0
 801374e:	4618      	mov	r0, r3
 8013750:	f013 f86e 	bl	8026830 <strtoul>
 8013754:	4603      	mov	r3, r0
 8013756:	60fb      	str	r3, [r7, #12]

  return ret;
 8013758:	68fb      	ldr	r3, [r7, #12]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	2000039c 	.word	0x2000039c

08013768 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	4603      	mov	r3, r0
 8013770:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8013772:	f04f 0300 	mov.w	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8013778:	4b10      	ldr	r3, [pc, #64]	; (80137bc <cliArgsGetFloat+0x54>)
 801377a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 801377c:	79fb      	ldrb	r3, [r7, #7]
 801377e:	b29a      	uxth	r2, r3
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8013786:	429a      	cmp	r2, r3
 8013788:	d302      	bcc.n	8013790 <cliArgsGetFloat+0x28>
  {
    return 0;
 801378a:	f04f 0300 	mov.w	r3, #0
 801378e:	e00d      	b.n	80137ac <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8013796:	79fb      	ldrb	r3, [r7, #7]
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4413      	add	r3, r2
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2100      	movs	r1, #0
 80137a0:	4618      	mov	r0, r3
 80137a2:	f012 ff77 	bl	8026694 <strtof>
 80137a6:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80137aa:	68fb      	ldr	r3, [r7, #12]
}
 80137ac:	ee07 3a90 	vmov	s15, r3
 80137b0:	eeb0 0a67 	vmov.f32	s0, s15
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	2000039c 	.word	0x2000039c

080137c0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b085      	sub	sp, #20
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	4603      	mov	r3, r0
 80137c8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80137ca:	2300      	movs	r3, #0
 80137cc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80137ce:	4b0d      	ldr	r3, [pc, #52]	; (8013804 <cliArgsGetStr+0x44>)
 80137d0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80137d2:	79fb      	ldrb	r3, [r7, #7]
 80137d4:	b29a      	uxth	r2, r3
 80137d6:	68bb      	ldr	r3, [r7, #8]
 80137d8:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80137dc:	429a      	cmp	r2, r3
 80137de:	d301      	bcc.n	80137e4 <cliArgsGetStr+0x24>
  {
    return 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	e008      	b.n	80137f6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80137ea:	79fb      	ldrb	r3, [r7, #7]
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	4413      	add	r3, r2
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	60fb      	str	r3, [r7, #12]

  return ret;
 80137f4:	68fb      	ldr	r3, [r7, #12]
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	3714      	adds	r7, #20
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr
 8013802:	bf00      	nop
 8013804:	2000039c 	.word	0x2000039c

08013808 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b084      	sub	sp, #16
 801380c:	af00      	add	r7, sp, #0
 801380e:	4603      	mov	r3, r0
 8013810:	6039      	str	r1, [r7, #0]
 8013812:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8013814:	2300      	movs	r3, #0
 8013816:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8013818:	4b0f      	ldr	r3, [pc, #60]	; (8013858 <cliArgsIsStr+0x50>)
 801381a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	b29a      	uxth	r2, r3
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8013826:	429a      	cmp	r2, r3
 8013828:	d301      	bcc.n	801382e <cliArgsIsStr+0x26>
  {
    return 0;
 801382a:	2300      	movs	r3, #0
 801382c:	e010      	b.n	8013850 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8013834:	79fb      	ldrb	r3, [r7, #7]
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	4413      	add	r3, r2
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	4619      	mov	r1, r3
 801383e:	6838      	ldr	r0, [r7, #0]
 8013840:	f7fd f81e 	bl	8010880 <strcmp>
 8013844:	4603      	mov	r3, r0
 8013846:	2b00      	cmp	r3, #0
 8013848:	d101      	bne.n	801384e <cliArgsIsStr+0x46>
  {
    ret = true;
 801384a:	2301      	movs	r3, #1
 801384c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	2000039c 	.word	0x2000039c

0801385c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b082      	sub	sp, #8
 8013860:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8013862:	4b08      	ldr	r3, [pc, #32]	; (8013884 <cliKeepLoop+0x28>)
 8013864:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	4618      	mov	r0, r3
 801386c:	f004 fd56 	bl	801831c <uartAvailable>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d101      	bne.n	801387a <cliKeepLoop+0x1e>
  {
    return true;
 8013876:	2301      	movs	r3, #1
 8013878:	e000      	b.n	801387c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 801387a:	2300      	movs	r3, #0
  }
}
 801387c:	4618      	mov	r0, r3
 801387e:	3708      	adds	r7, #8
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	2000039c 	.word	0x2000039c

08013888 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8013892:	2301      	movs	r3, #1
 8013894:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8013896:	4b20      	ldr	r3, [pc, #128]	; (8013918 <cliAdd+0x90>)
 8013898:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80138a0:	2b0f      	cmp	r3, #15
 80138a2:	d901      	bls.n	80138a8 <cliAdd+0x20>
  {
    return false;
 80138a4:	2300      	movs	r3, #0
 80138a6:	e032      	b.n	801390e <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80138ae:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80138b0:	89fa      	ldrh	r2, [r7, #14]
 80138b2:	4613      	mov	r3, r2
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	4413      	add	r3, r2
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80138be:	693a      	ldr	r2, [r7, #16]
 80138c0:	4413      	add	r3, r2
 80138c2:	3304      	adds	r3, #4
 80138c4:	6879      	ldr	r1, [r7, #4]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f012 f8b8 	bl	8025a3c <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80138cc:	89fa      	ldrh	r2, [r7, #14]
 80138ce:	6939      	ldr	r1, [r7, #16]
 80138d0:	4613      	mov	r3, r2
 80138d2:	009b      	lsls	r3, r3, #2
 80138d4:	4413      	add	r3, r2
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	440b      	add	r3, r1
 80138da:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80138de:	683a      	ldr	r2, [r7, #0]
 80138e0:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80138e2:	89fa      	ldrh	r2, [r7, #14]
 80138e4:	4613      	mov	r3, r2
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	4413      	add	r3, r2
 80138ea:	009b      	lsls	r3, r3, #2
 80138ec:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	4413      	add	r3, r2
 80138f4:	3304      	adds	r3, #4
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff feda 	bl	80136b0 <cliToUpper>

  p_cli->cmd_count++;
 80138fc:	693b      	ldr	r3, [r7, #16]
 80138fe:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8013902:	3301      	adds	r3, #1
 8013904:	b29a      	uxth	r2, r3
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 801390c:	7dfb      	ldrb	r3, [r7, #23]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3718      	adds	r7, #24
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	2000039c 	.word	0x2000039c

0801391c <cliShowList>:

void cliShowList(cli_args_t *args)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8013924:	4b15      	ldr	r3, [pc, #84]	; (801397c <cliShowList+0x60>)
 8013926:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8013928:	4815      	ldr	r0, [pc, #84]	; (8013980 <cliShowList+0x64>)
 801392a:	f7ff fe9d 	bl	8013668 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 801392e:	4815      	ldr	r0, [pc, #84]	; (8013984 <cliShowList+0x68>)
 8013930:	f7ff fe9a 	bl	8013668 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8013934:	2300      	movs	r3, #0
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	e012      	b.n	8013960 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 801393a:	68fa      	ldr	r2, [r7, #12]
 801393c:	4613      	mov	r3, r2
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	4413      	add	r3, r2
 8013942:	009b      	lsls	r3, r3, #2
 8013944:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	4413      	add	r3, r2
 801394c:	3304      	adds	r3, #4
 801394e:	4618      	mov	r0, r3
 8013950:	f7ff fe8a 	bl	8013668 <cliPrintf>
    cliPrintf("\r\n");
 8013954:	480a      	ldr	r0, [pc, #40]	; (8013980 <cliShowList+0x64>)
 8013956:	f7ff fe87 	bl	8013668 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	3301      	adds	r3, #1
 801395e:	60fb      	str	r3, [r7, #12]
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8013966:	461a      	mov	r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	4293      	cmp	r3, r2
 801396c:	dbe5      	blt.n	801393a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 801396e:	4806      	ldr	r0, [pc, #24]	; (8013988 <cliShowList+0x6c>)
 8013970:	f7ff fe7a 	bl	8013668 <cliPrintf>
}
 8013974:	bf00      	nop
 8013976:	3710      	adds	r7, #16
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}
 801397c:	2000039c 	.word	0x2000039c
 8013980:	080297d4 	.word	0x080297d4
 8013984:	080297d8 	.word	0x080297d8
 8013988:	080297f8 	.word	0x080297f8

0801398c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b08c      	sub	sp, #48	; 0x30
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8013994:	2310      	movs	r3, #16
 8013996:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	881b      	ldrh	r3, [r3, #0]
 801399c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d103      	bne.n	80139b4 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80139ac:	4840      	ldr	r0, [pc, #256]	; (8013ab0 <cliMemoryDump+0x124>)
 80139ae:	f7ff fe5b 	bl	8013668 <cliPrintf>
 80139b2:	e07a      	b.n	8013aaa <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	dd09      	ble.n	80139ce <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	3304      	adds	r3, #4
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2200      	movs	r2, #0
 80139c2:	2100      	movs	r1, #0
 80139c4:	4618      	mov	r0, r3
 80139c6:	f012 ff33 	bl	8026830 <strtoul>
 80139ca:	4603      	mov	r3, r0
 80139cc:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	2200      	movs	r2, #0
 80139d4:	2100      	movs	r1, #0
 80139d6:	4618      	mov	r0, r3
 80139d8:	f012 ff2a 	bl	8026830 <strtoul>
 80139dc:	4603      	mov	r3, r0
 80139de:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80139e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e2:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80139e4:	4833      	ldr	r0, [pc, #204]	; (8013ab4 <cliMemoryDump+0x128>)
 80139e6:	f7ff fe3f 	bl	8013668 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80139ea:	2300      	movs	r3, #0
 80139ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139ee:	e058      	b.n	8013aa2 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80139f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f2:	f003 0303 	and.w	r3, r3, #3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d104      	bne.n	8013a04 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	4619      	mov	r1, r3
 80139fe:	482e      	ldr	r0, [pc, #184]	; (8013ab8 <cliMemoryDump+0x12c>)
 8013a00:	f7ff fe32 	bl	8013668 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8013a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4619      	mov	r1, r3
 8013a0a:	482c      	ldr	r0, [pc, #176]	; (8013abc <cliMemoryDump+0x130>)
 8013a0c:	f7ff fe2c 	bl	8013668 <cliPrintf>

    if ((idx%4) == 3)
 8013a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a12:	425a      	negs	r2, r3
 8013a14:	f003 0303 	and.w	r3, r3, #3
 8013a18:	f002 0203 	and.w	r2, r2, #3
 8013a1c:	bf58      	it	pl
 8013a1e:	4253      	negpl	r3, r2
 8013a20:	2b03      	cmp	r3, #3
 8013a22:	d138      	bne.n	8013a96 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8013a24:	4826      	ldr	r0, [pc, #152]	; (8013ac0 <cliMemoryDump+0x134>)
 8013a26:	f7ff fe1f 	bl	8013668 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	623b      	str	r3, [r7, #32]
 8013a2e:	e02c      	b.n	8013a8a <cliMemoryDump+0xfe>
 8013a30:	69bb      	ldr	r3, [r7, #24]
 8013a32:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8013a34:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8013a36:	2300      	movs	r3, #0
 8013a38:	61fb      	str	r3, [r7, #28]
 8013a3a:	e01d      	b.n	8013a78 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8013a3c:	f107 020c 	add.w	r2, r7, #12
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	4413      	add	r3, r2
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	2b1f      	cmp	r3, #31
 8013a48:	d910      	bls.n	8013a6c <cliMemoryDump+0xe0>
 8013a4a:	f107 020c 	add.w	r2, r7, #12
 8013a4e:	69fb      	ldr	r3, [r7, #28]
 8013a50:	4413      	add	r3, r2
 8013a52:	781b      	ldrb	r3, [r3, #0]
 8013a54:	2b7e      	cmp	r3, #126	; 0x7e
 8013a56:	d809      	bhi.n	8013a6c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8013a58:	f107 020c 	add.w	r2, r7, #12
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	4413      	add	r3, r2
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	4619      	mov	r1, r3
 8013a64:	4817      	ldr	r0, [pc, #92]	; (8013ac4 <cliMemoryDump+0x138>)
 8013a66:	f7ff fdff 	bl	8013668 <cliPrintf>
 8013a6a:	e002      	b.n	8013a72 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8013a6c:	4816      	ldr	r0, [pc, #88]	; (8013ac8 <cliMemoryDump+0x13c>)
 8013a6e:	f7ff fdfb 	bl	8013668 <cliPrintf>
        for (i=0;i<4;i++)
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	3301      	adds	r3, #1
 8013a76:	61fb      	str	r3, [r7, #28]
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	2b03      	cmp	r3, #3
 8013a7c:	ddde      	ble.n	8013a3c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	3304      	adds	r3, #4
 8013a82:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8013a84:	6a3b      	ldr	r3, [r7, #32]
 8013a86:	3301      	adds	r3, #1
 8013a88:	623b      	str	r3, [r7, #32]
 8013a8a:	6a3b      	ldr	r3, [r7, #32]
 8013a8c:	2b03      	cmp	r3, #3
 8013a8e:	ddcf      	ble.n	8013a30 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8013a90:	480e      	ldr	r0, [pc, #56]	; (8013acc <cliMemoryDump+0x140>)
 8013a92:	f7ff fde9 	bl	8013668 <cliPrintf>
    }
    addr++;
 8013a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a98:	3304      	adds	r3, #4
 8013a9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8013a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	dba2      	blt.n	80139f0 <cliMemoryDump+0x64>
  }
}
 8013aaa:	3730      	adds	r7, #48	; 0x30
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	08029818 	.word	0x08029818
 8013ab4:	0802982c 	.word	0x0802982c
 8013ab8:	08029834 	.word	0x08029834
 8013abc:	08029840 	.word	0x08029840
 8013ac0:	08029848 	.word	0x08029848
 8013ac4:	0802984c 	.word	0x0802984c
 8013ac8:	08029850 	.word	0x08029850
 8013acc:	08029854 	.word	0x08029854

08013ad0 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8013ad6:	2305      	movs	r3, #5
 8013ad8:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 8013ada:	2201      	movs	r2, #1
 8013adc:	4939      	ldr	r1, [pc, #228]	; (8013bc4 <Ds18b20_Init+0xf4>)
 8013ade:	483a      	ldr	r0, [pc, #232]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013ae0:	f002 fa05 	bl	8015eee <OneWire_Init>
		TempSensorCount = 0;
 8013ae4:	4b39      	ldr	r3, [pc, #228]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8013aea:	e002      	b.n	8013af2 <Ds18b20_Init+0x22>
			HAL_Delay(100);
 8013aec:	2064      	movs	r0, #100	; 0x64
 8013aee:	f009 fdcb 	bl	801d688 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 8013af2:	f009 fdbd 	bl	801d670 <HAL_GetTick>
 8013af6:	4603      	mov	r3, r0
 8013af8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d9f5      	bls.n	8013aec <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 8013b00:	4831      	ldr	r0, [pc, #196]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013b02:	f002 fae2 	bl	80160ca <OneWire_First>
 8013b06:	4603      	mov	r3, r0
 8013b08:	461a      	mov	r2, r3
 8013b0a:	4b31      	ldr	r3, [pc, #196]	; (8013bd0 <Ds18b20_Init+0x100>)
 8013b0c:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8013b0e:	e019      	b.n	8013b44 <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 8013b10:	2064      	movs	r0, #100	; 0x64
 8013b12:	f009 fdb9 	bl	801d688 <HAL_Delay>
			TempSensorCount++;
 8013b16:	4b2d      	ldr	r3, [pc, #180]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	b2da      	uxtb	r2, r3
 8013b1e:	4b2b      	ldr	r3, [pc, #172]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013b20:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8013b22:	4b2a      	ldr	r3, [pc, #168]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	3b01      	subs	r3, #1
 8013b28:	011b      	lsls	r3, r3, #4
 8013b2a:	4a2a      	ldr	r2, [pc, #168]	; (8013bd4 <Ds18b20_Init+0x104>)
 8013b2c:	4413      	add	r3, r2
 8013b2e:	4619      	mov	r1, r3
 8013b30:	4825      	ldr	r0, [pc, #148]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013b32:	f002 fbdf 	bl	80162f4 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8013b36:	4824      	ldr	r0, [pc, #144]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013b38:	f002 fad7 	bl	80160ea <OneWire_Next>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	461a      	mov	r2, r3
 8013b40:	4b23      	ldr	r3, [pc, #140]	; (8013bd0 <Ds18b20_Init+0x100>)
 8013b42:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8013b44:	4b22      	ldr	r3, [pc, #136]	; (8013bd0 <Ds18b20_Init+0x100>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d1e1      	bne.n	8013b10 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8013b4c:	4b1f      	ldr	r3, [pc, #124]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d106      	bne.n	8013b62 <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 8013b54:	79fb      	ldrb	r3, [r7, #7]
 8013b56:	3b01      	subs	r3, #1
 8013b58:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 8013b5a:	79fb      	ldrb	r3, [r7, #7]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d1bc      	bne.n	8013ada <Ds18b20_Init+0xa>
 8013b60:	e000      	b.n	8013b64 <Ds18b20_Init+0x94>
			break;
 8013b62:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8013b64:	79fb      	ldrb	r3, [r7, #7]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d101      	bne.n	8013b6e <Ds18b20_Init+0x9e>
		return false;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e026      	b.n	8013bbc <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8013b6e:	2300      	movs	r3, #0
 8013b70:	71bb      	strb	r3, [r7, #6]
 8013b72:	e019      	b.n	8013ba8 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 8013b74:	2032      	movs	r0, #50	; 0x32
 8013b76:	f009 fd87 	bl	801d688 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8013b7a:	79bb      	ldrb	r3, [r7, #6]
 8013b7c:	011b      	lsls	r3, r3, #4
 8013b7e:	4a15      	ldr	r2, [pc, #84]	; (8013bd4 <Ds18b20_Init+0x104>)
 8013b80:	4413      	add	r3, r2
 8013b82:	220c      	movs	r2, #12
 8013b84:	4619      	mov	r1, r3
 8013b86:	4810      	ldr	r0, [pc, #64]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013b88:	f000 f9cc 	bl	8013f24 <DS18B20_SetResolution>
		HAL_Delay(50);
 8013b8c:	2032      	movs	r0, #50	; 0x32
 8013b8e:	f009 fd7b 	bl	801d688 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8013b92:	79bb      	ldrb	r3, [r7, #6]
 8013b94:	011b      	lsls	r3, r3, #4
 8013b96:	4a0f      	ldr	r2, [pc, #60]	; (8013bd4 <Ds18b20_Init+0x104>)
 8013b98:	4413      	add	r3, r2
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	480a      	ldr	r0, [pc, #40]	; (8013bc8 <Ds18b20_Init+0xf8>)
 8013b9e:	f000 fa5a 	bl	8014056 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8013ba2:	79bb      	ldrb	r3, [r7, #6]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	71bb      	strb	r3, [r7, #6]
 8013ba8:	4b08      	ldr	r3, [pc, #32]	; (8013bcc <Ds18b20_Init+0xfc>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	79ba      	ldrb	r2, [r7, #6]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d3e0      	bcc.n	8013b74 <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 8013bb2:	4909      	ldr	r1, [pc, #36]	; (8013bd8 <Ds18b20_Init+0x108>)
 8013bb4:	4809      	ldr	r0, [pc, #36]	; (8013bdc <Ds18b20_Init+0x10c>)
 8013bb6:	f7ff fe67 	bl	8013888 <cliAdd>
	#endif

	return true;
 8013bba:	2301      	movs	r3, #1
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	40020400 	.word	0x40020400
 8013bc8:	200007f0 	.word	0x200007f0
 8013bcc:	20000805 	.word	0x20000805
 8013bd0:	20000804 	.word	0x20000804
 8013bd4:	200007e0 	.word	0x200007e0
 8013bd8:	08014125 	.word	0x08014125
 8013bdc:	08029864 	.word	0x08029864

08013be0 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b083      	sub	sp, #12
 8013be4:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 8013be6:	4b3f      	ldr	r3, [pc, #252]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013be8:	781b      	ldrb	r3, [r3, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d002      	beq.n	8013bf4 <Ds18b20_ManualConvert+0x14>
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d013      	beq.n	8013c1a <Ds18b20_ManualConvert+0x3a>
 8013bf2:	e072      	b.n	8013cda <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 8013bf4:	4b3c      	ldr	r3, [pc, #240]	; (8013ce8 <Ds18b20_ManualConvert+0x108>)
 8013bf6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8013bfa:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 8013bfc:	483b      	ldr	r0, [pc, #236]	; (8013cec <Ds18b20_ManualConvert+0x10c>)
 8013bfe:	f000 f87d 	bl	8013cfc <DS18B20_StartAll>
	  		  pre_time = millis();
 8013c02:	f7fe feb4 	bl	801296e <millis>
 8013c06:	4603      	mov	r3, r0
 8013c08:	4a39      	ldr	r2, [pc, #228]	; (8013cf0 <Ds18b20_ManualConvert+0x110>)
 8013c0a:	6013      	str	r3, [r2, #0]
	  		  state++;
 8013c0c:	4b35      	ldr	r3, [pc, #212]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013c0e:	781b      	ldrb	r3, [r3, #0]
 8013c10:	3301      	adds	r3, #1
 8013c12:	b2da      	uxtb	r2, r3
 8013c14:	4b33      	ldr	r3, [pc, #204]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013c16:	701a      	strb	r2, [r3, #0]
	  		  break;
 8013c18:	e05f      	b.n	8013cda <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8013c1a:	f7fe fea8 	bl	801296e <millis>
 8013c1e:	4602      	mov	r2, r0
 8013c20:	4b33      	ldr	r3, [pc, #204]	; (8013cf0 <Ds18b20_ManualConvert+0x110>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	1ad3      	subs	r3, r2, r3
 8013c26:	2b09      	cmp	r3, #9
 8013c28:	d956      	bls.n	8013cd8 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8013c2a:	4830      	ldr	r0, [pc, #192]	; (8013cec <Ds18b20_ManualConvert+0x10c>)
 8013c2c:	f000 fa6e 	bl	801410c <DS18B20_AllDone>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d112      	bne.n	8013c5c <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 8013c36:	f7fe fe9a 	bl	801296e <millis>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	4a2c      	ldr	r2, [pc, #176]	; (8013cf0 <Ds18b20_ManualConvert+0x110>)
 8013c3e:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8013c40:	4b29      	ldr	r3, [pc, #164]	; (8013ce8 <Ds18b20_ManualConvert+0x108>)
 8013c42:	881b      	ldrh	r3, [r3, #0]
 8013c44:	3b01      	subs	r3, #1
 8013c46:	b29a      	uxth	r2, r3
 8013c48:	4b27      	ldr	r3, [pc, #156]	; (8013ce8 <Ds18b20_ManualConvert+0x108>)
 8013c4a:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8013c4c:	4b26      	ldr	r3, [pc, #152]	; (8013ce8 <Ds18b20_ManualConvert+0x108>)
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d141      	bne.n	8013cd8 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 8013c54:	4b23      	ldr	r3, [pc, #140]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	701a      	strb	r2, [r3, #0]
						break;
 8013c5a:	e03e      	b.n	8013cda <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8013c5c:	4b22      	ldr	r3, [pc, #136]	; (8013ce8 <Ds18b20_ManualConvert+0x108>)
 8013c5e:	881b      	ldrh	r3, [r3, #0]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d024      	beq.n	8013cae <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013c64:	2300      	movs	r3, #0
 8013c66:	71fb      	strb	r3, [r7, #7]
 8013c68:	e01b      	b.n	8013ca2 <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8013c6a:	79fb      	ldrb	r3, [r7, #7]
 8013c6c:	011b      	lsls	r3, r3, #4
 8013c6e:	4a21      	ldr	r2, [pc, #132]	; (8013cf4 <Ds18b20_ManualConvert+0x114>)
 8013c70:	1899      	adds	r1, r3, r2
 8013c72:	79fb      	ldrb	r3, [r7, #7]
 8013c74:	011b      	lsls	r3, r3, #4
 8013c76:	3308      	adds	r3, #8
 8013c78:	4a1e      	ldr	r2, [pc, #120]	; (8013cf4 <Ds18b20_ManualConvert+0x114>)
 8013c7a:	4413      	add	r3, r2
 8013c7c:	79fc      	ldrb	r4, [r7, #7]
 8013c7e:	461a      	mov	r2, r3
 8013c80:	481a      	ldr	r0, [pc, #104]	; (8013cec <Ds18b20_ManualConvert+0x10c>)
 8013c82:	f000 f84f 	bl	8013d24 <DS18B20_Read>
 8013c86:	4603      	mov	r3, r0
 8013c88:	4619      	mov	r1, r3
 8013c8a:	4a1a      	ldr	r2, [pc, #104]	; (8013cf4 <Ds18b20_ManualConvert+0x114>)
 8013c8c:	0123      	lsls	r3, r4, #4
 8013c8e:	4413      	add	r3, r2
 8013c90:	330c      	adds	r3, #12
 8013c92:	460a      	mov	r2, r1
 8013c94:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8013c96:	4b13      	ldr	r3, [pc, #76]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013c9c:	79fb      	ldrb	r3, [r7, #7]
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	71fb      	strb	r3, [r7, #7]
 8013ca2:	4b15      	ldr	r3, [pc, #84]	; (8013cf8 <Ds18b20_ManualConvert+0x118>)
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	79fa      	ldrb	r2, [r7, #7]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d3de      	bcc.n	8013c6a <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8013cac:	e014      	b.n	8013cd8 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013cae:	2300      	movs	r3, #0
 8013cb0:	71bb      	strb	r3, [r7, #6]
 8013cb2:	e00c      	b.n	8013cce <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 8013cb4:	79bb      	ldrb	r3, [r7, #6]
 8013cb6:	4a0f      	ldr	r2, [pc, #60]	; (8013cf4 <Ds18b20_ManualConvert+0x114>)
 8013cb8:	011b      	lsls	r3, r3, #4
 8013cba:	4413      	add	r3, r2
 8013cbc:	330c      	adds	r3, #12
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 8013cc2:	4b08      	ldr	r3, [pc, #32]	; (8013ce4 <Ds18b20_ManualConvert+0x104>)
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013cc8:	79bb      	ldrb	r3, [r7, #6]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	71bb      	strb	r3, [r7, #6]
 8013cce:	4b0a      	ldr	r3, [pc, #40]	; (8013cf8 <Ds18b20_ManualConvert+0x118>)
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	79ba      	ldrb	r2, [r7, #6]
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d3ed      	bcc.n	8013cb4 <Ds18b20_ManualConvert+0xd4>
			  break;
 8013cd8:	bf00      	nop
	  }
	#endif
	  return true;
 8013cda:	2301      	movs	r3, #1
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	370c      	adds	r7, #12
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd90      	pop	{r4, r7, pc}
 8013ce4:	20000808 	.word	0x20000808
 8013ce8:	20000806 	.word	0x20000806
 8013cec:	200007f0 	.word	0x200007f0
 8013cf0:	2000080c 	.word	0x2000080c
 8013cf4:	200007e0 	.word	0x200007e0
 8013cf8:	20000805 	.word	0x20000805

08013cfc <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f002 f91b 	bl	8015f40 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8013d0a:	21cc      	movs	r1, #204	; 0xcc
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f002 f99d 	bl	801604c <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8013d12:	2144      	movs	r1, #68	; 0x44
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f002 f999 	bl	801604c <OneWire_WriteByte>
}
 8013d1a:	bf00      	nop
 8013d1c:	3708      	adds	r7, #8
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}
	...

08013d24 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8013d24:	b590      	push	{r4, r7, lr}
 8013d26:	b08b      	sub	sp, #44	; 0x2c
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	60f8      	str	r0, [r7, #12]
 8013d2c:	60b9      	str	r1, [r7, #8]
 8013d2e:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8013d36:	2300      	movs	r3, #0
 8013d38:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8013d3a:	68b8      	ldr	r0, [r7, #8]
 8013d3c:	f000 f97a 	bl	8014034 <DS18B20_Is>
 8013d40:	4603      	mov	r3, r0
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d101      	bne.n	8013d4a <DS18B20_Read+0x26>
		return false;
 8013d46:	2300      	movs	r3, #0
 8013d48:	e0e1      	b.n	8013f0e <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8013d4a:	68f8      	ldr	r0, [r7, #12]
 8013d4c:	f002 f954 	bl	8015ff8 <OneWire_ReadBit>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d101      	bne.n	8013d5a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8013d56:	2300      	movs	r3, #0
 8013d58:	e0d9      	b.n	8013f0e <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f002 f8f0 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013d60:	68b9      	ldr	r1, [r7, #8]
 8013d62:	68f8      	ldr	r0, [r7, #12]
 8013d64:	f002 faa7 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8013d68:	21be      	movs	r1, #190	; 0xbe
 8013d6a:	68f8      	ldr	r0, [r7, #12]
 8013d6c:	f002 f96e 	bl	801604c <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8013d70:	2300      	movs	r3, #0
 8013d72:	77fb      	strb	r3, [r7, #31]
 8013d74:	e00d      	b.n	8013d92 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8013d76:	7ffc      	ldrb	r4, [r7, #31]
 8013d78:	68f8      	ldr	r0, [r7, #12]
 8013d7a:	f002 f985 	bl	8016088 <OneWire_ReadByte>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	461a      	mov	r2, r3
 8013d82:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013d86:	443b      	add	r3, r7
 8013d88:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8013d8c:	7ffb      	ldrb	r3, [r7, #31]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	77fb      	strb	r3, [r7, #31]
 8013d92:	7ffb      	ldrb	r3, [r7, #31]
 8013d94:	2b08      	cmp	r3, #8
 8013d96:	d9ee      	bls.n	8013d76 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8013d98:	f107 0314 	add.w	r3, r7, #20
 8013d9c:	2108      	movs	r1, #8
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f002 fac5 	bl	801632e <OneWire_CRC8>
 8013da4:	4603      	mov	r3, r0
 8013da6:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8013da8:	7f3b      	ldrb	r3, [r7, #28]
 8013daa:	7fba      	ldrb	r2, [r7, #30]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d001      	beq.n	8013db4 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8013db0:	2300      	movs	r3, #0
 8013db2:	e0ac      	b.n	8013f0e <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8013db4:	7d3b      	ldrb	r3, [r7, #20]
 8013db6:	b21a      	sxth	r2, r3
 8013db8:	7d7b      	ldrb	r3, [r7, #21]
 8013dba:	021b      	lsls	r3, r3, #8
 8013dbc:	b21b      	sxth	r3, r3
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	b21b      	sxth	r3, r3
 8013dc2:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f002 f8bb 	bl	8015f40 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8013dca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	da05      	bge.n	8013dde <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8013dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013dd4:	425b      	negs	r3, r3
 8013dd6:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8013dd8:	2301      	movs	r3, #1
 8013dda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8013dde:	7e3b      	ldrb	r3, [r7, #24]
 8013de0:	115b      	asrs	r3, r3, #5
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	f003 0303 	and.w	r3, r3, #3
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	3309      	adds	r3, #9
 8013dec:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8013dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013df0:	091b      	lsrs	r3, r3, #4
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8013df8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013dfa:	0a1b      	lsrs	r3, r3, #8
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	011b      	lsls	r3, r3, #4
 8013e00:	b25b      	sxtb	r3, r3
 8013e02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013e06:	b25a      	sxtb	r2, r3
 8013e08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8013e12:	7f7b      	ldrb	r3, [r7, #29]
 8013e14:	3b09      	subs	r3, #9
 8013e16:	2b03      	cmp	r3, #3
 8013e18:	d858      	bhi.n	8013ecc <DS18B20_Read+0x1a8>
 8013e1a:	a201      	add	r2, pc, #4	; (adr r2, 8013e20 <DS18B20_Read+0xfc>)
 8013e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e20:	08013e31 	.word	0x08013e31
 8013e24:	08013e59 	.word	0x08013e59
 8013e28:	08013e81 	.word	0x08013e81
 8013e2c:	08013ea9 	.word	0x08013ea9
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8013e30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e32:	08db      	lsrs	r3, r3, #3
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	f003 0301 	and.w	r3, r3, #1
 8013e3a:	ee07 3a90 	vmov	s15, r3
 8013e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e42:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8013e46:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e52:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8013e56:	e03e      	b.n	8013ed6 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8013e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e5a:	089b      	lsrs	r3, r3, #2
 8013e5c:	b29b      	uxth	r3, r3
 8013e5e:	f003 0303 	and.w	r3, r3, #3
 8013e62:	ee07 3a90 	vmov	s15, r3
 8013e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e6a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8013e6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e72:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8013e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e7a:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8013e7e:	e02a      	b.n	8013ed6 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8013e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013e82:	085b      	lsrs	r3, r3, #1
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	f003 0307 	and.w	r3, r3, #7
 8013e8a:	ee07 3a90 	vmov	s15, r3
 8013e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e92:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8013e96:	edd7 7a08 	vldr	s15, [r7, #32]
 8013e9a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8013e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ea2:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8013ea6:	e016      	b.n	8013ed6 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8013ea8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013eaa:	f003 030f 	and.w	r3, r3, #15
 8013eae:	ee07 3a90 	vmov	s15, r3
 8013eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eb6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8013eba:	edd7 7a08 	vldr	s15, [r7, #32]
 8013ebe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013f18 <DS18B20_Read+0x1f4>
 8013ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ec6:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8013eca:	e004      	b.n	8013ed6 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8013ecc:	4b13      	ldr	r3, [pc, #76]	; (8013f1c <DS18B20_Read+0x1f8>)
 8013ece:	623b      	str	r3, [r7, #32]
			digit = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8013ed6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013eda:	ee07 3a90 	vmov	s15, r3
 8013ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ee2:	ed97 7a08 	vldr	s14, [r7, #32]
 8013ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013eea:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8013eee:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d007      	beq.n	8013f06 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8013ef6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013f20 <DS18B20_Read+0x1fc>
 8013efa:	edd7 7a08 	vldr	s15, [r7, #32]
 8013efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f02:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6a3a      	ldr	r2, [r7, #32]
 8013f0a:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8013f0c:	2301      	movs	r3, #1
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	372c      	adds	r7, #44	; 0x2c
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd90      	pop	{r4, r7, pc}
 8013f16:	bf00      	nop
 8013f18:	3d800000 	.word	0x3d800000
 8013f1c:	437f0000 	.word	0x437f0000
 8013f20:	00000000 	.word	0x00000000

08013f24 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8013f32:	68b8      	ldr	r0, [r7, #8]
 8013f34:	f000 f87e 	bl	8014034 <DS18B20_Is>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d101      	bne.n	8013f42 <DS18B20_SetResolution+0x1e>
		return 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	e074      	b.n	801402c <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8013f42:	68f8      	ldr	r0, [r7, #12]
 8013f44:	f001 fffc 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013f48:	68b9      	ldr	r1, [r7, #8]
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f002 f9b3 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8013f50:	21be      	movs	r1, #190	; 0xbe
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f002 f87a 	bl	801604c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f002 f895 	bl	8016088 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8013f5e:	68f8      	ldr	r0, [r7, #12]
 8013f60:	f002 f892 	bl	8016088 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f002 f88f 	bl	8016088 <OneWire_ReadByte>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f002 f88a 	bl	8016088 <OneWire_ReadByte>
 8013f74:	4603      	mov	r3, r0
 8013f76:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f002 f885 	bl	8016088 <OneWire_ReadByte>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8013f82:	79fb      	ldrb	r3, [r7, #7]
 8013f84:	2b09      	cmp	r3, #9
 8013f86:	d108      	bne.n	8013f9a <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8013f88:	7dfb      	ldrb	r3, [r7, #23]
 8013f8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013f8e:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8013f90:	7dfb      	ldrb	r3, [r7, #23]
 8013f92:	f023 0320 	bic.w	r3, r3, #32
 8013f96:	75fb      	strb	r3, [r7, #23]
 8013f98:	e022      	b.n	8013fe0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8013f9a:	79fb      	ldrb	r3, [r7, #7]
 8013f9c:	2b0a      	cmp	r3, #10
 8013f9e:	d108      	bne.n	8013fb2 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8013fa0:	7dfb      	ldrb	r3, [r7, #23]
 8013fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013fa6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8013fa8:	7dfb      	ldrb	r3, [r7, #23]
 8013faa:	f043 0320 	orr.w	r3, r3, #32
 8013fae:	75fb      	strb	r3, [r7, #23]
 8013fb0:	e016      	b.n	8013fe0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8013fb2:	79fb      	ldrb	r3, [r7, #7]
 8013fb4:	2b0b      	cmp	r3, #11
 8013fb6:	d108      	bne.n	8013fca <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8013fb8:	7dfb      	ldrb	r3, [r7, #23]
 8013fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fbe:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8013fc0:	7dfb      	ldrb	r3, [r7, #23]
 8013fc2:	f023 0320 	bic.w	r3, r3, #32
 8013fc6:	75fb      	strb	r3, [r7, #23]
 8013fc8:	e00a      	b.n	8013fe0 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8013fca:	79fb      	ldrb	r3, [r7, #7]
 8013fcc:	2b0c      	cmp	r3, #12
 8013fce:	d107      	bne.n	8013fe0 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8013fd0:	7dfb      	ldrb	r3, [r7, #23]
 8013fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fd6:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8013fd8:	7dfb      	ldrb	r3, [r7, #23]
 8013fda:	f043 0320 	orr.w	r3, r3, #32
 8013fde:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f001 ffad 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013fe6:	68b9      	ldr	r1, [r7, #8]
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	f002 f964 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8013fee:	214e      	movs	r1, #78	; 0x4e
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f002 f82b 	bl	801604c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8013ff6:	7dbb      	ldrb	r3, [r7, #22]
 8013ff8:	4619      	mov	r1, r3
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f002 f826 	bl	801604c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8014000:	7d7b      	ldrb	r3, [r7, #21]
 8014002:	4619      	mov	r1, r3
 8014004:	68f8      	ldr	r0, [r7, #12]
 8014006:	f002 f821 	bl	801604c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 801400a:	7dfb      	ldrb	r3, [r7, #23]
 801400c:	4619      	mov	r1, r3
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f002 f81c 	bl	801604c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f001 ff93 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 801401a:	68b9      	ldr	r1, [r7, #8]
 801401c:	68f8      	ldr	r0, [r7, #12]
 801401e:	f002 f94a 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8014022:	2148      	movs	r1, #72	; 0x48
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f002 f811 	bl	801604c <OneWire_WriteByte>

	return 1;
 801402a:	2301      	movs	r3, #1
}
 801402c:	4618      	mov	r0, r3
 801402e:	3718      	adds	r7, #24
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8014034:	b480      	push	{r7}
 8014036:	b083      	sub	sp, #12
 8014038:	af00      	add	r7, sp, #0
 801403a:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	2b28      	cmp	r3, #40	; 0x28
 8014042:	d101      	bne.n	8014048 <DS18B20_Is+0x14>
		return 1;
 8014044:	2301      	movs	r3, #1
 8014046:	e000      	b.n	801404a <DS18B20_Is+0x16>

	return 0;
 8014048:	2300      	movs	r3, #0
}
 801404a:	4618      	mov	r0, r3
 801404c:	370c      	adds	r7, #12
 801404e:	46bd      	mov	sp, r7
 8014050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014054:	4770      	bx	lr

08014056 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8014056:	b580      	push	{r7, lr}
 8014058:	b084      	sub	sp, #16
 801405a:	af00      	add	r7, sp, #0
 801405c:	6078      	str	r0, [r7, #4]
 801405e:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8014060:	6838      	ldr	r0, [r7, #0]
 8014062:	f7ff ffe7 	bl	8014034 <DS18B20_Is>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d101      	bne.n	8014070 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 801406c:	2300      	movs	r3, #0
 801406e:	e049      	b.n	8014104 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f001 ff65 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8014076:	6839      	ldr	r1, [r7, #0]
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f002 f91c 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 801407e:	21be      	movs	r1, #190	; 0xbe
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f001 ffe3 	bl	801604c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f001 fffe 	bl	8016088 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f001 fffb 	bl	8016088 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f001 fff8 	bl	8016088 <OneWire_ReadByte>
 8014098:	4603      	mov	r3, r0
 801409a:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f001 fff3 	bl	8016088 <OneWire_ReadByte>
 80140a2:	4603      	mov	r3, r0
 80140a4:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f001 ffee 	bl	8016088 <OneWire_ReadByte>
 80140ac:	4603      	mov	r3, r0
 80140ae:	737b      	strb	r3, [r7, #13]

	th = 125;
 80140b0:	237d      	movs	r3, #125	; 0x7d
 80140b2:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80140b4:	23c9      	movs	r3, #201	; 0xc9
 80140b6:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f001 ff41 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80140be:	6839      	ldr	r1, [r7, #0]
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f002 f8f8 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80140c6:	214e      	movs	r1, #78	; 0x4e
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f001 ffbf 	bl	801604c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80140ce:	7bfb      	ldrb	r3, [r7, #15]
 80140d0:	4619      	mov	r1, r3
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f001 ffba 	bl	801604c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80140d8:	7bbb      	ldrb	r3, [r7, #14]
 80140da:	4619      	mov	r1, r3
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f001 ffb5 	bl	801604c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80140e2:	7b7b      	ldrb	r3, [r7, #13]
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f001 ffb0 	bl	801604c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f001 ff27 	bl	8015f40 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f002 f8de 	bl	80162b6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80140fa:	2148      	movs	r1, #72	; 0x48
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f001 ffa5 	bl	801604c <OneWire_WriteByte>

	return 1;
 8014102:	2301      	movs	r3, #1
}
 8014104:	4618      	mov	r0, r3
 8014106:	3710      	adds	r7, #16
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f001 ff6f 	bl	8015ff8 <OneWire_ReadBit>
 801411a:	4603      	mov	r3, r0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b084      	sub	sp, #16
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 801412c:	2300      	movs	r3, #0
 801412e:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	881b      	ldrh	r3, [r3, #0]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d11b      	bne.n	8014170 <cliDS18B20+0x4c>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	695b      	ldr	r3, [r3, #20]
 801413c:	4913      	ldr	r1, [pc, #76]	; (801418c <cliDS18B20+0x68>)
 801413e:	2000      	movs	r0, #0
 8014140:	4798      	blx	r3
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	d013      	beq.n	8014170 <cliDS18B20+0x4c>
  {

	  while(cliKeepLoop())
 8014148:	e00b      	b.n	8014162 <cliDS18B20+0x3e>
	  {
		  Ds18b20_ManualConvert();
 801414a:	f7ff fd49 	bl	8013be0 <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 801414e:	4b10      	ldr	r3, [pc, #64]	; (8014190 <cliDS18B20+0x6c>)
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	4618      	mov	r0, r3
 8014154:	f7fc fd60 	bl	8010c18 <__aeabi_f2d>
 8014158:	4602      	mov	r2, r0
 801415a:	460b      	mov	r3, r1
 801415c:	480d      	ldr	r0, [pc, #52]	; (8014194 <cliDS18B20+0x70>)
 801415e:	f7ff fa83 	bl	8013668 <cliPrintf>
	  while(cliKeepLoop())
 8014162:	f7ff fb7b 	bl	801385c <cliKeepLoop>
 8014166:	4603      	mov	r3, r0
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1ee      	bne.n	801414a <cliDS18B20+0x26>
	  }
    ret = true;
 801416c:	2301      	movs	r3, #1
 801416e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8014170:	7bfb      	ldrb	r3, [r7, #15]
 8014172:	f083 0301 	eor.w	r3, r3, #1
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b00      	cmp	r3, #0
 801417a:	d002      	beq.n	8014182 <cliDS18B20+0x5e>
  {
    cliPrintf("DS18B20 test\n");
 801417c:	4806      	ldr	r0, [pc, #24]	; (8014198 <cliDS18B20+0x74>)
 801417e:	f7ff fa73 	bl	8013668 <cliPrintf>
  }
}
 8014182:	bf00      	nop
 8014184:	3710      	adds	r7, #16
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	0802986c 	.word	0x0802986c
 8014190:	200007e0 	.word	0x200007e0
 8014194:	08029874 	.word	0x08029874
 8014198:	0802988c 	.word	0x0802988c

0801419c <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
  bool ret = true;
 80141a2:	2301      	movs	r3, #1
 80141a4:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80141a6:	490d      	ldr	r1, [pc, #52]	; (80141dc <fatfsInit+0x40>)
 80141a8:	480d      	ldr	r0, [pc, #52]	; (80141e0 <fatfsInit+0x44>)
 80141aa:	f009 f90f 	bl	801d3cc <FATFS_LinkDriver>
 80141ae:	4603      	mov	r3, r0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10a      	bne.n	80141ca <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 80141b4:	2200      	movs	r2, #0
 80141b6:	4909      	ldr	r1, [pc, #36]	; (80141dc <fatfsInit+0x40>)
 80141b8:	480a      	ldr	r0, [pc, #40]	; (80141e4 <fatfsInit+0x48>)
 80141ba:	f007 fd01 	bl	801bbc0 <f_mount>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d102      	bne.n	80141ca <fatfsInit+0x2e>
    {
      is_init = true;
 80141c4:	4b08      	ldr	r3, [pc, #32]	; (80141e8 <fatfsInit+0x4c>)
 80141c6:	2201      	movs	r2, #1
 80141c8:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 80141ca:	4908      	ldr	r1, [pc, #32]	; (80141ec <fatfsInit+0x50>)
 80141cc:	4808      	ldr	r0, [pc, #32]	; (80141f0 <fatfsInit+0x54>)
 80141ce:	f7ff fb5b 	bl	8013888 <cliAdd>
#endif

  return ret;
 80141d2:	79fb      	ldrb	r3, [r7, #7]
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	20000a48 	.word	0x20000a48
 80141e0:	08029e28 	.word	0x08029e28
 80141e4:	20000814 	.word	0x20000814
 80141e8:	20000810 	.word	0x20000810
 80141ec:	080142c9 	.word	0x080142c9
 80141f0:	0802989c 	.word	0x0802989c

080141f4 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b0d6      	sub	sp, #344	; 0x158
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80141fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014202:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8014204:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014208:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801420c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014210:	6819      	ldr	r1, [r3, #0]
 8014212:	4610      	mov	r0, r2
 8014214:	f008 fc4d 	bl	801cab2 <f_opendir>
 8014218:	4603      	mov	r3, r0
 801421a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 801421e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8014222:	2b00      	cmp	r3, #0
 8014224:	d144      	bne.n	80142b0 <fatfsDir+0xbc>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8014226:	f107 0208 	add.w	r2, r7, #8
 801422a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801422e:	4611      	mov	r1, r2
 8014230:	4618      	mov	r0, r3
 8014232:	f008 fce7 	bl	801cc04 <f_readdir>
 8014236:	4603      	mov	r3, r0
 8014238:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 801423c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8014240:	2b00      	cmp	r3, #0
 8014242:	d130      	bne.n	80142a6 <fatfsDir+0xb2>
 8014244:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014248:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801424c:	7d9b      	ldrb	r3, [r3, #22]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d029      	beq.n	80142a6 <fatfsDir+0xb2>
      if (fno.fattrib & AM_DIR)
 8014252:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014256:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801425a:	7a1b      	ldrb	r3, [r3, #8]
 801425c:	f003 0310 	and.w	r3, r3, #16
 8014260:	2b00      	cmp	r3, #0
 8014262:	d00c      	beq.n	801427e <fatfsDir+0x8a>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8014264:	f107 0308 	add.w	r3, r7, #8
 8014268:	f103 0216 	add.w	r2, r3, #22
 801426c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014270:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8014274:	6819      	ldr	r1, [r3, #0]
 8014276:	4812      	ldr	r0, [pc, #72]	; (80142c0 <fatfsDir+0xcc>)
 8014278:	f7ff f9f6 	bl	8013668 <cliPrintf>
 801427c:	e7d3      	b.n	8014226 <fatfsDir+0x32>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 801427e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014282:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	4618      	mov	r0, r3
 801428a:	f107 0308 	add.w	r3, r7, #8
 801428e:	f103 0216 	add.w	r2, r3, #22
 8014292:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8014296:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 801429a:	4603      	mov	r3, r0
 801429c:	6809      	ldr	r1, [r1, #0]
 801429e:	4809      	ldr	r0, [pc, #36]	; (80142c4 <fatfsDir+0xd0>)
 80142a0:	f7ff f9e2 	bl	8013668 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80142a4:	e7bf      	b.n	8014226 <fatfsDir+0x32>
      }
    }
    f_closedir(&dir);
 80142a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80142aa:	4618      	mov	r0, r3
 80142ac:	f008 fc84 	bl	801cbb8 <f_closedir>
  }

  return res;
 80142b0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	080298a4 	.word	0x080298a4
 80142c4:	080298b0 	.word	0x080298b0

080142c8 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80142d8:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80142da:	2300      	movs	r3, #0
 80142dc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 80142e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d14d      	bne.n	801438c <cliFatfs+0xc4>
 80142f0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142f4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	695b      	ldr	r3, [r3, #20]
 80142fc:	4990      	ldr	r1, [pc, #576]	; (8014540 <cliFatfs+0x278>)
 80142fe:	2000      	movs	r0, #0
 8014300:	4798      	blx	r3
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d041      	beq.n	801438c <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8014308:	4b8e      	ldr	r3, [pc, #568]	; (8014544 <cliFatfs+0x27c>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	4619      	mov	r1, r3
 801430e:	488e      	ldr	r0, [pc, #568]	; (8014548 <cliFatfs+0x280>)
 8014310:	f7ff f9aa 	bl	8013668 <cliPrintf>

    if (is_init == true)
 8014314:	4b8b      	ldr	r3, [pc, #556]	; (8014544 <cliFatfs+0x27c>)
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d034      	beq.n	8014386 <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 801431c:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8014320:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8014324:	4619      	mov	r1, r3
 8014326:	4889      	ldr	r0, [pc, #548]	; (801454c <cliFatfs+0x284>)
 8014328:	f008 fcb9 	bl	801cc9e <f_getfree>
 801432c:	4603      	mov	r3, r0
 801432e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8014332:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8014336:	2b00      	cmp	r3, #0
 8014338:	d11f      	bne.n	801437a <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 801433a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801433e:	699b      	ldr	r3, [r3, #24]
 8014340:	3b02      	subs	r3, #2
 8014342:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8014346:	8952      	ldrh	r2, [r2, #10]
 8014348:	fb02 f303 	mul.w	r3, r2, r3
 801434c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8014350:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8014354:	895b      	ldrh	r3, [r3, #10]
 8014356:	461a      	mov	r2, r3
 8014358:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801435c:	fb02 f303 	mul.w	r3, r2, r3
 8014360:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8014364:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8014368:	0859      	lsrs	r1, r3, #1
 801436a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801436e:	085b      	lsrs	r3, r3, #1
 8014370:	461a      	mov	r2, r3
 8014372:	4877      	ldr	r0, [pc, #476]	; (8014550 <cliFatfs+0x288>)
 8014374:	f7ff f978 	bl	8013668 <cliPrintf>
 8014378:	e005      	b.n	8014386 <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 801437a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801437e:	4619      	mov	r1, r3
 8014380:	4874      	ldr	r0, [pc, #464]	; (8014554 <cliFatfs+0x28c>)
 8014382:	f7ff f971 	bl	8013668 <cliPrintf>
       }
    }

    ret = true;
 8014386:	2301      	movs	r3, #1
 8014388:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 801438c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014390:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	881b      	ldrh	r3, [r3, #0]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d11e      	bne.n	80143da <cliFatfs+0x112>
 801439c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80143a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	695b      	ldr	r3, [r3, #20]
 80143a8:	496b      	ldr	r1, [pc, #428]	; (8014558 <cliFatfs+0x290>)
 80143aa:	2000      	movs	r0, #0
 80143ac:	4798      	blx	r3
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d012      	beq.n	80143da <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 80143b4:	4869      	ldr	r0, [pc, #420]	; (801455c <cliFatfs+0x294>)
 80143b6:	f7ff ff1d 	bl	80141f4 <fatfsDir>
 80143ba:	4603      	mov	r3, r0
 80143bc:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 80143c0:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d005      	beq.n	80143d4 <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n", res);
 80143c8:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80143cc:	4619      	mov	r1, r3
 80143ce:	4861      	ldr	r0, [pc, #388]	; (8014554 <cliFatfs+0x28c>)
 80143d0:	f7ff f94a 	bl	8013668 <cliPrintf>
    }

    ret = true;
 80143d4:	2301      	movs	r3, #1
 80143d6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 80143da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80143de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	881b      	ldrh	r3, [r3, #0]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	f040 8095 	bne.w	8014516 <cliFatfs+0x24e>
 80143ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80143f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	695b      	ldr	r3, [r3, #20]
 80143f8:	4959      	ldr	r1, [pc, #356]	; (8014560 <cliFatfs+0x298>)
 80143fa:	2000      	movs	r0, #0
 80143fc:	4798      	blx	r3
 80143fe:	4603      	mov	r3, r0
 8014400:	2b00      	cmp	r3, #0
 8014402:	f000 8088 	beq.w	8014516 <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8014406:	f7fe fab2 	bl	801296e <millis>
 801440a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 801440e:	f107 0308 	add.w	r3, r7, #8
 8014412:	220b      	movs	r2, #11
 8014414:	4953      	ldr	r1, [pc, #332]	; (8014564 <cliFatfs+0x29c>)
 8014416:	4618      	mov	r0, r3
 8014418:	f007 fc18 	bl	801bc4c <f_open>
 801441c:	4603      	mov	r3, r0
 801441e:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 8014422:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8014426:	2b00      	cmp	r3, #0
 8014428:	d165      	bne.n	80144f6 <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 801442a:	f107 0308 	add.w	r3, r7, #8
 801442e:	494e      	ldr	r1, [pc, #312]	; (8014568 <cliFatfs+0x2a0>)
 8014430:	4618      	mov	r0, r3
 8014432:	f008 fd61 	bl	801cef8 <f_printf>
      f_printf(&log_file, "test2, ");
 8014436:	f107 0308 	add.w	r3, r7, #8
 801443a:	494c      	ldr	r1, [pc, #304]	; (801456c <cliFatfs+0x2a4>)
 801443c:	4618      	mov	r0, r3
 801443e:	f008 fd5b 	bl	801cef8 <f_printf>
      f_printf(&log_file, "test3, ");
 8014442:	f107 0308 	add.w	r3, r7, #8
 8014446:	494a      	ldr	r1, [pc, #296]	; (8014570 <cliFatfs+0x2a8>)
 8014448:	4618      	mov	r0, r3
 801444a:	f008 fd55 	bl	801cef8 <f_printf>
      f_printf(&log_file, ", ");
 801444e:	f107 0308 	add.w	r3, r7, #8
 8014452:	4948      	ldr	r1, [pc, #288]	; (8014574 <cliFatfs+0x2ac>)
 8014454:	4618      	mov	r0, r3
 8014456:	f008 fd4f 	bl	801cef8 <f_printf>
      f_printf(&log_file, "\n");
 801445a:	f107 0308 	add.w	r3, r7, #8
 801445e:	4946      	ldr	r1, [pc, #280]	; (8014578 <cliFatfs+0x2b0>)
 8014460:	4618      	mov	r0, r3
 8014462:	f008 fd49 	bl	801cef8 <f_printf>

      for (int i=0; i<8; i++)
 8014466:	2300      	movs	r3, #0
 8014468:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 801446c:	e00c      	b.n	8014488 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 801446e:	f107 0308 	add.w	r3, r7, #8
 8014472:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8014476:	4941      	ldr	r1, [pc, #260]	; (801457c <cliFatfs+0x2b4>)
 8014478:	4618      	mov	r0, r3
 801447a:	f008 fd3d 	bl	801cef8 <f_printf>
      for (int i=0; i<8; i++)
 801447e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8014482:	3301      	adds	r3, #1
 8014484:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8014488:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801448c:	2b07      	cmp	r3, #7
 801448e:	ddee      	ble.n	801446e <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 8014490:	f107 0308 	add.w	r3, r7, #8
 8014494:	2100      	movs	r1, #0
 8014496:	4618      	mov	r0, r3
 8014498:	f008 f902 	bl	801c6a0 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 801449c:	e01c      	b.n	80144d8 <cliFatfs+0x210>
      {
        len = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 80144a4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80144a8:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80144ac:	f107 0008 	add.w	r0, r7, #8
 80144b0:	2201      	movs	r2, #1
 80144b2:	f007 fd99 	bl	801bfe8 <f_read>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80144bc:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d10f      	bne.n	80144e4 <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 80144c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d00d      	beq.n	80144e8 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 80144cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80144d0:	4619      	mov	r1, r3
 80144d2:	482b      	ldr	r0, [pc, #172]	; (8014580 <cliFatfs+0x2b8>)
 80144d4:	f7ff f8c8 	bl	8013668 <cliPrintf>
      while(cliKeepLoop())
 80144d8:	f7ff f9c0 	bl	801385c <cliKeepLoop>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d1dd      	bne.n	801449e <cliFatfs+0x1d6>
 80144e2:	e002      	b.n	80144ea <cliFatfs+0x222>
          break;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <cliFatfs+0x222>
          break;
 80144e8:	bf00      	nop
      }

      f_close(&log_file);
 80144ea:	f107 0308 	add.w	r3, r7, #8
 80144ee:	4618      	mov	r0, r3
 80144f0:	f008 f8ac 	bl	801c64c <f_close>
 80144f4:	e002      	b.n	80144fc <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 80144f6:	4823      	ldr	r0, [pc, #140]	; (8014584 <cliFatfs+0x2bc>)
 80144f8:	f7ff f8b6 	bl	8013668 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 80144fc:	f7fe fa37 	bl	801296e <millis>
 8014500:	4602      	mov	r2, r0
 8014502:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8014506:	1ad3      	subs	r3, r2, r3
 8014508:	4619      	mov	r1, r3
 801450a:	481f      	ldr	r0, [pc, #124]	; (8014588 <cliFatfs+0x2c0>)
 801450c:	f7ff f8ac 	bl	8013668 <cliPrintf>

    ret = true;
 8014510:	2301      	movs	r3, #1
 8014512:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8014516:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801451a:	f083 0301 	eor.w	r3, r3, #1
 801451e:	b2db      	uxtb	r3, r3
 8014520:	2b00      	cmp	r3, #0
 8014522:	d008      	beq.n	8014536 <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n");
 8014524:	4819      	ldr	r0, [pc, #100]	; (801458c <cliFatfs+0x2c4>)
 8014526:	f7ff f89f 	bl	8013668 <cliPrintf>
    cliPrintf("fatfs dir\n");
 801452a:	4819      	ldr	r0, [pc, #100]	; (8014590 <cliFatfs+0x2c8>)
 801452c:	f7ff f89c 	bl	8013668 <cliPrintf>
    cliPrintf("fatfs test\n");
 8014530:	4818      	ldr	r0, [pc, #96]	; (8014594 <cliFatfs+0x2cc>)
 8014532:	f7ff f899 	bl	8013668 <cliPrintf>
  }
}
 8014536:	bf00      	nop
 8014538:	f507 771a 	add.w	r7, r7, #616	; 0x268
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	080298c4 	.word	0x080298c4
 8014544:	20000810 	.word	0x20000810
 8014548:	080298cc 	.word	0x080298cc
 801454c:	080298e0 	.word	0x080298e0
 8014550:	080298e4 	.word	0x080298e4
 8014554:	08029918 	.word	0x08029918
 8014558:	08029924 	.word	0x08029924
 801455c:	08029928 	.word	0x08029928
 8014560:	0802992c 	.word	0x0802992c
 8014564:	08029934 	.word	0x08029934
 8014568:	0802993c 	.word	0x0802993c
 801456c:	08029944 	.word	0x08029944
 8014570:	0802994c 	.word	0x0802994c
 8014574:	08029954 	.word	0x08029954
 8014578:	08029958 	.word	0x08029958
 801457c:	0802995c 	.word	0x0802995c
 8014580:	08029964 	.word	0x08029964
 8014584:	08029968 	.word	0x08029968
 8014588:	08029978 	.word	0x08029978
 801458c:	08029980 	.word	0x08029980
 8014590:	0802998c 	.word	0x0802998c
 8014594:	08029998 	.word	0x08029998

08014598 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 801459c:	4903      	ldr	r1, [pc, #12]	; (80145ac <flashInit+0x14>)
 801459e:	4804      	ldr	r0, [pc, #16]	; (80145b0 <flashInit+0x18>)
 80145a0:	f7ff f972 	bl	8013888 <cliAdd>
#endif

  return true;
 80145a4:	2301      	movs	r3, #1
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	08014775 	.word	0x08014775
 80145b0:	080299a4 	.word	0x080299a4

080145b4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b08c      	sub	sp, #48	; 0x30
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80145be:	2300      	movs	r3, #0
 80145c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 80145c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80145c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 80145ca:	2300      	movs	r3, #0
 80145cc:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80145ce:	2300      	movs	r3, #0
 80145d0:	627b      	str	r3, [r7, #36]	; 0x24
 80145d2:	e015      	b.n	8014600 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 80145d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	683a      	ldr	r2, [r7, #0]
 80145da:	6879      	ldr	r1, [r7, #4]
 80145dc:	4618      	mov	r0, r3
 80145de:	f000 f871 	bl	80146c4 <flashInSector>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d008      	beq.n	80145fa <flashErase+0x46>
    {
      if (start_sector_num < 0)
 80145e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	da01      	bge.n	80145f4 <flashErase+0x40>
      {
        start_sector_num = i;
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 80145f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f6:	3301      	adds	r3, #1
 80145f8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	3301      	adds	r3, #1
 80145fe:	627b      	str	r3, [r7, #36]	; 0x24
 8014600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014602:	2b07      	cmp	r3, #7
 8014604:	dde6      	ble.n	80145d4 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8014606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014608:	2b00      	cmp	r3, #0
 801460a:	d020      	beq.n	801464e <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 801460c:	f00a fb2e 	bl	801ec6c <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8014610:	2300      	movs	r3, #0
 8014612:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 8014614:	2301      	movs	r3, #1
 8014616:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8014618:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 801461c:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 801461e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014620:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8014622:	2302      	movs	r3, #2
 8014624:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8014626:	f107 0208 	add.w	r2, r7, #8
 801462a:	f107 030c 	add.w	r3, r7, #12
 801462e:	4611      	mov	r1, r2
 8014630:	4618      	mov	r0, r3
 8014632:	f00a fc8d 	bl	801ef50 <HAL_FLASHEx_Erase>
 8014636:	4603      	mov	r3, r0
 8014638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 801463c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014640:	2b00      	cmp	r3, #0
 8014642:	d102      	bne.n	801464a <flashErase+0x96>
    {
      ret = true;
 8014644:	2301      	movs	r3, #1
 8014646:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 801464a:	f00a fb31 	bl	801ecb0 <HAL_FLASH_Lock>
  }

  return ret;
 801464e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014652:	4618      	mov	r0, r3
 8014654:	3730      	adds	r7, #48	; 0x30
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}

0801465a <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 801465a:	b5b0      	push	{r4, r5, r7, lr}
 801465c:	b088      	sub	sp, #32
 801465e:	af00      	add	r7, sp, #0
 8014660:	60f8      	str	r0, [r7, #12]
 8014662:	60b9      	str	r1, [r7, #8]
 8014664:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8014666:	2301      	movs	r3, #1
 8014668:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 801466a:	f00a faff 	bl	801ec6c <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 801466e:	2300      	movs	r3, #0
 8014670:	61bb      	str	r3, [r7, #24]
 8014672:	e01b      	b.n	80146ac <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8014674:	69bb      	ldr	r3, [r7, #24]
 8014676:	68ba      	ldr	r2, [r7, #8]
 8014678:	4413      	add	r3, r2
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 801467e:	69ba      	ldr	r2, [r7, #24]
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	18d1      	adds	r1, r2, r3
 8014684:	8afb      	ldrh	r3, [r7, #22]
 8014686:	2200      	movs	r2, #0
 8014688:	461c      	mov	r4, r3
 801468a:	4615      	mov	r5, r2
 801468c:	4622      	mov	r2, r4
 801468e:	462b      	mov	r3, r5
 8014690:	2000      	movs	r0, #0
 8014692:	f00a fa97 	bl	801ebc4 <HAL_FLASH_Program>
 8014696:	4603      	mov	r3, r0
 8014698:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 801469a:	7d7b      	ldrb	r3, [r7, #21]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d002      	beq.n	80146a6 <flashWrite+0x4c>
    {
      ret = false;
 80146a0:	2300      	movs	r3, #0
 80146a2:	77fb      	strb	r3, [r7, #31]
      break;
 80146a4:	e006      	b.n	80146b4 <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	3301      	adds	r3, #1
 80146aa:	61bb      	str	r3, [r7, #24]
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d8df      	bhi.n	8014674 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 80146b4:	f00a fafc 	bl	801ecb0 <HAL_FLASH_Lock>

  return ret;
 80146b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3720      	adds	r7, #32
 80146be:	46bd      	mov	sp, r7
 80146c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080146c4 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b08b      	sub	sp, #44	; 0x2c
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	4603      	mov	r3, r0
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
 80146d0:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80146d2:	2300      	movs	r3, #0
 80146d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80146d8:	89fb      	ldrh	r3, [r7, #14]
 80146da:	4a25      	ldr	r2, [pc, #148]	; (8014770 <flashInSector+0xac>)
 80146dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80146e0:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80146e2:	89fb      	ldrh	r3, [r7, #14]
 80146e4:	4a22      	ldr	r2, [pc, #136]	; (8014770 <flashInSector+0xac>)
 80146e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80146ea:	89fb      	ldrh	r3, [r7, #14]
 80146ec:	4920      	ldr	r1, [pc, #128]	; (8014770 <flashInSector+0xac>)
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	440b      	add	r3, r1
 80146f2:	685b      	ldr	r3, [r3, #4]
 80146f4:	4413      	add	r3, r2
 80146f6:	3b01      	subs	r3, #1
 80146f8:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80146fe:	68ba      	ldr	r2, [r7, #8]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4413      	add	r3, r2
 8014704:	3b01      	subs	r3, #1
 8014706:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8014708:	6a3a      	ldr	r2, [r7, #32]
 801470a:	69bb      	ldr	r3, [r7, #24]
 801470c:	429a      	cmp	r2, r3
 801470e:	d306      	bcc.n	801471e <flashInSector+0x5a>
 8014710:	6a3a      	ldr	r2, [r7, #32]
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	429a      	cmp	r2, r3
 8014716:	d802      	bhi.n	801471e <flashInSector+0x5a>
  {
    ret = true;
 8014718:	2301      	movs	r3, #1
 801471a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 801471e:	69fa      	ldr	r2, [r7, #28]
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	429a      	cmp	r2, r3
 8014724:	d306      	bcc.n	8014734 <flashInSector+0x70>
 8014726:	69fa      	ldr	r2, [r7, #28]
 8014728:	697b      	ldr	r3, [r7, #20]
 801472a:	429a      	cmp	r2, r3
 801472c:	d802      	bhi.n	8014734 <flashInSector+0x70>
  {
    ret = true;
 801472e:	2301      	movs	r3, #1
 8014730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8014734:	69ba      	ldr	r2, [r7, #24]
 8014736:	6a3b      	ldr	r3, [r7, #32]
 8014738:	429a      	cmp	r2, r3
 801473a:	d306      	bcc.n	801474a <flashInSector+0x86>
 801473c:	69ba      	ldr	r2, [r7, #24]
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	429a      	cmp	r2, r3
 8014742:	d802      	bhi.n	801474a <flashInSector+0x86>
  {
    ret = true;
 8014744:	2301      	movs	r3, #1
 8014746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 801474a:	697a      	ldr	r2, [r7, #20]
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	429a      	cmp	r2, r3
 8014750:	d306      	bcc.n	8014760 <flashInSector+0x9c>
 8014752:	697a      	ldr	r2, [r7, #20]
 8014754:	69fb      	ldr	r3, [r7, #28]
 8014756:	429a      	cmp	r2, r3
 8014758:	d802      	bhi.n	8014760 <flashInSector+0x9c>
  {
    ret = true;
 801475a:	2301      	movs	r3, #1
 801475c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8014760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014764:	4618      	mov	r0, r3
 8014766:	372c      	adds	r7, #44	; 0x2c
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr
 8014770:	20000054 	.word	0x20000054

08014774 <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b08c      	sub	sp, #48	; 0x30
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 801477c:	2300      	movs	r3, #0
 801477e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	2b01      	cmp	r3, #1
 8014788:	d121      	bne.n	80147ce <cliFlash+0x5a>
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	695b      	ldr	r3, [r3, #20]
 801478e:	495c      	ldr	r1, [pc, #368]	; (8014900 <cliFlash+0x18c>)
 8014790:	2000      	movs	r0, #0
 8014792:	4798      	blx	r3
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	d019      	beq.n	80147ce <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 801479a:	2300      	movs	r3, #0
 801479c:	62bb      	str	r3, [r7, #40]	; 0x28
 801479e:	e010      	b.n	80147c2 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 80147a0:	4a58      	ldr	r2, [pc, #352]	; (8014904 <cliFlash+0x190>)
 80147a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80147a8:	4a56      	ldr	r2, [pc, #344]	; (8014904 <cliFlash+0x190>)
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	00db      	lsls	r3, r3, #3
 80147ae:	4413      	add	r3, r2
 80147b0:	685b      	ldr	r3, [r3, #4]
 80147b2:	0a9b      	lsrs	r3, r3, #10
 80147b4:	461a      	mov	r2, r3
 80147b6:	4854      	ldr	r0, [pc, #336]	; (8014908 <cliFlash+0x194>)
 80147b8:	f7fe ff56 	bl	8013668 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80147bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147be:	3301      	adds	r3, #1
 80147c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	2b07      	cmp	r3, #7
 80147c6:	ddeb      	ble.n	80147a0 <cliFlash+0x2c>
    }

    ret = true;
 80147c8:	2301      	movs	r3, #1
 80147ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	881b      	ldrh	r3, [r3, #0]
 80147d2:	2b03      	cmp	r3, #3
 80147d4:	d12b      	bne.n	801482e <cliFlash+0xba>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	695b      	ldr	r3, [r3, #20]
 80147da:	494c      	ldr	r1, [pc, #304]	; (801490c <cliFlash+0x198>)
 80147dc:	2000      	movs	r0, #0
 80147de:	4798      	blx	r3
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d023      	beq.n	801482e <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	689b      	ldr	r3, [r3, #8]
 80147ea:	2001      	movs	r0, #1
 80147ec:	4798      	blx	r3
 80147ee:	4603      	mov	r3, r0
 80147f0:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	2002      	movs	r0, #2
 80147f8:	4798      	blx	r3
 80147fa:	4603      	mov	r3, r0
 80147fc:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 80147fe:	2300      	movs	r3, #0
 8014800:	627b      	str	r3, [r7, #36]	; 0x24
 8014802:	e00d      	b.n	8014820 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 8014804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014806:	6a3b      	ldr	r3, [r7, #32]
 8014808:	18d1      	adds	r1, r2, r3
 801480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801480c:	6a3b      	ldr	r3, [r7, #32]
 801480e:	4413      	add	r3, r2
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	461a      	mov	r2, r3
 8014814:	483e      	ldr	r0, [pc, #248]	; (8014910 <cliFlash+0x19c>)
 8014816:	f7fe ff27 	bl	8013668 <cliPrintf>
    for (int i=0; i<length; i++)
 801481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481c:	3301      	adds	r3, #1
 801481e:	627b      	str	r3, [r7, #36]	; 0x24
 8014820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014822:	69fa      	ldr	r2, [r7, #28]
 8014824:	429a      	cmp	r2, r3
 8014826:	d8ed      	bhi.n	8014804 <cliFlash+0x90>
    }

    ret = true;
 8014828:	2301      	movs	r3, #1
 801482a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	881b      	ldrh	r3, [r3, #0]
 8014832:	2b03      	cmp	r3, #3
 8014834:	d121      	bne.n	801487a <cliFlash+0x106>
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	695b      	ldr	r3, [r3, #20]
 801483a:	4936      	ldr	r1, [pc, #216]	; (8014914 <cliFlash+0x1a0>)
 801483c:	2000      	movs	r0, #0
 801483e:	4798      	blx	r3
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	d019      	beq.n	801487a <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	689b      	ldr	r3, [r3, #8]
 801484a:	2001      	movs	r0, #1
 801484c:	4798      	blx	r3
 801484e:	4603      	mov	r3, r0
 8014850:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	689b      	ldr	r3, [r3, #8]
 8014856:	2002      	movs	r0, #2
 8014858:	4798      	blx	r3
 801485a:	4603      	mov	r3, r0
 801485c:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 801485e:	6979      	ldr	r1, [r7, #20]
 8014860:	69b8      	ldr	r0, [r7, #24]
 8014862:	f7ff fea7 	bl	80145b4 <flashErase>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d003      	beq.n	8014874 <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 801486c:	482a      	ldr	r0, [pc, #168]	; (8014918 <cliFlash+0x1a4>)
 801486e:	f7fe fefb 	bl	8013668 <cliPrintf>
 8014872:	e002      	b.n	801487a <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 8014874:	4829      	ldr	r0, [pc, #164]	; (801491c <cliFlash+0x1a8>)
 8014876:	f7fe fef7 	bl	8013668 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	881b      	ldrh	r3, [r3, #0]
 801487e:	2b03      	cmp	r3, #3
 8014880:	d127      	bne.n	80148d2 <cliFlash+0x15e>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	695b      	ldr	r3, [r3, #20]
 8014886:	4926      	ldr	r1, [pc, #152]	; (8014920 <cliFlash+0x1ac>)
 8014888:	2000      	movs	r0, #0
 801488a:	4798      	blx	r3
 801488c:	4603      	mov	r3, r0
 801488e:	2b00      	cmp	r3, #0
 8014890:	d01f      	beq.n	80148d2 <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	689b      	ldr	r3, [r3, #8]
 8014896:	2001      	movs	r0, #1
 8014898:	4798      	blx	r3
 801489a:	4603      	mov	r3, r0
 801489c:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	689b      	ldr	r3, [r3, #8]
 80148a2:	2002      	movs	r0, #2
 80148a4:	4798      	blx	r3
 80148a6:	4603      	mov	r3, r0
 80148a8:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80148aa:	f107 030c 	add.w	r3, r7, #12
 80148ae:	2204      	movs	r2, #4
 80148b0:	4619      	mov	r1, r3
 80148b2:	6938      	ldr	r0, [r7, #16]
 80148b4:	f7ff fed1 	bl	801465a <flashWrite>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d003      	beq.n	80148c6 <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 80148be:	4819      	ldr	r0, [pc, #100]	; (8014924 <cliFlash+0x1b0>)
 80148c0:	f7fe fed2 	bl	8013668 <cliPrintf>
 80148c4:	e002      	b.n	80148cc <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 80148c6:	4818      	ldr	r0, [pc, #96]	; (8014928 <cliFlash+0x1b4>)
 80148c8:	f7fe fece 	bl	8013668 <cliPrintf>
    }

    ret = true;
 80148cc:	2301      	movs	r3, #1
 80148ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 80148d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148d6:	f083 0301 	eor.w	r3, r3, #1
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d00b      	beq.n	80148f8 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 80148e0:	4812      	ldr	r0, [pc, #72]	; (801492c <cliFlash+0x1b8>)
 80148e2:	f7fe fec1 	bl	8013668 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 80148e6:	4812      	ldr	r0, [pc, #72]	; (8014930 <cliFlash+0x1bc>)
 80148e8:	f7fe febe 	bl	8013668 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 80148ec:	4811      	ldr	r0, [pc, #68]	; (8014934 <cliFlash+0x1c0>)
 80148ee:	f7fe febb 	bl	8013668 <cliPrintf>
    cliPrintf("flash write addr data\n");
 80148f2:	4811      	ldr	r0, [pc, #68]	; (8014938 <cliFlash+0x1c4>)
 80148f4:	f7fe feb8 	bl	8013668 <cliPrintf>
  }
}
 80148f8:	bf00      	nop
 80148fa:	3730      	adds	r7, #48	; 0x30
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	080299ac 	.word	0x080299ac
 8014904:	20000054 	.word	0x20000054
 8014908:	080299b4 	.word	0x080299b4
 801490c:	080299c4 	.word	0x080299c4
 8014910:	080299cc 	.word	0x080299cc
 8014914:	080299dc 	.word	0x080299dc
 8014918:	080299e4 	.word	0x080299e4
 801491c:	080299f0 	.word	0x080299f0
 8014920:	080299fc 	.word	0x080299fc
 8014924:	08029a04 	.word	0x08029a04
 8014928:	08029a10 	.word	0x08029a10
 801492c:	08029a1c 	.word	0x08029a1c
 8014930:	08029a28 	.word	0x08029a28
 8014934:	08029a44 	.word	0x08029a44
 8014938:	08029a60 	.word	0x08029a60

0801493c <gpioInit>:
#endif



bool gpioInit(void)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
  bool ret = true;
 8014942:	2301      	movs	r3, #1
 8014944:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014946:	2300      	movs	r3, #0
 8014948:	607b      	str	r3, [r7, #4]
 801494a:	4b24      	ldr	r3, [pc, #144]	; (80149dc <gpioInit+0xa0>)
 801494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801494e:	4a23      	ldr	r2, [pc, #140]	; (80149dc <gpioInit+0xa0>)
 8014950:	f043 0301 	orr.w	r3, r3, #1
 8014954:	6313      	str	r3, [r2, #48]	; 0x30
 8014956:	4b21      	ldr	r3, [pc, #132]	; (80149dc <gpioInit+0xa0>)
 8014958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801495a:	f003 0301 	and.w	r3, r3, #1
 801495e:	607b      	str	r3, [r7, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014962:	2300      	movs	r3, #0
 8014964:	603b      	str	r3, [r7, #0]
 8014966:	4b1d      	ldr	r3, [pc, #116]	; (80149dc <gpioInit+0xa0>)
 8014968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801496a:	4a1c      	ldr	r2, [pc, #112]	; (80149dc <gpioInit+0xa0>)
 801496c:	f043 0302 	orr.w	r3, r3, #2
 8014970:	6313      	str	r3, [r2, #48]	; 0x30
 8014972:	4b1a      	ldr	r3, [pc, #104]	; (80149dc <gpioInit+0xa0>)
 8014974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014976:	f003 0302 	and.w	r3, r3, #2
 801497a:	603b      	str	r3, [r7, #0]
 801497c:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 801497e:	2300      	movs	r3, #0
 8014980:	60fb      	str	r3, [r7, #12]
 8014982:	e01e      	b.n	80149c2 <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	b2d8      	uxtb	r0, r3
 8014988:	4915      	ldr	r1, [pc, #84]	; (80149e0 <gpioInit+0xa4>)
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	4613      	mov	r3, r2
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4413      	add	r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	440b      	add	r3, r1
 8014996:	3308      	adds	r3, #8
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	4619      	mov	r1, r3
 801499c:	f000 f826 	bl	80149ec <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	b2d8      	uxtb	r0, r3
 80149a4:	490e      	ldr	r1, [pc, #56]	; (80149e0 <gpioInit+0xa4>)
 80149a6:	68fa      	ldr	r2, [r7, #12]
 80149a8:	4613      	mov	r3, r2
 80149aa:	005b      	lsls	r3, r3, #1
 80149ac:	4413      	add	r3, r2
 80149ae:	009b      	lsls	r3, r3, #2
 80149b0:	440b      	add	r3, r1
 80149b2:	330b      	adds	r3, #11
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	4619      	mov	r1, r3
 80149b8:	f000 f88a 	bl	8014ad0 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3301      	adds	r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	2b0c      	cmp	r3, #12
 80149c6:	dddd      	ble.n	8014984 <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80149c8:	4906      	ldr	r1, [pc, #24]	; (80149e4 <gpioInit+0xa8>)
 80149ca:	4807      	ldr	r0, [pc, #28]	; (80149e8 <gpioInit+0xac>)
 80149cc:	f7fe ff5c 	bl	8013888 <cliAdd>
#endif

  return ret;
 80149d0:	7afb      	ldrb	r3, [r7, #11]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	40023800 	.word	0x40023800
 80149e0:	08029d40 	.word	0x08029d40
 80149e4:	08014c2d 	.word	0x08014c2d
 80149e8:	08029a78 	.word	0x08029a78

080149ec <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b088      	sub	sp, #32
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	4603      	mov	r3, r0
 80149f4:	460a      	mov	r2, r1
 80149f6:	71fb      	strb	r3, [r7, #7]
 80149f8:	4613      	mov	r3, r2
 80149fa:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80149fc:	2301      	movs	r3, #1
 80149fe:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014a00:	f107 0308 	add.w	r3, r7, #8
 8014a04:	2200      	movs	r2, #0
 8014a06:	601a      	str	r2, [r3, #0]
 8014a08:	605a      	str	r2, [r3, #4]
 8014a0a:	609a      	str	r2, [r3, #8]
 8014a0c:	60da      	str	r2, [r3, #12]
 8014a0e:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8014a10:	79fb      	ldrb	r3, [r7, #7]
 8014a12:	2b0c      	cmp	r3, #12
 8014a14:	d901      	bls.n	8014a1a <gpioPinMode+0x2e>
  {
    return false;
 8014a16:	2300      	movs	r3, #0
 8014a18:	e054      	b.n	8014ac4 <gpioPinMode+0xd8>
  }

  switch(mode)
 8014a1a:	79bb      	ldrb	r3, [r7, #6]
 8014a1c:	2b06      	cmp	r3, #6
 8014a1e:	d838      	bhi.n	8014a92 <gpioPinMode+0xa6>
 8014a20:	a201      	add	r2, pc, #4	; (adr r2, 8014a28 <gpioPinMode+0x3c>)
 8014a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a26:	bf00      	nop
 8014a28:	08014a45 	.word	0x08014a45
 8014a2c:	08014a4f 	.word	0x08014a4f
 8014a30:	08014a59 	.word	0x08014a59
 8014a34:	08014a63 	.word	0x08014a63
 8014a38:	08014a6d 	.word	0x08014a6d
 8014a3c:	08014a77 	.word	0x08014a77
 8014a40:	08014a81 	.word	0x08014a81
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014a44:	2300      	movs	r3, #0
 8014a46:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	613b      	str	r3, [r7, #16]
      break;
 8014a4c:	e021      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a52:	2301      	movs	r3, #1
 8014a54:	613b      	str	r3, [r7, #16]
      break;
 8014a56:	e01c      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014a5c:	2302      	movs	r3, #2
 8014a5e:	613b      	str	r3, [r7, #16]
      break;
 8014a60:	e017      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a62:	2301      	movs	r3, #1
 8014a64:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a66:	2300      	movs	r3, #0
 8014a68:	613b      	str	r3, [r7, #16]
      break;
 8014a6a:	e012      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014a70:	2301      	movs	r3, #1
 8014a72:	613b      	str	r3, [r7, #16]
      break;
 8014a74:	e00d      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014a76:	2301      	movs	r3, #1
 8014a78:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	613b      	str	r3, [r7, #16]
      break;
 8014a7e:	e008      	b.n	8014a92 <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a80:	2302      	movs	r3, #2
 8014a82:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a84:	2300      	movs	r3, #0
 8014a86:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014a8c:	2302      	movs	r3, #2
 8014a8e:	61bb      	str	r3, [r7, #24]
      break;
 8014a90:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8014a92:	79fa      	ldrb	r2, [r7, #7]
 8014a94:	490d      	ldr	r1, [pc, #52]	; (8014acc <gpioPinMode+0xe0>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	009b      	lsls	r3, r3, #2
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3304      	adds	r3, #4
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8014aa6:	79fa      	ldrb	r2, [r7, #7]
 8014aa8:	4908      	ldr	r1, [pc, #32]	; (8014acc <gpioPinMode+0xe0>)
 8014aaa:	4613      	mov	r3, r2
 8014aac:	005b      	lsls	r3, r3, #1
 8014aae:	4413      	add	r3, r2
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	440b      	add	r3, r1
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f107 0208 	add.w	r2, r7, #8
 8014aba:	4611      	mov	r1, r2
 8014abc:	4618      	mov	r0, r3
 8014abe:	f00a fb69 	bl	801f194 <HAL_GPIO_Init>

  return ret;
 8014ac2:	7ffb      	ldrb	r3, [r7, #31]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	3720      	adds	r7, #32
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	08029d40 	.word	0x08029d40

08014ad0 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8014ad0:	b590      	push	{r4, r7, lr}
 8014ad2:	b083      	sub	sp, #12
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	460a      	mov	r2, r1
 8014ada:	71fb      	strb	r3, [r7, #7]
 8014adc:	4613      	mov	r3, r2
 8014ade:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8014ae0:	79fb      	ldrb	r3, [r7, #7]
 8014ae2:	2b0c      	cmp	r3, #12
 8014ae4:	d840      	bhi.n	8014b68 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 8014ae6:	79bb      	ldrb	r3, [r7, #6]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d01e      	beq.n	8014b2a <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8014aec:	79fa      	ldrb	r2, [r7, #7]
 8014aee:	4920      	ldr	r1, [pc, #128]	; (8014b70 <gpioPinWrite+0xa0>)
 8014af0:	4613      	mov	r3, r2
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	4413      	add	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	440b      	add	r3, r1
 8014afa:	6818      	ldr	r0, [r3, #0]
 8014afc:	79fa      	ldrb	r2, [r7, #7]
 8014afe:	491c      	ldr	r1, [pc, #112]	; (8014b70 <gpioPinWrite+0xa0>)
 8014b00:	4613      	mov	r3, r2
 8014b02:	005b      	lsls	r3, r3, #1
 8014b04:	4413      	add	r3, r2
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	440b      	add	r3, r1
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	b299      	uxth	r1, r3
 8014b10:	79fa      	ldrb	r2, [r7, #7]
 8014b12:	4c17      	ldr	r4, [pc, #92]	; (8014b70 <gpioPinWrite+0xa0>)
 8014b14:	4613      	mov	r3, r2
 8014b16:	005b      	lsls	r3, r3, #1
 8014b18:	4413      	add	r3, r2
 8014b1a:	009b      	lsls	r3, r3, #2
 8014b1c:	4423      	add	r3, r4
 8014b1e:	3309      	adds	r3, #9
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	461a      	mov	r2, r3
 8014b24:	f00a fdb6 	bl	801f694 <HAL_GPIO_WritePin>
 8014b28:	e01f      	b.n	8014b6a <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8014b2a:	79fa      	ldrb	r2, [r7, #7]
 8014b2c:	4910      	ldr	r1, [pc, #64]	; (8014b70 <gpioPinWrite+0xa0>)
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	440b      	add	r3, r1
 8014b38:	6818      	ldr	r0, [r3, #0]
 8014b3a:	79fa      	ldrb	r2, [r7, #7]
 8014b3c:	490c      	ldr	r1, [pc, #48]	; (8014b70 <gpioPinWrite+0xa0>)
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	440b      	add	r3, r1
 8014b48:	3304      	adds	r3, #4
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	b299      	uxth	r1, r3
 8014b4e:	79fa      	ldrb	r2, [r7, #7]
 8014b50:	4c07      	ldr	r4, [pc, #28]	; (8014b70 <gpioPinWrite+0xa0>)
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	4423      	add	r3, r4
 8014b5c:	330a      	adds	r3, #10
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	461a      	mov	r2, r3
 8014b62:	f00a fd97 	bl	801f694 <HAL_GPIO_WritePin>
 8014b66:	e000      	b.n	8014b6a <gpioPinWrite+0x9a>
    return;
 8014b68:	bf00      	nop
  }
}
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	bd90      	pop	{r4, r7, pc}
 8014b70:	08029d40 	.word	0x08029d40

08014b74 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	2b0c      	cmp	r3, #12
 8014b86:	d901      	bls.n	8014b8c <gpioPinRead+0x18>
  {
    return false;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e024      	b.n	8014bd6 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8014b8c:	79fa      	ldrb	r2, [r7, #7]
 8014b8e:	4914      	ldr	r1, [pc, #80]	; (8014be0 <gpioPinRead+0x6c>)
 8014b90:	4613      	mov	r3, r2
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	4413      	add	r3, r2
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	440b      	add	r3, r1
 8014b9a:	6818      	ldr	r0, [r3, #0]
 8014b9c:	79fa      	ldrb	r2, [r7, #7]
 8014b9e:	4910      	ldr	r1, [pc, #64]	; (8014be0 <gpioPinRead+0x6c>)
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	009b      	lsls	r3, r3, #2
 8014ba8:	440b      	add	r3, r1
 8014baa:	3304      	adds	r3, #4
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	f00a fd57 	bl	801f664 <HAL_GPIO_ReadPin>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	4618      	mov	r0, r3
 8014bba:	79fa      	ldrb	r2, [r7, #7]
 8014bbc:	4908      	ldr	r1, [pc, #32]	; (8014be0 <gpioPinRead+0x6c>)
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4413      	add	r3, r2
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	440b      	add	r3, r1
 8014bc8:	3309      	adds	r3, #9
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	4298      	cmp	r0, r3
 8014bce:	d101      	bne.n	8014bd4 <gpioPinRead+0x60>
  {
    ret = true;
 8014bd0:	2301      	movs	r3, #1
 8014bd2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	08029d40 	.word	0x08029d40

08014be4 <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	71fb      	strb	r3, [r7, #7]
  if (ch >= GPIO_MAX_CH)
 8014bee:	79fb      	ldrb	r3, [r7, #7]
 8014bf0:	2b0c      	cmp	r3, #12
 8014bf2:	d815      	bhi.n	8014c20 <gpioPinToggle+0x3c>
  {
    return;
  }

  HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 8014bf4:	79fa      	ldrb	r2, [r7, #7]
 8014bf6:	490c      	ldr	r1, [pc, #48]	; (8014c28 <gpioPinToggle+0x44>)
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	4413      	add	r3, r2
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	440b      	add	r3, r1
 8014c02:	6818      	ldr	r0, [r3, #0]
 8014c04:	79fa      	ldrb	r2, [r7, #7]
 8014c06:	4908      	ldr	r1, [pc, #32]	; (8014c28 <gpioPinToggle+0x44>)
 8014c08:	4613      	mov	r3, r2
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	440b      	add	r3, r1
 8014c12:	3304      	adds	r3, #4
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4619      	mov	r1, r3
 8014c1a:	f00a fd54 	bl	801f6c6 <HAL_GPIO_TogglePin>
 8014c1e:	e000      	b.n	8014c22 <gpioPinToggle+0x3e>
    return;
 8014c20:	bf00      	nop
}
 8014c22:	3708      	adds	r7, #8
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	08029d40 	.word	0x08029d40

08014c2c <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8014c2c:	b590      	push	{r4, r7, lr}
 8014c2e:	b087      	sub	sp, #28
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8014c34:	2300      	movs	r3, #0
 8014c36:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	881b      	ldrh	r3, [r3, #0]
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d128      	bne.n	8014c92 <cliGpio+0x66>
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	695b      	ldr	r3, [r3, #20]
 8014c44:	4947      	ldr	r1, [pc, #284]	; (8014d64 <cliGpio+0x138>)
 8014c46:	2000      	movs	r0, #0
 8014c48:	4798      	blx	r3
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d020      	beq.n	8014c92 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8014c50:	e018      	b.n	8014c84 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8014c52:	2300      	movs	r3, #0
 8014c54:	613b      	str	r3, [r7, #16]
 8014c56:	e00c      	b.n	8014c72 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	b2db      	uxtb	r3, r3
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7ff ff89 	bl	8014b74 <gpioPinRead>
 8014c62:	4603      	mov	r3, r0
 8014c64:	4619      	mov	r1, r3
 8014c66:	4840      	ldr	r0, [pc, #256]	; (8014d68 <cliGpio+0x13c>)
 8014c68:	f7fe fcfe 	bl	8013668 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	3301      	adds	r3, #1
 8014c70:	613b      	str	r3, [r7, #16]
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	2b0c      	cmp	r3, #12
 8014c76:	ddef      	ble.n	8014c58 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8014c78:	483c      	ldr	r0, [pc, #240]	; (8014d6c <cliGpio+0x140>)
 8014c7a:	f7fe fcf5 	bl	8013668 <cliPrintf>
      delay(100);
 8014c7e:	2064      	movs	r0, #100	; 0x64
 8014c80:	f7fd fe6a 	bl	8012958 <delay>
    while(cliKeepLoop())
 8014c84:	f7fe fdea 	bl	801385c <cliKeepLoop>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d1e1      	bne.n	8014c52 <cliGpio+0x26>
    }
    ret = true;
 8014c8e:	2301      	movs	r3, #1
 8014c90:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	881b      	ldrh	r3, [r3, #0]
 8014c96:	2b02      	cmp	r3, #2
 8014c98:	d123      	bne.n	8014ce2 <cliGpio+0xb6>
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	695b      	ldr	r3, [r3, #20]
 8014c9e:	4934      	ldr	r1, [pc, #208]	; (8014d70 <cliGpio+0x144>)
 8014ca0:	2000      	movs	r0, #0
 8014ca2:	4798      	blx	r3
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d01b      	beq.n	8014ce2 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	2001      	movs	r0, #1
 8014cb0:	4798      	blx	r3
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8014cb6:	e00d      	b.n	8014cd4 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8014cb8:	7bfc      	ldrb	r4, [r7, #15]
 8014cba:	7bfb      	ldrb	r3, [r7, #15]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7ff ff59 	bl	8014b74 <gpioPinRead>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	4621      	mov	r1, r4
 8014cc8:	482a      	ldr	r0, [pc, #168]	; (8014d74 <cliGpio+0x148>)
 8014cca:	f7fe fccd 	bl	8013668 <cliPrintf>
      delay(100);
 8014cce:	2064      	movs	r0, #100	; 0x64
 8014cd0:	f7fd fe42 	bl	8012958 <delay>
    while(cliKeepLoop())
 8014cd4:	f7fe fdc2 	bl	801385c <cliKeepLoop>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1ec      	bne.n	8014cb8 <cliGpio+0x8c>
    }

    ret = true;
 8014cde:	2301      	movs	r3, #1
 8014ce0:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	881b      	ldrh	r3, [r3, #0]
 8014ce6:	2b03      	cmp	r3, #3
 8014ce8:	d126      	bne.n	8014d38 <cliGpio+0x10c>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	695b      	ldr	r3, [r3, #20]
 8014cee:	4922      	ldr	r1, [pc, #136]	; (8014d78 <cliGpio+0x14c>)
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	4798      	blx	r3
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d01e      	beq.n	8014d38 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	689b      	ldr	r3, [r3, #8]
 8014cfe:	2001      	movs	r0, #1
 8014d00:	4798      	blx	r3
 8014d02:	4603      	mov	r3, r0
 8014d04:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	689b      	ldr	r3, [r3, #8]
 8014d0a:	2002      	movs	r0, #2
 8014d0c:	4798      	blx	r3
 8014d0e:	4603      	mov	r3, r0
 8014d10:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8014d12:	7b7b      	ldrb	r3, [r7, #13]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	bf14      	ite	ne
 8014d18:	2301      	movne	r3, #1
 8014d1a:	2300      	moveq	r3, #0
 8014d1c:	b2da      	uxtb	r2, r3
 8014d1e:	7bbb      	ldrb	r3, [r7, #14]
 8014d20:	4611      	mov	r1, r2
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7ff fed4 	bl	8014ad0 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8014d28:	7bbb      	ldrb	r3, [r7, #14]
 8014d2a:	7b7a      	ldrb	r2, [r7, #13]
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	4813      	ldr	r0, [pc, #76]	; (8014d7c <cliGpio+0x150>)
 8014d30:	f7fe fc9a 	bl	8013668 <cliPrintf>
    ret = true;
 8014d34:	2301      	movs	r3, #1
 8014d36:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8014d38:	7dfb      	ldrb	r3, [r7, #23]
 8014d3a:	f083 0301 	eor.w	r3, r3, #1
 8014d3e:	b2db      	uxtb	r3, r3
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d00a      	beq.n	8014d5a <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8014d44:	480e      	ldr	r0, [pc, #56]	; (8014d80 <cliGpio+0x154>)
 8014d46:	f7fe fc8f 	bl	8013668 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8014d4a:	210c      	movs	r1, #12
 8014d4c:	480d      	ldr	r0, [pc, #52]	; (8014d84 <cliGpio+0x158>)
 8014d4e:	f7fe fc8b 	bl	8013668 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8014d52:	210c      	movs	r1, #12
 8014d54:	480c      	ldr	r0, [pc, #48]	; (8014d88 <cliGpio+0x15c>)
 8014d56:	f7fe fc87 	bl	8013668 <cliPrintf>
  }
}
 8014d5a:	bf00      	nop
 8014d5c:	371c      	adds	r7, #28
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd90      	pop	{r4, r7, pc}
 8014d62:	bf00      	nop
 8014d64:	08029a80 	.word	0x08029a80
 8014d68:	08029a88 	.word	0x08029a88
 8014d6c:	08029a8c 	.word	0x08029a8c
 8014d70:	08029a90 	.word	0x08029a90
 8014d74:	08029a98 	.word	0x08029a98
 8014d78:	08029aac 	.word	0x08029aac
 8014d7c:	08029ab4 	.word	0x08029ab4
 8014d80:	08029ac8 	.word	0x08029ac8
 8014d84:	08029ad4 	.word	0x08029ad4
 8014d88:	08029ae8 	.word	0x08029ae8

08014d8c <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8014d90:	f7fd fded 	bl	801296e <millis>
 8014d94:	4602      	mov	r2, r0
 8014d96:	4b0d      	ldr	r3, [pc, #52]	; (8014dcc <TransferDoneISR+0x40>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	4a0c      	ldr	r2, [pc, #48]	; (8014dd0 <TransferDoneISR+0x44>)
 8014d9e:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8014da0:	f7fd fde5 	bl	801296e <millis>
 8014da4:	4603      	mov	r3, r0
 8014da6:	4a09      	ldr	r2, [pc, #36]	; (8014dcc <TransferDoneISR+0x40>)
 8014da8:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 8014daa:	4b09      	ldr	r3, [pc, #36]	; (8014dd0 <TransferDoneISR+0x44>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d007      	beq.n	8014dc2 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8014db2:	4b07      	ldr	r3, [pc, #28]	; (8014dd0 <TransferDoneISR+0x44>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8014dbe:	4a05      	ldr	r2, [pc, #20]	; (8014dd4 <TransferDoneISR+0x48>)
 8014dc0:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8014dc2:	4b05      	ldr	r3, [pc, #20]	; (8014dd8 <TransferDoneISR+0x4c>)
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	701a      	strb	r2, [r3, #0]
}
 8014dc8:	bf00      	nop
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	20000a6c 	.word	0x20000a6c
 8014dd0:	20000a70 	.word	0x20000a70
 8014dd4:	20000a74 	.word	0x20000a74
 8014dd8:	20000a6a 	.word	0x20000a6a

08014ddc <lcdInit>:


bool lcdInit(void)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b084      	sub	sp, #16
 8014de0:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8014de2:	4b27      	ldr	r3, [pc, #156]	; (8014e80 <lcdInit+0xa4>)
 8014de4:	2264      	movs	r2, #100	; 0x64
 8014de6:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8014de8:	f004 f8de 	bl	8018fa8 <st7735Init>
 8014dec:	4603      	mov	r3, r0
 8014dee:	461a      	mov	r2, r3
 8014df0:	4b24      	ldr	r3, [pc, #144]	; (8014e84 <lcdInit+0xa8>)
 8014df2:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8014df4:	4824      	ldr	r0, [pc, #144]	; (8014e88 <lcdInit+0xac>)
 8014df6:	f004 f8e3 	bl	8018fc0 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8014dfa:	4b23      	ldr	r3, [pc, #140]	; (8014e88 <lcdInit+0xac>)
 8014dfc:	695b      	ldr	r3, [r3, #20]
 8014dfe:	4823      	ldr	r0, [pc, #140]	; (8014e8c <lcdInit+0xb0>)
 8014e00:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8014e02:	2300      	movs	r3, #0
 8014e04:	607b      	str	r3, [r7, #4]
 8014e06:	e007      	b.n	8014e18 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8014e08:	4a21      	ldr	r2, [pc, #132]	; (8014e90 <lcdInit+0xb4>)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3301      	adds	r3, #1
 8014e16:	607b      	str	r3, [r7, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8014e1e:	dbf3      	blt.n	8014e08 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8014e20:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8014e24:	2100      	movs	r1, #0
 8014e26:	481a      	ldr	r0, [pc, #104]	; (8014e90 <lcdInit+0xb4>)
 8014e28:	f010 f8a6 	bl	8024f78 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8014e2c:	4b19      	ldr	r3, [pc, #100]	; (8014e94 <lcdInit+0xb8>)
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	461a      	mov	r2, r3
 8014e32:	4613      	mov	r3, r2
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	4413      	add	r3, r2
 8014e38:	035b      	lsls	r3, r3, #13
 8014e3a:	4a15      	ldr	r2, [pc, #84]	; (8014e90 <lcdInit+0xb4>)
 8014e3c:	4413      	add	r3, r2
 8014e3e:	4a16      	ldr	r2, [pc, #88]	; (8014e98 <lcdInit+0xbc>)
 8014e40:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8014e42:	2300      	movs	r3, #0
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	2380      	movs	r3, #128	; 0x80
 8014e48:	22a0      	movs	r2, #160	; 0xa0
 8014e4a:	2100      	movs	r1, #0
 8014e4c:	2000      	movs	r0, #0
 8014e4e:	f000 fbdf 	bl	8015610 <lcdDrawFillRect>
  lcdUpdateDraw();
 8014e52:	f000 fa93 	bl	801537c <lcdUpdateDraw>

  lcdSetBackLight(100);
 8014e56:	2064      	movs	r0, #100	; 0x64
 8014e58:	f000 f824 	bl	8014ea4 <lcdSetBackLight>


  if (is_init != true)
 8014e5c:	4b09      	ldr	r3, [pc, #36]	; (8014e84 <lcdInit+0xa8>)
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	f083 0301 	eor.w	r3, r3, #1
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d001      	beq.n	8014e6e <lcdInit+0x92>
  {
    return false;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	e004      	b.n	8014e78 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8014e6e:	490b      	ldr	r1, [pc, #44]	; (8014e9c <lcdInit+0xc0>)
 8014e70:	480b      	ldr	r0, [pc, #44]	; (8014ea0 <lcdInit+0xc4>)
 8014e72:	f7fe fd09 	bl	8013888 <cliAdd>
#endif

  return true;
 8014e76:	2301      	movs	r3, #1
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	20000094 	.word	0x20000094
 8014e84:	20000a68 	.word	0x20000a68
 8014e88:	20000a4c 	.word	0x20000a4c
 8014e8c:	08014d8d 	.word	0x08014d8d
 8014e90:	20000a80 	.word	0x20000a80
 8014e94:	20000a69 	.word	0x20000a69
 8014e98:	20000a78 	.word	0x20000a78
 8014e9c:	08015add 	.word	0x08015add
 8014ea0:	08029ddc 	.word	0x08029ddc

08014ea4 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	4603      	mov	r3, r0
 8014eac:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8014eae:	79fb      	ldrb	r3, [r7, #7]
 8014eb0:	2b64      	cmp	r3, #100	; 0x64
 8014eb2:	bf28      	it	cs
 8014eb4:	2364      	movcs	r3, #100	; 0x64
 8014eb6:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8014eb8:	4b0c      	ldr	r3, [pc, #48]	; (8014eec <lcdSetBackLight+0x48>)
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	79fa      	ldrb	r2, [r7, #7]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d002      	beq.n	8014ec8 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8014ec2:	4a0a      	ldr	r2, [pc, #40]	; (8014eec <lcdSetBackLight+0x48>)
 8014ec4:	79fb      	ldrb	r3, [r7, #7]
 8014ec6:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8014ec8:	4b08      	ldr	r3, [pc, #32]	; (8014eec <lcdSetBackLight+0x48>)
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d004      	beq.n	8014eda <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8014ed0:	2101      	movs	r1, #1
 8014ed2:	2001      	movs	r0, #1
 8014ed4:	f7ff fdfc 	bl	8014ad0 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8014ed8:	e003      	b.n	8014ee2 <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8014eda:	2100      	movs	r1, #0
 8014edc:	2001      	movs	r0, #1
 8014ede:	f7ff fdf7 	bl	8014ad0 <gpioPinWrite>
}
 8014ee2:	bf00      	nop
 8014ee4:	3708      	adds	r7, #8
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	20000094 	.word	0x20000094

08014ef0 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8014ef0:	4b04      	ldr	r3, [pc, #16]	; (8014f04 <lcdDrawPixel+0x14>)
 8014ef2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8014efc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop
 8014f04:	20000a78 	.word	0x20000a78

08014f08 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8014f0c:	f000 fa62 	bl	80153d4 <lcdGetFrameBuffer>
 8014f10:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8014f14:	b2a2      	uxth	r2, r4
 8014f16:	1e83      	subs	r3, r0, #2
 8014f18:	31fe      	adds	r1, #254	; 0xfe
 8014f1a:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8014f1e:	428b      	cmp	r3, r1
 8014f20:	d1fb      	bne.n	8014f1a <lcdClearBuffer+0x12>
  }
}
 8014f22:	bd10      	pop	{r4, pc}

08014f24 <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8014f24:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8014f28:	4616      	mov	r6, r2
 8014f2a:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 8014f2c:	2e00      	cmp	r6, #0
{
 8014f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 8014f30:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 8014f34:	f340 808d 	ble.w	8015052 <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8014f38:	fa1f f981 	uxth.w	r9, r1
 8014f3c:	f003 0104 	and.w	r1, r3, #4
 8014f40:	9103      	str	r1, [sp, #12]
 8014f42:	f003 0102 	and.w	r1, r3, #2
 8014f46:	9101      	str	r1, [sp, #4]
 8014f48:	f003 0108 	and.w	r1, r3, #8
 8014f4c:	f003 0301 	and.w	r3, r3, #1
 8014f50:	f1c6 0401 	rsb	r4, r6, #1
 8014f54:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014f58:	fa1f f880 	uxth.w	r8, r0
 8014f5c:	9102      	str	r1, [sp, #8]
 8014f5e:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8014f60:	2500      	movs	r5, #0
 8014f62:	e00a      	b.n	8014f7a <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8014f64:	9b01      	ldr	r3, [sp, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d12c      	bne.n	8014fc4 <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8014f6a:	9b02      	ldr	r3, [sp, #8]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d141      	bne.n	8014ff4 <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8014f70:	9b04      	ldr	r3, [sp, #16]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d156      	bne.n	8015024 <lcdDrawCircleHelper+0x100>
  while (x < r)
 8014f76:	42ae      	cmp	r6, r5
 8014f78:	dd6b      	ble.n	8015052 <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 8014f7a:	2c00      	cmp	r4, #0
 8014f7c:	db03      	blt.n	8014f86 <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 8014f7e:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 8014f82:	3e01      	subs	r6, #1
      f     += ddF_y;
 8014f84:	445c      	add	r4, fp
    x++;
 8014f86:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8014f88:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 8014f8a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8014f8e:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d0e7      	beq.n	8014f64 <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 8014f94:	b2b3      	uxth	r3, r6
 8014f96:	fa1f fa85 	uxth.w	sl, r5
 8014f9a:	eb09 0103 	add.w	r1, r9, r3
 8014f9e:	eb08 000a 	add.w	r0, r8, sl
 8014fa2:	b289      	uxth	r1, r1
 8014fa4:	b280      	uxth	r0, r0
 8014fa6:	9305      	str	r3, [sp, #20]
 8014fa8:	f7ff ffa2 	bl	8014ef0 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8014fac:	9b05      	ldr	r3, [sp, #20]
 8014fae:	eb09 010a 	add.w	r1, r9, sl
 8014fb2:	eb08 0003 	add.w	r0, r8, r3
 8014fb6:	b289      	uxth	r1, r1
 8014fb8:	b280      	uxth	r0, r0
 8014fba:	f7ff ff99 	bl	8014ef0 <lcdDrawPixel>
    if (cornername & 0x2)
 8014fbe:	9b01      	ldr	r3, [sp, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d0d2      	beq.n	8014f6a <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 8014fc4:	b2b3      	uxth	r3, r6
 8014fc6:	fa1f fa85 	uxth.w	sl, r5
 8014fca:	eba9 0103 	sub.w	r1, r9, r3
 8014fce:	eb08 000a 	add.w	r0, r8, sl
 8014fd2:	b289      	uxth	r1, r1
 8014fd4:	b280      	uxth	r0, r0
 8014fd6:	9305      	str	r3, [sp, #20]
 8014fd8:	f7ff ff8a 	bl	8014ef0 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8014fdc:	9b05      	ldr	r3, [sp, #20]
 8014fde:	eba9 010a 	sub.w	r1, r9, sl
 8014fe2:	eb08 0003 	add.w	r0, r8, r3
 8014fe6:	b289      	uxth	r1, r1
 8014fe8:	b280      	uxth	r0, r0
 8014fea:	f7ff ff81 	bl	8014ef0 <lcdDrawPixel>
    if (cornername & 0x8)
 8014fee:	9b02      	ldr	r3, [sp, #8]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d0bd      	beq.n	8014f70 <lcdDrawCircleHelper+0x4c>
 8014ff4:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8014ff6:	fa1f fa86 	uxth.w	sl, r6
 8014ffa:	eb09 0103 	add.w	r1, r9, r3
 8014ffe:	eba8 000a 	sub.w	r0, r8, sl
 8015002:	b289      	uxth	r1, r1
 8015004:	b280      	uxth	r0, r0
 8015006:	9305      	str	r3, [sp, #20]
 8015008:	f7ff ff72 	bl	8014ef0 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 801500c:	9b05      	ldr	r3, [sp, #20]
 801500e:	eb0a 0109 	add.w	r1, sl, r9
 8015012:	eba8 0003 	sub.w	r0, r8, r3
 8015016:	b289      	uxth	r1, r1
 8015018:	b280      	uxth	r0, r0
 801501a:	f7ff ff69 	bl	8014ef0 <lcdDrawPixel>
    if (cornername & 0x1)
 801501e:	9b04      	ldr	r3, [sp, #16]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d0a8      	beq.n	8014f76 <lcdDrawCircleHelper+0x52>
 8015024:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8015026:	fa1f fa86 	uxth.w	sl, r6
 801502a:	eba9 0103 	sub.w	r1, r9, r3
 801502e:	eba8 000a 	sub.w	r0, r8, sl
 8015032:	b289      	uxth	r1, r1
 8015034:	b280      	uxth	r0, r0
 8015036:	9305      	str	r3, [sp, #20]
 8015038:	f7ff ff5a 	bl	8014ef0 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 801503c:	9b05      	ldr	r3, [sp, #20]
 801503e:	eba9 010a 	sub.w	r1, r9, sl
 8015042:	eba8 0003 	sub.w	r0, r8, r3
 8015046:	b289      	uxth	r1, r1
 8015048:	b280      	uxth	r0, r0
 801504a:	f7ff ff51 	bl	8014ef0 <lcdDrawPixel>
  while (x < r)
 801504e:	42ae      	cmp	r6, r5
 8015050:	dc93      	bgt.n	8014f7a <lcdDrawCircleHelper+0x56>
    }
  }
}
 8015052:	b006      	add	sp, #24
 8015054:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08015058 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8015058:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 801505c:	b08a      	sub	sp, #40	; 0x28
 801505e:	4694      	mov	ip, r2
 8015060:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8015062:	f8cd c00c 	str.w	ip, [sp, #12]
 8015066:	fa1f f886 	uxth.w	r8, r6
 801506a:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 801506e:	460c      	mov	r4, r1
 8015070:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8015072:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8015076:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801507a:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 801507c:	b280      	uxth	r0, r0
 801507e:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8015082:	9005      	str	r0, [sp, #20]
 8015084:	1a52      	subs	r2, r2, r1
 8015086:	4440      	add	r0, r8
{
 8015088:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 801508a:	b200      	sxth	r0, r0
 801508c:	fa1f f38a 	uxth.w	r3, sl
 8015090:	b212      	sxth	r2, r2
 8015092:	b221      	sxth	r1, r4
 8015094:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015098:	9004      	str	r0, [sp, #16]
 801509a:	f000 fa93 	bl	80155c4 <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 801509e:	9804      	ldr	r0, [sp, #16]
 80150a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80150a4:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 80150a8:	9a08      	ldr	r2, [sp, #32]
 80150aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ac:	9308      	str	r3, [sp, #32]
 80150ae:	fa1f fb84 	uxth.w	fp, r4
 80150b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80150b6:	4459      	add	r1, fp
 80150b8:	b209      	sxth	r1, r1
 80150ba:	f000 fa83 	bl	80155c4 <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 80150be:	9b07      	ldr	r3, [sp, #28]
 80150c0:	eb08 010b 	add.w	r1, r8, fp
 80150c4:	eba9 0203 	sub.w	r2, r9, r3
 80150c8:	9b08      	ldr	r3, [sp, #32]
 80150ca:	b209      	sxth	r1, r1
 80150cc:	b212      	sxth	r2, r2
 80150ce:	b228      	sxth	r0, r5
 80150d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80150d4:	9107      	str	r1, [sp, #28]
 80150d6:	f000 fa4f 	bl	8015578 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80150da:	9a06      	ldr	r2, [sp, #24]
 80150dc:	9b05      	ldr	r3, [sp, #20]
 80150de:	9907      	ldr	r1, [sp, #28]
 80150e0:	1e50      	subs	r0, r2, #1
 80150e2:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 80150e4:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 80150e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80150ec:	b200      	sxth	r0, r0
 80150ee:	f000 fa43 	bl	8015578 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 80150f2:	1931      	adds	r1, r6, r4
 80150f4:	4632      	mov	r2, r6
 80150f6:	4640      	mov	r0, r8
 80150f8:	f8cd a000 	str.w	sl, [sp]
 80150fc:	2301      	movs	r3, #1
 80150fe:	9105      	str	r1, [sp, #20]
 8015100:	f7ff ff10 	bl	8014f24 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8015104:	9803      	ldr	r0, [sp, #12]
 8015106:	9905      	ldr	r1, [sp, #20]
 8015108:	f8cd a000 	str.w	sl, [sp]
 801510c:	4428      	add	r0, r5
 801510e:	1b80      	subs	r0, r0, r6
 8015110:	3801      	subs	r0, #1
 8015112:	4632      	mov	r2, r6
 8015114:	2302      	movs	r3, #2
 8015116:	9003      	str	r0, [sp, #12]
 8015118:	f7ff ff04 	bl	8014f24 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 801511c:	9904      	ldr	r1, [sp, #16]
 801511e:	9803      	ldr	r0, [sp, #12]
 8015120:	f8cd a000 	str.w	sl, [sp]
 8015124:	4421      	add	r1, r4
 8015126:	1b89      	subs	r1, r1, r6
 8015128:	3901      	subs	r1, #1
 801512a:	4632      	mov	r2, r6
 801512c:	2304      	movs	r3, #4
 801512e:	9103      	str	r1, [sp, #12]
 8015130:	f7ff fef8 	bl	8014f24 <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8015134:	9903      	ldr	r1, [sp, #12]
 8015136:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 801513a:	2308      	movs	r3, #8
 801513c:	4632      	mov	r2, r6
 801513e:	4640      	mov	r0, r8
}
 8015140:	b00a      	add	sp, #40	; 0x28
 8015142:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8015146:	f7ff beed 	b.w	8014f24 <lcdDrawCircleHelper>
 801514a:	bf00      	nop

0801514c <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 801514c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8015150:	4690      	mov	r8, r2
 8015152:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8015154:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8015158:	f1b8 0f00 	cmp.w	r8, #0
{
 801515c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 801515e:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8015162:	dd6f      	ble.n	8015244 <lcdDrawFillCircleHelper+0xf8>
 8015164:	3201      	adds	r2, #1
 8015166:	b292      	uxth	r2, r2
 8015168:	1c95      	adds	r5, r2, #2
 801516a:	9204      	str	r2, [sp, #16]
 801516c:	f003 0201 	and.w	r2, r3, #1
 8015170:	f003 0302 	and.w	r3, r3, #2
 8015174:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8015176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015178:	9203      	str	r2, [sp, #12]
 801517a:	b280      	uxth	r0, r0
 801517c:	b289      	uxth	r1, r1
 801517e:	f1c8 0401 	rsb	r4, r8, #1
 8015182:	9000      	str	r0, [sp, #0]
 8015184:	9101      	str	r1, [sp, #4]
 8015186:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 8015188:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 801518a:	b29b      	uxth	r3, r3
 801518c:	e006      	b.n	801519c <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 801518e:	9a02      	ldr	r2, [sp, #8]
 8015190:	2a00      	cmp	r2, #0
 8015192:	d133      	bne.n	80151fc <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 8015194:	3502      	adds	r5, #2
 8015196:	45b0      	cmp	r8, r6
 8015198:	b2ad      	uxth	r5, r5
 801519a:	dd53      	ble.n	8015244 <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 801519c:	2c00      	cmp	r4, #0
    y++;
 801519e:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 80151a2:	db04      	blt.n	80151ae <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 80151a4:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 80151a8:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 80151ac:	4454      	add	r4, sl
    if (cornername & 0x1)
 80151ae:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 80151b0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80151b4:	3401      	adds	r4, #1
    if (cornername & 0x1)
 80151b6:	2a00      	cmp	r2, #0
 80151b8:	d0e9      	beq.n	801518e <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 80151ba:	9a04      	ldr	r2, [sp, #16]
 80151bc:	9901      	ldr	r1, [sp, #4]
 80151be:	9800      	ldr	r0, [sp, #0]
 80151c0:	9305      	str	r3, [sp, #20]
 80151c2:	fa1f f988 	uxth.w	r9, r8
 80151c6:	fa1f fb86 	uxth.w	fp, r6
 80151ca:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 80151ce:	4459      	add	r1, fp
 80151d0:	eba0 0009 	sub.w	r0, r0, r9
 80151d4:	b212      	sxth	r2, r2
 80151d6:	b209      	sxth	r1, r1
 80151d8:	b200      	sxth	r0, r0
 80151da:	f000 f9f3 	bl	80155c4 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 80151de:	9901      	ldr	r1, [sp, #4]
 80151e0:	9800      	ldr	r0, [sp, #0]
 80151e2:	9b05      	ldr	r3, [sp, #20]
 80151e4:	4449      	add	r1, r9
 80151e6:	eba0 000b 	sub.w	r0, r0, fp
 80151ea:	b22a      	sxth	r2, r5
 80151ec:	b209      	sxth	r1, r1
 80151ee:	b200      	sxth	r0, r0
 80151f0:	f000 f9e8 	bl	80155c4 <lcdDrawHLine>
    if (cornername & 0x2)
 80151f4:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 80151f6:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 80151f8:	2a00      	cmp	r2, #0
 80151fa:	d0cb      	beq.n	8015194 <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 80151fc:	9a04      	ldr	r2, [sp, #16]
 80151fe:	9901      	ldr	r1, [sp, #4]
 8015200:	9800      	ldr	r0, [sp, #0]
 8015202:	9305      	str	r3, [sp, #20]
 8015204:	fa1f f988 	uxth.w	r9, r8
 8015208:	fa1f fb86 	uxth.w	fp, r6
 801520c:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8015210:	eba1 010b 	sub.w	r1, r1, fp
 8015214:	eba0 0009 	sub.w	r0, r0, r9
 8015218:	b212      	sxth	r2, r2
 801521a:	b209      	sxth	r1, r1
 801521c:	b200      	sxth	r0, r0
 801521e:	f000 f9d1 	bl	80155c4 <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8015222:	9901      	ldr	r1, [sp, #4]
 8015224:	9800      	ldr	r0, [sp, #0]
 8015226:	9b05      	ldr	r3, [sp, #20]
 8015228:	eba1 0109 	sub.w	r1, r1, r9
 801522c:	eba0 000b 	sub.w	r0, r0, fp
 8015230:	b22a      	sxth	r2, r5
 8015232:	b209      	sxth	r1, r1
 8015234:	b200      	sxth	r0, r0
 8015236:	f000 f9c5 	bl	80155c4 <lcdDrawHLine>
  while (y < r)
 801523a:	3502      	adds	r5, #2
 801523c:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 801523e:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8015240:	b2ad      	uxth	r5, r5
 8015242:	dcab      	bgt.n	801519c <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8015244:	b006      	add	sp, #24
 8015246:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 801524a:	bf00      	nop

0801524c <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 801524c:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8015250:	b085      	sub	sp, #20
 8015252:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8015256:	4688      	mov	r8, r1
 8015258:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 801525a:	b2b1      	uxth	r1, r6
 801525c:	fa1f f289 	uxth.w	r2, r9
{
 8015260:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8015262:	9200      	str	r2, [sp, #0]
 8015264:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8015268:	b222      	sxth	r2, r4
 801526a:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 801526c:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8015270:	4445      	add	r5, r8
{
 8015272:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8015274:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8015276:	b21b      	sxth	r3, r3
 8015278:	b209      	sxth	r1, r1
 801527a:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 801527c:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 801527e:	f000 f9c7 	bl	8015610 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8015282:	eb0a 0006 	add.w	r0, sl, r6
 8015286:	1e69      	subs	r1, r5, #1
 8015288:	4632      	mov	r2, r6
 801528a:	e9cd 4900 	strd	r4, r9, [sp]
 801528e:	2301      	movs	r3, #1
 8015290:	9003      	str	r0, [sp, #12]
 8015292:	f7ff ff5b 	bl	801514c <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8015296:	9803      	ldr	r0, [sp, #12]
 8015298:	2302      	movs	r3, #2
 801529a:	4632      	mov	r2, r6
 801529c:	eb08 0106 	add.w	r1, r8, r6
 80152a0:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 80152a4:	b005      	add	sp, #20
 80152a6:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 80152aa:	f7ff bf4f 	b.w	801514c <lcdDrawFillCircleHelper>
 80152ae:	bf00      	nop

080152b0 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 80152b0:	b480      	push	{r7}
 80152b2:	af00      	add	r7, sp, #0
  return fps_count;
 80152b4:	4b03      	ldr	r3, [pc, #12]	; (80152c4 <lcdGetFps+0x14>)
 80152b6:	681b      	ldr	r3, [r3, #0]
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	46bd      	mov	sp, r7
 80152bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c0:	4770      	bx	lr
 80152c2:	bf00      	nop
 80152c4:	20000a74 	.word	0x20000a74

080152c8 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 80152c8:	b480      	push	{r7}
 80152ca:	af00      	add	r7, sp, #0
  return fps_time;
 80152cc:	4b03      	ldr	r3, [pc, #12]	; (80152dc <lcdGetFpsTime+0x14>)
 80152ce:	681b      	ldr	r3, [r3, #0]
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	46bd      	mov	sp, r7
 80152d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	20000a70 	.word	0x20000a70

080152e0 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 80152e0:	b480      	push	{r7}
 80152e2:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 80152e4:	4b08      	ldr	r3, [pc, #32]	; (8015308 <lcdDrawAvailable+0x28>)
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	bf14      	ite	ne
 80152ec:	2301      	movne	r3, #1
 80152ee:	2300      	moveq	r3, #0
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	f083 0301 	eor.w	r3, r3, #1
 80152f6:	b2db      	uxtb	r3, r3
 80152f8:	f003 0301 	and.w	r3, r3, #1
 80152fc:	b2db      	uxtb	r3, r3
}
 80152fe:	4618      	mov	r0, r3
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr
 8015308:	20000a6a 	.word	0x20000a6a

0801530c <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 801530c:	b598      	push	{r3, r4, r7, lr}
 801530e:	af00      	add	r7, sp, #0
  if (is_init != true)
 8015310:	4b15      	ldr	r3, [pc, #84]	; (8015368 <lcdRequestDraw+0x5c>)
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	f083 0301 	eor.w	r3, r3, #1
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	d001      	beq.n	8015322 <lcdRequestDraw+0x16>
  {
    return false;
 801531e:	2300      	movs	r3, #0
 8015320:	e020      	b.n	8015364 <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 8015322:	4b12      	ldr	r3, [pc, #72]	; (801536c <lcdRequestDraw+0x60>)
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d001      	beq.n	801532e <lcdRequestDraw+0x22>
  {
    return false;
 801532a:	2300      	movs	r3, #0
 801532c:	e01a      	b.n	8015364 <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 801532e:	4b10      	ldr	r3, [pc, #64]	; (8015370 <lcdRequestDraw+0x64>)
 8015330:	689c      	ldr	r4, [r3, #8]
 8015332:	237f      	movs	r3, #127	; 0x7f
 8015334:	229f      	movs	r2, #159	; 0x9f
 8015336:	2100      	movs	r1, #0
 8015338:	2000      	movs	r0, #0
 801533a:	47a0      	blx	r4

  lcd_request_draw = true;
 801533c:	4b0b      	ldr	r3, [pc, #44]	; (801536c <lcdRequestDraw+0x60>)
 801533e:	2201      	movs	r2, #1
 8015340:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8015342:	4b0b      	ldr	r3, [pc, #44]	; (8015370 <lcdRequestDraw+0x64>)
 8015344:	699c      	ldr	r4, [r3, #24]
 8015346:	4b0b      	ldr	r3, [pc, #44]	; (8015374 <lcdRequestDraw+0x68>)
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	461a      	mov	r2, r3
 801534c:	4613      	mov	r3, r2
 801534e:	009b      	lsls	r3, r3, #2
 8015350:	4413      	add	r3, r2
 8015352:	035b      	lsls	r3, r3, #13
 8015354:	4a08      	ldr	r2, [pc, #32]	; (8015378 <lcdRequestDraw+0x6c>)
 8015356:	4413      	add	r3, r2
 8015358:	2200      	movs	r2, #0
 801535a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 801535e:	4618      	mov	r0, r3
 8015360:	47a0      	blx	r4

  return true;
 8015362:	2301      	movs	r3, #1
}
 8015364:	4618      	mov	r0, r3
 8015366:	bd98      	pop	{r3, r4, r7, pc}
 8015368:	20000a68 	.word	0x20000a68
 801536c:	20000a6a 	.word	0x20000a6a
 8015370:	20000a4c 	.word	0x20000a4c
 8015374:	20000a69 	.word	0x20000a69
 8015378:	20000a80 	.word	0x20000a80

0801537c <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8015382:	4b13      	ldr	r3, [pc, #76]	; (80153d0 <lcdUpdateDraw+0x54>)
 8015384:	781b      	ldrb	r3, [r3, #0]
 8015386:	f083 0301 	eor.w	r3, r3, #1
 801538a:	b2db      	uxtb	r3, r3
 801538c:	2b00      	cmp	r3, #0
 801538e:	d118      	bne.n	80153c2 <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8015390:	f7ff ffbc 	bl	801530c <lcdRequestDraw>

  pre_time = millis();
 8015394:	f7fd faeb 	bl	801296e <millis>
 8015398:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 801539a:	e009      	b.n	80153b0 <lcdUpdateDraw+0x34>
  {
    delay(1);
 801539c:	2001      	movs	r0, #1
 801539e:	f7fd fadb 	bl	8012958 <delay>
    if (millis()-pre_time >= 100)
 80153a2:	f7fd fae4 	bl	801296e <millis>
 80153a6:	4602      	mov	r2, r0
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	1ad3      	subs	r3, r2, r3
 80153ac:	2b63      	cmp	r3, #99	; 0x63
 80153ae:	d80a      	bhi.n	80153c6 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 80153b0:	f7ff ff96 	bl	80152e0 <lcdDrawAvailable>
 80153b4:	4603      	mov	r3, r0
 80153b6:	f083 0301 	eor.w	r3, r3, #1
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1ed      	bne.n	801539c <lcdUpdateDraw+0x20>
 80153c0:	e002      	b.n	80153c8 <lcdUpdateDraw+0x4c>
    return;
 80153c2:	bf00      	nop
 80153c4:	e000      	b.n	80153c8 <lcdUpdateDraw+0x4c>
    {
      break;
 80153c6:	bf00      	nop
    }
  }
}
 80153c8:	3708      	adds	r7, #8
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	20000a68 	.word	0x20000a68

080153d4 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 80153d4:	b480      	push	{r7}
 80153d6:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 80153d8:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <lcdGetFrameBuffer+0x14>)
 80153da:	681b      	ldr	r3, [r3, #0]
}
 80153dc:	4618      	mov	r0, r3
 80153de:	46bd      	mov	sp, r7
 80153e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	20000a78 	.word	0x20000a78

080153ec <lcdGetWidth>:
{
  lcdSetBackLight(lcdGetBackLight());
}

int32_t lcdGetWidth(void)
{
 80153ec:	b480      	push	{r7}
 80153ee:	af00      	add	r7, sp, #0
  return LCD_WIDTH;
 80153f0:	23a0      	movs	r3, #160	; 0xa0
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr

080153fc <lcdGetHeight>:

int32_t lcdGetHeight(void)
{
 80153fc:	b480      	push	{r7}
 80153fe:	af00      	add	r7, sp, #0
  return LCD_HEIGHT;
 8015400:	2380      	movs	r3, #128	; 0x80
}
 8015402:	4618      	mov	r0, r3
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <lcdDrawLine>:


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 801540c:	b590      	push	{r4, r7, lr}
 801540e:	b089      	sub	sp, #36	; 0x24
 8015410:	af00      	add	r7, sp, #0
 8015412:	4604      	mov	r4, r0
 8015414:	4608      	mov	r0, r1
 8015416:	4611      	mov	r1, r2
 8015418:	461a      	mov	r2, r3
 801541a:	4623      	mov	r3, r4
 801541c:	80fb      	strh	r3, [r7, #6]
 801541e:	4603      	mov	r3, r0
 8015420:	80bb      	strh	r3, [r7, #4]
 8015422:	460b      	mov	r3, r1
 8015424:	807b      	strh	r3, [r7, #2]
 8015426:	4613      	mov	r3, r2
 8015428:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 801542a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801542e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015432:	1ad3      	subs	r3, r2, r3
 8015434:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8015438:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801543c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8015440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015444:	1acb      	subs	r3, r1, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	bfb8      	it	lt
 801544a:	425b      	neglt	r3, r3
 801544c:	429a      	cmp	r2, r3
 801544e:	bfcc      	ite	gt
 8015450:	2301      	movgt	r3, #1
 8015452:	2300      	movle	r3, #0
 8015454:	b2db      	uxtb	r3, r3
 8015456:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8015458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801545c:	2b00      	cmp	r3, #0
 801545e:	da01      	bge.n	8015464 <lcdDrawLine+0x58>
 8015460:	2300      	movs	r3, #0
 8015462:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8015464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	da01      	bge.n	8015470 <lcdDrawLine+0x64>
 801546c:	2300      	movs	r3, #0
 801546e:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8015470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015474:	2b00      	cmp	r3, #0
 8015476:	da01      	bge.n	801547c <lcdDrawLine+0x70>
 8015478:	2300      	movs	r3, #0
 801547a:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 801547c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015480:	2b00      	cmp	r3, #0
 8015482:	da01      	bge.n	8015488 <lcdDrawLine+0x7c>
 8015484:	2300      	movs	r3, #0
 8015486:	803b      	strh	r3, [r7, #0]


  if (steep)
 8015488:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d00b      	beq.n	80154a8 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8015490:	88fb      	ldrh	r3, [r7, #6]
 8015492:	833b      	strh	r3, [r7, #24]
 8015494:	88bb      	ldrh	r3, [r7, #4]
 8015496:	80fb      	strh	r3, [r7, #6]
 8015498:	8b3b      	ldrh	r3, [r7, #24]
 801549a:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 801549c:	887b      	ldrh	r3, [r7, #2]
 801549e:	82fb      	strh	r3, [r7, #22]
 80154a0:	883b      	ldrh	r3, [r7, #0]
 80154a2:	807b      	strh	r3, [r7, #2]
 80154a4:	8afb      	ldrh	r3, [r7, #22]
 80154a6:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 80154a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80154ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154b0:	429a      	cmp	r2, r3
 80154b2:	dd0b      	ble.n	80154cc <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 80154b4:	88fb      	ldrh	r3, [r7, #6]
 80154b6:	82bb      	strh	r3, [r7, #20]
 80154b8:	887b      	ldrh	r3, [r7, #2]
 80154ba:	80fb      	strh	r3, [r7, #6]
 80154bc:	8abb      	ldrh	r3, [r7, #20]
 80154be:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 80154c0:	88bb      	ldrh	r3, [r7, #4]
 80154c2:	827b      	strh	r3, [r7, #18]
 80154c4:	883b      	ldrh	r3, [r7, #0]
 80154c6:	80bb      	strh	r3, [r7, #4]
 80154c8:	8a7b      	ldrh	r3, [r7, #18]
 80154ca:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80154cc:	887a      	ldrh	r2, [r7, #2]
 80154ce:	88fb      	ldrh	r3, [r7, #6]
 80154d0:	1ad3      	subs	r3, r2, r3
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 80154d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80154da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	bfb8      	it	lt
 80154e4:	425b      	neglt	r3, r3
 80154e6:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80154e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80154ec:	0fda      	lsrs	r2, r3, #31
 80154ee:	4413      	add	r3, r2
 80154f0:	105b      	asrs	r3, r3, #1
 80154f2:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 80154f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80154f8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80154fc:	429a      	cmp	r2, r3
 80154fe:	da02      	bge.n	8015506 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8015500:	2301      	movs	r3, #1
 8015502:	83bb      	strh	r3, [r7, #28]
 8015504:	e02d      	b.n	8015562 <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8015506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801550a:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 801550c:	e029      	b.n	8015562 <lcdDrawLine+0x156>
  {
    if (steep)
 801550e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d006      	beq.n	8015524 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8015516:	88bb      	ldrh	r3, [r7, #4]
 8015518:	88f9      	ldrh	r1, [r7, #6]
 801551a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801551c:	4618      	mov	r0, r3
 801551e:	f7ff fce7 	bl	8014ef0 <lcdDrawPixel>
 8015522:	e005      	b.n	8015530 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8015524:	88fb      	ldrh	r3, [r7, #6]
 8015526:	88b9      	ldrh	r1, [r7, #4]
 8015528:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 801552a:	4618      	mov	r0, r3
 801552c:	f7ff fce0 	bl	8014ef0 <lcdDrawPixel>
    }
    err -= dy;
 8015530:	8bfa      	ldrh	r2, [r7, #30]
 8015532:	89fb      	ldrh	r3, [r7, #14]
 8015534:	1ad3      	subs	r3, r2, r3
 8015536:	b29b      	uxth	r3, r3
 8015538:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 801553a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801553e:	2b00      	cmp	r3, #0
 8015540:	da09      	bge.n	8015556 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8015542:	88ba      	ldrh	r2, [r7, #4]
 8015544:	8bbb      	ldrh	r3, [r7, #28]
 8015546:	4413      	add	r3, r2
 8015548:	b29b      	uxth	r3, r3
 801554a:	80bb      	strh	r3, [r7, #4]
      err += dx;
 801554c:	8bfa      	ldrh	r2, [r7, #30]
 801554e:	8a3b      	ldrh	r3, [r7, #16]
 8015550:	4413      	add	r3, r2
 8015552:	b29b      	uxth	r3, r3
 8015554:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8015556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801555a:	b29b      	uxth	r3, r3
 801555c:	3301      	adds	r3, #1
 801555e:	b29b      	uxth	r3, r3
 8015560:	80fb      	strh	r3, [r7, #6]
 8015562:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015566:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801556a:	429a      	cmp	r2, r3
 801556c:	ddcf      	ble.n	801550e <lcdDrawLine+0x102>
    }
  }
}
 801556e:	bf00      	nop
 8015570:	bf00      	nop
 8015572:	3724      	adds	r7, #36	; 0x24
 8015574:	46bd      	mov	sp, r7
 8015576:	bd90      	pop	{r4, r7, pc}

08015578 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8015578:	b590      	push	{r4, r7, lr}
 801557a:	b085      	sub	sp, #20
 801557c:	af02      	add	r7, sp, #8
 801557e:	4604      	mov	r4, r0
 8015580:	4608      	mov	r0, r1
 8015582:	4611      	mov	r1, r2
 8015584:	461a      	mov	r2, r3
 8015586:	4623      	mov	r3, r4
 8015588:	80fb      	strh	r3, [r7, #6]
 801558a:	4603      	mov	r3, r0
 801558c:	80bb      	strh	r3, [r7, #4]
 801558e:	460b      	mov	r3, r1
 8015590:	807b      	strh	r3, [r7, #2]
 8015592:	4613      	mov	r3, r2
 8015594:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8015596:	88ba      	ldrh	r2, [r7, #4]
 8015598:	887b      	ldrh	r3, [r7, #2]
 801559a:	4413      	add	r3, r2
 801559c:	b29b      	uxth	r3, r3
 801559e:	3b01      	subs	r3, #1
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	b21c      	sxth	r4, r3
 80155a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80155a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80155ac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80155b0:	883b      	ldrh	r3, [r7, #0]
 80155b2:	9300      	str	r3, [sp, #0]
 80155b4:	4623      	mov	r3, r4
 80155b6:	f7ff ff29 	bl	801540c <lcdDrawLine>
}
 80155ba:	bf00      	nop
 80155bc:	370c      	adds	r7, #12
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd90      	pop	{r4, r7, pc}
 80155c2:	bf00      	nop

080155c4 <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80155c4:	b590      	push	{r4, r7, lr}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af02      	add	r7, sp, #8
 80155ca:	4604      	mov	r4, r0
 80155cc:	4608      	mov	r0, r1
 80155ce:	4611      	mov	r1, r2
 80155d0:	461a      	mov	r2, r3
 80155d2:	4623      	mov	r3, r4
 80155d4:	80fb      	strh	r3, [r7, #6]
 80155d6:	4603      	mov	r3, r0
 80155d8:	80bb      	strh	r3, [r7, #4]
 80155da:	460b      	mov	r3, r1
 80155dc:	807b      	strh	r3, [r7, #2]
 80155de:	4613      	mov	r3, r2
 80155e0:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 80155e2:	88fa      	ldrh	r2, [r7, #6]
 80155e4:	887b      	ldrh	r3, [r7, #2]
 80155e6:	4413      	add	r3, r2
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	3b01      	subs	r3, #1
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	b21a      	sxth	r2, r3
 80155f0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80155f4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80155f8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80155fc:	883b      	ldrh	r3, [r7, #0]
 80155fe:	9300      	str	r3, [sp, #0]
 8015600:	4623      	mov	r3, r4
 8015602:	f7ff ff03 	bl	801540c <lcdDrawLine>
}
 8015606:	bf00      	nop
 8015608:	370c      	adds	r7, #12
 801560a:	46bd      	mov	sp, r7
 801560c:	bd90      	pop	{r4, r7, pc}
 801560e:	bf00      	nop

08015610 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8015610:	b590      	push	{r4, r7, lr}
 8015612:	b085      	sub	sp, #20
 8015614:	af00      	add	r7, sp, #0
 8015616:	4604      	mov	r4, r0
 8015618:	4608      	mov	r0, r1
 801561a:	4611      	mov	r1, r2
 801561c:	461a      	mov	r2, r3
 801561e:	4623      	mov	r3, r4
 8015620:	80fb      	strh	r3, [r7, #6]
 8015622:	4603      	mov	r3, r0
 8015624:	80bb      	strh	r3, [r7, #4]
 8015626:	460b      	mov	r3, r1
 8015628:	807b      	strh	r3, [r7, #2]
 801562a:	4613      	mov	r3, r2
 801562c:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 801562e:	88fb      	ldrh	r3, [r7, #6]
 8015630:	81fb      	strh	r3, [r7, #14]
 8015632:	e00e      	b.n	8015652 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8015634:	8c3b      	ldrh	r3, [r7, #32]
 8015636:	f9b7 2000 	ldrsh.w	r2, [r7]
 801563a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801563e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8015642:	f7ff ff99 	bl	8015578 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8015646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801564a:	b29b      	uxth	r3, r3
 801564c:	3301      	adds	r3, #1
 801564e:	b29b      	uxth	r3, r3
 8015650:	81fb      	strh	r3, [r7, #14]
 8015652:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015656:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801565a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801565e:	440b      	add	r3, r1
 8015660:	429a      	cmp	r2, r3
 8015662:	dbe7      	blt.n	8015634 <lcdDrawFillRect+0x24>
  }
}
 8015664:	bf00      	nop
 8015666:	bf00      	nop
 8015668:	3714      	adds	r7, #20
 801566a:	46bd      	mov	sp, r7
 801566c:	bd90      	pop	{r4, r7, pc}
 801566e:	bf00      	nop

08015670 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8015670:	b590      	push	{r4, r7, lr}
 8015672:	b085      	sub	sp, #20
 8015674:	af00      	add	r7, sp, #0
 8015676:	4604      	mov	r4, r0
 8015678:	4608      	mov	r0, r1
 801567a:	4611      	mov	r1, r2
 801567c:	461a      	mov	r2, r3
 801567e:	4623      	mov	r3, r4
 8015680:	80fb      	strh	r3, [r7, #6]
 8015682:	4603      	mov	r3, r0
 8015684:	80bb      	strh	r3, [r7, #4]
 8015686:	460b      	mov	r3, r1
 8015688:	807b      	strh	r3, [r7, #2]
 801568a:	4613      	mov	r3, r2
 801568c:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 801568e:	88fb      	ldrh	r3, [r7, #6]
 8015690:	2b9f      	cmp	r3, #159	; 0x9f
 8015692:	d83b      	bhi.n	801570c <lcdDrawBufferImage+0x9c>
 8015694:	88bb      	ldrh	r3, [r7, #4]
 8015696:	2b7f      	cmp	r3, #127	; 0x7f
 8015698:	d838      	bhi.n	801570c <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 801569a:	88fa      	ldrh	r2, [r7, #6]
 801569c:	887b      	ldrh	r3, [r7, #2]
 801569e:	4413      	add	r3, r2
 80156a0:	2ba0      	cmp	r3, #160	; 0xa0
 80156a2:	dc35      	bgt.n	8015710 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80156a4:	88ba      	ldrh	r2, [r7, #4]
 80156a6:	883b      	ldrh	r3, [r7, #0]
 80156a8:	4413      	add	r3, r2
 80156aa:	2b80      	cmp	r3, #128	; 0x80
 80156ac:	dc32      	bgt.n	8015714 <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 80156ae:	2300      	movs	r3, #0
 80156b0:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 80156b2:	88bb      	ldrh	r3, [r7, #4]
 80156b4:	81bb      	strh	r3, [r7, #12]
 80156b6:	e021      	b.n	80156fc <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 80156b8:	88fb      	ldrh	r3, [r7, #6]
 80156ba:	817b      	strh	r3, [r7, #10]
 80156bc:	e011      	b.n	80156e2 <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 80156be:	8978      	ldrh	r0, [r7, #10]
 80156c0:	89b9      	ldrh	r1, [r7, #12]
 80156c2:	89fb      	ldrh	r3, [r7, #14]
 80156c4:	1c5a      	adds	r2, r3, #1
 80156c6:	81fa      	strh	r2, [r7, #14]
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	6a3a      	ldr	r2, [r7, #32]
 80156cc:	4413      	add	r3, r2
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	461a      	mov	r2, r3
 80156d2:	f7ff fc0d 	bl	8014ef0 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 80156d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80156da:	b29b      	uxth	r3, r3
 80156dc:	3301      	adds	r3, #1
 80156de:	b29b      	uxth	r3, r3
 80156e0:	817b      	strh	r3, [r7, #10]
 80156e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80156e6:	88f9      	ldrh	r1, [r7, #6]
 80156e8:	887b      	ldrh	r3, [r7, #2]
 80156ea:	440b      	add	r3, r1
 80156ec:	429a      	cmp	r2, r3
 80156ee:	dbe6      	blt.n	80156be <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 80156f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	3301      	adds	r3, #1
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	81bb      	strh	r3, [r7, #12]
 80156fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8015700:	88b9      	ldrh	r1, [r7, #4]
 8015702:	883b      	ldrh	r3, [r7, #0]
 8015704:	440b      	add	r3, r1
 8015706:	429a      	cmp	r2, r3
 8015708:	dbd6      	blt.n	80156b8 <lcdDrawBufferImage+0x48>
 801570a:	e004      	b.n	8015716 <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 801570c:	bf00      	nop
 801570e:	e002      	b.n	8015716 <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 8015710:	bf00      	nop
 8015712:	e000      	b.n	8015716 <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 8015714:	bf00      	nop
		}
    }
}
 8015716:	3714      	adds	r7, #20
 8015718:	46bd      	mov	sp, r7
 801571a:	bd90      	pop	{r4, r7, pc}

0801571c <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 801571c:	b408      	push	{r3}
 801571e:	b590      	push	{r4, r7, lr}
 8015720:	b0d8      	sub	sp, #352	; 0x160
 8015722:	af02      	add	r7, sp, #8
 8015724:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015728:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801572c:	6018      	str	r0, [r3, #0]
 801572e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015732:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8015736:	6019      	str	r1, [r3, #0]
 8015738:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801573c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8015740:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8015742:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8015746:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 801574a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801574e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8015758:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 801575c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015760:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8015764:	21ff      	movs	r1, #255	; 0xff
 8015766:	f011 f899 	bl	802689c <vsniprintf>
 801576a:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 801576e:	4b80      	ldr	r3, [pc, #512]	; (8015970 <lcdPrintf+0x254>)
 8015770:	781b      	ldrb	r3, [r3, #0]
 8015772:	461a      	mov	r2, r3
 8015774:	4b7f      	ldr	r3, [pc, #508]	; (8015974 <lcdPrintf+0x258>)
 8015776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801577a:	685b      	ldr	r3, [r3, #4]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d072      	beq.n	8015866 <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8015780:	2300      	movs	r3, #0
 8015782:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8015786:	e067      	b.n	8015858 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8015788:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801578c:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8015790:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015794:	4413      	add	r3, r2
 8015796:	781a      	ldrb	r2, [r3, #0]
 8015798:	4b75      	ldr	r3, [pc, #468]	; (8015970 <lcdPrintf+0x254>)
 801579a:	781b      	ldrb	r3, [r3, #0]
 801579c:	4619      	mov	r1, r3
 801579e:	4b75      	ldr	r3, [pc, #468]	; (8015974 <lcdPrintf+0x258>)
 80157a0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80157a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80157a8:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80157ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80157b0:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80157b4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80157b8:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80157bc:	881b      	ldrh	r3, [r3, #0]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	4623      	mov	r3, r4
 80157c2:	6809      	ldr	r1, [r1, #0]
 80157c4:	6800      	ldr	r0, [r0, #0]
 80157c6:	f000 f92d 	bl	8015a24 <disEngFont>

      Size_Char = 1;
 80157ca:	2301      	movs	r3, #1
 80157cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 80157d0:	4b67      	ldr	r3, [pc, #412]	; (8015970 <lcdPrintf+0x254>)
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	461a      	mov	r2, r3
 80157d6:	4b67      	ldr	r3, [pc, #412]	; (8015974 <lcdPrintf+0x258>)
 80157d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 80157e2:	4b63      	ldr	r3, [pc, #396]	; (8015970 <lcdPrintf+0x254>)
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	4b62      	ldr	r3, [pc, #392]	; (8015974 <lcdPrintf+0x258>)
 80157ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157ee:	785b      	ldrb	r3, [r3, #1]
 80157f0:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 80157f4:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80157f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80157fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015800:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8015804:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8015808:	6809      	ldr	r1, [r1, #0]
 801580a:	440a      	add	r2, r1
 801580c:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 801580e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8015812:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015816:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	4413      	add	r3, r2
 801581e:	2ba0      	cmp	r3, #160	; 0xa0
 8015820:	dd13      	ble.n	801584a <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 8015822:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015826:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801582a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801582e:	601a      	str	r2, [r3, #0]
        y += font_height;
 8015830:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8015834:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015838:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801583c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8015840:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8015844:	6809      	ldr	r1, [r1, #0]
 8015846:	440a      	add	r2, r1
 8015848:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 801584a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801584e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015852:	4413      	add	r3, r2
 8015854:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8015858:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801585c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015860:	429a      	cmp	r2, r3
 8015862:	db91      	blt.n	8015788 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8015864:	e07b      	b.n	801595e <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 8015866:	2300      	movs	r3, #0
 8015868:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801586c:	e06f      	b.n	801594e <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 801586e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015872:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8015876:	4413      	add	r3, r2
 8015878:	f107 0214 	add.w	r2, r7, #20
 801587c:	4611      	mov	r1, r2
 801587e:	4618      	mov	r0, r3
 8015880:	f003 f8a0 	bl	80189c4 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8015884:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015888:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 801588c:	881b      	ldrh	r3, [r3, #0]
 801588e:	f107 0214 	add.w	r2, r7, #20
 8015892:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8015896:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 801589a:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 801589e:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 80158a2:	6809      	ldr	r1, [r1, #0]
 80158a4:	6800      	ldr	r0, [r0, #0]
 80158a6:	f000 f867 	bl	8015978 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 80158aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80158ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80158b2:	885b      	ldrh	r3, [r3, #2]
 80158b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 80158b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80158bc:	2b01      	cmp	r3, #1
 80158be:	dd0e      	ble.n	80158de <lcdPrintf+0x1c2>
        font_width = 16;
 80158c0:	2310      	movs	r3, #16
 80158c2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 80158c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80158ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80158ce:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80158d2:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80158d6:	6812      	ldr	r2, [r2, #0]
 80158d8:	3210      	adds	r2, #16
 80158da:	601a      	str	r2, [r3, #0]
 80158dc:	e00d      	b.n	80158fa <lcdPrintf+0x1de>
        font_width = 8;
 80158de:	2308      	movs	r3, #8
 80158e0:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 80158e4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80158e8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80158ec:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80158f0:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80158f4:	6812      	ldr	r2, [r2, #0]
 80158f6:	3208      	adds	r2, #8
 80158f8:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 80158fa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80158fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015902:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4413      	add	r3, r2
 801590a:	2ba0      	cmp	r3, #160	; 0xa0
 801590c:	dd11      	ble.n	8015932 <lcdPrintf+0x216>
        x  = x_Pre;
 801590e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015912:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015916:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801591a:	601a      	str	r2, [r3, #0]
        y += 16;
 801591c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015920:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8015924:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8015928:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 801592c:	6812      	ldr	r2, [r2, #0]
 801592e:	3210      	adds	r2, #16
 8015930:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8015932:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015936:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801593a:	889b      	ldrh	r3, [r3, #4]
 801593c:	2b04      	cmp	r3, #4
 801593e:	d00d      	beq.n	801595c <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8015940:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015944:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015948:	4413      	add	r3, r2
 801594a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801594e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015952:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015956:	429a      	cmp	r2, r3
 8015958:	db89      	blt.n	801586e <lcdPrintf+0x152>
}
 801595a:	e000      	b.n	801595e <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 801595c:	bf00      	nop
}
 801595e:	bf00      	nop
 8015960:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8015964:	46bd      	mov	sp, r7
 8015966:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801596a:	b001      	add	sp, #4
 801596c:	4770      	bx	lr
 801596e:	bf00      	nop
 8015970:	20000095 	.word	0x20000095
 8015974:	20000098 	.word	0x20000098

08015978 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b088      	sub	sp, #32
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	607a      	str	r2, [r7, #4]
 8015984:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	885b      	ldrh	r3, [r3, #2]
 801598a:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 801598c:	8b3b      	ldrh	r3, [r7, #24]
 801598e:	2b02      	cmp	r3, #2
 8015990:	d901      	bls.n	8015996 <disHanFont+0x1e>
  {
    FontSize = 2;
 8015992:	2302      	movs	r3, #2
 8015994:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8015996:	2300      	movs	r3, #0
 8015998:	83fb      	strh	r3, [r7, #30]
 801599a:	e03a      	b.n	8015a12 <disHanFont+0x9a>
  {
    index_x = 0;
 801599c:	2300      	movs	r3, #0
 801599e:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80159a0:	2300      	movs	r3, #0
 80159a2:	83bb      	strh	r3, [r7, #28]
 80159a4:	e02e      	b.n	8015a04 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 80159a6:	8bfb      	ldrh	r3, [r7, #30]
 80159a8:	8b3a      	ldrh	r2, [r7, #24]
 80159aa:	fb03 f202 	mul.w	r2, r3, r2
 80159ae:	8bbb      	ldrh	r3, [r7, #28]
 80159b0:	4413      	add	r3, r2
 80159b2:	687a      	ldr	r2, [r7, #4]
 80159b4:	4413      	add	r3, r2
 80159b6:	799b      	ldrb	r3, [r3, #6]
 80159b8:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80159ba:	2300      	movs	r3, #0
 80159bc:	837b      	strh	r3, [r7, #26]
 80159be:	e01b      	b.n	80159f8 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 80159c0:	7d7a      	ldrb	r2, [r7, #21]
 80159c2:	8b7b      	ldrh	r3, [r7, #26]
 80159c4:	fa02 f303 	lsl.w	r3, r2, r3
 80159c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d00d      	beq.n	80159ec <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	b29a      	uxth	r2, r3
 80159d4:	8afb      	ldrh	r3, [r7, #22]
 80159d6:	4413      	add	r3, r2
 80159d8:	b298      	uxth	r0, r3
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	b29a      	uxth	r2, r3
 80159de:	8bfb      	ldrh	r3, [r7, #30]
 80159e0:	4413      	add	r3, r2
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	887a      	ldrh	r2, [r7, #2]
 80159e6:	4619      	mov	r1, r3
 80159e8:	f7ff fa82 	bl	8014ef0 <lcdDrawPixel>
        }
        index_x++;
 80159ec:	8afb      	ldrh	r3, [r7, #22]
 80159ee:	3301      	adds	r3, #1
 80159f0:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 80159f2:	8b7b      	ldrh	r3, [r7, #26]
 80159f4:	3301      	adds	r3, #1
 80159f6:	837b      	strh	r3, [r7, #26]
 80159f8:	8b7b      	ldrh	r3, [r7, #26]
 80159fa:	2b07      	cmp	r3, #7
 80159fc:	d9e0      	bls.n	80159c0 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80159fe:	8bbb      	ldrh	r3, [r7, #28]
 8015a00:	3301      	adds	r3, #1
 8015a02:	83bb      	strh	r3, [r7, #28]
 8015a04:	8bba      	ldrh	r2, [r7, #28]
 8015a06:	8b3b      	ldrh	r3, [r7, #24]
 8015a08:	429a      	cmp	r2, r3
 8015a0a:	d3cc      	bcc.n	80159a6 <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8015a0c:	8bfb      	ldrh	r3, [r7, #30]
 8015a0e:	3301      	adds	r3, #1
 8015a10:	83fb      	strh	r3, [r7, #30]
 8015a12:	8bfb      	ldrh	r3, [r7, #30]
 8015a14:	2b0f      	cmp	r3, #15
 8015a16:	d9c1      	bls.n	801599c <disHanFont+0x24>
      }
    }
  }
}
 8015a18:	bf00      	nop
 8015a1a:	bf00      	nop
 8015a1c:	3720      	adds	r7, #32
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop

08015a24 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b088      	sub	sp, #32
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	603b      	str	r3, [r7, #0]
 8015a30:	4613      	mov	r3, r2
 8015a32:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8015a34:	2300      	movs	r3, #0
 8015a36:	61fb      	str	r3, [r7, #28]
 8015a38:	e035      	b.n	8015aa6 <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	685a      	ldr	r2, [r3, #4]
 8015a3e:	79fb      	ldrb	r3, [r7, #7]
 8015a40:	3b20      	subs	r3, #32
 8015a42:	6839      	ldr	r1, [r7, #0]
 8015a44:	7849      	ldrb	r1, [r1, #1]
 8015a46:	fb01 f303 	mul.w	r3, r1, r3
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	440b      	add	r3, r1
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	4413      	add	r3, r2
 8015a54:	881b      	ldrh	r3, [r3, #0]
 8015a56:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8015a58:	2300      	movs	r3, #0
 8015a5a:	61bb      	str	r3, [r7, #24]
 8015a5c:	e01a      	b.n	8015a94 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8015a5e:	697a      	ldr	r2, [r7, #20]
 8015a60:	69bb      	ldr	r3, [r7, #24]
 8015a62:	fa02 f303 	lsl.w	r3, r2, r3
 8015a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d00f      	beq.n	8015a8e <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	b29a      	uxth	r2, r3
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	b29b      	uxth	r3, r3
 8015a76:	4413      	add	r3, r2
 8015a78:	b298      	uxth	r0, r3
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	b29b      	uxth	r3, r3
 8015a82:	4413      	add	r3, r2
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8015a88:	4619      	mov	r1, r3
 8015a8a:	f7ff fa31 	bl	8014ef0 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	3301      	adds	r3, #1
 8015a92:	61bb      	str	r3, [r7, #24]
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	461a      	mov	r2, r3
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	d3de      	bcc.n	8015a5e <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8015aa0:	69fb      	ldr	r3, [r7, #28]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	61fb      	str	r3, [r7, #28]
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	785b      	ldrb	r3, [r3, #1]
 8015aaa:	461a      	mov	r2, r3
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	4293      	cmp	r3, r2
 8015ab0:	d3c3      	bcc.n	8015a3a <disEngFont+0x16>
      }
    }
  }
}
 8015ab2:	bf00      	nop
 8015ab4:	bf00      	nop
 8015ab6:	3720      	adds	r7, #32
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}

08015abc <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 8015ac6:	4a04      	ldr	r2, [pc, #16]	; (8015ad8 <lcdSetFont+0x1c>)
 8015ac8:	79fb      	ldrb	r3, [r7, #7]
 8015aca:	7013      	strb	r3, [r2, #0]
}
 8015acc:	bf00      	nop
 8015ace:	370c      	adds	r7, #12
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr
 8015ad8:	20000095 	.word	0x20000095

08015adc <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b086      	sub	sp, #24
 8015ae0:	af02      	add	r7, sp, #8
 8015ae2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	881b      	ldrh	r3, [r3, #0]
 8015aec:	2b01      	cmp	r3, #1
 8015aee:	d163      	bne.n	8015bb8 <cliLcd+0xdc>
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	695b      	ldr	r3, [r3, #20]
 8015af4:	494e      	ldr	r1, [pc, #312]	; (8015c30 <cliLcd+0x154>)
 8015af6:	2000      	movs	r0, #0
 8015af8:	4798      	blx	r3
 8015afa:	4603      	mov	r3, r0
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d05b      	beq.n	8015bb8 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 8015b00:	2003      	movs	r0, #3
 8015b02:	f7ff ffdb 	bl	8015abc <lcdSetFont>

    while(cliKeepLoop())
 8015b06:	e04b      	b.n	8015ba0 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 8015b08:	f7ff fbea 	bl	80152e0 <lcdDrawAvailable>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d046      	beq.n	8015ba0 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 8015b12:	2000      	movs	r0, #0
 8015b14:	f7ff f9f8 	bl	8014f08 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8015b18:	4b46      	ldr	r3, [pc, #280]	; (8015c34 <cliLcd+0x158>)
 8015b1a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8015b1e:	2100      	movs	r1, #0
 8015b20:	2019      	movs	r0, #25
 8015b22:	f7ff fdfb 	bl	801571c <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8015b26:	f7ff fbc3 	bl	80152b0 <lcdGetFps>
 8015b2a:	4603      	mov	r3, r0
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	4b42      	ldr	r3, [pc, #264]	; (8015c38 <cliLcd+0x15c>)
 8015b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b34:	2110      	movs	r1, #16
 8015b36:	2000      	movs	r0, #0
 8015b38:	f7ff fdf0 	bl	801571c <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8015b3c:	f7ff fbc4 	bl	80152c8 <lcdGetFpsTime>
 8015b40:	4603      	mov	r3, r0
 8015b42:	9300      	str	r3, [sp, #0]
 8015b44:	4b3d      	ldr	r3, [pc, #244]	; (8015c3c <cliLcd+0x160>)
 8015b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b4a:	2120      	movs	r1, #32
 8015b4c:	2000      	movs	r0, #0
 8015b4e:	f7ff fde5 	bl	801571c <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8015b52:	f7fc ff0c 	bl	801296e <millis>
 8015b56:	4603      	mov	r3, r0
 8015b58:	9300      	str	r3, [sp, #0]
 8015b5a:	4b38      	ldr	r3, [pc, #224]	; (8015c3c <cliLcd+0x160>)
 8015b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b60:	2130      	movs	r1, #48	; 0x30
 8015b62:	2000      	movs	r0, #0
 8015b64:	f7ff fdda 	bl	801571c <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8015b68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8015b6c:	9300      	str	r3, [sp, #0]
 8015b6e:	230a      	movs	r3, #10
 8015b70:	220a      	movs	r2, #10
 8015b72:	2146      	movs	r1, #70	; 0x46
 8015b74:	2000      	movs	r0, #0
 8015b76:	f7ff fd4b 	bl	8015610 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8015b7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	230a      	movs	r3, #10
 8015b82:	220a      	movs	r2, #10
 8015b84:	2146      	movs	r1, #70	; 0x46
 8015b86:	200a      	movs	r0, #10
 8015b88:	f7ff fd42 	bl	8015610 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8015b8c:	231f      	movs	r3, #31
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	230a      	movs	r3, #10
 8015b92:	220a      	movs	r2, #10
 8015b94:	2146      	movs	r1, #70	; 0x46
 8015b96:	2014      	movs	r0, #20
 8015b98:	f7ff fd3a 	bl	8015610 <lcdDrawFillRect>

        lcdRequestDraw();
 8015b9c:	f7ff fbb6 	bl	801530c <lcdRequestDraw>
    while(cliKeepLoop())
 8015ba0:	f7fd fe5c 	bl	801385c <cliKeepLoop>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d1ae      	bne.n	8015b08 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8015baa:	2000      	movs	r0, #0
 8015bac:	f7ff f9ac 	bl	8014f08 <lcdClearBuffer>
    lcdUpdateDraw();
 8015bb0:	f7ff fbe4 	bl	801537c <lcdUpdateDraw>

    ret = true;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	881b      	ldrh	r3, [r3, #0]
 8015bbc:	2b01      	cmp	r3, #1
 8015bbe:	d126      	bne.n	8015c0e <cliLcd+0x132>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	695b      	ldr	r3, [r3, #20]
 8015bc4:	491e      	ldr	r1, [pc, #120]	; (8015c40 <cliLcd+0x164>)
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	4798      	blx	r3
 8015bca:	4603      	mov	r3, r0
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d01e      	beq.n	8015c0e <cliLcd+0x132>
  {
	  lcdClearBuffer(black);
 8015bd0:	2000      	movs	r0, #0
 8015bd2:	f7ff f999 	bl	8014f08 <lcdClearBuffer>
	  lcdUpdateDraw();
 8015bd6:	f7ff fbd1 	bl	801537c <lcdUpdateDraw>
	  while(cliKeepLoop())
 8015bda:	e00c      	b.n	8015bf6 <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 8015bdc:	f002 fdcc 	bl	8018778 <get_blink>
 8015be0:	4603      	mov	r3, r0
 8015be2:	461a      	mov	r2, r3
 8015be4:	4b17      	ldr	r3, [pc, #92]	; (8015c44 <cliLcd+0x168>)
 8015be6:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 8015be8:	4b16      	ldr	r3, [pc, #88]	; (8015c44 <cliLcd+0x168>)
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	461a      	mov	r2, r3
 8015bee:	2100      	movs	r1, #0
 8015bf0:	2000      	movs	r0, #0
 8015bf2:	f002 fd77 	bl	80186e4 <draw_fan_status>
	  while(cliKeepLoop())
 8015bf6:	f7fd fe31 	bl	801385c <cliKeepLoop>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d1ed      	bne.n	8015bdc <cliLcd+0x100>
	  }
	  lcdClearBuffer(black);
 8015c00:	2000      	movs	r0, #0
 8015c02:	f7ff f981 	bl	8014f08 <lcdClearBuffer>
	  lcdUpdateDraw();
 8015c06:	f7ff fbb9 	bl	801537c <lcdUpdateDraw>

	  ret = true;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8015c0e:	7bfb      	ldrb	r3, [r7, #15]
 8015c10:	f083 0301 	eor.w	r3, r3, #1
 8015c14:	b2db      	uxtb	r3, r3
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d005      	beq.n	8015c26 <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 8015c1a:	480b      	ldr	r0, [pc, #44]	; (8015c48 <cliLcd+0x16c>)
 8015c1c:	f7fd fd24 	bl	8013668 <cliPrintf>
    cliPrintf("lcd image\n");
 8015c20:	480a      	ldr	r0, [pc, #40]	; (8015c4c <cliLcd+0x170>)
 8015c22:	f7fd fd21 	bl	8013668 <cliPrintf>
  }
}
 8015c26:	bf00      	nop
 8015c28:	3710      	adds	r7, #16
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	08029de0 	.word	0x08029de0
 8015c34:	08029de8 	.word	0x08029de8
 8015c38:	08029df8 	.word	0x08029df8
 8015c3c:	08029e00 	.word	0x08029e00
 8015c40:	08029e08 	.word	0x08029e08
 8015c44:	2000aa80 	.word	0x2000aa80
 8015c48:	08029e10 	.word	0x08029e10
 8015c4c:	08029e1c 	.word	0x08029e1c

08015c50 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b088      	sub	sp, #32
 8015c54:	af00      	add	r7, sp, #0
  bool ret = true;
 8015c56:	2301      	movs	r3, #1
 8015c58:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015c5a:	1d3b      	adds	r3, r7, #4
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	601a      	str	r2, [r3, #0]
 8015c60:	605a      	str	r2, [r3, #4]
 8015c62:	609a      	str	r2, [r3, #8]
 8015c64:	60da      	str	r2, [r3, #12]
 8015c66:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015c68:	2300      	movs	r3, #0
 8015c6a:	603b      	str	r3, [r7, #0]
 8015c6c:	4b1b      	ldr	r3, [pc, #108]	; (8015cdc <ledInit+0x8c>)
 8015c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c70:	4a1a      	ldr	r2, [pc, #104]	; (8015cdc <ledInit+0x8c>)
 8015c72:	f043 0304 	orr.w	r3, r3, #4
 8015c76:	6313      	str	r3, [r2, #48]	; 0x30
 8015c78:	4b18      	ldr	r3, [pc, #96]	; (8015cdc <ledInit+0x8c>)
 8015c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c7c:	f003 0304 	and.w	r3, r3, #4
 8015c80:	603b      	str	r3, [r7, #0]
 8015c82:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015c84:	2301      	movs	r3, #1
 8015c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8015c90:	2300      	movs	r3, #0
 8015c92:	61fb      	str	r3, [r7, #28]
 8015c94:	e016      	b.n	8015cc4 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8015c96:	4a12      	ldr	r2, [pc, #72]	; (8015ce0 <ledInit+0x90>)
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	4413      	add	r3, r2
 8015c9e:	889b      	ldrh	r3, [r3, #4]
 8015ca0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8015ca2:	4a0f      	ldr	r2, [pc, #60]	; (8015ce0 <ledInit+0x90>)
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015caa:	1d3a      	adds	r2, r7, #4
 8015cac:	4611      	mov	r1, r2
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f009 fa70 	bl	801f194 <HAL_GPIO_Init>

    ledOff(i);
 8015cb4:	69fb      	ldr	r3, [r7, #28]
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f000 f817 	bl	8015cec <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	61fb      	str	r3, [r7, #28]
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	dde5      	ble.n	8015c96 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8015cca:	4906      	ldr	r1, [pc, #24]	; (8015ce4 <ledInit+0x94>)
 8015ccc:	4806      	ldr	r0, [pc, #24]	; (8015ce8 <ledInit+0x98>)
 8015cce:	f7fd fddb 	bl	8013888 <cliAdd>
#endif

  return ret;
 8015cd2:	7efb      	ldrb	r3, [r7, #27]
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3720      	adds	r7, #32
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	40023800 	.word	0x40023800
 8015ce0:	200000a8 	.word	0x200000a8
 8015ce4:	08015d65 	.word	0x08015d65
 8015ce8:	08029b04 	.word	0x08029b04

08015cec <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8015cf6:	79fb      	ldrb	r3, [r7, #7]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d111      	bne.n	8015d20 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8015cfc:	79fb      	ldrb	r3, [r7, #7]
 8015cfe:	4a0a      	ldr	r2, [pc, #40]	; (8015d28 <ledOff+0x3c>)
 8015d00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015d04:	79fb      	ldrb	r3, [r7, #7]
 8015d06:	4a08      	ldr	r2, [pc, #32]	; (8015d28 <ledOff+0x3c>)
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	4413      	add	r3, r2
 8015d0c:	8899      	ldrh	r1, [r3, #4]
 8015d0e:	79fb      	ldrb	r3, [r7, #7]
 8015d10:	4a05      	ldr	r2, [pc, #20]	; (8015d28 <ledOff+0x3c>)
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	4413      	add	r3, r2
 8015d16:	79db      	ldrb	r3, [r3, #7]
 8015d18:	461a      	mov	r2, r3
 8015d1a:	f009 fcbb 	bl	801f694 <HAL_GPIO_WritePin>
 8015d1e:	e000      	b.n	8015d22 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8015d20:	bf00      	nop
}
 8015d22:	3708      	adds	r7, #8
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	200000a8 	.word	0x200000a8

08015d2c <ledToggle>:

void ledToggle(uint8_t ch)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	4603      	mov	r3, r0
 8015d34:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8015d36:	79fb      	ldrb	r3, [r7, #7]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d10d      	bne.n	8015d58 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8015d3c:	79fb      	ldrb	r3, [r7, #7]
 8015d3e:	4a08      	ldr	r2, [pc, #32]	; (8015d60 <ledToggle+0x34>)
 8015d40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015d44:	79fb      	ldrb	r3, [r7, #7]
 8015d46:	4906      	ldr	r1, [pc, #24]	; (8015d60 <ledToggle+0x34>)
 8015d48:	00db      	lsls	r3, r3, #3
 8015d4a:	440b      	add	r3, r1
 8015d4c:	889b      	ldrh	r3, [r3, #4]
 8015d4e:	4619      	mov	r1, r3
 8015d50:	4610      	mov	r0, r2
 8015d52:	f009 fcb8 	bl	801f6c6 <HAL_GPIO_TogglePin>
 8015d56:	e000      	b.n	8015d5a <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8015d58:	bf00      	nop
}
 8015d5a:	3708      	adds	r7, #8
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}
 8015d60:	200000a8 	.word	0x200000a8

08015d64 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	881b      	ldrh	r3, [r3, #0]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d133      	bne.n	8015de0 <cliLed+0x7c>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	695b      	ldr	r3, [r3, #20]
 8015d7c:	491f      	ldr	r1, [pc, #124]	; (8015dfc <cliLed+0x98>)
 8015d7e:	2000      	movs	r0, #0
 8015d80:	4798      	blx	r3
 8015d82:	4603      	mov	r3, r0
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d02b      	beq.n	8015de0 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	689b      	ldr	r3, [r3, #8]
 8015d8c:	2001      	movs	r0, #1
 8015d8e:	4798      	blx	r3
 8015d90:	4603      	mov	r3, r0
 8015d92:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	2002      	movs	r0, #2
 8015d9a:	4798      	blx	r3
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8015da0:	7dbb      	ldrb	r3, [r7, #22]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d002      	beq.n	8015dac <cliLed+0x48>
    {
      led_ch--;
 8015da6:	7dbb      	ldrb	r3, [r7, #22]
 8015da8:	3b01      	subs	r3, #1
 8015daa:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8015dac:	f7fc fddf 	bl	801296e <millis>
 8015db0:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8015db2:	e00e      	b.n	8015dd2 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8015db4:	f7fc fddb 	bl	801296e <millis>
 8015db8:	4602      	mov	r2, r0
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	1ad3      	subs	r3, r2, r3
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d806      	bhi.n	8015dd2 <cliLed+0x6e>
      {
        pre_time = millis();
 8015dc4:	f7fc fdd3 	bl	801296e <millis>
 8015dc8:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8015dca:	7dbb      	ldrb	r3, [r7, #22]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff ffad 	bl	8015d2c <ledToggle>
    while(cliKeepLoop())
 8015dd2:	f7fd fd43 	bl	801385c <cliKeepLoop>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1eb      	bne.n	8015db4 <cliLed+0x50>
      }
    }

    ret = true;
 8015ddc:	2301      	movs	r3, #1
 8015dde:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8015de0:	7dfb      	ldrb	r3, [r7, #23]
 8015de2:	f083 0301 	eor.w	r3, r3, #1
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d003      	beq.n	8015df4 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8015dec:	2101      	movs	r1, #1
 8015dee:	4804      	ldr	r0, [pc, #16]	; (8015e00 <cliLed+0x9c>)
 8015df0:	f7fd fc3a 	bl	8013668 <cliPrintf>
  }
}
 8015df4:	bf00      	nop
 8015df6:	3718      	adds	r7, #24
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}
 8015dfc:	08029b08 	.word	0x08029b08
 8015e00:	08029b10 	.word	0x08029b10

08015e04 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8015e0c:	4b0d      	ldr	r3, [pc, #52]	; (8015e44 <DWT_Delay_us+0x40>)
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8015e12:	f00a f88d 	bl	801ff30 <HAL_RCC_GetHCLKFreq>
 8015e16:	4603      	mov	r3, r0
 8015e18:	4a0b      	ldr	r2, [pc, #44]	; (8015e48 <DWT_Delay_us+0x44>)
 8015e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8015e1e:	0c9b      	lsrs	r3, r3, #18
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	fb02 f303 	mul.w	r3, r2, r3
 8015e26:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8015e28:	bf00      	nop
 8015e2a:	4b06      	ldr	r3, [pc, #24]	; (8015e44 <DWT_Delay_us+0x40>)
 8015e2c:	685a      	ldr	r2, [r3, #4]
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	1ad2      	subs	r2, r2, r3
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d3f8      	bcc.n	8015e2a <DWT_Delay_us+0x26>
}
 8015e38:	bf00      	nop
 8015e3a:	bf00      	nop
 8015e3c:	3710      	adds	r7, #16
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	e0001000 	.word	0xe0001000
 8015e48:	431bde83 	.word	0x431bde83

08015e4c <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	889b      	ldrh	r3, [r3, #4]
 8015e58:	041a      	lsls	r2, r3, #16
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	619a      	str	r2, [r3, #24]
}
 8015e60:	bf00      	nop
 8015e62:	370c      	adds	r7, #12
 8015e64:	46bd      	mov	sp, r7
 8015e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6a:	4770      	bx	lr

08015e6c <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	889a      	ldrh	r2, [r3, #4]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	619a      	str	r2, [r3, #24]
}
 8015e7e:	bf00      	nop
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr

08015e8a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8015e8a:	b580      	push	{r7, lr}
 8015e8c:	b088      	sub	sp, #32
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8015e92:	2300      	movs	r3, #0
 8015e94:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8015e96:	2300      	movs	r3, #0
 8015e98:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015e9a:	2302      	movs	r3, #2
 8015e9c:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	889b      	ldrh	r3, [r3, #4]
 8015ea2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f107 020c 	add.w	r2, r7, #12
 8015eac:	4611      	mov	r1, r2
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f009 f970 	bl	801f194 <HAL_GPIO_Init>
}
 8015eb4:	bf00      	nop
 8015eb6:	3720      	adds	r7, #32
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}

08015ebc <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b088      	sub	sp, #32
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8015ec4:	2311      	movs	r3, #17
 8015ec6:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015ecc:	2302      	movs	r3, #2
 8015ece:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	889b      	ldrh	r3, [r3, #4]
 8015ed4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f107 020c 	add.w	r2, r7, #12
 8015ede:	4611      	mov	r1, r2
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f009 f957 	bl	801f194 <HAL_GPIO_Init>

}
 8015ee6:	bf00      	nop
 8015ee8:	3720      	adds	r7, #32
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}

08015eee <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8015eee:	b580      	push	{r7, lr}
 8015ef0:	b084      	sub	sp, #16
 8015ef2:	af00      	add	r7, sp, #0
 8015ef4:	60f8      	str	r0, [r7, #12]
 8015ef6:	60b9      	str	r1, [r7, #8]
 8015ef8:	4613      	mov	r3, r2
 8015efa:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	88fa      	ldrh	r2, [r7, #6]
 8015f06:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8015f08:	68f8      	ldr	r0, [r7, #12]
 8015f0a:	f7ff ffd7 	bl	8015ebc <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	f7ff ffac 	bl	8015e6c <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8015f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015f18:	f7ff ff74 	bl	8015e04 <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7ff ff95 	bl	8015e4c <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8015f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015f26:	f7ff ff6d 	bl	8015e04 <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8015f2a:	68f8      	ldr	r0, [r7, #12]
 8015f2c:	f7ff ff9e 	bl	8015e6c <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8015f30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015f34:	f7ff ff66 	bl	8015e04 <DWT_Delay_us>
}
 8015f38:	bf00      	nop
 8015f3a:	3710      	adds	r7, #16
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b084      	sub	sp, #16
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7ff ff7f 	bl	8015e4c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f7ff ffb4 	bl	8015ebc <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8015f54:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8015f58:	f7ff ff54 	bl	8015e04 <DWT_Delay_us>
	DWT_Delay_us(20);
 8015f5c:	2014      	movs	r0, #20
 8015f5e:	f7ff ff51 	bl	8015e04 <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8015f62:	6878      	ldr	r0, [r7, #4]
 8015f64:	f7ff ff91 	bl	8015e8a <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8015f68:	2046      	movs	r0, #70	; 0x46
 8015f6a:	f7ff ff4b 	bl	8015e04 <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	889b      	ldrh	r3, [r3, #4]
 8015f76:	4619      	mov	r1, r3
 8015f78:	4610      	mov	r0, r2
 8015f7a:	f009 fb73 	bl	801f664 <HAL_GPIO_ReadPin>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8015f82:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8015f86:	f7ff ff3d 	bl	8015e04 <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8015f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3710      	adds	r7, #16
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	460b      	mov	r3, r1
 8015f9e:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8015fa0:	78fb      	ldrb	r3, [r7, #3]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d012      	beq.n	8015fcc <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f7ff ff50 	bl	8015e4c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015fac:	6878      	ldr	r0, [r7, #4]
 8015fae:	f7ff ff85 	bl	8015ebc <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8015fb2:	200a      	movs	r0, #10
 8015fb4:	f7ff ff26 	bl	8015e04 <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f7ff ff66 	bl	8015e8a <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8015fbe:	2037      	movs	r0, #55	; 0x37
 8015fc0:	f7ff ff20 	bl	8015e04 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7ff ff60 	bl	8015e8a <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8015fca:	e011      	b.n	8015ff0 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7ff ff3d 	bl	8015e4c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7ff ff72 	bl	8015ebc <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8015fd8:	2041      	movs	r0, #65	; 0x41
 8015fda:	f7ff ff13 	bl	8015e04 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f7ff ff53 	bl	8015e8a <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8015fe4:	2005      	movs	r0, #5
 8015fe6:	f7ff ff0d 	bl	8015e04 <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7ff ff4d 	bl	8015e8a <ONEWIRE_INPUT>
}
 8015ff0:	bf00      	nop
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b084      	sub	sp, #16
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8016000:	2300      	movs	r3, #0
 8016002:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f7ff ff21 	bl	8015e4c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff ff56 	bl	8015ebc <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8016010:	2002      	movs	r0, #2
 8016012:	f7ff fef7 	bl	8015e04 <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f7ff ff37 	bl	8015e8a <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 801601c:	200a      	movs	r0, #10
 801601e:	f7ff fef1 	bl	8015e04 <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	889b      	ldrh	r3, [r3, #4]
 801602a:	4619      	mov	r1, r3
 801602c:	4610      	mov	r0, r2
 801602e:	f009 fb19 	bl	801f664 <HAL_GPIO_ReadPin>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d001      	beq.n	801603c <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8016038:	2301      	movs	r3, #1
 801603a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 801603c:	2032      	movs	r0, #50	; 0x32
 801603e:	f7ff fee1 	bl	8015e04 <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8016042:	7bfb      	ldrb	r3, [r7, #15]
}
 8016044:	4618      	mov	r0, r3
 8016046:	3710      	adds	r7, #16
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 801604c:	b580      	push	{r7, lr}
 801604e:	b084      	sub	sp, #16
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	460b      	mov	r3, r1
 8016056:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8016058:	2308      	movs	r3, #8
 801605a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 801605c:	e00a      	b.n	8016074 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 801605e:	78fb      	ldrb	r3, [r7, #3]
 8016060:	f003 0301 	and.w	r3, r3, #1
 8016064:	b2db      	uxtb	r3, r3
 8016066:	4619      	mov	r1, r3
 8016068:	6878      	ldr	r0, [r7, #4]
 801606a:	f7ff ff93 	bl	8015f94 <OneWire_WriteBit>
		byte >>= 1;
 801606e:	78fb      	ldrb	r3, [r7, #3]
 8016070:	085b      	lsrs	r3, r3, #1
 8016072:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8016074:	7bfb      	ldrb	r3, [r7, #15]
 8016076:	1e5a      	subs	r2, r3, #1
 8016078:	73fa      	strb	r2, [r7, #15]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d1ef      	bne.n	801605e <OneWire_WriteByte+0x12>
	}
}
 801607e:	bf00      	nop
 8016080:	bf00      	nop
 8016082:	3710      	adds	r7, #16
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8016090:	2308      	movs	r3, #8
 8016092:	73fb      	strb	r3, [r7, #15]
 8016094:	2300      	movs	r3, #0
 8016096:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8016098:	e00d      	b.n	80160b6 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 801609a:	7bbb      	ldrb	r3, [r7, #14]
 801609c:	085b      	lsrs	r3, r3, #1
 801609e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ff ffa9 	bl	8015ff8 <OneWire_ReadBit>
 80160a6:	4603      	mov	r3, r0
 80160a8:	01db      	lsls	r3, r3, #7
 80160aa:	b25a      	sxtb	r2, r3
 80160ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80160b0:	4313      	orrs	r3, r2
 80160b2:	b25b      	sxtb	r3, r3
 80160b4:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80160b6:	7bfb      	ldrb	r3, [r7, #15]
 80160b8:	1e5a      	subs	r2, r3, #1
 80160ba:	73fa      	strb	r2, [r7, #15]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d1ec      	bne.n	801609a <OneWire_ReadByte+0x12>
	}

	return byte;
 80160c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80160c2:	4618      	mov	r0, r3
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}

080160ca <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80160ca:	b580      	push	{r7, lr}
 80160cc:	b082      	sub	sp, #8
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 f816 	bl	8016104 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80160d8:	21f0      	movs	r1, #240	; 0xf0
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 f825 	bl	801612a <OneWire_Search>
 80160e0:	4603      	mov	r3, r0
}
 80160e2:	4618      	mov	r0, r3
 80160e4:	3708      	adds	r7, #8
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bd80      	pop	{r7, pc}

080160ea <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80160ea:	b580      	push	{r7, lr}
 80160ec:	b082      	sub	sp, #8
 80160ee:	af00      	add	r7, sp, #0
 80160f0:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80160f2:	21f0      	movs	r1, #240	; 0xf0
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 f818 	bl	801612a <OneWire_Search>
 80160fa:	4603      	mov	r3, r0
}
 80160fc:	4618      	mov	r0, r3
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}

08016104 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8016104:	b480      	push	{r7}
 8016106:	b083      	sub	sp, #12
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2200      	movs	r2, #0
 8016110:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2200      	movs	r2, #0
 8016116:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2200      	movs	r2, #0
 801611c:	71da      	strb	r2, [r3, #7]
}
 801611e:	bf00      	nop
 8016120:	370c      	adds	r7, #12
 8016122:	46bd      	mov	sp, r7
 8016124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016128:	4770      	bx	lr

0801612a <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 801612a:	b580      	push	{r7, lr}
 801612c:	b084      	sub	sp, #16
 801612e:	af00      	add	r7, sp, #0
 8016130:	6078      	str	r0, [r7, #4]
 8016132:	460b      	mov	r3, r1
 8016134:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8016136:	2301      	movs	r3, #1
 8016138:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 801613a:	2300      	movs	r3, #0
 801613c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 801613e:	2300      	movs	r3, #0
 8016140:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8016142:	2301      	movs	r3, #1
 8016144:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	7a1b      	ldrb	r3, [r3, #8]
 801614e:	2b00      	cmp	r3, #0
 8016150:	f040 809a 	bne.w	8016288 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8016154:	6878      	ldr	r0, [r7, #4]
 8016156:	f7ff fef3 	bl	8015f40 <OneWire_Reset>
 801615a:	4603      	mov	r3, r0
 801615c:	2b00      	cmp	r3, #0
 801615e:	d00a      	beq.n	8016176 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	2200      	movs	r2, #0
 8016164:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2200      	movs	r2, #0
 801616a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2200      	movs	r2, #0
 8016170:	71da      	strb	r2, [r3, #7]
			return 0;
 8016172:	2300      	movs	r3, #0
 8016174:	e09b      	b.n	80162ae <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8016176:	78fb      	ldrb	r3, [r7, #3]
 8016178:	4619      	mov	r1, r3
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f7ff ff66 	bl	801604c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f7ff ff39 	bl	8015ff8 <OneWire_ReadBit>
 8016186:	4603      	mov	r3, r0
 8016188:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f7ff ff34 	bl	8015ff8 <OneWire_ReadBit>
 8016190:	4603      	mov	r3, r0
 8016192:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8016194:	7a7b      	ldrb	r3, [r7, #9]
 8016196:	2b01      	cmp	r3, #1
 8016198:	d102      	bne.n	80161a0 <OneWire_Search+0x76>
 801619a:	7a3b      	ldrb	r3, [r7, #8]
 801619c:	2b01      	cmp	r3, #1
 801619e:	d064      	beq.n	801626a <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80161a0:	7a7a      	ldrb	r2, [r7, #9]
 80161a2:	7a3b      	ldrb	r3, [r7, #8]
 80161a4:	429a      	cmp	r2, r3
 80161a6:	d002      	beq.n	80161ae <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80161a8:	7a7b      	ldrb	r3, [r7, #9]
 80161aa:	72bb      	strb	r3, [r7, #10]
 80161ac:	e026      	b.n	80161fc <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	799b      	ldrb	r3, [r3, #6]
 80161b2:	7bfa      	ldrb	r2, [r7, #15]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d20d      	bcs.n	80161d4 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80161b8:	7b7b      	ldrb	r3, [r7, #13]
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	4413      	add	r3, r2
 80161be:	7a5a      	ldrb	r2, [r3, #9]
 80161c0:	7afb      	ldrb	r3, [r7, #11]
 80161c2:	4013      	ands	r3, r2
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	bf14      	ite	ne
 80161ca:	2301      	movne	r3, #1
 80161cc:	2300      	moveq	r3, #0
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	72bb      	strb	r3, [r7, #10]
 80161d2:	e008      	b.n	80161e6 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	799b      	ldrb	r3, [r3, #6]
 80161d8:	7bfa      	ldrb	r2, [r7, #15]
 80161da:	429a      	cmp	r2, r3
 80161dc:	bf0c      	ite	eq
 80161de:	2301      	moveq	r3, #1
 80161e0:	2300      	movne	r3, #0
 80161e2:	b2db      	uxtb	r3, r3
 80161e4:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80161e6:	7abb      	ldrb	r3, [r7, #10]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d107      	bne.n	80161fc <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80161ec:	7bfb      	ldrb	r3, [r7, #15]
 80161ee:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80161f0:	7bbb      	ldrb	r3, [r7, #14]
 80161f2:	2b08      	cmp	r3, #8
 80161f4:	d802      	bhi.n	80161fc <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	7bba      	ldrb	r2, [r7, #14]
 80161fa:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 80161fc:	7abb      	ldrb	r3, [r7, #10]
 80161fe:	2b01      	cmp	r3, #1
 8016200:	d10c      	bne.n	801621c <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8016202:	7b7b      	ldrb	r3, [r7, #13]
 8016204:	687a      	ldr	r2, [r7, #4]
 8016206:	4413      	add	r3, r2
 8016208:	7a59      	ldrb	r1, [r3, #9]
 801620a:	7b7b      	ldrb	r3, [r7, #13]
 801620c:	7afa      	ldrb	r2, [r7, #11]
 801620e:	430a      	orrs	r2, r1
 8016210:	b2d1      	uxtb	r1, r2
 8016212:	687a      	ldr	r2, [r7, #4]
 8016214:	4413      	add	r3, r2
 8016216:	460a      	mov	r2, r1
 8016218:	725a      	strb	r2, [r3, #9]
 801621a:	e010      	b.n	801623e <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 801621c:	7b7b      	ldrb	r3, [r7, #13]
 801621e:	687a      	ldr	r2, [r7, #4]
 8016220:	4413      	add	r3, r2
 8016222:	7a5b      	ldrb	r3, [r3, #9]
 8016224:	b25a      	sxtb	r2, r3
 8016226:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801622a:	43db      	mvns	r3, r3
 801622c:	b25b      	sxtb	r3, r3
 801622e:	4013      	ands	r3, r2
 8016230:	b25a      	sxtb	r2, r3
 8016232:	7b7b      	ldrb	r3, [r7, #13]
 8016234:	b2d1      	uxtb	r1, r2
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	4413      	add	r3, r2
 801623a:	460a      	mov	r2, r1
 801623c:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 801623e:	7abb      	ldrb	r3, [r7, #10]
 8016240:	4619      	mov	r1, r3
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f7ff fea6 	bl	8015f94 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8016248:	7bfb      	ldrb	r3, [r7, #15]
 801624a:	3301      	adds	r3, #1
 801624c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 801624e:	7afb      	ldrb	r3, [r7, #11]
 8016250:	005b      	lsls	r3, r3, #1
 8016252:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8016254:	7afb      	ldrb	r3, [r7, #11]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d104      	bne.n	8016264 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 801625a:	7b7b      	ldrb	r3, [r7, #13]
 801625c:	3301      	adds	r3, #1
 801625e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8016260:	2301      	movs	r3, #1
 8016262:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8016264:	7b7b      	ldrb	r3, [r7, #13]
 8016266:	2b07      	cmp	r3, #7
 8016268:	d98a      	bls.n	8016180 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 801626a:	7bfb      	ldrb	r3, [r7, #15]
 801626c:	2b40      	cmp	r3, #64	; 0x40
 801626e:	d90b      	bls.n	8016288 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	7bba      	ldrb	r2, [r7, #14]
 8016274:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	799b      	ldrb	r3, [r3, #6]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d102      	bne.n	8016284 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2201      	movs	r2, #1
 8016282:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8016284:	2301      	movs	r3, #1
 8016286:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8016288:	7b3b      	ldrb	r3, [r7, #12]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d003      	beq.n	8016296 <OneWire_Search+0x16c>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	7a5b      	ldrb	r3, [r3, #9]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d10a      	bne.n	80162ac <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2200      	movs	r2, #0
 801629a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2200      	movs	r2, #0
 80162a0:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2200      	movs	r2, #0
 80162a6:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80162ac:	7b3b      	ldrb	r3, [r7, #12]
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b084      	sub	sp, #16
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
 80162be:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80162c0:	2155      	movs	r1, #85	; 0x55
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f7ff fec2 	bl	801604c <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80162c8:	2300      	movs	r3, #0
 80162ca:	73fb      	strb	r3, [r7, #15]
 80162cc:	e00a      	b.n	80162e4 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80162ce:	7bfb      	ldrb	r3, [r7, #15]
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	4413      	add	r3, r2
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	4619      	mov	r1, r3
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f7ff feb7 	bl	801604c <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80162de:	7bfb      	ldrb	r3, [r7, #15]
 80162e0:	3301      	adds	r3, #1
 80162e2:	73fb      	strb	r3, [r7, #15]
 80162e4:	7bfb      	ldrb	r3, [r7, #15]
 80162e6:	2b07      	cmp	r3, #7
 80162e8:	d9f1      	bls.n	80162ce <OneWire_SelectWithPointer+0x18>
	}
}
 80162ea:	bf00      	nop
 80162ec:	bf00      	nop
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80162f4:	b480      	push	{r7}
 80162f6:	b085      	sub	sp, #20
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80162fe:	2300      	movs	r3, #0
 8016300:	73fb      	strb	r3, [r7, #15]
 8016302:	e00a      	b.n	801631a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8016304:	7bfa      	ldrb	r2, [r7, #15]
 8016306:	7bfb      	ldrb	r3, [r7, #15]
 8016308:	6839      	ldr	r1, [r7, #0]
 801630a:	440b      	add	r3, r1
 801630c:	6879      	ldr	r1, [r7, #4]
 801630e:	440a      	add	r2, r1
 8016310:	7a52      	ldrb	r2, [r2, #9]
 8016312:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8016314:	7bfb      	ldrb	r3, [r7, #15]
 8016316:	3301      	adds	r3, #1
 8016318:	73fb      	strb	r3, [r7, #15]
 801631a:	7bfb      	ldrb	r3, [r7, #15]
 801631c:	2b07      	cmp	r3, #7
 801631e:	d9f1      	bls.n	8016304 <OneWire_GetFullROM+0x10>
	}
}
 8016320:	bf00      	nop
 8016322:	bf00      	nop
 8016324:	3714      	adds	r7, #20
 8016326:	46bd      	mov	sp, r7
 8016328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632c:	4770      	bx	lr

0801632e <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 801632e:	b480      	push	{r7}
 8016330:	b085      	sub	sp, #20
 8016332:	af00      	add	r7, sp, #0
 8016334:	6078      	str	r0, [r7, #4]
 8016336:	460b      	mov	r3, r1
 8016338:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 801633a:	2300      	movs	r3, #0
 801633c:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 801633e:	e022      	b.n	8016386 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	1c5a      	adds	r2, r3, #1
 8016344:	607a      	str	r2, [r7, #4]
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 801634a:	2308      	movs	r3, #8
 801634c:	737b      	strb	r3, [r7, #13]
 801634e:	e017      	b.n	8016380 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8016350:	7bfa      	ldrb	r2, [r7, #15]
 8016352:	7bbb      	ldrb	r3, [r7, #14]
 8016354:	4053      	eors	r3, r2
 8016356:	b2db      	uxtb	r3, r3
 8016358:	f003 0301 	and.w	r3, r3, #1
 801635c:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 801635e:	7bfb      	ldrb	r3, [r7, #15]
 8016360:	085b      	lsrs	r3, r3, #1
 8016362:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8016364:	7b3b      	ldrb	r3, [r7, #12]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d004      	beq.n	8016374 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 801636a:	7bfb      	ldrb	r3, [r7, #15]
 801636c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8016370:	43db      	mvns	r3, r3
 8016372:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8016374:	7bbb      	ldrb	r3, [r7, #14]
 8016376:	085b      	lsrs	r3, r3, #1
 8016378:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 801637a:	7b7b      	ldrb	r3, [r7, #13]
 801637c:	3b01      	subs	r3, #1
 801637e:	737b      	strb	r3, [r7, #13]
 8016380:	7b7b      	ldrb	r3, [r7, #13]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1e4      	bne.n	8016350 <OneWire_CRC8+0x22>
	while (len--) {
 8016386:	78fb      	ldrb	r3, [r7, #3]
 8016388:	1e5a      	subs	r2, r3, #1
 801638a:	70fa      	strb	r2, [r7, #3]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d1d7      	bne.n	8016340 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8016390:	7bfb      	ldrb	r3, [r7, #15]
}
 8016392:	4618      	mov	r0, r3
 8016394:	3714      	adds	r7, #20
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr
	...

080163a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80163a0:	b480      	push	{r7}
 80163a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80163a4:	f3bf 8f4f 	dsb	sy
}
 80163a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80163aa:	4b06      	ldr	r3, [pc, #24]	; (80163c4 <__NVIC_SystemReset+0x24>)
 80163ac:	68db      	ldr	r3, [r3, #12]
 80163ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80163b2:	4904      	ldr	r1, [pc, #16]	; (80163c4 <__NVIC_SystemReset+0x24>)
 80163b4:	4b04      	ldr	r3, [pc, #16]	; (80163c8 <__NVIC_SystemReset+0x28>)
 80163b6:	4313      	orrs	r3, r2
 80163b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80163ba:	f3bf 8f4f 	dsb	sy
}
 80163be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80163c0:	bf00      	nop
 80163c2:	e7fd      	b.n	80163c0 <__NVIC_SystemReset+0x20>
 80163c4:	e000ed00 	.word	0xe000ed00
 80163c8:	05fa0004 	.word	0x05fa0004

080163cc <resetISR>:
static void resetToRunBoot(void);



void resetISR(void)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	af00      	add	r7, sp, #0
  if (run_timeout_count > 0)
 80163d0:	4b08      	ldr	r3, [pc, #32]	; (80163f4 <resetISR+0x28>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d00a      	beq.n	80163ee <resetISR+0x22>
  {
    run_timeout_count--;
 80163d8:	4b06      	ldr	r3, [pc, #24]	; (80163f4 <resetISR+0x28>)
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3b01      	subs	r3, #1
 80163de:	4a05      	ldr	r2, [pc, #20]	; (80163f4 <resetISR+0x28>)
 80163e0:	6013      	str	r3, [r2, #0]

    if (run_timeout_count == 0)
 80163e2:	4b04      	ldr	r3, [pc, #16]	; (80163f4 <resetISR+0x28>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d101      	bne.n	80163ee <resetISR+0x22>
    {
      resetToRunBoot();
 80163ea:	f000 f825 	bl	8016438 <resetToRunBoot>
    }
  }
}
 80163ee:	bf00      	nop
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	2000aa84 	.word	0x2000aa84

080163f8 <resetInit>:


bool resetInit(void)
{
 80163f8:	b480      	push	{r7}
 80163fa:	b083      	sub	sp, #12
 80163fc:	af00      	add	r7, sp, #0
  bool ret = true;
 80163fe:	2301      	movs	r3, #1
 8016400:	71fb      	strb	r3, [r7, #7]
  }

  rtcBackupRegWrite(1, 0);
#endif

  return ret;
 8016402:	79fb      	ldrb	r3, [r7, #7]
}
 8016404:	4618      	mov	r0, r3
 8016406:	370c      	adds	r7, #12
 8016408:	46bd      	mov	sp, r7
 801640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801640e:	4770      	bx	lr

08016410 <resetToBoot>:
{
  return reset_count;
}

void resetToBoot(uint32_t timeout)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b082      	sub	sp, #8
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
  if (timeout == 0)
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d102      	bne.n	8016424 <resetToBoot+0x14>
  {
    resetToRunBoot();
 801641e:	f000 f80b 	bl	8016438 <resetToRunBoot>
  }
  else
  {
    run_timeout_count = timeout;
  }
}
 8016422:	e002      	b.n	801642a <resetToBoot+0x1a>
    run_timeout_count = timeout;
 8016424:	4a03      	ldr	r2, [pc, #12]	; (8016434 <resetToBoot+0x24>)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6013      	str	r3, [r2, #0]
}
 801642a:	bf00      	nop
 801642c:	3708      	adds	r7, #8
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	2000aa84 	.word	0x2000aa84

08016438 <resetToRunBoot>:

void resetToRunBoot(void)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
  uint32_t reg;

  reg = rtcBackupRegRead(0);
 801643e:	2000      	movs	r0, #0
 8016440:	f000 f848 	bl	80164d4 <rtcBackupRegRead>
 8016444:	6078      	str	r0, [r7, #4]

  reg |= (1<<0);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f043 0301 	orr.w	r3, r3, #1
 801644c:	607b      	str	r3, [r7, #4]
  rtcBackupRegWrite(0, reg);
 801644e:	6879      	ldr	r1, [r7, #4]
 8016450:	2000      	movs	r0, #0
 8016452:	f000 f84f 	bl	80164f4 <rtcBackupRegWrite>
  NVIC_SystemReset();
 8016456:	f7ff ffa3 	bl	80163a0 <__NVIC_SystemReset>
	...

0801645c <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
  bool ret = true;
 8016462:	2301      	movs	r3, #1
 8016464:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8016466:	2300      	movs	r3, #0
 8016468:	603b      	str	r3, [r7, #0]
 801646a:	4b17      	ldr	r3, [pc, #92]	; (80164c8 <rtcInit+0x6c>)
 801646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801646e:	4a16      	ldr	r2, [pc, #88]	; (80164c8 <rtcInit+0x6c>)
 8016470:	f043 0304 	orr.w	r3, r3, #4
 8016474:	6313      	str	r3, [r2, #48]	; 0x30
 8016476:	4b14      	ldr	r3, [pc, #80]	; (80164c8 <rtcInit+0x6c>)
 8016478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801647a:	f003 0304 	and.w	r3, r3, #4
 801647e:	603b      	str	r3, [r7, #0]
 8016480:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 8016482:	4b12      	ldr	r3, [pc, #72]	; (80164cc <rtcInit+0x70>)
 8016484:	4a12      	ldr	r2, [pc, #72]	; (80164d0 <rtcInit+0x74>)
 8016486:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8016488:	4b10      	ldr	r3, [pc, #64]	; (80164cc <rtcInit+0x70>)
 801648a:	2200      	movs	r2, #0
 801648c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 801648e:	4b0f      	ldr	r3, [pc, #60]	; (80164cc <rtcInit+0x70>)
 8016490:	227f      	movs	r2, #127	; 0x7f
 8016492:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8016494:	4b0d      	ldr	r3, [pc, #52]	; (80164cc <rtcInit+0x70>)
 8016496:	22ff      	movs	r2, #255	; 0xff
 8016498:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801649a:	4b0c      	ldr	r3, [pc, #48]	; (80164cc <rtcInit+0x70>)
 801649c:	2200      	movs	r2, #0
 801649e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80164a0:	4b0a      	ldr	r3, [pc, #40]	; (80164cc <rtcInit+0x70>)
 80164a2:	2200      	movs	r2, #0
 80164a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80164a6:	4b09      	ldr	r3, [pc, #36]	; (80164cc <rtcInit+0x70>)
 80164a8:	2200      	movs	r2, #0
 80164aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80164ac:	4807      	ldr	r0, [pc, #28]	; (80164cc <rtcInit+0x70>)
 80164ae:	f009 fe63 	bl	8020178 <HAL_RTC_Init>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d001      	beq.n	80164bc <rtcInit+0x60>
  {
    Error_Handler();
 80164b8:	f7fc fae2 	bl	8012a80 <Error_Handler>
  }

  return ret;
 80164bc:	79fb      	ldrb	r3, [r7, #7]
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3708      	adds	r7, #8
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	40023800 	.word	0x40023800
 80164cc:	2000aa88 	.word	0x2000aa88
 80164d0:	40002800 	.word	0x40002800

080164d4 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80164dc:	6879      	ldr	r1, [r7, #4]
 80164de:	4804      	ldr	r0, [pc, #16]	; (80164f0 <rtcBackupRegRead+0x1c>)
 80164e0:	f009 ff49 	bl	8020376 <HAL_RTCEx_BKUPRead>
 80164e4:	4603      	mov	r3, r0
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3708      	adds	r7, #8
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	2000aa88 	.word	0x2000aa88

080164f4 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80164fe:	683a      	ldr	r2, [r7, #0]
 8016500:	6879      	ldr	r1, [r7, #4]
 8016502:	4803      	ldr	r0, [pc, #12]	; (8016510 <rtcBackupRegWrite+0x1c>)
 8016504:	f009 ff1d 	bl	8020342 <HAL_RTCEx_BKUPWrite>
}
 8016508:	bf00      	nop
 801650a:	3708      	adds	r7, #8
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}
 8016510:	2000aa88 	.word	0x2000aa88

08016514 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8016514:	b480      	push	{r7}
 8016516:	b083      	sub	sp, #12
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	4a05      	ldr	r2, [pc, #20]	; (8016538 <HAL_RTC_MspInit+0x24>)
 8016522:	4293      	cmp	r3, r2
 8016524:	d102      	bne.n	801652c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8016526:	4b05      	ldr	r3, [pc, #20]	; (801653c <HAL_RTC_MspInit+0x28>)
 8016528:	2201      	movs	r2, #1
 801652a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 801652c:	bf00      	nop
 801652e:	370c      	adds	r7, #12
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr
 8016538:	40002800 	.word	0x40002800
 801653c:	42470e3c 	.word	0x42470e3c

08016540 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b082      	sub	sp, #8
 8016544:	af00      	add	r7, sp, #0
  bool ret = false;
 8016546:	2300      	movs	r3, #0
 8016548:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 801654a:	4b1d      	ldr	r3, [pc, #116]	; (80165c0 <sdInit+0x80>)
 801654c:	4a1d      	ldr	r2, [pc, #116]	; (80165c4 <sdInit+0x84>)
 801654e:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8016550:	4b1b      	ldr	r3, [pc, #108]	; (80165c0 <sdInit+0x80>)
 8016552:	2200      	movs	r2, #0
 8016554:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 8016556:	4b1a      	ldr	r3, [pc, #104]	; (80165c0 <sdInit+0x80>)
 8016558:	2200      	movs	r2, #0
 801655a:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 801655c:	4b18      	ldr	r3, [pc, #96]	; (80165c0 <sdInit+0x80>)
 801655e:	2200      	movs	r2, #0
 8016560:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 8016562:	4b17      	ldr	r3, [pc, #92]	; (80165c0 <sdInit+0x80>)
 8016564:	2200      	movs	r2, #0
 8016566:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8016568:	4b15      	ldr	r3, [pc, #84]	; (80165c0 <sdInit+0x80>)
 801656a:	2200      	movs	r2, #0
 801656c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 801656e:	4b14      	ldr	r3, [pc, #80]	; (80165c0 <sdInit+0x80>)
 8016570:	2200      	movs	r2, #0
 8016572:	619a      	str	r2, [r3, #24]


  is_detected = false;
 8016574:	4b14      	ldr	r3, [pc, #80]	; (80165c8 <sdInit+0x88>)
 8016576:	2200      	movs	r2, #0
 8016578:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 801657a:	4b13      	ldr	r3, [pc, #76]	; (80165c8 <sdInit+0x88>)
 801657c:	2201      	movs	r2, #1
 801657e:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8016580:	4b11      	ldr	r3, [pc, #68]	; (80165c8 <sdInit+0x88>)
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00f      	beq.n	80165a8 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8016588:	480d      	ldr	r0, [pc, #52]	; (80165c0 <sdInit+0x80>)
 801658a:	f009 ff0c 	bl	80203a6 <HAL_SD_Init>
 801658e:	4603      	mov	r3, r0
 8016590:	2b00      	cmp	r3, #0
 8016592:	d109      	bne.n	80165a8 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8016594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016598:	4809      	ldr	r0, [pc, #36]	; (80165c0 <sdInit+0x80>)
 801659a:	f00a fcd9 	bl	8020f50 <HAL_SD_ConfigWideBusOperation>
 801659e:	4603      	mov	r3, r0
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d101      	bne.n	80165a8 <sdInit+0x68>
      {
        ret = true;
 80165a4:	2301      	movs	r3, #1
 80165a6:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 80165a8:	4a08      	ldr	r2, [pc, #32]	; (80165cc <sdInit+0x8c>)
 80165aa:	79fb      	ldrb	r3, [r7, #7]
 80165ac:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 80165ae:	4908      	ldr	r1, [pc, #32]	; (80165d0 <sdInit+0x90>)
 80165b0:	4808      	ldr	r0, [pc, #32]	; (80165d4 <sdInit+0x94>)
 80165b2:	f7fd f969 	bl	8013888 <cliAdd>
#endif

  return ret;
 80165b6:	79fb      	ldrb	r3, [r7, #7]
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	2000aaac 	.word	0x2000aaac
 80165c4:	40012c00 	.word	0x40012c00
 80165c8:	2000aaa9 	.word	0x2000aaa9
 80165cc:	2000aaa8 	.word	0x2000aaa8
 80165d0:	08016ac1 	.word	0x08016ac1
 80165d4:	08029b30 	.word	0x08029b30

080165d8 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 80165d8:	b480      	push	{r7}
 80165da:	af00      	add	r7, sp, #0
  return is_init;
 80165dc:	4b03      	ldr	r3, [pc, #12]	; (80165ec <sdIsInit+0x14>)
 80165de:	781b      	ldrb	r3, [r3, #0]
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	46bd      	mov	sp, r7
 80165e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e8:	4770      	bx	lr
 80165ea:	bf00      	nop
 80165ec:	2000aaa8 	.word	0x2000aaa8

080165f0 <sdIsDetected>:

bool sdIsDetected(void)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80165f4:	2000      	movs	r0, #0
 80165f6:	f7fe fabd 	bl	8014b74 <gpioPinRead>
 80165fa:	4603      	mov	r3, r0
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d003      	beq.n	8016608 <sdIsDetected+0x18>
  {
    is_detected = true;
 8016600:	4b05      	ldr	r3, [pc, #20]	; (8016618 <sdIsDetected+0x28>)
 8016602:	2201      	movs	r2, #1
 8016604:	701a      	strb	r2, [r3, #0]
 8016606:	e002      	b.n	801660e <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8016608:	4b03      	ldr	r3, [pc, #12]	; (8016618 <sdIsDetected+0x28>)
 801660a:	2200      	movs	r2, #0
 801660c:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 801660e:	4b02      	ldr	r3, [pc, #8]	; (8016618 <sdIsDetected+0x28>)
 8016610:	781b      	ldrb	r3, [r3, #0]
}
 8016612:	4618      	mov	r0, r3
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	2000aaa9 	.word	0x2000aaa9

0801661c <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 801661c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016620:	b08c      	sub	sp, #48	; 0x30
 8016622:	af00      	add	r7, sp, #0
 8016624:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8016626:	2300      	movs	r3, #0
 8016628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8016630:	4b24      	ldr	r3, [pc, #144]	; (80166c4 <sdGetInfo+0xa8>)
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d03d      	beq.n	80166b4 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8016638:	f107 0308 	add.w	r3, r7, #8
 801663c:	4619      	mov	r1, r3
 801663e:	4822      	ldr	r0, [pc, #136]	; (80166c8 <sdGetInfo+0xac>)
 8016640:	f00a fc5a 	bl	8020ef8 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8016644:	68ba      	ldr	r2, [r7, #8]
 8016646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016648:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 801664a:	68fa      	ldr	r2, [r7, #12]
 801664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664e:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8016650:	693a      	ldr	r2, [r7, #16]
 8016652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016654:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8016656:	697a      	ldr	r2, [r7, #20]
 8016658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665a:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 801665c:	69ba      	ldr	r2, [r7, #24]
 801665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016660:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8016662:	69fa      	ldr	r2, [r7, #28]
 8016664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016666:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8016668:	6a3a      	ldr	r2, [r7, #32]
 801666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801666c:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 801666e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016672:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	691b      	ldr	r3, [r3, #16]
 8016678:	2200      	movs	r2, #0
 801667a:	469a      	mov	sl, r3
 801667c:	4693      	mov	fp, r2
 801667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016680:	695b      	ldr	r3, [r3, #20]
 8016682:	2200      	movs	r2, #0
 8016684:	4698      	mov	r8, r3
 8016686:	4691      	mov	r9, r2
 8016688:	fb08 f20b 	mul.w	r2, r8, fp
 801668c:	fb0a f309 	mul.w	r3, sl, r9
 8016690:	4413      	add	r3, r2
 8016692:	fbaa 4508 	umull	r4, r5, sl, r8
 8016696:	442b      	add	r3, r5
 8016698:	461d      	mov	r5, r3
 801669a:	f04f 0200 	mov.w	r2, #0
 801669e:	f04f 0300 	mov.w	r3, #0
 80166a2:	0d22      	lsrs	r2, r4, #20
 80166a4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 80166a8:	0d2b      	lsrs	r3, r5, #20
 80166aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ac:	621a      	str	r2, [r3, #32]
    ret = true;
 80166ae:	2301      	movs	r3, #1
 80166b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 80166b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3730      	adds	r7, #48	; 0x30
 80166bc:	46bd      	mov	sp, r7
 80166be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80166c2:	bf00      	nop
 80166c4:	2000aaa8 	.word	0x2000aaa8
 80166c8:	2000aaac 	.word	0x2000aaac

080166cc <sdIsBusy>:

bool sdIsBusy(void)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80166d2:	4808      	ldr	r0, [pc, #32]	; (80166f4 <sdIsBusy+0x28>)
 80166d4:	f00a fcb8 	bl	8021048 <HAL_SD_GetCardState>
 80166d8:	4603      	mov	r3, r0
 80166da:	2b04      	cmp	r3, #4
 80166dc:	d102      	bne.n	80166e4 <sdIsBusy+0x18>
  {
    is_busy = false;
 80166de:	2300      	movs	r3, #0
 80166e0:	71fb      	strb	r3, [r7, #7]
 80166e2:	e001      	b.n	80166e8 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80166e4:	2301      	movs	r3, #1
 80166e6:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80166e8:	79fb      	ldrb	r3, [r7, #7]
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3708      	adds	r7, #8
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	2000aaac 	.word	0x2000aaac

080166f8 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b084      	sub	sp, #16
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8016700:	f7fc f935 	bl	801296e <millis>
 8016704:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8016706:	e009      	b.n	801671c <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8016708:	f7ff ffe0 	bl	80166cc <sdIsBusy>
 801670c:	4603      	mov	r3, r0
 801670e:	f083 0301 	eor.w	r3, r3, #1
 8016712:	b2db      	uxtb	r3, r3
 8016714:	2b00      	cmp	r3, #0
 8016716:	d001      	beq.n	801671c <sdIsReady+0x24>
    {
      return true;
 8016718:	2301      	movs	r3, #1
 801671a:	e008      	b.n	801672e <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 801671c:	f7fc f927 	bl	801296e <millis>
 8016720:	4602      	mov	r2, r0
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	1ad3      	subs	r3, r2, r3
 8016726:	687a      	ldr	r2, [r7, #4]
 8016728:	429a      	cmp	r2, r3
 801672a:	d8ed      	bhi.n	8016708 <sdIsReady+0x10>
    }
  }

  return false;
 801672c:	2300      	movs	r3, #0
}
 801672e:	4618      	mov	r0, r3
 8016730:	3710      	adds	r7, #16
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
	...

08016738 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b086      	sub	sp, #24
 801673c:	af00      	add	r7, sp, #0
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8016746:	2300      	movs	r3, #0
 8016748:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 801674a:	4b1e      	ldr	r3, [pc, #120]	; (80167c4 <sdReadBlocks+0x8c>)
 801674c:	2200      	movs	r2, #0
 801674e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	68fa      	ldr	r2, [r7, #12]
 8016754:	68b9      	ldr	r1, [r7, #8]
 8016756:	481c      	ldr	r0, [pc, #112]	; (80167c8 <sdReadBlocks+0x90>)
 8016758:	f009 feb6 	bl	80204c8 <HAL_SD_ReadBlocks_DMA>
 801675c:	4603      	mov	r3, r0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d12a      	bne.n	80167b8 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8016762:	f7fc f904 	bl	801296e <millis>
 8016766:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8016768:	e007      	b.n	801677a <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 801676a:	f7fc f900 	bl	801296e <millis>
 801676e:	4602      	mov	r2, r0
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	683a      	ldr	r2, [r7, #0]
 8016776:	429a      	cmp	r2, r3
 8016778:	d908      	bls.n	801678c <sdReadBlocks+0x54>
    while(is_rx_done == false)
 801677a:	4b12      	ldr	r3, [pc, #72]	; (80167c4 <sdReadBlocks+0x8c>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	b2db      	uxtb	r3, r3
 8016780:	f083 0301 	eor.w	r3, r3, #1
 8016784:	b2db      	uxtb	r3, r3
 8016786:	2b00      	cmp	r3, #0
 8016788:	d1ef      	bne.n	801676a <sdReadBlocks+0x32>
 801678a:	e00d      	b.n	80167a8 <sdReadBlocks+0x70>
      {
        break;
 801678c:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 801678e:	e00b      	b.n	80167a8 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8016790:	f7fc f8ed 	bl	801296e <millis>
 8016794:	4602      	mov	r2, r0
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	1ad3      	subs	r3, r2, r3
 801679a:	683a      	ldr	r2, [r7, #0]
 801679c:	429a      	cmp	r2, r3
 801679e:	d803      	bhi.n	80167a8 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80167a0:	4b08      	ldr	r3, [pc, #32]	; (80167c4 <sdReadBlocks+0x8c>)
 80167a2:	2200      	movs	r2, #0
 80167a4:	701a      	strb	r2, [r3, #0]
        break;
 80167a6:	e004      	b.n	80167b2 <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 80167a8:	f7ff ff90 	bl	80166cc <sdIsBusy>
 80167ac:	4603      	mov	r3, r0
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d1ee      	bne.n	8016790 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 80167b2:	4b04      	ldr	r3, [pc, #16]	; (80167c4 <sdReadBlocks+0x8c>)
 80167b4:	781b      	ldrb	r3, [r3, #0]
 80167b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80167b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3718      	adds	r7, #24
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	2000aaaa 	.word	0x2000aaaa
 80167c8:	2000aaac 	.word	0x2000aaac

080167cc <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
 80167d8:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80167da:	2300      	movs	r3, #0
 80167dc:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 80167de:	4b1f      	ldr	r3, [pc, #124]	; (801685c <sdWriteBlocks+0x90>)
 80167e0:	2200      	movs	r2, #0
 80167e2:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	68fa      	ldr	r2, [r7, #12]
 80167e8:	68b9      	ldr	r1, [r7, #8]
 80167ea:	481d      	ldr	r0, [pc, #116]	; (8016860 <sdWriteBlocks+0x94>)
 80167ec:	f009 ff56 	bl	802069c <HAL_SD_WriteBlocks_DMA>
 80167f0:	4603      	mov	r3, r0
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d12d      	bne.n	8016852 <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 80167f6:	f7fc f8ba 	bl	801296e <millis>
 80167fa:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 80167fc:	e007      	b.n	801680e <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80167fe:	f7fc f8b6 	bl	801296e <millis>
 8016802:	4602      	mov	r2, r0
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	683a      	ldr	r2, [r7, #0]
 801680a:	429a      	cmp	r2, r3
 801680c:	d908      	bls.n	8016820 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 801680e:	4b13      	ldr	r3, [pc, #76]	; (801685c <sdWriteBlocks+0x90>)
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	b2db      	uxtb	r3, r3
 8016814:	f083 0301 	eor.w	r3, r3, #1
 8016818:	b2db      	uxtb	r3, r3
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1ef      	bne.n	80167fe <sdWriteBlocks+0x32>
 801681e:	e000      	b.n	8016822 <sdWriteBlocks+0x56>
      {
        break;
 8016820:	bf00      	nop
      }
    }
    pre_time = millis();
 8016822:	f7fc f8a4 	bl	801296e <millis>
 8016826:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8016828:	e00b      	b.n	8016842 <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 801682a:	f7fc f8a0 	bl	801296e <millis>
 801682e:	4602      	mov	r2, r0
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	1ad3      	subs	r3, r2, r3
 8016834:	683a      	ldr	r2, [r7, #0]
 8016836:	429a      	cmp	r2, r3
 8016838:	d803      	bhi.n	8016842 <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 801683a:	4b08      	ldr	r3, [pc, #32]	; (801685c <sdWriteBlocks+0x90>)
 801683c:	2200      	movs	r2, #0
 801683e:	701a      	strb	r2, [r3, #0]
        break;
 8016840:	e004      	b.n	801684c <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 8016842:	f7ff ff43 	bl	80166cc <sdIsBusy>
 8016846:	4603      	mov	r3, r0
 8016848:	2b00      	cmp	r3, #0
 801684a:	d1ee      	bne.n	801682a <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 801684c:	4b03      	ldr	r3, [pc, #12]	; (801685c <sdWriteBlocks+0x90>)
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016852:	7dfb      	ldrb	r3, [r7, #23]
}
 8016854:	4618      	mov	r0, r3
 8016856:	3718      	adds	r7, #24
 8016858:	46bd      	mov	sp, r7
 801685a:	bd80      	pop	{r7, pc}
 801685c:	2000aaab 	.word	0x2000aaab
 8016860:	2000aaac 	.word	0x2000aaac

08016864 <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 801686c:	4b04      	ldr	r3, [pc, #16]	; (8016880 <HAL_SD_RxCpltCallback+0x1c>)
 801686e:	2201      	movs	r2, #1
 8016870:	701a      	strb	r2, [r3, #0]
}
 8016872:	bf00      	nop
 8016874:	370c      	adds	r7, #12
 8016876:	46bd      	mov	sp, r7
 8016878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	2000aaaa 	.word	0x2000aaaa

08016884 <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 801688c:	4b04      	ldr	r3, [pc, #16]	; (80168a0 <HAL_SD_TxCpltCallback+0x1c>)
 801688e:	2201      	movs	r2, #1
 8016890:	701a      	strb	r2, [r3, #0]
}
 8016892:	bf00      	nop
 8016894:	370c      	adds	r7, #12
 8016896:	46bd      	mov	sp, r7
 8016898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689c:	4770      	bx	lr
 801689e:	bf00      	nop
 80168a0:	2000aaab 	.word	0x2000aaab

080168a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b08c      	sub	sp, #48	; 0x30
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80168ac:	f107 031c 	add.w	r3, r7, #28
 80168b0:	2200      	movs	r2, #0
 80168b2:	601a      	str	r2, [r3, #0]
 80168b4:	605a      	str	r2, [r3, #4]
 80168b6:	609a      	str	r2, [r3, #8]
 80168b8:	60da      	str	r2, [r3, #12]
 80168ba:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	4a77      	ldr	r2, [pc, #476]	; (8016aa0 <HAL_SD_MspInit+0x1fc>)
 80168c2:	4293      	cmp	r3, r2
 80168c4:	f040 80e8 	bne.w	8016a98 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80168c8:	2300      	movs	r3, #0
 80168ca:	61bb      	str	r3, [r7, #24]
 80168cc:	4b75      	ldr	r3, [pc, #468]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168d0:	4a74      	ldr	r2, [pc, #464]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80168d6:	6313      	str	r3, [r2, #48]	; 0x30
 80168d8:	4b72      	ldr	r3, [pc, #456]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80168e0:	61bb      	str	r3, [r7, #24]
 80168e2:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80168e4:	2300      	movs	r3, #0
 80168e6:	617b      	str	r3, [r7, #20]
 80168e8:	4b6e      	ldr	r3, [pc, #440]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168ec:	4a6d      	ldr	r2, [pc, #436]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80168f2:	6453      	str	r3, [r2, #68]	; 0x44
 80168f4:	4b6b      	ldr	r3, [pc, #428]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 80168f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80168fc:	617b      	str	r3, [r7, #20]
 80168fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016900:	2300      	movs	r3, #0
 8016902:	613b      	str	r3, [r7, #16]
 8016904:	4b67      	ldr	r3, [pc, #412]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 8016906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016908:	4a66      	ldr	r2, [pc, #408]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 801690a:	f043 0301 	orr.w	r3, r3, #1
 801690e:	6313      	str	r3, [r2, #48]	; 0x30
 8016910:	4b64      	ldr	r3, [pc, #400]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 8016912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016914:	f003 0301 	and.w	r3, r3, #1
 8016918:	613b      	str	r3, [r7, #16]
 801691a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801691c:	2300      	movs	r3, #0
 801691e:	60fb      	str	r3, [r7, #12]
 8016920:	4b60      	ldr	r3, [pc, #384]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 8016922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016924:	4a5f      	ldr	r2, [pc, #380]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 8016926:	f043 0302 	orr.w	r3, r3, #2
 801692a:	6313      	str	r3, [r2, #48]	; 0x30
 801692c:	4b5d      	ldr	r3, [pc, #372]	; (8016aa4 <HAL_SD_MspInit+0x200>)
 801692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016930:	f003 0302 	and.w	r3, r3, #2
 8016934:	60fb      	str	r3, [r7, #12]
 8016936:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8016938:	f44f 7350 	mov.w	r3, #832	; 0x340
 801693c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801693e:	2302      	movs	r3, #2
 8016940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016942:	2300      	movs	r3, #0
 8016944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8016946:	2301      	movs	r3, #1
 8016948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801694a:	230c      	movs	r3, #12
 801694c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801694e:	f107 031c 	add.w	r3, r7, #28
 8016952:	4619      	mov	r1, r3
 8016954:	4854      	ldr	r0, [pc, #336]	; (8016aa8 <HAL_SD_MspInit+0x204>)
 8016956:	f008 fc1d 	bl	801f194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 801695a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 801695e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016960:	2302      	movs	r3, #2
 8016962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016964:	2300      	movs	r3, #0
 8016966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8016968:	2301      	movs	r3, #1
 801696a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 801696c:	230c      	movs	r3, #12
 801696e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016970:	f107 031c 	add.w	r3, r7, #28
 8016974:	4619      	mov	r1, r3
 8016976:	484d      	ldr	r0, [pc, #308]	; (8016aac <HAL_SD_MspInit+0x208>)
 8016978:	f008 fc0c 	bl	801f194 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 801697c:	4b4c      	ldr	r3, [pc, #304]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 801697e:	4a4d      	ldr	r2, [pc, #308]	; (8016ab4 <HAL_SD_MspInit+0x210>)
 8016980:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8016982:	4b4b      	ldr	r3, [pc, #300]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 8016984:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016988:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801698a:	4b49      	ldr	r3, [pc, #292]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 801698c:	2200      	movs	r2, #0
 801698e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016990:	4b47      	ldr	r3, [pc, #284]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 8016992:	2200      	movs	r2, #0
 8016994:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8016996:	4b46      	ldr	r3, [pc, #280]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 8016998:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801699c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801699e:	4b44      	ldr	r3, [pc, #272]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80169a4:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80169a6:	4b42      	ldr	r3, [pc, #264]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80169ac:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80169ae:	4b40      	ldr	r3, [pc, #256]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169b0:	2220      	movs	r2, #32
 80169b2:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80169b4:	4b3e      	ldr	r3, [pc, #248]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169b6:	2200      	movs	r2, #0
 80169b8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80169ba:	4b3d      	ldr	r3, [pc, #244]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169bc:	2204      	movs	r2, #4
 80169be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80169c0:	4b3b      	ldr	r3, [pc, #236]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169c2:	2203      	movs	r2, #3
 80169c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80169c6:	4b3a      	ldr	r3, [pc, #232]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80169cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80169ce:	4b38      	ldr	r3, [pc, #224]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80169d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80169d6:	4836      	ldr	r0, [pc, #216]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169d8:	f007 fcf8 	bl	801e3cc <HAL_DMA_Init>
 80169dc:	4603      	mov	r3, r0
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d001      	beq.n	80169e6 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 80169e2:	f7fc f84d 	bl	8012a80 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	4a31      	ldr	r2, [pc, #196]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169ea:	641a      	str	r2, [r3, #64]	; 0x40
 80169ec:	4a30      	ldr	r2, [pc, #192]	; (8016ab0 <HAL_SD_MspInit+0x20c>)
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80169f2:	4b31      	ldr	r3, [pc, #196]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 80169f4:	4a31      	ldr	r2, [pc, #196]	; (8016abc <HAL_SD_MspInit+0x218>)
 80169f6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80169f8:	4b2f      	ldr	r3, [pc, #188]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 80169fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80169fe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016a00:	4b2d      	ldr	r3, [pc, #180]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a02:	2240      	movs	r2, #64	; 0x40
 8016a04:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016a06:	4b2c      	ldr	r3, [pc, #176]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a08:	2200      	movs	r2, #0
 8016a0a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8016a0c:	4b2a      	ldr	r3, [pc, #168]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016a12:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016a14:	4b28      	ldr	r3, [pc, #160]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016a1a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016a1c:	4b26      	ldr	r3, [pc, #152]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016a22:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8016a24:	4b24      	ldr	r3, [pc, #144]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a26:	2220      	movs	r2, #32
 8016a28:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016a2a:	4b23      	ldr	r3, [pc, #140]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8016a30:	4b21      	ldr	r3, [pc, #132]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a32:	2204      	movs	r2, #4
 8016a34:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8016a36:	4b20      	ldr	r3, [pc, #128]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a38:	2203      	movs	r2, #3
 8016a3a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8016a3c:	4b1e      	ldr	r3, [pc, #120]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8016a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8016a44:	4b1c      	ldr	r3, [pc, #112]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016a4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8016a4c:	481a      	ldr	r0, [pc, #104]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a4e:	f007 fcbd 	bl	801e3cc <HAL_DMA_Init>
 8016a52:	4603      	mov	r3, r0
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d001      	beq.n	8016a5c <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8016a58:	f7fc f812 	bl	8012a80 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	4a16      	ldr	r2, [pc, #88]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a60:	63da      	str	r2, [r3, #60]	; 0x3c
 8016a62:	4a15      	ldr	r2, [pc, #84]	; (8016ab8 <HAL_SD_MspInit+0x214>)
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8016a68:	2200      	movs	r2, #0
 8016a6a:	2103      	movs	r1, #3
 8016a6c:	2031      	movs	r0, #49	; 0x31
 8016a6e:	f007 fc68 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8016a72:	2031      	movs	r0, #49	; 0x31
 8016a74:	f007 fc81 	bl	801e37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8016a78:	2200      	movs	r2, #0
 8016a7a:	2103      	movs	r1, #3
 8016a7c:	203b      	movs	r0, #59	; 0x3b
 8016a7e:	f007 fc60 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8016a82:	203b      	movs	r0, #59	; 0x3b
 8016a84:	f007 fc79 	bl	801e37a <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8016a88:	2200      	movs	r2, #0
 8016a8a:	2103      	movs	r1, #3
 8016a8c:	2045      	movs	r0, #69	; 0x45
 8016a8e:	f007 fc58 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8016a92:	2045      	movs	r0, #69	; 0x45
 8016a94:	f007 fc71 	bl	801e37a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8016a98:	bf00      	nop
 8016a9a:	3730      	adds	r7, #48	; 0x30
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	40012c00 	.word	0x40012c00
 8016aa4:	40023800 	.word	0x40023800
 8016aa8:	40020000 	.word	0x40020000
 8016aac:	40020400 	.word	0x40020400
 8016ab0:	2000ab30 	.word	0x2000ab30
 8016ab4:	400264a0 	.word	0x400264a0
 8016ab8:	2000ab90 	.word	0x2000ab90
 8016abc:	40026458 	.word	0x40026458

08016ac0 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 8016ac0:	b590      	push	{r4, r7, lr}
 8016ac2:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8016ac6:	af00      	add	r7, sp, #0
 8016ac8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016acc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016ad0:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8016ad8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016adc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	881b      	ldrh	r3, [r3, #0]
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	f040 8094 	bne.w	8016c12 <cliSd+0x152>
 8016aea:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016aee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	695b      	ldr	r3, [r3, #20]
 8016af6:	4979      	ldr	r1, [pc, #484]	; (8016cdc <cliSd+0x21c>)
 8016af8:	2000      	movs	r0, #0
 8016afa:	4798      	blx	r3
 8016afc:	4603      	mov	r3, r0
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f000 8087 	beq.w	8016c12 <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8016b04:	4b76      	ldr	r3, [pc, #472]	; (8016ce0 <cliSd+0x220>)
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	4619      	mov	r1, r3
 8016b0a:	4876      	ldr	r0, [pc, #472]	; (8016ce4 <cliSd+0x224>)
 8016b0c:	f7fc fdac 	bl	8013668 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8016b10:	4b75      	ldr	r3, [pc, #468]	; (8016ce8 <cliSd+0x228>)
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	4619      	mov	r1, r3
 8016b16:	4875      	ldr	r0, [pc, #468]	; (8016cec <cliSd+0x22c>)
 8016b18:	f7fc fda6 	bl	8013668 <cliPrintf>

    if (is_init == true)
 8016b1c:	4b70      	ldr	r3, [pc, #448]	; (8016ce0 <cliSd+0x220>)
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d073      	beq.n	8016c0c <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 8016b24:	f107 030c 	add.w	r3, r7, #12
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7ff fd77 	bl	801661c <sdGetInfo>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d06b      	beq.n	8016c0c <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8016b34:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b38:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	4619      	mov	r1, r3
 8016b40:	486b      	ldr	r0, [pc, #428]	; (8016cf0 <cliSd+0x230>)
 8016b42:	f7fc fd91 	bl	8013668 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8016b46:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b4a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	4619      	mov	r1, r3
 8016b52:	4868      	ldr	r0, [pc, #416]	; (8016cf4 <cliSd+0x234>)
 8016b54:	f7fc fd88 	bl	8013668 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8016b58:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b5c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b60:	689b      	ldr	r3, [r3, #8]
 8016b62:	4619      	mov	r1, r3
 8016b64:	4864      	ldr	r0, [pc, #400]	; (8016cf8 <cliSd+0x238>)
 8016b66:	f7fc fd7f 	bl	8013668 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8016b6a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b72:	68db      	ldr	r3, [r3, #12]
 8016b74:	4619      	mov	r1, r3
 8016b76:	4861      	ldr	r0, [pc, #388]	; (8016cfc <cliSd+0x23c>)
 8016b78:	f7fc fd76 	bl	8013668 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8016b7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b80:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b84:	691b      	ldr	r3, [r3, #16]
 8016b86:	4619      	mov	r1, r3
 8016b88:	485d      	ldr	r0, [pc, #372]	; (8016d00 <cliSd+0x240>)
 8016b8a:	f7fc fd6d 	bl	8013668 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8016b8e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016b92:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016b96:	695b      	ldr	r3, [r3, #20]
 8016b98:	4619      	mov	r1, r3
 8016b9a:	485a      	ldr	r0, [pc, #360]	; (8016d04 <cliSd+0x244>)
 8016b9c:	f7fc fd64 	bl	8013668 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8016ba0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016ba4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016ba8:	699b      	ldr	r3, [r3, #24]
 8016baa:	4619      	mov	r1, r3
 8016bac:	4856      	ldr	r0, [pc, #344]	; (8016d08 <cliSd+0x248>)
 8016bae:	f7fc fd5b 	bl	8013668 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8016bb2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016bb6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016bba:	69db      	ldr	r3, [r3, #28]
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	4853      	ldr	r0, [pc, #332]	; (8016d0c <cliSd+0x24c>)
 8016bc0:	f7fc fd52 	bl	8013668 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8016bc4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016bc8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016bcc:	6a18      	ldr	r0, [r3, #32]
 8016bce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016bd2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016bd6:	6a1b      	ldr	r3, [r3, #32]
 8016bd8:	0a9c      	lsrs	r4, r3, #10
 8016bda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016bde:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016be2:	6a1a      	ldr	r2, [r3, #32]
 8016be4:	4613      	mov	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4413      	add	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	0a99      	lsrs	r1, r3, #10
 8016bee:	4b48      	ldr	r3, [pc, #288]	; (8016d10 <cliSd+0x250>)
 8016bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8016bf4:	08da      	lsrs	r2, r3, #3
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	009b      	lsls	r3, r3, #2
 8016bfa:	4413      	add	r3, r2
 8016bfc:	005b      	lsls	r3, r3, #1
 8016bfe:	1aca      	subs	r2, r1, r3
 8016c00:	4613      	mov	r3, r2
 8016c02:	4622      	mov	r2, r4
 8016c04:	4601      	mov	r1, r0
 8016c06:	4843      	ldr	r0, [pc, #268]	; (8016d14 <cliSd+0x254>)
 8016c08:	f7fc fd2e 	bl	8013668 <cliPrintf>
      }
    }
    ret = true;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8016c12:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016c16:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	881b      	ldrh	r3, [r3, #0]
 8016c1e:	2b02      	cmp	r3, #2
 8016c20:	d146      	bne.n	8016cb0 <cliSd+0x1f0>
 8016c22:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016c26:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	695b      	ldr	r3, [r3, #20]
 8016c2e:	493a      	ldr	r1, [pc, #232]	; (8016d18 <cliSd+0x258>)
 8016c30:	2000      	movs	r0, #0
 8016c32:	4798      	blx	r3
 8016c34:	4603      	mov	r3, r0
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d03a      	beq.n	8016cb0 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8016c3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016c3e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	689b      	ldr	r3, [r3, #8]
 8016c46:	2001      	movs	r0, #1
 8016c48:	4798      	blx	r3
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8016c50:	f107 010c 	add.w	r1, r7, #12
 8016c54:	2364      	movs	r3, #100	; 0x64
 8016c56:	2201      	movs	r2, #1
 8016c58:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8016c5c:	f7ff fd6c 	bl	8016738 <sdReadBlocks>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d01e      	beq.n	8016ca4 <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 8016c66:	2300      	movs	r3, #0
 8016c68:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8016c6c:	e015      	b.n	8016c9a <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8016c6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016c72:	0099      	lsls	r1, r3, #2
 8016c74:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016c78:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016c7c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8016c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c84:	460a      	mov	r2, r1
 8016c86:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8016c8a:	4824      	ldr	r0, [pc, #144]	; (8016d1c <cliSd+0x25c>)
 8016c8c:	f7fc fcec 	bl	8013668 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8016c90:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016c94:	3301      	adds	r3, #1
 8016c96:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8016c9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8016ca0:	dde5      	ble.n	8016c6e <cliSd+0x1ae>
 8016ca2:	e002      	b.n	8016caa <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8016ca4:	481e      	ldr	r0, [pc, #120]	; (8016d20 <cliSd+0x260>)
 8016ca6:	f7fc fcdf 	bl	8013668 <cliPrintf>
    }

    ret = true;
 8016caa:	2301      	movs	r3, #1
 8016cac:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8016cb0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8016cb4:	f083 0301 	eor.w	r3, r3, #1
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d009      	beq.n	8016cd2 <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 8016cbe:	4819      	ldr	r0, [pc, #100]	; (8016d24 <cliSd+0x264>)
 8016cc0:	f7fc fcd2 	bl	8013668 <cliPrintf>

    if (is_init == true)
 8016cc4:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <cliSd+0x220>)
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d002      	beq.n	8016cd2 <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 8016ccc:	4816      	ldr	r0, [pc, #88]	; (8016d28 <cliSd+0x268>)
 8016cce:	f7fc fccb 	bl	8013668 <cliPrintf>
    }
  }
}
 8016cd2:	bf00      	nop
 8016cd4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd90      	pop	{r4, r7, pc}
 8016cdc:	08029b34 	.word	0x08029b34
 8016ce0:	2000aaa8 	.word	0x2000aaa8
 8016ce4:	08029b3c 	.word	0x08029b3c
 8016ce8:	2000aaa9 	.word	0x2000aaa9
 8016cec:	08029b50 	.word	0x08029b50
 8016cf0:	08029b64 	.word	0x08029b64
 8016cf4:	08029b84 	.word	0x08029b84
 8016cf8:	08029ba4 	.word	0x08029ba4
 8016cfc:	08029bc4 	.word	0x08029bc4
 8016d00:	08029be4 	.word	0x08029be4
 8016d04:	08029c04 	.word	0x08029c04
 8016d08:	08029c24 	.word	0x08029c24
 8016d0c:	08029c44 	.word	0x08029c44
 8016d10:	cccccccd 	.word	0xcccccccd
 8016d14:	08029c64 	.word	0x08029c64
 8016d18:	08029c90 	.word	0x08029c90
 8016d1c:	08029c98 	.word	0x08029c98
 8016d20:	08029cac 	.word	0x08029cac
 8016d24:	08029cbc 	.word	0x08029cbc
 8016d28:	08029cc8 	.word	0x08029cc8

08016d2c <DWT_Delay_us>:
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b084      	sub	sp, #16
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8016d34:	4b0d      	ldr	r3, [pc, #52]	; (8016d6c <DWT_Delay_us+0x40>)
 8016d36:	685b      	ldr	r3, [r3, #4]
 8016d38:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8016d3a:	f009 f8f9 	bl	801ff30 <HAL_RCC_GetHCLKFreq>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	4a0b      	ldr	r2, [pc, #44]	; (8016d70 <DWT_Delay_us+0x44>)
 8016d42:	fba2 2303 	umull	r2, r3, r2, r3
 8016d46:	0c9b      	lsrs	r3, r3, #18
 8016d48:	687a      	ldr	r2, [r7, #4]
 8016d4a:	fb02 f303 	mul.w	r3, r2, r3
 8016d4e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8016d50:	bf00      	nop
 8016d52:	4b06      	ldr	r3, [pc, #24]	; (8016d6c <DWT_Delay_us+0x40>)
 8016d54:	685a      	ldr	r2, [r3, #4]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	1ad2      	subs	r2, r2, r3
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d3f8      	bcc.n	8016d52 <DWT_Delay_us+0x26>
}
 8016d60:	bf00      	nop
 8016d62:	bf00      	nop
 8016d64:	3710      	adds	r7, #16
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
 8016d6a:	bf00      	nop
 8016d6c:	e0001000 	.word	0xe0001000
 8016d70:	431bde83 	.word	0x431bde83

08016d74 <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b08c      	sub	sp, #48	; 0x30
 8016d78:	af00      	add	r7, sp, #0
	bool ret = false;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016d80:	f107 031c 	add.w	r3, r7, #28
 8016d84:	2200      	movs	r2, #0
 8016d86:	601a      	str	r2, [r3, #0]
 8016d88:	605a      	str	r2, [r3, #4]
 8016d8a:	609a      	str	r2, [r3, #8]
 8016d8c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016d8e:	f107 0314 	add.w	r3, r7, #20
 8016d92:	2200      	movs	r2, #0
 8016d94:	601a      	str	r2, [r3, #0]
 8016d96:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8016d98:	1d3b      	adds	r3, r7, #4
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	601a      	str	r2, [r3, #0]
 8016d9e:	605a      	str	r2, [r3, #4]
 8016da0:	609a      	str	r2, [r3, #8]
 8016da2:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8016da4:	4b2e      	ldr	r3, [pc, #184]	; (8016e60 <sonarInit+0xec>)
 8016da6:	4a2f      	ldr	r2, [pc, #188]	; (8016e64 <sonarInit+0xf0>)
 8016da8:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8016daa:	4b2d      	ldr	r3, [pc, #180]	; (8016e60 <sonarInit+0xec>)
 8016dac:	225f      	movs	r2, #95	; 0x5f
 8016dae:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016db0:	4b2b      	ldr	r3, [pc, #172]	; (8016e60 <sonarInit+0xec>)
 8016db2:	2200      	movs	r2, #0
 8016db4:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8016db6:	4b2a      	ldr	r3, [pc, #168]	; (8016e60 <sonarInit+0xec>)
 8016db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dbc:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016dbe:	4b28      	ldr	r3, [pc, #160]	; (8016e60 <sonarInit+0xec>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016dc4:	4b26      	ldr	r3, [pc, #152]	; (8016e60 <sonarInit+0xec>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8016dca:	4825      	ldr	r0, [pc, #148]	; (8016e60 <sonarInit+0xec>)
 8016dcc:	f00b fb1c 	bl	8022408 <HAL_TIM_Base_Init>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d001      	beq.n	8016dda <sonarInit+0x66>
	  {
	    Error_Handler();
 8016dd6:	f7fb fe53 	bl	8012a80 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016dde:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8016de0:	f107 031c 	add.w	r3, r7, #28
 8016de4:	4619      	mov	r1, r3
 8016de6:	481e      	ldr	r0, [pc, #120]	; (8016e60 <sonarInit+0xec>)
 8016de8:	f00b fd7a 	bl	80228e0 <HAL_TIM_ConfigClockSource>
 8016dec:	4603      	mov	r3, r0
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d001      	beq.n	8016df6 <sonarInit+0x82>
	  {
	    Error_Handler();
 8016df2:	f7fb fe45 	bl	8012a80 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8016df6:	481a      	ldr	r0, [pc, #104]	; (8016e60 <sonarInit+0xec>)
 8016df8:	f00b fb31 	bl	802245e <HAL_TIM_IC_Init>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d001      	beq.n	8016e06 <sonarInit+0x92>
	  {
	    Error_Handler();
 8016e02:	f7fb fe3d 	bl	8012a80 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016e06:	2300      	movs	r3, #0
 8016e08:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8016e0e:	f107 0314 	add.w	r3, r7, #20
 8016e12:	4619      	mov	r1, r3
 8016e14:	4812      	ldr	r0, [pc, #72]	; (8016e60 <sonarInit+0xec>)
 8016e16:	f00c f8ad 	bl	8022f74 <HAL_TIMEx_MasterConfigSynchronization>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d001      	beq.n	8016e24 <sonarInit+0xb0>
	  {
	    Error_Handler();
 8016e20:	f7fb fe2e 	bl	8012a80 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8016e24:	2300      	movs	r3, #0
 8016e26:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8016e30:	2300      	movs	r3, #0
 8016e32:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8016e34:	1d3b      	adds	r3, r7, #4
 8016e36:	220c      	movs	r2, #12
 8016e38:	4619      	mov	r1, r3
 8016e3a:	4809      	ldr	r0, [pc, #36]	; (8016e60 <sonarInit+0xec>)
 8016e3c:	f00b fcb4 	bl	80227a8 <HAL_TIM_IC_ConfigChannel>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d001      	beq.n	8016e4a <sonarInit+0xd6>
	  {
	    Error_Handler();
 8016e46:	f7fb fe1b 	bl	8012a80 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8016e4a:	210c      	movs	r1, #12
 8016e4c:	4804      	ldr	r0, [pc, #16]	; (8016e60 <sonarInit+0xec>)
 8016e4e:	f00b fb3b 	bl	80224c8 <HAL_TIM_IC_Start_IT>

	return ret;
 8016e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3730      	adds	r7, #48	; 0x30
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	2000abf0 	.word	0x2000abf0
 8016e64:	40000400 	.word	0x40000400

08016e68 <Sonar_measure>:

bool Sonar_measure(void)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
	bool ret = false;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8016e72:	4b5d      	ldr	r3, [pc, #372]	; (8016fe8 <Sonar_measure+0x180>)
 8016e74:	785b      	ldrb	r3, [r3, #1]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d002      	beq.n	8016e80 <Sonar_measure+0x18>
 8016e7a:	2b01      	cmp	r3, #1
 8016e7c:	d022      	beq.n	8016ec4 <Sonar_measure+0x5c>
 8016e7e:	e0a9      	b.n	8016fd4 <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8016e80:	2103      	movs	r1, #3
 8016e82:	2007      	movs	r0, #7
 8016e84:	f7fd fdb2 	bl	80149ec <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8016e88:	2101      	movs	r1, #1
 8016e8a:	2007      	movs	r0, #7
 8016e8c:	f7fd fe20 	bl	8014ad0 <gpioPinWrite>
			DWT_Delay_us(5);
 8016e90:	2005      	movs	r0, #5
 8016e92:	f7ff ff4b 	bl	8016d2c <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8016e96:	2100      	movs	r1, #0
 8016e98:	2007      	movs	r0, #7
 8016e9a:	f7fd fe19 	bl	8014ad0 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8016e9e:	2106      	movs	r1, #6
 8016ea0:	2007      	movs	r0, #7
 8016ea2:	f7fd fda3 	bl	80149ec <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8016ea6:	4b50      	ldr	r3, [pc, #320]	; (8016fe8 <Sonar_measure+0x180>)
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8016eac:	4b4e      	ldr	r3, [pc, #312]	; (8016fe8 <Sonar_measure+0x180>)
 8016eae:	785b      	ldrb	r3, [r3, #1]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	b2da      	uxtb	r2, r3
 8016eb4:	4b4c      	ldr	r3, [pc, #304]	; (8016fe8 <Sonar_measure+0x180>)
 8016eb6:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8016eb8:	f7fb fd59 	bl	801296e <millis>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	4a4b      	ldr	r2, [pc, #300]	; (8016fec <Sonar_measure+0x184>)
 8016ec0:	6013      	str	r3, [r2, #0]
			break;
 8016ec2:	e087      	b.n	8016fd4 <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8016ec4:	4b48      	ldr	r3, [pc, #288]	; (8016fe8 <Sonar_measure+0x180>)
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	f083 0301 	eor.w	r3, r3, #1
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d06a      	beq.n	8016fa8 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8016ed2:	4b45      	ldr	r3, [pc, #276]	; (8016fe8 <Sonar_measure+0x180>)
 8016ed4:	689a      	ldr	r2, [r3, #8]
 8016ed6:	4b44      	ldr	r3, [pc, #272]	; (8016fe8 <Sonar_measure+0x180>)
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d907      	bls.n	8016eee <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8016ede:	4b42      	ldr	r3, [pc, #264]	; (8016fe8 <Sonar_measure+0x180>)
 8016ee0:	689a      	ldr	r2, [r3, #8]
 8016ee2:	4b41      	ldr	r3, [pc, #260]	; (8016fe8 <Sonar_measure+0x180>)
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	1ad3      	subs	r3, r2, r3
 8016ee8:	4a3f      	ldr	r2, [pc, #252]	; (8016fe8 <Sonar_measure+0x180>)
 8016eea:	60d3      	str	r3, [r2, #12]
 8016eec:	e00e      	b.n	8016f0c <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8016eee:	4b3e      	ldr	r3, [pc, #248]	; (8016fe8 <Sonar_measure+0x180>)
 8016ef0:	689a      	ldr	r2, [r3, #8]
 8016ef2:	4b3d      	ldr	r3, [pc, #244]	; (8016fe8 <Sonar_measure+0x180>)
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d208      	bcs.n	8016f0c <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8016efa:	4b3b      	ldr	r3, [pc, #236]	; (8016fe8 <Sonar_measure+0x180>)
 8016efc:	689a      	ldr	r2, [r3, #8]
 8016efe:	4b3a      	ldr	r3, [pc, #232]	; (8016fe8 <Sonar_measure+0x180>)
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8016f08:	4a37      	ldr	r2, [pc, #220]	; (8016fe8 <Sonar_measure+0x180>)
 8016f0a:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8016f0c:	4b36      	ldr	r3, [pc, #216]	; (8016fe8 <Sonar_measure+0x180>)
 8016f0e:	68da      	ldr	r2, [r3, #12]
 8016f10:	4613      	mov	r3, r2
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	4413      	add	r3, r2
 8016f16:	005b      	lsls	r3, r3, #1
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f9 fe5b 	bl	8010bd4 <__aeabi_ui2d>
 8016f1e:	a330      	add	r3, pc, #192	; (adr r3, 8016fe0 <Sonar_measure+0x178>)
 8016f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f24:	f7f9 fed0 	bl	8010cc8 <__aeabi_dmul>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	460b      	mov	r3, r1
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	4619      	mov	r1, r3
 8016f30:	f7fa f9a2 	bl	8011278 <__aeabi_d2uiz>
 8016f34:	4603      	mov	r3, r0
 8016f36:	4a2c      	ldr	r2, [pc, #176]	; (8016fe8 <Sonar_measure+0x180>)
 8016f38:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8016f3a:	4b2d      	ldr	r3, [pc, #180]	; (8016ff0 <Sonar_measure+0x188>)
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	3301      	adds	r3, #1
 8016f42:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8016f44:	79bb      	ldrb	r3, [r7, #6]
 8016f46:	2b0b      	cmp	r3, #11
 8016f48:	d101      	bne.n	8016f4e <Sonar_measure+0xe6>
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8016f4e:	4b26      	ldr	r3, [pc, #152]	; (8016fe8 <Sonar_measure+0x180>)
 8016f50:	695a      	ldr	r2, [r3, #20]
 8016f52:	4b27      	ldr	r3, [pc, #156]	; (8016ff0 <Sonar_measure+0x188>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	b211      	sxth	r1, r2
 8016f58:	4a26      	ldr	r2, [pc, #152]	; (8016ff4 <Sonar_measure+0x18c>)
 8016f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8016f5e:	4b24      	ldr	r3, [pc, #144]	; (8016ff0 <Sonar_measure+0x188>)
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	4a24      	ldr	r2, [pc, #144]	; (8016ff4 <Sonar_measure+0x18c>)
 8016f64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8016f68:	461a      	mov	r2, r3
 8016f6a:	4b23      	ldr	r3, [pc, #140]	; (8016ff8 <Sonar_measure+0x190>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	4413      	add	r3, r2
 8016f70:	4a21      	ldr	r2, [pc, #132]	; (8016ff8 <Sonar_measure+0x190>)
 8016f72:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8016f74:	4b20      	ldr	r3, [pc, #128]	; (8016ff8 <Sonar_measure+0x190>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	79ba      	ldrb	r2, [r7, #6]
 8016f7a:	491e      	ldr	r1, [pc, #120]	; (8016ff4 <Sonar_measure+0x18c>)
 8016f7c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8016f80:	1a9b      	subs	r3, r3, r2
 8016f82:	4a1d      	ldr	r2, [pc, #116]	; (8016ff8 <Sonar_measure+0x190>)
 8016f84:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8016f86:	79bb      	ldrb	r3, [r7, #6]
 8016f88:	4a19      	ldr	r2, [pc, #100]	; (8016ff0 <Sonar_measure+0x188>)
 8016f8a:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8016f8c:	4b1a      	ldr	r3, [pc, #104]	; (8016ff8 <Sonar_measure+0x190>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	4a1a      	ldr	r2, [pc, #104]	; (8016ffc <Sonar_measure+0x194>)
 8016f92:	fba2 2303 	umull	r2, r3, r2, r3
 8016f96:	08db      	lsrs	r3, r3, #3
 8016f98:	4a13      	ldr	r2, [pc, #76]	; (8016fe8 <Sonar_measure+0x180>)
 8016f9a:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8016f9c:	4b12      	ldr	r3, [pc, #72]	; (8016fe8 <Sonar_measure+0x180>)
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	705a      	strb	r2, [r3, #1]
				ret = true;
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8016fa6:	e014      	b.n	8016fd2 <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8016fa8:	f7fb fce1 	bl	801296e <millis>
 8016fac:	4602      	mov	r2, r0
 8016fae:	4b0f      	ldr	r3, [pc, #60]	; (8016fec <Sonar_measure+0x184>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	1ad3      	subs	r3, r2, r3
 8016fb4:	2b18      	cmp	r3, #24
 8016fb6:	d90c      	bls.n	8016fd2 <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8016fb8:	4b0b      	ldr	r3, [pc, #44]	; (8016fe8 <Sonar_measure+0x180>)
 8016fba:	691b      	ldr	r3, [r3, #16]
 8016fbc:	3301      	adds	r3, #1
 8016fbe:	4a0a      	ldr	r2, [pc, #40]	; (8016fe8 <Sonar_measure+0x180>)
 8016fc0:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8016fc2:	4b09      	ldr	r3, [pc, #36]	; (8016fe8 <Sonar_measure+0x180>)
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8016fc8:	4b07      	ldr	r3, [pc, #28]	; (8016fe8 <Sonar_measure+0x180>)
 8016fca:	2200      	movs	r2, #0
 8016fcc:	705a      	strb	r2, [r3, #1]
					ret = false;
 8016fce:	2300      	movs	r3, #0
 8016fd0:	71fb      	strb	r3, [r7, #7]
			break;
 8016fd2:	bf00      	nop
	}
	return ret;
 8016fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3708      	adds	r7, #8
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}
 8016fde:	bf00      	nop
 8016fe0:	75f6fd22 	.word	0x75f6fd22
 8016fe4:	3f919ce0 	.word	0x3f919ce0
 8016fe8:	2000ac30 	.word	0x2000ac30
 8016fec:	2000ac4c 	.word	0x2000ac4c
 8016ff0:	2000ac50 	.word	0x2000ac50
 8016ff4:	2000ac54 	.word	0x2000ac54
 8016ff8:	2000ac6c 	.word	0x2000ac6c
 8016ffc:	cccccccd 	.word	0xcccccccd

08017000 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b08a      	sub	sp, #40	; 0x28
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017008:	f107 0314 	add.w	r3, r7, #20
 801700c:	2200      	movs	r2, #0
 801700e:	601a      	str	r2, [r3, #0]
 8017010:	605a      	str	r2, [r3, #4]
 8017012:	609a      	str	r2, [r3, #8]
 8017014:	60da      	str	r2, [r3, #12]
 8017016:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	4a1d      	ldr	r2, [pc, #116]	; (8017094 <HAL_TIM_Base_MspInit+0x94>)
 801701e:	4293      	cmp	r3, r2
 8017020:	d133      	bne.n	801708a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8017022:	2300      	movs	r3, #0
 8017024:	613b      	str	r3, [r7, #16]
 8017026:	4b1c      	ldr	r3, [pc, #112]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 8017028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801702a:	4a1b      	ldr	r2, [pc, #108]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 801702c:	f043 0302 	orr.w	r3, r3, #2
 8017030:	6413      	str	r3, [r2, #64]	; 0x40
 8017032:	4b19      	ldr	r3, [pc, #100]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 8017034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017036:	f003 0302 	and.w	r3, r3, #2
 801703a:	613b      	str	r3, [r7, #16]
 801703c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801703e:	2300      	movs	r3, #0
 8017040:	60fb      	str	r3, [r7, #12]
 8017042:	4b15      	ldr	r3, [pc, #84]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 8017044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017046:	4a14      	ldr	r2, [pc, #80]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 8017048:	f043 0302 	orr.w	r3, r3, #2
 801704c:	6313      	str	r3, [r2, #48]	; 0x30
 801704e:	4b12      	ldr	r3, [pc, #72]	; (8017098 <HAL_TIM_Base_MspInit+0x98>)
 8017050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017052:	f003 0302 	and.w	r3, r3, #2
 8017056:	60fb      	str	r3, [r7, #12]
 8017058:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801705a:	2302      	movs	r3, #2
 801705c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801705e:	2302      	movs	r3, #2
 8017060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017062:	2300      	movs	r3, #0
 8017064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017066:	2300      	movs	r3, #0
 8017068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801706a:	2302      	movs	r3, #2
 801706c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801706e:	f107 0314 	add.w	r3, r7, #20
 8017072:	4619      	mov	r1, r3
 8017074:	4809      	ldr	r0, [pc, #36]	; (801709c <HAL_TIM_Base_MspInit+0x9c>)
 8017076:	f008 f88d 	bl	801f194 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 801707a:	2200      	movs	r2, #0
 801707c:	2101      	movs	r1, #1
 801707e:	201d      	movs	r0, #29
 8017080:	f007 f95f 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8017084:	201d      	movs	r0, #29
 8017086:	f007 f978 	bl	801e37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801708a:	bf00      	nop
 801708c:	3728      	adds	r7, #40	; 0x28
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
 8017092:	bf00      	nop
 8017094:	40000400 	.word	0x40000400
 8017098:	40023800 	.word	0x40023800
 801709c:	40020400 	.word	0x40020400

080170a0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80170a0:	b480      	push	{r7}
 80170a2:	b083      	sub	sp, #12
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	7f1b      	ldrb	r3, [r3, #28]
 80170ac:	2b08      	cmp	r3, #8
 80170ae:	d129      	bne.n	8017104 <HAL_TIM_IC_CaptureCallback+0x64>
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	4a16      	ldr	r2, [pc, #88]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170b6:	4293      	cmp	r3, r2
 80170b8:	d124      	bne.n	8017104 <HAL_TIM_IC_CaptureCallback+0x64>
 80170ba:	4b16      	ldr	r3, [pc, #88]	; (8017114 <HAL_TIM_IC_CaptureCallback+0x74>)
 80170bc:	781b      	ldrb	r3, [r3, #0]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d020      	beq.n	8017104 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 80170c2:	4b15      	ldr	r3, [pc, #84]	; (8017118 <HAL_TIM_IC_CaptureCallback+0x78>)
 80170c4:	691b      	ldr	r3, [r3, #16]
 80170c6:	f003 0302 	and.w	r3, r3, #2
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d00d      	beq.n	80170ea <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 80170ce:	4b10      	ldr	r3, [pc, #64]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170d0:	2200      	movs	r2, #0
 80170d2:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 80170d4:	4b0e      	ldr	r3, [pc, #56]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170d8:	4a0e      	ldr	r2, [pc, #56]	; (8017114 <HAL_TIM_IC_CaptureCallback+0x74>)
 80170da:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 80170dc:	4b0c      	ldr	r3, [pc, #48]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170de:	6a1b      	ldr	r3, [r3, #32]
 80170e0:	4a0b      	ldr	r2, [pc, #44]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80170e6:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 80170e8:	e00c      	b.n	8017104 <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 80170ea:	4b09      	ldr	r3, [pc, #36]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80170ee:	4a09      	ldr	r2, [pc, #36]	; (8017114 <HAL_TIM_IC_CaptureCallback+0x74>)
 80170f0:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 80170f2:	4b07      	ldr	r3, [pc, #28]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170f4:	6a1b      	ldr	r3, [r3, #32]
 80170f6:	4a06      	ldr	r2, [pc, #24]	; (8017110 <HAL_TIM_IC_CaptureCallback+0x70>)
 80170f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80170fc:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 80170fe:	4b05      	ldr	r3, [pc, #20]	; (8017114 <HAL_TIM_IC_CaptureCallback+0x74>)
 8017100:	2200      	movs	r2, #0
 8017102:	701a      	strb	r2, [r3, #0]
}
 8017104:	bf00      	nop
 8017106:	370c      	adds	r7, #12
 8017108:	46bd      	mov	sp, r7
 801710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710e:	4770      	bx	lr
 8017110:	40000400 	.word	0x40000400
 8017114:	2000ac30 	.word	0x2000ac30
 8017118:	40020400 	.word	0x40020400

0801711c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
  bool ret = true;
 8017122:	2301      	movs	r3, #1
 8017124:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8017126:	2300      	movs	r3, #0
 8017128:	607b      	str	r3, [r7, #4]
 801712a:	e03d      	b.n	80171a8 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 801712c:	4923      	ldr	r1, [pc, #140]	; (80171bc <spiInit+0xa0>)
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	4613      	mov	r3, r2
 8017132:	009b      	lsls	r3, r3, #2
 8017134:	4413      	add	r3, r2
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	440b      	add	r3, r1
 801713a:	2200      	movs	r2, #0
 801713c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 801713e:	491f      	ldr	r1, [pc, #124]	; (80171bc <spiInit+0xa0>)
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	4613      	mov	r3, r2
 8017144:	009b      	lsls	r3, r3, #2
 8017146:	4413      	add	r3, r2
 8017148:	009b      	lsls	r3, r3, #2
 801714a:	440b      	add	r3, r1
 801714c:	3301      	adds	r3, #1
 801714e:	2201      	movs	r2, #1
 8017150:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8017152:	491a      	ldr	r1, [pc, #104]	; (80171bc <spiInit+0xa0>)
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	4613      	mov	r3, r2
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	4413      	add	r3, r2
 801715c:	009b      	lsls	r3, r3, #2
 801715e:	440b      	add	r3, r1
 8017160:	3302      	adds	r3, #2
 8017162:	2200      	movs	r2, #0
 8017164:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8017166:	4915      	ldr	r1, [pc, #84]	; (80171bc <spiInit+0xa0>)
 8017168:	687a      	ldr	r2, [r7, #4]
 801716a:	4613      	mov	r3, r2
 801716c:	009b      	lsls	r3, r3, #2
 801716e:	4413      	add	r3, r2
 8017170:	009b      	lsls	r3, r3, #2
 8017172:	440b      	add	r3, r1
 8017174:	3304      	adds	r3, #4
 8017176:	2200      	movs	r2, #0
 8017178:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 801717a:	4910      	ldr	r1, [pc, #64]	; (80171bc <spiInit+0xa0>)
 801717c:	687a      	ldr	r2, [r7, #4]
 801717e:	4613      	mov	r3, r2
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	4413      	add	r3, r2
 8017184:	009b      	lsls	r3, r3, #2
 8017186:	440b      	add	r3, r1
 8017188:	3310      	adds	r3, #16
 801718a:	2200      	movs	r2, #0
 801718c:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 801718e:	490b      	ldr	r1, [pc, #44]	; (80171bc <spiInit+0xa0>)
 8017190:	687a      	ldr	r2, [r7, #4]
 8017192:	4613      	mov	r3, r2
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	4413      	add	r3, r2
 8017198:	009b      	lsls	r3, r3, #2
 801719a:	440b      	add	r3, r1
 801719c:	330c      	adds	r3, #12
 801719e:	2200      	movs	r2, #0
 80171a0:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	3301      	adds	r3, #1
 80171a6:	607b      	str	r3, [r7, #4]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	ddbe      	ble.n	801712c <spiInit+0x10>
  }

  return ret;
 80171ae:	78fb      	ldrb	r3, [r7, #3]
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	370c      	adds	r7, #12
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr
 80171bc:	2000ac70 	.word	0x2000ac70

080171c0 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b084      	sub	sp, #16
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	4603      	mov	r3, r0
 80171c8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80171ca:	2300      	movs	r3, #0
 80171cc:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 80171ce:	79fa      	ldrb	r2, [r7, #7]
 80171d0:	4613      	mov	r3, r2
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	4413      	add	r3, r2
 80171d6:	009b      	lsls	r3, r3, #2
 80171d8:	4a23      	ldr	r2, [pc, #140]	; (8017268 <spiBegin+0xa8>)
 80171da:	4413      	add	r3, r2
 80171dc:	60bb      	str	r3, [r7, #8]

  switch(ch)
 80171de:	79fb      	ldrb	r3, [r7, #7]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d001      	beq.n	80171e8 <spiBegin+0x28>
 80171e4:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 80171e6:	e03a      	b.n	801725e <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	4a20      	ldr	r2, [pc, #128]	; (801726c <spiBegin+0xac>)
 80171ec:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	4a1f      	ldr	r2, [pc, #124]	; (8017270 <spiBegin+0xb0>)
 80171f2:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 80171f4:	4b1d      	ldr	r3, [pc, #116]	; (801726c <spiBegin+0xac>)
 80171f6:	4a1f      	ldr	r2, [pc, #124]	; (8017274 <spiBegin+0xb4>)
 80171f8:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 80171fa:	4b1c      	ldr	r3, [pc, #112]	; (801726c <spiBegin+0xac>)
 80171fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017200:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017202:	4b1a      	ldr	r3, [pc, #104]	; (801726c <spiBegin+0xac>)
 8017204:	2200      	movs	r2, #0
 8017206:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017208:	4b18      	ldr	r3, [pc, #96]	; (801726c <spiBegin+0xac>)
 801720a:	2200      	movs	r2, #0
 801720c:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801720e:	4b17      	ldr	r3, [pc, #92]	; (801726c <spiBegin+0xac>)
 8017210:	2200      	movs	r2, #0
 8017212:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017214:	4b15      	ldr	r3, [pc, #84]	; (801726c <spiBegin+0xac>)
 8017216:	2200      	movs	r2, #0
 8017218:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 801721a:	4b14      	ldr	r3, [pc, #80]	; (801726c <spiBegin+0xac>)
 801721c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017220:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017222:	4b12      	ldr	r3, [pc, #72]	; (801726c <spiBegin+0xac>)
 8017224:	2200      	movs	r2, #0
 8017226:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017228:	4b10      	ldr	r3, [pc, #64]	; (801726c <spiBegin+0xac>)
 801722a:	2200      	movs	r2, #0
 801722c:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801722e:	4b0f      	ldr	r3, [pc, #60]	; (801726c <spiBegin+0xac>)
 8017230:	2200      	movs	r2, #0
 8017232:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017234:	4b0d      	ldr	r3, [pc, #52]	; (801726c <spiBegin+0xac>)
 8017236:	2200      	movs	r2, #0
 8017238:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 801723a:	4b0c      	ldr	r3, [pc, #48]	; (801726c <spiBegin+0xac>)
 801723c:	220a      	movs	r2, #10
 801723e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8017240:	480a      	ldr	r0, [pc, #40]	; (801726c <spiBegin+0xac>)
 8017242:	f00a fc1d 	bl	8021a80 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8017246:	4809      	ldr	r0, [pc, #36]	; (801726c <spiBegin+0xac>)
 8017248:	f00a fbb6 	bl	80219b8 <HAL_SPI_Init>
 801724c:	4603      	mov	r3, r0
 801724e:	2b00      	cmp	r3, #0
 8017250:	d104      	bne.n	801725c <spiBegin+0x9c>
        p_spi->is_open = true;
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	2201      	movs	r2, #1
 8017256:	701a      	strb	r2, [r3, #0]
        ret = true;
 8017258:	2301      	movs	r3, #1
 801725a:	73fb      	strb	r3, [r7, #15]
      break;
 801725c:	bf00      	nop
  }

  return ret;
 801725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017260:	4618      	mov	r0, r3
 8017262:	3710      	adds	r7, #16
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	2000ac70 	.word	0x2000ac70
 801726c:	2000ac84 	.word	0x2000ac84
 8017270:	2000acdc 	.word	0x2000acdc
 8017274:	40013000 	.word	0x40013000

08017278 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	4603      	mov	r3, r0
 8017280:	460a      	mov	r2, r1
 8017282:	71fb      	strb	r3, [r7, #7]
 8017284:	4613      	mov	r3, r2
 8017286:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8017288:	79fa      	ldrb	r2, [r7, #7]
 801728a:	4613      	mov	r3, r2
 801728c:	009b      	lsls	r3, r3, #2
 801728e:	4413      	add	r3, r2
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	4a2a      	ldr	r2, [pc, #168]	; (801733c <spiSetDataMode+0xc4>)
 8017294:	4413      	add	r3, r2
 8017296:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	f083 0301 	eor.w	r3, r3, #1
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d146      	bne.n	8017334 <spiSetDataMode+0xbc>


  switch( dataMode )
 80172a6:	79bb      	ldrb	r3, [r7, #6]
 80172a8:	2b03      	cmp	r3, #3
 80172aa:	d844      	bhi.n	8017336 <spiSetDataMode+0xbe>
 80172ac:	a201      	add	r2, pc, #4	; (adr r2, 80172b4 <spiSetDataMode+0x3c>)
 80172ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172b2:	bf00      	nop
 80172b4:	080172c5 	.word	0x080172c5
 80172b8:	080172e1 	.word	0x080172e1
 80172bc:	080172fd 	.word	0x080172fd
 80172c0:	08017319 	.word	0x08017319
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	689b      	ldr	r3, [r3, #8]
 80172c8:	2200      	movs	r2, #0
 80172ca:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80172cc:	68fb      	ldr	r3, [r7, #12]
 80172ce:	689b      	ldr	r3, [r3, #8]
 80172d0:	2200      	movs	r2, #0
 80172d2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	689b      	ldr	r3, [r3, #8]
 80172d8:	4618      	mov	r0, r3
 80172da:	f00a fb6d 	bl	80219b8 <HAL_SPI_Init>
      break;
 80172de:	e02a      	b.n	8017336 <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	689b      	ldr	r3, [r3, #8]
 80172e4:	2200      	movs	r2, #0
 80172e6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	689b      	ldr	r3, [r3, #8]
 80172ec:	2201      	movs	r2, #1
 80172ee:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	689b      	ldr	r3, [r3, #8]
 80172f4:	4618      	mov	r0, r3
 80172f6:	f00a fb5f 	bl	80219b8 <HAL_SPI_Init>
      break;
 80172fa:	e01c      	b.n	8017336 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	689b      	ldr	r3, [r3, #8]
 8017300:	2202      	movs	r2, #2
 8017302:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	689b      	ldr	r3, [r3, #8]
 8017308:	2200      	movs	r2, #0
 801730a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	689b      	ldr	r3, [r3, #8]
 8017310:	4618      	mov	r0, r3
 8017312:	f00a fb51 	bl	80219b8 <HAL_SPI_Init>
      break;
 8017316:	e00e      	b.n	8017336 <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	689b      	ldr	r3, [r3, #8]
 801731c:	2202      	movs	r2, #2
 801731e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	689b      	ldr	r3, [r3, #8]
 8017324:	2201      	movs	r2, #1
 8017326:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	689b      	ldr	r3, [r3, #8]
 801732c:	4618      	mov	r0, r3
 801732e:	f00a fb43 	bl	80219b8 <HAL_SPI_Init>
      break;
 8017332:	e000      	b.n	8017336 <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 8017334:	bf00      	nop
  }
}
 8017336:	3710      	adds	r7, #16
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}
 801733c:	2000ac70 	.word	0x2000ac70

08017340 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	4603      	mov	r3, r0
 8017348:	460a      	mov	r2, r1
 801734a:	71fb      	strb	r3, [r7, #7]
 801734c:	4613      	mov	r3, r2
 801734e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8017350:	79fa      	ldrb	r2, [r7, #7]
 8017352:	4613      	mov	r3, r2
 8017354:	009b      	lsls	r3, r3, #2
 8017356:	4413      	add	r3, r2
 8017358:	009b      	lsls	r3, r3, #2
 801735a:	4a10      	ldr	r2, [pc, #64]	; (801739c <spiSetBitWidth+0x5c>)
 801735c:	4413      	add	r3, r2
 801735e:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	f083 0301 	eor.w	r3, r3, #1
 8017368:	b2db      	uxtb	r3, r3
 801736a:	2b00      	cmp	r3, #0
 801736c:	d111      	bne.n	8017392 <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	689b      	ldr	r3, [r3, #8]
 8017372:	2200      	movs	r2, #0
 8017374:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8017376:	79bb      	ldrb	r3, [r7, #6]
 8017378:	2b10      	cmp	r3, #16
 801737a:	d104      	bne.n	8017386 <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	689b      	ldr	r3, [r3, #8]
 8017380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017384:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	689b      	ldr	r3, [r3, #8]
 801738a:	4618      	mov	r0, r3
 801738c:	f00a fb14 	bl	80219b8 <HAL_SPI_Init>
 8017390:	e000      	b.n	8017394 <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 8017392:	bf00      	nop
}
 8017394:	3710      	adds	r7, #16
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}
 801739a:	bf00      	nop
 801739c:	2000ac70 	.word	0x2000ac70

080173a0 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b086      	sub	sp, #24
 80173a4:	af02      	add	r7, sp, #8
 80173a6:	4603      	mov	r3, r0
 80173a8:	460a      	mov	r2, r1
 80173aa:	71fb      	strb	r3, [r7, #7]
 80173ac:	4613      	mov	r3, r2
 80173ae:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80173b0:	79fa      	ldrb	r2, [r7, #7]
 80173b2:	4613      	mov	r3, r2
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	4413      	add	r3, r2
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	4a0d      	ldr	r2, [pc, #52]	; (80173f0 <spiTransfer8+0x50>)
 80173bc:	4413      	add	r3, r2
 80173be:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	f083 0301 	eor.w	r3, r3, #1
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d001      	beq.n	80173d2 <spiTransfer8+0x32>
 80173ce:	2300      	movs	r3, #0
 80173d0:	e00a      	b.n	80173e8 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	6898      	ldr	r0, [r3, #8]
 80173d6:	f107 020b 	add.w	r2, r7, #11
 80173da:	1db9      	adds	r1, r7, #6
 80173dc:	230a      	movs	r3, #10
 80173de:	9300      	str	r3, [sp, #0]
 80173e0:	2301      	movs	r3, #1
 80173e2:	f00a fb75 	bl	8021ad0 <HAL_SPI_TransmitReceive>

  return ret;
 80173e6:	7afb      	ldrb	r3, [r7, #11]
}
 80173e8:	4618      	mov	r0, r3
 80173ea:	3710      	adds	r7, #16
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	2000ac70 	.word	0x2000ac70

080173f4 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b086      	sub	sp, #24
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	4603      	mov	r3, r0
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
 8017400:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8017402:	7bfa      	ldrb	r2, [r7, #15]
 8017404:	4613      	mov	r3, r2
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	4413      	add	r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	4a0c      	ldr	r2, [pc, #48]	; (8017440 <spiDmaTxStart+0x4c>)
 801740e:	4413      	add	r3, r2
 8017410:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	f083 0301 	eor.w	r3, r3, #1
 801741a:	b2db      	uxtb	r3, r3
 801741c:	2b00      	cmp	r3, #0
 801741e:	d10b      	bne.n	8017438 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	2200      	movs	r2, #0
 8017424:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8017426:	697b      	ldr	r3, [r7, #20]
 8017428:	689b      	ldr	r3, [r3, #8]
 801742a:	687a      	ldr	r2, [r7, #4]
 801742c:	b292      	uxth	r2, r2
 801742e:	68b9      	ldr	r1, [r7, #8]
 8017430:	4618      	mov	r0, r3
 8017432:	f00a fcef 	bl	8021e14 <HAL_SPI_Transmit_DMA>
 8017436:	e000      	b.n	801743a <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8017438:	bf00      	nop
}
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	2000ac70 	.word	0x2000ac70

08017444 <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	b086      	sub	sp, #24
 8017448:	af00      	add	r7, sp, #0
 801744a:	60b9      	str	r1, [r7, #8]
 801744c:	607a      	str	r2, [r7, #4]
 801744e:	603b      	str	r3, [r7, #0]
 8017450:	4603      	mov	r3, r0
 8017452:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 8017454:	2301      	movs	r3, #1
 8017456:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8017458:	7bfb      	ldrb	r3, [r7, #15]
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	68b9      	ldr	r1, [r7, #8]
 801745e:	4618      	mov	r0, r3
 8017460:	f7ff ffc8 	bl	80173f4 <spiDmaTxStart>

  t_time = millis();
 8017464:	f7fb fa83 	bl	801296e <millis>
 8017468:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 801746a:	683b      	ldr	r3, [r7, #0]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d101      	bne.n	8017474 <spiDmaTxTransfer+0x30>
 8017470:	2301      	movs	r3, #1
 8017472:	e013      	b.n	801749c <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8017474:	7bfb      	ldrb	r3, [r7, #15]
 8017476:	4618      	mov	r0, r3
 8017478:	f000 f814 	bl	80174a4 <spiDmaTxIsDone>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d10a      	bne.n	8017498 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8017482:	f7fb fa74 	bl	801296e <millis>
 8017486:	4602      	mov	r2, r0
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	1ad3      	subs	r3, r2, r3
 801748c:	683a      	ldr	r2, [r7, #0]
 801748e:	429a      	cmp	r2, r3
 8017490:	d2f0      	bcs.n	8017474 <spiDmaTxTransfer+0x30>
    {
      ret = false;
 8017492:	2300      	movs	r3, #0
 8017494:	75fb      	strb	r3, [r7, #23]
      break;
 8017496:	e000      	b.n	801749a <spiDmaTxTransfer+0x56>
      break;
 8017498:	bf00      	nop
    }
  }

  return ret;
 801749a:	7dfb      	ldrb	r3, [r7, #23]
}
 801749c:	4618      	mov	r0, r3
 801749e:	3718      	adds	r7, #24
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80174a4:	b480      	push	{r7}
 80174a6:	b085      	sub	sp, #20
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	4603      	mov	r3, r0
 80174ac:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80174ae:	79fa      	ldrb	r2, [r7, #7]
 80174b0:	4613      	mov	r3, r2
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	4413      	add	r3, r2
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	4a09      	ldr	r2, [pc, #36]	; (80174e0 <spiDmaTxIsDone+0x3c>)
 80174ba:	4413      	add	r3, r2
 80174bc:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	f083 0301 	eor.w	r3, r3, #1
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d001      	beq.n	80174d0 <spiDmaTxIsDone+0x2c>
 80174cc:	2301      	movs	r3, #1
 80174ce:	e001      	b.n	80174d4 <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	785b      	ldrb	r3, [r3, #1]
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3714      	adds	r7, #20
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr
 80174e0:	2000ac70 	.word	0x2000ac70

080174e4 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80174e4:	b480      	push	{r7}
 80174e6:	b085      	sub	sp, #20
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	4603      	mov	r3, r0
 80174ec:	6039      	str	r1, [r7, #0]
 80174ee:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80174f0:	79fa      	ldrb	r2, [r7, #7]
 80174f2:	4613      	mov	r3, r2
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	4413      	add	r3, r2
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	4a0a      	ldr	r2, [pc, #40]	; (8017524 <spiAttachTxInterrupt+0x40>)
 80174fc:	4413      	add	r3, r2
 80174fe:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	f083 0301 	eor.w	r3, r3, #1
 8017508:	b2db      	uxtb	r3, r3
 801750a:	2b00      	cmp	r3, #0
 801750c:	d103      	bne.n	8017516 <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	683a      	ldr	r2, [r7, #0]
 8017512:	605a      	str	r2, [r3, #4]
 8017514:	e000      	b.n	8017518 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 8017516:	bf00      	nop
}
 8017518:	3714      	adds	r7, #20
 801751a:	46bd      	mov	sp, r7
 801751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017520:	4770      	bx	lr
 8017522:	bf00      	nop
 8017524:	2000ac70 	.word	0x2000ac70

08017528 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681a      	ldr	r2, [r3, #0]
 8017534:	4b06      	ldr	r3, [pc, #24]	; (8017550 <HAL_SPI_ErrorCallback+0x28>)
 8017536:	689b      	ldr	r3, [r3, #8]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	429a      	cmp	r2, r3
 801753c:	d102      	bne.n	8017544 <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 801753e:	4b04      	ldr	r3, [pc, #16]	; (8017550 <HAL_SPI_ErrorCallback+0x28>)
 8017540:	2201      	movs	r2, #1
 8017542:	709a      	strb	r2, [r3, #2]
  }
}
 8017544:	bf00      	nop
 8017546:	370c      	adds	r7, #12
 8017548:	46bd      	mov	sp, r7
 801754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801754e:	4770      	bx	lr
 8017550:	2000ac70 	.word	0x2000ac70

08017554 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b084      	sub	sp, #16
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681a      	ldr	r2, [r3, #0]
 8017560:	4b0a      	ldr	r3, [pc, #40]	; (801758c <HAL_SPI_TxCpltCallback+0x38>)
 8017562:	689b      	ldr	r3, [r3, #8]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	429a      	cmp	r2, r3
 8017568:	d10b      	bne.n	8017582 <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 801756a:	4b08      	ldr	r3, [pc, #32]	; (801758c <HAL_SPI_TxCpltCallback+0x38>)
 801756c:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	2201      	movs	r2, #1
 8017572:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d002      	beq.n	8017582 <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	4798      	blx	r3
    }
  }
}
 8017582:	bf00      	nop
 8017584:	3710      	adds	r7, #16
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	2000ac70 	.word	0x2000ac70

08017590 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b08a      	sub	sp, #40	; 0x28
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017598:	f107 0314 	add.w	r3, r7, #20
 801759c:	2200      	movs	r2, #0
 801759e:	601a      	str	r2, [r3, #0]
 80175a0:	605a      	str	r2, [r3, #4]
 80175a2:	609a      	str	r2, [r3, #8]
 80175a4:	60da      	str	r2, [r3, #12]
 80175a6:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	4a40      	ldr	r2, [pc, #256]	; (80176b0 <HAL_SPI_MspInit+0x120>)
 80175ae:	4293      	cmp	r3, r2
 80175b0:	d179      	bne.n	80176a6 <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 80175b2:	2300      	movs	r3, #0
 80175b4:	613b      	str	r3, [r7, #16]
 80175b6:	4b3f      	ldr	r3, [pc, #252]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175ba:	4a3e      	ldr	r2, [pc, #248]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80175c0:	6313      	str	r3, [r2, #48]	; 0x30
 80175c2:	4b3c      	ldr	r3, [pc, #240]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80175ca:	613b      	str	r3, [r7, #16]
 80175cc:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80175ce:	2300      	movs	r3, #0
 80175d0:	60fb      	str	r3, [r7, #12]
 80175d2:	4b38      	ldr	r3, [pc, #224]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175d6:	4a37      	ldr	r2, [pc, #220]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80175dc:	6453      	str	r3, [r2, #68]	; 0x44
 80175de:	4b35      	ldr	r3, [pc, #212]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80175e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80175e6:	60fb      	str	r3, [r7, #12]
 80175e8:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80175ea:	2300      	movs	r3, #0
 80175ec:	60bb      	str	r3, [r7, #8]
 80175ee:	4b31      	ldr	r3, [pc, #196]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175f2:	4a30      	ldr	r2, [pc, #192]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175f4:	f043 0301 	orr.w	r3, r3, #1
 80175f8:	6313      	str	r3, [r2, #48]	; 0x30
 80175fa:	4b2e      	ldr	r3, [pc, #184]	; (80176b4 <HAL_SPI_MspInit+0x124>)
 80175fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175fe:	f003 0301 	and.w	r3, r3, #1
 8017602:	60bb      	str	r3, [r7, #8]
 8017604:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8017606:	23a0      	movs	r3, #160	; 0xa0
 8017608:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801760a:	2302      	movs	r3, #2
 801760c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801760e:	2300      	movs	r3, #0
 8017610:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017612:	2303      	movs	r3, #3
 8017614:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017616:	2305      	movs	r3, #5
 8017618:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801761a:	f107 0314 	add.w	r3, r7, #20
 801761e:	4619      	mov	r1, r3
 8017620:	4825      	ldr	r0, [pc, #148]	; (80176b8 <HAL_SPI_MspInit+0x128>)
 8017622:	f007 fdb7 	bl	801f194 <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 8017626:	4b25      	ldr	r3, [pc, #148]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017628:	4a25      	ldr	r2, [pc, #148]	; (80176c0 <HAL_SPI_MspInit+0x130>)
 801762a:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 801762c:	4b23      	ldr	r3, [pc, #140]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801762e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8017632:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8017634:	4b21      	ldr	r3, [pc, #132]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017636:	2240      	movs	r2, #64	; 0x40
 8017638:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801763a:	4b20      	ldr	r3, [pc, #128]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801763c:	2200      	movs	r2, #0
 801763e:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8017640:	4b1e      	ldr	r3, [pc, #120]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017646:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017648:	4b1c      	ldr	r3, [pc, #112]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801764a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801764e:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017650:	4b1a      	ldr	r3, [pc, #104]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017656:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8017658:	4b18      	ldr	r3, [pc, #96]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801765a:	2200      	movs	r2, #0
 801765c:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801765e:	4b17      	ldr	r3, [pc, #92]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017660:	2200      	movs	r2, #0
 8017662:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017664:	4b15      	ldr	r3, [pc, #84]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017666:	2200      	movs	r2, #0
 8017668:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 801766a:	4814      	ldr	r0, [pc, #80]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801766c:	f006 feae 	bl	801e3cc <HAL_DMA_Init>
 8017670:	4603      	mov	r3, r0
 8017672:	2b00      	cmp	r3, #0
 8017674:	d001      	beq.n	801767a <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 8017676:	f7fb fa03 	bl	8012a80 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	4a0f      	ldr	r2, [pc, #60]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 801767e:	649a      	str	r2, [r3, #72]	; 0x48
 8017680:	4a0e      	ldr	r2, [pc, #56]	; (80176bc <HAL_SPI_MspInit+0x12c>)
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8017686:	2200      	movs	r2, #0
 8017688:	2100      	movs	r1, #0
 801768a:	2023      	movs	r0, #35	; 0x23
 801768c:	f006 fe59 	bl	801e342 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8017690:	2023      	movs	r0, #35	; 0x23
 8017692:	f006 fe72 	bl	801e37a <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8017696:	2200      	movs	r2, #0
 8017698:	2105      	movs	r1, #5
 801769a:	2044      	movs	r0, #68	; 0x44
 801769c:	f006 fe51 	bl	801e342 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80176a0:	2044      	movs	r0, #68	; 0x44
 80176a2:	f006 fe6a 	bl	801e37a <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80176a6:	bf00      	nop
 80176a8:	3728      	adds	r7, #40	; 0x28
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	40013000 	.word	0x40013000
 80176b4:	40023800 	.word	0x40023800
 80176b8:	40020000 	.word	0x40020000
 80176bc:	2000acdc 	.word	0x2000acdc
 80176c0:	40026488 	.word	0x40026488

080176c4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	4a0c      	ldr	r2, [pc, #48]	; (8017704 <HAL_SPI_MspDeInit+0x40>)
 80176d2:	4293      	cmp	r3, r2
 80176d4:	d111      	bne.n	80176fa <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80176d6:	4b0c      	ldr	r3, [pc, #48]	; (8017708 <HAL_SPI_MspDeInit+0x44>)
 80176d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176da:	4a0b      	ldr	r2, [pc, #44]	; (8017708 <HAL_SPI_MspDeInit+0x44>)
 80176dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80176e0:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80176e2:	21a0      	movs	r1, #160	; 0xa0
 80176e4:	4809      	ldr	r0, [pc, #36]	; (801770c <HAL_SPI_MspDeInit+0x48>)
 80176e6:	f007 fed9 	bl	801f49c <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80176ee:	4618      	mov	r0, r3
 80176f0:	f006 ff1a 	bl	801e528 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80176f4:	2023      	movs	r0, #35	; 0x23
 80176f6:	f006 fe4e 	bl	801e396 <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 80176fa:	bf00      	nop
 80176fc:	3708      	adds	r7, #8
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	40013000 	.word	0x40013000
 8017708:	40023800 	.word	0x40023800
 801770c:	40020000 	.word	0x40020000

08017710 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b086      	sub	sp, #24
 8017714:	af00      	add	r7, sp, #0
	bool ret = true;
 8017716:	2301      	movs	r3, #1
 8017718:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 801771a:	4b31      	ldr	r3, [pc, #196]	; (80177e0 <tdsInit+0xd0>)
 801771c:	2203      	movs	r2, #3
 801771e:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8017720:	4b2f      	ldr	r3, [pc, #188]	; (80177e0 <tdsInit+0xd0>)
 8017722:	4a30      	ldr	r2, [pc, #192]	; (80177e4 <tdsInit+0xd4>)
 8017724:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 8017726:	4b2e      	ldr	r3, [pc, #184]	; (80177e0 <tdsInit+0xd0>)
 8017728:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 801772c:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 801772e:	4b2c      	ldr	r3, [pc, #176]	; (80177e0 <tdsInit+0xd0>)
 8017730:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017734:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 8017736:	1d3b      	adds	r3, r7, #4
 8017738:	2200      	movs	r2, #0
 801773a:	601a      	str	r2, [r3, #0]
 801773c:	605a      	str	r2, [r3, #4]
 801773e:	609a      	str	r2, [r3, #8]
 8017740:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 8017742:	4b29      	ldr	r3, [pc, #164]	; (80177e8 <tdsInit+0xd8>)
 8017744:	4a29      	ldr	r2, [pc, #164]	; (80177ec <tdsInit+0xdc>)
 8017746:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017748:	4b27      	ldr	r3, [pc, #156]	; (80177e8 <tdsInit+0xd8>)
 801774a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801774e:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017750:	4b25      	ldr	r3, [pc, #148]	; (80177e8 <tdsInit+0xd8>)
 8017752:	2200      	movs	r2, #0
 8017754:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8017756:	4b24      	ldr	r3, [pc, #144]	; (80177e8 <tdsInit+0xd8>)
 8017758:	2201      	movs	r2, #1
 801775a:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 801775c:	4b22      	ldr	r3, [pc, #136]	; (80177e8 <tdsInit+0xd8>)
 801775e:	2201      	movs	r2, #1
 8017760:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8017762:	4b21      	ldr	r3, [pc, #132]	; (80177e8 <tdsInit+0xd8>)
 8017764:	2200      	movs	r2, #0
 8017766:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801776a:	4b1f      	ldr	r3, [pc, #124]	; (80177e8 <tdsInit+0xd8>)
 801776c:	2200      	movs	r2, #0
 801776e:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8017770:	4b1d      	ldr	r3, [pc, #116]	; (80177e8 <tdsInit+0xd8>)
 8017772:	4a1f      	ldr	r2, [pc, #124]	; (80177f0 <tdsInit+0xe0>)
 8017774:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8017776:	4b1c      	ldr	r3, [pc, #112]	; (80177e8 <tdsInit+0xd8>)
 8017778:	2200      	movs	r2, #0
 801777a:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 801777c:	4b1a      	ldr	r3, [pc, #104]	; (80177e8 <tdsInit+0xd8>)
 801777e:	2201      	movs	r2, #1
 8017780:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8017782:	4b19      	ldr	r3, [pc, #100]	; (80177e8 <tdsInit+0xd8>)
 8017784:	2201      	movs	r2, #1
 8017786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801778a:	4b17      	ldr	r3, [pc, #92]	; (80177e8 <tdsInit+0xd8>)
 801778c:	2201      	movs	r2, #1
 801778e:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8017790:	4815      	ldr	r0, [pc, #84]	; (80177e8 <tdsInit+0xd8>)
 8017792:	f005 ff9d 	bl	801d6d0 <HAL_ADC_Init>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d001      	beq.n	80177a0 <tdsInit+0x90>
	  {
	    Error_Handler();
 801779c:	f7fb f970 	bl	8012a80 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80177a0:	2301      	movs	r3, #1
 80177a2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80177a4:	2301      	movs	r3, #1
 80177a6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80177a8:	2307      	movs	r3, #7
 80177aa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80177ac:	1d3b      	adds	r3, r7, #4
 80177ae:	4619      	mov	r1, r3
 80177b0:	480d      	ldr	r0, [pc, #52]	; (80177e8 <tdsInit+0xd8>)
 80177b2:	f006 fa0d 	bl	801dbd0 <HAL_ADC_ConfigChannel>
 80177b6:	4603      	mov	r3, r0
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d001      	beq.n	80177c0 <tdsInit+0xb0>
	  {
	    Error_Handler();
 80177bc:	f7fb f960 	bl	8012a80 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 80177c0:	2201      	movs	r2, #1
 80177c2:	490c      	ldr	r1, [pc, #48]	; (80177f4 <tdsInit+0xe4>)
 80177c4:	4808      	ldr	r0, [pc, #32]	; (80177e8 <tdsInit+0xd8>)
 80177c6:	f006 f907 	bl	801d9d8 <HAL_ADC_Start_DMA>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d001      	beq.n	80177d4 <tdsInit+0xc4>
	{
		Error_Handler();
 80177d0:	f7fb f956 	bl	8012a80 <Error_Handler>
	}

	return ret;
 80177d4:	7dfb      	ldrb	r3, [r7, #23]

}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3718      	adds	r7, #24
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	2000ade4 	.word	0x2000ade4
 80177e4:	41c80000 	.word	0x41c80000
 80177e8:	2000ad3c 	.word	0x2000ad3c
 80177ec:	40012000 	.word	0x40012000
 80177f0:	0f000001 	.word	0x0f000001
 80177f4:	2000adf4 	.word	0x2000adf4

080177f8 <tds_measure>:
bool tds_measure(void)
{
 80177f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80177fc:	b082      	sub	sp, #8
 80177fe:	af00      	add	r7, sp, #0
	bool ret = true;
 8017800:	2301      	movs	r3, #1
 8017802:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 8017804:	4b8e      	ldr	r3, [pc, #568]	; (8017a40 <tds_measure+0x248>)
 8017806:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	691b      	ldr	r3, [r3, #16]
 801780c:	ee07 3a90 	vmov	s15, r3
 8017810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	edd3 7a03 	vldr	s15, [r3, #12]
 801781a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801781e:	683b      	ldr	r3, [r7, #0]
 8017820:	781b      	ldrb	r3, [r3, #0]
 8017822:	ee07 3a90 	vmov	s15, r3
 8017826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	695b      	ldr	r3, [r3, #20]
 8017838:	4618      	mov	r0, r3
 801783a:	f7f9 f9ed 	bl	8010c18 <__aeabi_f2d>
 801783e:	a378      	add	r3, pc, #480	; (adr r3, 8017a20 <tds_measure+0x228>)
 8017840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017844:	f7f9 fa40 	bl	8010cc8 <__aeabi_dmul>
 8017848:	4602      	mov	r2, r0
 801784a:	460b      	mov	r3, r1
 801784c:	4614      	mov	r4, r2
 801784e:	461d      	mov	r5, r3
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	695b      	ldr	r3, [r3, #20]
 8017854:	4618      	mov	r0, r3
 8017856:	f7f9 f9df 	bl	8010c18 <__aeabi_f2d>
 801785a:	4602      	mov	r2, r0
 801785c:	460b      	mov	r3, r1
 801785e:	4620      	mov	r0, r4
 8017860:	4629      	mov	r1, r5
 8017862:	f7f9 fa31 	bl	8010cc8 <__aeabi_dmul>
 8017866:	4602      	mov	r2, r0
 8017868:	460b      	mov	r3, r1
 801786a:	4614      	mov	r4, r2
 801786c:	461d      	mov	r5, r3
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	695b      	ldr	r3, [r3, #20]
 8017872:	4618      	mov	r0, r3
 8017874:	f7f9 f9d0 	bl	8010c18 <__aeabi_f2d>
 8017878:	4602      	mov	r2, r0
 801787a:	460b      	mov	r3, r1
 801787c:	4620      	mov	r0, r4
 801787e:	4629      	mov	r1, r5
 8017880:	f7f9 fa22 	bl	8010cc8 <__aeabi_dmul>
 8017884:	4602      	mov	r2, r0
 8017886:	460b      	mov	r3, r1
 8017888:	4614      	mov	r4, r2
 801788a:	461d      	mov	r5, r3
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	695b      	ldr	r3, [r3, #20]
 8017890:	4618      	mov	r0, r3
 8017892:	f7f9 f9c1 	bl	8010c18 <__aeabi_f2d>
 8017896:	a364      	add	r3, pc, #400	; (adr r3, 8017a28 <tds_measure+0x230>)
 8017898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789c:	f7f9 fa14 	bl	8010cc8 <__aeabi_dmul>
 80178a0:	4602      	mov	r2, r0
 80178a2:	460b      	mov	r3, r1
 80178a4:	4690      	mov	r8, r2
 80178a6:	4699      	mov	r9, r3
 80178a8:	683b      	ldr	r3, [r7, #0]
 80178aa:	695b      	ldr	r3, [r3, #20]
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7f9 f9b3 	bl	8010c18 <__aeabi_f2d>
 80178b2:	4602      	mov	r2, r0
 80178b4:	460b      	mov	r3, r1
 80178b6:	4640      	mov	r0, r8
 80178b8:	4649      	mov	r1, r9
 80178ba:	f7f9 fa05 	bl	8010cc8 <__aeabi_dmul>
 80178be:	4602      	mov	r2, r0
 80178c0:	460b      	mov	r3, r1
 80178c2:	4620      	mov	r0, r4
 80178c4:	4629      	mov	r1, r5
 80178c6:	f7f9 f847 	bl	8010958 <__aeabi_dsub>
 80178ca:	4602      	mov	r2, r0
 80178cc:	460b      	mov	r3, r1
 80178ce:	4614      	mov	r4, r2
 80178d0:	461d      	mov	r5, r3
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	695b      	ldr	r3, [r3, #20]
 80178d6:	4618      	mov	r0, r3
 80178d8:	f7f9 f99e 	bl	8010c18 <__aeabi_f2d>
 80178dc:	a354      	add	r3, pc, #336	; (adr r3, 8017a30 <tds_measure+0x238>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	f7f9 f9f1 	bl	8010cc8 <__aeabi_dmul>
 80178e6:	4602      	mov	r2, r0
 80178e8:	460b      	mov	r3, r1
 80178ea:	4620      	mov	r0, r4
 80178ec:	4629      	mov	r1, r5
 80178ee:	f7f9 f835 	bl	801095c <__adddf3>
 80178f2:	4602      	mov	r2, r0
 80178f4:	460b      	mov	r3, r1
 80178f6:	4614      	mov	r4, r2
 80178f8:	461d      	mov	r5, r3
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	4618      	mov	r0, r3
 8017900:	f7f9 f98a 	bl	8010c18 <__aeabi_f2d>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	4620      	mov	r0, r4
 801790a:	4629      	mov	r1, r5
 801790c:	f7f9 f9dc 	bl	8010cc8 <__aeabi_dmul>
 8017910:	4602      	mov	r2, r0
 8017912:	460b      	mov	r3, r1
 8017914:	4610      	mov	r0, r2
 8017916:	4619      	mov	r1, r3
 8017918:	f7f9 fcce 	bl	80112b8 <__aeabi_d2f>
 801791c:	4602      	mov	r2, r0
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	699b      	ldr	r3, [r3, #24]
 8017926:	4618      	mov	r0, r3
 8017928:	f7f9 f976 	bl	8010c18 <__aeabi_f2d>
 801792c:	4604      	mov	r4, r0
 801792e:	460d      	mov	r5, r1
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	689b      	ldr	r3, [r3, #8]
 8017934:	4618      	mov	r0, r3
 8017936:	f7f9 f96f 	bl	8010c18 <__aeabi_f2d>
 801793a:	f04f 0200 	mov.w	r2, #0
 801793e:	4b41      	ldr	r3, [pc, #260]	; (8017a44 <tds_measure+0x24c>)
 8017940:	f7f9 f80a 	bl	8010958 <__aeabi_dsub>
 8017944:	4602      	mov	r2, r0
 8017946:	460b      	mov	r3, r1
 8017948:	4610      	mov	r0, r2
 801794a:	4619      	mov	r1, r3
 801794c:	a33a      	add	r3, pc, #232	; (adr r3, 8017a38 <tds_measure+0x240>)
 801794e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017952:	f7f9 f9b9 	bl	8010cc8 <__aeabi_dmul>
 8017956:	4602      	mov	r2, r0
 8017958:	460b      	mov	r3, r1
 801795a:	4610      	mov	r0, r2
 801795c:	4619      	mov	r1, r3
 801795e:	f04f 0200 	mov.w	r2, #0
 8017962:	4b39      	ldr	r3, [pc, #228]	; (8017a48 <tds_measure+0x250>)
 8017964:	f7f8 fffa 	bl	801095c <__adddf3>
 8017968:	4602      	mov	r2, r0
 801796a:	460b      	mov	r3, r1
 801796c:	4620      	mov	r0, r4
 801796e:	4629      	mov	r1, r5
 8017970:	f7f9 fad4 	bl	8010f1c <__aeabi_ddiv>
 8017974:	4602      	mov	r2, r0
 8017976:	460b      	mov	r3, r1
 8017978:	4610      	mov	r0, r2
 801797a:	4619      	mov	r1, r3
 801797c:	f7f9 fc9c 	bl	80112b8 <__aeabi_d2f>
 8017980:	4602      	mov	r2, r0
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	edd3 7a07 	vldr	s15, [r3, #28]
 801798c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017994:	683b      	ldr	r3, [r7, #0]
 8017996:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 801799a:	4b2c      	ldr	r3, [pc, #176]	; (8017a4c <tds_measure+0x254>)
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	b2db      	uxtb	r3, r3
 80179a0:	3301      	adds	r3, #1
 80179a2:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 80179a4:	79fb      	ldrb	r3, [r7, #7]
 80179a6:	2b0b      	cmp	r3, #11
 80179a8:	d101      	bne.n	80179ae <tds_measure+0x1b6>
 80179aa:	2300      	movs	r3, #0
 80179ac:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80179b4:	4b25      	ldr	r3, [pc, #148]	; (8017a4c <tds_measure+0x254>)
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179bc:	ee17 2a90 	vmov	r2, s15
 80179c0:	b211      	sxth	r1, r2
 80179c2:	4a23      	ldr	r2, [pc, #140]	; (8017a50 <tds_measure+0x258>)
 80179c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 80179c8:	4b20      	ldr	r3, [pc, #128]	; (8017a4c <tds_measure+0x254>)
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	4a20      	ldr	r2, [pc, #128]	; (8017a50 <tds_measure+0x258>)
 80179ce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80179d2:	461a      	mov	r2, r3
 80179d4:	4b1f      	ldr	r3, [pc, #124]	; (8017a54 <tds_measure+0x25c>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	4413      	add	r3, r2
 80179da:	4a1e      	ldr	r2, [pc, #120]	; (8017a54 <tds_measure+0x25c>)
 80179dc:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 80179de:	4b1d      	ldr	r3, [pc, #116]	; (8017a54 <tds_measure+0x25c>)
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	79fa      	ldrb	r2, [r7, #7]
 80179e4:	491a      	ldr	r1, [pc, #104]	; (8017a50 <tds_measure+0x258>)
 80179e6:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80179ea:	1a9b      	subs	r3, r3, r2
 80179ec:	4a19      	ldr	r2, [pc, #100]	; (8017a54 <tds_measure+0x25c>)
 80179ee:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 80179f0:	79fb      	ldrb	r3, [r7, #7]
 80179f2:	4a16      	ldr	r2, [pc, #88]	; (8017a4c <tds_measure+0x254>)
 80179f4:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 80179f6:	4b17      	ldr	r3, [pc, #92]	; (8017a54 <tds_measure+0x25c>)
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	4a17      	ldr	r2, [pc, #92]	; (8017a58 <tds_measure+0x260>)
 80179fc:	fba2 2303 	umull	r2, r3, r2, r3
 8017a00:	08db      	lsrs	r3, r3, #3
 8017a02:	ee07 3a90 	vmov	s15, r3
 8017a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a0a:	683b      	ldr	r3, [r7, #0]
 8017a0c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 8017a10:	79bb      	ldrb	r3, [r7, #6]
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3708      	adds	r7, #8
 8017a16:	46bd      	mov	sp, r7
 8017a18:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017a1c:	f3af 8000 	nop.w
 8017a20:	a3d70a3d 	.word	0xa3d70a3d
 8017a24:	4060ad70 	.word	0x4060ad70
 8017a28:	1eb851ec 	.word	0x1eb851ec
 8017a2c:	406ffb85 	.word	0x406ffb85
 8017a30:	b851eb85 	.word	0xb851eb85
 8017a34:	408acb1e 	.word	0x408acb1e
 8017a38:	47ae147b 	.word	0x47ae147b
 8017a3c:	3f947ae1 	.word	0x3f947ae1
 8017a40:	2000ade4 	.word	0x2000ade4
 8017a44:	40390000 	.word	0x40390000
 8017a48:	3ff00000 	.word	0x3ff00000
 8017a4c:	2000ae0c 	.word	0x2000ae0c
 8017a50:	2000ae10 	.word	0x2000ae10
 8017a54:	2000ae28 	.word	0x2000ae28
 8017a58:	cccccccd 	.word	0xcccccccd

08017a5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b08a      	sub	sp, #40	; 0x28
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a64:	f107 0314 	add.w	r3, r7, #20
 8017a68:	2200      	movs	r2, #0
 8017a6a:	601a      	str	r2, [r3, #0]
 8017a6c:	605a      	str	r2, [r3, #4]
 8017a6e:	609a      	str	r2, [r3, #8]
 8017a70:	60da      	str	r2, [r3, #12]
 8017a72:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	4a3e      	ldr	r2, [pc, #248]	; (8017b74 <HAL_ADC_MspInit+0x118>)
 8017a7a:	4293      	cmp	r3, r2
 8017a7c:	d175      	bne.n	8017b6a <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8017a7e:	2300      	movs	r3, #0
 8017a80:	613b      	str	r3, [r7, #16]
 8017a82:	4b3d      	ldr	r3, [pc, #244]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a86:	4a3c      	ldr	r2, [pc, #240]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8017a8e:	4b3a      	ldr	r3, [pc, #232]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017a96:	613b      	str	r3, [r7, #16]
 8017a98:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	60fb      	str	r3, [r7, #12]
 8017a9e:	4b36      	ldr	r3, [pc, #216]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aa2:	4a35      	ldr	r2, [pc, #212]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8017aaa:	4b33      	ldr	r3, [pc, #204]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017ab2:	60fb      	str	r3, [r7, #12]
 8017ab4:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	60bb      	str	r3, [r7, #8]
 8017aba:	4b2f      	ldr	r3, [pc, #188]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017abe:	4a2e      	ldr	r2, [pc, #184]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017ac0:	f043 0301 	orr.w	r3, r3, #1
 8017ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8017ac6:	4b2c      	ldr	r3, [pc, #176]	; (8017b78 <HAL_ADC_MspInit+0x11c>)
 8017ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aca:	f003 0301 	and.w	r3, r3, #1
 8017ace:	60bb      	str	r3, [r7, #8]
 8017ad0:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8017ad2:	2302      	movs	r3, #2
 8017ad4:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017ad6:	2303      	movs	r3, #3
 8017ad8:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ada:	2300      	movs	r3, #0
 8017adc:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017ade:	f107 0314 	add.w	r3, r7, #20
 8017ae2:	4619      	mov	r1, r3
 8017ae4:	4825      	ldr	r0, [pc, #148]	; (8017b7c <HAL_ADC_MspInit+0x120>)
 8017ae6:	f007 fb55 	bl	801f194 <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 8017aea:	4b25      	ldr	r3, [pc, #148]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017aec:	4a25      	ldr	r2, [pc, #148]	; (8017b84 <HAL_ADC_MspInit+0x128>)
 8017aee:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8017af0:	4b23      	ldr	r3, [pc, #140]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017af6:	4b22      	ldr	r3, [pc, #136]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017af8:	2200      	movs	r2, #0
 8017afa:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8017afc:	4b20      	ldr	r3, [pc, #128]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017afe:	2200      	movs	r2, #0
 8017b00:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8017b02:	4b1f      	ldr	r3, [pc, #124]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017b08:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8017b0a:	4b1d      	ldr	r3, [pc, #116]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017b10:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8017b12:	4b1b      	ldr	r3, [pc, #108]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8017b18:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8017b1a:	4b19      	ldr	r3, [pc, #100]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017b20:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8017b22:	4b17      	ldr	r3, [pc, #92]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017b28:	4b15      	ldr	r3, [pc, #84]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017b2e:	4814      	ldr	r0, [pc, #80]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b30:	f006 fc4c 	bl	801e3cc <HAL_DMA_Init>
 8017b34:	4603      	mov	r3, r0
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d001      	beq.n	8017b3e <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8017b3a:	f7fa ffa1 	bl	8012a80 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	4a0f      	ldr	r2, [pc, #60]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b42:	639a      	str	r2, [r3, #56]	; 0x38
 8017b44:	4a0e      	ldr	r2, [pc, #56]	; (8017b80 <HAL_ADC_MspInit+0x124>)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	2106      	movs	r1, #6
 8017b4e:	2012      	movs	r0, #18
 8017b50:	f006 fbf7 	bl	801e342 <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8017b54:	2012      	movs	r0, #18
 8017b56:	f006 fc10 	bl	801e37a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	2106      	movs	r1, #6
 8017b5e:	2038      	movs	r0, #56	; 0x38
 8017b60:	f006 fbef 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8017b64:	2038      	movs	r0, #56	; 0x38
 8017b66:	f006 fc08 	bl	801e37a <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8017b6a:	bf00      	nop
 8017b6c:	3728      	adds	r7, #40	; 0x28
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
 8017b72:	bf00      	nop
 8017b74:	40012000 	.word	0x40012000
 8017b78:	40023800 	.word	0x40023800
 8017b7c:	40020000 	.word	0x40020000
 8017b80:	2000ad84 	.word	0x2000ad84
 8017b84:	40026410 	.word	0x40026410

08017b88 <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
//static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b082      	sub	sp, #8
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	4603      	mov	r3, r0
 8017b90:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 8017b92:	4b0a      	ldr	r3, [pc, #40]	; (8017bbc <serialize8+0x34>)
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	79fa      	ldrb	r2, [r7, #7]
 8017b98:	4611      	mov	r1, r2
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f000 f9e6 	bl	8017f6c <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 8017ba0:	4b07      	ldr	r3, [pc, #28]	; (8017bc0 <serialize8+0x38>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	7819      	ldrb	r1, [r3, #0]
 8017ba6:	4b06      	ldr	r3, [pc, #24]	; (8017bc0 <serialize8+0x38>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	79fa      	ldrb	r2, [r7, #7]
 8017bac:	404a      	eors	r2, r1
 8017bae:	b2d2      	uxtb	r2, r2
 8017bb0:	701a      	strb	r2, [r3, #0]
}
 8017bb2:	bf00      	nop
 8017bb4:	3708      	adds	r7, #8
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	bd80      	pop	{r7, pc}
 8017bba:	bf00      	nop
 8017bbc:	2000afba 	.word	0x2000afba
 8017bc0:	200000b0 	.word	0x200000b0

08017bc4 <read8>:
	serialize8((a>>16) & 0xFF);
	serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	af00      	add	r7, sp, #0
	return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 8017bc8:	4b07      	ldr	r3, [pc, #28]	; (8017be8 <read8+0x24>)
 8017bca:	6819      	ldr	r1, [r3, #0]
 8017bcc:	4b06      	ldr	r3, [pc, #24]	; (8017be8 <read8+0x24>)
 8017bce:	681b      	ldr	r3, [r3, #0]
 8017bd0:	785a      	ldrb	r2, [r3, #1]
 8017bd2:	1c50      	adds	r0, r2, #1
 8017bd4:	b2c0      	uxtb	r0, r0
 8017bd6:	7058      	strb	r0, [r3, #1]
 8017bd8:	4613      	mov	r3, r2
 8017bda:	440b      	add	r3, r1
 8017bdc:	789b      	ldrb	r3, [r3, #2]
}
 8017bde:	4618      	mov	r0, r3
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr
 8017be8:	200000b0 	.word	0x200000b0

08017bec <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	460a      	mov	r2, r1
 8017bf6:	71fb      	strb	r3, [r7, #7]
 8017bf8:	4613      	mov	r3, r2
 8017bfa:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 8017bfc:	2024      	movs	r0, #36	; 0x24
 8017bfe:	f7ff ffc3 	bl	8017b88 <serialize8>
	serialize8('M');
 8017c02:	204d      	movs	r0, #77	; 0x4d
 8017c04:	f7ff ffc0 	bl	8017b88 <serialize8>
	serialize8(err ? '!' : '>');
 8017c08:	79fb      	ldrb	r3, [r7, #7]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d001      	beq.n	8017c12 <headSerialResponse+0x26>
 8017c0e:	2321      	movs	r3, #33	; 0x21
 8017c10:	e000      	b.n	8017c14 <headSerialResponse+0x28>
 8017c12:	233e      	movs	r3, #62	; 0x3e
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7ff ffb7 	bl	8017b88 <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 8017c1a:	4b09      	ldr	r3, [pc, #36]	; (8017c40 <headSerialResponse+0x54>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	2200      	movs	r2, #0
 8017c20:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 8017c22:	79bb      	ldrb	r3, [r7, #6]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7ff ffaf 	bl	8017b88 <serialize8>
	serialize8(currentPortState->cmdMSP);
 8017c2a:	4b05      	ldr	r3, [pc, #20]	; (8017c40 <headSerialResponse+0x54>)
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8017c32:	4618      	mov	r0, r3
 8017c34:	f7ff ffa8 	bl	8017b88 <serialize8>
}
 8017c38:	bf00      	nop
 8017c3a:	3708      	adds	r7, #8
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	200000b0 	.word	0x200000b0

08017c44 <headSerialReply>:

void headSerialReply(uint8_t s)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 8017c4e:	79fb      	ldrb	r3, [r7, #7]
 8017c50:	4619      	mov	r1, r3
 8017c52:	2000      	movs	r0, #0
 8017c54:	f7ff ffca 	bl	8017bec <headSerialResponse>
}
 8017c58:	bf00      	nop
 8017c5a:	3708      	adds	r7, #8
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}

08017c60 <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 8017c64:	4b07      	ldr	r3, [pc, #28]	; (8017c84 <tailSerialReply+0x24>)
 8017c66:	781a      	ldrb	r2, [r3, #0]
 8017c68:	4b07      	ldr	r3, [pc, #28]	; (8017c88 <tailSerialReply+0x28>)
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	781b      	ldrb	r3, [r3, #0]
 8017c6e:	4619      	mov	r1, r3
 8017c70:	4610      	mov	r0, r2
 8017c72:	f000 f97b 	bl	8017f6c <SerialSerialize>
	UartSendData(CURRENTPORT);
 8017c76:	4b03      	ldr	r3, [pc, #12]	; (8017c84 <tailSerialReply+0x24>)
 8017c78:	781b      	ldrb	r3, [r3, #0]
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	f000 f9a0 	bl	8017fc0 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 8017c80:	bf00      	nop
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	2000afba 	.word	0x2000afba
 8017c88:	200000b0 	.word	0x200000b0

08017c8c <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 8017c98:	e006      	b.n	8017ca8 <s_struct_partial+0x1c>
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	1c5a      	adds	r2, r3, #1
 8017c9e:	607a      	str	r2, [r7, #4]
 8017ca0:	781b      	ldrb	r3, [r3, #0]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7ff ff70 	bl	8017b88 <serialize8>
 8017ca8:	78fb      	ldrb	r3, [r7, #3]
 8017caa:	1e5a      	subs	r2, r3, #1
 8017cac:	70fa      	strb	r2, [r7, #3]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d1f3      	bne.n	8017c9a <s_struct_partial+0xe>
}
 8017cb2:	bf00      	nop
 8017cb4:	bf00      	nop
 8017cb6:	3708      	adds	r7, #8
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 8017cc8:	78fb      	ldrb	r3, [r7, #3]
 8017cca:	4618      	mov	r0, r3
 8017ccc:	f7ff ffba 	bl	8017c44 <headSerialReply>
	s_struct_partial(cb,siz);
 8017cd0:	78fb      	ldrb	r3, [r7, #3]
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	6878      	ldr	r0, [r7, #4]
 8017cd6:	f7ff ffd9 	bl	8017c8c <s_struct_partial>
	tailSerialReply();
 8017cda:	f7ff ffc1 	bl	8017c60 <tailSerialReply>
}
 8017cde:	bf00      	nop
 8017ce0:	3708      	adds	r7, #8
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
	...

08017ce8 <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
	uint8_t c;

	currentPortState = &ports[_DEF_UART1];
 8017cee:	4b6f      	ldr	r3, [pc, #444]	; (8017eac <SerialCom+0x1c4>)
 8017cf0:	4a6f      	ldr	r2, [pc, #444]	; (8017eb0 <SerialCom+0x1c8>)
 8017cf2:	601a      	str	r2, [r3, #0]
	CURRENTPORT = _DEF_UART1;
 8017cf4:	4b6f      	ldr	r3, [pc, #444]	; (8017eb4 <SerialCom+0x1cc>)
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	701a      	strb	r2, [r3, #0]
	while(uartAvailable(CURRENTPORT) > 0)
 8017cfa:	e0c8      	b.n	8017e8e <SerialCom+0x1a6>
	{
		c = uartRead(CURRENTPORT);
 8017cfc:	4b6d      	ldr	r3, [pc, #436]	; (8017eb4 <SerialCom+0x1cc>)
 8017cfe:	781b      	ldrb	r3, [r3, #0]
 8017d00:	4618      	mov	r0, r3
 8017d02:	f000 fb51 	bl	80183a8 <uartRead>
 8017d06:	4603      	mov	r3, r0
 8017d08:	71fb      	strb	r3, [r7, #7]
		if (currentPortState->c_state == IDLE)
 8017d0a:	4b68      	ldr	r3, [pc, #416]	; (8017eac <SerialCom+0x1c4>)
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d10a      	bne.n	8017d2c <SerialCom+0x44>
		{
			currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 8017d16:	79fb      	ldrb	r3, [r7, #7]
 8017d18:	2b24      	cmp	r3, #36	; 0x24
 8017d1a:	bf0c      	ite	eq
 8017d1c:	2301      	moveq	r3, #1
 8017d1e:	2300      	movne	r3, #0
 8017d20:	b2da      	uxtb	r2, r3
 8017d22:	4b62      	ldr	r3, [pc, #392]	; (8017eac <SerialCom+0x1c4>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017d2a:	e0b0      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_START)
 8017d2c:	4b5f      	ldr	r3, [pc, #380]	; (8017eac <SerialCom+0x1c4>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017d34:	2b01      	cmp	r3, #1
 8017d36:	d10a      	bne.n	8017d4e <SerialCom+0x66>
		{
			currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8017d38:	79fb      	ldrb	r3, [r7, #7]
 8017d3a:	2b4d      	cmp	r3, #77	; 0x4d
 8017d3c:	d101      	bne.n	8017d42 <SerialCom+0x5a>
 8017d3e:	2202      	movs	r2, #2
 8017d40:	e000      	b.n	8017d44 <SerialCom+0x5c>
 8017d42:	2200      	movs	r2, #0
 8017d44:	4b59      	ldr	r3, [pc, #356]	; (8017eac <SerialCom+0x1c4>)
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017d4c:	e09f      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_M)
 8017d4e:	4b57      	ldr	r3, [pc, #348]	; (8017eac <SerialCom+0x1c4>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017d56:	2b02      	cmp	r3, #2
 8017d58:	d10a      	bne.n	8017d70 <SerialCom+0x88>
		{
			currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8017d5a:	79fb      	ldrb	r3, [r7, #7]
 8017d5c:	2b3c      	cmp	r3, #60	; 0x3c
 8017d5e:	d101      	bne.n	8017d64 <SerialCom+0x7c>
 8017d60:	2203      	movs	r2, #3
 8017d62:	e000      	b.n	8017d66 <SerialCom+0x7e>
 8017d64:	2200      	movs	r2, #0
 8017d66:	4b51      	ldr	r3, [pc, #324]	; (8017eac <SerialCom+0x1c4>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017d6e:	e08e      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_ARROW)
 8017d70:	4b4e      	ldr	r3, [pc, #312]	; (8017eac <SerialCom+0x1c4>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017d78:	2b03      	cmp	r3, #3
 8017d7a:	d129      	bne.n	8017dd0 <SerialCom+0xe8>
		{
			if (c > INBUF_SIZE)
 8017d7c:	79fb      	ldrb	r3, [r7, #7]
 8017d7e:	2b80      	cmp	r3, #128	; 0x80
 8017d80:	d905      	bls.n	8017d8e <SerialCom+0xa6>
			{  // now we are expecting the payload size
				currentPortState->c_state = IDLE;
 8017d82:	4b4a      	ldr	r3, [pc, #296]	; (8017eac <SerialCom+0x1c4>)
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	2200      	movs	r2, #0
 8017d88:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				continue;
 8017d8c:	e07f      	b.n	8017e8e <SerialCom+0x1a6>
			}
			currentPortState->dataSize = c;
 8017d8e:	4b47      	ldr	r3, [pc, #284]	; (8017eac <SerialCom+0x1c4>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	79fa      	ldrb	r2, [r7, #7]
 8017d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			currentPortState->offset = 0;
 8017d98:	4b44      	ldr	r3, [pc, #272]	; (8017eac <SerialCom+0x1c4>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			currentPortState->indRX = 0;
 8017da2:	4b42      	ldr	r3, [pc, #264]	; (8017eac <SerialCom+0x1c4>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2200      	movs	r2, #0
 8017da8:	705a      	strb	r2, [r3, #1]
			currentPortState->checksum = 0;
 8017daa:	4b40      	ldr	r3, [pc, #256]	; (8017eac <SerialCom+0x1c4>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2200      	movs	r2, #0
 8017db0:	701a      	strb	r2, [r3, #0]
			currentPortState->checksum ^= c;
 8017db2:	4b3e      	ldr	r3, [pc, #248]	; (8017eac <SerialCom+0x1c4>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	7819      	ldrb	r1, [r3, #0]
 8017db8:	4b3c      	ldr	r3, [pc, #240]	; (8017eac <SerialCom+0x1c4>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	79fa      	ldrb	r2, [r7, #7]
 8017dbe:	404a      	eors	r2, r1
 8017dc0:	b2d2      	uxtb	r2, r2
 8017dc2:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_SIZE;
 8017dc4:	4b39      	ldr	r3, [pc, #228]	; (8017eac <SerialCom+0x1c4>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2204      	movs	r2, #4
 8017dca:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017dce:	e05e      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_SIZE)
 8017dd0:	4b36      	ldr	r3, [pc, #216]	; (8017eac <SerialCom+0x1c4>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017dd8:	2b04      	cmp	r3, #4
 8017dda:	d113      	bne.n	8017e04 <SerialCom+0x11c>
		{
			currentPortState->cmdMSP = c;
 8017ddc:	4b33      	ldr	r3, [pc, #204]	; (8017eac <SerialCom+0x1c4>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	79fa      	ldrb	r2, [r7, #7]
 8017de2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			currentPortState->checksum ^= c;
 8017de6:	4b31      	ldr	r3, [pc, #196]	; (8017eac <SerialCom+0x1c4>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	7819      	ldrb	r1, [r3, #0]
 8017dec:	4b2f      	ldr	r3, [pc, #188]	; (8017eac <SerialCom+0x1c4>)
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	79fa      	ldrb	r2, [r7, #7]
 8017df2:	404a      	eors	r2, r1
 8017df4:	b2d2      	uxtb	r2, r2
 8017df6:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_CMD;
 8017df8:	4b2c      	ldr	r3, [pc, #176]	; (8017eac <SerialCom+0x1c4>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	2205      	movs	r2, #5
 8017dfe:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017e02:	e044      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 8017e04:	4b29      	ldr	r3, [pc, #164]	; (8017eac <SerialCom+0x1c4>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017e0c:	2b05      	cmp	r3, #5
 8017e0e:	d121      	bne.n	8017e54 <SerialCom+0x16c>
 8017e10:	4b26      	ldr	r3, [pc, #152]	; (8017eac <SerialCom+0x1c4>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017e18:	4b24      	ldr	r3, [pc, #144]	; (8017eac <SerialCom+0x1c4>)
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d217      	bcs.n	8017e54 <SerialCom+0x16c>
		{
			currentPortState->checksum ^= c;
 8017e24:	4b21      	ldr	r3, [pc, #132]	; (8017eac <SerialCom+0x1c4>)
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	7819      	ldrb	r1, [r3, #0]
 8017e2a:	4b20      	ldr	r3, [pc, #128]	; (8017eac <SerialCom+0x1c4>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	79fa      	ldrb	r2, [r7, #7]
 8017e30:	404a      	eors	r2, r1
 8017e32:	b2d2      	uxtb	r2, r2
 8017e34:	701a      	strb	r2, [r3, #0]
			currentPortState->inBuf[currentPortState->offset++] = c;
 8017e36:	4b1d      	ldr	r3, [pc, #116]	; (8017eac <SerialCom+0x1c4>)
 8017e38:	6819      	ldr	r1, [r3, #0]
 8017e3a:	4b1c      	ldr	r3, [pc, #112]	; (8017eac <SerialCom+0x1c4>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017e42:	1c50      	adds	r0, r2, #1
 8017e44:	b2c0      	uxtb	r0, r0
 8017e46:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	440b      	add	r3, r1
 8017e4e:	79fa      	ldrb	r2, [r7, #7]
 8017e50:	709a      	strb	r2, [r3, #2]
 8017e52:	e01c      	b.n	8017e8e <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 8017e54:	4b15      	ldr	r3, [pc, #84]	; (8017eac <SerialCom+0x1c4>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017e5c:	2b05      	cmp	r3, #5
 8017e5e:	d116      	bne.n	8017e8e <SerialCom+0x1a6>
 8017e60:	4b12      	ldr	r3, [pc, #72]	; (8017eac <SerialCom+0x1c4>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017e68:	4b10      	ldr	r3, [pc, #64]	; (8017eac <SerialCom+0x1c4>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d30c      	bcc.n	8017e8e <SerialCom+0x1a6>
		{
			if (currentPortState->checksum == c)
 8017e74:	4b0d      	ldr	r3, [pc, #52]	; (8017eac <SerialCom+0x1c4>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	79fa      	ldrb	r2, [r7, #7]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d101      	bne.n	8017e84 <SerialCom+0x19c>
			{
				evaluateCommand();
 8017e80:	f000 f81a 	bl	8017eb8 <evaluateCommand>
			}
			currentPortState->c_state = IDLE;
 8017e84:	4b09      	ldr	r3, [pc, #36]	; (8017eac <SerialCom+0x1c4>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	while(uartAvailable(CURRENTPORT) > 0)
 8017e8e:	4b09      	ldr	r3, [pc, #36]	; (8017eb4 <SerialCom+0x1cc>)
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	4618      	mov	r0, r3
 8017e94:	f000 fa42 	bl	801831c <uartAvailable>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	f47f af2e 	bne.w	8017cfc <SerialCom+0x14>
		}
	}
}
 8017ea0:	bf00      	nop
 8017ea2:	bf00      	nop
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	200000b0 	.word	0x200000b0
 8017eb0:	2000afbc 	.word	0x2000afbc
 8017eb4:	2000afba 	.word	0x2000afba

08017eb8 <evaluateCommand>:

void evaluateCommand(void)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b08a      	sub	sp, #40	; 0x28
 8017ebc:	af00      	add	r7, sp, #0
	switch(currentPortState->cmdMSP)
 8017ebe:	4b28      	ldr	r3, [pc, #160]	; (8017f60 <evaluateCommand+0xa8>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8017ec6:	2bc9      	cmp	r3, #201	; 0xc9
 8017ec8:	d040      	beq.n	8017f4c <evaluateCommand+0x94>
 8017eca:	2bc9      	cmp	r3, #201	; 0xc9
 8017ecc:	dc42      	bgt.n	8017f54 <evaluateCommand+0x9c>
 8017ece:	2b66      	cmp	r3, #102	; 0x66
 8017ed0:	d002      	beq.n	8017ed8 <evaluateCommand+0x20>
 8017ed2:	2bc8      	cmp	r3, #200	; 0xc8
 8017ed4:	d021      	beq.n	8017f1a <evaluateCommand+0x62>
			break;

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 8017ed6:	e03d      	b.n	8017f54 <evaluateCommand+0x9c>
			data.water_temp = sensor.ds18b20_temp;
 8017ed8:	4b22      	ldr	r3, [pc, #136]	; (8017f64 <evaluateCommand+0xac>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	607b      	str	r3, [r7, #4]
			data.water_level = sensor.water_level;
 8017ede:	4b21      	ldr	r3, [pc, #132]	; (8017f64 <evaluateCommand+0xac>)
 8017ee0:	68db      	ldr	r3, [r3, #12]
 8017ee2:	60bb      	str	r3, [r7, #8]
			data.water_tds = sensor.water_quality;
 8017ee4:	4b1f      	ldr	r3, [pc, #124]	; (8017f64 <evaluateCommand+0xac>)
 8017ee6:	691b      	ldr	r3, [r3, #16]
 8017ee8:	60fb      	str	r3, [r7, #12]
			data.water_temp_setting = sensor.ds18b20_temp_setting;
 8017eea:	4b1e      	ldr	r3, [pc, #120]	; (8017f64 <evaluateCommand+0xac>)
 8017eec:	699b      	ldr	r3, [r3, #24]
 8017eee:	613b      	str	r3, [r7, #16]
			data.water_temp_deadband = sensor.water_temp_deadband;
 8017ef0:	4b1c      	ldr	r3, [pc, #112]	; (8017f64 <evaluateCommand+0xac>)
 8017ef2:	69db      	ldr	r3, [r3, #28]
 8017ef4:	617b      	str	r3, [r7, #20]
			data.water_level_setting = sensor.water_level_setting;
 8017ef6:	4b1b      	ldr	r3, [pc, #108]	; (8017f64 <evaluateCommand+0xac>)
 8017ef8:	6a1b      	ldr	r3, [r3, #32]
 8017efa:	61bb      	str	r3, [r7, #24]
			data.water_level_deadband = sensor.water_level_deadband;
 8017efc:	4b19      	ldr	r3, [pc, #100]	; (8017f64 <evaluateCommand+0xac>)
 8017efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f00:	61fb      	str	r3, [r7, #28]
			data.water_quality_setting = sensor.water_quality_setting;
 8017f02:	4b18      	ldr	r3, [pc, #96]	; (8017f64 <evaluateCommand+0xac>)
 8017f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f06:	623b      	str	r3, [r7, #32]
			data.water_quality_deadband = sensor.water_quality_deadband;
 8017f08:	4b16      	ldr	r3, [pc, #88]	; (8017f64 <evaluateCommand+0xac>)
 8017f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f0c:	627b      	str	r3, [r7, #36]	; 0x24
			s_struct((uint8_t*)&data,36);
 8017f0e:	1d3b      	adds	r3, r7, #4
 8017f10:	2124      	movs	r1, #36	; 0x24
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7ff fed2 	bl	8017cbc <s_struct>
			break;
 8017f18:	e01d      	b.n	8017f56 <evaluateCommand+0x9e>
			Relay[0] = read8();
 8017f1a:	f7ff fe53 	bl	8017bc4 <read8>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	b25a      	sxtb	r2, r3
 8017f22:	4b11      	ldr	r3, [pc, #68]	; (8017f68 <evaluateCommand+0xb0>)
 8017f24:	701a      	strb	r2, [r3, #0]
			Relay[1] = read8();
 8017f26:	f7ff fe4d 	bl	8017bc4 <read8>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	b25a      	sxtb	r2, r3
 8017f2e:	4b0e      	ldr	r3, [pc, #56]	; (8017f68 <evaluateCommand+0xb0>)
 8017f30:	705a      	strb	r2, [r3, #1]
			Relay[2] = read8();
 8017f32:	f7ff fe47 	bl	8017bc4 <read8>
 8017f36:	4603      	mov	r3, r0
 8017f38:	b25a      	sxtb	r2, r3
 8017f3a:	4b0b      	ldr	r3, [pc, #44]	; (8017f68 <evaluateCommand+0xb0>)
 8017f3c:	709a      	strb	r2, [r3, #2]
			Relay[3] = read8();
 8017f3e:	f7ff fe41 	bl	8017bc4 <read8>
 8017f42:	4603      	mov	r3, r0
 8017f44:	b25a      	sxtb	r2, r3
 8017f46:	4b08      	ldr	r3, [pc, #32]	; (8017f68 <evaluateCommand+0xb0>)
 8017f48:	70da      	strb	r2, [r3, #3]
			break;
 8017f4a:	e004      	b.n	8017f56 <evaluateCommand+0x9e>
			resetToBoot(0);
 8017f4c:	2000      	movs	r0, #0
 8017f4e:	f7fe fa5f 	bl	8016410 <resetToBoot>
			break;
 8017f52:	e000      	b.n	8017f56 <evaluateCommand+0x9e>
			break;
 8017f54:	bf00      	nop
	}

}
 8017f56:	bf00      	nop
 8017f58:	3728      	adds	r7, #40	; 0x28
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	bd80      	pop	{r7, pc}
 8017f5e:	bf00      	nop
 8017f60:	200000b0 	.word	0x200000b0
 8017f64:	20000364 	.word	0x20000364
 8017f68:	2000ae2c 	.word	0x2000ae2c

08017f6c <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 8017f6c:	b480      	push	{r7}
 8017f6e:	b085      	sub	sp, #20
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	4603      	mov	r3, r0
 8017f74:	460a      	mov	r2, r1
 8017f76:	71fb      	strb	r3, [r7, #7]
 8017f78:	4613      	mov	r3, r2
 8017f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 8017f7c:	79fb      	ldrb	r3, [r7, #7]
 8017f7e:	4a0e      	ldr	r2, [pc, #56]	; (8017fb8 <SerialSerialize+0x4c>)
 8017f80:	5cd3      	ldrb	r3, [r2, r3]
 8017f82:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 8017f84:	7bfb      	ldrb	r3, [r7, #15]
 8017f86:	3301      	adds	r3, #1
 8017f88:	73fb      	strb	r3, [r7, #15]
 8017f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	da01      	bge.n	8017f96 <SerialSerialize+0x2a>
 8017f92:	2300      	movs	r3, #0
 8017f94:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 8017f96:	7bfa      	ldrb	r2, [r7, #15]
 8017f98:	79fb      	ldrb	r3, [r7, #7]
 8017f9a:	4908      	ldr	r1, [pc, #32]	; (8017fbc <SerialSerialize+0x50>)
 8017f9c:	440a      	add	r2, r1
 8017f9e:	4413      	add	r3, r2
 8017fa0:	79ba      	ldrb	r2, [r7, #6]
 8017fa2:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 8017fa4:	79fb      	ldrb	r3, [r7, #7]
 8017fa6:	4904      	ldr	r1, [pc, #16]	; (8017fb8 <SerialSerialize+0x4c>)
 8017fa8:	7bfa      	ldrb	r2, [r7, #15]
 8017faa:	54ca      	strb	r2, [r1, r3]
}
 8017fac:	bf00      	nop
 8017fae:	3714      	adds	r7, #20
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb6:	4770      	bx	lr
 8017fb8:	2000ae30 	.word	0x2000ae30
 8017fbc:	2000ae38 	.word	0x2000ae38

08017fc0 <UartSendData>:

void UartSendData(uint8_t port)
{
 8017fc0:	b590      	push	{r4, r7, lr}
 8017fc2:	b085      	sub	sp, #20
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 8017fca:	79fb      	ldrb	r3, [r7, #7]
 8017fcc:	4a36      	ldr	r2, [pc, #216]	; (80180a8 <UartSendData+0xe8>)
 8017fce:	5cd3      	ldrb	r3, [r2, r3]
 8017fd0:	73fb      	strb	r3, [r7, #15]
	switch(port){
 8017fd2:	79fb      	ldrb	r3, [r7, #7]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d01b      	beq.n	8018010 <UartSendData+0x50>
 8017fd8:	2b01      	cmp	r3, #1
 8017fda:	d049      	beq.n	8018070 <UartSendData+0xb0>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 8017fdc:	e05f      	b.n	801809e <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 8017fde:	7bfb      	ldrb	r3, [r7, #15]
 8017fe0:	3301      	adds	r3, #1
 8017fe2:	73fb      	strb	r3, [r7, #15]
 8017fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	da01      	bge.n	8017ff0 <UartSendData+0x30>
 8017fec:	2300      	movs	r3, #0
 8017fee:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 8017ff0:	7bf9      	ldrb	r1, [r7, #15]
 8017ff2:	79fa      	ldrb	r2, [r7, #7]
 8017ff4:	4b2d      	ldr	r3, [pc, #180]	; (80180ac <UartSendData+0xec>)
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	1c58      	adds	r0, r3, #1
 8017ffc:	b2c4      	uxtb	r4, r0
 8017ffe:	482b      	ldr	r0, [pc, #172]	; (80180ac <UartSendData+0xec>)
 8018000:	7004      	strb	r4, [r0, #0]
 8018002:	4618      	mov	r0, r3
 8018004:	4b2a      	ldr	r3, [pc, #168]	; (80180b0 <UartSendData+0xf0>)
 8018006:	440b      	add	r3, r1
 8018008:	4413      	add	r3, r2
 801800a:	781a      	ldrb	r2, [r3, #0]
 801800c:	4b29      	ldr	r3, [pc, #164]	; (80180b4 <UartSendData+0xf4>)
 801800e:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 8018010:	79fb      	ldrb	r3, [r7, #7]
 8018012:	4a29      	ldr	r2, [pc, #164]	; (80180b8 <UartSendData+0xf8>)
 8018014:	5cd3      	ldrb	r3, [r2, r3]
 8018016:	b2db      	uxtb	r3, r3
 8018018:	7bfa      	ldrb	r2, [r7, #15]
 801801a:	429a      	cmp	r2, r3
 801801c:	d1df      	bne.n	8017fde <UartSendData+0x1e>
			serialTailTX[port] = t;
 801801e:	79fb      	ldrb	r3, [r7, #7]
 8018020:	4921      	ldr	r1, [pc, #132]	; (80180a8 <UartSendData+0xe8>)
 8018022:	7bfa      	ldrb	r2, [r7, #15]
 8018024:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 8018026:	4b21      	ldr	r3, [pc, #132]	; (80180ac <UartSendData+0xec>)
 8018028:	781b      	ldrb	r3, [r3, #0]
 801802a:	b2db      	uxtb	r3, r3
 801802c:	461a      	mov	r2, r3
 801802e:	4921      	ldr	r1, [pc, #132]	; (80180b4 <UartSendData+0xf4>)
 8018030:	2000      	movs	r0, #0
 8018032:	f000 fa17 	bl	8018464 <uartWriteIT>
			serialHead_0 = 0;
 8018036:	4b1d      	ldr	r3, [pc, #116]	; (80180ac <UartSendData+0xec>)
 8018038:	2200      	movs	r2, #0
 801803a:	701a      	strb	r2, [r3, #0]
			break;
 801803c:	e02f      	b.n	801809e <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 801803e:	7bfb      	ldrb	r3, [r7, #15]
 8018040:	3301      	adds	r3, #1
 8018042:	73fb      	strb	r3, [r7, #15]
 8018044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018048:	2b00      	cmp	r3, #0
 801804a:	da01      	bge.n	8018050 <UartSendData+0x90>
 801804c:	2300      	movs	r3, #0
 801804e:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 8018050:	7bf9      	ldrb	r1, [r7, #15]
 8018052:	79fa      	ldrb	r2, [r7, #7]
 8018054:	4b19      	ldr	r3, [pc, #100]	; (80180bc <UartSendData+0xfc>)
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	b2db      	uxtb	r3, r3
 801805a:	1c58      	adds	r0, r3, #1
 801805c:	b2c4      	uxtb	r4, r0
 801805e:	4817      	ldr	r0, [pc, #92]	; (80180bc <UartSendData+0xfc>)
 8018060:	7004      	strb	r4, [r0, #0]
 8018062:	4618      	mov	r0, r3
 8018064:	4b12      	ldr	r3, [pc, #72]	; (80180b0 <UartSendData+0xf0>)
 8018066:	440b      	add	r3, r1
 8018068:	4413      	add	r3, r2
 801806a:	781a      	ldrb	r2, [r3, #0]
 801806c:	4b14      	ldr	r3, [pc, #80]	; (80180c0 <UartSendData+0x100>)
 801806e:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 8018070:	79fb      	ldrb	r3, [r7, #7]
 8018072:	4a11      	ldr	r2, [pc, #68]	; (80180b8 <UartSendData+0xf8>)
 8018074:	5cd3      	ldrb	r3, [r2, r3]
 8018076:	b2db      	uxtb	r3, r3
 8018078:	7bfa      	ldrb	r2, [r7, #15]
 801807a:	429a      	cmp	r2, r3
 801807c:	d1df      	bne.n	801803e <UartSendData+0x7e>
			serialTailTX[port] = t;
 801807e:	79fb      	ldrb	r3, [r7, #7]
 8018080:	4909      	ldr	r1, [pc, #36]	; (80180a8 <UartSendData+0xe8>)
 8018082:	7bfa      	ldrb	r2, [r7, #15]
 8018084:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 8018086:	4b0d      	ldr	r3, [pc, #52]	; (80180bc <UartSendData+0xfc>)
 8018088:	781b      	ldrb	r3, [r3, #0]
 801808a:	b2db      	uxtb	r3, r3
 801808c:	461a      	mov	r2, r3
 801808e:	490c      	ldr	r1, [pc, #48]	; (80180c0 <UartSendData+0x100>)
 8018090:	2001      	movs	r0, #1
 8018092:	f000 f9e7 	bl	8018464 <uartWriteIT>
			serialHead_1 = 0;
 8018096:	4b09      	ldr	r3, [pc, #36]	; (80180bc <UartSendData+0xfc>)
 8018098:	2200      	movs	r2, #0
 801809a:	701a      	strb	r2, [r3, #0]
			break;
 801809c:	bf00      	nop
}
 801809e:	bf00      	nop
 80180a0:	3714      	adds	r7, #20
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd90      	pop	{r4, r7, pc}
 80180a6:	bf00      	nop
 80180a8:	2000ae34 	.word	0x2000ae34
 80180ac:	2000afb8 	.word	0x2000afb8
 80180b0:	2000ae38 	.word	0x2000ae38
 80180b4:	2000aeb8 	.word	0x2000aeb8
 80180b8:	2000ae30 	.word	0x2000ae30
 80180bc:	2000afb9 	.word	0x2000afb9
 80180c0:	2000af38 	.word	0x2000af38

080180c4 <uartInit>:
#endif



bool uartInit(void)
{
 80180c4:	b480      	push	{r7}
 80180c6:	b083      	sub	sp, #12
 80180c8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80180ca:	2300      	movs	r3, #0
 80180cc:	607b      	str	r3, [r7, #4]
 80180ce:	e007      	b.n	80180e0 <uartInit+0x1c>
  {
    is_open[i] = false;
 80180d0:	4a08      	ldr	r2, [pc, #32]	; (80180f4 <uartInit+0x30>)
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	4413      	add	r3, r2
 80180d6:	2200      	movs	r2, #0
 80180d8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	3301      	adds	r3, #1
 80180de:	607b      	str	r3, [r7, #4]
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	ddf4      	ble.n	80180d0 <uartInit+0xc>
  }


  return true;
 80180e6:	2301      	movs	r3, #1
}
 80180e8:	4618      	mov	r0, r3
 80180ea:	370c      	adds	r7, #12
 80180ec:	46bd      	mov	sp, r7
 80180ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f2:	4770      	bx	lr
 80180f4:	2000b0c8 	.word	0x2000b0c8

080180f8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b086      	sub	sp, #24
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	4603      	mov	r3, r0
 8018100:	6039      	str	r1, [r7, #0]
 8018102:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8018104:	2300      	movs	r3, #0
 8018106:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8018108:	79fb      	ldrb	r3, [r7, #7]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d002      	beq.n	8018114 <uartOpen+0x1c>
 801810e:	2b01      	cmp	r3, #1
 8018110:	d078      	beq.n	8018204 <uartOpen+0x10c>
 8018112:	e0ef      	b.n	80182f4 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8018114:	4b7a      	ldr	r3, [pc, #488]	; (8018300 <uartOpen+0x208>)
 8018116:	4a7b      	ldr	r2, [pc, #492]	; (8018304 <uartOpen+0x20c>)
 8018118:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 801811a:	4a79      	ldr	r2, [pc, #484]	; (8018300 <uartOpen+0x208>)
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8018120:	4b77      	ldr	r3, [pc, #476]	; (8018300 <uartOpen+0x208>)
 8018122:	2200      	movs	r2, #0
 8018124:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8018126:	4b76      	ldr	r3, [pc, #472]	; (8018300 <uartOpen+0x208>)
 8018128:	2200      	movs	r2, #0
 801812a:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 801812c:	4b74      	ldr	r3, [pc, #464]	; (8018300 <uartOpen+0x208>)
 801812e:	2200      	movs	r2, #0
 8018130:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8018132:	4b73      	ldr	r3, [pc, #460]	; (8018300 <uartOpen+0x208>)
 8018134:	220c      	movs	r2, #12
 8018136:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8018138:	4b71      	ldr	r3, [pc, #452]	; (8018300 <uartOpen+0x208>)
 801813a:	2200      	movs	r2, #0
 801813c:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 801813e:	4b70      	ldr	r3, [pc, #448]	; (8018300 <uartOpen+0x208>)
 8018140:	2200      	movs	r2, #0
 8018142:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8018144:	486e      	ldr	r0, [pc, #440]	; (8018300 <uartOpen+0x208>)
 8018146:	f00a ffe4 	bl	8023112 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 801814a:	79fb      	ldrb	r3, [r7, #7]
 801814c:	011b      	lsls	r3, r3, #4
 801814e:	4a6e      	ldr	r2, [pc, #440]	; (8018308 <uartOpen+0x210>)
 8018150:	4413      	add	r3, r2
 8018152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018156:	496d      	ldr	r1, [pc, #436]	; (801830c <uartOpen+0x214>)
 8018158:	4618      	mov	r0, r3
 801815a:	f7fa fe5e 	bl	8012e1a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 801815e:	2300      	movs	r3, #0
 8018160:	613b      	str	r3, [r7, #16]
 8018162:	4b6b      	ldr	r3, [pc, #428]	; (8018310 <uartOpen+0x218>)
 8018164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018166:	4a6a      	ldr	r2, [pc, #424]	; (8018310 <uartOpen+0x218>)
 8018168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801816c:	6313      	str	r3, [r2, #48]	; 0x30
 801816e:	4b68      	ldr	r3, [pc, #416]	; (8018310 <uartOpen+0x218>)
 8018170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018176:	613b      	str	r3, [r7, #16]
 8018178:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 801817a:	2200      	movs	r2, #0
 801817c:	2104      	movs	r1, #4
 801817e:	203a      	movs	r0, #58	; 0x3a
 8018180:	f006 f8df 	bl	801e342 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8018184:	203a      	movs	r0, #58	; 0x3a
 8018186:	f006 f8f8 	bl	801e37a <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 801818a:	2200      	movs	r2, #0
 801818c:	2104      	movs	r1, #4
 801818e:	2046      	movs	r0, #70	; 0x46
 8018190:	f006 f8d7 	bl	801e342 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8018194:	2046      	movs	r0, #70	; 0x46
 8018196:	f006 f8f0 	bl	801e37a <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 801819a:	4859      	ldr	r0, [pc, #356]	; (8018300 <uartOpen+0x208>)
 801819c:	f00a ff6c 	bl	8023078 <HAL_UART_Init>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d002      	beq.n	80181ac <uartOpen+0xb4>
        {
          ret = false;
 80181a6:	2300      	movs	r3, #0
 80181a8:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 80181aa:	e0a3      	b.n	80182f4 <uartOpen+0x1fc>
          ret = true;
 80181ac:	2301      	movs	r3, #1
 80181ae:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 80181b0:	79fb      	ldrb	r3, [r7, #7]
 80181b2:	4a58      	ldr	r2, [pc, #352]	; (8018314 <uartOpen+0x21c>)
 80181b4:	2101      	movs	r1, #1
 80181b6:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80181b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80181bc:	4953      	ldr	r1, [pc, #332]	; (801830c <uartOpen+0x214>)
 80181be:	4850      	ldr	r0, [pc, #320]	; (8018300 <uartOpen+0x208>)
 80181c0:	f00b f8b2 	bl	8023328 <HAL_UART_Receive_DMA>
 80181c4:	4603      	mov	r3, r0
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d001      	beq.n	80181ce <uartOpen+0xd6>
            ret = false;
 80181ca:	2300      	movs	r3, #0
 80181cc:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80181ce:	79fb      	ldrb	r3, [r7, #7]
 80181d0:	4a4d      	ldr	r2, [pc, #308]	; (8018308 <uartOpen+0x210>)
 80181d2:	011b      	lsls	r3, r3, #4
 80181d4:	4413      	add	r3, r2
 80181d6:	3308      	adds	r3, #8
 80181d8:	6819      	ldr	r1, [r3, #0]
 80181da:	4b4f      	ldr	r3, [pc, #316]	; (8018318 <uartOpen+0x220>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	685a      	ldr	r2, [r3, #4]
 80181e0:	79fb      	ldrb	r3, [r7, #7]
 80181e2:	1a8a      	subs	r2, r1, r2
 80181e4:	4948      	ldr	r1, [pc, #288]	; (8018308 <uartOpen+0x210>)
 80181e6:	011b      	lsls	r3, r3, #4
 80181e8:	440b      	add	r3, r1
 80181ea:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80181ec:	79fa      	ldrb	r2, [r7, #7]
 80181ee:	79fb      	ldrb	r3, [r7, #7]
 80181f0:	4945      	ldr	r1, [pc, #276]	; (8018308 <uartOpen+0x210>)
 80181f2:	0112      	lsls	r2, r2, #4
 80181f4:	440a      	add	r2, r1
 80181f6:	6812      	ldr	r2, [r2, #0]
 80181f8:	4943      	ldr	r1, [pc, #268]	; (8018308 <uartOpen+0x210>)
 80181fa:	011b      	lsls	r3, r3, #4
 80181fc:	440b      	add	r3, r1
 80181fe:	3304      	adds	r3, #4
 8018200:	601a      	str	r2, [r3, #0]
      break;
 8018202:	e077      	b.n	80182f4 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8018204:	4b3e      	ldr	r3, [pc, #248]	; (8018300 <uartOpen+0x208>)
 8018206:	4a3f      	ldr	r2, [pc, #252]	; (8018304 <uartOpen+0x20c>)
 8018208:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 801820a:	4a3d      	ldr	r2, [pc, #244]	; (8018300 <uartOpen+0x208>)
 801820c:	683b      	ldr	r3, [r7, #0]
 801820e:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018210:	4b3b      	ldr	r3, [pc, #236]	; (8018300 <uartOpen+0x208>)
 8018212:	2200      	movs	r2, #0
 8018214:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8018216:	4b3a      	ldr	r3, [pc, #232]	; (8018300 <uartOpen+0x208>)
 8018218:	2200      	movs	r2, #0
 801821a:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 801821c:	4b38      	ldr	r3, [pc, #224]	; (8018300 <uartOpen+0x208>)
 801821e:	2200      	movs	r2, #0
 8018220:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8018222:	4b37      	ldr	r3, [pc, #220]	; (8018300 <uartOpen+0x208>)
 8018224:	220c      	movs	r2, #12
 8018226:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018228:	4b35      	ldr	r3, [pc, #212]	; (8018300 <uartOpen+0x208>)
 801822a:	2200      	movs	r2, #0
 801822c:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801822e:	4b34      	ldr	r3, [pc, #208]	; (8018300 <uartOpen+0x208>)
 8018230:	2200      	movs	r2, #0
 8018232:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8018234:	4832      	ldr	r0, [pc, #200]	; (8018300 <uartOpen+0x208>)
 8018236:	f00a ff6c 	bl	8023112 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 801823a:	79fb      	ldrb	r3, [r7, #7]
 801823c:	011b      	lsls	r3, r3, #4
 801823e:	4a32      	ldr	r2, [pc, #200]	; (8018308 <uartOpen+0x210>)
 8018240:	4413      	add	r3, r2
 8018242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018246:	4931      	ldr	r1, [pc, #196]	; (801830c <uartOpen+0x214>)
 8018248:	4618      	mov	r0, r3
 801824a:	f7fa fde6 	bl	8012e1a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 801824e:	2300      	movs	r3, #0
 8018250:	60fb      	str	r3, [r7, #12]
 8018252:	4b2f      	ldr	r3, [pc, #188]	; (8018310 <uartOpen+0x218>)
 8018254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018256:	4a2e      	ldr	r2, [pc, #184]	; (8018310 <uartOpen+0x218>)
 8018258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801825c:	6313      	str	r3, [r2, #48]	; 0x30
 801825e:	4b2c      	ldr	r3, [pc, #176]	; (8018310 <uartOpen+0x218>)
 8018260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018266:	60fb      	str	r3, [r7, #12]
 8018268:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 801826a:	2200      	movs	r2, #0
 801826c:	2104      	movs	r1, #4
 801826e:	203a      	movs	r0, #58	; 0x3a
 8018270:	f006 f867 	bl	801e342 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8018274:	203a      	movs	r0, #58	; 0x3a
 8018276:	f006 f880 	bl	801e37a <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 801827a:	2200      	movs	r2, #0
 801827c:	2104      	movs	r1, #4
 801827e:	2046      	movs	r0, #70	; 0x46
 8018280:	f006 f85f 	bl	801e342 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8018284:	2046      	movs	r0, #70	; 0x46
 8018286:	f006 f878 	bl	801e37a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 801828a:	481d      	ldr	r0, [pc, #116]	; (8018300 <uartOpen+0x208>)
 801828c:	f00a fef4 	bl	8023078 <HAL_UART_Init>
 8018290:	4603      	mov	r3, r0
 8018292:	2b00      	cmp	r3, #0
 8018294:	d002      	beq.n	801829c <uartOpen+0x1a4>
      {
        ret = false;
 8018296:	2300      	movs	r3, #0
 8018298:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 801829a:	e02a      	b.n	80182f2 <uartOpen+0x1fa>
        ret = true;
 801829c:	2301      	movs	r3, #1
 801829e:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 80182a0:	79fb      	ldrb	r3, [r7, #7]
 80182a2:	4a1c      	ldr	r2, [pc, #112]	; (8018314 <uartOpen+0x21c>)
 80182a4:	2101      	movs	r1, #1
 80182a6:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80182a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80182ac:	4917      	ldr	r1, [pc, #92]	; (801830c <uartOpen+0x214>)
 80182ae:	4814      	ldr	r0, [pc, #80]	; (8018300 <uartOpen+0x208>)
 80182b0:	f00b f83a 	bl	8023328 <HAL_UART_Receive_DMA>
 80182b4:	4603      	mov	r3, r0
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d001      	beq.n	80182be <uartOpen+0x1c6>
          ret = false;
 80182ba:	2300      	movs	r3, #0
 80182bc:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80182be:	79fb      	ldrb	r3, [r7, #7]
 80182c0:	4a11      	ldr	r2, [pc, #68]	; (8018308 <uartOpen+0x210>)
 80182c2:	011b      	lsls	r3, r3, #4
 80182c4:	4413      	add	r3, r2
 80182c6:	3308      	adds	r3, #8
 80182c8:	6819      	ldr	r1, [r3, #0]
 80182ca:	4b13      	ldr	r3, [pc, #76]	; (8018318 <uartOpen+0x220>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	685a      	ldr	r2, [r3, #4]
 80182d0:	79fb      	ldrb	r3, [r7, #7]
 80182d2:	1a8a      	subs	r2, r1, r2
 80182d4:	490c      	ldr	r1, [pc, #48]	; (8018308 <uartOpen+0x210>)
 80182d6:	011b      	lsls	r3, r3, #4
 80182d8:	440b      	add	r3, r1
 80182da:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80182dc:	79fa      	ldrb	r2, [r7, #7]
 80182de:	79fb      	ldrb	r3, [r7, #7]
 80182e0:	4909      	ldr	r1, [pc, #36]	; (8018308 <uartOpen+0x210>)
 80182e2:	0112      	lsls	r2, r2, #4
 80182e4:	440a      	add	r2, r1
 80182e6:	6812      	ldr	r2, [r2, #0]
 80182e8:	4907      	ldr	r1, [pc, #28]	; (8018308 <uartOpen+0x210>)
 80182ea:	011b      	lsls	r3, r3, #4
 80182ec:	440b      	add	r3, r1
 80182ee:	3304      	adds	r3, #4
 80182f0:	601a      	str	r2, [r3, #0]
      break;
 80182f2:	bf00      	nop
  }

  return ret;
 80182f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	3718      	adds	r7, #24
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd80      	pop	{r7, pc}
 80182fe:	bf00      	nop
 8018300:	2000b1dc 	.word	0x2000b1dc
 8018304:	40011000 	.word	0x40011000
 8018308:	2000b0cc 	.word	0x2000b0cc
 801830c:	2000b0dc 	.word	0x2000b0dc
 8018310:	40023800 	.word	0x40023800
 8018314:	2000b0c8 	.word	0x2000b0c8
 8018318:	2000b27c 	.word	0x2000b27c

0801831c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b084      	sub	sp, #16
 8018320:	af00      	add	r7, sp, #0
 8018322:	4603      	mov	r3, r0
 8018324:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8018326:	2300      	movs	r3, #0
 8018328:	60fb      	str	r3, [r7, #12]

  switch(ch)
 801832a:	79fb      	ldrb	r3, [r7, #7]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d002      	beq.n	8018336 <uartAvailable+0x1a>
 8018330:	2b01      	cmp	r3, #1
 8018332:	d018      	beq.n	8018366 <uartAvailable+0x4a>
 8018334:	e02f      	b.n	8018396 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8018336:	79fb      	ldrb	r3, [r7, #7]
 8018338:	4a19      	ldr	r2, [pc, #100]	; (80183a0 <uartAvailable+0x84>)
 801833a:	011b      	lsls	r3, r3, #4
 801833c:	4413      	add	r3, r2
 801833e:	3308      	adds	r3, #8
 8018340:	6819      	ldr	r1, [r3, #0]
 8018342:	4b18      	ldr	r3, [pc, #96]	; (80183a4 <uartAvailable+0x88>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	685a      	ldr	r2, [r3, #4]
 8018348:	79fb      	ldrb	r3, [r7, #7]
 801834a:	1a8a      	subs	r2, r1, r2
 801834c:	4914      	ldr	r1, [pc, #80]	; (80183a0 <uartAvailable+0x84>)
 801834e:	011b      	lsls	r3, r3, #4
 8018350:	440b      	add	r3, r1
 8018352:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8018354:	79fb      	ldrb	r3, [r7, #7]
 8018356:	011b      	lsls	r3, r3, #4
 8018358:	4a11      	ldr	r2, [pc, #68]	; (80183a0 <uartAvailable+0x84>)
 801835a:	4413      	add	r3, r2
 801835c:	4618      	mov	r0, r3
 801835e:	f7fa fdb4 	bl	8012eca <qbufferAvailable>
 8018362:	60f8      	str	r0, [r7, #12]
      break;
 8018364:	e017      	b.n	8018396 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8018366:	79fb      	ldrb	r3, [r7, #7]
 8018368:	4a0d      	ldr	r2, [pc, #52]	; (80183a0 <uartAvailable+0x84>)
 801836a:	011b      	lsls	r3, r3, #4
 801836c:	4413      	add	r3, r2
 801836e:	3308      	adds	r3, #8
 8018370:	6819      	ldr	r1, [r3, #0]
 8018372:	4b0c      	ldr	r3, [pc, #48]	; (80183a4 <uartAvailable+0x88>)
 8018374:	681b      	ldr	r3, [r3, #0]
 8018376:	685a      	ldr	r2, [r3, #4]
 8018378:	79fb      	ldrb	r3, [r7, #7]
 801837a:	1a8a      	subs	r2, r1, r2
 801837c:	4908      	ldr	r1, [pc, #32]	; (80183a0 <uartAvailable+0x84>)
 801837e:	011b      	lsls	r3, r3, #4
 8018380:	440b      	add	r3, r1
 8018382:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8018384:	79fb      	ldrb	r3, [r7, #7]
 8018386:	011b      	lsls	r3, r3, #4
 8018388:	4a05      	ldr	r2, [pc, #20]	; (80183a0 <uartAvailable+0x84>)
 801838a:	4413      	add	r3, r2
 801838c:	4618      	mov	r0, r3
 801838e:	f7fa fd9c 	bl	8012eca <qbufferAvailable>
 8018392:	60f8      	str	r0, [r7, #12]
      break;
 8018394:	bf00      	nop
  }

  return ret;
 8018396:	68fb      	ldr	r3, [r7, #12]
}
 8018398:	4618      	mov	r0, r3
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}
 80183a0:	2000b0cc 	.word	0x2000b0cc
 80183a4:	2000b27c 	.word	0x2000b27c

080183a8 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b084      	sub	sp, #16
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	4603      	mov	r3, r0
 80183b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80183b2:	2300      	movs	r3, #0
 80183b4:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80183b6:	79fb      	ldrb	r3, [r7, #7]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d002      	beq.n	80183c2 <uartRead+0x1a>
 80183bc:	2b01      	cmp	r3, #1
 80183be:	d008      	beq.n	80183d2 <uartRead+0x2a>
 80183c0:	e00f      	b.n	80183e2 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80183c2:	f107 030f 	add.w	r3, r7, #15
 80183c6:	2201      	movs	r2, #1
 80183c8:	4619      	mov	r1, r3
 80183ca:	4808      	ldr	r0, [pc, #32]	; (80183ec <uartRead+0x44>)
 80183cc:	f7fa fd40 	bl	8012e50 <qbufferRead>
      break;
 80183d0:	e007      	b.n	80183e2 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80183d2:	f107 030f 	add.w	r3, r7, #15
 80183d6:	2201      	movs	r2, #1
 80183d8:	4619      	mov	r1, r3
 80183da:	4805      	ldr	r0, [pc, #20]	; (80183f0 <uartRead+0x48>)
 80183dc:	f7fa fd38 	bl	8012e50 <qbufferRead>
      break;
 80183e0:	bf00      	nop
  }

  return ret;
 80183e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3710      	adds	r7, #16
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	2000b0cc 	.word	0x2000b0cc
 80183f0:	2000b0dc 	.word	0x2000b0dc

080183f4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b086      	sub	sp, #24
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	4603      	mov	r3, r0
 80183fc:	60b9      	str	r1, [r7, #8]
 80183fe:	607a      	str	r2, [r7, #4]
 8018400:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8018402:	2300      	movs	r3, #0
 8018404:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8018406:	7bfb      	ldrb	r3, [r7, #15]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d002      	beq.n	8018412 <uartWrite+0x1e>
 801840c:	2b01      	cmp	r3, #1
 801840e:	d00f      	beq.n	8018430 <uartWrite+0x3c>
 8018410:	e020      	b.n	8018454 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	b29a      	uxth	r2, r3
 8018416:	2364      	movs	r3, #100	; 0x64
 8018418:	68b9      	ldr	r1, [r7, #8]
 801841a:	4811      	ldr	r0, [pc, #68]	; (8018460 <uartWrite+0x6c>)
 801841c:	f00a fea5 	bl	802316a <HAL_UART_Transmit>
 8018420:	4603      	mov	r3, r0
 8018422:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8018424:	7cfb      	ldrb	r3, [r7, #19]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d111      	bne.n	801844e <uartWrite+0x5a>
        {
          ret = length;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	617b      	str	r3, [r7, #20]
        }
      break;
 801842e:	e00e      	b.n	801844e <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	b29a      	uxth	r2, r3
 8018434:	2364      	movs	r3, #100	; 0x64
 8018436:	68b9      	ldr	r1, [r7, #8]
 8018438:	4809      	ldr	r0, [pc, #36]	; (8018460 <uartWrite+0x6c>)
 801843a:	f00a fe96 	bl	802316a <HAL_UART_Transmit>
 801843e:	4603      	mov	r3, r0
 8018440:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8018442:	7cfb      	ldrb	r3, [r7, #19]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d104      	bne.n	8018452 <uartWrite+0x5e>
      {
        ret = length;
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	617b      	str	r3, [r7, #20]
      }
      break;
 801844c:	e001      	b.n	8018452 <uartWrite+0x5e>
      break;
 801844e:	bf00      	nop
 8018450:	e000      	b.n	8018454 <uartWrite+0x60>
      break;
 8018452:	bf00      	nop
  }

  return ret;
 8018454:	697b      	ldr	r3, [r7, #20]
}
 8018456:	4618      	mov	r0, r3
 8018458:	3718      	adds	r7, #24
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}
 801845e:	bf00      	nop
 8018460:	2000b1dc 	.word	0x2000b1dc

08018464 <uartWriteIT>:

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	af00      	add	r7, sp, #0
 801846a:	4603      	mov	r3, r0
 801846c:	60b9      	str	r1, [r7, #8]
 801846e:	607a      	str	r2, [r7, #4]
 8018470:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8018472:	2300      	movs	r3, #0
 8018474:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8018476:	7bfb      	ldrb	r3, [r7, #15]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d001      	beq.n	8018480 <uartWriteIT+0x1c>
 801847c:	2b01      	cmp	r3, #1
//      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
//      if (status == HAL_OK)
//      {
//        ret = length;
//      }
      break;
 801847e:	e00e      	b.n	801849e <uartWriteIT+0x3a>
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	b29b      	uxth	r3, r3
 8018484:	461a      	mov	r2, r3
 8018486:	68b9      	ldr	r1, [r7, #8]
 8018488:	4807      	ldr	r0, [pc, #28]	; (80184a8 <uartWriteIT+0x44>)
 801848a:	f00a ff07 	bl	802329c <HAL_UART_Transmit_IT>
 801848e:	4603      	mov	r3, r0
 8018490:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8018492:	7cfb      	ldrb	r3, [r7, #19]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d101      	bne.n	801849c <uartWriteIT+0x38>
        ret = length;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	617b      	str	r3, [r7, #20]
      break;
 801849c:	bf00      	nop
  }

  return ret;
 801849e:	697b      	ldr	r3, [r7, #20]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	3718      	adds	r7, #24
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bd80      	pop	{r7, pc}
 80184a8:	2000b1dc 	.word	0x2000b1dc

080184ac <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80184ac:	b480      	push	{r7}
 80184ae:	b083      	sub	sp, #12
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80184b4:	bf00      	nop
 80184b6:	370c      	adds	r7, #12
 80184b8:	46bd      	mov	sp, r7
 80184ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184be:	4770      	bx	lr

080184c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80184c0:	b480      	push	{r7}
 80184c2:	b083      	sub	sp, #12
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80184c8:	bf00      	nop
 80184ca:	370c      	adds	r7, #12
 80184cc:	46bd      	mov	sp, r7
 80184ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d2:	4770      	bx	lr

080184d4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b08a      	sub	sp, #40	; 0x28
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80184dc:	f107 0314 	add.w	r3, r7, #20
 80184e0:	2200      	movs	r2, #0
 80184e2:	601a      	str	r2, [r3, #0]
 80184e4:	605a      	str	r2, [r3, #4]
 80184e6:	609a      	str	r2, [r3, #8]
 80184e8:	60da      	str	r2, [r3, #12]
 80184ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	4a5b      	ldr	r2, [pc, #364]	; (8018660 <HAL_UART_MspInit+0x18c>)
 80184f2:	4293      	cmp	r3, r2
 80184f4:	f040 80b0 	bne.w	8018658 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 80184f8:	2300      	movs	r3, #0
 80184fa:	613b      	str	r3, [r7, #16]
 80184fc:	4b59      	ldr	r3, [pc, #356]	; (8018664 <HAL_UART_MspInit+0x190>)
 80184fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018500:	4a58      	ldr	r2, [pc, #352]	; (8018664 <HAL_UART_MspInit+0x190>)
 8018502:	f043 0310 	orr.w	r3, r3, #16
 8018506:	6453      	str	r3, [r2, #68]	; 0x44
 8018508:	4b56      	ldr	r3, [pc, #344]	; (8018664 <HAL_UART_MspInit+0x190>)
 801850a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801850c:	f003 0310 	and.w	r3, r3, #16
 8018510:	613b      	str	r3, [r7, #16]
 8018512:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018514:	2300      	movs	r3, #0
 8018516:	60fb      	str	r3, [r7, #12]
 8018518:	4b52      	ldr	r3, [pc, #328]	; (8018664 <HAL_UART_MspInit+0x190>)
 801851a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801851c:	4a51      	ldr	r2, [pc, #324]	; (8018664 <HAL_UART_MspInit+0x190>)
 801851e:	f043 0301 	orr.w	r3, r3, #1
 8018522:	6313      	str	r3, [r2, #48]	; 0x30
 8018524:	4b4f      	ldr	r3, [pc, #316]	; (8018664 <HAL_UART_MspInit+0x190>)
 8018526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018528:	f003 0301 	and.w	r3, r3, #1
 801852c:	60fb      	str	r3, [r7, #12]
 801852e:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018530:	2300      	movs	r3, #0
 8018532:	60bb      	str	r3, [r7, #8]
 8018534:	4b4b      	ldr	r3, [pc, #300]	; (8018664 <HAL_UART_MspInit+0x190>)
 8018536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018538:	4a4a      	ldr	r2, [pc, #296]	; (8018664 <HAL_UART_MspInit+0x190>)
 801853a:	f043 0302 	orr.w	r3, r3, #2
 801853e:	6313      	str	r3, [r2, #48]	; 0x30
 8018540:	4b48      	ldr	r3, [pc, #288]	; (8018664 <HAL_UART_MspInit+0x190>)
 8018542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018544:	f003 0302 	and.w	r3, r3, #2
 8018548:	60bb      	str	r3, [r7, #8]
 801854a:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801854c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018550:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018552:	2302      	movs	r3, #2
 8018554:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018556:	2300      	movs	r3, #0
 8018558:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801855a:	2303      	movs	r3, #3
 801855c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801855e:	2307      	movs	r3, #7
 8018560:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018562:	f107 0314 	add.w	r3, r7, #20
 8018566:	4619      	mov	r1, r3
 8018568:	483f      	ldr	r0, [pc, #252]	; (8018668 <HAL_UART_MspInit+0x194>)
 801856a:	f006 fe13 	bl	801f194 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801856e:	2340      	movs	r3, #64	; 0x40
 8018570:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018572:	2302      	movs	r3, #2
 8018574:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018576:	2300      	movs	r3, #0
 8018578:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801857a:	2303      	movs	r3, #3
 801857c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801857e:	2307      	movs	r3, #7
 8018580:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018582:	f107 0314 	add.w	r3, r7, #20
 8018586:	4619      	mov	r1, r3
 8018588:	4838      	ldr	r0, [pc, #224]	; (801866c <HAL_UART_MspInit+0x198>)
 801858a:	f006 fe03 	bl	801f194 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 801858e:	4b38      	ldr	r3, [pc, #224]	; (8018670 <HAL_UART_MspInit+0x19c>)
 8018590:	4a38      	ldr	r2, [pc, #224]	; (8018674 <HAL_UART_MspInit+0x1a0>)
 8018592:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8018594:	4b36      	ldr	r3, [pc, #216]	; (8018670 <HAL_UART_MspInit+0x19c>)
 8018596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801859a:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801859c:	4b34      	ldr	r3, [pc, #208]	; (8018670 <HAL_UART_MspInit+0x19c>)
 801859e:	2240      	movs	r2, #64	; 0x40
 80185a0:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80185a2:	4b33      	ldr	r3, [pc, #204]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185a4:	2200      	movs	r2, #0
 80185a6:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80185a8:	4b31      	ldr	r3, [pc, #196]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80185ae:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80185b0:	4b2f      	ldr	r3, [pc, #188]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185b2:	2200      	movs	r2, #0
 80185b4:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80185b6:	4b2e      	ldr	r3, [pc, #184]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185b8:	2200      	movs	r2, #0
 80185ba:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80185bc:	4b2c      	ldr	r3, [pc, #176]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185be:	2200      	movs	r2, #0
 80185c0:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80185c2:	4b2b      	ldr	r3, [pc, #172]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185c4:	2200      	movs	r2, #0
 80185c6:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80185c8:	4b29      	ldr	r3, [pc, #164]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185ca:	2200      	movs	r2, #0
 80185cc:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80185ce:	4828      	ldr	r0, [pc, #160]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185d0:	f005 fefc 	bl	801e3cc <HAL_DMA_Init>
 80185d4:	4603      	mov	r3, r0
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d001      	beq.n	80185de <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80185da:	f7fa fa51 	bl	8012a80 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	4a23      	ldr	r2, [pc, #140]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185e2:	631a      	str	r2, [r3, #48]	; 0x30
 80185e4:	4a22      	ldr	r2, [pc, #136]	; (8018670 <HAL_UART_MspInit+0x19c>)
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80185ea:	4b23      	ldr	r3, [pc, #140]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 80185ec:	4a23      	ldr	r2, [pc, #140]	; (801867c <HAL_UART_MspInit+0x1a8>)
 80185ee:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80185f0:	4b21      	ldr	r3, [pc, #132]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 80185f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80185f6:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80185f8:	4b1f      	ldr	r3, [pc, #124]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 80185fa:	2200      	movs	r2, #0
 80185fc:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80185fe:	4b1e      	ldr	r3, [pc, #120]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018600:	2200      	movs	r2, #0
 8018602:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8018604:	4b1c      	ldr	r3, [pc, #112]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801860a:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801860c:	4b1a      	ldr	r3, [pc, #104]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 801860e:	2200      	movs	r2, #0
 8018610:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8018612:	4b19      	ldr	r3, [pc, #100]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018614:	2200      	movs	r2, #0
 8018616:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8018618:	4b17      	ldr	r3, [pc, #92]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 801861a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801861e:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8018620:	4b15      	ldr	r3, [pc, #84]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018622:	2200      	movs	r2, #0
 8018624:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8018626:	4b14      	ldr	r3, [pc, #80]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018628:	2200      	movs	r2, #0
 801862a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 801862c:	4812      	ldr	r0, [pc, #72]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 801862e:	f005 fecd 	bl	801e3cc <HAL_DMA_Init>
 8018632:	4603      	mov	r3, r0
 8018634:	2b00      	cmp	r3, #0
 8018636:	d001      	beq.n	801863c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8018638:	f7fa fa22 	bl	8012a80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	4a0e      	ldr	r2, [pc, #56]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018640:	635a      	str	r2, [r3, #52]	; 0x34
 8018642:	4a0d      	ldr	r2, [pc, #52]	; (8018678 <HAL_UART_MspInit+0x1a4>)
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8018648:	2200      	movs	r2, #0
 801864a:	2100      	movs	r1, #0
 801864c:	2025      	movs	r0, #37	; 0x25
 801864e:	f005 fe78 	bl	801e342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8018652:	2025      	movs	r0, #37	; 0x25
 8018654:	f005 fe91 	bl	801e37a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018658:	bf00      	nop
 801865a:	3728      	adds	r7, #40	; 0x28
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}
 8018660:	40011000 	.word	0x40011000
 8018664:	40023800 	.word	0x40023800
 8018668:	40020000 	.word	0x40020000
 801866c:	40020400 	.word	0x40020400
 8018670:	2000b21c 	.word	0x2000b21c
 8018674:	400264b8 	.word	0x400264b8
 8018678:	2000b27c 	.word	0x2000b27c
 801867c:	40026440 	.word	0x40026440

08018680 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8018680:	b580      	push	{r7, lr}
 8018682:	b082      	sub	sp, #8
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	4a11      	ldr	r2, [pc, #68]	; (80186d4 <HAL_UART_MspDeInit+0x54>)
 801868e:	4293      	cmp	r3, r2
 8018690:	d11b      	bne.n	80186ca <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8018692:	4b11      	ldr	r3, [pc, #68]	; (80186d8 <HAL_UART_MspDeInit+0x58>)
 8018694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018696:	4a10      	ldr	r2, [pc, #64]	; (80186d8 <HAL_UART_MspDeInit+0x58>)
 8018698:	f023 0310 	bic.w	r3, r3, #16
 801869c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 801869e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80186a2:	480e      	ldr	r0, [pc, #56]	; (80186dc <HAL_UART_MspDeInit+0x5c>)
 80186a4:	f006 fefa 	bl	801f49c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80186a8:	2140      	movs	r1, #64	; 0x40
 80186aa:	480d      	ldr	r0, [pc, #52]	; (80186e0 <HAL_UART_MspDeInit+0x60>)
 80186ac:	f006 fef6 	bl	801f49c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186b4:	4618      	mov	r0, r3
 80186b6:	f005 ff37 	bl	801e528 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186be:	4618      	mov	r0, r3
 80186c0:	f005 ff32 	bl	801e528 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80186c4:	2025      	movs	r0, #37	; 0x25
 80186c6:	f005 fe66 	bl	801e396 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80186ca:	bf00      	nop
 80186cc:	3708      	adds	r7, #8
 80186ce:	46bd      	mov	sp, r7
 80186d0:	bd80      	pop	{r7, pc}
 80186d2:	bf00      	nop
 80186d4:	40011000 	.word	0x40011000
 80186d8:	40023800 	.word	0x40023800
 80186dc:	40020000 	.word	0x40020000
 80186e0:	40020400 	.word	0x40020400

080186e4 <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 80186e4:	b590      	push	{r4, r7, lr}
 80186e6:	b089      	sub	sp, #36	; 0x24
 80186e8:	af02      	add	r7, sp, #8
 80186ea:	4603      	mov	r3, r0
 80186ec:	80fb      	strh	r3, [r7, #6]
 80186ee:	460b      	mov	r3, r1
 80186f0:	80bb      	strh	r3, [r7, #4]
 80186f2:	4613      	mov	r3, r2
 80186f4:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 50;
 80186f6:	2332      	movs	r3, #50	; 0x32
 80186f8:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 80186fa:	7dfb      	ldrb	r3, [r7, #23]
 80186fc:	2b7e      	cmp	r3, #126	; 0x7e
 80186fe:	d910      	bls.n	8018722 <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8018700:	78fb      	ldrb	r3, [r7, #3]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d006      	beq.n	8018714 <draw_fan_status+0x30>
 8018706:	4a1a      	ldr	r2, [pc, #104]	; (8018770 <draw_fan_status+0x8c>)
 8018708:	f107 030c 	add.w	r3, r7, #12
 801870c:	6810      	ldr	r0, [r2, #0]
 801870e:	6851      	ldr	r1, [r2, #4]
 8018710:	c303      	stmia	r3!, {r0, r1}
 8018712:	e020      	b.n	8018756 <draw_fan_status+0x72>
 8018714:	4a17      	ldr	r2, [pc, #92]	; (8018774 <draw_fan_status+0x90>)
 8018716:	f107 030c 	add.w	r3, r7, #12
 801871a:	6810      	ldr	r0, [r2, #0]
 801871c:	6851      	ldr	r1, [r2, #4]
 801871e:	c303      	stmia	r3!, {r0, r1}
 8018720:	e019      	b.n	8018756 <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 8018722:	7dfb      	ldrb	r3, [r7, #23]
 8018724:	2b00      	cmp	r3, #0
 8018726:	d010      	beq.n	801874a <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8018728:	78fb      	ldrb	r3, [r7, #3]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d006      	beq.n	801873c <draw_fan_status+0x58>
 801872e:	4a10      	ldr	r2, [pc, #64]	; (8018770 <draw_fan_status+0x8c>)
 8018730:	f107 030c 	add.w	r3, r7, #12
 8018734:	6810      	ldr	r0, [r2, #0]
 8018736:	6851      	ldr	r1, [r2, #4]
 8018738:	c303      	stmia	r3!, {r0, r1}
 801873a:	e00c      	b.n	8018756 <draw_fan_status+0x72>
 801873c:	4a0d      	ldr	r2, [pc, #52]	; (8018774 <draw_fan_status+0x90>)
 801873e:	f107 030c 	add.w	r3, r7, #12
 8018742:	6810      	ldr	r0, [r2, #0]
 8018744:	6851      	ldr	r1, [r2, #4]
 8018746:	c303      	stmia	r3!, {r0, r1}
 8018748:	e005      	b.n	8018756 <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 801874a:	4a0a      	ldr	r2, [pc, #40]	; (8018774 <draw_fan_status+0x90>)
 801874c:	f107 030c 	add.w	r3, r7, #12
 8018750:	6810      	ldr	r0, [r2, #0]
 8018752:	6851      	ldr	r1, [r2, #4]
 8018754:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(x, y, image.width, image.height, image.data);
 8018756:	8a3a      	ldrh	r2, [r7, #16]
 8018758:	8a7c      	ldrh	r4, [r7, #18]
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	88b9      	ldrh	r1, [r7, #4]
 801875e:	88f8      	ldrh	r0, [r7, #6]
 8018760:	9300      	str	r3, [sp, #0]
 8018762:	4623      	mov	r3, r4
 8018764:	f7fc ff84 	bl	8015670 <lcdDrawBufferImage>
}
 8018768:	bf00      	nop
 801876a:	371c      	adds	r7, #28
 801876c:	46bd      	mov	sp, r7
 801876e:	bd90      	pop	{r4, r7, pc}
 8018770:	08033648 	.word	0x08033648
 8018774:	08033640 	.word	0x08033640

08018778 <get_blink>:

bool get_blink() {
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 801877e:	f7fa f8f6 	bl	801296e <millis>
 8018782:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 8018784:	4b0d      	ldr	r3, [pc, #52]	; (80187bc <get_blink+0x44>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	687a      	ldr	r2, [r7, #4]
 801878a:	1ad3      	subs	r3, r2, r3
 801878c:	2b00      	cmp	r3, #0
 801878e:	db0a      	blt.n	80187a6 <get_blink+0x2e>
    blink ^= 0xFF;
 8018790:	4b0b      	ldr	r3, [pc, #44]	; (80187c0 <get_blink+0x48>)
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	43db      	mvns	r3, r3
 8018796:	b2da      	uxtb	r2, r3
 8018798:	4b09      	ldr	r3, [pc, #36]	; (80187c0 <get_blink+0x48>)
 801879a:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 80187a2:	4a06      	ldr	r2, [pc, #24]	; (80187bc <get_blink+0x44>)
 80187a4:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 80187a6:	4b06      	ldr	r3, [pc, #24]	; (80187c0 <get_blink+0x48>)
 80187a8:	781b      	ldrb	r3, [r3, #0]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	bf14      	ite	ne
 80187ae:	2301      	movne	r3, #1
 80187b0:	2300      	moveq	r3, #0
 80187b2:	b2db      	uxtb	r3, r3
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	2000b2dc 	.word	0x2000b2dc
 80187c0:	2000b2e0 	.word	0x2000b2e0

080187c4 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b082      	sub	sp, #8
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	4603      	mov	r3, r0
 80187cc:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80187ce:	4b1d      	ldr	r3, [pc, #116]	; (8018844 <SD_CheckStatus+0x80>)
 80187d0:	2200      	movs	r2, #0
 80187d2:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 80187d4:	f7fd ff00 	bl	80165d8 <sdIsInit>
 80187d8:	4603      	mov	r3, r0
 80187da:	f083 0301 	eor.w	r3, r3, #1
 80187de:	b2db      	uxtb	r3, r3
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d007      	beq.n	80187f4 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 80187e4:	4b17      	ldr	r3, [pc, #92]	; (8018844 <SD_CheckStatus+0x80>)
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	f043 0301 	orr.w	r3, r3, #1
 80187ee:	b2da      	uxtb	r2, r3
 80187f0:	4b14      	ldr	r3, [pc, #80]	; (8018844 <SD_CheckStatus+0x80>)
 80187f2:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80187f4:	f7fd fefc 	bl	80165f0 <sdIsDetected>
 80187f8:	4603      	mov	r3, r0
 80187fa:	f083 0301 	eor.w	r3, r3, #1
 80187fe:	b2db      	uxtb	r3, r3
 8018800:	2b00      	cmp	r3, #0
 8018802:	d007      	beq.n	8018814 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8018804:	4b0f      	ldr	r3, [pc, #60]	; (8018844 <SD_CheckStatus+0x80>)
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	b2db      	uxtb	r3, r3
 801880a:	f043 0302 	orr.w	r3, r3, #2
 801880e:	b2da      	uxtb	r2, r3
 8018810:	4b0c      	ldr	r3, [pc, #48]	; (8018844 <SD_CheckStatus+0x80>)
 8018812:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8018814:	200a      	movs	r0, #10
 8018816:	f7fd ff6f 	bl	80166f8 <sdIsReady>
 801881a:	4603      	mov	r3, r0
 801881c:	f083 0301 	eor.w	r3, r3, #1
 8018820:	b2db      	uxtb	r3, r3
 8018822:	2b00      	cmp	r3, #0
 8018824:	d007      	beq.n	8018836 <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 8018826:	4b07      	ldr	r3, [pc, #28]	; (8018844 <SD_CheckStatus+0x80>)
 8018828:	781b      	ldrb	r3, [r3, #0]
 801882a:	b2db      	uxtb	r3, r3
 801882c:	f043 0301 	orr.w	r3, r3, #1
 8018830:	b2da      	uxtb	r2, r3
 8018832:	4b04      	ldr	r3, [pc, #16]	; (8018844 <SD_CheckStatus+0x80>)
 8018834:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8018836:	4b03      	ldr	r3, [pc, #12]	; (8018844 <SD_CheckStatus+0x80>)
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	b2db      	uxtb	r3, r3
}
 801883c:	4618      	mov	r0, r3
 801883e:	3708      	adds	r7, #8
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}
 8018844:	200000b4 	.word	0x200000b4

08018848 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	4603      	mov	r3, r0
 8018850:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8018852:	4b0d      	ldr	r3, [pc, #52]	; (8018888 <SD_initialize+0x40>)
 8018854:	2200      	movs	r2, #0
 8018856:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8018858:	f7fd febe 	bl	80165d8 <sdIsInit>
 801885c:	4603      	mov	r3, r0
 801885e:	f083 0301 	eor.w	r3, r3, #1
 8018862:	b2db      	uxtb	r3, r3
 8018864:	2b00      	cmp	r3, #0
 8018866:	d007      	beq.n	8018878 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8018868:	4b07      	ldr	r3, [pc, #28]	; (8018888 <SD_initialize+0x40>)
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	b2db      	uxtb	r3, r3
 801886e:	f043 0301 	orr.w	r3, r3, #1
 8018872:	b2da      	uxtb	r2, r3
 8018874:	4b04      	ldr	r3, [pc, #16]	; (8018888 <SD_initialize+0x40>)
 8018876:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8018878:	4b03      	ldr	r3, [pc, #12]	; (8018888 <SD_initialize+0x40>)
 801887a:	781b      	ldrb	r3, [r3, #0]
 801887c:	b2db      	uxtb	r3, r3
}
 801887e:	4618      	mov	r0, r3
 8018880:	3708      	adds	r7, #8
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}
 8018886:	bf00      	nop
 8018888:	200000b4 	.word	0x200000b4

0801888c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	4603      	mov	r3, r0
 8018894:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8018896:	79fb      	ldrb	r3, [r7, #7]
 8018898:	4618      	mov	r0, r3
 801889a:	f7ff ff93 	bl	80187c4 <SD_CheckStatus>
 801889e:	4603      	mov	r3, r0
}
 80188a0:	4618      	mov	r0, r3
 80188a2:	3708      	adds	r7, #8
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}

080188a8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b086      	sub	sp, #24
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	60b9      	str	r1, [r7, #8]
 80188b0:	607a      	str	r2, [r7, #4]
 80188b2:	603b      	str	r3, [r7, #0]
 80188b4:	4603      	mov	r3, r0
 80188b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80188b8:	2301      	movs	r3, #1
 80188ba:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 80188bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80188c0:	683a      	ldr	r2, [r7, #0]
 80188c2:	68b9      	ldr	r1, [r7, #8]
 80188c4:	6878      	ldr	r0, [r7, #4]
 80188c6:	f7fd ff37 	bl	8016738 <sdReadBlocks>
 80188ca:	4603      	mov	r3, r0
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d001      	beq.n	80188d4 <SD_read+0x2c>
  {
    res = RES_OK;
 80188d0:	2300      	movs	r3, #0
 80188d2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80188d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3718      	adds	r7, #24
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}

080188de <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80188de:	b580      	push	{r7, lr}
 80188e0:	b086      	sub	sp, #24
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	60b9      	str	r1, [r7, #8]
 80188e6:	607a      	str	r2, [r7, #4]
 80188e8:	603b      	str	r3, [r7, #0]
 80188ea:	4603      	mov	r3, r0
 80188ec:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80188ee:	2301      	movs	r3, #1
 80188f0:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 80188f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80188f6:	683a      	ldr	r2, [r7, #0]
 80188f8:	68b9      	ldr	r1, [r7, #8]
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f7fd ff66 	bl	80167cc <sdWriteBlocks>
 8018900:	4603      	mov	r3, r0
 8018902:	2b00      	cmp	r3, #0
 8018904:	d001      	beq.n	801890a <SD_write+0x2c>
  {
    res = RES_OK;
 8018906:	2300      	movs	r3, #0
 8018908:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801890a:	7dfb      	ldrb	r3, [r7, #23]
}
 801890c:	4618      	mov	r0, r3
 801890e:	3718      	adds	r7, #24
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b08c      	sub	sp, #48	; 0x30
 8018918:	af00      	add	r7, sp, #0
 801891a:	4603      	mov	r3, r0
 801891c:	603a      	str	r2, [r7, #0]
 801891e:	71fb      	strb	r3, [r7, #7]
 8018920:	460b      	mov	r3, r1
 8018922:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8018924:	2301      	movs	r3, #1
 8018926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801892a:	4b25      	ldr	r3, [pc, #148]	; (80189c0 <SD_ioctl+0xac>)
 801892c:	781b      	ldrb	r3, [r3, #0]
 801892e:	b2db      	uxtb	r3, r3
 8018930:	f003 0301 	and.w	r3, r3, #1
 8018934:	2b00      	cmp	r3, #0
 8018936:	d001      	beq.n	801893c <SD_ioctl+0x28>
 8018938:	2303      	movs	r3, #3
 801893a:	e03c      	b.n	80189b6 <SD_ioctl+0xa2>

  switch (cmd)
 801893c:	79bb      	ldrb	r3, [r7, #6]
 801893e:	2b03      	cmp	r3, #3
 8018940:	d834      	bhi.n	80189ac <SD_ioctl+0x98>
 8018942:	a201      	add	r2, pc, #4	; (adr r2, 8018948 <SD_ioctl+0x34>)
 8018944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018948:	08018959 	.word	0x08018959
 801894c:	08018961 	.word	0x08018961
 8018950:	08018979 	.word	0x08018979
 8018954:	08018993 	.word	0x08018993
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8018958:	2300      	movs	r3, #0
 801895a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801895e:	e028      	b.n	80189b2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8018960:	f107 0308 	add.w	r3, r7, #8
 8018964:	4618      	mov	r0, r3
 8018966:	f7fd fe59 	bl	801661c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 801896a:	6a3a      	ldr	r2, [r7, #32]
 801896c:	683b      	ldr	r3, [r7, #0]
 801896e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8018970:	2300      	movs	r3, #0
 8018972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018976:	e01c      	b.n	80189b2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8018978:	f107 0308 	add.w	r3, r7, #8
 801897c:	4618      	mov	r0, r3
 801897e:	f7fd fe4d 	bl	801661c <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8018982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018984:	b29a      	uxth	r2, r3
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801898a:	2300      	movs	r3, #0
 801898c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018990:	e00f      	b.n	80189b2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 8018992:	f107 0308 	add.w	r3, r7, #8
 8018996:	4618      	mov	r0, r3
 8018998:	f7fd fe40 	bl	801661c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 801899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801899e:	0a5a      	lsrs	r2, r3, #9
 80189a0:	683b      	ldr	r3, [r7, #0]
 80189a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80189a4:	2300      	movs	r3, #0
 80189a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80189aa:	e002      	b.n	80189b2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80189ac:	2304      	movs	r3, #4
 80189ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80189b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3730      	adds	r7, #48	; 0x30
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	200000b4 	.word	0x200000b4

080189c4 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b084      	sub	sp, #16
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	3306      	adds	r3, #6
 80189d2:	2220      	movs	r2, #32
 80189d4:	2100      	movs	r1, #0
 80189d6:	4618      	mov	r0, r3
 80189d8:	f00c face 	bl	8024f78 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	2200      	movs	r2, #0
 80189e0:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	781b      	ldrb	r3, [r3, #0]
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d003      	beq.n	80189f2 <hanFontLoad+0x2e>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	781b      	ldrb	r3, [r3, #0]
 80189ee:	2b0a      	cmp	r3, #10
 80189f0:	d107      	bne.n	8018a02 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	2204      	movs	r2, #4
 80189f6:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	2201      	movs	r2, #1
 80189fc:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 80189fe:	2304      	movs	r3, #4
 8018a00:	e03b      	b.n	8018a7a <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	b25b      	sxtb	r3, r3
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	da2b      	bge.n	8018a64 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	041a      	lsls	r2, r3, #16
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	3301      	adds	r3, #1
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	021b      	lsls	r3, r3, #8
 8018a1a:	4313      	orrs	r3, r2
 8018a1c:	687a      	ldr	r2, [r7, #4]
 8018a1e:	3202      	adds	r2, #2
 8018a20:	7812      	ldrb	r2, [r2, #0]
 8018a22:	4313      	orrs	r3, r2
 8018a24:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	4a16      	ldr	r2, [pc, #88]	; (8018a84 <hanFontLoad+0xc0>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d30e      	bcc.n	8018a4c <hanFontLoad+0x88>
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	4a15      	ldr	r2, [pc, #84]	; (8018a88 <hanFontLoad+0xc4>)
 8018a32:	4293      	cmp	r3, r2
 8018a34:	d80a      	bhi.n	8018a4c <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8018a36:	683b      	ldr	r3, [r7, #0]
 8018a38:	2201      	movs	r2, #1
 8018a3a:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	2203      	movs	r2, #3
 8018a40:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8018a42:	6839      	ldr	r1, [r7, #0]
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f000 f91f 	bl	8018c88 <hanUniFontLoad>
 8018a4a:	e009      	b.n	8018a60 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	2201      	movs	r2, #1
 8018a50:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8018a52:	683b      	ldr	r3, [r7, #0]
 8018a54:	2202      	movs	r2, #2
 8018a56:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8018a58:	6839      	ldr	r1, [r7, #0]
 8018a5a:	6878      	ldr	r0, [r7, #4]
 8018a5c:	f000 f816 	bl	8018a8c <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8018a60:	2301      	movs	r3, #1
 8018a62:	e00a      	b.n	8018a7a <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8018a64:	683b      	ldr	r3, [r7, #0]
 8018a66:	2202      	movs	r2, #2
 8018a68:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	2201      	movs	r2, #1
 8018a6e:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8018a70:	6839      	ldr	r1, [r7, #0]
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f000 fa30 	bl	8018ed8 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8018a78:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	00eab080 	.word	0x00eab080
 8018a88:	00ed9fb0 	.word	0x00ed9fb0

08018a8c <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	021b      	lsls	r3, r3, #8
 8018a9c:	b21a      	sxth	r2, r3
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	781b      	ldrb	r3, [r3, #0]
 8018aa4:	b21b      	sxth	r3, r3
 8018aa6:	4313      	orrs	r3, r2
 8018aa8:	b21b      	sxth	r3, r3
 8018aaa:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8018aac:	89bb      	ldrh	r3, [r7, #12]
 8018aae:	4618      	mov	r0, r3
 8018ab0:	f000 fa3c 	bl	8018f2c <hanCnvCodeWan2Johab>
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8018ab8:	89bb      	ldrh	r3, [r7, #12]
 8018aba:	0a9b      	lsrs	r3, r3, #10
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	f003 031f 	and.w	r3, r3, #31
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	4b63      	ldr	r3, [pc, #396]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018ac6:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8018ac8:	89bb      	ldrh	r3, [r7, #12]
 8018aca:	095b      	lsrs	r3, r3, #5
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	f003 031f 	and.w	r3, r3, #31
 8018ad2:	b29a      	uxth	r2, r3
 8018ad4:	4b60      	ldr	r3, [pc, #384]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018ad6:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8018ad8:	89bb      	ldrh	r3, [r7, #12]
 8018ada:	f003 031f 	and.w	r3, r3, #31
 8018ade:	b29a      	uxth	r2, r3
 8018ae0:	4b5e      	ldr	r3, [pc, #376]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018ae2:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8018ae4:	4b5b      	ldr	r3, [pc, #364]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018ae6:	881b      	ldrh	r3, [r3, #0]
 8018ae8:	461a      	mov	r2, r3
 8018aea:	4b5d      	ldr	r3, [pc, #372]	; (8018c60 <hanWanFontLoad+0x1d4>)
 8018aec:	5c9b      	ldrb	r3, [r3, r2]
 8018aee:	b29a      	uxth	r2, r3
 8018af0:	4b58      	ldr	r3, [pc, #352]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018af2:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8018af4:	4b58      	ldr	r3, [pc, #352]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018af6:	881b      	ldrh	r3, [r3, #0]
 8018af8:	461a      	mov	r2, r3
 8018afa:	4b5a      	ldr	r3, [pc, #360]	; (8018c64 <hanWanFontLoad+0x1d8>)
 8018afc:	5c9b      	ldrb	r3, [r3, r2]
 8018afe:	b29a      	uxth	r2, r3
 8018b00:	4b55      	ldr	r3, [pc, #340]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018b02:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8018b04:	4b55      	ldr	r3, [pc, #340]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018b06:	881b      	ldrh	r3, [r3, #0]
 8018b08:	461a      	mov	r2, r3
 8018b0a:	4b57      	ldr	r3, [pc, #348]	; (8018c68 <hanWanFontLoad+0x1dc>)
 8018b0c:	5c9b      	ldrb	r3, [r3, r2]
 8018b0e:	b29a      	uxth	r2, r3
 8018b10:	4b52      	ldr	r3, [pc, #328]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018b12:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8018b14:	4b51      	ldr	r3, [pc, #324]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018b16:	881b      	ldrh	r3, [r3, #0]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d006      	beq.n	8018b2a <hanWanFontLoad+0x9e>
 8018b1c:	4b4e      	ldr	r3, [pc, #312]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018b1e:	881b      	ldrh	r3, [r3, #0]
 8018b20:	461a      	mov	r2, r3
 8018b22:	4b52      	ldr	r3, [pc, #328]	; (8018c6c <hanWanFontLoad+0x1e0>)
 8018b24:	5c9b      	ldrb	r3, [r3, r2]
 8018b26:	b29b      	uxth	r3, r3
 8018b28:	e005      	b.n	8018b36 <hanWanFontLoad+0xaa>
 8018b2a:	4b4b      	ldr	r3, [pc, #300]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	461a      	mov	r2, r3
 8018b30:	4b4f      	ldr	r3, [pc, #316]	; (8018c70 <hanWanFontLoad+0x1e4>)
 8018b32:	5c9b      	ldrb	r3, [r3, r2]
 8018b34:	b29b      	uxth	r3, r3
 8018b36:	4a4f      	ldr	r2, [pc, #316]	; (8018c74 <hanWanFontLoad+0x1e8>)
 8018b38:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8018b3a:	4b46      	ldr	r3, [pc, #280]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018b3c:	881b      	ldrh	r3, [r3, #0]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d009      	beq.n	8018b56 <hanWanFontLoad+0xca>
 8018b42:	4b44      	ldr	r3, [pc, #272]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018b44:	881b      	ldrh	r3, [r3, #0]
 8018b46:	2b01      	cmp	r3, #1
 8018b48:	d005      	beq.n	8018b56 <hanWanFontLoad+0xca>
 8018b4a:	4b42      	ldr	r3, [pc, #264]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	2b10      	cmp	r3, #16
 8018b50:	d001      	beq.n	8018b56 <hanWanFontLoad+0xca>
 8018b52:	2301      	movs	r3, #1
 8018b54:	e000      	b.n	8018b58 <hanWanFontLoad+0xcc>
 8018b56:	2300      	movs	r3, #0
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	4a40      	ldr	r2, [pc, #256]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018b5c:	8812      	ldrh	r2, [r2, #0]
 8018b5e:	2a00      	cmp	r2, #0
 8018b60:	d001      	beq.n	8018b66 <hanWanFontLoad+0xda>
 8018b62:	2202      	movs	r2, #2
 8018b64:	e000      	b.n	8018b68 <hanWanFontLoad+0xdc>
 8018b66:	2200      	movs	r2, #0
 8018b68:	4413      	add	r3, r2
 8018b6a:	b29a      	uxth	r2, r3
 8018b6c:	4b42      	ldr	r3, [pc, #264]	; (8018c78 <hanWanFontLoad+0x1ec>)
 8018b6e:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8018b70:	4b39      	ldr	r3, [pc, #228]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018b72:	881b      	ldrh	r3, [r3, #0]
 8018b74:	461a      	mov	r2, r3
 8018b76:	4b41      	ldr	r3, [pc, #260]	; (8018c7c <hanWanFontLoad+0x1f0>)
 8018b78:	5c9b      	ldrb	r3, [r3, r2]
 8018b7a:	b29a      	uxth	r2, r3
 8018b7c:	4b40      	ldr	r3, [pc, #256]	; (8018c80 <hanWanFontLoad+0x1f4>)
 8018b7e:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8018b80:	2300      	movs	r3, #0
 8018b82:	81fb      	strh	r3, [r7, #14]
 8018b84:	e035      	b.n	8018bf2 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8018b86:	4b3b      	ldr	r3, [pc, #236]	; (8018c74 <hanWanFontLoad+0x1e8>)
 8018b88:	881b      	ldrh	r3, [r3, #0]
 8018b8a:	461a      	mov	r2, r3
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	009b      	lsls	r3, r3, #2
 8018b90:	4413      	add	r3, r2
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	461a      	mov	r2, r3
 8018b96:	4b2f      	ldr	r3, [pc, #188]	; (8018c54 <hanWanFontLoad+0x1c8>)
 8018b98:	881b      	ldrh	r3, [r3, #0]
 8018b9a:	441a      	add	r2, r3
 8018b9c:	89fb      	ldrh	r3, [r7, #14]
 8018b9e:	4939      	ldr	r1, [pc, #228]	; (8018c84 <hanWanFontLoad+0x1f8>)
 8018ba0:	0152      	lsls	r2, r2, #5
 8018ba2:	4413      	add	r3, r2
 8018ba4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8018ba8:	89fb      	ldrh	r3, [r7, #14]
 8018baa:	b2d1      	uxtb	r1, r2
 8018bac:	683a      	ldr	r2, [r7, #0]
 8018bae:	4413      	add	r3, r2
 8018bb0:	460a      	mov	r2, r1
 8018bb2:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8018bb4:	89fb      	ldrh	r3, [r7, #14]
 8018bb6:	683a      	ldr	r2, [r7, #0]
 8018bb8:	4413      	add	r3, r2
 8018bba:	7999      	ldrb	r1, [r3, #6]
 8018bbc:	4b2e      	ldr	r3, [pc, #184]	; (8018c78 <hanWanFontLoad+0x1ec>)
 8018bbe:	881b      	ldrh	r3, [r3, #0]
 8018bc0:	461a      	mov	r2, r3
 8018bc2:	2316      	movs	r3, #22
 8018bc4:	fb02 f303 	mul.w	r3, r2, r3
 8018bc8:	33a0      	adds	r3, #160	; 0xa0
 8018bca:	4a23      	ldr	r2, [pc, #140]	; (8018c58 <hanWanFontLoad+0x1cc>)
 8018bcc:	8812      	ldrh	r2, [r2, #0]
 8018bce:	441a      	add	r2, r3
 8018bd0:	89fb      	ldrh	r3, [r7, #14]
 8018bd2:	482c      	ldr	r0, [pc, #176]	; (8018c84 <hanWanFontLoad+0x1f8>)
 8018bd4:	0152      	lsls	r2, r2, #5
 8018bd6:	4413      	add	r3, r2
 8018bd8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018bdc:	b2da      	uxtb	r2, r3
 8018bde:	89fb      	ldrh	r3, [r7, #14]
 8018be0:	430a      	orrs	r2, r1
 8018be2:	b2d1      	uxtb	r1, r2
 8018be4:	683a      	ldr	r2, [r7, #0]
 8018be6:	4413      	add	r3, r2
 8018be8:	460a      	mov	r2, r1
 8018bea:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8018bec:	89fb      	ldrh	r3, [r7, #14]
 8018bee:	3301      	adds	r3, #1
 8018bf0:	81fb      	strh	r3, [r7, #14]
 8018bf2:	89fb      	ldrh	r3, [r7, #14]
 8018bf4:	2b1f      	cmp	r3, #31
 8018bf6:	d9c6      	bls.n	8018b86 <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8018bf8:	4b18      	ldr	r3, [pc, #96]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018bfa:	881b      	ldrh	r3, [r3, #0]
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d025      	beq.n	8018c4c <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8018c00:	2300      	movs	r3, #0
 8018c02:	81fb      	strh	r3, [r7, #14]
 8018c04:	e01f      	b.n	8018c46 <hanWanFontLoad+0x1ba>
 8018c06:	89fb      	ldrh	r3, [r7, #14]
 8018c08:	683a      	ldr	r2, [r7, #0]
 8018c0a:	4413      	add	r3, r2
 8018c0c:	7999      	ldrb	r1, [r3, #6]
 8018c0e:	4b1c      	ldr	r3, [pc, #112]	; (8018c80 <hanWanFontLoad+0x1f4>)
 8018c10:	881b      	ldrh	r3, [r3, #0]
 8018c12:	461a      	mov	r2, r3
 8018c14:	4613      	mov	r3, r2
 8018c16:	00db      	lsls	r3, r3, #3
 8018c18:	1a9b      	subs	r3, r3, r2
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	33f8      	adds	r3, #248	; 0xf8
 8018c1e:	4a0f      	ldr	r2, [pc, #60]	; (8018c5c <hanWanFontLoad+0x1d0>)
 8018c20:	8812      	ldrh	r2, [r2, #0]
 8018c22:	441a      	add	r2, r3
 8018c24:	89fb      	ldrh	r3, [r7, #14]
 8018c26:	4817      	ldr	r0, [pc, #92]	; (8018c84 <hanWanFontLoad+0x1f8>)
 8018c28:	0152      	lsls	r2, r2, #5
 8018c2a:	4413      	add	r3, r2
 8018c2c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018c30:	b2da      	uxtb	r2, r3
 8018c32:	89fb      	ldrh	r3, [r7, #14]
 8018c34:	430a      	orrs	r2, r1
 8018c36:	b2d1      	uxtb	r1, r2
 8018c38:	683a      	ldr	r2, [r7, #0]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	460a      	mov	r2, r1
 8018c3e:	719a      	strb	r2, [r3, #6]
 8018c40:	89fb      	ldrh	r3, [r7, #14]
 8018c42:	3301      	adds	r3, #1
 8018c44:	81fb      	strh	r3, [r7, #14]
 8018c46:	89fb      	ldrh	r3, [r7, #14]
 8018c48:	2b1f      	cmp	r3, #31
 8018c4a:	d9dc      	bls.n	8018c06 <hanWanFontLoad+0x17a>
  }
}
 8018c4c:	bf00      	nop
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	2000b2e2 	.word	0x2000b2e2
 8018c58:	2000b2e4 	.word	0x2000b2e4
 8018c5c:	2000b2e6 	.word	0x2000b2e6
 8018c60:	0802b63c 	.word	0x0802b63c
 8018c64:	0802b65c 	.word	0x0802b65c
 8018c68:	0802b67c 	.word	0x0802b67c
 8018c6c:	0802b714 	.word	0x0802b714
 8018c70:	0802b6fc 	.word	0x0802b6fc
 8018c74:	2000b2e8 	.word	0x2000b2e8
 8018c78:	2000b2ea 	.word	0x2000b2ea
 8018c7c:	0802b72c 	.word	0x0802b72c
 8018c80:	2000b2ec 	.word	0x2000b2ec
 8018c84:	0802dc40 	.word	0x0802dc40

08018c88 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8018c88:	b480      	push	{r7}
 8018c8a:	b085      	sub	sp, #20
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	031b      	lsls	r3, r3, #12
 8018c98:	b21a      	sxth	r2, r3
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	019b      	lsls	r3, r3, #6
 8018ca2:	b21b      	sxth	r3, r3
 8018ca4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8018ca8:	b21b      	sxth	r3, r3
 8018caa:	4313      	orrs	r3, r2
 8018cac:	b21a      	sxth	r2, r3
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	3302      	adds	r3, #2
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	b21b      	sxth	r3, r3
 8018cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018cba:	b21b      	sxth	r3, r3
 8018cbc:	4313      	orrs	r3, r2
 8018cbe:	b21b      	sxth	r3, r3
 8018cc0:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8018cc2:	89bb      	ldrh	r3, [r7, #12]
 8018cc4:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8018cc8:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8018cca:	89ba      	ldrh	r2, [r7, #12]
 8018ccc:	0893      	lsrs	r3, r2, #2
 8018cce:	4973      	ldr	r1, [pc, #460]	; (8018e9c <hanUniFontLoad+0x214>)
 8018cd0:	fba1 3103 	umull	r3, r1, r1, r3
 8018cd4:	460b      	mov	r3, r1
 8018cd6:	00db      	lsls	r3, r3, #3
 8018cd8:	1a5b      	subs	r3, r3, r1
 8018cda:	009b      	lsls	r3, r3, #2
 8018cdc:	1ad3      	subs	r3, r2, r3
 8018cde:	b29a      	uxth	r2, r3
 8018ce0:	4b6f      	ldr	r3, [pc, #444]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018ce2:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8018ce4:	89bb      	ldrh	r3, [r7, #12]
 8018ce6:	089b      	lsrs	r3, r3, #2
 8018ce8:	4a6c      	ldr	r2, [pc, #432]	; (8018e9c <hanUniFontLoad+0x214>)
 8018cea:	fba2 2303 	umull	r2, r3, r2, r3
 8018cee:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8018cf0:	89b9      	ldrh	r1, [r7, #12]
 8018cf2:	4b6c      	ldr	r3, [pc, #432]	; (8018ea4 <hanUniFontLoad+0x21c>)
 8018cf4:	fba3 2301 	umull	r2, r3, r3, r1
 8018cf8:	1aca      	subs	r2, r1, r3
 8018cfa:	0852      	lsrs	r2, r2, #1
 8018cfc:	4413      	add	r3, r2
 8018cfe:	091a      	lsrs	r2, r3, #4
 8018d00:	4613      	mov	r3, r2
 8018d02:	005b      	lsls	r3, r3, #1
 8018d04:	4413      	add	r3, r2
 8018d06:	00da      	lsls	r2, r3, #3
 8018d08:	1ad2      	subs	r2, r2, r3
 8018d0a:	1a8b      	subs	r3, r1, r2
 8018d0c:	b29a      	uxth	r2, r3
 8018d0e:	4b66      	ldr	r3, [pc, #408]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018d10:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8018d12:	89ba      	ldrh	r2, [r7, #12]
 8018d14:	4b63      	ldr	r3, [pc, #396]	; (8018ea4 <hanUniFontLoad+0x21c>)
 8018d16:	fba3 1302 	umull	r1, r3, r3, r2
 8018d1a:	1ad2      	subs	r2, r2, r3
 8018d1c:	0852      	lsrs	r2, r2, #1
 8018d1e:	4413      	add	r3, r2
 8018d20:	091b      	lsrs	r3, r3, #4
 8018d22:	b29a      	uxth	r2, r3
 8018d24:	4b61      	ldr	r3, [pc, #388]	; (8018eac <hanUniFontLoad+0x224>)
 8018d26:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8018d28:	4b60      	ldr	r3, [pc, #384]	; (8018eac <hanUniFontLoad+0x224>)
 8018d2a:	881b      	ldrh	r3, [r3, #0]
 8018d2c:	461a      	mov	r2, r3
 8018d2e:	4b60      	ldr	r3, [pc, #384]	; (8018eb0 <hanUniFontLoad+0x228>)
 8018d30:	5c9b      	ldrb	r3, [r3, r2]
 8018d32:	b29a      	uxth	r2, r3
 8018d34:	4b5d      	ldr	r3, [pc, #372]	; (8018eac <hanUniFontLoad+0x224>)
 8018d36:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8018d38:	4b5b      	ldr	r3, [pc, #364]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018d3a:	881b      	ldrh	r3, [r3, #0]
 8018d3c:	461a      	mov	r2, r3
 8018d3e:	4b5d      	ldr	r3, [pc, #372]	; (8018eb4 <hanUniFontLoad+0x22c>)
 8018d40:	5c9b      	ldrb	r3, [r3, r2]
 8018d42:	b29a      	uxth	r2, r3
 8018d44:	4b58      	ldr	r3, [pc, #352]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018d46:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8018d48:	4b55      	ldr	r3, [pc, #340]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018d4a:	881b      	ldrh	r3, [r3, #0]
 8018d4c:	461a      	mov	r2, r3
 8018d4e:	4b5a      	ldr	r3, [pc, #360]	; (8018eb8 <hanUniFontLoad+0x230>)
 8018d50:	5c9b      	ldrb	r3, [r3, r2]
 8018d52:	b29a      	uxth	r2, r3
 8018d54:	4b52      	ldr	r3, [pc, #328]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018d56:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8018d58:	4b51      	ldr	r3, [pc, #324]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018d5a:	881b      	ldrh	r3, [r3, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d006      	beq.n	8018d6e <hanUniFontLoad+0xe6>
 8018d60:	4b51      	ldr	r3, [pc, #324]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018d62:	881b      	ldrh	r3, [r3, #0]
 8018d64:	461a      	mov	r2, r3
 8018d66:	4b55      	ldr	r3, [pc, #340]	; (8018ebc <hanUniFontLoad+0x234>)
 8018d68:	5c9b      	ldrb	r3, [r3, r2]
 8018d6a:	b29b      	uxth	r3, r3
 8018d6c:	e005      	b.n	8018d7a <hanUniFontLoad+0xf2>
 8018d6e:	4b4e      	ldr	r3, [pc, #312]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018d70:	881b      	ldrh	r3, [r3, #0]
 8018d72:	461a      	mov	r2, r3
 8018d74:	4b52      	ldr	r3, [pc, #328]	; (8018ec0 <hanUniFontLoad+0x238>)
 8018d76:	5c9b      	ldrb	r3, [r3, r2]
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	4a52      	ldr	r2, [pc, #328]	; (8018ec4 <hanUniFontLoad+0x23c>)
 8018d7c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8018d7e:	4b4b      	ldr	r3, [pc, #300]	; (8018eac <hanUniFontLoad+0x224>)
 8018d80:	881b      	ldrh	r3, [r3, #0]
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d009      	beq.n	8018d9a <hanUniFontLoad+0x112>
 8018d86:	4b49      	ldr	r3, [pc, #292]	; (8018eac <hanUniFontLoad+0x224>)
 8018d88:	881b      	ldrh	r3, [r3, #0]
 8018d8a:	2b01      	cmp	r3, #1
 8018d8c:	d005      	beq.n	8018d9a <hanUniFontLoad+0x112>
 8018d8e:	4b47      	ldr	r3, [pc, #284]	; (8018eac <hanUniFontLoad+0x224>)
 8018d90:	881b      	ldrh	r3, [r3, #0]
 8018d92:	2b10      	cmp	r3, #16
 8018d94:	d001      	beq.n	8018d9a <hanUniFontLoad+0x112>
 8018d96:	2301      	movs	r3, #1
 8018d98:	e000      	b.n	8018d9c <hanUniFontLoad+0x114>
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	b29b      	uxth	r3, r3
 8018d9e:	4a40      	ldr	r2, [pc, #256]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018da0:	8812      	ldrh	r2, [r2, #0]
 8018da2:	2a00      	cmp	r2, #0
 8018da4:	d001      	beq.n	8018daa <hanUniFontLoad+0x122>
 8018da6:	2202      	movs	r2, #2
 8018da8:	e000      	b.n	8018dac <hanUniFontLoad+0x124>
 8018daa:	2200      	movs	r2, #0
 8018dac:	4413      	add	r3, r2
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	4b45      	ldr	r3, [pc, #276]	; (8018ec8 <hanUniFontLoad+0x240>)
 8018db2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8018db4:	4b3c      	ldr	r3, [pc, #240]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018db6:	881b      	ldrh	r3, [r3, #0]
 8018db8:	461a      	mov	r2, r3
 8018dba:	4b44      	ldr	r3, [pc, #272]	; (8018ecc <hanUniFontLoad+0x244>)
 8018dbc:	5c9b      	ldrb	r3, [r3, r2]
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	4b43      	ldr	r3, [pc, #268]	; (8018ed0 <hanUniFontLoad+0x248>)
 8018dc2:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	81fb      	strh	r3, [r7, #14]
 8018dc8:	e035      	b.n	8018e36 <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8018dca:	4b3e      	ldr	r3, [pc, #248]	; (8018ec4 <hanUniFontLoad+0x23c>)
 8018dcc:	881b      	ldrh	r3, [r3, #0]
 8018dce:	461a      	mov	r2, r3
 8018dd0:	4613      	mov	r3, r2
 8018dd2:	009b      	lsls	r3, r3, #2
 8018dd4:	4413      	add	r3, r2
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	461a      	mov	r2, r3
 8018dda:	4b34      	ldr	r3, [pc, #208]	; (8018eac <hanUniFontLoad+0x224>)
 8018ddc:	881b      	ldrh	r3, [r3, #0]
 8018dde:	441a      	add	r2, r3
 8018de0:	89fb      	ldrh	r3, [r7, #14]
 8018de2:	493c      	ldr	r1, [pc, #240]	; (8018ed4 <hanUniFontLoad+0x24c>)
 8018de4:	0152      	lsls	r2, r2, #5
 8018de6:	4413      	add	r3, r2
 8018de8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8018dec:	89fb      	ldrh	r3, [r7, #14]
 8018dee:	b2d1      	uxtb	r1, r2
 8018df0:	683a      	ldr	r2, [r7, #0]
 8018df2:	4413      	add	r3, r2
 8018df4:	460a      	mov	r2, r1
 8018df6:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8018df8:	89fb      	ldrh	r3, [r7, #14]
 8018dfa:	683a      	ldr	r2, [r7, #0]
 8018dfc:	4413      	add	r3, r2
 8018dfe:	7999      	ldrb	r1, [r3, #6]
 8018e00:	4b31      	ldr	r3, [pc, #196]	; (8018ec8 <hanUniFontLoad+0x240>)
 8018e02:	881b      	ldrh	r3, [r3, #0]
 8018e04:	461a      	mov	r2, r3
 8018e06:	2316      	movs	r3, #22
 8018e08:	fb02 f303 	mul.w	r3, r2, r3
 8018e0c:	33a0      	adds	r3, #160	; 0xa0
 8018e0e:	4a26      	ldr	r2, [pc, #152]	; (8018ea8 <hanUniFontLoad+0x220>)
 8018e10:	8812      	ldrh	r2, [r2, #0]
 8018e12:	441a      	add	r2, r3
 8018e14:	89fb      	ldrh	r3, [r7, #14]
 8018e16:	482f      	ldr	r0, [pc, #188]	; (8018ed4 <hanUniFontLoad+0x24c>)
 8018e18:	0152      	lsls	r2, r2, #5
 8018e1a:	4413      	add	r3, r2
 8018e1c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018e20:	b2da      	uxtb	r2, r3
 8018e22:	89fb      	ldrh	r3, [r7, #14]
 8018e24:	430a      	orrs	r2, r1
 8018e26:	b2d1      	uxtb	r1, r2
 8018e28:	683a      	ldr	r2, [r7, #0]
 8018e2a:	4413      	add	r3, r2
 8018e2c:	460a      	mov	r2, r1
 8018e2e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8018e30:	89fb      	ldrh	r3, [r7, #14]
 8018e32:	3301      	adds	r3, #1
 8018e34:	81fb      	strh	r3, [r7, #14]
 8018e36:	89fb      	ldrh	r3, [r7, #14]
 8018e38:	2b1f      	cmp	r3, #31
 8018e3a:	d9c6      	bls.n	8018dca <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8018e3c:	4b18      	ldr	r3, [pc, #96]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018e3e:	881b      	ldrh	r3, [r3, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d025      	beq.n	8018e90 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8018e44:	2300      	movs	r3, #0
 8018e46:	81fb      	strh	r3, [r7, #14]
 8018e48:	e01f      	b.n	8018e8a <hanUniFontLoad+0x202>
 8018e4a:	89fb      	ldrh	r3, [r7, #14]
 8018e4c:	683a      	ldr	r2, [r7, #0]
 8018e4e:	4413      	add	r3, r2
 8018e50:	7999      	ldrb	r1, [r3, #6]
 8018e52:	4b1f      	ldr	r3, [pc, #124]	; (8018ed0 <hanUniFontLoad+0x248>)
 8018e54:	881b      	ldrh	r3, [r3, #0]
 8018e56:	461a      	mov	r2, r3
 8018e58:	4613      	mov	r3, r2
 8018e5a:	00db      	lsls	r3, r3, #3
 8018e5c:	1a9b      	subs	r3, r3, r2
 8018e5e:	009b      	lsls	r3, r3, #2
 8018e60:	33f8      	adds	r3, #248	; 0xf8
 8018e62:	4a0f      	ldr	r2, [pc, #60]	; (8018ea0 <hanUniFontLoad+0x218>)
 8018e64:	8812      	ldrh	r2, [r2, #0]
 8018e66:	441a      	add	r2, r3
 8018e68:	89fb      	ldrh	r3, [r7, #14]
 8018e6a:	481a      	ldr	r0, [pc, #104]	; (8018ed4 <hanUniFontLoad+0x24c>)
 8018e6c:	0152      	lsls	r2, r2, #5
 8018e6e:	4413      	add	r3, r2
 8018e70:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018e74:	b2da      	uxtb	r2, r3
 8018e76:	89fb      	ldrh	r3, [r7, #14]
 8018e78:	430a      	orrs	r2, r1
 8018e7a:	b2d1      	uxtb	r1, r2
 8018e7c:	683a      	ldr	r2, [r7, #0]
 8018e7e:	4413      	add	r3, r2
 8018e80:	460a      	mov	r2, r1
 8018e82:	719a      	strb	r2, [r3, #6]
 8018e84:	89fb      	ldrh	r3, [r7, #14]
 8018e86:	3301      	adds	r3, #1
 8018e88:	81fb      	strh	r3, [r7, #14]
 8018e8a:	89fb      	ldrh	r3, [r7, #14]
 8018e8c:	2b1f      	cmp	r3, #31
 8018e8e:	d9dc      	bls.n	8018e4a <hanUniFontLoad+0x1c2>
  }
}
 8018e90:	bf00      	nop
 8018e92:	3714      	adds	r7, #20
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr
 8018e9c:	24924925 	.word	0x24924925
 8018ea0:	2000b2ee 	.word	0x2000b2ee
 8018ea4:	86186187 	.word	0x86186187
 8018ea8:	2000b2f0 	.word	0x2000b2f0
 8018eac:	2000b2f2 	.word	0x2000b2f2
 8018eb0:	0802b69c 	.word	0x0802b69c
 8018eb4:	0802b6bc 	.word	0x0802b6bc
 8018eb8:	0802b6dc 	.word	0x0802b6dc
 8018ebc:	0802b714 	.word	0x0802b714
 8018ec0:	0802b6fc 	.word	0x0802b6fc
 8018ec4:	2000b2f4 	.word	0x2000b2f4
 8018ec8:	2000b2f6 	.word	0x2000b2f6
 8018ecc:	0802b72c 	.word	0x0802b72c
 8018ed0:	2000b2f8 	.word	0x2000b2f8
 8018ed4:	0802dc40 	.word	0x0802dc40

08018ed8 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8018ed8:	b480      	push	{r7}
 8018eda:	b085      	sub	sp, #20
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
 8018ee0:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	781b      	ldrb	r3, [r3, #0]
 8018ee6:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8018ee8:	7b7b      	ldrb	r3, [r7, #13]
 8018eea:	3b20      	subs	r3, #32
 8018eec:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8018eee:	2300      	movs	r3, #0
 8018ef0:	81fb      	strh	r3, [r7, #14]
 8018ef2:	e00f      	b.n	8018f14 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8018ef4:	7b7a      	ldrb	r2, [r7, #13]
 8018ef6:	89fb      	ldrh	r3, [r7, #14]
 8018ef8:	490b      	ldr	r1, [pc, #44]	; (8018f28 <hanEngFontLoad+0x50>)
 8018efa:	0112      	lsls	r2, r2, #4
 8018efc:	4413      	add	r3, r2
 8018efe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8018f02:	89fb      	ldrh	r3, [r7, #14]
 8018f04:	b2d1      	uxtb	r1, r2
 8018f06:	683a      	ldr	r2, [r7, #0]
 8018f08:	4413      	add	r3, r2
 8018f0a:	460a      	mov	r2, r1
 8018f0c:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8018f0e:	89fb      	ldrh	r3, [r7, #14]
 8018f10:	3301      	adds	r3, #1
 8018f12:	81fb      	strh	r3, [r7, #14]
 8018f14:	89fb      	ldrh	r3, [r7, #14]
 8018f16:	2b0f      	cmp	r3, #15
 8018f18:	d9ec      	bls.n	8018ef4 <hanEngFontLoad+0x1c>
  }
}
 8018f1a:	bf00      	nop
 8018f1c:	bf00      	nop
 8018f1e:	3714      	adds	r7, #20
 8018f20:	46bd      	mov	sp, r7
 8018f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f26:	4770      	bx	lr
 8018f28:	08029e3c 	.word	0x08029e3c

08018f2c <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b085      	sub	sp, #20
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	4603      	mov	r3, r0
 8018f34:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8018f36:	88fb      	ldrh	r3, [r7, #6]
 8018f38:	0a1b      	lsrs	r3, r3, #8
 8018f3a:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8018f3c:	88fb      	ldrh	r3, [r7, #6]
 8018f3e:	b2db      	uxtb	r3, r3
 8018f40:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8018f42:	89fb      	ldrh	r3, [r7, #14]
 8018f44:	3bb0      	subs	r3, #176	; 0xb0
 8018f46:	225e      	movs	r2, #94	; 0x5e
 8018f48:	fb03 f202 	mul.w	r2, r3, r2
 8018f4c:	89bb      	ldrh	r3, [r7, #12]
 8018f4e:	3ba1      	subs	r3, #161	; 0xa1
 8018f50:	4413      	add	r3, r2
 8018f52:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8018f54:	4a05      	ldr	r2, [pc, #20]	; (8018f6c <hanCnvCodeWan2Johab+0x40>)
 8018f56:	68bb      	ldr	r3, [r7, #8]
 8018f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f5c:	b29b      	uxth	r3, r3
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3714      	adds	r7, #20
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr
 8018f6a:	bf00      	nop
 8018f6c:	0802b780 	.word	0x0802b780

08018f70 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8018f74:	4b0a      	ldr	r3, [pc, #40]	; (8018fa0 <TransferDoneISR+0x30>)
 8018f76:	781b      	ldrb	r3, [r3, #0]
 8018f78:	b2db      	uxtb	r3, r3
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d00d      	beq.n	8018f9a <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8018f7e:	4b08      	ldr	r3, [pc, #32]	; (8018fa0 <TransferDoneISR+0x30>)
 8018f80:	2200      	movs	r2, #0
 8018f82:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8018f84:	2101      	movs	r1, #1
 8018f86:	2002      	movs	r0, #2
 8018f88:	f7fb fda2 	bl	8014ad0 <gpioPinWrite>

    if (frameCallBack != NULL)
 8018f8c:	4b05      	ldr	r3, [pc, #20]	; (8018fa4 <TransferDoneISR+0x34>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d002      	beq.n	8018f9a <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8018f94:	4b03      	ldr	r3, [pc, #12]	; (8018fa4 <TransferDoneISR+0x34>)
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	4798      	blx	r3
    }
  }
}
 8018f9a:	bf00      	nop
 8018f9c:	bd80      	pop	{r7, pc}
 8018f9e:	bf00      	nop
 8018fa0:	2000b300 	.word	0x2000b300
 8018fa4:	2000b2fc 	.word	0x2000b2fc

08018fa8 <st7735Init>:


bool st7735Init(void)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b082      	sub	sp, #8
 8018fac:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8018fae:	f000 f835 	bl	801901c <st7735Reset>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	71fb      	strb	r3, [r7, #7]

  return ret;
 8018fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	4a0d      	ldr	r2, [pc, #52]	; (8019000 <st7735InitDriver+0x40>)
 8018fcc:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	4a0c      	ldr	r2, [pc, #48]	; (8019004 <st7735InitDriver+0x44>)
 8018fd2:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	4a0c      	ldr	r2, [pc, #48]	; (8019008 <st7735InitDriver+0x48>)
 8018fd8:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	4a0b      	ldr	r2, [pc, #44]	; (801900c <st7735InitDriver+0x4c>)
 8018fde:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	4a0b      	ldr	r2, [pc, #44]	; (8019010 <st7735InitDriver+0x50>)
 8018fe4:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	4a0a      	ldr	r2, [pc, #40]	; (8019014 <st7735InitDriver+0x54>)
 8018fea:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	4a0a      	ldr	r2, [pc, #40]	; (8019018 <st7735InitDriver+0x58>)
 8018ff0:	619a      	str	r2, [r3, #24]
  return true;
 8018ff2:	2301      	movs	r3, #1
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	370c      	adds	r7, #12
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffe:	4770      	bx	lr
 8019000:	08018fa9 	.word	0x08018fa9
 8019004:	0801901d 	.word	0x0801901d
 8019008:	080192e1 	.word	0x080192e1
 801900c:	08019095 	.word	0x08019095
 8019010:	080190a5 	.word	0x080190a5
 8019014:	08019539 	.word	0x08019539
 8019018:	080194ed 	.word	0x080194ed

0801901c <st7735Reset>:

bool st7735Reset(void)
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8019022:	4b1a      	ldr	r3, [pc, #104]	; (801908c <st7735Reset+0x70>)
 8019024:	781b      	ldrb	r3, [r3, #0]
 8019026:	4618      	mov	r0, r3
 8019028:	f7fe f8ca 	bl	80171c0 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 801902c:	4b17      	ldr	r3, [pc, #92]	; (801908c <st7735Reset+0x70>)
 801902e:	781b      	ldrb	r3, [r3, #0]
 8019030:	2100      	movs	r1, #0
 8019032:	4618      	mov	r0, r3
 8019034:	f7fe f920 	bl	8017278 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8019038:	4b14      	ldr	r3, [pc, #80]	; (801908c <st7735Reset+0x70>)
 801903a:	781b      	ldrb	r3, [r3, #0]
 801903c:	4914      	ldr	r1, [pc, #80]	; (8019090 <st7735Reset+0x74>)
 801903e:	4618      	mov	r0, r3
 8019040:	f7fe fa50 	bl	80174e4 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8019044:	2100      	movs	r1, #0
 8019046:	2001      	movs	r0, #1
 8019048:	f7fb fd42 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 801904c:	2101      	movs	r1, #1
 801904e:	2003      	movs	r0, #3
 8019050:	f7fb fd3e 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8019054:	2101      	movs	r1, #1
 8019056:	2002      	movs	r0, #2
 8019058:	f7fb fd3a 	bl	8014ad0 <gpioPinWrite>
  delay(10);
 801905c:	200a      	movs	r0, #10
 801905e:	f7f9 fc7b 	bl	8012958 <delay>

  st7735InitRegs();
 8019062:	f000 f863 	bl	801912c <st7735InitRegs>


  st7735SetRotation(1);
 8019066:	2001      	movs	r0, #1
 8019068:	f000 f910 	bl	801928c <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 801906c:	2300      	movs	r3, #0
 801906e:	9300      	str	r3, [sp, #0]
 8019070:	2380      	movs	r3, #128	; 0x80
 8019072:	22a0      	movs	r2, #160	; 0xa0
 8019074:	2100      	movs	r1, #0
 8019076:	2000      	movs	r0, #0
 8019078:	f000 f97e 	bl	8019378 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 801907c:	2100      	movs	r1, #0
 801907e:	2001      	movs	r0, #1
 8019080:	f7fb fd26 	bl	8014ad0 <gpioPinWrite>
  return true;
 8019084:	2301      	movs	r3, #1
}
 8019086:	4618      	mov	r0, r3
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	2000b2fa 	.word	0x2000b2fa
 8019090:	08018f71 	.word	0x08018f71

08019094 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8019094:	b480      	push	{r7}
 8019096:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8019098:	23a0      	movs	r3, #160	; 0xa0
}
 801909a:	4618      	mov	r0, r3
 801909c:	46bd      	mov	sp, r7
 801909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a2:	4770      	bx	lr

080190a4 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 80190a4:	b480      	push	{r7}
 80190a6:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 80190a8:	2380      	movs	r3, #128	; 0x80
}
 80190aa:	4618      	mov	r0, r3
 80190ac:	46bd      	mov	sp, r7
 80190ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b2:	4770      	bx	lr

080190b4 <writecommand>:

void writecommand(uint8_t c)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b082      	sub	sp, #8
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	4603      	mov	r3, r0
 80190bc:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 80190be:	2100      	movs	r1, #0
 80190c0:	2003      	movs	r0, #3
 80190c2:	f7fb fd05 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80190c6:	2100      	movs	r1, #0
 80190c8:	2002      	movs	r0, #2
 80190ca:	f7fb fd01 	bl	8014ad0 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 80190ce:	4b07      	ldr	r3, [pc, #28]	; (80190ec <writecommand+0x38>)
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	79fa      	ldrb	r2, [r7, #7]
 80190d4:	4611      	mov	r1, r2
 80190d6:	4618      	mov	r0, r3
 80190d8:	f7fe f962 	bl	80173a0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80190dc:	2101      	movs	r1, #1
 80190de:	2002      	movs	r0, #2
 80190e0:	f7fb fcf6 	bl	8014ad0 <gpioPinWrite>
}
 80190e4:	bf00      	nop
 80190e6:	3708      	adds	r7, #8
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd80      	pop	{r7, pc}
 80190ec:	2000b2fa 	.word	0x2000b2fa

080190f0 <writedata>:

void writedata(uint8_t d)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b082      	sub	sp, #8
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	4603      	mov	r3, r0
 80190f8:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80190fa:	2101      	movs	r1, #1
 80190fc:	2003      	movs	r0, #3
 80190fe:	f7fb fce7 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8019102:	2100      	movs	r1, #0
 8019104:	2002      	movs	r0, #2
 8019106:	f7fb fce3 	bl	8014ad0 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 801910a:	4b07      	ldr	r3, [pc, #28]	; (8019128 <writedata+0x38>)
 801910c:	781b      	ldrb	r3, [r3, #0]
 801910e:	79fa      	ldrb	r2, [r7, #7]
 8019110:	4611      	mov	r1, r2
 8019112:	4618      	mov	r0, r3
 8019114:	f7fe f944 	bl	80173a0 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8019118:	2101      	movs	r1, #1
 801911a:	2002      	movs	r0, #2
 801911c:	f7fb fcd8 	bl	8014ad0 <gpioPinWrite>
}
 8019120:	bf00      	nop
 8019122:	3708      	adds	r7, #8
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}
 8019128:	2000b2fa 	.word	0x2000b2fa

0801912c <st7735InitRegs>:

void st7735InitRegs(void)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8019130:	2001      	movs	r0, #1
 8019132:	f7ff ffbf 	bl	80190b4 <writecommand>
  delay(10);
 8019136:	200a      	movs	r0, #10
 8019138:	f7f9 fc0e 	bl	8012958 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 801913c:	2011      	movs	r0, #17
 801913e:	f7ff ffb9 	bl	80190b4 <writecommand>
  delay(10);
 8019142:	200a      	movs	r0, #10
 8019144:	f7f9 fc08 	bl	8012958 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8019148:	20b1      	movs	r0, #177	; 0xb1
 801914a:	f7ff ffb3 	bl	80190b4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 801914e:	2001      	movs	r0, #1
 8019150:	f7ff ffce 	bl	80190f0 <writedata>
  writedata(0x2C);
 8019154:	202c      	movs	r0, #44	; 0x2c
 8019156:	f7ff ffcb 	bl	80190f0 <writedata>
  writedata(0x2D);
 801915a:	202d      	movs	r0, #45	; 0x2d
 801915c:	f7ff ffc8 	bl	80190f0 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8019160:	20b2      	movs	r0, #178	; 0xb2
 8019162:	f7ff ffa7 	bl	80190b4 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8019166:	2001      	movs	r0, #1
 8019168:	f7ff ffc2 	bl	80190f0 <writedata>
  writedata(0x2C);
 801916c:	202c      	movs	r0, #44	; 0x2c
 801916e:	f7ff ffbf 	bl	80190f0 <writedata>
  writedata(0x2D);
 8019172:	202d      	movs	r0, #45	; 0x2d
 8019174:	f7ff ffbc 	bl	80190f0 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8019178:	20b3      	movs	r0, #179	; 0xb3
 801917a:	f7ff ff9b 	bl	80190b4 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 801917e:	2001      	movs	r0, #1
 8019180:	f7ff ffb6 	bl	80190f0 <writedata>
  writedata(0x2C);
 8019184:	202c      	movs	r0, #44	; 0x2c
 8019186:	f7ff ffb3 	bl	80190f0 <writedata>
  writedata(0x2D);
 801918a:	202d      	movs	r0, #45	; 0x2d
 801918c:	f7ff ffb0 	bl	80190f0 <writedata>
  writedata(0x01);              //     Line inversion mode
 8019190:	2001      	movs	r0, #1
 8019192:	f7ff ffad 	bl	80190f0 <writedata>
  writedata(0x2C);
 8019196:	202c      	movs	r0, #44	; 0x2c
 8019198:	f7ff ffaa 	bl	80190f0 <writedata>
  writedata(0x2D);
 801919c:	202d      	movs	r0, #45	; 0x2d
 801919e:	f7ff ffa7 	bl	80190f0 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 80191a2:	20b4      	movs	r0, #180	; 0xb4
 80191a4:	f7ff ff86 	bl	80190b4 <writecommand>
  writedata(0x07);              //     No inversion
 80191a8:	2007      	movs	r0, #7
 80191aa:	f7ff ffa1 	bl	80190f0 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 80191ae:	20c0      	movs	r0, #192	; 0xc0
 80191b0:	f7ff ff80 	bl	80190b4 <writecommand>
  writedata(0xA2);
 80191b4:	20a2      	movs	r0, #162	; 0xa2
 80191b6:	f7ff ff9b 	bl	80190f0 <writedata>
  writedata(0x02);              //     -4.6V
 80191ba:	2002      	movs	r0, #2
 80191bc:	f7ff ff98 	bl	80190f0 <writedata>
  writedata(0x84);              //     AUTO mode
 80191c0:	2084      	movs	r0, #132	; 0x84
 80191c2:	f7ff ff95 	bl	80190f0 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 80191c6:	20c1      	movs	r0, #193	; 0xc1
 80191c8:	f7ff ff74 	bl	80190b4 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80191cc:	20c5      	movs	r0, #197	; 0xc5
 80191ce:	f7ff ff8f 	bl	80190f0 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 80191d2:	20c2      	movs	r0, #194	; 0xc2
 80191d4:	f7ff ff6e 	bl	80190b4 <writecommand>
  writedata(0x0A);              //     Opamp current small
 80191d8:	200a      	movs	r0, #10
 80191da:	f7ff ff89 	bl	80190f0 <writedata>
  writedata(0x00);              //     Boost frequency
 80191de:	2000      	movs	r0, #0
 80191e0:	f7ff ff86 	bl	80190f0 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 80191e4:	20c3      	movs	r0, #195	; 0xc3
 80191e6:	f7ff ff65 	bl	80190b4 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 80191ea:	208a      	movs	r0, #138	; 0x8a
 80191ec:	f7ff ff80 	bl	80190f0 <writedata>
  writedata(0x2A);
 80191f0:	202a      	movs	r0, #42	; 0x2a
 80191f2:	f7ff ff7d 	bl	80190f0 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 80191f6:	20c4      	movs	r0, #196	; 0xc4
 80191f8:	f7ff ff5c 	bl	80190b4 <writecommand>
  writedata(0x8A);
 80191fc:	208a      	movs	r0, #138	; 0x8a
 80191fe:	f7ff ff77 	bl	80190f0 <writedata>
  writedata(0xEE);
 8019202:	20ee      	movs	r0, #238	; 0xee
 8019204:	f7ff ff74 	bl	80190f0 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8019208:	20c5      	movs	r0, #197	; 0xc5
 801920a:	f7ff ff53 	bl	80190b4 <writecommand>
  writedata(0x0E);
 801920e:	200e      	movs	r0, #14
 8019210:	f7ff ff6e 	bl	80190f0 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8019214:	2020      	movs	r0, #32
 8019216:	f7ff ff4d 	bl	80190b4 <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 801921a:	2036      	movs	r0, #54	; 0x36
 801921c:	f7ff ff4a 	bl	80190b4 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8019220:	20c8      	movs	r0, #200	; 0xc8
 8019222:	f7ff ff65 	bl	80190f0 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8019226:	203a      	movs	r0, #58	; 0x3a
 8019228:	f7ff ff44 	bl	80190b4 <writecommand>
  writedata(0x05);              //     16-bit color
 801922c:	2005      	movs	r0, #5
 801922e:	f7ff ff5f 	bl	80190f0 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8019232:	202a      	movs	r0, #42	; 0x2a
 8019234:	f7ff ff3e 	bl	80190b4 <writecommand>
  writedata(0x00);
 8019238:	2000      	movs	r0, #0
 801923a:	f7ff ff59 	bl	80190f0 <writedata>
  writedata(0x00);              //     XSTART = 0
 801923e:	2000      	movs	r0, #0
 8019240:	f7ff ff56 	bl	80190f0 <writedata>
  writedata(0x00);
 8019244:	2000      	movs	r0, #0
 8019246:	f7ff ff53 	bl	80190f0 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 801924a:	209f      	movs	r0, #159	; 0x9f
 801924c:	f7ff ff50 	bl	80190f0 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8019250:	202b      	movs	r0, #43	; 0x2b
 8019252:	f7ff ff2f 	bl	80190b4 <writecommand>
  writedata(0x00);
 8019256:	2000      	movs	r0, #0
 8019258:	f7ff ff4a 	bl	80190f0 <writedata>
  writedata(0x00);              //     XSTART = 0
 801925c:	2000      	movs	r0, #0
 801925e:	f7ff ff47 	bl	80190f0 <writedata>
  writedata(0x00);
 8019262:	2000      	movs	r0, #0
 8019264:	f7ff ff44 	bl	80190f0 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8019268:	207f      	movs	r0, #127	; 0x7f
 801926a:	f7ff ff41 	bl	80190f0 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 801926e:	2013      	movs	r0, #19
 8019270:	f7ff ff20 	bl	80190b4 <writecommand>
  delay(10);
 8019274:	200a      	movs	r0, #10
 8019276:	f7f9 fb6f 	bl	8012958 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 801927a:	2029      	movs	r0, #41	; 0x29
 801927c:	f7ff ff1a 	bl	80190b4 <writecommand>
  delay(10);
 8019280:	200a      	movs	r0, #10
 8019282:	f7f9 fb69 	bl	8012958 <delay>
}
 8019286:	bf00      	nop
 8019288:	bd80      	pop	{r7, pc}
	...

0801928c <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 801928c:	b580      	push	{r7, lr}
 801928e:	b082      	sub	sp, #8
 8019290:	af00      	add	r7, sp, #0
 8019292:	4603      	mov	r3, r0
 8019294:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8019296:	2036      	movs	r0, #54	; 0x36
 8019298:	f7ff ff0c 	bl	80190b4 <writecommand>

  switch (mode)
 801929c:	79fb      	ldrb	r3, [r7, #7]
 801929e:	2b03      	cmp	r3, #3
 80192a0:	d81a      	bhi.n	80192d8 <st7735SetRotation+0x4c>
 80192a2:	a201      	add	r2, pc, #4	; (adr r2, 80192a8 <st7735SetRotation+0x1c>)
 80192a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192a8:	080192b9 	.word	0x080192b9
 80192ac:	080192c1 	.word	0x080192c1
 80192b0:	080192c9 	.word	0x080192c9
 80192b4:	080192d1 	.word	0x080192d1
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80192b8:	20c0      	movs	r0, #192	; 0xc0
 80192ba:	f7ff ff19 	bl	80190f0 <writedata>
     break;
 80192be:	e00b      	b.n	80192d8 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80192c0:	20a0      	movs	r0, #160	; 0xa0
 80192c2:	f7ff ff15 	bl	80190f0 <writedata>
     break;
 80192c6:	e007      	b.n	80192d8 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 80192c8:	2000      	movs	r0, #0
 80192ca:	f7ff ff11 	bl	80190f0 <writedata>
    break;
 80192ce:	e003      	b.n	80192d8 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80192d0:	2060      	movs	r0, #96	; 0x60
 80192d2:	f7ff ff0d 	bl	80190f0 <writedata>
     break;
 80192d6:	bf00      	nop
  }
}
 80192d8:	bf00      	nop
 80192da:	3708      	adds	r7, #8
 80192dc:	46bd      	mov	sp, r7
 80192de:	bd80      	pop	{r7, pc}

080192e0 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b084      	sub	sp, #16
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	60f8      	str	r0, [r7, #12]
 80192e8:	60b9      	str	r1, [r7, #8]
 80192ea:	607a      	str	r2, [r7, #4]
 80192ec:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 80192ee:	4b21      	ldr	r3, [pc, #132]	; (8019374 <st7735SetWindow+0x94>)
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	2108      	movs	r1, #8
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7fe f823 	bl	8017340 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 80192fa:	202a      	movs	r0, #42	; 0x2a
 80192fc:	f7ff feda 	bl	80190b4 <writecommand>
  writedata(0x00);
 8019300:	2000      	movs	r0, #0
 8019302:	f7ff fef5 	bl	80190f0 <writedata>
  writedata(x0+colstart);     // XSTART
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	b2da      	uxtb	r2, r3
 801930a:	2300      	movs	r3, #0
 801930c:	b2db      	uxtb	r3, r3
 801930e:	4413      	add	r3, r2
 8019310:	b2db      	uxtb	r3, r3
 8019312:	4618      	mov	r0, r3
 8019314:	f7ff feec 	bl	80190f0 <writedata>
  writedata(0x00);
 8019318:	2000      	movs	r0, #0
 801931a:	f7ff fee9 	bl	80190f0 <writedata>
  writedata(x1+colstart);     // XEND
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	b2da      	uxtb	r2, r3
 8019322:	2300      	movs	r3, #0
 8019324:	b2db      	uxtb	r3, r3
 8019326:	4413      	add	r3, r2
 8019328:	b2db      	uxtb	r3, r3
 801932a:	4618      	mov	r0, r3
 801932c:	f7ff fee0 	bl	80190f0 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8019330:	202b      	movs	r0, #43	; 0x2b
 8019332:	f7ff febf 	bl	80190b4 <writecommand>
  writedata(0x00);
 8019336:	2000      	movs	r0, #0
 8019338:	f7ff feda 	bl	80190f0 <writedata>
  writedata(y0+rowstart);     // YSTART
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	b2da      	uxtb	r2, r3
 8019340:	2300      	movs	r3, #0
 8019342:	b2db      	uxtb	r3, r3
 8019344:	4413      	add	r3, r2
 8019346:	b2db      	uxtb	r3, r3
 8019348:	4618      	mov	r0, r3
 801934a:	f7ff fed1 	bl	80190f0 <writedata>
  writedata(0x00);
 801934e:	2000      	movs	r0, #0
 8019350:	f7ff fece 	bl	80190f0 <writedata>
  writedata(y1+rowstart);     // YEND
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	b2da      	uxtb	r2, r3
 8019358:	2300      	movs	r3, #0
 801935a:	b2db      	uxtb	r3, r3
 801935c:	4413      	add	r3, r2
 801935e:	b2db      	uxtb	r3, r3
 8019360:	4618      	mov	r0, r3
 8019362:	f7ff fec5 	bl	80190f0 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8019366:	202c      	movs	r0, #44	; 0x2c
 8019368:	f7ff fea4 	bl	80190b4 <writecommand>
}
 801936c:	bf00      	nop
 801936e:	3710      	adds	r7, #16
 8019370:	46bd      	mov	sp, r7
 8019372:	bd80      	pop	{r7, pc}
 8019374:	2000b2fa 	.word	0x2000b2fa

08019378 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8019378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801937c:	b089      	sub	sp, #36	; 0x24
 801937e:	af00      	add	r7, sp, #0
 8019380:	60f8      	str	r0, [r7, #12]
 8019382:	60b9      	str	r1, [r7, #8]
 8019384:	607a      	str	r2, [r7, #4]
 8019386:	603b      	str	r3, [r7, #0]
 8019388:	466b      	mov	r3, sp
 801938a:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 801938c:	6879      	ldr	r1, [r7, #4]
 801938e:	1e4b      	subs	r3, r1, #1
 8019390:	617b      	str	r3, [r7, #20]
 8019392:	460a      	mov	r2, r1
 8019394:	2300      	movs	r3, #0
 8019396:	4690      	mov	r8, r2
 8019398:	4699      	mov	r9, r3
 801939a:	f04f 0200 	mov.w	r2, #0
 801939e:	f04f 0300 	mov.w	r3, #0
 80193a2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80193a6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80193aa:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80193ae:	460a      	mov	r2, r1
 80193b0:	2300      	movs	r3, #0
 80193b2:	4614      	mov	r4, r2
 80193b4:	461d      	mov	r5, r3
 80193b6:	f04f 0200 	mov.w	r2, #0
 80193ba:	f04f 0300 	mov.w	r3, #0
 80193be:	012b      	lsls	r3, r5, #4
 80193c0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80193c4:	0122      	lsls	r2, r4, #4
 80193c6:	460b      	mov	r3, r1
 80193c8:	005b      	lsls	r3, r3, #1
 80193ca:	3307      	adds	r3, #7
 80193cc:	08db      	lsrs	r3, r3, #3
 80193ce:	00db      	lsls	r3, r3, #3
 80193d0:	ebad 0d03 	sub.w	sp, sp, r3
 80193d4:	466b      	mov	r3, sp
 80193d6:	3301      	adds	r3, #1
 80193d8:	085b      	lsrs	r3, r3, #1
 80193da:	005b      	lsls	r3, r3, #1
 80193dc:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80193de:	22a0      	movs	r2, #160	; 0xa0
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	4293      	cmp	r3, r2
 80193e4:	da78      	bge.n	80194d8 <st7735FillRect+0x160>
 80193e6:	2280      	movs	r2, #128	; 0x80
 80193e8:	68bb      	ldr	r3, [r7, #8]
 80193ea:	4293      	cmp	r3, r2
 80193ec:	da74      	bge.n	80194d8 <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	da05      	bge.n	8019400 <st7735FillRect+0x88>
 80193f4:	687a      	ldr	r2, [r7, #4]
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	4413      	add	r3, r2
 80193fa:	607b      	str	r3, [r7, #4]
 80193fc:	2300      	movs	r3, #0
 80193fe:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 8019400:	68bb      	ldr	r3, [r7, #8]
 8019402:	2b00      	cmp	r3, #0
 8019404:	da05      	bge.n	8019412 <st7735FillRect+0x9a>
 8019406:	683a      	ldr	r2, [r7, #0]
 8019408:	68bb      	ldr	r3, [r7, #8]
 801940a:	4413      	add	r3, r2
 801940c:	603b      	str	r3, [r7, #0]
 801940e:	2300      	movs	r3, #0
 8019410:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8019412:	68fa      	ldr	r2, [r7, #12]
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	4413      	add	r3, r2
 8019418:	22a0      	movs	r2, #160	; 0xa0
 801941a:	4293      	cmp	r3, r2
 801941c:	dd03      	ble.n	8019426 <st7735FillRect+0xae>
 801941e:	22a0      	movs	r2, #160	; 0xa0
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	1ad3      	subs	r3, r2, r3
 8019424:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 8019426:	68ba      	ldr	r2, [r7, #8]
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	4413      	add	r3, r2
 801942c:	2280      	movs	r2, #128	; 0x80
 801942e:	4293      	cmp	r3, r2
 8019430:	dd03      	ble.n	801943a <st7735FillRect+0xc2>
 8019432:	2280      	movs	r2, #128	; 0x80
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	1ad3      	subs	r3, r2, r3
 8019438:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	2b00      	cmp	r3, #0
 801943e:	dd4d      	ble.n	80194dc <st7735FillRect+0x164>
 8019440:	683b      	ldr	r3, [r7, #0]
 8019442:	2b00      	cmp	r3, #0
 8019444:	dd4a      	ble.n	80194dc <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 8019446:	68fa      	ldr	r2, [r7, #12]
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	4413      	add	r3, r2
 801944c:	1e59      	subs	r1, r3, #1
 801944e:	68ba      	ldr	r2, [r7, #8]
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	4413      	add	r3, r2
 8019454:	3b01      	subs	r3, #1
 8019456:	460a      	mov	r2, r1
 8019458:	68b9      	ldr	r1, [r7, #8]
 801945a:	68f8      	ldr	r0, [r7, #12]
 801945c:	f7ff ff40 	bl	80192e0 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8019460:	4b21      	ldr	r3, [pc, #132]	; (80194e8 <st7735FillRect+0x170>)
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	2110      	movs	r1, #16
 8019466:	4618      	mov	r0, r3
 8019468:	f7fd ff6a 	bl	8017340 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 801946c:	2101      	movs	r1, #1
 801946e:	2003      	movs	r0, #3
 8019470:	f7fb fb2e 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8019474:	2100      	movs	r1, #0
 8019476:	2002      	movs	r0, #2
 8019478:	f7fb fb2a 	bl	8014ad0 <gpioPinWrite>

  for (int i=0; i<w; i++)
 801947c:	2300      	movs	r3, #0
 801947e:	61fb      	str	r3, [r7, #28]
 8019480:	e008      	b.n	8019494 <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 8019482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019484:	b299      	uxth	r1, r3
 8019486:	693b      	ldr	r3, [r7, #16]
 8019488:	69fa      	ldr	r2, [r7, #28]
 801948a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 801948e:	69fb      	ldr	r3, [r7, #28]
 8019490:	3301      	adds	r3, #1
 8019492:	61fb      	str	r3, [r7, #28]
 8019494:	69fa      	ldr	r2, [r7, #28]
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	429a      	cmp	r2, r3
 801949a:	dbf2      	blt.n	8019482 <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 801949c:	2300      	movs	r3, #0
 801949e:	61bb      	str	r3, [r7, #24]
 80194a0:	e00e      	b.n	80194c0 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	230a      	movs	r3, #10
 80194a6:	6939      	ldr	r1, [r7, #16]
 80194a8:	2000      	movs	r0, #0
 80194aa:	f7fd ffcb 	bl	8017444 <spiDmaTxTransfer>
 80194ae:	4603      	mov	r3, r0
 80194b0:	f083 0301 	eor.w	r3, r3, #1
 80194b4:	b2db      	uxtb	r3, r3
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d107      	bne.n	80194ca <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 80194ba:	69bb      	ldr	r3, [r7, #24]
 80194bc:	3301      	adds	r3, #1
 80194be:	61bb      	str	r3, [r7, #24]
 80194c0:	69ba      	ldr	r2, [r7, #24]
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	dbec      	blt.n	80194a2 <st7735FillRect+0x12a>
 80194c8:	e000      	b.n	80194cc <st7735FillRect+0x154>
    {
      break;
 80194ca:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80194cc:	2101      	movs	r1, #1
 80194ce:	2002      	movs	r0, #2
 80194d0:	f7fb fafe 	bl	8014ad0 <gpioPinWrite>
 80194d4:	46b5      	mov	sp, r6
 80194d6:	e003      	b.n	80194e0 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 80194d8:	bf00      	nop
 80194da:	e000      	b.n	80194de <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 80194dc:	bf00      	nop
 80194de:	46b5      	mov	sp, r6
}
 80194e0:	3724      	adds	r7, #36	; 0x24
 80194e2:	46bd      	mov	sp, r7
 80194e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194e8:	2000b2fa 	.word	0x2000b2fa

080194ec <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80194f8:	4b0d      	ldr	r3, [pc, #52]	; (8019530 <st7735SendBuffer+0x44>)
 80194fa:	2201      	movs	r2, #1
 80194fc:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80194fe:	4b0d      	ldr	r3, [pc, #52]	; (8019534 <st7735SendBuffer+0x48>)
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	2110      	movs	r1, #16
 8019504:	4618      	mov	r0, r3
 8019506:	f7fd ff1b 	bl	8017340 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 801950a:	2101      	movs	r1, #1
 801950c:	2003      	movs	r0, #3
 801950e:	f7fb fadf 	bl	8014ad0 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8019512:	2100      	movs	r1, #0
 8019514:	2002      	movs	r0, #2
 8019516:	f7fb fadb 	bl	8014ad0 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 801951a:	2300      	movs	r3, #0
 801951c:	68ba      	ldr	r2, [r7, #8]
 801951e:	68f9      	ldr	r1, [r7, #12]
 8019520:	2000      	movs	r0, #0
 8019522:	f7fd ff8f 	bl	8017444 <spiDmaTxTransfer>
  return true;
 8019526:	2301      	movs	r3, #1
}
 8019528:	4618      	mov	r0, r3
 801952a:	3710      	adds	r7, #16
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}
 8019530:	2000b300 	.word	0x2000b300
 8019534:	2000b2fa 	.word	0x2000b2fa

08019538 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8019538:	b480      	push	{r7}
 801953a:	b083      	sub	sp, #12
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8019540:	4a04      	ldr	r2, [pc, #16]	; (8019554 <st7735SetCallBack+0x1c>)
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	6013      	str	r3, [r2, #0]

  return true;
 8019546:	2301      	movs	r3, #1
}
 8019548:	4618      	mov	r0, r3
 801954a:	370c      	adds	r7, #12
 801954c:	46bd      	mov	sp, r7
 801954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019552:	4770      	bx	lr
 8019554:	2000b2fc 	.word	0x2000b2fc

08019558 <hwInit>:
        "Firmware"
    };


void hwInit(void)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	af00      	add	r7, sp, #0
  bspInit();
 801955c:	f7f9 f9d2 	bl	8012904 <bspInit>

  rtcInit();
 8019560:	f7fc ff7c 	bl	801645c <rtcInit>
  resetInit();
 8019564:	f7fc ff48 	bl	80163f8 <resetInit>
  cliInit();
 8019568:	f7fa f818 	bl	801359c <cliInit>
  ledInit();
 801956c:	f7fc fb70 	bl	8015c50 <ledInit>
  uartInit();
 8019570:	f7fe fda8 	bl	80180c4 <uartInit>
  spiInit();
 8019574:	f7fd fdd2 	bl	801711c <spiInit>
  DWT_Delay_Init();
 8019578:	f7f9 fcc0 	bl	8012efc <DWT_Delay_Init>
  buttonInit();
 801957c:	f7f9 fcee 	bl	8012f5c <buttonInit>
  gpioInit();
 8019580:	f7fb f9dc 	bl	801493c <gpioInit>
  flashInit();
 8019584:	f7fb f808 	bl	8014598 <flashInit>
  Ds18b20_Init();
 8019588:	f7fa faa2 	bl	8013ad0 <Ds18b20_Init>
  sonarInit();
 801958c:	f7fd fbf2 	bl	8016d74 <sonarInit>

  //LCD_INIT();
  lcdInit();
 8019590:	f7fb fc24 	bl	8014ddc <lcdInit>
  tdsInit();
 8019594:	f7fe f8bc 	bl	8017710 <tdsInit>

  if (sdInit() == true)
 8019598:	f7fc ffd2 	bl	8016540 <sdInit>
 801959c:	4603      	mov	r3, r0
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d001      	beq.n	80195a6 <hwInit+0x4e>
  {
    fatfsInit();
 80195a2:	f7fa fdfb 	bl	801419c <fatfsInit>
  }

  //menuInit();
}
 80195a6:	bf00      	nop
 80195a8:	bd80      	pop	{r7, pc}
	...

080195ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b084      	sub	sp, #16
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	4603      	mov	r3, r0
 80195b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80195b6:	79fb      	ldrb	r3, [r7, #7]
 80195b8:	4a08      	ldr	r2, [pc, #32]	; (80195dc <disk_status+0x30>)
 80195ba:	009b      	lsls	r3, r3, #2
 80195bc:	4413      	add	r3, r2
 80195be:	685b      	ldr	r3, [r3, #4]
 80195c0:	685b      	ldr	r3, [r3, #4]
 80195c2:	79fa      	ldrb	r2, [r7, #7]
 80195c4:	4905      	ldr	r1, [pc, #20]	; (80195dc <disk_status+0x30>)
 80195c6:	440a      	add	r2, r1
 80195c8:	7b12      	ldrb	r2, [r2, #12]
 80195ca:	4610      	mov	r0, r2
 80195cc:	4798      	blx	r3
 80195ce:	4603      	mov	r3, r0
 80195d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80195d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3710      	adds	r7, #16
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}
 80195dc:	2000b330 	.word	0x2000b330

080195e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b084      	sub	sp, #16
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	4603      	mov	r3, r0
 80195e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80195ea:	2300      	movs	r3, #0
 80195ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80195ee:	79fb      	ldrb	r3, [r7, #7]
 80195f0:	4a0d      	ldr	r2, [pc, #52]	; (8019628 <disk_initialize+0x48>)
 80195f2:	5cd3      	ldrb	r3, [r2, r3]
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d111      	bne.n	801961c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80195f8:	79fb      	ldrb	r3, [r7, #7]
 80195fa:	4a0b      	ldr	r2, [pc, #44]	; (8019628 <disk_initialize+0x48>)
 80195fc:	2101      	movs	r1, #1
 80195fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8019600:	79fb      	ldrb	r3, [r7, #7]
 8019602:	4a09      	ldr	r2, [pc, #36]	; (8019628 <disk_initialize+0x48>)
 8019604:	009b      	lsls	r3, r3, #2
 8019606:	4413      	add	r3, r2
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	79fa      	ldrb	r2, [r7, #7]
 801960e:	4906      	ldr	r1, [pc, #24]	; (8019628 <disk_initialize+0x48>)
 8019610:	440a      	add	r2, r1
 8019612:	7b12      	ldrb	r2, [r2, #12]
 8019614:	4610      	mov	r0, r2
 8019616:	4798      	blx	r3
 8019618:	4603      	mov	r3, r0
 801961a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801961c:	7bfb      	ldrb	r3, [r7, #15]
}
 801961e:	4618      	mov	r0, r3
 8019620:	3710      	adds	r7, #16
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	2000b330 	.word	0x2000b330

0801962c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801962c:	b590      	push	{r4, r7, lr}
 801962e:	b087      	sub	sp, #28
 8019630:	af00      	add	r7, sp, #0
 8019632:	60b9      	str	r1, [r7, #8]
 8019634:	607a      	str	r2, [r7, #4]
 8019636:	603b      	str	r3, [r7, #0]
 8019638:	4603      	mov	r3, r0
 801963a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801963c:	7bfb      	ldrb	r3, [r7, #15]
 801963e:	4a0a      	ldr	r2, [pc, #40]	; (8019668 <disk_read+0x3c>)
 8019640:	009b      	lsls	r3, r3, #2
 8019642:	4413      	add	r3, r2
 8019644:	685b      	ldr	r3, [r3, #4]
 8019646:	689c      	ldr	r4, [r3, #8]
 8019648:	7bfb      	ldrb	r3, [r7, #15]
 801964a:	4a07      	ldr	r2, [pc, #28]	; (8019668 <disk_read+0x3c>)
 801964c:	4413      	add	r3, r2
 801964e:	7b18      	ldrb	r0, [r3, #12]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	687a      	ldr	r2, [r7, #4]
 8019654:	68b9      	ldr	r1, [r7, #8]
 8019656:	47a0      	blx	r4
 8019658:	4603      	mov	r3, r0
 801965a:	75fb      	strb	r3, [r7, #23]
  return res;
 801965c:	7dfb      	ldrb	r3, [r7, #23]
}
 801965e:	4618      	mov	r0, r3
 8019660:	371c      	adds	r7, #28
 8019662:	46bd      	mov	sp, r7
 8019664:	bd90      	pop	{r4, r7, pc}
 8019666:	bf00      	nop
 8019668:	2000b330 	.word	0x2000b330

0801966c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801966c:	b590      	push	{r4, r7, lr}
 801966e:	b087      	sub	sp, #28
 8019670:	af00      	add	r7, sp, #0
 8019672:	60b9      	str	r1, [r7, #8]
 8019674:	607a      	str	r2, [r7, #4]
 8019676:	603b      	str	r3, [r7, #0]
 8019678:	4603      	mov	r3, r0
 801967a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801967c:	7bfb      	ldrb	r3, [r7, #15]
 801967e:	4a0a      	ldr	r2, [pc, #40]	; (80196a8 <disk_write+0x3c>)
 8019680:	009b      	lsls	r3, r3, #2
 8019682:	4413      	add	r3, r2
 8019684:	685b      	ldr	r3, [r3, #4]
 8019686:	68dc      	ldr	r4, [r3, #12]
 8019688:	7bfb      	ldrb	r3, [r7, #15]
 801968a:	4a07      	ldr	r2, [pc, #28]	; (80196a8 <disk_write+0x3c>)
 801968c:	4413      	add	r3, r2
 801968e:	7b18      	ldrb	r0, [r3, #12]
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	687a      	ldr	r2, [r7, #4]
 8019694:	68b9      	ldr	r1, [r7, #8]
 8019696:	47a0      	blx	r4
 8019698:	4603      	mov	r3, r0
 801969a:	75fb      	strb	r3, [r7, #23]
  return res;
 801969c:	7dfb      	ldrb	r3, [r7, #23]
}
 801969e:	4618      	mov	r0, r3
 80196a0:	371c      	adds	r7, #28
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd90      	pop	{r4, r7, pc}
 80196a6:	bf00      	nop
 80196a8:	2000b330 	.word	0x2000b330

080196ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b084      	sub	sp, #16
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	4603      	mov	r3, r0
 80196b4:	603a      	str	r2, [r7, #0]
 80196b6:	71fb      	strb	r3, [r7, #7]
 80196b8:	460b      	mov	r3, r1
 80196ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80196bc:	79fb      	ldrb	r3, [r7, #7]
 80196be:	4a09      	ldr	r2, [pc, #36]	; (80196e4 <disk_ioctl+0x38>)
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	4413      	add	r3, r2
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	691b      	ldr	r3, [r3, #16]
 80196c8:	79fa      	ldrb	r2, [r7, #7]
 80196ca:	4906      	ldr	r1, [pc, #24]	; (80196e4 <disk_ioctl+0x38>)
 80196cc:	440a      	add	r2, r1
 80196ce:	7b10      	ldrb	r0, [r2, #12]
 80196d0:	79b9      	ldrb	r1, [r7, #6]
 80196d2:	683a      	ldr	r2, [r7, #0]
 80196d4:	4798      	blx	r3
 80196d6:	4603      	mov	r3, r0
 80196d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80196da:	7bfb      	ldrb	r3, [r7, #15]
}
 80196dc:	4618      	mov	r0, r3
 80196de:	3710      	adds	r7, #16
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	2000b330 	.word	0x2000b330

080196e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80196e8:	b480      	push	{r7}
 80196ea:	af00      	add	r7, sp, #0
  return 0;
 80196ec:	2300      	movs	r3, #0
}
 80196ee:	4618      	mov	r0, r3
 80196f0:	46bd      	mov	sp, r7
 80196f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f6:	4770      	bx	lr

080196f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80196f8:	b480      	push	{r7}
 80196fa:	b085      	sub	sp, #20
 80196fc:	af00      	add	r7, sp, #0
 80196fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	3301      	adds	r3, #1
 8019704:	781b      	ldrb	r3, [r3, #0]
 8019706:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8019708:	89fb      	ldrh	r3, [r7, #14]
 801970a:	021b      	lsls	r3, r3, #8
 801970c:	b21a      	sxth	r2, r3
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	b21b      	sxth	r3, r3
 8019714:	4313      	orrs	r3, r2
 8019716:	b21b      	sxth	r3, r3
 8019718:	81fb      	strh	r3, [r7, #14]
	return rv;
 801971a:	89fb      	ldrh	r3, [r7, #14]
}
 801971c:	4618      	mov	r0, r3
 801971e:	3714      	adds	r7, #20
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr

08019728 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8019728:	b480      	push	{r7}
 801972a:	b085      	sub	sp, #20
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	3303      	adds	r3, #3
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	021b      	lsls	r3, r3, #8
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	3202      	adds	r2, #2
 8019740:	7812      	ldrb	r2, [r2, #0]
 8019742:	4313      	orrs	r3, r2
 8019744:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	021b      	lsls	r3, r3, #8
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	3201      	adds	r2, #1
 801974e:	7812      	ldrb	r2, [r2, #0]
 8019750:	4313      	orrs	r3, r2
 8019752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8019754:	68fb      	ldr	r3, [r7, #12]
 8019756:	021b      	lsls	r3, r3, #8
 8019758:	687a      	ldr	r2, [r7, #4]
 801975a:	7812      	ldrb	r2, [r2, #0]
 801975c:	4313      	orrs	r3, r2
 801975e:	60fb      	str	r3, [r7, #12]
	return rv;
 8019760:	68fb      	ldr	r3, [r7, #12]
}
 8019762:	4618      	mov	r0, r3
 8019764:	3714      	adds	r7, #20
 8019766:	46bd      	mov	sp, r7
 8019768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976c:	4770      	bx	lr

0801976e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801976e:	b480      	push	{r7}
 8019770:	b083      	sub	sp, #12
 8019772:	af00      	add	r7, sp, #0
 8019774:	6078      	str	r0, [r7, #4]
 8019776:	460b      	mov	r3, r1
 8019778:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	1c5a      	adds	r2, r3, #1
 801977e:	607a      	str	r2, [r7, #4]
 8019780:	887a      	ldrh	r2, [r7, #2]
 8019782:	b2d2      	uxtb	r2, r2
 8019784:	701a      	strb	r2, [r3, #0]
 8019786:	887b      	ldrh	r3, [r7, #2]
 8019788:	0a1b      	lsrs	r3, r3, #8
 801978a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	1c5a      	adds	r2, r3, #1
 8019790:	607a      	str	r2, [r7, #4]
 8019792:	887a      	ldrh	r2, [r7, #2]
 8019794:	b2d2      	uxtb	r2, r2
 8019796:	701a      	strb	r2, [r3, #0]
}
 8019798:	bf00      	nop
 801979a:	370c      	adds	r7, #12
 801979c:	46bd      	mov	sp, r7
 801979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a2:	4770      	bx	lr

080197a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80197a4:	b480      	push	{r7}
 80197a6:	b083      	sub	sp, #12
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
 80197ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	1c5a      	adds	r2, r3, #1
 80197b2:	607a      	str	r2, [r7, #4]
 80197b4:	683a      	ldr	r2, [r7, #0]
 80197b6:	b2d2      	uxtb	r2, r2
 80197b8:	701a      	strb	r2, [r3, #0]
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	0a1b      	lsrs	r3, r3, #8
 80197be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	1c5a      	adds	r2, r3, #1
 80197c4:	607a      	str	r2, [r7, #4]
 80197c6:	683a      	ldr	r2, [r7, #0]
 80197c8:	b2d2      	uxtb	r2, r2
 80197ca:	701a      	strb	r2, [r3, #0]
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	0a1b      	lsrs	r3, r3, #8
 80197d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	1c5a      	adds	r2, r3, #1
 80197d6:	607a      	str	r2, [r7, #4]
 80197d8:	683a      	ldr	r2, [r7, #0]
 80197da:	b2d2      	uxtb	r2, r2
 80197dc:	701a      	strb	r2, [r3, #0]
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	0a1b      	lsrs	r3, r3, #8
 80197e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	1c5a      	adds	r2, r3, #1
 80197e8:	607a      	str	r2, [r7, #4]
 80197ea:	683a      	ldr	r2, [r7, #0]
 80197ec:	b2d2      	uxtb	r2, r2
 80197ee:	701a      	strb	r2, [r3, #0]
}
 80197f0:	bf00      	nop
 80197f2:	370c      	adds	r7, #12
 80197f4:	46bd      	mov	sp, r7
 80197f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fa:	4770      	bx	lr

080197fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80197fc:	b480      	push	{r7}
 80197fe:	b087      	sub	sp, #28
 8019800:	af00      	add	r7, sp, #0
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d00d      	beq.n	8019832 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8019816:	693a      	ldr	r2, [r7, #16]
 8019818:	1c53      	adds	r3, r2, #1
 801981a:	613b      	str	r3, [r7, #16]
 801981c:	697b      	ldr	r3, [r7, #20]
 801981e:	1c59      	adds	r1, r3, #1
 8019820:	6179      	str	r1, [r7, #20]
 8019822:	7812      	ldrb	r2, [r2, #0]
 8019824:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	3b01      	subs	r3, #1
 801982a:	607b      	str	r3, [r7, #4]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d1f1      	bne.n	8019816 <mem_cpy+0x1a>
	}
}
 8019832:	bf00      	nop
 8019834:	371c      	adds	r7, #28
 8019836:	46bd      	mov	sp, r7
 8019838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983c:	4770      	bx	lr

0801983e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801983e:	b480      	push	{r7}
 8019840:	b087      	sub	sp, #28
 8019842:	af00      	add	r7, sp, #0
 8019844:	60f8      	str	r0, [r7, #12]
 8019846:	60b9      	str	r1, [r7, #8]
 8019848:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801984e:	697b      	ldr	r3, [r7, #20]
 8019850:	1c5a      	adds	r2, r3, #1
 8019852:	617a      	str	r2, [r7, #20]
 8019854:	68ba      	ldr	r2, [r7, #8]
 8019856:	b2d2      	uxtb	r2, r2
 8019858:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	3b01      	subs	r3, #1
 801985e:	607b      	str	r3, [r7, #4]
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d1f3      	bne.n	801984e <mem_set+0x10>
}
 8019866:	bf00      	nop
 8019868:	bf00      	nop
 801986a:	371c      	adds	r7, #28
 801986c:	46bd      	mov	sp, r7
 801986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019872:	4770      	bx	lr

08019874 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8019874:	b480      	push	{r7}
 8019876:	b089      	sub	sp, #36	; 0x24
 8019878:	af00      	add	r7, sp, #0
 801987a:	60f8      	str	r0, [r7, #12]
 801987c:	60b9      	str	r1, [r7, #8]
 801987e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	61fb      	str	r3, [r7, #28]
 8019884:	68bb      	ldr	r3, [r7, #8]
 8019886:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019888:	2300      	movs	r3, #0
 801988a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801988c:	69fb      	ldr	r3, [r7, #28]
 801988e:	1c5a      	adds	r2, r3, #1
 8019890:	61fa      	str	r2, [r7, #28]
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	4619      	mov	r1, r3
 8019896:	69bb      	ldr	r3, [r7, #24]
 8019898:	1c5a      	adds	r2, r3, #1
 801989a:	61ba      	str	r2, [r7, #24]
 801989c:	781b      	ldrb	r3, [r3, #0]
 801989e:	1acb      	subs	r3, r1, r3
 80198a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	3b01      	subs	r3, #1
 80198a6:	607b      	str	r3, [r7, #4]
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d002      	beq.n	80198b4 <mem_cmp+0x40>
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d0eb      	beq.n	801988c <mem_cmp+0x18>

	return r;
 80198b4:	697b      	ldr	r3, [r7, #20]
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	3724      	adds	r7, #36	; 0x24
 80198ba:	46bd      	mov	sp, r7
 80198bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c0:	4770      	bx	lr

080198c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80198c2:	b480      	push	{r7}
 80198c4:	b083      	sub	sp, #12
 80198c6:	af00      	add	r7, sp, #0
 80198c8:	6078      	str	r0, [r7, #4]
 80198ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80198cc:	e002      	b.n	80198d4 <chk_chr+0x12>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	3301      	adds	r3, #1
 80198d2:	607b      	str	r3, [r7, #4]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d005      	beq.n	80198e8 <chk_chr+0x26>
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	461a      	mov	r2, r3
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	4293      	cmp	r3, r2
 80198e6:	d1f2      	bne.n	80198ce <chk_chr+0xc>
	return *str;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	781b      	ldrb	r3, [r3, #0]
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	370c      	adds	r7, #12
 80198f0:	46bd      	mov	sp, r7
 80198f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f6:	4770      	bx	lr

080198f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80198f8:	b480      	push	{r7}
 80198fa:	b085      	sub	sp, #20
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
 8019900:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019902:	2300      	movs	r3, #0
 8019904:	60bb      	str	r3, [r7, #8]
 8019906:	68bb      	ldr	r3, [r7, #8]
 8019908:	60fb      	str	r3, [r7, #12]
 801990a:	e029      	b.n	8019960 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801990c:	4a27      	ldr	r2, [pc, #156]	; (80199ac <chk_lock+0xb4>)
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	011b      	lsls	r3, r3, #4
 8019912:	4413      	add	r3, r2
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d01d      	beq.n	8019956 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801991a:	4a24      	ldr	r2, [pc, #144]	; (80199ac <chk_lock+0xb4>)
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	011b      	lsls	r3, r3, #4
 8019920:	4413      	add	r3, r2
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	429a      	cmp	r2, r3
 801992a:	d116      	bne.n	801995a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801992c:	4a1f      	ldr	r2, [pc, #124]	; (80199ac <chk_lock+0xb4>)
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	011b      	lsls	r3, r3, #4
 8019932:	4413      	add	r3, r2
 8019934:	3304      	adds	r3, #4
 8019936:	681a      	ldr	r2, [r3, #0]
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801993c:	429a      	cmp	r2, r3
 801993e:	d10c      	bne.n	801995a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019940:	4a1a      	ldr	r2, [pc, #104]	; (80199ac <chk_lock+0xb4>)
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	011b      	lsls	r3, r3, #4
 8019946:	4413      	add	r3, r2
 8019948:	3308      	adds	r3, #8
 801994a:	681a      	ldr	r2, [r3, #0]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8019950:	429a      	cmp	r2, r3
 8019952:	d102      	bne.n	801995a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019954:	e007      	b.n	8019966 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8019956:	2301      	movs	r3, #1
 8019958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	3301      	adds	r3, #1
 801995e:	60fb      	str	r3, [r7, #12]
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	2b01      	cmp	r3, #1
 8019964:	d9d2      	bls.n	801990c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	2b02      	cmp	r3, #2
 801996a:	d109      	bne.n	8019980 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	2b00      	cmp	r3, #0
 8019970:	d102      	bne.n	8019978 <chk_lock+0x80>
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	2b02      	cmp	r3, #2
 8019976:	d101      	bne.n	801997c <chk_lock+0x84>
 8019978:	2300      	movs	r3, #0
 801997a:	e010      	b.n	801999e <chk_lock+0xa6>
 801997c:	2312      	movs	r3, #18
 801997e:	e00e      	b.n	801999e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d108      	bne.n	8019998 <chk_lock+0xa0>
 8019986:	4a09      	ldr	r2, [pc, #36]	; (80199ac <chk_lock+0xb4>)
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	011b      	lsls	r3, r3, #4
 801998c:	4413      	add	r3, r2
 801998e:	330c      	adds	r3, #12
 8019990:	881b      	ldrh	r3, [r3, #0]
 8019992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019996:	d101      	bne.n	801999c <chk_lock+0xa4>
 8019998:	2310      	movs	r3, #16
 801999a:	e000      	b.n	801999e <chk_lock+0xa6>
 801999c:	2300      	movs	r3, #0
}
 801999e:	4618      	mov	r0, r3
 80199a0:	3714      	adds	r7, #20
 80199a2:	46bd      	mov	sp, r7
 80199a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	2000b310 	.word	0x2000b310

080199b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80199b0:	b480      	push	{r7}
 80199b2:	b083      	sub	sp, #12
 80199b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80199b6:	2300      	movs	r3, #0
 80199b8:	607b      	str	r3, [r7, #4]
 80199ba:	e002      	b.n	80199c2 <enq_lock+0x12>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	3301      	adds	r3, #1
 80199c0:	607b      	str	r3, [r7, #4]
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2b01      	cmp	r3, #1
 80199c6:	d806      	bhi.n	80199d6 <enq_lock+0x26>
 80199c8:	4a09      	ldr	r2, [pc, #36]	; (80199f0 <enq_lock+0x40>)
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	011b      	lsls	r3, r3, #4
 80199ce:	4413      	add	r3, r2
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d1f2      	bne.n	80199bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2b02      	cmp	r3, #2
 80199da:	bf14      	ite	ne
 80199dc:	2301      	movne	r3, #1
 80199de:	2300      	moveq	r3, #0
 80199e0:	b2db      	uxtb	r3, r3
}
 80199e2:	4618      	mov	r0, r3
 80199e4:	370c      	adds	r7, #12
 80199e6:	46bd      	mov	sp, r7
 80199e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ec:	4770      	bx	lr
 80199ee:	bf00      	nop
 80199f0:	2000b310 	.word	0x2000b310

080199f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80199f4:	b480      	push	{r7}
 80199f6:	b085      	sub	sp, #20
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
 80199fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80199fe:	2300      	movs	r3, #0
 8019a00:	60fb      	str	r3, [r7, #12]
 8019a02:	e01f      	b.n	8019a44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8019a04:	4a41      	ldr	r2, [pc, #260]	; (8019b0c <inc_lock+0x118>)
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	011b      	lsls	r3, r3, #4
 8019a0a:	4413      	add	r3, r2
 8019a0c:	681a      	ldr	r2, [r3, #0]
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d113      	bne.n	8019a3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8019a16:	4a3d      	ldr	r2, [pc, #244]	; (8019b0c <inc_lock+0x118>)
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	011b      	lsls	r3, r3, #4
 8019a1c:	4413      	add	r3, r2
 8019a1e:	3304      	adds	r3, #4
 8019a20:	681a      	ldr	r2, [r3, #0]
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8019a26:	429a      	cmp	r2, r3
 8019a28:	d109      	bne.n	8019a3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8019a2a:	4a38      	ldr	r2, [pc, #224]	; (8019b0c <inc_lock+0x118>)
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	011b      	lsls	r3, r3, #4
 8019a30:	4413      	add	r3, r2
 8019a32:	3308      	adds	r3, #8
 8019a34:	681a      	ldr	r2, [r3, #0]
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8019a3a:	429a      	cmp	r2, r3
 8019a3c:	d006      	beq.n	8019a4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	3301      	adds	r3, #1
 8019a42:	60fb      	str	r3, [r7, #12]
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2b01      	cmp	r3, #1
 8019a48:	d9dc      	bls.n	8019a04 <inc_lock+0x10>
 8019a4a:	e000      	b.n	8019a4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8019a4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	2b02      	cmp	r3, #2
 8019a52:	d132      	bne.n	8019aba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8019a54:	2300      	movs	r3, #0
 8019a56:	60fb      	str	r3, [r7, #12]
 8019a58:	e002      	b.n	8019a60 <inc_lock+0x6c>
 8019a5a:	68fb      	ldr	r3, [r7, #12]
 8019a5c:	3301      	adds	r3, #1
 8019a5e:	60fb      	str	r3, [r7, #12]
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	2b01      	cmp	r3, #1
 8019a64:	d806      	bhi.n	8019a74 <inc_lock+0x80>
 8019a66:	4a29      	ldr	r2, [pc, #164]	; (8019b0c <inc_lock+0x118>)
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	011b      	lsls	r3, r3, #4
 8019a6c:	4413      	add	r3, r2
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d1f2      	bne.n	8019a5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d101      	bne.n	8019a7e <inc_lock+0x8a>
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	e040      	b.n	8019b00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	681a      	ldr	r2, [r3, #0]
 8019a82:	4922      	ldr	r1, [pc, #136]	; (8019b0c <inc_lock+0x118>)
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	011b      	lsls	r3, r3, #4
 8019a88:	440b      	add	r3, r1
 8019a8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	689a      	ldr	r2, [r3, #8]
 8019a90:	491e      	ldr	r1, [pc, #120]	; (8019b0c <inc_lock+0x118>)
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	011b      	lsls	r3, r3, #4
 8019a96:	440b      	add	r3, r1
 8019a98:	3304      	adds	r3, #4
 8019a9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	695a      	ldr	r2, [r3, #20]
 8019aa0:	491a      	ldr	r1, [pc, #104]	; (8019b0c <inc_lock+0x118>)
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	011b      	lsls	r3, r3, #4
 8019aa6:	440b      	add	r3, r1
 8019aa8:	3308      	adds	r3, #8
 8019aaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019aac:	4a17      	ldr	r2, [pc, #92]	; (8019b0c <inc_lock+0x118>)
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	011b      	lsls	r3, r3, #4
 8019ab2:	4413      	add	r3, r2
 8019ab4:	330c      	adds	r3, #12
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8019aba:	683b      	ldr	r3, [r7, #0]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d009      	beq.n	8019ad4 <inc_lock+0xe0>
 8019ac0:	4a12      	ldr	r2, [pc, #72]	; (8019b0c <inc_lock+0x118>)
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	011b      	lsls	r3, r3, #4
 8019ac6:	4413      	add	r3, r2
 8019ac8:	330c      	adds	r3, #12
 8019aca:	881b      	ldrh	r3, [r3, #0]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d001      	beq.n	8019ad4 <inc_lock+0xe0>
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	e015      	b.n	8019b00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d108      	bne.n	8019aec <inc_lock+0xf8>
 8019ada:	4a0c      	ldr	r2, [pc, #48]	; (8019b0c <inc_lock+0x118>)
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	011b      	lsls	r3, r3, #4
 8019ae0:	4413      	add	r3, r2
 8019ae2:	330c      	adds	r3, #12
 8019ae4:	881b      	ldrh	r3, [r3, #0]
 8019ae6:	3301      	adds	r3, #1
 8019ae8:	b29a      	uxth	r2, r3
 8019aea:	e001      	b.n	8019af0 <inc_lock+0xfc>
 8019aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019af0:	4906      	ldr	r1, [pc, #24]	; (8019b0c <inc_lock+0x118>)
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	011b      	lsls	r3, r3, #4
 8019af6:	440b      	add	r3, r1
 8019af8:	330c      	adds	r3, #12
 8019afa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	3301      	adds	r3, #1
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3714      	adds	r7, #20
 8019b04:	46bd      	mov	sp, r7
 8019b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b0a:	4770      	bx	lr
 8019b0c:	2000b310 	.word	0x2000b310

08019b10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8019b10:	b480      	push	{r7}
 8019b12:	b085      	sub	sp, #20
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	3b01      	subs	r3, #1
 8019b1c:	607b      	str	r3, [r7, #4]
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2b01      	cmp	r3, #1
 8019b22:	d825      	bhi.n	8019b70 <dec_lock+0x60>
		n = Files[i].ctr;
 8019b24:	4a17      	ldr	r2, [pc, #92]	; (8019b84 <dec_lock+0x74>)
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	011b      	lsls	r3, r3, #4
 8019b2a:	4413      	add	r3, r2
 8019b2c:	330c      	adds	r3, #12
 8019b2e:	881b      	ldrh	r3, [r3, #0]
 8019b30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8019b32:	89fb      	ldrh	r3, [r7, #14]
 8019b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019b38:	d101      	bne.n	8019b3e <dec_lock+0x2e>
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8019b3e:	89fb      	ldrh	r3, [r7, #14]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d002      	beq.n	8019b4a <dec_lock+0x3a>
 8019b44:	89fb      	ldrh	r3, [r7, #14]
 8019b46:	3b01      	subs	r3, #1
 8019b48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8019b4a:	4a0e      	ldr	r2, [pc, #56]	; (8019b84 <dec_lock+0x74>)
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	011b      	lsls	r3, r3, #4
 8019b50:	4413      	add	r3, r2
 8019b52:	330c      	adds	r3, #12
 8019b54:	89fa      	ldrh	r2, [r7, #14]
 8019b56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019b58:	89fb      	ldrh	r3, [r7, #14]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d105      	bne.n	8019b6a <dec_lock+0x5a>
 8019b5e:	4a09      	ldr	r2, [pc, #36]	; (8019b84 <dec_lock+0x74>)
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	011b      	lsls	r3, r3, #4
 8019b64:	4413      	add	r3, r2
 8019b66:	2200      	movs	r2, #0
 8019b68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	737b      	strb	r3, [r7, #13]
 8019b6e:	e001      	b.n	8019b74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8019b70:	2302      	movs	r3, #2
 8019b72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8019b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8019b76:	4618      	mov	r0, r3
 8019b78:	3714      	adds	r7, #20
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b80:	4770      	bx	lr
 8019b82:	bf00      	nop
 8019b84:	2000b310 	.word	0x2000b310

08019b88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b085      	sub	sp, #20
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019b90:	2300      	movs	r3, #0
 8019b92:	60fb      	str	r3, [r7, #12]
 8019b94:	e010      	b.n	8019bb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8019b96:	4a0d      	ldr	r2, [pc, #52]	; (8019bcc <clear_lock+0x44>)
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	011b      	lsls	r3, r3, #4
 8019b9c:	4413      	add	r3, r2
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	687a      	ldr	r2, [r7, #4]
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	d105      	bne.n	8019bb2 <clear_lock+0x2a>
 8019ba6:	4a09      	ldr	r2, [pc, #36]	; (8019bcc <clear_lock+0x44>)
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	011b      	lsls	r3, r3, #4
 8019bac:	4413      	add	r3, r2
 8019bae:	2200      	movs	r2, #0
 8019bb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	3301      	adds	r3, #1
 8019bb6:	60fb      	str	r3, [r7, #12]
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	2b01      	cmp	r3, #1
 8019bbc:	d9eb      	bls.n	8019b96 <clear_lock+0xe>
	}
}
 8019bbe:	bf00      	nop
 8019bc0:	bf00      	nop
 8019bc2:	3714      	adds	r7, #20
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bca:	4770      	bx	lr
 8019bcc:	2000b310 	.word	0x2000b310

08019bd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8019bd0:	b580      	push	{r7, lr}
 8019bd2:	b086      	sub	sp, #24
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	78db      	ldrb	r3, [r3, #3]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d034      	beq.n	8019c4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019be8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	7858      	ldrb	r0, [r3, #1]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	697a      	ldr	r2, [r7, #20]
 8019bf8:	f7ff fd38 	bl	801966c <disk_write>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d002      	beq.n	8019c08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8019c02:	2301      	movs	r3, #1
 8019c04:	73fb      	strb	r3, [r7, #15]
 8019c06:	e022      	b.n	8019c4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c12:	697a      	ldr	r2, [r7, #20]
 8019c14:	1ad2      	subs	r2, r2, r3
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	69db      	ldr	r3, [r3, #28]
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d217      	bcs.n	8019c4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	789b      	ldrb	r3, [r3, #2]
 8019c22:	613b      	str	r3, [r7, #16]
 8019c24:	e010      	b.n	8019c48 <sync_window+0x78>
					wsect += fs->fsize;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	69db      	ldr	r3, [r3, #28]
 8019c2a:	697a      	ldr	r2, [r7, #20]
 8019c2c:	4413      	add	r3, r2
 8019c2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	7858      	ldrb	r0, [r3, #1]
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	697a      	ldr	r2, [r7, #20]
 8019c3e:	f7ff fd15 	bl	801966c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c42:	693b      	ldr	r3, [r7, #16]
 8019c44:	3b01      	subs	r3, #1
 8019c46:	613b      	str	r3, [r7, #16]
 8019c48:	693b      	ldr	r3, [r7, #16]
 8019c4a:	2b01      	cmp	r3, #1
 8019c4c:	d8eb      	bhi.n	8019c26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8019c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c50:	4618      	mov	r0, r3
 8019c52:	3718      	adds	r7, #24
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}

08019c58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b084      	sub	sp, #16
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8019c62:	2300      	movs	r3, #0
 8019c64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c6a:	683a      	ldr	r2, [r7, #0]
 8019c6c:	429a      	cmp	r2, r3
 8019c6e:	d01b      	beq.n	8019ca8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8019c70:	6878      	ldr	r0, [r7, #4]
 8019c72:	f7ff ffad 	bl	8019bd0 <sync_window>
 8019c76:	4603      	mov	r3, r0
 8019c78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8019c7a:	7bfb      	ldrb	r3, [r7, #15]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d113      	bne.n	8019ca8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	7858      	ldrb	r0, [r3, #1]
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019c8a:	2301      	movs	r3, #1
 8019c8c:	683a      	ldr	r2, [r7, #0]
 8019c8e:	f7ff fccd 	bl	801962c <disk_read>
 8019c92:	4603      	mov	r3, r0
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d004      	beq.n	8019ca2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019c98:	f04f 33ff 	mov.w	r3, #4294967295
 8019c9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	683a      	ldr	r2, [r7, #0]
 8019ca6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8019ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3710      	adds	r7, #16
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
	...

08019cb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b084      	sub	sp, #16
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8019cbc:	6878      	ldr	r0, [r7, #4]
 8019cbe:	f7ff ff87 	bl	8019bd0 <sync_window>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8019cc6:	7bfb      	ldrb	r3, [r7, #15]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d158      	bne.n	8019d7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	781b      	ldrb	r3, [r3, #0]
 8019cd0:	2b03      	cmp	r3, #3
 8019cd2:	d148      	bne.n	8019d66 <sync_fs+0xb2>
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	791b      	ldrb	r3, [r3, #4]
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	d144      	bne.n	8019d66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	3334      	adds	r3, #52	; 0x34
 8019ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7ff fda9 	bl	801983e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	3334      	adds	r3, #52	; 0x34
 8019cf0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019cf4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f7ff fd38 	bl	801976e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	3334      	adds	r3, #52	; 0x34
 8019d02:	4921      	ldr	r1, [pc, #132]	; (8019d88 <sync_fs+0xd4>)
 8019d04:	4618      	mov	r0, r3
 8019d06:	f7ff fd4d 	bl	80197a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	3334      	adds	r3, #52	; 0x34
 8019d0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019d12:	491e      	ldr	r1, [pc, #120]	; (8019d8c <sync_fs+0xd8>)
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7ff fd45 	bl	80197a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	3334      	adds	r3, #52	; 0x34
 8019d1e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	695b      	ldr	r3, [r3, #20]
 8019d26:	4619      	mov	r1, r3
 8019d28:	4610      	mov	r0, r2
 8019d2a:	f7ff fd3b 	bl	80197a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	3334      	adds	r3, #52	; 0x34
 8019d32:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	691b      	ldr	r3, [r3, #16]
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	4610      	mov	r0, r2
 8019d3e:	f7ff fd31 	bl	80197a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	6a1b      	ldr	r3, [r3, #32]
 8019d46:	1c5a      	adds	r2, r3, #1
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	7858      	ldrb	r0, [r3, #1]
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	f7ff fc86 	bl	801966c <disk_write>
			fs->fsi_flag = 0;
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2200      	movs	r2, #0
 8019d64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	785b      	ldrb	r3, [r3, #1]
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	4618      	mov	r0, r3
 8019d70:	f7ff fc9c 	bl	80196ac <disk_ioctl>
 8019d74:	4603      	mov	r3, r0
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d001      	beq.n	8019d7e <sync_fs+0xca>
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8019d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019d80:	4618      	mov	r0, r3
 8019d82:	3710      	adds	r7, #16
 8019d84:	46bd      	mov	sp, r7
 8019d86:	bd80      	pop	{r7, pc}
 8019d88:	41615252 	.word	0x41615252
 8019d8c:	61417272 	.word	0x61417272

08019d90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019d90:	b480      	push	{r7}
 8019d92:	b083      	sub	sp, #12
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019d9a:	683b      	ldr	r3, [r7, #0]
 8019d9c:	3b02      	subs	r3, #2
 8019d9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	699b      	ldr	r3, [r3, #24]
 8019da4:	3b02      	subs	r3, #2
 8019da6:	683a      	ldr	r2, [r7, #0]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	d301      	bcc.n	8019db0 <clust2sect+0x20>
 8019dac:	2300      	movs	r3, #0
 8019dae:	e008      	b.n	8019dc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	895b      	ldrh	r3, [r3, #10]
 8019db4:	461a      	mov	r2, r3
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	fb03 f202 	mul.w	r2, r3, r2
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019dc0:	4413      	add	r3, r2
}
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	370c      	adds	r7, #12
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dcc:	4770      	bx	lr

08019dce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019dce:	b580      	push	{r7, lr}
 8019dd0:	b086      	sub	sp, #24
 8019dd2:	af00      	add	r7, sp, #0
 8019dd4:	6078      	str	r0, [r7, #4]
 8019dd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019dde:	683b      	ldr	r3, [r7, #0]
 8019de0:	2b01      	cmp	r3, #1
 8019de2:	d904      	bls.n	8019dee <get_fat+0x20>
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	699b      	ldr	r3, [r3, #24]
 8019de8:	683a      	ldr	r2, [r7, #0]
 8019dea:	429a      	cmp	r2, r3
 8019dec:	d302      	bcc.n	8019df4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8019dee:	2301      	movs	r3, #1
 8019df0:	617b      	str	r3, [r7, #20]
 8019df2:	e08f      	b.n	8019f14 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019df4:	f04f 33ff 	mov.w	r3, #4294967295
 8019df8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8019dfa:	693b      	ldr	r3, [r7, #16]
 8019dfc:	781b      	ldrb	r3, [r3, #0]
 8019dfe:	2b03      	cmp	r3, #3
 8019e00:	d062      	beq.n	8019ec8 <get_fat+0xfa>
 8019e02:	2b03      	cmp	r3, #3
 8019e04:	dc7c      	bgt.n	8019f00 <get_fat+0x132>
 8019e06:	2b01      	cmp	r3, #1
 8019e08:	d002      	beq.n	8019e10 <get_fat+0x42>
 8019e0a:	2b02      	cmp	r3, #2
 8019e0c:	d042      	beq.n	8019e94 <get_fat+0xc6>
 8019e0e:	e077      	b.n	8019f00 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	60fb      	str	r3, [r7, #12]
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	085b      	lsrs	r3, r3, #1
 8019e18:	68fa      	ldr	r2, [r7, #12]
 8019e1a:	4413      	add	r3, r2
 8019e1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019e1e:	693b      	ldr	r3, [r7, #16]
 8019e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	0a5b      	lsrs	r3, r3, #9
 8019e26:	4413      	add	r3, r2
 8019e28:	4619      	mov	r1, r3
 8019e2a:	6938      	ldr	r0, [r7, #16]
 8019e2c:	f7ff ff14 	bl	8019c58 <move_window>
 8019e30:	4603      	mov	r3, r0
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d167      	bne.n	8019f06 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	1c5a      	adds	r2, r3, #1
 8019e3a:	60fa      	str	r2, [r7, #12]
 8019e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019e40:	693a      	ldr	r2, [r7, #16]
 8019e42:	4413      	add	r3, r2
 8019e44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019e48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019e4a:	693b      	ldr	r3, [r7, #16]
 8019e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	0a5b      	lsrs	r3, r3, #9
 8019e52:	4413      	add	r3, r2
 8019e54:	4619      	mov	r1, r3
 8019e56:	6938      	ldr	r0, [r7, #16]
 8019e58:	f7ff fefe 	bl	8019c58 <move_window>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d153      	bne.n	8019f0a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019e68:	693a      	ldr	r2, [r7, #16]
 8019e6a:	4413      	add	r3, r2
 8019e6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019e70:	021b      	lsls	r3, r3, #8
 8019e72:	461a      	mov	r2, r3
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	4313      	orrs	r3, r2
 8019e78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	f003 0301 	and.w	r3, r3, #1
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d002      	beq.n	8019e8a <get_fat+0xbc>
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	091b      	lsrs	r3, r3, #4
 8019e88:	e002      	b.n	8019e90 <get_fat+0xc2>
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019e90:	617b      	str	r3, [r7, #20]
			break;
 8019e92:	e03f      	b.n	8019f14 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	0a1b      	lsrs	r3, r3, #8
 8019e9c:	4413      	add	r3, r2
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	6938      	ldr	r0, [r7, #16]
 8019ea2:	f7ff fed9 	bl	8019c58 <move_window>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d130      	bne.n	8019f0e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019eac:	693b      	ldr	r3, [r7, #16]
 8019eae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	005b      	lsls	r3, r3, #1
 8019eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8019eba:	4413      	add	r3, r2
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7ff fc1b 	bl	80196f8 <ld_word>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	617b      	str	r3, [r7, #20]
			break;
 8019ec6:	e025      	b.n	8019f14 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ecc:	683b      	ldr	r3, [r7, #0]
 8019ece:	09db      	lsrs	r3, r3, #7
 8019ed0:	4413      	add	r3, r2
 8019ed2:	4619      	mov	r1, r3
 8019ed4:	6938      	ldr	r0, [r7, #16]
 8019ed6:	f7ff febf 	bl	8019c58 <move_window>
 8019eda:	4603      	mov	r3, r0
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d118      	bne.n	8019f12 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	009b      	lsls	r3, r3, #2
 8019eea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8019eee:	4413      	add	r3, r2
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7ff fc19 	bl	8019728 <ld_dword>
 8019ef6:	4603      	mov	r3, r0
 8019ef8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8019efc:	617b      	str	r3, [r7, #20]
			break;
 8019efe:	e009      	b.n	8019f14 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019f00:	2301      	movs	r3, #1
 8019f02:	617b      	str	r3, [r7, #20]
 8019f04:	e006      	b.n	8019f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019f06:	bf00      	nop
 8019f08:	e004      	b.n	8019f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019f0a:	bf00      	nop
 8019f0c:	e002      	b.n	8019f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019f0e:	bf00      	nop
 8019f10:	e000      	b.n	8019f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019f12:	bf00      	nop
		}
	}

	return val;
 8019f14:	697b      	ldr	r3, [r7, #20]
}
 8019f16:	4618      	mov	r0, r3
 8019f18:	3718      	adds	r7, #24
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd80      	pop	{r7, pc}

08019f1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019f1e:	b590      	push	{r4, r7, lr}
 8019f20:	b089      	sub	sp, #36	; 0x24
 8019f22:	af00      	add	r7, sp, #0
 8019f24:	60f8      	str	r0, [r7, #12]
 8019f26:	60b9      	str	r1, [r7, #8]
 8019f28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019f2a:	2302      	movs	r3, #2
 8019f2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019f2e:	68bb      	ldr	r3, [r7, #8]
 8019f30:	2b01      	cmp	r3, #1
 8019f32:	f240 80d2 	bls.w	801a0da <put_fat+0x1bc>
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	699b      	ldr	r3, [r3, #24]
 8019f3a:	68ba      	ldr	r2, [r7, #8]
 8019f3c:	429a      	cmp	r2, r3
 8019f3e:	f080 80cc 	bcs.w	801a0da <put_fat+0x1bc>
		switch (fs->fs_type) {
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	781b      	ldrb	r3, [r3, #0]
 8019f46:	2b03      	cmp	r3, #3
 8019f48:	f000 8096 	beq.w	801a078 <put_fat+0x15a>
 8019f4c:	2b03      	cmp	r3, #3
 8019f4e:	f300 80cd 	bgt.w	801a0ec <put_fat+0x1ce>
 8019f52:	2b01      	cmp	r3, #1
 8019f54:	d002      	beq.n	8019f5c <put_fat+0x3e>
 8019f56:	2b02      	cmp	r3, #2
 8019f58:	d06e      	beq.n	801a038 <put_fat+0x11a>
 8019f5a:	e0c7      	b.n	801a0ec <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	61bb      	str	r3, [r7, #24]
 8019f60:	69bb      	ldr	r3, [r7, #24]
 8019f62:	085b      	lsrs	r3, r3, #1
 8019f64:	69ba      	ldr	r2, [r7, #24]
 8019f66:	4413      	add	r3, r2
 8019f68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019f6e:	69bb      	ldr	r3, [r7, #24]
 8019f70:	0a5b      	lsrs	r3, r3, #9
 8019f72:	4413      	add	r3, r2
 8019f74:	4619      	mov	r1, r3
 8019f76:	68f8      	ldr	r0, [r7, #12]
 8019f78:	f7ff fe6e 	bl	8019c58 <move_window>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019f80:	7ffb      	ldrb	r3, [r7, #31]
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	f040 80ab 	bne.w	801a0de <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019f8e:	69bb      	ldr	r3, [r7, #24]
 8019f90:	1c59      	adds	r1, r3, #1
 8019f92:	61b9      	str	r1, [r7, #24]
 8019f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019f98:	4413      	add	r3, r2
 8019f9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	f003 0301 	and.w	r3, r3, #1
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d00d      	beq.n	8019fc2 <put_fat+0xa4>
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	781b      	ldrb	r3, [r3, #0]
 8019faa:	b25b      	sxtb	r3, r3
 8019fac:	f003 030f 	and.w	r3, r3, #15
 8019fb0:	b25a      	sxtb	r2, r3
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	011b      	lsls	r3, r3, #4
 8019fb8:	b25b      	sxtb	r3, r3
 8019fba:	4313      	orrs	r3, r2
 8019fbc:	b25b      	sxtb	r3, r3
 8019fbe:	b2db      	uxtb	r3, r3
 8019fc0:	e001      	b.n	8019fc6 <put_fat+0xa8>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	b2db      	uxtb	r3, r3
 8019fc6:	697a      	ldr	r2, [r7, #20]
 8019fc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	2201      	movs	r2, #1
 8019fce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019fd4:	69bb      	ldr	r3, [r7, #24]
 8019fd6:	0a5b      	lsrs	r3, r3, #9
 8019fd8:	4413      	add	r3, r2
 8019fda:	4619      	mov	r1, r3
 8019fdc:	68f8      	ldr	r0, [r7, #12]
 8019fde:	f7ff fe3b 	bl	8019c58 <move_window>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019fe6:	7ffb      	ldrb	r3, [r7, #31]
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d17a      	bne.n	801a0e2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019ff2:	69bb      	ldr	r3, [r7, #24]
 8019ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019ff8:	4413      	add	r3, r2
 8019ffa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	f003 0301 	and.w	r3, r3, #1
 801a002:	2b00      	cmp	r3, #0
 801a004:	d003      	beq.n	801a00e <put_fat+0xf0>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	091b      	lsrs	r3, r3, #4
 801a00a:	b2db      	uxtb	r3, r3
 801a00c:	e00e      	b.n	801a02c <put_fat+0x10e>
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	781b      	ldrb	r3, [r3, #0]
 801a012:	b25b      	sxtb	r3, r3
 801a014:	f023 030f 	bic.w	r3, r3, #15
 801a018:	b25a      	sxtb	r2, r3
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	0a1b      	lsrs	r3, r3, #8
 801a01e:	b25b      	sxtb	r3, r3
 801a020:	f003 030f 	and.w	r3, r3, #15
 801a024:	b25b      	sxtb	r3, r3
 801a026:	4313      	orrs	r3, r2
 801a028:	b25b      	sxtb	r3, r3
 801a02a:	b2db      	uxtb	r3, r3
 801a02c:	697a      	ldr	r2, [r7, #20]
 801a02e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	2201      	movs	r2, #1
 801a034:	70da      	strb	r2, [r3, #3]
			break;
 801a036:	e059      	b.n	801a0ec <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	0a1b      	lsrs	r3, r3, #8
 801a040:	4413      	add	r3, r2
 801a042:	4619      	mov	r1, r3
 801a044:	68f8      	ldr	r0, [r7, #12]
 801a046:	f7ff fe07 	bl	8019c58 <move_window>
 801a04a:	4603      	mov	r3, r0
 801a04c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a04e:	7ffb      	ldrb	r3, [r7, #31]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d148      	bne.n	801a0e6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a05a:	68bb      	ldr	r3, [r7, #8]
 801a05c:	005b      	lsls	r3, r3, #1
 801a05e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801a062:	4413      	add	r3, r2
 801a064:	687a      	ldr	r2, [r7, #4]
 801a066:	b292      	uxth	r2, r2
 801a068:	4611      	mov	r1, r2
 801a06a:	4618      	mov	r0, r3
 801a06c:	f7ff fb7f 	bl	801976e <st_word>
			fs->wflag = 1;
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	2201      	movs	r2, #1
 801a074:	70da      	strb	r2, [r3, #3]
			break;
 801a076:	e039      	b.n	801a0ec <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a07c:	68bb      	ldr	r3, [r7, #8]
 801a07e:	09db      	lsrs	r3, r3, #7
 801a080:	4413      	add	r3, r2
 801a082:	4619      	mov	r1, r3
 801a084:	68f8      	ldr	r0, [r7, #12]
 801a086:	f7ff fde7 	bl	8019c58 <move_window>
 801a08a:	4603      	mov	r3, r0
 801a08c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801a08e:	7ffb      	ldrb	r3, [r7, #31]
 801a090:	2b00      	cmp	r3, #0
 801a092:	d12a      	bne.n	801a0ea <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a0a0:	68bb      	ldr	r3, [r7, #8]
 801a0a2:	009b      	lsls	r3, r3, #2
 801a0a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801a0a8:	4413      	add	r3, r2
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f7ff fb3c 	bl	8019728 <ld_dword>
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801a0b6:	4323      	orrs	r3, r4
 801a0b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	009b      	lsls	r3, r3, #2
 801a0c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801a0c8:	4413      	add	r3, r2
 801a0ca:	6879      	ldr	r1, [r7, #4]
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	f7ff fb69 	bl	80197a4 <st_dword>
			fs->wflag = 1;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	2201      	movs	r2, #1
 801a0d6:	70da      	strb	r2, [r3, #3]
			break;
 801a0d8:	e008      	b.n	801a0ec <put_fat+0x1ce>
		}
	}
 801a0da:	bf00      	nop
 801a0dc:	e006      	b.n	801a0ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 801a0de:	bf00      	nop
 801a0e0:	e004      	b.n	801a0ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 801a0e2:	bf00      	nop
 801a0e4:	e002      	b.n	801a0ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 801a0e6:	bf00      	nop
 801a0e8:	e000      	b.n	801a0ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 801a0ea:	bf00      	nop
	return res;
 801a0ec:	7ffb      	ldrb	r3, [r7, #31]
}
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	3724      	adds	r7, #36	; 0x24
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd90      	pop	{r4, r7, pc}

0801a0f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801a0f6:	b580      	push	{r7, lr}
 801a0f8:	b088      	sub	sp, #32
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	60f8      	str	r0, [r7, #12]
 801a0fe:	60b9      	str	r1, [r7, #8]
 801a100:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801a102:	2300      	movs	r3, #0
 801a104:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	2b01      	cmp	r3, #1
 801a110:	d904      	bls.n	801a11c <remove_chain+0x26>
 801a112:	69bb      	ldr	r3, [r7, #24]
 801a114:	699b      	ldr	r3, [r3, #24]
 801a116:	68ba      	ldr	r2, [r7, #8]
 801a118:	429a      	cmp	r2, r3
 801a11a:	d301      	bcc.n	801a120 <remove_chain+0x2a>
 801a11c:	2302      	movs	r3, #2
 801a11e:	e04b      	b.n	801a1b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	2b00      	cmp	r3, #0
 801a124:	d00c      	beq.n	801a140 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801a126:	f04f 32ff 	mov.w	r2, #4294967295
 801a12a:	6879      	ldr	r1, [r7, #4]
 801a12c:	69b8      	ldr	r0, [r7, #24]
 801a12e:	f7ff fef6 	bl	8019f1e <put_fat>
 801a132:	4603      	mov	r3, r0
 801a134:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801a136:	7ffb      	ldrb	r3, [r7, #31]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d001      	beq.n	801a140 <remove_chain+0x4a>
 801a13c:	7ffb      	ldrb	r3, [r7, #31]
 801a13e:	e03b      	b.n	801a1b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801a140:	68b9      	ldr	r1, [r7, #8]
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	f7ff fe43 	bl	8019dce <get_fat>
 801a148:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801a14a:	697b      	ldr	r3, [r7, #20]
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d031      	beq.n	801a1b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	2b01      	cmp	r3, #1
 801a154:	d101      	bne.n	801a15a <remove_chain+0x64>
 801a156:	2302      	movs	r3, #2
 801a158:	e02e      	b.n	801a1b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a160:	d101      	bne.n	801a166 <remove_chain+0x70>
 801a162:	2301      	movs	r3, #1
 801a164:	e028      	b.n	801a1b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801a166:	2200      	movs	r2, #0
 801a168:	68b9      	ldr	r1, [r7, #8]
 801a16a:	69b8      	ldr	r0, [r7, #24]
 801a16c:	f7ff fed7 	bl	8019f1e <put_fat>
 801a170:	4603      	mov	r3, r0
 801a172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801a174:	7ffb      	ldrb	r3, [r7, #31]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d001      	beq.n	801a17e <remove_chain+0x88>
 801a17a:	7ffb      	ldrb	r3, [r7, #31]
 801a17c:	e01c      	b.n	801a1b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801a17e:	69bb      	ldr	r3, [r7, #24]
 801a180:	695a      	ldr	r2, [r3, #20]
 801a182:	69bb      	ldr	r3, [r7, #24]
 801a184:	699b      	ldr	r3, [r3, #24]
 801a186:	3b02      	subs	r3, #2
 801a188:	429a      	cmp	r2, r3
 801a18a:	d20b      	bcs.n	801a1a4 <remove_chain+0xae>
			fs->free_clst++;
 801a18c:	69bb      	ldr	r3, [r7, #24]
 801a18e:	695b      	ldr	r3, [r3, #20]
 801a190:	1c5a      	adds	r2, r3, #1
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801a196:	69bb      	ldr	r3, [r7, #24]
 801a198:	791b      	ldrb	r3, [r3, #4]
 801a19a:	f043 0301 	orr.w	r3, r3, #1
 801a19e:	b2da      	uxtb	r2, r3
 801a1a0:	69bb      	ldr	r3, [r7, #24]
 801a1a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801a1a8:	69bb      	ldr	r3, [r7, #24]
 801a1aa:	699b      	ldr	r3, [r3, #24]
 801a1ac:	68ba      	ldr	r2, [r7, #8]
 801a1ae:	429a      	cmp	r2, r3
 801a1b0:	d3c6      	bcc.n	801a140 <remove_chain+0x4a>
 801a1b2:	e000      	b.n	801a1b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801a1b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801a1b6:	2300      	movs	r3, #0
}
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3720      	adds	r7, #32
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}

0801a1c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b088      	sub	sp, #32
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
 801a1c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d10d      	bne.n	801a1f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801a1d6:	693b      	ldr	r3, [r7, #16]
 801a1d8:	691b      	ldr	r3, [r3, #16]
 801a1da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801a1dc:	69bb      	ldr	r3, [r7, #24]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d004      	beq.n	801a1ec <create_chain+0x2c>
 801a1e2:	693b      	ldr	r3, [r7, #16]
 801a1e4:	699b      	ldr	r3, [r3, #24]
 801a1e6:	69ba      	ldr	r2, [r7, #24]
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d31b      	bcc.n	801a224 <create_chain+0x64>
 801a1ec:	2301      	movs	r3, #1
 801a1ee:	61bb      	str	r3, [r7, #24]
 801a1f0:	e018      	b.n	801a224 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801a1f2:	6839      	ldr	r1, [r7, #0]
 801a1f4:	6878      	ldr	r0, [r7, #4]
 801a1f6:	f7ff fdea 	bl	8019dce <get_fat>
 801a1fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	2b01      	cmp	r3, #1
 801a200:	d801      	bhi.n	801a206 <create_chain+0x46>
 801a202:	2301      	movs	r3, #1
 801a204:	e070      	b.n	801a2e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a20c:	d101      	bne.n	801a212 <create_chain+0x52>
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	e06a      	b.n	801a2e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801a212:	693b      	ldr	r3, [r7, #16]
 801a214:	699b      	ldr	r3, [r3, #24]
 801a216:	68fa      	ldr	r2, [r7, #12]
 801a218:	429a      	cmp	r2, r3
 801a21a:	d201      	bcs.n	801a220 <create_chain+0x60>
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	e063      	b.n	801a2e8 <create_chain+0x128>
		scl = clst;
 801a220:	683b      	ldr	r3, [r7, #0]
 801a222:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801a224:	69bb      	ldr	r3, [r7, #24]
 801a226:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801a228:	69fb      	ldr	r3, [r7, #28]
 801a22a:	3301      	adds	r3, #1
 801a22c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801a22e:	693b      	ldr	r3, [r7, #16]
 801a230:	699b      	ldr	r3, [r3, #24]
 801a232:	69fa      	ldr	r2, [r7, #28]
 801a234:	429a      	cmp	r2, r3
 801a236:	d307      	bcc.n	801a248 <create_chain+0x88>
				ncl = 2;
 801a238:	2302      	movs	r3, #2
 801a23a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801a23c:	69fa      	ldr	r2, [r7, #28]
 801a23e:	69bb      	ldr	r3, [r7, #24]
 801a240:	429a      	cmp	r2, r3
 801a242:	d901      	bls.n	801a248 <create_chain+0x88>
 801a244:	2300      	movs	r3, #0
 801a246:	e04f      	b.n	801a2e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801a248:	69f9      	ldr	r1, [r7, #28]
 801a24a:	6878      	ldr	r0, [r7, #4]
 801a24c:	f7ff fdbf 	bl	8019dce <get_fat>
 801a250:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801a252:	68fb      	ldr	r3, [r7, #12]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d00e      	beq.n	801a276 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	2b01      	cmp	r3, #1
 801a25c:	d003      	beq.n	801a266 <create_chain+0xa6>
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a264:	d101      	bne.n	801a26a <create_chain+0xaa>
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	e03e      	b.n	801a2e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801a26a:	69fa      	ldr	r2, [r7, #28]
 801a26c:	69bb      	ldr	r3, [r7, #24]
 801a26e:	429a      	cmp	r2, r3
 801a270:	d1da      	bne.n	801a228 <create_chain+0x68>
 801a272:	2300      	movs	r3, #0
 801a274:	e038      	b.n	801a2e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801a276:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801a278:	f04f 32ff 	mov.w	r2, #4294967295
 801a27c:	69f9      	ldr	r1, [r7, #28]
 801a27e:	6938      	ldr	r0, [r7, #16]
 801a280:	f7ff fe4d 	bl	8019f1e <put_fat>
 801a284:	4603      	mov	r3, r0
 801a286:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801a288:	7dfb      	ldrb	r3, [r7, #23]
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	d109      	bne.n	801a2a2 <create_chain+0xe2>
 801a28e:	683b      	ldr	r3, [r7, #0]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d006      	beq.n	801a2a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801a294:	69fa      	ldr	r2, [r7, #28]
 801a296:	6839      	ldr	r1, [r7, #0]
 801a298:	6938      	ldr	r0, [r7, #16]
 801a29a:	f7ff fe40 	bl	8019f1e <put_fat>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801a2a2:	7dfb      	ldrb	r3, [r7, #23]
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d116      	bne.n	801a2d6 <create_chain+0x116>
		fs->last_clst = ncl;
 801a2a8:	693b      	ldr	r3, [r7, #16]
 801a2aa:	69fa      	ldr	r2, [r7, #28]
 801a2ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801a2ae:	693b      	ldr	r3, [r7, #16]
 801a2b0:	695a      	ldr	r2, [r3, #20]
 801a2b2:	693b      	ldr	r3, [r7, #16]
 801a2b4:	699b      	ldr	r3, [r3, #24]
 801a2b6:	3b02      	subs	r3, #2
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d804      	bhi.n	801a2c6 <create_chain+0x106>
 801a2bc:	693b      	ldr	r3, [r7, #16]
 801a2be:	695b      	ldr	r3, [r3, #20]
 801a2c0:	1e5a      	subs	r2, r3, #1
 801a2c2:	693b      	ldr	r3, [r7, #16]
 801a2c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801a2c6:	693b      	ldr	r3, [r7, #16]
 801a2c8:	791b      	ldrb	r3, [r3, #4]
 801a2ca:	f043 0301 	orr.w	r3, r3, #1
 801a2ce:	b2da      	uxtb	r2, r3
 801a2d0:	693b      	ldr	r3, [r7, #16]
 801a2d2:	711a      	strb	r2, [r3, #4]
 801a2d4:	e007      	b.n	801a2e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801a2d6:	7dfb      	ldrb	r3, [r7, #23]
 801a2d8:	2b01      	cmp	r3, #1
 801a2da:	d102      	bne.n	801a2e2 <create_chain+0x122>
 801a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e0:	e000      	b.n	801a2e4 <create_chain+0x124>
 801a2e2:	2301      	movs	r3, #1
 801a2e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801a2e6:	69fb      	ldr	r3, [r7, #28]
}
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	3720      	adds	r7, #32
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	bd80      	pop	{r7, pc}

0801a2f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801a2f0:	b480      	push	{r7}
 801a2f2:	b087      	sub	sp, #28
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a304:	3304      	adds	r3, #4
 801a306:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801a308:	683b      	ldr	r3, [r7, #0]
 801a30a:	0a5b      	lsrs	r3, r3, #9
 801a30c:	68fa      	ldr	r2, [r7, #12]
 801a30e:	8952      	ldrh	r2, [r2, #10]
 801a310:	fbb3 f3f2 	udiv	r3, r3, r2
 801a314:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a316:	693b      	ldr	r3, [r7, #16]
 801a318:	1d1a      	adds	r2, r3, #4
 801a31a:	613a      	str	r2, [r7, #16]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a320:	68bb      	ldr	r3, [r7, #8]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d101      	bne.n	801a32a <clmt_clust+0x3a>
 801a326:	2300      	movs	r3, #0
 801a328:	e010      	b.n	801a34c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801a32a:	697a      	ldr	r2, [r7, #20]
 801a32c:	68bb      	ldr	r3, [r7, #8]
 801a32e:	429a      	cmp	r2, r3
 801a330:	d307      	bcc.n	801a342 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801a332:	697a      	ldr	r2, [r7, #20]
 801a334:	68bb      	ldr	r3, [r7, #8]
 801a336:	1ad3      	subs	r3, r2, r3
 801a338:	617b      	str	r3, [r7, #20]
 801a33a:	693b      	ldr	r3, [r7, #16]
 801a33c:	3304      	adds	r3, #4
 801a33e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a340:	e7e9      	b.n	801a316 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801a342:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	681a      	ldr	r2, [r3, #0]
 801a348:	697b      	ldr	r3, [r7, #20]
 801a34a:	4413      	add	r3, r2
}
 801a34c:	4618      	mov	r0, r3
 801a34e:	371c      	adds	r7, #28
 801a350:	46bd      	mov	sp, r7
 801a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a356:	4770      	bx	lr

0801a358 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b086      	sub	sp, #24
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801a368:	683b      	ldr	r3, [r7, #0]
 801a36a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a36e:	d204      	bcs.n	801a37a <dir_sdi+0x22>
 801a370:	683b      	ldr	r3, [r7, #0]
 801a372:	f003 031f 	and.w	r3, r3, #31
 801a376:	2b00      	cmp	r3, #0
 801a378:	d001      	beq.n	801a37e <dir_sdi+0x26>
		return FR_INT_ERR;
 801a37a:	2302      	movs	r3, #2
 801a37c:	e063      	b.n	801a446 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	683a      	ldr	r2, [r7, #0]
 801a382:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	689b      	ldr	r3, [r3, #8]
 801a388:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d106      	bne.n	801a39e <dir_sdi+0x46>
 801a390:	693b      	ldr	r3, [r7, #16]
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	2b02      	cmp	r3, #2
 801a396:	d902      	bls.n	801a39e <dir_sdi+0x46>
		clst = fs->dirbase;
 801a398:	693b      	ldr	r3, [r7, #16]
 801a39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a39c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801a39e:	697b      	ldr	r3, [r7, #20]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d10c      	bne.n	801a3be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801a3a4:	683b      	ldr	r3, [r7, #0]
 801a3a6:	095b      	lsrs	r3, r3, #5
 801a3a8:	693a      	ldr	r2, [r7, #16]
 801a3aa:	8912      	ldrh	r2, [r2, #8]
 801a3ac:	4293      	cmp	r3, r2
 801a3ae:	d301      	bcc.n	801a3b4 <dir_sdi+0x5c>
 801a3b0:	2302      	movs	r3, #2
 801a3b2:	e048      	b.n	801a446 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801a3b4:	693b      	ldr	r3, [r7, #16]
 801a3b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	61da      	str	r2, [r3, #28]
 801a3bc:	e029      	b.n	801a412 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801a3be:	693b      	ldr	r3, [r7, #16]
 801a3c0:	895b      	ldrh	r3, [r3, #10]
 801a3c2:	025b      	lsls	r3, r3, #9
 801a3c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a3c6:	e019      	b.n	801a3fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	6979      	ldr	r1, [r7, #20]
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f7ff fcfe 	bl	8019dce <get_fat>
 801a3d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a3d4:	697b      	ldr	r3, [r7, #20]
 801a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a3da:	d101      	bne.n	801a3e0 <dir_sdi+0x88>
 801a3dc:	2301      	movs	r3, #1
 801a3de:	e032      	b.n	801a446 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	2b01      	cmp	r3, #1
 801a3e4:	d904      	bls.n	801a3f0 <dir_sdi+0x98>
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	699b      	ldr	r3, [r3, #24]
 801a3ea:	697a      	ldr	r2, [r7, #20]
 801a3ec:	429a      	cmp	r2, r3
 801a3ee:	d301      	bcc.n	801a3f4 <dir_sdi+0x9c>
 801a3f0:	2302      	movs	r3, #2
 801a3f2:	e028      	b.n	801a446 <dir_sdi+0xee>
			ofs -= csz;
 801a3f4:	683a      	ldr	r2, [r7, #0]
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	1ad3      	subs	r3, r2, r3
 801a3fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a3fc:	683a      	ldr	r2, [r7, #0]
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	429a      	cmp	r2, r3
 801a402:	d2e1      	bcs.n	801a3c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801a404:	6979      	ldr	r1, [r7, #20]
 801a406:	6938      	ldr	r0, [r7, #16]
 801a408:	f7ff fcc2 	bl	8019d90 <clust2sect>
 801a40c:	4602      	mov	r2, r0
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	697a      	ldr	r2, [r7, #20]
 801a416:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	69db      	ldr	r3, [r3, #28]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d101      	bne.n	801a424 <dir_sdi+0xcc>
 801a420:	2302      	movs	r3, #2
 801a422:	e010      	b.n	801a446 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	69da      	ldr	r2, [r3, #28]
 801a428:	683b      	ldr	r3, [r7, #0]
 801a42a:	0a5b      	lsrs	r3, r3, #9
 801a42c:	441a      	add	r2, r3
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a43e:	441a      	add	r2, r3
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a444:	2300      	movs	r3, #0
}
 801a446:	4618      	mov	r0, r3
 801a448:	3718      	adds	r7, #24
 801a44a:	46bd      	mov	sp, r7
 801a44c:	bd80      	pop	{r7, pc}

0801a44e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801a44e:	b580      	push	{r7, lr}
 801a450:	b086      	sub	sp, #24
 801a452:	af00      	add	r7, sp, #0
 801a454:	6078      	str	r0, [r7, #4]
 801a456:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	695b      	ldr	r3, [r3, #20]
 801a462:	3320      	adds	r3, #32
 801a464:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	69db      	ldr	r3, [r3, #28]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d003      	beq.n	801a476 <dir_next+0x28>
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a474:	d301      	bcc.n	801a47a <dir_next+0x2c>
 801a476:	2304      	movs	r3, #4
 801a478:	e0aa      	b.n	801a5d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a47a:	68bb      	ldr	r3, [r7, #8]
 801a47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a480:	2b00      	cmp	r3, #0
 801a482:	f040 8098 	bne.w	801a5b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	69db      	ldr	r3, [r3, #28]
 801a48a:	1c5a      	adds	r2, r3, #1
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	699b      	ldr	r3, [r3, #24]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d10b      	bne.n	801a4b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	095b      	lsrs	r3, r3, #5
 801a49c:	68fa      	ldr	r2, [r7, #12]
 801a49e:	8912      	ldrh	r2, [r2, #8]
 801a4a0:	4293      	cmp	r3, r2
 801a4a2:	f0c0 8088 	bcc.w	801a5b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	61da      	str	r2, [r3, #28]
 801a4ac:	2304      	movs	r3, #4
 801a4ae:	e08f      	b.n	801a5d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	0a5b      	lsrs	r3, r3, #9
 801a4b4:	68fa      	ldr	r2, [r7, #12]
 801a4b6:	8952      	ldrh	r2, [r2, #10]
 801a4b8:	3a01      	subs	r2, #1
 801a4ba:	4013      	ands	r3, r2
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d17a      	bne.n	801a5b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a4c0:	687a      	ldr	r2, [r7, #4]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	699b      	ldr	r3, [r3, #24]
 801a4c6:	4619      	mov	r1, r3
 801a4c8:	4610      	mov	r0, r2
 801a4ca:	f7ff fc80 	bl	8019dce <get_fat>
 801a4ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a4d0:	697b      	ldr	r3, [r7, #20]
 801a4d2:	2b01      	cmp	r3, #1
 801a4d4:	d801      	bhi.n	801a4da <dir_next+0x8c>
 801a4d6:	2302      	movs	r3, #2
 801a4d8:	e07a      	b.n	801a5d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a4da:	697b      	ldr	r3, [r7, #20]
 801a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4e0:	d101      	bne.n	801a4e6 <dir_next+0x98>
 801a4e2:	2301      	movs	r3, #1
 801a4e4:	e074      	b.n	801a5d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	699b      	ldr	r3, [r3, #24]
 801a4ea:	697a      	ldr	r2, [r7, #20]
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d358      	bcc.n	801a5a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a4f0:	683b      	ldr	r3, [r7, #0]
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d104      	bne.n	801a500 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	61da      	str	r2, [r3, #28]
 801a4fc:	2304      	movs	r3, #4
 801a4fe:	e067      	b.n	801a5d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a500:	687a      	ldr	r2, [r7, #4]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	699b      	ldr	r3, [r3, #24]
 801a506:	4619      	mov	r1, r3
 801a508:	4610      	mov	r0, r2
 801a50a:	f7ff fe59 	bl	801a1c0 <create_chain>
 801a50e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a510:	697b      	ldr	r3, [r7, #20]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d101      	bne.n	801a51a <dir_next+0xcc>
 801a516:	2307      	movs	r3, #7
 801a518:	e05a      	b.n	801a5d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a51a:	697b      	ldr	r3, [r7, #20]
 801a51c:	2b01      	cmp	r3, #1
 801a51e:	d101      	bne.n	801a524 <dir_next+0xd6>
 801a520:	2302      	movs	r3, #2
 801a522:	e055      	b.n	801a5d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a524:	697b      	ldr	r3, [r7, #20]
 801a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a52a:	d101      	bne.n	801a530 <dir_next+0xe2>
 801a52c:	2301      	movs	r3, #1
 801a52e:	e04f      	b.n	801a5d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a530:	68f8      	ldr	r0, [r7, #12]
 801a532:	f7ff fb4d 	bl	8019bd0 <sync_window>
 801a536:	4603      	mov	r3, r0
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d001      	beq.n	801a540 <dir_next+0xf2>
 801a53c:	2301      	movs	r3, #1
 801a53e:	e047      	b.n	801a5d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	3334      	adds	r3, #52	; 0x34
 801a544:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a548:	2100      	movs	r1, #0
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7ff f977 	bl	801983e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a550:	2300      	movs	r3, #0
 801a552:	613b      	str	r3, [r7, #16]
 801a554:	6979      	ldr	r1, [r7, #20]
 801a556:	68f8      	ldr	r0, [r7, #12]
 801a558:	f7ff fc1a 	bl	8019d90 <clust2sect>
 801a55c:	4602      	mov	r2, r0
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	631a      	str	r2, [r3, #48]	; 0x30
 801a562:	e012      	b.n	801a58a <dir_next+0x13c>
						fs->wflag = 1;
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	2201      	movs	r2, #1
 801a568:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a56a:	68f8      	ldr	r0, [r7, #12]
 801a56c:	f7ff fb30 	bl	8019bd0 <sync_window>
 801a570:	4603      	mov	r3, r0
 801a572:	2b00      	cmp	r3, #0
 801a574:	d001      	beq.n	801a57a <dir_next+0x12c>
 801a576:	2301      	movs	r3, #1
 801a578:	e02a      	b.n	801a5d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a57a:	693b      	ldr	r3, [r7, #16]
 801a57c:	3301      	adds	r3, #1
 801a57e:	613b      	str	r3, [r7, #16]
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a584:	1c5a      	adds	r2, r3, #1
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	631a      	str	r2, [r3, #48]	; 0x30
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	895b      	ldrh	r3, [r3, #10]
 801a58e:	461a      	mov	r2, r3
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	4293      	cmp	r3, r2
 801a594:	d3e6      	bcc.n	801a564 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	1ad2      	subs	r2, r2, r3
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	697a      	ldr	r2, [r7, #20]
 801a5a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a5a8:	6979      	ldr	r1, [r7, #20]
 801a5aa:	68f8      	ldr	r0, [r7, #12]
 801a5ac:	f7ff fbf0 	bl	8019d90 <clust2sect>
 801a5b0:	4602      	mov	r2, r0
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	68ba      	ldr	r2, [r7, #8]
 801a5ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a5c2:	68bb      	ldr	r3, [r7, #8]
 801a5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a5c8:	441a      	add	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a5ce:	2300      	movs	r3, #0
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3718      	adds	r7, #24
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b086      	sub	sp, #24
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
 801a5e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a5e8:	2100      	movs	r1, #0
 801a5ea:	6878      	ldr	r0, [r7, #4]
 801a5ec:	f7ff feb4 	bl	801a358 <dir_sdi>
 801a5f0:	4603      	mov	r3, r0
 801a5f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a5f4:	7dfb      	ldrb	r3, [r7, #23]
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d12b      	bne.n	801a652 <dir_alloc+0x7a>
		n = 0;
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	69db      	ldr	r3, [r3, #28]
 801a602:	4619      	mov	r1, r3
 801a604:	68f8      	ldr	r0, [r7, #12]
 801a606:	f7ff fb27 	bl	8019c58 <move_window>
 801a60a:	4603      	mov	r3, r0
 801a60c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a60e:	7dfb      	ldrb	r3, [r7, #23]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d11d      	bne.n	801a650 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6a1b      	ldr	r3, [r3, #32]
 801a618:	781b      	ldrb	r3, [r3, #0]
 801a61a:	2be5      	cmp	r3, #229	; 0xe5
 801a61c:	d004      	beq.n	801a628 <dir_alloc+0x50>
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	6a1b      	ldr	r3, [r3, #32]
 801a622:	781b      	ldrb	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d107      	bne.n	801a638 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a628:	693b      	ldr	r3, [r7, #16]
 801a62a:	3301      	adds	r3, #1
 801a62c:	613b      	str	r3, [r7, #16]
 801a62e:	693a      	ldr	r2, [r7, #16]
 801a630:	683b      	ldr	r3, [r7, #0]
 801a632:	429a      	cmp	r2, r3
 801a634:	d102      	bne.n	801a63c <dir_alloc+0x64>
 801a636:	e00c      	b.n	801a652 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a638:	2300      	movs	r3, #0
 801a63a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a63c:	2101      	movs	r1, #1
 801a63e:	6878      	ldr	r0, [r7, #4]
 801a640:	f7ff ff05 	bl	801a44e <dir_next>
 801a644:	4603      	mov	r3, r0
 801a646:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a648:	7dfb      	ldrb	r3, [r7, #23]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d0d7      	beq.n	801a5fe <dir_alloc+0x26>
 801a64e:	e000      	b.n	801a652 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a650:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a652:	7dfb      	ldrb	r3, [r7, #23]
 801a654:	2b04      	cmp	r3, #4
 801a656:	d101      	bne.n	801a65c <dir_alloc+0x84>
 801a658:	2307      	movs	r3, #7
 801a65a:	75fb      	strb	r3, [r7, #23]
	return res;
 801a65c:	7dfb      	ldrb	r3, [r7, #23]
}
 801a65e:	4618      	mov	r0, r3
 801a660:	3718      	adds	r7, #24
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}

0801a666 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a666:	b580      	push	{r7, lr}
 801a668:	b084      	sub	sp, #16
 801a66a:	af00      	add	r7, sp, #0
 801a66c:	6078      	str	r0, [r7, #4]
 801a66e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	331a      	adds	r3, #26
 801a674:	4618      	mov	r0, r3
 801a676:	f7ff f83f 	bl	80196f8 <ld_word>
 801a67a:	4603      	mov	r3, r0
 801a67c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	2b03      	cmp	r3, #3
 801a684:	d109      	bne.n	801a69a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a686:	683b      	ldr	r3, [r7, #0]
 801a688:	3314      	adds	r3, #20
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7ff f834 	bl	80196f8 <ld_word>
 801a690:	4603      	mov	r3, r0
 801a692:	041b      	lsls	r3, r3, #16
 801a694:	68fa      	ldr	r2, [r7, #12]
 801a696:	4313      	orrs	r3, r2
 801a698:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a69a:	68fb      	ldr	r3, [r7, #12]
}
 801a69c:	4618      	mov	r0, r3
 801a69e:	3710      	adds	r7, #16
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}

0801a6a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b084      	sub	sp, #16
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	331a      	adds	r3, #26
 801a6b4:	687a      	ldr	r2, [r7, #4]
 801a6b6:	b292      	uxth	r2, r2
 801a6b8:	4611      	mov	r1, r2
 801a6ba:	4618      	mov	r0, r3
 801a6bc:	f7ff f857 	bl	801976e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	2b03      	cmp	r3, #3
 801a6c6:	d109      	bne.n	801a6dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	f103 0214 	add.w	r2, r3, #20
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	0c1b      	lsrs	r3, r3, #16
 801a6d2:	b29b      	uxth	r3, r3
 801a6d4:	4619      	mov	r1, r3
 801a6d6:	4610      	mov	r0, r2
 801a6d8:	f7ff f849 	bl	801976e <st_word>
	}
}
 801a6dc:	bf00      	nop
 801a6de:	3710      	adds	r7, #16
 801a6e0:	46bd      	mov	sp, r7
 801a6e2:	bd80      	pop	{r7, pc}

0801a6e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a6e4:	b590      	push	{r4, r7, lr}
 801a6e6:	b087      	sub	sp, #28
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
 801a6ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	331a      	adds	r3, #26
 801a6f2:	4618      	mov	r0, r3
 801a6f4:	f7ff f800 	bl	80196f8 <ld_word>
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d001      	beq.n	801a702 <cmp_lfn+0x1e>
 801a6fe:	2300      	movs	r3, #0
 801a700:	e059      	b.n	801a7b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	781b      	ldrb	r3, [r3, #0]
 801a706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a70a:	1e5a      	subs	r2, r3, #1
 801a70c:	4613      	mov	r3, r2
 801a70e:	005b      	lsls	r3, r3, #1
 801a710:	4413      	add	r3, r2
 801a712:	009b      	lsls	r3, r3, #2
 801a714:	4413      	add	r3, r2
 801a716:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a718:	2301      	movs	r3, #1
 801a71a:	81fb      	strh	r3, [r7, #14]
 801a71c:	2300      	movs	r3, #0
 801a71e:	613b      	str	r3, [r7, #16]
 801a720:	e033      	b.n	801a78a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a722:	4a27      	ldr	r2, [pc, #156]	; (801a7c0 <cmp_lfn+0xdc>)
 801a724:	693b      	ldr	r3, [r7, #16]
 801a726:	4413      	add	r3, r2
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	461a      	mov	r2, r3
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	4413      	add	r3, r2
 801a730:	4618      	mov	r0, r3
 801a732:	f7fe ffe1 	bl	80196f8 <ld_word>
 801a736:	4603      	mov	r3, r0
 801a738:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a73a:	89fb      	ldrh	r3, [r7, #14]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d01a      	beq.n	801a776 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	2bfe      	cmp	r3, #254	; 0xfe
 801a744:	d812      	bhi.n	801a76c <cmp_lfn+0x88>
 801a746:	89bb      	ldrh	r3, [r7, #12]
 801a748:	4618      	mov	r0, r3
 801a74a:	f002 fea1 	bl	801d490 <ff_wtoupper>
 801a74e:	4603      	mov	r3, r0
 801a750:	461c      	mov	r4, r3
 801a752:	697b      	ldr	r3, [r7, #20]
 801a754:	1c5a      	adds	r2, r3, #1
 801a756:	617a      	str	r2, [r7, #20]
 801a758:	005b      	lsls	r3, r3, #1
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	4413      	add	r3, r2
 801a75e:	881b      	ldrh	r3, [r3, #0]
 801a760:	4618      	mov	r0, r3
 801a762:	f002 fe95 	bl	801d490 <ff_wtoupper>
 801a766:	4603      	mov	r3, r0
 801a768:	429c      	cmp	r4, r3
 801a76a:	d001      	beq.n	801a770 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a76c:	2300      	movs	r3, #0
 801a76e:	e022      	b.n	801a7b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 801a770:	89bb      	ldrh	r3, [r7, #12]
 801a772:	81fb      	strh	r3, [r7, #14]
 801a774:	e006      	b.n	801a784 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a776:	89bb      	ldrh	r3, [r7, #12]
 801a778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a77c:	4293      	cmp	r3, r2
 801a77e:	d001      	beq.n	801a784 <cmp_lfn+0xa0>
 801a780:	2300      	movs	r3, #0
 801a782:	e018      	b.n	801a7b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a784:	693b      	ldr	r3, [r7, #16]
 801a786:	3301      	adds	r3, #1
 801a788:	613b      	str	r3, [r7, #16]
 801a78a:	693b      	ldr	r3, [r7, #16]
 801a78c:	2b0c      	cmp	r3, #12
 801a78e:	d9c8      	bls.n	801a722 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a790:	683b      	ldr	r3, [r7, #0]
 801a792:	781b      	ldrb	r3, [r3, #0]
 801a794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d00b      	beq.n	801a7b4 <cmp_lfn+0xd0>
 801a79c:	89fb      	ldrh	r3, [r7, #14]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d008      	beq.n	801a7b4 <cmp_lfn+0xd0>
 801a7a2:	697b      	ldr	r3, [r7, #20]
 801a7a4:	005b      	lsls	r3, r3, #1
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	881b      	ldrh	r3, [r3, #0]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d001      	beq.n	801a7b4 <cmp_lfn+0xd0>
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	e000      	b.n	801a7b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a7b4:	2301      	movs	r3, #1
}
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	371c      	adds	r7, #28
 801a7ba:	46bd      	mov	sp, r7
 801a7bc:	bd90      	pop	{r4, r7, pc}
 801a7be:	bf00      	nop
 801a7c0:	080376e4 	.word	0x080376e4

0801a7c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b086      	sub	sp, #24
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	6078      	str	r0, [r7, #4]
 801a7cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801a7ce:	683b      	ldr	r3, [r7, #0]
 801a7d0:	331a      	adds	r3, #26
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f7fe ff90 	bl	80196f8 <ld_word>
 801a7d8:	4603      	mov	r3, r0
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d001      	beq.n	801a7e2 <pick_lfn+0x1e>
 801a7de:	2300      	movs	r3, #0
 801a7e0:	e04d      	b.n	801a87e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a7e2:	683b      	ldr	r3, [r7, #0]
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a7ea:	1e5a      	subs	r2, r3, #1
 801a7ec:	4613      	mov	r3, r2
 801a7ee:	005b      	lsls	r3, r3, #1
 801a7f0:	4413      	add	r3, r2
 801a7f2:	009b      	lsls	r3, r3, #2
 801a7f4:	4413      	add	r3, r2
 801a7f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a7f8:	2301      	movs	r3, #1
 801a7fa:	81fb      	strh	r3, [r7, #14]
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	613b      	str	r3, [r7, #16]
 801a800:	e028      	b.n	801a854 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a802:	4a21      	ldr	r2, [pc, #132]	; (801a888 <pick_lfn+0xc4>)
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	4413      	add	r3, r2
 801a808:	781b      	ldrb	r3, [r3, #0]
 801a80a:	461a      	mov	r2, r3
 801a80c:	683b      	ldr	r3, [r7, #0]
 801a80e:	4413      	add	r3, r2
 801a810:	4618      	mov	r0, r3
 801a812:	f7fe ff71 	bl	80196f8 <ld_word>
 801a816:	4603      	mov	r3, r0
 801a818:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a81a:	89fb      	ldrh	r3, [r7, #14]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d00f      	beq.n	801a840 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a820:	697b      	ldr	r3, [r7, #20]
 801a822:	2bfe      	cmp	r3, #254	; 0xfe
 801a824:	d901      	bls.n	801a82a <pick_lfn+0x66>
 801a826:	2300      	movs	r3, #0
 801a828:	e029      	b.n	801a87e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a82a:	89bb      	ldrh	r3, [r7, #12]
 801a82c:	81fb      	strh	r3, [r7, #14]
 801a82e:	697b      	ldr	r3, [r7, #20]
 801a830:	1c5a      	adds	r2, r3, #1
 801a832:	617a      	str	r2, [r7, #20]
 801a834:	005b      	lsls	r3, r3, #1
 801a836:	687a      	ldr	r2, [r7, #4]
 801a838:	4413      	add	r3, r2
 801a83a:	89fa      	ldrh	r2, [r7, #14]
 801a83c:	801a      	strh	r2, [r3, #0]
 801a83e:	e006      	b.n	801a84e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a840:	89bb      	ldrh	r3, [r7, #12]
 801a842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a846:	4293      	cmp	r3, r2
 801a848:	d001      	beq.n	801a84e <pick_lfn+0x8a>
 801a84a:	2300      	movs	r3, #0
 801a84c:	e017      	b.n	801a87e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a84e:	693b      	ldr	r3, [r7, #16]
 801a850:	3301      	adds	r3, #1
 801a852:	613b      	str	r3, [r7, #16]
 801a854:	693b      	ldr	r3, [r7, #16]
 801a856:	2b0c      	cmp	r3, #12
 801a858:	d9d3      	bls.n	801a802 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	781b      	ldrb	r3, [r3, #0]
 801a85e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a862:	2b00      	cmp	r3, #0
 801a864:	d00a      	beq.n	801a87c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801a866:	697b      	ldr	r3, [r7, #20]
 801a868:	2bfe      	cmp	r3, #254	; 0xfe
 801a86a:	d901      	bls.n	801a870 <pick_lfn+0xac>
 801a86c:	2300      	movs	r3, #0
 801a86e:	e006      	b.n	801a87e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801a870:	697b      	ldr	r3, [r7, #20]
 801a872:	005b      	lsls	r3, r3, #1
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	4413      	add	r3, r2
 801a878:	2200      	movs	r2, #0
 801a87a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801a87c:	2301      	movs	r3, #1
}
 801a87e:	4618      	mov	r0, r3
 801a880:	3718      	adds	r7, #24
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}
 801a886:	bf00      	nop
 801a888:	080376e4 	.word	0x080376e4

0801a88c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b088      	sub	sp, #32
 801a890:	af00      	add	r7, sp, #0
 801a892:	60f8      	str	r0, [r7, #12]
 801a894:	60b9      	str	r1, [r7, #8]
 801a896:	4611      	mov	r1, r2
 801a898:	461a      	mov	r2, r3
 801a89a:	460b      	mov	r3, r1
 801a89c:	71fb      	strb	r3, [r7, #7]
 801a89e:	4613      	mov	r3, r2
 801a8a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	330d      	adds	r3, #13
 801a8a6:	79ba      	ldrb	r2, [r7, #6]
 801a8a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a8aa:	68bb      	ldr	r3, [r7, #8]
 801a8ac:	330b      	adds	r3, #11
 801a8ae:	220f      	movs	r2, #15
 801a8b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	330c      	adds	r3, #12
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a8ba:	68bb      	ldr	r3, [r7, #8]
 801a8bc:	331a      	adds	r3, #26
 801a8be:	2100      	movs	r1, #0
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7fe ff54 	bl	801976e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a8c6:	79fb      	ldrb	r3, [r7, #7]
 801a8c8:	1e5a      	subs	r2, r3, #1
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	005b      	lsls	r3, r3, #1
 801a8ce:	4413      	add	r3, r2
 801a8d0:	009b      	lsls	r3, r3, #2
 801a8d2:	4413      	add	r3, r2
 801a8d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a8d6:	2300      	movs	r3, #0
 801a8d8:	82fb      	strh	r3, [r7, #22]
 801a8da:	2300      	movs	r3, #0
 801a8dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a8de:	8afb      	ldrh	r3, [r7, #22]
 801a8e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8e4:	4293      	cmp	r3, r2
 801a8e6:	d007      	beq.n	801a8f8 <put_lfn+0x6c>
 801a8e8:	69fb      	ldr	r3, [r7, #28]
 801a8ea:	1c5a      	adds	r2, r3, #1
 801a8ec:	61fa      	str	r2, [r7, #28]
 801a8ee:	005b      	lsls	r3, r3, #1
 801a8f0:	68fa      	ldr	r2, [r7, #12]
 801a8f2:	4413      	add	r3, r2
 801a8f4:	881b      	ldrh	r3, [r3, #0]
 801a8f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a8f8:	4a17      	ldr	r2, [pc, #92]	; (801a958 <put_lfn+0xcc>)
 801a8fa:	69bb      	ldr	r3, [r7, #24]
 801a8fc:	4413      	add	r3, r2
 801a8fe:	781b      	ldrb	r3, [r3, #0]
 801a900:	461a      	mov	r2, r3
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	4413      	add	r3, r2
 801a906:	8afa      	ldrh	r2, [r7, #22]
 801a908:	4611      	mov	r1, r2
 801a90a:	4618      	mov	r0, r3
 801a90c:	f7fe ff2f 	bl	801976e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a910:	8afb      	ldrh	r3, [r7, #22]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d102      	bne.n	801a91c <put_lfn+0x90>
 801a916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a91a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a91c:	69bb      	ldr	r3, [r7, #24]
 801a91e:	3301      	adds	r3, #1
 801a920:	61bb      	str	r3, [r7, #24]
 801a922:	69bb      	ldr	r3, [r7, #24]
 801a924:	2b0c      	cmp	r3, #12
 801a926:	d9da      	bls.n	801a8de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a928:	8afb      	ldrh	r3, [r7, #22]
 801a92a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a92e:	4293      	cmp	r3, r2
 801a930:	d006      	beq.n	801a940 <put_lfn+0xb4>
 801a932:	69fb      	ldr	r3, [r7, #28]
 801a934:	005b      	lsls	r3, r3, #1
 801a936:	68fa      	ldr	r2, [r7, #12]
 801a938:	4413      	add	r3, r2
 801a93a:	881b      	ldrh	r3, [r3, #0]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d103      	bne.n	801a948 <put_lfn+0xbc>
 801a940:	79fb      	ldrb	r3, [r7, #7]
 801a942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a946:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a948:	68bb      	ldr	r3, [r7, #8]
 801a94a:	79fa      	ldrb	r2, [r7, #7]
 801a94c:	701a      	strb	r2, [r3, #0]
}
 801a94e:	bf00      	nop
 801a950:	3720      	adds	r7, #32
 801a952:	46bd      	mov	sp, r7
 801a954:	bd80      	pop	{r7, pc}
 801a956:	bf00      	nop
 801a958:	080376e4 	.word	0x080376e4

0801a95c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b08c      	sub	sp, #48	; 0x30
 801a960:	af00      	add	r7, sp, #0
 801a962:	60f8      	str	r0, [r7, #12]
 801a964:	60b9      	str	r1, [r7, #8]
 801a966:	607a      	str	r2, [r7, #4]
 801a968:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a96a:	220b      	movs	r2, #11
 801a96c:	68b9      	ldr	r1, [r7, #8]
 801a96e:	68f8      	ldr	r0, [r7, #12]
 801a970:	f7fe ff44 	bl	80197fc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a974:	683b      	ldr	r3, [r7, #0]
 801a976:	2b05      	cmp	r3, #5
 801a978:	d92b      	bls.n	801a9d2 <gen_numname+0x76>
		sr = seq;
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a97e:	e022      	b.n	801a9c6 <gen_numname+0x6a>
			wc = *lfn++;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	1c9a      	adds	r2, r3, #2
 801a984:	607a      	str	r2, [r7, #4]
 801a986:	881b      	ldrh	r3, [r3, #0]
 801a988:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801a98a:	2300      	movs	r3, #0
 801a98c:	62bb      	str	r3, [r7, #40]	; 0x28
 801a98e:	e017      	b.n	801a9c0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a990:	69fb      	ldr	r3, [r7, #28]
 801a992:	005a      	lsls	r2, r3, #1
 801a994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a996:	f003 0301 	and.w	r3, r3, #1
 801a99a:	4413      	add	r3, r2
 801a99c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a99e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a9a0:	085b      	lsrs	r3, r3, #1
 801a9a2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a9a4:	69fb      	ldr	r3, [r7, #28]
 801a9a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d005      	beq.n	801a9ba <gen_numname+0x5e>
 801a9ae:	69fb      	ldr	r3, [r7, #28]
 801a9b0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801a9b4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801a9b8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9bc:	3301      	adds	r3, #1
 801a9be:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9c2:	2b0f      	cmp	r3, #15
 801a9c4:	d9e4      	bls.n	801a990 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	881b      	ldrh	r3, [r3, #0]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d1d8      	bne.n	801a980 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a9ce:	69fb      	ldr	r3, [r7, #28]
 801a9d0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a9d2:	2307      	movs	r3, #7
 801a9d4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a9d6:	683b      	ldr	r3, [r7, #0]
 801a9d8:	b2db      	uxtb	r3, r3
 801a9da:	f003 030f 	and.w	r3, r3, #15
 801a9de:	b2db      	uxtb	r3, r3
 801a9e0:	3330      	adds	r3, #48	; 0x30
 801a9e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801a9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a9ea:	2b39      	cmp	r3, #57	; 0x39
 801a9ec:	d904      	bls.n	801a9f8 <gen_numname+0x9c>
 801a9ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a9f2:	3307      	adds	r3, #7
 801a9f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9fa:	1e5a      	subs	r2, r3, #1
 801a9fc:	62ba      	str	r2, [r7, #40]	; 0x28
 801a9fe:	3330      	adds	r3, #48	; 0x30
 801aa00:	443b      	add	r3, r7
 801aa02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801aa06:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801aa0a:	683b      	ldr	r3, [r7, #0]
 801aa0c:	091b      	lsrs	r3, r3, #4
 801aa0e:	603b      	str	r3, [r7, #0]
	} while (seq);
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d1df      	bne.n	801a9d6 <gen_numname+0x7a>
	ns[i] = '~';
 801aa16:	f107 0214 	add.w	r2, r7, #20
 801aa1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa1c:	4413      	add	r3, r2
 801aa1e:	227e      	movs	r2, #126	; 0x7e
 801aa20:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801aa22:	2300      	movs	r3, #0
 801aa24:	627b      	str	r3, [r7, #36]	; 0x24
 801aa26:	e002      	b.n	801aa2e <gen_numname+0xd2>
 801aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa2a:	3301      	adds	r3, #1
 801aa2c:	627b      	str	r3, [r7, #36]	; 0x24
 801aa2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa32:	429a      	cmp	r2, r3
 801aa34:	d205      	bcs.n	801aa42 <gen_numname+0xe6>
 801aa36:	68fa      	ldr	r2, [r7, #12]
 801aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa3a:	4413      	add	r3, r2
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	2b20      	cmp	r3, #32
 801aa40:	d1f2      	bne.n	801aa28 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa44:	2b07      	cmp	r3, #7
 801aa46:	d807      	bhi.n	801aa58 <gen_numname+0xfc>
 801aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4a:	1c5a      	adds	r2, r3, #1
 801aa4c:	62ba      	str	r2, [r7, #40]	; 0x28
 801aa4e:	3330      	adds	r3, #48	; 0x30
 801aa50:	443b      	add	r3, r7
 801aa52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801aa56:	e000      	b.n	801aa5a <gen_numname+0xfe>
 801aa58:	2120      	movs	r1, #32
 801aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa5c:	1c5a      	adds	r2, r3, #1
 801aa5e:	627a      	str	r2, [r7, #36]	; 0x24
 801aa60:	68fa      	ldr	r2, [r7, #12]
 801aa62:	4413      	add	r3, r2
 801aa64:	460a      	mov	r2, r1
 801aa66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6a:	2b07      	cmp	r3, #7
 801aa6c:	d9e9      	bls.n	801aa42 <gen_numname+0xe6>
}
 801aa6e:	bf00      	nop
 801aa70:	bf00      	nop
 801aa72:	3730      	adds	r7, #48	; 0x30
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}

0801aa78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801aa78:	b480      	push	{r7}
 801aa7a:	b085      	sub	sp, #20
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801aa80:	2300      	movs	r3, #0
 801aa82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801aa84:	230b      	movs	r3, #11
 801aa86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801aa88:	7bfb      	ldrb	r3, [r7, #15]
 801aa8a:	b2da      	uxtb	r2, r3
 801aa8c:	0852      	lsrs	r2, r2, #1
 801aa8e:	01db      	lsls	r3, r3, #7
 801aa90:	4313      	orrs	r3, r2
 801aa92:	b2da      	uxtb	r2, r3
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	1c59      	adds	r1, r3, #1
 801aa98:	6079      	str	r1, [r7, #4]
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	4413      	add	r3, r2
 801aa9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	3b01      	subs	r3, #1
 801aaa4:	60bb      	str	r3, [r7, #8]
 801aaa6:	68bb      	ldr	r3, [r7, #8]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d1ed      	bne.n	801aa88 <sum_sfn+0x10>
	return sum;
 801aaac:	7bfb      	ldrb	r3, [r7, #15]
}
 801aaae:	4618      	mov	r0, r3
 801aab0:	3714      	adds	r7, #20
 801aab2:	46bd      	mov	sp, r7
 801aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab8:	4770      	bx	lr

0801aaba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801aaba:	b580      	push	{r7, lr}
 801aabc:	b086      	sub	sp, #24
 801aabe:	af00      	add	r7, sp, #0
 801aac0:	6078      	str	r0, [r7, #4]
 801aac2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801aac4:	2304      	movs	r3, #4
 801aac6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801aace:	23ff      	movs	r3, #255	; 0xff
 801aad0:	757b      	strb	r3, [r7, #21]
 801aad2:	23ff      	movs	r3, #255	; 0xff
 801aad4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801aad6:	e081      	b.n	801abdc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	69db      	ldr	r3, [r3, #28]
 801aadc:	4619      	mov	r1, r3
 801aade:	6938      	ldr	r0, [r7, #16]
 801aae0:	f7ff f8ba 	bl	8019c58 <move_window>
 801aae4:	4603      	mov	r3, r0
 801aae6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801aae8:	7dfb      	ldrb	r3, [r7, #23]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d17c      	bne.n	801abe8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6a1b      	ldr	r3, [r3, #32]
 801aaf2:	781b      	ldrb	r3, [r3, #0]
 801aaf4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801aaf6:	7dbb      	ldrb	r3, [r7, #22]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d102      	bne.n	801ab02 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801aafc:	2304      	movs	r3, #4
 801aafe:	75fb      	strb	r3, [r7, #23]
 801ab00:	e077      	b.n	801abf2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	6a1b      	ldr	r3, [r3, #32]
 801ab06:	330b      	adds	r3, #11
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab0e:	73fb      	strb	r3, [r7, #15]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	7bfa      	ldrb	r2, [r7, #15]
 801ab14:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801ab16:	7dbb      	ldrb	r3, [r7, #22]
 801ab18:	2be5      	cmp	r3, #229	; 0xe5
 801ab1a:	d00e      	beq.n	801ab3a <dir_read+0x80>
 801ab1c:	7dbb      	ldrb	r3, [r7, #22]
 801ab1e:	2b2e      	cmp	r3, #46	; 0x2e
 801ab20:	d00b      	beq.n	801ab3a <dir_read+0x80>
 801ab22:	7bfb      	ldrb	r3, [r7, #15]
 801ab24:	f023 0320 	bic.w	r3, r3, #32
 801ab28:	2b08      	cmp	r3, #8
 801ab2a:	bf0c      	ite	eq
 801ab2c:	2301      	moveq	r3, #1
 801ab2e:	2300      	movne	r3, #0
 801ab30:	b2db      	uxtb	r3, r3
 801ab32:	461a      	mov	r2, r3
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	4293      	cmp	r3, r2
 801ab38:	d002      	beq.n	801ab40 <dir_read+0x86>
				ord = 0xFF;
 801ab3a:	23ff      	movs	r3, #255	; 0xff
 801ab3c:	757b      	strb	r3, [r7, #21]
 801ab3e:	e044      	b.n	801abca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801ab40:	7bfb      	ldrb	r3, [r7, #15]
 801ab42:	2b0f      	cmp	r3, #15
 801ab44:	d12f      	bne.n	801aba6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801ab46:	7dbb      	ldrb	r3, [r7, #22]
 801ab48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d00d      	beq.n	801ab6c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	6a1b      	ldr	r3, [r3, #32]
 801ab54:	7b5b      	ldrb	r3, [r3, #13]
 801ab56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801ab58:	7dbb      	ldrb	r3, [r7, #22]
 801ab5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ab5e:	75bb      	strb	r3, [r7, #22]
 801ab60:	7dbb      	ldrb	r3, [r7, #22]
 801ab62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	695a      	ldr	r2, [r3, #20]
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801ab6c:	7dba      	ldrb	r2, [r7, #22]
 801ab6e:	7d7b      	ldrb	r3, [r7, #21]
 801ab70:	429a      	cmp	r2, r3
 801ab72:	d115      	bne.n	801aba0 <dir_read+0xe6>
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	6a1b      	ldr	r3, [r3, #32]
 801ab78:	330d      	adds	r3, #13
 801ab7a:	781b      	ldrb	r3, [r3, #0]
 801ab7c:	7d3a      	ldrb	r2, [r7, #20]
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	d10e      	bne.n	801aba0 <dir_read+0xe6>
 801ab82:	693b      	ldr	r3, [r7, #16]
 801ab84:	68da      	ldr	r2, [r3, #12]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6a1b      	ldr	r3, [r3, #32]
 801ab8a:	4619      	mov	r1, r3
 801ab8c:	4610      	mov	r0, r2
 801ab8e:	f7ff fe19 	bl	801a7c4 <pick_lfn>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d003      	beq.n	801aba0 <dir_read+0xe6>
 801ab98:	7d7b      	ldrb	r3, [r7, #21]
 801ab9a:	3b01      	subs	r3, #1
 801ab9c:	b2db      	uxtb	r3, r3
 801ab9e:	e000      	b.n	801aba2 <dir_read+0xe8>
 801aba0:	23ff      	movs	r3, #255	; 0xff
 801aba2:	757b      	strb	r3, [r7, #21]
 801aba4:	e011      	b.n	801abca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801aba6:	7d7b      	ldrb	r3, [r7, #21]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d109      	bne.n	801abc0 <dir_read+0x106>
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	6a1b      	ldr	r3, [r3, #32]
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7ff ff61 	bl	801aa78 <sum_sfn>
 801abb6:	4603      	mov	r3, r0
 801abb8:	461a      	mov	r2, r3
 801abba:	7d3b      	ldrb	r3, [r7, #20]
 801abbc:	4293      	cmp	r3, r2
 801abbe:	d015      	beq.n	801abec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	f04f 32ff 	mov.w	r2, #4294967295
 801abc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 801abc8:	e010      	b.n	801abec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801abca:	2100      	movs	r1, #0
 801abcc:	6878      	ldr	r0, [r7, #4]
 801abce:	f7ff fc3e 	bl	801a44e <dir_next>
 801abd2:	4603      	mov	r3, r0
 801abd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801abd6:	7dfb      	ldrb	r3, [r7, #23]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d109      	bne.n	801abf0 <dir_read+0x136>
	while (dp->sect) {
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	69db      	ldr	r3, [r3, #28]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	f47f af79 	bne.w	801aad8 <dir_read+0x1e>
 801abe6:	e004      	b.n	801abf2 <dir_read+0x138>
		if (res != FR_OK) break;
 801abe8:	bf00      	nop
 801abea:	e002      	b.n	801abf2 <dir_read+0x138>
					break;
 801abec:	bf00      	nop
 801abee:	e000      	b.n	801abf2 <dir_read+0x138>
		if (res != FR_OK) break;
 801abf0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801abf2:	7dfb      	ldrb	r3, [r7, #23]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d002      	beq.n	801abfe <dir_read+0x144>
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2200      	movs	r2, #0
 801abfc:	61da      	str	r2, [r3, #28]
	return res;
 801abfe:	7dfb      	ldrb	r3, [r7, #23]
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3718      	adds	r7, #24
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}

0801ac08 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801ac16:	2100      	movs	r1, #0
 801ac18:	6878      	ldr	r0, [r7, #4]
 801ac1a:	f7ff fb9d 	bl	801a358 <dir_sdi>
 801ac1e:	4603      	mov	r3, r0
 801ac20:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801ac22:	7dfb      	ldrb	r3, [r7, #23]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d001      	beq.n	801ac2c <dir_find+0x24>
 801ac28:	7dfb      	ldrb	r3, [r7, #23]
 801ac2a:	e0a9      	b.n	801ad80 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801ac2c:	23ff      	movs	r3, #255	; 0xff
 801ac2e:	753b      	strb	r3, [r7, #20]
 801ac30:	7d3b      	ldrb	r3, [r7, #20]
 801ac32:	757b      	strb	r3, [r7, #21]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f04f 32ff 	mov.w	r2, #4294967295
 801ac3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	69db      	ldr	r3, [r3, #28]
 801ac40:	4619      	mov	r1, r3
 801ac42:	6938      	ldr	r0, [r7, #16]
 801ac44:	f7ff f808 	bl	8019c58 <move_window>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801ac4c:	7dfb      	ldrb	r3, [r7, #23]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	f040 8090 	bne.w	801ad74 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	6a1b      	ldr	r3, [r3, #32]
 801ac58:	781b      	ldrb	r3, [r3, #0]
 801ac5a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801ac5c:	7dbb      	ldrb	r3, [r7, #22]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d102      	bne.n	801ac68 <dir_find+0x60>
 801ac62:	2304      	movs	r3, #4
 801ac64:	75fb      	strb	r3, [r7, #23]
 801ac66:	e08a      	b.n	801ad7e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	6a1b      	ldr	r3, [r3, #32]
 801ac6c:	330b      	adds	r3, #11
 801ac6e:	781b      	ldrb	r3, [r3, #0]
 801ac70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac74:	73fb      	strb	r3, [r7, #15]
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	7bfa      	ldrb	r2, [r7, #15]
 801ac7a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801ac7c:	7dbb      	ldrb	r3, [r7, #22]
 801ac7e:	2be5      	cmp	r3, #229	; 0xe5
 801ac80:	d007      	beq.n	801ac92 <dir_find+0x8a>
 801ac82:	7bfb      	ldrb	r3, [r7, #15]
 801ac84:	f003 0308 	and.w	r3, r3, #8
 801ac88:	2b00      	cmp	r3, #0
 801ac8a:	d009      	beq.n	801aca0 <dir_find+0x98>
 801ac8c:	7bfb      	ldrb	r3, [r7, #15]
 801ac8e:	2b0f      	cmp	r3, #15
 801ac90:	d006      	beq.n	801aca0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801ac92:	23ff      	movs	r3, #255	; 0xff
 801ac94:	757b      	strb	r3, [r7, #21]
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	f04f 32ff 	mov.w	r2, #4294967295
 801ac9c:	631a      	str	r2, [r3, #48]	; 0x30
 801ac9e:	e05e      	b.n	801ad5e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801aca0:	7bfb      	ldrb	r3, [r7, #15]
 801aca2:	2b0f      	cmp	r3, #15
 801aca4:	d136      	bne.n	801ad14 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801acac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d154      	bne.n	801ad5e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801acb4:	7dbb      	ldrb	r3, [r7, #22]
 801acb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d00d      	beq.n	801acda <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	6a1b      	ldr	r3, [r3, #32]
 801acc2:	7b5b      	ldrb	r3, [r3, #13]
 801acc4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801acc6:	7dbb      	ldrb	r3, [r7, #22]
 801acc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801accc:	75bb      	strb	r3, [r7, #22]
 801acce:	7dbb      	ldrb	r3, [r7, #22]
 801acd0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	695a      	ldr	r2, [r3, #20]
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801acda:	7dba      	ldrb	r2, [r7, #22]
 801acdc:	7d7b      	ldrb	r3, [r7, #21]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d115      	bne.n	801ad0e <dir_find+0x106>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	6a1b      	ldr	r3, [r3, #32]
 801ace6:	330d      	adds	r3, #13
 801ace8:	781b      	ldrb	r3, [r3, #0]
 801acea:	7d3a      	ldrb	r2, [r7, #20]
 801acec:	429a      	cmp	r2, r3
 801acee:	d10e      	bne.n	801ad0e <dir_find+0x106>
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	68da      	ldr	r2, [r3, #12]
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	6a1b      	ldr	r3, [r3, #32]
 801acf8:	4619      	mov	r1, r3
 801acfa:	4610      	mov	r0, r2
 801acfc:	f7ff fcf2 	bl	801a6e4 <cmp_lfn>
 801ad00:	4603      	mov	r3, r0
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d003      	beq.n	801ad0e <dir_find+0x106>
 801ad06:	7d7b      	ldrb	r3, [r7, #21]
 801ad08:	3b01      	subs	r3, #1
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	e000      	b.n	801ad10 <dir_find+0x108>
 801ad0e:	23ff      	movs	r3, #255	; 0xff
 801ad10:	757b      	strb	r3, [r7, #21]
 801ad12:	e024      	b.n	801ad5e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801ad14:	7d7b      	ldrb	r3, [r7, #21]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d109      	bne.n	801ad2e <dir_find+0x126>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6a1b      	ldr	r3, [r3, #32]
 801ad1e:	4618      	mov	r0, r3
 801ad20:	f7ff feaa 	bl	801aa78 <sum_sfn>
 801ad24:	4603      	mov	r3, r0
 801ad26:	461a      	mov	r2, r3
 801ad28:	7d3b      	ldrb	r3, [r7, #20]
 801ad2a:	4293      	cmp	r3, r2
 801ad2c:	d024      	beq.n	801ad78 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801ad34:	f003 0301 	and.w	r3, r3, #1
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d10a      	bne.n	801ad52 <dir_find+0x14a>
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	6a18      	ldr	r0, [r3, #32]
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	3324      	adds	r3, #36	; 0x24
 801ad44:	220b      	movs	r2, #11
 801ad46:	4619      	mov	r1, r3
 801ad48:	f7fe fd94 	bl	8019874 <mem_cmp>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d014      	beq.n	801ad7c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801ad52:	23ff      	movs	r3, #255	; 0xff
 801ad54:	757b      	strb	r3, [r7, #21]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	f04f 32ff 	mov.w	r2, #4294967295
 801ad5c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801ad5e:	2100      	movs	r1, #0
 801ad60:	6878      	ldr	r0, [r7, #4]
 801ad62:	f7ff fb74 	bl	801a44e <dir_next>
 801ad66:	4603      	mov	r3, r0
 801ad68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801ad6a:	7dfb      	ldrb	r3, [r7, #23]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	f43f af65 	beq.w	801ac3c <dir_find+0x34>
 801ad72:	e004      	b.n	801ad7e <dir_find+0x176>
		if (res != FR_OK) break;
 801ad74:	bf00      	nop
 801ad76:	e002      	b.n	801ad7e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801ad78:	bf00      	nop
 801ad7a:	e000      	b.n	801ad7e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801ad7c:	bf00      	nop

	return res;
 801ad7e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ad80:	4618      	mov	r0, r3
 801ad82:	3718      	adds	r7, #24
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd80      	pop	{r7, pc}

0801ad88 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b08c      	sub	sp, #48	; 0x30
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801ad9c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d001      	beq.n	801ada8 <dir_register+0x20>
 801ada4:	2306      	movs	r3, #6
 801ada6:	e0e0      	b.n	801af6a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801ada8:	2300      	movs	r3, #0
 801adaa:	627b      	str	r3, [r7, #36]	; 0x24
 801adac:	e002      	b.n	801adb4 <dir_register+0x2c>
 801adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb0:	3301      	adds	r3, #1
 801adb2:	627b      	str	r3, [r7, #36]	; 0x24
 801adb4:	69fb      	ldr	r3, [r7, #28]
 801adb6:	68da      	ldr	r2, [r3, #12]
 801adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adba:	005b      	lsls	r3, r3, #1
 801adbc:	4413      	add	r3, r2
 801adbe:	881b      	ldrh	r3, [r3, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d1f4      	bne.n	801adae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801adca:	f107 030c 	add.w	r3, r7, #12
 801adce:	220c      	movs	r2, #12
 801add0:	4618      	mov	r0, r3
 801add2:	f7fe fd13 	bl	80197fc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801add6:	7dfb      	ldrb	r3, [r7, #23]
 801add8:	f003 0301 	and.w	r3, r3, #1
 801addc:	2b00      	cmp	r3, #0
 801adde:	d032      	beq.n	801ae46 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2240      	movs	r2, #64	; 0x40
 801ade4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801ade8:	2301      	movs	r3, #1
 801adea:	62bb      	str	r3, [r7, #40]	; 0x28
 801adec:	e016      	b.n	801ae1c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801adf4:	69fb      	ldr	r3, [r7, #28]
 801adf6:	68da      	ldr	r2, [r3, #12]
 801adf8:	f107 010c 	add.w	r1, r7, #12
 801adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adfe:	f7ff fdad 	bl	801a95c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff ff00 	bl	801ac08 <dir_find>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801ae0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d106      	bne.n	801ae24 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801ae16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae18:	3301      	adds	r3, #1
 801ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ae1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae1e:	2b63      	cmp	r3, #99	; 0x63
 801ae20:	d9e5      	bls.n	801adee <dir_register+0x66>
 801ae22:	e000      	b.n	801ae26 <dir_register+0x9e>
			if (res != FR_OK) break;
 801ae24:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae28:	2b64      	cmp	r3, #100	; 0x64
 801ae2a:	d101      	bne.n	801ae30 <dir_register+0xa8>
 801ae2c:	2307      	movs	r3, #7
 801ae2e:	e09c      	b.n	801af6a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801ae30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ae34:	2b04      	cmp	r3, #4
 801ae36:	d002      	beq.n	801ae3e <dir_register+0xb6>
 801ae38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ae3c:	e095      	b.n	801af6a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801ae3e:	7dfa      	ldrb	r2, [r7, #23]
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801ae46:	7dfb      	ldrb	r3, [r7, #23]
 801ae48:	f003 0302 	and.w	r3, r3, #2
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d007      	beq.n	801ae60 <dir_register+0xd8>
 801ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae52:	330c      	adds	r3, #12
 801ae54:	4a47      	ldr	r2, [pc, #284]	; (801af74 <dir_register+0x1ec>)
 801ae56:	fba2 2303 	umull	r2, r3, r2, r3
 801ae5a:	089b      	lsrs	r3, r3, #2
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	e000      	b.n	801ae62 <dir_register+0xda>
 801ae60:	2301      	movs	r3, #1
 801ae62:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801ae64:	6a39      	ldr	r1, [r7, #32]
 801ae66:	6878      	ldr	r0, [r7, #4]
 801ae68:	f7ff fbb6 	bl	801a5d8 <dir_alloc>
 801ae6c:	4603      	mov	r3, r0
 801ae6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801ae72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d148      	bne.n	801af0c <dir_register+0x184>
 801ae7a:	6a3b      	ldr	r3, [r7, #32]
 801ae7c:	3b01      	subs	r3, #1
 801ae7e:	623b      	str	r3, [r7, #32]
 801ae80:	6a3b      	ldr	r3, [r7, #32]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d042      	beq.n	801af0c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	695a      	ldr	r2, [r3, #20]
 801ae8a:	6a3b      	ldr	r3, [r7, #32]
 801ae8c:	015b      	lsls	r3, r3, #5
 801ae8e:	1ad3      	subs	r3, r2, r3
 801ae90:	4619      	mov	r1, r3
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f7ff fa60 	bl	801a358 <dir_sdi>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801ae9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d132      	bne.n	801af0c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	3324      	adds	r3, #36	; 0x24
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f7ff fde4 	bl	801aa78 <sum_sfn>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	69db      	ldr	r3, [r3, #28]
 801aeb8:	4619      	mov	r1, r3
 801aeba:	69f8      	ldr	r0, [r7, #28]
 801aebc:	f7fe fecc 	bl	8019c58 <move_window>
 801aec0:	4603      	mov	r3, r0
 801aec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801aec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d11d      	bne.n	801af0a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801aece:	69fb      	ldr	r3, [r7, #28]
 801aed0:	68d8      	ldr	r0, [r3, #12]
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6a19      	ldr	r1, [r3, #32]
 801aed6:	6a3b      	ldr	r3, [r7, #32]
 801aed8:	b2da      	uxtb	r2, r3
 801aeda:	7efb      	ldrb	r3, [r7, #27]
 801aedc:	f7ff fcd6 	bl	801a88c <put_lfn>
				fs->wflag = 1;
 801aee0:	69fb      	ldr	r3, [r7, #28]
 801aee2:	2201      	movs	r2, #1
 801aee4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801aee6:	2100      	movs	r1, #0
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	f7ff fab0 	bl	801a44e <dir_next>
 801aeee:	4603      	mov	r3, r0
 801aef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801aef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d107      	bne.n	801af0c <dir_register+0x184>
 801aefc:	6a3b      	ldr	r3, [r7, #32]
 801aefe:	3b01      	subs	r3, #1
 801af00:	623b      	str	r3, [r7, #32]
 801af02:	6a3b      	ldr	r3, [r7, #32]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d1d5      	bne.n	801aeb4 <dir_register+0x12c>
 801af08:	e000      	b.n	801af0c <dir_register+0x184>
				if (res != FR_OK) break;
 801af0a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801af0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801af10:	2b00      	cmp	r3, #0
 801af12:	d128      	bne.n	801af66 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	69db      	ldr	r3, [r3, #28]
 801af18:	4619      	mov	r1, r3
 801af1a:	69f8      	ldr	r0, [r7, #28]
 801af1c:	f7fe fe9c 	bl	8019c58 <move_window>
 801af20:	4603      	mov	r3, r0
 801af22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801af26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d11b      	bne.n	801af66 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	6a1b      	ldr	r3, [r3, #32]
 801af32:	2220      	movs	r2, #32
 801af34:	2100      	movs	r1, #0
 801af36:	4618      	mov	r0, r3
 801af38:	f7fe fc81 	bl	801983e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	6a18      	ldr	r0, [r3, #32]
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	3324      	adds	r3, #36	; 0x24
 801af44:	220b      	movs	r2, #11
 801af46:	4619      	mov	r1, r3
 801af48:	f7fe fc58 	bl	80197fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	6a1b      	ldr	r3, [r3, #32]
 801af56:	330c      	adds	r3, #12
 801af58:	f002 0218 	and.w	r2, r2, #24
 801af5c:	b2d2      	uxtb	r2, r2
 801af5e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801af60:	69fb      	ldr	r3, [r7, #28]
 801af62:	2201      	movs	r2, #1
 801af64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801af66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3730      	adds	r7, #48	; 0x30
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}
 801af72:	bf00      	nop
 801af74:	4ec4ec4f 	.word	0x4ec4ec4f

0801af78 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b088      	sub	sp, #32
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
 801af80:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	2200      	movs	r2, #0
 801af8c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	69db      	ldr	r3, [r3, #28]
 801af92:	2b00      	cmp	r3, #0
 801af94:	f000 80c9 	beq.w	801b12a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afa0:	d032      	beq.n	801b008 <get_fileinfo+0x90>
			i = j = 0;
 801afa2:	2300      	movs	r3, #0
 801afa4:	61bb      	str	r3, [r7, #24]
 801afa6:	69bb      	ldr	r3, [r7, #24]
 801afa8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801afaa:	e01b      	b.n	801afe4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801afac:	89fb      	ldrh	r3, [r7, #14]
 801afae:	2100      	movs	r1, #0
 801afb0:	4618      	mov	r0, r3
 801afb2:	f002 fa31 	bl	801d418 <ff_convert>
 801afb6:	4603      	mov	r3, r0
 801afb8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801afba:	89fb      	ldrh	r3, [r7, #14]
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	d102      	bne.n	801afc6 <get_fileinfo+0x4e>
 801afc0:	2300      	movs	r3, #0
 801afc2:	61fb      	str	r3, [r7, #28]
 801afc4:	e01a      	b.n	801affc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801afc6:	69fb      	ldr	r3, [r7, #28]
 801afc8:	2bfe      	cmp	r3, #254	; 0xfe
 801afca:	d902      	bls.n	801afd2 <get_fileinfo+0x5a>
 801afcc:	2300      	movs	r3, #0
 801afce:	61fb      	str	r3, [r7, #28]
 801afd0:	e014      	b.n	801affc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801afd2:	69fb      	ldr	r3, [r7, #28]
 801afd4:	1c5a      	adds	r2, r3, #1
 801afd6:	61fa      	str	r2, [r7, #28]
 801afd8:	89fa      	ldrh	r2, [r7, #14]
 801afda:	b2d1      	uxtb	r1, r2
 801afdc:	683a      	ldr	r2, [r7, #0]
 801afde:	4413      	add	r3, r2
 801afe0:	460a      	mov	r2, r1
 801afe2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	68da      	ldr	r2, [r3, #12]
 801afe8:	69bb      	ldr	r3, [r7, #24]
 801afea:	1c59      	adds	r1, r3, #1
 801afec:	61b9      	str	r1, [r7, #24]
 801afee:	005b      	lsls	r3, r3, #1
 801aff0:	4413      	add	r3, r2
 801aff2:	881b      	ldrh	r3, [r3, #0]
 801aff4:	81fb      	strh	r3, [r7, #14]
 801aff6:	89fb      	ldrh	r3, [r7, #14]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d1d7      	bne.n	801afac <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801affc:	683a      	ldr	r2, [r7, #0]
 801affe:	69fb      	ldr	r3, [r7, #28]
 801b000:	4413      	add	r3, r2
 801b002:	3316      	adds	r3, #22
 801b004:	2200      	movs	r2, #0
 801b006:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801b008:	2300      	movs	r3, #0
 801b00a:	61bb      	str	r3, [r7, #24]
 801b00c:	69bb      	ldr	r3, [r7, #24]
 801b00e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801b010:	683a      	ldr	r2, [r7, #0]
 801b012:	69fb      	ldr	r3, [r7, #28]
 801b014:	4413      	add	r3, r2
 801b016:	3316      	adds	r3, #22
 801b018:	781b      	ldrb	r3, [r3, #0]
 801b01a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801b01c:	e04c      	b.n	801b0b8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	6a1a      	ldr	r2, [r3, #32]
 801b022:	69fb      	ldr	r3, [r7, #28]
 801b024:	1c59      	adds	r1, r3, #1
 801b026:	61f9      	str	r1, [r7, #28]
 801b028:	4413      	add	r3, r2
 801b02a:	781b      	ldrb	r3, [r3, #0]
 801b02c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801b02e:	7dfb      	ldrb	r3, [r7, #23]
 801b030:	2b20      	cmp	r3, #32
 801b032:	d100      	bne.n	801b036 <get_fileinfo+0xbe>
 801b034:	e040      	b.n	801b0b8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801b036:	7dfb      	ldrb	r3, [r7, #23]
 801b038:	2b05      	cmp	r3, #5
 801b03a:	d101      	bne.n	801b040 <get_fileinfo+0xc8>
 801b03c:	23e5      	movs	r3, #229	; 0xe5
 801b03e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801b040:	69fb      	ldr	r3, [r7, #28]
 801b042:	2b09      	cmp	r3, #9
 801b044:	d10f      	bne.n	801b066 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801b046:	89bb      	ldrh	r3, [r7, #12]
 801b048:	2b00      	cmp	r3, #0
 801b04a:	d105      	bne.n	801b058 <get_fileinfo+0xe0>
 801b04c:	683a      	ldr	r2, [r7, #0]
 801b04e:	69bb      	ldr	r3, [r7, #24]
 801b050:	4413      	add	r3, r2
 801b052:	3316      	adds	r3, #22
 801b054:	222e      	movs	r2, #46	; 0x2e
 801b056:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801b058:	69bb      	ldr	r3, [r7, #24]
 801b05a:	1c5a      	adds	r2, r3, #1
 801b05c:	61ba      	str	r2, [r7, #24]
 801b05e:	683a      	ldr	r2, [r7, #0]
 801b060:	4413      	add	r3, r2
 801b062:	222e      	movs	r2, #46	; 0x2e
 801b064:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801b066:	683a      	ldr	r2, [r7, #0]
 801b068:	69bb      	ldr	r3, [r7, #24]
 801b06a:	4413      	add	r3, r2
 801b06c:	3309      	adds	r3, #9
 801b06e:	7dfa      	ldrb	r2, [r7, #23]
 801b070:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801b072:	89bb      	ldrh	r3, [r7, #12]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d11c      	bne.n	801b0b2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801b078:	7dfb      	ldrb	r3, [r7, #23]
 801b07a:	2b40      	cmp	r3, #64	; 0x40
 801b07c:	d913      	bls.n	801b0a6 <get_fileinfo+0x12e>
 801b07e:	7dfb      	ldrb	r3, [r7, #23]
 801b080:	2b5a      	cmp	r3, #90	; 0x5a
 801b082:	d810      	bhi.n	801b0a6 <get_fileinfo+0x12e>
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	6a1b      	ldr	r3, [r3, #32]
 801b088:	330c      	adds	r3, #12
 801b08a:	781b      	ldrb	r3, [r3, #0]
 801b08c:	461a      	mov	r2, r3
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	2b08      	cmp	r3, #8
 801b092:	d901      	bls.n	801b098 <get_fileinfo+0x120>
 801b094:	2310      	movs	r3, #16
 801b096:	e000      	b.n	801b09a <get_fileinfo+0x122>
 801b098:	2308      	movs	r3, #8
 801b09a:	4013      	ands	r3, r2
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d002      	beq.n	801b0a6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801b0a0:	7dfb      	ldrb	r3, [r7, #23]
 801b0a2:	3320      	adds	r3, #32
 801b0a4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801b0a6:	683a      	ldr	r2, [r7, #0]
 801b0a8:	69bb      	ldr	r3, [r7, #24]
 801b0aa:	4413      	add	r3, r2
 801b0ac:	3316      	adds	r3, #22
 801b0ae:	7dfa      	ldrb	r2, [r7, #23]
 801b0b0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801b0b2:	69bb      	ldr	r3, [r7, #24]
 801b0b4:	3301      	adds	r3, #1
 801b0b6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801b0b8:	69fb      	ldr	r3, [r7, #28]
 801b0ba:	2b0a      	cmp	r3, #10
 801b0bc:	d9af      	bls.n	801b01e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801b0be:	89bb      	ldrh	r3, [r7, #12]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d10d      	bne.n	801b0e0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801b0c4:	683a      	ldr	r2, [r7, #0]
 801b0c6:	69bb      	ldr	r3, [r7, #24]
 801b0c8:	4413      	add	r3, r2
 801b0ca:	3316      	adds	r3, #22
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	6a1b      	ldr	r3, [r3, #32]
 801b0d4:	330c      	adds	r3, #12
 801b0d6:	781b      	ldrb	r3, [r3, #0]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d101      	bne.n	801b0e0 <get_fileinfo+0x168>
 801b0dc:	2300      	movs	r3, #0
 801b0de:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801b0e0:	683a      	ldr	r2, [r7, #0]
 801b0e2:	69bb      	ldr	r3, [r7, #24]
 801b0e4:	4413      	add	r3, r2
 801b0e6:	3309      	adds	r3, #9
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6a1b      	ldr	r3, [r3, #32]
 801b0f0:	7ada      	ldrb	r2, [r3, #11]
 801b0f2:	683b      	ldr	r3, [r7, #0]
 801b0f4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	6a1b      	ldr	r3, [r3, #32]
 801b0fa:	331c      	adds	r3, #28
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7fe fb13 	bl	8019728 <ld_dword>
 801b102:	4602      	mov	r2, r0
 801b104:	683b      	ldr	r3, [r7, #0]
 801b106:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	6a1b      	ldr	r3, [r3, #32]
 801b10c:	3316      	adds	r3, #22
 801b10e:	4618      	mov	r0, r3
 801b110:	f7fe fb0a 	bl	8019728 <ld_dword>
 801b114:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	b29a      	uxth	r2, r3
 801b11a:	683b      	ldr	r3, [r7, #0]
 801b11c:	80da      	strh	r2, [r3, #6]
 801b11e:	68bb      	ldr	r3, [r7, #8]
 801b120:	0c1b      	lsrs	r3, r3, #16
 801b122:	b29a      	uxth	r2, r3
 801b124:	683b      	ldr	r3, [r7, #0]
 801b126:	809a      	strh	r2, [r3, #4]
 801b128:	e000      	b.n	801b12c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801b12a:	bf00      	nop
}
 801b12c:	3720      	adds	r7, #32
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
	...

0801b134 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b08a      	sub	sp, #40	; 0x28
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
 801b13c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	613b      	str	r3, [r7, #16]
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	68db      	ldr	r3, [r3, #12]
 801b14a:	60fb      	str	r3, [r7, #12]
 801b14c:	2300      	movs	r3, #0
 801b14e:	617b      	str	r3, [r7, #20]
 801b150:	697b      	ldr	r3, [r7, #20]
 801b152:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	1c5a      	adds	r2, r3, #1
 801b158:	61ba      	str	r2, [r7, #24]
 801b15a:	693a      	ldr	r2, [r7, #16]
 801b15c:	4413      	add	r3, r2
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801b162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b164:	2b1f      	cmp	r3, #31
 801b166:	d940      	bls.n	801b1ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801b168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b16a:	2b2f      	cmp	r3, #47	; 0x2f
 801b16c:	d006      	beq.n	801b17c <create_name+0x48>
 801b16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b170:	2b5c      	cmp	r3, #92	; 0x5c
 801b172:	d110      	bne.n	801b196 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801b174:	e002      	b.n	801b17c <create_name+0x48>
 801b176:	69bb      	ldr	r3, [r7, #24]
 801b178:	3301      	adds	r3, #1
 801b17a:	61bb      	str	r3, [r7, #24]
 801b17c:	693a      	ldr	r2, [r7, #16]
 801b17e:	69bb      	ldr	r3, [r7, #24]
 801b180:	4413      	add	r3, r2
 801b182:	781b      	ldrb	r3, [r3, #0]
 801b184:	2b2f      	cmp	r3, #47	; 0x2f
 801b186:	d0f6      	beq.n	801b176 <create_name+0x42>
 801b188:	693a      	ldr	r2, [r7, #16]
 801b18a:	69bb      	ldr	r3, [r7, #24]
 801b18c:	4413      	add	r3, r2
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	2b5c      	cmp	r3, #92	; 0x5c
 801b192:	d0f0      	beq.n	801b176 <create_name+0x42>
			break;
 801b194:	e02a      	b.n	801b1ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801b196:	697b      	ldr	r3, [r7, #20]
 801b198:	2bfe      	cmp	r3, #254	; 0xfe
 801b19a:	d901      	bls.n	801b1a0 <create_name+0x6c>
 801b19c:	2306      	movs	r3, #6
 801b19e:	e17d      	b.n	801b49c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801b1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801b1a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1a8:	2101      	movs	r1, #1
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f002 f934 	bl	801d418 <ff_convert>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801b1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d101      	bne.n	801b1be <create_name+0x8a>
 801b1ba:	2306      	movs	r3, #6
 801b1bc:	e16e      	b.n	801b49c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801b1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1c0:	2b7f      	cmp	r3, #127	; 0x7f
 801b1c2:	d809      	bhi.n	801b1d8 <create_name+0xa4>
 801b1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1c6:	4619      	mov	r1, r3
 801b1c8:	488d      	ldr	r0, [pc, #564]	; (801b400 <create_name+0x2cc>)
 801b1ca:	f7fe fb7a 	bl	80198c2 <chk_chr>
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d001      	beq.n	801b1d8 <create_name+0xa4>
 801b1d4:	2306      	movs	r3, #6
 801b1d6:	e161      	b.n	801b49c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	1c5a      	adds	r2, r3, #1
 801b1dc:	617a      	str	r2, [r7, #20]
 801b1de:	005b      	lsls	r3, r3, #1
 801b1e0:	68fa      	ldr	r2, [r7, #12]
 801b1e2:	4413      	add	r3, r2
 801b1e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b1e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801b1e8:	e7b4      	b.n	801b154 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801b1ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801b1ec:	693a      	ldr	r2, [r7, #16]
 801b1ee:	69bb      	ldr	r3, [r7, #24]
 801b1f0:	441a      	add	r2, r3
 801b1f2:	683b      	ldr	r3, [r7, #0]
 801b1f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801b1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b1f8:	2b1f      	cmp	r3, #31
 801b1fa:	d801      	bhi.n	801b200 <create_name+0xcc>
 801b1fc:	2304      	movs	r3, #4
 801b1fe:	e000      	b.n	801b202 <create_name+0xce>
 801b200:	2300      	movs	r3, #0
 801b202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801b206:	e011      	b.n	801b22c <create_name+0xf8>
		w = lfn[di - 1];
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b20e:	3b01      	subs	r3, #1
 801b210:	005b      	lsls	r3, r3, #1
 801b212:	68fa      	ldr	r2, [r7, #12]
 801b214:	4413      	add	r3, r2
 801b216:	881b      	ldrh	r3, [r3, #0]
 801b218:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801b21a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b21c:	2b20      	cmp	r3, #32
 801b21e:	d002      	beq.n	801b226 <create_name+0xf2>
 801b220:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b222:	2b2e      	cmp	r3, #46	; 0x2e
 801b224:	d106      	bne.n	801b234 <create_name+0x100>
		di--;
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	3b01      	subs	r3, #1
 801b22a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801b22c:	697b      	ldr	r3, [r7, #20]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d1ea      	bne.n	801b208 <create_name+0xd4>
 801b232:	e000      	b.n	801b236 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801b234:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801b236:	697b      	ldr	r3, [r7, #20]
 801b238:	005b      	lsls	r3, r3, #1
 801b23a:	68fa      	ldr	r2, [r7, #12]
 801b23c:	4413      	add	r3, r2
 801b23e:	2200      	movs	r2, #0
 801b240:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801b242:	697b      	ldr	r3, [r7, #20]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d101      	bne.n	801b24c <create_name+0x118>
 801b248:	2306      	movs	r3, #6
 801b24a:	e127      	b.n	801b49c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	3324      	adds	r3, #36	; 0x24
 801b250:	220b      	movs	r2, #11
 801b252:	2120      	movs	r1, #32
 801b254:	4618      	mov	r0, r3
 801b256:	f7fe faf2 	bl	801983e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801b25a:	2300      	movs	r3, #0
 801b25c:	61bb      	str	r3, [r7, #24]
 801b25e:	e002      	b.n	801b266 <create_name+0x132>
 801b260:	69bb      	ldr	r3, [r7, #24]
 801b262:	3301      	adds	r3, #1
 801b264:	61bb      	str	r3, [r7, #24]
 801b266:	69bb      	ldr	r3, [r7, #24]
 801b268:	005b      	lsls	r3, r3, #1
 801b26a:	68fa      	ldr	r2, [r7, #12]
 801b26c:	4413      	add	r3, r2
 801b26e:	881b      	ldrh	r3, [r3, #0]
 801b270:	2b20      	cmp	r3, #32
 801b272:	d0f5      	beq.n	801b260 <create_name+0x12c>
 801b274:	69bb      	ldr	r3, [r7, #24]
 801b276:	005b      	lsls	r3, r3, #1
 801b278:	68fa      	ldr	r2, [r7, #12]
 801b27a:	4413      	add	r3, r2
 801b27c:	881b      	ldrh	r3, [r3, #0]
 801b27e:	2b2e      	cmp	r3, #46	; 0x2e
 801b280:	d0ee      	beq.n	801b260 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801b282:	69bb      	ldr	r3, [r7, #24]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d009      	beq.n	801b29c <create_name+0x168>
 801b288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b28c:	f043 0303 	orr.w	r3, r3, #3
 801b290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801b294:	e002      	b.n	801b29c <create_name+0x168>
 801b296:	697b      	ldr	r3, [r7, #20]
 801b298:	3b01      	subs	r3, #1
 801b29a:	617b      	str	r3, [r7, #20]
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d009      	beq.n	801b2b6 <create_name+0x182>
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b2a8:	3b01      	subs	r3, #1
 801b2aa:	005b      	lsls	r3, r3, #1
 801b2ac:	68fa      	ldr	r2, [r7, #12]
 801b2ae:	4413      	add	r3, r2
 801b2b0:	881b      	ldrh	r3, [r3, #0]
 801b2b2:	2b2e      	cmp	r3, #46	; 0x2e
 801b2b4:	d1ef      	bne.n	801b296 <create_name+0x162>

	i = b = 0; ni = 8;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b2bc:	2300      	movs	r3, #0
 801b2be:	623b      	str	r3, [r7, #32]
 801b2c0:	2308      	movs	r3, #8
 801b2c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801b2c4:	69bb      	ldr	r3, [r7, #24]
 801b2c6:	1c5a      	adds	r2, r3, #1
 801b2c8:	61ba      	str	r2, [r7, #24]
 801b2ca:	005b      	lsls	r3, r3, #1
 801b2cc:	68fa      	ldr	r2, [r7, #12]
 801b2ce:	4413      	add	r3, r2
 801b2d0:	881b      	ldrh	r3, [r3, #0]
 801b2d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801b2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	f000 8090 	beq.w	801b3fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801b2dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b2de:	2b20      	cmp	r3, #32
 801b2e0:	d006      	beq.n	801b2f0 <create_name+0x1bc>
 801b2e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b2e4:	2b2e      	cmp	r3, #46	; 0x2e
 801b2e6:	d10a      	bne.n	801b2fe <create_name+0x1ca>
 801b2e8:	69ba      	ldr	r2, [r7, #24]
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	d006      	beq.n	801b2fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801b2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b2f4:	f043 0303 	orr.w	r3, r3, #3
 801b2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b2fc:	e07d      	b.n	801b3fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801b2fe:	6a3a      	ldr	r2, [r7, #32]
 801b300:	69fb      	ldr	r3, [r7, #28]
 801b302:	429a      	cmp	r2, r3
 801b304:	d203      	bcs.n	801b30e <create_name+0x1da>
 801b306:	69ba      	ldr	r2, [r7, #24]
 801b308:	697b      	ldr	r3, [r7, #20]
 801b30a:	429a      	cmp	r2, r3
 801b30c:	d123      	bne.n	801b356 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801b30e:	69fb      	ldr	r3, [r7, #28]
 801b310:	2b0b      	cmp	r3, #11
 801b312:	d106      	bne.n	801b322 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801b314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b318:	f043 0303 	orr.w	r3, r3, #3
 801b31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b320:	e075      	b.n	801b40e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801b322:	69ba      	ldr	r2, [r7, #24]
 801b324:	697b      	ldr	r3, [r7, #20]
 801b326:	429a      	cmp	r2, r3
 801b328:	d005      	beq.n	801b336 <create_name+0x202>
 801b32a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b32e:	f043 0303 	orr.w	r3, r3, #3
 801b332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801b336:	69ba      	ldr	r2, [r7, #24]
 801b338:	697b      	ldr	r3, [r7, #20]
 801b33a:	429a      	cmp	r2, r3
 801b33c:	d866      	bhi.n	801b40c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801b33e:	697b      	ldr	r3, [r7, #20]
 801b340:	61bb      	str	r3, [r7, #24]
 801b342:	2308      	movs	r3, #8
 801b344:	623b      	str	r3, [r7, #32]
 801b346:	230b      	movs	r3, #11
 801b348:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801b34a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b34e:	009b      	lsls	r3, r3, #2
 801b350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b354:	e051      	b.n	801b3fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801b356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b358:	2b7f      	cmp	r3, #127	; 0x7f
 801b35a:	d914      	bls.n	801b386 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801b35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b35e:	2100      	movs	r1, #0
 801b360:	4618      	mov	r0, r3
 801b362:	f002 f859 	bl	801d418 <ff_convert>
 801b366:	4603      	mov	r3, r0
 801b368:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801b36a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d004      	beq.n	801b37a <create_name+0x246>
 801b370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b372:	3b80      	subs	r3, #128	; 0x80
 801b374:	4a23      	ldr	r2, [pc, #140]	; (801b404 <create_name+0x2d0>)
 801b376:	5cd3      	ldrb	r3, [r2, r3]
 801b378:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801b37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b37e:	f043 0302 	orr.w	r3, r3, #2
 801b382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801b386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d007      	beq.n	801b39c <create_name+0x268>
 801b38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b38e:	4619      	mov	r1, r3
 801b390:	481d      	ldr	r0, [pc, #116]	; (801b408 <create_name+0x2d4>)
 801b392:	f7fe fa96 	bl	80198c2 <chk_chr>
 801b396:	4603      	mov	r3, r0
 801b398:	2b00      	cmp	r3, #0
 801b39a:	d008      	beq.n	801b3ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801b39c:	235f      	movs	r3, #95	; 0x5f
 801b39e:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3a4:	f043 0303 	orr.w	r3, r3, #3
 801b3a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3ac:	e01b      	b.n	801b3e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3b0:	2b40      	cmp	r3, #64	; 0x40
 801b3b2:	d909      	bls.n	801b3c8 <create_name+0x294>
 801b3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3b6:	2b5a      	cmp	r3, #90	; 0x5a
 801b3b8:	d806      	bhi.n	801b3c8 <create_name+0x294>
					b |= 2;
 801b3ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b3be:	f043 0302 	orr.w	r3, r3, #2
 801b3c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b3c6:	e00e      	b.n	801b3e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801b3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3ca:	2b60      	cmp	r3, #96	; 0x60
 801b3cc:	d90b      	bls.n	801b3e6 <create_name+0x2b2>
 801b3ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3d0:	2b7a      	cmp	r3, #122	; 0x7a
 801b3d2:	d808      	bhi.n	801b3e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801b3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b3d8:	f043 0301 	orr.w	r3, r3, #1
 801b3dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b3e2:	3b20      	subs	r3, #32
 801b3e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801b3e6:	6a3b      	ldr	r3, [r7, #32]
 801b3e8:	1c5a      	adds	r2, r3, #1
 801b3ea:	623a      	str	r2, [r7, #32]
 801b3ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b3ee:	b2d1      	uxtb	r1, r2
 801b3f0:	687a      	ldr	r2, [r7, #4]
 801b3f2:	4413      	add	r3, r2
 801b3f4:	460a      	mov	r2, r1
 801b3f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801b3fa:	e763      	b.n	801b2c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801b3fc:	bf00      	nop
 801b3fe:	e006      	b.n	801b40e <create_name+0x2da>
 801b400:	08029ce0 	.word	0x08029ce0
 801b404:	08037664 	.word	0x08037664
 801b408:	08029cec 	.word	0x08029cec
			if (si > di) break;			/* No extension */
 801b40c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b414:	2be5      	cmp	r3, #229	; 0xe5
 801b416:	d103      	bne.n	801b420 <create_name+0x2ec>
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	2205      	movs	r2, #5
 801b41c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801b420:	69fb      	ldr	r3, [r7, #28]
 801b422:	2b08      	cmp	r3, #8
 801b424:	d104      	bne.n	801b430 <create_name+0x2fc>
 801b426:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b42a:	009b      	lsls	r3, r3, #2
 801b42c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801b430:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b434:	f003 030c 	and.w	r3, r3, #12
 801b438:	2b0c      	cmp	r3, #12
 801b43a:	d005      	beq.n	801b448 <create_name+0x314>
 801b43c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b440:	f003 0303 	and.w	r3, r3, #3
 801b444:	2b03      	cmp	r3, #3
 801b446:	d105      	bne.n	801b454 <create_name+0x320>
 801b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b44c:	f043 0302 	orr.w	r3, r3, #2
 801b450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801b454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b458:	f003 0302 	and.w	r3, r3, #2
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d117      	bne.n	801b490 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801b460:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b464:	f003 0303 	and.w	r3, r3, #3
 801b468:	2b01      	cmp	r3, #1
 801b46a:	d105      	bne.n	801b478 <create_name+0x344>
 801b46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b470:	f043 0310 	orr.w	r3, r3, #16
 801b474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801b478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b47c:	f003 030c 	and.w	r3, r3, #12
 801b480:	2b04      	cmp	r3, #4
 801b482:	d105      	bne.n	801b490 <create_name+0x35c>
 801b484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b488:	f043 0308 	orr.w	r3, r3, #8
 801b48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b496:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801b49a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801b49c:	4618      	mov	r0, r3
 801b49e:	3728      	adds	r7, #40	; 0x28
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}

0801b4a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801b4a4:	b580      	push	{r7, lr}
 801b4a6:	b086      	sub	sp, #24
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
 801b4ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801b4b2:	693b      	ldr	r3, [r7, #16]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801b4b8:	e002      	b.n	801b4c0 <follow_path+0x1c>
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	3301      	adds	r3, #1
 801b4be:	603b      	str	r3, [r7, #0]
 801b4c0:	683b      	ldr	r3, [r7, #0]
 801b4c2:	781b      	ldrb	r3, [r3, #0]
 801b4c4:	2b2f      	cmp	r3, #47	; 0x2f
 801b4c6:	d0f8      	beq.n	801b4ba <follow_path+0x16>
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	2b5c      	cmp	r3, #92	; 0x5c
 801b4ce:	d0f4      	beq.n	801b4ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801b4d0:	693b      	ldr	r3, [r7, #16]
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801b4d6:	683b      	ldr	r3, [r7, #0]
 801b4d8:	781b      	ldrb	r3, [r3, #0]
 801b4da:	2b1f      	cmp	r3, #31
 801b4dc:	d80a      	bhi.n	801b4f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	2280      	movs	r2, #128	; 0x80
 801b4e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801b4e6:	2100      	movs	r1, #0
 801b4e8:	6878      	ldr	r0, [r7, #4]
 801b4ea:	f7fe ff35 	bl	801a358 <dir_sdi>
 801b4ee:	4603      	mov	r3, r0
 801b4f0:	75fb      	strb	r3, [r7, #23]
 801b4f2:	e043      	b.n	801b57c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b4f4:	463b      	mov	r3, r7
 801b4f6:	4619      	mov	r1, r3
 801b4f8:	6878      	ldr	r0, [r7, #4]
 801b4fa:	f7ff fe1b 	bl	801b134 <create_name>
 801b4fe:	4603      	mov	r3, r0
 801b500:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b502:	7dfb      	ldrb	r3, [r7, #23]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d134      	bne.n	801b572 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7ff fb7d 	bl	801ac08 <dir_find>
 801b50e:	4603      	mov	r3, r0
 801b510:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b518:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801b51a:	7dfb      	ldrb	r3, [r7, #23]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d00a      	beq.n	801b536 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801b520:	7dfb      	ldrb	r3, [r7, #23]
 801b522:	2b04      	cmp	r3, #4
 801b524:	d127      	bne.n	801b576 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801b526:	7afb      	ldrb	r3, [r7, #11]
 801b528:	f003 0304 	and.w	r3, r3, #4
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d122      	bne.n	801b576 <follow_path+0xd2>
 801b530:	2305      	movs	r3, #5
 801b532:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801b534:	e01f      	b.n	801b576 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b536:	7afb      	ldrb	r3, [r7, #11]
 801b538:	f003 0304 	and.w	r3, r3, #4
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d11c      	bne.n	801b57a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	799b      	ldrb	r3, [r3, #6]
 801b544:	f003 0310 	and.w	r3, r3, #16
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d102      	bne.n	801b552 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801b54c:	2305      	movs	r3, #5
 801b54e:	75fb      	strb	r3, [r7, #23]
 801b550:	e014      	b.n	801b57c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	695b      	ldr	r3, [r3, #20]
 801b55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b560:	4413      	add	r3, r2
 801b562:	4619      	mov	r1, r3
 801b564:	68f8      	ldr	r0, [r7, #12]
 801b566:	f7ff f87e 	bl	801a666 <ld_clust>
 801b56a:	4602      	mov	r2, r0
 801b56c:	693b      	ldr	r3, [r7, #16]
 801b56e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b570:	e7c0      	b.n	801b4f4 <follow_path+0x50>
			if (res != FR_OK) break;
 801b572:	bf00      	nop
 801b574:	e002      	b.n	801b57c <follow_path+0xd8>
				break;
 801b576:	bf00      	nop
 801b578:	e000      	b.n	801b57c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b57a:	bf00      	nop
			}
		}
	}

	return res;
 801b57c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b57e:	4618      	mov	r0, r3
 801b580:	3718      	adds	r7, #24
 801b582:	46bd      	mov	sp, r7
 801b584:	bd80      	pop	{r7, pc}

0801b586 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801b586:	b480      	push	{r7}
 801b588:	b087      	sub	sp, #28
 801b58a:	af00      	add	r7, sp, #0
 801b58c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801b58e:	f04f 33ff 	mov.w	r3, #4294967295
 801b592:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d031      	beq.n	801b600 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	617b      	str	r3, [r7, #20]
 801b5a2:	e002      	b.n	801b5aa <get_ldnumber+0x24>
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	3301      	adds	r3, #1
 801b5a8:	617b      	str	r3, [r7, #20]
 801b5aa:	697b      	ldr	r3, [r7, #20]
 801b5ac:	781b      	ldrb	r3, [r3, #0]
 801b5ae:	2b1f      	cmp	r3, #31
 801b5b0:	d903      	bls.n	801b5ba <get_ldnumber+0x34>
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	781b      	ldrb	r3, [r3, #0]
 801b5b6:	2b3a      	cmp	r3, #58	; 0x3a
 801b5b8:	d1f4      	bne.n	801b5a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801b5ba:	697b      	ldr	r3, [r7, #20]
 801b5bc:	781b      	ldrb	r3, [r3, #0]
 801b5be:	2b3a      	cmp	r3, #58	; 0x3a
 801b5c0:	d11c      	bne.n	801b5fc <get_ldnumber+0x76>
			tp = *path;
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	1c5a      	adds	r2, r3, #1
 801b5cc:	60fa      	str	r2, [r7, #12]
 801b5ce:	781b      	ldrb	r3, [r3, #0]
 801b5d0:	3b30      	subs	r3, #48	; 0x30
 801b5d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801b5d4:	68bb      	ldr	r3, [r7, #8]
 801b5d6:	2b09      	cmp	r3, #9
 801b5d8:	d80e      	bhi.n	801b5f8 <get_ldnumber+0x72>
 801b5da:	68fa      	ldr	r2, [r7, #12]
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d10a      	bne.n	801b5f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801b5e2:	68bb      	ldr	r3, [r7, #8]
 801b5e4:	2b01      	cmp	r3, #1
 801b5e6:	d807      	bhi.n	801b5f8 <get_ldnumber+0x72>
					vol = (int)i;
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801b5ec:	697b      	ldr	r3, [r7, #20]
 801b5ee:	3301      	adds	r3, #1
 801b5f0:	617b      	str	r3, [r7, #20]
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	697a      	ldr	r2, [r7, #20]
 801b5f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801b5f8:	693b      	ldr	r3, [r7, #16]
 801b5fa:	e002      	b.n	801b602 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801b600:	693b      	ldr	r3, [r7, #16]
}
 801b602:	4618      	mov	r0, r3
 801b604:	371c      	adds	r7, #28
 801b606:	46bd      	mov	sp, r7
 801b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60c:	4770      	bx	lr
	...

0801b610 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b082      	sub	sp, #8
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	2200      	movs	r2, #0
 801b61e:	70da      	strb	r2, [r3, #3]
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f04f 32ff 	mov.w	r2, #4294967295
 801b626:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801b628:	6839      	ldr	r1, [r7, #0]
 801b62a:	6878      	ldr	r0, [r7, #4]
 801b62c:	f7fe fb14 	bl	8019c58 <move_window>
 801b630:	4603      	mov	r3, r0
 801b632:	2b00      	cmp	r3, #0
 801b634:	d001      	beq.n	801b63a <check_fs+0x2a>
 801b636:	2304      	movs	r3, #4
 801b638:	e038      	b.n	801b6ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	3334      	adds	r3, #52	; 0x34
 801b63e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801b642:	4618      	mov	r0, r3
 801b644:	f7fe f858 	bl	80196f8 <ld_word>
 801b648:	4603      	mov	r3, r0
 801b64a:	461a      	mov	r2, r3
 801b64c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801b650:	429a      	cmp	r2, r3
 801b652:	d001      	beq.n	801b658 <check_fs+0x48>
 801b654:	2303      	movs	r3, #3
 801b656:	e029      	b.n	801b6ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b65e:	2be9      	cmp	r3, #233	; 0xe9
 801b660:	d009      	beq.n	801b676 <check_fs+0x66>
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b668:	2beb      	cmp	r3, #235	; 0xeb
 801b66a:	d11e      	bne.n	801b6aa <check_fs+0x9a>
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801b672:	2b90      	cmp	r3, #144	; 0x90
 801b674:	d119      	bne.n	801b6aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	3334      	adds	r3, #52	; 0x34
 801b67a:	3336      	adds	r3, #54	; 0x36
 801b67c:	4618      	mov	r0, r3
 801b67e:	f7fe f853 	bl	8019728 <ld_dword>
 801b682:	4603      	mov	r3, r0
 801b684:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801b688:	4a0a      	ldr	r2, [pc, #40]	; (801b6b4 <check_fs+0xa4>)
 801b68a:	4293      	cmp	r3, r2
 801b68c:	d101      	bne.n	801b692 <check_fs+0x82>
 801b68e:	2300      	movs	r3, #0
 801b690:	e00c      	b.n	801b6ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	3334      	adds	r3, #52	; 0x34
 801b696:	3352      	adds	r3, #82	; 0x52
 801b698:	4618      	mov	r0, r3
 801b69a:	f7fe f845 	bl	8019728 <ld_dword>
 801b69e:	4603      	mov	r3, r0
 801b6a0:	4a05      	ldr	r2, [pc, #20]	; (801b6b8 <check_fs+0xa8>)
 801b6a2:	4293      	cmp	r3, r2
 801b6a4:	d101      	bne.n	801b6aa <check_fs+0x9a>
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	e000      	b.n	801b6ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b6aa:	2302      	movs	r3, #2
}
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	3708      	adds	r7, #8
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bd80      	pop	{r7, pc}
 801b6b4:	00544146 	.word	0x00544146
 801b6b8:	33544146 	.word	0x33544146

0801b6bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b096      	sub	sp, #88	; 0x58
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	60f8      	str	r0, [r7, #12]
 801b6c4:	60b9      	str	r1, [r7, #8]
 801b6c6:	4613      	mov	r3, r2
 801b6c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b6d0:	68f8      	ldr	r0, [r7, #12]
 801b6d2:	f7ff ff58 	bl	801b586 <get_ldnumber>
 801b6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	da01      	bge.n	801b6e2 <find_volume+0x26>
 801b6de:	230b      	movs	r3, #11
 801b6e0:	e22d      	b.n	801bb3e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b6e2:	4aa1      	ldr	r2, [pc, #644]	; (801b968 <find_volume+0x2ac>)
 801b6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b6ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d101      	bne.n	801b6f6 <find_volume+0x3a>
 801b6f2:	230c      	movs	r3, #12
 801b6f4:	e223      	b.n	801bb3e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b6fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b6fc:	79fb      	ldrb	r3, [r7, #7]
 801b6fe:	f023 0301 	bic.w	r3, r3, #1
 801b702:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b706:	781b      	ldrb	r3, [r3, #0]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d01a      	beq.n	801b742 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b70e:	785b      	ldrb	r3, [r3, #1]
 801b710:	4618      	mov	r0, r3
 801b712:	f7fd ff4b 	bl	80195ac <disk_status>
 801b716:	4603      	mov	r3, r0
 801b718:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b71c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b720:	f003 0301 	and.w	r3, r3, #1
 801b724:	2b00      	cmp	r3, #0
 801b726:	d10c      	bne.n	801b742 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b728:	79fb      	ldrb	r3, [r7, #7]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d007      	beq.n	801b73e <find_volume+0x82>
 801b72e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b732:	f003 0304 	and.w	r3, r3, #4
 801b736:	2b00      	cmp	r3, #0
 801b738:	d001      	beq.n	801b73e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b73a:	230a      	movs	r3, #10
 801b73c:	e1ff      	b.n	801bb3e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801b73e:	2300      	movs	r3, #0
 801b740:	e1fd      	b.n	801bb3e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b744:	2200      	movs	r2, #0
 801b746:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b74a:	b2da      	uxtb	r2, r3
 801b74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b74e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b752:	785b      	ldrb	r3, [r3, #1]
 801b754:	4618      	mov	r0, r3
 801b756:	f7fd ff43 	bl	80195e0 <disk_initialize>
 801b75a:	4603      	mov	r3, r0
 801b75c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b764:	f003 0301 	and.w	r3, r3, #1
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d001      	beq.n	801b770 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b76c:	2303      	movs	r3, #3
 801b76e:	e1e6      	b.n	801bb3e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b770:	79fb      	ldrb	r3, [r7, #7]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d007      	beq.n	801b786 <find_volume+0xca>
 801b776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b77a:	f003 0304 	and.w	r3, r3, #4
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d001      	beq.n	801b786 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b782:	230a      	movs	r3, #10
 801b784:	e1db      	b.n	801bb3e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b786:	2300      	movs	r3, #0
 801b788:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b78a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801b78c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b78e:	f7ff ff3f 	bl	801b610 <check_fs>
 801b792:	4603      	mov	r3, r0
 801b794:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b79c:	2b02      	cmp	r3, #2
 801b79e:	d149      	bne.n	801b834 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b7a0:	2300      	movs	r3, #0
 801b7a2:	643b      	str	r3, [r7, #64]	; 0x40
 801b7a4:	e01e      	b.n	801b7e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7ae:	011b      	lsls	r3, r3, #4
 801b7b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801b7b4:	4413      	add	r3, r2
 801b7b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ba:	3304      	adds	r3, #4
 801b7bc:	781b      	ldrb	r3, [r3, #0]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d006      	beq.n	801b7d0 <find_volume+0x114>
 801b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7c4:	3308      	adds	r3, #8
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7fd ffae 	bl	8019728 <ld_dword>
 801b7cc:	4602      	mov	r2, r0
 801b7ce:	e000      	b.n	801b7d2 <find_volume+0x116>
 801b7d0:	2200      	movs	r2, #0
 801b7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7d4:	009b      	lsls	r3, r3, #2
 801b7d6:	3358      	adds	r3, #88	; 0x58
 801b7d8:	443b      	add	r3, r7
 801b7da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7e0:	3301      	adds	r3, #1
 801b7e2:	643b      	str	r3, [r7, #64]	; 0x40
 801b7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7e6:	2b03      	cmp	r3, #3
 801b7e8:	d9dd      	bls.n	801b7a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801b7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d002      	beq.n	801b7fa <find_volume+0x13e>
 801b7f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7f6:	3b01      	subs	r3, #1
 801b7f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b7fc:	009b      	lsls	r3, r3, #2
 801b7fe:	3358      	adds	r3, #88	; 0x58
 801b800:	443b      	add	r3, r7
 801b802:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b806:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d005      	beq.n	801b81a <find_volume+0x15e>
 801b80e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801b810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b812:	f7ff fefd 	bl	801b610 <check_fs>
 801b816:	4603      	mov	r3, r0
 801b818:	e000      	b.n	801b81c <find_volume+0x160>
 801b81a:	2303      	movs	r3, #3
 801b81c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b824:	2b01      	cmp	r3, #1
 801b826:	d905      	bls.n	801b834 <find_volume+0x178>
 801b828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b82a:	3301      	adds	r3, #1
 801b82c:	643b      	str	r3, [r7, #64]	; 0x40
 801b82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b830:	2b03      	cmp	r3, #3
 801b832:	d9e2      	bls.n	801b7fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b838:	2b04      	cmp	r3, #4
 801b83a:	d101      	bne.n	801b840 <find_volume+0x184>
 801b83c:	2301      	movs	r3, #1
 801b83e:	e17e      	b.n	801bb3e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b844:	2b01      	cmp	r3, #1
 801b846:	d901      	bls.n	801b84c <find_volume+0x190>
 801b848:	230d      	movs	r3, #13
 801b84a:	e178      	b.n	801bb3e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b84e:	3334      	adds	r3, #52	; 0x34
 801b850:	330b      	adds	r3, #11
 801b852:	4618      	mov	r0, r3
 801b854:	f7fd ff50 	bl	80196f8 <ld_word>
 801b858:	4603      	mov	r3, r0
 801b85a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b85e:	d001      	beq.n	801b864 <find_volume+0x1a8>
 801b860:	230d      	movs	r3, #13
 801b862:	e16c      	b.n	801bb3e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b866:	3334      	adds	r3, #52	; 0x34
 801b868:	3316      	adds	r3, #22
 801b86a:	4618      	mov	r0, r3
 801b86c:	f7fd ff44 	bl	80196f8 <ld_word>
 801b870:	4603      	mov	r3, r0
 801b872:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b876:	2b00      	cmp	r3, #0
 801b878:	d106      	bne.n	801b888 <find_volume+0x1cc>
 801b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b87c:	3334      	adds	r3, #52	; 0x34
 801b87e:	3324      	adds	r3, #36	; 0x24
 801b880:	4618      	mov	r0, r3
 801b882:	f7fd ff51 	bl	8019728 <ld_dword>
 801b886:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b88a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b88c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b890:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b896:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b89a:	789b      	ldrb	r3, [r3, #2]
 801b89c:	2b01      	cmp	r3, #1
 801b89e:	d005      	beq.n	801b8ac <find_volume+0x1f0>
 801b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8a2:	789b      	ldrb	r3, [r3, #2]
 801b8a4:	2b02      	cmp	r3, #2
 801b8a6:	d001      	beq.n	801b8ac <find_volume+0x1f0>
 801b8a8:	230d      	movs	r3, #13
 801b8aa:	e148      	b.n	801bb3e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8ae:	789b      	ldrb	r3, [r3, #2]
 801b8b0:	461a      	mov	r2, r3
 801b8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8b4:	fb02 f303 	mul.w	r3, r2, r3
 801b8b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b8c0:	b29a      	uxth	r2, r3
 801b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8c8:	895b      	ldrh	r3, [r3, #10]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d008      	beq.n	801b8e0 <find_volume+0x224>
 801b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8d0:	895b      	ldrh	r3, [r3, #10]
 801b8d2:	461a      	mov	r2, r3
 801b8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8d6:	895b      	ldrh	r3, [r3, #10]
 801b8d8:	3b01      	subs	r3, #1
 801b8da:	4013      	ands	r3, r2
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d001      	beq.n	801b8e4 <find_volume+0x228>
 801b8e0:	230d      	movs	r3, #13
 801b8e2:	e12c      	b.n	801bb3e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8e6:	3334      	adds	r3, #52	; 0x34
 801b8e8:	3311      	adds	r3, #17
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7fd ff04 	bl	80196f8 <ld_word>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	461a      	mov	r2, r3
 801b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b8fa:	891b      	ldrh	r3, [r3, #8]
 801b8fc:	f003 030f 	and.w	r3, r3, #15
 801b900:	b29b      	uxth	r3, r3
 801b902:	2b00      	cmp	r3, #0
 801b904:	d001      	beq.n	801b90a <find_volume+0x24e>
 801b906:	230d      	movs	r3, #13
 801b908:	e119      	b.n	801bb3e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b90c:	3334      	adds	r3, #52	; 0x34
 801b90e:	3313      	adds	r3, #19
 801b910:	4618      	mov	r0, r3
 801b912:	f7fd fef1 	bl	80196f8 <ld_word>
 801b916:	4603      	mov	r3, r0
 801b918:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d106      	bne.n	801b92e <find_volume+0x272>
 801b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b922:	3334      	adds	r3, #52	; 0x34
 801b924:	3320      	adds	r3, #32
 801b926:	4618      	mov	r0, r3
 801b928:	f7fd fefe 	bl	8019728 <ld_dword>
 801b92c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b930:	3334      	adds	r3, #52	; 0x34
 801b932:	330e      	adds	r3, #14
 801b934:	4618      	mov	r0, r3
 801b936:	f7fd fedf 	bl	80196f8 <ld_word>
 801b93a:	4603      	mov	r3, r0
 801b93c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b93e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b940:	2b00      	cmp	r3, #0
 801b942:	d101      	bne.n	801b948 <find_volume+0x28c>
 801b944:	230d      	movs	r3, #13
 801b946:	e0fa      	b.n	801bb3e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b948:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b94c:	4413      	add	r3, r2
 801b94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b950:	8912      	ldrh	r2, [r2, #8]
 801b952:	0912      	lsrs	r2, r2, #4
 801b954:	b292      	uxth	r2, r2
 801b956:	4413      	add	r3, r2
 801b958:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b95a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b95e:	429a      	cmp	r2, r3
 801b960:	d204      	bcs.n	801b96c <find_volume+0x2b0>
 801b962:	230d      	movs	r3, #13
 801b964:	e0eb      	b.n	801bb3e <find_volume+0x482>
 801b966:	bf00      	nop
 801b968:	2000b304 	.word	0x2000b304
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b96c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b970:	1ad3      	subs	r3, r2, r3
 801b972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b974:	8952      	ldrh	r2, [r2, #10]
 801b976:	fbb3 f3f2 	udiv	r3, r3, r2
 801b97a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d101      	bne.n	801b986 <find_volume+0x2ca>
 801b982:	230d      	movs	r3, #13
 801b984:	e0db      	b.n	801bb3e <find_volume+0x482>
		fmt = FS_FAT32;
 801b986:	2303      	movs	r3, #3
 801b988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b98e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801b992:	4293      	cmp	r3, r2
 801b994:	d802      	bhi.n	801b99c <find_volume+0x2e0>
 801b996:	2302      	movs	r3, #2
 801b998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b99e:	f640 72f5 	movw	r2, #4085	; 0xff5
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d802      	bhi.n	801b9ac <find_volume+0x2f0>
 801b9a6:	2301      	movs	r3, #1
 801b9a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b9ae:	1c9a      	adds	r2, r3, #2
 801b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b9b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b9ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b9be:	441a      	add	r2, r3
 801b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b9c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9c8:	441a      	add	r2, r3
 801b9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801b9ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b9d2:	2b03      	cmp	r3, #3
 801b9d4:	d11e      	bne.n	801ba14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9d8:	3334      	adds	r3, #52	; 0x34
 801b9da:	332a      	adds	r3, #42	; 0x2a
 801b9dc:	4618      	mov	r0, r3
 801b9de:	f7fd fe8b 	bl	80196f8 <ld_word>
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d001      	beq.n	801b9ec <find_volume+0x330>
 801b9e8:	230d      	movs	r3, #13
 801b9ea:	e0a8      	b.n	801bb3e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9ee:	891b      	ldrh	r3, [r3, #8]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d001      	beq.n	801b9f8 <find_volume+0x33c>
 801b9f4:	230d      	movs	r3, #13
 801b9f6:	e0a2      	b.n	801bb3e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9fa:	3334      	adds	r3, #52	; 0x34
 801b9fc:	332c      	adds	r3, #44	; 0x2c
 801b9fe:	4618      	mov	r0, r3
 801ba00:	f7fd fe92 	bl	8019728 <ld_dword>
 801ba04:	4602      	mov	r2, r0
 801ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba0c:	699b      	ldr	r3, [r3, #24]
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	647b      	str	r3, [r7, #68]	; 0x44
 801ba12:	e01f      	b.n	801ba54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801ba14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba16:	891b      	ldrh	r3, [r3, #8]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d101      	bne.n	801ba20 <find_volume+0x364>
 801ba1c:	230d      	movs	r3, #13
 801ba1e:	e08e      	b.n	801bb3e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ba26:	441a      	add	r2, r3
 801ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801ba2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ba30:	2b02      	cmp	r3, #2
 801ba32:	d103      	bne.n	801ba3c <find_volume+0x380>
 801ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba36:	699b      	ldr	r3, [r3, #24]
 801ba38:	005b      	lsls	r3, r3, #1
 801ba3a:	e00a      	b.n	801ba52 <find_volume+0x396>
 801ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba3e:	699a      	ldr	r2, [r3, #24]
 801ba40:	4613      	mov	r3, r2
 801ba42:	005b      	lsls	r3, r3, #1
 801ba44:	4413      	add	r3, r2
 801ba46:	085a      	lsrs	r2, r3, #1
 801ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba4a:	699b      	ldr	r3, [r3, #24]
 801ba4c:	f003 0301 	and.w	r3, r3, #1
 801ba50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801ba52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801ba54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba56:	69da      	ldr	r2, [r3, #28]
 801ba58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ba5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801ba5e:	0a5b      	lsrs	r3, r3, #9
 801ba60:	429a      	cmp	r2, r3
 801ba62:	d201      	bcs.n	801ba68 <find_volume+0x3ac>
 801ba64:	230d      	movs	r3, #13
 801ba66:	e06a      	b.n	801bb3e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 801ba6e:	615a      	str	r2, [r3, #20]
 801ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba72:	695a      	ldr	r2, [r3, #20]
 801ba74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801ba78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba7a:	2280      	movs	r2, #128	; 0x80
 801ba7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801ba7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801ba82:	2b03      	cmp	r3, #3
 801ba84:	d149      	bne.n	801bb1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba88:	3334      	adds	r3, #52	; 0x34
 801ba8a:	3330      	adds	r3, #48	; 0x30
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f7fd fe33 	bl	80196f8 <ld_word>
 801ba92:	4603      	mov	r3, r0
 801ba94:	2b01      	cmp	r3, #1
 801ba96:	d140      	bne.n	801bb1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801ba98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ba9a:	3301      	adds	r3, #1
 801ba9c:	4619      	mov	r1, r3
 801ba9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801baa0:	f7fe f8da 	bl	8019c58 <move_window>
 801baa4:	4603      	mov	r3, r0
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d137      	bne.n	801bb1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801baaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baac:	2200      	movs	r2, #0
 801baae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bab2:	3334      	adds	r3, #52	; 0x34
 801bab4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bab8:	4618      	mov	r0, r3
 801baba:	f7fd fe1d 	bl	80196f8 <ld_word>
 801babe:	4603      	mov	r3, r0
 801bac0:	461a      	mov	r2, r3
 801bac2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801bac6:	429a      	cmp	r2, r3
 801bac8:	d127      	bne.n	801bb1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bacc:	3334      	adds	r3, #52	; 0x34
 801bace:	4618      	mov	r0, r3
 801bad0:	f7fd fe2a 	bl	8019728 <ld_dword>
 801bad4:	4603      	mov	r3, r0
 801bad6:	4a1c      	ldr	r2, [pc, #112]	; (801bb48 <find_volume+0x48c>)
 801bad8:	4293      	cmp	r3, r2
 801bada:	d11e      	bne.n	801bb1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bade:	3334      	adds	r3, #52	; 0x34
 801bae0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801bae4:	4618      	mov	r0, r3
 801bae6:	f7fd fe1f 	bl	8019728 <ld_dword>
 801baea:	4603      	mov	r3, r0
 801baec:	4a17      	ldr	r2, [pc, #92]	; (801bb4c <find_volume+0x490>)
 801baee:	4293      	cmp	r3, r2
 801baf0:	d113      	bne.n	801bb1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baf4:	3334      	adds	r3, #52	; 0x34
 801baf6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801bafa:	4618      	mov	r0, r3
 801bafc:	f7fd fe14 	bl	8019728 <ld_dword>
 801bb00:	4602      	mov	r2, r0
 801bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb04:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb08:	3334      	adds	r3, #52	; 0x34
 801bb0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801bb0e:	4618      	mov	r0, r3
 801bb10:	f7fd fe0a 	bl	8019728 <ld_dword>
 801bb14:	4602      	mov	r2, r0
 801bb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb18:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801bb20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801bb22:	4b0b      	ldr	r3, [pc, #44]	; (801bb50 <find_volume+0x494>)
 801bb24:	881b      	ldrh	r3, [r3, #0]
 801bb26:	3301      	adds	r3, #1
 801bb28:	b29a      	uxth	r2, r3
 801bb2a:	4b09      	ldr	r3, [pc, #36]	; (801bb50 <find_volume+0x494>)
 801bb2c:	801a      	strh	r2, [r3, #0]
 801bb2e:	4b08      	ldr	r3, [pc, #32]	; (801bb50 <find_volume+0x494>)
 801bb30:	881a      	ldrh	r2, [r3, #0]
 801bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb34:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801bb36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801bb38:	f7fe f826 	bl	8019b88 <clear_lock>
#endif
	return FR_OK;
 801bb3c:	2300      	movs	r3, #0
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	3758      	adds	r7, #88	; 0x58
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}
 801bb46:	bf00      	nop
 801bb48:	41615252 	.word	0x41615252
 801bb4c:	61417272 	.word	0x61417272
 801bb50:	2000b30c 	.word	0x2000b30c

0801bb54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801bb54:	b580      	push	{r7, lr}
 801bb56:	b084      	sub	sp, #16
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	6078      	str	r0, [r7, #4]
 801bb5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801bb5e:	2309      	movs	r3, #9
 801bb60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d01c      	beq.n	801bba2 <validate+0x4e>
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d018      	beq.n	801bba2 <validate+0x4e>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	781b      	ldrb	r3, [r3, #0]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d013      	beq.n	801bba2 <validate+0x4e>
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	889a      	ldrh	r2, [r3, #4]
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	88db      	ldrh	r3, [r3, #6]
 801bb84:	429a      	cmp	r2, r3
 801bb86:	d10c      	bne.n	801bba2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	785b      	ldrb	r3, [r3, #1]
 801bb8e:	4618      	mov	r0, r3
 801bb90:	f7fd fd0c 	bl	80195ac <disk_status>
 801bb94:	4603      	mov	r3, r0
 801bb96:	f003 0301 	and.w	r3, r3, #1
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d101      	bne.n	801bba2 <validate+0x4e>
			res = FR_OK;
 801bb9e:	2300      	movs	r3, #0
 801bba0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801bba2:	7bfb      	ldrb	r3, [r7, #15]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d102      	bne.n	801bbae <validate+0x5a>
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	e000      	b.n	801bbb0 <validate+0x5c>
 801bbae:	2300      	movs	r3, #0
 801bbb0:	683a      	ldr	r2, [r7, #0]
 801bbb2:	6013      	str	r3, [r2, #0]
	return res;
 801bbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	3710      	adds	r7, #16
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}
	...

0801bbc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	b088      	sub	sp, #32
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	60f8      	str	r0, [r7, #12]
 801bbc8:	60b9      	str	r1, [r7, #8]
 801bbca:	4613      	mov	r3, r2
 801bbcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801bbce:	68bb      	ldr	r3, [r7, #8]
 801bbd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801bbd2:	f107 0310 	add.w	r3, r7, #16
 801bbd6:	4618      	mov	r0, r3
 801bbd8:	f7ff fcd5 	bl	801b586 <get_ldnumber>
 801bbdc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801bbde:	69fb      	ldr	r3, [r7, #28]
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	da01      	bge.n	801bbe8 <f_mount+0x28>
 801bbe4:	230b      	movs	r3, #11
 801bbe6:	e02b      	b.n	801bc40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801bbe8:	4a17      	ldr	r2, [pc, #92]	; (801bc48 <f_mount+0x88>)
 801bbea:	69fb      	ldr	r3, [r7, #28]
 801bbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bbf0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801bbf2:	69bb      	ldr	r3, [r7, #24]
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d005      	beq.n	801bc04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801bbf8:	69b8      	ldr	r0, [r7, #24]
 801bbfa:	f7fd ffc5 	bl	8019b88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801bbfe:	69bb      	ldr	r3, [r7, #24]
 801bc00:	2200      	movs	r2, #0
 801bc02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d002      	beq.n	801bc10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	2200      	movs	r2, #0
 801bc0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801bc10:	68fa      	ldr	r2, [r7, #12]
 801bc12:	490d      	ldr	r1, [pc, #52]	; (801bc48 <f_mount+0x88>)
 801bc14:	69fb      	ldr	r3, [r7, #28]
 801bc16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d002      	beq.n	801bc26 <f_mount+0x66>
 801bc20:	79fb      	ldrb	r3, [r7, #7]
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	d001      	beq.n	801bc2a <f_mount+0x6a>
 801bc26:	2300      	movs	r3, #0
 801bc28:	e00a      	b.n	801bc40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801bc2a:	f107 010c 	add.w	r1, r7, #12
 801bc2e:	f107 0308 	add.w	r3, r7, #8
 801bc32:	2200      	movs	r2, #0
 801bc34:	4618      	mov	r0, r3
 801bc36:	f7ff fd41 	bl	801b6bc <find_volume>
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc40:	4618      	mov	r0, r3
 801bc42:	3720      	adds	r7, #32
 801bc44:	46bd      	mov	sp, r7
 801bc46:	bd80      	pop	{r7, pc}
 801bc48:	2000b304 	.word	0x2000b304

0801bc4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b09a      	sub	sp, #104	; 0x68
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	60f8      	str	r0, [r7, #12]
 801bc54:	60b9      	str	r1, [r7, #8]
 801bc56:	4613      	mov	r3, r2
 801bc58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d101      	bne.n	801bc64 <f_open+0x18>
 801bc60:	2309      	movs	r3, #9
 801bc62:	e1bd      	b.n	801bfe0 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801bc64:	79fb      	ldrb	r3, [r7, #7]
 801bc66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bc6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801bc6c:	79fa      	ldrb	r2, [r7, #7]
 801bc6e:	f107 0110 	add.w	r1, r7, #16
 801bc72:	f107 0308 	add.w	r3, r7, #8
 801bc76:	4618      	mov	r0, r3
 801bc78:	f7ff fd20 	bl	801b6bc <find_volume>
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801bc82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	f040 81a1 	bne.w	801bfce <f_open+0x382>
		dj.obj.fs = fs;
 801bc8c:	693b      	ldr	r3, [r7, #16]
 801bc8e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 801bc90:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bc94:	f001 fba9 	bl	801d3ea <ff_memalloc>
 801bc98:	65b8      	str	r0, [r7, #88]	; 0x58
 801bc9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d101      	bne.n	801bca4 <f_open+0x58>
 801bca0:	2311      	movs	r3, #17
 801bca2:	e19d      	b.n	801bfe0 <f_open+0x394>
 801bca4:	693b      	ldr	r3, [r7, #16]
 801bca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bca8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801bcaa:	68ba      	ldr	r2, [r7, #8]
 801bcac:	f107 0314 	add.w	r3, r7, #20
 801bcb0:	4611      	mov	r1, r2
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	f7ff fbf6 	bl	801b4a4 <follow_path>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801bcbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d11a      	bne.n	801bcfc <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801bcc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801bcca:	b25b      	sxtb	r3, r3
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	da03      	bge.n	801bcd8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 801bcd0:	2306      	movs	r3, #6
 801bcd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801bcd6:	e011      	b.n	801bcfc <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801bcd8:	79fb      	ldrb	r3, [r7, #7]
 801bcda:	f023 0301 	bic.w	r3, r3, #1
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	bf14      	ite	ne
 801bce2:	2301      	movne	r3, #1
 801bce4:	2300      	moveq	r3, #0
 801bce6:	b2db      	uxtb	r3, r3
 801bce8:	461a      	mov	r2, r3
 801bcea:	f107 0314 	add.w	r3, r7, #20
 801bcee:	4611      	mov	r1, r2
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f7fd fe01 	bl	80198f8 <chk_lock>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801bcfc:	79fb      	ldrb	r3, [r7, #7]
 801bcfe:	f003 031c 	and.w	r3, r3, #28
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	d07f      	beq.n	801be06 <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 801bd06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d017      	beq.n	801bd3e <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801bd0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bd12:	2b04      	cmp	r3, #4
 801bd14:	d10e      	bne.n	801bd34 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801bd16:	f7fd fe4b 	bl	80199b0 <enq_lock>
 801bd1a:	4603      	mov	r3, r0
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d006      	beq.n	801bd2e <f_open+0xe2>
 801bd20:	f107 0314 	add.w	r3, r7, #20
 801bd24:	4618      	mov	r0, r3
 801bd26:	f7ff f82f 	bl	801ad88 <dir_register>
 801bd2a:	4603      	mov	r3, r0
 801bd2c:	e000      	b.n	801bd30 <f_open+0xe4>
 801bd2e:	2312      	movs	r3, #18
 801bd30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801bd34:	79fb      	ldrb	r3, [r7, #7]
 801bd36:	f043 0308 	orr.w	r3, r3, #8
 801bd3a:	71fb      	strb	r3, [r7, #7]
 801bd3c:	e010      	b.n	801bd60 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801bd3e:	7ebb      	ldrb	r3, [r7, #26]
 801bd40:	f003 0311 	and.w	r3, r3, #17
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d003      	beq.n	801bd50 <f_open+0x104>
					res = FR_DENIED;
 801bd48:	2307      	movs	r3, #7
 801bd4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801bd4e:	e007      	b.n	801bd60 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801bd50:	79fb      	ldrb	r3, [r7, #7]
 801bd52:	f003 0304 	and.w	r3, r3, #4
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d002      	beq.n	801bd60 <f_open+0x114>
 801bd5a:	2308      	movs	r3, #8
 801bd5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801bd60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d168      	bne.n	801be3a <f_open+0x1ee>
 801bd68:	79fb      	ldrb	r3, [r7, #7]
 801bd6a:	f003 0308 	and.w	r3, r3, #8
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d063      	beq.n	801be3a <f_open+0x1ee>
				dw = GET_FATTIME();
 801bd72:	f7fd fcb9 	bl	80196e8 <get_fattime>
 801bd76:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd7a:	330e      	adds	r3, #14
 801bd7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bd7e:	4618      	mov	r0, r3
 801bd80:	f7fd fd10 	bl	80197a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801bd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd86:	3316      	adds	r3, #22
 801bd88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7fd fd0a 	bl	80197a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801bd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bd92:	330b      	adds	r3, #11
 801bd94:	2220      	movs	r2, #32
 801bd96:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801bd98:	693b      	ldr	r3, [r7, #16]
 801bd9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bd9c:	4611      	mov	r1, r2
 801bd9e:	4618      	mov	r0, r3
 801bda0:	f7fe fc61 	bl	801a666 <ld_clust>
 801bda4:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801bda6:	693b      	ldr	r3, [r7, #16]
 801bda8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bdaa:	2200      	movs	r2, #0
 801bdac:	4618      	mov	r0, r3
 801bdae:	f7fe fc79 	bl	801a6a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801bdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdb4:	331c      	adds	r3, #28
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	4618      	mov	r0, r3
 801bdba:	f7fd fcf3 	bl	80197a4 <st_dword>
					fs->wflag = 1;
 801bdbe:	693b      	ldr	r3, [r7, #16]
 801bdc0:	2201      	movs	r2, #1
 801bdc2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801bdc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d037      	beq.n	801be3a <f_open+0x1ee>
						dw = fs->winsect;
 801bdca:	693b      	ldr	r3, [r7, #16]
 801bdcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bdce:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801bdd0:	f107 0314 	add.w	r3, r7, #20
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bdd8:	4618      	mov	r0, r3
 801bdda:	f7fe f98c 	bl	801a0f6 <remove_chain>
 801bdde:	4603      	mov	r3, r0
 801bde0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801bde4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d126      	bne.n	801be3a <f_open+0x1ee>
							res = move_window(fs, dw);
 801bdec:	693b      	ldr	r3, [r7, #16]
 801bdee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bdf0:	4618      	mov	r0, r3
 801bdf2:	f7fd ff31 	bl	8019c58 <move_window>
 801bdf6:	4603      	mov	r3, r0
 801bdf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801bdfc:	693b      	ldr	r3, [r7, #16]
 801bdfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801be00:	3a01      	subs	r2, #1
 801be02:	611a      	str	r2, [r3, #16]
 801be04:	e019      	b.n	801be3a <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801be06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d115      	bne.n	801be3a <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801be0e:	7ebb      	ldrb	r3, [r7, #26]
 801be10:	f003 0310 	and.w	r3, r3, #16
 801be14:	2b00      	cmp	r3, #0
 801be16:	d003      	beq.n	801be20 <f_open+0x1d4>
					res = FR_NO_FILE;
 801be18:	2304      	movs	r3, #4
 801be1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801be1e:	e00c      	b.n	801be3a <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801be20:	79fb      	ldrb	r3, [r7, #7]
 801be22:	f003 0302 	and.w	r3, r3, #2
 801be26:	2b00      	cmp	r3, #0
 801be28:	d007      	beq.n	801be3a <f_open+0x1ee>
 801be2a:	7ebb      	ldrb	r3, [r7, #26]
 801be2c:	f003 0301 	and.w	r3, r3, #1
 801be30:	2b00      	cmp	r3, #0
 801be32:	d002      	beq.n	801be3a <f_open+0x1ee>
						res = FR_DENIED;
 801be34:	2307      	movs	r3, #7
 801be36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801be3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d128      	bne.n	801be94 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801be42:	79fb      	ldrb	r3, [r7, #7]
 801be44:	f003 0308 	and.w	r3, r3, #8
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d003      	beq.n	801be54 <f_open+0x208>
				mode |= FA_MODIFIED;
 801be4c:	79fb      	ldrb	r3, [r7, #7]
 801be4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be52:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801be54:	693b      	ldr	r3, [r7, #16]
 801be56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801be5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801be62:	79fb      	ldrb	r3, [r7, #7]
 801be64:	f023 0301 	bic.w	r3, r3, #1
 801be68:	2b00      	cmp	r3, #0
 801be6a:	bf14      	ite	ne
 801be6c:	2301      	movne	r3, #1
 801be6e:	2300      	moveq	r3, #0
 801be70:	b2db      	uxtb	r3, r3
 801be72:	461a      	mov	r2, r3
 801be74:	f107 0314 	add.w	r3, r7, #20
 801be78:	4611      	mov	r1, r2
 801be7a:	4618      	mov	r0, r3
 801be7c:	f7fd fdba 	bl	80199f4 <inc_lock>
 801be80:	4602      	mov	r2, r0
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	691b      	ldr	r3, [r3, #16]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d102      	bne.n	801be94 <f_open+0x248>
 801be8e:	2302      	movs	r3, #2
 801be90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801be94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801be98:	2b00      	cmp	r3, #0
 801be9a:	f040 8095 	bne.w	801bfc8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bea2:	4611      	mov	r1, r2
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7fe fbde 	bl	801a666 <ld_clust>
 801beaa:	4602      	mov	r2, r0
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beb2:	331c      	adds	r3, #28
 801beb4:	4618      	mov	r0, r3
 801beb6:	f7fd fc37 	bl	8019728 <ld_dword>
 801beba:	4602      	mov	r2, r0
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	2200      	movs	r2, #0
 801bec4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801bec6:	693a      	ldr	r2, [r7, #16]
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801becc:	693b      	ldr	r3, [r7, #16]
 801bece:	88da      	ldrh	r2, [r3, #6]
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	79fa      	ldrb	r2, [r7, #7]
 801bed8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	2200      	movs	r2, #0
 801bede:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	2200      	movs	r2, #0
 801bee4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	2200      	movs	r2, #0
 801beea:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	3330      	adds	r3, #48	; 0x30
 801bef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bef4:	2100      	movs	r1, #0
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7fd fca1 	bl	801983e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801befc:	79fb      	ldrb	r3, [r7, #7]
 801befe:	f003 0320 	and.w	r3, r3, #32
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d060      	beq.n	801bfc8 <f_open+0x37c>
 801bf06:	68fb      	ldr	r3, [r7, #12]
 801bf08:	68db      	ldr	r3, [r3, #12]
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d05c      	beq.n	801bfc8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	68da      	ldr	r2, [r3, #12]
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801bf16:	693b      	ldr	r3, [r7, #16]
 801bf18:	895b      	ldrh	r3, [r3, #10]
 801bf1a:	025b      	lsls	r3, r3, #9
 801bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	689b      	ldr	r3, [r3, #8]
 801bf22:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	68db      	ldr	r3, [r3, #12]
 801bf28:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bf2a:	e016      	b.n	801bf5a <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bf30:	4618      	mov	r0, r3
 801bf32:	f7fd ff4c 	bl	8019dce <get_fat>
 801bf36:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801bf38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d802      	bhi.n	801bf44 <f_open+0x2f8>
 801bf3e:	2302      	movs	r3, #2
 801bf40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801bf44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf4a:	d102      	bne.n	801bf52 <f_open+0x306>
 801bf4c:	2301      	movs	r3, #1
 801bf4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bf52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bf54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf56:	1ad3      	subs	r3, r2, r3
 801bf58:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bf5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bf5e:	2b00      	cmp	r3, #0
 801bf60:	d103      	bne.n	801bf6a <f_open+0x31e>
 801bf62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bf64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d8e0      	bhi.n	801bf2c <f_open+0x2e0>
				}
				fp->clust = clst;
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bf6e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801bf70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d127      	bne.n	801bfc8 <f_open+0x37c>
 801bf78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d022      	beq.n	801bfc8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801bf82:	693b      	ldr	r3, [r7, #16]
 801bf84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7fd ff02 	bl	8019d90 <clust2sect>
 801bf8c:	64b8      	str	r0, [r7, #72]	; 0x48
 801bf8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d103      	bne.n	801bf9c <f_open+0x350>
						res = FR_INT_ERR;
 801bf94:	2302      	movs	r3, #2
 801bf96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801bf9a:	e015      	b.n	801bfc8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801bf9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bf9e:	0a5a      	lsrs	r2, r3, #9
 801bfa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bfa2:	441a      	add	r2, r3
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801bfa8:	693b      	ldr	r3, [r7, #16]
 801bfaa:	7858      	ldrb	r0, [r3, #1]
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	6a1a      	ldr	r2, [r3, #32]
 801bfb6:	2301      	movs	r3, #1
 801bfb8:	f7fd fb38 	bl	801962c <disk_read>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d002      	beq.n	801bfc8 <f_open+0x37c>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 801bfc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bfca:	f001 fa1a 	bl	801d402 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801bfce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d002      	beq.n	801bfdc <f_open+0x390>
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	2200      	movs	r2, #0
 801bfda:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801bfdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	3768      	adds	r7, #104	; 0x68
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}

0801bfe8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b08e      	sub	sp, #56	; 0x38
 801bfec:	af00      	add	r7, sp, #0
 801bfee:	60f8      	str	r0, [r7, #12]
 801bff0:	60b9      	str	r1, [r7, #8]
 801bff2:	607a      	str	r2, [r7, #4]
 801bff4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801bff6:	68bb      	ldr	r3, [r7, #8]
 801bff8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801bffa:	683b      	ldr	r3, [r7, #0]
 801bffc:	2200      	movs	r2, #0
 801bffe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	f107 0214 	add.w	r2, r7, #20
 801c006:	4611      	mov	r1, r2
 801c008:	4618      	mov	r0, r3
 801c00a:	f7ff fda3 	bl	801bb54 <validate>
 801c00e:	4603      	mov	r3, r0
 801c010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d107      	bne.n	801c02c <f_read+0x44>
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	7d5b      	ldrb	r3, [r3, #21]
 801c020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801c024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d002      	beq.n	801c032 <f_read+0x4a>
 801c02c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801c030:	e115      	b.n	801c25e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	7d1b      	ldrb	r3, [r3, #20]
 801c036:	f003 0301 	and.w	r3, r3, #1
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d101      	bne.n	801c042 <f_read+0x5a>
 801c03e:	2307      	movs	r3, #7
 801c040:	e10d      	b.n	801c25e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	68da      	ldr	r2, [r3, #12]
 801c046:	68fb      	ldr	r3, [r7, #12]
 801c048:	699b      	ldr	r3, [r3, #24]
 801c04a:	1ad3      	subs	r3, r2, r3
 801c04c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801c04e:	687a      	ldr	r2, [r7, #4]
 801c050:	6a3b      	ldr	r3, [r7, #32]
 801c052:	429a      	cmp	r2, r3
 801c054:	f240 80fe 	bls.w	801c254 <f_read+0x26c>
 801c058:	6a3b      	ldr	r3, [r7, #32]
 801c05a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801c05c:	e0fa      	b.n	801c254 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	699b      	ldr	r3, [r3, #24]
 801c062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c066:	2b00      	cmp	r3, #0
 801c068:	f040 80c6 	bne.w	801c1f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	699b      	ldr	r3, [r3, #24]
 801c070:	0a5b      	lsrs	r3, r3, #9
 801c072:	697a      	ldr	r2, [r7, #20]
 801c074:	8952      	ldrh	r2, [r2, #10]
 801c076:	3a01      	subs	r2, #1
 801c078:	4013      	ands	r3, r2
 801c07a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801c07c:	69fb      	ldr	r3, [r7, #28]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d12f      	bne.n	801c0e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	699b      	ldr	r3, [r3, #24]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d103      	bne.n	801c092 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	689b      	ldr	r3, [r3, #8]
 801c08e:	633b      	str	r3, [r7, #48]	; 0x30
 801c090:	e013      	b.n	801c0ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c096:	2b00      	cmp	r3, #0
 801c098:	d007      	beq.n	801c0aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	699b      	ldr	r3, [r3, #24]
 801c09e:	4619      	mov	r1, r3
 801c0a0:	68f8      	ldr	r0, [r7, #12]
 801c0a2:	f7fe f925 	bl	801a2f0 <clmt_clust>
 801c0a6:	6338      	str	r0, [r7, #48]	; 0x30
 801c0a8:	e007      	b.n	801c0ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801c0aa:	68fa      	ldr	r2, [r7, #12]
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	69db      	ldr	r3, [r3, #28]
 801c0b0:	4619      	mov	r1, r3
 801c0b2:	4610      	mov	r0, r2
 801c0b4:	f7fd fe8b 	bl	8019dce <get_fat>
 801c0b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801c0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0bc:	2b01      	cmp	r3, #1
 801c0be:	d804      	bhi.n	801c0ca <f_read+0xe2>
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	2202      	movs	r2, #2
 801c0c4:	755a      	strb	r2, [r3, #21]
 801c0c6:	2302      	movs	r3, #2
 801c0c8:	e0c9      	b.n	801c25e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0d0:	d104      	bne.n	801c0dc <f_read+0xf4>
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	755a      	strb	r2, [r3, #21]
 801c0d8:	2301      	movs	r3, #1
 801c0da:	e0c0      	b.n	801c25e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c0e2:	697a      	ldr	r2, [r7, #20]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	69db      	ldr	r3, [r3, #28]
 801c0e8:	4619      	mov	r1, r3
 801c0ea:	4610      	mov	r0, r2
 801c0ec:	f7fd fe50 	bl	8019d90 <clust2sect>
 801c0f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c0f2:	69bb      	ldr	r3, [r7, #24]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d104      	bne.n	801c102 <f_read+0x11a>
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	2202      	movs	r2, #2
 801c0fc:	755a      	strb	r2, [r3, #21]
 801c0fe:	2302      	movs	r3, #2
 801c100:	e0ad      	b.n	801c25e <f_read+0x276>
			sect += csect;
 801c102:	69ba      	ldr	r2, [r7, #24]
 801c104:	69fb      	ldr	r3, [r7, #28]
 801c106:	4413      	add	r3, r2
 801c108:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801c10a:	687b      	ldr	r3, [r7, #4]
 801c10c:	0a5b      	lsrs	r3, r3, #9
 801c10e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c112:	2b00      	cmp	r3, #0
 801c114:	d039      	beq.n	801c18a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c116:	69fa      	ldr	r2, [r7, #28]
 801c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c11a:	4413      	add	r3, r2
 801c11c:	697a      	ldr	r2, [r7, #20]
 801c11e:	8952      	ldrh	r2, [r2, #10]
 801c120:	4293      	cmp	r3, r2
 801c122:	d905      	bls.n	801c130 <f_read+0x148>
					cc = fs->csize - csect;
 801c124:	697b      	ldr	r3, [r7, #20]
 801c126:	895b      	ldrh	r3, [r3, #10]
 801c128:	461a      	mov	r2, r3
 801c12a:	69fb      	ldr	r3, [r7, #28]
 801c12c:	1ad3      	subs	r3, r2, r3
 801c12e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	7858      	ldrb	r0, [r3, #1]
 801c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c136:	69ba      	ldr	r2, [r7, #24]
 801c138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c13a:	f7fd fa77 	bl	801962c <disk_read>
 801c13e:	4603      	mov	r3, r0
 801c140:	2b00      	cmp	r3, #0
 801c142:	d004      	beq.n	801c14e <f_read+0x166>
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2201      	movs	r2, #1
 801c148:	755a      	strb	r2, [r3, #21]
 801c14a:	2301      	movs	r3, #1
 801c14c:	e087      	b.n	801c25e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	7d1b      	ldrb	r3, [r3, #20]
 801c152:	b25b      	sxtb	r3, r3
 801c154:	2b00      	cmp	r3, #0
 801c156:	da14      	bge.n	801c182 <f_read+0x19a>
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	6a1a      	ldr	r2, [r3, #32]
 801c15c:	69bb      	ldr	r3, [r7, #24]
 801c15e:	1ad3      	subs	r3, r2, r3
 801c160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c162:	429a      	cmp	r2, r3
 801c164:	d90d      	bls.n	801c182 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	6a1a      	ldr	r2, [r3, #32]
 801c16a:	69bb      	ldr	r3, [r7, #24]
 801c16c:	1ad3      	subs	r3, r2, r3
 801c16e:	025b      	lsls	r3, r3, #9
 801c170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c172:	18d0      	adds	r0, r2, r3
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	3330      	adds	r3, #48	; 0x30
 801c178:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c17c:	4619      	mov	r1, r3
 801c17e:	f7fd fb3d 	bl	80197fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c184:	025b      	lsls	r3, r3, #9
 801c186:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801c188:	e050      	b.n	801c22c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	6a1b      	ldr	r3, [r3, #32]
 801c18e:	69ba      	ldr	r2, [r7, #24]
 801c190:	429a      	cmp	r2, r3
 801c192:	d02e      	beq.n	801c1f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c194:	68fb      	ldr	r3, [r7, #12]
 801c196:	7d1b      	ldrb	r3, [r3, #20]
 801c198:	b25b      	sxtb	r3, r3
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	da18      	bge.n	801c1d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c19e:	697b      	ldr	r3, [r7, #20]
 801c1a0:	7858      	ldrb	r0, [r3, #1]
 801c1a2:	68fb      	ldr	r3, [r7, #12]
 801c1a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	6a1a      	ldr	r2, [r3, #32]
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	f7fd fa5d 	bl	801966c <disk_write>
 801c1b2:	4603      	mov	r3, r0
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d004      	beq.n	801c1c2 <f_read+0x1da>
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	2201      	movs	r2, #1
 801c1bc:	755a      	strb	r2, [r3, #21]
 801c1be:	2301      	movs	r3, #1
 801c1c0:	e04d      	b.n	801c25e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c1c2:	68fb      	ldr	r3, [r7, #12]
 801c1c4:	7d1b      	ldrb	r3, [r3, #20]
 801c1c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c1ca:	b2da      	uxtb	r2, r3
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	7858      	ldrb	r0, [r3, #1]
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c1da:	2301      	movs	r3, #1
 801c1dc:	69ba      	ldr	r2, [r7, #24]
 801c1de:	f7fd fa25 	bl	801962c <disk_read>
 801c1e2:	4603      	mov	r3, r0
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d004      	beq.n	801c1f2 <f_read+0x20a>
 801c1e8:	68fb      	ldr	r3, [r7, #12]
 801c1ea:	2201      	movs	r2, #1
 801c1ec:	755a      	strb	r2, [r3, #21]
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	e035      	b.n	801c25e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	69ba      	ldr	r2, [r7, #24]
 801c1f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	699b      	ldr	r3, [r3, #24]
 801c1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c200:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c204:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801c206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	429a      	cmp	r2, r3
 801c20c:	d901      	bls.n	801c212 <f_read+0x22a>
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	699b      	ldr	r3, [r3, #24]
 801c21c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c220:	4413      	add	r3, r2
 801c222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c224:	4619      	mov	r1, r3
 801c226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c228:	f7fd fae8 	bl	80197fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801c22c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c230:	4413      	add	r3, r2
 801c232:	627b      	str	r3, [r7, #36]	; 0x24
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	699a      	ldr	r2, [r3, #24]
 801c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c23a:	441a      	add	r2, r3
 801c23c:	68fb      	ldr	r3, [r7, #12]
 801c23e:	619a      	str	r2, [r3, #24]
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	681a      	ldr	r2, [r3, #0]
 801c244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c246:	441a      	add	r2, r3
 801c248:	683b      	ldr	r3, [r7, #0]
 801c24a:	601a      	str	r2, [r3, #0]
 801c24c:	687a      	ldr	r2, [r7, #4]
 801c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c250:	1ad3      	subs	r3, r2, r3
 801c252:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2b00      	cmp	r3, #0
 801c258:	f47f af01 	bne.w	801c05e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801c25c:	2300      	movs	r3, #0
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3738      	adds	r7, #56	; 0x38
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}

0801c266 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801c266:	b580      	push	{r7, lr}
 801c268:	b08c      	sub	sp, #48	; 0x30
 801c26a:	af00      	add	r7, sp, #0
 801c26c:	60f8      	str	r0, [r7, #12]
 801c26e:	60b9      	str	r1, [r7, #8]
 801c270:	607a      	str	r2, [r7, #4]
 801c272:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801c274:	68bb      	ldr	r3, [r7, #8]
 801c276:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801c278:	683b      	ldr	r3, [r7, #0]
 801c27a:	2200      	movs	r2, #0
 801c27c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	f107 0210 	add.w	r2, r7, #16
 801c284:	4611      	mov	r1, r2
 801c286:	4618      	mov	r0, r3
 801c288:	f7ff fc64 	bl	801bb54 <validate>
 801c28c:	4603      	mov	r3, r0
 801c28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c296:	2b00      	cmp	r3, #0
 801c298:	d107      	bne.n	801c2aa <f_write+0x44>
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	7d5b      	ldrb	r3, [r3, #21]
 801c29e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d002      	beq.n	801c2b0 <f_write+0x4a>
 801c2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c2ae:	e14b      	b.n	801c548 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	7d1b      	ldrb	r3, [r3, #20]
 801c2b4:	f003 0302 	and.w	r3, r3, #2
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d101      	bne.n	801c2c0 <f_write+0x5a>
 801c2bc:	2307      	movs	r3, #7
 801c2be:	e143      	b.n	801c548 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	699a      	ldr	r2, [r3, #24]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	441a      	add	r2, r3
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	699b      	ldr	r3, [r3, #24]
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	f080 812d 	bcs.w	801c52c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	699b      	ldr	r3, [r3, #24]
 801c2d6:	43db      	mvns	r3, r3
 801c2d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c2da:	e127      	b.n	801c52c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	699b      	ldr	r3, [r3, #24]
 801c2e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f040 80e3 	bne.w	801c4b0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c2ea:	68fb      	ldr	r3, [r7, #12]
 801c2ec:	699b      	ldr	r3, [r3, #24]
 801c2ee:	0a5b      	lsrs	r3, r3, #9
 801c2f0:	693a      	ldr	r2, [r7, #16]
 801c2f2:	8952      	ldrh	r2, [r2, #10]
 801c2f4:	3a01      	subs	r2, #1
 801c2f6:	4013      	ands	r3, r2
 801c2f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c2fa:	69bb      	ldr	r3, [r7, #24]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d143      	bne.n	801c388 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	699b      	ldr	r3, [r3, #24]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d10c      	bne.n	801c322 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	689b      	ldr	r3, [r3, #8]
 801c30c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c310:	2b00      	cmp	r3, #0
 801c312:	d11a      	bne.n	801c34a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	2100      	movs	r1, #0
 801c318:	4618      	mov	r0, r3
 801c31a:	f7fd ff51 	bl	801a1c0 <create_chain>
 801c31e:	62b8      	str	r0, [r7, #40]	; 0x28
 801c320:	e013      	b.n	801c34a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c326:	2b00      	cmp	r3, #0
 801c328:	d007      	beq.n	801c33a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c32a:	68fb      	ldr	r3, [r7, #12]
 801c32c:	699b      	ldr	r3, [r3, #24]
 801c32e:	4619      	mov	r1, r3
 801c330:	68f8      	ldr	r0, [r7, #12]
 801c332:	f7fd ffdd 	bl	801a2f0 <clmt_clust>
 801c336:	62b8      	str	r0, [r7, #40]	; 0x28
 801c338:	e007      	b.n	801c34a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c33a:	68fa      	ldr	r2, [r7, #12]
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	69db      	ldr	r3, [r3, #28]
 801c340:	4619      	mov	r1, r3
 801c342:	4610      	mov	r0, r2
 801c344:	f7fd ff3c 	bl	801a1c0 <create_chain>
 801c348:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	f000 80f2 	beq.w	801c536 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c354:	2b01      	cmp	r3, #1
 801c356:	d104      	bne.n	801c362 <f_write+0xfc>
 801c358:	68fb      	ldr	r3, [r7, #12]
 801c35a:	2202      	movs	r2, #2
 801c35c:	755a      	strb	r2, [r3, #21]
 801c35e:	2302      	movs	r3, #2
 801c360:	e0f2      	b.n	801c548 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c364:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c368:	d104      	bne.n	801c374 <f_write+0x10e>
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	2201      	movs	r2, #1
 801c36e:	755a      	strb	r2, [r3, #21]
 801c370:	2301      	movs	r3, #1
 801c372:	e0e9      	b.n	801c548 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c378:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	689b      	ldr	r3, [r3, #8]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d102      	bne.n	801c388 <f_write+0x122>
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c386:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c388:	68fb      	ldr	r3, [r7, #12]
 801c38a:	7d1b      	ldrb	r3, [r3, #20]
 801c38c:	b25b      	sxtb	r3, r3
 801c38e:	2b00      	cmp	r3, #0
 801c390:	da18      	bge.n	801c3c4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c392:	693b      	ldr	r3, [r7, #16]
 801c394:	7858      	ldrb	r0, [r3, #1]
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	6a1a      	ldr	r2, [r3, #32]
 801c3a0:	2301      	movs	r3, #1
 801c3a2:	f7fd f963 	bl	801966c <disk_write>
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d004      	beq.n	801c3b6 <f_write+0x150>
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	2201      	movs	r2, #1
 801c3b0:	755a      	strb	r2, [r3, #21]
 801c3b2:	2301      	movs	r3, #1
 801c3b4:	e0c8      	b.n	801c548 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	7d1b      	ldrb	r3, [r3, #20]
 801c3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c3be:	b2da      	uxtb	r2, r3
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c3c4:	693a      	ldr	r2, [r7, #16]
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	69db      	ldr	r3, [r3, #28]
 801c3ca:	4619      	mov	r1, r3
 801c3cc:	4610      	mov	r0, r2
 801c3ce:	f7fd fcdf 	bl	8019d90 <clust2sect>
 801c3d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c3d4:	697b      	ldr	r3, [r7, #20]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d104      	bne.n	801c3e4 <f_write+0x17e>
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	2202      	movs	r2, #2
 801c3de:	755a      	strb	r2, [r3, #21]
 801c3e0:	2302      	movs	r3, #2
 801c3e2:	e0b1      	b.n	801c548 <f_write+0x2e2>
			sect += csect;
 801c3e4:	697a      	ldr	r2, [r7, #20]
 801c3e6:	69bb      	ldr	r3, [r7, #24]
 801c3e8:	4413      	add	r3, r2
 801c3ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	0a5b      	lsrs	r3, r3, #9
 801c3f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c3f2:	6a3b      	ldr	r3, [r7, #32]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d03c      	beq.n	801c472 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c3f8:	69ba      	ldr	r2, [r7, #24]
 801c3fa:	6a3b      	ldr	r3, [r7, #32]
 801c3fc:	4413      	add	r3, r2
 801c3fe:	693a      	ldr	r2, [r7, #16]
 801c400:	8952      	ldrh	r2, [r2, #10]
 801c402:	4293      	cmp	r3, r2
 801c404:	d905      	bls.n	801c412 <f_write+0x1ac>
					cc = fs->csize - csect;
 801c406:	693b      	ldr	r3, [r7, #16]
 801c408:	895b      	ldrh	r3, [r3, #10]
 801c40a:	461a      	mov	r2, r3
 801c40c:	69bb      	ldr	r3, [r7, #24]
 801c40e:	1ad3      	subs	r3, r2, r3
 801c410:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	7858      	ldrb	r0, [r3, #1]
 801c416:	6a3b      	ldr	r3, [r7, #32]
 801c418:	697a      	ldr	r2, [r7, #20]
 801c41a:	69f9      	ldr	r1, [r7, #28]
 801c41c:	f7fd f926 	bl	801966c <disk_write>
 801c420:	4603      	mov	r3, r0
 801c422:	2b00      	cmp	r3, #0
 801c424:	d004      	beq.n	801c430 <f_write+0x1ca>
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	2201      	movs	r2, #1
 801c42a:	755a      	strb	r2, [r3, #21]
 801c42c:	2301      	movs	r3, #1
 801c42e:	e08b      	b.n	801c548 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	6a1a      	ldr	r2, [r3, #32]
 801c434:	697b      	ldr	r3, [r7, #20]
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	6a3a      	ldr	r2, [r7, #32]
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d915      	bls.n	801c46a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801c43e:	68fb      	ldr	r3, [r7, #12]
 801c440:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	6a1a      	ldr	r2, [r3, #32]
 801c448:	697b      	ldr	r3, [r7, #20]
 801c44a:	1ad3      	subs	r3, r2, r3
 801c44c:	025b      	lsls	r3, r3, #9
 801c44e:	69fa      	ldr	r2, [r7, #28]
 801c450:	4413      	add	r3, r2
 801c452:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c456:	4619      	mov	r1, r3
 801c458:	f7fd f9d0 	bl	80197fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	7d1b      	ldrb	r3, [r3, #20]
 801c460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c464:	b2da      	uxtb	r2, r3
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801c46a:	6a3b      	ldr	r3, [r7, #32]
 801c46c:	025b      	lsls	r3, r3, #9
 801c46e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801c470:	e03f      	b.n	801c4f2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	6a1b      	ldr	r3, [r3, #32]
 801c476:	697a      	ldr	r2, [r7, #20]
 801c478:	429a      	cmp	r2, r3
 801c47a:	d016      	beq.n	801c4aa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	699a      	ldr	r2, [r3, #24]
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c484:	429a      	cmp	r2, r3
 801c486:	d210      	bcs.n	801c4aa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	7858      	ldrb	r0, [r3, #1]
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c492:	2301      	movs	r3, #1
 801c494:	697a      	ldr	r2, [r7, #20]
 801c496:	f7fd f8c9 	bl	801962c <disk_read>
 801c49a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d004      	beq.n	801c4aa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	2201      	movs	r2, #1
 801c4a4:	755a      	strb	r2, [r3, #21]
 801c4a6:	2301      	movs	r3, #1
 801c4a8:	e04e      	b.n	801c548 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	697a      	ldr	r2, [r7, #20]
 801c4ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	699b      	ldr	r3, [r3, #24]
 801c4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c4b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c4bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801c4be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	429a      	cmp	r2, r3
 801c4c4:	d901      	bls.n	801c4ca <f_write+0x264>
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c4d0:	68fb      	ldr	r3, [r7, #12]
 801c4d2:	699b      	ldr	r3, [r3, #24]
 801c4d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c4d8:	4413      	add	r3, r2
 801c4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4dc:	69f9      	ldr	r1, [r7, #28]
 801c4de:	4618      	mov	r0, r3
 801c4e0:	f7fd f98c 	bl	80197fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	7d1b      	ldrb	r3, [r3, #20]
 801c4e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c4ec:	b2da      	uxtb	r2, r3
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801c4f2:	69fa      	ldr	r2, [r7, #28]
 801c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f6:	4413      	add	r3, r2
 801c4f8:	61fb      	str	r3, [r7, #28]
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	699a      	ldr	r2, [r3, #24]
 801c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c500:	441a      	add	r2, r3
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	619a      	str	r2, [r3, #24]
 801c506:	68fb      	ldr	r3, [r7, #12]
 801c508:	68da      	ldr	r2, [r3, #12]
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	699b      	ldr	r3, [r3, #24]
 801c50e:	429a      	cmp	r2, r3
 801c510:	bf38      	it	cc
 801c512:	461a      	movcc	r2, r3
 801c514:	68fb      	ldr	r3, [r7, #12]
 801c516:	60da      	str	r2, [r3, #12]
 801c518:	683b      	ldr	r3, [r7, #0]
 801c51a:	681a      	ldr	r2, [r3, #0]
 801c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c51e:	441a      	add	r2, r3
 801c520:	683b      	ldr	r3, [r7, #0]
 801c522:	601a      	str	r2, [r3, #0]
 801c524:	687a      	ldr	r2, [r7, #4]
 801c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c528:	1ad3      	subs	r3, r2, r3
 801c52a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	f47f aed4 	bne.w	801c2dc <f_write+0x76>
 801c534:	e000      	b.n	801c538 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c536:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	7d1b      	ldrb	r3, [r3, #20]
 801c53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c540:	b2da      	uxtb	r2, r3
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801c546:	2300      	movs	r3, #0
}
 801c548:	4618      	mov	r0, r3
 801c54a:	3730      	adds	r7, #48	; 0x30
 801c54c:	46bd      	mov	sp, r7
 801c54e:	bd80      	pop	{r7, pc}

0801c550 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b086      	sub	sp, #24
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	f107 0208 	add.w	r2, r7, #8
 801c55e:	4611      	mov	r1, r2
 801c560:	4618      	mov	r0, r3
 801c562:	f7ff faf7 	bl	801bb54 <validate>
 801c566:	4603      	mov	r3, r0
 801c568:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c56a:	7dfb      	ldrb	r3, [r7, #23]
 801c56c:	2b00      	cmp	r3, #0
 801c56e:	d168      	bne.n	801c642 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	7d1b      	ldrb	r3, [r3, #20]
 801c574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d062      	beq.n	801c642 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	7d1b      	ldrb	r3, [r3, #20]
 801c580:	b25b      	sxtb	r3, r3
 801c582:	2b00      	cmp	r3, #0
 801c584:	da15      	bge.n	801c5b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801c586:	68bb      	ldr	r3, [r7, #8]
 801c588:	7858      	ldrb	r0, [r3, #1]
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	6a1a      	ldr	r2, [r3, #32]
 801c594:	2301      	movs	r3, #1
 801c596:	f7fd f869 	bl	801966c <disk_write>
 801c59a:	4603      	mov	r3, r0
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d001      	beq.n	801c5a4 <f_sync+0x54>
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	e04f      	b.n	801c644 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	7d1b      	ldrb	r3, [r3, #20]
 801c5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c5ac:	b2da      	uxtb	r2, r3
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801c5b2:	f7fd f899 	bl	80196e8 <get_fattime>
 801c5b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801c5b8:	68ba      	ldr	r2, [r7, #8]
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5be:	4619      	mov	r1, r3
 801c5c0:	4610      	mov	r0, r2
 801c5c2:	f7fd fb49 	bl	8019c58 <move_window>
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801c5ca:	7dfb      	ldrb	r3, [r7, #23]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d138      	bne.n	801c642 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c5d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	330b      	adds	r3, #11
 801c5da:	781a      	ldrb	r2, [r3, #0]
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	330b      	adds	r3, #11
 801c5e0:	f042 0220 	orr.w	r2, r2, #32
 801c5e4:	b2d2      	uxtb	r2, r2
 801c5e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	6818      	ldr	r0, [r3, #0]
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	689b      	ldr	r3, [r3, #8]
 801c5f0:	461a      	mov	r2, r3
 801c5f2:	68f9      	ldr	r1, [r7, #12]
 801c5f4:	f7fe f856 	bl	801a6a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801c5f8:	68fb      	ldr	r3, [r7, #12]
 801c5fa:	f103 021c 	add.w	r2, r3, #28
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	68db      	ldr	r3, [r3, #12]
 801c602:	4619      	mov	r1, r3
 801c604:	4610      	mov	r0, r2
 801c606:	f7fd f8cd 	bl	80197a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	3316      	adds	r3, #22
 801c60e:	6939      	ldr	r1, [r7, #16]
 801c610:	4618      	mov	r0, r3
 801c612:	f7fd f8c7 	bl	80197a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	3312      	adds	r3, #18
 801c61a:	2100      	movs	r1, #0
 801c61c:	4618      	mov	r0, r3
 801c61e:	f7fd f8a6 	bl	801976e <st_word>
					fs->wflag = 1;
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	2201      	movs	r2, #1
 801c626:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	4618      	mov	r0, r3
 801c62c:	f7fd fb42 	bl	8019cb4 <sync_fs>
 801c630:	4603      	mov	r3, r0
 801c632:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	7d1b      	ldrb	r3, [r3, #20]
 801c638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c63c:	b2da      	uxtb	r2, r3
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801c642:	7dfb      	ldrb	r3, [r7, #23]
}
 801c644:	4618      	mov	r0, r3
 801c646:	3718      	adds	r7, #24
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}

0801c64c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b084      	sub	sp, #16
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801c654:	6878      	ldr	r0, [r7, #4]
 801c656:	f7ff ff7b 	bl	801c550 <f_sync>
 801c65a:	4603      	mov	r3, r0
 801c65c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801c65e:	7bfb      	ldrb	r3, [r7, #15]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d118      	bne.n	801c696 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	f107 0208 	add.w	r2, r7, #8
 801c66a:	4611      	mov	r1, r2
 801c66c:	4618      	mov	r0, r3
 801c66e:	f7ff fa71 	bl	801bb54 <validate>
 801c672:	4603      	mov	r3, r0
 801c674:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c676:	7bfb      	ldrb	r3, [r7, #15]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d10c      	bne.n	801c696 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	691b      	ldr	r3, [r3, #16]
 801c680:	4618      	mov	r0, r3
 801c682:	f7fd fa45 	bl	8019b10 <dec_lock>
 801c686:	4603      	mov	r3, r0
 801c688:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801c68a:	7bfb      	ldrb	r3, [r7, #15]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d102      	bne.n	801c696 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	2200      	movs	r2, #0
 801c694:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801c696:	7bfb      	ldrb	r3, [r7, #15]
}
 801c698:	4618      	mov	r0, r3
 801c69a:	3710      	adds	r7, #16
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}

0801c6a0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b090      	sub	sp, #64	; 0x40
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
 801c6a8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	f107 0208 	add.w	r2, r7, #8
 801c6b0:	4611      	mov	r1, r2
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7ff fa4e 	bl	801bb54 <validate>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801c6be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	d103      	bne.n	801c6ce <f_lseek+0x2e>
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	7d5b      	ldrb	r3, [r3, #21]
 801c6ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801c6ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d002      	beq.n	801c6dc <f_lseek+0x3c>
 801c6d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c6da:	e1e6      	b.n	801caaa <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	f000 80d1 	beq.w	801c888 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801c6e6:	683b      	ldr	r3, [r7, #0]
 801c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c6ec:	d15a      	bne.n	801c7a4 <f_lseek+0x104>
			tbl = fp->cltbl;
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6f2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6f6:	1d1a      	adds	r2, r3, #4
 801c6f8:	627a      	str	r2, [r7, #36]	; 0x24
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	617b      	str	r3, [r7, #20]
 801c6fe:	2302      	movs	r3, #2
 801c700:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	689b      	ldr	r3, [r3, #8]
 801c706:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801c708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d03a      	beq.n	801c784 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801c70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c710:	613b      	str	r3, [r7, #16]
 801c712:	2300      	movs	r3, #0
 801c714:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c718:	3302      	adds	r3, #2
 801c71a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c71e:	60fb      	str	r3, [r7, #12]
 801c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c722:	3301      	adds	r3, #1
 801c724:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c72a:	4618      	mov	r0, r3
 801c72c:	f7fd fb4f 	bl	8019dce <get_fat>
 801c730:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801c732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c734:	2b01      	cmp	r3, #1
 801c736:	d804      	bhi.n	801c742 <f_lseek+0xa2>
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	2202      	movs	r2, #2
 801c73c:	755a      	strb	r2, [r3, #21]
 801c73e:	2302      	movs	r3, #2
 801c740:	e1b3      	b.n	801caaa <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c744:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c748:	d104      	bne.n	801c754 <f_lseek+0xb4>
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	2201      	movs	r2, #1
 801c74e:	755a      	strb	r2, [r3, #21]
 801c750:	2301      	movs	r3, #1
 801c752:	e1aa      	b.n	801caaa <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	3301      	adds	r3, #1
 801c758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c75a:	429a      	cmp	r2, r3
 801c75c:	d0de      	beq.n	801c71c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801c75e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c760:	697b      	ldr	r3, [r7, #20]
 801c762:	429a      	cmp	r2, r3
 801c764:	d809      	bhi.n	801c77a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c768:	1d1a      	adds	r2, r3, #4
 801c76a:	627a      	str	r2, [r7, #36]	; 0x24
 801c76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c76e:	601a      	str	r2, [r3, #0]
 801c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c772:	1d1a      	adds	r2, r3, #4
 801c774:	627a      	str	r2, [r7, #36]	; 0x24
 801c776:	693a      	ldr	r2, [r7, #16]
 801c778:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801c77a:	68bb      	ldr	r3, [r7, #8]
 801c77c:	699b      	ldr	r3, [r3, #24]
 801c77e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c780:	429a      	cmp	r2, r3
 801c782:	d3c4      	bcc.n	801c70e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c78a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801c78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c78e:	697b      	ldr	r3, [r7, #20]
 801c790:	429a      	cmp	r2, r3
 801c792:	d803      	bhi.n	801c79c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c796:	2200      	movs	r2, #0
 801c798:	601a      	str	r2, [r3, #0]
 801c79a:	e184      	b.n	801caa6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801c79c:	2311      	movs	r3, #17
 801c79e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801c7a2:	e180      	b.n	801caa6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	68db      	ldr	r3, [r3, #12]
 801c7a8:	683a      	ldr	r2, [r7, #0]
 801c7aa:	429a      	cmp	r2, r3
 801c7ac:	d902      	bls.n	801c7b4 <f_lseek+0x114>
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	68db      	ldr	r3, [r3, #12]
 801c7b2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	683a      	ldr	r2, [r7, #0]
 801c7b8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801c7ba:	683b      	ldr	r3, [r7, #0]
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	f000 8172 	beq.w	801caa6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	3b01      	subs	r3, #1
 801c7c6:	4619      	mov	r1, r3
 801c7c8:	6878      	ldr	r0, [r7, #4]
 801c7ca:	f7fd fd91 	bl	801a2f0 <clmt_clust>
 801c7ce:	4602      	mov	r2, r0
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801c7d4:	68ba      	ldr	r2, [r7, #8]
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	69db      	ldr	r3, [r3, #28]
 801c7da:	4619      	mov	r1, r3
 801c7dc:	4610      	mov	r0, r2
 801c7de:	f7fd fad7 	bl	8019d90 <clust2sect>
 801c7e2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801c7e4:	69bb      	ldr	r3, [r7, #24]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d104      	bne.n	801c7f4 <f_lseek+0x154>
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	2202      	movs	r2, #2
 801c7ee:	755a      	strb	r2, [r3, #21]
 801c7f0:	2302      	movs	r3, #2
 801c7f2:	e15a      	b.n	801caaa <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801c7f4:	683b      	ldr	r3, [r7, #0]
 801c7f6:	3b01      	subs	r3, #1
 801c7f8:	0a5b      	lsrs	r3, r3, #9
 801c7fa:	68ba      	ldr	r2, [r7, #8]
 801c7fc:	8952      	ldrh	r2, [r2, #10]
 801c7fe:	3a01      	subs	r2, #1
 801c800:	4013      	ands	r3, r2
 801c802:	69ba      	ldr	r2, [r7, #24]
 801c804:	4413      	add	r3, r2
 801c806:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	699b      	ldr	r3, [r3, #24]
 801c80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c810:	2b00      	cmp	r3, #0
 801c812:	f000 8148 	beq.w	801caa6 <f_lseek+0x406>
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	6a1b      	ldr	r3, [r3, #32]
 801c81a:	69ba      	ldr	r2, [r7, #24]
 801c81c:	429a      	cmp	r2, r3
 801c81e:	f000 8142 	beq.w	801caa6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	7d1b      	ldrb	r3, [r3, #20]
 801c826:	b25b      	sxtb	r3, r3
 801c828:	2b00      	cmp	r3, #0
 801c82a:	da18      	bge.n	801c85e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c82c:	68bb      	ldr	r3, [r7, #8]
 801c82e:	7858      	ldrb	r0, [r3, #1]
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	6a1a      	ldr	r2, [r3, #32]
 801c83a:	2301      	movs	r3, #1
 801c83c:	f7fc ff16 	bl	801966c <disk_write>
 801c840:	4603      	mov	r3, r0
 801c842:	2b00      	cmp	r3, #0
 801c844:	d004      	beq.n	801c850 <f_lseek+0x1b0>
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	2201      	movs	r2, #1
 801c84a:	755a      	strb	r2, [r3, #21]
 801c84c:	2301      	movs	r3, #1
 801c84e:	e12c      	b.n	801caaa <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	7d1b      	ldrb	r3, [r3, #20]
 801c854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c858:	b2da      	uxtb	r2, r3
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	7858      	ldrb	r0, [r3, #1]
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c868:	2301      	movs	r3, #1
 801c86a:	69ba      	ldr	r2, [r7, #24]
 801c86c:	f7fc fede 	bl	801962c <disk_read>
 801c870:	4603      	mov	r3, r0
 801c872:	2b00      	cmp	r3, #0
 801c874:	d004      	beq.n	801c880 <f_lseek+0x1e0>
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	2201      	movs	r2, #1
 801c87a:	755a      	strb	r2, [r3, #21]
 801c87c:	2301      	movs	r3, #1
 801c87e:	e114      	b.n	801caaa <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	69ba      	ldr	r2, [r7, #24]
 801c884:	621a      	str	r2, [r3, #32]
 801c886:	e10e      	b.n	801caa6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	68db      	ldr	r3, [r3, #12]
 801c88c:	683a      	ldr	r2, [r7, #0]
 801c88e:	429a      	cmp	r2, r3
 801c890:	d908      	bls.n	801c8a4 <f_lseek+0x204>
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	7d1b      	ldrb	r3, [r3, #20]
 801c896:	f003 0302 	and.w	r3, r3, #2
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d102      	bne.n	801c8a4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	68db      	ldr	r3, [r3, #12]
 801c8a2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	699b      	ldr	r3, [r3, #24]
 801c8a8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801c8aa:	2300      	movs	r3, #0
 801c8ac:	637b      	str	r3, [r7, #52]	; 0x34
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c8b2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	f000 80a7 	beq.w	801ca0a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801c8bc:	68bb      	ldr	r3, [r7, #8]
 801c8be:	895b      	ldrh	r3, [r3, #10]
 801c8c0:	025b      	lsls	r3, r3, #9
 801c8c2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801c8c4:	6a3b      	ldr	r3, [r7, #32]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d01b      	beq.n	801c902 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801c8ca:	683b      	ldr	r3, [r7, #0]
 801c8cc:	1e5a      	subs	r2, r3, #1
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	fbb2 f2f3 	udiv	r2, r2, r3
 801c8d4:	6a3b      	ldr	r3, [r7, #32]
 801c8d6:	1e59      	subs	r1, r3, #1
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801c8de:	429a      	cmp	r2, r3
 801c8e0:	d30f      	bcc.n	801c902 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801c8e2:	6a3b      	ldr	r3, [r7, #32]
 801c8e4:	1e5a      	subs	r2, r3, #1
 801c8e6:	69fb      	ldr	r3, [r7, #28]
 801c8e8:	425b      	negs	r3, r3
 801c8ea:	401a      	ands	r2, r3
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	699b      	ldr	r3, [r3, #24]
 801c8f4:	683a      	ldr	r2, [r7, #0]
 801c8f6:	1ad3      	subs	r3, r2, r3
 801c8f8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	69db      	ldr	r3, [r3, #28]
 801c8fe:	63bb      	str	r3, [r7, #56]	; 0x38
 801c900:	e022      	b.n	801c948 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	689b      	ldr	r3, [r3, #8]
 801c906:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d119      	bne.n	801c942 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	2100      	movs	r1, #0
 801c912:	4618      	mov	r0, r3
 801c914:	f7fd fc54 	bl	801a1c0 <create_chain>
 801c918:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c91c:	2b01      	cmp	r3, #1
 801c91e:	d104      	bne.n	801c92a <f_lseek+0x28a>
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	2202      	movs	r2, #2
 801c924:	755a      	strb	r2, [r3, #21]
 801c926:	2302      	movs	r3, #2
 801c928:	e0bf      	b.n	801caaa <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c930:	d104      	bne.n	801c93c <f_lseek+0x29c>
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	2201      	movs	r2, #1
 801c936:	755a      	strb	r2, [r3, #21]
 801c938:	2301      	movs	r3, #1
 801c93a:	e0b6      	b.n	801caaa <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c940:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c946:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d05d      	beq.n	801ca0a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801c94e:	e03a      	b.n	801c9c6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801c950:	683a      	ldr	r2, [r7, #0]
 801c952:	69fb      	ldr	r3, [r7, #28]
 801c954:	1ad3      	subs	r3, r2, r3
 801c956:	603b      	str	r3, [r7, #0]
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	699a      	ldr	r2, [r3, #24]
 801c95c:	69fb      	ldr	r3, [r7, #28]
 801c95e:	441a      	add	r2, r3
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	7d1b      	ldrb	r3, [r3, #20]
 801c968:	f003 0302 	and.w	r3, r3, #2
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d00b      	beq.n	801c988 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c974:	4618      	mov	r0, r3
 801c976:	f7fd fc23 	bl	801a1c0 <create_chain>
 801c97a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d108      	bne.n	801c994 <f_lseek+0x2f4>
							ofs = 0; break;
 801c982:	2300      	movs	r3, #0
 801c984:	603b      	str	r3, [r7, #0]
 801c986:	e022      	b.n	801c9ce <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c98c:	4618      	mov	r0, r3
 801c98e:	f7fd fa1e 	bl	8019dce <get_fat>
 801c992:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c99a:	d104      	bne.n	801c9a6 <f_lseek+0x306>
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	2201      	movs	r2, #1
 801c9a0:	755a      	strb	r2, [r3, #21]
 801c9a2:	2301      	movs	r3, #1
 801c9a4:	e081      	b.n	801caaa <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801c9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9a8:	2b01      	cmp	r3, #1
 801c9aa:	d904      	bls.n	801c9b6 <f_lseek+0x316>
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	699b      	ldr	r3, [r3, #24]
 801c9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9b2:	429a      	cmp	r2, r3
 801c9b4:	d304      	bcc.n	801c9c0 <f_lseek+0x320>
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	2202      	movs	r2, #2
 801c9ba:	755a      	strb	r2, [r3, #21]
 801c9bc:	2302      	movs	r3, #2
 801c9be:	e074      	b.n	801caaa <f_lseek+0x40a>
					fp->clust = clst;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c9c4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801c9c6:	683a      	ldr	r2, [r7, #0]
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	429a      	cmp	r2, r3
 801c9cc:	d8c0      	bhi.n	801c950 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	699a      	ldr	r2, [r3, #24]
 801c9d2:	683b      	ldr	r3, [r7, #0]
 801c9d4:	441a      	add	r2, r3
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801c9da:	683b      	ldr	r3, [r7, #0]
 801c9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d012      	beq.n	801ca0a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801c9e4:	68bb      	ldr	r3, [r7, #8]
 801c9e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f7fd f9d1 	bl	8019d90 <clust2sect>
 801c9ee:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801c9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d104      	bne.n	801ca00 <f_lseek+0x360>
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	2202      	movs	r2, #2
 801c9fa:	755a      	strb	r2, [r3, #21]
 801c9fc:	2302      	movs	r3, #2
 801c9fe:	e054      	b.n	801caaa <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801ca00:	683b      	ldr	r3, [r7, #0]
 801ca02:	0a5b      	lsrs	r3, r3, #9
 801ca04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca06:	4413      	add	r3, r2
 801ca08:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	699a      	ldr	r2, [r3, #24]
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	68db      	ldr	r3, [r3, #12]
 801ca12:	429a      	cmp	r2, r3
 801ca14:	d90a      	bls.n	801ca2c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	699a      	ldr	r2, [r3, #24]
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	7d1b      	ldrb	r3, [r3, #20]
 801ca22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca26:	b2da      	uxtb	r2, r3
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	699b      	ldr	r3, [r3, #24]
 801ca30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d036      	beq.n	801caa6 <f_lseek+0x406>
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	6a1b      	ldr	r3, [r3, #32]
 801ca3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca3e:	429a      	cmp	r2, r3
 801ca40:	d031      	beq.n	801caa6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	7d1b      	ldrb	r3, [r3, #20]
 801ca46:	b25b      	sxtb	r3, r3
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	da18      	bge.n	801ca7e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ca4c:	68bb      	ldr	r3, [r7, #8]
 801ca4e:	7858      	ldrb	r0, [r3, #1]
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	6a1a      	ldr	r2, [r3, #32]
 801ca5a:	2301      	movs	r3, #1
 801ca5c:	f7fc fe06 	bl	801966c <disk_write>
 801ca60:	4603      	mov	r3, r0
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d004      	beq.n	801ca70 <f_lseek+0x3d0>
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2201      	movs	r2, #1
 801ca6a:	755a      	strb	r2, [r3, #21]
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e01c      	b.n	801caaa <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	7d1b      	ldrb	r3, [r3, #20]
 801ca74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ca78:	b2da      	uxtb	r2, r3
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ca7e:	68bb      	ldr	r3, [r7, #8]
 801ca80:	7858      	ldrb	r0, [r3, #1]
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801ca88:	2301      	movs	r3, #1
 801ca8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ca8c:	f7fc fdce 	bl	801962c <disk_read>
 801ca90:	4603      	mov	r3, r0
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d004      	beq.n	801caa0 <f_lseek+0x400>
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	2201      	movs	r2, #1
 801ca9a:	755a      	strb	r2, [r3, #21]
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	e004      	b.n	801caaa <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801caa4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801caa6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801caaa:	4618      	mov	r0, r3
 801caac:	3740      	adds	r7, #64	; 0x40
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}

0801cab2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801cab2:	b580      	push	{r7, lr}
 801cab4:	b086      	sub	sp, #24
 801cab6:	af00      	add	r7, sp, #0
 801cab8:	6078      	str	r0, [r7, #4]
 801caba:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d101      	bne.n	801cac6 <f_opendir+0x14>
 801cac2:	2309      	movs	r3, #9
 801cac4:	e074      	b.n	801cbb0 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801caca:	f107 0108 	add.w	r1, r7, #8
 801cace:	463b      	mov	r3, r7
 801cad0:	2200      	movs	r2, #0
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7fe fdf2 	bl	801b6bc <find_volume>
 801cad8:	4603      	mov	r3, r0
 801cada:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801cadc:	7dfb      	ldrb	r3, [r7, #23]
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d15f      	bne.n	801cba2 <f_opendir+0xf0>
		obj->fs = fs;
 801cae2:	68ba      	ldr	r2, [r7, #8]
 801cae4:	693b      	ldr	r3, [r7, #16]
 801cae6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801cae8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801caec:	f000 fc7d 	bl	801d3ea <ff_memalloc>
 801caf0:	60f8      	str	r0, [r7, #12]
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d101      	bne.n	801cafc <f_opendir+0x4a>
 801caf8:	2311      	movs	r3, #17
 801cafa:	e059      	b.n	801cbb0 <f_opendir+0xfe>
 801cafc:	68bb      	ldr	r3, [r7, #8]
 801cafe:	68fa      	ldr	r2, [r7, #12]
 801cb00:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	4619      	mov	r1, r3
 801cb06:	6878      	ldr	r0, [r7, #4]
 801cb08:	f7fe fccc 	bl	801b4a4 <follow_path>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801cb10:	7dfb      	ldrb	r3, [r7, #23]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d13d      	bne.n	801cb92 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801cb1c:	b25b      	sxtb	r3, r3
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	db12      	blt.n	801cb48 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801cb22:	693b      	ldr	r3, [r7, #16]
 801cb24:	799b      	ldrb	r3, [r3, #6]
 801cb26:	f003 0310 	and.w	r3, r3, #16
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d00a      	beq.n	801cb44 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801cb2e:	68ba      	ldr	r2, [r7, #8]
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	6a1b      	ldr	r3, [r3, #32]
 801cb34:	4619      	mov	r1, r3
 801cb36:	4610      	mov	r0, r2
 801cb38:	f7fd fd95 	bl	801a666 <ld_clust>
 801cb3c:	4602      	mov	r2, r0
 801cb3e:	693b      	ldr	r3, [r7, #16]
 801cb40:	609a      	str	r2, [r3, #8]
 801cb42:	e001      	b.n	801cb48 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801cb44:	2305      	movs	r3, #5
 801cb46:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801cb48:	7dfb      	ldrb	r3, [r7, #23]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d121      	bne.n	801cb92 <f_opendir+0xe0>
				obj->id = fs->id;
 801cb4e:	68bb      	ldr	r3, [r7, #8]
 801cb50:	88da      	ldrh	r2, [r3, #6]
 801cb52:	693b      	ldr	r3, [r7, #16]
 801cb54:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801cb56:	2100      	movs	r1, #0
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	f7fd fbfd 	bl	801a358 <dir_sdi>
 801cb5e:	4603      	mov	r3, r0
 801cb60:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801cb62:	7dfb      	ldrb	r3, [r7, #23]
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	d114      	bne.n	801cb92 <f_opendir+0xe0>
					if (obj->sclust) {
 801cb68:	693b      	ldr	r3, [r7, #16]
 801cb6a:	689b      	ldr	r3, [r3, #8]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d00d      	beq.n	801cb8c <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801cb70:	2100      	movs	r1, #0
 801cb72:	6878      	ldr	r0, [r7, #4]
 801cb74:	f7fc ff3e 	bl	80199f4 <inc_lock>
 801cb78:	4602      	mov	r2, r0
 801cb7a:	693b      	ldr	r3, [r7, #16]
 801cb7c:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801cb7e:	693b      	ldr	r3, [r7, #16]
 801cb80:	691b      	ldr	r3, [r3, #16]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d105      	bne.n	801cb92 <f_opendir+0xe0>
 801cb86:	2312      	movs	r3, #18
 801cb88:	75fb      	strb	r3, [r7, #23]
 801cb8a:	e002      	b.n	801cb92 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801cb8c:	693b      	ldr	r3, [r7, #16]
 801cb8e:	2200      	movs	r2, #0
 801cb90:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 801cb92:	68f8      	ldr	r0, [r7, #12]
 801cb94:	f000 fc35 	bl	801d402 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801cb98:	7dfb      	ldrb	r3, [r7, #23]
 801cb9a:	2b04      	cmp	r3, #4
 801cb9c:	d101      	bne.n	801cba2 <f_opendir+0xf0>
 801cb9e:	2305      	movs	r3, #5
 801cba0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801cba2:	7dfb      	ldrb	r3, [r7, #23]
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d002      	beq.n	801cbae <f_opendir+0xfc>
 801cba8:	693b      	ldr	r3, [r7, #16]
 801cbaa:	2200      	movs	r2, #0
 801cbac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801cbae:	7dfb      	ldrb	r3, [r7, #23]
}
 801cbb0:	4618      	mov	r0, r3
 801cbb2:	3718      	adds	r7, #24
 801cbb4:	46bd      	mov	sp, r7
 801cbb6:	bd80      	pop	{r7, pc}

0801cbb8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801cbb8:	b580      	push	{r7, lr}
 801cbba:	b084      	sub	sp, #16
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	f107 0208 	add.w	r2, r7, #8
 801cbc6:	4611      	mov	r1, r2
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7fe ffc3 	bl	801bb54 <validate>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801cbd2:	7bfb      	ldrb	r3, [r7, #15]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d110      	bne.n	801cbfa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	691b      	ldr	r3, [r3, #16]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d006      	beq.n	801cbee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801cbe0:	687b      	ldr	r3, [r7, #4]
 801cbe2:	691b      	ldr	r3, [r3, #16]
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	f7fc ff93 	bl	8019b10 <dec_lock>
 801cbea:	4603      	mov	r3, r0
 801cbec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801cbee:	7bfb      	ldrb	r3, [r7, #15]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d102      	bne.n	801cbfa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	3710      	adds	r7, #16
 801cc00:	46bd      	mov	sp, r7
 801cc02:	bd80      	pop	{r7, pc}

0801cc04 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	b086      	sub	sp, #24
 801cc08:	af00      	add	r7, sp, #0
 801cc0a:	6078      	str	r0, [r7, #4]
 801cc0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	f107 020c 	add.w	r2, r7, #12
 801cc14:	4611      	mov	r1, r2
 801cc16:	4618      	mov	r0, r3
 801cc18:	f7fe ff9c 	bl	801bb54 <validate>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801cc20:	7dfb      	ldrb	r3, [r7, #23]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d136      	bne.n	801cc94 <f_readdir+0x90>
		if (!fno) {
 801cc26:	683b      	ldr	r3, [r7, #0]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d106      	bne.n	801cc3a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801cc2c:	2100      	movs	r1, #0
 801cc2e:	6878      	ldr	r0, [r7, #4]
 801cc30:	f7fd fb92 	bl	801a358 <dir_sdi>
 801cc34:	4603      	mov	r3, r0
 801cc36:	75fb      	strb	r3, [r7, #23]
 801cc38:	e02c      	b.n	801cc94 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 801cc3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801cc3e:	f000 fbd4 	bl	801d3ea <ff_memalloc>
 801cc42:	6138      	str	r0, [r7, #16]
 801cc44:	693b      	ldr	r3, [r7, #16]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d101      	bne.n	801cc4e <f_readdir+0x4a>
 801cc4a:	2311      	movs	r3, #17
 801cc4c:	e023      	b.n	801cc96 <f_readdir+0x92>
 801cc4e:	68fb      	ldr	r3, [r7, #12]
 801cc50:	693a      	ldr	r2, [r7, #16]
 801cc52:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801cc54:	2100      	movs	r1, #0
 801cc56:	6878      	ldr	r0, [r7, #4]
 801cc58:	f7fd ff2f 	bl	801aaba <dir_read>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801cc60:	7dfb      	ldrb	r3, [r7, #23]
 801cc62:	2b04      	cmp	r3, #4
 801cc64:	d101      	bne.n	801cc6a <f_readdir+0x66>
 801cc66:	2300      	movs	r3, #0
 801cc68:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801cc6a:	7dfb      	ldrb	r3, [r7, #23]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d10e      	bne.n	801cc8e <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 801cc70:	6839      	ldr	r1, [r7, #0]
 801cc72:	6878      	ldr	r0, [r7, #4]
 801cc74:	f7fe f980 	bl	801af78 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801cc78:	2100      	movs	r1, #0
 801cc7a:	6878      	ldr	r0, [r7, #4]
 801cc7c:	f7fd fbe7 	bl	801a44e <dir_next>
 801cc80:	4603      	mov	r3, r0
 801cc82:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801cc84:	7dfb      	ldrb	r3, [r7, #23]
 801cc86:	2b04      	cmp	r3, #4
 801cc88:	d101      	bne.n	801cc8e <f_readdir+0x8a>
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 801cc8e:	6938      	ldr	r0, [r7, #16]
 801cc90:	f000 fbb7 	bl	801d402 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 801cc94:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc96:	4618      	mov	r0, r3
 801cc98:	3718      	adds	r7, #24
 801cc9a:	46bd      	mov	sp, r7
 801cc9c:	bd80      	pop	{r7, pc}

0801cc9e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801cc9e:	b580      	push	{r7, lr}
 801cca0:	b092      	sub	sp, #72	; 0x48
 801cca2:	af00      	add	r7, sp, #0
 801cca4:	60f8      	str	r0, [r7, #12]
 801cca6:	60b9      	str	r1, [r7, #8]
 801cca8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801ccaa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801ccae:	f107 030c 	add.w	r3, r7, #12
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	4618      	mov	r0, r3
 801ccb6:	f7fe fd01 	bl	801b6bc <find_volume>
 801ccba:	4603      	mov	r3, r0
 801ccbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801ccc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	f040 8099 	bne.w	801cdfc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801ccca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccd2:	695a      	ldr	r2, [r3, #20]
 801ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccd6:	699b      	ldr	r3, [r3, #24]
 801ccd8:	3b02      	subs	r3, #2
 801ccda:	429a      	cmp	r2, r3
 801ccdc:	d804      	bhi.n	801cce8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801ccde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cce0:	695a      	ldr	r2, [r3, #20]
 801cce2:	68bb      	ldr	r3, [r7, #8]
 801cce4:	601a      	str	r2, [r3, #0]
 801cce6:	e089      	b.n	801cdfc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801cce8:	2300      	movs	r3, #0
 801ccea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccee:	781b      	ldrb	r3, [r3, #0]
 801ccf0:	2b01      	cmp	r3, #1
 801ccf2:	d128      	bne.n	801cd46 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801ccf4:	2302      	movs	r3, #2
 801ccf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccfa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801ccfc:	f107 0314 	add.w	r3, r7, #20
 801cd00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cd02:	4618      	mov	r0, r3
 801cd04:	f7fd f863 	bl	8019dce <get_fat>
 801cd08:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801cd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd10:	d103      	bne.n	801cd1a <f_getfree+0x7c>
 801cd12:	2301      	movs	r3, #1
 801cd14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801cd18:	e063      	b.n	801cde2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd1c:	2b01      	cmp	r3, #1
 801cd1e:	d103      	bne.n	801cd28 <f_getfree+0x8a>
 801cd20:	2302      	movs	r3, #2
 801cd22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801cd26:	e05c      	b.n	801cde2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	d102      	bne.n	801cd34 <f_getfree+0x96>
 801cd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cd30:	3301      	adds	r3, #1
 801cd32:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801cd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cd36:	3301      	adds	r3, #1
 801cd38:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd3c:	699b      	ldr	r3, [r3, #24]
 801cd3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cd40:	429a      	cmp	r2, r3
 801cd42:	d3db      	bcc.n	801ccfc <f_getfree+0x5e>
 801cd44:	e04d      	b.n	801cde2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801cd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd48:	699b      	ldr	r3, [r3, #24]
 801cd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd50:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801cd52:	2300      	movs	r3, #0
 801cd54:	637b      	str	r3, [r7, #52]	; 0x34
 801cd56:	2300      	movs	r3, #0
 801cd58:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801cd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d113      	bne.n	801cd88 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801cd60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd64:	1c5a      	adds	r2, r3, #1
 801cd66:	63ba      	str	r2, [r7, #56]	; 0x38
 801cd68:	4619      	mov	r1, r3
 801cd6a:	f7fc ff75 	bl	8019c58 <move_window>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801cd74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d131      	bne.n	801cde0 <f_getfree+0x142>
							p = fs->win;
 801cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd7e:	3334      	adds	r3, #52	; 0x34
 801cd80:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801cd82:	f44f 7300 	mov.w	r3, #512	; 0x200
 801cd86:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801cd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd8a:	781b      	ldrb	r3, [r3, #0]
 801cd8c:	2b02      	cmp	r3, #2
 801cd8e:	d10f      	bne.n	801cdb0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801cd90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cd92:	f7fc fcb1 	bl	80196f8 <ld_word>
 801cd96:	4603      	mov	r3, r0
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d102      	bne.n	801cda2 <f_getfree+0x104>
 801cd9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cd9e:	3301      	adds	r3, #1
 801cda0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cda4:	3302      	adds	r3, #2
 801cda6:	633b      	str	r3, [r7, #48]	; 0x30
 801cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdaa:	3b02      	subs	r3, #2
 801cdac:	637b      	str	r3, [r7, #52]	; 0x34
 801cdae:	e010      	b.n	801cdd2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801cdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cdb2:	f7fc fcb9 	bl	8019728 <ld_dword>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d102      	bne.n	801cdc6 <f_getfree+0x128>
 801cdc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdc2:	3301      	adds	r3, #1
 801cdc4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdc8:	3304      	adds	r3, #4
 801cdca:	633b      	str	r3, [r7, #48]	; 0x30
 801cdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdce:	3b04      	subs	r3, #4
 801cdd0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdd4:	3b01      	subs	r3, #1
 801cdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d1bd      	bne.n	801cd5a <f_getfree+0xbc>
 801cdde:	e000      	b.n	801cde2 <f_getfree+0x144>
							if (res != FR_OK) break;
 801cde0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801cde2:	68bb      	ldr	r3, [r7, #8]
 801cde4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cde6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cdec:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf0:	791a      	ldrb	r2, [r3, #4]
 801cdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdf4:	f042 0201 	orr.w	r2, r2, #1
 801cdf8:	b2d2      	uxtb	r2, r2
 801cdfa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801cdfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801ce00:	4618      	mov	r0, r3
 801ce02:	3748      	adds	r7, #72	; 0x48
 801ce04:	46bd      	mov	sp, r7
 801ce06:	bd80      	pop	{r7, pc}

0801ce08 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b084      	sub	sp, #16
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	6078      	str	r0, [r7, #4]
 801ce10:	460b      	mov	r3, r1
 801ce12:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801ce14:	78fb      	ldrb	r3, [r7, #3]
 801ce16:	2b0a      	cmp	r3, #10
 801ce18:	d103      	bne.n	801ce22 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801ce1a:	210d      	movs	r1, #13
 801ce1c:	6878      	ldr	r0, [r7, #4]
 801ce1e:	f7ff fff3 	bl	801ce08 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	685b      	ldr	r3, [r3, #4]
 801ce26:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	db25      	blt.n	801ce7a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	1c5a      	adds	r2, r3, #1
 801ce32:	60fa      	str	r2, [r7, #12]
 801ce34:	687a      	ldr	r2, [r7, #4]
 801ce36:	4413      	add	r3, r2
 801ce38:	78fa      	ldrb	r2, [r7, #3]
 801ce3a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801ce3c:	68fb      	ldr	r3, [r7, #12]
 801ce3e:	2b3c      	cmp	r3, #60	; 0x3c
 801ce40:	dd12      	ble.n	801ce68 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	6818      	ldr	r0, [r3, #0]
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	f103 010c 	add.w	r1, r3, #12
 801ce4c:	68fa      	ldr	r2, [r7, #12]
 801ce4e:	f107 0308 	add.w	r3, r7, #8
 801ce52:	f7ff fa08 	bl	801c266 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801ce56:	68ba      	ldr	r2, [r7, #8]
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	429a      	cmp	r2, r3
 801ce5c:	d101      	bne.n	801ce62 <putc_bfd+0x5a>
 801ce5e:	2300      	movs	r3, #0
 801ce60:	e001      	b.n	801ce66 <putc_bfd+0x5e>
 801ce62:	f04f 33ff 	mov.w	r3, #4294967295
 801ce66:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	68fa      	ldr	r2, [r7, #12]
 801ce6c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	689b      	ldr	r3, [r3, #8]
 801ce72:	1c5a      	adds	r2, r3, #1
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	609a      	str	r2, [r3, #8]
 801ce78:	e000      	b.n	801ce7c <putc_bfd+0x74>
	if (i < 0) return;
 801ce7a:	bf00      	nop
}
 801ce7c:	3710      	adds	r7, #16
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bd80      	pop	{r7, pc}

0801ce82 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801ce82:	b580      	push	{r7, lr}
 801ce84:	b084      	sub	sp, #16
 801ce86:	af00      	add	r7, sp, #0
 801ce88:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	685b      	ldr	r3, [r3, #4]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	db16      	blt.n	801cec0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	6818      	ldr	r0, [r3, #0]
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	f103 010c 	add.w	r1, r3, #12
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	685b      	ldr	r3, [r3, #4]
 801cea0:	461a      	mov	r2, r3
 801cea2:	f107 030c 	add.w	r3, r7, #12
 801cea6:	f7ff f9de 	bl	801c266 <f_write>
 801ceaa:	4603      	mov	r3, r0
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d107      	bne.n	801cec0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	685b      	ldr	r3, [r3, #4]
 801ceb4:	68fa      	ldr	r2, [r7, #12]
 801ceb6:	4293      	cmp	r3, r2
 801ceb8:	d102      	bne.n	801cec0 <putc_flush+0x3e>
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	689b      	ldr	r3, [r3, #8]
 801cebe:	e001      	b.n	801cec4 <putc_flush+0x42>
	return EOF;
 801cec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3710      	adds	r7, #16
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}

0801cecc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801cecc:	b480      	push	{r7}
 801cece:	b083      	sub	sp, #12
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	6078      	str	r0, [r7, #4]
 801ced4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	683a      	ldr	r2, [r7, #0]
 801ceda:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	2200      	movs	r2, #0
 801cee0:	605a      	str	r2, [r3, #4]
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	685a      	ldr	r2, [r3, #4]
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	609a      	str	r2, [r3, #8]
}
 801ceea:	bf00      	nop
 801ceec:	370c      	adds	r7, #12
 801ceee:	46bd      	mov	sp, r7
 801cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef4:	4770      	bx	lr
	...

0801cef8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801cef8:	b40e      	push	{r1, r2, r3}
 801cefa:	b580      	push	{r7, lr}
 801cefc:	b0a7      	sub	sp, #156	; 0x9c
 801cefe:	af00      	add	r7, sp, #0
 801cf00:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801cf02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf06:	6879      	ldr	r1, [r7, #4]
 801cf08:	4618      	mov	r0, r3
 801cf0a:	f7ff ffdf 	bl	801cecc <putc_init>

	va_start(arp, fmt);
 801cf0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cf12:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 801cf14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf18:	1c5a      	adds	r2, r3, #1
 801cf1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cf1e:	781b      	ldrb	r3, [r3, #0]
 801cf20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 801cf24:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	f000 81f2 	beq.w	801d312 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801cf2e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cf32:	2b25      	cmp	r3, #37	; 0x25
 801cf34:	d008      	beq.n	801cf48 <f_printf+0x50>
			putc_bfd(&pb, c);
 801cf36:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801cf3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf3e:	4611      	mov	r1, r2
 801cf40:	4618      	mov	r0, r3
 801cf42:	f7ff ff61 	bl	801ce08 <putc_bfd>
			continue;
 801cf46:	e1e3      	b.n	801d310 <f_printf+0x418>
		}
		w = f = 0;
 801cf48:	2300      	movs	r3, #0
 801cf4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cf4e:	2300      	movs	r3, #0
 801cf50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801cf54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf58:	1c5a      	adds	r2, r3, #1
 801cf5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cf5e:	781b      	ldrb	r3, [r3, #0]
 801cf60:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801cf64:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cf68:	2b30      	cmp	r3, #48	; 0x30
 801cf6a:	d10b      	bne.n	801cf84 <f_printf+0x8c>
			f = 1; c = *fmt++;
 801cf6c:	2301      	movs	r3, #1
 801cf6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cf72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf76:	1c5a      	adds	r2, r3, #1
 801cf78:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cf7c:	781b      	ldrb	r3, [r3, #0]
 801cf7e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801cf82:	e024      	b.n	801cfce <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801cf84:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cf88:	2b2d      	cmp	r3, #45	; 0x2d
 801cf8a:	d120      	bne.n	801cfce <f_printf+0xd6>
				f = 2; c = *fmt++;
 801cf8c:	2302      	movs	r3, #2
 801cf8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cf92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cf96:	1c5a      	adds	r2, r3, #1
 801cf98:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801cfa2:	e014      	b.n	801cfce <f_printf+0xd6>
			w = w * 10 + c - '0';
 801cfa4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cfa8:	4613      	mov	r3, r2
 801cfaa:	009b      	lsls	r3, r3, #2
 801cfac:	4413      	add	r3, r2
 801cfae:	005b      	lsls	r3, r3, #1
 801cfb0:	461a      	mov	r2, r3
 801cfb2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cfb6:	4413      	add	r3, r2
 801cfb8:	3b30      	subs	r3, #48	; 0x30
 801cfba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801cfbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cfc2:	1c5a      	adds	r2, r3, #1
 801cfc4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cfc8:	781b      	ldrb	r3, [r3, #0]
 801cfca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801cfce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cfd2:	2b2f      	cmp	r3, #47	; 0x2f
 801cfd4:	d903      	bls.n	801cfde <f_printf+0xe6>
 801cfd6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cfda:	2b39      	cmp	r3, #57	; 0x39
 801cfdc:	d9e2      	bls.n	801cfa4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801cfde:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cfe2:	2b6c      	cmp	r3, #108	; 0x6c
 801cfe4:	d003      	beq.n	801cfee <f_printf+0xf6>
 801cfe6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cfea:	2b4c      	cmp	r3, #76	; 0x4c
 801cfec:	d10d      	bne.n	801d00a <f_printf+0x112>
			f |= 4; c = *fmt++;
 801cfee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cff2:	f043 0304 	orr.w	r3, r3, #4
 801cff6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cffe:	1c5a      	adds	r2, r3, #1
 801d000:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801d004:	781b      	ldrb	r3, [r3, #0]
 801d006:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801d00a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801d00e:	2b00      	cmp	r3, #0
 801d010:	f000 8181 	beq.w	801d316 <f_printf+0x41e>
		d = c;
 801d014:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801d018:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 801d01c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d020:	2b60      	cmp	r3, #96	; 0x60
 801d022:	d908      	bls.n	801d036 <f_printf+0x13e>
 801d024:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d028:	2b7a      	cmp	r3, #122	; 0x7a
 801d02a:	d804      	bhi.n	801d036 <f_printf+0x13e>
 801d02c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d030:	3b20      	subs	r3, #32
 801d032:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801d036:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d03a:	3b42      	subs	r3, #66	; 0x42
 801d03c:	2b16      	cmp	r3, #22
 801d03e:	f200 8098 	bhi.w	801d172 <f_printf+0x27a>
 801d042:	a201      	add	r2, pc, #4	; (adr r2, 801d048 <f_printf+0x150>)
 801d044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d048:	0801d153 	.word	0x0801d153
 801d04c:	0801d13b 	.word	0x0801d13b
 801d050:	0801d163 	.word	0x0801d163
 801d054:	0801d173 	.word	0x0801d173
 801d058:	0801d173 	.word	0x0801d173
 801d05c:	0801d173 	.word	0x0801d173
 801d060:	0801d173 	.word	0x0801d173
 801d064:	0801d173 	.word	0x0801d173
 801d068:	0801d173 	.word	0x0801d173
 801d06c:	0801d173 	.word	0x0801d173
 801d070:	0801d173 	.word	0x0801d173
 801d074:	0801d173 	.word	0x0801d173
 801d078:	0801d173 	.word	0x0801d173
 801d07c:	0801d15b 	.word	0x0801d15b
 801d080:	0801d173 	.word	0x0801d173
 801d084:	0801d173 	.word	0x0801d173
 801d088:	0801d173 	.word	0x0801d173
 801d08c:	0801d0a5 	.word	0x0801d0a5
 801d090:	0801d173 	.word	0x0801d173
 801d094:	0801d163 	.word	0x0801d163
 801d098:	0801d173 	.word	0x0801d173
 801d09c:	0801d173 	.word	0x0801d173
 801d0a0:	0801d16b 	.word	0x0801d16b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801d0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d0a6:	1d1a      	adds	r2, r3, #4
 801d0a8:	67ba      	str	r2, [r7, #120]	; 0x78
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d0b4:	e004      	b.n	801d0c0 <f_printf+0x1c8>
 801d0b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d0ba:	3301      	adds	r3, #1
 801d0bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d0c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801d0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d0c6:	4413      	add	r3, r2
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d1f3      	bne.n	801d0b6 <f_printf+0x1be>
			if (!(f & 2)) {
 801d0ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d0d2:	f003 0302 	and.w	r3, r3, #2
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d11a      	bne.n	801d110 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801d0da:	e005      	b.n	801d0e8 <f_printf+0x1f0>
 801d0dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d0e0:	2120      	movs	r1, #32
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	f7ff fe90 	bl	801ce08 <putc_bfd>
 801d0e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d0ec:	1c5a      	adds	r2, r3, #1
 801d0ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d0f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	d8f0      	bhi.n	801d0dc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801d0fa:	e009      	b.n	801d110 <f_printf+0x218>
 801d0fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d0fe:	1c5a      	adds	r2, r3, #1
 801d100:	67fa      	str	r2, [r7, #124]	; 0x7c
 801d102:	781a      	ldrb	r2, [r3, #0]
 801d104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d108:	4611      	mov	r1, r2
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7ff fe7c 	bl	801ce08 <putc_bfd>
 801d110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d112:	781b      	ldrb	r3, [r3, #0]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d1f1      	bne.n	801d0fc <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801d118:	e005      	b.n	801d126 <f_printf+0x22e>
 801d11a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d11e:	2120      	movs	r1, #32
 801d120:	4618      	mov	r0, r3
 801d122:	f7ff fe71 	bl	801ce08 <putc_bfd>
 801d126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d12a:	1c5a      	adds	r2, r3, #1
 801d12c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d130:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d134:	429a      	cmp	r2, r3
 801d136:	d8f0      	bhi.n	801d11a <f_printf+0x222>
			continue;
 801d138:	e0ea      	b.n	801d310 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801d13a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d13c:	1d1a      	adds	r2, r3, #4
 801d13e:	67ba      	str	r2, [r7, #120]	; 0x78
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	b2da      	uxtb	r2, r3
 801d144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d148:	4611      	mov	r1, r2
 801d14a:	4618      	mov	r0, r3
 801d14c:	f7ff fe5c 	bl	801ce08 <putc_bfd>
 801d150:	e0de      	b.n	801d310 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801d152:	2302      	movs	r3, #2
 801d154:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801d158:	e014      	b.n	801d184 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801d15a:	2308      	movs	r3, #8
 801d15c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801d160:	e010      	b.n	801d184 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801d162:	230a      	movs	r3, #10
 801d164:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801d168:	e00c      	b.n	801d184 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801d16a:	2310      	movs	r3, #16
 801d16c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801d170:	e008      	b.n	801d184 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801d172:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801d176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d17a:	4611      	mov	r1, r2
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ff fe43 	bl	801ce08 <putc_bfd>
 801d182:	e0c5      	b.n	801d310 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801d184:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d188:	f003 0304 	and.w	r3, r3, #4
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d004      	beq.n	801d19a <f_printf+0x2a2>
 801d190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d192:	1d1a      	adds	r2, r3, #4
 801d194:	67ba      	str	r2, [r7, #120]	; 0x78
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	e00c      	b.n	801d1b4 <f_printf+0x2bc>
 801d19a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d19e:	2b44      	cmp	r3, #68	; 0x44
 801d1a0:	d104      	bne.n	801d1ac <f_printf+0x2b4>
 801d1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d1a4:	1d1a      	adds	r2, r3, #4
 801d1a6:	67ba      	str	r2, [r7, #120]	; 0x78
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	e003      	b.n	801d1b4 <f_printf+0x2bc>
 801d1ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d1ae:	1d1a      	adds	r2, r3, #4
 801d1b0:	67ba      	str	r2, [r7, #120]	; 0x78
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801d1b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d1bc:	2b44      	cmp	r3, #68	; 0x44
 801d1be:	d10e      	bne.n	801d1de <f_printf+0x2e6>
 801d1c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	da0a      	bge.n	801d1de <f_printf+0x2e6>
			v = 0 - v;
 801d1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d1cc:	425b      	negs	r3, r3
 801d1ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801d1d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d1d6:	f043 0308 	orr.w	r3, r3, #8
 801d1da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801d1de:	2300      	movs	r3, #0
 801d1e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801d1e4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 801d1e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d1ec:	fbb3 f1f2 	udiv	r1, r3, r2
 801d1f0:	fb01 f202 	mul.w	r2, r1, r2
 801d1f4:	1a9b      	subs	r3, r3, r2
 801d1f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 801d1fa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801d1fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d202:	fbb2 f3f3 	udiv	r3, r2, r3
 801d206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801d20a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d20e:	2b09      	cmp	r3, #9
 801d210:	d90b      	bls.n	801d22a <f_printf+0x332>
 801d212:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801d216:	2b78      	cmp	r3, #120	; 0x78
 801d218:	d101      	bne.n	801d21e <f_printf+0x326>
 801d21a:	2227      	movs	r2, #39	; 0x27
 801d21c:	e000      	b.n	801d220 <f_printf+0x328>
 801d21e:	2207      	movs	r2, #7
 801d220:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801d224:	4413      	add	r3, r2
 801d226:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801d22a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d22e:	1c5a      	adds	r2, r3, #1
 801d230:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801d234:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801d238:	3230      	adds	r2, #48	; 0x30
 801d23a:	b2d2      	uxtb	r2, r2
 801d23c:	3398      	adds	r3, #152	; 0x98
 801d23e:	443b      	add	r3, r7
 801d240:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801d244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d003      	beq.n	801d254 <f_printf+0x35c>
 801d24c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d250:	2b1f      	cmp	r3, #31
 801d252:	d9c7      	bls.n	801d1e4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801d254:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d258:	f003 0308 	and.w	r3, r3, #8
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d009      	beq.n	801d274 <f_printf+0x37c>
 801d260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d264:	1c5a      	adds	r2, r3, #1
 801d266:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801d26a:	3398      	adds	r3, #152	; 0x98
 801d26c:	443b      	add	r3, r7
 801d26e:	222d      	movs	r2, #45	; 0x2d
 801d270:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801d274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d278:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d27c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d280:	f003 0301 	and.w	r3, r3, #1
 801d284:	2b00      	cmp	r3, #0
 801d286:	d001      	beq.n	801d28c <f_printf+0x394>
 801d288:	2330      	movs	r3, #48	; 0x30
 801d28a:	e000      	b.n	801d28e <f_printf+0x396>
 801d28c:	2320      	movs	r3, #32
 801d28e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801d292:	e007      	b.n	801d2a4 <f_printf+0x3ac>
 801d294:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801d298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d29c:	4611      	mov	r1, r2
 801d29e:	4618      	mov	r0, r3
 801d2a0:	f7ff fdb2 	bl	801ce08 <putc_bfd>
 801d2a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801d2a8:	f003 0302 	and.w	r3, r3, #2
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	d108      	bne.n	801d2c2 <f_printf+0x3ca>
 801d2b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d2b4:	1c5a      	adds	r2, r3, #1
 801d2b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d2ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d2be:	429a      	cmp	r2, r3
 801d2c0:	d8e8      	bhi.n	801d294 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801d2c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d2c6:	3b01      	subs	r3, #1
 801d2c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801d2cc:	f107 020c 	add.w	r2, r7, #12
 801d2d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d2d4:	4413      	add	r3, r2
 801d2d6:	781a      	ldrb	r2, [r3, #0]
 801d2d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d2dc:	4611      	mov	r1, r2
 801d2de:	4618      	mov	r0, r3
 801d2e0:	f7ff fd92 	bl	801ce08 <putc_bfd>
		} while (i);
 801d2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d1ea      	bne.n	801d2c2 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 801d2ec:	e007      	b.n	801d2fe <f_printf+0x406>
 801d2ee:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801d2f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d2f6:	4611      	mov	r1, r2
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	f7ff fd85 	bl	801ce08 <putc_bfd>
 801d2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d302:	1c5a      	adds	r2, r3, #1
 801d304:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801d308:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d8ee      	bhi.n	801d2ee <f_printf+0x3f6>
		c = *fmt++;
 801d310:	e600      	b.n	801cf14 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801d312:	bf00      	nop
 801d314:	e000      	b.n	801d318 <f_printf+0x420>
		if (!c) break;
 801d316:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801d318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d31c:	4618      	mov	r0, r3
 801d31e:	f7ff fdb0 	bl	801ce82 <putc_flush>
 801d322:	4603      	mov	r3, r0
}
 801d324:	4618      	mov	r0, r3
 801d326:	379c      	adds	r7, #156	; 0x9c
 801d328:	46bd      	mov	sp, r7
 801d32a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d32e:	b003      	add	sp, #12
 801d330:	4770      	bx	lr
 801d332:	bf00      	nop

0801d334 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d334:	b480      	push	{r7}
 801d336:	b087      	sub	sp, #28
 801d338:	af00      	add	r7, sp, #0
 801d33a:	60f8      	str	r0, [r7, #12]
 801d33c:	60b9      	str	r1, [r7, #8]
 801d33e:	4613      	mov	r3, r2
 801d340:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d342:	2301      	movs	r3, #1
 801d344:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d346:	2300      	movs	r3, #0
 801d348:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d34a:	4b1f      	ldr	r3, [pc, #124]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d34c:	7b9b      	ldrb	r3, [r3, #14]
 801d34e:	b2db      	uxtb	r3, r3
 801d350:	2b01      	cmp	r3, #1
 801d352:	d831      	bhi.n	801d3b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d354:	4b1c      	ldr	r3, [pc, #112]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d356:	7b9b      	ldrb	r3, [r3, #14]
 801d358:	b2db      	uxtb	r3, r3
 801d35a:	461a      	mov	r2, r3
 801d35c:	4b1a      	ldr	r3, [pc, #104]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d35e:	2100      	movs	r1, #0
 801d360:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d362:	4b19      	ldr	r3, [pc, #100]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d364:	7b9b      	ldrb	r3, [r3, #14]
 801d366:	b2db      	uxtb	r3, r3
 801d368:	4a17      	ldr	r2, [pc, #92]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d36a:	009b      	lsls	r3, r3, #2
 801d36c:	4413      	add	r3, r2
 801d36e:	68fa      	ldr	r2, [r7, #12]
 801d370:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d372:	4b15      	ldr	r3, [pc, #84]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d374:	7b9b      	ldrb	r3, [r3, #14]
 801d376:	b2db      	uxtb	r3, r3
 801d378:	461a      	mov	r2, r3
 801d37a:	4b13      	ldr	r3, [pc, #76]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d37c:	4413      	add	r3, r2
 801d37e:	79fa      	ldrb	r2, [r7, #7]
 801d380:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801d382:	4b11      	ldr	r3, [pc, #68]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d384:	7b9b      	ldrb	r3, [r3, #14]
 801d386:	b2db      	uxtb	r3, r3
 801d388:	1c5a      	adds	r2, r3, #1
 801d38a:	b2d1      	uxtb	r1, r2
 801d38c:	4a0e      	ldr	r2, [pc, #56]	; (801d3c8 <FATFS_LinkDriverEx+0x94>)
 801d38e:	7391      	strb	r1, [r2, #14]
 801d390:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d392:	7dbb      	ldrb	r3, [r7, #22]
 801d394:	3330      	adds	r3, #48	; 0x30
 801d396:	b2da      	uxtb	r2, r3
 801d398:	68bb      	ldr	r3, [r7, #8]
 801d39a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	3301      	adds	r3, #1
 801d3a0:	223a      	movs	r2, #58	; 0x3a
 801d3a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	3302      	adds	r3, #2
 801d3a8:	222f      	movs	r2, #47	; 0x2f
 801d3aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d3ac:	68bb      	ldr	r3, [r7, #8]
 801d3ae:	3303      	adds	r3, #3
 801d3b0:	2200      	movs	r2, #0
 801d3b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 801d3ba:	4618      	mov	r0, r3
 801d3bc:	371c      	adds	r7, #28
 801d3be:	46bd      	mov	sp, r7
 801d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3c4:	4770      	bx	lr
 801d3c6:	bf00      	nop
 801d3c8:	2000b330 	.word	0x2000b330

0801d3cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b082      	sub	sp, #8
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
 801d3d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d3d6:	2200      	movs	r2, #0
 801d3d8:	6839      	ldr	r1, [r7, #0]
 801d3da:	6878      	ldr	r0, [r7, #4]
 801d3dc:	f7ff ffaa 	bl	801d334 <FATFS_LinkDriverEx>
 801d3e0:	4603      	mov	r3, r0
}
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	3708      	adds	r7, #8
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bd80      	pop	{r7, pc}

0801d3ea <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801d3ea:	b580      	push	{r7, lr}
 801d3ec:	b082      	sub	sp, #8
 801d3ee:	af00      	add	r7, sp, #0
 801d3f0:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801d3f2:	6878      	ldr	r0, [r7, #4]
 801d3f4:	f007 fda2 	bl	8024f3c <malloc>
 801d3f8:	4603      	mov	r3, r0
}
 801d3fa:	4618      	mov	r0, r3
 801d3fc:	3708      	adds	r7, #8
 801d3fe:	46bd      	mov	sp, r7
 801d400:	bd80      	pop	{r7, pc}

0801d402 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801d402:	b580      	push	{r7, lr}
 801d404:	b082      	sub	sp, #8
 801d406:	af00      	add	r7, sp, #0
 801d408:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f007 fd9e 	bl	8024f4c <free>
}
 801d410:	bf00      	nop
 801d412:	3708      	adds	r7, #8
 801d414:	46bd      	mov	sp, r7
 801d416:	bd80      	pop	{r7, pc}

0801d418 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d418:	b480      	push	{r7}
 801d41a:	b085      	sub	sp, #20
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	4603      	mov	r3, r0
 801d420:	6039      	str	r1, [r7, #0]
 801d422:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d424:	88fb      	ldrh	r3, [r7, #6]
 801d426:	2b7f      	cmp	r3, #127	; 0x7f
 801d428:	d802      	bhi.n	801d430 <ff_convert+0x18>
		c = chr;
 801d42a:	88fb      	ldrh	r3, [r7, #6]
 801d42c:	81fb      	strh	r3, [r7, #14]
 801d42e:	e025      	b.n	801d47c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d430:	683b      	ldr	r3, [r7, #0]
 801d432:	2b00      	cmp	r3, #0
 801d434:	d00b      	beq.n	801d44e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d436:	88fb      	ldrh	r3, [r7, #6]
 801d438:	2bff      	cmp	r3, #255	; 0xff
 801d43a:	d805      	bhi.n	801d448 <ff_convert+0x30>
 801d43c:	88fb      	ldrh	r3, [r7, #6]
 801d43e:	3b80      	subs	r3, #128	; 0x80
 801d440:	4a12      	ldr	r2, [pc, #72]	; (801d48c <ff_convert+0x74>)
 801d442:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d446:	e000      	b.n	801d44a <ff_convert+0x32>
 801d448:	2300      	movs	r3, #0
 801d44a:	81fb      	strh	r3, [r7, #14]
 801d44c:	e016      	b.n	801d47c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d44e:	2300      	movs	r3, #0
 801d450:	81fb      	strh	r3, [r7, #14]
 801d452:	e009      	b.n	801d468 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d454:	89fb      	ldrh	r3, [r7, #14]
 801d456:	4a0d      	ldr	r2, [pc, #52]	; (801d48c <ff_convert+0x74>)
 801d458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d45c:	88fa      	ldrh	r2, [r7, #6]
 801d45e:	429a      	cmp	r2, r3
 801d460:	d006      	beq.n	801d470 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d462:	89fb      	ldrh	r3, [r7, #14]
 801d464:	3301      	adds	r3, #1
 801d466:	81fb      	strh	r3, [r7, #14]
 801d468:	89fb      	ldrh	r3, [r7, #14]
 801d46a:	2b7f      	cmp	r3, #127	; 0x7f
 801d46c:	d9f2      	bls.n	801d454 <ff_convert+0x3c>
 801d46e:	e000      	b.n	801d472 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d470:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d472:	89fb      	ldrh	r3, [r7, #14]
 801d474:	3380      	adds	r3, #128	; 0x80
 801d476:	b29b      	uxth	r3, r3
 801d478:	b2db      	uxtb	r3, r3
 801d47a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d47c:	89fb      	ldrh	r3, [r7, #14]
}
 801d47e:	4618      	mov	r0, r3
 801d480:	3714      	adds	r7, #20
 801d482:	46bd      	mov	sp, r7
 801d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d488:	4770      	bx	lr
 801d48a:	bf00      	nop
 801d48c:	080376f4 	.word	0x080376f4

0801d490 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d490:	b480      	push	{r7}
 801d492:	b087      	sub	sp, #28
 801d494:	af00      	add	r7, sp, #0
 801d496:	4603      	mov	r3, r0
 801d498:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d49a:	88fb      	ldrh	r3, [r7, #6]
 801d49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d4a0:	d201      	bcs.n	801d4a6 <ff_wtoupper+0x16>
 801d4a2:	4b3e      	ldr	r3, [pc, #248]	; (801d59c <ff_wtoupper+0x10c>)
 801d4a4:	e000      	b.n	801d4a8 <ff_wtoupper+0x18>
 801d4a6:	4b3e      	ldr	r3, [pc, #248]	; (801d5a0 <ff_wtoupper+0x110>)
 801d4a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	1c9a      	adds	r2, r3, #2
 801d4ae:	617a      	str	r2, [r7, #20]
 801d4b0:	881b      	ldrh	r3, [r3, #0]
 801d4b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d4b4:	8a7b      	ldrh	r3, [r7, #18]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d068      	beq.n	801d58c <ff_wtoupper+0xfc>
 801d4ba:	88fa      	ldrh	r2, [r7, #6]
 801d4bc:	8a7b      	ldrh	r3, [r7, #18]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	d364      	bcc.n	801d58c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d4c2:	697b      	ldr	r3, [r7, #20]
 801d4c4:	1c9a      	adds	r2, r3, #2
 801d4c6:	617a      	str	r2, [r7, #20]
 801d4c8:	881b      	ldrh	r3, [r3, #0]
 801d4ca:	823b      	strh	r3, [r7, #16]
 801d4cc:	8a3b      	ldrh	r3, [r7, #16]
 801d4ce:	0a1b      	lsrs	r3, r3, #8
 801d4d0:	81fb      	strh	r3, [r7, #14]
 801d4d2:	8a3b      	ldrh	r3, [r7, #16]
 801d4d4:	b2db      	uxtb	r3, r3
 801d4d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d4d8:	88fa      	ldrh	r2, [r7, #6]
 801d4da:	8a79      	ldrh	r1, [r7, #18]
 801d4dc:	8a3b      	ldrh	r3, [r7, #16]
 801d4de:	440b      	add	r3, r1
 801d4e0:	429a      	cmp	r2, r3
 801d4e2:	da49      	bge.n	801d578 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d4e4:	89fb      	ldrh	r3, [r7, #14]
 801d4e6:	2b08      	cmp	r3, #8
 801d4e8:	d84f      	bhi.n	801d58a <ff_wtoupper+0xfa>
 801d4ea:	a201      	add	r2, pc, #4	; (adr r2, 801d4f0 <ff_wtoupper+0x60>)
 801d4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d4f0:	0801d515 	.word	0x0801d515
 801d4f4:	0801d527 	.word	0x0801d527
 801d4f8:	0801d53d 	.word	0x0801d53d
 801d4fc:	0801d545 	.word	0x0801d545
 801d500:	0801d54d 	.word	0x0801d54d
 801d504:	0801d555 	.word	0x0801d555
 801d508:	0801d55d 	.word	0x0801d55d
 801d50c:	0801d565 	.word	0x0801d565
 801d510:	0801d56d 	.word	0x0801d56d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d514:	88fa      	ldrh	r2, [r7, #6]
 801d516:	8a7b      	ldrh	r3, [r7, #18]
 801d518:	1ad3      	subs	r3, r2, r3
 801d51a:	005b      	lsls	r3, r3, #1
 801d51c:	697a      	ldr	r2, [r7, #20]
 801d51e:	4413      	add	r3, r2
 801d520:	881b      	ldrh	r3, [r3, #0]
 801d522:	80fb      	strh	r3, [r7, #6]
 801d524:	e027      	b.n	801d576 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d526:	88fa      	ldrh	r2, [r7, #6]
 801d528:	8a7b      	ldrh	r3, [r7, #18]
 801d52a:	1ad3      	subs	r3, r2, r3
 801d52c:	b29b      	uxth	r3, r3
 801d52e:	f003 0301 	and.w	r3, r3, #1
 801d532:	b29b      	uxth	r3, r3
 801d534:	88fa      	ldrh	r2, [r7, #6]
 801d536:	1ad3      	subs	r3, r2, r3
 801d538:	80fb      	strh	r3, [r7, #6]
 801d53a:	e01c      	b.n	801d576 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d53c:	88fb      	ldrh	r3, [r7, #6]
 801d53e:	3b10      	subs	r3, #16
 801d540:	80fb      	strh	r3, [r7, #6]
 801d542:	e018      	b.n	801d576 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d544:	88fb      	ldrh	r3, [r7, #6]
 801d546:	3b20      	subs	r3, #32
 801d548:	80fb      	strh	r3, [r7, #6]
 801d54a:	e014      	b.n	801d576 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d54c:	88fb      	ldrh	r3, [r7, #6]
 801d54e:	3b30      	subs	r3, #48	; 0x30
 801d550:	80fb      	strh	r3, [r7, #6]
 801d552:	e010      	b.n	801d576 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d554:	88fb      	ldrh	r3, [r7, #6]
 801d556:	3b1a      	subs	r3, #26
 801d558:	80fb      	strh	r3, [r7, #6]
 801d55a:	e00c      	b.n	801d576 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d55c:	88fb      	ldrh	r3, [r7, #6]
 801d55e:	3308      	adds	r3, #8
 801d560:	80fb      	strh	r3, [r7, #6]
 801d562:	e008      	b.n	801d576 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d564:	88fb      	ldrh	r3, [r7, #6]
 801d566:	3b50      	subs	r3, #80	; 0x50
 801d568:	80fb      	strh	r3, [r7, #6]
 801d56a:	e004      	b.n	801d576 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d56c:	88fb      	ldrh	r3, [r7, #6]
 801d56e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801d572:	80fb      	strh	r3, [r7, #6]
 801d574:	bf00      	nop
			}
			break;
 801d576:	e008      	b.n	801d58a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d578:	89fb      	ldrh	r3, [r7, #14]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d195      	bne.n	801d4aa <ff_wtoupper+0x1a>
 801d57e:	8a3b      	ldrh	r3, [r7, #16]
 801d580:	005b      	lsls	r3, r3, #1
 801d582:	697a      	ldr	r2, [r7, #20]
 801d584:	4413      	add	r3, r2
 801d586:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d588:	e78f      	b.n	801d4aa <ff_wtoupper+0x1a>
			break;
 801d58a:	bf00      	nop
	}

	return chr;
 801d58c:	88fb      	ldrh	r3, [r7, #6]
}
 801d58e:	4618      	mov	r0, r3
 801d590:	371c      	adds	r7, #28
 801d592:	46bd      	mov	sp, r7
 801d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d598:	4770      	bx	lr
 801d59a:	bf00      	nop
 801d59c:	080377f4 	.word	0x080377f4
 801d5a0:	080379e8 	.word	0x080379e8

0801d5a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801d5a4:	b580      	push	{r7, lr}
 801d5a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801d5a8:	4b0e      	ldr	r3, [pc, #56]	; (801d5e4 <HAL_Init+0x40>)
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	4a0d      	ldr	r2, [pc, #52]	; (801d5e4 <HAL_Init+0x40>)
 801d5ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801d5b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801d5b4:	4b0b      	ldr	r3, [pc, #44]	; (801d5e4 <HAL_Init+0x40>)
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	4a0a      	ldr	r2, [pc, #40]	; (801d5e4 <HAL_Init+0x40>)
 801d5ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801d5be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801d5c0:	4b08      	ldr	r3, [pc, #32]	; (801d5e4 <HAL_Init+0x40>)
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	4a07      	ldr	r2, [pc, #28]	; (801d5e4 <HAL_Init+0x40>)
 801d5c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d5ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801d5cc:	2003      	movs	r0, #3
 801d5ce:	f000 fead 	bl	801e32c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	f000 f808 	bl	801d5e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801d5d8:	f7f5 fa58 	bl	8012a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801d5dc:	2300      	movs	r3, #0
}
 801d5de:	4618      	mov	r0, r3
 801d5e0:	bd80      	pop	{r7, pc}
 801d5e2:	bf00      	nop
 801d5e4:	40023c00 	.word	0x40023c00

0801d5e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801d5e8:	b580      	push	{r7, lr}
 801d5ea:	b082      	sub	sp, #8
 801d5ec:	af00      	add	r7, sp, #0
 801d5ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801d5f0:	4b12      	ldr	r3, [pc, #72]	; (801d63c <HAL_InitTick+0x54>)
 801d5f2:	681a      	ldr	r2, [r3, #0]
 801d5f4:	4b12      	ldr	r3, [pc, #72]	; (801d640 <HAL_InitTick+0x58>)
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	4619      	mov	r1, r3
 801d5fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d5fe:	fbb3 f3f1 	udiv	r3, r3, r1
 801d602:	fbb2 f3f3 	udiv	r3, r2, r3
 801d606:	4618      	mov	r0, r3
 801d608:	f000 fed3 	bl	801e3b2 <HAL_SYSTICK_Config>
 801d60c:	4603      	mov	r3, r0
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d001      	beq.n	801d616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801d612:	2301      	movs	r3, #1
 801d614:	e00e      	b.n	801d634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	2b0f      	cmp	r3, #15
 801d61a:	d80a      	bhi.n	801d632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801d61c:	2200      	movs	r2, #0
 801d61e:	6879      	ldr	r1, [r7, #4]
 801d620:	f04f 30ff 	mov.w	r0, #4294967295
 801d624:	f000 fe8d 	bl	801e342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801d628:	4a06      	ldr	r2, [pc, #24]	; (801d644 <HAL_InitTick+0x5c>)
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801d62e:	2300      	movs	r3, #0
 801d630:	e000      	b.n	801d634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801d632:	2301      	movs	r3, #1
}
 801d634:	4618      	mov	r0, r3
 801d636:	3708      	adds	r7, #8
 801d638:	46bd      	mov	sp, r7
 801d63a:	bd80      	pop	{r7, pc}
 801d63c:	20000000 	.word	0x20000000
 801d640:	200000dc 	.word	0x200000dc
 801d644:	200000d8 	.word	0x200000d8

0801d648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801d648:	b480      	push	{r7}
 801d64a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801d64c:	4b06      	ldr	r3, [pc, #24]	; (801d668 <HAL_IncTick+0x20>)
 801d64e:	781b      	ldrb	r3, [r3, #0]
 801d650:	461a      	mov	r2, r3
 801d652:	4b06      	ldr	r3, [pc, #24]	; (801d66c <HAL_IncTick+0x24>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	4413      	add	r3, r2
 801d658:	4a04      	ldr	r2, [pc, #16]	; (801d66c <HAL_IncTick+0x24>)
 801d65a:	6013      	str	r3, [r2, #0]
}
 801d65c:	bf00      	nop
 801d65e:	46bd      	mov	sp, r7
 801d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d664:	4770      	bx	lr
 801d666:	bf00      	nop
 801d668:	200000dc 	.word	0x200000dc
 801d66c:	2000b340 	.word	0x2000b340

0801d670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801d670:	b480      	push	{r7}
 801d672:	af00      	add	r7, sp, #0
  return uwTick;
 801d674:	4b03      	ldr	r3, [pc, #12]	; (801d684 <HAL_GetTick+0x14>)
 801d676:	681b      	ldr	r3, [r3, #0]
}
 801d678:	4618      	mov	r0, r3
 801d67a:	46bd      	mov	sp, r7
 801d67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d680:	4770      	bx	lr
 801d682:	bf00      	nop
 801d684:	2000b340 	.word	0x2000b340

0801d688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801d688:	b580      	push	{r7, lr}
 801d68a:	b084      	sub	sp, #16
 801d68c:	af00      	add	r7, sp, #0
 801d68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801d690:	f7ff ffee 	bl	801d670 <HAL_GetTick>
 801d694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d6a0:	d005      	beq.n	801d6ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801d6a2:	4b0a      	ldr	r3, [pc, #40]	; (801d6cc <HAL_Delay+0x44>)
 801d6a4:	781b      	ldrb	r3, [r3, #0]
 801d6a6:	461a      	mov	r2, r3
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	4413      	add	r3, r2
 801d6ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801d6ae:	bf00      	nop
 801d6b0:	f7ff ffde 	bl	801d670 <HAL_GetTick>
 801d6b4:	4602      	mov	r2, r0
 801d6b6:	68bb      	ldr	r3, [r7, #8]
 801d6b8:	1ad3      	subs	r3, r2, r3
 801d6ba:	68fa      	ldr	r2, [r7, #12]
 801d6bc:	429a      	cmp	r2, r3
 801d6be:	d8f7      	bhi.n	801d6b0 <HAL_Delay+0x28>
  {
  }
}
 801d6c0:	bf00      	nop
 801d6c2:	bf00      	nop
 801d6c4:	3710      	adds	r7, #16
 801d6c6:	46bd      	mov	sp, r7
 801d6c8:	bd80      	pop	{r7, pc}
 801d6ca:	bf00      	nop
 801d6cc:	200000dc 	.word	0x200000dc

0801d6d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801d6d0:	b580      	push	{r7, lr}
 801d6d2:	b084      	sub	sp, #16
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d101      	bne.n	801d6e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801d6e2:	2301      	movs	r3, #1
 801d6e4:	e033      	b.n	801d74e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d109      	bne.n	801d702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801d6ee:	6878      	ldr	r0, [r7, #4]
 801d6f0:	f7fa f9b4 	bl	8017a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d706:	f003 0310 	and.w	r3, r3, #16
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d118      	bne.n	801d740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801d716:	f023 0302 	bic.w	r3, r3, #2
 801d71a:	f043 0202 	orr.w	r2, r3, #2
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801d722:	6878      	ldr	r0, [r7, #4]
 801d724:	f000 fb86 	bl	801de34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	2200      	movs	r2, #0
 801d72c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d732:	f023 0303 	bic.w	r3, r3, #3
 801d736:	f043 0201 	orr.w	r2, r3, #1
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	641a      	str	r2, [r3, #64]	; 0x40
 801d73e:	e001      	b.n	801d744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801d740:	2301      	movs	r3, #1
 801d742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	2200      	movs	r2, #0
 801d748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801d74c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d74e:	4618      	mov	r0, r3
 801d750:	3710      	adds	r7, #16
 801d752:	46bd      	mov	sp, r7
 801d754:	bd80      	pop	{r7, pc}

0801d756 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 801d756:	b580      	push	{r7, lr}
 801d758:	b084      	sub	sp, #16
 801d75a:	af00      	add	r7, sp, #0
 801d75c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801d75e:	2300      	movs	r3, #0
 801d760:	60fb      	str	r3, [r7, #12]
 801d762:	2300      	movs	r3, #0
 801d764:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	f003 0302 	and.w	r3, r3, #2
 801d770:	2b02      	cmp	r3, #2
 801d772:	bf0c      	ite	eq
 801d774:	2301      	moveq	r3, #1
 801d776:	2300      	movne	r3, #0
 801d778:	b2db      	uxtb	r3, r3
 801d77a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	685b      	ldr	r3, [r3, #4]
 801d782:	f003 0320 	and.w	r3, r3, #32
 801d786:	2b20      	cmp	r3, #32
 801d788:	bf0c      	ite	eq
 801d78a:	2301      	moveq	r3, #1
 801d78c:	2300      	movne	r3, #0
 801d78e:	b2db      	uxtb	r3, r3
 801d790:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	2b00      	cmp	r3, #0
 801d796:	d049      	beq.n	801d82c <HAL_ADC_IRQHandler+0xd6>
 801d798:	68bb      	ldr	r3, [r7, #8]
 801d79a:	2b00      	cmp	r3, #0
 801d79c:	d046      	beq.n	801d82c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7a2:	f003 0310 	and.w	r3, r3, #16
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d105      	bne.n	801d7b6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	689b      	ldr	r3, [r3, #8]
 801d7bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d12b      	bne.n	801d81c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d7c8:	2b00      	cmp	r3, #0
 801d7ca:	d127      	bne.n	801d81c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d006      	beq.n	801d7e8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	681b      	ldr	r3, [r3, #0]
 801d7de:	689b      	ldr	r3, [r3, #8]
 801d7e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d119      	bne.n	801d81c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	685a      	ldr	r2, [r3, #4]
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	681b      	ldr	r3, [r3, #0]
 801d7f2:	f022 0220 	bic.w	r2, r2, #32
 801d7f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d7fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d105      	bne.n	801d81c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d814:	f043 0201 	orr.w	r2, r3, #1
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801d81c:	6878      	ldr	r0, [r7, #4]
 801d81e:	f000 f9af 	bl	801db80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	f06f 0212 	mvn.w	r2, #18
 801d82a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	f003 0304 	and.w	r3, r3, #4
 801d836:	2b04      	cmp	r3, #4
 801d838:	bf0c      	ite	eq
 801d83a:	2301      	moveq	r3, #1
 801d83c:	2300      	movne	r3, #0
 801d83e:	b2db      	uxtb	r3, r3
 801d840:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	685b      	ldr	r3, [r3, #4]
 801d848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d84c:	2b80      	cmp	r3, #128	; 0x80
 801d84e:	bf0c      	ite	eq
 801d850:	2301      	moveq	r3, #1
 801d852:	2300      	movne	r3, #0
 801d854:	b2db      	uxtb	r3, r3
 801d856:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	d057      	beq.n	801d90e <HAL_ADC_IRQHandler+0x1b8>
 801d85e:	68bb      	ldr	r3, [r7, #8]
 801d860:	2b00      	cmp	r3, #0
 801d862:	d054      	beq.n	801d90e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d868:	f003 0310 	and.w	r3, r3, #16
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d105      	bne.n	801d87c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d874:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	689b      	ldr	r3, [r3, #8]
 801d882:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801d886:	2b00      	cmp	r3, #0
 801d888:	d139      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d890:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801d894:	2b00      	cmp	r3, #0
 801d896:	d006      	beq.n	801d8a6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	689b      	ldr	r3, [r3, #8]
 801d89e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d12b      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	685b      	ldr	r3, [r3, #4]
 801d8ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d124      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	689b      	ldr	r3, [r3, #8]
 801d8ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d11d      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801d8c6:	2b00      	cmp	r3, #0
 801d8c8:	d119      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	685a      	ldr	r2, [r3, #4]
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	681b      	ldr	r3, [r3, #0]
 801d8d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d8d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801d8da:	687b      	ldr	r3, [r7, #4]
 801d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d105      	bne.n	801d8fe <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8f6:	f043 0201 	orr.w	r2, r3, #1
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801d8fe:	6878      	ldr	r0, [r7, #4]
 801d900:	f000 fc16 	bl	801e130 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	f06f 020c 	mvn.w	r2, #12
 801d90c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	681b      	ldr	r3, [r3, #0]
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	f003 0301 	and.w	r3, r3, #1
 801d918:	2b01      	cmp	r3, #1
 801d91a:	bf0c      	ite	eq
 801d91c:	2301      	moveq	r3, #1
 801d91e:	2300      	movne	r3, #0
 801d920:	b2db      	uxtb	r3, r3
 801d922:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	685b      	ldr	r3, [r3, #4]
 801d92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d92e:	2b40      	cmp	r3, #64	; 0x40
 801d930:	bf0c      	ite	eq
 801d932:	2301      	moveq	r3, #1
 801d934:	2300      	movne	r3, #0
 801d936:	b2db      	uxtb	r3, r3
 801d938:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d017      	beq.n	801d970 <HAL_ADC_IRQHandler+0x21a>
 801d940:	68bb      	ldr	r3, [r7, #8]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d014      	beq.n	801d970 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	f003 0301 	and.w	r3, r3, #1
 801d950:	2b01      	cmp	r3, #1
 801d952:	d10d      	bne.n	801d970 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d958:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 801d960:	6878      	ldr	r0, [r7, #4]
 801d962:	f000 f921 	bl	801dba8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	f06f 0201 	mvn.w	r2, #1
 801d96e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	681b      	ldr	r3, [r3, #0]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	f003 0320 	and.w	r3, r3, #32
 801d97a:	2b20      	cmp	r3, #32
 801d97c:	bf0c      	ite	eq
 801d97e:	2301      	moveq	r3, #1
 801d980:	2300      	movne	r3, #0
 801d982:	b2db      	uxtb	r3, r3
 801d984:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 801d986:	687b      	ldr	r3, [r7, #4]
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	685b      	ldr	r3, [r3, #4]
 801d98c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d994:	bf0c      	ite	eq
 801d996:	2301      	moveq	r3, #1
 801d998:	2300      	movne	r3, #0
 801d99a:	b2db      	uxtb	r3, r3
 801d99c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d015      	beq.n	801d9d0 <HAL_ADC_IRQHandler+0x27a>
 801d9a4:	68bb      	ldr	r3, [r7, #8]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d012      	beq.n	801d9d0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9ae:	f043 0202 	orr.w	r2, r3, #2
 801d9b2:	687b      	ldr	r3, [r7, #4]
 801d9b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	f06f 0220 	mvn.w	r2, #32
 801d9be:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801d9c0:	6878      	ldr	r0, [r7, #4]
 801d9c2:	f000 f8fb 	bl	801dbbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	f06f 0220 	mvn.w	r2, #32
 801d9ce:	601a      	str	r2, [r3, #0]
  }
}
 801d9d0:	bf00      	nop
 801d9d2:	3710      	adds	r7, #16
 801d9d4:	46bd      	mov	sp, r7
 801d9d6:	bd80      	pop	{r7, pc}

0801d9d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b086      	sub	sp, #24
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	60f8      	str	r0, [r7, #12]
 801d9e0:	60b9      	str	r1, [r7, #8]
 801d9e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801d9e4:	2300      	movs	r3, #0
 801d9e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d9ee:	2b01      	cmp	r3, #1
 801d9f0:	d101      	bne.n	801d9f6 <HAL_ADC_Start_DMA+0x1e>
 801d9f2:	2302      	movs	r3, #2
 801d9f4:	e0b1      	b.n	801db5a <HAL_ADC_Start_DMA+0x182>
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	2201      	movs	r2, #1
 801d9fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	689b      	ldr	r3, [r3, #8]
 801da04:	f003 0301 	and.w	r3, r3, #1
 801da08:	2b01      	cmp	r3, #1
 801da0a:	d018      	beq.n	801da3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	689a      	ldr	r2, [r3, #8]
 801da12:	68fb      	ldr	r3, [r7, #12]
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	f042 0201 	orr.w	r2, r2, #1
 801da1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801da1c:	4b51      	ldr	r3, [pc, #324]	; (801db64 <HAL_ADC_Start_DMA+0x18c>)
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	4a51      	ldr	r2, [pc, #324]	; (801db68 <HAL_ADC_Start_DMA+0x190>)
 801da22:	fba2 2303 	umull	r2, r3, r2, r3
 801da26:	0c9a      	lsrs	r2, r3, #18
 801da28:	4613      	mov	r3, r2
 801da2a:	005b      	lsls	r3, r3, #1
 801da2c:	4413      	add	r3, r2
 801da2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801da30:	e002      	b.n	801da38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801da32:	693b      	ldr	r3, [r7, #16]
 801da34:	3b01      	subs	r3, #1
 801da36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801da38:	693b      	ldr	r3, [r7, #16]
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d1f9      	bne.n	801da32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	689b      	ldr	r3, [r3, #8]
 801da44:	f003 0301 	and.w	r3, r3, #1
 801da48:	2b01      	cmp	r3, #1
 801da4a:	f040 8085 	bne.w	801db58 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801da56:	f023 0301 	bic.w	r3, r3, #1
 801da5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801da62:	68fb      	ldr	r3, [r7, #12]
 801da64:	681b      	ldr	r3, [r3, #0]
 801da66:	685b      	ldr	r3, [r3, #4]
 801da68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d007      	beq.n	801da80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801da78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801da88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801da8c:	d106      	bne.n	801da9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da92:	f023 0206 	bic.w	r2, r3, #6
 801da96:	68fb      	ldr	r3, [r7, #12]
 801da98:	645a      	str	r2, [r3, #68]	; 0x44
 801da9a:	e002      	b.n	801daa2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	2200      	movs	r2, #0
 801daa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	2200      	movs	r2, #0
 801daa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801daaa:	4b30      	ldr	r3, [pc, #192]	; (801db6c <HAL_ADC_Start_DMA+0x194>)
 801daac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dab2:	4a2f      	ldr	r2, [pc, #188]	; (801db70 <HAL_ADC_Start_DMA+0x198>)
 801dab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daba:	4a2e      	ldr	r2, [pc, #184]	; (801db74 <HAL_ADC_Start_DMA+0x19c>)
 801dabc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801dabe:	68fb      	ldr	r3, [r7, #12]
 801dac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dac2:	4a2d      	ldr	r2, [pc, #180]	; (801db78 <HAL_ADC_Start_DMA+0x1a0>)
 801dac4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801dace:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801dad0:	68fb      	ldr	r3, [r7, #12]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	685a      	ldr	r2, [r3, #4]
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801dade:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	689a      	ldr	r2, [r3, #8]
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801daee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	334c      	adds	r3, #76	; 0x4c
 801dafa:	4619      	mov	r1, r3
 801dafc:	68ba      	ldr	r2, [r7, #8]
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	f000 fd70 	bl	801e5e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801db04:	697b      	ldr	r3, [r7, #20]
 801db06:	685b      	ldr	r3, [r3, #4]
 801db08:	f003 031f 	and.w	r3, r3, #31
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d10f      	bne.n	801db30 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	689b      	ldr	r3, [r3, #8]
 801db16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d11c      	bne.n	801db58 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	681b      	ldr	r3, [r3, #0]
 801db22:	689a      	ldr	r2, [r3, #8]
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801db2c:	609a      	str	r2, [r3, #8]
 801db2e:	e013      	b.n	801db58 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	4a11      	ldr	r2, [pc, #68]	; (801db7c <HAL_ADC_Start_DMA+0x1a4>)
 801db36:	4293      	cmp	r3, r2
 801db38:	d10e      	bne.n	801db58 <HAL_ADC_Start_DMA+0x180>
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	689b      	ldr	r3, [r3, #8]
 801db40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801db44:	2b00      	cmp	r3, #0
 801db46:	d107      	bne.n	801db58 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	689a      	ldr	r2, [r3, #8]
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801db56:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 801db58:	2300      	movs	r3, #0
}
 801db5a:	4618      	mov	r0, r3
 801db5c:	3718      	adds	r7, #24
 801db5e:	46bd      	mov	sp, r7
 801db60:	bd80      	pop	{r7, pc}
 801db62:	bf00      	nop
 801db64:	20000000 	.word	0x20000000
 801db68:	431bde83 	.word	0x431bde83
 801db6c:	40012300 	.word	0x40012300
 801db70:	0801e02d 	.word	0x0801e02d
 801db74:	0801e0e7 	.word	0x0801e0e7
 801db78:	0801e103 	.word	0x0801e103
 801db7c:	40012000 	.word	0x40012000

0801db80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801db80:	b480      	push	{r7}
 801db82:	b083      	sub	sp, #12
 801db84:	af00      	add	r7, sp, #0
 801db86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801db88:	bf00      	nop
 801db8a:	370c      	adds	r7, #12
 801db8c:	46bd      	mov	sp, r7
 801db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db92:	4770      	bx	lr

0801db94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801db94:	b480      	push	{r7}
 801db96:	b083      	sub	sp, #12
 801db98:	af00      	add	r7, sp, #0
 801db9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801db9c:	bf00      	nop
 801db9e:	370c      	adds	r7, #12
 801dba0:	46bd      	mov	sp, r7
 801dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba6:	4770      	bx	lr

0801dba8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 801dba8:	b480      	push	{r7}
 801dbaa:	b083      	sub	sp, #12
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 801dbb0:	bf00      	nop
 801dbb2:	370c      	adds	r7, #12
 801dbb4:	46bd      	mov	sp, r7
 801dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbba:	4770      	bx	lr

0801dbbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801dbbc:	b480      	push	{r7}
 801dbbe:	b083      	sub	sp, #12
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801dbc4:	bf00      	nop
 801dbc6:	370c      	adds	r7, #12
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbce:	4770      	bx	lr

0801dbd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801dbd0:	b480      	push	{r7}
 801dbd2:	b085      	sub	sp, #20
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	6078      	str	r0, [r7, #4]
 801dbd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801dbda:	2300      	movs	r3, #0
 801dbdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dbe4:	2b01      	cmp	r3, #1
 801dbe6:	d101      	bne.n	801dbec <HAL_ADC_ConfigChannel+0x1c>
 801dbe8:	2302      	movs	r3, #2
 801dbea:	e113      	b.n	801de14 <HAL_ADC_ConfigChannel+0x244>
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	2201      	movs	r2, #1
 801dbf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	681b      	ldr	r3, [r3, #0]
 801dbf8:	2b09      	cmp	r3, #9
 801dbfa:	d925      	bls.n	801dc48 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	68d9      	ldr	r1, [r3, #12]
 801dc02:	683b      	ldr	r3, [r7, #0]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	b29b      	uxth	r3, r3
 801dc08:	461a      	mov	r2, r3
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	005b      	lsls	r3, r3, #1
 801dc0e:	4413      	add	r3, r2
 801dc10:	3b1e      	subs	r3, #30
 801dc12:	2207      	movs	r2, #7
 801dc14:	fa02 f303 	lsl.w	r3, r2, r3
 801dc18:	43da      	mvns	r2, r3
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	400a      	ands	r2, r1
 801dc20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	68d9      	ldr	r1, [r3, #12]
 801dc28:	683b      	ldr	r3, [r7, #0]
 801dc2a:	689a      	ldr	r2, [r3, #8]
 801dc2c:	683b      	ldr	r3, [r7, #0]
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	b29b      	uxth	r3, r3
 801dc32:	4618      	mov	r0, r3
 801dc34:	4603      	mov	r3, r0
 801dc36:	005b      	lsls	r3, r3, #1
 801dc38:	4403      	add	r3, r0
 801dc3a:	3b1e      	subs	r3, #30
 801dc3c:	409a      	lsls	r2, r3
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	430a      	orrs	r2, r1
 801dc44:	60da      	str	r2, [r3, #12]
 801dc46:	e022      	b.n	801dc8e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	6919      	ldr	r1, [r3, #16]
 801dc4e:	683b      	ldr	r3, [r7, #0]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	b29b      	uxth	r3, r3
 801dc54:	461a      	mov	r2, r3
 801dc56:	4613      	mov	r3, r2
 801dc58:	005b      	lsls	r3, r3, #1
 801dc5a:	4413      	add	r3, r2
 801dc5c:	2207      	movs	r2, #7
 801dc5e:	fa02 f303 	lsl.w	r3, r2, r3
 801dc62:	43da      	mvns	r2, r3
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	400a      	ands	r2, r1
 801dc6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	6919      	ldr	r1, [r3, #16]
 801dc72:	683b      	ldr	r3, [r7, #0]
 801dc74:	689a      	ldr	r2, [r3, #8]
 801dc76:	683b      	ldr	r3, [r7, #0]
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	b29b      	uxth	r3, r3
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	4603      	mov	r3, r0
 801dc80:	005b      	lsls	r3, r3, #1
 801dc82:	4403      	add	r3, r0
 801dc84:	409a      	lsls	r2, r3
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	430a      	orrs	r2, r1
 801dc8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801dc8e:	683b      	ldr	r3, [r7, #0]
 801dc90:	685b      	ldr	r3, [r3, #4]
 801dc92:	2b06      	cmp	r3, #6
 801dc94:	d824      	bhi.n	801dce0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801dc9c:	683b      	ldr	r3, [r7, #0]
 801dc9e:	685a      	ldr	r2, [r3, #4]
 801dca0:	4613      	mov	r3, r2
 801dca2:	009b      	lsls	r3, r3, #2
 801dca4:	4413      	add	r3, r2
 801dca6:	3b05      	subs	r3, #5
 801dca8:	221f      	movs	r2, #31
 801dcaa:	fa02 f303 	lsl.w	r3, r2, r3
 801dcae:	43da      	mvns	r2, r3
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	400a      	ands	r2, r1
 801dcb6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801dcbe:	683b      	ldr	r3, [r7, #0]
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	b29b      	uxth	r3, r3
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	683b      	ldr	r3, [r7, #0]
 801dcc8:	685a      	ldr	r2, [r3, #4]
 801dcca:	4613      	mov	r3, r2
 801dccc:	009b      	lsls	r3, r3, #2
 801dcce:	4413      	add	r3, r2
 801dcd0:	3b05      	subs	r3, #5
 801dcd2:	fa00 f203 	lsl.w	r2, r0, r3
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	430a      	orrs	r2, r1
 801dcdc:	635a      	str	r2, [r3, #52]	; 0x34
 801dcde:	e04c      	b.n	801dd7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801dce0:	683b      	ldr	r3, [r7, #0]
 801dce2:	685b      	ldr	r3, [r3, #4]
 801dce4:	2b0c      	cmp	r3, #12
 801dce6:	d824      	bhi.n	801dd32 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801dcee:	683b      	ldr	r3, [r7, #0]
 801dcf0:	685a      	ldr	r2, [r3, #4]
 801dcf2:	4613      	mov	r3, r2
 801dcf4:	009b      	lsls	r3, r3, #2
 801dcf6:	4413      	add	r3, r2
 801dcf8:	3b23      	subs	r3, #35	; 0x23
 801dcfa:	221f      	movs	r2, #31
 801dcfc:	fa02 f303 	lsl.w	r3, r2, r3
 801dd00:	43da      	mvns	r2, r3
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	400a      	ands	r2, r1
 801dd08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801dd10:	683b      	ldr	r3, [r7, #0]
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	b29b      	uxth	r3, r3
 801dd16:	4618      	mov	r0, r3
 801dd18:	683b      	ldr	r3, [r7, #0]
 801dd1a:	685a      	ldr	r2, [r3, #4]
 801dd1c:	4613      	mov	r3, r2
 801dd1e:	009b      	lsls	r3, r3, #2
 801dd20:	4413      	add	r3, r2
 801dd22:	3b23      	subs	r3, #35	; 0x23
 801dd24:	fa00 f203 	lsl.w	r2, r0, r3
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	430a      	orrs	r2, r1
 801dd2e:	631a      	str	r2, [r3, #48]	; 0x30
 801dd30:	e023      	b.n	801dd7a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801dd32:	687b      	ldr	r3, [r7, #4]
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dd38:	683b      	ldr	r3, [r7, #0]
 801dd3a:	685a      	ldr	r2, [r3, #4]
 801dd3c:	4613      	mov	r3, r2
 801dd3e:	009b      	lsls	r3, r3, #2
 801dd40:	4413      	add	r3, r2
 801dd42:	3b41      	subs	r3, #65	; 0x41
 801dd44:	221f      	movs	r2, #31
 801dd46:	fa02 f303 	lsl.w	r3, r2, r3
 801dd4a:	43da      	mvns	r2, r3
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	400a      	ands	r2, r1
 801dd52:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dd5a:	683b      	ldr	r3, [r7, #0]
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	b29b      	uxth	r3, r3
 801dd60:	4618      	mov	r0, r3
 801dd62:	683b      	ldr	r3, [r7, #0]
 801dd64:	685a      	ldr	r2, [r3, #4]
 801dd66:	4613      	mov	r3, r2
 801dd68:	009b      	lsls	r3, r3, #2
 801dd6a:	4413      	add	r3, r2
 801dd6c:	3b41      	subs	r3, #65	; 0x41
 801dd6e:	fa00 f203 	lsl.w	r2, r0, r3
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	430a      	orrs	r2, r1
 801dd78:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801dd7a:	4b29      	ldr	r3, [pc, #164]	; (801de20 <HAL_ADC_ConfigChannel+0x250>)
 801dd7c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	4a28      	ldr	r2, [pc, #160]	; (801de24 <HAL_ADC_ConfigChannel+0x254>)
 801dd84:	4293      	cmp	r3, r2
 801dd86:	d10f      	bne.n	801dda8 <HAL_ADC_ConfigChannel+0x1d8>
 801dd88:	683b      	ldr	r3, [r7, #0]
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	2b12      	cmp	r3, #18
 801dd8e:	d10b      	bne.n	801dda8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	685b      	ldr	r3, [r3, #4]
 801dd94:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	685b      	ldr	r3, [r3, #4]
 801dda0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801dda4:	68fb      	ldr	r3, [r7, #12]
 801dda6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	4a1d      	ldr	r2, [pc, #116]	; (801de24 <HAL_ADC_ConfigChannel+0x254>)
 801ddae:	4293      	cmp	r3, r2
 801ddb0:	d12b      	bne.n	801de0a <HAL_ADC_ConfigChannel+0x23a>
 801ddb2:	683b      	ldr	r3, [r7, #0]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	4a1c      	ldr	r2, [pc, #112]	; (801de28 <HAL_ADC_ConfigChannel+0x258>)
 801ddb8:	4293      	cmp	r3, r2
 801ddba:	d003      	beq.n	801ddc4 <HAL_ADC_ConfigChannel+0x1f4>
 801ddbc:	683b      	ldr	r3, [r7, #0]
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	2b11      	cmp	r3, #17
 801ddc2:	d122      	bne.n	801de0a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801ddc4:	68fb      	ldr	r3, [r7, #12]
 801ddc6:	685b      	ldr	r3, [r3, #4]
 801ddc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	685b      	ldr	r3, [r3, #4]
 801ddd4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801ddd8:	68fb      	ldr	r3, [r7, #12]
 801ddda:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801dddc:	683b      	ldr	r3, [r7, #0]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	4a11      	ldr	r2, [pc, #68]	; (801de28 <HAL_ADC_ConfigChannel+0x258>)
 801dde2:	4293      	cmp	r3, r2
 801dde4:	d111      	bne.n	801de0a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801dde6:	4b11      	ldr	r3, [pc, #68]	; (801de2c <HAL_ADC_ConfigChannel+0x25c>)
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	4a11      	ldr	r2, [pc, #68]	; (801de30 <HAL_ADC_ConfigChannel+0x260>)
 801ddec:	fba2 2303 	umull	r2, r3, r2, r3
 801ddf0:	0c9a      	lsrs	r2, r3, #18
 801ddf2:	4613      	mov	r3, r2
 801ddf4:	009b      	lsls	r3, r3, #2
 801ddf6:	4413      	add	r3, r2
 801ddf8:	005b      	lsls	r3, r3, #1
 801ddfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801ddfc:	e002      	b.n	801de04 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801ddfe:	68bb      	ldr	r3, [r7, #8]
 801de00:	3b01      	subs	r3, #1
 801de02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801de04:	68bb      	ldr	r3, [r7, #8]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d1f9      	bne.n	801ddfe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	2200      	movs	r2, #0
 801de0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801de12:	2300      	movs	r3, #0
}
 801de14:	4618      	mov	r0, r3
 801de16:	3714      	adds	r7, #20
 801de18:	46bd      	mov	sp, r7
 801de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de1e:	4770      	bx	lr
 801de20:	40012300 	.word	0x40012300
 801de24:	40012000 	.word	0x40012000
 801de28:	10000012 	.word	0x10000012
 801de2c:	20000000 	.word	0x20000000
 801de30:	431bde83 	.word	0x431bde83

0801de34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801de34:	b480      	push	{r7}
 801de36:	b085      	sub	sp, #20
 801de38:	af00      	add	r7, sp, #0
 801de3a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801de3c:	4b79      	ldr	r3, [pc, #484]	; (801e024 <ADC_Init+0x1f0>)
 801de3e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	685b      	ldr	r3, [r3, #4]
 801de44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801de48:	68fb      	ldr	r3, [r7, #12]
 801de4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	685a      	ldr	r2, [r3, #4]
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	685b      	ldr	r3, [r3, #4]
 801de54:	431a      	orrs	r2, r3
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	685a      	ldr	r2, [r3, #4]
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801de68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801de6a:	687b      	ldr	r3, [r7, #4]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	6859      	ldr	r1, [r3, #4]
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	691b      	ldr	r3, [r3, #16]
 801de74:	021a      	lsls	r2, r3, #8
 801de76:	687b      	ldr	r3, [r7, #4]
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	430a      	orrs	r2, r1
 801de7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	685a      	ldr	r2, [r3, #4]
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801de8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	681b      	ldr	r3, [r3, #0]
 801de92:	6859      	ldr	r1, [r3, #4]
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	689a      	ldr	r2, [r3, #8]
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	430a      	orrs	r2, r1
 801de9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	689a      	ldr	r2, [r3, #8]
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	681b      	ldr	r3, [r3, #0]
 801deaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801deae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	6899      	ldr	r1, [r3, #8]
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	68da      	ldr	r2, [r3, #12]
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	430a      	orrs	r2, r1
 801dec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dec6:	4a58      	ldr	r2, [pc, #352]	; (801e028 <ADC_Init+0x1f4>)
 801dec8:	4293      	cmp	r3, r2
 801deca:	d022      	beq.n	801df12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	689a      	ldr	r2, [r3, #8]
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801deda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	6899      	ldr	r1, [r3, #8]
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	430a      	orrs	r2, r1
 801deec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801deee:	687b      	ldr	r3, [r7, #4]
 801def0:	681b      	ldr	r3, [r3, #0]
 801def2:	689a      	ldr	r2, [r3, #8]
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801defc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	6899      	ldr	r1, [r3, #8]
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	430a      	orrs	r2, r1
 801df0e:	609a      	str	r2, [r3, #8]
 801df10:	e00f      	b.n	801df32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	689a      	ldr	r2, [r3, #8]
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801df20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	689a      	ldr	r2, [r3, #8]
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801df30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801df32:	687b      	ldr	r3, [r7, #4]
 801df34:	681b      	ldr	r3, [r3, #0]
 801df36:	689a      	ldr	r2, [r3, #8]
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	681b      	ldr	r3, [r3, #0]
 801df3c:	f022 0202 	bic.w	r2, r2, #2
 801df40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	6899      	ldr	r1, [r3, #8]
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	7e1b      	ldrb	r3, [r3, #24]
 801df4c:	005a      	lsls	r2, r3, #1
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	430a      	orrs	r2, r1
 801df54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801df56:	687b      	ldr	r3, [r7, #4]
 801df58:	f893 3020 	ldrb.w	r3, [r3, #32]
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d01b      	beq.n	801df98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	685a      	ldr	r2, [r3, #4]
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801df6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	685a      	ldr	r2, [r3, #4]
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801df7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	6859      	ldr	r1, [r3, #4]
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df8a:	3b01      	subs	r3, #1
 801df8c:	035a      	lsls	r2, r3, #13
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	430a      	orrs	r2, r1
 801df94:	605a      	str	r2, [r3, #4]
 801df96:	e007      	b.n	801dfa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	685a      	ldr	r2, [r3, #4]
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	681b      	ldr	r3, [r3, #0]
 801dfa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dfa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801dfb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	69db      	ldr	r3, [r3, #28]
 801dfc2:	3b01      	subs	r3, #1
 801dfc4:	051a      	lsls	r2, r3, #20
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	430a      	orrs	r2, r1
 801dfcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	689a      	ldr	r2, [r3, #8]
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801dfdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	6899      	ldr	r1, [r3, #8]
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dfea:	025a      	lsls	r2, r3, #9
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	430a      	orrs	r2, r1
 801dff2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	689a      	ldr	r2, [r3, #8]
 801dffa:	687b      	ldr	r3, [r7, #4]
 801dffc:	681b      	ldr	r3, [r3, #0]
 801dffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	681b      	ldr	r3, [r3, #0]
 801e008:	6899      	ldr	r1, [r3, #8]
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	695b      	ldr	r3, [r3, #20]
 801e00e:	029a      	lsls	r2, r3, #10
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	430a      	orrs	r2, r1
 801e016:	609a      	str	r2, [r3, #8]
}
 801e018:	bf00      	nop
 801e01a:	3714      	adds	r7, #20
 801e01c:	46bd      	mov	sp, r7
 801e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e022:	4770      	bx	lr
 801e024:	40012300 	.word	0x40012300
 801e028:	0f000001 	.word	0x0f000001

0801e02c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801e02c:	b580      	push	{r7, lr}
 801e02e:	b084      	sub	sp, #16
 801e030:	af00      	add	r7, sp, #0
 801e032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e038:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e03e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801e042:	2b00      	cmp	r3, #0
 801e044:	d13c      	bne.n	801e0c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e04a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	689b      	ldr	r3, [r3, #8]
 801e058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	d12b      	bne.n	801e0b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801e064:	2b00      	cmp	r3, #0
 801e066:	d127      	bne.n	801e0b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e06e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801e072:	2b00      	cmp	r3, #0
 801e074:	d006      	beq.n	801e084 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	689b      	ldr	r3, [r3, #8]
 801e07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801e080:	2b00      	cmp	r3, #0
 801e082:	d119      	bne.n	801e0b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	681b      	ldr	r3, [r3, #0]
 801e088:	685a      	ldr	r2, [r3, #4]
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	f022 0220 	bic.w	r2, r2, #32
 801e092:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e098:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d105      	bne.n	801e0b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0b0:	f043 0201 	orr.w	r2, r3, #1
 801e0b4:	68fb      	ldr	r3, [r7, #12]
 801e0b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801e0b8:	68f8      	ldr	r0, [r7, #12]
 801e0ba:	f7ff fd61 	bl	801db80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801e0be:	e00e      	b.n	801e0de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e0c4:	f003 0310 	and.w	r3, r3, #16
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d003      	beq.n	801e0d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801e0cc:	68f8      	ldr	r0, [r7, #12]
 801e0ce:	f7ff fd75 	bl	801dbbc <HAL_ADC_ErrorCallback>
}
 801e0d2:	e004      	b.n	801e0de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e0da:	6878      	ldr	r0, [r7, #4]
 801e0dc:	4798      	blx	r3
}
 801e0de:	bf00      	nop
 801e0e0:	3710      	adds	r7, #16
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	bd80      	pop	{r7, pc}

0801e0e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801e0e6:	b580      	push	{r7, lr}
 801e0e8:	b084      	sub	sp, #16
 801e0ea:	af00      	add	r7, sp, #0
 801e0ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e0f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801e0f4:	68f8      	ldr	r0, [r7, #12]
 801e0f6:	f7ff fd4d 	bl	801db94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801e0fa:	bf00      	nop
 801e0fc:	3710      	adds	r7, #16
 801e0fe:	46bd      	mov	sp, r7
 801e100:	bd80      	pop	{r7, pc}

0801e102 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801e102:	b580      	push	{r7, lr}
 801e104:	b084      	sub	sp, #16
 801e106:	af00      	add	r7, sp, #0
 801e108:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e10e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	2240      	movs	r2, #64	; 0x40
 801e114:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e11a:	f043 0204 	orr.w	r2, r3, #4
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801e122:	68f8      	ldr	r0, [r7, #12]
 801e124:	f7ff fd4a 	bl	801dbbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801e128:	bf00      	nop
 801e12a:	3710      	adds	r7, #16
 801e12c:	46bd      	mov	sp, r7
 801e12e:	bd80      	pop	{r7, pc}

0801e130 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801e130:	b480      	push	{r7}
 801e132:	b083      	sub	sp, #12
 801e134:	af00      	add	r7, sp, #0
 801e136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 801e138:	bf00      	nop
 801e13a:	370c      	adds	r7, #12
 801e13c:	46bd      	mov	sp, r7
 801e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e142:	4770      	bx	lr

0801e144 <__NVIC_SetPriorityGrouping>:
{
 801e144:	b480      	push	{r7}
 801e146:	b085      	sub	sp, #20
 801e148:	af00      	add	r7, sp, #0
 801e14a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	f003 0307 	and.w	r3, r3, #7
 801e152:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801e154:	4b0c      	ldr	r3, [pc, #48]	; (801e188 <__NVIC_SetPriorityGrouping+0x44>)
 801e156:	68db      	ldr	r3, [r3, #12]
 801e158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801e15a:	68ba      	ldr	r2, [r7, #8]
 801e15c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801e160:	4013      	ands	r3, r2
 801e162:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801e168:	68bb      	ldr	r3, [r7, #8]
 801e16a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801e16c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801e170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801e174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801e176:	4a04      	ldr	r2, [pc, #16]	; (801e188 <__NVIC_SetPriorityGrouping+0x44>)
 801e178:	68bb      	ldr	r3, [r7, #8]
 801e17a:	60d3      	str	r3, [r2, #12]
}
 801e17c:	bf00      	nop
 801e17e:	3714      	adds	r7, #20
 801e180:	46bd      	mov	sp, r7
 801e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e186:	4770      	bx	lr
 801e188:	e000ed00 	.word	0xe000ed00

0801e18c <__NVIC_GetPriorityGrouping>:
{
 801e18c:	b480      	push	{r7}
 801e18e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801e190:	4b04      	ldr	r3, [pc, #16]	; (801e1a4 <__NVIC_GetPriorityGrouping+0x18>)
 801e192:	68db      	ldr	r3, [r3, #12]
 801e194:	0a1b      	lsrs	r3, r3, #8
 801e196:	f003 0307 	and.w	r3, r3, #7
}
 801e19a:	4618      	mov	r0, r3
 801e19c:	46bd      	mov	sp, r7
 801e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a2:	4770      	bx	lr
 801e1a4:	e000ed00 	.word	0xe000ed00

0801e1a8 <__NVIC_EnableIRQ>:
{
 801e1a8:	b480      	push	{r7}
 801e1aa:	b083      	sub	sp, #12
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e1b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	db0b      	blt.n	801e1d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801e1ba:	79fb      	ldrb	r3, [r7, #7]
 801e1bc:	f003 021f 	and.w	r2, r3, #31
 801e1c0:	4907      	ldr	r1, [pc, #28]	; (801e1e0 <__NVIC_EnableIRQ+0x38>)
 801e1c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1c6:	095b      	lsrs	r3, r3, #5
 801e1c8:	2001      	movs	r0, #1
 801e1ca:	fa00 f202 	lsl.w	r2, r0, r2
 801e1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801e1d2:	bf00      	nop
 801e1d4:	370c      	adds	r7, #12
 801e1d6:	46bd      	mov	sp, r7
 801e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1dc:	4770      	bx	lr
 801e1de:	bf00      	nop
 801e1e0:	e000e100 	.word	0xe000e100

0801e1e4 <__NVIC_DisableIRQ>:
{
 801e1e4:	b480      	push	{r7}
 801e1e6:	b083      	sub	sp, #12
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e1ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	db12      	blt.n	801e21c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801e1f6:	79fb      	ldrb	r3, [r7, #7]
 801e1f8:	f003 021f 	and.w	r2, r3, #31
 801e1fc:	490a      	ldr	r1, [pc, #40]	; (801e228 <__NVIC_DisableIRQ+0x44>)
 801e1fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e202:	095b      	lsrs	r3, r3, #5
 801e204:	2001      	movs	r0, #1
 801e206:	fa00 f202 	lsl.w	r2, r0, r2
 801e20a:	3320      	adds	r3, #32
 801e20c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801e210:	f3bf 8f4f 	dsb	sy
}
 801e214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801e216:	f3bf 8f6f 	isb	sy
}
 801e21a:	bf00      	nop
}
 801e21c:	bf00      	nop
 801e21e:	370c      	adds	r7, #12
 801e220:	46bd      	mov	sp, r7
 801e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e226:	4770      	bx	lr
 801e228:	e000e100 	.word	0xe000e100

0801e22c <__NVIC_SetPriority>:
{
 801e22c:	b480      	push	{r7}
 801e22e:	b083      	sub	sp, #12
 801e230:	af00      	add	r7, sp, #0
 801e232:	4603      	mov	r3, r0
 801e234:	6039      	str	r1, [r7, #0]
 801e236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	db0a      	blt.n	801e256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e240:	683b      	ldr	r3, [r7, #0]
 801e242:	b2da      	uxtb	r2, r3
 801e244:	490c      	ldr	r1, [pc, #48]	; (801e278 <__NVIC_SetPriority+0x4c>)
 801e246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e24a:	0112      	lsls	r2, r2, #4
 801e24c:	b2d2      	uxtb	r2, r2
 801e24e:	440b      	add	r3, r1
 801e250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801e254:	e00a      	b.n	801e26c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e256:	683b      	ldr	r3, [r7, #0]
 801e258:	b2da      	uxtb	r2, r3
 801e25a:	4908      	ldr	r1, [pc, #32]	; (801e27c <__NVIC_SetPriority+0x50>)
 801e25c:	79fb      	ldrb	r3, [r7, #7]
 801e25e:	f003 030f 	and.w	r3, r3, #15
 801e262:	3b04      	subs	r3, #4
 801e264:	0112      	lsls	r2, r2, #4
 801e266:	b2d2      	uxtb	r2, r2
 801e268:	440b      	add	r3, r1
 801e26a:	761a      	strb	r2, [r3, #24]
}
 801e26c:	bf00      	nop
 801e26e:	370c      	adds	r7, #12
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr
 801e278:	e000e100 	.word	0xe000e100
 801e27c:	e000ed00 	.word	0xe000ed00

0801e280 <NVIC_EncodePriority>:
{
 801e280:	b480      	push	{r7}
 801e282:	b089      	sub	sp, #36	; 0x24
 801e284:	af00      	add	r7, sp, #0
 801e286:	60f8      	str	r0, [r7, #12]
 801e288:	60b9      	str	r1, [r7, #8]
 801e28a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	f003 0307 	and.w	r3, r3, #7
 801e292:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801e294:	69fb      	ldr	r3, [r7, #28]
 801e296:	f1c3 0307 	rsb	r3, r3, #7
 801e29a:	2b04      	cmp	r3, #4
 801e29c:	bf28      	it	cs
 801e29e:	2304      	movcs	r3, #4
 801e2a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801e2a2:	69fb      	ldr	r3, [r7, #28]
 801e2a4:	3304      	adds	r3, #4
 801e2a6:	2b06      	cmp	r3, #6
 801e2a8:	d902      	bls.n	801e2b0 <NVIC_EncodePriority+0x30>
 801e2aa:	69fb      	ldr	r3, [r7, #28]
 801e2ac:	3b03      	subs	r3, #3
 801e2ae:	e000      	b.n	801e2b2 <NVIC_EncodePriority+0x32>
 801e2b0:	2300      	movs	r3, #0
 801e2b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e2b4:	f04f 32ff 	mov.w	r2, #4294967295
 801e2b8:	69bb      	ldr	r3, [r7, #24]
 801e2ba:	fa02 f303 	lsl.w	r3, r2, r3
 801e2be:	43da      	mvns	r2, r3
 801e2c0:	68bb      	ldr	r3, [r7, #8]
 801e2c2:	401a      	ands	r2, r3
 801e2c4:	697b      	ldr	r3, [r7, #20]
 801e2c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801e2c8:	f04f 31ff 	mov.w	r1, #4294967295
 801e2cc:	697b      	ldr	r3, [r7, #20]
 801e2ce:	fa01 f303 	lsl.w	r3, r1, r3
 801e2d2:	43d9      	mvns	r1, r3
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e2d8:	4313      	orrs	r3, r2
}
 801e2da:	4618      	mov	r0, r3
 801e2dc:	3724      	adds	r7, #36	; 0x24
 801e2de:	46bd      	mov	sp, r7
 801e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e4:	4770      	bx	lr
	...

0801e2e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b082      	sub	sp, #8
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	3b01      	subs	r3, #1
 801e2f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801e2f8:	d301      	bcc.n	801e2fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801e2fa:	2301      	movs	r3, #1
 801e2fc:	e00f      	b.n	801e31e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801e2fe:	4a0a      	ldr	r2, [pc, #40]	; (801e328 <SysTick_Config+0x40>)
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	3b01      	subs	r3, #1
 801e304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801e306:	210f      	movs	r1, #15
 801e308:	f04f 30ff 	mov.w	r0, #4294967295
 801e30c:	f7ff ff8e 	bl	801e22c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801e310:	4b05      	ldr	r3, [pc, #20]	; (801e328 <SysTick_Config+0x40>)
 801e312:	2200      	movs	r2, #0
 801e314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801e316:	4b04      	ldr	r3, [pc, #16]	; (801e328 <SysTick_Config+0x40>)
 801e318:	2207      	movs	r2, #7
 801e31a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801e31c:	2300      	movs	r3, #0
}
 801e31e:	4618      	mov	r0, r3
 801e320:	3708      	adds	r7, #8
 801e322:	46bd      	mov	sp, r7
 801e324:	bd80      	pop	{r7, pc}
 801e326:	bf00      	nop
 801e328:	e000e010 	.word	0xe000e010

0801e32c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801e32c:	b580      	push	{r7, lr}
 801e32e:	b082      	sub	sp, #8
 801e330:	af00      	add	r7, sp, #0
 801e332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801e334:	6878      	ldr	r0, [r7, #4]
 801e336:	f7ff ff05 	bl	801e144 <__NVIC_SetPriorityGrouping>
}
 801e33a:	bf00      	nop
 801e33c:	3708      	adds	r7, #8
 801e33e:	46bd      	mov	sp, r7
 801e340:	bd80      	pop	{r7, pc}

0801e342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801e342:	b580      	push	{r7, lr}
 801e344:	b086      	sub	sp, #24
 801e346:	af00      	add	r7, sp, #0
 801e348:	4603      	mov	r3, r0
 801e34a:	60b9      	str	r1, [r7, #8]
 801e34c:	607a      	str	r2, [r7, #4]
 801e34e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801e350:	2300      	movs	r3, #0
 801e352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801e354:	f7ff ff1a 	bl	801e18c <__NVIC_GetPriorityGrouping>
 801e358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801e35a:	687a      	ldr	r2, [r7, #4]
 801e35c:	68b9      	ldr	r1, [r7, #8]
 801e35e:	6978      	ldr	r0, [r7, #20]
 801e360:	f7ff ff8e 	bl	801e280 <NVIC_EncodePriority>
 801e364:	4602      	mov	r2, r0
 801e366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e36a:	4611      	mov	r1, r2
 801e36c:	4618      	mov	r0, r3
 801e36e:	f7ff ff5d 	bl	801e22c <__NVIC_SetPriority>
}
 801e372:	bf00      	nop
 801e374:	3718      	adds	r7, #24
 801e376:	46bd      	mov	sp, r7
 801e378:	bd80      	pop	{r7, pc}

0801e37a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801e37a:	b580      	push	{r7, lr}
 801e37c:	b082      	sub	sp, #8
 801e37e:	af00      	add	r7, sp, #0
 801e380:	4603      	mov	r3, r0
 801e382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801e384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e388:	4618      	mov	r0, r3
 801e38a:	f7ff ff0d 	bl	801e1a8 <__NVIC_EnableIRQ>
}
 801e38e:	bf00      	nop
 801e390:	3708      	adds	r7, #8
 801e392:	46bd      	mov	sp, r7
 801e394:	bd80      	pop	{r7, pc}

0801e396 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801e396:	b580      	push	{r7, lr}
 801e398:	b082      	sub	sp, #8
 801e39a:	af00      	add	r7, sp, #0
 801e39c:	4603      	mov	r3, r0
 801e39e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801e3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e3a4:	4618      	mov	r0, r3
 801e3a6:	f7ff ff1d 	bl	801e1e4 <__NVIC_DisableIRQ>
}
 801e3aa:	bf00      	nop
 801e3ac:	3708      	adds	r7, #8
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	bd80      	pop	{r7, pc}

0801e3b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801e3b2:	b580      	push	{r7, lr}
 801e3b4:	b082      	sub	sp, #8
 801e3b6:	af00      	add	r7, sp, #0
 801e3b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801e3ba:	6878      	ldr	r0, [r7, #4]
 801e3bc:	f7ff ff94 	bl	801e2e8 <SysTick_Config>
 801e3c0:	4603      	mov	r3, r0
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3708      	adds	r7, #8
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}
	...

0801e3cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801e3cc:	b580      	push	{r7, lr}
 801e3ce:	b086      	sub	sp, #24
 801e3d0:	af00      	add	r7, sp, #0
 801e3d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801e3d4:	2300      	movs	r3, #0
 801e3d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801e3d8:	f7ff f94a 	bl	801d670 <HAL_GetTick>
 801e3dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d101      	bne.n	801e3e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801e3e4:	2301      	movs	r3, #1
 801e3e6:	e099      	b.n	801e51c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	2202      	movs	r2, #2
 801e3f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	681a      	ldr	r2, [r3, #0]
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	681b      	ldr	r3, [r3, #0]
 801e402:	f022 0201 	bic.w	r2, r2, #1
 801e406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e408:	e00f      	b.n	801e42a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e40a:	f7ff f931 	bl	801d670 <HAL_GetTick>
 801e40e:	4602      	mov	r2, r0
 801e410:	693b      	ldr	r3, [r7, #16]
 801e412:	1ad3      	subs	r3, r2, r3
 801e414:	2b05      	cmp	r3, #5
 801e416:	d908      	bls.n	801e42a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	2220      	movs	r2, #32
 801e41c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	2203      	movs	r2, #3
 801e422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801e426:	2303      	movs	r3, #3
 801e428:	e078      	b.n	801e51c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	f003 0301 	and.w	r3, r3, #1
 801e434:	2b00      	cmp	r3, #0
 801e436:	d1e8      	bne.n	801e40a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801e440:	697a      	ldr	r2, [r7, #20]
 801e442:	4b38      	ldr	r3, [pc, #224]	; (801e524 <HAL_DMA_Init+0x158>)
 801e444:	4013      	ands	r3, r2
 801e446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	685a      	ldr	r2, [r3, #4]
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	689b      	ldr	r3, [r3, #8]
 801e450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	691b      	ldr	r3, [r3, #16]
 801e45c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e464:	687b      	ldr	r3, [r7, #4]
 801e466:	699b      	ldr	r3, [r3, #24]
 801e468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e46e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	6a1b      	ldr	r3, [r3, #32]
 801e474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e476:	697a      	ldr	r2, [r7, #20]
 801e478:	4313      	orrs	r3, r2
 801e47a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e480:	2b04      	cmp	r3, #4
 801e482:	d107      	bne.n	801e494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e48c:	4313      	orrs	r3, r2
 801e48e:	697a      	ldr	r2, [r7, #20]
 801e490:	4313      	orrs	r3, r2
 801e492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	697a      	ldr	r2, [r7, #20]
 801e49a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	695b      	ldr	r3, [r3, #20]
 801e4a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801e4a4:	697b      	ldr	r3, [r7, #20]
 801e4a6:	f023 0307 	bic.w	r3, r3, #7
 801e4aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4b0:	697a      	ldr	r2, [r7, #20]
 801e4b2:	4313      	orrs	r3, r2
 801e4b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4ba:	2b04      	cmp	r3, #4
 801e4bc:	d117      	bne.n	801e4ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4c2:	697a      	ldr	r2, [r7, #20]
 801e4c4:	4313      	orrs	r3, r2
 801e4c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d00e      	beq.n	801e4ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801e4d0:	6878      	ldr	r0, [r7, #4]
 801e4d2:	f000 fafb 	bl	801eacc <DMA_CheckFifoParam>
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d008      	beq.n	801e4ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	2240      	movs	r2, #64	; 0x40
 801e4e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	2201      	movs	r2, #1
 801e4e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801e4ea:	2301      	movs	r3, #1
 801e4ec:	e016      	b.n	801e51c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	697a      	ldr	r2, [r7, #20]
 801e4f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e4f6:	6878      	ldr	r0, [r7, #4]
 801e4f8:	f000 fab2 	bl	801ea60 <DMA_CalcBaseAndBitshift>
 801e4fc:	4603      	mov	r3, r0
 801e4fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e504:	223f      	movs	r2, #63	; 0x3f
 801e506:	409a      	lsls	r2, r3
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	2200      	movs	r2, #0
 801e510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	2201      	movs	r2, #1
 801e516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801e51a:	2300      	movs	r3, #0
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3718      	adds	r7, #24
 801e520:	46bd      	mov	sp, r7
 801e522:	bd80      	pop	{r7, pc}
 801e524:	f010803f 	.word	0xf010803f

0801e528 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 801e528:	b580      	push	{r7, lr}
 801e52a:	b084      	sub	sp, #16
 801e52c:	af00      	add	r7, sp, #0
 801e52e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d101      	bne.n	801e53a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801e536:	2301      	movs	r3, #1
 801e538:	e050      	b.n	801e5dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e540:	b2db      	uxtb	r3, r3
 801e542:	2b02      	cmp	r3, #2
 801e544:	d101      	bne.n	801e54a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 801e546:	2302      	movs	r3, #2
 801e548:	e048      	b.n	801e5dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	681a      	ldr	r2, [r3, #0]
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	f022 0201 	bic.w	r2, r2, #1
 801e558:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	2200      	movs	r2, #0
 801e560:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	681b      	ldr	r3, [r3, #0]
 801e566:	2200      	movs	r2, #0
 801e568:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	2200      	movs	r2, #0
 801e570:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	681b      	ldr	r3, [r3, #0]
 801e576:	2200      	movs	r2, #0
 801e578:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	2200      	movs	r2, #0
 801e580:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	2221      	movs	r2, #33	; 0x21
 801e588:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e58a:	6878      	ldr	r0, [r7, #4]
 801e58c:	f000 fa68 	bl	801ea60 <DMA_CalcBaseAndBitshift>
 801e590:	4603      	mov	r3, r0
 801e592:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	2200      	movs	r2, #0
 801e598:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	2200      	movs	r2, #0
 801e59e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	2200      	movs	r2, #0
 801e5a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	2200      	movs	r2, #0
 801e5aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	2200      	movs	r2, #0
 801e5b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	2200      	movs	r2, #0
 801e5b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e5bc:	223f      	movs	r2, #63	; 0x3f
 801e5be:	409a      	lsls	r2, r3
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	2200      	movs	r2, #0
 801e5c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	2200      	movs	r2, #0
 801e5ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	2200      	movs	r2, #0
 801e5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801e5da:	2300      	movs	r3, #0
}
 801e5dc:	4618      	mov	r0, r3
 801e5de:	3710      	adds	r7, #16
 801e5e0:	46bd      	mov	sp, r7
 801e5e2:	bd80      	pop	{r7, pc}

0801e5e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e5e4:	b580      	push	{r7, lr}
 801e5e6:	b086      	sub	sp, #24
 801e5e8:	af00      	add	r7, sp, #0
 801e5ea:	60f8      	str	r0, [r7, #12]
 801e5ec:	60b9      	str	r1, [r7, #8]
 801e5ee:	607a      	str	r2, [r7, #4]
 801e5f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e5fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e5fc:	68fb      	ldr	r3, [r7, #12]
 801e5fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e602:	2b01      	cmp	r3, #1
 801e604:	d101      	bne.n	801e60a <HAL_DMA_Start_IT+0x26>
 801e606:	2302      	movs	r3, #2
 801e608:	e040      	b.n	801e68c <HAL_DMA_Start_IT+0xa8>
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	2201      	movs	r2, #1
 801e60e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e612:	68fb      	ldr	r3, [r7, #12]
 801e614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e618:	b2db      	uxtb	r3, r3
 801e61a:	2b01      	cmp	r3, #1
 801e61c:	d12f      	bne.n	801e67e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	2202      	movs	r2, #2
 801e622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e626:	68fb      	ldr	r3, [r7, #12]
 801e628:	2200      	movs	r2, #0
 801e62a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e62c:	683b      	ldr	r3, [r7, #0]
 801e62e:	687a      	ldr	r2, [r7, #4]
 801e630:	68b9      	ldr	r1, [r7, #8]
 801e632:	68f8      	ldr	r0, [r7, #12]
 801e634:	f000 f9e6 	bl	801ea04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e63c:	223f      	movs	r2, #63	; 0x3f
 801e63e:	409a      	lsls	r2, r3
 801e640:	693b      	ldr	r3, [r7, #16]
 801e642:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e644:	68fb      	ldr	r3, [r7, #12]
 801e646:	681b      	ldr	r3, [r3, #0]
 801e648:	681a      	ldr	r2, [r3, #0]
 801e64a:	68fb      	ldr	r3, [r7, #12]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	f042 0216 	orr.w	r2, r2, #22
 801e652:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e654:	68fb      	ldr	r3, [r7, #12]
 801e656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d007      	beq.n	801e66c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e65c:	68fb      	ldr	r3, [r7, #12]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	681a      	ldr	r2, [r3, #0]
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	f042 0208 	orr.w	r2, r2, #8
 801e66a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e66c:	68fb      	ldr	r3, [r7, #12]
 801e66e:	681b      	ldr	r3, [r3, #0]
 801e670:	681a      	ldr	r2, [r3, #0]
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	f042 0201 	orr.w	r2, r2, #1
 801e67a:	601a      	str	r2, [r3, #0]
 801e67c:	e005      	b.n	801e68a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	2200      	movs	r2, #0
 801e682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e686:	2302      	movs	r3, #2
 801e688:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e68a:	7dfb      	ldrb	r3, [r7, #23]
}
 801e68c:	4618      	mov	r0, r3
 801e68e:	3718      	adds	r7, #24
 801e690:	46bd      	mov	sp, r7
 801e692:	bd80      	pop	{r7, pc}

0801e694 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e694:	b480      	push	{r7}
 801e696:	b083      	sub	sp, #12
 801e698:	af00      	add	r7, sp, #0
 801e69a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e6a2:	b2db      	uxtb	r3, r3
 801e6a4:	2b02      	cmp	r3, #2
 801e6a6:	d004      	beq.n	801e6b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	2280      	movs	r2, #128	; 0x80
 801e6ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e6ae:	2301      	movs	r3, #1
 801e6b0:	e00c      	b.n	801e6cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	2205      	movs	r2, #5
 801e6b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	681a      	ldr	r2, [r3, #0]
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	f022 0201 	bic.w	r2, r2, #1
 801e6c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e6ca:	2300      	movs	r3, #0
}
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	370c      	adds	r7, #12
 801e6d0:	46bd      	mov	sp, r7
 801e6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6d6:	4770      	bx	lr

0801e6d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e6d8:	b580      	push	{r7, lr}
 801e6da:	b086      	sub	sp, #24
 801e6dc:	af00      	add	r7, sp, #0
 801e6de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e6e4:	4b8e      	ldr	r3, [pc, #568]	; (801e920 <HAL_DMA_IRQHandler+0x248>)
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	4a8e      	ldr	r2, [pc, #568]	; (801e924 <HAL_DMA_IRQHandler+0x24c>)
 801e6ea:	fba2 2303 	umull	r2, r3, r2, r3
 801e6ee:	0a9b      	lsrs	r3, r3, #10
 801e6f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e6f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e6f8:	693b      	ldr	r3, [r7, #16]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e702:	2208      	movs	r2, #8
 801e704:	409a      	lsls	r2, r3
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	4013      	ands	r3, r2
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d01a      	beq.n	801e744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	f003 0304 	and.w	r3, r3, #4
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d013      	beq.n	801e744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e71c:	687b      	ldr	r3, [r7, #4]
 801e71e:	681b      	ldr	r3, [r3, #0]
 801e720:	681a      	ldr	r2, [r3, #0]
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f022 0204 	bic.w	r2, r2, #4
 801e72a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e730:	2208      	movs	r2, #8
 801e732:	409a      	lsls	r2, r3
 801e734:	693b      	ldr	r3, [r7, #16]
 801e736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e73c:	f043 0201 	orr.w	r2, r3, #1
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e748:	2201      	movs	r2, #1
 801e74a:	409a      	lsls	r2, r3
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	4013      	ands	r3, r2
 801e750:	2b00      	cmp	r3, #0
 801e752:	d012      	beq.n	801e77a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	695b      	ldr	r3, [r3, #20]
 801e75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d00b      	beq.n	801e77a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e766:	2201      	movs	r2, #1
 801e768:	409a      	lsls	r2, r3
 801e76a:	693b      	ldr	r3, [r7, #16]
 801e76c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e772:	f043 0202 	orr.w	r2, r3, #2
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e77e:	2204      	movs	r2, #4
 801e780:	409a      	lsls	r2, r3
 801e782:	68fb      	ldr	r3, [r7, #12]
 801e784:	4013      	ands	r3, r2
 801e786:	2b00      	cmp	r3, #0
 801e788:	d012      	beq.n	801e7b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	f003 0302 	and.w	r3, r3, #2
 801e794:	2b00      	cmp	r3, #0
 801e796:	d00b      	beq.n	801e7b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e79c:	2204      	movs	r2, #4
 801e79e:	409a      	lsls	r2, r3
 801e7a0:	693b      	ldr	r3, [r7, #16]
 801e7a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e7a8:	f043 0204 	orr.w	r2, r3, #4
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e7b4:	2210      	movs	r2, #16
 801e7b6:	409a      	lsls	r2, r3
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	4013      	ands	r3, r2
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d043      	beq.n	801e848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	681b      	ldr	r3, [r3, #0]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	f003 0308 	and.w	r3, r3, #8
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d03c      	beq.n	801e848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e7d2:	2210      	movs	r2, #16
 801e7d4:	409a      	lsls	r2, r3
 801e7d6:	693b      	ldr	r3, [r7, #16]
 801e7d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e7e4:	2b00      	cmp	r3, #0
 801e7e6:	d018      	beq.n	801e81a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d108      	bne.n	801e808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d024      	beq.n	801e848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e802:	6878      	ldr	r0, [r7, #4]
 801e804:	4798      	blx	r3
 801e806:	e01f      	b.n	801e848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d01b      	beq.n	801e848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e814:	6878      	ldr	r0, [r7, #4]
 801e816:	4798      	blx	r3
 801e818:	e016      	b.n	801e848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	681b      	ldr	r3, [r3, #0]
 801e820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e824:	2b00      	cmp	r3, #0
 801e826:	d107      	bne.n	801e838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	681a      	ldr	r2, [r3, #0]
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	681b      	ldr	r3, [r3, #0]
 801e832:	f022 0208 	bic.w	r2, r2, #8
 801e836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d003      	beq.n	801e848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e844:	6878      	ldr	r0, [r7, #4]
 801e846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e84c:	2220      	movs	r2, #32
 801e84e:	409a      	lsls	r2, r3
 801e850:	68fb      	ldr	r3, [r7, #12]
 801e852:	4013      	ands	r3, r2
 801e854:	2b00      	cmp	r3, #0
 801e856:	f000 808f 	beq.w	801e978 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	f003 0310 	and.w	r3, r3, #16
 801e864:	2b00      	cmp	r3, #0
 801e866:	f000 8087 	beq.w	801e978 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e86e:	2220      	movs	r2, #32
 801e870:	409a      	lsls	r2, r3
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e87c:	b2db      	uxtb	r3, r3
 801e87e:	2b05      	cmp	r3, #5
 801e880:	d136      	bne.n	801e8f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	681a      	ldr	r2, [r3, #0]
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	f022 0216 	bic.w	r2, r2, #22
 801e890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	681b      	ldr	r3, [r3, #0]
 801e896:	695a      	ldr	r2, [r3, #20]
 801e898:	687b      	ldr	r3, [r7, #4]
 801e89a:	681b      	ldr	r3, [r3, #0]
 801e89c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e8a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d103      	bne.n	801e8b2 <HAL_DMA_IRQHandler+0x1da>
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d007      	beq.n	801e8c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	681b      	ldr	r3, [r3, #0]
 801e8b6:	681a      	ldr	r2, [r3, #0]
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	f022 0208 	bic.w	r2, r2, #8
 801e8c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e8c6:	223f      	movs	r2, #63	; 0x3f
 801e8c8:	409a      	lsls	r2, r3
 801e8ca:	693b      	ldr	r3, [r7, #16]
 801e8cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	2200      	movs	r2, #0
 801e8d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	2201      	movs	r2, #1
 801e8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d07e      	beq.n	801e9e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e8ea:	6878      	ldr	r0, [r7, #4]
 801e8ec:	4798      	blx	r3
        }
        return;
 801e8ee:	e079      	b.n	801e9e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d01d      	beq.n	801e93a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e908:	2b00      	cmp	r3, #0
 801e90a:	d10d      	bne.n	801e928 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e910:	2b00      	cmp	r3, #0
 801e912:	d031      	beq.n	801e978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e918:	6878      	ldr	r0, [r7, #4]
 801e91a:	4798      	blx	r3
 801e91c:	e02c      	b.n	801e978 <HAL_DMA_IRQHandler+0x2a0>
 801e91e:	bf00      	nop
 801e920:	20000000 	.word	0x20000000
 801e924:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d023      	beq.n	801e978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e934:	6878      	ldr	r0, [r7, #4]
 801e936:	4798      	blx	r3
 801e938:	e01e      	b.n	801e978 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	681b      	ldr	r3, [r3, #0]
 801e940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e944:	2b00      	cmp	r3, #0
 801e946:	d10f      	bne.n	801e968 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	681a      	ldr	r2, [r3, #0]
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	f022 0210 	bic.w	r2, r2, #16
 801e956:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	2200      	movs	r2, #0
 801e95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	2201      	movs	r2, #1
 801e964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d003      	beq.n	801e978 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e974:	6878      	ldr	r0, [r7, #4]
 801e976:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d032      	beq.n	801e9e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e984:	f003 0301 	and.w	r3, r3, #1
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d022      	beq.n	801e9d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	2205      	movs	r2, #5
 801e990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	681a      	ldr	r2, [r3, #0]
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	f022 0201 	bic.w	r2, r2, #1
 801e9a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e9a4:	68bb      	ldr	r3, [r7, #8]
 801e9a6:	3301      	adds	r3, #1
 801e9a8:	60bb      	str	r3, [r7, #8]
 801e9aa:	697a      	ldr	r2, [r7, #20]
 801e9ac:	429a      	cmp	r2, r3
 801e9ae:	d307      	bcc.n	801e9c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	f003 0301 	and.w	r3, r3, #1
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d1f2      	bne.n	801e9a4 <HAL_DMA_IRQHandler+0x2cc>
 801e9be:	e000      	b.n	801e9c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 801e9c0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	2200      	movs	r2, #0
 801e9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	2201      	movs	r2, #1
 801e9ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d005      	beq.n	801e9e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e9de:	6878      	ldr	r0, [r7, #4]
 801e9e0:	4798      	blx	r3
 801e9e2:	e000      	b.n	801e9e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 801e9e4:	bf00      	nop
    }
  }
}
 801e9e6:	3718      	adds	r7, #24
 801e9e8:	46bd      	mov	sp, r7
 801e9ea:	bd80      	pop	{r7, pc}

0801e9ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801e9ec:	b480      	push	{r7}
 801e9ee:	b083      	sub	sp, #12
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	370c      	adds	r7, #12
 801e9fc:	46bd      	mov	sp, r7
 801e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea02:	4770      	bx	lr

0801ea04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801ea04:	b480      	push	{r7}
 801ea06:	b085      	sub	sp, #20
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	60f8      	str	r0, [r7, #12]
 801ea0c:	60b9      	str	r1, [r7, #8]
 801ea0e:	607a      	str	r2, [r7, #4]
 801ea10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	681b      	ldr	r3, [r3, #0]
 801ea16:	681a      	ldr	r2, [r3, #0]
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	681b      	ldr	r3, [r3, #0]
 801ea1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801ea20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801ea22:	68fb      	ldr	r3, [r7, #12]
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	683a      	ldr	r2, [r7, #0]
 801ea28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801ea2a:	68fb      	ldr	r3, [r7, #12]
 801ea2c:	689b      	ldr	r3, [r3, #8]
 801ea2e:	2b40      	cmp	r3, #64	; 0x40
 801ea30:	d108      	bne.n	801ea44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	687a      	ldr	r2, [r7, #4]
 801ea38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	68ba      	ldr	r2, [r7, #8]
 801ea40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801ea42:	e007      	b.n	801ea54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801ea44:	68fb      	ldr	r3, [r7, #12]
 801ea46:	681b      	ldr	r3, [r3, #0]
 801ea48:	68ba      	ldr	r2, [r7, #8]
 801ea4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	687a      	ldr	r2, [r7, #4]
 801ea52:	60da      	str	r2, [r3, #12]
}
 801ea54:	bf00      	nop
 801ea56:	3714      	adds	r7, #20
 801ea58:	46bd      	mov	sp, r7
 801ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea5e:	4770      	bx	lr

0801ea60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801ea60:	b480      	push	{r7}
 801ea62:	b085      	sub	sp, #20
 801ea64:	af00      	add	r7, sp, #0
 801ea66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	b2db      	uxtb	r3, r3
 801ea6e:	3b10      	subs	r3, #16
 801ea70:	4a14      	ldr	r2, [pc, #80]	; (801eac4 <DMA_CalcBaseAndBitshift+0x64>)
 801ea72:	fba2 2303 	umull	r2, r3, r2, r3
 801ea76:	091b      	lsrs	r3, r3, #4
 801ea78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801ea7a:	4a13      	ldr	r2, [pc, #76]	; (801eac8 <DMA_CalcBaseAndBitshift+0x68>)
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	4413      	add	r3, r2
 801ea80:	781b      	ldrb	r3, [r3, #0]
 801ea82:	461a      	mov	r2, r3
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	2b03      	cmp	r3, #3
 801ea8c:	d909      	bls.n	801eaa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	681b      	ldr	r3, [r3, #0]
 801ea92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ea96:	f023 0303 	bic.w	r3, r3, #3
 801ea9a:	1d1a      	adds	r2, r3, #4
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	659a      	str	r2, [r3, #88]	; 0x58
 801eaa0:	e007      	b.n	801eab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	681b      	ldr	r3, [r3, #0]
 801eaa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801eaaa:	f023 0303 	bic.w	r3, r3, #3
 801eaae:	687a      	ldr	r2, [r7, #4]
 801eab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801eab6:	4618      	mov	r0, r3
 801eab8:	3714      	adds	r7, #20
 801eaba:	46bd      	mov	sp, r7
 801eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eac0:	4770      	bx	lr
 801eac2:	bf00      	nop
 801eac4:	aaaaaaab 	.word	0xaaaaaaab
 801eac8:	08037aa4 	.word	0x08037aa4

0801eacc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801eacc:	b480      	push	{r7}
 801eace:	b085      	sub	sp, #20
 801ead0:	af00      	add	r7, sp, #0
 801ead2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ead4:	2300      	movs	r3, #0
 801ead6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801eadc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	699b      	ldr	r3, [r3, #24]
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d11f      	bne.n	801eb26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801eae6:	68bb      	ldr	r3, [r7, #8]
 801eae8:	2b03      	cmp	r3, #3
 801eaea:	d856      	bhi.n	801eb9a <DMA_CheckFifoParam+0xce>
 801eaec:	a201      	add	r2, pc, #4	; (adr r2, 801eaf4 <DMA_CheckFifoParam+0x28>)
 801eaee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eaf2:	bf00      	nop
 801eaf4:	0801eb05 	.word	0x0801eb05
 801eaf8:	0801eb17 	.word	0x0801eb17
 801eafc:	0801eb05 	.word	0x0801eb05
 801eb00:	0801eb9b 	.word	0x0801eb9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	d046      	beq.n	801eb9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801eb10:	2301      	movs	r3, #1
 801eb12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801eb14:	e043      	b.n	801eb9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801eb1e:	d140      	bne.n	801eba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801eb20:	2301      	movs	r3, #1
 801eb22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801eb24:	e03d      	b.n	801eba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	699b      	ldr	r3, [r3, #24]
 801eb2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801eb2e:	d121      	bne.n	801eb74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801eb30:	68bb      	ldr	r3, [r7, #8]
 801eb32:	2b03      	cmp	r3, #3
 801eb34:	d837      	bhi.n	801eba6 <DMA_CheckFifoParam+0xda>
 801eb36:	a201      	add	r2, pc, #4	; (adr r2, 801eb3c <DMA_CheckFifoParam+0x70>)
 801eb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eb3c:	0801eb4d 	.word	0x0801eb4d
 801eb40:	0801eb53 	.word	0x0801eb53
 801eb44:	0801eb4d 	.word	0x0801eb4d
 801eb48:	0801eb65 	.word	0x0801eb65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801eb4c:	2301      	movs	r3, #1
 801eb4e:	73fb      	strb	r3, [r7, #15]
      break;
 801eb50:	e030      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d025      	beq.n	801ebaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801eb5e:	2301      	movs	r3, #1
 801eb60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801eb62:	e022      	b.n	801ebaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801eb6c:	d11f      	bne.n	801ebae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801eb6e:	2301      	movs	r3, #1
 801eb70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801eb72:	e01c      	b.n	801ebae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801eb74:	68bb      	ldr	r3, [r7, #8]
 801eb76:	2b02      	cmp	r3, #2
 801eb78:	d903      	bls.n	801eb82 <DMA_CheckFifoParam+0xb6>
 801eb7a:	68bb      	ldr	r3, [r7, #8]
 801eb7c:	2b03      	cmp	r3, #3
 801eb7e:	d003      	beq.n	801eb88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801eb80:	e018      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801eb82:	2301      	movs	r3, #1
 801eb84:	73fb      	strb	r3, [r7, #15]
      break;
 801eb86:	e015      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801eb90:	2b00      	cmp	r3, #0
 801eb92:	d00e      	beq.n	801ebb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801eb94:	2301      	movs	r3, #1
 801eb96:	73fb      	strb	r3, [r7, #15]
      break;
 801eb98:	e00b      	b.n	801ebb2 <DMA_CheckFifoParam+0xe6>
      break;
 801eb9a:	bf00      	nop
 801eb9c:	e00a      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;
 801eb9e:	bf00      	nop
 801eba0:	e008      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;
 801eba2:	bf00      	nop
 801eba4:	e006      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;
 801eba6:	bf00      	nop
 801eba8:	e004      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;
 801ebaa:	bf00      	nop
 801ebac:	e002      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;   
 801ebae:	bf00      	nop
 801ebb0:	e000      	b.n	801ebb4 <DMA_CheckFifoParam+0xe8>
      break;
 801ebb2:	bf00      	nop
    }
  } 
  
  return status; 
 801ebb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	3714      	adds	r7, #20
 801ebba:	46bd      	mov	sp, r7
 801ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebc0:	4770      	bx	lr
 801ebc2:	bf00      	nop

0801ebc4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801ebc4:	b580      	push	{r7, lr}
 801ebc6:	b086      	sub	sp, #24
 801ebc8:	af00      	add	r7, sp, #0
 801ebca:	60f8      	str	r0, [r7, #12]
 801ebcc:	60b9      	str	r1, [r7, #8]
 801ebce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801ebd6:	4b23      	ldr	r3, [pc, #140]	; (801ec64 <HAL_FLASH_Program+0xa0>)
 801ebd8:	7e1b      	ldrb	r3, [r3, #24]
 801ebda:	2b01      	cmp	r3, #1
 801ebdc:	d101      	bne.n	801ebe2 <HAL_FLASH_Program+0x1e>
 801ebde:	2302      	movs	r3, #2
 801ebe0:	e03b      	b.n	801ec5a <HAL_FLASH_Program+0x96>
 801ebe2:	4b20      	ldr	r3, [pc, #128]	; (801ec64 <HAL_FLASH_Program+0xa0>)
 801ebe4:	2201      	movs	r2, #1
 801ebe6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ebe8:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ebec:	f000 f870 	bl	801ecd0 <FLASH_WaitForLastOperation>
 801ebf0:	4603      	mov	r3, r0
 801ebf2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801ebf4:	7dfb      	ldrb	r3, [r7, #23]
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d12b      	bne.n	801ec52 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801ebfa:	68fb      	ldr	r3, [r7, #12]
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d105      	bne.n	801ec0c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801ec00:	783b      	ldrb	r3, [r7, #0]
 801ec02:	4619      	mov	r1, r3
 801ec04:	68b8      	ldr	r0, [r7, #8]
 801ec06:	f000 f91b 	bl	801ee40 <FLASH_Program_Byte>
 801ec0a:	e016      	b.n	801ec3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	2b01      	cmp	r3, #1
 801ec10:	d105      	bne.n	801ec1e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801ec12:	883b      	ldrh	r3, [r7, #0]
 801ec14:	4619      	mov	r1, r3
 801ec16:	68b8      	ldr	r0, [r7, #8]
 801ec18:	f000 f8ee 	bl	801edf8 <FLASH_Program_HalfWord>
 801ec1c:	e00d      	b.n	801ec3a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	2b02      	cmp	r3, #2
 801ec22:	d105      	bne.n	801ec30 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801ec24:	683b      	ldr	r3, [r7, #0]
 801ec26:	4619      	mov	r1, r3
 801ec28:	68b8      	ldr	r0, [r7, #8]
 801ec2a:	f000 f8c3 	bl	801edb4 <FLASH_Program_Word>
 801ec2e:	e004      	b.n	801ec3a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801ec30:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec34:	68b8      	ldr	r0, [r7, #8]
 801ec36:	f000 f88b 	bl	801ed50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ec3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ec3e:	f000 f847 	bl	801ecd0 <FLASH_WaitForLastOperation>
 801ec42:	4603      	mov	r3, r0
 801ec44:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801ec46:	4b08      	ldr	r3, [pc, #32]	; (801ec68 <HAL_FLASH_Program+0xa4>)
 801ec48:	691b      	ldr	r3, [r3, #16]
 801ec4a:	4a07      	ldr	r2, [pc, #28]	; (801ec68 <HAL_FLASH_Program+0xa4>)
 801ec4c:	f023 0301 	bic.w	r3, r3, #1
 801ec50:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801ec52:	4b04      	ldr	r3, [pc, #16]	; (801ec64 <HAL_FLASH_Program+0xa0>)
 801ec54:	2200      	movs	r2, #0
 801ec56:	761a      	strb	r2, [r3, #24]
  
  return status;
 801ec58:	7dfb      	ldrb	r3, [r7, #23]
}
 801ec5a:	4618      	mov	r0, r3
 801ec5c:	3718      	adds	r7, #24
 801ec5e:	46bd      	mov	sp, r7
 801ec60:	bd80      	pop	{r7, pc}
 801ec62:	bf00      	nop
 801ec64:	2000b344 	.word	0x2000b344
 801ec68:	40023c00 	.word	0x40023c00

0801ec6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801ec6c:	b480      	push	{r7}
 801ec6e:	b083      	sub	sp, #12
 801ec70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801ec72:	2300      	movs	r3, #0
 801ec74:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801ec76:	4b0b      	ldr	r3, [pc, #44]	; (801eca4 <HAL_FLASH_Unlock+0x38>)
 801ec78:	691b      	ldr	r3, [r3, #16]
 801ec7a:	2b00      	cmp	r3, #0
 801ec7c:	da0b      	bge.n	801ec96 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801ec7e:	4b09      	ldr	r3, [pc, #36]	; (801eca4 <HAL_FLASH_Unlock+0x38>)
 801ec80:	4a09      	ldr	r2, [pc, #36]	; (801eca8 <HAL_FLASH_Unlock+0x3c>)
 801ec82:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801ec84:	4b07      	ldr	r3, [pc, #28]	; (801eca4 <HAL_FLASH_Unlock+0x38>)
 801ec86:	4a09      	ldr	r2, [pc, #36]	; (801ecac <HAL_FLASH_Unlock+0x40>)
 801ec88:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801ec8a:	4b06      	ldr	r3, [pc, #24]	; (801eca4 <HAL_FLASH_Unlock+0x38>)
 801ec8c:	691b      	ldr	r3, [r3, #16]
 801ec8e:	2b00      	cmp	r3, #0
 801ec90:	da01      	bge.n	801ec96 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801ec92:	2301      	movs	r3, #1
 801ec94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801ec96:	79fb      	ldrb	r3, [r7, #7]
}
 801ec98:	4618      	mov	r0, r3
 801ec9a:	370c      	adds	r7, #12
 801ec9c:	46bd      	mov	sp, r7
 801ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca2:	4770      	bx	lr
 801eca4:	40023c00 	.word	0x40023c00
 801eca8:	45670123 	.word	0x45670123
 801ecac:	cdef89ab 	.word	0xcdef89ab

0801ecb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801ecb0:	b480      	push	{r7}
 801ecb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801ecb4:	4b05      	ldr	r3, [pc, #20]	; (801eccc <HAL_FLASH_Lock+0x1c>)
 801ecb6:	691b      	ldr	r3, [r3, #16]
 801ecb8:	4a04      	ldr	r2, [pc, #16]	; (801eccc <HAL_FLASH_Lock+0x1c>)
 801ecba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ecbe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801ecc0:	2300      	movs	r3, #0
}
 801ecc2:	4618      	mov	r0, r3
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecca:	4770      	bx	lr
 801eccc:	40023c00 	.word	0x40023c00

0801ecd0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801ecd0:	b580      	push	{r7, lr}
 801ecd2:	b084      	sub	sp, #16
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ecd8:	2300      	movs	r3, #0
 801ecda:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801ecdc:	4b1a      	ldr	r3, [pc, #104]	; (801ed48 <FLASH_WaitForLastOperation+0x78>)
 801ecde:	2200      	movs	r2, #0
 801ece0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801ece2:	f7fe fcc5 	bl	801d670 <HAL_GetTick>
 801ece6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801ece8:	e010      	b.n	801ed0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ecf0:	d00c      	beq.n	801ed0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	d007      	beq.n	801ed08 <FLASH_WaitForLastOperation+0x38>
 801ecf8:	f7fe fcba 	bl	801d670 <HAL_GetTick>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	68fb      	ldr	r3, [r7, #12]
 801ed00:	1ad3      	subs	r3, r2, r3
 801ed02:	687a      	ldr	r2, [r7, #4]
 801ed04:	429a      	cmp	r2, r3
 801ed06:	d201      	bcs.n	801ed0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801ed08:	2303      	movs	r3, #3
 801ed0a:	e019      	b.n	801ed40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801ed0c:	4b0f      	ldr	r3, [pc, #60]	; (801ed4c <FLASH_WaitForLastOperation+0x7c>)
 801ed0e:	68db      	ldr	r3, [r3, #12]
 801ed10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d1e8      	bne.n	801ecea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801ed18:	4b0c      	ldr	r3, [pc, #48]	; (801ed4c <FLASH_WaitForLastOperation+0x7c>)
 801ed1a:	68db      	ldr	r3, [r3, #12]
 801ed1c:	f003 0301 	and.w	r3, r3, #1
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d002      	beq.n	801ed2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801ed24:	4b09      	ldr	r3, [pc, #36]	; (801ed4c <FLASH_WaitForLastOperation+0x7c>)
 801ed26:	2201      	movs	r2, #1
 801ed28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801ed2a:	4b08      	ldr	r3, [pc, #32]	; (801ed4c <FLASH_WaitForLastOperation+0x7c>)
 801ed2c:	68db      	ldr	r3, [r3, #12]
 801ed2e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d003      	beq.n	801ed3e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801ed36:	f000 f8a5 	bl	801ee84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801ed3a:	2301      	movs	r3, #1
 801ed3c:	e000      	b.n	801ed40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801ed3e:	2300      	movs	r3, #0
  
}  
 801ed40:	4618      	mov	r0, r3
 801ed42:	3710      	adds	r7, #16
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bd80      	pop	{r7, pc}
 801ed48:	2000b344 	.word	0x2000b344
 801ed4c:	40023c00 	.word	0x40023c00

0801ed50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801ed50:	b480      	push	{r7}
 801ed52:	b085      	sub	sp, #20
 801ed54:	af00      	add	r7, sp, #0
 801ed56:	60f8      	str	r0, [r7, #12]
 801ed58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ed5c:	4b14      	ldr	r3, [pc, #80]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed5e:	691b      	ldr	r3, [r3, #16]
 801ed60:	4a13      	ldr	r2, [pc, #76]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ed66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801ed68:	4b11      	ldr	r3, [pc, #68]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed6a:	691b      	ldr	r3, [r3, #16]
 801ed6c:	4a10      	ldr	r2, [pc, #64]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801ed72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801ed74:	4b0e      	ldr	r3, [pc, #56]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed76:	691b      	ldr	r3, [r3, #16]
 801ed78:	4a0d      	ldr	r2, [pc, #52]	; (801edb0 <FLASH_Program_DoubleWord+0x60>)
 801ed7a:	f043 0301 	orr.w	r3, r3, #1
 801ed7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	683a      	ldr	r2, [r7, #0]
 801ed84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801ed86:	f3bf 8f6f 	isb	sy
}
 801ed8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801ed8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ed90:	f04f 0200 	mov.w	r2, #0
 801ed94:	f04f 0300 	mov.w	r3, #0
 801ed98:	000a      	movs	r2, r1
 801ed9a:	2300      	movs	r3, #0
 801ed9c:	68f9      	ldr	r1, [r7, #12]
 801ed9e:	3104      	adds	r1, #4
 801eda0:	4613      	mov	r3, r2
 801eda2:	600b      	str	r3, [r1, #0]
}
 801eda4:	bf00      	nop
 801eda6:	3714      	adds	r7, #20
 801eda8:	46bd      	mov	sp, r7
 801edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edae:	4770      	bx	lr
 801edb0:	40023c00 	.word	0x40023c00

0801edb4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 801edb4:	b480      	push	{r7}
 801edb6:	b083      	sub	sp, #12
 801edb8:	af00      	add	r7, sp, #0
 801edba:	6078      	str	r0, [r7, #4]
 801edbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801edbe:	4b0d      	ldr	r3, [pc, #52]	; (801edf4 <FLASH_Program_Word+0x40>)
 801edc0:	691b      	ldr	r3, [r3, #16]
 801edc2:	4a0c      	ldr	r2, [pc, #48]	; (801edf4 <FLASH_Program_Word+0x40>)
 801edc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801edc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801edca:	4b0a      	ldr	r3, [pc, #40]	; (801edf4 <FLASH_Program_Word+0x40>)
 801edcc:	691b      	ldr	r3, [r3, #16]
 801edce:	4a09      	ldr	r2, [pc, #36]	; (801edf4 <FLASH_Program_Word+0x40>)
 801edd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801edd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801edd6:	4b07      	ldr	r3, [pc, #28]	; (801edf4 <FLASH_Program_Word+0x40>)
 801edd8:	691b      	ldr	r3, [r3, #16]
 801edda:	4a06      	ldr	r2, [pc, #24]	; (801edf4 <FLASH_Program_Word+0x40>)
 801eddc:	f043 0301 	orr.w	r3, r3, #1
 801ede0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	683a      	ldr	r2, [r7, #0]
 801ede6:	601a      	str	r2, [r3, #0]
}
 801ede8:	bf00      	nop
 801edea:	370c      	adds	r7, #12
 801edec:	46bd      	mov	sp, r7
 801edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edf2:	4770      	bx	lr
 801edf4:	40023c00 	.word	0x40023c00

0801edf8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801edf8:	b480      	push	{r7}
 801edfa:	b083      	sub	sp, #12
 801edfc:	af00      	add	r7, sp, #0
 801edfe:	6078      	str	r0, [r7, #4]
 801ee00:	460b      	mov	r3, r1
 801ee02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ee04:	4b0d      	ldr	r3, [pc, #52]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee06:	691b      	ldr	r3, [r3, #16]
 801ee08:	4a0c      	ldr	r2, [pc, #48]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ee0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801ee10:	4b0a      	ldr	r3, [pc, #40]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee12:	691b      	ldr	r3, [r3, #16]
 801ee14:	4a09      	ldr	r2, [pc, #36]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ee1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801ee1c:	4b07      	ldr	r3, [pc, #28]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee1e:	691b      	ldr	r3, [r3, #16]
 801ee20:	4a06      	ldr	r2, [pc, #24]	; (801ee3c <FLASH_Program_HalfWord+0x44>)
 801ee22:	f043 0301 	orr.w	r3, r3, #1
 801ee26:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	887a      	ldrh	r2, [r7, #2]
 801ee2c:	801a      	strh	r2, [r3, #0]
}
 801ee2e:	bf00      	nop
 801ee30:	370c      	adds	r7, #12
 801ee32:	46bd      	mov	sp, r7
 801ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee38:	4770      	bx	lr
 801ee3a:	bf00      	nop
 801ee3c:	40023c00 	.word	0x40023c00

0801ee40 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801ee40:	b480      	push	{r7}
 801ee42:	b083      	sub	sp, #12
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
 801ee48:	460b      	mov	r3, r1
 801ee4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ee4c:	4b0c      	ldr	r3, [pc, #48]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee4e:	691b      	ldr	r3, [r3, #16]
 801ee50:	4a0b      	ldr	r2, [pc, #44]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ee56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801ee58:	4b09      	ldr	r3, [pc, #36]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee5a:	4a09      	ldr	r2, [pc, #36]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee5c:	691b      	ldr	r3, [r3, #16]
 801ee5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801ee60:	4b07      	ldr	r3, [pc, #28]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee62:	691b      	ldr	r3, [r3, #16]
 801ee64:	4a06      	ldr	r2, [pc, #24]	; (801ee80 <FLASH_Program_Byte+0x40>)
 801ee66:	f043 0301 	orr.w	r3, r3, #1
 801ee6a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	78fa      	ldrb	r2, [r7, #3]
 801ee70:	701a      	strb	r2, [r3, #0]
}
 801ee72:	bf00      	nop
 801ee74:	370c      	adds	r7, #12
 801ee76:	46bd      	mov	sp, r7
 801ee78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee7c:	4770      	bx	lr
 801ee7e:	bf00      	nop
 801ee80:	40023c00 	.word	0x40023c00

0801ee84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 801ee84:	b480      	push	{r7}
 801ee86:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801ee88:	4b2f      	ldr	r3, [pc, #188]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801ee8a:	68db      	ldr	r3, [r3, #12]
 801ee8c:	f003 0310 	and.w	r3, r3, #16
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d008      	beq.n	801eea6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801ee94:	4b2d      	ldr	r3, [pc, #180]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ee96:	69db      	ldr	r3, [r3, #28]
 801ee98:	f043 0310 	orr.w	r3, r3, #16
 801ee9c:	4a2b      	ldr	r2, [pc, #172]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ee9e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801eea0:	4b29      	ldr	r3, [pc, #164]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eea2:	2210      	movs	r2, #16
 801eea4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801eea6:	4b28      	ldr	r3, [pc, #160]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eea8:	68db      	ldr	r3, [r3, #12]
 801eeaa:	f003 0320 	and.w	r3, r3, #32
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	d008      	beq.n	801eec4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801eeb2:	4b26      	ldr	r3, [pc, #152]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eeb4:	69db      	ldr	r3, [r3, #28]
 801eeb6:	f043 0308 	orr.w	r3, r3, #8
 801eeba:	4a24      	ldr	r2, [pc, #144]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eebc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801eebe:	4b22      	ldr	r3, [pc, #136]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eec0:	2220      	movs	r2, #32
 801eec2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801eec4:	4b20      	ldr	r3, [pc, #128]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eec6:	68db      	ldr	r3, [r3, #12]
 801eec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d008      	beq.n	801eee2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801eed0:	4b1e      	ldr	r3, [pc, #120]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eed2:	69db      	ldr	r3, [r3, #28]
 801eed4:	f043 0304 	orr.w	r3, r3, #4
 801eed8:	4a1c      	ldr	r2, [pc, #112]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eeda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801eedc:	4b1a      	ldr	r3, [pc, #104]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eede:	2240      	movs	r2, #64	; 0x40
 801eee0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801eee2:	4b19      	ldr	r3, [pc, #100]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eee4:	68db      	ldr	r3, [r3, #12]
 801eee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d008      	beq.n	801ef00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801eeee:	4b17      	ldr	r3, [pc, #92]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eef0:	69db      	ldr	r3, [r3, #28]
 801eef2:	f043 0302 	orr.w	r3, r3, #2
 801eef6:	4a15      	ldr	r2, [pc, #84]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801eef8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801eefa:	4b13      	ldr	r3, [pc, #76]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801eefc:	2280      	movs	r2, #128	; 0x80
 801eefe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801ef00:	4b11      	ldr	r3, [pc, #68]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801ef02:	68db      	ldr	r3, [r3, #12]
 801ef04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d009      	beq.n	801ef20 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801ef0c:	4b0f      	ldr	r3, [pc, #60]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ef0e:	69db      	ldr	r3, [r3, #28]
 801ef10:	f043 0301 	orr.w	r3, r3, #1
 801ef14:	4a0d      	ldr	r2, [pc, #52]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ef16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 801ef18:	4b0b      	ldr	r3, [pc, #44]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801ef1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ef1e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801ef20:	4b09      	ldr	r3, [pc, #36]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801ef22:	68db      	ldr	r3, [r3, #12]
 801ef24:	f003 0302 	and.w	r3, r3, #2
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d008      	beq.n	801ef3e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801ef2c:	4b07      	ldr	r3, [pc, #28]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ef2e:	69db      	ldr	r3, [r3, #28]
 801ef30:	f043 0320 	orr.w	r3, r3, #32
 801ef34:	4a05      	ldr	r2, [pc, #20]	; (801ef4c <FLASH_SetErrorCode+0xc8>)
 801ef36:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801ef38:	4b03      	ldr	r3, [pc, #12]	; (801ef48 <FLASH_SetErrorCode+0xc4>)
 801ef3a:	2202      	movs	r2, #2
 801ef3c:	60da      	str	r2, [r3, #12]
  }
}
 801ef3e:	bf00      	nop
 801ef40:	46bd      	mov	sp, r7
 801ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef46:	4770      	bx	lr
 801ef48:	40023c00 	.word	0x40023c00
 801ef4c:	2000b344 	.word	0x2000b344

0801ef50 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b084      	sub	sp, #16
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
 801ef58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ef5a:	2301      	movs	r3, #1
 801ef5c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801ef5e:	2300      	movs	r3, #0
 801ef60:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801ef62:	4b31      	ldr	r3, [pc, #196]	; (801f028 <HAL_FLASHEx_Erase+0xd8>)
 801ef64:	7e1b      	ldrb	r3, [r3, #24]
 801ef66:	2b01      	cmp	r3, #1
 801ef68:	d101      	bne.n	801ef6e <HAL_FLASHEx_Erase+0x1e>
 801ef6a:	2302      	movs	r3, #2
 801ef6c:	e058      	b.n	801f020 <HAL_FLASHEx_Erase+0xd0>
 801ef6e:	4b2e      	ldr	r3, [pc, #184]	; (801f028 <HAL_FLASHEx_Erase+0xd8>)
 801ef70:	2201      	movs	r2, #1
 801ef72:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ef74:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ef78:	f7ff feaa 	bl	801ecd0 <FLASH_WaitForLastOperation>
 801ef7c:	4603      	mov	r3, r0
 801ef7e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801ef80:	7bfb      	ldrb	r3, [r7, #15]
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d148      	bne.n	801f018 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801ef86:	683b      	ldr	r3, [r7, #0]
 801ef88:	f04f 32ff 	mov.w	r2, #4294967295
 801ef8c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	2b01      	cmp	r3, #1
 801ef94:	d115      	bne.n	801efc2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801ef96:	687b      	ldr	r3, [r7, #4]
 801ef98:	691b      	ldr	r3, [r3, #16]
 801ef9a:	b2da      	uxtb	r2, r3
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	685b      	ldr	r3, [r3, #4]
 801efa0:	4619      	mov	r1, r3
 801efa2:	4610      	mov	r0, r2
 801efa4:	f000 f844 	bl	801f030 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801efa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 801efac:	f7ff fe90 	bl	801ecd0 <FLASH_WaitForLastOperation>
 801efb0:	4603      	mov	r3, r0
 801efb2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801efb4:	4b1d      	ldr	r3, [pc, #116]	; (801f02c <HAL_FLASHEx_Erase+0xdc>)
 801efb6:	691b      	ldr	r3, [r3, #16]
 801efb8:	4a1c      	ldr	r2, [pc, #112]	; (801f02c <HAL_FLASHEx_Erase+0xdc>)
 801efba:	f023 0304 	bic.w	r3, r3, #4
 801efbe:	6113      	str	r3, [r2, #16]
 801efc0:	e028      	b.n	801f014 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	689b      	ldr	r3, [r3, #8]
 801efc6:	60bb      	str	r3, [r7, #8]
 801efc8:	e01c      	b.n	801f004 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	691b      	ldr	r3, [r3, #16]
 801efce:	b2db      	uxtb	r3, r3
 801efd0:	4619      	mov	r1, r3
 801efd2:	68b8      	ldr	r0, [r7, #8]
 801efd4:	f000 f850 	bl	801f078 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801efd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 801efdc:	f7ff fe78 	bl	801ecd0 <FLASH_WaitForLastOperation>
 801efe0:	4603      	mov	r3, r0
 801efe2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801efe4:	4b11      	ldr	r3, [pc, #68]	; (801f02c <HAL_FLASHEx_Erase+0xdc>)
 801efe6:	691b      	ldr	r3, [r3, #16]
 801efe8:	4a10      	ldr	r2, [pc, #64]	; (801f02c <HAL_FLASHEx_Erase+0xdc>)
 801efea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801efee:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801eff0:	7bfb      	ldrb	r3, [r7, #15]
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d003      	beq.n	801effe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	68ba      	ldr	r2, [r7, #8]
 801effa:	601a      	str	r2, [r3, #0]
          break;
 801effc:	e00a      	b.n	801f014 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801effe:	68bb      	ldr	r3, [r7, #8]
 801f000:	3301      	adds	r3, #1
 801f002:	60bb      	str	r3, [r7, #8]
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	68da      	ldr	r2, [r3, #12]
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	689b      	ldr	r3, [r3, #8]
 801f00c:	4413      	add	r3, r2
 801f00e:	68ba      	ldr	r2, [r7, #8]
 801f010:	429a      	cmp	r2, r3
 801f012:	d3da      	bcc.n	801efca <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 801f014:	f000 f878 	bl	801f108 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801f018:	4b03      	ldr	r3, [pc, #12]	; (801f028 <HAL_FLASHEx_Erase+0xd8>)
 801f01a:	2200      	movs	r2, #0
 801f01c:	761a      	strb	r2, [r3, #24]

  return status;
 801f01e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f020:	4618      	mov	r0, r3
 801f022:	3710      	adds	r7, #16
 801f024:	46bd      	mov	sp, r7
 801f026:	bd80      	pop	{r7, pc}
 801f028:	2000b344 	.word	0x2000b344
 801f02c:	40023c00 	.word	0x40023c00

0801f030 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801f030:	b480      	push	{r7}
 801f032:	b083      	sub	sp, #12
 801f034:	af00      	add	r7, sp, #0
 801f036:	4603      	mov	r3, r0
 801f038:	6039      	str	r1, [r7, #0]
 801f03a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801f03c:	4b0d      	ldr	r3, [pc, #52]	; (801f074 <FLASH_MassErase+0x44>)
 801f03e:	691b      	ldr	r3, [r3, #16]
 801f040:	4a0c      	ldr	r2, [pc, #48]	; (801f074 <FLASH_MassErase+0x44>)
 801f042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801f048:	4b0a      	ldr	r3, [pc, #40]	; (801f074 <FLASH_MassErase+0x44>)
 801f04a:	691b      	ldr	r3, [r3, #16]
 801f04c:	4a09      	ldr	r2, [pc, #36]	; (801f074 <FLASH_MassErase+0x44>)
 801f04e:	f043 0304 	orr.w	r3, r3, #4
 801f052:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801f054:	4b07      	ldr	r3, [pc, #28]	; (801f074 <FLASH_MassErase+0x44>)
 801f056:	691a      	ldr	r2, [r3, #16]
 801f058:	79fb      	ldrb	r3, [r7, #7]
 801f05a:	021b      	lsls	r3, r3, #8
 801f05c:	4313      	orrs	r3, r2
 801f05e:	4a05      	ldr	r2, [pc, #20]	; (801f074 <FLASH_MassErase+0x44>)
 801f060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f064:	6113      	str	r3, [r2, #16]
}
 801f066:	bf00      	nop
 801f068:	370c      	adds	r7, #12
 801f06a:	46bd      	mov	sp, r7
 801f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f070:	4770      	bx	lr
 801f072:	bf00      	nop
 801f074:	40023c00 	.word	0x40023c00

0801f078 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801f078:	b480      	push	{r7}
 801f07a:	b085      	sub	sp, #20
 801f07c:	af00      	add	r7, sp, #0
 801f07e:	6078      	str	r0, [r7, #4]
 801f080:	460b      	mov	r3, r1
 801f082:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801f084:	2300      	movs	r3, #0
 801f086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801f088:	78fb      	ldrb	r3, [r7, #3]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d102      	bne.n	801f094 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801f08e:	2300      	movs	r3, #0
 801f090:	60fb      	str	r3, [r7, #12]
 801f092:	e010      	b.n	801f0b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801f094:	78fb      	ldrb	r3, [r7, #3]
 801f096:	2b01      	cmp	r3, #1
 801f098:	d103      	bne.n	801f0a2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801f09a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801f09e:	60fb      	str	r3, [r7, #12]
 801f0a0:	e009      	b.n	801f0b6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801f0a2:	78fb      	ldrb	r3, [r7, #3]
 801f0a4:	2b02      	cmp	r3, #2
 801f0a6:	d103      	bne.n	801f0b0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801f0a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801f0ac:	60fb      	str	r3, [r7, #12]
 801f0ae:	e002      	b.n	801f0b6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801f0b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 801f0b4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801f0b6:	4b13      	ldr	r3, [pc, #76]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0b8:	691b      	ldr	r3, [r3, #16]
 801f0ba:	4a12      	ldr	r2, [pc, #72]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f0c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801f0c2:	4b10      	ldr	r3, [pc, #64]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0c4:	691a      	ldr	r2, [r3, #16]
 801f0c6:	490f      	ldr	r1, [pc, #60]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	4313      	orrs	r3, r2
 801f0cc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801f0ce:	4b0d      	ldr	r3, [pc, #52]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0d0:	691b      	ldr	r3, [r3, #16]
 801f0d2:	4a0c      	ldr	r2, [pc, #48]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801f0d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801f0da:	4b0a      	ldr	r3, [pc, #40]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0dc:	691a      	ldr	r2, [r3, #16]
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	00db      	lsls	r3, r3, #3
 801f0e2:	4313      	orrs	r3, r2
 801f0e4:	4a07      	ldr	r2, [pc, #28]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0e6:	f043 0302 	orr.w	r3, r3, #2
 801f0ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801f0ec:	4b05      	ldr	r3, [pc, #20]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0ee:	691b      	ldr	r3, [r3, #16]
 801f0f0:	4a04      	ldr	r2, [pc, #16]	; (801f104 <FLASH_Erase_Sector+0x8c>)
 801f0f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f0f6:	6113      	str	r3, [r2, #16]
}
 801f0f8:	bf00      	nop
 801f0fa:	3714      	adds	r7, #20
 801f0fc:	46bd      	mov	sp, r7
 801f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f102:	4770      	bx	lr
 801f104:	40023c00 	.word	0x40023c00

0801f108 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801f108:	b480      	push	{r7}
 801f10a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801f10c:	4b20      	ldr	r3, [pc, #128]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801f114:	2b00      	cmp	r3, #0
 801f116:	d017      	beq.n	801f148 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801f118:	4b1d      	ldr	r3, [pc, #116]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	4a1c      	ldr	r2, [pc, #112]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f11e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f122:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801f124:	4b1a      	ldr	r3, [pc, #104]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	4a19      	ldr	r2, [pc, #100]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f12a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f12e:	6013      	str	r3, [r2, #0]
 801f130:	4b17      	ldr	r3, [pc, #92]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	4a16      	ldr	r2, [pc, #88]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f13a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801f13c:	4b14      	ldr	r3, [pc, #80]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	4a13      	ldr	r2, [pc, #76]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801f146:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801f148:	4b11      	ldr	r3, [pc, #68]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f14a:	681b      	ldr	r3, [r3, #0]
 801f14c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f150:	2b00      	cmp	r3, #0
 801f152:	d017      	beq.n	801f184 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801f154:	4b0e      	ldr	r3, [pc, #56]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f156:	681b      	ldr	r3, [r3, #0]
 801f158:	4a0d      	ldr	r2, [pc, #52]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f15a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f15e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801f160:	4b0b      	ldr	r3, [pc, #44]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	4a0a      	ldr	r2, [pc, #40]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801f16a:	6013      	str	r3, [r2, #0]
 801f16c:	4b08      	ldr	r3, [pc, #32]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	4a07      	ldr	r2, [pc, #28]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f176:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801f178:	4b05      	ldr	r3, [pc, #20]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	4a04      	ldr	r2, [pc, #16]	; (801f190 <FLASH_FlushCaches+0x88>)
 801f17e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801f182:	6013      	str	r3, [r2, #0]
  }
}
 801f184:	bf00      	nop
 801f186:	46bd      	mov	sp, r7
 801f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f18c:	4770      	bx	lr
 801f18e:	bf00      	nop
 801f190:	40023c00 	.word	0x40023c00

0801f194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801f194:	b480      	push	{r7}
 801f196:	b089      	sub	sp, #36	; 0x24
 801f198:	af00      	add	r7, sp, #0
 801f19a:	6078      	str	r0, [r7, #4]
 801f19c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801f19e:	2300      	movs	r3, #0
 801f1a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801f1a6:	2300      	movs	r3, #0
 801f1a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f1aa:	2300      	movs	r3, #0
 801f1ac:	61fb      	str	r3, [r7, #28]
 801f1ae:	e159      	b.n	801f464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801f1b0:	2201      	movs	r2, #1
 801f1b2:	69fb      	ldr	r3, [r7, #28]
 801f1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801f1b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801f1ba:	683b      	ldr	r3, [r7, #0]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	697a      	ldr	r2, [r7, #20]
 801f1c0:	4013      	ands	r3, r2
 801f1c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801f1c4:	693a      	ldr	r2, [r7, #16]
 801f1c6:	697b      	ldr	r3, [r7, #20]
 801f1c8:	429a      	cmp	r2, r3
 801f1ca:	f040 8148 	bne.w	801f45e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801f1ce:	683b      	ldr	r3, [r7, #0]
 801f1d0:	685b      	ldr	r3, [r3, #4]
 801f1d2:	2b01      	cmp	r3, #1
 801f1d4:	d00b      	beq.n	801f1ee <HAL_GPIO_Init+0x5a>
 801f1d6:	683b      	ldr	r3, [r7, #0]
 801f1d8:	685b      	ldr	r3, [r3, #4]
 801f1da:	2b02      	cmp	r3, #2
 801f1dc:	d007      	beq.n	801f1ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801f1de:	683b      	ldr	r3, [r7, #0]
 801f1e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801f1e2:	2b11      	cmp	r3, #17
 801f1e4:	d003      	beq.n	801f1ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801f1e6:	683b      	ldr	r3, [r7, #0]
 801f1e8:	685b      	ldr	r3, [r3, #4]
 801f1ea:	2b12      	cmp	r3, #18
 801f1ec:	d130      	bne.n	801f250 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	689b      	ldr	r3, [r3, #8]
 801f1f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801f1f4:	69fb      	ldr	r3, [r7, #28]
 801f1f6:	005b      	lsls	r3, r3, #1
 801f1f8:	2203      	movs	r2, #3
 801f1fa:	fa02 f303 	lsl.w	r3, r2, r3
 801f1fe:	43db      	mvns	r3, r3
 801f200:	69ba      	ldr	r2, [r7, #24]
 801f202:	4013      	ands	r3, r2
 801f204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801f206:	683b      	ldr	r3, [r7, #0]
 801f208:	68da      	ldr	r2, [r3, #12]
 801f20a:	69fb      	ldr	r3, [r7, #28]
 801f20c:	005b      	lsls	r3, r3, #1
 801f20e:	fa02 f303 	lsl.w	r3, r2, r3
 801f212:	69ba      	ldr	r2, [r7, #24]
 801f214:	4313      	orrs	r3, r2
 801f216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	69ba      	ldr	r2, [r7, #24]
 801f21c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801f21e:	687b      	ldr	r3, [r7, #4]
 801f220:	685b      	ldr	r3, [r3, #4]
 801f222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801f224:	2201      	movs	r2, #1
 801f226:	69fb      	ldr	r3, [r7, #28]
 801f228:	fa02 f303 	lsl.w	r3, r2, r3
 801f22c:	43db      	mvns	r3, r3
 801f22e:	69ba      	ldr	r2, [r7, #24]
 801f230:	4013      	ands	r3, r2
 801f232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801f234:	683b      	ldr	r3, [r7, #0]
 801f236:	685b      	ldr	r3, [r3, #4]
 801f238:	091b      	lsrs	r3, r3, #4
 801f23a:	f003 0201 	and.w	r2, r3, #1
 801f23e:	69fb      	ldr	r3, [r7, #28]
 801f240:	fa02 f303 	lsl.w	r3, r2, r3
 801f244:	69ba      	ldr	r2, [r7, #24]
 801f246:	4313      	orrs	r3, r2
 801f248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	69ba      	ldr	r2, [r7, #24]
 801f24e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	68db      	ldr	r3, [r3, #12]
 801f254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801f256:	69fb      	ldr	r3, [r7, #28]
 801f258:	005b      	lsls	r3, r3, #1
 801f25a:	2203      	movs	r2, #3
 801f25c:	fa02 f303 	lsl.w	r3, r2, r3
 801f260:	43db      	mvns	r3, r3
 801f262:	69ba      	ldr	r2, [r7, #24]
 801f264:	4013      	ands	r3, r2
 801f266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801f268:	683b      	ldr	r3, [r7, #0]
 801f26a:	689a      	ldr	r2, [r3, #8]
 801f26c:	69fb      	ldr	r3, [r7, #28]
 801f26e:	005b      	lsls	r3, r3, #1
 801f270:	fa02 f303 	lsl.w	r3, r2, r3
 801f274:	69ba      	ldr	r2, [r7, #24]
 801f276:	4313      	orrs	r3, r2
 801f278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	69ba      	ldr	r2, [r7, #24]
 801f27e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801f280:	683b      	ldr	r3, [r7, #0]
 801f282:	685b      	ldr	r3, [r3, #4]
 801f284:	2b02      	cmp	r3, #2
 801f286:	d003      	beq.n	801f290 <HAL_GPIO_Init+0xfc>
 801f288:	683b      	ldr	r3, [r7, #0]
 801f28a:	685b      	ldr	r3, [r3, #4]
 801f28c:	2b12      	cmp	r3, #18
 801f28e:	d123      	bne.n	801f2d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801f290:	69fb      	ldr	r3, [r7, #28]
 801f292:	08da      	lsrs	r2, r3, #3
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	3208      	adds	r2, #8
 801f298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f29c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801f29e:	69fb      	ldr	r3, [r7, #28]
 801f2a0:	f003 0307 	and.w	r3, r3, #7
 801f2a4:	009b      	lsls	r3, r3, #2
 801f2a6:	220f      	movs	r2, #15
 801f2a8:	fa02 f303 	lsl.w	r3, r2, r3
 801f2ac:	43db      	mvns	r3, r3
 801f2ae:	69ba      	ldr	r2, [r7, #24]
 801f2b0:	4013      	ands	r3, r2
 801f2b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801f2b4:	683b      	ldr	r3, [r7, #0]
 801f2b6:	691a      	ldr	r2, [r3, #16]
 801f2b8:	69fb      	ldr	r3, [r7, #28]
 801f2ba:	f003 0307 	and.w	r3, r3, #7
 801f2be:	009b      	lsls	r3, r3, #2
 801f2c0:	fa02 f303 	lsl.w	r3, r2, r3
 801f2c4:	69ba      	ldr	r2, [r7, #24]
 801f2c6:	4313      	orrs	r3, r2
 801f2c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801f2ca:	69fb      	ldr	r3, [r7, #28]
 801f2cc:	08da      	lsrs	r2, r3, #3
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	3208      	adds	r2, #8
 801f2d2:	69b9      	ldr	r1, [r7, #24]
 801f2d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	681b      	ldr	r3, [r3, #0]
 801f2dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801f2de:	69fb      	ldr	r3, [r7, #28]
 801f2e0:	005b      	lsls	r3, r3, #1
 801f2e2:	2203      	movs	r2, #3
 801f2e4:	fa02 f303 	lsl.w	r3, r2, r3
 801f2e8:	43db      	mvns	r3, r3
 801f2ea:	69ba      	ldr	r2, [r7, #24]
 801f2ec:	4013      	ands	r3, r2
 801f2ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	685b      	ldr	r3, [r3, #4]
 801f2f4:	f003 0203 	and.w	r2, r3, #3
 801f2f8:	69fb      	ldr	r3, [r7, #28]
 801f2fa:	005b      	lsls	r3, r3, #1
 801f2fc:	fa02 f303 	lsl.w	r3, r2, r3
 801f300:	69ba      	ldr	r2, [r7, #24]
 801f302:	4313      	orrs	r3, r2
 801f304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	69ba      	ldr	r2, [r7, #24]
 801f30a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801f30c:	683b      	ldr	r3, [r7, #0]
 801f30e:	685b      	ldr	r3, [r3, #4]
 801f310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f314:	2b00      	cmp	r3, #0
 801f316:	f000 80a2 	beq.w	801f45e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f31a:	2300      	movs	r3, #0
 801f31c:	60fb      	str	r3, [r7, #12]
 801f31e:	4b57      	ldr	r3, [pc, #348]	; (801f47c <HAL_GPIO_Init+0x2e8>)
 801f320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f322:	4a56      	ldr	r2, [pc, #344]	; (801f47c <HAL_GPIO_Init+0x2e8>)
 801f324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f328:	6453      	str	r3, [r2, #68]	; 0x44
 801f32a:	4b54      	ldr	r3, [pc, #336]	; (801f47c <HAL_GPIO_Init+0x2e8>)
 801f32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f32e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f332:	60fb      	str	r3, [r7, #12]
 801f334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801f336:	4a52      	ldr	r2, [pc, #328]	; (801f480 <HAL_GPIO_Init+0x2ec>)
 801f338:	69fb      	ldr	r3, [r7, #28]
 801f33a:	089b      	lsrs	r3, r3, #2
 801f33c:	3302      	adds	r3, #2
 801f33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801f344:	69fb      	ldr	r3, [r7, #28]
 801f346:	f003 0303 	and.w	r3, r3, #3
 801f34a:	009b      	lsls	r3, r3, #2
 801f34c:	220f      	movs	r2, #15
 801f34e:	fa02 f303 	lsl.w	r3, r2, r3
 801f352:	43db      	mvns	r3, r3
 801f354:	69ba      	ldr	r2, [r7, #24]
 801f356:	4013      	ands	r3, r2
 801f358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	4a49      	ldr	r2, [pc, #292]	; (801f484 <HAL_GPIO_Init+0x2f0>)
 801f35e:	4293      	cmp	r3, r2
 801f360:	d019      	beq.n	801f396 <HAL_GPIO_Init+0x202>
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	4a48      	ldr	r2, [pc, #288]	; (801f488 <HAL_GPIO_Init+0x2f4>)
 801f366:	4293      	cmp	r3, r2
 801f368:	d013      	beq.n	801f392 <HAL_GPIO_Init+0x1fe>
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	4a47      	ldr	r2, [pc, #284]	; (801f48c <HAL_GPIO_Init+0x2f8>)
 801f36e:	4293      	cmp	r3, r2
 801f370:	d00d      	beq.n	801f38e <HAL_GPIO_Init+0x1fa>
 801f372:	687b      	ldr	r3, [r7, #4]
 801f374:	4a46      	ldr	r2, [pc, #280]	; (801f490 <HAL_GPIO_Init+0x2fc>)
 801f376:	4293      	cmp	r3, r2
 801f378:	d007      	beq.n	801f38a <HAL_GPIO_Init+0x1f6>
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	4a45      	ldr	r2, [pc, #276]	; (801f494 <HAL_GPIO_Init+0x300>)
 801f37e:	4293      	cmp	r3, r2
 801f380:	d101      	bne.n	801f386 <HAL_GPIO_Init+0x1f2>
 801f382:	2304      	movs	r3, #4
 801f384:	e008      	b.n	801f398 <HAL_GPIO_Init+0x204>
 801f386:	2307      	movs	r3, #7
 801f388:	e006      	b.n	801f398 <HAL_GPIO_Init+0x204>
 801f38a:	2303      	movs	r3, #3
 801f38c:	e004      	b.n	801f398 <HAL_GPIO_Init+0x204>
 801f38e:	2302      	movs	r3, #2
 801f390:	e002      	b.n	801f398 <HAL_GPIO_Init+0x204>
 801f392:	2301      	movs	r3, #1
 801f394:	e000      	b.n	801f398 <HAL_GPIO_Init+0x204>
 801f396:	2300      	movs	r3, #0
 801f398:	69fa      	ldr	r2, [r7, #28]
 801f39a:	f002 0203 	and.w	r2, r2, #3
 801f39e:	0092      	lsls	r2, r2, #2
 801f3a0:	4093      	lsls	r3, r2
 801f3a2:	69ba      	ldr	r2, [r7, #24]
 801f3a4:	4313      	orrs	r3, r2
 801f3a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801f3a8:	4935      	ldr	r1, [pc, #212]	; (801f480 <HAL_GPIO_Init+0x2ec>)
 801f3aa:	69fb      	ldr	r3, [r7, #28]
 801f3ac:	089b      	lsrs	r3, r3, #2
 801f3ae:	3302      	adds	r3, #2
 801f3b0:	69ba      	ldr	r2, [r7, #24]
 801f3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801f3b6:	4b38      	ldr	r3, [pc, #224]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f3bc:	693b      	ldr	r3, [r7, #16]
 801f3be:	43db      	mvns	r3, r3
 801f3c0:	69ba      	ldr	r2, [r7, #24]
 801f3c2:	4013      	ands	r3, r2
 801f3c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801f3c6:	683b      	ldr	r3, [r7, #0]
 801f3c8:	685b      	ldr	r3, [r3, #4]
 801f3ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d003      	beq.n	801f3da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801f3d2:	69ba      	ldr	r2, [r7, #24]
 801f3d4:	693b      	ldr	r3, [r7, #16]
 801f3d6:	4313      	orrs	r3, r2
 801f3d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801f3da:	4a2f      	ldr	r2, [pc, #188]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f3dc:	69bb      	ldr	r3, [r7, #24]
 801f3de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801f3e0:	4b2d      	ldr	r3, [pc, #180]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f3e2:	685b      	ldr	r3, [r3, #4]
 801f3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f3e6:	693b      	ldr	r3, [r7, #16]
 801f3e8:	43db      	mvns	r3, r3
 801f3ea:	69ba      	ldr	r2, [r7, #24]
 801f3ec:	4013      	ands	r3, r2
 801f3ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801f3f0:	683b      	ldr	r3, [r7, #0]
 801f3f2:	685b      	ldr	r3, [r3, #4]
 801f3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	d003      	beq.n	801f404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801f3fc:	69ba      	ldr	r2, [r7, #24]
 801f3fe:	693b      	ldr	r3, [r7, #16]
 801f400:	4313      	orrs	r3, r2
 801f402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801f404:	4a24      	ldr	r2, [pc, #144]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f406:	69bb      	ldr	r3, [r7, #24]
 801f408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801f40a:	4b23      	ldr	r3, [pc, #140]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f40c:	689b      	ldr	r3, [r3, #8]
 801f40e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f410:	693b      	ldr	r3, [r7, #16]
 801f412:	43db      	mvns	r3, r3
 801f414:	69ba      	ldr	r2, [r7, #24]
 801f416:	4013      	ands	r3, r2
 801f418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801f41a:	683b      	ldr	r3, [r7, #0]
 801f41c:	685b      	ldr	r3, [r3, #4]
 801f41e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f422:	2b00      	cmp	r3, #0
 801f424:	d003      	beq.n	801f42e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801f426:	69ba      	ldr	r2, [r7, #24]
 801f428:	693b      	ldr	r3, [r7, #16]
 801f42a:	4313      	orrs	r3, r2
 801f42c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801f42e:	4a1a      	ldr	r2, [pc, #104]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f430:	69bb      	ldr	r3, [r7, #24]
 801f432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801f434:	4b18      	ldr	r3, [pc, #96]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f436:	68db      	ldr	r3, [r3, #12]
 801f438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f43a:	693b      	ldr	r3, [r7, #16]
 801f43c:	43db      	mvns	r3, r3
 801f43e:	69ba      	ldr	r2, [r7, #24]
 801f440:	4013      	ands	r3, r2
 801f442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801f444:	683b      	ldr	r3, [r7, #0]
 801f446:	685b      	ldr	r3, [r3, #4]
 801f448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d003      	beq.n	801f458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801f450:	69ba      	ldr	r2, [r7, #24]
 801f452:	693b      	ldr	r3, [r7, #16]
 801f454:	4313      	orrs	r3, r2
 801f456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801f458:	4a0f      	ldr	r2, [pc, #60]	; (801f498 <HAL_GPIO_Init+0x304>)
 801f45a:	69bb      	ldr	r3, [r7, #24]
 801f45c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f45e:	69fb      	ldr	r3, [r7, #28]
 801f460:	3301      	adds	r3, #1
 801f462:	61fb      	str	r3, [r7, #28]
 801f464:	69fb      	ldr	r3, [r7, #28]
 801f466:	2b0f      	cmp	r3, #15
 801f468:	f67f aea2 	bls.w	801f1b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801f46c:	bf00      	nop
 801f46e:	bf00      	nop
 801f470:	3724      	adds	r7, #36	; 0x24
 801f472:	46bd      	mov	sp, r7
 801f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f478:	4770      	bx	lr
 801f47a:	bf00      	nop
 801f47c:	40023800 	.word	0x40023800
 801f480:	40013800 	.word	0x40013800
 801f484:	40020000 	.word	0x40020000
 801f488:	40020400 	.word	0x40020400
 801f48c:	40020800 	.word	0x40020800
 801f490:	40020c00 	.word	0x40020c00
 801f494:	40021000 	.word	0x40021000
 801f498:	40013c00 	.word	0x40013c00

0801f49c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801f49c:	b480      	push	{r7}
 801f49e:	b087      	sub	sp, #28
 801f4a0:	af00      	add	r7, sp, #0
 801f4a2:	6078      	str	r0, [r7, #4]
 801f4a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801f4a6:	2300      	movs	r3, #0
 801f4a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801f4aa:	2300      	movs	r3, #0
 801f4ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801f4ae:	2300      	movs	r3, #0
 801f4b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	617b      	str	r3, [r7, #20]
 801f4b6:	e0bb      	b.n	801f630 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801f4b8:	2201      	movs	r2, #1
 801f4ba:	697b      	ldr	r3, [r7, #20]
 801f4bc:	fa02 f303 	lsl.w	r3, r2, r3
 801f4c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801f4c2:	683a      	ldr	r2, [r7, #0]
 801f4c4:	693b      	ldr	r3, [r7, #16]
 801f4c6:	4013      	ands	r3, r2
 801f4c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801f4ca:	68fa      	ldr	r2, [r7, #12]
 801f4cc:	693b      	ldr	r3, [r7, #16]
 801f4ce:	429a      	cmp	r2, r3
 801f4d0:	f040 80ab 	bne.w	801f62a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801f4d4:	4a5c      	ldr	r2, [pc, #368]	; (801f648 <HAL_GPIO_DeInit+0x1ac>)
 801f4d6:	697b      	ldr	r3, [r7, #20]
 801f4d8:	089b      	lsrs	r3, r3, #2
 801f4da:	3302      	adds	r3, #2
 801f4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f4e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801f4e2:	697b      	ldr	r3, [r7, #20]
 801f4e4:	f003 0303 	and.w	r3, r3, #3
 801f4e8:	009b      	lsls	r3, r3, #2
 801f4ea:	220f      	movs	r2, #15
 801f4ec:	fa02 f303 	lsl.w	r3, r2, r3
 801f4f0:	68ba      	ldr	r2, [r7, #8]
 801f4f2:	4013      	ands	r3, r2
 801f4f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	4a54      	ldr	r2, [pc, #336]	; (801f64c <HAL_GPIO_DeInit+0x1b0>)
 801f4fa:	4293      	cmp	r3, r2
 801f4fc:	d019      	beq.n	801f532 <HAL_GPIO_DeInit+0x96>
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	4a53      	ldr	r2, [pc, #332]	; (801f650 <HAL_GPIO_DeInit+0x1b4>)
 801f502:	4293      	cmp	r3, r2
 801f504:	d013      	beq.n	801f52e <HAL_GPIO_DeInit+0x92>
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	4a52      	ldr	r2, [pc, #328]	; (801f654 <HAL_GPIO_DeInit+0x1b8>)
 801f50a:	4293      	cmp	r3, r2
 801f50c:	d00d      	beq.n	801f52a <HAL_GPIO_DeInit+0x8e>
 801f50e:	687b      	ldr	r3, [r7, #4]
 801f510:	4a51      	ldr	r2, [pc, #324]	; (801f658 <HAL_GPIO_DeInit+0x1bc>)
 801f512:	4293      	cmp	r3, r2
 801f514:	d007      	beq.n	801f526 <HAL_GPIO_DeInit+0x8a>
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	4a50      	ldr	r2, [pc, #320]	; (801f65c <HAL_GPIO_DeInit+0x1c0>)
 801f51a:	4293      	cmp	r3, r2
 801f51c:	d101      	bne.n	801f522 <HAL_GPIO_DeInit+0x86>
 801f51e:	2304      	movs	r3, #4
 801f520:	e008      	b.n	801f534 <HAL_GPIO_DeInit+0x98>
 801f522:	2307      	movs	r3, #7
 801f524:	e006      	b.n	801f534 <HAL_GPIO_DeInit+0x98>
 801f526:	2303      	movs	r3, #3
 801f528:	e004      	b.n	801f534 <HAL_GPIO_DeInit+0x98>
 801f52a:	2302      	movs	r3, #2
 801f52c:	e002      	b.n	801f534 <HAL_GPIO_DeInit+0x98>
 801f52e:	2301      	movs	r3, #1
 801f530:	e000      	b.n	801f534 <HAL_GPIO_DeInit+0x98>
 801f532:	2300      	movs	r3, #0
 801f534:	697a      	ldr	r2, [r7, #20]
 801f536:	f002 0203 	and.w	r2, r2, #3
 801f53a:	0092      	lsls	r2, r2, #2
 801f53c:	4093      	lsls	r3, r2
 801f53e:	68ba      	ldr	r2, [r7, #8]
 801f540:	429a      	cmp	r2, r3
 801f542:	d132      	bne.n	801f5aa <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801f544:	4b46      	ldr	r3, [pc, #280]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f546:	681a      	ldr	r2, [r3, #0]
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	43db      	mvns	r3, r3
 801f54c:	4944      	ldr	r1, [pc, #272]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f54e:	4013      	ands	r3, r2
 801f550:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801f552:	4b43      	ldr	r3, [pc, #268]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f554:	685a      	ldr	r2, [r3, #4]
 801f556:	68fb      	ldr	r3, [r7, #12]
 801f558:	43db      	mvns	r3, r3
 801f55a:	4941      	ldr	r1, [pc, #260]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f55c:	4013      	ands	r3, r2
 801f55e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801f560:	4b3f      	ldr	r3, [pc, #252]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f562:	689a      	ldr	r2, [r3, #8]
 801f564:	68fb      	ldr	r3, [r7, #12]
 801f566:	43db      	mvns	r3, r3
 801f568:	493d      	ldr	r1, [pc, #244]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f56a:	4013      	ands	r3, r2
 801f56c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801f56e:	4b3c      	ldr	r3, [pc, #240]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f570:	68da      	ldr	r2, [r3, #12]
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	43db      	mvns	r3, r3
 801f576:	493a      	ldr	r1, [pc, #232]	; (801f660 <HAL_GPIO_DeInit+0x1c4>)
 801f578:	4013      	ands	r3, r2
 801f57a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801f57c:	697b      	ldr	r3, [r7, #20]
 801f57e:	f003 0303 	and.w	r3, r3, #3
 801f582:	009b      	lsls	r3, r3, #2
 801f584:	220f      	movs	r2, #15
 801f586:	fa02 f303 	lsl.w	r3, r2, r3
 801f58a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801f58c:	4a2e      	ldr	r2, [pc, #184]	; (801f648 <HAL_GPIO_DeInit+0x1ac>)
 801f58e:	697b      	ldr	r3, [r7, #20]
 801f590:	089b      	lsrs	r3, r3, #2
 801f592:	3302      	adds	r3, #2
 801f594:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f598:	68bb      	ldr	r3, [r7, #8]
 801f59a:	43da      	mvns	r2, r3
 801f59c:	482a      	ldr	r0, [pc, #168]	; (801f648 <HAL_GPIO_DeInit+0x1ac>)
 801f59e:	697b      	ldr	r3, [r7, #20]
 801f5a0:	089b      	lsrs	r3, r3, #2
 801f5a2:	400a      	ands	r2, r1
 801f5a4:	3302      	adds	r3, #2
 801f5a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	681a      	ldr	r2, [r3, #0]
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	005b      	lsls	r3, r3, #1
 801f5b2:	2103      	movs	r1, #3
 801f5b4:	fa01 f303 	lsl.w	r3, r1, r3
 801f5b8:	43db      	mvns	r3, r3
 801f5ba:	401a      	ands	r2, r3
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801f5c0:	697b      	ldr	r3, [r7, #20]
 801f5c2:	08da      	lsrs	r2, r3, #3
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	3208      	adds	r2, #8
 801f5c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f5cc:	697b      	ldr	r3, [r7, #20]
 801f5ce:	f003 0307 	and.w	r3, r3, #7
 801f5d2:	009b      	lsls	r3, r3, #2
 801f5d4:	220f      	movs	r2, #15
 801f5d6:	fa02 f303 	lsl.w	r3, r2, r3
 801f5da:	43db      	mvns	r3, r3
 801f5dc:	697a      	ldr	r2, [r7, #20]
 801f5de:	08d2      	lsrs	r2, r2, #3
 801f5e0:	4019      	ands	r1, r3
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	3208      	adds	r2, #8
 801f5e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	68da      	ldr	r2, [r3, #12]
 801f5ee:	697b      	ldr	r3, [r7, #20]
 801f5f0:	005b      	lsls	r3, r3, #1
 801f5f2:	2103      	movs	r1, #3
 801f5f4:	fa01 f303 	lsl.w	r3, r1, r3
 801f5f8:	43db      	mvns	r3, r3
 801f5fa:	401a      	ands	r2, r3
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	685a      	ldr	r2, [r3, #4]
 801f604:	2101      	movs	r1, #1
 801f606:	697b      	ldr	r3, [r7, #20]
 801f608:	fa01 f303 	lsl.w	r3, r1, r3
 801f60c:	43db      	mvns	r3, r3
 801f60e:	401a      	ands	r2, r3
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	689a      	ldr	r2, [r3, #8]
 801f618:	697b      	ldr	r3, [r7, #20]
 801f61a:	005b      	lsls	r3, r3, #1
 801f61c:	2103      	movs	r1, #3
 801f61e:	fa01 f303 	lsl.w	r3, r1, r3
 801f622:	43db      	mvns	r3, r3
 801f624:	401a      	ands	r2, r3
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f62a:	697b      	ldr	r3, [r7, #20]
 801f62c:	3301      	adds	r3, #1
 801f62e:	617b      	str	r3, [r7, #20]
 801f630:	697b      	ldr	r3, [r7, #20]
 801f632:	2b0f      	cmp	r3, #15
 801f634:	f67f af40 	bls.w	801f4b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801f638:	bf00      	nop
 801f63a:	bf00      	nop
 801f63c:	371c      	adds	r7, #28
 801f63e:	46bd      	mov	sp, r7
 801f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f644:	4770      	bx	lr
 801f646:	bf00      	nop
 801f648:	40013800 	.word	0x40013800
 801f64c:	40020000 	.word	0x40020000
 801f650:	40020400 	.word	0x40020400
 801f654:	40020800 	.word	0x40020800
 801f658:	40020c00 	.word	0x40020c00
 801f65c:	40021000 	.word	0x40021000
 801f660:	40013c00 	.word	0x40013c00

0801f664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801f664:	b480      	push	{r7}
 801f666:	b085      	sub	sp, #20
 801f668:	af00      	add	r7, sp, #0
 801f66a:	6078      	str	r0, [r7, #4]
 801f66c:	460b      	mov	r3, r1
 801f66e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	691a      	ldr	r2, [r3, #16]
 801f674:	887b      	ldrh	r3, [r7, #2]
 801f676:	4013      	ands	r3, r2
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d002      	beq.n	801f682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801f67c:	2301      	movs	r3, #1
 801f67e:	73fb      	strb	r3, [r7, #15]
 801f680:	e001      	b.n	801f686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801f682:	2300      	movs	r3, #0
 801f684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801f686:	7bfb      	ldrb	r3, [r7, #15]
}
 801f688:	4618      	mov	r0, r3
 801f68a:	3714      	adds	r7, #20
 801f68c:	46bd      	mov	sp, r7
 801f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f692:	4770      	bx	lr

0801f694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801f694:	b480      	push	{r7}
 801f696:	b083      	sub	sp, #12
 801f698:	af00      	add	r7, sp, #0
 801f69a:	6078      	str	r0, [r7, #4]
 801f69c:	460b      	mov	r3, r1
 801f69e:	807b      	strh	r3, [r7, #2]
 801f6a0:	4613      	mov	r3, r2
 801f6a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801f6a4:	787b      	ldrb	r3, [r7, #1]
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	d003      	beq.n	801f6b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801f6aa:	887a      	ldrh	r2, [r7, #2]
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801f6b0:	e003      	b.n	801f6ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801f6b2:	887b      	ldrh	r3, [r7, #2]
 801f6b4:	041a      	lsls	r2, r3, #16
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	619a      	str	r2, [r3, #24]
}
 801f6ba:	bf00      	nop
 801f6bc:	370c      	adds	r7, #12
 801f6be:	46bd      	mov	sp, r7
 801f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6c4:	4770      	bx	lr

0801f6c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801f6c6:	b480      	push	{r7}
 801f6c8:	b083      	sub	sp, #12
 801f6ca:	af00      	add	r7, sp, #0
 801f6cc:	6078      	str	r0, [r7, #4]
 801f6ce:	460b      	mov	r3, r1
 801f6d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	695a      	ldr	r2, [r3, #20]
 801f6d6:	887b      	ldrh	r3, [r7, #2]
 801f6d8:	401a      	ands	r2, r3
 801f6da:	887b      	ldrh	r3, [r7, #2]
 801f6dc:	429a      	cmp	r2, r3
 801f6de:	d104      	bne.n	801f6ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801f6e0:	887b      	ldrh	r3, [r7, #2]
 801f6e2:	041a      	lsls	r2, r3, #16
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 801f6e8:	e002      	b.n	801f6f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 801f6ea:	887a      	ldrh	r2, [r7, #2]
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	619a      	str	r2, [r3, #24]
}
 801f6f0:	bf00      	nop
 801f6f2:	370c      	adds	r7, #12
 801f6f4:	46bd      	mov	sp, r7
 801f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6fa:	4770      	bx	lr

0801f6fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f6fc:	b580      	push	{r7, lr}
 801f6fe:	b086      	sub	sp, #24
 801f700:	af00      	add	r7, sp, #0
 801f702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d101      	bne.n	801f70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f70a:	2301      	movs	r3, #1
 801f70c:	e25e      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	681b      	ldr	r3, [r3, #0]
 801f712:	f003 0301 	and.w	r3, r3, #1
 801f716:	2b00      	cmp	r3, #0
 801f718:	d075      	beq.n	801f806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f71a:	4b88      	ldr	r3, [pc, #544]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f71c:	689b      	ldr	r3, [r3, #8]
 801f71e:	f003 030c 	and.w	r3, r3, #12
 801f722:	2b04      	cmp	r3, #4
 801f724:	d00c      	beq.n	801f740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f726:	4b85      	ldr	r3, [pc, #532]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f728:	689b      	ldr	r3, [r3, #8]
 801f72a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f72e:	2b08      	cmp	r3, #8
 801f730:	d112      	bne.n	801f758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f732:	4b82      	ldr	r3, [pc, #520]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f734:	685b      	ldr	r3, [r3, #4]
 801f736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f73a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f73e:	d10b      	bne.n	801f758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f740:	4b7e      	ldr	r3, [pc, #504]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d05b      	beq.n	801f804 <HAL_RCC_OscConfig+0x108>
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	685b      	ldr	r3, [r3, #4]
 801f750:	2b00      	cmp	r3, #0
 801f752:	d157      	bne.n	801f804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f754:	2301      	movs	r3, #1
 801f756:	e239      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	685b      	ldr	r3, [r3, #4]
 801f75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f760:	d106      	bne.n	801f770 <HAL_RCC_OscConfig+0x74>
 801f762:	4b76      	ldr	r3, [pc, #472]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	4a75      	ldr	r2, [pc, #468]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f76c:	6013      	str	r3, [r2, #0]
 801f76e:	e01d      	b.n	801f7ac <HAL_RCC_OscConfig+0xb0>
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	685b      	ldr	r3, [r3, #4]
 801f774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f778:	d10c      	bne.n	801f794 <HAL_RCC_OscConfig+0x98>
 801f77a:	4b70      	ldr	r3, [pc, #448]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	4a6f      	ldr	r2, [pc, #444]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f784:	6013      	str	r3, [r2, #0]
 801f786:	4b6d      	ldr	r3, [pc, #436]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f788:	681b      	ldr	r3, [r3, #0]
 801f78a:	4a6c      	ldr	r2, [pc, #432]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f78c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f790:	6013      	str	r3, [r2, #0]
 801f792:	e00b      	b.n	801f7ac <HAL_RCC_OscConfig+0xb0>
 801f794:	4b69      	ldr	r3, [pc, #420]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f796:	681b      	ldr	r3, [r3, #0]
 801f798:	4a68      	ldr	r2, [pc, #416]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f79a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f79e:	6013      	str	r3, [r2, #0]
 801f7a0:	4b66      	ldr	r3, [pc, #408]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	4a65      	ldr	r2, [pc, #404]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f7a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f7aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	685b      	ldr	r3, [r3, #4]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d013      	beq.n	801f7dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f7b4:	f7fd ff5c 	bl	801d670 <HAL_GetTick>
 801f7b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f7ba:	e008      	b.n	801f7ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f7bc:	f7fd ff58 	bl	801d670 <HAL_GetTick>
 801f7c0:	4602      	mov	r2, r0
 801f7c2:	693b      	ldr	r3, [r7, #16]
 801f7c4:	1ad3      	subs	r3, r2, r3
 801f7c6:	2b64      	cmp	r3, #100	; 0x64
 801f7c8:	d901      	bls.n	801f7ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f7ca:	2303      	movs	r3, #3
 801f7cc:	e1fe      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f7ce:	4b5b      	ldr	r3, [pc, #364]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d0f0      	beq.n	801f7bc <HAL_RCC_OscConfig+0xc0>
 801f7da:	e014      	b.n	801f806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f7dc:	f7fd ff48 	bl	801d670 <HAL_GetTick>
 801f7e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f7e2:	e008      	b.n	801f7f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f7e4:	f7fd ff44 	bl	801d670 <HAL_GetTick>
 801f7e8:	4602      	mov	r2, r0
 801f7ea:	693b      	ldr	r3, [r7, #16]
 801f7ec:	1ad3      	subs	r3, r2, r3
 801f7ee:	2b64      	cmp	r3, #100	; 0x64
 801f7f0:	d901      	bls.n	801f7f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f7f2:	2303      	movs	r3, #3
 801f7f4:	e1ea      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f7f6:	4b51      	ldr	r3, [pc, #324]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f7f8:	681b      	ldr	r3, [r3, #0]
 801f7fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d1f0      	bne.n	801f7e4 <HAL_RCC_OscConfig+0xe8>
 801f802:	e000      	b.n	801f806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	f003 0302 	and.w	r3, r3, #2
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d063      	beq.n	801f8da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f812:	4b4a      	ldr	r3, [pc, #296]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f814:	689b      	ldr	r3, [r3, #8]
 801f816:	f003 030c 	and.w	r3, r3, #12
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d00b      	beq.n	801f836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f81e:	4b47      	ldr	r3, [pc, #284]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f820:	689b      	ldr	r3, [r3, #8]
 801f822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f826:	2b08      	cmp	r3, #8
 801f828:	d11c      	bne.n	801f864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f82a:	4b44      	ldr	r3, [pc, #272]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f82c:	685b      	ldr	r3, [r3, #4]
 801f82e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f832:	2b00      	cmp	r3, #0
 801f834:	d116      	bne.n	801f864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f836:	4b41      	ldr	r3, [pc, #260]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	f003 0302 	and.w	r3, r3, #2
 801f83e:	2b00      	cmp	r3, #0
 801f840:	d005      	beq.n	801f84e <HAL_RCC_OscConfig+0x152>
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	68db      	ldr	r3, [r3, #12]
 801f846:	2b01      	cmp	r3, #1
 801f848:	d001      	beq.n	801f84e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f84a:	2301      	movs	r3, #1
 801f84c:	e1be      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f84e:	4b3b      	ldr	r3, [pc, #236]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f850:	681b      	ldr	r3, [r3, #0]
 801f852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	691b      	ldr	r3, [r3, #16]
 801f85a:	00db      	lsls	r3, r3, #3
 801f85c:	4937      	ldr	r1, [pc, #220]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f85e:	4313      	orrs	r3, r2
 801f860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f862:	e03a      	b.n	801f8da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f864:	687b      	ldr	r3, [r7, #4]
 801f866:	68db      	ldr	r3, [r3, #12]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d020      	beq.n	801f8ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f86c:	4b34      	ldr	r3, [pc, #208]	; (801f940 <HAL_RCC_OscConfig+0x244>)
 801f86e:	2201      	movs	r2, #1
 801f870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f872:	f7fd fefd 	bl	801d670 <HAL_GetTick>
 801f876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f878:	e008      	b.n	801f88c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f87a:	f7fd fef9 	bl	801d670 <HAL_GetTick>
 801f87e:	4602      	mov	r2, r0
 801f880:	693b      	ldr	r3, [r7, #16]
 801f882:	1ad3      	subs	r3, r2, r3
 801f884:	2b02      	cmp	r3, #2
 801f886:	d901      	bls.n	801f88c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f888:	2303      	movs	r3, #3
 801f88a:	e19f      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f88c:	4b2b      	ldr	r3, [pc, #172]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	f003 0302 	and.w	r3, r3, #2
 801f894:	2b00      	cmp	r3, #0
 801f896:	d0f0      	beq.n	801f87a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f898:	4b28      	ldr	r3, [pc, #160]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f89a:	681b      	ldr	r3, [r3, #0]
 801f89c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f8a0:	687b      	ldr	r3, [r7, #4]
 801f8a2:	691b      	ldr	r3, [r3, #16]
 801f8a4:	00db      	lsls	r3, r3, #3
 801f8a6:	4925      	ldr	r1, [pc, #148]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f8a8:	4313      	orrs	r3, r2
 801f8aa:	600b      	str	r3, [r1, #0]
 801f8ac:	e015      	b.n	801f8da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f8ae:	4b24      	ldr	r3, [pc, #144]	; (801f940 <HAL_RCC_OscConfig+0x244>)
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f8b4:	f7fd fedc 	bl	801d670 <HAL_GetTick>
 801f8b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f8ba:	e008      	b.n	801f8ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f8bc:	f7fd fed8 	bl	801d670 <HAL_GetTick>
 801f8c0:	4602      	mov	r2, r0
 801f8c2:	693b      	ldr	r3, [r7, #16]
 801f8c4:	1ad3      	subs	r3, r2, r3
 801f8c6:	2b02      	cmp	r3, #2
 801f8c8:	d901      	bls.n	801f8ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f8ca:	2303      	movs	r3, #3
 801f8cc:	e17e      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f8ce:	4b1b      	ldr	r3, [pc, #108]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	f003 0302 	and.w	r3, r3, #2
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	d1f0      	bne.n	801f8bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	681b      	ldr	r3, [r3, #0]
 801f8de:	f003 0308 	and.w	r3, r3, #8
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d036      	beq.n	801f954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	695b      	ldr	r3, [r3, #20]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d016      	beq.n	801f91c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f8ee:	4b15      	ldr	r3, [pc, #84]	; (801f944 <HAL_RCC_OscConfig+0x248>)
 801f8f0:	2201      	movs	r2, #1
 801f8f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f8f4:	f7fd febc 	bl	801d670 <HAL_GetTick>
 801f8f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f8fa:	e008      	b.n	801f90e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f8fc:	f7fd feb8 	bl	801d670 <HAL_GetTick>
 801f900:	4602      	mov	r2, r0
 801f902:	693b      	ldr	r3, [r7, #16]
 801f904:	1ad3      	subs	r3, r2, r3
 801f906:	2b02      	cmp	r3, #2
 801f908:	d901      	bls.n	801f90e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f90a:	2303      	movs	r3, #3
 801f90c:	e15e      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f90e:	4b0b      	ldr	r3, [pc, #44]	; (801f93c <HAL_RCC_OscConfig+0x240>)
 801f910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f912:	f003 0302 	and.w	r3, r3, #2
 801f916:	2b00      	cmp	r3, #0
 801f918:	d0f0      	beq.n	801f8fc <HAL_RCC_OscConfig+0x200>
 801f91a:	e01b      	b.n	801f954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f91c:	4b09      	ldr	r3, [pc, #36]	; (801f944 <HAL_RCC_OscConfig+0x248>)
 801f91e:	2200      	movs	r2, #0
 801f920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f922:	f7fd fea5 	bl	801d670 <HAL_GetTick>
 801f926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f928:	e00e      	b.n	801f948 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f92a:	f7fd fea1 	bl	801d670 <HAL_GetTick>
 801f92e:	4602      	mov	r2, r0
 801f930:	693b      	ldr	r3, [r7, #16]
 801f932:	1ad3      	subs	r3, r2, r3
 801f934:	2b02      	cmp	r3, #2
 801f936:	d907      	bls.n	801f948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801f938:	2303      	movs	r3, #3
 801f93a:	e147      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
 801f93c:	40023800 	.word	0x40023800
 801f940:	42470000 	.word	0x42470000
 801f944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f948:	4b88      	ldr	r3, [pc, #544]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f94c:	f003 0302 	and.w	r3, r3, #2
 801f950:	2b00      	cmp	r3, #0
 801f952:	d1ea      	bne.n	801f92a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	f003 0304 	and.w	r3, r3, #4
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	f000 8097 	beq.w	801fa90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f962:	2300      	movs	r3, #0
 801f964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f966:	4b81      	ldr	r3, [pc, #516]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f96a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d10f      	bne.n	801f992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f972:	2300      	movs	r3, #0
 801f974:	60bb      	str	r3, [r7, #8]
 801f976:	4b7d      	ldr	r3, [pc, #500]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f97a:	4a7c      	ldr	r2, [pc, #496]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f97c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f980:	6413      	str	r3, [r2, #64]	; 0x40
 801f982:	4b7a      	ldr	r3, [pc, #488]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f98a:	60bb      	str	r3, [r7, #8]
 801f98c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f98e:	2301      	movs	r3, #1
 801f990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f992:	4b77      	ldr	r3, [pc, #476]	; (801fb70 <HAL_RCC_OscConfig+0x474>)
 801f994:	681b      	ldr	r3, [r3, #0]
 801f996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f99a:	2b00      	cmp	r3, #0
 801f99c:	d118      	bne.n	801f9d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f99e:	4b74      	ldr	r3, [pc, #464]	; (801fb70 <HAL_RCC_OscConfig+0x474>)
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	4a73      	ldr	r2, [pc, #460]	; (801fb70 <HAL_RCC_OscConfig+0x474>)
 801f9a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f9a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f9aa:	f7fd fe61 	bl	801d670 <HAL_GetTick>
 801f9ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f9b0:	e008      	b.n	801f9c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f9b2:	f7fd fe5d 	bl	801d670 <HAL_GetTick>
 801f9b6:	4602      	mov	r2, r0
 801f9b8:	693b      	ldr	r3, [r7, #16]
 801f9ba:	1ad3      	subs	r3, r2, r3
 801f9bc:	2b02      	cmp	r3, #2
 801f9be:	d901      	bls.n	801f9c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801f9c0:	2303      	movs	r3, #3
 801f9c2:	e103      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f9c4:	4b6a      	ldr	r3, [pc, #424]	; (801fb70 <HAL_RCC_OscConfig+0x474>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d0f0      	beq.n	801f9b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	689b      	ldr	r3, [r3, #8]
 801f9d4:	2b01      	cmp	r3, #1
 801f9d6:	d106      	bne.n	801f9e6 <HAL_RCC_OscConfig+0x2ea>
 801f9d8:	4b64      	ldr	r3, [pc, #400]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9dc:	4a63      	ldr	r2, [pc, #396]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f9de:	f043 0301 	orr.w	r3, r3, #1
 801f9e2:	6713      	str	r3, [r2, #112]	; 0x70
 801f9e4:	e01c      	b.n	801fa20 <HAL_RCC_OscConfig+0x324>
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	689b      	ldr	r3, [r3, #8]
 801f9ea:	2b05      	cmp	r3, #5
 801f9ec:	d10c      	bne.n	801fa08 <HAL_RCC_OscConfig+0x30c>
 801f9ee:	4b5f      	ldr	r3, [pc, #380]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9f2:	4a5e      	ldr	r2, [pc, #376]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f9f4:	f043 0304 	orr.w	r3, r3, #4
 801f9f8:	6713      	str	r3, [r2, #112]	; 0x70
 801f9fa:	4b5c      	ldr	r3, [pc, #368]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801f9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9fe:	4a5b      	ldr	r2, [pc, #364]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa00:	f043 0301 	orr.w	r3, r3, #1
 801fa04:	6713      	str	r3, [r2, #112]	; 0x70
 801fa06:	e00b      	b.n	801fa20 <HAL_RCC_OscConfig+0x324>
 801fa08:	4b58      	ldr	r3, [pc, #352]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa0c:	4a57      	ldr	r2, [pc, #348]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa0e:	f023 0301 	bic.w	r3, r3, #1
 801fa12:	6713      	str	r3, [r2, #112]	; 0x70
 801fa14:	4b55      	ldr	r3, [pc, #340]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa18:	4a54      	ldr	r2, [pc, #336]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa1a:	f023 0304 	bic.w	r3, r3, #4
 801fa1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801fa20:	687b      	ldr	r3, [r7, #4]
 801fa22:	689b      	ldr	r3, [r3, #8]
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	d015      	beq.n	801fa54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801fa28:	f7fd fe22 	bl	801d670 <HAL_GetTick>
 801fa2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fa2e:	e00a      	b.n	801fa46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801fa30:	f7fd fe1e 	bl	801d670 <HAL_GetTick>
 801fa34:	4602      	mov	r2, r0
 801fa36:	693b      	ldr	r3, [r7, #16]
 801fa38:	1ad3      	subs	r3, r2, r3
 801fa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 801fa3e:	4293      	cmp	r3, r2
 801fa40:	d901      	bls.n	801fa46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801fa42:	2303      	movs	r3, #3
 801fa44:	e0c2      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fa46:	4b49      	ldr	r3, [pc, #292]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa4a:	f003 0302 	and.w	r3, r3, #2
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d0ee      	beq.n	801fa30 <HAL_RCC_OscConfig+0x334>
 801fa52:	e014      	b.n	801fa7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801fa54:	f7fd fe0c 	bl	801d670 <HAL_GetTick>
 801fa58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801fa5a:	e00a      	b.n	801fa72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801fa5c:	f7fd fe08 	bl	801d670 <HAL_GetTick>
 801fa60:	4602      	mov	r2, r0
 801fa62:	693b      	ldr	r3, [r7, #16]
 801fa64:	1ad3      	subs	r3, r2, r3
 801fa66:	f241 3288 	movw	r2, #5000	; 0x1388
 801fa6a:	4293      	cmp	r3, r2
 801fa6c:	d901      	bls.n	801fa72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801fa6e:	2303      	movs	r3, #3
 801fa70:	e0ac      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801fa72:	4b3e      	ldr	r3, [pc, #248]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa76:	f003 0302 	and.w	r3, r3, #2
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d1ee      	bne.n	801fa5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801fa7e:	7dfb      	ldrb	r3, [r7, #23]
 801fa80:	2b01      	cmp	r3, #1
 801fa82:	d105      	bne.n	801fa90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801fa84:	4b39      	ldr	r3, [pc, #228]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa88:	4a38      	ldr	r2, [pc, #224]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801fa8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	699b      	ldr	r3, [r3, #24]
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	f000 8098 	beq.w	801fbca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801fa9a:	4b34      	ldr	r3, [pc, #208]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fa9c:	689b      	ldr	r3, [r3, #8]
 801fa9e:	f003 030c 	and.w	r3, r3, #12
 801faa2:	2b08      	cmp	r3, #8
 801faa4:	d05c      	beq.n	801fb60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	699b      	ldr	r3, [r3, #24]
 801faaa:	2b02      	cmp	r3, #2
 801faac:	d141      	bne.n	801fb32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801faae:	4b31      	ldr	r3, [pc, #196]	; (801fb74 <HAL_RCC_OscConfig+0x478>)
 801fab0:	2200      	movs	r2, #0
 801fab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fab4:	f7fd fddc 	bl	801d670 <HAL_GetTick>
 801fab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801faba:	e008      	b.n	801face <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fabc:	f7fd fdd8 	bl	801d670 <HAL_GetTick>
 801fac0:	4602      	mov	r2, r0
 801fac2:	693b      	ldr	r3, [r7, #16]
 801fac4:	1ad3      	subs	r3, r2, r3
 801fac6:	2b02      	cmp	r3, #2
 801fac8:	d901      	bls.n	801face <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801faca:	2303      	movs	r3, #3
 801facc:	e07e      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801face:	4b27      	ldr	r3, [pc, #156]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d1f0      	bne.n	801fabc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	69da      	ldr	r2, [r3, #28]
 801fade:	687b      	ldr	r3, [r7, #4]
 801fae0:	6a1b      	ldr	r3, [r3, #32]
 801fae2:	431a      	orrs	r2, r3
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fae8:	019b      	lsls	r3, r3, #6
 801faea:	431a      	orrs	r2, r3
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801faf0:	085b      	lsrs	r3, r3, #1
 801faf2:	3b01      	subs	r3, #1
 801faf4:	041b      	lsls	r3, r3, #16
 801faf6:	431a      	orrs	r2, r3
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fafc:	061b      	lsls	r3, r3, #24
 801fafe:	491b      	ldr	r1, [pc, #108]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fb00:	4313      	orrs	r3, r2
 801fb02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801fb04:	4b1b      	ldr	r3, [pc, #108]	; (801fb74 <HAL_RCC_OscConfig+0x478>)
 801fb06:	2201      	movs	r2, #1
 801fb08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fb0a:	f7fd fdb1 	bl	801d670 <HAL_GetTick>
 801fb0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fb10:	e008      	b.n	801fb24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fb12:	f7fd fdad 	bl	801d670 <HAL_GetTick>
 801fb16:	4602      	mov	r2, r0
 801fb18:	693b      	ldr	r3, [r7, #16]
 801fb1a:	1ad3      	subs	r3, r2, r3
 801fb1c:	2b02      	cmp	r3, #2
 801fb1e:	d901      	bls.n	801fb24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801fb20:	2303      	movs	r3, #3
 801fb22:	e053      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fb24:	4b11      	ldr	r3, [pc, #68]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d0f0      	beq.n	801fb12 <HAL_RCC_OscConfig+0x416>
 801fb30:	e04b      	b.n	801fbca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801fb32:	4b10      	ldr	r3, [pc, #64]	; (801fb74 <HAL_RCC_OscConfig+0x478>)
 801fb34:	2200      	movs	r2, #0
 801fb36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fb38:	f7fd fd9a 	bl	801d670 <HAL_GetTick>
 801fb3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801fb3e:	e008      	b.n	801fb52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fb40:	f7fd fd96 	bl	801d670 <HAL_GetTick>
 801fb44:	4602      	mov	r2, r0
 801fb46:	693b      	ldr	r3, [r7, #16]
 801fb48:	1ad3      	subs	r3, r2, r3
 801fb4a:	2b02      	cmp	r3, #2
 801fb4c:	d901      	bls.n	801fb52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801fb4e:	2303      	movs	r3, #3
 801fb50:	e03c      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801fb52:	4b06      	ldr	r3, [pc, #24]	; (801fb6c <HAL_RCC_OscConfig+0x470>)
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d1f0      	bne.n	801fb40 <HAL_RCC_OscConfig+0x444>
 801fb5e:	e034      	b.n	801fbca <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	699b      	ldr	r3, [r3, #24]
 801fb64:	2b01      	cmp	r3, #1
 801fb66:	d107      	bne.n	801fb78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801fb68:	2301      	movs	r3, #1
 801fb6a:	e02f      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
 801fb6c:	40023800 	.word	0x40023800
 801fb70:	40007000 	.word	0x40007000
 801fb74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801fb78:	4b16      	ldr	r3, [pc, #88]	; (801fbd4 <HAL_RCC_OscConfig+0x4d8>)
 801fb7a:	685b      	ldr	r3, [r3, #4]
 801fb7c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801fb7e:	68fb      	ldr	r3, [r7, #12]
 801fb80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	69db      	ldr	r3, [r3, #28]
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	d11c      	bne.n	801fbc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801fb96:	429a      	cmp	r2, r3
 801fb98:	d115      	bne.n	801fbc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801fb9a:	68fa      	ldr	r2, [r7, #12]
 801fb9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801fba0:	4013      	ands	r3, r2
 801fba2:	687a      	ldr	r2, [r7, #4]
 801fba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801fba6:	4293      	cmp	r3, r2
 801fba8:	d10d      	bne.n	801fbc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801fbaa:	68fb      	ldr	r3, [r7, #12]
 801fbac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801fbb4:	429a      	cmp	r2, r3
 801fbb6:	d106      	bne.n	801fbc6 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801fbc2:	429a      	cmp	r2, r3
 801fbc4:	d001      	beq.n	801fbca <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 801fbc6:	2301      	movs	r3, #1
 801fbc8:	e000      	b.n	801fbcc <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 801fbca:	2300      	movs	r3, #0
}
 801fbcc:	4618      	mov	r0, r3
 801fbce:	3718      	adds	r7, #24
 801fbd0:	46bd      	mov	sp, r7
 801fbd2:	bd80      	pop	{r7, pc}
 801fbd4:	40023800 	.word	0x40023800

0801fbd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801fbd8:	b580      	push	{r7, lr}
 801fbda:	b084      	sub	sp, #16
 801fbdc:	af00      	add	r7, sp, #0
 801fbde:	6078      	str	r0, [r7, #4]
 801fbe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d101      	bne.n	801fbec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801fbe8:	2301      	movs	r3, #1
 801fbea:	e0cc      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801fbec:	4b68      	ldr	r3, [pc, #416]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	f003 030f 	and.w	r3, r3, #15
 801fbf4:	683a      	ldr	r2, [r7, #0]
 801fbf6:	429a      	cmp	r2, r3
 801fbf8:	d90c      	bls.n	801fc14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fbfa:	4b65      	ldr	r3, [pc, #404]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fbfc:	683a      	ldr	r2, [r7, #0]
 801fbfe:	b2d2      	uxtb	r2, r2
 801fc00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fc02:	4b63      	ldr	r3, [pc, #396]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	f003 030f 	and.w	r3, r3, #15
 801fc0a:	683a      	ldr	r2, [r7, #0]
 801fc0c:	429a      	cmp	r2, r3
 801fc0e:	d001      	beq.n	801fc14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801fc10:	2301      	movs	r3, #1
 801fc12:	e0b8      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801fc14:	687b      	ldr	r3, [r7, #4]
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	f003 0302 	and.w	r3, r3, #2
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d020      	beq.n	801fc62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fc20:	687b      	ldr	r3, [r7, #4]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	f003 0304 	and.w	r3, r3, #4
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d005      	beq.n	801fc38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801fc2c:	4b59      	ldr	r3, [pc, #356]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc2e:	689b      	ldr	r3, [r3, #8]
 801fc30:	4a58      	ldr	r2, [pc, #352]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801fc36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	f003 0308 	and.w	r3, r3, #8
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d005      	beq.n	801fc50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801fc44:	4b53      	ldr	r3, [pc, #332]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc46:	689b      	ldr	r3, [r3, #8]
 801fc48:	4a52      	ldr	r2, [pc, #328]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801fc4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801fc50:	4b50      	ldr	r3, [pc, #320]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc52:	689b      	ldr	r3, [r3, #8]
 801fc54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	689b      	ldr	r3, [r3, #8]
 801fc5c:	494d      	ldr	r1, [pc, #308]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc5e:	4313      	orrs	r3, r2
 801fc60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	681b      	ldr	r3, [r3, #0]
 801fc66:	f003 0301 	and.w	r3, r3, #1
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	d044      	beq.n	801fcf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	685b      	ldr	r3, [r3, #4]
 801fc72:	2b01      	cmp	r3, #1
 801fc74:	d107      	bne.n	801fc86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fc76:	4b47      	ldr	r3, [pc, #284]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc78:	681b      	ldr	r3, [r3, #0]
 801fc7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d119      	bne.n	801fcb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fc82:	2301      	movs	r3, #1
 801fc84:	e07f      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	685b      	ldr	r3, [r3, #4]
 801fc8a:	2b02      	cmp	r3, #2
 801fc8c:	d003      	beq.n	801fc96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801fc92:	2b03      	cmp	r3, #3
 801fc94:	d107      	bne.n	801fca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fc96:	4b3f      	ldr	r3, [pc, #252]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fc98:	681b      	ldr	r3, [r3, #0]
 801fc9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d109      	bne.n	801fcb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fca2:	2301      	movs	r3, #1
 801fca4:	e06f      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fca6:	4b3b      	ldr	r3, [pc, #236]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	f003 0302 	and.w	r3, r3, #2
 801fcae:	2b00      	cmp	r3, #0
 801fcb0:	d101      	bne.n	801fcb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fcb2:	2301      	movs	r3, #1
 801fcb4:	e067      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801fcb6:	4b37      	ldr	r3, [pc, #220]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fcb8:	689b      	ldr	r3, [r3, #8]
 801fcba:	f023 0203 	bic.w	r2, r3, #3
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	685b      	ldr	r3, [r3, #4]
 801fcc2:	4934      	ldr	r1, [pc, #208]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fcc4:	4313      	orrs	r3, r2
 801fcc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801fcc8:	f7fd fcd2 	bl	801d670 <HAL_GetTick>
 801fccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fcce:	e00a      	b.n	801fce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801fcd0:	f7fd fcce 	bl	801d670 <HAL_GetTick>
 801fcd4:	4602      	mov	r2, r0
 801fcd6:	68fb      	ldr	r3, [r7, #12]
 801fcd8:	1ad3      	subs	r3, r2, r3
 801fcda:	f241 3288 	movw	r2, #5000	; 0x1388
 801fcde:	4293      	cmp	r3, r2
 801fce0:	d901      	bls.n	801fce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801fce2:	2303      	movs	r3, #3
 801fce4:	e04f      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fce6:	4b2b      	ldr	r3, [pc, #172]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fce8:	689b      	ldr	r3, [r3, #8]
 801fcea:	f003 020c 	and.w	r2, r3, #12
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	685b      	ldr	r3, [r3, #4]
 801fcf2:	009b      	lsls	r3, r3, #2
 801fcf4:	429a      	cmp	r2, r3
 801fcf6:	d1eb      	bne.n	801fcd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801fcf8:	4b25      	ldr	r3, [pc, #148]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fcfa:	681b      	ldr	r3, [r3, #0]
 801fcfc:	f003 030f 	and.w	r3, r3, #15
 801fd00:	683a      	ldr	r2, [r7, #0]
 801fd02:	429a      	cmp	r2, r3
 801fd04:	d20c      	bcs.n	801fd20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fd06:	4b22      	ldr	r3, [pc, #136]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fd08:	683a      	ldr	r2, [r7, #0]
 801fd0a:	b2d2      	uxtb	r2, r2
 801fd0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fd0e:	4b20      	ldr	r3, [pc, #128]	; (801fd90 <HAL_RCC_ClockConfig+0x1b8>)
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	f003 030f 	and.w	r3, r3, #15
 801fd16:	683a      	ldr	r2, [r7, #0]
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	d001      	beq.n	801fd20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fd1c:	2301      	movs	r3, #1
 801fd1e:	e032      	b.n	801fd86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	f003 0304 	and.w	r3, r3, #4
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d008      	beq.n	801fd3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fd2c:	4b19      	ldr	r3, [pc, #100]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fd2e:	689b      	ldr	r3, [r3, #8]
 801fd30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	68db      	ldr	r3, [r3, #12]
 801fd38:	4916      	ldr	r1, [pc, #88]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fd3a:	4313      	orrs	r3, r2
 801fd3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	f003 0308 	and.w	r3, r3, #8
 801fd46:	2b00      	cmp	r3, #0
 801fd48:	d009      	beq.n	801fd5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801fd4a:	4b12      	ldr	r3, [pc, #72]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fd4c:	689b      	ldr	r3, [r3, #8]
 801fd4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	691b      	ldr	r3, [r3, #16]
 801fd56:	00db      	lsls	r3, r3, #3
 801fd58:	490e      	ldr	r1, [pc, #56]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fd5a:	4313      	orrs	r3, r2
 801fd5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fd5e:	f000 f821 	bl	801fda4 <HAL_RCC_GetSysClockFreq>
 801fd62:	4602      	mov	r2, r0
 801fd64:	4b0b      	ldr	r3, [pc, #44]	; (801fd94 <HAL_RCC_ClockConfig+0x1bc>)
 801fd66:	689b      	ldr	r3, [r3, #8]
 801fd68:	091b      	lsrs	r3, r3, #4
 801fd6a:	f003 030f 	and.w	r3, r3, #15
 801fd6e:	490a      	ldr	r1, [pc, #40]	; (801fd98 <HAL_RCC_ClockConfig+0x1c0>)
 801fd70:	5ccb      	ldrb	r3, [r1, r3]
 801fd72:	fa22 f303 	lsr.w	r3, r2, r3
 801fd76:	4a09      	ldr	r2, [pc, #36]	; (801fd9c <HAL_RCC_ClockConfig+0x1c4>)
 801fd78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801fd7a:	4b09      	ldr	r3, [pc, #36]	; (801fda0 <HAL_RCC_ClockConfig+0x1c8>)
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	4618      	mov	r0, r3
 801fd80:	f7fd fc32 	bl	801d5e8 <HAL_InitTick>

  return HAL_OK;
 801fd84:	2300      	movs	r3, #0
}
 801fd86:	4618      	mov	r0, r3
 801fd88:	3710      	adds	r7, #16
 801fd8a:	46bd      	mov	sp, r7
 801fd8c:	bd80      	pop	{r7, pc}
 801fd8e:	bf00      	nop
 801fd90:	40023c00 	.word	0x40023c00
 801fd94:	40023800 	.word	0x40023800
 801fd98:	08029d28 	.word	0x08029d28
 801fd9c:	20000000 	.word	0x20000000
 801fda0:	200000d8 	.word	0x200000d8

0801fda4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801fda4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fda8:	b090      	sub	sp, #64	; 0x40
 801fdaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fdac:	2300      	movs	r3, #0
 801fdae:	637b      	str	r3, [r7, #52]	; 0x34
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fdb4:	2300      	movs	r3, #0
 801fdb6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 801fdb8:	2300      	movs	r3, #0
 801fdba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801fdbc:	4b59      	ldr	r3, [pc, #356]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fdbe:	689b      	ldr	r3, [r3, #8]
 801fdc0:	f003 030c 	and.w	r3, r3, #12
 801fdc4:	2b08      	cmp	r3, #8
 801fdc6:	d00d      	beq.n	801fde4 <HAL_RCC_GetSysClockFreq+0x40>
 801fdc8:	2b08      	cmp	r3, #8
 801fdca:	f200 80a1 	bhi.w	801ff10 <HAL_RCC_GetSysClockFreq+0x16c>
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d002      	beq.n	801fdd8 <HAL_RCC_GetSysClockFreq+0x34>
 801fdd2:	2b04      	cmp	r3, #4
 801fdd4:	d003      	beq.n	801fdde <HAL_RCC_GetSysClockFreq+0x3a>
 801fdd6:	e09b      	b.n	801ff10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801fdd8:	4b53      	ldr	r3, [pc, #332]	; (801ff28 <HAL_RCC_GetSysClockFreq+0x184>)
 801fdda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 801fddc:	e09b      	b.n	801ff16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fdde:	4b53      	ldr	r3, [pc, #332]	; (801ff2c <HAL_RCC_GetSysClockFreq+0x188>)
 801fde0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801fde2:	e098      	b.n	801ff16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801fde4:	4b4f      	ldr	r3, [pc, #316]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fde6:	685b      	ldr	r3, [r3, #4]
 801fde8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fdec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fdee:	4b4d      	ldr	r3, [pc, #308]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fdf0:	685b      	ldr	r3, [r3, #4]
 801fdf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d028      	beq.n	801fe4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fdfa:	4b4a      	ldr	r3, [pc, #296]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fdfc:	685b      	ldr	r3, [r3, #4]
 801fdfe:	099b      	lsrs	r3, r3, #6
 801fe00:	2200      	movs	r2, #0
 801fe02:	623b      	str	r3, [r7, #32]
 801fe04:	627a      	str	r2, [r7, #36]	; 0x24
 801fe06:	6a3b      	ldr	r3, [r7, #32]
 801fe08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801fe0c:	2100      	movs	r1, #0
 801fe0e:	4b47      	ldr	r3, [pc, #284]	; (801ff2c <HAL_RCC_GetSysClockFreq+0x188>)
 801fe10:	fb03 f201 	mul.w	r2, r3, r1
 801fe14:	2300      	movs	r3, #0
 801fe16:	fb00 f303 	mul.w	r3, r0, r3
 801fe1a:	4413      	add	r3, r2
 801fe1c:	4a43      	ldr	r2, [pc, #268]	; (801ff2c <HAL_RCC_GetSysClockFreq+0x188>)
 801fe1e:	fba0 1202 	umull	r1, r2, r0, r2
 801fe22:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fe24:	460a      	mov	r2, r1
 801fe26:	62ba      	str	r2, [r7, #40]	; 0x28
 801fe28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fe2a:	4413      	add	r3, r2
 801fe2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fe2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fe30:	2200      	movs	r2, #0
 801fe32:	61bb      	str	r3, [r7, #24]
 801fe34:	61fa      	str	r2, [r7, #28]
 801fe36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fe3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801fe3e:	f7f1 fa8b 	bl	8011358 <__aeabi_uldivmod>
 801fe42:	4602      	mov	r2, r0
 801fe44:	460b      	mov	r3, r1
 801fe46:	4613      	mov	r3, r2
 801fe48:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fe4a:	e053      	b.n	801fef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fe4c:	4b35      	ldr	r3, [pc, #212]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fe4e:	685b      	ldr	r3, [r3, #4]
 801fe50:	099b      	lsrs	r3, r3, #6
 801fe52:	2200      	movs	r2, #0
 801fe54:	613b      	str	r3, [r7, #16]
 801fe56:	617a      	str	r2, [r7, #20]
 801fe58:	693b      	ldr	r3, [r7, #16]
 801fe5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801fe5e:	f04f 0b00 	mov.w	fp, #0
 801fe62:	4652      	mov	r2, sl
 801fe64:	465b      	mov	r3, fp
 801fe66:	f04f 0000 	mov.w	r0, #0
 801fe6a:	f04f 0100 	mov.w	r1, #0
 801fe6e:	0159      	lsls	r1, r3, #5
 801fe70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801fe74:	0150      	lsls	r0, r2, #5
 801fe76:	4602      	mov	r2, r0
 801fe78:	460b      	mov	r3, r1
 801fe7a:	ebb2 080a 	subs.w	r8, r2, sl
 801fe7e:	eb63 090b 	sbc.w	r9, r3, fp
 801fe82:	f04f 0200 	mov.w	r2, #0
 801fe86:	f04f 0300 	mov.w	r3, #0
 801fe8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801fe8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801fe92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801fe96:	ebb2 0408 	subs.w	r4, r2, r8
 801fe9a:	eb63 0509 	sbc.w	r5, r3, r9
 801fe9e:	f04f 0200 	mov.w	r2, #0
 801fea2:	f04f 0300 	mov.w	r3, #0
 801fea6:	00eb      	lsls	r3, r5, #3
 801fea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801feac:	00e2      	lsls	r2, r4, #3
 801feae:	4614      	mov	r4, r2
 801feb0:	461d      	mov	r5, r3
 801feb2:	eb14 030a 	adds.w	r3, r4, sl
 801feb6:	603b      	str	r3, [r7, #0]
 801feb8:	eb45 030b 	adc.w	r3, r5, fp
 801febc:	607b      	str	r3, [r7, #4]
 801febe:	f04f 0200 	mov.w	r2, #0
 801fec2:	f04f 0300 	mov.w	r3, #0
 801fec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 801feca:	4629      	mov	r1, r5
 801fecc:	028b      	lsls	r3, r1, #10
 801fece:	4621      	mov	r1, r4
 801fed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801fed4:	4621      	mov	r1, r4
 801fed6:	028a      	lsls	r2, r1, #10
 801fed8:	4610      	mov	r0, r2
 801feda:	4619      	mov	r1, r3
 801fedc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fede:	2200      	movs	r2, #0
 801fee0:	60bb      	str	r3, [r7, #8]
 801fee2:	60fa      	str	r2, [r7, #12]
 801fee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fee8:	f7f1 fa36 	bl	8011358 <__aeabi_uldivmod>
 801feec:	4602      	mov	r2, r0
 801feee:	460b      	mov	r3, r1
 801fef0:	4613      	mov	r3, r2
 801fef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801fef4:	4b0b      	ldr	r3, [pc, #44]	; (801ff24 <HAL_RCC_GetSysClockFreq+0x180>)
 801fef6:	685b      	ldr	r3, [r3, #4]
 801fef8:	0c1b      	lsrs	r3, r3, #16
 801fefa:	f003 0303 	and.w	r3, r3, #3
 801fefe:	3301      	adds	r3, #1
 801ff00:	005b      	lsls	r3, r3, #1
 801ff02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 801ff04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff08:	fbb2 f3f3 	udiv	r3, r2, r3
 801ff0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801ff0e:	e002      	b.n	801ff16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801ff10:	4b05      	ldr	r3, [pc, #20]	; (801ff28 <HAL_RCC_GetSysClockFreq+0x184>)
 801ff12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801ff14:	bf00      	nop
    }
  }
  return sysclockfreq;
 801ff16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	3740      	adds	r7, #64	; 0x40
 801ff1c:	46bd      	mov	sp, r7
 801ff1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801ff22:	bf00      	nop
 801ff24:	40023800 	.word	0x40023800
 801ff28:	00f42400 	.word	0x00f42400
 801ff2c:	017d7840 	.word	0x017d7840

0801ff30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801ff30:	b480      	push	{r7}
 801ff32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801ff34:	4b03      	ldr	r3, [pc, #12]	; (801ff44 <HAL_RCC_GetHCLKFreq+0x14>)
 801ff36:	681b      	ldr	r3, [r3, #0]
}
 801ff38:	4618      	mov	r0, r3
 801ff3a:	46bd      	mov	sp, r7
 801ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff40:	4770      	bx	lr
 801ff42:	bf00      	nop
 801ff44:	20000000 	.word	0x20000000

0801ff48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ff48:	b580      	push	{r7, lr}
 801ff4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ff4c:	f7ff fff0 	bl	801ff30 <HAL_RCC_GetHCLKFreq>
 801ff50:	4602      	mov	r2, r0
 801ff52:	4b05      	ldr	r3, [pc, #20]	; (801ff68 <HAL_RCC_GetPCLK1Freq+0x20>)
 801ff54:	689b      	ldr	r3, [r3, #8]
 801ff56:	0a9b      	lsrs	r3, r3, #10
 801ff58:	f003 0307 	and.w	r3, r3, #7
 801ff5c:	4903      	ldr	r1, [pc, #12]	; (801ff6c <HAL_RCC_GetPCLK1Freq+0x24>)
 801ff5e:	5ccb      	ldrb	r3, [r1, r3]
 801ff60:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ff64:	4618      	mov	r0, r3
 801ff66:	bd80      	pop	{r7, pc}
 801ff68:	40023800 	.word	0x40023800
 801ff6c:	08029d38 	.word	0x08029d38

0801ff70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ff70:	b580      	push	{r7, lr}
 801ff72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801ff74:	f7ff ffdc 	bl	801ff30 <HAL_RCC_GetHCLKFreq>
 801ff78:	4602      	mov	r2, r0
 801ff7a:	4b05      	ldr	r3, [pc, #20]	; (801ff90 <HAL_RCC_GetPCLK2Freq+0x20>)
 801ff7c:	689b      	ldr	r3, [r3, #8]
 801ff7e:	0b5b      	lsrs	r3, r3, #13
 801ff80:	f003 0307 	and.w	r3, r3, #7
 801ff84:	4903      	ldr	r1, [pc, #12]	; (801ff94 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ff86:	5ccb      	ldrb	r3, [r1, r3]
 801ff88:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	bd80      	pop	{r7, pc}
 801ff90:	40023800 	.word	0x40023800
 801ff94:	08029d38 	.word	0x08029d38

0801ff98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ff98:	b580      	push	{r7, lr}
 801ff9a:	b086      	sub	sp, #24
 801ff9c:	af00      	add	r7, sp, #0
 801ff9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ffa0:	2300      	movs	r3, #0
 801ffa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 801ffa4:	2300      	movs	r3, #0
 801ffa6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	681b      	ldr	r3, [r3, #0]
 801ffac:	f003 0301 	and.w	r3, r3, #1
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	d105      	bne.n	801ffc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801ffbc:	2b00      	cmp	r3, #0
 801ffbe:	d038      	beq.n	8020032 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801ffc0:	4b68      	ldr	r3, [pc, #416]	; (8020164 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801ffc2:	2200      	movs	r2, #0
 801ffc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801ffc6:	f7fd fb53 	bl	801d670 <HAL_GetTick>
 801ffca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801ffcc:	e008      	b.n	801ffe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801ffce:	f7fd fb4f 	bl	801d670 <HAL_GetTick>
 801ffd2:	4602      	mov	r2, r0
 801ffd4:	697b      	ldr	r3, [r7, #20]
 801ffd6:	1ad3      	subs	r3, r2, r3
 801ffd8:	2b02      	cmp	r3, #2
 801ffda:	d901      	bls.n	801ffe0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801ffdc:	2303      	movs	r3, #3
 801ffde:	e0bd      	b.n	802015c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801ffe0:	4b61      	ldr	r3, [pc, #388]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d1f0      	bne.n	801ffce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	685a      	ldr	r2, [r3, #4]
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	689b      	ldr	r3, [r3, #8]
 801fff4:	019b      	lsls	r3, r3, #6
 801fff6:	431a      	orrs	r2, r3
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	68db      	ldr	r3, [r3, #12]
 801fffc:	071b      	lsls	r3, r3, #28
 801fffe:	495a      	ldr	r1, [pc, #360]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020000:	4313      	orrs	r3, r2
 8020002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8020006:	4b57      	ldr	r3, [pc, #348]	; (8020164 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8020008:	2201      	movs	r2, #1
 802000a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802000c:	f7fd fb30 	bl	801d670 <HAL_GetTick>
 8020010:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8020012:	e008      	b.n	8020026 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8020014:	f7fd fb2c 	bl	801d670 <HAL_GetTick>
 8020018:	4602      	mov	r2, r0
 802001a:	697b      	ldr	r3, [r7, #20]
 802001c:	1ad3      	subs	r3, r2, r3
 802001e:	2b02      	cmp	r3, #2
 8020020:	d901      	bls.n	8020026 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8020022:	2303      	movs	r3, #3
 8020024:	e09a      	b.n	802015c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8020026:	4b50      	ldr	r3, [pc, #320]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 802002e:	2b00      	cmp	r3, #0
 8020030:	d0f0      	beq.n	8020014 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	681b      	ldr	r3, [r3, #0]
 8020036:	f003 0302 	and.w	r3, r3, #2
 802003a:	2b00      	cmp	r3, #0
 802003c:	f000 8083 	beq.w	8020146 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8020040:	2300      	movs	r3, #0
 8020042:	60fb      	str	r3, [r7, #12]
 8020044:	4b48      	ldr	r3, [pc, #288]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020048:	4a47      	ldr	r2, [pc, #284]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802004a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802004e:	6413      	str	r3, [r2, #64]	; 0x40
 8020050:	4b45      	ldr	r3, [pc, #276]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020058:	60fb      	str	r3, [r7, #12]
 802005a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802005c:	4b43      	ldr	r3, [pc, #268]	; (802016c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	4a42      	ldr	r2, [pc, #264]	; (802016c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8020062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020066:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8020068:	f7fd fb02 	bl	801d670 <HAL_GetTick>
 802006c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802006e:	e008      	b.n	8020082 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8020070:	f7fd fafe 	bl	801d670 <HAL_GetTick>
 8020074:	4602      	mov	r2, r0
 8020076:	697b      	ldr	r3, [r7, #20]
 8020078:	1ad3      	subs	r3, r2, r3
 802007a:	2b02      	cmp	r3, #2
 802007c:	d901      	bls.n	8020082 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 802007e:	2303      	movs	r3, #3
 8020080:	e06c      	b.n	802015c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8020082:	4b3a      	ldr	r3, [pc, #232]	; (802016c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802008a:	2b00      	cmp	r3, #0
 802008c:	d0f0      	beq.n	8020070 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802008e:	4b36      	ldr	r3, [pc, #216]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020096:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8020098:	693b      	ldr	r3, [r7, #16]
 802009a:	2b00      	cmp	r3, #0
 802009c:	d02f      	beq.n	80200fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	691b      	ldr	r3, [r3, #16]
 80200a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80200a6:	693a      	ldr	r2, [r7, #16]
 80200a8:	429a      	cmp	r2, r3
 80200aa:	d028      	beq.n	80200fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80200ac:	4b2e      	ldr	r3, [pc, #184]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80200ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80200b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80200b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80200b6:	4b2e      	ldr	r3, [pc, #184]	; (8020170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80200b8:	2201      	movs	r2, #1
 80200ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80200bc:	4b2c      	ldr	r3, [pc, #176]	; (8020170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80200be:	2200      	movs	r2, #0
 80200c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80200c2:	4a29      	ldr	r2, [pc, #164]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80200c4:	693b      	ldr	r3, [r7, #16]
 80200c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80200c8:	4b27      	ldr	r3, [pc, #156]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80200ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80200cc:	f003 0301 	and.w	r3, r3, #1
 80200d0:	2b01      	cmp	r3, #1
 80200d2:	d114      	bne.n	80200fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80200d4:	f7fd facc 	bl	801d670 <HAL_GetTick>
 80200d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80200da:	e00a      	b.n	80200f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80200dc:	f7fd fac8 	bl	801d670 <HAL_GetTick>
 80200e0:	4602      	mov	r2, r0
 80200e2:	697b      	ldr	r3, [r7, #20]
 80200e4:	1ad3      	subs	r3, r2, r3
 80200e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80200ea:	4293      	cmp	r3, r2
 80200ec:	d901      	bls.n	80200f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80200ee:	2303      	movs	r3, #3
 80200f0:	e034      	b.n	802015c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80200f2:	4b1d      	ldr	r3, [pc, #116]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80200f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80200f6:	f003 0302 	and.w	r3, r3, #2
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d0ee      	beq.n	80200dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	691b      	ldr	r3, [r3, #16]
 8020102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802010a:	d10d      	bne.n	8020128 <HAL_RCCEx_PeriphCLKConfig+0x190>
 802010c:	4b16      	ldr	r3, [pc, #88]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802010e:	689b      	ldr	r3, [r3, #8]
 8020110:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	691b      	ldr	r3, [r3, #16]
 8020118:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802011c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020120:	4911      	ldr	r1, [pc, #68]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020122:	4313      	orrs	r3, r2
 8020124:	608b      	str	r3, [r1, #8]
 8020126:	e005      	b.n	8020134 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8020128:	4b0f      	ldr	r3, [pc, #60]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802012a:	689b      	ldr	r3, [r3, #8]
 802012c:	4a0e      	ldr	r2, [pc, #56]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802012e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8020132:	6093      	str	r3, [r2, #8]
 8020134:	4b0c      	ldr	r3, [pc, #48]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	691b      	ldr	r3, [r3, #16]
 802013c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8020140:	4909      	ldr	r1, [pc, #36]	; (8020168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8020142:	4313      	orrs	r3, r2
 8020144:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	f003 0308 	and.w	r3, r3, #8
 802014e:	2b00      	cmp	r3, #0
 8020150:	d003      	beq.n	802015a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	7d1a      	ldrb	r2, [r3, #20]
 8020156:	4b07      	ldr	r3, [pc, #28]	; (8020174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8020158:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 802015a:	2300      	movs	r3, #0
}
 802015c:	4618      	mov	r0, r3
 802015e:	3718      	adds	r7, #24
 8020160:	46bd      	mov	sp, r7
 8020162:	bd80      	pop	{r7, pc}
 8020164:	42470068 	.word	0x42470068
 8020168:	40023800 	.word	0x40023800
 802016c:	40007000 	.word	0x40007000
 8020170:	42470e40 	.word	0x42470e40
 8020174:	424711e0 	.word	0x424711e0

08020178 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8020178:	b580      	push	{r7, lr}
 802017a:	b082      	sub	sp, #8
 802017c:	af00      	add	r7, sp, #0
 802017e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	2b00      	cmp	r3, #0
 8020184:	d101      	bne.n	802018a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8020186:	2301      	movs	r3, #1
 8020188:	e083      	b.n	8020292 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	7f5b      	ldrb	r3, [r3, #29]
 802018e:	b2db      	uxtb	r3, r3
 8020190:	2b00      	cmp	r3, #0
 8020192:	d105      	bne.n	80201a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	2200      	movs	r2, #0
 8020198:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 802019a:	6878      	ldr	r0, [r7, #4]
 802019c:	f7f6 f9ba 	bl	8016514 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	2202      	movs	r2, #2
 80201a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	22ca      	movs	r2, #202	; 0xca
 80201ac:	625a      	str	r2, [r3, #36]	; 0x24
 80201ae:	687b      	ldr	r3, [r7, #4]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	2253      	movs	r2, #83	; 0x53
 80201b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80201b6:	6878      	ldr	r0, [r7, #4]
 80201b8:	f000 f897 	bl	80202ea <RTC_EnterInitMode>
 80201bc:	4603      	mov	r3, r0
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d008      	beq.n	80201d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	22ff      	movs	r2, #255	; 0xff
 80201c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	2204      	movs	r2, #4
 80201ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80201d0:	2301      	movs	r3, #1
 80201d2:	e05e      	b.n	8020292 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	689b      	ldr	r3, [r3, #8]
 80201da:	687a      	ldr	r2, [r7, #4]
 80201dc:	6812      	ldr	r2, [r2, #0]
 80201de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80201e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80201e6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	6899      	ldr	r1, [r3, #8]
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	685a      	ldr	r2, [r3, #4]
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	691b      	ldr	r3, [r3, #16]
 80201f6:	431a      	orrs	r2, r3
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	695b      	ldr	r3, [r3, #20]
 80201fc:	431a      	orrs	r2, r3
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	430a      	orrs	r2, r1
 8020204:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	681b      	ldr	r3, [r3, #0]
 802020a:	687a      	ldr	r2, [r7, #4]
 802020c:	68d2      	ldr	r2, [r2, #12]
 802020e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	681b      	ldr	r3, [r3, #0]
 8020214:	6919      	ldr	r1, [r3, #16]
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	689b      	ldr	r3, [r3, #8]
 802021a:	041a      	lsls	r2, r3, #16
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	681b      	ldr	r3, [r3, #0]
 8020220:	430a      	orrs	r2, r1
 8020222:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	68da      	ldr	r2, [r3, #12]
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020232:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	681b      	ldr	r3, [r3, #0]
 8020238:	689b      	ldr	r3, [r3, #8]
 802023a:	f003 0320 	and.w	r3, r3, #32
 802023e:	2b00      	cmp	r3, #0
 8020240:	d10e      	bne.n	8020260 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8020242:	6878      	ldr	r0, [r7, #4]
 8020244:	f000 f829 	bl	802029a <HAL_RTC_WaitForSynchro>
 8020248:	4603      	mov	r3, r0
 802024a:	2b00      	cmp	r3, #0
 802024c:	d008      	beq.n	8020260 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	22ff      	movs	r2, #255	; 0xff
 8020254:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	2204      	movs	r2, #4
 802025a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 802025c:	2301      	movs	r3, #1
 802025e:	e018      	b.n	8020292 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8020260:	687b      	ldr	r3, [r7, #4]
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	681b      	ldr	r3, [r3, #0]
 802026a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802026e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	699a      	ldr	r2, [r3, #24]
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	430a      	orrs	r2, r1
 8020280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8020282:	687b      	ldr	r3, [r7, #4]
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	22ff      	movs	r2, #255	; 0xff
 8020288:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	2201      	movs	r2, #1
 802028e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8020290:	2300      	movs	r3, #0
  }
}
 8020292:	4618      	mov	r0, r3
 8020294:	3708      	adds	r7, #8
 8020296:	46bd      	mov	sp, r7
 8020298:	bd80      	pop	{r7, pc}

0802029a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 802029a:	b580      	push	{r7, lr}
 802029c:	b084      	sub	sp, #16
 802029e:	af00      	add	r7, sp, #0
 80202a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80202a2:	2300      	movs	r3, #0
 80202a4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80202a6:	687b      	ldr	r3, [r7, #4]
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	68da      	ldr	r2, [r3, #12]
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	681b      	ldr	r3, [r3, #0]
 80202b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80202b4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80202b6:	f7fd f9db 	bl	801d670 <HAL_GetTick>
 80202ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80202bc:	e009      	b.n	80202d2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80202be:	f7fd f9d7 	bl	801d670 <HAL_GetTick>
 80202c2:	4602      	mov	r2, r0
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	1ad3      	subs	r3, r2, r3
 80202c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80202cc:	d901      	bls.n	80202d2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80202ce:	2303      	movs	r3, #3
 80202d0:	e007      	b.n	80202e2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	68db      	ldr	r3, [r3, #12]
 80202d8:	f003 0320 	and.w	r3, r3, #32
 80202dc:	2b00      	cmp	r3, #0
 80202de:	d0ee      	beq.n	80202be <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80202e0:	2300      	movs	r3, #0
}
 80202e2:	4618      	mov	r0, r3
 80202e4:	3710      	adds	r7, #16
 80202e6:	46bd      	mov	sp, r7
 80202e8:	bd80      	pop	{r7, pc}

080202ea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80202ea:	b580      	push	{r7, lr}
 80202ec:	b084      	sub	sp, #16
 80202ee:	af00      	add	r7, sp, #0
 80202f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80202f2:	2300      	movs	r3, #0
 80202f4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	68db      	ldr	r3, [r3, #12]
 80202fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020300:	2b00      	cmp	r3, #0
 8020302:	d119      	bne.n	8020338 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	681b      	ldr	r3, [r3, #0]
 8020308:	f04f 32ff 	mov.w	r2, #4294967295
 802030c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 802030e:	f7fd f9af 	bl	801d670 <HAL_GetTick>
 8020312:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8020314:	e009      	b.n	802032a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8020316:	f7fd f9ab 	bl	801d670 <HAL_GetTick>
 802031a:	4602      	mov	r2, r0
 802031c:	68fb      	ldr	r3, [r7, #12]
 802031e:	1ad3      	subs	r3, r2, r3
 8020320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8020324:	d901      	bls.n	802032a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8020326:	2303      	movs	r3, #3
 8020328:	e007      	b.n	802033a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	681b      	ldr	r3, [r3, #0]
 802032e:	68db      	ldr	r3, [r3, #12]
 8020330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020334:	2b00      	cmp	r3, #0
 8020336:	d0ee      	beq.n	8020316 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8020338:	2300      	movs	r3, #0
}
 802033a:	4618      	mov	r0, r3
 802033c:	3710      	adds	r7, #16
 802033e:	46bd      	mov	sp, r7
 8020340:	bd80      	pop	{r7, pc}

08020342 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8020342:	b480      	push	{r7}
 8020344:	b087      	sub	sp, #28
 8020346:	af00      	add	r7, sp, #0
 8020348:	60f8      	str	r0, [r7, #12]
 802034a:	60b9      	str	r1, [r7, #8]
 802034c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 802034e:	2300      	movs	r3, #0
 8020350:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8020352:	68fb      	ldr	r3, [r7, #12]
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	3350      	adds	r3, #80	; 0x50
 8020358:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 802035a:	68bb      	ldr	r3, [r7, #8]
 802035c:	009b      	lsls	r3, r3, #2
 802035e:	697a      	ldr	r2, [r7, #20]
 8020360:	4413      	add	r3, r2
 8020362:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8020364:	697b      	ldr	r3, [r7, #20]
 8020366:	687a      	ldr	r2, [r7, #4]
 8020368:	601a      	str	r2, [r3, #0]
}
 802036a:	bf00      	nop
 802036c:	371c      	adds	r7, #28
 802036e:	46bd      	mov	sp, r7
 8020370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020374:	4770      	bx	lr

08020376 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8020376:	b480      	push	{r7}
 8020378:	b085      	sub	sp, #20
 802037a:	af00      	add	r7, sp, #0
 802037c:	6078      	str	r0, [r7, #4]
 802037e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8020380:	2300      	movs	r3, #0
 8020382:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	681b      	ldr	r3, [r3, #0]
 8020388:	3350      	adds	r3, #80	; 0x50
 802038a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 802038c:	683b      	ldr	r3, [r7, #0]
 802038e:	009b      	lsls	r3, r3, #2
 8020390:	68fa      	ldr	r2, [r7, #12]
 8020392:	4413      	add	r3, r2
 8020394:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8020396:	68fb      	ldr	r3, [r7, #12]
 8020398:	681b      	ldr	r3, [r3, #0]
}
 802039a:	4618      	mov	r0, r3
 802039c:	3714      	adds	r7, #20
 802039e:	46bd      	mov	sp, r7
 80203a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a4:	4770      	bx	lr

080203a6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80203a6:	b580      	push	{r7, lr}
 80203a8:	b082      	sub	sp, #8
 80203aa:	af00      	add	r7, sp, #0
 80203ac:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d101      	bne.n	80203b8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80203b4:	2301      	movs	r3, #1
 80203b6:	e022      	b.n	80203fe <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80203be:	b2db      	uxtb	r3, r3
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	d105      	bne.n	80203d0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80203c4:	687b      	ldr	r3, [r7, #4]
 80203c6:	2200      	movs	r2, #0
 80203c8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80203ca:	6878      	ldr	r0, [r7, #4]
 80203cc:	f7f6 fa6a 	bl	80168a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	2203      	movs	r2, #3
 80203d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80203d8:	6878      	ldr	r0, [r7, #4]
 80203da:	f000 f815 	bl	8020408 <HAL_SD_InitCard>
 80203de:	4603      	mov	r3, r0
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d001      	beq.n	80203e8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80203e4:	2301      	movs	r3, #1
 80203e6:	e00a      	b.n	80203fe <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	2200      	movs	r2, #0
 80203ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	2200      	movs	r2, #0
 80203f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	2201      	movs	r2, #1
 80203f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80203fc:	2300      	movs	r3, #0
}
 80203fe:	4618      	mov	r0, r3
 8020400:	3708      	adds	r7, #8
 8020402:	46bd      	mov	sp, r7
 8020404:	bd80      	pop	{r7, pc}
	...

08020408 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8020408:	b5b0      	push	{r4, r5, r7, lr}
 802040a:	b08e      	sub	sp, #56	; 0x38
 802040c:	af04      	add	r7, sp, #16
 802040e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8020410:	2300      	movs	r3, #0
 8020412:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8020414:	2300      	movs	r3, #0
 8020416:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8020418:	2300      	movs	r3, #0
 802041a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 802041c:	2300      	movs	r3, #0
 802041e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8020420:	2300      	movs	r3, #0
 8020422:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8020424:	2376      	movs	r3, #118	; 0x76
 8020426:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	681d      	ldr	r5, [r3, #0]
 802042c:	466c      	mov	r4, sp
 802042e:	f107 0314 	add.w	r3, r7, #20
 8020432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020436:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802043a:	f107 0308 	add.w	r3, r7, #8
 802043e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020440:	4628      	mov	r0, r5
 8020442:	f003 ffe1 	bl	8024408 <SDIO_Init>
 8020446:	4603      	mov	r3, r0
 8020448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 802044c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020450:	2b00      	cmp	r3, #0
 8020452:	d001      	beq.n	8020458 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8020454:	2301      	movs	r3, #1
 8020456:	e031      	b.n	80204bc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8020458:	4b1a      	ldr	r3, [pc, #104]	; (80204c4 <HAL_SD_InitCard+0xbc>)
 802045a:	2200      	movs	r2, #0
 802045c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	4618      	mov	r0, r3
 8020464:	f004 f819 	bl	802449a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8020468:	4b16      	ldr	r3, [pc, #88]	; (80204c4 <HAL_SD_InitCard+0xbc>)
 802046a:	2201      	movs	r2, #1
 802046c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 802046e:	6878      	ldr	r0, [r7, #4]
 8020470:	f000 ffe6 	bl	8021440 <SD_PowerON>
 8020474:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8020476:	6a3b      	ldr	r3, [r7, #32]
 8020478:	2b00      	cmp	r3, #0
 802047a:	d00b      	beq.n	8020494 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	2201      	movs	r2, #1
 8020480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020488:	6a3b      	ldr	r3, [r7, #32]
 802048a:	431a      	orrs	r2, r3
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8020490:	2301      	movs	r3, #1
 8020492:	e013      	b.n	80204bc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8020494:	6878      	ldr	r0, [r7, #4]
 8020496:	f000 ff05 	bl	80212a4 <SD_InitCard>
 802049a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 802049c:	6a3b      	ldr	r3, [r7, #32]
 802049e:	2b00      	cmp	r3, #0
 80204a0:	d00b      	beq.n	80204ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	2201      	movs	r2, #1
 80204a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80204aa:	687b      	ldr	r3, [r7, #4]
 80204ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80204ae:	6a3b      	ldr	r3, [r7, #32]
 80204b0:	431a      	orrs	r2, r3
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80204b6:	2301      	movs	r3, #1
 80204b8:	e000      	b.n	80204bc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80204ba:	2300      	movs	r3, #0
}
 80204bc:	4618      	mov	r0, r3
 80204be:	3728      	adds	r7, #40	; 0x28
 80204c0:	46bd      	mov	sp, r7
 80204c2:	bdb0      	pop	{r4, r5, r7, pc}
 80204c4:	422580a0 	.word	0x422580a0

080204c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80204c8:	b580      	push	{r7, lr}
 80204ca:	b08c      	sub	sp, #48	; 0x30
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	60f8      	str	r0, [r7, #12]
 80204d0:	60b9      	str	r1, [r7, #8]
 80204d2:	607a      	str	r2, [r7, #4]
 80204d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80204da:	68bb      	ldr	r3, [r7, #8]
 80204dc:	2b00      	cmp	r3, #0
 80204de:	d107      	bne.n	80204f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80204e0:	68fb      	ldr	r3, [r7, #12]
 80204e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80204e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80204e8:	68fb      	ldr	r3, [r7, #12]
 80204ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80204ec:	2301      	movs	r3, #1
 80204ee:	e0c9      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80204f6:	b2db      	uxtb	r3, r3
 80204f8:	2b01      	cmp	r3, #1
 80204fa:	f040 80c2 	bne.w	8020682 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80204fe:	68fb      	ldr	r3, [r7, #12]
 8020500:	2200      	movs	r2, #0
 8020502:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8020504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020506:	683b      	ldr	r3, [r7, #0]
 8020508:	441a      	add	r2, r3
 802050a:	68fb      	ldr	r3, [r7, #12]
 802050c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802050e:	429a      	cmp	r2, r3
 8020510:	d907      	bls.n	8020522 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8020512:	68fb      	ldr	r3, [r7, #12]
 8020514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020516:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802051a:	68fb      	ldr	r3, [r7, #12]
 802051c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 802051e:	2301      	movs	r3, #1
 8020520:	e0b0      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8020522:	68fb      	ldr	r3, [r7, #12]
 8020524:	2203      	movs	r2, #3
 8020526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 802052a:	68fb      	ldr	r3, [r7, #12]
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	2200      	movs	r2, #0
 8020530:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8020532:	68fb      	ldr	r3, [r7, #12]
 8020534:	681b      	ldr	r3, [r3, #0]
 8020536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020538:	68fa      	ldr	r2, [r7, #12]
 802053a:	6812      	ldr	r2, [r2, #0]
 802053c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8020540:	f043 0302 	orr.w	r3, r3, #2
 8020544:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8020546:	68fb      	ldr	r3, [r7, #12]
 8020548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802054a:	4a50      	ldr	r2, [pc, #320]	; (802068c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 802054c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 802054e:	68fb      	ldr	r3, [r7, #12]
 8020550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020552:	4a4f      	ldr	r2, [pc, #316]	; (8020690 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8020554:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8020556:	68fb      	ldr	r3, [r7, #12]
 8020558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802055a:	2200      	movs	r2, #0
 802055c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8020562:	68fb      	ldr	r3, [r7, #12]
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	3380      	adds	r3, #128	; 0x80
 8020568:	4619      	mov	r1, r3
 802056a:	68ba      	ldr	r2, [r7, #8]
 802056c:	683b      	ldr	r3, [r7, #0]
 802056e:	025b      	lsls	r3, r3, #9
 8020570:	089b      	lsrs	r3, r3, #2
 8020572:	f7fe f837 	bl	801e5e4 <HAL_DMA_Start_IT>
 8020576:	4603      	mov	r3, r0
 8020578:	2b00      	cmp	r3, #0
 802057a:	d017      	beq.n	80205ac <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 802057c:	68fb      	ldr	r3, [r7, #12]
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 802058a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	4a40      	ldr	r2, [pc, #256]	; (8020694 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8020592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020598:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802059c:	68fb      	ldr	r3, [r7, #12]
 802059e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80205a0:	68fb      	ldr	r3, [r7, #12]
 80205a2:	2201      	movs	r2, #1
 80205a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80205a8:	2301      	movs	r3, #1
 80205aa:	e06b      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80205ac:	4b3a      	ldr	r3, [pc, #232]	; (8020698 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80205ae:	2201      	movs	r2, #1
 80205b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80205b6:	2b01      	cmp	r3, #1
 80205b8:	d002      	beq.n	80205c0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80205ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205bc:	025b      	lsls	r3, r3, #9
 80205be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80205c0:	68fb      	ldr	r3, [r7, #12]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80205c8:	4618      	mov	r0, r3
 80205ca:	f003 fff9 	bl	80245c0 <SDMMC_CmdBlockLength>
 80205ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80205d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d00f      	beq.n	80205f6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	4a2e      	ldr	r2, [pc, #184]	; (8020694 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80205dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80205de:	68fb      	ldr	r3, [r7, #12]
 80205e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80205e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205e4:	431a      	orrs	r2, r3
 80205e6:	68fb      	ldr	r3, [r7, #12]
 80205e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80205ea:	68fb      	ldr	r3, [r7, #12]
 80205ec:	2201      	movs	r2, #1
 80205ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80205f2:	2301      	movs	r3, #1
 80205f4:	e046      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80205f6:	f04f 33ff 	mov.w	r3, #4294967295
 80205fa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	025b      	lsls	r3, r3, #9
 8020600:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8020602:	2390      	movs	r3, #144	; 0x90
 8020604:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8020606:	2302      	movs	r3, #2
 8020608:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 802060a:	2300      	movs	r3, #0
 802060c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 802060e:	2301      	movs	r3, #1
 8020610:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8020612:	68fb      	ldr	r3, [r7, #12]
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	f107 0210 	add.w	r2, r7, #16
 802061a:	4611      	mov	r1, r2
 802061c:	4618      	mov	r0, r3
 802061e:	f003 ffa3 	bl	8024568 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8020622:	683b      	ldr	r3, [r7, #0]
 8020624:	2b01      	cmp	r3, #1
 8020626:	d90a      	bls.n	802063e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	2282      	movs	r2, #130	; 0x82
 802062c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 802062e:	68fb      	ldr	r3, [r7, #12]
 8020630:	681b      	ldr	r3, [r3, #0]
 8020632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020634:	4618      	mov	r0, r3
 8020636:	f004 f807 	bl	8024648 <SDMMC_CmdReadMultiBlock>
 802063a:	62f8      	str	r0, [r7, #44]	; 0x2c
 802063c:	e009      	b.n	8020652 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	2281      	movs	r2, #129	; 0x81
 8020642:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8020644:	68fb      	ldr	r3, [r7, #12]
 8020646:	681b      	ldr	r3, [r3, #0]
 8020648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802064a:	4618      	mov	r0, r3
 802064c:	f003 ffda 	bl	8024604 <SDMMC_CmdReadSingleBlock>
 8020650:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8020652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020654:	2b00      	cmp	r3, #0
 8020656:	d012      	beq.n	802067e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	4a0d      	ldr	r2, [pc, #52]	; (8020694 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 802065e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8020660:	68fb      	ldr	r3, [r7, #12]
 8020662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020666:	431a      	orrs	r2, r3
 8020668:	68fb      	ldr	r3, [r7, #12]
 802066a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	2201      	movs	r2, #1
 8020670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8020674:	68fb      	ldr	r3, [r7, #12]
 8020676:	2200      	movs	r2, #0
 8020678:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 802067a:	2301      	movs	r3, #1
 802067c:	e002      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 802067e:	2300      	movs	r3, #0
 8020680:	e000      	b.n	8020684 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8020682:	2302      	movs	r3, #2
  }
}
 8020684:	4618      	mov	r0, r3
 8020686:	3730      	adds	r7, #48	; 0x30
 8020688:	46bd      	mov	sp, r7
 802068a:	bd80      	pop	{r7, pc}
 802068c:	080210b3 	.word	0x080210b3
 8020690:	08021125 	.word	0x08021125
 8020694:	004005ff 	.word	0x004005ff
 8020698:	4225858c 	.word	0x4225858c

0802069c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 802069c:	b580      	push	{r7, lr}
 802069e:	b08c      	sub	sp, #48	; 0x30
 80206a0:	af00      	add	r7, sp, #0
 80206a2:	60f8      	str	r0, [r7, #12]
 80206a4:	60b9      	str	r1, [r7, #8]
 80206a6:	607a      	str	r2, [r7, #4]
 80206a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80206ae:	68bb      	ldr	r3, [r7, #8]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	d107      	bne.n	80206c4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80206b4:	68fb      	ldr	r3, [r7, #12]
 80206b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80206bc:	68fb      	ldr	r3, [r7, #12]
 80206be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80206c0:	2301      	movs	r3, #1
 80206c2:	e0ce      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80206ca:	b2db      	uxtb	r3, r3
 80206cc:	2b01      	cmp	r3, #1
 80206ce:	f040 80c7 	bne.w	8020860 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80206d2:	68fb      	ldr	r3, [r7, #12]
 80206d4:	2200      	movs	r2, #0
 80206d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80206d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80206da:	683b      	ldr	r3, [r7, #0]
 80206dc:	441a      	add	r2, r3
 80206de:	68fb      	ldr	r3, [r7, #12]
 80206e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80206e2:	429a      	cmp	r2, r3
 80206e4:	d907      	bls.n	80206f6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80206ee:	68fb      	ldr	r3, [r7, #12]
 80206f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80206f2:	2301      	movs	r3, #1
 80206f4:	e0b5      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	2203      	movs	r2, #3
 80206fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80206fe:	68fb      	ldr	r3, [r7, #12]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	2200      	movs	r2, #0
 8020704:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802070c:	68fa      	ldr	r2, [r7, #12]
 802070e:	6812      	ldr	r2, [r2, #0]
 8020710:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8020714:	f043 0302 	orr.w	r3, r3, #2
 8020718:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 802071a:	68fb      	ldr	r3, [r7, #12]
 802071c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802071e:	4a53      	ldr	r2, [pc, #332]	; (802086c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8020720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020726:	4a52      	ldr	r2, [pc, #328]	; (8020870 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8020728:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 802072a:	68fb      	ldr	r3, [r7, #12]
 802072c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802072e:	2200      	movs	r2, #0
 8020730:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020736:	2b01      	cmp	r3, #1
 8020738:	d002      	beq.n	8020740 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 802073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802073c:	025b      	lsls	r3, r3, #9
 802073e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020748:	4618      	mov	r0, r3
 802074a:	f003 ff39 	bl	80245c0 <SDMMC_CmdBlockLength>
 802074e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8020750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020752:	2b00      	cmp	r3, #0
 8020754:	d00f      	beq.n	8020776 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020756:	68fb      	ldr	r3, [r7, #12]
 8020758:	681b      	ldr	r3, [r3, #0]
 802075a:	4a46      	ldr	r2, [pc, #280]	; (8020874 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 802075c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020764:	431a      	orrs	r2, r3
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802076a:	68fb      	ldr	r3, [r7, #12]
 802076c:	2201      	movs	r2, #1
 802076e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8020772:	2301      	movs	r3, #1
 8020774:	e075      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8020776:	683b      	ldr	r3, [r7, #0]
 8020778:	2b01      	cmp	r3, #1
 802077a:	d90a      	bls.n	8020792 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 802077c:	68fb      	ldr	r3, [r7, #12]
 802077e:	22a0      	movs	r2, #160	; 0xa0
 8020780:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020788:	4618      	mov	r0, r3
 802078a:	f003 ffa1 	bl	80246d0 <SDMMC_CmdWriteMultiBlock>
 802078e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8020790:	e009      	b.n	80207a6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8020792:	68fb      	ldr	r3, [r7, #12]
 8020794:	2290      	movs	r2, #144	; 0x90
 8020796:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802079e:	4618      	mov	r0, r3
 80207a0:	f003 ff74 	bl	802468c <SDMMC_CmdWriteSingleBlock>
 80207a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80207a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d012      	beq.n	80207d2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80207ac:	68fb      	ldr	r3, [r7, #12]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	4a30      	ldr	r2, [pc, #192]	; (8020874 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80207b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80207b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207ba:	431a      	orrs	r2, r3
 80207bc:	68fb      	ldr	r3, [r7, #12]
 80207be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80207c0:	68fb      	ldr	r3, [r7, #12]
 80207c2:	2201      	movs	r2, #1
 80207c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80207c8:	68fb      	ldr	r3, [r7, #12]
 80207ca:	2200      	movs	r2, #0
 80207cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80207ce:	2301      	movs	r3, #1
 80207d0:	e047      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80207d2:	4b29      	ldr	r3, [pc, #164]	; (8020878 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80207d4:	2201      	movs	r2, #1
 80207d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80207dc:	68b9      	ldr	r1, [r7, #8]
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	681b      	ldr	r3, [r3, #0]
 80207e2:	3380      	adds	r3, #128	; 0x80
 80207e4:	461a      	mov	r2, r3
 80207e6:	683b      	ldr	r3, [r7, #0]
 80207e8:	025b      	lsls	r3, r3, #9
 80207ea:	089b      	lsrs	r3, r3, #2
 80207ec:	f7fd fefa 	bl	801e5e4 <HAL_DMA_Start_IT>
 80207f0:	4603      	mov	r3, r0
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d01c      	beq.n	8020830 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207fc:	68fa      	ldr	r2, [r7, #12]
 80207fe:	6812      	ldr	r2, [r2, #0]
 8020800:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8020804:	f023 0302 	bic.w	r3, r3, #2
 8020808:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	681b      	ldr	r3, [r3, #0]
 802080e:	4a19      	ldr	r2, [pc, #100]	; (8020874 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8020810:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020816:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 802081e:	68fb      	ldr	r3, [r7, #12]
 8020820:	2201      	movs	r2, #1
 8020822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8020826:	68fb      	ldr	r3, [r7, #12]
 8020828:	2200      	movs	r2, #0
 802082a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 802082c:	2301      	movs	r3, #1
 802082e:	e018      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8020830:	f04f 33ff 	mov.w	r3, #4294967295
 8020834:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8020836:	683b      	ldr	r3, [r7, #0]
 8020838:	025b      	lsls	r3, r3, #9
 802083a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 802083c:	2390      	movs	r3, #144	; 0x90
 802083e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8020840:	2300      	movs	r3, #0
 8020842:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8020844:	2300      	movs	r3, #0
 8020846:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8020848:	2301      	movs	r3, #1
 802084a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 802084c:	68fb      	ldr	r3, [r7, #12]
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	f107 0210 	add.w	r2, r7, #16
 8020854:	4611      	mov	r1, r2
 8020856:	4618      	mov	r0, r3
 8020858:	f003 fe86 	bl	8024568 <SDIO_ConfigData>

      return HAL_OK;
 802085c:	2300      	movs	r3, #0
 802085e:	e000      	b.n	8020862 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8020860:	2302      	movs	r3, #2
  }
}
 8020862:	4618      	mov	r0, r3
 8020864:	3730      	adds	r7, #48	; 0x30
 8020866:	46bd      	mov	sp, r7
 8020868:	bd80      	pop	{r7, pc}
 802086a:	bf00      	nop
 802086c:	08021089 	.word	0x08021089
 8020870:	08021125 	.word	0x08021125
 8020874:	004005ff 	.word	0x004005ff
 8020878:	4225858c 	.word	0x4225858c

0802087c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 802087c:	b580      	push	{r7, lr}
 802087e:	b084      	sub	sp, #16
 8020880:	af00      	add	r7, sp, #0
 8020882:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020888:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 802088a:	687b      	ldr	r3, [r7, #4]
 802088c:	681b      	ldr	r3, [r3, #0]
 802088e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8020894:	2b00      	cmp	r3, #0
 8020896:	d008      	beq.n	80208aa <HAL_SD_IRQHandler+0x2e>
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	f003 0308 	and.w	r3, r3, #8
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d003      	beq.n	80208aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80208a2:	6878      	ldr	r0, [r7, #4]
 80208a4:	f000 ffe2 	bl	802186c <SD_Read_IT>
 80208a8:	e165      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	681b      	ldr	r3, [r3, #0]
 80208ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80208b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	f000 808f 	beq.w	80209d8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80208c2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80208ca:	687a      	ldr	r2, [r7, #4]
 80208cc:	6812      	ldr	r2, [r2, #0]
 80208ce:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80208d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80208d6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	f022 0201 	bic.w	r2, r2, #1
 80208e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80208e8:	68fb      	ldr	r3, [r7, #12]
 80208ea:	f003 0308 	and.w	r3, r3, #8
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	d039      	beq.n	8020966 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80208f2:	68fb      	ldr	r3, [r7, #12]
 80208f4:	f003 0302 	and.w	r3, r3, #2
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d104      	bne.n	8020906 <HAL_SD_IRQHandler+0x8a>
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	f003 0320 	and.w	r3, r3, #32
 8020902:	2b00      	cmp	r3, #0
 8020904:	d011      	beq.n	802092a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	4618      	mov	r0, r3
 802090c:	f003 ff02 	bl	8024714 <SDMMC_CmdStopTransfer>
 8020910:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8020912:	68bb      	ldr	r3, [r7, #8]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d008      	beq.n	802092a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802091c:	68bb      	ldr	r3, [r7, #8]
 802091e:	431a      	orrs	r2, r3
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8020924:	6878      	ldr	r0, [r7, #4]
 8020926:	f000 f92f 	bl	8020b88 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	681b      	ldr	r3, [r3, #0]
 802092e:	f240 523a 	movw	r2, #1338	; 0x53a
 8020932:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8020934:	687b      	ldr	r3, [r7, #4]
 8020936:	2201      	movs	r2, #1
 8020938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	2200      	movs	r2, #0
 8020940:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8020942:	68fb      	ldr	r3, [r7, #12]
 8020944:	f003 0301 	and.w	r3, r3, #1
 8020948:	2b00      	cmp	r3, #0
 802094a:	d104      	bne.n	8020956 <HAL_SD_IRQHandler+0xda>
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	f003 0302 	and.w	r3, r3, #2
 8020952:	2b00      	cmp	r3, #0
 8020954:	d003      	beq.n	802095e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8020956:	6878      	ldr	r0, [r7, #4]
 8020958:	f7f5 ff84 	bl	8016864 <HAL_SD_RxCpltCallback>
 802095c:	e10b      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 802095e:	6878      	ldr	r0, [r7, #4]
 8020960:	f7f5 ff90 	bl	8016884 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8020964:	e107      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8020966:	68fb      	ldr	r3, [r7, #12]
 8020968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802096c:	2b00      	cmp	r3, #0
 802096e:	f000 8102 	beq.w	8020b76 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	f003 0320 	and.w	r3, r3, #32
 8020978:	2b00      	cmp	r3, #0
 802097a:	d011      	beq.n	80209a0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	681b      	ldr	r3, [r3, #0]
 8020980:	4618      	mov	r0, r3
 8020982:	f003 fec7 	bl	8024714 <SDMMC_CmdStopTransfer>
 8020986:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8020988:	68bb      	ldr	r3, [r7, #8]
 802098a:	2b00      	cmp	r3, #0
 802098c:	d008      	beq.n	80209a0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020992:	68bb      	ldr	r3, [r7, #8]
 8020994:	431a      	orrs	r2, r3
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 802099a:	6878      	ldr	r0, [r7, #4]
 802099c:	f000 f8f4 	bl	8020b88 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	f003 0301 	and.w	r3, r3, #1
 80209a6:	2b00      	cmp	r3, #0
 80209a8:	f040 80e5 	bne.w	8020b76 <HAL_SD_IRQHandler+0x2fa>
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	f003 0302 	and.w	r3, r3, #2
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	f040 80df 	bne.w	8020b76 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80209be:	687b      	ldr	r3, [r7, #4]
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	f022 0208 	bic.w	r2, r2, #8
 80209c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2201      	movs	r2, #1
 80209cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80209d0:	6878      	ldr	r0, [r7, #4]
 80209d2:	f7f5 ff57 	bl	8016884 <HAL_SD_TxCpltCallback>
}
 80209d6:	e0ce      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	681b      	ldr	r3, [r3, #0]
 80209dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80209de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d008      	beq.n	80209f8 <HAL_SD_IRQHandler+0x17c>
 80209e6:	68fb      	ldr	r3, [r7, #12]
 80209e8:	f003 0308 	and.w	r3, r3, #8
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d003      	beq.n	80209f8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80209f0:	6878      	ldr	r0, [r7, #4]
 80209f2:	f000 ff8c 	bl	802190e <SD_Write_IT>
 80209f6:	e0be      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	681b      	ldr	r3, [r3, #0]
 80209fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80209fe:	f240 233a 	movw	r3, #570	; 0x23a
 8020a02:	4013      	ands	r3, r2
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	f000 80b6 	beq.w	8020b76 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	681b      	ldr	r3, [r3, #0]
 8020a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020a10:	f003 0302 	and.w	r3, r3, #2
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	d005      	beq.n	8020a24 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a1c:	f043 0202 	orr.w	r2, r3, #2
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020a2a:	f003 0308 	and.w	r3, r3, #8
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d005      	beq.n	8020a3e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a36:	f043 0208 	orr.w	r2, r3, #8
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8020a3e:	687b      	ldr	r3, [r7, #4]
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020a44:	f003 0320 	and.w	r3, r3, #32
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d005      	beq.n	8020a58 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a50:	f043 0220 	orr.w	r2, r3, #32
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020a5e:	f003 0310 	and.w	r3, r3, #16
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d005      	beq.n	8020a72 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a6a:	f043 0210 	orr.w	r2, r3, #16
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	681b      	ldr	r3, [r3, #0]
 8020a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d005      	beq.n	8020a8c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a84:	f043 0208 	orr.w	r2, r3, #8
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	681b      	ldr	r3, [r3, #0]
 8020a90:	f240 723a 	movw	r2, #1850	; 0x73a
 8020a94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a9c:	687a      	ldr	r2, [r7, #4]
 8020a9e:	6812      	ldr	r2, [r2, #0]
 8020aa0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8020aa4:	f023 0302 	bic.w	r3, r3, #2
 8020aa8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8020aaa:	687b      	ldr	r3, [r7, #4]
 8020aac:	681b      	ldr	r3, [r3, #0]
 8020aae:	4618      	mov	r0, r3
 8020ab0:	f003 fe30 	bl	8024714 <SDMMC_CmdStopTransfer>
 8020ab4:	4602      	mov	r2, r0
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020aba:	431a      	orrs	r2, r3
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	f003 0308 	and.w	r3, r3, #8
 8020ac6:	2b00      	cmp	r3, #0
 8020ac8:	d00a      	beq.n	8020ae0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	2201      	movs	r2, #1
 8020ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8020ad2:	687b      	ldr	r3, [r7, #4]
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8020ad8:	6878      	ldr	r0, [r7, #4]
 8020ada:	f000 f855 	bl	8020b88 <HAL_SD_ErrorCallback>
}
 8020ade:	e04a      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8020ae0:	68fb      	ldr	r3, [r7, #12]
 8020ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d045      	beq.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8020aea:	68fb      	ldr	r3, [r7, #12]
 8020aec:	f003 0310 	and.w	r3, r3, #16
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	d104      	bne.n	8020afe <HAL_SD_IRQHandler+0x282>
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	f003 0320 	and.w	r3, r3, #32
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d011      	beq.n	8020b22 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8020afe:	687b      	ldr	r3, [r7, #4]
 8020b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020b02:	4a1f      	ldr	r2, [pc, #124]	; (8020b80 <HAL_SD_IRQHandler+0x304>)
 8020b04:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020b0a:	4618      	mov	r0, r3
 8020b0c:	f7fd fdc2 	bl	801e694 <HAL_DMA_Abort_IT>
 8020b10:	4603      	mov	r3, r0
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d02f      	beq.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	f000 fb54 	bl	80211c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8020b20:	e029      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	f003 0301 	and.w	r3, r3, #1
 8020b28:	2b00      	cmp	r3, #0
 8020b2a:	d104      	bne.n	8020b36 <HAL_SD_IRQHandler+0x2ba>
 8020b2c:	68fb      	ldr	r3, [r7, #12]
 8020b2e:	f003 0302 	and.w	r3, r3, #2
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d011      	beq.n	8020b5a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b3a:	4a12      	ldr	r2, [pc, #72]	; (8020b84 <HAL_SD_IRQHandler+0x308>)
 8020b3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b42:	4618      	mov	r0, r3
 8020b44:	f7fd fda6 	bl	801e694 <HAL_DMA_Abort_IT>
 8020b48:	4603      	mov	r3, r0
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d013      	beq.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b52:	4618      	mov	r0, r3
 8020b54:	f000 fb6f 	bl	8021236 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8020b58:	e00d      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	2201      	movs	r2, #1
 8020b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	2200      	movs	r2, #0
 8020b6c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8020b6e:	6878      	ldr	r0, [r7, #4]
 8020b70:	f000 f814 	bl	8020b9c <HAL_SD_AbortCallback>
}
 8020b74:	e7ff      	b.n	8020b76 <HAL_SD_IRQHandler+0x2fa>
 8020b76:	bf00      	nop
 8020b78:	3710      	adds	r7, #16
 8020b7a:	46bd      	mov	sp, r7
 8020b7c:	bd80      	pop	{r7, pc}
 8020b7e:	bf00      	nop
 8020b80:	080211c9 	.word	0x080211c9
 8020b84:	08021237 	.word	0x08021237

08020b88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8020b88:	b480      	push	{r7}
 8020b8a:	b083      	sub	sp, #12
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8020b90:	bf00      	nop
 8020b92:	370c      	adds	r7, #12
 8020b94:	46bd      	mov	sp, r7
 8020b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9a:	4770      	bx	lr

08020b9c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8020b9c:	b480      	push	{r7}
 8020b9e:	b083      	sub	sp, #12
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8020ba4:	bf00      	nop
 8020ba6:	370c      	adds	r7, #12
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bae:	4770      	bx	lr

08020bb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8020bb0:	b480      	push	{r7}
 8020bb2:	b083      	sub	sp, #12
 8020bb4:	af00      	add	r7, sp, #0
 8020bb6:	6078      	str	r0, [r7, #4]
 8020bb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bbe:	0f9b      	lsrs	r3, r3, #30
 8020bc0:	b2da      	uxtb	r2, r3
 8020bc2:	683b      	ldr	r3, [r7, #0]
 8020bc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8020bc6:	687b      	ldr	r3, [r7, #4]
 8020bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bca:	0e9b      	lsrs	r3, r3, #26
 8020bcc:	b2db      	uxtb	r3, r3
 8020bce:	f003 030f 	and.w	r3, r3, #15
 8020bd2:	b2da      	uxtb	r2, r3
 8020bd4:	683b      	ldr	r3, [r7, #0]
 8020bd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bdc:	0e1b      	lsrs	r3, r3, #24
 8020bde:	b2db      	uxtb	r3, r3
 8020be0:	f003 0303 	and.w	r3, r3, #3
 8020be4:	b2da      	uxtb	r2, r3
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bee:	0c1b      	lsrs	r3, r3, #16
 8020bf0:	b2da      	uxtb	r2, r3
 8020bf2:	683b      	ldr	r3, [r7, #0]
 8020bf4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020bfa:	0a1b      	lsrs	r3, r3, #8
 8020bfc:	b2da      	uxtb	r2, r3
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020c06:	b2da      	uxtb	r2, r3
 8020c08:	683b      	ldr	r3, [r7, #0]
 8020c0a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8020c0c:	687b      	ldr	r3, [r7, #4]
 8020c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c10:	0d1b      	lsrs	r3, r3, #20
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	683b      	ldr	r3, [r7, #0]
 8020c16:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c1c:	0c1b      	lsrs	r3, r3, #16
 8020c1e:	b2db      	uxtb	r3, r3
 8020c20:	f003 030f 	and.w	r3, r3, #15
 8020c24:	b2da      	uxtb	r2, r3
 8020c26:	683b      	ldr	r3, [r7, #0]
 8020c28:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c2e:	0bdb      	lsrs	r3, r3, #15
 8020c30:	b2db      	uxtb	r3, r3
 8020c32:	f003 0301 	and.w	r3, r3, #1
 8020c36:	b2da      	uxtb	r2, r3
 8020c38:	683b      	ldr	r3, [r7, #0]
 8020c3a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c40:	0b9b      	lsrs	r3, r3, #14
 8020c42:	b2db      	uxtb	r3, r3
 8020c44:	f003 0301 	and.w	r3, r3, #1
 8020c48:	b2da      	uxtb	r2, r3
 8020c4a:	683b      	ldr	r3, [r7, #0]
 8020c4c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c52:	0b5b      	lsrs	r3, r3, #13
 8020c54:	b2db      	uxtb	r3, r3
 8020c56:	f003 0301 	and.w	r3, r3, #1
 8020c5a:	b2da      	uxtb	r2, r3
 8020c5c:	683b      	ldr	r3, [r7, #0]
 8020c5e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8020c60:	687b      	ldr	r3, [r7, #4]
 8020c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c64:	0b1b      	lsrs	r3, r3, #12
 8020c66:	b2db      	uxtb	r3, r3
 8020c68:	f003 0301 	and.w	r3, r3, #1
 8020c6c:	b2da      	uxtb	r2, r3
 8020c6e:	683b      	ldr	r3, [r7, #0]
 8020c70:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8020c72:	683b      	ldr	r3, [r7, #0]
 8020c74:	2200      	movs	r2, #0
 8020c76:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d163      	bne.n	8020d48 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020c84:	009a      	lsls	r2, r3, #2
 8020c86:	f640 73fc 	movw	r3, #4092	; 0xffc
 8020c8a:	4013      	ands	r3, r2
 8020c8c:	687a      	ldr	r2, [r7, #4]
 8020c8e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8020c90:	0f92      	lsrs	r2, r2, #30
 8020c92:	431a      	orrs	r2, r3
 8020c94:	683b      	ldr	r3, [r7, #0]
 8020c96:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020c9c:	0edb      	lsrs	r3, r3, #27
 8020c9e:	b2db      	uxtb	r3, r3
 8020ca0:	f003 0307 	and.w	r3, r3, #7
 8020ca4:	b2da      	uxtb	r2, r3
 8020ca6:	683b      	ldr	r3, [r7, #0]
 8020ca8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020cae:	0e1b      	lsrs	r3, r3, #24
 8020cb0:	b2db      	uxtb	r3, r3
 8020cb2:	f003 0307 	and.w	r3, r3, #7
 8020cb6:	b2da      	uxtb	r2, r3
 8020cb8:	683b      	ldr	r3, [r7, #0]
 8020cba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020cc0:	0d5b      	lsrs	r3, r3, #21
 8020cc2:	b2db      	uxtb	r3, r3
 8020cc4:	f003 0307 	and.w	r3, r3, #7
 8020cc8:	b2da      	uxtb	r2, r3
 8020cca:	683b      	ldr	r3, [r7, #0]
 8020ccc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020cd2:	0c9b      	lsrs	r3, r3, #18
 8020cd4:	b2db      	uxtb	r3, r3
 8020cd6:	f003 0307 	and.w	r3, r3, #7
 8020cda:	b2da      	uxtb	r2, r3
 8020cdc:	683b      	ldr	r3, [r7, #0]
 8020cde:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020ce4:	0bdb      	lsrs	r3, r3, #15
 8020ce6:	b2db      	uxtb	r3, r3
 8020ce8:	f003 0307 	and.w	r3, r3, #7
 8020cec:	b2da      	uxtb	r2, r3
 8020cee:	683b      	ldr	r3, [r7, #0]
 8020cf0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8020cf2:	683b      	ldr	r3, [r7, #0]
 8020cf4:	691b      	ldr	r3, [r3, #16]
 8020cf6:	1c5a      	adds	r2, r3, #1
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8020cfc:	683b      	ldr	r3, [r7, #0]
 8020cfe:	7e1b      	ldrb	r3, [r3, #24]
 8020d00:	b2db      	uxtb	r3, r3
 8020d02:	f003 0307 	and.w	r3, r3, #7
 8020d06:	3302      	adds	r3, #2
 8020d08:	2201      	movs	r2, #1
 8020d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8020d0e:	687a      	ldr	r2, [r7, #4]
 8020d10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8020d12:	fb03 f202 	mul.w	r2, r3, r2
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8020d1a:	683b      	ldr	r3, [r7, #0]
 8020d1c:	7a1b      	ldrb	r3, [r3, #8]
 8020d1e:	b2db      	uxtb	r3, r3
 8020d20:	f003 030f 	and.w	r3, r3, #15
 8020d24:	2201      	movs	r2, #1
 8020d26:	409a      	lsls	r2, r3
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020d30:	687a      	ldr	r2, [r7, #4]
 8020d32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8020d34:	0a52      	lsrs	r2, r2, #9
 8020d36:	fb03 f202 	mul.w	r2, r3, r2
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020d44:	661a      	str	r2, [r3, #96]	; 0x60
 8020d46:	e031      	b.n	8020dac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020d4c:	2b01      	cmp	r3, #1
 8020d4e:	d11d      	bne.n	8020d8c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020d54:	041b      	lsls	r3, r3, #16
 8020d56:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020d5e:	0c1b      	lsrs	r3, r3, #16
 8020d60:	431a      	orrs	r2, r3
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8020d66:	683b      	ldr	r3, [r7, #0]
 8020d68:	691b      	ldr	r3, [r3, #16]
 8020d6a:	3301      	adds	r3, #1
 8020d6c:	029a      	lsls	r2, r3, #10
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020d80:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	661a      	str	r2, [r3, #96]	; 0x60
 8020d8a:	e00f      	b.n	8020dac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	4a58      	ldr	r2, [pc, #352]	; (8020ef4 <HAL_SD_GetCardCSD+0x344>)
 8020d92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020d94:	687b      	ldr	r3, [r7, #4]
 8020d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	2201      	movs	r2, #1
 8020da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8020da8:	2301      	movs	r3, #1
 8020daa:	e09d      	b.n	8020ee8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020db0:	0b9b      	lsrs	r3, r3, #14
 8020db2:	b2db      	uxtb	r3, r3
 8020db4:	f003 0301 	and.w	r3, r3, #1
 8020db8:	b2da      	uxtb	r2, r3
 8020dba:	683b      	ldr	r3, [r7, #0]
 8020dbc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020dc2:	09db      	lsrs	r3, r3, #7
 8020dc4:	b2db      	uxtb	r3, r3
 8020dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020dca:	b2da      	uxtb	r2, r3
 8020dcc:	683b      	ldr	r3, [r7, #0]
 8020dce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020dd4:	b2db      	uxtb	r3, r3
 8020dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020dda:	b2da      	uxtb	r2, r3
 8020ddc:	683b      	ldr	r3, [r7, #0]
 8020dde:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020de4:	0fdb      	lsrs	r3, r3, #31
 8020de6:	b2da      	uxtb	r2, r3
 8020de8:	683b      	ldr	r3, [r7, #0]
 8020dea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8020dec:	687b      	ldr	r3, [r7, #4]
 8020dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020df0:	0f5b      	lsrs	r3, r3, #29
 8020df2:	b2db      	uxtb	r3, r3
 8020df4:	f003 0303 	and.w	r3, r3, #3
 8020df8:	b2da      	uxtb	r2, r3
 8020dfa:	683b      	ldr	r3, [r7, #0]
 8020dfc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e02:	0e9b      	lsrs	r3, r3, #26
 8020e04:	b2db      	uxtb	r3, r3
 8020e06:	f003 0307 	and.w	r3, r3, #7
 8020e0a:	b2da      	uxtb	r2, r3
 8020e0c:	683b      	ldr	r3, [r7, #0]
 8020e0e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e14:	0d9b      	lsrs	r3, r3, #22
 8020e16:	b2db      	uxtb	r3, r3
 8020e18:	f003 030f 	and.w	r3, r3, #15
 8020e1c:	b2da      	uxtb	r2, r3
 8020e1e:	683b      	ldr	r3, [r7, #0]
 8020e20:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e26:	0d5b      	lsrs	r3, r3, #21
 8020e28:	b2db      	uxtb	r3, r3
 8020e2a:	f003 0301 	and.w	r3, r3, #1
 8020e2e:	b2da      	uxtb	r2, r3
 8020e30:	683b      	ldr	r3, [r7, #0]
 8020e32:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	2200      	movs	r2, #0
 8020e3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e42:	0c1b      	lsrs	r3, r3, #16
 8020e44:	b2db      	uxtb	r3, r3
 8020e46:	f003 0301 	and.w	r3, r3, #1
 8020e4a:	b2da      	uxtb	r2, r3
 8020e4c:	683b      	ldr	r3, [r7, #0]
 8020e4e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e56:	0bdb      	lsrs	r3, r3, #15
 8020e58:	b2db      	uxtb	r3, r3
 8020e5a:	f003 0301 	and.w	r3, r3, #1
 8020e5e:	b2da      	uxtb	r2, r3
 8020e60:	683b      	ldr	r3, [r7, #0]
 8020e62:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e6a:	0b9b      	lsrs	r3, r3, #14
 8020e6c:	b2db      	uxtb	r3, r3
 8020e6e:	f003 0301 	and.w	r3, r3, #1
 8020e72:	b2da      	uxtb	r2, r3
 8020e74:	683b      	ldr	r3, [r7, #0]
 8020e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e7e:	0b5b      	lsrs	r3, r3, #13
 8020e80:	b2db      	uxtb	r3, r3
 8020e82:	f003 0301 	and.w	r3, r3, #1
 8020e86:	b2da      	uxtb	r2, r3
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e92:	0b1b      	lsrs	r3, r3, #12
 8020e94:	b2db      	uxtb	r3, r3
 8020e96:	f003 0301 	and.w	r3, r3, #1
 8020e9a:	b2da      	uxtb	r2, r3
 8020e9c:	683b      	ldr	r3, [r7, #0]
 8020e9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ea6:	0a9b      	lsrs	r3, r3, #10
 8020ea8:	b2db      	uxtb	r3, r3
 8020eaa:	f003 0303 	and.w	r3, r3, #3
 8020eae:	b2da      	uxtb	r2, r3
 8020eb0:	683b      	ldr	r3, [r7, #0]
 8020eb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020eba:	0a1b      	lsrs	r3, r3, #8
 8020ebc:	b2db      	uxtb	r3, r3
 8020ebe:	f003 0303 	and.w	r3, r3, #3
 8020ec2:	b2da      	uxtb	r2, r3
 8020ec4:	683b      	ldr	r3, [r7, #0]
 8020ec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8020eca:	687b      	ldr	r3, [r7, #4]
 8020ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ece:	085b      	lsrs	r3, r3, #1
 8020ed0:	b2db      	uxtb	r3, r3
 8020ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020ed6:	b2da      	uxtb	r2, r3
 8020ed8:	683b      	ldr	r3, [r7, #0]
 8020eda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8020ede:	683b      	ldr	r3, [r7, #0]
 8020ee0:	2201      	movs	r2, #1
 8020ee2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8020ee6:	2300      	movs	r3, #0
}
 8020ee8:	4618      	mov	r0, r3
 8020eea:	370c      	adds	r7, #12
 8020eec:	46bd      	mov	sp, r7
 8020eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef2:	4770      	bx	lr
 8020ef4:	004005ff 	.word	0x004005ff

08020ef8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8020ef8:	b480      	push	{r7}
 8020efa:	b083      	sub	sp, #12
 8020efc:	af00      	add	r7, sp, #0
 8020efe:	6078      	str	r0, [r7, #4]
 8020f00:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020f06:	683b      	ldr	r3, [r7, #0]
 8020f08:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020f0e:	683b      	ldr	r3, [r7, #0]
 8020f10:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8020f12:	687b      	ldr	r3, [r7, #4]
 8020f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020f16:	683b      	ldr	r3, [r7, #0]
 8020f18:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020f1e:	683b      	ldr	r3, [r7, #0]
 8020f20:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8020f22:	687b      	ldr	r3, [r7, #4]
 8020f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8020f26:	683b      	ldr	r3, [r7, #0]
 8020f28:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020f2e:	683b      	ldr	r3, [r7, #0]
 8020f30:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020f36:	683b      	ldr	r3, [r7, #0]
 8020f38:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020f3e:	683b      	ldr	r3, [r7, #0]
 8020f40:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8020f42:	2300      	movs	r3, #0
}
 8020f44:	4618      	mov	r0, r3
 8020f46:	370c      	adds	r7, #12
 8020f48:	46bd      	mov	sp, r7
 8020f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f4e:	4770      	bx	lr

08020f50 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8020f50:	b5b0      	push	{r4, r5, r7, lr}
 8020f52:	b08e      	sub	sp, #56	; 0x38
 8020f54:	af04      	add	r7, sp, #16
 8020f56:	6078      	str	r0, [r7, #4]
 8020f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	2203      	movs	r2, #3
 8020f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020f66:	2b03      	cmp	r3, #3
 8020f68:	d02e      	beq.n	8020fc8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8020f6a:	683b      	ldr	r3, [r7, #0]
 8020f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020f70:	d106      	bne.n	8020f80 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f76:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	639a      	str	r2, [r3, #56]	; 0x38
 8020f7e:	e029      	b.n	8020fd4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8020f80:	683b      	ldr	r3, [r7, #0]
 8020f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020f86:	d10a      	bne.n	8020f9e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8020f88:	6878      	ldr	r0, [r7, #4]
 8020f8a:	f000 fb0f 	bl	80215ac <SD_WideBus_Enable>
 8020f8e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f96:	431a      	orrs	r2, r3
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8020f9c:	e01a      	b.n	8020fd4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8020f9e:	683b      	ldr	r3, [r7, #0]
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	d10a      	bne.n	8020fba <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8020fa4:	6878      	ldr	r0, [r7, #4]
 8020fa6:	f000 fb4c 	bl	8021642 <SD_WideBus_Disable>
 8020faa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fb2:	431a      	orrs	r2, r3
 8020fb4:	687b      	ldr	r3, [r7, #4]
 8020fb6:	639a      	str	r2, [r3, #56]	; 0x38
 8020fb8:	e00c      	b.n	8020fd4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	639a      	str	r2, [r3, #56]	; 0x38
 8020fc6:	e005      	b.n	8020fd4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020fcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d009      	beq.n	8020ff0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020fdc:	687b      	ldr	r3, [r7, #4]
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	4a18      	ldr	r2, [pc, #96]	; (8021044 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8020fe2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8020fe4:	687b      	ldr	r3, [r7, #4]
 8020fe6:	2201      	movs	r2, #1
 8020fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8020fec:	2301      	movs	r3, #1
 8020fee:	e024      	b.n	802103a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	685b      	ldr	r3, [r3, #4]
 8020ff4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	689b      	ldr	r3, [r3, #8]
 8020ffa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	68db      	ldr	r3, [r3, #12]
 8021000:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8021002:	683b      	ldr	r3, [r7, #0]
 8021004:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	695b      	ldr	r3, [r3, #20]
 802100a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	699b      	ldr	r3, [r3, #24]
 8021010:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8021012:	687b      	ldr	r3, [r7, #4]
 8021014:	681d      	ldr	r5, [r3, #0]
 8021016:	466c      	mov	r4, sp
 8021018:	f107 0318 	add.w	r3, r7, #24
 802101c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021020:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021024:	f107 030c 	add.w	r3, r7, #12
 8021028:	cb0e      	ldmia	r3, {r1, r2, r3}
 802102a:	4628      	mov	r0, r5
 802102c:	f003 f9ec 	bl	8024408 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	2201      	movs	r2, #1
 8021034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8021038:	2300      	movs	r3, #0
}
 802103a:	4618      	mov	r0, r3
 802103c:	3728      	adds	r7, #40	; 0x28
 802103e:	46bd      	mov	sp, r7
 8021040:	bdb0      	pop	{r4, r5, r7, pc}
 8021042:	bf00      	nop
 8021044:	004005ff 	.word	0x004005ff

08021048 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b086      	sub	sp, #24
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8021050:	2300      	movs	r3, #0
 8021052:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8021054:	f107 030c 	add.w	r3, r7, #12
 8021058:	4619      	mov	r1, r3
 802105a:	6878      	ldr	r0, [r7, #4]
 802105c:	f000 fa7e 	bl	802155c <SD_SendStatus>
 8021060:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021062:	697b      	ldr	r3, [r7, #20]
 8021064:	2b00      	cmp	r3, #0
 8021066:	d005      	beq.n	8021074 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802106c:	697b      	ldr	r3, [r7, #20]
 802106e:	431a      	orrs	r2, r3
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	0a5b      	lsrs	r3, r3, #9
 8021078:	f003 030f 	and.w	r3, r3, #15
 802107c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 802107e:	693b      	ldr	r3, [r7, #16]
}
 8021080:	4618      	mov	r0, r3
 8021082:	3718      	adds	r7, #24
 8021084:	46bd      	mov	sp, r7
 8021086:	bd80      	pop	{r7, pc}

08021088 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8021088:	b480      	push	{r7}
 802108a:	b085      	sub	sp, #20
 802108c:	af00      	add	r7, sp, #0
 802108e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021094:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8021096:	68fb      	ldr	r3, [r7, #12]
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802109c:	68fb      	ldr	r3, [r7, #12]
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80210a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80210a6:	bf00      	nop
 80210a8:	3714      	adds	r7, #20
 80210aa:	46bd      	mov	sp, r7
 80210ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b0:	4770      	bx	lr

080210b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80210b2:	b580      	push	{r7, lr}
 80210b4:	b084      	sub	sp, #16
 80210b6:	af00      	add	r7, sp, #0
 80210b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80210c0:	68fb      	ldr	r3, [r7, #12]
 80210c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80210c4:	2b82      	cmp	r3, #130	; 0x82
 80210c6:	d111      	bne.n	80210ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80210c8:	68fb      	ldr	r3, [r7, #12]
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	4618      	mov	r0, r3
 80210ce:	f003 fb21 	bl	8024714 <SDMMC_CmdStopTransfer>
 80210d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80210d4:	68bb      	ldr	r3, [r7, #8]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d008      	beq.n	80210ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80210da:	68fb      	ldr	r3, [r7, #12]
 80210dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80210de:	68bb      	ldr	r3, [r7, #8]
 80210e0:	431a      	orrs	r2, r3
 80210e2:	68fb      	ldr	r3, [r7, #12]
 80210e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80210e6:	68f8      	ldr	r0, [r7, #12]
 80210e8:	f7ff fd4e 	bl	8020b88 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80210f2:	68fb      	ldr	r3, [r7, #12]
 80210f4:	681b      	ldr	r3, [r3, #0]
 80210f6:	f022 0208 	bic.w	r2, r2, #8
 80210fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80210fc:	68fb      	ldr	r3, [r7, #12]
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	f240 523a 	movw	r2, #1338	; 0x53a
 8021104:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	2201      	movs	r2, #1
 802110a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	2200      	movs	r2, #0
 8021112:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8021114:	68f8      	ldr	r0, [r7, #12]
 8021116:	f7f5 fba5 	bl	8016864 <HAL_SD_RxCpltCallback>
#endif
}
 802111a:	bf00      	nop
 802111c:	3710      	adds	r7, #16
 802111e:	46bd      	mov	sp, r7
 8021120:	bd80      	pop	{r7, pc}
	...

08021124 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8021124:	b580      	push	{r7, lr}
 8021126:	b086      	sub	sp, #24
 8021128:	af00      	add	r7, sp, #0
 802112a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 802112c:	687b      	ldr	r3, [r7, #4]
 802112e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021130:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8021132:	6878      	ldr	r0, [r7, #4]
 8021134:	f7fd fc5a 	bl	801e9ec <HAL_DMA_GetError>
 8021138:	4603      	mov	r3, r0
 802113a:	2b02      	cmp	r3, #2
 802113c:	d03e      	beq.n	80211bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 802113e:	697b      	ldr	r3, [r7, #20]
 8021140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021144:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8021146:	697b      	ldr	r3, [r7, #20]
 8021148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802114a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802114c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 802114e:	693b      	ldr	r3, [r7, #16]
 8021150:	2b01      	cmp	r3, #1
 8021152:	d002      	beq.n	802115a <SD_DMAError+0x36>
 8021154:	68fb      	ldr	r3, [r7, #12]
 8021156:	2b01      	cmp	r3, #1
 8021158:	d12d      	bne.n	80211b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 802115a:	697b      	ldr	r3, [r7, #20]
 802115c:	681b      	ldr	r3, [r3, #0]
 802115e:	4a19      	ldr	r2, [pc, #100]	; (80211c4 <SD_DMAError+0xa0>)
 8021160:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8021162:	697b      	ldr	r3, [r7, #20]
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8021168:	697b      	ldr	r3, [r7, #20]
 802116a:	681b      	ldr	r3, [r3, #0]
 802116c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8021170:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8021172:	697b      	ldr	r3, [r7, #20]
 8021174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021176:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802117a:	697b      	ldr	r3, [r7, #20]
 802117c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 802117e:	6978      	ldr	r0, [r7, #20]
 8021180:	f7ff ff62 	bl	8021048 <HAL_SD_GetCardState>
 8021184:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8021186:	68bb      	ldr	r3, [r7, #8]
 8021188:	2b06      	cmp	r3, #6
 802118a:	d002      	beq.n	8021192 <SD_DMAError+0x6e>
 802118c:	68bb      	ldr	r3, [r7, #8]
 802118e:	2b05      	cmp	r3, #5
 8021190:	d10a      	bne.n	80211a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8021192:	697b      	ldr	r3, [r7, #20]
 8021194:	681b      	ldr	r3, [r3, #0]
 8021196:	4618      	mov	r0, r3
 8021198:	f003 fabc 	bl	8024714 <SDMMC_CmdStopTransfer>
 802119c:	4602      	mov	r2, r0
 802119e:	697b      	ldr	r3, [r7, #20]
 80211a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211a2:	431a      	orrs	r2, r3
 80211a4:	697b      	ldr	r3, [r7, #20]
 80211a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80211a8:	697b      	ldr	r3, [r7, #20]
 80211aa:	2201      	movs	r2, #1
 80211ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80211b0:	697b      	ldr	r3, [r7, #20]
 80211b2:	2200      	movs	r2, #0
 80211b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80211b6:	6978      	ldr	r0, [r7, #20]
 80211b8:	f7ff fce6 	bl	8020b88 <HAL_SD_ErrorCallback>
#endif
  }
}
 80211bc:	bf00      	nop
 80211be:	3718      	adds	r7, #24
 80211c0:	46bd      	mov	sp, r7
 80211c2:	bd80      	pop	{r7, pc}
 80211c4:	004005ff 	.word	0x004005ff

080211c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80211c8:	b580      	push	{r7, lr}
 80211ca:	b084      	sub	sp, #16
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80211d6:	68fb      	ldr	r3, [r7, #12]
 80211d8:	681b      	ldr	r3, [r3, #0]
 80211da:	f240 523a 	movw	r2, #1338	; 0x53a
 80211de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80211e0:	68f8      	ldr	r0, [r7, #12]
 80211e2:	f7ff ff31 	bl	8021048 <HAL_SD_GetCardState>
 80211e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	2201      	movs	r2, #1
 80211ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80211f0:	68fb      	ldr	r3, [r7, #12]
 80211f2:	2200      	movs	r2, #0
 80211f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80211f6:	68bb      	ldr	r3, [r7, #8]
 80211f8:	2b06      	cmp	r3, #6
 80211fa:	d002      	beq.n	8021202 <SD_DMATxAbort+0x3a>
 80211fc:	68bb      	ldr	r3, [r7, #8]
 80211fe:	2b05      	cmp	r3, #5
 8021200:	d10a      	bne.n	8021218 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	681b      	ldr	r3, [r3, #0]
 8021206:	4618      	mov	r0, r3
 8021208:	f003 fa84 	bl	8024714 <SDMMC_CmdStopTransfer>
 802120c:	4602      	mov	r2, r0
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021212:	431a      	orrs	r2, r3
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8021218:	68fb      	ldr	r3, [r7, #12]
 802121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802121c:	2b00      	cmp	r3, #0
 802121e:	d103      	bne.n	8021228 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8021220:	68f8      	ldr	r0, [r7, #12]
 8021222:	f7ff fcbb 	bl	8020b9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8021226:	e002      	b.n	802122e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8021228:	68f8      	ldr	r0, [r7, #12]
 802122a:	f7ff fcad 	bl	8020b88 <HAL_SD_ErrorCallback>
}
 802122e:	bf00      	nop
 8021230:	3710      	adds	r7, #16
 8021232:	46bd      	mov	sp, r7
 8021234:	bd80      	pop	{r7, pc}

08021236 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8021236:	b580      	push	{r7, lr}
 8021238:	b084      	sub	sp, #16
 802123a:	af00      	add	r7, sp, #0
 802123c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021242:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	f240 523a 	movw	r2, #1338	; 0x53a
 802124c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 802124e:	68f8      	ldr	r0, [r7, #12]
 8021250:	f7ff fefa 	bl	8021048 <HAL_SD_GetCardState>
 8021254:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8021256:	68fb      	ldr	r3, [r7, #12]
 8021258:	2201      	movs	r2, #1
 802125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 802125e:	68fb      	ldr	r3, [r7, #12]
 8021260:	2200      	movs	r2, #0
 8021262:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8021264:	68bb      	ldr	r3, [r7, #8]
 8021266:	2b06      	cmp	r3, #6
 8021268:	d002      	beq.n	8021270 <SD_DMARxAbort+0x3a>
 802126a:	68bb      	ldr	r3, [r7, #8]
 802126c:	2b05      	cmp	r3, #5
 802126e:	d10a      	bne.n	8021286 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8021270:	68fb      	ldr	r3, [r7, #12]
 8021272:	681b      	ldr	r3, [r3, #0]
 8021274:	4618      	mov	r0, r3
 8021276:	f003 fa4d 	bl	8024714 <SDMMC_CmdStopTransfer>
 802127a:	4602      	mov	r2, r0
 802127c:	68fb      	ldr	r3, [r7, #12]
 802127e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021280:	431a      	orrs	r2, r3
 8021282:	68fb      	ldr	r3, [r7, #12]
 8021284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802128a:	2b00      	cmp	r3, #0
 802128c:	d103      	bne.n	8021296 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 802128e:	68f8      	ldr	r0, [r7, #12]
 8021290:	f7ff fc84 	bl	8020b9c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8021294:	e002      	b.n	802129c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8021296:	68f8      	ldr	r0, [r7, #12]
 8021298:	f7ff fc76 	bl	8020b88 <HAL_SD_ErrorCallback>
}
 802129c:	bf00      	nop
 802129e:	3710      	adds	r7, #16
 80212a0:	46bd      	mov	sp, r7
 80212a2:	bd80      	pop	{r7, pc}

080212a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80212a4:	b5b0      	push	{r4, r5, r7, lr}
 80212a6:	b094      	sub	sp, #80	; 0x50
 80212a8:	af04      	add	r7, sp, #16
 80212aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80212ac:	2301      	movs	r3, #1
 80212ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	4618      	mov	r0, r3
 80212b6:	f003 f8ff 	bl	80244b8 <SDIO_GetPowerState>
 80212ba:	4603      	mov	r3, r0
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d102      	bne.n	80212c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80212c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80212c4:	e0b8      	b.n	8021438 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80212c6:	687b      	ldr	r3, [r7, #4]
 80212c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80212ca:	2b03      	cmp	r3, #3
 80212cc:	d02f      	beq.n	802132e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	681b      	ldr	r3, [r3, #0]
 80212d2:	4618      	mov	r0, r3
 80212d4:	f003 fb28 	bl	8024928 <SDMMC_CmdSendCID>
 80212d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80212da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80212dc:	2b00      	cmp	r3, #0
 80212de:	d001      	beq.n	80212e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80212e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80212e2:	e0a9      	b.n	8021438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	2100      	movs	r1, #0
 80212ea:	4618      	mov	r0, r3
 80212ec:	f003 f929 	bl	8024542 <SDIO_GetResponse>
 80212f0:	4602      	mov	r2, r0
 80212f2:	687b      	ldr	r3, [r7, #4]
 80212f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	2104      	movs	r1, #4
 80212fc:	4618      	mov	r0, r3
 80212fe:	f003 f920 	bl	8024542 <SDIO_GetResponse>
 8021302:	4602      	mov	r2, r0
 8021304:	687b      	ldr	r3, [r7, #4]
 8021306:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	2108      	movs	r1, #8
 802130e:	4618      	mov	r0, r3
 8021310:	f003 f917 	bl	8024542 <SDIO_GetResponse>
 8021314:	4602      	mov	r2, r0
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	210c      	movs	r1, #12
 8021320:	4618      	mov	r0, r3
 8021322:	f003 f90e 	bl	8024542 <SDIO_GetResponse>
 8021326:	4602      	mov	r2, r0
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021332:	2b03      	cmp	r3, #3
 8021334:	d00d      	beq.n	8021352 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	f107 020e 	add.w	r2, r7, #14
 802133e:	4611      	mov	r1, r2
 8021340:	4618      	mov	r0, r3
 8021342:	f003 fb2e 	bl	80249a2 <SDMMC_CmdSetRelAdd>
 8021346:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8021348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802134a:	2b00      	cmp	r3, #0
 802134c:	d001      	beq.n	8021352 <SD_InitCard+0xae>
    {
      return errorstate;
 802134e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021350:	e072      	b.n	8021438 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021356:	2b03      	cmp	r3, #3
 8021358:	d036      	beq.n	80213c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 802135a:	89fb      	ldrh	r3, [r7, #14]
 802135c:	461a      	mov	r2, r3
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	681a      	ldr	r2, [r3, #0]
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802136a:	041b      	lsls	r3, r3, #16
 802136c:	4619      	mov	r1, r3
 802136e:	4610      	mov	r0, r2
 8021370:	f003 faf8 	bl	8024964 <SDMMC_CmdSendCSD>
 8021374:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8021376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021378:	2b00      	cmp	r3, #0
 802137a:	d001      	beq.n	8021380 <SD_InitCard+0xdc>
    {
      return errorstate;
 802137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802137e:	e05b      	b.n	8021438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	2100      	movs	r1, #0
 8021386:	4618      	mov	r0, r3
 8021388:	f003 f8db 	bl	8024542 <SDIO_GetResponse>
 802138c:	4602      	mov	r2, r0
 802138e:	687b      	ldr	r3, [r7, #4]
 8021390:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	2104      	movs	r1, #4
 8021398:	4618      	mov	r0, r3
 802139a:	f003 f8d2 	bl	8024542 <SDIO_GetResponse>
 802139e:	4602      	mov	r2, r0
 80213a0:	687b      	ldr	r3, [r7, #4]
 80213a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	2108      	movs	r1, #8
 80213aa:	4618      	mov	r0, r3
 80213ac:	f003 f8c9 	bl	8024542 <SDIO_GetResponse>
 80213b0:	4602      	mov	r2, r0
 80213b2:	687b      	ldr	r3, [r7, #4]
 80213b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	210c      	movs	r1, #12
 80213bc:	4618      	mov	r0, r3
 80213be:	f003 f8c0 	bl	8024542 <SDIO_GetResponse>
 80213c2:	4602      	mov	r2, r0
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	681b      	ldr	r3, [r3, #0]
 80213cc:	2104      	movs	r1, #4
 80213ce:	4618      	mov	r0, r3
 80213d0:	f003 f8b7 	bl	8024542 <SDIO_GetResponse>
 80213d4:	4603      	mov	r3, r0
 80213d6:	0d1a      	lsrs	r2, r3, #20
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80213dc:	f107 0310 	add.w	r3, r7, #16
 80213e0:	4619      	mov	r1, r3
 80213e2:	6878      	ldr	r0, [r7, #4]
 80213e4:	f7ff fbe4 	bl	8020bb0 <HAL_SD_GetCardCSD>
 80213e8:	4603      	mov	r3, r0
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d002      	beq.n	80213f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80213ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80213f2:	e021      	b.n	8021438 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	6819      	ldr	r1, [r3, #0]
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80213fc:	041b      	lsls	r3, r3, #16
 80213fe:	2200      	movs	r2, #0
 8021400:	461c      	mov	r4, r3
 8021402:	4615      	mov	r5, r2
 8021404:	4622      	mov	r2, r4
 8021406:	462b      	mov	r3, r5
 8021408:	4608      	mov	r0, r1
 802140a:	f003 f9a5 	bl	8024758 <SDMMC_CmdSelDesel>
 802140e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8021410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021412:	2b00      	cmp	r3, #0
 8021414:	d001      	beq.n	802141a <SD_InitCard+0x176>
  {
    return errorstate;
 8021416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021418:	e00e      	b.n	8021438 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 802141a:	687b      	ldr	r3, [r7, #4]
 802141c:	681d      	ldr	r5, [r3, #0]
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	466c      	mov	r4, sp
 8021422:	f103 0210 	add.w	r2, r3, #16
 8021426:	ca07      	ldmia	r2, {r0, r1, r2}
 8021428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802142c:	3304      	adds	r3, #4
 802142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021430:	4628      	mov	r0, r5
 8021432:	f002 ffe9 	bl	8024408 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8021436:	2300      	movs	r3, #0
}
 8021438:	4618      	mov	r0, r3
 802143a:	3740      	adds	r7, #64	; 0x40
 802143c:	46bd      	mov	sp, r7
 802143e:	bdb0      	pop	{r4, r5, r7, pc}

08021440 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8021440:	b580      	push	{r7, lr}
 8021442:	b086      	sub	sp, #24
 8021444:	af00      	add	r7, sp, #0
 8021446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8021448:	2300      	movs	r3, #0
 802144a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 802144c:	2300      	movs	r3, #0
 802144e:	617b      	str	r3, [r7, #20]
 8021450:	2300      	movs	r3, #0
 8021452:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	4618      	mov	r0, r3
 802145a:	f003 f9a0 	bl	802479e <SDMMC_CmdGoIdleState>
 802145e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021460:	68fb      	ldr	r3, [r7, #12]
 8021462:	2b00      	cmp	r3, #0
 8021464:	d001      	beq.n	802146a <SD_PowerON+0x2a>
  {
    return errorstate;
 8021466:	68fb      	ldr	r3, [r7, #12]
 8021468:	e072      	b.n	8021550 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	4618      	mov	r0, r3
 8021470:	f003 f9b3 	bl	80247da <SDMMC_CmdOperCond>
 8021474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021476:	68fb      	ldr	r3, [r7, #12]
 8021478:	2b00      	cmp	r3, #0
 802147a:	d00d      	beq.n	8021498 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	2200      	movs	r2, #0
 8021480:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	4618      	mov	r0, r3
 8021488:	f003 f989 	bl	802479e <SDMMC_CmdGoIdleState>
 802148c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 802148e:	68fb      	ldr	r3, [r7, #12]
 8021490:	2b00      	cmp	r3, #0
 8021492:	d004      	beq.n	802149e <SD_PowerON+0x5e>
    {
      return errorstate;
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	e05b      	b.n	8021550 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	2201      	movs	r2, #1
 802149c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 802149e:	687b      	ldr	r3, [r7, #4]
 80214a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80214a2:	2b01      	cmp	r3, #1
 80214a4:	d137      	bne.n	8021516 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	2100      	movs	r1, #0
 80214ac:	4618      	mov	r0, r3
 80214ae:	f003 f9b3 	bl	8024818 <SDMMC_CmdAppCommand>
 80214b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80214b4:	68fb      	ldr	r3, [r7, #12]
 80214b6:	2b00      	cmp	r3, #0
 80214b8:	d02d      	beq.n	8021516 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80214ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80214be:	e047      	b.n	8021550 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80214c0:	687b      	ldr	r3, [r7, #4]
 80214c2:	681b      	ldr	r3, [r3, #0]
 80214c4:	2100      	movs	r1, #0
 80214c6:	4618      	mov	r0, r3
 80214c8:	f003 f9a6 	bl	8024818 <SDMMC_CmdAppCommand>
 80214cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80214ce:	68fb      	ldr	r3, [r7, #12]
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	d001      	beq.n	80214d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80214d4:	68fb      	ldr	r3, [r7, #12]
 80214d6:	e03b      	b.n	8021550 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	491e      	ldr	r1, [pc, #120]	; (8021558 <SD_PowerON+0x118>)
 80214de:	4618      	mov	r0, r3
 80214e0:	f003 f9bc 	bl	802485c <SDMMC_CmdAppOperCommand>
 80214e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80214e6:	68fb      	ldr	r3, [r7, #12]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d002      	beq.n	80214f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80214ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80214f0:	e02e      	b.n	8021550 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80214f2:	687b      	ldr	r3, [r7, #4]
 80214f4:	681b      	ldr	r3, [r3, #0]
 80214f6:	2100      	movs	r1, #0
 80214f8:	4618      	mov	r0, r3
 80214fa:	f003 f822 	bl	8024542 <SDIO_GetResponse>
 80214fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8021500:	697b      	ldr	r3, [r7, #20]
 8021502:	0fdb      	lsrs	r3, r3, #31
 8021504:	2b01      	cmp	r3, #1
 8021506:	d101      	bne.n	802150c <SD_PowerON+0xcc>
 8021508:	2301      	movs	r3, #1
 802150a:	e000      	b.n	802150e <SD_PowerON+0xce>
 802150c:	2300      	movs	r3, #0
 802150e:	613b      	str	r3, [r7, #16]

    count++;
 8021510:	68bb      	ldr	r3, [r7, #8]
 8021512:	3301      	adds	r3, #1
 8021514:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8021516:	68bb      	ldr	r3, [r7, #8]
 8021518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802151c:	4293      	cmp	r3, r2
 802151e:	d802      	bhi.n	8021526 <SD_PowerON+0xe6>
 8021520:	693b      	ldr	r3, [r7, #16]
 8021522:	2b00      	cmp	r3, #0
 8021524:	d0cc      	beq.n	80214c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8021526:	68bb      	ldr	r3, [r7, #8]
 8021528:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802152c:	4293      	cmp	r3, r2
 802152e:	d902      	bls.n	8021536 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8021530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8021534:	e00c      	b.n	8021550 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8021536:	697b      	ldr	r3, [r7, #20]
 8021538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 802153c:	2b00      	cmp	r3, #0
 802153e:	d003      	beq.n	8021548 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	2201      	movs	r2, #1
 8021544:	645a      	str	r2, [r3, #68]	; 0x44
 8021546:	e002      	b.n	802154e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	2200      	movs	r2, #0
 802154c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 802154e:	2300      	movs	r3, #0
}
 8021550:	4618      	mov	r0, r3
 8021552:	3718      	adds	r7, #24
 8021554:	46bd      	mov	sp, r7
 8021556:	bd80      	pop	{r7, pc}
 8021558:	c1100000 	.word	0xc1100000

0802155c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 802155c:	b580      	push	{r7, lr}
 802155e:	b084      	sub	sp, #16
 8021560:	af00      	add	r7, sp, #0
 8021562:	6078      	str	r0, [r7, #4]
 8021564:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8021566:	683b      	ldr	r3, [r7, #0]
 8021568:	2b00      	cmp	r3, #0
 802156a:	d102      	bne.n	8021572 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 802156c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021570:	e018      	b.n	80215a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	681a      	ldr	r2, [r3, #0]
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802157a:	041b      	lsls	r3, r3, #16
 802157c:	4619      	mov	r1, r3
 802157e:	4610      	mov	r0, r2
 8021580:	f003 fa30 	bl	80249e4 <SDMMC_CmdSendStatus>
 8021584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	2b00      	cmp	r3, #0
 802158a:	d001      	beq.n	8021590 <SD_SendStatus+0x34>
  {
    return errorstate;
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	e009      	b.n	80215a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8021590:	687b      	ldr	r3, [r7, #4]
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	2100      	movs	r1, #0
 8021596:	4618      	mov	r0, r3
 8021598:	f002 ffd3 	bl	8024542 <SDIO_GetResponse>
 802159c:	4602      	mov	r2, r0
 802159e:	683b      	ldr	r3, [r7, #0]
 80215a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80215a2:	2300      	movs	r3, #0
}
 80215a4:	4618      	mov	r0, r3
 80215a6:	3710      	adds	r7, #16
 80215a8:	46bd      	mov	sp, r7
 80215aa:	bd80      	pop	{r7, pc}

080215ac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80215ac:	b580      	push	{r7, lr}
 80215ae:	b086      	sub	sp, #24
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80215b4:	2300      	movs	r3, #0
 80215b6:	60fb      	str	r3, [r7, #12]
 80215b8:	2300      	movs	r3, #0
 80215ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	2100      	movs	r1, #0
 80215c2:	4618      	mov	r0, r3
 80215c4:	f002 ffbd 	bl	8024542 <SDIO_GetResponse>
 80215c8:	4603      	mov	r3, r0
 80215ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80215ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80215d2:	d102      	bne.n	80215da <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80215d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80215d8:	e02f      	b.n	802163a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80215da:	f107 030c 	add.w	r3, r7, #12
 80215de:	4619      	mov	r1, r3
 80215e0:	6878      	ldr	r0, [r7, #4]
 80215e2:	f000 f879 	bl	80216d8 <SD_FindSCR>
 80215e6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80215e8:	697b      	ldr	r3, [r7, #20]
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d001      	beq.n	80215f2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80215ee:	697b      	ldr	r3, [r7, #20]
 80215f0:	e023      	b.n	802163a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80215f2:	693b      	ldr	r3, [r7, #16]
 80215f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d01c      	beq.n	8021636 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	681a      	ldr	r2, [r3, #0]
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021604:	041b      	lsls	r3, r3, #16
 8021606:	4619      	mov	r1, r3
 8021608:	4610      	mov	r0, r2
 802160a:	f003 f905 	bl	8024818 <SDMMC_CmdAppCommand>
 802160e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8021610:	697b      	ldr	r3, [r7, #20]
 8021612:	2b00      	cmp	r3, #0
 8021614:	d001      	beq.n	802161a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8021616:	697b      	ldr	r3, [r7, #20]
 8021618:	e00f      	b.n	802163a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	2102      	movs	r1, #2
 8021620:	4618      	mov	r0, r3
 8021622:	f003 f93e 	bl	80248a2 <SDMMC_CmdBusWidth>
 8021626:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8021628:	697b      	ldr	r3, [r7, #20]
 802162a:	2b00      	cmp	r3, #0
 802162c:	d001      	beq.n	8021632 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 802162e:	697b      	ldr	r3, [r7, #20]
 8021630:	e003      	b.n	802163a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8021632:	2300      	movs	r3, #0
 8021634:	e001      	b.n	802163a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8021636:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 802163a:	4618      	mov	r0, r3
 802163c:	3718      	adds	r7, #24
 802163e:	46bd      	mov	sp, r7
 8021640:	bd80      	pop	{r7, pc}

08021642 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8021642:	b580      	push	{r7, lr}
 8021644:	b086      	sub	sp, #24
 8021646:	af00      	add	r7, sp, #0
 8021648:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 802164a:	2300      	movs	r3, #0
 802164c:	60fb      	str	r3, [r7, #12]
 802164e:	2300      	movs	r3, #0
 8021650:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	2100      	movs	r1, #0
 8021658:	4618      	mov	r0, r3
 802165a:	f002 ff72 	bl	8024542 <SDIO_GetResponse>
 802165e:	4603      	mov	r3, r0
 8021660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021664:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8021668:	d102      	bne.n	8021670 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 802166a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802166e:	e02f      	b.n	80216d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8021670:	f107 030c 	add.w	r3, r7, #12
 8021674:	4619      	mov	r1, r3
 8021676:	6878      	ldr	r0, [r7, #4]
 8021678:	f000 f82e 	bl	80216d8 <SD_FindSCR>
 802167c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 802167e:	697b      	ldr	r3, [r7, #20]
 8021680:	2b00      	cmp	r3, #0
 8021682:	d001      	beq.n	8021688 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8021684:	697b      	ldr	r3, [r7, #20]
 8021686:	e023      	b.n	80216d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8021688:	693b      	ldr	r3, [r7, #16]
 802168a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802168e:	2b00      	cmp	r3, #0
 8021690:	d01c      	beq.n	80216cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	681a      	ldr	r2, [r3, #0]
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802169a:	041b      	lsls	r3, r3, #16
 802169c:	4619      	mov	r1, r3
 802169e:	4610      	mov	r0, r2
 80216a0:	f003 f8ba 	bl	8024818 <SDMMC_CmdAppCommand>
 80216a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80216a6:	697b      	ldr	r3, [r7, #20]
 80216a8:	2b00      	cmp	r3, #0
 80216aa:	d001      	beq.n	80216b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80216ac:	697b      	ldr	r3, [r7, #20]
 80216ae:	e00f      	b.n	80216d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	2100      	movs	r1, #0
 80216b6:	4618      	mov	r0, r3
 80216b8:	f003 f8f3 	bl	80248a2 <SDMMC_CmdBusWidth>
 80216bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80216be:	697b      	ldr	r3, [r7, #20]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d001      	beq.n	80216c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80216c4:	697b      	ldr	r3, [r7, #20]
 80216c6:	e003      	b.n	80216d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80216c8:	2300      	movs	r3, #0
 80216ca:	e001      	b.n	80216d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80216cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80216d0:	4618      	mov	r0, r3
 80216d2:	3718      	adds	r7, #24
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}

080216d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80216d8:	b590      	push	{r4, r7, lr}
 80216da:	b08f      	sub	sp, #60	; 0x3c
 80216dc:	af00      	add	r7, sp, #0
 80216de:	6078      	str	r0, [r7, #4]
 80216e0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80216e2:	f7fb ffc5 	bl	801d670 <HAL_GetTick>
 80216e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80216e8:	2300      	movs	r3, #0
 80216ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80216ec:	2300      	movs	r3, #0
 80216ee:	60bb      	str	r3, [r7, #8]
 80216f0:	2300      	movs	r3, #0
 80216f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80216f4:	683b      	ldr	r3, [r7, #0]
 80216f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	2108      	movs	r1, #8
 80216fe:	4618      	mov	r0, r3
 8021700:	f002 ff5e 	bl	80245c0 <SDMMC_CmdBlockLength>
 8021704:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8021706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021708:	2b00      	cmp	r3, #0
 802170a:	d001      	beq.n	8021710 <SD_FindSCR+0x38>
  {
    return errorstate;
 802170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802170e:	e0a9      	b.n	8021864 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	681a      	ldr	r2, [r3, #0]
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021718:	041b      	lsls	r3, r3, #16
 802171a:	4619      	mov	r1, r3
 802171c:	4610      	mov	r0, r2
 802171e:	f003 f87b 	bl	8024818 <SDMMC_CmdAppCommand>
 8021722:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8021724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021726:	2b00      	cmp	r3, #0
 8021728:	d001      	beq.n	802172e <SD_FindSCR+0x56>
  {
    return errorstate;
 802172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802172c:	e09a      	b.n	8021864 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 802172e:	f04f 33ff 	mov.w	r3, #4294967295
 8021732:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8021734:	2308      	movs	r3, #8
 8021736:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8021738:	2330      	movs	r3, #48	; 0x30
 802173a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 802173c:	2302      	movs	r3, #2
 802173e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8021740:	2300      	movs	r3, #0
 8021742:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8021744:	2301      	movs	r3, #1
 8021746:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	f107 0210 	add.w	r2, r7, #16
 8021750:	4611      	mov	r1, r2
 8021752:	4618      	mov	r0, r3
 8021754:	f002 ff08 	bl	8024568 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	681b      	ldr	r3, [r3, #0]
 802175c:	4618      	mov	r0, r3
 802175e:	f003 f8c2 	bl	80248e6 <SDMMC_CmdSendSCR>
 8021762:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8021764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021766:	2b00      	cmp	r3, #0
 8021768:	d022      	beq.n	80217b0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 802176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802176c:	e07a      	b.n	8021864 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021778:	2b00      	cmp	r3, #0
 802177a:	d00e      	beq.n	802179a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	6819      	ldr	r1, [r3, #0]
 8021780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021782:	009b      	lsls	r3, r3, #2
 8021784:	f107 0208 	add.w	r2, r7, #8
 8021788:	18d4      	adds	r4, r2, r3
 802178a:	4608      	mov	r0, r1
 802178c:	f002 fe67 	bl	802445e <SDIO_ReadFIFO>
 8021790:	4603      	mov	r3, r0
 8021792:	6023      	str	r3, [r4, #0]
      index++;
 8021794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021796:	3301      	adds	r3, #1
 8021798:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 802179a:	f7fb ff69 	bl	801d670 <HAL_GetTick>
 802179e:	4602      	mov	r2, r0
 80217a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217a2:	1ad3      	subs	r3, r2, r3
 80217a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217a8:	d102      	bne.n	80217b0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80217aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80217ae:	e059      	b.n	8021864 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	681b      	ldr	r3, [r3, #0]
 80217b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80217b6:	f240 432a 	movw	r3, #1066	; 0x42a
 80217ba:	4013      	ands	r3, r2
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d0d6      	beq.n	802176e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217c6:	f003 0308 	and.w	r3, r3, #8
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d005      	beq.n	80217da <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	681b      	ldr	r3, [r3, #0]
 80217d2:	2208      	movs	r2, #8
 80217d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80217d6:	2308      	movs	r3, #8
 80217d8:	e044      	b.n	8021864 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	681b      	ldr	r3, [r3, #0]
 80217de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217e0:	f003 0302 	and.w	r3, r3, #2
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d005      	beq.n	80217f4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	2202      	movs	r2, #2
 80217ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80217f0:	2302      	movs	r3, #2
 80217f2:	e037      	b.n	8021864 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217fa:	f003 0320 	and.w	r3, r3, #32
 80217fe:	2b00      	cmp	r3, #0
 8021800:	d005      	beq.n	802180e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	681b      	ldr	r3, [r3, #0]
 8021806:	2220      	movs	r2, #32
 8021808:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 802180a:	2320      	movs	r3, #32
 802180c:	e02a      	b.n	8021864 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 802180e:	687b      	ldr	r3, [r7, #4]
 8021810:	681b      	ldr	r3, [r3, #0]
 8021812:	f240 523a 	movw	r2, #1338	; 0x53a
 8021816:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8021818:	68fb      	ldr	r3, [r7, #12]
 802181a:	061a      	lsls	r2, r3, #24
 802181c:	68fb      	ldr	r3, [r7, #12]
 802181e:	021b      	lsls	r3, r3, #8
 8021820:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8021824:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8021826:	68fb      	ldr	r3, [r7, #12]
 8021828:	0a1b      	lsrs	r3, r3, #8
 802182a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 802182e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8021830:	68fb      	ldr	r3, [r7, #12]
 8021832:	0e1b      	lsrs	r3, r3, #24
 8021834:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8021836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021838:	601a      	str	r2, [r3, #0]
    scr++;
 802183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802183c:	3304      	adds	r3, #4
 802183e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8021840:	68bb      	ldr	r3, [r7, #8]
 8021842:	061a      	lsls	r2, r3, #24
 8021844:	68bb      	ldr	r3, [r7, #8]
 8021846:	021b      	lsls	r3, r3, #8
 8021848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802184c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 802184e:	68bb      	ldr	r3, [r7, #8]
 8021850:	0a1b      	lsrs	r3, r3, #8
 8021852:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8021856:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8021858:	68bb      	ldr	r3, [r7, #8]
 802185a:	0e1b      	lsrs	r3, r3, #24
 802185c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 802185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021860:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8021862:	2300      	movs	r3, #0
}
 8021864:	4618      	mov	r0, r3
 8021866:	373c      	adds	r7, #60	; 0x3c
 8021868:	46bd      	mov	sp, r7
 802186a:	bd90      	pop	{r4, r7, pc}

0802186c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b086      	sub	sp, #24
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021878:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802187e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8021880:	693b      	ldr	r3, [r7, #16]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d03f      	beq.n	8021906 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8021886:	2300      	movs	r3, #0
 8021888:	617b      	str	r3, [r7, #20]
 802188a:	e033      	b.n	80218f4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 802188c:	687b      	ldr	r3, [r7, #4]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	4618      	mov	r0, r3
 8021892:	f002 fde4 	bl	802445e <SDIO_ReadFIFO>
 8021896:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8021898:	68bb      	ldr	r3, [r7, #8]
 802189a:	b2da      	uxtb	r2, r3
 802189c:	68fb      	ldr	r3, [r7, #12]
 802189e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	3301      	adds	r3, #1
 80218a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80218a6:	693b      	ldr	r3, [r7, #16]
 80218a8:	3b01      	subs	r3, #1
 80218aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80218ac:	68bb      	ldr	r3, [r7, #8]
 80218ae:	0a1b      	lsrs	r3, r3, #8
 80218b0:	b2da      	uxtb	r2, r3
 80218b2:	68fb      	ldr	r3, [r7, #12]
 80218b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	3301      	adds	r3, #1
 80218ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80218bc:	693b      	ldr	r3, [r7, #16]
 80218be:	3b01      	subs	r3, #1
 80218c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80218c2:	68bb      	ldr	r3, [r7, #8]
 80218c4:	0c1b      	lsrs	r3, r3, #16
 80218c6:	b2da      	uxtb	r2, r3
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80218cc:	68fb      	ldr	r3, [r7, #12]
 80218ce:	3301      	adds	r3, #1
 80218d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80218d2:	693b      	ldr	r3, [r7, #16]
 80218d4:	3b01      	subs	r3, #1
 80218d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80218d8:	68bb      	ldr	r3, [r7, #8]
 80218da:	0e1b      	lsrs	r3, r3, #24
 80218dc:	b2da      	uxtb	r2, r3
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	3301      	adds	r3, #1
 80218e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80218e8:	693b      	ldr	r3, [r7, #16]
 80218ea:	3b01      	subs	r3, #1
 80218ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80218ee:	697b      	ldr	r3, [r7, #20]
 80218f0:	3301      	adds	r3, #1
 80218f2:	617b      	str	r3, [r7, #20]
 80218f4:	697b      	ldr	r3, [r7, #20]
 80218f6:	2b07      	cmp	r3, #7
 80218f8:	d9c8      	bls.n	802188c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80218fa:	687b      	ldr	r3, [r7, #4]
 80218fc:	68fa      	ldr	r2, [r7, #12]
 80218fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	693a      	ldr	r2, [r7, #16]
 8021904:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8021906:	bf00      	nop
 8021908:	3718      	adds	r7, #24
 802190a:	46bd      	mov	sp, r7
 802190c:	bd80      	pop	{r7, pc}

0802190e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 802190e:	b580      	push	{r7, lr}
 8021910:	b086      	sub	sp, #24
 8021912:	af00      	add	r7, sp, #0
 8021914:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8021916:	687b      	ldr	r3, [r7, #4]
 8021918:	6a1b      	ldr	r3, [r3, #32]
 802191a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 802191c:	687b      	ldr	r3, [r7, #4]
 802191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021920:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8021922:	693b      	ldr	r3, [r7, #16]
 8021924:	2b00      	cmp	r3, #0
 8021926:	d043      	beq.n	80219b0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8021928:	2300      	movs	r3, #0
 802192a:	617b      	str	r3, [r7, #20]
 802192c:	e037      	b.n	802199e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	781b      	ldrb	r3, [r3, #0]
 8021932:	60bb      	str	r3, [r7, #8]
      tmp++;
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	3301      	adds	r3, #1
 8021938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 802193a:	693b      	ldr	r3, [r7, #16]
 802193c:	3b01      	subs	r3, #1
 802193e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8021940:	68fb      	ldr	r3, [r7, #12]
 8021942:	781b      	ldrb	r3, [r3, #0]
 8021944:	021a      	lsls	r2, r3, #8
 8021946:	68bb      	ldr	r3, [r7, #8]
 8021948:	4313      	orrs	r3, r2
 802194a:	60bb      	str	r3, [r7, #8]
      tmp++;
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	3301      	adds	r3, #1
 8021950:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8021952:	693b      	ldr	r3, [r7, #16]
 8021954:	3b01      	subs	r3, #1
 8021956:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8021958:	68fb      	ldr	r3, [r7, #12]
 802195a:	781b      	ldrb	r3, [r3, #0]
 802195c:	041a      	lsls	r2, r3, #16
 802195e:	68bb      	ldr	r3, [r7, #8]
 8021960:	4313      	orrs	r3, r2
 8021962:	60bb      	str	r3, [r7, #8]
      tmp++;
 8021964:	68fb      	ldr	r3, [r7, #12]
 8021966:	3301      	adds	r3, #1
 8021968:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 802196a:	693b      	ldr	r3, [r7, #16]
 802196c:	3b01      	subs	r3, #1
 802196e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8021970:	68fb      	ldr	r3, [r7, #12]
 8021972:	781b      	ldrb	r3, [r3, #0]
 8021974:	061a      	lsls	r2, r3, #24
 8021976:	68bb      	ldr	r3, [r7, #8]
 8021978:	4313      	orrs	r3, r2
 802197a:	60bb      	str	r3, [r7, #8]
      tmp++;
 802197c:	68fb      	ldr	r3, [r7, #12]
 802197e:	3301      	adds	r3, #1
 8021980:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8021982:	693b      	ldr	r3, [r7, #16]
 8021984:	3b01      	subs	r3, #1
 8021986:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8021988:	687b      	ldr	r3, [r7, #4]
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	f107 0208 	add.w	r2, r7, #8
 8021990:	4611      	mov	r1, r2
 8021992:	4618      	mov	r0, r3
 8021994:	f002 fd70 	bl	8024478 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8021998:	697b      	ldr	r3, [r7, #20]
 802199a:	3301      	adds	r3, #1
 802199c:	617b      	str	r3, [r7, #20]
 802199e:	697b      	ldr	r3, [r7, #20]
 80219a0:	2b07      	cmp	r3, #7
 80219a2:	d9c4      	bls.n	802192e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	68fa      	ldr	r2, [r7, #12]
 80219a8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	693a      	ldr	r2, [r7, #16]
 80219ae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80219b0:	bf00      	nop
 80219b2:	3718      	adds	r7, #24
 80219b4:	46bd      	mov	sp, r7
 80219b6:	bd80      	pop	{r7, pc}

080219b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80219b8:	b580      	push	{r7, lr}
 80219ba:	b082      	sub	sp, #8
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	2b00      	cmp	r3, #0
 80219c4:	d101      	bne.n	80219ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80219c6:	2301      	movs	r3, #1
 80219c8:	e056      	b.n	8021a78 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80219ca:	687b      	ldr	r3, [r7, #4]
 80219cc:	2200      	movs	r2, #0
 80219ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80219d0:	687b      	ldr	r3, [r7, #4]
 80219d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80219d6:	b2db      	uxtb	r3, r3
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d106      	bne.n	80219ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80219dc:	687b      	ldr	r3, [r7, #4]
 80219de:	2200      	movs	r2, #0
 80219e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80219e4:	6878      	ldr	r0, [r7, #4]
 80219e6:	f7f5 fdd3 	bl	8017590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80219ea:	687b      	ldr	r3, [r7, #4]
 80219ec:	2202      	movs	r2, #2
 80219ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80219f2:	687b      	ldr	r3, [r7, #4]
 80219f4:	681b      	ldr	r3, [r3, #0]
 80219f6:	681a      	ldr	r2, [r3, #0]
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021a00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	685a      	ldr	r2, [r3, #4]
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	689b      	ldr	r3, [r3, #8]
 8021a0a:	431a      	orrs	r2, r3
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	68db      	ldr	r3, [r3, #12]
 8021a10:	431a      	orrs	r2, r3
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	691b      	ldr	r3, [r3, #16]
 8021a16:	431a      	orrs	r2, r3
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	695b      	ldr	r3, [r3, #20]
 8021a1c:	431a      	orrs	r2, r3
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	699b      	ldr	r3, [r3, #24]
 8021a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8021a26:	431a      	orrs	r2, r3
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	69db      	ldr	r3, [r3, #28]
 8021a2c:	431a      	orrs	r2, r3
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	6a1b      	ldr	r3, [r3, #32]
 8021a32:	ea42 0103 	orr.w	r1, r2, r3
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	430a      	orrs	r2, r1
 8021a40:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	699b      	ldr	r3, [r3, #24]
 8021a46:	0c1b      	lsrs	r3, r3, #16
 8021a48:	f003 0104 	and.w	r1, r3, #4
 8021a4c:	687b      	ldr	r3, [r7, #4]
 8021a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021a50:	687b      	ldr	r3, [r7, #4]
 8021a52:	681b      	ldr	r3, [r3, #0]
 8021a54:	430a      	orrs	r2, r1
 8021a56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	69da      	ldr	r2, [r3, #28]
 8021a5e:	687b      	ldr	r3, [r7, #4]
 8021a60:	681b      	ldr	r3, [r3, #0]
 8021a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8021a66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021a68:	687b      	ldr	r3, [r7, #4]
 8021a6a:	2200      	movs	r2, #0
 8021a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	2201      	movs	r2, #1
 8021a72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8021a76:	2300      	movs	r3, #0
}
 8021a78:	4618      	mov	r0, r3
 8021a7a:	3708      	adds	r7, #8
 8021a7c:	46bd      	mov	sp, r7
 8021a7e:	bd80      	pop	{r7, pc}

08021a80 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b082      	sub	sp, #8
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	2b00      	cmp	r3, #0
 8021a8c:	d101      	bne.n	8021a92 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8021a8e:	2301      	movs	r3, #1
 8021a90:	e01a      	b.n	8021ac8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	2202      	movs	r2, #2
 8021a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	681a      	ldr	r2, [r3, #0]
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	681b      	ldr	r3, [r3, #0]
 8021aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021aa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8021aaa:	6878      	ldr	r0, [r7, #4]
 8021aac:	f7f5 fe0a 	bl	80176c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021ab0:	687b      	ldr	r3, [r7, #4]
 8021ab2:	2200      	movs	r2, #0
 8021ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	2200      	movs	r2, #0
 8021aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	2200      	movs	r2, #0
 8021ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8021ac6:	2300      	movs	r3, #0
}
 8021ac8:	4618      	mov	r0, r3
 8021aca:	3708      	adds	r7, #8
 8021acc:	46bd      	mov	sp, r7
 8021ace:	bd80      	pop	{r7, pc}

08021ad0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8021ad0:	b580      	push	{r7, lr}
 8021ad2:	b08c      	sub	sp, #48	; 0x30
 8021ad4:	af00      	add	r7, sp, #0
 8021ad6:	60f8      	str	r0, [r7, #12]
 8021ad8:	60b9      	str	r1, [r7, #8]
 8021ada:	607a      	str	r2, [r7, #4]
 8021adc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8021ade:	2301      	movs	r3, #1
 8021ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8021aee:	2b01      	cmp	r3, #1
 8021af0:	d101      	bne.n	8021af6 <HAL_SPI_TransmitReceive+0x26>
 8021af2:	2302      	movs	r3, #2
 8021af4:	e18a      	b.n	8021e0c <HAL_SPI_TransmitReceive+0x33c>
 8021af6:	68fb      	ldr	r3, [r7, #12]
 8021af8:	2201      	movs	r2, #1
 8021afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8021afe:	f7fb fdb7 	bl	801d670 <HAL_GetTick>
 8021b02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8021b04:	68fb      	ldr	r3, [r7, #12]
 8021b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8021b0e:	68fb      	ldr	r3, [r7, #12]
 8021b10:	685b      	ldr	r3, [r3, #4]
 8021b12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8021b14:	887b      	ldrh	r3, [r7, #2]
 8021b16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8021b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021b1c:	2b01      	cmp	r3, #1
 8021b1e:	d00f      	beq.n	8021b40 <HAL_SPI_TransmitReceive+0x70>
 8021b20:	69fb      	ldr	r3, [r7, #28]
 8021b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8021b26:	d107      	bne.n	8021b38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	689b      	ldr	r3, [r3, #8]
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	d103      	bne.n	8021b38 <HAL_SPI_TransmitReceive+0x68>
 8021b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021b34:	2b04      	cmp	r3, #4
 8021b36:	d003      	beq.n	8021b40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8021b38:	2302      	movs	r3, #2
 8021b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8021b3e:	e15b      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8021b40:	68bb      	ldr	r3, [r7, #8]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d005      	beq.n	8021b52 <HAL_SPI_TransmitReceive+0x82>
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d002      	beq.n	8021b52 <HAL_SPI_TransmitReceive+0x82>
 8021b4c:	887b      	ldrh	r3, [r7, #2]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d103      	bne.n	8021b5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8021b52:	2301      	movs	r3, #1
 8021b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8021b58:	e14e      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8021b5a:	68fb      	ldr	r3, [r7, #12]
 8021b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021b60:	b2db      	uxtb	r3, r3
 8021b62:	2b04      	cmp	r3, #4
 8021b64:	d003      	beq.n	8021b6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8021b66:	68fb      	ldr	r3, [r7, #12]
 8021b68:	2205      	movs	r2, #5
 8021b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021b6e:	68fb      	ldr	r3, [r7, #12]
 8021b70:	2200      	movs	r2, #0
 8021b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	687a      	ldr	r2, [r7, #4]
 8021b78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	887a      	ldrh	r2, [r7, #2]
 8021b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	887a      	ldrh	r2, [r7, #2]
 8021b84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8021b86:	68fb      	ldr	r3, [r7, #12]
 8021b88:	68ba      	ldr	r2, [r7, #8]
 8021b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8021b8c:	68fb      	ldr	r3, [r7, #12]
 8021b8e:	887a      	ldrh	r2, [r7, #2]
 8021b90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	887a      	ldrh	r2, [r7, #2]
 8021b96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8021b98:	68fb      	ldr	r3, [r7, #12]
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	2200      	movs	r2, #0
 8021ba2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8021ba4:	68fb      	ldr	r3, [r7, #12]
 8021ba6:	681b      	ldr	r3, [r3, #0]
 8021ba8:	681b      	ldr	r3, [r3, #0]
 8021baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021bae:	2b40      	cmp	r3, #64	; 0x40
 8021bb0:	d007      	beq.n	8021bc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8021bb2:	68fb      	ldr	r3, [r7, #12]
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	681a      	ldr	r2, [r3, #0]
 8021bb8:	68fb      	ldr	r3, [r7, #12]
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8021bc2:	68fb      	ldr	r3, [r7, #12]
 8021bc4:	68db      	ldr	r3, [r3, #12]
 8021bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021bca:	d178      	bne.n	8021cbe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8021bcc:	68fb      	ldr	r3, [r7, #12]
 8021bce:	685b      	ldr	r3, [r3, #4]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d002      	beq.n	8021bda <HAL_SPI_TransmitReceive+0x10a>
 8021bd4:	8b7b      	ldrh	r3, [r7, #26]
 8021bd6:	2b01      	cmp	r3, #1
 8021bd8:	d166      	bne.n	8021ca8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8021bda:	68fb      	ldr	r3, [r7, #12]
 8021bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bde:	881a      	ldrh	r2, [r3, #0]
 8021be0:	68fb      	ldr	r3, [r7, #12]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8021be6:	68fb      	ldr	r3, [r7, #12]
 8021be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bea:	1c9a      	adds	r2, r3, #2
 8021bec:	68fb      	ldr	r3, [r7, #12]
 8021bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8021bf0:	68fb      	ldr	r3, [r7, #12]
 8021bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021bf4:	b29b      	uxth	r3, r3
 8021bf6:	3b01      	subs	r3, #1
 8021bf8:	b29a      	uxth	r2, r3
 8021bfa:	68fb      	ldr	r3, [r7, #12]
 8021bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021bfe:	e053      	b.n	8021ca8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8021c00:	68fb      	ldr	r3, [r7, #12]
 8021c02:	681b      	ldr	r3, [r3, #0]
 8021c04:	689b      	ldr	r3, [r3, #8]
 8021c06:	f003 0302 	and.w	r3, r3, #2
 8021c0a:	2b02      	cmp	r3, #2
 8021c0c:	d11b      	bne.n	8021c46 <HAL_SPI_TransmitReceive+0x176>
 8021c0e:	68fb      	ldr	r3, [r7, #12]
 8021c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d016      	beq.n	8021c46 <HAL_SPI_TransmitReceive+0x176>
 8021c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c1a:	2b01      	cmp	r3, #1
 8021c1c:	d113      	bne.n	8021c46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8021c1e:	68fb      	ldr	r3, [r7, #12]
 8021c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c22:	881a      	ldrh	r2, [r3, #0]
 8021c24:	68fb      	ldr	r3, [r7, #12]
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c2e:	1c9a      	adds	r2, r3, #2
 8021c30:	68fb      	ldr	r3, [r7, #12]
 8021c32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8021c34:	68fb      	ldr	r3, [r7, #12]
 8021c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021c38:	b29b      	uxth	r3, r3
 8021c3a:	3b01      	subs	r3, #1
 8021c3c:	b29a      	uxth	r2, r3
 8021c3e:	68fb      	ldr	r3, [r7, #12]
 8021c40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8021c42:	2300      	movs	r3, #0
 8021c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8021c46:	68fb      	ldr	r3, [r7, #12]
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	689b      	ldr	r3, [r3, #8]
 8021c4c:	f003 0301 	and.w	r3, r3, #1
 8021c50:	2b01      	cmp	r3, #1
 8021c52:	d119      	bne.n	8021c88 <HAL_SPI_TransmitReceive+0x1b8>
 8021c54:	68fb      	ldr	r3, [r7, #12]
 8021c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021c58:	b29b      	uxth	r3, r3
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	d014      	beq.n	8021c88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	681b      	ldr	r3, [r3, #0]
 8021c62:	68da      	ldr	r2, [r3, #12]
 8021c64:	68fb      	ldr	r3, [r7, #12]
 8021c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c68:	b292      	uxth	r2, r2
 8021c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c70:	1c9a      	adds	r2, r3, #2
 8021c72:	68fb      	ldr	r3, [r7, #12]
 8021c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8021c76:	68fb      	ldr	r3, [r7, #12]
 8021c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021c7a:	b29b      	uxth	r3, r3
 8021c7c:	3b01      	subs	r3, #1
 8021c7e:	b29a      	uxth	r2, r3
 8021c80:	68fb      	ldr	r3, [r7, #12]
 8021c82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8021c84:	2301      	movs	r3, #1
 8021c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8021c88:	f7fb fcf2 	bl	801d670 <HAL_GetTick>
 8021c8c:	4602      	mov	r2, r0
 8021c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c90:	1ad3      	subs	r3, r2, r3
 8021c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021c94:	429a      	cmp	r2, r3
 8021c96:	d807      	bhi.n	8021ca8 <HAL_SPI_TransmitReceive+0x1d8>
 8021c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c9e:	d003      	beq.n	8021ca8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8021ca0:	2303      	movs	r3, #3
 8021ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8021ca6:	e0a7      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021cac:	b29b      	uxth	r3, r3
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d1a6      	bne.n	8021c00 <HAL_SPI_TransmitReceive+0x130>
 8021cb2:	68fb      	ldr	r3, [r7, #12]
 8021cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021cb6:	b29b      	uxth	r3, r3
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d1a1      	bne.n	8021c00 <HAL_SPI_TransmitReceive+0x130>
 8021cbc:	e07c      	b.n	8021db8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8021cbe:	68fb      	ldr	r3, [r7, #12]
 8021cc0:	685b      	ldr	r3, [r3, #4]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d002      	beq.n	8021ccc <HAL_SPI_TransmitReceive+0x1fc>
 8021cc6:	8b7b      	ldrh	r3, [r7, #26]
 8021cc8:	2b01      	cmp	r3, #1
 8021cca:	d16b      	bne.n	8021da4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8021ccc:	68fb      	ldr	r3, [r7, #12]
 8021cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021cd0:	68fb      	ldr	r3, [r7, #12]
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	330c      	adds	r3, #12
 8021cd6:	7812      	ldrb	r2, [r2, #0]
 8021cd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8021cda:	68fb      	ldr	r3, [r7, #12]
 8021cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021cde:	1c5a      	adds	r2, r3, #1
 8021ce0:	68fb      	ldr	r3, [r7, #12]
 8021ce2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021ce8:	b29b      	uxth	r3, r3
 8021cea:	3b01      	subs	r3, #1
 8021cec:	b29a      	uxth	r2, r3
 8021cee:	68fb      	ldr	r3, [r7, #12]
 8021cf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021cf2:	e057      	b.n	8021da4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	681b      	ldr	r3, [r3, #0]
 8021cf8:	689b      	ldr	r3, [r3, #8]
 8021cfa:	f003 0302 	and.w	r3, r3, #2
 8021cfe:	2b02      	cmp	r3, #2
 8021d00:	d11c      	bne.n	8021d3c <HAL_SPI_TransmitReceive+0x26c>
 8021d02:	68fb      	ldr	r3, [r7, #12]
 8021d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021d06:	b29b      	uxth	r3, r3
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	d017      	beq.n	8021d3c <HAL_SPI_TransmitReceive+0x26c>
 8021d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d0e:	2b01      	cmp	r3, #1
 8021d10:	d114      	bne.n	8021d3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8021d12:	68fb      	ldr	r3, [r7, #12]
 8021d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	330c      	adds	r3, #12
 8021d1c:	7812      	ldrb	r2, [r2, #0]
 8021d1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8021d20:	68fb      	ldr	r3, [r7, #12]
 8021d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d24:	1c5a      	adds	r2, r3, #1
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021d2e:	b29b      	uxth	r3, r3
 8021d30:	3b01      	subs	r3, #1
 8021d32:	b29a      	uxth	r2, r3
 8021d34:	68fb      	ldr	r3, [r7, #12]
 8021d36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8021d38:	2300      	movs	r3, #0
 8021d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8021d3c:	68fb      	ldr	r3, [r7, #12]
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	689b      	ldr	r3, [r3, #8]
 8021d42:	f003 0301 	and.w	r3, r3, #1
 8021d46:	2b01      	cmp	r3, #1
 8021d48:	d119      	bne.n	8021d7e <HAL_SPI_TransmitReceive+0x2ae>
 8021d4a:	68fb      	ldr	r3, [r7, #12]
 8021d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021d4e:	b29b      	uxth	r3, r3
 8021d50:	2b00      	cmp	r3, #0
 8021d52:	d014      	beq.n	8021d7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	681b      	ldr	r3, [r3, #0]
 8021d58:	68da      	ldr	r2, [r3, #12]
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d5e:	b2d2      	uxtb	r2, r2
 8021d60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8021d62:	68fb      	ldr	r3, [r7, #12]
 8021d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d66:	1c5a      	adds	r2, r3, #1
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8021d6c:	68fb      	ldr	r3, [r7, #12]
 8021d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021d70:	b29b      	uxth	r3, r3
 8021d72:	3b01      	subs	r3, #1
 8021d74:	b29a      	uxth	r2, r3
 8021d76:	68fb      	ldr	r3, [r7, #12]
 8021d78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8021d7a:	2301      	movs	r3, #1
 8021d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8021d7e:	f7fb fc77 	bl	801d670 <HAL_GetTick>
 8021d82:	4602      	mov	r2, r0
 8021d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d86:	1ad3      	subs	r3, r2, r3
 8021d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021d8a:	429a      	cmp	r2, r3
 8021d8c:	d803      	bhi.n	8021d96 <HAL_SPI_TransmitReceive+0x2c6>
 8021d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021d94:	d102      	bne.n	8021d9c <HAL_SPI_TransmitReceive+0x2cc>
 8021d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d103      	bne.n	8021da4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8021d9c:	2303      	movs	r3, #3
 8021d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8021da2:	e029      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021da4:	68fb      	ldr	r3, [r7, #12]
 8021da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021da8:	b29b      	uxth	r3, r3
 8021daa:	2b00      	cmp	r3, #0
 8021dac:	d1a2      	bne.n	8021cf4 <HAL_SPI_TransmitReceive+0x224>
 8021dae:	68fb      	ldr	r3, [r7, #12]
 8021db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021db2:	b29b      	uxth	r3, r3
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d19d      	bne.n	8021cf4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8021db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021dba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8021dbc:	68f8      	ldr	r0, [r7, #12]
 8021dbe:	f000 fae1 	bl	8022384 <SPI_EndRxTxTransaction>
 8021dc2:	4603      	mov	r3, r0
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d006      	beq.n	8021dd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8021dc8:	2301      	movs	r3, #1
 8021dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8021dce:	68fb      	ldr	r3, [r7, #12]
 8021dd0:	2220      	movs	r2, #32
 8021dd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8021dd4:	e010      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8021dd6:	68fb      	ldr	r3, [r7, #12]
 8021dd8:	689b      	ldr	r3, [r3, #8]
 8021dda:	2b00      	cmp	r3, #0
 8021ddc:	d10b      	bne.n	8021df6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021dde:	2300      	movs	r3, #0
 8021de0:	617b      	str	r3, [r7, #20]
 8021de2:	68fb      	ldr	r3, [r7, #12]
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	68db      	ldr	r3, [r3, #12]
 8021de8:	617b      	str	r3, [r7, #20]
 8021dea:	68fb      	ldr	r3, [r7, #12]
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	689b      	ldr	r3, [r3, #8]
 8021df0:	617b      	str	r3, [r7, #20]
 8021df2:	697b      	ldr	r3, [r7, #20]
 8021df4:	e000      	b.n	8021df8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8021df6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	2201      	movs	r2, #1
 8021dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8021e00:	68fb      	ldr	r3, [r7, #12]
 8021e02:	2200      	movs	r2, #0
 8021e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8021e08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8021e0c:	4618      	mov	r0, r3
 8021e0e:	3730      	adds	r7, #48	; 0x30
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}

08021e14 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	b086      	sub	sp, #24
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	60f8      	str	r0, [r7, #12]
 8021e1c:	60b9      	str	r1, [r7, #8]
 8021e1e:	4613      	mov	r3, r2
 8021e20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8021e22:	2300      	movs	r3, #0
 8021e24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8021e26:	68fb      	ldr	r3, [r7, #12]
 8021e28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8021e2c:	2b01      	cmp	r3, #1
 8021e2e:	d101      	bne.n	8021e34 <HAL_SPI_Transmit_DMA+0x20>
 8021e30:	2302      	movs	r3, #2
 8021e32:	e093      	b.n	8021f5c <HAL_SPI_Transmit_DMA+0x148>
 8021e34:	68fb      	ldr	r3, [r7, #12]
 8021e36:	2201      	movs	r2, #1
 8021e38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8021e3c:	68fb      	ldr	r3, [r7, #12]
 8021e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021e42:	b2db      	uxtb	r3, r3
 8021e44:	2b01      	cmp	r3, #1
 8021e46:	d002      	beq.n	8021e4e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8021e48:	2302      	movs	r3, #2
 8021e4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8021e4c:	e081      	b.n	8021f52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8021e4e:	68bb      	ldr	r3, [r7, #8]
 8021e50:	2b00      	cmp	r3, #0
 8021e52:	d002      	beq.n	8021e5a <HAL_SPI_Transmit_DMA+0x46>
 8021e54:	88fb      	ldrh	r3, [r7, #6]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d102      	bne.n	8021e60 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8021e5a:	2301      	movs	r3, #1
 8021e5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8021e5e:	e078      	b.n	8021f52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	2203      	movs	r2, #3
 8021e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021e68:	68fb      	ldr	r3, [r7, #12]
 8021e6a:	2200      	movs	r2, #0
 8021e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	68ba      	ldr	r2, [r7, #8]
 8021e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8021e74:	68fb      	ldr	r3, [r7, #12]
 8021e76:	88fa      	ldrh	r2, [r7, #6]
 8021e78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8021e7a:	68fb      	ldr	r3, [r7, #12]
 8021e7c:	88fa      	ldrh	r2, [r7, #6]
 8021e7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	2200      	movs	r2, #0
 8021e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8021e86:	68fb      	ldr	r3, [r7, #12]
 8021e88:	2200      	movs	r2, #0
 8021e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8021e8c:	68fb      	ldr	r3, [r7, #12]
 8021e8e:	2200      	movs	r2, #0
 8021e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	2200      	movs	r2, #0
 8021e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	2200      	movs	r2, #0
 8021e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021e9e:	68fb      	ldr	r3, [r7, #12]
 8021ea0:	689b      	ldr	r3, [r3, #8]
 8021ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021ea6:	d107      	bne.n	8021eb8 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8021ea8:	68fb      	ldr	r3, [r7, #12]
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	681a      	ldr	r2, [r3, #0]
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	681b      	ldr	r3, [r3, #0]
 8021eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8021eb8:	68fb      	ldr	r3, [r7, #12]
 8021eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021ebc:	4a29      	ldr	r2, [pc, #164]	; (8021f64 <HAL_SPI_Transmit_DMA+0x150>)
 8021ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8021ec0:	68fb      	ldr	r3, [r7, #12]
 8021ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021ec4:	4a28      	ldr	r2, [pc, #160]	; (8021f68 <HAL_SPI_Transmit_DMA+0x154>)
 8021ec6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8021ec8:	68fb      	ldr	r3, [r7, #12]
 8021eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021ecc:	4a27      	ldr	r2, [pc, #156]	; (8021f6c <HAL_SPI_Transmit_DMA+0x158>)
 8021ece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8021ed0:	68fb      	ldr	r3, [r7, #12]
 8021ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021ed4:	2200      	movs	r2, #0
 8021ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8021ed8:	68fb      	ldr	r3, [r7, #12]
 8021eda:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ee0:	4619      	mov	r1, r3
 8021ee2:	68fb      	ldr	r3, [r7, #12]
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	330c      	adds	r3, #12
 8021ee8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021eee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8021ef0:	f7fc fb78 	bl	801e5e4 <HAL_DMA_Start_IT>
 8021ef4:	4603      	mov	r3, r0
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d00c      	beq.n	8021f14 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8021efa:	68fb      	ldr	r3, [r7, #12]
 8021efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021efe:	f043 0210 	orr.w	r2, r3, #16
 8021f02:	68fb      	ldr	r3, [r7, #12]
 8021f04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8021f06:	2301      	movs	r3, #1
 8021f08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8021f0a:	68fb      	ldr	r3, [r7, #12]
 8021f0c:	2201      	movs	r2, #1
 8021f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8021f12:	e01e      	b.n	8021f52 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8021f14:	68fb      	ldr	r3, [r7, #12]
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	681b      	ldr	r3, [r3, #0]
 8021f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021f1e:	2b40      	cmp	r3, #64	; 0x40
 8021f20:	d007      	beq.n	8021f32 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8021f22:	68fb      	ldr	r3, [r7, #12]
 8021f24:	681b      	ldr	r3, [r3, #0]
 8021f26:	681a      	ldr	r2, [r3, #0]
 8021f28:	68fb      	ldr	r3, [r7, #12]
 8021f2a:	681b      	ldr	r3, [r3, #0]
 8021f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021f30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8021f32:	68fb      	ldr	r3, [r7, #12]
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	685a      	ldr	r2, [r3, #4]
 8021f38:	68fb      	ldr	r3, [r7, #12]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	f042 0220 	orr.w	r2, r2, #32
 8021f40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8021f42:	68fb      	ldr	r3, [r7, #12]
 8021f44:	681b      	ldr	r3, [r3, #0]
 8021f46:	685a      	ldr	r2, [r3, #4]
 8021f48:	68fb      	ldr	r3, [r7, #12]
 8021f4a:	681b      	ldr	r3, [r3, #0]
 8021f4c:	f042 0202 	orr.w	r2, r2, #2
 8021f50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8021f52:	68fb      	ldr	r3, [r7, #12]
 8021f54:	2200      	movs	r2, #0
 8021f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8021f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8021f5c:	4618      	mov	r0, r3
 8021f5e:	3718      	adds	r7, #24
 8021f60:	46bd      	mov	sp, r7
 8021f62:	bd80      	pop	{r7, pc}
 8021f64:	0802222d 	.word	0x0802222d
 8021f68:	08022185 	.word	0x08022185
 8021f6c:	08022249 	.word	0x08022249

08021f70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8021f70:	b580      	push	{r7, lr}
 8021f72:	b088      	sub	sp, #32
 8021f74:	af00      	add	r7, sp, #0
 8021f76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	685b      	ldr	r3, [r3, #4]
 8021f7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	689b      	ldr	r3, [r3, #8]
 8021f86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8021f88:	69bb      	ldr	r3, [r7, #24]
 8021f8a:	099b      	lsrs	r3, r3, #6
 8021f8c:	f003 0301 	and.w	r3, r3, #1
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d10f      	bne.n	8021fb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8021f94:	69bb      	ldr	r3, [r7, #24]
 8021f96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d00a      	beq.n	8021fb4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8021f9e:	69fb      	ldr	r3, [r7, #28]
 8021fa0:	099b      	lsrs	r3, r3, #6
 8021fa2:	f003 0301 	and.w	r3, r3, #1
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d004      	beq.n	8021fb4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021fae:	6878      	ldr	r0, [r7, #4]
 8021fb0:	4798      	blx	r3
    return;
 8021fb2:	e0d7      	b.n	8022164 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8021fb4:	69bb      	ldr	r3, [r7, #24]
 8021fb6:	085b      	lsrs	r3, r3, #1
 8021fb8:	f003 0301 	and.w	r3, r3, #1
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	d00a      	beq.n	8021fd6 <HAL_SPI_IRQHandler+0x66>
 8021fc0:	69fb      	ldr	r3, [r7, #28]
 8021fc2:	09db      	lsrs	r3, r3, #7
 8021fc4:	f003 0301 	and.w	r3, r3, #1
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d004      	beq.n	8021fd6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8021fcc:	687b      	ldr	r3, [r7, #4]
 8021fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021fd0:	6878      	ldr	r0, [r7, #4]
 8021fd2:	4798      	blx	r3
    return;
 8021fd4:	e0c6      	b.n	8022164 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8021fd6:	69bb      	ldr	r3, [r7, #24]
 8021fd8:	095b      	lsrs	r3, r3, #5
 8021fda:	f003 0301 	and.w	r3, r3, #1
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d10c      	bne.n	8021ffc <HAL_SPI_IRQHandler+0x8c>
 8021fe2:	69bb      	ldr	r3, [r7, #24]
 8021fe4:	099b      	lsrs	r3, r3, #6
 8021fe6:	f003 0301 	and.w	r3, r3, #1
 8021fea:	2b00      	cmp	r3, #0
 8021fec:	d106      	bne.n	8021ffc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8021fee:	69bb      	ldr	r3, [r7, #24]
 8021ff0:	0a1b      	lsrs	r3, r3, #8
 8021ff2:	f003 0301 	and.w	r3, r3, #1
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	f000 80b4 	beq.w	8022164 <HAL_SPI_IRQHandler+0x1f4>
 8021ffc:	69fb      	ldr	r3, [r7, #28]
 8021ffe:	095b      	lsrs	r3, r3, #5
 8022000:	f003 0301 	and.w	r3, r3, #1
 8022004:	2b00      	cmp	r3, #0
 8022006:	f000 80ad 	beq.w	8022164 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802200a:	69bb      	ldr	r3, [r7, #24]
 802200c:	099b      	lsrs	r3, r3, #6
 802200e:	f003 0301 	and.w	r3, r3, #1
 8022012:	2b00      	cmp	r3, #0
 8022014:	d023      	beq.n	802205e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802201c:	b2db      	uxtb	r3, r3
 802201e:	2b03      	cmp	r3, #3
 8022020:	d011      	beq.n	8022046 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8022022:	687b      	ldr	r3, [r7, #4]
 8022024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022026:	f043 0204 	orr.w	r2, r3, #4
 802202a:	687b      	ldr	r3, [r7, #4]
 802202c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802202e:	2300      	movs	r3, #0
 8022030:	617b      	str	r3, [r7, #20]
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	68db      	ldr	r3, [r3, #12]
 8022038:	617b      	str	r3, [r7, #20]
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	689b      	ldr	r3, [r3, #8]
 8022040:	617b      	str	r3, [r7, #20]
 8022042:	697b      	ldr	r3, [r7, #20]
 8022044:	e00b      	b.n	802205e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8022046:	2300      	movs	r3, #0
 8022048:	613b      	str	r3, [r7, #16]
 802204a:	687b      	ldr	r3, [r7, #4]
 802204c:	681b      	ldr	r3, [r3, #0]
 802204e:	68db      	ldr	r3, [r3, #12]
 8022050:	613b      	str	r3, [r7, #16]
 8022052:	687b      	ldr	r3, [r7, #4]
 8022054:	681b      	ldr	r3, [r3, #0]
 8022056:	689b      	ldr	r3, [r3, #8]
 8022058:	613b      	str	r3, [r7, #16]
 802205a:	693b      	ldr	r3, [r7, #16]
        return;
 802205c:	e082      	b.n	8022164 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802205e:	69bb      	ldr	r3, [r7, #24]
 8022060:	095b      	lsrs	r3, r3, #5
 8022062:	f003 0301 	and.w	r3, r3, #1
 8022066:	2b00      	cmp	r3, #0
 8022068:	d014      	beq.n	8022094 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802206e:	f043 0201 	orr.w	r2, r3, #1
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8022076:	2300      	movs	r3, #0
 8022078:	60fb      	str	r3, [r7, #12]
 802207a:	687b      	ldr	r3, [r7, #4]
 802207c:	681b      	ldr	r3, [r3, #0]
 802207e:	689b      	ldr	r3, [r3, #8]
 8022080:	60fb      	str	r3, [r7, #12]
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	681a      	ldr	r2, [r3, #0]
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022090:	601a      	str	r2, [r3, #0]
 8022092:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8022094:	69bb      	ldr	r3, [r7, #24]
 8022096:	0a1b      	lsrs	r3, r3, #8
 8022098:	f003 0301 	and.w	r3, r3, #1
 802209c:	2b00      	cmp	r3, #0
 802209e:	d00c      	beq.n	80220ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80220a0:	687b      	ldr	r3, [r7, #4]
 80220a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80220a4:	f043 0208 	orr.w	r2, r3, #8
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80220ac:	2300      	movs	r3, #0
 80220ae:	60bb      	str	r3, [r7, #8]
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	681b      	ldr	r3, [r3, #0]
 80220b4:	689b      	ldr	r3, [r3, #8]
 80220b6:	60bb      	str	r3, [r7, #8]
 80220b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80220be:	2b00      	cmp	r3, #0
 80220c0:	d04f      	beq.n	8022162 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80220c2:	687b      	ldr	r3, [r7, #4]
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	685a      	ldr	r2, [r3, #4]
 80220c8:	687b      	ldr	r3, [r7, #4]
 80220ca:	681b      	ldr	r3, [r3, #0]
 80220cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80220d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	2201      	movs	r2, #1
 80220d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80220da:	69fb      	ldr	r3, [r7, #28]
 80220dc:	f003 0302 	and.w	r3, r3, #2
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d104      	bne.n	80220ee <HAL_SPI_IRQHandler+0x17e>
 80220e4:	69fb      	ldr	r3, [r7, #28]
 80220e6:	f003 0301 	and.w	r3, r3, #1
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	d034      	beq.n	8022158 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	685a      	ldr	r2, [r3, #4]
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	681b      	ldr	r3, [r3, #0]
 80220f8:	f022 0203 	bic.w	r2, r2, #3
 80220fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80220fe:	687b      	ldr	r3, [r7, #4]
 8022100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022102:	2b00      	cmp	r3, #0
 8022104:	d011      	beq.n	802212a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802210a:	4a18      	ldr	r2, [pc, #96]	; (802216c <HAL_SPI_IRQHandler+0x1fc>)
 802210c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022112:	4618      	mov	r0, r3
 8022114:	f7fc fabe 	bl	801e694 <HAL_DMA_Abort_IT>
 8022118:	4603      	mov	r3, r0
 802211a:	2b00      	cmp	r3, #0
 802211c:	d005      	beq.n	802212a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802212a:	687b      	ldr	r3, [r7, #4]
 802212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802212e:	2b00      	cmp	r3, #0
 8022130:	d016      	beq.n	8022160 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8022136:	4a0d      	ldr	r2, [pc, #52]	; (802216c <HAL_SPI_IRQHandler+0x1fc>)
 8022138:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802213e:	4618      	mov	r0, r3
 8022140:	f7fc faa8 	bl	801e694 <HAL_DMA_Abort_IT>
 8022144:	4603      	mov	r3, r0
 8022146:	2b00      	cmp	r3, #0
 8022148:	d00a      	beq.n	8022160 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802214e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8022156:	e003      	b.n	8022160 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8022158:	6878      	ldr	r0, [r7, #4]
 802215a:	f7f5 f9e5 	bl	8017528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802215e:	e000      	b.n	8022162 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8022160:	bf00      	nop
    return;
 8022162:	bf00      	nop
  }
}
 8022164:	3720      	adds	r7, #32
 8022166:	46bd      	mov	sp, r7
 8022168:	bd80      	pop	{r7, pc}
 802216a:	bf00      	nop
 802216c:	08022289 	.word	0x08022289

08022170 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8022170:	b480      	push	{r7}
 8022172:	b083      	sub	sp, #12
 8022174:	af00      	add	r7, sp, #0
 8022176:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8022178:	bf00      	nop
 802217a:	370c      	adds	r7, #12
 802217c:	46bd      	mov	sp, r7
 802217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022182:	4770      	bx	lr

08022184 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8022184:	b580      	push	{r7, lr}
 8022186:	b086      	sub	sp, #24
 8022188:	af00      	add	r7, sp, #0
 802218a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802218c:	687b      	ldr	r3, [r7, #4]
 802218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022190:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8022192:	f7fb fa6d 	bl	801d670 <HAL_GetTick>
 8022196:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8022198:	687b      	ldr	r3, [r7, #4]
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80221a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80221a6:	d03b      	beq.n	8022220 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80221a8:	697b      	ldr	r3, [r7, #20]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	685a      	ldr	r2, [r3, #4]
 80221ae:	697b      	ldr	r3, [r7, #20]
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	f022 0220 	bic.w	r2, r2, #32
 80221b6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80221b8:	697b      	ldr	r3, [r7, #20]
 80221ba:	681b      	ldr	r3, [r3, #0]
 80221bc:	685a      	ldr	r2, [r3, #4]
 80221be:	697b      	ldr	r3, [r7, #20]
 80221c0:	681b      	ldr	r3, [r3, #0]
 80221c2:	f022 0202 	bic.w	r2, r2, #2
 80221c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80221c8:	693a      	ldr	r2, [r7, #16]
 80221ca:	2164      	movs	r1, #100	; 0x64
 80221cc:	6978      	ldr	r0, [r7, #20]
 80221ce:	f000 f8d9 	bl	8022384 <SPI_EndRxTxTransaction>
 80221d2:	4603      	mov	r3, r0
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	d005      	beq.n	80221e4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80221d8:	697b      	ldr	r3, [r7, #20]
 80221da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80221dc:	f043 0220 	orr.w	r2, r3, #32
 80221e0:	697b      	ldr	r3, [r7, #20]
 80221e2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80221e4:	697b      	ldr	r3, [r7, #20]
 80221e6:	689b      	ldr	r3, [r3, #8]
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	d10a      	bne.n	8022202 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80221ec:	2300      	movs	r3, #0
 80221ee:	60fb      	str	r3, [r7, #12]
 80221f0:	697b      	ldr	r3, [r7, #20]
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	68db      	ldr	r3, [r3, #12]
 80221f6:	60fb      	str	r3, [r7, #12]
 80221f8:	697b      	ldr	r3, [r7, #20]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	689b      	ldr	r3, [r3, #8]
 80221fe:	60fb      	str	r3, [r7, #12]
 8022200:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8022202:	697b      	ldr	r3, [r7, #20]
 8022204:	2200      	movs	r2, #0
 8022206:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8022208:	697b      	ldr	r3, [r7, #20]
 802220a:	2201      	movs	r2, #1
 802220c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8022210:	697b      	ldr	r3, [r7, #20]
 8022212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022214:	2b00      	cmp	r3, #0
 8022216:	d003      	beq.n	8022220 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8022218:	6978      	ldr	r0, [r7, #20]
 802221a:	f7f5 f985 	bl	8017528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802221e:	e002      	b.n	8022226 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8022220:	6978      	ldr	r0, [r7, #20]
 8022222:	f7f5 f997 	bl	8017554 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8022226:	3718      	adds	r7, #24
 8022228:	46bd      	mov	sp, r7
 802222a:	bd80      	pop	{r7, pc}

0802222c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 802222c:	b580      	push	{r7, lr}
 802222e:	b084      	sub	sp, #16
 8022230:	af00      	add	r7, sp, #0
 8022232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8022234:	687b      	ldr	r3, [r7, #4]
 8022236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022238:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 802223a:	68f8      	ldr	r0, [r7, #12]
 802223c:	f7ff ff98 	bl	8022170 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8022240:	bf00      	nop
 8022242:	3710      	adds	r7, #16
 8022244:	46bd      	mov	sp, r7
 8022246:	bd80      	pop	{r7, pc}

08022248 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8022248:	b580      	push	{r7, lr}
 802224a:	b084      	sub	sp, #16
 802224c:	af00      	add	r7, sp, #0
 802224e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022254:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8022256:	68fb      	ldr	r3, [r7, #12]
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	685a      	ldr	r2, [r3, #4]
 802225c:	68fb      	ldr	r3, [r7, #12]
 802225e:	681b      	ldr	r3, [r3, #0]
 8022260:	f022 0203 	bic.w	r2, r2, #3
 8022264:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8022266:	68fb      	ldr	r3, [r7, #12]
 8022268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802226a:	f043 0210 	orr.w	r2, r3, #16
 802226e:	68fb      	ldr	r3, [r7, #12]
 8022270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8022272:	68fb      	ldr	r3, [r7, #12]
 8022274:	2201      	movs	r2, #1
 8022276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802227a:	68f8      	ldr	r0, [r7, #12]
 802227c:	f7f5 f954 	bl	8017528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8022280:	bf00      	nop
 8022282:	3710      	adds	r7, #16
 8022284:	46bd      	mov	sp, r7
 8022286:	bd80      	pop	{r7, pc}

08022288 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022288:	b580      	push	{r7, lr}
 802228a:	b084      	sub	sp, #16
 802228c:	af00      	add	r7, sp, #0
 802228e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8022290:	687b      	ldr	r3, [r7, #4]
 8022292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022294:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	2200      	movs	r2, #0
 802229a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	2200      	movs	r2, #0
 80222a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80222a2:	68f8      	ldr	r0, [r7, #12]
 80222a4:	f7f5 f940 	bl	8017528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80222a8:	bf00      	nop
 80222aa:	3710      	adds	r7, #16
 80222ac:	46bd      	mov	sp, r7
 80222ae:	bd80      	pop	{r7, pc}

080222b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b084      	sub	sp, #16
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	60f8      	str	r0, [r7, #12]
 80222b8:	60b9      	str	r1, [r7, #8]
 80222ba:	603b      	str	r3, [r7, #0]
 80222bc:	4613      	mov	r3, r2
 80222be:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80222c0:	e04c      	b.n	802235c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80222c2:	683b      	ldr	r3, [r7, #0]
 80222c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80222c8:	d048      	beq.n	802235c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80222ca:	f7fb f9d1 	bl	801d670 <HAL_GetTick>
 80222ce:	4602      	mov	r2, r0
 80222d0:	69bb      	ldr	r3, [r7, #24]
 80222d2:	1ad3      	subs	r3, r2, r3
 80222d4:	683a      	ldr	r2, [r7, #0]
 80222d6:	429a      	cmp	r2, r3
 80222d8:	d902      	bls.n	80222e0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80222da:	683b      	ldr	r3, [r7, #0]
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d13d      	bne.n	802235c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	681b      	ldr	r3, [r3, #0]
 80222e4:	685a      	ldr	r2, [r3, #4]
 80222e6:	68fb      	ldr	r3, [r7, #12]
 80222e8:	681b      	ldr	r3, [r3, #0]
 80222ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80222ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80222f0:	68fb      	ldr	r3, [r7, #12]
 80222f2:	685b      	ldr	r3, [r3, #4]
 80222f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80222f8:	d111      	bne.n	802231e <SPI_WaitFlagStateUntilTimeout+0x6e>
 80222fa:	68fb      	ldr	r3, [r7, #12]
 80222fc:	689b      	ldr	r3, [r3, #8]
 80222fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022302:	d004      	beq.n	802230e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	689b      	ldr	r3, [r3, #8]
 8022308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802230c:	d107      	bne.n	802231e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	681b      	ldr	r3, [r3, #0]
 8022312:	681a      	ldr	r2, [r3, #0]
 8022314:	68fb      	ldr	r3, [r7, #12]
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802231c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802231e:	68fb      	ldr	r3, [r7, #12]
 8022320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022326:	d10f      	bne.n	8022348 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8022328:	68fb      	ldr	r3, [r7, #12]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	681a      	ldr	r2, [r3, #0]
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022336:	601a      	str	r2, [r3, #0]
 8022338:	68fb      	ldr	r3, [r7, #12]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	681a      	ldr	r2, [r3, #0]
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022346:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8022348:	68fb      	ldr	r3, [r7, #12]
 802234a:	2201      	movs	r2, #1
 802234c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	2200      	movs	r2, #0
 8022354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8022358:	2303      	movs	r3, #3
 802235a:	e00f      	b.n	802237c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	681b      	ldr	r3, [r3, #0]
 8022360:	689a      	ldr	r2, [r3, #8]
 8022362:	68bb      	ldr	r3, [r7, #8]
 8022364:	4013      	ands	r3, r2
 8022366:	68ba      	ldr	r2, [r7, #8]
 8022368:	429a      	cmp	r2, r3
 802236a:	bf0c      	ite	eq
 802236c:	2301      	moveq	r3, #1
 802236e:	2300      	movne	r3, #0
 8022370:	b2db      	uxtb	r3, r3
 8022372:	461a      	mov	r2, r3
 8022374:	79fb      	ldrb	r3, [r7, #7]
 8022376:	429a      	cmp	r2, r3
 8022378:	d1a3      	bne.n	80222c2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 802237a:	2300      	movs	r3, #0
}
 802237c:	4618      	mov	r0, r3
 802237e:	3710      	adds	r7, #16
 8022380:	46bd      	mov	sp, r7
 8022382:	bd80      	pop	{r7, pc}

08022384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8022384:	b580      	push	{r7, lr}
 8022386:	b088      	sub	sp, #32
 8022388:	af02      	add	r7, sp, #8
 802238a:	60f8      	str	r0, [r7, #12]
 802238c:	60b9      	str	r1, [r7, #8]
 802238e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8022390:	4b1b      	ldr	r3, [pc, #108]	; (8022400 <SPI_EndRxTxTransaction+0x7c>)
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	4a1b      	ldr	r2, [pc, #108]	; (8022404 <SPI_EndRxTxTransaction+0x80>)
 8022396:	fba2 2303 	umull	r2, r3, r2, r3
 802239a:	0d5b      	lsrs	r3, r3, #21
 802239c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80223a0:	fb02 f303 	mul.w	r3, r2, r3
 80223a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80223a6:	68fb      	ldr	r3, [r7, #12]
 80223a8:	685b      	ldr	r3, [r3, #4]
 80223aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80223ae:	d112      	bne.n	80223d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	9300      	str	r3, [sp, #0]
 80223b4:	68bb      	ldr	r3, [r7, #8]
 80223b6:	2200      	movs	r2, #0
 80223b8:	2180      	movs	r1, #128	; 0x80
 80223ba:	68f8      	ldr	r0, [r7, #12]
 80223bc:	f7ff ff78 	bl	80222b0 <SPI_WaitFlagStateUntilTimeout>
 80223c0:	4603      	mov	r3, r0
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d016      	beq.n	80223f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80223c6:	68fb      	ldr	r3, [r7, #12]
 80223c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80223ca:	f043 0220 	orr.w	r2, r3, #32
 80223ce:	68fb      	ldr	r3, [r7, #12]
 80223d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80223d2:	2303      	movs	r3, #3
 80223d4:	e00f      	b.n	80223f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80223d6:	697b      	ldr	r3, [r7, #20]
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d00a      	beq.n	80223f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80223dc:	697b      	ldr	r3, [r7, #20]
 80223de:	3b01      	subs	r3, #1
 80223e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80223e2:	68fb      	ldr	r3, [r7, #12]
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	689b      	ldr	r3, [r3, #8]
 80223e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80223ec:	2b80      	cmp	r3, #128	; 0x80
 80223ee:	d0f2      	beq.n	80223d6 <SPI_EndRxTxTransaction+0x52>
 80223f0:	e000      	b.n	80223f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80223f2:	bf00      	nop
  }

  return HAL_OK;
 80223f4:	2300      	movs	r3, #0
}
 80223f6:	4618      	mov	r0, r3
 80223f8:	3718      	adds	r7, #24
 80223fa:	46bd      	mov	sp, r7
 80223fc:	bd80      	pop	{r7, pc}
 80223fe:	bf00      	nop
 8022400:	20000000 	.word	0x20000000
 8022404:	165e9f81 	.word	0x165e9f81

08022408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8022408:	b580      	push	{r7, lr}
 802240a:	b082      	sub	sp, #8
 802240c:	af00      	add	r7, sp, #0
 802240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d101      	bne.n	802241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8022416:	2301      	movs	r3, #1
 8022418:	e01d      	b.n	8022456 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022420:	b2db      	uxtb	r3, r3
 8022422:	2b00      	cmp	r3, #0
 8022424:	d106      	bne.n	8022434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	2200      	movs	r2, #0
 802242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802242e:	6878      	ldr	r0, [r7, #4]
 8022430:	f7f4 fde6 	bl	8017000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	2202      	movs	r2, #2
 8022438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	681a      	ldr	r2, [r3, #0]
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	3304      	adds	r3, #4
 8022444:	4619      	mov	r1, r3
 8022446:	4610      	mov	r0, r2
 8022448:	f000 fb36 	bl	8022ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	2201      	movs	r2, #1
 8022450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8022454:	2300      	movs	r3, #0
}
 8022456:	4618      	mov	r0, r3
 8022458:	3708      	adds	r7, #8
 802245a:	46bd      	mov	sp, r7
 802245c:	bd80      	pop	{r7, pc}

0802245e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 802245e:	b580      	push	{r7, lr}
 8022460:	b082      	sub	sp, #8
 8022462:	af00      	add	r7, sp, #0
 8022464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	2b00      	cmp	r3, #0
 802246a:	d101      	bne.n	8022470 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 802246c:	2301      	movs	r3, #1
 802246e:	e01d      	b.n	80224ac <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022476:	b2db      	uxtb	r3, r3
 8022478:	2b00      	cmp	r3, #0
 802247a:	d106      	bne.n	802248a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802247c:	687b      	ldr	r3, [r7, #4]
 802247e:	2200      	movs	r2, #0
 8022480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8022484:	6878      	ldr	r0, [r7, #4]
 8022486:	f000 f815 	bl	80224b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	2202      	movs	r2, #2
 802248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	681a      	ldr	r2, [r3, #0]
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	3304      	adds	r3, #4
 802249a:	4619      	mov	r1, r3
 802249c:	4610      	mov	r0, r2
 802249e:	f000 fb0b 	bl	8022ab8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80224a2:	687b      	ldr	r3, [r7, #4]
 80224a4:	2201      	movs	r2, #1
 80224a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80224aa:	2300      	movs	r3, #0
}
 80224ac:	4618      	mov	r0, r3
 80224ae:	3708      	adds	r7, #8
 80224b0:	46bd      	mov	sp, r7
 80224b2:	bd80      	pop	{r7, pc}

080224b4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80224b4:	b480      	push	{r7}
 80224b6:	b083      	sub	sp, #12
 80224b8:	af00      	add	r7, sp, #0
 80224ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80224bc:	bf00      	nop
 80224be:	370c      	adds	r7, #12
 80224c0:	46bd      	mov	sp, r7
 80224c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c6:	4770      	bx	lr

080224c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80224c8:	b580      	push	{r7, lr}
 80224ca:	b084      	sub	sp, #16
 80224cc:	af00      	add	r7, sp, #0
 80224ce:	6078      	str	r0, [r7, #4]
 80224d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80224d2:	683b      	ldr	r3, [r7, #0]
 80224d4:	2b0c      	cmp	r3, #12
 80224d6:	d841      	bhi.n	802255c <HAL_TIM_IC_Start_IT+0x94>
 80224d8:	a201      	add	r2, pc, #4	; (adr r2, 80224e0 <HAL_TIM_IC_Start_IT+0x18>)
 80224da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80224de:	bf00      	nop
 80224e0:	08022515 	.word	0x08022515
 80224e4:	0802255d 	.word	0x0802255d
 80224e8:	0802255d 	.word	0x0802255d
 80224ec:	0802255d 	.word	0x0802255d
 80224f0:	08022527 	.word	0x08022527
 80224f4:	0802255d 	.word	0x0802255d
 80224f8:	0802255d 	.word	0x0802255d
 80224fc:	0802255d 	.word	0x0802255d
 8022500:	08022539 	.word	0x08022539
 8022504:	0802255d 	.word	0x0802255d
 8022508:	0802255d 	.word	0x0802255d
 802250c:	0802255d 	.word	0x0802255d
 8022510:	0802254b 	.word	0x0802254b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	681b      	ldr	r3, [r3, #0]
 8022518:	68da      	ldr	r2, [r3, #12]
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	681b      	ldr	r3, [r3, #0]
 802251e:	f042 0202 	orr.w	r2, r2, #2
 8022522:	60da      	str	r2, [r3, #12]
      break;
 8022524:	e01b      	b.n	802255e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	68da      	ldr	r2, [r3, #12]
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	f042 0204 	orr.w	r2, r2, #4
 8022534:	60da      	str	r2, [r3, #12]
      break;
 8022536:	e012      	b.n	802255e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	68da      	ldr	r2, [r3, #12]
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	f042 0208 	orr.w	r2, r2, #8
 8022546:	60da      	str	r2, [r3, #12]
      break;
 8022548:	e009      	b.n	802255e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	681b      	ldr	r3, [r3, #0]
 802254e:	68da      	ldr	r2, [r3, #12]
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	681b      	ldr	r3, [r3, #0]
 8022554:	f042 0210 	orr.w	r2, r2, #16
 8022558:	60da      	str	r2, [r3, #12]
      break;
 802255a:	e000      	b.n	802255e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 802255c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	681b      	ldr	r3, [r3, #0]
 8022562:	2201      	movs	r2, #1
 8022564:	6839      	ldr	r1, [r7, #0]
 8022566:	4618      	mov	r0, r3
 8022568:	f000 fcde 	bl	8022f28 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802256c:	687b      	ldr	r3, [r7, #4]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	689b      	ldr	r3, [r3, #8]
 8022572:	f003 0307 	and.w	r3, r3, #7
 8022576:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022578:	68fb      	ldr	r3, [r7, #12]
 802257a:	2b06      	cmp	r3, #6
 802257c:	d007      	beq.n	802258e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	681a      	ldr	r2, [r3, #0]
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	681b      	ldr	r3, [r3, #0]
 8022588:	f042 0201 	orr.w	r2, r2, #1
 802258c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802258e:	2300      	movs	r3, #0
}
 8022590:	4618      	mov	r0, r3
 8022592:	3710      	adds	r7, #16
 8022594:	46bd      	mov	sp, r7
 8022596:	bd80      	pop	{r7, pc}

08022598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8022598:	b580      	push	{r7, lr}
 802259a:	b082      	sub	sp, #8
 802259c:	af00      	add	r7, sp, #0
 802259e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80225a0:	687b      	ldr	r3, [r7, #4]
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	691b      	ldr	r3, [r3, #16]
 80225a6:	f003 0302 	and.w	r3, r3, #2
 80225aa:	2b02      	cmp	r3, #2
 80225ac:	d122      	bne.n	80225f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80225ae:	687b      	ldr	r3, [r7, #4]
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	68db      	ldr	r3, [r3, #12]
 80225b4:	f003 0302 	and.w	r3, r3, #2
 80225b8:	2b02      	cmp	r3, #2
 80225ba:	d11b      	bne.n	80225f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	681b      	ldr	r3, [r3, #0]
 80225c0:	f06f 0202 	mvn.w	r2, #2
 80225c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	2201      	movs	r2, #1
 80225ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	699b      	ldr	r3, [r3, #24]
 80225d2:	f003 0303 	and.w	r3, r3, #3
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d003      	beq.n	80225e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80225da:	6878      	ldr	r0, [r7, #4]
 80225dc:	f7f4 fd60 	bl	80170a0 <HAL_TIM_IC_CaptureCallback>
 80225e0:	e005      	b.n	80225ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80225e2:	6878      	ldr	r0, [r7, #4]
 80225e4:	f000 fa4a 	bl	8022a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80225e8:	6878      	ldr	r0, [r7, #4]
 80225ea:	f000 fa51 	bl	8022a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	2200      	movs	r2, #0
 80225f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	691b      	ldr	r3, [r3, #16]
 80225fa:	f003 0304 	and.w	r3, r3, #4
 80225fe:	2b04      	cmp	r3, #4
 8022600:	d122      	bne.n	8022648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	681b      	ldr	r3, [r3, #0]
 8022606:	68db      	ldr	r3, [r3, #12]
 8022608:	f003 0304 	and.w	r3, r3, #4
 802260c:	2b04      	cmp	r3, #4
 802260e:	d11b      	bne.n	8022648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	f06f 0204 	mvn.w	r2, #4
 8022618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802261a:	687b      	ldr	r3, [r7, #4]
 802261c:	2202      	movs	r2, #2
 802261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8022620:	687b      	ldr	r3, [r7, #4]
 8022622:	681b      	ldr	r3, [r3, #0]
 8022624:	699b      	ldr	r3, [r3, #24]
 8022626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802262a:	2b00      	cmp	r3, #0
 802262c:	d003      	beq.n	8022636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802262e:	6878      	ldr	r0, [r7, #4]
 8022630:	f7f4 fd36 	bl	80170a0 <HAL_TIM_IC_CaptureCallback>
 8022634:	e005      	b.n	8022642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8022636:	6878      	ldr	r0, [r7, #4]
 8022638:	f000 fa20 	bl	8022a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802263c:	6878      	ldr	r0, [r7, #4]
 802263e:	f000 fa27 	bl	8022a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	2200      	movs	r2, #0
 8022646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	691b      	ldr	r3, [r3, #16]
 802264e:	f003 0308 	and.w	r3, r3, #8
 8022652:	2b08      	cmp	r3, #8
 8022654:	d122      	bne.n	802269c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	68db      	ldr	r3, [r3, #12]
 802265c:	f003 0308 	and.w	r3, r3, #8
 8022660:	2b08      	cmp	r3, #8
 8022662:	d11b      	bne.n	802269c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	681b      	ldr	r3, [r3, #0]
 8022668:	f06f 0208 	mvn.w	r2, #8
 802266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	2204      	movs	r2, #4
 8022672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	69db      	ldr	r3, [r3, #28]
 802267a:	f003 0303 	and.w	r3, r3, #3
 802267e:	2b00      	cmp	r3, #0
 8022680:	d003      	beq.n	802268a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8022682:	6878      	ldr	r0, [r7, #4]
 8022684:	f7f4 fd0c 	bl	80170a0 <HAL_TIM_IC_CaptureCallback>
 8022688:	e005      	b.n	8022696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802268a:	6878      	ldr	r0, [r7, #4]
 802268c:	f000 f9f6 	bl	8022a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022690:	6878      	ldr	r0, [r7, #4]
 8022692:	f000 f9fd 	bl	8022a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8022696:	687b      	ldr	r3, [r7, #4]
 8022698:	2200      	movs	r2, #0
 802269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802269c:	687b      	ldr	r3, [r7, #4]
 802269e:	681b      	ldr	r3, [r3, #0]
 80226a0:	691b      	ldr	r3, [r3, #16]
 80226a2:	f003 0310 	and.w	r3, r3, #16
 80226a6:	2b10      	cmp	r3, #16
 80226a8:	d122      	bne.n	80226f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	68db      	ldr	r3, [r3, #12]
 80226b0:	f003 0310 	and.w	r3, r3, #16
 80226b4:	2b10      	cmp	r3, #16
 80226b6:	d11b      	bne.n	80226f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	f06f 0210 	mvn.w	r2, #16
 80226c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	2208      	movs	r2, #8
 80226c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	681b      	ldr	r3, [r3, #0]
 80226cc:	69db      	ldr	r3, [r3, #28]
 80226ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80226d2:	2b00      	cmp	r3, #0
 80226d4:	d003      	beq.n	80226de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80226d6:	6878      	ldr	r0, [r7, #4]
 80226d8:	f7f4 fce2 	bl	80170a0 <HAL_TIM_IC_CaptureCallback>
 80226dc:	e005      	b.n	80226ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80226de:	6878      	ldr	r0, [r7, #4]
 80226e0:	f000 f9cc 	bl	8022a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80226e4:	6878      	ldr	r0, [r7, #4]
 80226e6:	f000 f9d3 	bl	8022a90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	2200      	movs	r2, #0
 80226ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	691b      	ldr	r3, [r3, #16]
 80226f6:	f003 0301 	and.w	r3, r3, #1
 80226fa:	2b01      	cmp	r3, #1
 80226fc:	d10e      	bne.n	802271c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	68db      	ldr	r3, [r3, #12]
 8022704:	f003 0301 	and.w	r3, r3, #1
 8022708:	2b01      	cmp	r3, #1
 802270a:	d107      	bne.n	802271c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	681b      	ldr	r3, [r3, #0]
 8022710:	f06f 0201 	mvn.w	r2, #1
 8022714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8022716:	6878      	ldr	r0, [r7, #4]
 8022718:	f000 f9a6 	bl	8022a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802271c:	687b      	ldr	r3, [r7, #4]
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	691b      	ldr	r3, [r3, #16]
 8022722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022726:	2b80      	cmp	r3, #128	; 0x80
 8022728:	d10e      	bne.n	8022748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	68db      	ldr	r3, [r3, #12]
 8022730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022734:	2b80      	cmp	r3, #128	; 0x80
 8022736:	d107      	bne.n	8022748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8022740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8022742:	6878      	ldr	r0, [r7, #4]
 8022744:	f000 fc8e 	bl	8023064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	681b      	ldr	r3, [r3, #0]
 802274c:	691b      	ldr	r3, [r3, #16]
 802274e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022752:	2b40      	cmp	r3, #64	; 0x40
 8022754:	d10e      	bne.n	8022774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	681b      	ldr	r3, [r3, #0]
 802275a:	68db      	ldr	r3, [r3, #12]
 802275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022760:	2b40      	cmp	r3, #64	; 0x40
 8022762:	d107      	bne.n	8022774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802276c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802276e:	6878      	ldr	r0, [r7, #4]
 8022770:	f000 f998 	bl	8022aa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	681b      	ldr	r3, [r3, #0]
 8022778:	691b      	ldr	r3, [r3, #16]
 802277a:	f003 0320 	and.w	r3, r3, #32
 802277e:	2b20      	cmp	r3, #32
 8022780:	d10e      	bne.n	80227a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	681b      	ldr	r3, [r3, #0]
 8022786:	68db      	ldr	r3, [r3, #12]
 8022788:	f003 0320 	and.w	r3, r3, #32
 802278c:	2b20      	cmp	r3, #32
 802278e:	d107      	bne.n	80227a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	681b      	ldr	r3, [r3, #0]
 8022794:	f06f 0220 	mvn.w	r2, #32
 8022798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802279a:	6878      	ldr	r0, [r7, #4]
 802279c:	f000 fc58 	bl	8023050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80227a0:	bf00      	nop
 80227a2:	3708      	adds	r7, #8
 80227a4:	46bd      	mov	sp, r7
 80227a6:	bd80      	pop	{r7, pc}

080227a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80227a8:	b580      	push	{r7, lr}
 80227aa:	b084      	sub	sp, #16
 80227ac:	af00      	add	r7, sp, #0
 80227ae:	60f8      	str	r0, [r7, #12]
 80227b0:	60b9      	str	r1, [r7, #8]
 80227b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80227b4:	68fb      	ldr	r3, [r7, #12]
 80227b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80227ba:	2b01      	cmp	r3, #1
 80227bc:	d101      	bne.n	80227c2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80227be:	2302      	movs	r3, #2
 80227c0:	e08a      	b.n	80228d8 <HAL_TIM_IC_ConfigChannel+0x130>
 80227c2:	68fb      	ldr	r3, [r7, #12]
 80227c4:	2201      	movs	r2, #1
 80227c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80227ca:	68fb      	ldr	r3, [r7, #12]
 80227cc:	2202      	movs	r2, #2
 80227ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	2b00      	cmp	r3, #0
 80227d6:	d11b      	bne.n	8022810 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	6818      	ldr	r0, [r3, #0]
 80227dc:	68bb      	ldr	r3, [r7, #8]
 80227de:	6819      	ldr	r1, [r3, #0]
 80227e0:	68bb      	ldr	r3, [r7, #8]
 80227e2:	685a      	ldr	r2, [r3, #4]
 80227e4:	68bb      	ldr	r3, [r7, #8]
 80227e6:	68db      	ldr	r3, [r3, #12]
 80227e8:	f000 f9e6 	bl	8022bb8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	681b      	ldr	r3, [r3, #0]
 80227f0:	699a      	ldr	r2, [r3, #24]
 80227f2:	68fb      	ldr	r3, [r7, #12]
 80227f4:	681b      	ldr	r3, [r3, #0]
 80227f6:	f022 020c 	bic.w	r2, r2, #12
 80227fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80227fc:	68fb      	ldr	r3, [r7, #12]
 80227fe:	681b      	ldr	r3, [r3, #0]
 8022800:	6999      	ldr	r1, [r3, #24]
 8022802:	68bb      	ldr	r3, [r7, #8]
 8022804:	689a      	ldr	r2, [r3, #8]
 8022806:	68fb      	ldr	r3, [r7, #12]
 8022808:	681b      	ldr	r3, [r3, #0]
 802280a:	430a      	orrs	r2, r1
 802280c:	619a      	str	r2, [r3, #24]
 802280e:	e05a      	b.n	80228c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	2b04      	cmp	r3, #4
 8022814:	d11c      	bne.n	8022850 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8022816:	68fb      	ldr	r3, [r7, #12]
 8022818:	6818      	ldr	r0, [r3, #0]
 802281a:	68bb      	ldr	r3, [r7, #8]
 802281c:	6819      	ldr	r1, [r3, #0]
 802281e:	68bb      	ldr	r3, [r7, #8]
 8022820:	685a      	ldr	r2, [r3, #4]
 8022822:	68bb      	ldr	r3, [r7, #8]
 8022824:	68db      	ldr	r3, [r3, #12]
 8022826:	f000 fa5e 	bl	8022ce6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	681b      	ldr	r3, [r3, #0]
 802282e:	699a      	ldr	r2, [r3, #24]
 8022830:	68fb      	ldr	r3, [r7, #12]
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8022838:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 802283a:	68fb      	ldr	r3, [r7, #12]
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	6999      	ldr	r1, [r3, #24]
 8022840:	68bb      	ldr	r3, [r7, #8]
 8022842:	689b      	ldr	r3, [r3, #8]
 8022844:	021a      	lsls	r2, r3, #8
 8022846:	68fb      	ldr	r3, [r7, #12]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	430a      	orrs	r2, r1
 802284c:	619a      	str	r2, [r3, #24]
 802284e:	e03a      	b.n	80228c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	2b08      	cmp	r3, #8
 8022854:	d11b      	bne.n	802288e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8022856:	68fb      	ldr	r3, [r7, #12]
 8022858:	6818      	ldr	r0, [r3, #0]
 802285a:	68bb      	ldr	r3, [r7, #8]
 802285c:	6819      	ldr	r1, [r3, #0]
 802285e:	68bb      	ldr	r3, [r7, #8]
 8022860:	685a      	ldr	r2, [r3, #4]
 8022862:	68bb      	ldr	r3, [r7, #8]
 8022864:	68db      	ldr	r3, [r3, #12]
 8022866:	f000 faab 	bl	8022dc0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 802286a:	68fb      	ldr	r3, [r7, #12]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	69da      	ldr	r2, [r3, #28]
 8022870:	68fb      	ldr	r3, [r7, #12]
 8022872:	681b      	ldr	r3, [r3, #0]
 8022874:	f022 020c 	bic.w	r2, r2, #12
 8022878:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 802287a:	68fb      	ldr	r3, [r7, #12]
 802287c:	681b      	ldr	r3, [r3, #0]
 802287e:	69d9      	ldr	r1, [r3, #28]
 8022880:	68bb      	ldr	r3, [r7, #8]
 8022882:	689a      	ldr	r2, [r3, #8]
 8022884:	68fb      	ldr	r3, [r7, #12]
 8022886:	681b      	ldr	r3, [r3, #0]
 8022888:	430a      	orrs	r2, r1
 802288a:	61da      	str	r2, [r3, #28]
 802288c:	e01b      	b.n	80228c6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 802288e:	68fb      	ldr	r3, [r7, #12]
 8022890:	6818      	ldr	r0, [r3, #0]
 8022892:	68bb      	ldr	r3, [r7, #8]
 8022894:	6819      	ldr	r1, [r3, #0]
 8022896:	68bb      	ldr	r3, [r7, #8]
 8022898:	685a      	ldr	r2, [r3, #4]
 802289a:	68bb      	ldr	r3, [r7, #8]
 802289c:	68db      	ldr	r3, [r3, #12]
 802289e:	f000 facb 	bl	8022e38 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	69da      	ldr	r2, [r3, #28]
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	681b      	ldr	r3, [r3, #0]
 80228ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80228b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80228b2:	68fb      	ldr	r3, [r7, #12]
 80228b4:	681b      	ldr	r3, [r3, #0]
 80228b6:	69d9      	ldr	r1, [r3, #28]
 80228b8:	68bb      	ldr	r3, [r7, #8]
 80228ba:	689b      	ldr	r3, [r3, #8]
 80228bc:	021a      	lsls	r2, r3, #8
 80228be:	68fb      	ldr	r3, [r7, #12]
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	430a      	orrs	r2, r1
 80228c4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	2201      	movs	r2, #1
 80228ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80228ce:	68fb      	ldr	r3, [r7, #12]
 80228d0:	2200      	movs	r2, #0
 80228d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80228d6:	2300      	movs	r3, #0
}
 80228d8:	4618      	mov	r0, r3
 80228da:	3710      	adds	r7, #16
 80228dc:	46bd      	mov	sp, r7
 80228de:	bd80      	pop	{r7, pc}

080228e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80228e0:	b580      	push	{r7, lr}
 80228e2:	b084      	sub	sp, #16
 80228e4:	af00      	add	r7, sp, #0
 80228e6:	6078      	str	r0, [r7, #4]
 80228e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80228ea:	687b      	ldr	r3, [r7, #4]
 80228ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80228f0:	2b01      	cmp	r3, #1
 80228f2:	d101      	bne.n	80228f8 <HAL_TIM_ConfigClockSource+0x18>
 80228f4:	2302      	movs	r3, #2
 80228f6:	e0b3      	b.n	8022a60 <HAL_TIM_ConfigClockSource+0x180>
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	2201      	movs	r2, #1
 80228fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	2202      	movs	r2, #2
 8022904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8022908:	687b      	ldr	r3, [r7, #4]
 802290a:	681b      	ldr	r3, [r3, #0]
 802290c:	689b      	ldr	r3, [r3, #8]
 802290e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8022916:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802291e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	68fa      	ldr	r2, [r7, #12]
 8022926:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8022928:	683b      	ldr	r3, [r7, #0]
 802292a:	681b      	ldr	r3, [r3, #0]
 802292c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022930:	d03e      	beq.n	80229b0 <HAL_TIM_ConfigClockSource+0xd0>
 8022932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022936:	f200 8087 	bhi.w	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 802293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802293e:	f000 8085 	beq.w	8022a4c <HAL_TIM_ConfigClockSource+0x16c>
 8022942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022946:	d87f      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022948:	2b70      	cmp	r3, #112	; 0x70
 802294a:	d01a      	beq.n	8022982 <HAL_TIM_ConfigClockSource+0xa2>
 802294c:	2b70      	cmp	r3, #112	; 0x70
 802294e:	d87b      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022950:	2b60      	cmp	r3, #96	; 0x60
 8022952:	d050      	beq.n	80229f6 <HAL_TIM_ConfigClockSource+0x116>
 8022954:	2b60      	cmp	r3, #96	; 0x60
 8022956:	d877      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022958:	2b50      	cmp	r3, #80	; 0x50
 802295a:	d03c      	beq.n	80229d6 <HAL_TIM_ConfigClockSource+0xf6>
 802295c:	2b50      	cmp	r3, #80	; 0x50
 802295e:	d873      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022960:	2b40      	cmp	r3, #64	; 0x40
 8022962:	d058      	beq.n	8022a16 <HAL_TIM_ConfigClockSource+0x136>
 8022964:	2b40      	cmp	r3, #64	; 0x40
 8022966:	d86f      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022968:	2b30      	cmp	r3, #48	; 0x30
 802296a:	d064      	beq.n	8022a36 <HAL_TIM_ConfigClockSource+0x156>
 802296c:	2b30      	cmp	r3, #48	; 0x30
 802296e:	d86b      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022970:	2b20      	cmp	r3, #32
 8022972:	d060      	beq.n	8022a36 <HAL_TIM_ConfigClockSource+0x156>
 8022974:	2b20      	cmp	r3, #32
 8022976:	d867      	bhi.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
 8022978:	2b00      	cmp	r3, #0
 802297a:	d05c      	beq.n	8022a36 <HAL_TIM_ConfigClockSource+0x156>
 802297c:	2b10      	cmp	r3, #16
 802297e:	d05a      	beq.n	8022a36 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8022980:	e062      	b.n	8022a48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8022982:	687b      	ldr	r3, [r7, #4]
 8022984:	6818      	ldr	r0, [r3, #0]
 8022986:	683b      	ldr	r3, [r7, #0]
 8022988:	6899      	ldr	r1, [r3, #8]
 802298a:	683b      	ldr	r3, [r7, #0]
 802298c:	685a      	ldr	r2, [r3, #4]
 802298e:	683b      	ldr	r3, [r7, #0]
 8022990:	68db      	ldr	r3, [r3, #12]
 8022992:	f000 faa9 	bl	8022ee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	689b      	ldr	r3, [r3, #8]
 802299c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80229a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	681b      	ldr	r3, [r3, #0]
 80229aa:	68fa      	ldr	r2, [r7, #12]
 80229ac:	609a      	str	r2, [r3, #8]
      break;
 80229ae:	e04e      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	6818      	ldr	r0, [r3, #0]
 80229b4:	683b      	ldr	r3, [r7, #0]
 80229b6:	6899      	ldr	r1, [r3, #8]
 80229b8:	683b      	ldr	r3, [r7, #0]
 80229ba:	685a      	ldr	r2, [r3, #4]
 80229bc:	683b      	ldr	r3, [r7, #0]
 80229be:	68db      	ldr	r3, [r3, #12]
 80229c0:	f000 fa92 	bl	8022ee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	689a      	ldr	r2, [r3, #8]
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	681b      	ldr	r3, [r3, #0]
 80229ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80229d2:	609a      	str	r2, [r3, #8]
      break;
 80229d4:	e03b      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	6818      	ldr	r0, [r3, #0]
 80229da:	683b      	ldr	r3, [r7, #0]
 80229dc:	6859      	ldr	r1, [r3, #4]
 80229de:	683b      	ldr	r3, [r7, #0]
 80229e0:	68db      	ldr	r3, [r3, #12]
 80229e2:	461a      	mov	r2, r3
 80229e4:	f000 f950 	bl	8022c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	2150      	movs	r1, #80	; 0x50
 80229ee:	4618      	mov	r0, r3
 80229f0:	f000 fa5f 	bl	8022eb2 <TIM_ITRx_SetConfig>
      break;
 80229f4:	e02b      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	6818      	ldr	r0, [r3, #0]
 80229fa:	683b      	ldr	r3, [r7, #0]
 80229fc:	6859      	ldr	r1, [r3, #4]
 80229fe:	683b      	ldr	r3, [r7, #0]
 8022a00:	68db      	ldr	r3, [r3, #12]
 8022a02:	461a      	mov	r2, r3
 8022a04:	f000 f9ac 	bl	8022d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	681b      	ldr	r3, [r3, #0]
 8022a0c:	2160      	movs	r1, #96	; 0x60
 8022a0e:	4618      	mov	r0, r3
 8022a10:	f000 fa4f 	bl	8022eb2 <TIM_ITRx_SetConfig>
      break;
 8022a14:	e01b      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8022a16:	687b      	ldr	r3, [r7, #4]
 8022a18:	6818      	ldr	r0, [r3, #0]
 8022a1a:	683b      	ldr	r3, [r7, #0]
 8022a1c:	6859      	ldr	r1, [r3, #4]
 8022a1e:	683b      	ldr	r3, [r7, #0]
 8022a20:	68db      	ldr	r3, [r3, #12]
 8022a22:	461a      	mov	r2, r3
 8022a24:	f000 f930 	bl	8022c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	2140      	movs	r1, #64	; 0x40
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f000 fa3f 	bl	8022eb2 <TIM_ITRx_SetConfig>
      break;
 8022a34:	e00b      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	681a      	ldr	r2, [r3, #0]
 8022a3a:	683b      	ldr	r3, [r7, #0]
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	4619      	mov	r1, r3
 8022a40:	4610      	mov	r0, r2
 8022a42:	f000 fa36 	bl	8022eb2 <TIM_ITRx_SetConfig>
      break;
 8022a46:	e002      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8022a48:	bf00      	nop
 8022a4a:	e000      	b.n	8022a4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8022a4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	2201      	movs	r2, #1
 8022a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	2200      	movs	r2, #0
 8022a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022a5e:	2300      	movs	r3, #0
}
 8022a60:	4618      	mov	r0, r3
 8022a62:	3710      	adds	r7, #16
 8022a64:	46bd      	mov	sp, r7
 8022a66:	bd80      	pop	{r7, pc}

08022a68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022a68:	b480      	push	{r7}
 8022a6a:	b083      	sub	sp, #12
 8022a6c:	af00      	add	r7, sp, #0
 8022a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8022a70:	bf00      	nop
 8022a72:	370c      	adds	r7, #12
 8022a74:	46bd      	mov	sp, r7
 8022a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a7a:	4770      	bx	lr

08022a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022a7c:	b480      	push	{r7}
 8022a7e:	b083      	sub	sp, #12
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8022a84:	bf00      	nop
 8022a86:	370c      	adds	r7, #12
 8022a88:	46bd      	mov	sp, r7
 8022a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a8e:	4770      	bx	lr

08022a90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8022a90:	b480      	push	{r7}
 8022a92:	b083      	sub	sp, #12
 8022a94:	af00      	add	r7, sp, #0
 8022a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8022a98:	bf00      	nop
 8022a9a:	370c      	adds	r7, #12
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa2:	4770      	bx	lr

08022aa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8022aa4:	b480      	push	{r7}
 8022aa6:	b083      	sub	sp, #12
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8022aac:	bf00      	nop
 8022aae:	370c      	adds	r7, #12
 8022ab0:	46bd      	mov	sp, r7
 8022ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ab6:	4770      	bx	lr

08022ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8022ab8:	b480      	push	{r7}
 8022aba:	b085      	sub	sp, #20
 8022abc:	af00      	add	r7, sp, #0
 8022abe:	6078      	str	r0, [r7, #4]
 8022ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	4a34      	ldr	r2, [pc, #208]	; (8022b9c <TIM_Base_SetConfig+0xe4>)
 8022acc:	4293      	cmp	r3, r2
 8022ace:	d00f      	beq.n	8022af0 <TIM_Base_SetConfig+0x38>
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022ad6:	d00b      	beq.n	8022af0 <TIM_Base_SetConfig+0x38>
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	4a31      	ldr	r2, [pc, #196]	; (8022ba0 <TIM_Base_SetConfig+0xe8>)
 8022adc:	4293      	cmp	r3, r2
 8022ade:	d007      	beq.n	8022af0 <TIM_Base_SetConfig+0x38>
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	4a30      	ldr	r2, [pc, #192]	; (8022ba4 <TIM_Base_SetConfig+0xec>)
 8022ae4:	4293      	cmp	r3, r2
 8022ae6:	d003      	beq.n	8022af0 <TIM_Base_SetConfig+0x38>
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	4a2f      	ldr	r2, [pc, #188]	; (8022ba8 <TIM_Base_SetConfig+0xf0>)
 8022aec:	4293      	cmp	r3, r2
 8022aee:	d108      	bne.n	8022b02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8022af0:	68fb      	ldr	r3, [r7, #12]
 8022af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8022af8:	683b      	ldr	r3, [r7, #0]
 8022afa:	685b      	ldr	r3, [r3, #4]
 8022afc:	68fa      	ldr	r2, [r7, #12]
 8022afe:	4313      	orrs	r3, r2
 8022b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8022b02:	687b      	ldr	r3, [r7, #4]
 8022b04:	4a25      	ldr	r2, [pc, #148]	; (8022b9c <TIM_Base_SetConfig+0xe4>)
 8022b06:	4293      	cmp	r3, r2
 8022b08:	d01b      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022b10:	d017      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b12:	687b      	ldr	r3, [r7, #4]
 8022b14:	4a22      	ldr	r2, [pc, #136]	; (8022ba0 <TIM_Base_SetConfig+0xe8>)
 8022b16:	4293      	cmp	r3, r2
 8022b18:	d013      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b1a:	687b      	ldr	r3, [r7, #4]
 8022b1c:	4a21      	ldr	r2, [pc, #132]	; (8022ba4 <TIM_Base_SetConfig+0xec>)
 8022b1e:	4293      	cmp	r3, r2
 8022b20:	d00f      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	4a20      	ldr	r2, [pc, #128]	; (8022ba8 <TIM_Base_SetConfig+0xf0>)
 8022b26:	4293      	cmp	r3, r2
 8022b28:	d00b      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b2a:	687b      	ldr	r3, [r7, #4]
 8022b2c:	4a1f      	ldr	r2, [pc, #124]	; (8022bac <TIM_Base_SetConfig+0xf4>)
 8022b2e:	4293      	cmp	r3, r2
 8022b30:	d007      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	4a1e      	ldr	r2, [pc, #120]	; (8022bb0 <TIM_Base_SetConfig+0xf8>)
 8022b36:	4293      	cmp	r3, r2
 8022b38:	d003      	beq.n	8022b42 <TIM_Base_SetConfig+0x8a>
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	4a1d      	ldr	r2, [pc, #116]	; (8022bb4 <TIM_Base_SetConfig+0xfc>)
 8022b3e:	4293      	cmp	r3, r2
 8022b40:	d108      	bne.n	8022b54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8022b42:	68fb      	ldr	r3, [r7, #12]
 8022b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022b4a:	683b      	ldr	r3, [r7, #0]
 8022b4c:	68db      	ldr	r3, [r3, #12]
 8022b4e:	68fa      	ldr	r2, [r7, #12]
 8022b50:	4313      	orrs	r3, r2
 8022b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8022b54:	68fb      	ldr	r3, [r7, #12]
 8022b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8022b5a:	683b      	ldr	r3, [r7, #0]
 8022b5c:	695b      	ldr	r3, [r3, #20]
 8022b5e:	4313      	orrs	r3, r2
 8022b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	68fa      	ldr	r2, [r7, #12]
 8022b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022b68:	683b      	ldr	r3, [r7, #0]
 8022b6a:	689a      	ldr	r2, [r3, #8]
 8022b6c:	687b      	ldr	r3, [r7, #4]
 8022b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022b70:	683b      	ldr	r3, [r7, #0]
 8022b72:	681a      	ldr	r2, [r3, #0]
 8022b74:	687b      	ldr	r3, [r7, #4]
 8022b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	4a08      	ldr	r2, [pc, #32]	; (8022b9c <TIM_Base_SetConfig+0xe4>)
 8022b7c:	4293      	cmp	r3, r2
 8022b7e:	d103      	bne.n	8022b88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022b80:	683b      	ldr	r3, [r7, #0]
 8022b82:	691a      	ldr	r2, [r3, #16]
 8022b84:	687b      	ldr	r3, [r7, #4]
 8022b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	2201      	movs	r2, #1
 8022b8c:	615a      	str	r2, [r3, #20]
}
 8022b8e:	bf00      	nop
 8022b90:	3714      	adds	r7, #20
 8022b92:	46bd      	mov	sp, r7
 8022b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b98:	4770      	bx	lr
 8022b9a:	bf00      	nop
 8022b9c:	40010000 	.word	0x40010000
 8022ba0:	40000400 	.word	0x40000400
 8022ba4:	40000800 	.word	0x40000800
 8022ba8:	40000c00 	.word	0x40000c00
 8022bac:	40014000 	.word	0x40014000
 8022bb0:	40014400 	.word	0x40014400
 8022bb4:	40014800 	.word	0x40014800

08022bb8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8022bb8:	b480      	push	{r7}
 8022bba:	b087      	sub	sp, #28
 8022bbc:	af00      	add	r7, sp, #0
 8022bbe:	60f8      	str	r0, [r7, #12]
 8022bc0:	60b9      	str	r1, [r7, #8]
 8022bc2:	607a      	str	r2, [r7, #4]
 8022bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022bc6:	68fb      	ldr	r3, [r7, #12]
 8022bc8:	6a1b      	ldr	r3, [r3, #32]
 8022bca:	f023 0201 	bic.w	r2, r3, #1
 8022bce:	68fb      	ldr	r3, [r7, #12]
 8022bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022bd2:	68fb      	ldr	r3, [r7, #12]
 8022bd4:	699b      	ldr	r3, [r3, #24]
 8022bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022bd8:	68fb      	ldr	r3, [r7, #12]
 8022bda:	6a1b      	ldr	r3, [r3, #32]
 8022bdc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8022bde:	68fb      	ldr	r3, [r7, #12]
 8022be0:	4a24      	ldr	r2, [pc, #144]	; (8022c74 <TIM_TI1_SetConfig+0xbc>)
 8022be2:	4293      	cmp	r3, r2
 8022be4:	d013      	beq.n	8022c0e <TIM_TI1_SetConfig+0x56>
 8022be6:	68fb      	ldr	r3, [r7, #12]
 8022be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022bec:	d00f      	beq.n	8022c0e <TIM_TI1_SetConfig+0x56>
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	4a21      	ldr	r2, [pc, #132]	; (8022c78 <TIM_TI1_SetConfig+0xc0>)
 8022bf2:	4293      	cmp	r3, r2
 8022bf4:	d00b      	beq.n	8022c0e <TIM_TI1_SetConfig+0x56>
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	4a20      	ldr	r2, [pc, #128]	; (8022c7c <TIM_TI1_SetConfig+0xc4>)
 8022bfa:	4293      	cmp	r3, r2
 8022bfc:	d007      	beq.n	8022c0e <TIM_TI1_SetConfig+0x56>
 8022bfe:	68fb      	ldr	r3, [r7, #12]
 8022c00:	4a1f      	ldr	r2, [pc, #124]	; (8022c80 <TIM_TI1_SetConfig+0xc8>)
 8022c02:	4293      	cmp	r3, r2
 8022c04:	d003      	beq.n	8022c0e <TIM_TI1_SetConfig+0x56>
 8022c06:	68fb      	ldr	r3, [r7, #12]
 8022c08:	4a1e      	ldr	r2, [pc, #120]	; (8022c84 <TIM_TI1_SetConfig+0xcc>)
 8022c0a:	4293      	cmp	r3, r2
 8022c0c:	d101      	bne.n	8022c12 <TIM_TI1_SetConfig+0x5a>
 8022c0e:	2301      	movs	r3, #1
 8022c10:	e000      	b.n	8022c14 <TIM_TI1_SetConfig+0x5c>
 8022c12:	2300      	movs	r3, #0
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d008      	beq.n	8022c2a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8022c18:	697b      	ldr	r3, [r7, #20]
 8022c1a:	f023 0303 	bic.w	r3, r3, #3
 8022c1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8022c20:	697a      	ldr	r2, [r7, #20]
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	4313      	orrs	r3, r2
 8022c26:	617b      	str	r3, [r7, #20]
 8022c28:	e003      	b.n	8022c32 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8022c2a:	697b      	ldr	r3, [r7, #20]
 8022c2c:	f043 0301 	orr.w	r3, r3, #1
 8022c30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022c32:	697b      	ldr	r3, [r7, #20]
 8022c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022c38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8022c3a:	683b      	ldr	r3, [r7, #0]
 8022c3c:	011b      	lsls	r3, r3, #4
 8022c3e:	b2db      	uxtb	r3, r3
 8022c40:	697a      	ldr	r2, [r7, #20]
 8022c42:	4313      	orrs	r3, r2
 8022c44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022c46:	693b      	ldr	r3, [r7, #16]
 8022c48:	f023 030a 	bic.w	r3, r3, #10
 8022c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8022c4e:	68bb      	ldr	r3, [r7, #8]
 8022c50:	f003 030a 	and.w	r3, r3, #10
 8022c54:	693a      	ldr	r2, [r7, #16]
 8022c56:	4313      	orrs	r3, r2
 8022c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	697a      	ldr	r2, [r7, #20]
 8022c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	693a      	ldr	r2, [r7, #16]
 8022c64:	621a      	str	r2, [r3, #32]
}
 8022c66:	bf00      	nop
 8022c68:	371c      	adds	r7, #28
 8022c6a:	46bd      	mov	sp, r7
 8022c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c70:	4770      	bx	lr
 8022c72:	bf00      	nop
 8022c74:	40010000 	.word	0x40010000
 8022c78:	40000400 	.word	0x40000400
 8022c7c:	40000800 	.word	0x40000800
 8022c80:	40000c00 	.word	0x40000c00
 8022c84:	40014000 	.word	0x40014000

08022c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8022c88:	b480      	push	{r7}
 8022c8a:	b087      	sub	sp, #28
 8022c8c:	af00      	add	r7, sp, #0
 8022c8e:	60f8      	str	r0, [r7, #12]
 8022c90:	60b9      	str	r1, [r7, #8]
 8022c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	6a1b      	ldr	r3, [r3, #32]
 8022c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022c9a:	68fb      	ldr	r3, [r7, #12]
 8022c9c:	6a1b      	ldr	r3, [r3, #32]
 8022c9e:	f023 0201 	bic.w	r2, r3, #1
 8022ca2:	68fb      	ldr	r3, [r7, #12]
 8022ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022ca6:	68fb      	ldr	r3, [r7, #12]
 8022ca8:	699b      	ldr	r3, [r3, #24]
 8022caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022cac:	693b      	ldr	r3, [r7, #16]
 8022cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	011b      	lsls	r3, r3, #4
 8022cb8:	693a      	ldr	r2, [r7, #16]
 8022cba:	4313      	orrs	r3, r2
 8022cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8022cbe:	697b      	ldr	r3, [r7, #20]
 8022cc0:	f023 030a 	bic.w	r3, r3, #10
 8022cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8022cc6:	697a      	ldr	r2, [r7, #20]
 8022cc8:	68bb      	ldr	r3, [r7, #8]
 8022cca:	4313      	orrs	r3, r2
 8022ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8022cce:	68fb      	ldr	r3, [r7, #12]
 8022cd0:	693a      	ldr	r2, [r7, #16]
 8022cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	697a      	ldr	r2, [r7, #20]
 8022cd8:	621a      	str	r2, [r3, #32]
}
 8022cda:	bf00      	nop
 8022cdc:	371c      	adds	r7, #28
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ce4:	4770      	bx	lr

08022ce6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8022ce6:	b480      	push	{r7}
 8022ce8:	b087      	sub	sp, #28
 8022cea:	af00      	add	r7, sp, #0
 8022cec:	60f8      	str	r0, [r7, #12]
 8022cee:	60b9      	str	r1, [r7, #8]
 8022cf0:	607a      	str	r2, [r7, #4]
 8022cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	6a1b      	ldr	r3, [r3, #32]
 8022cf8:	f023 0210 	bic.w	r2, r3, #16
 8022cfc:	68fb      	ldr	r3, [r7, #12]
 8022cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022d00:	68fb      	ldr	r3, [r7, #12]
 8022d02:	699b      	ldr	r3, [r3, #24]
 8022d04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022d06:	68fb      	ldr	r3, [r7, #12]
 8022d08:	6a1b      	ldr	r3, [r3, #32]
 8022d0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8022d0c:	697b      	ldr	r3, [r7, #20]
 8022d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022d12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	021b      	lsls	r3, r3, #8
 8022d18:	697a      	ldr	r2, [r7, #20]
 8022d1a:	4313      	orrs	r3, r2
 8022d1c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022d1e:	697b      	ldr	r3, [r7, #20]
 8022d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8022d26:	683b      	ldr	r3, [r7, #0]
 8022d28:	031b      	lsls	r3, r3, #12
 8022d2a:	b29b      	uxth	r3, r3
 8022d2c:	697a      	ldr	r2, [r7, #20]
 8022d2e:	4313      	orrs	r3, r2
 8022d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022d32:	693b      	ldr	r3, [r7, #16]
 8022d34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8022d38:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8022d3a:	68bb      	ldr	r3, [r7, #8]
 8022d3c:	011b      	lsls	r3, r3, #4
 8022d3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8022d42:	693a      	ldr	r2, [r7, #16]
 8022d44:	4313      	orrs	r3, r2
 8022d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8022d48:	68fb      	ldr	r3, [r7, #12]
 8022d4a:	697a      	ldr	r2, [r7, #20]
 8022d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	693a      	ldr	r2, [r7, #16]
 8022d52:	621a      	str	r2, [r3, #32]
}
 8022d54:	bf00      	nop
 8022d56:	371c      	adds	r7, #28
 8022d58:	46bd      	mov	sp, r7
 8022d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d5e:	4770      	bx	lr

08022d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8022d60:	b480      	push	{r7}
 8022d62:	b087      	sub	sp, #28
 8022d64:	af00      	add	r7, sp, #0
 8022d66:	60f8      	str	r0, [r7, #12]
 8022d68:	60b9      	str	r1, [r7, #8]
 8022d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022d6c:	68fb      	ldr	r3, [r7, #12]
 8022d6e:	6a1b      	ldr	r3, [r3, #32]
 8022d70:	f023 0210 	bic.w	r2, r3, #16
 8022d74:	68fb      	ldr	r3, [r7, #12]
 8022d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	699b      	ldr	r3, [r3, #24]
 8022d7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022d7e:	68fb      	ldr	r3, [r7, #12]
 8022d80:	6a1b      	ldr	r3, [r3, #32]
 8022d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022d84:	697b      	ldr	r3, [r7, #20]
 8022d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022d8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	031b      	lsls	r3, r3, #12
 8022d90:	697a      	ldr	r2, [r7, #20]
 8022d92:	4313      	orrs	r3, r2
 8022d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022d96:	693b      	ldr	r3, [r7, #16]
 8022d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8022d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8022d9e:	68bb      	ldr	r3, [r7, #8]
 8022da0:	011b      	lsls	r3, r3, #4
 8022da2:	693a      	ldr	r2, [r7, #16]
 8022da4:	4313      	orrs	r3, r2
 8022da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8022da8:	68fb      	ldr	r3, [r7, #12]
 8022daa:	697a      	ldr	r2, [r7, #20]
 8022dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	693a      	ldr	r2, [r7, #16]
 8022db2:	621a      	str	r2, [r3, #32]
}
 8022db4:	bf00      	nop
 8022db6:	371c      	adds	r7, #28
 8022db8:	46bd      	mov	sp, r7
 8022dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022dbe:	4770      	bx	lr

08022dc0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8022dc0:	b480      	push	{r7}
 8022dc2:	b087      	sub	sp, #28
 8022dc4:	af00      	add	r7, sp, #0
 8022dc6:	60f8      	str	r0, [r7, #12]
 8022dc8:	60b9      	str	r1, [r7, #8]
 8022dca:	607a      	str	r2, [r7, #4]
 8022dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8022dce:	68fb      	ldr	r3, [r7, #12]
 8022dd0:	6a1b      	ldr	r3, [r3, #32]
 8022dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022dd6:	68fb      	ldr	r3, [r7, #12]
 8022dd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8022dda:	68fb      	ldr	r3, [r7, #12]
 8022ddc:	69db      	ldr	r3, [r3, #28]
 8022dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022de0:	68fb      	ldr	r3, [r7, #12]
 8022de2:	6a1b      	ldr	r3, [r3, #32]
 8022de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8022de6:	697b      	ldr	r3, [r7, #20]
 8022de8:	f023 0303 	bic.w	r3, r3, #3
 8022dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8022dee:	697a      	ldr	r2, [r7, #20]
 8022df0:	687b      	ldr	r3, [r7, #4]
 8022df2:	4313      	orrs	r3, r2
 8022df4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8022df6:	697b      	ldr	r3, [r7, #20]
 8022df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8022dfe:	683b      	ldr	r3, [r7, #0]
 8022e00:	011b      	lsls	r3, r3, #4
 8022e02:	b2db      	uxtb	r3, r3
 8022e04:	697a      	ldr	r2, [r7, #20]
 8022e06:	4313      	orrs	r3, r2
 8022e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8022e0a:	693b      	ldr	r3, [r7, #16]
 8022e0c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8022e10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8022e12:	68bb      	ldr	r3, [r7, #8]
 8022e14:	021b      	lsls	r3, r3, #8
 8022e16:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8022e1a:	693a      	ldr	r2, [r7, #16]
 8022e1c:	4313      	orrs	r3, r2
 8022e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8022e20:	68fb      	ldr	r3, [r7, #12]
 8022e22:	697a      	ldr	r2, [r7, #20]
 8022e24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8022e26:	68fb      	ldr	r3, [r7, #12]
 8022e28:	693a      	ldr	r2, [r7, #16]
 8022e2a:	621a      	str	r2, [r3, #32]
}
 8022e2c:	bf00      	nop
 8022e2e:	371c      	adds	r7, #28
 8022e30:	46bd      	mov	sp, r7
 8022e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e36:	4770      	bx	lr

08022e38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8022e38:	b480      	push	{r7}
 8022e3a:	b087      	sub	sp, #28
 8022e3c:	af00      	add	r7, sp, #0
 8022e3e:	60f8      	str	r0, [r7, #12]
 8022e40:	60b9      	str	r1, [r7, #8]
 8022e42:	607a      	str	r2, [r7, #4]
 8022e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	6a1b      	ldr	r3, [r3, #32]
 8022e4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8022e4e:	68fb      	ldr	r3, [r7, #12]
 8022e50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8022e52:	68fb      	ldr	r3, [r7, #12]
 8022e54:	69db      	ldr	r3, [r3, #28]
 8022e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022e58:	68fb      	ldr	r3, [r7, #12]
 8022e5a:	6a1b      	ldr	r3, [r3, #32]
 8022e5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8022e5e:	697b      	ldr	r3, [r7, #20]
 8022e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022e64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	021b      	lsls	r3, r3, #8
 8022e6a:	697a      	ldr	r2, [r7, #20]
 8022e6c:	4313      	orrs	r3, r2
 8022e6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8022e70:	697b      	ldr	r3, [r7, #20]
 8022e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022e76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8022e78:	683b      	ldr	r3, [r7, #0]
 8022e7a:	031b      	lsls	r3, r3, #12
 8022e7c:	b29b      	uxth	r3, r3
 8022e7e:	697a      	ldr	r2, [r7, #20]
 8022e80:	4313      	orrs	r3, r2
 8022e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8022e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8022e8c:	68bb      	ldr	r3, [r7, #8]
 8022e8e:	031b      	lsls	r3, r3, #12
 8022e90:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8022e94:	693a      	ldr	r2, [r7, #16]
 8022e96:	4313      	orrs	r3, r2
 8022e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8022e9a:	68fb      	ldr	r3, [r7, #12]
 8022e9c:	697a      	ldr	r2, [r7, #20]
 8022e9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8022ea0:	68fb      	ldr	r3, [r7, #12]
 8022ea2:	693a      	ldr	r2, [r7, #16]
 8022ea4:	621a      	str	r2, [r3, #32]
}
 8022ea6:	bf00      	nop
 8022ea8:	371c      	adds	r7, #28
 8022eaa:	46bd      	mov	sp, r7
 8022eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eb0:	4770      	bx	lr

08022eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8022eb2:	b480      	push	{r7}
 8022eb4:	b085      	sub	sp, #20
 8022eb6:	af00      	add	r7, sp, #0
 8022eb8:	6078      	str	r0, [r7, #4]
 8022eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	689b      	ldr	r3, [r3, #8]
 8022ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8022ec2:	68fb      	ldr	r3, [r7, #12]
 8022ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022eca:	683a      	ldr	r2, [r7, #0]
 8022ecc:	68fb      	ldr	r3, [r7, #12]
 8022ece:	4313      	orrs	r3, r2
 8022ed0:	f043 0307 	orr.w	r3, r3, #7
 8022ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022ed6:	687b      	ldr	r3, [r7, #4]
 8022ed8:	68fa      	ldr	r2, [r7, #12]
 8022eda:	609a      	str	r2, [r3, #8]
}
 8022edc:	bf00      	nop
 8022ede:	3714      	adds	r7, #20
 8022ee0:	46bd      	mov	sp, r7
 8022ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ee6:	4770      	bx	lr

08022ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8022ee8:	b480      	push	{r7}
 8022eea:	b087      	sub	sp, #28
 8022eec:	af00      	add	r7, sp, #0
 8022eee:	60f8      	str	r0, [r7, #12]
 8022ef0:	60b9      	str	r1, [r7, #8]
 8022ef2:	607a      	str	r2, [r7, #4]
 8022ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8022ef6:	68fb      	ldr	r3, [r7, #12]
 8022ef8:	689b      	ldr	r3, [r3, #8]
 8022efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022efc:	697b      	ldr	r3, [r7, #20]
 8022efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022f04:	683b      	ldr	r3, [r7, #0]
 8022f06:	021a      	lsls	r2, r3, #8
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	431a      	orrs	r2, r3
 8022f0c:	68bb      	ldr	r3, [r7, #8]
 8022f0e:	4313      	orrs	r3, r2
 8022f10:	697a      	ldr	r2, [r7, #20]
 8022f12:	4313      	orrs	r3, r2
 8022f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022f16:	68fb      	ldr	r3, [r7, #12]
 8022f18:	697a      	ldr	r2, [r7, #20]
 8022f1a:	609a      	str	r2, [r3, #8]
}
 8022f1c:	bf00      	nop
 8022f1e:	371c      	adds	r7, #28
 8022f20:	46bd      	mov	sp, r7
 8022f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f26:	4770      	bx	lr

08022f28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8022f28:	b480      	push	{r7}
 8022f2a:	b087      	sub	sp, #28
 8022f2c:	af00      	add	r7, sp, #0
 8022f2e:	60f8      	str	r0, [r7, #12]
 8022f30:	60b9      	str	r1, [r7, #8]
 8022f32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8022f34:	68bb      	ldr	r3, [r7, #8]
 8022f36:	f003 031f 	and.w	r3, r3, #31
 8022f3a:	2201      	movs	r2, #1
 8022f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8022f40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8022f42:	68fb      	ldr	r3, [r7, #12]
 8022f44:	6a1a      	ldr	r2, [r3, #32]
 8022f46:	697b      	ldr	r3, [r7, #20]
 8022f48:	43db      	mvns	r3, r3
 8022f4a:	401a      	ands	r2, r3
 8022f4c:	68fb      	ldr	r3, [r7, #12]
 8022f4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8022f50:	68fb      	ldr	r3, [r7, #12]
 8022f52:	6a1a      	ldr	r2, [r3, #32]
 8022f54:	68bb      	ldr	r3, [r7, #8]
 8022f56:	f003 031f 	and.w	r3, r3, #31
 8022f5a:	6879      	ldr	r1, [r7, #4]
 8022f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8022f60:	431a      	orrs	r2, r3
 8022f62:	68fb      	ldr	r3, [r7, #12]
 8022f64:	621a      	str	r2, [r3, #32]
}
 8022f66:	bf00      	nop
 8022f68:	371c      	adds	r7, #28
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f70:	4770      	bx	lr
	...

08022f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8022f74:	b480      	push	{r7}
 8022f76:	b085      	sub	sp, #20
 8022f78:	af00      	add	r7, sp, #0
 8022f7a:	6078      	str	r0, [r7, #4]
 8022f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022f7e:	687b      	ldr	r3, [r7, #4]
 8022f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022f84:	2b01      	cmp	r3, #1
 8022f86:	d101      	bne.n	8022f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8022f88:	2302      	movs	r3, #2
 8022f8a:	e050      	b.n	802302e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	2201      	movs	r2, #1
 8022f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	2202      	movs	r2, #2
 8022f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	681b      	ldr	r3, [r3, #0]
 8022fa0:	685b      	ldr	r3, [r3, #4]
 8022fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8022fa4:	687b      	ldr	r3, [r7, #4]
 8022fa6:	681b      	ldr	r3, [r3, #0]
 8022fa8:	689b      	ldr	r3, [r3, #8]
 8022faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8022fac:	68fb      	ldr	r3, [r7, #12]
 8022fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022fb4:	683b      	ldr	r3, [r7, #0]
 8022fb6:	681b      	ldr	r3, [r3, #0]
 8022fb8:	68fa      	ldr	r2, [r7, #12]
 8022fba:	4313      	orrs	r3, r2
 8022fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	681b      	ldr	r3, [r3, #0]
 8022fc2:	68fa      	ldr	r2, [r7, #12]
 8022fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	681b      	ldr	r3, [r3, #0]
 8022fca:	4a1c      	ldr	r2, [pc, #112]	; (802303c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8022fcc:	4293      	cmp	r3, r2
 8022fce:	d018      	beq.n	8023002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	681b      	ldr	r3, [r3, #0]
 8022fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022fd8:	d013      	beq.n	8023002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022fda:	687b      	ldr	r3, [r7, #4]
 8022fdc:	681b      	ldr	r3, [r3, #0]
 8022fde:	4a18      	ldr	r2, [pc, #96]	; (8023040 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8022fe0:	4293      	cmp	r3, r2
 8022fe2:	d00e      	beq.n	8023002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	681b      	ldr	r3, [r3, #0]
 8022fe8:	4a16      	ldr	r2, [pc, #88]	; (8023044 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8022fea:	4293      	cmp	r3, r2
 8022fec:	d009      	beq.n	8023002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	4a15      	ldr	r2, [pc, #84]	; (8023048 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8022ff4:	4293      	cmp	r3, r2
 8022ff6:	d004      	beq.n	8023002 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ff8:	687b      	ldr	r3, [r7, #4]
 8022ffa:	681b      	ldr	r3, [r3, #0]
 8022ffc:	4a13      	ldr	r2, [pc, #76]	; (802304c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8022ffe:	4293      	cmp	r3, r2
 8023000:	d10c      	bne.n	802301c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8023002:	68bb      	ldr	r3, [r7, #8]
 8023004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8023008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802300a:	683b      	ldr	r3, [r7, #0]
 802300c:	685b      	ldr	r3, [r3, #4]
 802300e:	68ba      	ldr	r2, [r7, #8]
 8023010:	4313      	orrs	r3, r2
 8023012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	681b      	ldr	r3, [r3, #0]
 8023018:	68ba      	ldr	r2, [r7, #8]
 802301a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	2201      	movs	r2, #1
 8023020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	2200      	movs	r2, #0
 8023028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802302c:	2300      	movs	r3, #0
}
 802302e:	4618      	mov	r0, r3
 8023030:	3714      	adds	r7, #20
 8023032:	46bd      	mov	sp, r7
 8023034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023038:	4770      	bx	lr
 802303a:	bf00      	nop
 802303c:	40010000 	.word	0x40010000
 8023040:	40000400 	.word	0x40000400
 8023044:	40000800 	.word	0x40000800
 8023048:	40000c00 	.word	0x40000c00
 802304c:	40014000 	.word	0x40014000

08023050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8023050:	b480      	push	{r7}
 8023052:	b083      	sub	sp, #12
 8023054:	af00      	add	r7, sp, #0
 8023056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8023058:	bf00      	nop
 802305a:	370c      	adds	r7, #12
 802305c:	46bd      	mov	sp, r7
 802305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023062:	4770      	bx	lr

08023064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8023064:	b480      	push	{r7}
 8023066:	b083      	sub	sp, #12
 8023068:	af00      	add	r7, sp, #0
 802306a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802306c:	bf00      	nop
 802306e:	370c      	adds	r7, #12
 8023070:	46bd      	mov	sp, r7
 8023072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023076:	4770      	bx	lr

08023078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
 802307e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023080:	687b      	ldr	r3, [r7, #4]
 8023082:	2b00      	cmp	r3, #0
 8023084:	d101      	bne.n	802308a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023086:	2301      	movs	r3, #1
 8023088:	e03f      	b.n	802310a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023090:	b2db      	uxtb	r3, r3
 8023092:	2b00      	cmp	r3, #0
 8023094:	d106      	bne.n	80230a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	2200      	movs	r2, #0
 802309a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802309e:	6878      	ldr	r0, [r7, #4]
 80230a0:	f7f5 fa18 	bl	80184d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	2224      	movs	r2, #36	; 0x24
 80230a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80230ac:	687b      	ldr	r3, [r7, #4]
 80230ae:	681b      	ldr	r3, [r3, #0]
 80230b0:	68da      	ldr	r2, [r3, #12]
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80230ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80230bc:	6878      	ldr	r0, [r7, #4]
 80230be:	f000 fcd5 	bl	8023a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	691a      	ldr	r2, [r3, #16]
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80230d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	695a      	ldr	r2, [r3, #20]
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80230e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80230e2:	687b      	ldr	r3, [r7, #4]
 80230e4:	681b      	ldr	r3, [r3, #0]
 80230e6:	68da      	ldr	r2, [r3, #12]
 80230e8:	687b      	ldr	r3, [r7, #4]
 80230ea:	681b      	ldr	r3, [r3, #0]
 80230ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80230f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80230f2:	687b      	ldr	r3, [r7, #4]
 80230f4:	2200      	movs	r2, #0
 80230f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	2220      	movs	r2, #32
 80230fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	2220      	movs	r2, #32
 8023104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8023108:	2300      	movs	r3, #0
}
 802310a:	4618      	mov	r0, r3
 802310c:	3708      	adds	r7, #8
 802310e:	46bd      	mov	sp, r7
 8023110:	bd80      	pop	{r7, pc}

08023112 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8023112:	b580      	push	{r7, lr}
 8023114:	b082      	sub	sp, #8
 8023116:	af00      	add	r7, sp, #0
 8023118:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	2b00      	cmp	r3, #0
 802311e:	d101      	bne.n	8023124 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8023120:	2301      	movs	r3, #1
 8023122:	e01e      	b.n	8023162 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	2224      	movs	r2, #36	; 0x24
 8023128:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	68da      	ldr	r2, [r3, #12]
 8023132:	687b      	ldr	r3, [r7, #4]
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802313a:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 802313c:	6878      	ldr	r0, [r7, #4]
 802313e:	f7f5 fa9f 	bl	8018680 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023142:	687b      	ldr	r3, [r7, #4]
 8023144:	2200      	movs	r2, #0
 8023146:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	2200      	movs	r2, #0
 802314c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	2200      	movs	r2, #0
 8023154:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	2200      	movs	r2, #0
 802315c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023160:	2300      	movs	r3, #0
}
 8023162:	4618      	mov	r0, r3
 8023164:	3708      	adds	r7, #8
 8023166:	46bd      	mov	sp, r7
 8023168:	bd80      	pop	{r7, pc}

0802316a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802316a:	b580      	push	{r7, lr}
 802316c:	b088      	sub	sp, #32
 802316e:	af02      	add	r7, sp, #8
 8023170:	60f8      	str	r0, [r7, #12]
 8023172:	60b9      	str	r1, [r7, #8]
 8023174:	603b      	str	r3, [r7, #0]
 8023176:	4613      	mov	r3, r2
 8023178:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 802317a:	2300      	movs	r3, #0
 802317c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802317e:	68fb      	ldr	r3, [r7, #12]
 8023180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023184:	b2db      	uxtb	r3, r3
 8023186:	2b20      	cmp	r3, #32
 8023188:	f040 8083 	bne.w	8023292 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 802318c:	68bb      	ldr	r3, [r7, #8]
 802318e:	2b00      	cmp	r3, #0
 8023190:	d002      	beq.n	8023198 <HAL_UART_Transmit+0x2e>
 8023192:	88fb      	ldrh	r3, [r7, #6]
 8023194:	2b00      	cmp	r3, #0
 8023196:	d101      	bne.n	802319c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8023198:	2301      	movs	r3, #1
 802319a:	e07b      	b.n	8023294 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802319c:	68fb      	ldr	r3, [r7, #12]
 802319e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80231a2:	2b01      	cmp	r3, #1
 80231a4:	d101      	bne.n	80231aa <HAL_UART_Transmit+0x40>
 80231a6:	2302      	movs	r3, #2
 80231a8:	e074      	b.n	8023294 <HAL_UART_Transmit+0x12a>
 80231aa:	68fb      	ldr	r3, [r7, #12]
 80231ac:	2201      	movs	r2, #1
 80231ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80231b2:	68fb      	ldr	r3, [r7, #12]
 80231b4:	2200      	movs	r2, #0
 80231b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80231b8:	68fb      	ldr	r3, [r7, #12]
 80231ba:	2221      	movs	r2, #33	; 0x21
 80231bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80231c0:	f7fa fa56 	bl	801d670 <HAL_GetTick>
 80231c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	88fa      	ldrh	r2, [r7, #6]
 80231ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80231cc:	68fb      	ldr	r3, [r7, #12]
 80231ce:	88fa      	ldrh	r2, [r7, #6]
 80231d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80231d2:	68fb      	ldr	r3, [r7, #12]
 80231d4:	2200      	movs	r2, #0
 80231d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80231da:	e042      	b.n	8023262 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80231dc:	68fb      	ldr	r3, [r7, #12]
 80231de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80231e0:	b29b      	uxth	r3, r3
 80231e2:	3b01      	subs	r3, #1
 80231e4:	b29a      	uxth	r2, r3
 80231e6:	68fb      	ldr	r3, [r7, #12]
 80231e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80231ea:	68fb      	ldr	r3, [r7, #12]
 80231ec:	689b      	ldr	r3, [r3, #8]
 80231ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80231f2:	d122      	bne.n	802323a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80231f4:	683b      	ldr	r3, [r7, #0]
 80231f6:	9300      	str	r3, [sp, #0]
 80231f8:	697b      	ldr	r3, [r7, #20]
 80231fa:	2200      	movs	r2, #0
 80231fc:	2180      	movs	r1, #128	; 0x80
 80231fe:	68f8      	ldr	r0, [r7, #12]
 8023200:	f000 fab2 	bl	8023768 <UART_WaitOnFlagUntilTimeout>
 8023204:	4603      	mov	r3, r0
 8023206:	2b00      	cmp	r3, #0
 8023208:	d001      	beq.n	802320e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 802320a:	2303      	movs	r3, #3
 802320c:	e042      	b.n	8023294 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 802320e:	68bb      	ldr	r3, [r7, #8]
 8023210:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8023212:	693b      	ldr	r3, [r7, #16]
 8023214:	881b      	ldrh	r3, [r3, #0]
 8023216:	461a      	mov	r2, r3
 8023218:	68fb      	ldr	r3, [r7, #12]
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023220:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8023222:	68fb      	ldr	r3, [r7, #12]
 8023224:	691b      	ldr	r3, [r3, #16]
 8023226:	2b00      	cmp	r3, #0
 8023228:	d103      	bne.n	8023232 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 802322a:	68bb      	ldr	r3, [r7, #8]
 802322c:	3302      	adds	r3, #2
 802322e:	60bb      	str	r3, [r7, #8]
 8023230:	e017      	b.n	8023262 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8023232:	68bb      	ldr	r3, [r7, #8]
 8023234:	3301      	adds	r3, #1
 8023236:	60bb      	str	r3, [r7, #8]
 8023238:	e013      	b.n	8023262 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802323a:	683b      	ldr	r3, [r7, #0]
 802323c:	9300      	str	r3, [sp, #0]
 802323e:	697b      	ldr	r3, [r7, #20]
 8023240:	2200      	movs	r2, #0
 8023242:	2180      	movs	r1, #128	; 0x80
 8023244:	68f8      	ldr	r0, [r7, #12]
 8023246:	f000 fa8f 	bl	8023768 <UART_WaitOnFlagUntilTimeout>
 802324a:	4603      	mov	r3, r0
 802324c:	2b00      	cmp	r3, #0
 802324e:	d001      	beq.n	8023254 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8023250:	2303      	movs	r3, #3
 8023252:	e01f      	b.n	8023294 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8023254:	68bb      	ldr	r3, [r7, #8]
 8023256:	1c5a      	adds	r2, r3, #1
 8023258:	60ba      	str	r2, [r7, #8]
 802325a:	781a      	ldrb	r2, [r3, #0]
 802325c:	68fb      	ldr	r3, [r7, #12]
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8023262:	68fb      	ldr	r3, [r7, #12]
 8023264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023266:	b29b      	uxth	r3, r3
 8023268:	2b00      	cmp	r3, #0
 802326a:	d1b7      	bne.n	80231dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	9300      	str	r3, [sp, #0]
 8023270:	697b      	ldr	r3, [r7, #20]
 8023272:	2200      	movs	r2, #0
 8023274:	2140      	movs	r1, #64	; 0x40
 8023276:	68f8      	ldr	r0, [r7, #12]
 8023278:	f000 fa76 	bl	8023768 <UART_WaitOnFlagUntilTimeout>
 802327c:	4603      	mov	r3, r0
 802327e:	2b00      	cmp	r3, #0
 8023280:	d001      	beq.n	8023286 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8023282:	2303      	movs	r3, #3
 8023284:	e006      	b.n	8023294 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8023286:	68fb      	ldr	r3, [r7, #12]
 8023288:	2220      	movs	r2, #32
 802328a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 802328e:	2300      	movs	r3, #0
 8023290:	e000      	b.n	8023294 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8023292:	2302      	movs	r3, #2
  }
}
 8023294:	4618      	mov	r0, r3
 8023296:	3718      	adds	r7, #24
 8023298:	46bd      	mov	sp, r7
 802329a:	bd80      	pop	{r7, pc}

0802329c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802329c:	b480      	push	{r7}
 802329e:	b085      	sub	sp, #20
 80232a0:	af00      	add	r7, sp, #0
 80232a2:	60f8      	str	r0, [r7, #12]
 80232a4:	60b9      	str	r1, [r7, #8]
 80232a6:	4613      	mov	r3, r2
 80232a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80232aa:	68fb      	ldr	r3, [r7, #12]
 80232ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80232b0:	b2db      	uxtb	r3, r3
 80232b2:	2b20      	cmp	r3, #32
 80232b4:	d130      	bne.n	8023318 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80232b6:	68bb      	ldr	r3, [r7, #8]
 80232b8:	2b00      	cmp	r3, #0
 80232ba:	d002      	beq.n	80232c2 <HAL_UART_Transmit_IT+0x26>
 80232bc:	88fb      	ldrh	r3, [r7, #6]
 80232be:	2b00      	cmp	r3, #0
 80232c0:	d101      	bne.n	80232c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80232c2:	2301      	movs	r3, #1
 80232c4:	e029      	b.n	802331a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80232c6:	68fb      	ldr	r3, [r7, #12]
 80232c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80232cc:	2b01      	cmp	r3, #1
 80232ce:	d101      	bne.n	80232d4 <HAL_UART_Transmit_IT+0x38>
 80232d0:	2302      	movs	r3, #2
 80232d2:	e022      	b.n	802331a <HAL_UART_Transmit_IT+0x7e>
 80232d4:	68fb      	ldr	r3, [r7, #12]
 80232d6:	2201      	movs	r2, #1
 80232d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80232dc:	68fb      	ldr	r3, [r7, #12]
 80232de:	68ba      	ldr	r2, [r7, #8]
 80232e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80232e2:	68fb      	ldr	r3, [r7, #12]
 80232e4:	88fa      	ldrh	r2, [r7, #6]
 80232e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80232e8:	68fb      	ldr	r3, [r7, #12]
 80232ea:	88fa      	ldrh	r2, [r7, #6]
 80232ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80232ee:	68fb      	ldr	r3, [r7, #12]
 80232f0:	2200      	movs	r2, #0
 80232f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80232f4:	68fb      	ldr	r3, [r7, #12]
 80232f6:	2221      	movs	r2, #33	; 0x21
 80232f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80232fc:	68fb      	ldr	r3, [r7, #12]
 80232fe:	2200      	movs	r2, #0
 8023300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8023304:	68fb      	ldr	r3, [r7, #12]
 8023306:	681b      	ldr	r3, [r3, #0]
 8023308:	68da      	ldr	r2, [r3, #12]
 802330a:	68fb      	ldr	r3, [r7, #12]
 802330c:	681b      	ldr	r3, [r3, #0]
 802330e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8023312:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8023314:	2300      	movs	r3, #0
 8023316:	e000      	b.n	802331a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8023318:	2302      	movs	r3, #2
  }
}
 802331a:	4618      	mov	r0, r3
 802331c:	3714      	adds	r7, #20
 802331e:	46bd      	mov	sp, r7
 8023320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023324:	4770      	bx	lr
	...

08023328 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8023328:	b580      	push	{r7, lr}
 802332a:	b086      	sub	sp, #24
 802332c:	af00      	add	r7, sp, #0
 802332e:	60f8      	str	r0, [r7, #12]
 8023330:	60b9      	str	r1, [r7, #8]
 8023332:	4613      	mov	r3, r2
 8023334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8023336:	68fb      	ldr	r3, [r7, #12]
 8023338:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802333c:	b2db      	uxtb	r3, r3
 802333e:	2b20      	cmp	r3, #32
 8023340:	d166      	bne.n	8023410 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8023342:	68bb      	ldr	r3, [r7, #8]
 8023344:	2b00      	cmp	r3, #0
 8023346:	d002      	beq.n	802334e <HAL_UART_Receive_DMA+0x26>
 8023348:	88fb      	ldrh	r3, [r7, #6]
 802334a:	2b00      	cmp	r3, #0
 802334c:	d101      	bne.n	8023352 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 802334e:	2301      	movs	r3, #1
 8023350:	e05f      	b.n	8023412 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8023352:	68fb      	ldr	r3, [r7, #12]
 8023354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023358:	2b01      	cmp	r3, #1
 802335a:	d101      	bne.n	8023360 <HAL_UART_Receive_DMA+0x38>
 802335c:	2302      	movs	r3, #2
 802335e:	e058      	b.n	8023412 <HAL_UART_Receive_DMA+0xea>
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	2201      	movs	r2, #1
 8023364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8023368:	68ba      	ldr	r2, [r7, #8]
 802336a:	68fb      	ldr	r3, [r7, #12]
 802336c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 802336e:	68fb      	ldr	r3, [r7, #12]
 8023370:	88fa      	ldrh	r2, [r7, #6]
 8023372:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023374:	68fb      	ldr	r3, [r7, #12]
 8023376:	2200      	movs	r2, #0
 8023378:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	2222      	movs	r2, #34	; 0x22
 802337e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023386:	4a25      	ldr	r2, [pc, #148]	; (802341c <HAL_UART_Receive_DMA+0xf4>)
 8023388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802338e:	4a24      	ldr	r2, [pc, #144]	; (8023420 <HAL_UART_Receive_DMA+0xf8>)
 8023390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8023392:	68fb      	ldr	r3, [r7, #12]
 8023394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023396:	4a23      	ldr	r2, [pc, #140]	; (8023424 <HAL_UART_Receive_DMA+0xfc>)
 8023398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 802339a:	68fb      	ldr	r3, [r7, #12]
 802339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802339e:	2200      	movs	r2, #0
 80233a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80233a2:	f107 0308 	add.w	r3, r7, #8
 80233a6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80233a8:	68fb      	ldr	r3, [r7, #12]
 80233aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80233ac:	68fb      	ldr	r3, [r7, #12]
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	3304      	adds	r3, #4
 80233b2:	4619      	mov	r1, r3
 80233b4:	697b      	ldr	r3, [r7, #20]
 80233b6:	681a      	ldr	r2, [r3, #0]
 80233b8:	88fb      	ldrh	r3, [r7, #6]
 80233ba:	f7fb f913 	bl	801e5e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80233be:	2300      	movs	r3, #0
 80233c0:	613b      	str	r3, [r7, #16]
 80233c2:	68fb      	ldr	r3, [r7, #12]
 80233c4:	681b      	ldr	r3, [r3, #0]
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	613b      	str	r3, [r7, #16]
 80233ca:	68fb      	ldr	r3, [r7, #12]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	685b      	ldr	r3, [r3, #4]
 80233d0:	613b      	str	r3, [r7, #16]
 80233d2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80233d4:	68fb      	ldr	r3, [r7, #12]
 80233d6:	2200      	movs	r2, #0
 80233d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80233dc:	68fb      	ldr	r3, [r7, #12]
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	68da      	ldr	r2, [r3, #12]
 80233e2:	68fb      	ldr	r3, [r7, #12]
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80233ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80233ec:	68fb      	ldr	r3, [r7, #12]
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	695a      	ldr	r2, [r3, #20]
 80233f2:	68fb      	ldr	r3, [r7, #12]
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	f042 0201 	orr.w	r2, r2, #1
 80233fa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80233fc:	68fb      	ldr	r3, [r7, #12]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	695a      	ldr	r2, [r3, #20]
 8023402:	68fb      	ldr	r3, [r7, #12]
 8023404:	681b      	ldr	r3, [r3, #0]
 8023406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802340a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 802340c:	2300      	movs	r3, #0
 802340e:	e000      	b.n	8023412 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8023410:	2302      	movs	r3, #2
  }
}
 8023412:	4618      	mov	r0, r3
 8023414:	3718      	adds	r7, #24
 8023416:	46bd      	mov	sp, r7
 8023418:	bd80      	pop	{r7, pc}
 802341a:	bf00      	nop
 802341c:	08023651 	.word	0x08023651
 8023420:	080236b9 	.word	0x080236b9
 8023424:	080236d5 	.word	0x080236d5

08023428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8023428:	b580      	push	{r7, lr}
 802342a:	b088      	sub	sp, #32
 802342c:	af00      	add	r7, sp, #0
 802342e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8023430:	687b      	ldr	r3, [r7, #4]
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	681b      	ldr	r3, [r3, #0]
 802343c:	68db      	ldr	r3, [r3, #12]
 802343e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	695b      	ldr	r3, [r3, #20]
 8023446:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8023448:	2300      	movs	r3, #0
 802344a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 802344c:	2300      	movs	r3, #0
 802344e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8023450:	69fb      	ldr	r3, [r7, #28]
 8023452:	f003 030f 	and.w	r3, r3, #15
 8023456:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8023458:	693b      	ldr	r3, [r7, #16]
 802345a:	2b00      	cmp	r3, #0
 802345c:	d10d      	bne.n	802347a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802345e:	69fb      	ldr	r3, [r7, #28]
 8023460:	f003 0320 	and.w	r3, r3, #32
 8023464:	2b00      	cmp	r3, #0
 8023466:	d008      	beq.n	802347a <HAL_UART_IRQHandler+0x52>
 8023468:	69bb      	ldr	r3, [r7, #24]
 802346a:	f003 0320 	and.w	r3, r3, #32
 802346e:	2b00      	cmp	r3, #0
 8023470:	d003      	beq.n	802347a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8023472:	6878      	ldr	r0, [r7, #4]
 8023474:	f000 fa78 	bl	8023968 <UART_Receive_IT>
      return;
 8023478:	e0d0      	b.n	802361c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802347a:	693b      	ldr	r3, [r7, #16]
 802347c:	2b00      	cmp	r3, #0
 802347e:	f000 80b0 	beq.w	80235e2 <HAL_UART_IRQHandler+0x1ba>
 8023482:	697b      	ldr	r3, [r7, #20]
 8023484:	f003 0301 	and.w	r3, r3, #1
 8023488:	2b00      	cmp	r3, #0
 802348a:	d105      	bne.n	8023498 <HAL_UART_IRQHandler+0x70>
 802348c:	69bb      	ldr	r3, [r7, #24]
 802348e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8023492:	2b00      	cmp	r3, #0
 8023494:	f000 80a5 	beq.w	80235e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8023498:	69fb      	ldr	r3, [r7, #28]
 802349a:	f003 0301 	and.w	r3, r3, #1
 802349e:	2b00      	cmp	r3, #0
 80234a0:	d00a      	beq.n	80234b8 <HAL_UART_IRQHandler+0x90>
 80234a2:	69bb      	ldr	r3, [r7, #24]
 80234a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d005      	beq.n	80234b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234b0:	f043 0201 	orr.w	r2, r3, #1
 80234b4:	687b      	ldr	r3, [r7, #4]
 80234b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80234b8:	69fb      	ldr	r3, [r7, #28]
 80234ba:	f003 0304 	and.w	r3, r3, #4
 80234be:	2b00      	cmp	r3, #0
 80234c0:	d00a      	beq.n	80234d8 <HAL_UART_IRQHandler+0xb0>
 80234c2:	697b      	ldr	r3, [r7, #20]
 80234c4:	f003 0301 	and.w	r3, r3, #1
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	d005      	beq.n	80234d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234d0:	f043 0202 	orr.w	r2, r3, #2
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80234d8:	69fb      	ldr	r3, [r7, #28]
 80234da:	f003 0302 	and.w	r3, r3, #2
 80234de:	2b00      	cmp	r3, #0
 80234e0:	d00a      	beq.n	80234f8 <HAL_UART_IRQHandler+0xd0>
 80234e2:	697b      	ldr	r3, [r7, #20]
 80234e4:	f003 0301 	and.w	r3, r3, #1
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d005      	beq.n	80234f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80234f0:	f043 0204 	orr.w	r2, r3, #4
 80234f4:	687b      	ldr	r3, [r7, #4]
 80234f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80234f8:	69fb      	ldr	r3, [r7, #28]
 80234fa:	f003 0308 	and.w	r3, r3, #8
 80234fe:	2b00      	cmp	r3, #0
 8023500:	d00f      	beq.n	8023522 <HAL_UART_IRQHandler+0xfa>
 8023502:	69bb      	ldr	r3, [r7, #24]
 8023504:	f003 0320 	and.w	r3, r3, #32
 8023508:	2b00      	cmp	r3, #0
 802350a:	d104      	bne.n	8023516 <HAL_UART_IRQHandler+0xee>
 802350c:	697b      	ldr	r3, [r7, #20]
 802350e:	f003 0301 	and.w	r3, r3, #1
 8023512:	2b00      	cmp	r3, #0
 8023514:	d005      	beq.n	8023522 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8023516:	687b      	ldr	r3, [r7, #4]
 8023518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802351a:	f043 0208 	orr.w	r2, r3, #8
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8023522:	687b      	ldr	r3, [r7, #4]
 8023524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023526:	2b00      	cmp	r3, #0
 8023528:	d077      	beq.n	802361a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 802352a:	69fb      	ldr	r3, [r7, #28]
 802352c:	f003 0320 	and.w	r3, r3, #32
 8023530:	2b00      	cmp	r3, #0
 8023532:	d007      	beq.n	8023544 <HAL_UART_IRQHandler+0x11c>
 8023534:	69bb      	ldr	r3, [r7, #24]
 8023536:	f003 0320 	and.w	r3, r3, #32
 802353a:	2b00      	cmp	r3, #0
 802353c:	d002      	beq.n	8023544 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 802353e:	6878      	ldr	r0, [r7, #4]
 8023540:	f000 fa12 	bl	8023968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	681b      	ldr	r3, [r3, #0]
 8023548:	695b      	ldr	r3, [r3, #20]
 802354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802354e:	2b40      	cmp	r3, #64	; 0x40
 8023550:	bf0c      	ite	eq
 8023552:	2301      	moveq	r3, #1
 8023554:	2300      	movne	r3, #0
 8023556:	b2db      	uxtb	r3, r3
 8023558:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802355e:	f003 0308 	and.w	r3, r3, #8
 8023562:	2b00      	cmp	r3, #0
 8023564:	d102      	bne.n	802356c <HAL_UART_IRQHandler+0x144>
 8023566:	68fb      	ldr	r3, [r7, #12]
 8023568:	2b00      	cmp	r3, #0
 802356a:	d031      	beq.n	80235d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 802356c:	6878      	ldr	r0, [r7, #4]
 802356e:	f000 f95b 	bl	8023828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	681b      	ldr	r3, [r3, #0]
 8023576:	695b      	ldr	r3, [r3, #20]
 8023578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802357c:	2b40      	cmp	r3, #64	; 0x40
 802357e:	d123      	bne.n	80235c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023580:	687b      	ldr	r3, [r7, #4]
 8023582:	681b      	ldr	r3, [r3, #0]
 8023584:	695a      	ldr	r2, [r3, #20]
 8023586:	687b      	ldr	r3, [r7, #4]
 8023588:	681b      	ldr	r3, [r3, #0]
 802358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802358e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023594:	2b00      	cmp	r3, #0
 8023596:	d013      	beq.n	80235c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802359c:	4a21      	ldr	r2, [pc, #132]	; (8023624 <HAL_UART_IRQHandler+0x1fc>)
 802359e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80235a0:	687b      	ldr	r3, [r7, #4]
 80235a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80235a4:	4618      	mov	r0, r3
 80235a6:	f7fb f875 	bl	801e694 <HAL_DMA_Abort_IT>
 80235aa:	4603      	mov	r3, r0
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d016      	beq.n	80235de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80235b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80235b6:	687a      	ldr	r2, [r7, #4]
 80235b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80235ba:	4610      	mov	r0, r2
 80235bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80235be:	e00e      	b.n	80235de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80235c0:	6878      	ldr	r0, [r7, #4]
 80235c2:	f7f4 ff73 	bl	80184ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80235c6:	e00a      	b.n	80235de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80235c8:	6878      	ldr	r0, [r7, #4]
 80235ca:	f7f4 ff6f 	bl	80184ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80235ce:	e006      	b.n	80235de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80235d0:	6878      	ldr	r0, [r7, #4]
 80235d2:	f7f4 ff6b 	bl	80184ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80235d6:	687b      	ldr	r3, [r7, #4]
 80235d8:	2200      	movs	r2, #0
 80235da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80235dc:	e01d      	b.n	802361a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80235de:	bf00      	nop
    return;
 80235e0:	e01b      	b.n	802361a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80235e2:	69fb      	ldr	r3, [r7, #28]
 80235e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235e8:	2b00      	cmp	r3, #0
 80235ea:	d008      	beq.n	80235fe <HAL_UART_IRQHandler+0x1d6>
 80235ec:	69bb      	ldr	r3, [r7, #24]
 80235ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235f2:	2b00      	cmp	r3, #0
 80235f4:	d003      	beq.n	80235fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80235f6:	6878      	ldr	r0, [r7, #4]
 80235f8:	f000 f948 	bl	802388c <UART_Transmit_IT>
    return;
 80235fc:	e00e      	b.n	802361c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80235fe:	69fb      	ldr	r3, [r7, #28]
 8023600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023604:	2b00      	cmp	r3, #0
 8023606:	d009      	beq.n	802361c <HAL_UART_IRQHandler+0x1f4>
 8023608:	69bb      	ldr	r3, [r7, #24]
 802360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802360e:	2b00      	cmp	r3, #0
 8023610:	d004      	beq.n	802361c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8023612:	6878      	ldr	r0, [r7, #4]
 8023614:	f000 f990 	bl	8023938 <UART_EndTransmit_IT>
    return;
 8023618:	e000      	b.n	802361c <HAL_UART_IRQHandler+0x1f4>
    return;
 802361a:	bf00      	nop
  }
}
 802361c:	3720      	adds	r7, #32
 802361e:	46bd      	mov	sp, r7
 8023620:	bd80      	pop	{r7, pc}
 8023622:	bf00      	nop
 8023624:	08023865 	.word	0x08023865

08023628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8023628:	b480      	push	{r7}
 802362a:	b083      	sub	sp, #12
 802362c:	af00      	add	r7, sp, #0
 802362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8023630:	bf00      	nop
 8023632:	370c      	adds	r7, #12
 8023634:	46bd      	mov	sp, r7
 8023636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802363a:	4770      	bx	lr

0802363c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 802363c:	b480      	push	{r7}
 802363e:	b083      	sub	sp, #12
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8023644:	bf00      	nop
 8023646:	370c      	adds	r7, #12
 8023648:	46bd      	mov	sp, r7
 802364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802364e:	4770      	bx	lr

08023650 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8023650:	b580      	push	{r7, lr}
 8023652:	b084      	sub	sp, #16
 8023654:	af00      	add	r7, sp, #0
 8023656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802365c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 802365e:	687b      	ldr	r3, [r7, #4]
 8023660:	681b      	ldr	r3, [r3, #0]
 8023662:	681b      	ldr	r3, [r3, #0]
 8023664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023668:	2b00      	cmp	r3, #0
 802366a:	d11e      	bne.n	80236aa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 802366c:	68fb      	ldr	r3, [r7, #12]
 802366e:	2200      	movs	r2, #0
 8023670:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023672:	68fb      	ldr	r3, [r7, #12]
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	68da      	ldr	r2, [r3, #12]
 8023678:	68fb      	ldr	r3, [r7, #12]
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023680:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023682:	68fb      	ldr	r3, [r7, #12]
 8023684:	681b      	ldr	r3, [r3, #0]
 8023686:	695a      	ldr	r2, [r3, #20]
 8023688:	68fb      	ldr	r3, [r7, #12]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	f022 0201 	bic.w	r2, r2, #1
 8023690:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023692:	68fb      	ldr	r3, [r7, #12]
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	695a      	ldr	r2, [r3, #20]
 8023698:	68fb      	ldr	r3, [r7, #12]
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80236a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80236a2:	68fb      	ldr	r3, [r7, #12]
 80236a4:	2220      	movs	r2, #32
 80236a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80236aa:	68f8      	ldr	r0, [r7, #12]
 80236ac:	f7f4 ff08 	bl	80184c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80236b0:	bf00      	nop
 80236b2:	3710      	adds	r7, #16
 80236b4:	46bd      	mov	sp, r7
 80236b6:	bd80      	pop	{r7, pc}

080236b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80236b8:	b580      	push	{r7, lr}
 80236ba:	b084      	sub	sp, #16
 80236bc:	af00      	add	r7, sp, #0
 80236be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80236c6:	68f8      	ldr	r0, [r7, #12]
 80236c8:	f7ff ffb8 	bl	802363c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80236cc:	bf00      	nop
 80236ce:	3710      	adds	r7, #16
 80236d0:	46bd      	mov	sp, r7
 80236d2:	bd80      	pop	{r7, pc}

080236d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80236d4:	b580      	push	{r7, lr}
 80236d6:	b084      	sub	sp, #16
 80236d8:	af00      	add	r7, sp, #0
 80236da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80236dc:	2300      	movs	r3, #0
 80236de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80236e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80236e6:	68bb      	ldr	r3, [r7, #8]
 80236e8:	681b      	ldr	r3, [r3, #0]
 80236ea:	695b      	ldr	r3, [r3, #20]
 80236ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80236f0:	2b80      	cmp	r3, #128	; 0x80
 80236f2:	bf0c      	ite	eq
 80236f4:	2301      	moveq	r3, #1
 80236f6:	2300      	movne	r3, #0
 80236f8:	b2db      	uxtb	r3, r3
 80236fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80236fc:	68bb      	ldr	r3, [r7, #8]
 80236fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023702:	b2db      	uxtb	r3, r3
 8023704:	2b21      	cmp	r3, #33	; 0x21
 8023706:	d108      	bne.n	802371a <UART_DMAError+0x46>
 8023708:	68fb      	ldr	r3, [r7, #12]
 802370a:	2b00      	cmp	r3, #0
 802370c:	d005      	beq.n	802371a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 802370e:	68bb      	ldr	r3, [r7, #8]
 8023710:	2200      	movs	r2, #0
 8023712:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8023714:	68b8      	ldr	r0, [r7, #8]
 8023716:	f000 f871 	bl	80237fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802371a:	68bb      	ldr	r3, [r7, #8]
 802371c:	681b      	ldr	r3, [r3, #0]
 802371e:	695b      	ldr	r3, [r3, #20]
 8023720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023724:	2b40      	cmp	r3, #64	; 0x40
 8023726:	bf0c      	ite	eq
 8023728:	2301      	moveq	r3, #1
 802372a:	2300      	movne	r3, #0
 802372c:	b2db      	uxtb	r3, r3
 802372e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8023730:	68bb      	ldr	r3, [r7, #8]
 8023732:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8023736:	b2db      	uxtb	r3, r3
 8023738:	2b22      	cmp	r3, #34	; 0x22
 802373a:	d108      	bne.n	802374e <UART_DMAError+0x7a>
 802373c:	68fb      	ldr	r3, [r7, #12]
 802373e:	2b00      	cmp	r3, #0
 8023740:	d005      	beq.n	802374e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8023742:	68bb      	ldr	r3, [r7, #8]
 8023744:	2200      	movs	r2, #0
 8023746:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8023748:	68b8      	ldr	r0, [r7, #8]
 802374a:	f000 f86d 	bl	8023828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 802374e:	68bb      	ldr	r3, [r7, #8]
 8023750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023752:	f043 0210 	orr.w	r2, r3, #16
 8023756:	68bb      	ldr	r3, [r7, #8]
 8023758:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802375a:	68b8      	ldr	r0, [r7, #8]
 802375c:	f7f4 fea6 	bl	80184ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023760:	bf00      	nop
 8023762:	3710      	adds	r7, #16
 8023764:	46bd      	mov	sp, r7
 8023766:	bd80      	pop	{r7, pc}

08023768 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8023768:	b580      	push	{r7, lr}
 802376a:	b084      	sub	sp, #16
 802376c:	af00      	add	r7, sp, #0
 802376e:	60f8      	str	r0, [r7, #12]
 8023770:	60b9      	str	r1, [r7, #8]
 8023772:	603b      	str	r3, [r7, #0]
 8023774:	4613      	mov	r3, r2
 8023776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023778:	e02c      	b.n	80237d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802377a:	69bb      	ldr	r3, [r7, #24]
 802377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023780:	d028      	beq.n	80237d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8023782:	69bb      	ldr	r3, [r7, #24]
 8023784:	2b00      	cmp	r3, #0
 8023786:	d007      	beq.n	8023798 <UART_WaitOnFlagUntilTimeout+0x30>
 8023788:	f7f9 ff72 	bl	801d670 <HAL_GetTick>
 802378c:	4602      	mov	r2, r0
 802378e:	683b      	ldr	r3, [r7, #0]
 8023790:	1ad3      	subs	r3, r2, r3
 8023792:	69ba      	ldr	r2, [r7, #24]
 8023794:	429a      	cmp	r2, r3
 8023796:	d21d      	bcs.n	80237d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	681b      	ldr	r3, [r3, #0]
 802379c:	68da      	ldr	r2, [r3, #12]
 802379e:	68fb      	ldr	r3, [r7, #12]
 80237a0:	681b      	ldr	r3, [r3, #0]
 80237a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80237a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80237a8:	68fb      	ldr	r3, [r7, #12]
 80237aa:	681b      	ldr	r3, [r3, #0]
 80237ac:	695a      	ldr	r2, [r3, #20]
 80237ae:	68fb      	ldr	r3, [r7, #12]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	f022 0201 	bic.w	r2, r2, #1
 80237b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80237b8:	68fb      	ldr	r3, [r7, #12]
 80237ba:	2220      	movs	r2, #32
 80237bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80237c0:	68fb      	ldr	r3, [r7, #12]
 80237c2:	2220      	movs	r2, #32
 80237c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80237c8:	68fb      	ldr	r3, [r7, #12]
 80237ca:	2200      	movs	r2, #0
 80237cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80237d0:	2303      	movs	r3, #3
 80237d2:	e00f      	b.n	80237f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80237d4:	68fb      	ldr	r3, [r7, #12]
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	681a      	ldr	r2, [r3, #0]
 80237da:	68bb      	ldr	r3, [r7, #8]
 80237dc:	4013      	ands	r3, r2
 80237de:	68ba      	ldr	r2, [r7, #8]
 80237e0:	429a      	cmp	r2, r3
 80237e2:	bf0c      	ite	eq
 80237e4:	2301      	moveq	r3, #1
 80237e6:	2300      	movne	r3, #0
 80237e8:	b2db      	uxtb	r3, r3
 80237ea:	461a      	mov	r2, r3
 80237ec:	79fb      	ldrb	r3, [r7, #7]
 80237ee:	429a      	cmp	r2, r3
 80237f0:	d0c3      	beq.n	802377a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80237f2:	2300      	movs	r3, #0
}
 80237f4:	4618      	mov	r0, r3
 80237f6:	3710      	adds	r7, #16
 80237f8:	46bd      	mov	sp, r7
 80237fa:	bd80      	pop	{r7, pc}

080237fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80237fc:	b480      	push	{r7}
 80237fe:	b083      	sub	sp, #12
 8023800:	af00      	add	r7, sp, #0
 8023802:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8023804:	687b      	ldr	r3, [r7, #4]
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	68da      	ldr	r2, [r3, #12]
 802380a:	687b      	ldr	r3, [r7, #4]
 802380c:	681b      	ldr	r3, [r3, #0]
 802380e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8023812:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	2220      	movs	r2, #32
 8023818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 802381c:	bf00      	nop
 802381e:	370c      	adds	r7, #12
 8023820:	46bd      	mov	sp, r7
 8023822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023826:	4770      	bx	lr

08023828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8023828:	b480      	push	{r7}
 802382a:	b083      	sub	sp, #12
 802382c:	af00      	add	r7, sp, #0
 802382e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023830:	687b      	ldr	r3, [r7, #4]
 8023832:	681b      	ldr	r3, [r3, #0]
 8023834:	68da      	ldr	r2, [r3, #12]
 8023836:	687b      	ldr	r3, [r7, #4]
 8023838:	681b      	ldr	r3, [r3, #0]
 802383a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802383e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	681b      	ldr	r3, [r3, #0]
 8023844:	695a      	ldr	r2, [r3, #20]
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	f022 0201 	bic.w	r2, r2, #1
 802384e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	2220      	movs	r2, #32
 8023854:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8023858:	bf00      	nop
 802385a:	370c      	adds	r7, #12
 802385c:	46bd      	mov	sp, r7
 802385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023862:	4770      	bx	lr

08023864 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8023864:	b580      	push	{r7, lr}
 8023866:	b084      	sub	sp, #16
 8023868:	af00      	add	r7, sp, #0
 802386a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802386c:	687b      	ldr	r3, [r7, #4]
 802386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8023872:	68fb      	ldr	r3, [r7, #12]
 8023874:	2200      	movs	r2, #0
 8023876:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8023878:	68fb      	ldr	r3, [r7, #12]
 802387a:	2200      	movs	r2, #0
 802387c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802387e:	68f8      	ldr	r0, [r7, #12]
 8023880:	f7f4 fe14 	bl	80184ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023884:	bf00      	nop
 8023886:	3710      	adds	r7, #16
 8023888:	46bd      	mov	sp, r7
 802388a:	bd80      	pop	{r7, pc}

0802388c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802388c:	b480      	push	{r7}
 802388e:	b085      	sub	sp, #20
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 802389a:	b2db      	uxtb	r3, r3
 802389c:	2b21      	cmp	r3, #33	; 0x21
 802389e:	d144      	bne.n	802392a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	689b      	ldr	r3, [r3, #8]
 80238a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80238a8:	d11a      	bne.n	80238e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80238aa:	687b      	ldr	r3, [r7, #4]
 80238ac:	6a1b      	ldr	r3, [r3, #32]
 80238ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80238b0:	68fb      	ldr	r3, [r7, #12]
 80238b2:	881b      	ldrh	r3, [r3, #0]
 80238b4:	461a      	mov	r2, r3
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	681b      	ldr	r3, [r3, #0]
 80238ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80238be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80238c0:	687b      	ldr	r3, [r7, #4]
 80238c2:	691b      	ldr	r3, [r3, #16]
 80238c4:	2b00      	cmp	r3, #0
 80238c6:	d105      	bne.n	80238d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80238c8:	687b      	ldr	r3, [r7, #4]
 80238ca:	6a1b      	ldr	r3, [r3, #32]
 80238cc:	1c9a      	adds	r2, r3, #2
 80238ce:	687b      	ldr	r3, [r7, #4]
 80238d0:	621a      	str	r2, [r3, #32]
 80238d2:	e00e      	b.n	80238f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80238d4:	687b      	ldr	r3, [r7, #4]
 80238d6:	6a1b      	ldr	r3, [r3, #32]
 80238d8:	1c5a      	adds	r2, r3, #1
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	621a      	str	r2, [r3, #32]
 80238de:	e008      	b.n	80238f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	6a1b      	ldr	r3, [r3, #32]
 80238e4:	1c59      	adds	r1, r3, #1
 80238e6:	687a      	ldr	r2, [r7, #4]
 80238e8:	6211      	str	r1, [r2, #32]
 80238ea:	781a      	ldrb	r2, [r3, #0]
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	681b      	ldr	r3, [r3, #0]
 80238f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80238f2:	687b      	ldr	r3, [r7, #4]
 80238f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80238f6:	b29b      	uxth	r3, r3
 80238f8:	3b01      	subs	r3, #1
 80238fa:	b29b      	uxth	r3, r3
 80238fc:	687a      	ldr	r2, [r7, #4]
 80238fe:	4619      	mov	r1, r3
 8023900:	84d1      	strh	r1, [r2, #38]	; 0x26
 8023902:	2b00      	cmp	r3, #0
 8023904:	d10f      	bne.n	8023926 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8023906:	687b      	ldr	r3, [r7, #4]
 8023908:	681b      	ldr	r3, [r3, #0]
 802390a:	68da      	ldr	r2, [r3, #12]
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023914:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	68da      	ldr	r2, [r3, #12]
 802391c:	687b      	ldr	r3, [r7, #4]
 802391e:	681b      	ldr	r3, [r3, #0]
 8023920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8023924:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8023926:	2300      	movs	r3, #0
 8023928:	e000      	b.n	802392c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 802392a:	2302      	movs	r3, #2
  }
}
 802392c:	4618      	mov	r0, r3
 802392e:	3714      	adds	r7, #20
 8023930:	46bd      	mov	sp, r7
 8023932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023936:	4770      	bx	lr

08023938 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8023938:	b580      	push	{r7, lr}
 802393a:	b082      	sub	sp, #8
 802393c:	af00      	add	r7, sp, #0
 802393e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	681b      	ldr	r3, [r3, #0]
 8023944:	68da      	ldr	r2, [r3, #12]
 8023946:	687b      	ldr	r3, [r7, #4]
 8023948:	681b      	ldr	r3, [r3, #0]
 802394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802394e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	2220      	movs	r2, #32
 8023954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8023958:	6878      	ldr	r0, [r7, #4]
 802395a:	f7ff fe65 	bl	8023628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802395e:	2300      	movs	r3, #0
}
 8023960:	4618      	mov	r0, r3
 8023962:	3708      	adds	r7, #8
 8023964:	46bd      	mov	sp, r7
 8023966:	bd80      	pop	{r7, pc}

08023968 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8023968:	b580      	push	{r7, lr}
 802396a:	b084      	sub	sp, #16
 802396c:	af00      	add	r7, sp, #0
 802396e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8023976:	b2db      	uxtb	r3, r3
 8023978:	2b22      	cmp	r3, #34	; 0x22
 802397a:	d171      	bne.n	8023a60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	689b      	ldr	r3, [r3, #8]
 8023980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023984:	d123      	bne.n	80239ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802398a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	691b      	ldr	r3, [r3, #16]
 8023990:	2b00      	cmp	r3, #0
 8023992:	d10e      	bne.n	80239b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8023994:	687b      	ldr	r3, [r7, #4]
 8023996:	681b      	ldr	r3, [r3, #0]
 8023998:	685b      	ldr	r3, [r3, #4]
 802399a:	b29b      	uxth	r3, r3
 802399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80239a0:	b29a      	uxth	r2, r3
 80239a2:	68fb      	ldr	r3, [r7, #12]
 80239a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239aa:	1c9a      	adds	r2, r3, #2
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	629a      	str	r2, [r3, #40]	; 0x28
 80239b0:	e029      	b.n	8023a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	681b      	ldr	r3, [r3, #0]
 80239b6:	685b      	ldr	r3, [r3, #4]
 80239b8:	b29b      	uxth	r3, r3
 80239ba:	b2db      	uxtb	r3, r3
 80239bc:	b29a      	uxth	r2, r3
 80239be:	68fb      	ldr	r3, [r7, #12]
 80239c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239c6:	1c5a      	adds	r2, r3, #1
 80239c8:	687b      	ldr	r3, [r7, #4]
 80239ca:	629a      	str	r2, [r3, #40]	; 0x28
 80239cc:	e01b      	b.n	8023a06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	691b      	ldr	r3, [r3, #16]
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	d10a      	bne.n	80239ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80239d6:	687b      	ldr	r3, [r7, #4]
 80239d8:	681b      	ldr	r3, [r3, #0]
 80239da:	6858      	ldr	r0, [r3, #4]
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239e0:	1c59      	adds	r1, r3, #1
 80239e2:	687a      	ldr	r2, [r7, #4]
 80239e4:	6291      	str	r1, [r2, #40]	; 0x28
 80239e6:	b2c2      	uxtb	r2, r0
 80239e8:	701a      	strb	r2, [r3, #0]
 80239ea:	e00c      	b.n	8023a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	685b      	ldr	r3, [r3, #4]
 80239f2:	b2da      	uxtb	r2, r3
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239f8:	1c58      	adds	r0, r3, #1
 80239fa:	6879      	ldr	r1, [r7, #4]
 80239fc:	6288      	str	r0, [r1, #40]	; 0x28
 80239fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8023a02:	b2d2      	uxtb	r2, r2
 8023a04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8023a06:	687b      	ldr	r3, [r7, #4]
 8023a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023a0a:	b29b      	uxth	r3, r3
 8023a0c:	3b01      	subs	r3, #1
 8023a0e:	b29b      	uxth	r3, r3
 8023a10:	687a      	ldr	r2, [r7, #4]
 8023a12:	4619      	mov	r1, r3
 8023a14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8023a16:	2b00      	cmp	r3, #0
 8023a18:	d120      	bne.n	8023a5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	681b      	ldr	r3, [r3, #0]
 8023a1e:	68da      	ldr	r2, [r3, #12]
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	681b      	ldr	r3, [r3, #0]
 8023a24:	f022 0220 	bic.w	r2, r2, #32
 8023a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	681b      	ldr	r3, [r3, #0]
 8023a2e:	68da      	ldr	r2, [r3, #12]
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	681b      	ldr	r3, [r3, #0]
 8023a3e:	695a      	ldr	r2, [r3, #20]
 8023a40:	687b      	ldr	r3, [r7, #4]
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	f022 0201 	bic.w	r2, r2, #1
 8023a48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	2220      	movs	r2, #32
 8023a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8023a52:	6878      	ldr	r0, [r7, #4]
 8023a54:	f7f4 fd34 	bl	80184c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8023a58:	2300      	movs	r3, #0
 8023a5a:	e002      	b.n	8023a62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8023a5c:	2300      	movs	r3, #0
 8023a5e:	e000      	b.n	8023a62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8023a60:	2302      	movs	r3, #2
  }
}
 8023a62:	4618      	mov	r0, r3
 8023a64:	3710      	adds	r7, #16
 8023a66:	46bd      	mov	sp, r7
 8023a68:	bd80      	pop	{r7, pc}
	...

08023a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023a70:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8023a74:	af00      	add	r7, sp, #0
 8023a76:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023a7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	691b      	ldr	r3, [r3, #16]
 8023a82:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8023a86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023a8a:	68d9      	ldr	r1, [r3, #12]
 8023a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023a90:	681a      	ldr	r2, [r3, #0]
 8023a92:	ea40 0301 	orr.w	r3, r0, r1
 8023a96:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8023a98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023a9c:	689a      	ldr	r2, [r3, #8]
 8023a9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023aa2:	691b      	ldr	r3, [r3, #16]
 8023aa4:	431a      	orrs	r2, r3
 8023aa6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023aaa:	695b      	ldr	r3, [r3, #20]
 8023aac:	431a      	orrs	r2, r3
 8023aae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023ab2:	69db      	ldr	r3, [r3, #28]
 8023ab4:	4313      	orrs	r3, r2
 8023ab6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8023aba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023abe:	681b      	ldr	r3, [r3, #0]
 8023ac0:	68db      	ldr	r3, [r3, #12]
 8023ac2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8023ac6:	f021 010c 	bic.w	r1, r1, #12
 8023aca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023ace:	681a      	ldr	r2, [r3, #0]
 8023ad0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8023ad4:	430b      	orrs	r3, r1
 8023ad6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8023ad8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023adc:	681b      	ldr	r3, [r3, #0]
 8023ade:	695b      	ldr	r3, [r3, #20]
 8023ae0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8023ae4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023ae8:	6999      	ldr	r1, [r3, #24]
 8023aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023aee:	681a      	ldr	r2, [r3, #0]
 8023af0:	ea40 0301 	orr.w	r3, r0, r1
 8023af4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023af6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023afa:	69db      	ldr	r3, [r3, #28]
 8023afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023b00:	f040 824a 	bne.w	8023f98 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8023b04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023b08:	681a      	ldr	r2, [r3, #0]
 8023b0a:	4b96      	ldr	r3, [pc, #600]	; (8023d64 <UART_SetConfig+0x2f8>)
 8023b0c:	429a      	cmp	r2, r3
 8023b0e:	d006      	beq.n	8023b1e <UART_SetConfig+0xb2>
 8023b10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023b14:	681a      	ldr	r2, [r3, #0]
 8023b16:	4b94      	ldr	r3, [pc, #592]	; (8023d68 <UART_SetConfig+0x2fc>)
 8023b18:	429a      	cmp	r2, r3
 8023b1a:	f040 8129 	bne.w	8023d70 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8023b1e:	f7fc fa27 	bl	801ff70 <HAL_RCC_GetPCLK2Freq>
 8023b22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8023b26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023b2a:	2200      	movs	r2, #0
 8023b2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8023b30:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8023b34:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8023b38:	4622      	mov	r2, r4
 8023b3a:	462b      	mov	r3, r5
 8023b3c:	1891      	adds	r1, r2, r2
 8023b3e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8023b42:	415b      	adcs	r3, r3
 8023b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8023b48:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8023b4c:	4621      	mov	r1, r4
 8023b4e:	1851      	adds	r1, r2, r1
 8023b50:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8023b54:	4629      	mov	r1, r5
 8023b56:	414b      	adcs	r3, r1
 8023b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023b5c:	f04f 0200 	mov.w	r2, #0
 8023b60:	f04f 0300 	mov.w	r3, #0
 8023b64:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8023b68:	4649      	mov	r1, r9
 8023b6a:	00cb      	lsls	r3, r1, #3
 8023b6c:	4641      	mov	r1, r8
 8023b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023b72:	4641      	mov	r1, r8
 8023b74:	00ca      	lsls	r2, r1, #3
 8023b76:	4610      	mov	r0, r2
 8023b78:	4619      	mov	r1, r3
 8023b7a:	4603      	mov	r3, r0
 8023b7c:	4622      	mov	r2, r4
 8023b7e:	189b      	adds	r3, r3, r2
 8023b80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8023b84:	462b      	mov	r3, r5
 8023b86:	460a      	mov	r2, r1
 8023b88:	eb42 0303 	adc.w	r3, r2, r3
 8023b8c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8023b90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023b94:	685b      	ldr	r3, [r3, #4]
 8023b96:	2200      	movs	r2, #0
 8023b98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8023b9c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8023ba0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8023ba4:	460b      	mov	r3, r1
 8023ba6:	18db      	adds	r3, r3, r3
 8023ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8023bac:	4613      	mov	r3, r2
 8023bae:	eb42 0303 	adc.w	r3, r2, r3
 8023bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8023bb6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8023bba:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8023bbe:	f7ed fbcb 	bl	8011358 <__aeabi_uldivmod>
 8023bc2:	4602      	mov	r2, r0
 8023bc4:	460b      	mov	r3, r1
 8023bc6:	4b69      	ldr	r3, [pc, #420]	; (8023d6c <UART_SetConfig+0x300>)
 8023bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8023bcc:	095b      	lsrs	r3, r3, #5
 8023bce:	011c      	lsls	r4, r3, #4
 8023bd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023bd4:	2200      	movs	r2, #0
 8023bd6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8023bda:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8023bde:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8023be2:	4642      	mov	r2, r8
 8023be4:	464b      	mov	r3, r9
 8023be6:	1891      	adds	r1, r2, r2
 8023be8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8023bec:	415b      	adcs	r3, r3
 8023bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8023bf2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8023bf6:	4641      	mov	r1, r8
 8023bf8:	1851      	adds	r1, r2, r1
 8023bfa:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8023bfe:	4649      	mov	r1, r9
 8023c00:	414b      	adcs	r3, r1
 8023c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8023c06:	f04f 0200 	mov.w	r2, #0
 8023c0a:	f04f 0300 	mov.w	r3, #0
 8023c0e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8023c12:	4659      	mov	r1, fp
 8023c14:	00cb      	lsls	r3, r1, #3
 8023c16:	4651      	mov	r1, sl
 8023c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023c1c:	4651      	mov	r1, sl
 8023c1e:	00ca      	lsls	r2, r1, #3
 8023c20:	4610      	mov	r0, r2
 8023c22:	4619      	mov	r1, r3
 8023c24:	4603      	mov	r3, r0
 8023c26:	4642      	mov	r2, r8
 8023c28:	189b      	adds	r3, r3, r2
 8023c2a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8023c2e:	464b      	mov	r3, r9
 8023c30:	460a      	mov	r2, r1
 8023c32:	eb42 0303 	adc.w	r3, r2, r3
 8023c36:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8023c3a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023c3e:	685b      	ldr	r3, [r3, #4]
 8023c40:	2200      	movs	r2, #0
 8023c42:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8023c46:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8023c4a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8023c4e:	460b      	mov	r3, r1
 8023c50:	18db      	adds	r3, r3, r3
 8023c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8023c56:	4613      	mov	r3, r2
 8023c58:	eb42 0303 	adc.w	r3, r2, r3
 8023c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023c60:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8023c64:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8023c68:	f7ed fb76 	bl	8011358 <__aeabi_uldivmod>
 8023c6c:	4602      	mov	r2, r0
 8023c6e:	460b      	mov	r3, r1
 8023c70:	4611      	mov	r1, r2
 8023c72:	4b3e      	ldr	r3, [pc, #248]	; (8023d6c <UART_SetConfig+0x300>)
 8023c74:	fba3 2301 	umull	r2, r3, r3, r1
 8023c78:	095b      	lsrs	r3, r3, #5
 8023c7a:	2264      	movs	r2, #100	; 0x64
 8023c7c:	fb02 f303 	mul.w	r3, r2, r3
 8023c80:	1acb      	subs	r3, r1, r3
 8023c82:	00db      	lsls	r3, r3, #3
 8023c84:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023c88:	4b38      	ldr	r3, [pc, #224]	; (8023d6c <UART_SetConfig+0x300>)
 8023c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8023c8e:	095b      	lsrs	r3, r3, #5
 8023c90:	005b      	lsls	r3, r3, #1
 8023c92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023c96:	441c      	add	r4, r3
 8023c98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8023ca2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8023ca6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8023caa:	4642      	mov	r2, r8
 8023cac:	464b      	mov	r3, r9
 8023cae:	1891      	adds	r1, r2, r2
 8023cb0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8023cb4:	415b      	adcs	r3, r3
 8023cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8023cba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8023cbe:	4641      	mov	r1, r8
 8023cc0:	1851      	adds	r1, r2, r1
 8023cc2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8023cc6:	4649      	mov	r1, r9
 8023cc8:	414b      	adcs	r3, r1
 8023cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023cce:	f04f 0200 	mov.w	r2, #0
 8023cd2:	f04f 0300 	mov.w	r3, #0
 8023cd6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8023cda:	4659      	mov	r1, fp
 8023cdc:	00cb      	lsls	r3, r1, #3
 8023cde:	4651      	mov	r1, sl
 8023ce0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023ce4:	4651      	mov	r1, sl
 8023ce6:	00ca      	lsls	r2, r1, #3
 8023ce8:	4610      	mov	r0, r2
 8023cea:	4619      	mov	r1, r3
 8023cec:	4603      	mov	r3, r0
 8023cee:	4642      	mov	r2, r8
 8023cf0:	189b      	adds	r3, r3, r2
 8023cf2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8023cf6:	464b      	mov	r3, r9
 8023cf8:	460a      	mov	r2, r1
 8023cfa:	eb42 0303 	adc.w	r3, r2, r3
 8023cfe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8023d02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023d06:	685b      	ldr	r3, [r3, #4]
 8023d08:	2200      	movs	r2, #0
 8023d0a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8023d0e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8023d12:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8023d16:	460b      	mov	r3, r1
 8023d18:	18db      	adds	r3, r3, r3
 8023d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8023d1e:	4613      	mov	r3, r2
 8023d20:	eb42 0303 	adc.w	r3, r2, r3
 8023d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8023d28:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8023d2c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8023d30:	f7ed fb12 	bl	8011358 <__aeabi_uldivmod>
 8023d34:	4602      	mov	r2, r0
 8023d36:	460b      	mov	r3, r1
 8023d38:	4b0c      	ldr	r3, [pc, #48]	; (8023d6c <UART_SetConfig+0x300>)
 8023d3a:	fba3 1302 	umull	r1, r3, r3, r2
 8023d3e:	095b      	lsrs	r3, r3, #5
 8023d40:	2164      	movs	r1, #100	; 0x64
 8023d42:	fb01 f303 	mul.w	r3, r1, r3
 8023d46:	1ad3      	subs	r3, r2, r3
 8023d48:	00db      	lsls	r3, r3, #3
 8023d4a:	3332      	adds	r3, #50	; 0x32
 8023d4c:	4a07      	ldr	r2, [pc, #28]	; (8023d6c <UART_SetConfig+0x300>)
 8023d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8023d52:	095b      	lsrs	r3, r3, #5
 8023d54:	f003 0207 	and.w	r2, r3, #7
 8023d58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023d5c:	681b      	ldr	r3, [r3, #0]
 8023d5e:	4422      	add	r2, r4
 8023d60:	609a      	str	r2, [r3, #8]
 8023d62:	e349      	b.n	80243f8 <UART_SetConfig+0x98c>
 8023d64:	40011000 	.word	0x40011000
 8023d68:	40011400 	.word	0x40011400
 8023d6c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8023d70:	f7fc f8ea 	bl	801ff48 <HAL_RCC_GetPCLK1Freq>
 8023d74:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8023d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023d7c:	2200      	movs	r2, #0
 8023d7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8023d82:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8023d86:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8023d8a:	4622      	mov	r2, r4
 8023d8c:	462b      	mov	r3, r5
 8023d8e:	1891      	adds	r1, r2, r2
 8023d90:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8023d94:	415b      	adcs	r3, r3
 8023d96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023d9a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8023d9e:	4621      	mov	r1, r4
 8023da0:	eb12 0a01 	adds.w	sl, r2, r1
 8023da4:	4629      	mov	r1, r5
 8023da6:	eb43 0b01 	adc.w	fp, r3, r1
 8023daa:	f04f 0200 	mov.w	r2, #0
 8023dae:	f04f 0300 	mov.w	r3, #0
 8023db2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8023db6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8023dba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023dbe:	4692      	mov	sl, r2
 8023dc0:	469b      	mov	fp, r3
 8023dc2:	4623      	mov	r3, r4
 8023dc4:	eb1a 0303 	adds.w	r3, sl, r3
 8023dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8023dcc:	462b      	mov	r3, r5
 8023dce:	eb4b 0303 	adc.w	r3, fp, r3
 8023dd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8023dd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023dda:	685b      	ldr	r3, [r3, #4]
 8023ddc:	2200      	movs	r2, #0
 8023dde:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8023de2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8023de6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8023dea:	460b      	mov	r3, r1
 8023dec:	18db      	adds	r3, r3, r3
 8023dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023df2:	4613      	mov	r3, r2
 8023df4:	eb42 0303 	adc.w	r3, r2, r3
 8023df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023dfc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8023e00:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8023e04:	f7ed faa8 	bl	8011358 <__aeabi_uldivmod>
 8023e08:	4602      	mov	r2, r0
 8023e0a:	460b      	mov	r3, r1
 8023e0c:	4b61      	ldr	r3, [pc, #388]	; (8023f94 <UART_SetConfig+0x528>)
 8023e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8023e12:	095b      	lsrs	r3, r3, #5
 8023e14:	011c      	lsls	r4, r3, #4
 8023e16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023e1a:	2200      	movs	r2, #0
 8023e1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8023e20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8023e24:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8023e28:	4642      	mov	r2, r8
 8023e2a:	464b      	mov	r3, r9
 8023e2c:	1891      	adds	r1, r2, r2
 8023e2e:	67b9      	str	r1, [r7, #120]	; 0x78
 8023e30:	415b      	adcs	r3, r3
 8023e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8023e34:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8023e38:	4641      	mov	r1, r8
 8023e3a:	1851      	adds	r1, r2, r1
 8023e3c:	6739      	str	r1, [r7, #112]	; 0x70
 8023e3e:	4649      	mov	r1, r9
 8023e40:	414b      	adcs	r3, r1
 8023e42:	677b      	str	r3, [r7, #116]	; 0x74
 8023e44:	f04f 0200 	mov.w	r2, #0
 8023e48:	f04f 0300 	mov.w	r3, #0
 8023e4c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8023e50:	4659      	mov	r1, fp
 8023e52:	00cb      	lsls	r3, r1, #3
 8023e54:	4651      	mov	r1, sl
 8023e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023e5a:	4651      	mov	r1, sl
 8023e5c:	00ca      	lsls	r2, r1, #3
 8023e5e:	4610      	mov	r0, r2
 8023e60:	4619      	mov	r1, r3
 8023e62:	4603      	mov	r3, r0
 8023e64:	4642      	mov	r2, r8
 8023e66:	189b      	adds	r3, r3, r2
 8023e68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8023e6c:	464b      	mov	r3, r9
 8023e6e:	460a      	mov	r2, r1
 8023e70:	eb42 0303 	adc.w	r3, r2, r3
 8023e74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8023e78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023e7c:	685b      	ldr	r3, [r3, #4]
 8023e7e:	2200      	movs	r2, #0
 8023e80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8023e84:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8023e88:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8023e8c:	460b      	mov	r3, r1
 8023e8e:	18db      	adds	r3, r3, r3
 8023e90:	66bb      	str	r3, [r7, #104]	; 0x68
 8023e92:	4613      	mov	r3, r2
 8023e94:	eb42 0303 	adc.w	r3, r2, r3
 8023e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023e9a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8023e9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8023ea2:	f7ed fa59 	bl	8011358 <__aeabi_uldivmod>
 8023ea6:	4602      	mov	r2, r0
 8023ea8:	460b      	mov	r3, r1
 8023eaa:	4611      	mov	r1, r2
 8023eac:	4b39      	ldr	r3, [pc, #228]	; (8023f94 <UART_SetConfig+0x528>)
 8023eae:	fba3 2301 	umull	r2, r3, r3, r1
 8023eb2:	095b      	lsrs	r3, r3, #5
 8023eb4:	2264      	movs	r2, #100	; 0x64
 8023eb6:	fb02 f303 	mul.w	r3, r2, r3
 8023eba:	1acb      	subs	r3, r1, r3
 8023ebc:	00db      	lsls	r3, r3, #3
 8023ebe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023ec2:	4b34      	ldr	r3, [pc, #208]	; (8023f94 <UART_SetConfig+0x528>)
 8023ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8023ec8:	095b      	lsrs	r3, r3, #5
 8023eca:	005b      	lsls	r3, r3, #1
 8023ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023ed0:	441c      	add	r4, r3
 8023ed2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023ed6:	2200      	movs	r2, #0
 8023ed8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8023edc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8023ee0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8023ee4:	4642      	mov	r2, r8
 8023ee6:	464b      	mov	r3, r9
 8023ee8:	1891      	adds	r1, r2, r2
 8023eea:	6639      	str	r1, [r7, #96]	; 0x60
 8023eec:	415b      	adcs	r3, r3
 8023eee:	667b      	str	r3, [r7, #100]	; 0x64
 8023ef0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8023ef4:	4641      	mov	r1, r8
 8023ef6:	1851      	adds	r1, r2, r1
 8023ef8:	65b9      	str	r1, [r7, #88]	; 0x58
 8023efa:	4649      	mov	r1, r9
 8023efc:	414b      	adcs	r3, r1
 8023efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8023f00:	f04f 0200 	mov.w	r2, #0
 8023f04:	f04f 0300 	mov.w	r3, #0
 8023f08:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8023f0c:	4659      	mov	r1, fp
 8023f0e:	00cb      	lsls	r3, r1, #3
 8023f10:	4651      	mov	r1, sl
 8023f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023f16:	4651      	mov	r1, sl
 8023f18:	00ca      	lsls	r2, r1, #3
 8023f1a:	4610      	mov	r0, r2
 8023f1c:	4619      	mov	r1, r3
 8023f1e:	4603      	mov	r3, r0
 8023f20:	4642      	mov	r2, r8
 8023f22:	189b      	adds	r3, r3, r2
 8023f24:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8023f28:	464b      	mov	r3, r9
 8023f2a:	460a      	mov	r2, r1
 8023f2c:	eb42 0303 	adc.w	r3, r2, r3
 8023f30:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8023f34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023f38:	685b      	ldr	r3, [r3, #4]
 8023f3a:	2200      	movs	r2, #0
 8023f3c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8023f40:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8023f44:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8023f48:	460b      	mov	r3, r1
 8023f4a:	18db      	adds	r3, r3, r3
 8023f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8023f4e:	4613      	mov	r3, r2
 8023f50:	eb42 0303 	adc.w	r3, r2, r3
 8023f54:	657b      	str	r3, [r7, #84]	; 0x54
 8023f56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8023f5a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8023f5e:	f7ed f9fb 	bl	8011358 <__aeabi_uldivmod>
 8023f62:	4602      	mov	r2, r0
 8023f64:	460b      	mov	r3, r1
 8023f66:	4b0b      	ldr	r3, [pc, #44]	; (8023f94 <UART_SetConfig+0x528>)
 8023f68:	fba3 1302 	umull	r1, r3, r3, r2
 8023f6c:	095b      	lsrs	r3, r3, #5
 8023f6e:	2164      	movs	r1, #100	; 0x64
 8023f70:	fb01 f303 	mul.w	r3, r1, r3
 8023f74:	1ad3      	subs	r3, r2, r3
 8023f76:	00db      	lsls	r3, r3, #3
 8023f78:	3332      	adds	r3, #50	; 0x32
 8023f7a:	4a06      	ldr	r2, [pc, #24]	; (8023f94 <UART_SetConfig+0x528>)
 8023f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8023f80:	095b      	lsrs	r3, r3, #5
 8023f82:	f003 0207 	and.w	r2, r3, #7
 8023f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	4422      	add	r2, r4
 8023f8e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8023f90:	e232      	b.n	80243f8 <UART_SetConfig+0x98c>
 8023f92:	bf00      	nop
 8023f94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8023f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023f9c:	681a      	ldr	r2, [r3, #0]
 8023f9e:	4b8d      	ldr	r3, [pc, #564]	; (80241d4 <UART_SetConfig+0x768>)
 8023fa0:	429a      	cmp	r2, r3
 8023fa2:	d006      	beq.n	8023fb2 <UART_SetConfig+0x546>
 8023fa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023fa8:	681a      	ldr	r2, [r3, #0]
 8023faa:	4b8b      	ldr	r3, [pc, #556]	; (80241d8 <UART_SetConfig+0x76c>)
 8023fac:	429a      	cmp	r2, r3
 8023fae:	f040 8117 	bne.w	80241e0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8023fb2:	f7fb ffdd 	bl	801ff70 <HAL_RCC_GetPCLK2Freq>
 8023fb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023fbe:	2200      	movs	r2, #0
 8023fc0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8023fc4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8023fc8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8023fcc:	4622      	mov	r2, r4
 8023fce:	462b      	mov	r3, r5
 8023fd0:	1891      	adds	r1, r2, r2
 8023fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8023fd4:	415b      	adcs	r3, r3
 8023fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8023fdc:	4621      	mov	r1, r4
 8023fde:	eb12 0801 	adds.w	r8, r2, r1
 8023fe2:	4629      	mov	r1, r5
 8023fe4:	eb43 0901 	adc.w	r9, r3, r1
 8023fe8:	f04f 0200 	mov.w	r2, #0
 8023fec:	f04f 0300 	mov.w	r3, #0
 8023ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8023ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8023ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8023ffc:	4690      	mov	r8, r2
 8023ffe:	4699      	mov	r9, r3
 8024000:	4623      	mov	r3, r4
 8024002:	eb18 0303 	adds.w	r3, r8, r3
 8024006:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 802400a:	462b      	mov	r3, r5
 802400c:	eb49 0303 	adc.w	r3, r9, r3
 8024010:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8024014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8024018:	685b      	ldr	r3, [r3, #4]
 802401a:	2200      	movs	r2, #0
 802401c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8024020:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8024024:	f04f 0200 	mov.w	r2, #0
 8024028:	f04f 0300 	mov.w	r3, #0
 802402c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8024030:	4629      	mov	r1, r5
 8024032:	008b      	lsls	r3, r1, #2
 8024034:	4621      	mov	r1, r4
 8024036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802403a:	4621      	mov	r1, r4
 802403c:	008a      	lsls	r2, r1, #2
 802403e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8024042:	f7ed f989 	bl	8011358 <__aeabi_uldivmod>
 8024046:	4602      	mov	r2, r0
 8024048:	460b      	mov	r3, r1
 802404a:	4b64      	ldr	r3, [pc, #400]	; (80241dc <UART_SetConfig+0x770>)
 802404c:	fba3 2302 	umull	r2, r3, r3, r2
 8024050:	095b      	lsrs	r3, r3, #5
 8024052:	011c      	lsls	r4, r3, #4
 8024054:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8024058:	2200      	movs	r2, #0
 802405a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 802405e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8024062:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8024066:	4642      	mov	r2, r8
 8024068:	464b      	mov	r3, r9
 802406a:	1891      	adds	r1, r2, r2
 802406c:	6439      	str	r1, [r7, #64]	; 0x40
 802406e:	415b      	adcs	r3, r3
 8024070:	647b      	str	r3, [r7, #68]	; 0x44
 8024072:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8024076:	4641      	mov	r1, r8
 8024078:	1851      	adds	r1, r2, r1
 802407a:	63b9      	str	r1, [r7, #56]	; 0x38
 802407c:	4649      	mov	r1, r9
 802407e:	414b      	adcs	r3, r1
 8024080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024082:	f04f 0200 	mov.w	r2, #0
 8024086:	f04f 0300 	mov.w	r3, #0
 802408a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 802408e:	4659      	mov	r1, fp
 8024090:	00cb      	lsls	r3, r1, #3
 8024092:	4651      	mov	r1, sl
 8024094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024098:	4651      	mov	r1, sl
 802409a:	00ca      	lsls	r2, r1, #3
 802409c:	4610      	mov	r0, r2
 802409e:	4619      	mov	r1, r3
 80240a0:	4603      	mov	r3, r0
 80240a2:	4642      	mov	r2, r8
 80240a4:	189b      	adds	r3, r3, r2
 80240a6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80240aa:	464b      	mov	r3, r9
 80240ac:	460a      	mov	r2, r1
 80240ae:	eb42 0303 	adc.w	r3, r2, r3
 80240b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80240b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80240ba:	685b      	ldr	r3, [r3, #4]
 80240bc:	2200      	movs	r2, #0
 80240be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80240c2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80240c6:	f04f 0200 	mov.w	r2, #0
 80240ca:	f04f 0300 	mov.w	r3, #0
 80240ce:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80240d2:	4649      	mov	r1, r9
 80240d4:	008b      	lsls	r3, r1, #2
 80240d6:	4641      	mov	r1, r8
 80240d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80240dc:	4641      	mov	r1, r8
 80240de:	008a      	lsls	r2, r1, #2
 80240e0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80240e4:	f7ed f938 	bl	8011358 <__aeabi_uldivmod>
 80240e8:	4602      	mov	r2, r0
 80240ea:	460b      	mov	r3, r1
 80240ec:	4b3b      	ldr	r3, [pc, #236]	; (80241dc <UART_SetConfig+0x770>)
 80240ee:	fba3 1302 	umull	r1, r3, r3, r2
 80240f2:	095b      	lsrs	r3, r3, #5
 80240f4:	2164      	movs	r1, #100	; 0x64
 80240f6:	fb01 f303 	mul.w	r3, r1, r3
 80240fa:	1ad3      	subs	r3, r2, r3
 80240fc:	011b      	lsls	r3, r3, #4
 80240fe:	3332      	adds	r3, #50	; 0x32
 8024100:	4a36      	ldr	r2, [pc, #216]	; (80241dc <UART_SetConfig+0x770>)
 8024102:	fba2 2303 	umull	r2, r3, r2, r3
 8024106:	095b      	lsrs	r3, r3, #5
 8024108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802410c:	441c      	add	r4, r3
 802410e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8024112:	2200      	movs	r2, #0
 8024114:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8024118:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 802411c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8024120:	4642      	mov	r2, r8
 8024122:	464b      	mov	r3, r9
 8024124:	1891      	adds	r1, r2, r2
 8024126:	6339      	str	r1, [r7, #48]	; 0x30
 8024128:	415b      	adcs	r3, r3
 802412a:	637b      	str	r3, [r7, #52]	; 0x34
 802412c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8024130:	4641      	mov	r1, r8
 8024132:	1851      	adds	r1, r2, r1
 8024134:	62b9      	str	r1, [r7, #40]	; 0x28
 8024136:	4649      	mov	r1, r9
 8024138:	414b      	adcs	r3, r1
 802413a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802413c:	f04f 0200 	mov.w	r2, #0
 8024140:	f04f 0300 	mov.w	r3, #0
 8024144:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8024148:	4659      	mov	r1, fp
 802414a:	00cb      	lsls	r3, r1, #3
 802414c:	4651      	mov	r1, sl
 802414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024152:	4651      	mov	r1, sl
 8024154:	00ca      	lsls	r2, r1, #3
 8024156:	4610      	mov	r0, r2
 8024158:	4619      	mov	r1, r3
 802415a:	4603      	mov	r3, r0
 802415c:	4642      	mov	r2, r8
 802415e:	189b      	adds	r3, r3, r2
 8024160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8024164:	464b      	mov	r3, r9
 8024166:	460a      	mov	r2, r1
 8024168:	eb42 0303 	adc.w	r3, r2, r3
 802416c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8024170:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8024174:	685b      	ldr	r3, [r3, #4]
 8024176:	2200      	movs	r2, #0
 8024178:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802417c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8024180:	f04f 0200 	mov.w	r2, #0
 8024184:	f04f 0300 	mov.w	r3, #0
 8024188:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 802418c:	4649      	mov	r1, r9
 802418e:	008b      	lsls	r3, r1, #2
 8024190:	4641      	mov	r1, r8
 8024192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024196:	4641      	mov	r1, r8
 8024198:	008a      	lsls	r2, r1, #2
 802419a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 802419e:	f7ed f8db 	bl	8011358 <__aeabi_uldivmod>
 80241a2:	4602      	mov	r2, r0
 80241a4:	460b      	mov	r3, r1
 80241a6:	4b0d      	ldr	r3, [pc, #52]	; (80241dc <UART_SetConfig+0x770>)
 80241a8:	fba3 1302 	umull	r1, r3, r3, r2
 80241ac:	095b      	lsrs	r3, r3, #5
 80241ae:	2164      	movs	r1, #100	; 0x64
 80241b0:	fb01 f303 	mul.w	r3, r1, r3
 80241b4:	1ad3      	subs	r3, r2, r3
 80241b6:	011b      	lsls	r3, r3, #4
 80241b8:	3332      	adds	r3, #50	; 0x32
 80241ba:	4a08      	ldr	r2, [pc, #32]	; (80241dc <UART_SetConfig+0x770>)
 80241bc:	fba2 2303 	umull	r2, r3, r2, r3
 80241c0:	095b      	lsrs	r3, r3, #5
 80241c2:	f003 020f 	and.w	r2, r3, #15
 80241c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80241ca:	681b      	ldr	r3, [r3, #0]
 80241cc:	4422      	add	r2, r4
 80241ce:	609a      	str	r2, [r3, #8]
 80241d0:	e112      	b.n	80243f8 <UART_SetConfig+0x98c>
 80241d2:	bf00      	nop
 80241d4:	40011000 	.word	0x40011000
 80241d8:	40011400 	.word	0x40011400
 80241dc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80241e0:	f7fb feb2 	bl	801ff48 <HAL_RCC_GetPCLK1Freq>
 80241e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80241e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80241ec:	2200      	movs	r2, #0
 80241ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80241f2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80241f6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80241fa:	4642      	mov	r2, r8
 80241fc:	464b      	mov	r3, r9
 80241fe:	1891      	adds	r1, r2, r2
 8024200:	6239      	str	r1, [r7, #32]
 8024202:	415b      	adcs	r3, r3
 8024204:	627b      	str	r3, [r7, #36]	; 0x24
 8024206:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802420a:	4641      	mov	r1, r8
 802420c:	1854      	adds	r4, r2, r1
 802420e:	4649      	mov	r1, r9
 8024210:	eb43 0501 	adc.w	r5, r3, r1
 8024214:	f04f 0200 	mov.w	r2, #0
 8024218:	f04f 0300 	mov.w	r3, #0
 802421c:	00eb      	lsls	r3, r5, #3
 802421e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8024222:	00e2      	lsls	r2, r4, #3
 8024224:	4614      	mov	r4, r2
 8024226:	461d      	mov	r5, r3
 8024228:	4643      	mov	r3, r8
 802422a:	18e3      	adds	r3, r4, r3
 802422c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8024230:	464b      	mov	r3, r9
 8024232:	eb45 0303 	adc.w	r3, r5, r3
 8024236:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 802423a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802423e:	685b      	ldr	r3, [r3, #4]
 8024240:	2200      	movs	r2, #0
 8024242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8024246:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 802424a:	f04f 0200 	mov.w	r2, #0
 802424e:	f04f 0300 	mov.w	r3, #0
 8024252:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8024256:	4629      	mov	r1, r5
 8024258:	008b      	lsls	r3, r1, #2
 802425a:	4621      	mov	r1, r4
 802425c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024260:	4621      	mov	r1, r4
 8024262:	008a      	lsls	r2, r1, #2
 8024264:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8024268:	f7ed f876 	bl	8011358 <__aeabi_uldivmod>
 802426c:	4602      	mov	r2, r0
 802426e:	460b      	mov	r3, r1
 8024270:	4b64      	ldr	r3, [pc, #400]	; (8024404 <UART_SetConfig+0x998>)
 8024272:	fba3 2302 	umull	r2, r3, r3, r2
 8024276:	095b      	lsrs	r3, r3, #5
 8024278:	011c      	lsls	r4, r3, #4
 802427a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 802427e:	2200      	movs	r2, #0
 8024280:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8024284:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8024288:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 802428c:	4642      	mov	r2, r8
 802428e:	464b      	mov	r3, r9
 8024290:	1891      	adds	r1, r2, r2
 8024292:	61b9      	str	r1, [r7, #24]
 8024294:	415b      	adcs	r3, r3
 8024296:	61fb      	str	r3, [r7, #28]
 8024298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802429c:	4641      	mov	r1, r8
 802429e:	1851      	adds	r1, r2, r1
 80242a0:	6139      	str	r1, [r7, #16]
 80242a2:	4649      	mov	r1, r9
 80242a4:	414b      	adcs	r3, r1
 80242a6:	617b      	str	r3, [r7, #20]
 80242a8:	f04f 0200 	mov.w	r2, #0
 80242ac:	f04f 0300 	mov.w	r3, #0
 80242b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80242b4:	4659      	mov	r1, fp
 80242b6:	00cb      	lsls	r3, r1, #3
 80242b8:	4651      	mov	r1, sl
 80242ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80242be:	4651      	mov	r1, sl
 80242c0:	00ca      	lsls	r2, r1, #3
 80242c2:	4610      	mov	r0, r2
 80242c4:	4619      	mov	r1, r3
 80242c6:	4603      	mov	r3, r0
 80242c8:	4642      	mov	r2, r8
 80242ca:	189b      	adds	r3, r3, r2
 80242cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80242d0:	464b      	mov	r3, r9
 80242d2:	460a      	mov	r2, r1
 80242d4:	eb42 0303 	adc.w	r3, r2, r3
 80242d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80242dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80242e0:	685b      	ldr	r3, [r3, #4]
 80242e2:	2200      	movs	r2, #0
 80242e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80242e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80242ec:	f04f 0200 	mov.w	r2, #0
 80242f0:	f04f 0300 	mov.w	r3, #0
 80242f4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80242f8:	4649      	mov	r1, r9
 80242fa:	008b      	lsls	r3, r1, #2
 80242fc:	4641      	mov	r1, r8
 80242fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024302:	4641      	mov	r1, r8
 8024304:	008a      	lsls	r2, r1, #2
 8024306:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 802430a:	f7ed f825 	bl	8011358 <__aeabi_uldivmod>
 802430e:	4602      	mov	r2, r0
 8024310:	460b      	mov	r3, r1
 8024312:	4b3c      	ldr	r3, [pc, #240]	; (8024404 <UART_SetConfig+0x998>)
 8024314:	fba3 1302 	umull	r1, r3, r3, r2
 8024318:	095b      	lsrs	r3, r3, #5
 802431a:	2164      	movs	r1, #100	; 0x64
 802431c:	fb01 f303 	mul.w	r3, r1, r3
 8024320:	1ad3      	subs	r3, r2, r3
 8024322:	011b      	lsls	r3, r3, #4
 8024324:	3332      	adds	r3, #50	; 0x32
 8024326:	4a37      	ldr	r2, [pc, #220]	; (8024404 <UART_SetConfig+0x998>)
 8024328:	fba2 2303 	umull	r2, r3, r2, r3
 802432c:	095b      	lsrs	r3, r3, #5
 802432e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024332:	441c      	add	r4, r3
 8024334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8024338:	2200      	movs	r2, #0
 802433a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802433e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8024342:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8024346:	4642      	mov	r2, r8
 8024348:	464b      	mov	r3, r9
 802434a:	1891      	adds	r1, r2, r2
 802434c:	60b9      	str	r1, [r7, #8]
 802434e:	415b      	adcs	r3, r3
 8024350:	60fb      	str	r3, [r7, #12]
 8024352:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024356:	4641      	mov	r1, r8
 8024358:	1851      	adds	r1, r2, r1
 802435a:	6039      	str	r1, [r7, #0]
 802435c:	4649      	mov	r1, r9
 802435e:	414b      	adcs	r3, r1
 8024360:	607b      	str	r3, [r7, #4]
 8024362:	f04f 0200 	mov.w	r2, #0
 8024366:	f04f 0300 	mov.w	r3, #0
 802436a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802436e:	4659      	mov	r1, fp
 8024370:	00cb      	lsls	r3, r1, #3
 8024372:	4651      	mov	r1, sl
 8024374:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024378:	4651      	mov	r1, sl
 802437a:	00ca      	lsls	r2, r1, #3
 802437c:	4610      	mov	r0, r2
 802437e:	4619      	mov	r1, r3
 8024380:	4603      	mov	r3, r0
 8024382:	4642      	mov	r2, r8
 8024384:	189b      	adds	r3, r3, r2
 8024386:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802438a:	464b      	mov	r3, r9
 802438c:	460a      	mov	r2, r1
 802438e:	eb42 0303 	adc.w	r3, r2, r3
 8024392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8024396:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802439a:	685b      	ldr	r3, [r3, #4]
 802439c:	2200      	movs	r2, #0
 802439e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80243a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80243a6:	f04f 0200 	mov.w	r2, #0
 80243aa:	f04f 0300 	mov.w	r3, #0
 80243ae:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80243b2:	4649      	mov	r1, r9
 80243b4:	008b      	lsls	r3, r1, #2
 80243b6:	4641      	mov	r1, r8
 80243b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80243bc:	4641      	mov	r1, r8
 80243be:	008a      	lsls	r2, r1, #2
 80243c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80243c4:	f7ec ffc8 	bl	8011358 <__aeabi_uldivmod>
 80243c8:	4602      	mov	r2, r0
 80243ca:	460b      	mov	r3, r1
 80243cc:	4b0d      	ldr	r3, [pc, #52]	; (8024404 <UART_SetConfig+0x998>)
 80243ce:	fba3 1302 	umull	r1, r3, r3, r2
 80243d2:	095b      	lsrs	r3, r3, #5
 80243d4:	2164      	movs	r1, #100	; 0x64
 80243d6:	fb01 f303 	mul.w	r3, r1, r3
 80243da:	1ad3      	subs	r3, r2, r3
 80243dc:	011b      	lsls	r3, r3, #4
 80243de:	3332      	adds	r3, #50	; 0x32
 80243e0:	4a08      	ldr	r2, [pc, #32]	; (8024404 <UART_SetConfig+0x998>)
 80243e2:	fba2 2303 	umull	r2, r3, r2, r3
 80243e6:	095b      	lsrs	r3, r3, #5
 80243e8:	f003 020f 	and.w	r2, r3, #15
 80243ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80243f0:	681b      	ldr	r3, [r3, #0]
 80243f2:	4422      	add	r2, r4
 80243f4:	609a      	str	r2, [r3, #8]
}
 80243f6:	e7ff      	b.n	80243f8 <UART_SetConfig+0x98c>
 80243f8:	bf00      	nop
 80243fa:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80243fe:	46bd      	mov	sp, r7
 8024400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8024404:	51eb851f 	.word	0x51eb851f

08024408 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8024408:	b084      	sub	sp, #16
 802440a:	b480      	push	{r7}
 802440c:	b085      	sub	sp, #20
 802440e:	af00      	add	r7, sp, #0
 8024410:	6078      	str	r0, [r7, #4]
 8024412:	f107 001c 	add.w	r0, r7, #28
 8024416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 802441a:	2300      	movs	r3, #0
 802441c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 802441e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8024420:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8024422:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8024424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8024426:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8024428:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 802442a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 802442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 802442e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8024430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8024432:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8024434:	68fa      	ldr	r2, [r7, #12]
 8024436:	4313      	orrs	r3, r2
 8024438:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	685b      	ldr	r3, [r3, #4]
 802443e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8024442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8024446:	68fa      	ldr	r2, [r7, #12]
 8024448:	431a      	orrs	r2, r3
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 802444e:	2300      	movs	r3, #0
}
 8024450:	4618      	mov	r0, r3
 8024452:	3714      	adds	r7, #20
 8024454:	46bd      	mov	sp, r7
 8024456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802445a:	b004      	add	sp, #16
 802445c:	4770      	bx	lr

0802445e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 802445e:	b480      	push	{r7}
 8024460:	b083      	sub	sp, #12
 8024462:	af00      	add	r7, sp, #0
 8024464:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 802446c:	4618      	mov	r0, r3
 802446e:	370c      	adds	r7, #12
 8024470:	46bd      	mov	sp, r7
 8024472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024476:	4770      	bx	lr

08024478 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8024478:	b480      	push	{r7}
 802447a:	b083      	sub	sp, #12
 802447c:	af00      	add	r7, sp, #0
 802447e:	6078      	str	r0, [r7, #4]
 8024480:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8024482:	683b      	ldr	r3, [r7, #0]
 8024484:	681a      	ldr	r2, [r3, #0]
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802448c:	2300      	movs	r3, #0
}
 802448e:	4618      	mov	r0, r3
 8024490:	370c      	adds	r7, #12
 8024492:	46bd      	mov	sp, r7
 8024494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024498:	4770      	bx	lr

0802449a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 802449a:	b580      	push	{r7, lr}
 802449c:	b082      	sub	sp, #8
 802449e:	af00      	add	r7, sp, #0
 80244a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	2203      	movs	r2, #3
 80244a6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80244a8:	2002      	movs	r0, #2
 80244aa:	f7f9 f8ed 	bl	801d688 <HAL_Delay>
  
  return HAL_OK;
 80244ae:	2300      	movs	r3, #0
}
 80244b0:	4618      	mov	r0, r3
 80244b2:	3708      	adds	r7, #8
 80244b4:	46bd      	mov	sp, r7
 80244b6:	bd80      	pop	{r7, pc}

080244b8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80244b8:	b480      	push	{r7}
 80244ba:	b083      	sub	sp, #12
 80244bc:	af00      	add	r7, sp, #0
 80244be:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80244c0:	687b      	ldr	r3, [r7, #4]
 80244c2:	681b      	ldr	r3, [r3, #0]
 80244c4:	f003 0303 	and.w	r3, r3, #3
}
 80244c8:	4618      	mov	r0, r3
 80244ca:	370c      	adds	r7, #12
 80244cc:	46bd      	mov	sp, r7
 80244ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244d2:	4770      	bx	lr

080244d4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80244d4:	b480      	push	{r7}
 80244d6:	b085      	sub	sp, #20
 80244d8:	af00      	add	r7, sp, #0
 80244da:	6078      	str	r0, [r7, #4]
 80244dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80244de:	2300      	movs	r3, #0
 80244e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80244e2:	683b      	ldr	r3, [r7, #0]
 80244e4:	681a      	ldr	r2, [r3, #0]
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80244ea:	683b      	ldr	r3, [r7, #0]
 80244ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80244ee:	683b      	ldr	r3, [r7, #0]
 80244f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80244f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80244f4:	683b      	ldr	r3, [r7, #0]
 80244f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80244f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80244fa:	683b      	ldr	r3, [r7, #0]
 80244fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80244fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8024500:	68fa      	ldr	r2, [r7, #12]
 8024502:	4313      	orrs	r3, r2
 8024504:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8024506:	687b      	ldr	r3, [r7, #4]
 8024508:	68db      	ldr	r3, [r3, #12]
 802450a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 802450e:	f023 030f 	bic.w	r3, r3, #15
 8024512:	68fa      	ldr	r2, [r7, #12]
 8024514:	431a      	orrs	r2, r3
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 802451a:	2300      	movs	r3, #0
}
 802451c:	4618      	mov	r0, r3
 802451e:	3714      	adds	r7, #20
 8024520:	46bd      	mov	sp, r7
 8024522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024526:	4770      	bx	lr

08024528 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8024528:	b480      	push	{r7}
 802452a:	b083      	sub	sp, #12
 802452c:	af00      	add	r7, sp, #0
 802452e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	691b      	ldr	r3, [r3, #16]
 8024534:	b2db      	uxtb	r3, r3
}
 8024536:	4618      	mov	r0, r3
 8024538:	370c      	adds	r7, #12
 802453a:	46bd      	mov	sp, r7
 802453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024540:	4770      	bx	lr

08024542 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8024542:	b480      	push	{r7}
 8024544:	b085      	sub	sp, #20
 8024546:	af00      	add	r7, sp, #0
 8024548:	6078      	str	r0, [r7, #4]
 802454a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 802454c:	687b      	ldr	r3, [r7, #4]
 802454e:	3314      	adds	r3, #20
 8024550:	461a      	mov	r2, r3
 8024552:	683b      	ldr	r3, [r7, #0]
 8024554:	4413      	add	r3, r2
 8024556:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8024558:	68fb      	ldr	r3, [r7, #12]
 802455a:	681b      	ldr	r3, [r3, #0]
}  
 802455c:	4618      	mov	r0, r3
 802455e:	3714      	adds	r7, #20
 8024560:	46bd      	mov	sp, r7
 8024562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024566:	4770      	bx	lr

08024568 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8024568:	b480      	push	{r7}
 802456a:	b085      	sub	sp, #20
 802456c:	af00      	add	r7, sp, #0
 802456e:	6078      	str	r0, [r7, #4]
 8024570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8024572:	2300      	movs	r3, #0
 8024574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8024576:	683b      	ldr	r3, [r7, #0]
 8024578:	681a      	ldr	r2, [r3, #0]
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 802457e:	683b      	ldr	r3, [r7, #0]
 8024580:	685a      	ldr	r2, [r3, #4]
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8024586:	683b      	ldr	r3, [r7, #0]
 8024588:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 802458a:	683b      	ldr	r3, [r7, #0]
 802458c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802458e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8024590:	683b      	ldr	r3, [r7, #0]
 8024592:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8024594:	431a      	orrs	r2, r3
                       Data->DPSM);
 8024596:	683b      	ldr	r3, [r7, #0]
 8024598:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 802459a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802459c:	68fa      	ldr	r2, [r7, #12]
 802459e:	4313      	orrs	r3, r2
 80245a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80245a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80245aa:	68fb      	ldr	r3, [r7, #12]
 80245ac:	431a      	orrs	r2, r3
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80245b2:	2300      	movs	r3, #0

}
 80245b4:	4618      	mov	r0, r3
 80245b6:	3714      	adds	r7, #20
 80245b8:	46bd      	mov	sp, r7
 80245ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245be:	4770      	bx	lr

080245c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80245c0:	b580      	push	{r7, lr}
 80245c2:	b088      	sub	sp, #32
 80245c4:	af00      	add	r7, sp, #0
 80245c6:	6078      	str	r0, [r7, #4]
 80245c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80245ca:	683b      	ldr	r3, [r7, #0]
 80245cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80245ce:	2310      	movs	r3, #16
 80245d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80245d2:	2340      	movs	r3, #64	; 0x40
 80245d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80245d6:	2300      	movs	r3, #0
 80245d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80245da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80245de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80245e0:	f107 0308 	add.w	r3, r7, #8
 80245e4:	4619      	mov	r1, r3
 80245e6:	6878      	ldr	r0, [r7, #4]
 80245e8:	f7ff ff74 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80245ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80245f0:	2110      	movs	r1, #16
 80245f2:	6878      	ldr	r0, [r7, #4]
 80245f4:	f000 fa40 	bl	8024a78 <SDMMC_GetCmdResp1>
 80245f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80245fa:	69fb      	ldr	r3, [r7, #28]
}
 80245fc:	4618      	mov	r0, r3
 80245fe:	3720      	adds	r7, #32
 8024600:	46bd      	mov	sp, r7
 8024602:	bd80      	pop	{r7, pc}

08024604 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8024604:	b580      	push	{r7, lr}
 8024606:	b088      	sub	sp, #32
 8024608:	af00      	add	r7, sp, #0
 802460a:	6078      	str	r0, [r7, #4]
 802460c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802460e:	683b      	ldr	r3, [r7, #0]
 8024610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8024612:	2311      	movs	r3, #17
 8024614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024616:	2340      	movs	r3, #64	; 0x40
 8024618:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802461a:	2300      	movs	r3, #0
 802461c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802461e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024622:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024624:	f107 0308 	add.w	r3, r7, #8
 8024628:	4619      	mov	r1, r3
 802462a:	6878      	ldr	r0, [r7, #4]
 802462c:	f7ff ff52 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8024630:	f241 3288 	movw	r2, #5000	; 0x1388
 8024634:	2111      	movs	r1, #17
 8024636:	6878      	ldr	r0, [r7, #4]
 8024638:	f000 fa1e 	bl	8024a78 <SDMMC_GetCmdResp1>
 802463c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802463e:	69fb      	ldr	r3, [r7, #28]
}
 8024640:	4618      	mov	r0, r3
 8024642:	3720      	adds	r7, #32
 8024644:	46bd      	mov	sp, r7
 8024646:	bd80      	pop	{r7, pc}

08024648 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8024648:	b580      	push	{r7, lr}
 802464a:	b088      	sub	sp, #32
 802464c:	af00      	add	r7, sp, #0
 802464e:	6078      	str	r0, [r7, #4]
 8024650:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8024652:	683b      	ldr	r3, [r7, #0]
 8024654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8024656:	2312      	movs	r3, #18
 8024658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802465a:	2340      	movs	r3, #64	; 0x40
 802465c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802465e:	2300      	movs	r3, #0
 8024660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024666:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024668:	f107 0308 	add.w	r3, r7, #8
 802466c:	4619      	mov	r1, r3
 802466e:	6878      	ldr	r0, [r7, #4]
 8024670:	f7ff ff30 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8024674:	f241 3288 	movw	r2, #5000	; 0x1388
 8024678:	2112      	movs	r1, #18
 802467a:	6878      	ldr	r0, [r7, #4]
 802467c:	f000 f9fc 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024682:	69fb      	ldr	r3, [r7, #28]
}
 8024684:	4618      	mov	r0, r3
 8024686:	3720      	adds	r7, #32
 8024688:	46bd      	mov	sp, r7
 802468a:	bd80      	pop	{r7, pc}

0802468c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 802468c:	b580      	push	{r7, lr}
 802468e:	b088      	sub	sp, #32
 8024690:	af00      	add	r7, sp, #0
 8024692:	6078      	str	r0, [r7, #4]
 8024694:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8024696:	683b      	ldr	r3, [r7, #0]
 8024698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 802469a:	2318      	movs	r3, #24
 802469c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802469e:	2340      	movs	r3, #64	; 0x40
 80246a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80246a2:	2300      	movs	r3, #0
 80246a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80246a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80246aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80246ac:	f107 0308 	add.w	r3, r7, #8
 80246b0:	4619      	mov	r1, r3
 80246b2:	6878      	ldr	r0, [r7, #4]
 80246b4:	f7ff ff0e 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80246b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80246bc:	2118      	movs	r1, #24
 80246be:	6878      	ldr	r0, [r7, #4]
 80246c0:	f000 f9da 	bl	8024a78 <SDMMC_GetCmdResp1>
 80246c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80246c6:	69fb      	ldr	r3, [r7, #28]
}
 80246c8:	4618      	mov	r0, r3
 80246ca:	3720      	adds	r7, #32
 80246cc:	46bd      	mov	sp, r7
 80246ce:	bd80      	pop	{r7, pc}

080246d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80246d0:	b580      	push	{r7, lr}
 80246d2:	b088      	sub	sp, #32
 80246d4:	af00      	add	r7, sp, #0
 80246d6:	6078      	str	r0, [r7, #4]
 80246d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80246da:	683b      	ldr	r3, [r7, #0]
 80246dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80246de:	2319      	movs	r3, #25
 80246e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80246e2:	2340      	movs	r3, #64	; 0x40
 80246e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80246e6:	2300      	movs	r3, #0
 80246e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80246ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80246ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80246f0:	f107 0308 	add.w	r3, r7, #8
 80246f4:	4619      	mov	r1, r3
 80246f6:	6878      	ldr	r0, [r7, #4]
 80246f8:	f7ff feec 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80246fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8024700:	2119      	movs	r1, #25
 8024702:	6878      	ldr	r0, [r7, #4]
 8024704:	f000 f9b8 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802470a:	69fb      	ldr	r3, [r7, #28]
}
 802470c:	4618      	mov	r0, r3
 802470e:	3720      	adds	r7, #32
 8024710:	46bd      	mov	sp, r7
 8024712:	bd80      	pop	{r7, pc}

08024714 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8024714:	b580      	push	{r7, lr}
 8024716:	b088      	sub	sp, #32
 8024718:	af00      	add	r7, sp, #0
 802471a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 802471c:	2300      	movs	r3, #0
 802471e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8024720:	230c      	movs	r3, #12
 8024722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024724:	2340      	movs	r3, #64	; 0x40
 8024726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024728:	2300      	movs	r3, #0
 802472a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802472c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024730:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024732:	f107 0308 	add.w	r3, r7, #8
 8024736:	4619      	mov	r1, r3
 8024738:	6878      	ldr	r0, [r7, #4]
 802473a:	f7ff fecb 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 802473e:	4a05      	ldr	r2, [pc, #20]	; (8024754 <SDMMC_CmdStopTransfer+0x40>)
 8024740:	210c      	movs	r1, #12
 8024742:	6878      	ldr	r0, [r7, #4]
 8024744:	f000 f998 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802474a:	69fb      	ldr	r3, [r7, #28]
}
 802474c:	4618      	mov	r0, r3
 802474e:	3720      	adds	r7, #32
 8024750:	46bd      	mov	sp, r7
 8024752:	bd80      	pop	{r7, pc}
 8024754:	05f5e100 	.word	0x05f5e100

08024758 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8024758:	b580      	push	{r7, lr}
 802475a:	b08a      	sub	sp, #40	; 0x28
 802475c:	af00      	add	r7, sp, #0
 802475e:	60f8      	str	r0, [r7, #12]
 8024760:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8024764:	683b      	ldr	r3, [r7, #0]
 8024766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8024768:	2307      	movs	r3, #7
 802476a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802476c:	2340      	movs	r3, #64	; 0x40
 802476e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024770:	2300      	movs	r3, #0
 8024772:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024778:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802477a:	f107 0310 	add.w	r3, r7, #16
 802477e:	4619      	mov	r1, r3
 8024780:	68f8      	ldr	r0, [r7, #12]
 8024782:	f7ff fea7 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8024786:	f241 3288 	movw	r2, #5000	; 0x1388
 802478a:	2107      	movs	r1, #7
 802478c:	68f8      	ldr	r0, [r7, #12]
 802478e:	f000 f973 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024792:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8024794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8024796:	4618      	mov	r0, r3
 8024798:	3728      	adds	r7, #40	; 0x28
 802479a:	46bd      	mov	sp, r7
 802479c:	bd80      	pop	{r7, pc}

0802479e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 802479e:	b580      	push	{r7, lr}
 80247a0:	b088      	sub	sp, #32
 80247a2:	af00      	add	r7, sp, #0
 80247a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80247a6:	2300      	movs	r3, #0
 80247a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80247aa:	2300      	movs	r3, #0
 80247ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80247ae:	2300      	movs	r3, #0
 80247b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80247b2:	2300      	movs	r3, #0
 80247b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80247b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80247ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80247bc:	f107 0308 	add.w	r3, r7, #8
 80247c0:	4619      	mov	r1, r3
 80247c2:	6878      	ldr	r0, [r7, #4]
 80247c4:	f7ff fe86 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80247c8:	6878      	ldr	r0, [r7, #4]
 80247ca:	f000 f92d 	bl	8024a28 <SDMMC_GetCmdError>
 80247ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80247d0:	69fb      	ldr	r3, [r7, #28]
}
 80247d2:	4618      	mov	r0, r3
 80247d4:	3720      	adds	r7, #32
 80247d6:	46bd      	mov	sp, r7
 80247d8:	bd80      	pop	{r7, pc}

080247da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80247da:	b580      	push	{r7, lr}
 80247dc:	b088      	sub	sp, #32
 80247de:	af00      	add	r7, sp, #0
 80247e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80247e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80247e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80247e8:	2308      	movs	r3, #8
 80247ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80247ec:	2340      	movs	r3, #64	; 0x40
 80247ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80247f0:	2300      	movs	r3, #0
 80247f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80247f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80247f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80247fa:	f107 0308 	add.w	r3, r7, #8
 80247fe:	4619      	mov	r1, r3
 8024800:	6878      	ldr	r0, [r7, #4]
 8024802:	f7ff fe67 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8024806:	6878      	ldr	r0, [r7, #4]
 8024808:	f000 fb16 	bl	8024e38 <SDMMC_GetCmdResp7>
 802480c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802480e:	69fb      	ldr	r3, [r7, #28]
}
 8024810:	4618      	mov	r0, r3
 8024812:	3720      	adds	r7, #32
 8024814:	46bd      	mov	sp, r7
 8024816:	bd80      	pop	{r7, pc}

08024818 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8024818:	b580      	push	{r7, lr}
 802481a:	b088      	sub	sp, #32
 802481c:	af00      	add	r7, sp, #0
 802481e:	6078      	str	r0, [r7, #4]
 8024820:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8024822:	683b      	ldr	r3, [r7, #0]
 8024824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8024826:	2337      	movs	r3, #55	; 0x37
 8024828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802482a:	2340      	movs	r3, #64	; 0x40
 802482c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802482e:	2300      	movs	r3, #0
 8024830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024836:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024838:	f107 0308 	add.w	r3, r7, #8
 802483c:	4619      	mov	r1, r3
 802483e:	6878      	ldr	r0, [r7, #4]
 8024840:	f7ff fe48 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8024844:	f241 3288 	movw	r2, #5000	; 0x1388
 8024848:	2137      	movs	r1, #55	; 0x37
 802484a:	6878      	ldr	r0, [r7, #4]
 802484c:	f000 f914 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024852:	69fb      	ldr	r3, [r7, #28]
}
 8024854:	4618      	mov	r0, r3
 8024856:	3720      	adds	r7, #32
 8024858:	46bd      	mov	sp, r7
 802485a:	bd80      	pop	{r7, pc}

0802485c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802485c:	b580      	push	{r7, lr}
 802485e:	b088      	sub	sp, #32
 8024860:	af00      	add	r7, sp, #0
 8024862:	6078      	str	r0, [r7, #4]
 8024864:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8024866:	683b      	ldr	r3, [r7, #0]
 8024868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802486c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8024872:	2329      	movs	r3, #41	; 0x29
 8024874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024876:	2340      	movs	r3, #64	; 0x40
 8024878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802487a:	2300      	movs	r3, #0
 802487c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802487e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024884:	f107 0308 	add.w	r3, r7, #8
 8024888:	4619      	mov	r1, r3
 802488a:	6878      	ldr	r0, [r7, #4]
 802488c:	f7ff fe22 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8024890:	6878      	ldr	r0, [r7, #4]
 8024892:	f000 fa23 	bl	8024cdc <SDMMC_GetCmdResp3>
 8024896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024898:	69fb      	ldr	r3, [r7, #28]
}
 802489a:	4618      	mov	r0, r3
 802489c:	3720      	adds	r7, #32
 802489e:	46bd      	mov	sp, r7
 80248a0:	bd80      	pop	{r7, pc}

080248a2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80248a2:	b580      	push	{r7, lr}
 80248a4:	b088      	sub	sp, #32
 80248a6:	af00      	add	r7, sp, #0
 80248a8:	6078      	str	r0, [r7, #4]
 80248aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80248ac:	683b      	ldr	r3, [r7, #0]
 80248ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80248b0:	2306      	movs	r3, #6
 80248b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80248b4:	2340      	movs	r3, #64	; 0x40
 80248b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80248b8:	2300      	movs	r3, #0
 80248ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80248bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80248c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80248c2:	f107 0308 	add.w	r3, r7, #8
 80248c6:	4619      	mov	r1, r3
 80248c8:	6878      	ldr	r0, [r7, #4]
 80248ca:	f7ff fe03 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80248ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80248d2:	2106      	movs	r1, #6
 80248d4:	6878      	ldr	r0, [r7, #4]
 80248d6:	f000 f8cf 	bl	8024a78 <SDMMC_GetCmdResp1>
 80248da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80248dc:	69fb      	ldr	r3, [r7, #28]
}
 80248de:	4618      	mov	r0, r3
 80248e0:	3720      	adds	r7, #32
 80248e2:	46bd      	mov	sp, r7
 80248e4:	bd80      	pop	{r7, pc}

080248e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80248e6:	b580      	push	{r7, lr}
 80248e8:	b088      	sub	sp, #32
 80248ea:	af00      	add	r7, sp, #0
 80248ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80248ee:	2300      	movs	r3, #0
 80248f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80248f2:	2333      	movs	r3, #51	; 0x33
 80248f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80248f6:	2340      	movs	r3, #64	; 0x40
 80248f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80248fa:	2300      	movs	r3, #0
 80248fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80248fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024902:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024904:	f107 0308 	add.w	r3, r7, #8
 8024908:	4619      	mov	r1, r3
 802490a:	6878      	ldr	r0, [r7, #4]
 802490c:	f7ff fde2 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8024910:	f241 3288 	movw	r2, #5000	; 0x1388
 8024914:	2133      	movs	r1, #51	; 0x33
 8024916:	6878      	ldr	r0, [r7, #4]
 8024918:	f000 f8ae 	bl	8024a78 <SDMMC_GetCmdResp1>
 802491c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802491e:	69fb      	ldr	r3, [r7, #28]
}
 8024920:	4618      	mov	r0, r3
 8024922:	3720      	adds	r7, #32
 8024924:	46bd      	mov	sp, r7
 8024926:	bd80      	pop	{r7, pc}

08024928 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8024928:	b580      	push	{r7, lr}
 802492a:	b088      	sub	sp, #32
 802492c:	af00      	add	r7, sp, #0
 802492e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8024930:	2300      	movs	r3, #0
 8024932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8024934:	2302      	movs	r3, #2
 8024936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8024938:	23c0      	movs	r3, #192	; 0xc0
 802493a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802493c:	2300      	movs	r3, #0
 802493e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024944:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024946:	f107 0308 	add.w	r3, r7, #8
 802494a:	4619      	mov	r1, r3
 802494c:	6878      	ldr	r0, [r7, #4]
 802494e:	f7ff fdc1 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8024952:	6878      	ldr	r0, [r7, #4]
 8024954:	f000 f97c 	bl	8024c50 <SDMMC_GetCmdResp2>
 8024958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802495a:	69fb      	ldr	r3, [r7, #28]
}
 802495c:	4618      	mov	r0, r3
 802495e:	3720      	adds	r7, #32
 8024960:	46bd      	mov	sp, r7
 8024962:	bd80      	pop	{r7, pc}

08024964 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8024964:	b580      	push	{r7, lr}
 8024966:	b088      	sub	sp, #32
 8024968:	af00      	add	r7, sp, #0
 802496a:	6078      	str	r0, [r7, #4]
 802496c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 802496e:	683b      	ldr	r3, [r7, #0]
 8024970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8024972:	2309      	movs	r3, #9
 8024974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8024976:	23c0      	movs	r3, #192	; 0xc0
 8024978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802497a:	2300      	movs	r3, #0
 802497c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802497e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024982:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024984:	f107 0308 	add.w	r3, r7, #8
 8024988:	4619      	mov	r1, r3
 802498a:	6878      	ldr	r0, [r7, #4]
 802498c:	f7ff fda2 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8024990:	6878      	ldr	r0, [r7, #4]
 8024992:	f000 f95d 	bl	8024c50 <SDMMC_GetCmdResp2>
 8024996:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024998:	69fb      	ldr	r3, [r7, #28]
}
 802499a:	4618      	mov	r0, r3
 802499c:	3720      	adds	r7, #32
 802499e:	46bd      	mov	sp, r7
 80249a0:	bd80      	pop	{r7, pc}

080249a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80249a2:	b580      	push	{r7, lr}
 80249a4:	b088      	sub	sp, #32
 80249a6:	af00      	add	r7, sp, #0
 80249a8:	6078      	str	r0, [r7, #4]
 80249aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80249ac:	2300      	movs	r3, #0
 80249ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80249b0:	2303      	movs	r3, #3
 80249b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80249b4:	2340      	movs	r3, #64	; 0x40
 80249b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80249b8:	2300      	movs	r3, #0
 80249ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80249bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80249c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80249c2:	f107 0308 	add.w	r3, r7, #8
 80249c6:	4619      	mov	r1, r3
 80249c8:	6878      	ldr	r0, [r7, #4]
 80249ca:	f7ff fd83 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80249ce:	683a      	ldr	r2, [r7, #0]
 80249d0:	2103      	movs	r1, #3
 80249d2:	6878      	ldr	r0, [r7, #4]
 80249d4:	f000 f9bc 	bl	8024d50 <SDMMC_GetCmdResp6>
 80249d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80249da:	69fb      	ldr	r3, [r7, #28]
}
 80249dc:	4618      	mov	r0, r3
 80249de:	3720      	adds	r7, #32
 80249e0:	46bd      	mov	sp, r7
 80249e2:	bd80      	pop	{r7, pc}

080249e4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80249e4:	b580      	push	{r7, lr}
 80249e6:	b088      	sub	sp, #32
 80249e8:	af00      	add	r7, sp, #0
 80249ea:	6078      	str	r0, [r7, #4]
 80249ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80249ee:	683b      	ldr	r3, [r7, #0]
 80249f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80249f2:	230d      	movs	r3, #13
 80249f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80249f6:	2340      	movs	r3, #64	; 0x40
 80249f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80249fa:	2300      	movs	r3, #0
 80249fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80249fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024a02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024a04:	f107 0308 	add.w	r3, r7, #8
 8024a08:	4619      	mov	r1, r3
 8024a0a:	6878      	ldr	r0, [r7, #4]
 8024a0c:	f7ff fd62 	bl	80244d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8024a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a14:	210d      	movs	r1, #13
 8024a16:	6878      	ldr	r0, [r7, #4]
 8024a18:	f000 f82e 	bl	8024a78 <SDMMC_GetCmdResp1>
 8024a1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024a1e:	69fb      	ldr	r3, [r7, #28]
}
 8024a20:	4618      	mov	r0, r3
 8024a22:	3720      	adds	r7, #32
 8024a24:	46bd      	mov	sp, r7
 8024a26:	bd80      	pop	{r7, pc}

08024a28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8024a28:	b490      	push	{r4, r7}
 8024a2a:	b082      	sub	sp, #8
 8024a2c:	af00      	add	r7, sp, #0
 8024a2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024a30:	4b0f      	ldr	r3, [pc, #60]	; (8024a70 <SDMMC_GetCmdError+0x48>)
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	4a0f      	ldr	r2, [pc, #60]	; (8024a74 <SDMMC_GetCmdError+0x4c>)
 8024a36:	fba2 2303 	umull	r2, r3, r2, r3
 8024a3a:	0a5b      	lsrs	r3, r3, #9
 8024a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024a44:	4623      	mov	r3, r4
 8024a46:	1e5c      	subs	r4, r3, #1
 8024a48:	2b00      	cmp	r3, #0
 8024a4a:	d102      	bne.n	8024a52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024a50:	e009      	b.n	8024a66 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d0f2      	beq.n	8024a44 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	22c5      	movs	r2, #197	; 0xc5
 8024a62:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8024a64:	2300      	movs	r3, #0
}
 8024a66:	4618      	mov	r0, r3
 8024a68:	3708      	adds	r7, #8
 8024a6a:	46bd      	mov	sp, r7
 8024a6c:	bc90      	pop	{r4, r7}
 8024a6e:	4770      	bx	lr
 8024a70:	20000000 	.word	0x20000000
 8024a74:	10624dd3 	.word	0x10624dd3

08024a78 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8024a78:	b590      	push	{r4, r7, lr}
 8024a7a:	b087      	sub	sp, #28
 8024a7c:	af00      	add	r7, sp, #0
 8024a7e:	60f8      	str	r0, [r7, #12]
 8024a80:	460b      	mov	r3, r1
 8024a82:	607a      	str	r2, [r7, #4]
 8024a84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8024a86:	4b6f      	ldr	r3, [pc, #444]	; (8024c44 <SDMMC_GetCmdResp1+0x1cc>)
 8024a88:	681b      	ldr	r3, [r3, #0]
 8024a8a:	4a6f      	ldr	r2, [pc, #444]	; (8024c48 <SDMMC_GetCmdResp1+0x1d0>)
 8024a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8024a90:	0a5b      	lsrs	r3, r3, #9
 8024a92:	687a      	ldr	r2, [r7, #4]
 8024a94:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024a98:	4623      	mov	r3, r4
 8024a9a:	1e5c      	subs	r4, r3, #1
 8024a9c:	2b00      	cmp	r3, #0
 8024a9e:	d102      	bne.n	8024aa6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024aa4:	e0c9      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8024aa6:	68fb      	ldr	r3, [r7, #12]
 8024aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024aaa:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024aac:	697b      	ldr	r3, [r7, #20]
 8024aae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024ab2:	2b00      	cmp	r3, #0
 8024ab4:	d0f0      	beq.n	8024a98 <SDMMC_GetCmdResp1+0x20>
 8024ab6:	697b      	ldr	r3, [r7, #20]
 8024ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024abc:	2b00      	cmp	r3, #0
 8024abe:	d1eb      	bne.n	8024a98 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024ac0:	68fb      	ldr	r3, [r7, #12]
 8024ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024ac4:	f003 0304 	and.w	r3, r3, #4
 8024ac8:	2b00      	cmp	r3, #0
 8024aca:	d004      	beq.n	8024ad6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024acc:	68fb      	ldr	r3, [r7, #12]
 8024ace:	2204      	movs	r2, #4
 8024ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024ad2:	2304      	movs	r3, #4
 8024ad4:	e0b1      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024ad6:	68fb      	ldr	r3, [r7, #12]
 8024ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024ada:	f003 0301 	and.w	r3, r3, #1
 8024ade:	2b00      	cmp	r3, #0
 8024ae0:	d004      	beq.n	8024aec <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024ae2:	68fb      	ldr	r3, [r7, #12]
 8024ae4:	2201      	movs	r2, #1
 8024ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024ae8:	2301      	movs	r3, #1
 8024aea:	e0a6      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024aec:	68fb      	ldr	r3, [r7, #12]
 8024aee:	22c5      	movs	r2, #197	; 0xc5
 8024af0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8024af2:	68f8      	ldr	r0, [r7, #12]
 8024af4:	f7ff fd18 	bl	8024528 <SDIO_GetCommandResponse>
 8024af8:	4603      	mov	r3, r0
 8024afa:	461a      	mov	r2, r3
 8024afc:	7afb      	ldrb	r3, [r7, #11]
 8024afe:	4293      	cmp	r3, r2
 8024b00:	d001      	beq.n	8024b06 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024b02:	2301      	movs	r3, #1
 8024b04:	e099      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8024b06:	2100      	movs	r1, #0
 8024b08:	68f8      	ldr	r0, [r7, #12]
 8024b0a:	f7ff fd1a 	bl	8024542 <SDIO_GetResponse>
 8024b0e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8024b10:	693a      	ldr	r2, [r7, #16]
 8024b12:	4b4e      	ldr	r3, [pc, #312]	; (8024c4c <SDMMC_GetCmdResp1+0x1d4>)
 8024b14:	4013      	ands	r3, r2
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d101      	bne.n	8024b1e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8024b1a:	2300      	movs	r3, #0
 8024b1c:	e08d      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8024b1e:	693b      	ldr	r3, [r7, #16]
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	da02      	bge.n	8024b2a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8024b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8024b28:	e087      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8024b2a:	693b      	ldr	r3, [r7, #16]
 8024b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8024b30:	2b00      	cmp	r3, #0
 8024b32:	d001      	beq.n	8024b38 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8024b34:	2340      	movs	r3, #64	; 0x40
 8024b36:	e080      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8024b38:	693b      	ldr	r3, [r7, #16]
 8024b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024b3e:	2b00      	cmp	r3, #0
 8024b40:	d001      	beq.n	8024b46 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8024b42:	2380      	movs	r3, #128	; 0x80
 8024b44:	e079      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8024b46:	693b      	ldr	r3, [r7, #16]
 8024b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024b4c:	2b00      	cmp	r3, #0
 8024b4e:	d002      	beq.n	8024b56 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8024b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024b54:	e071      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8024b56:	693b      	ldr	r3, [r7, #16]
 8024b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024b5c:	2b00      	cmp	r3, #0
 8024b5e:	d002      	beq.n	8024b66 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8024b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024b64:	e069      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8024b66:	693b      	ldr	r3, [r7, #16]
 8024b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	d002      	beq.n	8024b76 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8024b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024b74:	e061      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8024b76:	693b      	ldr	r3, [r7, #16]
 8024b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d002      	beq.n	8024b86 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8024b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8024b84:	e059      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8024b86:	693b      	ldr	r3, [r7, #16]
 8024b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8024b8c:	2b00      	cmp	r3, #0
 8024b8e:	d002      	beq.n	8024b96 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8024b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024b94:	e051      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8024b96:	693b      	ldr	r3, [r7, #16]
 8024b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	d002      	beq.n	8024ba6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8024ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8024ba4:	e049      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8024ba6:	693b      	ldr	r3, [r7, #16]
 8024ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024bac:	2b00      	cmp	r3, #0
 8024bae:	d002      	beq.n	8024bb6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8024bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8024bb4:	e041      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8024bb6:	693b      	ldr	r3, [r7, #16]
 8024bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024bbc:	2b00      	cmp	r3, #0
 8024bbe:	d002      	beq.n	8024bc6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8024bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8024bc4:	e039      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8024bc6:	693b      	ldr	r3, [r7, #16]
 8024bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d002      	beq.n	8024bd6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8024bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8024bd4:	e031      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8024bd6:	693b      	ldr	r3, [r7, #16]
 8024bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024bdc:	2b00      	cmp	r3, #0
 8024bde:	d002      	beq.n	8024be6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8024be0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024be4:	e029      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8024be6:	693b      	ldr	r3, [r7, #16]
 8024be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024bec:	2b00      	cmp	r3, #0
 8024bee:	d002      	beq.n	8024bf6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8024bf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8024bf4:	e021      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8024bf6:	693b      	ldr	r3, [r7, #16]
 8024bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d002      	beq.n	8024c06 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8024c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8024c04:	e019      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8024c06:	693b      	ldr	r3, [r7, #16]
 8024c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	d002      	beq.n	8024c16 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8024c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8024c14:	e011      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8024c16:	693b      	ldr	r3, [r7, #16]
 8024c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024c1c:	2b00      	cmp	r3, #0
 8024c1e:	d002      	beq.n	8024c26 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8024c20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8024c24:	e009      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8024c26:	693b      	ldr	r3, [r7, #16]
 8024c28:	f003 0308 	and.w	r3, r3, #8
 8024c2c:	2b00      	cmp	r3, #0
 8024c2e:	d002      	beq.n	8024c36 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8024c30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8024c34:	e001      	b.n	8024c3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8024c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8024c3a:	4618      	mov	r0, r3
 8024c3c:	371c      	adds	r7, #28
 8024c3e:	46bd      	mov	sp, r7
 8024c40:	bd90      	pop	{r4, r7, pc}
 8024c42:	bf00      	nop
 8024c44:	20000000 	.word	0x20000000
 8024c48:	10624dd3 	.word	0x10624dd3
 8024c4c:	fdffe008 	.word	0xfdffe008

08024c50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8024c50:	b490      	push	{r4, r7}
 8024c52:	b084      	sub	sp, #16
 8024c54:	af00      	add	r7, sp, #0
 8024c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024c58:	4b1e      	ldr	r3, [pc, #120]	; (8024cd4 <SDMMC_GetCmdResp2+0x84>)
 8024c5a:	681b      	ldr	r3, [r3, #0]
 8024c5c:	4a1e      	ldr	r2, [pc, #120]	; (8024cd8 <SDMMC_GetCmdResp2+0x88>)
 8024c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8024c62:	0a5b      	lsrs	r3, r3, #9
 8024c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8024c68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024c6c:	4623      	mov	r3, r4
 8024c6e:	1e5c      	subs	r4, r3, #1
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d102      	bne.n	8024c7a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024c74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024c78:	e026      	b.n	8024cc8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8024c7a:	687b      	ldr	r3, [r7, #4]
 8024c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024c7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024c80:	68fb      	ldr	r3, [r7, #12]
 8024c82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	d0f0      	beq.n	8024c6c <SDMMC_GetCmdResp2+0x1c>
 8024c8a:	68fb      	ldr	r3, [r7, #12]
 8024c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024c90:	2b00      	cmp	r3, #0
 8024c92:	d1eb      	bne.n	8024c6c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024c98:	f003 0304 	and.w	r3, r3, #4
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d004      	beq.n	8024caa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	2204      	movs	r2, #4
 8024ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024ca6:	2304      	movs	r3, #4
 8024ca8:	e00e      	b.n	8024cc8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024caa:	687b      	ldr	r3, [r7, #4]
 8024cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024cae:	f003 0301 	and.w	r3, r3, #1
 8024cb2:	2b00      	cmp	r3, #0
 8024cb4:	d004      	beq.n	8024cc0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	2201      	movs	r2, #1
 8024cba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024cbc:	2301      	movs	r3, #1
 8024cbe:	e003      	b.n	8024cc8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024cc0:	687b      	ldr	r3, [r7, #4]
 8024cc2:	22c5      	movs	r2, #197	; 0xc5
 8024cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8024cc6:	2300      	movs	r3, #0
}
 8024cc8:	4618      	mov	r0, r3
 8024cca:	3710      	adds	r7, #16
 8024ccc:	46bd      	mov	sp, r7
 8024cce:	bc90      	pop	{r4, r7}
 8024cd0:	4770      	bx	lr
 8024cd2:	bf00      	nop
 8024cd4:	20000000 	.word	0x20000000
 8024cd8:	10624dd3 	.word	0x10624dd3

08024cdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8024cdc:	b490      	push	{r4, r7}
 8024cde:	b084      	sub	sp, #16
 8024ce0:	af00      	add	r7, sp, #0
 8024ce2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024ce4:	4b18      	ldr	r3, [pc, #96]	; (8024d48 <SDMMC_GetCmdResp3+0x6c>)
 8024ce6:	681b      	ldr	r3, [r3, #0]
 8024ce8:	4a18      	ldr	r2, [pc, #96]	; (8024d4c <SDMMC_GetCmdResp3+0x70>)
 8024cea:	fba2 2303 	umull	r2, r3, r2, r3
 8024cee:	0a5b      	lsrs	r3, r3, #9
 8024cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8024cf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024cf8:	4623      	mov	r3, r4
 8024cfa:	1e5c      	subs	r4, r3, #1
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d102      	bne.n	8024d06 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024d00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024d04:	e01b      	b.n	8024d3e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024d0c:	68fb      	ldr	r3, [r7, #12]
 8024d0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024d12:	2b00      	cmp	r3, #0
 8024d14:	d0f0      	beq.n	8024cf8 <SDMMC_GetCmdResp3+0x1c>
 8024d16:	68fb      	ldr	r3, [r7, #12]
 8024d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024d1c:	2b00      	cmp	r3, #0
 8024d1e:	d1eb      	bne.n	8024cf8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d24:	f003 0304 	and.w	r3, r3, #4
 8024d28:	2b00      	cmp	r3, #0
 8024d2a:	d004      	beq.n	8024d36 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024d2c:	687b      	ldr	r3, [r7, #4]
 8024d2e:	2204      	movs	r2, #4
 8024d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024d32:	2304      	movs	r3, #4
 8024d34:	e003      	b.n	8024d3e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	22c5      	movs	r2, #197	; 0xc5
 8024d3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8024d3c:	2300      	movs	r3, #0
}
 8024d3e:	4618      	mov	r0, r3
 8024d40:	3710      	adds	r7, #16
 8024d42:	46bd      	mov	sp, r7
 8024d44:	bc90      	pop	{r4, r7}
 8024d46:	4770      	bx	lr
 8024d48:	20000000 	.word	0x20000000
 8024d4c:	10624dd3 	.word	0x10624dd3

08024d50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8024d50:	b590      	push	{r4, r7, lr}
 8024d52:	b087      	sub	sp, #28
 8024d54:	af00      	add	r7, sp, #0
 8024d56:	60f8      	str	r0, [r7, #12]
 8024d58:	460b      	mov	r3, r1
 8024d5a:	607a      	str	r2, [r7, #4]
 8024d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024d5e:	4b34      	ldr	r3, [pc, #208]	; (8024e30 <SDMMC_GetCmdResp6+0xe0>)
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	4a34      	ldr	r2, [pc, #208]	; (8024e34 <SDMMC_GetCmdResp6+0xe4>)
 8024d64:	fba2 2303 	umull	r2, r3, r2, r3
 8024d68:	0a5b      	lsrs	r3, r3, #9
 8024d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8024d6e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024d72:	4623      	mov	r3, r4
 8024d74:	1e5c      	subs	r4, r3, #1
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	d102      	bne.n	8024d80 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024d7e:	e052      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8024d80:	68fb      	ldr	r3, [r7, #12]
 8024d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d84:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024d86:	697b      	ldr	r3, [r7, #20]
 8024d88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d0f0      	beq.n	8024d72 <SDMMC_GetCmdResp6+0x22>
 8024d90:	697b      	ldr	r3, [r7, #20]
 8024d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024d96:	2b00      	cmp	r3, #0
 8024d98:	d1eb      	bne.n	8024d72 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024d9a:	68fb      	ldr	r3, [r7, #12]
 8024d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024d9e:	f003 0304 	and.w	r3, r3, #4
 8024da2:	2b00      	cmp	r3, #0
 8024da4:	d004      	beq.n	8024db0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024da6:	68fb      	ldr	r3, [r7, #12]
 8024da8:	2204      	movs	r2, #4
 8024daa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024dac:	2304      	movs	r3, #4
 8024dae:	e03a      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024db0:	68fb      	ldr	r3, [r7, #12]
 8024db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024db4:	f003 0301 	and.w	r3, r3, #1
 8024db8:	2b00      	cmp	r3, #0
 8024dba:	d004      	beq.n	8024dc6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024dbc:	68fb      	ldr	r3, [r7, #12]
 8024dbe:	2201      	movs	r2, #1
 8024dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024dc2:	2301      	movs	r3, #1
 8024dc4:	e02f      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8024dc6:	68f8      	ldr	r0, [r7, #12]
 8024dc8:	f7ff fbae 	bl	8024528 <SDIO_GetCommandResponse>
 8024dcc:	4603      	mov	r3, r0
 8024dce:	461a      	mov	r2, r3
 8024dd0:	7afb      	ldrb	r3, [r7, #11]
 8024dd2:	4293      	cmp	r3, r2
 8024dd4:	d001      	beq.n	8024dda <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024dd6:	2301      	movs	r3, #1
 8024dd8:	e025      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024dda:	68fb      	ldr	r3, [r7, #12]
 8024ddc:	22c5      	movs	r2, #197	; 0xc5
 8024dde:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8024de0:	2100      	movs	r1, #0
 8024de2:	68f8      	ldr	r0, [r7, #12]
 8024de4:	f7ff fbad 	bl	8024542 <SDIO_GetResponse>
 8024de8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8024dea:	693b      	ldr	r3, [r7, #16]
 8024dec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8024df0:	2b00      	cmp	r3, #0
 8024df2:	d106      	bne.n	8024e02 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8024df4:	693b      	ldr	r3, [r7, #16]
 8024df6:	0c1b      	lsrs	r3, r3, #16
 8024df8:	b29a      	uxth	r2, r3
 8024dfa:	687b      	ldr	r3, [r7, #4]
 8024dfc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8024dfe:	2300      	movs	r3, #0
 8024e00:	e011      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8024e02:	693b      	ldr	r3, [r7, #16]
 8024e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	d002      	beq.n	8024e12 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8024e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8024e10:	e009      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8024e12:	693b      	ldr	r3, [r7, #16]
 8024e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024e18:	2b00      	cmp	r3, #0
 8024e1a:	d002      	beq.n	8024e22 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8024e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024e20:	e001      	b.n	8024e26 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8024e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8024e26:	4618      	mov	r0, r3
 8024e28:	371c      	adds	r7, #28
 8024e2a:	46bd      	mov	sp, r7
 8024e2c:	bd90      	pop	{r4, r7, pc}
 8024e2e:	bf00      	nop
 8024e30:	20000000 	.word	0x20000000
 8024e34:	10624dd3 	.word	0x10624dd3

08024e38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8024e38:	b490      	push	{r4, r7}
 8024e3a:	b084      	sub	sp, #16
 8024e3c:	af00      	add	r7, sp, #0
 8024e3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024e40:	4b21      	ldr	r3, [pc, #132]	; (8024ec8 <SDMMC_GetCmdResp7+0x90>)
 8024e42:	681b      	ldr	r3, [r3, #0]
 8024e44:	4a21      	ldr	r2, [pc, #132]	; (8024ecc <SDMMC_GetCmdResp7+0x94>)
 8024e46:	fba2 2303 	umull	r2, r3, r2, r3
 8024e4a:	0a5b      	lsrs	r3, r3, #9
 8024e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024e50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024e54:	4623      	mov	r3, r4
 8024e56:	1e5c      	subs	r4, r3, #1
 8024e58:	2b00      	cmp	r3, #0
 8024e5a:	d102      	bne.n	8024e62 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024e60:	e02c      	b.n	8024ebc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024e66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024e68:	68fb      	ldr	r3, [r7, #12]
 8024e6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024e6e:	2b00      	cmp	r3, #0
 8024e70:	d0f0      	beq.n	8024e54 <SDMMC_GetCmdResp7+0x1c>
 8024e72:	68fb      	ldr	r3, [r7, #12]
 8024e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	d1eb      	bne.n	8024e54 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024e80:	f003 0304 	and.w	r3, r3, #4
 8024e84:	2b00      	cmp	r3, #0
 8024e86:	d004      	beq.n	8024e92 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024e88:	687b      	ldr	r3, [r7, #4]
 8024e8a:	2204      	movs	r2, #4
 8024e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024e8e:	2304      	movs	r3, #4
 8024e90:	e014      	b.n	8024ebc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024e92:	687b      	ldr	r3, [r7, #4]
 8024e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024e96:	f003 0301 	and.w	r3, r3, #1
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	d004      	beq.n	8024ea8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	2201      	movs	r2, #1
 8024ea2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024ea4:	2301      	movs	r3, #1
 8024ea6:	e009      	b.n	8024ebc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024eb0:	2b00      	cmp	r3, #0
 8024eb2:	d002      	beq.n	8024eba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8024eb4:	687b      	ldr	r3, [r7, #4]
 8024eb6:	2240      	movs	r2, #64	; 0x40
 8024eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8024eba:	2300      	movs	r3, #0
  
}
 8024ebc:	4618      	mov	r0, r3
 8024ebe:	3710      	adds	r7, #16
 8024ec0:	46bd      	mov	sp, r7
 8024ec2:	bc90      	pop	{r4, r7}
 8024ec4:	4770      	bx	lr
 8024ec6:	bf00      	nop
 8024ec8:	20000000 	.word	0x20000000
 8024ecc:	10624dd3 	.word	0x10624dd3

08024ed0 <main>:




int main(void)
{
 8024ed0:	b580      	push	{r7, lr}
 8024ed2:	af00      	add	r7, sp, #0
  hwInit();
 8024ed4:	f7f4 fb40 	bl	8019558 <hwInit>
  apInit();
 8024ed8:	f7ec fbf6 	bl	80116c8 <apInit>

  apMain();
 8024edc:	f7ec fc36 	bl	801174c <apMain>

  return 0;
 8024ee0:	2300      	movs	r3, #0
}
 8024ee2:	4618      	mov	r0, r3
 8024ee4:	bd80      	pop	{r7, pc}
	...

08024ee8 <__errno>:
 8024ee8:	4b01      	ldr	r3, [pc, #4]	; (8024ef0 <__errno+0x8>)
 8024eea:	6818      	ldr	r0, [r3, #0]
 8024eec:	4770      	bx	lr
 8024eee:	bf00      	nop
 8024ef0:	200000e0 	.word	0x200000e0

08024ef4 <__libc_init_array>:
 8024ef4:	b570      	push	{r4, r5, r6, lr}
 8024ef6:	4d0d      	ldr	r5, [pc, #52]	; (8024f2c <__libc_init_array+0x38>)
 8024ef8:	4c0d      	ldr	r4, [pc, #52]	; (8024f30 <__libc_init_array+0x3c>)
 8024efa:	1b64      	subs	r4, r4, r5
 8024efc:	10a4      	asrs	r4, r4, #2
 8024efe:	2600      	movs	r6, #0
 8024f00:	42a6      	cmp	r6, r4
 8024f02:	d109      	bne.n	8024f18 <__libc_init_array+0x24>
 8024f04:	4d0b      	ldr	r5, [pc, #44]	; (8024f34 <__libc_init_array+0x40>)
 8024f06:	4c0c      	ldr	r4, [pc, #48]	; (8024f38 <__libc_init_array+0x44>)
 8024f08:	f004 faf2 	bl	80294f0 <_init>
 8024f0c:	1b64      	subs	r4, r4, r5
 8024f0e:	10a4      	asrs	r4, r4, #2
 8024f10:	2600      	movs	r6, #0
 8024f12:	42a6      	cmp	r6, r4
 8024f14:	d105      	bne.n	8024f22 <__libc_init_array+0x2e>
 8024f16:	bd70      	pop	{r4, r5, r6, pc}
 8024f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f1c:	4798      	blx	r3
 8024f1e:	3601      	adds	r6, #1
 8024f20:	e7ee      	b.n	8024f00 <__libc_init_array+0xc>
 8024f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8024f26:	4798      	blx	r3
 8024f28:	3601      	adds	r6, #1
 8024f2a:	e7f2      	b.n	8024f12 <__libc_init_array+0x1e>
 8024f2c:	08037f5c 	.word	0x08037f5c
 8024f30:	08037f5c 	.word	0x08037f5c
 8024f34:	08037f5c 	.word	0x08037f5c
 8024f38:	08037f60 	.word	0x08037f60

08024f3c <malloc>:
 8024f3c:	4b02      	ldr	r3, [pc, #8]	; (8024f48 <malloc+0xc>)
 8024f3e:	4601      	mov	r1, r0
 8024f40:	6818      	ldr	r0, [r3, #0]
 8024f42:	f000 b88d 	b.w	8025060 <_malloc_r>
 8024f46:	bf00      	nop
 8024f48:	200000e0 	.word	0x200000e0

08024f4c <free>:
 8024f4c:	4b02      	ldr	r3, [pc, #8]	; (8024f58 <free+0xc>)
 8024f4e:	4601      	mov	r1, r0
 8024f50:	6818      	ldr	r0, [r3, #0]
 8024f52:	f000 b819 	b.w	8024f88 <_free_r>
 8024f56:	bf00      	nop
 8024f58:	200000e0 	.word	0x200000e0

08024f5c <memcpy>:
 8024f5c:	440a      	add	r2, r1
 8024f5e:	4291      	cmp	r1, r2
 8024f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8024f64:	d100      	bne.n	8024f68 <memcpy+0xc>
 8024f66:	4770      	bx	lr
 8024f68:	b510      	push	{r4, lr}
 8024f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024f72:	4291      	cmp	r1, r2
 8024f74:	d1f9      	bne.n	8024f6a <memcpy+0xe>
 8024f76:	bd10      	pop	{r4, pc}

08024f78 <memset>:
 8024f78:	4402      	add	r2, r0
 8024f7a:	4603      	mov	r3, r0
 8024f7c:	4293      	cmp	r3, r2
 8024f7e:	d100      	bne.n	8024f82 <memset+0xa>
 8024f80:	4770      	bx	lr
 8024f82:	f803 1b01 	strb.w	r1, [r3], #1
 8024f86:	e7f9      	b.n	8024f7c <memset+0x4>

08024f88 <_free_r>:
 8024f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024f8a:	2900      	cmp	r1, #0
 8024f8c:	d044      	beq.n	8025018 <_free_r+0x90>
 8024f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024f92:	9001      	str	r0, [sp, #4]
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	f1a1 0404 	sub.w	r4, r1, #4
 8024f9a:	bfb8      	it	lt
 8024f9c:	18e4      	addlt	r4, r4, r3
 8024f9e:	f003 f969 	bl	8028274 <__malloc_lock>
 8024fa2:	4a1e      	ldr	r2, [pc, #120]	; (802501c <_free_r+0x94>)
 8024fa4:	9801      	ldr	r0, [sp, #4]
 8024fa6:	6813      	ldr	r3, [r2, #0]
 8024fa8:	b933      	cbnz	r3, 8024fb8 <_free_r+0x30>
 8024faa:	6063      	str	r3, [r4, #4]
 8024fac:	6014      	str	r4, [r2, #0]
 8024fae:	b003      	add	sp, #12
 8024fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024fb4:	f003 b964 	b.w	8028280 <__malloc_unlock>
 8024fb8:	42a3      	cmp	r3, r4
 8024fba:	d908      	bls.n	8024fce <_free_r+0x46>
 8024fbc:	6825      	ldr	r5, [r4, #0]
 8024fbe:	1961      	adds	r1, r4, r5
 8024fc0:	428b      	cmp	r3, r1
 8024fc2:	bf01      	itttt	eq
 8024fc4:	6819      	ldreq	r1, [r3, #0]
 8024fc6:	685b      	ldreq	r3, [r3, #4]
 8024fc8:	1949      	addeq	r1, r1, r5
 8024fca:	6021      	streq	r1, [r4, #0]
 8024fcc:	e7ed      	b.n	8024faa <_free_r+0x22>
 8024fce:	461a      	mov	r2, r3
 8024fd0:	685b      	ldr	r3, [r3, #4]
 8024fd2:	b10b      	cbz	r3, 8024fd8 <_free_r+0x50>
 8024fd4:	42a3      	cmp	r3, r4
 8024fd6:	d9fa      	bls.n	8024fce <_free_r+0x46>
 8024fd8:	6811      	ldr	r1, [r2, #0]
 8024fda:	1855      	adds	r5, r2, r1
 8024fdc:	42a5      	cmp	r5, r4
 8024fde:	d10b      	bne.n	8024ff8 <_free_r+0x70>
 8024fe0:	6824      	ldr	r4, [r4, #0]
 8024fe2:	4421      	add	r1, r4
 8024fe4:	1854      	adds	r4, r2, r1
 8024fe6:	42a3      	cmp	r3, r4
 8024fe8:	6011      	str	r1, [r2, #0]
 8024fea:	d1e0      	bne.n	8024fae <_free_r+0x26>
 8024fec:	681c      	ldr	r4, [r3, #0]
 8024fee:	685b      	ldr	r3, [r3, #4]
 8024ff0:	6053      	str	r3, [r2, #4]
 8024ff2:	4421      	add	r1, r4
 8024ff4:	6011      	str	r1, [r2, #0]
 8024ff6:	e7da      	b.n	8024fae <_free_r+0x26>
 8024ff8:	d902      	bls.n	8025000 <_free_r+0x78>
 8024ffa:	230c      	movs	r3, #12
 8024ffc:	6003      	str	r3, [r0, #0]
 8024ffe:	e7d6      	b.n	8024fae <_free_r+0x26>
 8025000:	6825      	ldr	r5, [r4, #0]
 8025002:	1961      	adds	r1, r4, r5
 8025004:	428b      	cmp	r3, r1
 8025006:	bf04      	itt	eq
 8025008:	6819      	ldreq	r1, [r3, #0]
 802500a:	685b      	ldreq	r3, [r3, #4]
 802500c:	6063      	str	r3, [r4, #4]
 802500e:	bf04      	itt	eq
 8025010:	1949      	addeq	r1, r1, r5
 8025012:	6021      	streq	r1, [r4, #0]
 8025014:	6054      	str	r4, [r2, #4]
 8025016:	e7ca      	b.n	8024fae <_free_r+0x26>
 8025018:	b003      	add	sp, #12
 802501a:	bd30      	pop	{r4, r5, pc}
 802501c:	2000b364 	.word	0x2000b364

08025020 <sbrk_aligned>:
 8025020:	b570      	push	{r4, r5, r6, lr}
 8025022:	4e0e      	ldr	r6, [pc, #56]	; (802505c <sbrk_aligned+0x3c>)
 8025024:	460c      	mov	r4, r1
 8025026:	6831      	ldr	r1, [r6, #0]
 8025028:	4605      	mov	r5, r0
 802502a:	b911      	cbnz	r1, 8025032 <sbrk_aligned+0x12>
 802502c:	f000 fcf6 	bl	8025a1c <_sbrk_r>
 8025030:	6030      	str	r0, [r6, #0]
 8025032:	4621      	mov	r1, r4
 8025034:	4628      	mov	r0, r5
 8025036:	f000 fcf1 	bl	8025a1c <_sbrk_r>
 802503a:	1c43      	adds	r3, r0, #1
 802503c:	d00a      	beq.n	8025054 <sbrk_aligned+0x34>
 802503e:	1cc4      	adds	r4, r0, #3
 8025040:	f024 0403 	bic.w	r4, r4, #3
 8025044:	42a0      	cmp	r0, r4
 8025046:	d007      	beq.n	8025058 <sbrk_aligned+0x38>
 8025048:	1a21      	subs	r1, r4, r0
 802504a:	4628      	mov	r0, r5
 802504c:	f000 fce6 	bl	8025a1c <_sbrk_r>
 8025050:	3001      	adds	r0, #1
 8025052:	d101      	bne.n	8025058 <sbrk_aligned+0x38>
 8025054:	f04f 34ff 	mov.w	r4, #4294967295
 8025058:	4620      	mov	r0, r4
 802505a:	bd70      	pop	{r4, r5, r6, pc}
 802505c:	2000b368 	.word	0x2000b368

08025060 <_malloc_r>:
 8025060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025064:	1ccd      	adds	r5, r1, #3
 8025066:	f025 0503 	bic.w	r5, r5, #3
 802506a:	3508      	adds	r5, #8
 802506c:	2d0c      	cmp	r5, #12
 802506e:	bf38      	it	cc
 8025070:	250c      	movcc	r5, #12
 8025072:	2d00      	cmp	r5, #0
 8025074:	4607      	mov	r7, r0
 8025076:	db01      	blt.n	802507c <_malloc_r+0x1c>
 8025078:	42a9      	cmp	r1, r5
 802507a:	d905      	bls.n	8025088 <_malloc_r+0x28>
 802507c:	230c      	movs	r3, #12
 802507e:	603b      	str	r3, [r7, #0]
 8025080:	2600      	movs	r6, #0
 8025082:	4630      	mov	r0, r6
 8025084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025088:	4e2e      	ldr	r6, [pc, #184]	; (8025144 <_malloc_r+0xe4>)
 802508a:	f003 f8f3 	bl	8028274 <__malloc_lock>
 802508e:	6833      	ldr	r3, [r6, #0]
 8025090:	461c      	mov	r4, r3
 8025092:	bb34      	cbnz	r4, 80250e2 <_malloc_r+0x82>
 8025094:	4629      	mov	r1, r5
 8025096:	4638      	mov	r0, r7
 8025098:	f7ff ffc2 	bl	8025020 <sbrk_aligned>
 802509c:	1c43      	adds	r3, r0, #1
 802509e:	4604      	mov	r4, r0
 80250a0:	d14d      	bne.n	802513e <_malloc_r+0xde>
 80250a2:	6834      	ldr	r4, [r6, #0]
 80250a4:	4626      	mov	r6, r4
 80250a6:	2e00      	cmp	r6, #0
 80250a8:	d140      	bne.n	802512c <_malloc_r+0xcc>
 80250aa:	6823      	ldr	r3, [r4, #0]
 80250ac:	4631      	mov	r1, r6
 80250ae:	4638      	mov	r0, r7
 80250b0:	eb04 0803 	add.w	r8, r4, r3
 80250b4:	f000 fcb2 	bl	8025a1c <_sbrk_r>
 80250b8:	4580      	cmp	r8, r0
 80250ba:	d13a      	bne.n	8025132 <_malloc_r+0xd2>
 80250bc:	6821      	ldr	r1, [r4, #0]
 80250be:	3503      	adds	r5, #3
 80250c0:	1a6d      	subs	r5, r5, r1
 80250c2:	f025 0503 	bic.w	r5, r5, #3
 80250c6:	3508      	adds	r5, #8
 80250c8:	2d0c      	cmp	r5, #12
 80250ca:	bf38      	it	cc
 80250cc:	250c      	movcc	r5, #12
 80250ce:	4629      	mov	r1, r5
 80250d0:	4638      	mov	r0, r7
 80250d2:	f7ff ffa5 	bl	8025020 <sbrk_aligned>
 80250d6:	3001      	adds	r0, #1
 80250d8:	d02b      	beq.n	8025132 <_malloc_r+0xd2>
 80250da:	6823      	ldr	r3, [r4, #0]
 80250dc:	442b      	add	r3, r5
 80250de:	6023      	str	r3, [r4, #0]
 80250e0:	e00e      	b.n	8025100 <_malloc_r+0xa0>
 80250e2:	6822      	ldr	r2, [r4, #0]
 80250e4:	1b52      	subs	r2, r2, r5
 80250e6:	d41e      	bmi.n	8025126 <_malloc_r+0xc6>
 80250e8:	2a0b      	cmp	r2, #11
 80250ea:	d916      	bls.n	802511a <_malloc_r+0xba>
 80250ec:	1961      	adds	r1, r4, r5
 80250ee:	42a3      	cmp	r3, r4
 80250f0:	6025      	str	r5, [r4, #0]
 80250f2:	bf18      	it	ne
 80250f4:	6059      	strne	r1, [r3, #4]
 80250f6:	6863      	ldr	r3, [r4, #4]
 80250f8:	bf08      	it	eq
 80250fa:	6031      	streq	r1, [r6, #0]
 80250fc:	5162      	str	r2, [r4, r5]
 80250fe:	604b      	str	r3, [r1, #4]
 8025100:	4638      	mov	r0, r7
 8025102:	f104 060b 	add.w	r6, r4, #11
 8025106:	f003 f8bb 	bl	8028280 <__malloc_unlock>
 802510a:	f026 0607 	bic.w	r6, r6, #7
 802510e:	1d23      	adds	r3, r4, #4
 8025110:	1af2      	subs	r2, r6, r3
 8025112:	d0b6      	beq.n	8025082 <_malloc_r+0x22>
 8025114:	1b9b      	subs	r3, r3, r6
 8025116:	50a3      	str	r3, [r4, r2]
 8025118:	e7b3      	b.n	8025082 <_malloc_r+0x22>
 802511a:	6862      	ldr	r2, [r4, #4]
 802511c:	42a3      	cmp	r3, r4
 802511e:	bf0c      	ite	eq
 8025120:	6032      	streq	r2, [r6, #0]
 8025122:	605a      	strne	r2, [r3, #4]
 8025124:	e7ec      	b.n	8025100 <_malloc_r+0xa0>
 8025126:	4623      	mov	r3, r4
 8025128:	6864      	ldr	r4, [r4, #4]
 802512a:	e7b2      	b.n	8025092 <_malloc_r+0x32>
 802512c:	4634      	mov	r4, r6
 802512e:	6876      	ldr	r6, [r6, #4]
 8025130:	e7b9      	b.n	80250a6 <_malloc_r+0x46>
 8025132:	230c      	movs	r3, #12
 8025134:	603b      	str	r3, [r7, #0]
 8025136:	4638      	mov	r0, r7
 8025138:	f003 f8a2 	bl	8028280 <__malloc_unlock>
 802513c:	e7a1      	b.n	8025082 <_malloc_r+0x22>
 802513e:	6025      	str	r5, [r4, #0]
 8025140:	e7de      	b.n	8025100 <_malloc_r+0xa0>
 8025142:	bf00      	nop
 8025144:	2000b364 	.word	0x2000b364

08025148 <__cvt>:
 8025148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802514c:	ec55 4b10 	vmov	r4, r5, d0
 8025150:	2d00      	cmp	r5, #0
 8025152:	460e      	mov	r6, r1
 8025154:	4619      	mov	r1, r3
 8025156:	462b      	mov	r3, r5
 8025158:	bfbb      	ittet	lt
 802515a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802515e:	461d      	movlt	r5, r3
 8025160:	2300      	movge	r3, #0
 8025162:	232d      	movlt	r3, #45	; 0x2d
 8025164:	700b      	strb	r3, [r1, #0]
 8025166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802516c:	4691      	mov	r9, r2
 802516e:	f023 0820 	bic.w	r8, r3, #32
 8025172:	bfbc      	itt	lt
 8025174:	4622      	movlt	r2, r4
 8025176:	4614      	movlt	r4, r2
 8025178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802517c:	d005      	beq.n	802518a <__cvt+0x42>
 802517e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8025182:	d100      	bne.n	8025186 <__cvt+0x3e>
 8025184:	3601      	adds	r6, #1
 8025186:	2102      	movs	r1, #2
 8025188:	e000      	b.n	802518c <__cvt+0x44>
 802518a:	2103      	movs	r1, #3
 802518c:	ab03      	add	r3, sp, #12
 802518e:	9301      	str	r3, [sp, #4]
 8025190:	ab02      	add	r3, sp, #8
 8025192:	9300      	str	r3, [sp, #0]
 8025194:	ec45 4b10 	vmov	d0, r4, r5
 8025198:	4653      	mov	r3, sl
 802519a:	4632      	mov	r2, r6
 802519c:	f001 fcd8 	bl	8026b50 <_dtoa_r>
 80251a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80251a4:	4607      	mov	r7, r0
 80251a6:	d102      	bne.n	80251ae <__cvt+0x66>
 80251a8:	f019 0f01 	tst.w	r9, #1
 80251ac:	d022      	beq.n	80251f4 <__cvt+0xac>
 80251ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80251b2:	eb07 0906 	add.w	r9, r7, r6
 80251b6:	d110      	bne.n	80251da <__cvt+0x92>
 80251b8:	783b      	ldrb	r3, [r7, #0]
 80251ba:	2b30      	cmp	r3, #48	; 0x30
 80251bc:	d10a      	bne.n	80251d4 <__cvt+0x8c>
 80251be:	2200      	movs	r2, #0
 80251c0:	2300      	movs	r3, #0
 80251c2:	4620      	mov	r0, r4
 80251c4:	4629      	mov	r1, r5
 80251c6:	f7eb ffe7 	bl	8011198 <__aeabi_dcmpeq>
 80251ca:	b918      	cbnz	r0, 80251d4 <__cvt+0x8c>
 80251cc:	f1c6 0601 	rsb	r6, r6, #1
 80251d0:	f8ca 6000 	str.w	r6, [sl]
 80251d4:	f8da 3000 	ldr.w	r3, [sl]
 80251d8:	4499      	add	r9, r3
 80251da:	2200      	movs	r2, #0
 80251dc:	2300      	movs	r3, #0
 80251de:	4620      	mov	r0, r4
 80251e0:	4629      	mov	r1, r5
 80251e2:	f7eb ffd9 	bl	8011198 <__aeabi_dcmpeq>
 80251e6:	b108      	cbz	r0, 80251ec <__cvt+0xa4>
 80251e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80251ec:	2230      	movs	r2, #48	; 0x30
 80251ee:	9b03      	ldr	r3, [sp, #12]
 80251f0:	454b      	cmp	r3, r9
 80251f2:	d307      	bcc.n	8025204 <__cvt+0xbc>
 80251f4:	9b03      	ldr	r3, [sp, #12]
 80251f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80251f8:	1bdb      	subs	r3, r3, r7
 80251fa:	4638      	mov	r0, r7
 80251fc:	6013      	str	r3, [r2, #0]
 80251fe:	b004      	add	sp, #16
 8025200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025204:	1c59      	adds	r1, r3, #1
 8025206:	9103      	str	r1, [sp, #12]
 8025208:	701a      	strb	r2, [r3, #0]
 802520a:	e7f0      	b.n	80251ee <__cvt+0xa6>

0802520c <__exponent>:
 802520c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802520e:	4603      	mov	r3, r0
 8025210:	2900      	cmp	r1, #0
 8025212:	bfb8      	it	lt
 8025214:	4249      	neglt	r1, r1
 8025216:	f803 2b02 	strb.w	r2, [r3], #2
 802521a:	bfb4      	ite	lt
 802521c:	222d      	movlt	r2, #45	; 0x2d
 802521e:	222b      	movge	r2, #43	; 0x2b
 8025220:	2909      	cmp	r1, #9
 8025222:	7042      	strb	r2, [r0, #1]
 8025224:	dd2a      	ble.n	802527c <__exponent+0x70>
 8025226:	f10d 0407 	add.w	r4, sp, #7
 802522a:	46a4      	mov	ip, r4
 802522c:	270a      	movs	r7, #10
 802522e:	46a6      	mov	lr, r4
 8025230:	460a      	mov	r2, r1
 8025232:	fb91 f6f7 	sdiv	r6, r1, r7
 8025236:	fb07 1516 	mls	r5, r7, r6, r1
 802523a:	3530      	adds	r5, #48	; 0x30
 802523c:	2a63      	cmp	r2, #99	; 0x63
 802523e:	f104 34ff 	add.w	r4, r4, #4294967295
 8025242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8025246:	4631      	mov	r1, r6
 8025248:	dcf1      	bgt.n	802522e <__exponent+0x22>
 802524a:	3130      	adds	r1, #48	; 0x30
 802524c:	f1ae 0502 	sub.w	r5, lr, #2
 8025250:	f804 1c01 	strb.w	r1, [r4, #-1]
 8025254:	1c44      	adds	r4, r0, #1
 8025256:	4629      	mov	r1, r5
 8025258:	4561      	cmp	r1, ip
 802525a:	d30a      	bcc.n	8025272 <__exponent+0x66>
 802525c:	f10d 0209 	add.w	r2, sp, #9
 8025260:	eba2 020e 	sub.w	r2, r2, lr
 8025264:	4565      	cmp	r5, ip
 8025266:	bf88      	it	hi
 8025268:	2200      	movhi	r2, #0
 802526a:	4413      	add	r3, r2
 802526c:	1a18      	subs	r0, r3, r0
 802526e:	b003      	add	sp, #12
 8025270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025276:	f804 2f01 	strb.w	r2, [r4, #1]!
 802527a:	e7ed      	b.n	8025258 <__exponent+0x4c>
 802527c:	2330      	movs	r3, #48	; 0x30
 802527e:	3130      	adds	r1, #48	; 0x30
 8025280:	7083      	strb	r3, [r0, #2]
 8025282:	70c1      	strb	r1, [r0, #3]
 8025284:	1d03      	adds	r3, r0, #4
 8025286:	e7f1      	b.n	802526c <__exponent+0x60>

08025288 <_printf_float>:
 8025288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802528c:	ed2d 8b02 	vpush	{d8}
 8025290:	b08d      	sub	sp, #52	; 0x34
 8025292:	460c      	mov	r4, r1
 8025294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8025298:	4616      	mov	r6, r2
 802529a:	461f      	mov	r7, r3
 802529c:	4605      	mov	r5, r0
 802529e:	f002 ff6b 	bl	8028178 <_localeconv_r>
 80252a2:	f8d0 a000 	ldr.w	sl, [r0]
 80252a6:	4650      	mov	r0, sl
 80252a8:	f7eb faf4 	bl	8010894 <strlen>
 80252ac:	2300      	movs	r3, #0
 80252ae:	930a      	str	r3, [sp, #40]	; 0x28
 80252b0:	6823      	ldr	r3, [r4, #0]
 80252b2:	9305      	str	r3, [sp, #20]
 80252b4:	f8d8 3000 	ldr.w	r3, [r8]
 80252b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80252bc:	3307      	adds	r3, #7
 80252be:	f023 0307 	bic.w	r3, r3, #7
 80252c2:	f103 0208 	add.w	r2, r3, #8
 80252c6:	f8c8 2000 	str.w	r2, [r8]
 80252ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80252d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80252d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80252da:	9307      	str	r3, [sp, #28]
 80252dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80252e0:	ee08 0a10 	vmov	s16, r0
 80252e4:	4b9f      	ldr	r3, [pc, #636]	; (8025564 <_printf_float+0x2dc>)
 80252e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80252ea:	f04f 32ff 	mov.w	r2, #4294967295
 80252ee:	f7eb ff85 	bl	80111fc <__aeabi_dcmpun>
 80252f2:	bb88      	cbnz	r0, 8025358 <_printf_float+0xd0>
 80252f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80252f8:	4b9a      	ldr	r3, [pc, #616]	; (8025564 <_printf_float+0x2dc>)
 80252fa:	f04f 32ff 	mov.w	r2, #4294967295
 80252fe:	f7eb ff5f 	bl	80111c0 <__aeabi_dcmple>
 8025302:	bb48      	cbnz	r0, 8025358 <_printf_float+0xd0>
 8025304:	2200      	movs	r2, #0
 8025306:	2300      	movs	r3, #0
 8025308:	4640      	mov	r0, r8
 802530a:	4649      	mov	r1, r9
 802530c:	f7eb ff4e 	bl	80111ac <__aeabi_dcmplt>
 8025310:	b110      	cbz	r0, 8025318 <_printf_float+0x90>
 8025312:	232d      	movs	r3, #45	; 0x2d
 8025314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025318:	4b93      	ldr	r3, [pc, #588]	; (8025568 <_printf_float+0x2e0>)
 802531a:	4894      	ldr	r0, [pc, #592]	; (802556c <_printf_float+0x2e4>)
 802531c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8025320:	bf94      	ite	ls
 8025322:	4698      	movls	r8, r3
 8025324:	4680      	movhi	r8, r0
 8025326:	2303      	movs	r3, #3
 8025328:	6123      	str	r3, [r4, #16]
 802532a:	9b05      	ldr	r3, [sp, #20]
 802532c:	f023 0204 	bic.w	r2, r3, #4
 8025330:	6022      	str	r2, [r4, #0]
 8025332:	f04f 0900 	mov.w	r9, #0
 8025336:	9700      	str	r7, [sp, #0]
 8025338:	4633      	mov	r3, r6
 802533a:	aa0b      	add	r2, sp, #44	; 0x2c
 802533c:	4621      	mov	r1, r4
 802533e:	4628      	mov	r0, r5
 8025340:	f000 f9d8 	bl	80256f4 <_printf_common>
 8025344:	3001      	adds	r0, #1
 8025346:	f040 8090 	bne.w	802546a <_printf_float+0x1e2>
 802534a:	f04f 30ff 	mov.w	r0, #4294967295
 802534e:	b00d      	add	sp, #52	; 0x34
 8025350:	ecbd 8b02 	vpop	{d8}
 8025354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025358:	4642      	mov	r2, r8
 802535a:	464b      	mov	r3, r9
 802535c:	4640      	mov	r0, r8
 802535e:	4649      	mov	r1, r9
 8025360:	f7eb ff4c 	bl	80111fc <__aeabi_dcmpun>
 8025364:	b140      	cbz	r0, 8025378 <_printf_float+0xf0>
 8025366:	464b      	mov	r3, r9
 8025368:	2b00      	cmp	r3, #0
 802536a:	bfbc      	itt	lt
 802536c:	232d      	movlt	r3, #45	; 0x2d
 802536e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025372:	487f      	ldr	r0, [pc, #508]	; (8025570 <_printf_float+0x2e8>)
 8025374:	4b7f      	ldr	r3, [pc, #508]	; (8025574 <_printf_float+0x2ec>)
 8025376:	e7d1      	b.n	802531c <_printf_float+0x94>
 8025378:	6863      	ldr	r3, [r4, #4]
 802537a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802537e:	9206      	str	r2, [sp, #24]
 8025380:	1c5a      	adds	r2, r3, #1
 8025382:	d13f      	bne.n	8025404 <_printf_float+0x17c>
 8025384:	2306      	movs	r3, #6
 8025386:	6063      	str	r3, [r4, #4]
 8025388:	9b05      	ldr	r3, [sp, #20]
 802538a:	6861      	ldr	r1, [r4, #4]
 802538c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8025390:	2300      	movs	r3, #0
 8025392:	9303      	str	r3, [sp, #12]
 8025394:	ab0a      	add	r3, sp, #40	; 0x28
 8025396:	e9cd b301 	strd	fp, r3, [sp, #4]
 802539a:	ab09      	add	r3, sp, #36	; 0x24
 802539c:	ec49 8b10 	vmov	d0, r8, r9
 80253a0:	9300      	str	r3, [sp, #0]
 80253a2:	6022      	str	r2, [r4, #0]
 80253a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80253a8:	4628      	mov	r0, r5
 80253aa:	f7ff fecd 	bl	8025148 <__cvt>
 80253ae:	9b06      	ldr	r3, [sp, #24]
 80253b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80253b2:	2b47      	cmp	r3, #71	; 0x47
 80253b4:	4680      	mov	r8, r0
 80253b6:	d108      	bne.n	80253ca <_printf_float+0x142>
 80253b8:	1cc8      	adds	r0, r1, #3
 80253ba:	db02      	blt.n	80253c2 <_printf_float+0x13a>
 80253bc:	6863      	ldr	r3, [r4, #4]
 80253be:	4299      	cmp	r1, r3
 80253c0:	dd41      	ble.n	8025446 <_printf_float+0x1be>
 80253c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80253c6:	fa5f fb8b 	uxtb.w	fp, fp
 80253ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80253ce:	d820      	bhi.n	8025412 <_printf_float+0x18a>
 80253d0:	3901      	subs	r1, #1
 80253d2:	465a      	mov	r2, fp
 80253d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80253d8:	9109      	str	r1, [sp, #36]	; 0x24
 80253da:	f7ff ff17 	bl	802520c <__exponent>
 80253de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80253e0:	1813      	adds	r3, r2, r0
 80253e2:	2a01      	cmp	r2, #1
 80253e4:	4681      	mov	r9, r0
 80253e6:	6123      	str	r3, [r4, #16]
 80253e8:	dc02      	bgt.n	80253f0 <_printf_float+0x168>
 80253ea:	6822      	ldr	r2, [r4, #0]
 80253ec:	07d2      	lsls	r2, r2, #31
 80253ee:	d501      	bpl.n	80253f4 <_printf_float+0x16c>
 80253f0:	3301      	adds	r3, #1
 80253f2:	6123      	str	r3, [r4, #16]
 80253f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d09c      	beq.n	8025336 <_printf_float+0xae>
 80253fc:	232d      	movs	r3, #45	; 0x2d
 80253fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025402:	e798      	b.n	8025336 <_printf_float+0xae>
 8025404:	9a06      	ldr	r2, [sp, #24]
 8025406:	2a47      	cmp	r2, #71	; 0x47
 8025408:	d1be      	bne.n	8025388 <_printf_float+0x100>
 802540a:	2b00      	cmp	r3, #0
 802540c:	d1bc      	bne.n	8025388 <_printf_float+0x100>
 802540e:	2301      	movs	r3, #1
 8025410:	e7b9      	b.n	8025386 <_printf_float+0xfe>
 8025412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8025416:	d118      	bne.n	802544a <_printf_float+0x1c2>
 8025418:	2900      	cmp	r1, #0
 802541a:	6863      	ldr	r3, [r4, #4]
 802541c:	dd0b      	ble.n	8025436 <_printf_float+0x1ae>
 802541e:	6121      	str	r1, [r4, #16]
 8025420:	b913      	cbnz	r3, 8025428 <_printf_float+0x1a0>
 8025422:	6822      	ldr	r2, [r4, #0]
 8025424:	07d0      	lsls	r0, r2, #31
 8025426:	d502      	bpl.n	802542e <_printf_float+0x1a6>
 8025428:	3301      	adds	r3, #1
 802542a:	440b      	add	r3, r1
 802542c:	6123      	str	r3, [r4, #16]
 802542e:	65a1      	str	r1, [r4, #88]	; 0x58
 8025430:	f04f 0900 	mov.w	r9, #0
 8025434:	e7de      	b.n	80253f4 <_printf_float+0x16c>
 8025436:	b913      	cbnz	r3, 802543e <_printf_float+0x1b6>
 8025438:	6822      	ldr	r2, [r4, #0]
 802543a:	07d2      	lsls	r2, r2, #31
 802543c:	d501      	bpl.n	8025442 <_printf_float+0x1ba>
 802543e:	3302      	adds	r3, #2
 8025440:	e7f4      	b.n	802542c <_printf_float+0x1a4>
 8025442:	2301      	movs	r3, #1
 8025444:	e7f2      	b.n	802542c <_printf_float+0x1a4>
 8025446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802544a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802544c:	4299      	cmp	r1, r3
 802544e:	db05      	blt.n	802545c <_printf_float+0x1d4>
 8025450:	6823      	ldr	r3, [r4, #0]
 8025452:	6121      	str	r1, [r4, #16]
 8025454:	07d8      	lsls	r0, r3, #31
 8025456:	d5ea      	bpl.n	802542e <_printf_float+0x1a6>
 8025458:	1c4b      	adds	r3, r1, #1
 802545a:	e7e7      	b.n	802542c <_printf_float+0x1a4>
 802545c:	2900      	cmp	r1, #0
 802545e:	bfd4      	ite	le
 8025460:	f1c1 0202 	rsble	r2, r1, #2
 8025464:	2201      	movgt	r2, #1
 8025466:	4413      	add	r3, r2
 8025468:	e7e0      	b.n	802542c <_printf_float+0x1a4>
 802546a:	6823      	ldr	r3, [r4, #0]
 802546c:	055a      	lsls	r2, r3, #21
 802546e:	d407      	bmi.n	8025480 <_printf_float+0x1f8>
 8025470:	6923      	ldr	r3, [r4, #16]
 8025472:	4642      	mov	r2, r8
 8025474:	4631      	mov	r1, r6
 8025476:	4628      	mov	r0, r5
 8025478:	47b8      	blx	r7
 802547a:	3001      	adds	r0, #1
 802547c:	d12c      	bne.n	80254d8 <_printf_float+0x250>
 802547e:	e764      	b.n	802534a <_printf_float+0xc2>
 8025480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8025484:	f240 80e0 	bls.w	8025648 <_printf_float+0x3c0>
 8025488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802548c:	2200      	movs	r2, #0
 802548e:	2300      	movs	r3, #0
 8025490:	f7eb fe82 	bl	8011198 <__aeabi_dcmpeq>
 8025494:	2800      	cmp	r0, #0
 8025496:	d034      	beq.n	8025502 <_printf_float+0x27a>
 8025498:	4a37      	ldr	r2, [pc, #220]	; (8025578 <_printf_float+0x2f0>)
 802549a:	2301      	movs	r3, #1
 802549c:	4631      	mov	r1, r6
 802549e:	4628      	mov	r0, r5
 80254a0:	47b8      	blx	r7
 80254a2:	3001      	adds	r0, #1
 80254a4:	f43f af51 	beq.w	802534a <_printf_float+0xc2>
 80254a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80254ac:	429a      	cmp	r2, r3
 80254ae:	db02      	blt.n	80254b6 <_printf_float+0x22e>
 80254b0:	6823      	ldr	r3, [r4, #0]
 80254b2:	07d8      	lsls	r0, r3, #31
 80254b4:	d510      	bpl.n	80254d8 <_printf_float+0x250>
 80254b6:	ee18 3a10 	vmov	r3, s16
 80254ba:	4652      	mov	r2, sl
 80254bc:	4631      	mov	r1, r6
 80254be:	4628      	mov	r0, r5
 80254c0:	47b8      	blx	r7
 80254c2:	3001      	adds	r0, #1
 80254c4:	f43f af41 	beq.w	802534a <_printf_float+0xc2>
 80254c8:	f04f 0800 	mov.w	r8, #0
 80254cc:	f104 091a 	add.w	r9, r4, #26
 80254d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80254d2:	3b01      	subs	r3, #1
 80254d4:	4543      	cmp	r3, r8
 80254d6:	dc09      	bgt.n	80254ec <_printf_float+0x264>
 80254d8:	6823      	ldr	r3, [r4, #0]
 80254da:	079b      	lsls	r3, r3, #30
 80254dc:	f100 8105 	bmi.w	80256ea <_printf_float+0x462>
 80254e0:	68e0      	ldr	r0, [r4, #12]
 80254e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80254e4:	4298      	cmp	r0, r3
 80254e6:	bfb8      	it	lt
 80254e8:	4618      	movlt	r0, r3
 80254ea:	e730      	b.n	802534e <_printf_float+0xc6>
 80254ec:	2301      	movs	r3, #1
 80254ee:	464a      	mov	r2, r9
 80254f0:	4631      	mov	r1, r6
 80254f2:	4628      	mov	r0, r5
 80254f4:	47b8      	blx	r7
 80254f6:	3001      	adds	r0, #1
 80254f8:	f43f af27 	beq.w	802534a <_printf_float+0xc2>
 80254fc:	f108 0801 	add.w	r8, r8, #1
 8025500:	e7e6      	b.n	80254d0 <_printf_float+0x248>
 8025502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025504:	2b00      	cmp	r3, #0
 8025506:	dc39      	bgt.n	802557c <_printf_float+0x2f4>
 8025508:	4a1b      	ldr	r2, [pc, #108]	; (8025578 <_printf_float+0x2f0>)
 802550a:	2301      	movs	r3, #1
 802550c:	4631      	mov	r1, r6
 802550e:	4628      	mov	r0, r5
 8025510:	47b8      	blx	r7
 8025512:	3001      	adds	r0, #1
 8025514:	f43f af19 	beq.w	802534a <_printf_float+0xc2>
 8025518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802551c:	4313      	orrs	r3, r2
 802551e:	d102      	bne.n	8025526 <_printf_float+0x29e>
 8025520:	6823      	ldr	r3, [r4, #0]
 8025522:	07d9      	lsls	r1, r3, #31
 8025524:	d5d8      	bpl.n	80254d8 <_printf_float+0x250>
 8025526:	ee18 3a10 	vmov	r3, s16
 802552a:	4652      	mov	r2, sl
 802552c:	4631      	mov	r1, r6
 802552e:	4628      	mov	r0, r5
 8025530:	47b8      	blx	r7
 8025532:	3001      	adds	r0, #1
 8025534:	f43f af09 	beq.w	802534a <_printf_float+0xc2>
 8025538:	f04f 0900 	mov.w	r9, #0
 802553c:	f104 0a1a 	add.w	sl, r4, #26
 8025540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025542:	425b      	negs	r3, r3
 8025544:	454b      	cmp	r3, r9
 8025546:	dc01      	bgt.n	802554c <_printf_float+0x2c4>
 8025548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802554a:	e792      	b.n	8025472 <_printf_float+0x1ea>
 802554c:	2301      	movs	r3, #1
 802554e:	4652      	mov	r2, sl
 8025550:	4631      	mov	r1, r6
 8025552:	4628      	mov	r0, r5
 8025554:	47b8      	blx	r7
 8025556:	3001      	adds	r0, #1
 8025558:	f43f aef7 	beq.w	802534a <_printf_float+0xc2>
 802555c:	f109 0901 	add.w	r9, r9, #1
 8025560:	e7ee      	b.n	8025540 <_printf_float+0x2b8>
 8025562:	bf00      	nop
 8025564:	7fefffff 	.word	0x7fefffff
 8025568:	08037ab0 	.word	0x08037ab0
 802556c:	08037ab4 	.word	0x08037ab4
 8025570:	08037abc 	.word	0x08037abc
 8025574:	08037ab8 	.word	0x08037ab8
 8025578:	08037ac0 	.word	0x08037ac0
 802557c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802557e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025580:	429a      	cmp	r2, r3
 8025582:	bfa8      	it	ge
 8025584:	461a      	movge	r2, r3
 8025586:	2a00      	cmp	r2, #0
 8025588:	4691      	mov	r9, r2
 802558a:	dc37      	bgt.n	80255fc <_printf_float+0x374>
 802558c:	f04f 0b00 	mov.w	fp, #0
 8025590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025594:	f104 021a 	add.w	r2, r4, #26
 8025598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802559a:	9305      	str	r3, [sp, #20]
 802559c:	eba3 0309 	sub.w	r3, r3, r9
 80255a0:	455b      	cmp	r3, fp
 80255a2:	dc33      	bgt.n	802560c <_printf_float+0x384>
 80255a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80255a8:	429a      	cmp	r2, r3
 80255aa:	db3b      	blt.n	8025624 <_printf_float+0x39c>
 80255ac:	6823      	ldr	r3, [r4, #0]
 80255ae:	07da      	lsls	r2, r3, #31
 80255b0:	d438      	bmi.n	8025624 <_printf_float+0x39c>
 80255b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255b4:	9a05      	ldr	r2, [sp, #20]
 80255b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80255b8:	1a9a      	subs	r2, r3, r2
 80255ba:	eba3 0901 	sub.w	r9, r3, r1
 80255be:	4591      	cmp	r9, r2
 80255c0:	bfa8      	it	ge
 80255c2:	4691      	movge	r9, r2
 80255c4:	f1b9 0f00 	cmp.w	r9, #0
 80255c8:	dc35      	bgt.n	8025636 <_printf_float+0x3ae>
 80255ca:	f04f 0800 	mov.w	r8, #0
 80255ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80255d2:	f104 0a1a 	add.w	sl, r4, #26
 80255d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80255da:	1a9b      	subs	r3, r3, r2
 80255dc:	eba3 0309 	sub.w	r3, r3, r9
 80255e0:	4543      	cmp	r3, r8
 80255e2:	f77f af79 	ble.w	80254d8 <_printf_float+0x250>
 80255e6:	2301      	movs	r3, #1
 80255e8:	4652      	mov	r2, sl
 80255ea:	4631      	mov	r1, r6
 80255ec:	4628      	mov	r0, r5
 80255ee:	47b8      	blx	r7
 80255f0:	3001      	adds	r0, #1
 80255f2:	f43f aeaa 	beq.w	802534a <_printf_float+0xc2>
 80255f6:	f108 0801 	add.w	r8, r8, #1
 80255fa:	e7ec      	b.n	80255d6 <_printf_float+0x34e>
 80255fc:	4613      	mov	r3, r2
 80255fe:	4631      	mov	r1, r6
 8025600:	4642      	mov	r2, r8
 8025602:	4628      	mov	r0, r5
 8025604:	47b8      	blx	r7
 8025606:	3001      	adds	r0, #1
 8025608:	d1c0      	bne.n	802558c <_printf_float+0x304>
 802560a:	e69e      	b.n	802534a <_printf_float+0xc2>
 802560c:	2301      	movs	r3, #1
 802560e:	4631      	mov	r1, r6
 8025610:	4628      	mov	r0, r5
 8025612:	9205      	str	r2, [sp, #20]
 8025614:	47b8      	blx	r7
 8025616:	3001      	adds	r0, #1
 8025618:	f43f ae97 	beq.w	802534a <_printf_float+0xc2>
 802561c:	9a05      	ldr	r2, [sp, #20]
 802561e:	f10b 0b01 	add.w	fp, fp, #1
 8025622:	e7b9      	b.n	8025598 <_printf_float+0x310>
 8025624:	ee18 3a10 	vmov	r3, s16
 8025628:	4652      	mov	r2, sl
 802562a:	4631      	mov	r1, r6
 802562c:	4628      	mov	r0, r5
 802562e:	47b8      	blx	r7
 8025630:	3001      	adds	r0, #1
 8025632:	d1be      	bne.n	80255b2 <_printf_float+0x32a>
 8025634:	e689      	b.n	802534a <_printf_float+0xc2>
 8025636:	9a05      	ldr	r2, [sp, #20]
 8025638:	464b      	mov	r3, r9
 802563a:	4442      	add	r2, r8
 802563c:	4631      	mov	r1, r6
 802563e:	4628      	mov	r0, r5
 8025640:	47b8      	blx	r7
 8025642:	3001      	adds	r0, #1
 8025644:	d1c1      	bne.n	80255ca <_printf_float+0x342>
 8025646:	e680      	b.n	802534a <_printf_float+0xc2>
 8025648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802564a:	2a01      	cmp	r2, #1
 802564c:	dc01      	bgt.n	8025652 <_printf_float+0x3ca>
 802564e:	07db      	lsls	r3, r3, #31
 8025650:	d538      	bpl.n	80256c4 <_printf_float+0x43c>
 8025652:	2301      	movs	r3, #1
 8025654:	4642      	mov	r2, r8
 8025656:	4631      	mov	r1, r6
 8025658:	4628      	mov	r0, r5
 802565a:	47b8      	blx	r7
 802565c:	3001      	adds	r0, #1
 802565e:	f43f ae74 	beq.w	802534a <_printf_float+0xc2>
 8025662:	ee18 3a10 	vmov	r3, s16
 8025666:	4652      	mov	r2, sl
 8025668:	4631      	mov	r1, r6
 802566a:	4628      	mov	r0, r5
 802566c:	47b8      	blx	r7
 802566e:	3001      	adds	r0, #1
 8025670:	f43f ae6b 	beq.w	802534a <_printf_float+0xc2>
 8025674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025678:	2200      	movs	r2, #0
 802567a:	2300      	movs	r3, #0
 802567c:	f7eb fd8c 	bl	8011198 <__aeabi_dcmpeq>
 8025680:	b9d8      	cbnz	r0, 80256ba <_printf_float+0x432>
 8025682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025684:	f108 0201 	add.w	r2, r8, #1
 8025688:	3b01      	subs	r3, #1
 802568a:	4631      	mov	r1, r6
 802568c:	4628      	mov	r0, r5
 802568e:	47b8      	blx	r7
 8025690:	3001      	adds	r0, #1
 8025692:	d10e      	bne.n	80256b2 <_printf_float+0x42a>
 8025694:	e659      	b.n	802534a <_printf_float+0xc2>
 8025696:	2301      	movs	r3, #1
 8025698:	4652      	mov	r2, sl
 802569a:	4631      	mov	r1, r6
 802569c:	4628      	mov	r0, r5
 802569e:	47b8      	blx	r7
 80256a0:	3001      	adds	r0, #1
 80256a2:	f43f ae52 	beq.w	802534a <_printf_float+0xc2>
 80256a6:	f108 0801 	add.w	r8, r8, #1
 80256aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80256ac:	3b01      	subs	r3, #1
 80256ae:	4543      	cmp	r3, r8
 80256b0:	dcf1      	bgt.n	8025696 <_printf_float+0x40e>
 80256b2:	464b      	mov	r3, r9
 80256b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80256b8:	e6dc      	b.n	8025474 <_printf_float+0x1ec>
 80256ba:	f04f 0800 	mov.w	r8, #0
 80256be:	f104 0a1a 	add.w	sl, r4, #26
 80256c2:	e7f2      	b.n	80256aa <_printf_float+0x422>
 80256c4:	2301      	movs	r3, #1
 80256c6:	4642      	mov	r2, r8
 80256c8:	e7df      	b.n	802568a <_printf_float+0x402>
 80256ca:	2301      	movs	r3, #1
 80256cc:	464a      	mov	r2, r9
 80256ce:	4631      	mov	r1, r6
 80256d0:	4628      	mov	r0, r5
 80256d2:	47b8      	blx	r7
 80256d4:	3001      	adds	r0, #1
 80256d6:	f43f ae38 	beq.w	802534a <_printf_float+0xc2>
 80256da:	f108 0801 	add.w	r8, r8, #1
 80256de:	68e3      	ldr	r3, [r4, #12]
 80256e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80256e2:	1a5b      	subs	r3, r3, r1
 80256e4:	4543      	cmp	r3, r8
 80256e6:	dcf0      	bgt.n	80256ca <_printf_float+0x442>
 80256e8:	e6fa      	b.n	80254e0 <_printf_float+0x258>
 80256ea:	f04f 0800 	mov.w	r8, #0
 80256ee:	f104 0919 	add.w	r9, r4, #25
 80256f2:	e7f4      	b.n	80256de <_printf_float+0x456>

080256f4 <_printf_common>:
 80256f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256f8:	4616      	mov	r6, r2
 80256fa:	4699      	mov	r9, r3
 80256fc:	688a      	ldr	r2, [r1, #8]
 80256fe:	690b      	ldr	r3, [r1, #16]
 8025700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025704:	4293      	cmp	r3, r2
 8025706:	bfb8      	it	lt
 8025708:	4613      	movlt	r3, r2
 802570a:	6033      	str	r3, [r6, #0]
 802570c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025710:	4607      	mov	r7, r0
 8025712:	460c      	mov	r4, r1
 8025714:	b10a      	cbz	r2, 802571a <_printf_common+0x26>
 8025716:	3301      	adds	r3, #1
 8025718:	6033      	str	r3, [r6, #0]
 802571a:	6823      	ldr	r3, [r4, #0]
 802571c:	0699      	lsls	r1, r3, #26
 802571e:	bf42      	ittt	mi
 8025720:	6833      	ldrmi	r3, [r6, #0]
 8025722:	3302      	addmi	r3, #2
 8025724:	6033      	strmi	r3, [r6, #0]
 8025726:	6825      	ldr	r5, [r4, #0]
 8025728:	f015 0506 	ands.w	r5, r5, #6
 802572c:	d106      	bne.n	802573c <_printf_common+0x48>
 802572e:	f104 0a19 	add.w	sl, r4, #25
 8025732:	68e3      	ldr	r3, [r4, #12]
 8025734:	6832      	ldr	r2, [r6, #0]
 8025736:	1a9b      	subs	r3, r3, r2
 8025738:	42ab      	cmp	r3, r5
 802573a:	dc26      	bgt.n	802578a <_printf_common+0x96>
 802573c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025740:	1e13      	subs	r3, r2, #0
 8025742:	6822      	ldr	r2, [r4, #0]
 8025744:	bf18      	it	ne
 8025746:	2301      	movne	r3, #1
 8025748:	0692      	lsls	r2, r2, #26
 802574a:	d42b      	bmi.n	80257a4 <_printf_common+0xb0>
 802574c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025750:	4649      	mov	r1, r9
 8025752:	4638      	mov	r0, r7
 8025754:	47c0      	blx	r8
 8025756:	3001      	adds	r0, #1
 8025758:	d01e      	beq.n	8025798 <_printf_common+0xa4>
 802575a:	6823      	ldr	r3, [r4, #0]
 802575c:	68e5      	ldr	r5, [r4, #12]
 802575e:	6832      	ldr	r2, [r6, #0]
 8025760:	f003 0306 	and.w	r3, r3, #6
 8025764:	2b04      	cmp	r3, #4
 8025766:	bf08      	it	eq
 8025768:	1aad      	subeq	r5, r5, r2
 802576a:	68a3      	ldr	r3, [r4, #8]
 802576c:	6922      	ldr	r2, [r4, #16]
 802576e:	bf0c      	ite	eq
 8025770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025774:	2500      	movne	r5, #0
 8025776:	4293      	cmp	r3, r2
 8025778:	bfc4      	itt	gt
 802577a:	1a9b      	subgt	r3, r3, r2
 802577c:	18ed      	addgt	r5, r5, r3
 802577e:	2600      	movs	r6, #0
 8025780:	341a      	adds	r4, #26
 8025782:	42b5      	cmp	r5, r6
 8025784:	d11a      	bne.n	80257bc <_printf_common+0xc8>
 8025786:	2000      	movs	r0, #0
 8025788:	e008      	b.n	802579c <_printf_common+0xa8>
 802578a:	2301      	movs	r3, #1
 802578c:	4652      	mov	r2, sl
 802578e:	4649      	mov	r1, r9
 8025790:	4638      	mov	r0, r7
 8025792:	47c0      	blx	r8
 8025794:	3001      	adds	r0, #1
 8025796:	d103      	bne.n	80257a0 <_printf_common+0xac>
 8025798:	f04f 30ff 	mov.w	r0, #4294967295
 802579c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80257a0:	3501      	adds	r5, #1
 80257a2:	e7c6      	b.n	8025732 <_printf_common+0x3e>
 80257a4:	18e1      	adds	r1, r4, r3
 80257a6:	1c5a      	adds	r2, r3, #1
 80257a8:	2030      	movs	r0, #48	; 0x30
 80257aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80257ae:	4422      	add	r2, r4
 80257b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80257b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80257b8:	3302      	adds	r3, #2
 80257ba:	e7c7      	b.n	802574c <_printf_common+0x58>
 80257bc:	2301      	movs	r3, #1
 80257be:	4622      	mov	r2, r4
 80257c0:	4649      	mov	r1, r9
 80257c2:	4638      	mov	r0, r7
 80257c4:	47c0      	blx	r8
 80257c6:	3001      	adds	r0, #1
 80257c8:	d0e6      	beq.n	8025798 <_printf_common+0xa4>
 80257ca:	3601      	adds	r6, #1
 80257cc:	e7d9      	b.n	8025782 <_printf_common+0x8e>
	...

080257d0 <_printf_i>:
 80257d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80257d4:	7e0f      	ldrb	r7, [r1, #24]
 80257d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80257d8:	2f78      	cmp	r7, #120	; 0x78
 80257da:	4691      	mov	r9, r2
 80257dc:	4680      	mov	r8, r0
 80257de:	460c      	mov	r4, r1
 80257e0:	469a      	mov	sl, r3
 80257e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80257e6:	d807      	bhi.n	80257f8 <_printf_i+0x28>
 80257e8:	2f62      	cmp	r7, #98	; 0x62
 80257ea:	d80a      	bhi.n	8025802 <_printf_i+0x32>
 80257ec:	2f00      	cmp	r7, #0
 80257ee:	f000 80d8 	beq.w	80259a2 <_printf_i+0x1d2>
 80257f2:	2f58      	cmp	r7, #88	; 0x58
 80257f4:	f000 80a3 	beq.w	802593e <_printf_i+0x16e>
 80257f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80257fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025800:	e03a      	b.n	8025878 <_printf_i+0xa8>
 8025802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025806:	2b15      	cmp	r3, #21
 8025808:	d8f6      	bhi.n	80257f8 <_printf_i+0x28>
 802580a:	a101      	add	r1, pc, #4	; (adr r1, 8025810 <_printf_i+0x40>)
 802580c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025810:	08025869 	.word	0x08025869
 8025814:	0802587d 	.word	0x0802587d
 8025818:	080257f9 	.word	0x080257f9
 802581c:	080257f9 	.word	0x080257f9
 8025820:	080257f9 	.word	0x080257f9
 8025824:	080257f9 	.word	0x080257f9
 8025828:	0802587d 	.word	0x0802587d
 802582c:	080257f9 	.word	0x080257f9
 8025830:	080257f9 	.word	0x080257f9
 8025834:	080257f9 	.word	0x080257f9
 8025838:	080257f9 	.word	0x080257f9
 802583c:	08025989 	.word	0x08025989
 8025840:	080258ad 	.word	0x080258ad
 8025844:	0802596b 	.word	0x0802596b
 8025848:	080257f9 	.word	0x080257f9
 802584c:	080257f9 	.word	0x080257f9
 8025850:	080259ab 	.word	0x080259ab
 8025854:	080257f9 	.word	0x080257f9
 8025858:	080258ad 	.word	0x080258ad
 802585c:	080257f9 	.word	0x080257f9
 8025860:	080257f9 	.word	0x080257f9
 8025864:	08025973 	.word	0x08025973
 8025868:	682b      	ldr	r3, [r5, #0]
 802586a:	1d1a      	adds	r2, r3, #4
 802586c:	681b      	ldr	r3, [r3, #0]
 802586e:	602a      	str	r2, [r5, #0]
 8025870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025878:	2301      	movs	r3, #1
 802587a:	e0a3      	b.n	80259c4 <_printf_i+0x1f4>
 802587c:	6820      	ldr	r0, [r4, #0]
 802587e:	6829      	ldr	r1, [r5, #0]
 8025880:	0606      	lsls	r6, r0, #24
 8025882:	f101 0304 	add.w	r3, r1, #4
 8025886:	d50a      	bpl.n	802589e <_printf_i+0xce>
 8025888:	680e      	ldr	r6, [r1, #0]
 802588a:	602b      	str	r3, [r5, #0]
 802588c:	2e00      	cmp	r6, #0
 802588e:	da03      	bge.n	8025898 <_printf_i+0xc8>
 8025890:	232d      	movs	r3, #45	; 0x2d
 8025892:	4276      	negs	r6, r6
 8025894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025898:	485e      	ldr	r0, [pc, #376]	; (8025a14 <_printf_i+0x244>)
 802589a:	230a      	movs	r3, #10
 802589c:	e019      	b.n	80258d2 <_printf_i+0x102>
 802589e:	680e      	ldr	r6, [r1, #0]
 80258a0:	602b      	str	r3, [r5, #0]
 80258a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80258a6:	bf18      	it	ne
 80258a8:	b236      	sxthne	r6, r6
 80258aa:	e7ef      	b.n	802588c <_printf_i+0xbc>
 80258ac:	682b      	ldr	r3, [r5, #0]
 80258ae:	6820      	ldr	r0, [r4, #0]
 80258b0:	1d19      	adds	r1, r3, #4
 80258b2:	6029      	str	r1, [r5, #0]
 80258b4:	0601      	lsls	r1, r0, #24
 80258b6:	d501      	bpl.n	80258bc <_printf_i+0xec>
 80258b8:	681e      	ldr	r6, [r3, #0]
 80258ba:	e002      	b.n	80258c2 <_printf_i+0xf2>
 80258bc:	0646      	lsls	r6, r0, #25
 80258be:	d5fb      	bpl.n	80258b8 <_printf_i+0xe8>
 80258c0:	881e      	ldrh	r6, [r3, #0]
 80258c2:	4854      	ldr	r0, [pc, #336]	; (8025a14 <_printf_i+0x244>)
 80258c4:	2f6f      	cmp	r7, #111	; 0x6f
 80258c6:	bf0c      	ite	eq
 80258c8:	2308      	moveq	r3, #8
 80258ca:	230a      	movne	r3, #10
 80258cc:	2100      	movs	r1, #0
 80258ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80258d2:	6865      	ldr	r5, [r4, #4]
 80258d4:	60a5      	str	r5, [r4, #8]
 80258d6:	2d00      	cmp	r5, #0
 80258d8:	bfa2      	ittt	ge
 80258da:	6821      	ldrge	r1, [r4, #0]
 80258dc:	f021 0104 	bicge.w	r1, r1, #4
 80258e0:	6021      	strge	r1, [r4, #0]
 80258e2:	b90e      	cbnz	r6, 80258e8 <_printf_i+0x118>
 80258e4:	2d00      	cmp	r5, #0
 80258e6:	d04d      	beq.n	8025984 <_printf_i+0x1b4>
 80258e8:	4615      	mov	r5, r2
 80258ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80258ee:	fb03 6711 	mls	r7, r3, r1, r6
 80258f2:	5dc7      	ldrb	r7, [r0, r7]
 80258f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80258f8:	4637      	mov	r7, r6
 80258fa:	42bb      	cmp	r3, r7
 80258fc:	460e      	mov	r6, r1
 80258fe:	d9f4      	bls.n	80258ea <_printf_i+0x11a>
 8025900:	2b08      	cmp	r3, #8
 8025902:	d10b      	bne.n	802591c <_printf_i+0x14c>
 8025904:	6823      	ldr	r3, [r4, #0]
 8025906:	07de      	lsls	r6, r3, #31
 8025908:	d508      	bpl.n	802591c <_printf_i+0x14c>
 802590a:	6923      	ldr	r3, [r4, #16]
 802590c:	6861      	ldr	r1, [r4, #4]
 802590e:	4299      	cmp	r1, r3
 8025910:	bfde      	ittt	le
 8025912:	2330      	movle	r3, #48	; 0x30
 8025914:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025918:	f105 35ff 	addle.w	r5, r5, #4294967295
 802591c:	1b52      	subs	r2, r2, r5
 802591e:	6122      	str	r2, [r4, #16]
 8025920:	f8cd a000 	str.w	sl, [sp]
 8025924:	464b      	mov	r3, r9
 8025926:	aa03      	add	r2, sp, #12
 8025928:	4621      	mov	r1, r4
 802592a:	4640      	mov	r0, r8
 802592c:	f7ff fee2 	bl	80256f4 <_printf_common>
 8025930:	3001      	adds	r0, #1
 8025932:	d14c      	bne.n	80259ce <_printf_i+0x1fe>
 8025934:	f04f 30ff 	mov.w	r0, #4294967295
 8025938:	b004      	add	sp, #16
 802593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802593e:	4835      	ldr	r0, [pc, #212]	; (8025a14 <_printf_i+0x244>)
 8025940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025944:	6829      	ldr	r1, [r5, #0]
 8025946:	6823      	ldr	r3, [r4, #0]
 8025948:	f851 6b04 	ldr.w	r6, [r1], #4
 802594c:	6029      	str	r1, [r5, #0]
 802594e:	061d      	lsls	r5, r3, #24
 8025950:	d514      	bpl.n	802597c <_printf_i+0x1ac>
 8025952:	07df      	lsls	r7, r3, #31
 8025954:	bf44      	itt	mi
 8025956:	f043 0320 	orrmi.w	r3, r3, #32
 802595a:	6023      	strmi	r3, [r4, #0]
 802595c:	b91e      	cbnz	r6, 8025966 <_printf_i+0x196>
 802595e:	6823      	ldr	r3, [r4, #0]
 8025960:	f023 0320 	bic.w	r3, r3, #32
 8025964:	6023      	str	r3, [r4, #0]
 8025966:	2310      	movs	r3, #16
 8025968:	e7b0      	b.n	80258cc <_printf_i+0xfc>
 802596a:	6823      	ldr	r3, [r4, #0]
 802596c:	f043 0320 	orr.w	r3, r3, #32
 8025970:	6023      	str	r3, [r4, #0]
 8025972:	2378      	movs	r3, #120	; 0x78
 8025974:	4828      	ldr	r0, [pc, #160]	; (8025a18 <_printf_i+0x248>)
 8025976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802597a:	e7e3      	b.n	8025944 <_printf_i+0x174>
 802597c:	0659      	lsls	r1, r3, #25
 802597e:	bf48      	it	mi
 8025980:	b2b6      	uxthmi	r6, r6
 8025982:	e7e6      	b.n	8025952 <_printf_i+0x182>
 8025984:	4615      	mov	r5, r2
 8025986:	e7bb      	b.n	8025900 <_printf_i+0x130>
 8025988:	682b      	ldr	r3, [r5, #0]
 802598a:	6826      	ldr	r6, [r4, #0]
 802598c:	6961      	ldr	r1, [r4, #20]
 802598e:	1d18      	adds	r0, r3, #4
 8025990:	6028      	str	r0, [r5, #0]
 8025992:	0635      	lsls	r5, r6, #24
 8025994:	681b      	ldr	r3, [r3, #0]
 8025996:	d501      	bpl.n	802599c <_printf_i+0x1cc>
 8025998:	6019      	str	r1, [r3, #0]
 802599a:	e002      	b.n	80259a2 <_printf_i+0x1d2>
 802599c:	0670      	lsls	r0, r6, #25
 802599e:	d5fb      	bpl.n	8025998 <_printf_i+0x1c8>
 80259a0:	8019      	strh	r1, [r3, #0]
 80259a2:	2300      	movs	r3, #0
 80259a4:	6123      	str	r3, [r4, #16]
 80259a6:	4615      	mov	r5, r2
 80259a8:	e7ba      	b.n	8025920 <_printf_i+0x150>
 80259aa:	682b      	ldr	r3, [r5, #0]
 80259ac:	1d1a      	adds	r2, r3, #4
 80259ae:	602a      	str	r2, [r5, #0]
 80259b0:	681d      	ldr	r5, [r3, #0]
 80259b2:	6862      	ldr	r2, [r4, #4]
 80259b4:	2100      	movs	r1, #0
 80259b6:	4628      	mov	r0, r5
 80259b8:	f7ea ff7a 	bl	80108b0 <memchr>
 80259bc:	b108      	cbz	r0, 80259c2 <_printf_i+0x1f2>
 80259be:	1b40      	subs	r0, r0, r5
 80259c0:	6060      	str	r0, [r4, #4]
 80259c2:	6863      	ldr	r3, [r4, #4]
 80259c4:	6123      	str	r3, [r4, #16]
 80259c6:	2300      	movs	r3, #0
 80259c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80259cc:	e7a8      	b.n	8025920 <_printf_i+0x150>
 80259ce:	6923      	ldr	r3, [r4, #16]
 80259d0:	462a      	mov	r2, r5
 80259d2:	4649      	mov	r1, r9
 80259d4:	4640      	mov	r0, r8
 80259d6:	47d0      	blx	sl
 80259d8:	3001      	adds	r0, #1
 80259da:	d0ab      	beq.n	8025934 <_printf_i+0x164>
 80259dc:	6823      	ldr	r3, [r4, #0]
 80259de:	079b      	lsls	r3, r3, #30
 80259e0:	d413      	bmi.n	8025a0a <_printf_i+0x23a>
 80259e2:	68e0      	ldr	r0, [r4, #12]
 80259e4:	9b03      	ldr	r3, [sp, #12]
 80259e6:	4298      	cmp	r0, r3
 80259e8:	bfb8      	it	lt
 80259ea:	4618      	movlt	r0, r3
 80259ec:	e7a4      	b.n	8025938 <_printf_i+0x168>
 80259ee:	2301      	movs	r3, #1
 80259f0:	4632      	mov	r2, r6
 80259f2:	4649      	mov	r1, r9
 80259f4:	4640      	mov	r0, r8
 80259f6:	47d0      	blx	sl
 80259f8:	3001      	adds	r0, #1
 80259fa:	d09b      	beq.n	8025934 <_printf_i+0x164>
 80259fc:	3501      	adds	r5, #1
 80259fe:	68e3      	ldr	r3, [r4, #12]
 8025a00:	9903      	ldr	r1, [sp, #12]
 8025a02:	1a5b      	subs	r3, r3, r1
 8025a04:	42ab      	cmp	r3, r5
 8025a06:	dcf2      	bgt.n	80259ee <_printf_i+0x21e>
 8025a08:	e7eb      	b.n	80259e2 <_printf_i+0x212>
 8025a0a:	2500      	movs	r5, #0
 8025a0c:	f104 0619 	add.w	r6, r4, #25
 8025a10:	e7f5      	b.n	80259fe <_printf_i+0x22e>
 8025a12:	bf00      	nop
 8025a14:	08037ac2 	.word	0x08037ac2
 8025a18:	08037ad3 	.word	0x08037ad3

08025a1c <_sbrk_r>:
 8025a1c:	b538      	push	{r3, r4, r5, lr}
 8025a1e:	4d06      	ldr	r5, [pc, #24]	; (8025a38 <_sbrk_r+0x1c>)
 8025a20:	2300      	movs	r3, #0
 8025a22:	4604      	mov	r4, r0
 8025a24:	4608      	mov	r0, r1
 8025a26:	602b      	str	r3, [r5, #0]
 8025a28:	f7ed f982 	bl	8012d30 <_sbrk>
 8025a2c:	1c43      	adds	r3, r0, #1
 8025a2e:	d102      	bne.n	8025a36 <_sbrk_r+0x1a>
 8025a30:	682b      	ldr	r3, [r5, #0]
 8025a32:	b103      	cbz	r3, 8025a36 <_sbrk_r+0x1a>
 8025a34:	6023      	str	r3, [r4, #0]
 8025a36:	bd38      	pop	{r3, r4, r5, pc}
 8025a38:	2000b370 	.word	0x2000b370

08025a3c <strcpy>:
 8025a3c:	4603      	mov	r3, r0
 8025a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025a42:	f803 2b01 	strb.w	r2, [r3], #1
 8025a46:	2a00      	cmp	r2, #0
 8025a48:	d1f9      	bne.n	8025a3e <strcpy+0x2>
 8025a4a:	4770      	bx	lr

08025a4c <sulp>:
 8025a4c:	b570      	push	{r4, r5, r6, lr}
 8025a4e:	4604      	mov	r4, r0
 8025a50:	460d      	mov	r5, r1
 8025a52:	ec45 4b10 	vmov	d0, r4, r5
 8025a56:	4616      	mov	r6, r2
 8025a58:	f002 ff8a 	bl	8028970 <__ulp>
 8025a5c:	ec51 0b10 	vmov	r0, r1, d0
 8025a60:	b17e      	cbz	r6, 8025a82 <sulp+0x36>
 8025a62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8025a66:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8025a6a:	2b00      	cmp	r3, #0
 8025a6c:	dd09      	ble.n	8025a82 <sulp+0x36>
 8025a6e:	051b      	lsls	r3, r3, #20
 8025a70:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8025a74:	2400      	movs	r4, #0
 8025a76:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8025a7a:	4622      	mov	r2, r4
 8025a7c:	462b      	mov	r3, r5
 8025a7e:	f7eb f923 	bl	8010cc8 <__aeabi_dmul>
 8025a82:	bd70      	pop	{r4, r5, r6, pc}
 8025a84:	0000      	movs	r0, r0
	...

08025a88 <_strtod_l>:
 8025a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025a8c:	ed2d 8b02 	vpush	{d8}
 8025a90:	b09d      	sub	sp, #116	; 0x74
 8025a92:	461f      	mov	r7, r3
 8025a94:	2300      	movs	r3, #0
 8025a96:	9318      	str	r3, [sp, #96]	; 0x60
 8025a98:	4ba2      	ldr	r3, [pc, #648]	; (8025d24 <_strtod_l+0x29c>)
 8025a9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8025a9c:	681b      	ldr	r3, [r3, #0]
 8025a9e:	9305      	str	r3, [sp, #20]
 8025aa0:	4604      	mov	r4, r0
 8025aa2:	4618      	mov	r0, r3
 8025aa4:	4688      	mov	r8, r1
 8025aa6:	f7ea fef5 	bl	8010894 <strlen>
 8025aaa:	f04f 0a00 	mov.w	sl, #0
 8025aae:	4605      	mov	r5, r0
 8025ab0:	f04f 0b00 	mov.w	fp, #0
 8025ab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025aba:	781a      	ldrb	r2, [r3, #0]
 8025abc:	2a2b      	cmp	r2, #43	; 0x2b
 8025abe:	d04e      	beq.n	8025b5e <_strtod_l+0xd6>
 8025ac0:	d83b      	bhi.n	8025b3a <_strtod_l+0xb2>
 8025ac2:	2a0d      	cmp	r2, #13
 8025ac4:	d834      	bhi.n	8025b30 <_strtod_l+0xa8>
 8025ac6:	2a08      	cmp	r2, #8
 8025ac8:	d834      	bhi.n	8025b34 <_strtod_l+0xac>
 8025aca:	2a00      	cmp	r2, #0
 8025acc:	d03e      	beq.n	8025b4c <_strtod_l+0xc4>
 8025ace:	2300      	movs	r3, #0
 8025ad0:	930a      	str	r3, [sp, #40]	; 0x28
 8025ad2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8025ad4:	7833      	ldrb	r3, [r6, #0]
 8025ad6:	2b30      	cmp	r3, #48	; 0x30
 8025ad8:	f040 80b0 	bne.w	8025c3c <_strtod_l+0x1b4>
 8025adc:	7873      	ldrb	r3, [r6, #1]
 8025ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8025ae2:	2b58      	cmp	r3, #88	; 0x58
 8025ae4:	d168      	bne.n	8025bb8 <_strtod_l+0x130>
 8025ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ae8:	9301      	str	r3, [sp, #4]
 8025aea:	ab18      	add	r3, sp, #96	; 0x60
 8025aec:	9702      	str	r7, [sp, #8]
 8025aee:	9300      	str	r3, [sp, #0]
 8025af0:	4a8d      	ldr	r2, [pc, #564]	; (8025d28 <_strtod_l+0x2a0>)
 8025af2:	ab19      	add	r3, sp, #100	; 0x64
 8025af4:	a917      	add	r1, sp, #92	; 0x5c
 8025af6:	4620      	mov	r0, r4
 8025af8:	f002 f836 	bl	8027b68 <__gethex>
 8025afc:	f010 0707 	ands.w	r7, r0, #7
 8025b00:	4605      	mov	r5, r0
 8025b02:	d005      	beq.n	8025b10 <_strtod_l+0x88>
 8025b04:	2f06      	cmp	r7, #6
 8025b06:	d12c      	bne.n	8025b62 <_strtod_l+0xda>
 8025b08:	3601      	adds	r6, #1
 8025b0a:	2300      	movs	r3, #0
 8025b0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8025b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8025b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b12:	2b00      	cmp	r3, #0
 8025b14:	f040 8590 	bne.w	8026638 <_strtod_l+0xbb0>
 8025b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b1a:	b1eb      	cbz	r3, 8025b58 <_strtod_l+0xd0>
 8025b1c:	4652      	mov	r2, sl
 8025b1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8025b22:	ec43 2b10 	vmov	d0, r2, r3
 8025b26:	b01d      	add	sp, #116	; 0x74
 8025b28:	ecbd 8b02 	vpop	{d8}
 8025b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b30:	2a20      	cmp	r2, #32
 8025b32:	d1cc      	bne.n	8025ace <_strtod_l+0x46>
 8025b34:	3301      	adds	r3, #1
 8025b36:	9317      	str	r3, [sp, #92]	; 0x5c
 8025b38:	e7be      	b.n	8025ab8 <_strtod_l+0x30>
 8025b3a:	2a2d      	cmp	r2, #45	; 0x2d
 8025b3c:	d1c7      	bne.n	8025ace <_strtod_l+0x46>
 8025b3e:	2201      	movs	r2, #1
 8025b40:	920a      	str	r2, [sp, #40]	; 0x28
 8025b42:	1c5a      	adds	r2, r3, #1
 8025b44:	9217      	str	r2, [sp, #92]	; 0x5c
 8025b46:	785b      	ldrb	r3, [r3, #1]
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	d1c2      	bne.n	8025ad2 <_strtod_l+0x4a>
 8025b4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	f040 856e 	bne.w	8026634 <_strtod_l+0xbac>
 8025b58:	4652      	mov	r2, sl
 8025b5a:	465b      	mov	r3, fp
 8025b5c:	e7e1      	b.n	8025b22 <_strtod_l+0x9a>
 8025b5e:	2200      	movs	r2, #0
 8025b60:	e7ee      	b.n	8025b40 <_strtod_l+0xb8>
 8025b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025b64:	b13a      	cbz	r2, 8025b76 <_strtod_l+0xee>
 8025b66:	2135      	movs	r1, #53	; 0x35
 8025b68:	a81a      	add	r0, sp, #104	; 0x68
 8025b6a:	f003 f80c 	bl	8028b86 <__copybits>
 8025b6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025b70:	4620      	mov	r0, r4
 8025b72:	f002 fbcb 	bl	802830c <_Bfree>
 8025b76:	3f01      	subs	r7, #1
 8025b78:	2f04      	cmp	r7, #4
 8025b7a:	d806      	bhi.n	8025b8a <_strtod_l+0x102>
 8025b7c:	e8df f007 	tbb	[pc, r7]
 8025b80:	1714030a 	.word	0x1714030a
 8025b84:	0a          	.byte	0x0a
 8025b85:	00          	.byte	0x00
 8025b86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8025b8a:	0728      	lsls	r0, r5, #28
 8025b8c:	d5c0      	bpl.n	8025b10 <_strtod_l+0x88>
 8025b8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8025b92:	e7bd      	b.n	8025b10 <_strtod_l+0x88>
 8025b94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8025b98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025b9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8025b9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8025ba2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025ba6:	e7f0      	b.n	8025b8a <_strtod_l+0x102>
 8025ba8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8025d2c <_strtod_l+0x2a4>
 8025bac:	e7ed      	b.n	8025b8a <_strtod_l+0x102>
 8025bae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8025bb2:	f04f 3aff 	mov.w	sl, #4294967295
 8025bb6:	e7e8      	b.n	8025b8a <_strtod_l+0x102>
 8025bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025bba:	1c5a      	adds	r2, r3, #1
 8025bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8025bbe:	785b      	ldrb	r3, [r3, #1]
 8025bc0:	2b30      	cmp	r3, #48	; 0x30
 8025bc2:	d0f9      	beq.n	8025bb8 <_strtod_l+0x130>
 8025bc4:	2b00      	cmp	r3, #0
 8025bc6:	d0a3      	beq.n	8025b10 <_strtod_l+0x88>
 8025bc8:	2301      	movs	r3, #1
 8025bca:	f04f 0900 	mov.w	r9, #0
 8025bce:	9304      	str	r3, [sp, #16]
 8025bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025bd2:	9308      	str	r3, [sp, #32]
 8025bd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8025bd8:	464f      	mov	r7, r9
 8025bda:	220a      	movs	r2, #10
 8025bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8025bde:	7806      	ldrb	r6, [r0, #0]
 8025be0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8025be4:	b2d9      	uxtb	r1, r3
 8025be6:	2909      	cmp	r1, #9
 8025be8:	d92a      	bls.n	8025c40 <_strtod_l+0x1b8>
 8025bea:	9905      	ldr	r1, [sp, #20]
 8025bec:	462a      	mov	r2, r5
 8025bee:	f003 f9d0 	bl	8028f92 <strncmp>
 8025bf2:	b398      	cbz	r0, 8025c5c <_strtod_l+0x1d4>
 8025bf4:	2000      	movs	r0, #0
 8025bf6:	4632      	mov	r2, r6
 8025bf8:	463d      	mov	r5, r7
 8025bfa:	9005      	str	r0, [sp, #20]
 8025bfc:	4603      	mov	r3, r0
 8025bfe:	2a65      	cmp	r2, #101	; 0x65
 8025c00:	d001      	beq.n	8025c06 <_strtod_l+0x17e>
 8025c02:	2a45      	cmp	r2, #69	; 0x45
 8025c04:	d118      	bne.n	8025c38 <_strtod_l+0x1b0>
 8025c06:	b91d      	cbnz	r5, 8025c10 <_strtod_l+0x188>
 8025c08:	9a04      	ldr	r2, [sp, #16]
 8025c0a:	4302      	orrs	r2, r0
 8025c0c:	d09e      	beq.n	8025b4c <_strtod_l+0xc4>
 8025c0e:	2500      	movs	r5, #0
 8025c10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8025c14:	f108 0201 	add.w	r2, r8, #1
 8025c18:	9217      	str	r2, [sp, #92]	; 0x5c
 8025c1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025c1e:	2a2b      	cmp	r2, #43	; 0x2b
 8025c20:	d075      	beq.n	8025d0e <_strtod_l+0x286>
 8025c22:	2a2d      	cmp	r2, #45	; 0x2d
 8025c24:	d07b      	beq.n	8025d1e <_strtod_l+0x296>
 8025c26:	f04f 0c00 	mov.w	ip, #0
 8025c2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8025c2e:	2909      	cmp	r1, #9
 8025c30:	f240 8082 	bls.w	8025d38 <_strtod_l+0x2b0>
 8025c34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025c38:	2600      	movs	r6, #0
 8025c3a:	e09d      	b.n	8025d78 <_strtod_l+0x2f0>
 8025c3c:	2300      	movs	r3, #0
 8025c3e:	e7c4      	b.n	8025bca <_strtod_l+0x142>
 8025c40:	2f08      	cmp	r7, #8
 8025c42:	bfd8      	it	le
 8025c44:	9907      	ldrle	r1, [sp, #28]
 8025c46:	f100 0001 	add.w	r0, r0, #1
 8025c4a:	bfda      	itte	le
 8025c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8025c50:	9307      	strle	r3, [sp, #28]
 8025c52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8025c56:	3701      	adds	r7, #1
 8025c58:	9017      	str	r0, [sp, #92]	; 0x5c
 8025c5a:	e7bf      	b.n	8025bdc <_strtod_l+0x154>
 8025c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c5e:	195a      	adds	r2, r3, r5
 8025c60:	9217      	str	r2, [sp, #92]	; 0x5c
 8025c62:	5d5a      	ldrb	r2, [r3, r5]
 8025c64:	2f00      	cmp	r7, #0
 8025c66:	d037      	beq.n	8025cd8 <_strtod_l+0x250>
 8025c68:	9005      	str	r0, [sp, #20]
 8025c6a:	463d      	mov	r5, r7
 8025c6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8025c70:	2b09      	cmp	r3, #9
 8025c72:	d912      	bls.n	8025c9a <_strtod_l+0x212>
 8025c74:	2301      	movs	r3, #1
 8025c76:	e7c2      	b.n	8025bfe <_strtod_l+0x176>
 8025c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c7a:	1c5a      	adds	r2, r3, #1
 8025c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8025c7e:	785a      	ldrb	r2, [r3, #1]
 8025c80:	3001      	adds	r0, #1
 8025c82:	2a30      	cmp	r2, #48	; 0x30
 8025c84:	d0f8      	beq.n	8025c78 <_strtod_l+0x1f0>
 8025c86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8025c8a:	2b08      	cmp	r3, #8
 8025c8c:	f200 84d9 	bhi.w	8026642 <_strtod_l+0xbba>
 8025c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025c92:	9005      	str	r0, [sp, #20]
 8025c94:	2000      	movs	r0, #0
 8025c96:	9308      	str	r3, [sp, #32]
 8025c98:	4605      	mov	r5, r0
 8025c9a:	3a30      	subs	r2, #48	; 0x30
 8025c9c:	f100 0301 	add.w	r3, r0, #1
 8025ca0:	d014      	beq.n	8025ccc <_strtod_l+0x244>
 8025ca2:	9905      	ldr	r1, [sp, #20]
 8025ca4:	4419      	add	r1, r3
 8025ca6:	9105      	str	r1, [sp, #20]
 8025ca8:	462b      	mov	r3, r5
 8025caa:	eb00 0e05 	add.w	lr, r0, r5
 8025cae:	210a      	movs	r1, #10
 8025cb0:	4573      	cmp	r3, lr
 8025cb2:	d113      	bne.n	8025cdc <_strtod_l+0x254>
 8025cb4:	182b      	adds	r3, r5, r0
 8025cb6:	2b08      	cmp	r3, #8
 8025cb8:	f105 0501 	add.w	r5, r5, #1
 8025cbc:	4405      	add	r5, r0
 8025cbe:	dc1c      	bgt.n	8025cfa <_strtod_l+0x272>
 8025cc0:	9907      	ldr	r1, [sp, #28]
 8025cc2:	230a      	movs	r3, #10
 8025cc4:	fb03 2301 	mla	r3, r3, r1, r2
 8025cc8:	9307      	str	r3, [sp, #28]
 8025cca:	2300      	movs	r3, #0
 8025ccc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025cce:	1c51      	adds	r1, r2, #1
 8025cd0:	9117      	str	r1, [sp, #92]	; 0x5c
 8025cd2:	7852      	ldrb	r2, [r2, #1]
 8025cd4:	4618      	mov	r0, r3
 8025cd6:	e7c9      	b.n	8025c6c <_strtod_l+0x1e4>
 8025cd8:	4638      	mov	r0, r7
 8025cda:	e7d2      	b.n	8025c82 <_strtod_l+0x1fa>
 8025cdc:	2b08      	cmp	r3, #8
 8025cde:	dc04      	bgt.n	8025cea <_strtod_l+0x262>
 8025ce0:	9e07      	ldr	r6, [sp, #28]
 8025ce2:	434e      	muls	r6, r1
 8025ce4:	9607      	str	r6, [sp, #28]
 8025ce6:	3301      	adds	r3, #1
 8025ce8:	e7e2      	b.n	8025cb0 <_strtod_l+0x228>
 8025cea:	f103 0c01 	add.w	ip, r3, #1
 8025cee:	f1bc 0f10 	cmp.w	ip, #16
 8025cf2:	bfd8      	it	le
 8025cf4:	fb01 f909 	mulle.w	r9, r1, r9
 8025cf8:	e7f5      	b.n	8025ce6 <_strtod_l+0x25e>
 8025cfa:	2d10      	cmp	r5, #16
 8025cfc:	bfdc      	itt	le
 8025cfe:	230a      	movle	r3, #10
 8025d00:	fb03 2909 	mlale	r9, r3, r9, r2
 8025d04:	e7e1      	b.n	8025cca <_strtod_l+0x242>
 8025d06:	2300      	movs	r3, #0
 8025d08:	9305      	str	r3, [sp, #20]
 8025d0a:	2301      	movs	r3, #1
 8025d0c:	e77c      	b.n	8025c08 <_strtod_l+0x180>
 8025d0e:	f04f 0c00 	mov.w	ip, #0
 8025d12:	f108 0202 	add.w	r2, r8, #2
 8025d16:	9217      	str	r2, [sp, #92]	; 0x5c
 8025d18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025d1c:	e785      	b.n	8025c2a <_strtod_l+0x1a2>
 8025d1e:	f04f 0c01 	mov.w	ip, #1
 8025d22:	e7f6      	b.n	8025d12 <_strtod_l+0x28a>
 8025d24:	08037d94 	.word	0x08037d94
 8025d28:	08037ae4 	.word	0x08037ae4
 8025d2c:	7ff00000 	.word	0x7ff00000
 8025d30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025d32:	1c51      	adds	r1, r2, #1
 8025d34:	9117      	str	r1, [sp, #92]	; 0x5c
 8025d36:	7852      	ldrb	r2, [r2, #1]
 8025d38:	2a30      	cmp	r2, #48	; 0x30
 8025d3a:	d0f9      	beq.n	8025d30 <_strtod_l+0x2a8>
 8025d3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8025d40:	2908      	cmp	r1, #8
 8025d42:	f63f af79 	bhi.w	8025c38 <_strtod_l+0x1b0>
 8025d46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8025d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025d4c:	9206      	str	r2, [sp, #24]
 8025d4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025d50:	1c51      	adds	r1, r2, #1
 8025d52:	9117      	str	r1, [sp, #92]	; 0x5c
 8025d54:	7852      	ldrb	r2, [r2, #1]
 8025d56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8025d5a:	2e09      	cmp	r6, #9
 8025d5c:	d937      	bls.n	8025dce <_strtod_l+0x346>
 8025d5e:	9e06      	ldr	r6, [sp, #24]
 8025d60:	1b89      	subs	r1, r1, r6
 8025d62:	2908      	cmp	r1, #8
 8025d64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8025d68:	dc02      	bgt.n	8025d70 <_strtod_l+0x2e8>
 8025d6a:	4576      	cmp	r6, lr
 8025d6c:	bfa8      	it	ge
 8025d6e:	4676      	movge	r6, lr
 8025d70:	f1bc 0f00 	cmp.w	ip, #0
 8025d74:	d000      	beq.n	8025d78 <_strtod_l+0x2f0>
 8025d76:	4276      	negs	r6, r6
 8025d78:	2d00      	cmp	r5, #0
 8025d7a:	d14d      	bne.n	8025e18 <_strtod_l+0x390>
 8025d7c:	9904      	ldr	r1, [sp, #16]
 8025d7e:	4301      	orrs	r1, r0
 8025d80:	f47f aec6 	bne.w	8025b10 <_strtod_l+0x88>
 8025d84:	2b00      	cmp	r3, #0
 8025d86:	f47f aee1 	bne.w	8025b4c <_strtod_l+0xc4>
 8025d8a:	2a69      	cmp	r2, #105	; 0x69
 8025d8c:	d027      	beq.n	8025dde <_strtod_l+0x356>
 8025d8e:	dc24      	bgt.n	8025dda <_strtod_l+0x352>
 8025d90:	2a49      	cmp	r2, #73	; 0x49
 8025d92:	d024      	beq.n	8025dde <_strtod_l+0x356>
 8025d94:	2a4e      	cmp	r2, #78	; 0x4e
 8025d96:	f47f aed9 	bne.w	8025b4c <_strtod_l+0xc4>
 8025d9a:	499f      	ldr	r1, [pc, #636]	; (8026018 <_strtod_l+0x590>)
 8025d9c:	a817      	add	r0, sp, #92	; 0x5c
 8025d9e:	f002 f93b 	bl	8028018 <__match>
 8025da2:	2800      	cmp	r0, #0
 8025da4:	f43f aed2 	beq.w	8025b4c <_strtod_l+0xc4>
 8025da8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025daa:	781b      	ldrb	r3, [r3, #0]
 8025dac:	2b28      	cmp	r3, #40	; 0x28
 8025dae:	d12d      	bne.n	8025e0c <_strtod_l+0x384>
 8025db0:	499a      	ldr	r1, [pc, #616]	; (802601c <_strtod_l+0x594>)
 8025db2:	aa1a      	add	r2, sp, #104	; 0x68
 8025db4:	a817      	add	r0, sp, #92	; 0x5c
 8025db6:	f002 f943 	bl	8028040 <__hexnan>
 8025dba:	2805      	cmp	r0, #5
 8025dbc:	d126      	bne.n	8025e0c <_strtod_l+0x384>
 8025dbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025dc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8025dc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8025dc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8025dcc:	e6a0      	b.n	8025b10 <_strtod_l+0x88>
 8025dce:	210a      	movs	r1, #10
 8025dd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8025dd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8025dd8:	e7b9      	b.n	8025d4e <_strtod_l+0x2c6>
 8025dda:	2a6e      	cmp	r2, #110	; 0x6e
 8025ddc:	e7db      	b.n	8025d96 <_strtod_l+0x30e>
 8025dde:	4990      	ldr	r1, [pc, #576]	; (8026020 <_strtod_l+0x598>)
 8025de0:	a817      	add	r0, sp, #92	; 0x5c
 8025de2:	f002 f919 	bl	8028018 <__match>
 8025de6:	2800      	cmp	r0, #0
 8025de8:	f43f aeb0 	beq.w	8025b4c <_strtod_l+0xc4>
 8025dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025dee:	498d      	ldr	r1, [pc, #564]	; (8026024 <_strtod_l+0x59c>)
 8025df0:	3b01      	subs	r3, #1
 8025df2:	a817      	add	r0, sp, #92	; 0x5c
 8025df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8025df6:	f002 f90f 	bl	8028018 <__match>
 8025dfa:	b910      	cbnz	r0, 8025e02 <_strtod_l+0x37a>
 8025dfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025dfe:	3301      	adds	r3, #1
 8025e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8025e02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8026034 <_strtod_l+0x5ac>
 8025e06:	f04f 0a00 	mov.w	sl, #0
 8025e0a:	e681      	b.n	8025b10 <_strtod_l+0x88>
 8025e0c:	4886      	ldr	r0, [pc, #536]	; (8026028 <_strtod_l+0x5a0>)
 8025e0e:	f003 f86f 	bl	8028ef0 <nan>
 8025e12:	ec5b ab10 	vmov	sl, fp, d0
 8025e16:	e67b      	b.n	8025b10 <_strtod_l+0x88>
 8025e18:	9b05      	ldr	r3, [sp, #20]
 8025e1a:	9807      	ldr	r0, [sp, #28]
 8025e1c:	1af3      	subs	r3, r6, r3
 8025e1e:	2f00      	cmp	r7, #0
 8025e20:	bf08      	it	eq
 8025e22:	462f      	moveq	r7, r5
 8025e24:	2d10      	cmp	r5, #16
 8025e26:	9306      	str	r3, [sp, #24]
 8025e28:	46a8      	mov	r8, r5
 8025e2a:	bfa8      	it	ge
 8025e2c:	f04f 0810 	movge.w	r8, #16
 8025e30:	f7ea fed0 	bl	8010bd4 <__aeabi_ui2d>
 8025e34:	2d09      	cmp	r5, #9
 8025e36:	4682      	mov	sl, r0
 8025e38:	468b      	mov	fp, r1
 8025e3a:	dd13      	ble.n	8025e64 <_strtod_l+0x3dc>
 8025e3c:	4b7b      	ldr	r3, [pc, #492]	; (802602c <_strtod_l+0x5a4>)
 8025e3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025e42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8025e46:	f7ea ff3f 	bl	8010cc8 <__aeabi_dmul>
 8025e4a:	4682      	mov	sl, r0
 8025e4c:	4648      	mov	r0, r9
 8025e4e:	468b      	mov	fp, r1
 8025e50:	f7ea fec0 	bl	8010bd4 <__aeabi_ui2d>
 8025e54:	4602      	mov	r2, r0
 8025e56:	460b      	mov	r3, r1
 8025e58:	4650      	mov	r0, sl
 8025e5a:	4659      	mov	r1, fp
 8025e5c:	f7ea fd7e 	bl	801095c <__adddf3>
 8025e60:	4682      	mov	sl, r0
 8025e62:	468b      	mov	fp, r1
 8025e64:	2d0f      	cmp	r5, #15
 8025e66:	dc38      	bgt.n	8025eda <_strtod_l+0x452>
 8025e68:	9b06      	ldr	r3, [sp, #24]
 8025e6a:	2b00      	cmp	r3, #0
 8025e6c:	f43f ae50 	beq.w	8025b10 <_strtod_l+0x88>
 8025e70:	dd24      	ble.n	8025ebc <_strtod_l+0x434>
 8025e72:	2b16      	cmp	r3, #22
 8025e74:	dc0b      	bgt.n	8025e8e <_strtod_l+0x406>
 8025e76:	496d      	ldr	r1, [pc, #436]	; (802602c <_strtod_l+0x5a4>)
 8025e78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025e80:	4652      	mov	r2, sl
 8025e82:	465b      	mov	r3, fp
 8025e84:	f7ea ff20 	bl	8010cc8 <__aeabi_dmul>
 8025e88:	4682      	mov	sl, r0
 8025e8a:	468b      	mov	fp, r1
 8025e8c:	e640      	b.n	8025b10 <_strtod_l+0x88>
 8025e8e:	9a06      	ldr	r2, [sp, #24]
 8025e90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8025e94:	4293      	cmp	r3, r2
 8025e96:	db20      	blt.n	8025eda <_strtod_l+0x452>
 8025e98:	4c64      	ldr	r4, [pc, #400]	; (802602c <_strtod_l+0x5a4>)
 8025e9a:	f1c5 050f 	rsb	r5, r5, #15
 8025e9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8025ea2:	4652      	mov	r2, sl
 8025ea4:	465b      	mov	r3, fp
 8025ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025eaa:	f7ea ff0d 	bl	8010cc8 <__aeabi_dmul>
 8025eae:	9b06      	ldr	r3, [sp, #24]
 8025eb0:	1b5d      	subs	r5, r3, r5
 8025eb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8025eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8025eba:	e7e3      	b.n	8025e84 <_strtod_l+0x3fc>
 8025ebc:	9b06      	ldr	r3, [sp, #24]
 8025ebe:	3316      	adds	r3, #22
 8025ec0:	db0b      	blt.n	8025eda <_strtod_l+0x452>
 8025ec2:	9b05      	ldr	r3, [sp, #20]
 8025ec4:	1b9e      	subs	r6, r3, r6
 8025ec6:	4b59      	ldr	r3, [pc, #356]	; (802602c <_strtod_l+0x5a4>)
 8025ec8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8025ecc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025ed0:	4650      	mov	r0, sl
 8025ed2:	4659      	mov	r1, fp
 8025ed4:	f7eb f822 	bl	8010f1c <__aeabi_ddiv>
 8025ed8:	e7d6      	b.n	8025e88 <_strtod_l+0x400>
 8025eda:	9b06      	ldr	r3, [sp, #24]
 8025edc:	eba5 0808 	sub.w	r8, r5, r8
 8025ee0:	4498      	add	r8, r3
 8025ee2:	f1b8 0f00 	cmp.w	r8, #0
 8025ee6:	dd74      	ble.n	8025fd2 <_strtod_l+0x54a>
 8025ee8:	f018 030f 	ands.w	r3, r8, #15
 8025eec:	d00a      	beq.n	8025f04 <_strtod_l+0x47c>
 8025eee:	494f      	ldr	r1, [pc, #316]	; (802602c <_strtod_l+0x5a4>)
 8025ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025ef4:	4652      	mov	r2, sl
 8025ef6:	465b      	mov	r3, fp
 8025ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025efc:	f7ea fee4 	bl	8010cc8 <__aeabi_dmul>
 8025f00:	4682      	mov	sl, r0
 8025f02:	468b      	mov	fp, r1
 8025f04:	f038 080f 	bics.w	r8, r8, #15
 8025f08:	d04f      	beq.n	8025faa <_strtod_l+0x522>
 8025f0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8025f0e:	dd22      	ble.n	8025f56 <_strtod_l+0x4ce>
 8025f10:	2500      	movs	r5, #0
 8025f12:	462e      	mov	r6, r5
 8025f14:	9507      	str	r5, [sp, #28]
 8025f16:	9505      	str	r5, [sp, #20]
 8025f18:	2322      	movs	r3, #34	; 0x22
 8025f1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8026034 <_strtod_l+0x5ac>
 8025f1e:	6023      	str	r3, [r4, #0]
 8025f20:	f04f 0a00 	mov.w	sl, #0
 8025f24:	9b07      	ldr	r3, [sp, #28]
 8025f26:	2b00      	cmp	r3, #0
 8025f28:	f43f adf2 	beq.w	8025b10 <_strtod_l+0x88>
 8025f2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025f2e:	4620      	mov	r0, r4
 8025f30:	f002 f9ec 	bl	802830c <_Bfree>
 8025f34:	9905      	ldr	r1, [sp, #20]
 8025f36:	4620      	mov	r0, r4
 8025f38:	f002 f9e8 	bl	802830c <_Bfree>
 8025f3c:	4631      	mov	r1, r6
 8025f3e:	4620      	mov	r0, r4
 8025f40:	f002 f9e4 	bl	802830c <_Bfree>
 8025f44:	9907      	ldr	r1, [sp, #28]
 8025f46:	4620      	mov	r0, r4
 8025f48:	f002 f9e0 	bl	802830c <_Bfree>
 8025f4c:	4629      	mov	r1, r5
 8025f4e:	4620      	mov	r0, r4
 8025f50:	f002 f9dc 	bl	802830c <_Bfree>
 8025f54:	e5dc      	b.n	8025b10 <_strtod_l+0x88>
 8025f56:	4b36      	ldr	r3, [pc, #216]	; (8026030 <_strtod_l+0x5a8>)
 8025f58:	9304      	str	r3, [sp, #16]
 8025f5a:	2300      	movs	r3, #0
 8025f5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8025f60:	4650      	mov	r0, sl
 8025f62:	4659      	mov	r1, fp
 8025f64:	4699      	mov	r9, r3
 8025f66:	f1b8 0f01 	cmp.w	r8, #1
 8025f6a:	dc21      	bgt.n	8025fb0 <_strtod_l+0x528>
 8025f6c:	b10b      	cbz	r3, 8025f72 <_strtod_l+0x4ea>
 8025f6e:	4682      	mov	sl, r0
 8025f70:	468b      	mov	fp, r1
 8025f72:	4b2f      	ldr	r3, [pc, #188]	; (8026030 <_strtod_l+0x5a8>)
 8025f74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8025f78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8025f7c:	4652      	mov	r2, sl
 8025f7e:	465b      	mov	r3, fp
 8025f80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8025f84:	f7ea fea0 	bl	8010cc8 <__aeabi_dmul>
 8025f88:	4b2a      	ldr	r3, [pc, #168]	; (8026034 <_strtod_l+0x5ac>)
 8025f8a:	460a      	mov	r2, r1
 8025f8c:	400b      	ands	r3, r1
 8025f8e:	492a      	ldr	r1, [pc, #168]	; (8026038 <_strtod_l+0x5b0>)
 8025f90:	428b      	cmp	r3, r1
 8025f92:	4682      	mov	sl, r0
 8025f94:	d8bc      	bhi.n	8025f10 <_strtod_l+0x488>
 8025f96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8025f9a:	428b      	cmp	r3, r1
 8025f9c:	bf86      	itte	hi
 8025f9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 802603c <_strtod_l+0x5b4>
 8025fa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8025fa6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8025faa:	2300      	movs	r3, #0
 8025fac:	9304      	str	r3, [sp, #16]
 8025fae:	e084      	b.n	80260ba <_strtod_l+0x632>
 8025fb0:	f018 0f01 	tst.w	r8, #1
 8025fb4:	d005      	beq.n	8025fc2 <_strtod_l+0x53a>
 8025fb6:	9b04      	ldr	r3, [sp, #16]
 8025fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fbc:	f7ea fe84 	bl	8010cc8 <__aeabi_dmul>
 8025fc0:	2301      	movs	r3, #1
 8025fc2:	9a04      	ldr	r2, [sp, #16]
 8025fc4:	3208      	adds	r2, #8
 8025fc6:	f109 0901 	add.w	r9, r9, #1
 8025fca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8025fce:	9204      	str	r2, [sp, #16]
 8025fd0:	e7c9      	b.n	8025f66 <_strtod_l+0x4de>
 8025fd2:	d0ea      	beq.n	8025faa <_strtod_l+0x522>
 8025fd4:	f1c8 0800 	rsb	r8, r8, #0
 8025fd8:	f018 020f 	ands.w	r2, r8, #15
 8025fdc:	d00a      	beq.n	8025ff4 <_strtod_l+0x56c>
 8025fde:	4b13      	ldr	r3, [pc, #76]	; (802602c <_strtod_l+0x5a4>)
 8025fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025fe4:	4650      	mov	r0, sl
 8025fe6:	4659      	mov	r1, fp
 8025fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fec:	f7ea ff96 	bl	8010f1c <__aeabi_ddiv>
 8025ff0:	4682      	mov	sl, r0
 8025ff2:	468b      	mov	fp, r1
 8025ff4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8025ff8:	d0d7      	beq.n	8025faa <_strtod_l+0x522>
 8025ffa:	f1b8 0f1f 	cmp.w	r8, #31
 8025ffe:	dd1f      	ble.n	8026040 <_strtod_l+0x5b8>
 8026000:	2500      	movs	r5, #0
 8026002:	462e      	mov	r6, r5
 8026004:	9507      	str	r5, [sp, #28]
 8026006:	9505      	str	r5, [sp, #20]
 8026008:	2322      	movs	r3, #34	; 0x22
 802600a:	f04f 0a00 	mov.w	sl, #0
 802600e:	f04f 0b00 	mov.w	fp, #0
 8026012:	6023      	str	r3, [r4, #0]
 8026014:	e786      	b.n	8025f24 <_strtod_l+0x49c>
 8026016:	bf00      	nop
 8026018:	08037abd 	.word	0x08037abd
 802601c:	08037af8 	.word	0x08037af8
 8026020:	08037ab5 	.word	0x08037ab5
 8026024:	08037c3c 	.word	0x08037c3c
 8026028:	08037f50 	.word	0x08037f50
 802602c:	08037e30 	.word	0x08037e30
 8026030:	08037e08 	.word	0x08037e08
 8026034:	7ff00000 	.word	0x7ff00000
 8026038:	7ca00000 	.word	0x7ca00000
 802603c:	7fefffff 	.word	0x7fefffff
 8026040:	f018 0310 	ands.w	r3, r8, #16
 8026044:	bf18      	it	ne
 8026046:	236a      	movne	r3, #106	; 0x6a
 8026048:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80263f8 <_strtod_l+0x970>
 802604c:	9304      	str	r3, [sp, #16]
 802604e:	4650      	mov	r0, sl
 8026050:	4659      	mov	r1, fp
 8026052:	2300      	movs	r3, #0
 8026054:	f018 0f01 	tst.w	r8, #1
 8026058:	d004      	beq.n	8026064 <_strtod_l+0x5dc>
 802605a:	e9d9 2300 	ldrd	r2, r3, [r9]
 802605e:	f7ea fe33 	bl	8010cc8 <__aeabi_dmul>
 8026062:	2301      	movs	r3, #1
 8026064:	ea5f 0868 	movs.w	r8, r8, asr #1
 8026068:	f109 0908 	add.w	r9, r9, #8
 802606c:	d1f2      	bne.n	8026054 <_strtod_l+0x5cc>
 802606e:	b10b      	cbz	r3, 8026074 <_strtod_l+0x5ec>
 8026070:	4682      	mov	sl, r0
 8026072:	468b      	mov	fp, r1
 8026074:	9b04      	ldr	r3, [sp, #16]
 8026076:	b1c3      	cbz	r3, 80260aa <_strtod_l+0x622>
 8026078:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802607c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8026080:	2b00      	cmp	r3, #0
 8026082:	4659      	mov	r1, fp
 8026084:	dd11      	ble.n	80260aa <_strtod_l+0x622>
 8026086:	2b1f      	cmp	r3, #31
 8026088:	f340 8124 	ble.w	80262d4 <_strtod_l+0x84c>
 802608c:	2b34      	cmp	r3, #52	; 0x34
 802608e:	bfde      	ittt	le
 8026090:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8026094:	f04f 33ff 	movle.w	r3, #4294967295
 8026098:	fa03 f202 	lslle.w	r2, r3, r2
 802609c:	f04f 0a00 	mov.w	sl, #0
 80260a0:	bfcc      	ite	gt
 80260a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80260a6:	ea02 0b01 	andle.w	fp, r2, r1
 80260aa:	2200      	movs	r2, #0
 80260ac:	2300      	movs	r3, #0
 80260ae:	4650      	mov	r0, sl
 80260b0:	4659      	mov	r1, fp
 80260b2:	f7eb f871 	bl	8011198 <__aeabi_dcmpeq>
 80260b6:	2800      	cmp	r0, #0
 80260b8:	d1a2      	bne.n	8026000 <_strtod_l+0x578>
 80260ba:	9b07      	ldr	r3, [sp, #28]
 80260bc:	9300      	str	r3, [sp, #0]
 80260be:	9908      	ldr	r1, [sp, #32]
 80260c0:	462b      	mov	r3, r5
 80260c2:	463a      	mov	r2, r7
 80260c4:	4620      	mov	r0, r4
 80260c6:	f002 f989 	bl	80283dc <__s2b>
 80260ca:	9007      	str	r0, [sp, #28]
 80260cc:	2800      	cmp	r0, #0
 80260ce:	f43f af1f 	beq.w	8025f10 <_strtod_l+0x488>
 80260d2:	9b05      	ldr	r3, [sp, #20]
 80260d4:	1b9e      	subs	r6, r3, r6
 80260d6:	9b06      	ldr	r3, [sp, #24]
 80260d8:	2b00      	cmp	r3, #0
 80260da:	bfb4      	ite	lt
 80260dc:	4633      	movlt	r3, r6
 80260de:	2300      	movge	r3, #0
 80260e0:	930c      	str	r3, [sp, #48]	; 0x30
 80260e2:	9b06      	ldr	r3, [sp, #24]
 80260e4:	2500      	movs	r5, #0
 80260e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80260ea:	9312      	str	r3, [sp, #72]	; 0x48
 80260ec:	462e      	mov	r6, r5
 80260ee:	9b07      	ldr	r3, [sp, #28]
 80260f0:	4620      	mov	r0, r4
 80260f2:	6859      	ldr	r1, [r3, #4]
 80260f4:	f002 f8ca 	bl	802828c <_Balloc>
 80260f8:	9005      	str	r0, [sp, #20]
 80260fa:	2800      	cmp	r0, #0
 80260fc:	f43f af0c 	beq.w	8025f18 <_strtod_l+0x490>
 8026100:	9b07      	ldr	r3, [sp, #28]
 8026102:	691a      	ldr	r2, [r3, #16]
 8026104:	3202      	adds	r2, #2
 8026106:	f103 010c 	add.w	r1, r3, #12
 802610a:	0092      	lsls	r2, r2, #2
 802610c:	300c      	adds	r0, #12
 802610e:	f7fe ff25 	bl	8024f5c <memcpy>
 8026112:	ec4b ab10 	vmov	d0, sl, fp
 8026116:	aa1a      	add	r2, sp, #104	; 0x68
 8026118:	a919      	add	r1, sp, #100	; 0x64
 802611a:	4620      	mov	r0, r4
 802611c:	f002 fca4 	bl	8028a68 <__d2b>
 8026120:	ec4b ab18 	vmov	d8, sl, fp
 8026124:	9018      	str	r0, [sp, #96]	; 0x60
 8026126:	2800      	cmp	r0, #0
 8026128:	f43f aef6 	beq.w	8025f18 <_strtod_l+0x490>
 802612c:	2101      	movs	r1, #1
 802612e:	4620      	mov	r0, r4
 8026130:	f002 f9ee 	bl	8028510 <__i2b>
 8026134:	4606      	mov	r6, r0
 8026136:	2800      	cmp	r0, #0
 8026138:	f43f aeee 	beq.w	8025f18 <_strtod_l+0x490>
 802613c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802613e:	9904      	ldr	r1, [sp, #16]
 8026140:	2b00      	cmp	r3, #0
 8026142:	bfab      	itete	ge
 8026144:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8026146:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8026148:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802614a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 802614e:	bfac      	ite	ge
 8026150:	eb03 0902 	addge.w	r9, r3, r2
 8026154:	1ad7      	sublt	r7, r2, r3
 8026156:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8026158:	eba3 0801 	sub.w	r8, r3, r1
 802615c:	4490      	add	r8, r2
 802615e:	4ba1      	ldr	r3, [pc, #644]	; (80263e4 <_strtod_l+0x95c>)
 8026160:	f108 38ff 	add.w	r8, r8, #4294967295
 8026164:	4598      	cmp	r8, r3
 8026166:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802616a:	f280 80c7 	bge.w	80262fc <_strtod_l+0x874>
 802616e:	eba3 0308 	sub.w	r3, r3, r8
 8026172:	2b1f      	cmp	r3, #31
 8026174:	eba2 0203 	sub.w	r2, r2, r3
 8026178:	f04f 0101 	mov.w	r1, #1
 802617c:	f300 80b1 	bgt.w	80262e2 <_strtod_l+0x85a>
 8026180:	fa01 f303 	lsl.w	r3, r1, r3
 8026184:	930d      	str	r3, [sp, #52]	; 0x34
 8026186:	2300      	movs	r3, #0
 8026188:	9308      	str	r3, [sp, #32]
 802618a:	eb09 0802 	add.w	r8, r9, r2
 802618e:	9b04      	ldr	r3, [sp, #16]
 8026190:	45c1      	cmp	r9, r8
 8026192:	4417      	add	r7, r2
 8026194:	441f      	add	r7, r3
 8026196:	464b      	mov	r3, r9
 8026198:	bfa8      	it	ge
 802619a:	4643      	movge	r3, r8
 802619c:	42bb      	cmp	r3, r7
 802619e:	bfa8      	it	ge
 80261a0:	463b      	movge	r3, r7
 80261a2:	2b00      	cmp	r3, #0
 80261a4:	bfc2      	ittt	gt
 80261a6:	eba8 0803 	subgt.w	r8, r8, r3
 80261aa:	1aff      	subgt	r7, r7, r3
 80261ac:	eba9 0903 	subgt.w	r9, r9, r3
 80261b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80261b2:	2b00      	cmp	r3, #0
 80261b4:	dd17      	ble.n	80261e6 <_strtod_l+0x75e>
 80261b6:	4631      	mov	r1, r6
 80261b8:	461a      	mov	r2, r3
 80261ba:	4620      	mov	r0, r4
 80261bc:	f002 fa68 	bl	8028690 <__pow5mult>
 80261c0:	4606      	mov	r6, r0
 80261c2:	2800      	cmp	r0, #0
 80261c4:	f43f aea8 	beq.w	8025f18 <_strtod_l+0x490>
 80261c8:	4601      	mov	r1, r0
 80261ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80261cc:	4620      	mov	r0, r4
 80261ce:	f002 f9b5 	bl	802853c <__multiply>
 80261d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80261d4:	2800      	cmp	r0, #0
 80261d6:	f43f ae9f 	beq.w	8025f18 <_strtod_l+0x490>
 80261da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80261dc:	4620      	mov	r0, r4
 80261de:	f002 f895 	bl	802830c <_Bfree>
 80261e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261e4:	9318      	str	r3, [sp, #96]	; 0x60
 80261e6:	f1b8 0f00 	cmp.w	r8, #0
 80261ea:	f300 808c 	bgt.w	8026306 <_strtod_l+0x87e>
 80261ee:	9b06      	ldr	r3, [sp, #24]
 80261f0:	2b00      	cmp	r3, #0
 80261f2:	dd08      	ble.n	8026206 <_strtod_l+0x77e>
 80261f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80261f6:	9905      	ldr	r1, [sp, #20]
 80261f8:	4620      	mov	r0, r4
 80261fa:	f002 fa49 	bl	8028690 <__pow5mult>
 80261fe:	9005      	str	r0, [sp, #20]
 8026200:	2800      	cmp	r0, #0
 8026202:	f43f ae89 	beq.w	8025f18 <_strtod_l+0x490>
 8026206:	2f00      	cmp	r7, #0
 8026208:	dd08      	ble.n	802621c <_strtod_l+0x794>
 802620a:	9905      	ldr	r1, [sp, #20]
 802620c:	463a      	mov	r2, r7
 802620e:	4620      	mov	r0, r4
 8026210:	f002 fa98 	bl	8028744 <__lshift>
 8026214:	9005      	str	r0, [sp, #20]
 8026216:	2800      	cmp	r0, #0
 8026218:	f43f ae7e 	beq.w	8025f18 <_strtod_l+0x490>
 802621c:	f1b9 0f00 	cmp.w	r9, #0
 8026220:	dd08      	ble.n	8026234 <_strtod_l+0x7ac>
 8026222:	4631      	mov	r1, r6
 8026224:	464a      	mov	r2, r9
 8026226:	4620      	mov	r0, r4
 8026228:	f002 fa8c 	bl	8028744 <__lshift>
 802622c:	4606      	mov	r6, r0
 802622e:	2800      	cmp	r0, #0
 8026230:	f43f ae72 	beq.w	8025f18 <_strtod_l+0x490>
 8026234:	9a05      	ldr	r2, [sp, #20]
 8026236:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026238:	4620      	mov	r0, r4
 802623a:	f002 fb0f 	bl	802885c <__mdiff>
 802623e:	4605      	mov	r5, r0
 8026240:	2800      	cmp	r0, #0
 8026242:	f43f ae69 	beq.w	8025f18 <_strtod_l+0x490>
 8026246:	68c3      	ldr	r3, [r0, #12]
 8026248:	930b      	str	r3, [sp, #44]	; 0x2c
 802624a:	2300      	movs	r3, #0
 802624c:	60c3      	str	r3, [r0, #12]
 802624e:	4631      	mov	r1, r6
 8026250:	f002 fae8 	bl	8028824 <__mcmp>
 8026254:	2800      	cmp	r0, #0
 8026256:	da60      	bge.n	802631a <_strtod_l+0x892>
 8026258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802625a:	ea53 030a 	orrs.w	r3, r3, sl
 802625e:	f040 8082 	bne.w	8026366 <_strtod_l+0x8de>
 8026262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026266:	2b00      	cmp	r3, #0
 8026268:	d17d      	bne.n	8026366 <_strtod_l+0x8de>
 802626a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802626e:	0d1b      	lsrs	r3, r3, #20
 8026270:	051b      	lsls	r3, r3, #20
 8026272:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8026276:	d976      	bls.n	8026366 <_strtod_l+0x8de>
 8026278:	696b      	ldr	r3, [r5, #20]
 802627a:	b913      	cbnz	r3, 8026282 <_strtod_l+0x7fa>
 802627c:	692b      	ldr	r3, [r5, #16]
 802627e:	2b01      	cmp	r3, #1
 8026280:	dd71      	ble.n	8026366 <_strtod_l+0x8de>
 8026282:	4629      	mov	r1, r5
 8026284:	2201      	movs	r2, #1
 8026286:	4620      	mov	r0, r4
 8026288:	f002 fa5c 	bl	8028744 <__lshift>
 802628c:	4631      	mov	r1, r6
 802628e:	4605      	mov	r5, r0
 8026290:	f002 fac8 	bl	8028824 <__mcmp>
 8026294:	2800      	cmp	r0, #0
 8026296:	dd66      	ble.n	8026366 <_strtod_l+0x8de>
 8026298:	9904      	ldr	r1, [sp, #16]
 802629a:	4a53      	ldr	r2, [pc, #332]	; (80263e8 <_strtod_l+0x960>)
 802629c:	465b      	mov	r3, fp
 802629e:	2900      	cmp	r1, #0
 80262a0:	f000 8081 	beq.w	80263a6 <_strtod_l+0x91e>
 80262a4:	ea02 010b 	and.w	r1, r2, fp
 80262a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80262ac:	dc7b      	bgt.n	80263a6 <_strtod_l+0x91e>
 80262ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80262b2:	f77f aea9 	ble.w	8026008 <_strtod_l+0x580>
 80262b6:	4b4d      	ldr	r3, [pc, #308]	; (80263ec <_strtod_l+0x964>)
 80262b8:	4650      	mov	r0, sl
 80262ba:	4659      	mov	r1, fp
 80262bc:	2200      	movs	r2, #0
 80262be:	f7ea fd03 	bl	8010cc8 <__aeabi_dmul>
 80262c2:	460b      	mov	r3, r1
 80262c4:	4303      	orrs	r3, r0
 80262c6:	bf08      	it	eq
 80262c8:	2322      	moveq	r3, #34	; 0x22
 80262ca:	4682      	mov	sl, r0
 80262cc:	468b      	mov	fp, r1
 80262ce:	bf08      	it	eq
 80262d0:	6023      	streq	r3, [r4, #0]
 80262d2:	e62b      	b.n	8025f2c <_strtod_l+0x4a4>
 80262d4:	f04f 32ff 	mov.w	r2, #4294967295
 80262d8:	fa02 f303 	lsl.w	r3, r2, r3
 80262dc:	ea03 0a0a 	and.w	sl, r3, sl
 80262e0:	e6e3      	b.n	80260aa <_strtod_l+0x622>
 80262e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80262e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80262ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80262ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80262f2:	fa01 f308 	lsl.w	r3, r1, r8
 80262f6:	9308      	str	r3, [sp, #32]
 80262f8:	910d      	str	r1, [sp, #52]	; 0x34
 80262fa:	e746      	b.n	802618a <_strtod_l+0x702>
 80262fc:	2300      	movs	r3, #0
 80262fe:	9308      	str	r3, [sp, #32]
 8026300:	2301      	movs	r3, #1
 8026302:	930d      	str	r3, [sp, #52]	; 0x34
 8026304:	e741      	b.n	802618a <_strtod_l+0x702>
 8026306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026308:	4642      	mov	r2, r8
 802630a:	4620      	mov	r0, r4
 802630c:	f002 fa1a 	bl	8028744 <__lshift>
 8026310:	9018      	str	r0, [sp, #96]	; 0x60
 8026312:	2800      	cmp	r0, #0
 8026314:	f47f af6b 	bne.w	80261ee <_strtod_l+0x766>
 8026318:	e5fe      	b.n	8025f18 <_strtod_l+0x490>
 802631a:	465f      	mov	r7, fp
 802631c:	d16e      	bne.n	80263fc <_strtod_l+0x974>
 802631e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026320:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026324:	b342      	cbz	r2, 8026378 <_strtod_l+0x8f0>
 8026326:	4a32      	ldr	r2, [pc, #200]	; (80263f0 <_strtod_l+0x968>)
 8026328:	4293      	cmp	r3, r2
 802632a:	d128      	bne.n	802637e <_strtod_l+0x8f6>
 802632c:	9b04      	ldr	r3, [sp, #16]
 802632e:	4651      	mov	r1, sl
 8026330:	b1eb      	cbz	r3, 802636e <_strtod_l+0x8e6>
 8026332:	4b2d      	ldr	r3, [pc, #180]	; (80263e8 <_strtod_l+0x960>)
 8026334:	403b      	ands	r3, r7
 8026336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802633a:	f04f 32ff 	mov.w	r2, #4294967295
 802633e:	d819      	bhi.n	8026374 <_strtod_l+0x8ec>
 8026340:	0d1b      	lsrs	r3, r3, #20
 8026342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8026346:	fa02 f303 	lsl.w	r3, r2, r3
 802634a:	4299      	cmp	r1, r3
 802634c:	d117      	bne.n	802637e <_strtod_l+0x8f6>
 802634e:	4b29      	ldr	r3, [pc, #164]	; (80263f4 <_strtod_l+0x96c>)
 8026350:	429f      	cmp	r7, r3
 8026352:	d102      	bne.n	802635a <_strtod_l+0x8d2>
 8026354:	3101      	adds	r1, #1
 8026356:	f43f addf 	beq.w	8025f18 <_strtod_l+0x490>
 802635a:	4b23      	ldr	r3, [pc, #140]	; (80263e8 <_strtod_l+0x960>)
 802635c:	403b      	ands	r3, r7
 802635e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8026362:	f04f 0a00 	mov.w	sl, #0
 8026366:	9b04      	ldr	r3, [sp, #16]
 8026368:	2b00      	cmp	r3, #0
 802636a:	d1a4      	bne.n	80262b6 <_strtod_l+0x82e>
 802636c:	e5de      	b.n	8025f2c <_strtod_l+0x4a4>
 802636e:	f04f 33ff 	mov.w	r3, #4294967295
 8026372:	e7ea      	b.n	802634a <_strtod_l+0x8c2>
 8026374:	4613      	mov	r3, r2
 8026376:	e7e8      	b.n	802634a <_strtod_l+0x8c2>
 8026378:	ea53 030a 	orrs.w	r3, r3, sl
 802637c:	d08c      	beq.n	8026298 <_strtod_l+0x810>
 802637e:	9b08      	ldr	r3, [sp, #32]
 8026380:	b1db      	cbz	r3, 80263ba <_strtod_l+0x932>
 8026382:	423b      	tst	r3, r7
 8026384:	d0ef      	beq.n	8026366 <_strtod_l+0x8de>
 8026386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026388:	9a04      	ldr	r2, [sp, #16]
 802638a:	4650      	mov	r0, sl
 802638c:	4659      	mov	r1, fp
 802638e:	b1c3      	cbz	r3, 80263c2 <_strtod_l+0x93a>
 8026390:	f7ff fb5c 	bl	8025a4c <sulp>
 8026394:	4602      	mov	r2, r0
 8026396:	460b      	mov	r3, r1
 8026398:	ec51 0b18 	vmov	r0, r1, d8
 802639c:	f7ea fade 	bl	801095c <__adddf3>
 80263a0:	4682      	mov	sl, r0
 80263a2:	468b      	mov	fp, r1
 80263a4:	e7df      	b.n	8026366 <_strtod_l+0x8de>
 80263a6:	4013      	ands	r3, r2
 80263a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80263ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80263b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80263b4:	f04f 3aff 	mov.w	sl, #4294967295
 80263b8:	e7d5      	b.n	8026366 <_strtod_l+0x8de>
 80263ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80263bc:	ea13 0f0a 	tst.w	r3, sl
 80263c0:	e7e0      	b.n	8026384 <_strtod_l+0x8fc>
 80263c2:	f7ff fb43 	bl	8025a4c <sulp>
 80263c6:	4602      	mov	r2, r0
 80263c8:	460b      	mov	r3, r1
 80263ca:	ec51 0b18 	vmov	r0, r1, d8
 80263ce:	f7ea fac3 	bl	8010958 <__aeabi_dsub>
 80263d2:	2200      	movs	r2, #0
 80263d4:	2300      	movs	r3, #0
 80263d6:	4682      	mov	sl, r0
 80263d8:	468b      	mov	fp, r1
 80263da:	f7ea fedd 	bl	8011198 <__aeabi_dcmpeq>
 80263de:	2800      	cmp	r0, #0
 80263e0:	d0c1      	beq.n	8026366 <_strtod_l+0x8de>
 80263e2:	e611      	b.n	8026008 <_strtod_l+0x580>
 80263e4:	fffffc02 	.word	0xfffffc02
 80263e8:	7ff00000 	.word	0x7ff00000
 80263ec:	39500000 	.word	0x39500000
 80263f0:	000fffff 	.word	0x000fffff
 80263f4:	7fefffff 	.word	0x7fefffff
 80263f8:	08037b10 	.word	0x08037b10
 80263fc:	4631      	mov	r1, r6
 80263fe:	4628      	mov	r0, r5
 8026400:	f002 fb8e 	bl	8028b20 <__ratio>
 8026404:	ec59 8b10 	vmov	r8, r9, d0
 8026408:	ee10 0a10 	vmov	r0, s0
 802640c:	2200      	movs	r2, #0
 802640e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8026412:	4649      	mov	r1, r9
 8026414:	f7ea fed4 	bl	80111c0 <__aeabi_dcmple>
 8026418:	2800      	cmp	r0, #0
 802641a:	d07a      	beq.n	8026512 <_strtod_l+0xa8a>
 802641c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802641e:	2b00      	cmp	r3, #0
 8026420:	d04a      	beq.n	80264b8 <_strtod_l+0xa30>
 8026422:	4b95      	ldr	r3, [pc, #596]	; (8026678 <_strtod_l+0xbf0>)
 8026424:	2200      	movs	r2, #0
 8026426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802642a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8026678 <_strtod_l+0xbf0>
 802642e:	f04f 0800 	mov.w	r8, #0
 8026432:	4b92      	ldr	r3, [pc, #584]	; (802667c <_strtod_l+0xbf4>)
 8026434:	403b      	ands	r3, r7
 8026436:	930d      	str	r3, [sp, #52]	; 0x34
 8026438:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802643a:	4b91      	ldr	r3, [pc, #580]	; (8026680 <_strtod_l+0xbf8>)
 802643c:	429a      	cmp	r2, r3
 802643e:	f040 80b0 	bne.w	80265a2 <_strtod_l+0xb1a>
 8026442:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026446:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 802644a:	ec4b ab10 	vmov	d0, sl, fp
 802644e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026452:	f002 fa8d 	bl	8028970 <__ulp>
 8026456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802645a:	ec53 2b10 	vmov	r2, r3, d0
 802645e:	f7ea fc33 	bl	8010cc8 <__aeabi_dmul>
 8026462:	4652      	mov	r2, sl
 8026464:	465b      	mov	r3, fp
 8026466:	f7ea fa79 	bl	801095c <__adddf3>
 802646a:	460b      	mov	r3, r1
 802646c:	4983      	ldr	r1, [pc, #524]	; (802667c <_strtod_l+0xbf4>)
 802646e:	4a85      	ldr	r2, [pc, #532]	; (8026684 <_strtod_l+0xbfc>)
 8026470:	4019      	ands	r1, r3
 8026472:	4291      	cmp	r1, r2
 8026474:	4682      	mov	sl, r0
 8026476:	d960      	bls.n	802653a <_strtod_l+0xab2>
 8026478:	ee18 3a90 	vmov	r3, s17
 802647c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8026480:	4293      	cmp	r3, r2
 8026482:	d104      	bne.n	802648e <_strtod_l+0xa06>
 8026484:	ee18 3a10 	vmov	r3, s16
 8026488:	3301      	adds	r3, #1
 802648a:	f43f ad45 	beq.w	8025f18 <_strtod_l+0x490>
 802648e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8026690 <_strtod_l+0xc08>
 8026492:	f04f 3aff 	mov.w	sl, #4294967295
 8026496:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026498:	4620      	mov	r0, r4
 802649a:	f001 ff37 	bl	802830c <_Bfree>
 802649e:	9905      	ldr	r1, [sp, #20]
 80264a0:	4620      	mov	r0, r4
 80264a2:	f001 ff33 	bl	802830c <_Bfree>
 80264a6:	4631      	mov	r1, r6
 80264a8:	4620      	mov	r0, r4
 80264aa:	f001 ff2f 	bl	802830c <_Bfree>
 80264ae:	4629      	mov	r1, r5
 80264b0:	4620      	mov	r0, r4
 80264b2:	f001 ff2b 	bl	802830c <_Bfree>
 80264b6:	e61a      	b.n	80260ee <_strtod_l+0x666>
 80264b8:	f1ba 0f00 	cmp.w	sl, #0
 80264bc:	d11b      	bne.n	80264f6 <_strtod_l+0xa6e>
 80264be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80264c2:	b9f3      	cbnz	r3, 8026502 <_strtod_l+0xa7a>
 80264c4:	4b6c      	ldr	r3, [pc, #432]	; (8026678 <_strtod_l+0xbf0>)
 80264c6:	2200      	movs	r2, #0
 80264c8:	4640      	mov	r0, r8
 80264ca:	4649      	mov	r1, r9
 80264cc:	f7ea fe6e 	bl	80111ac <__aeabi_dcmplt>
 80264d0:	b9d0      	cbnz	r0, 8026508 <_strtod_l+0xa80>
 80264d2:	4640      	mov	r0, r8
 80264d4:	4649      	mov	r1, r9
 80264d6:	4b6c      	ldr	r3, [pc, #432]	; (8026688 <_strtod_l+0xc00>)
 80264d8:	2200      	movs	r2, #0
 80264da:	f7ea fbf5 	bl	8010cc8 <__aeabi_dmul>
 80264de:	4680      	mov	r8, r0
 80264e0:	4689      	mov	r9, r1
 80264e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80264e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80264ea:	9315      	str	r3, [sp, #84]	; 0x54
 80264ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80264f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80264f4:	e79d      	b.n	8026432 <_strtod_l+0x9aa>
 80264f6:	f1ba 0f01 	cmp.w	sl, #1
 80264fa:	d102      	bne.n	8026502 <_strtod_l+0xa7a>
 80264fc:	2f00      	cmp	r7, #0
 80264fe:	f43f ad83 	beq.w	8026008 <_strtod_l+0x580>
 8026502:	4b62      	ldr	r3, [pc, #392]	; (802668c <_strtod_l+0xc04>)
 8026504:	2200      	movs	r2, #0
 8026506:	e78e      	b.n	8026426 <_strtod_l+0x99e>
 8026508:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8026688 <_strtod_l+0xc00>
 802650c:	f04f 0800 	mov.w	r8, #0
 8026510:	e7e7      	b.n	80264e2 <_strtod_l+0xa5a>
 8026512:	4b5d      	ldr	r3, [pc, #372]	; (8026688 <_strtod_l+0xc00>)
 8026514:	4640      	mov	r0, r8
 8026516:	4649      	mov	r1, r9
 8026518:	2200      	movs	r2, #0
 802651a:	f7ea fbd5 	bl	8010cc8 <__aeabi_dmul>
 802651e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026520:	4680      	mov	r8, r0
 8026522:	4689      	mov	r9, r1
 8026524:	b933      	cbnz	r3, 8026534 <_strtod_l+0xaac>
 8026526:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802652a:	900e      	str	r0, [sp, #56]	; 0x38
 802652c:	930f      	str	r3, [sp, #60]	; 0x3c
 802652e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8026532:	e7dd      	b.n	80264f0 <_strtod_l+0xa68>
 8026534:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8026538:	e7f9      	b.n	802652e <_strtod_l+0xaa6>
 802653a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802653e:	9b04      	ldr	r3, [sp, #16]
 8026540:	2b00      	cmp	r3, #0
 8026542:	d1a8      	bne.n	8026496 <_strtod_l+0xa0e>
 8026544:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802654a:	0d1b      	lsrs	r3, r3, #20
 802654c:	051b      	lsls	r3, r3, #20
 802654e:	429a      	cmp	r2, r3
 8026550:	d1a1      	bne.n	8026496 <_strtod_l+0xa0e>
 8026552:	4640      	mov	r0, r8
 8026554:	4649      	mov	r1, r9
 8026556:	f7ea ff17 	bl	8011388 <__aeabi_d2lz>
 802655a:	f7ea fb87 	bl	8010c6c <__aeabi_l2d>
 802655e:	4602      	mov	r2, r0
 8026560:	460b      	mov	r3, r1
 8026562:	4640      	mov	r0, r8
 8026564:	4649      	mov	r1, r9
 8026566:	f7ea f9f7 	bl	8010958 <__aeabi_dsub>
 802656a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802656c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026570:	ea43 030a 	orr.w	r3, r3, sl
 8026574:	4313      	orrs	r3, r2
 8026576:	4680      	mov	r8, r0
 8026578:	4689      	mov	r9, r1
 802657a:	d055      	beq.n	8026628 <_strtod_l+0xba0>
 802657c:	a336      	add	r3, pc, #216	; (adr r3, 8026658 <_strtod_l+0xbd0>)
 802657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026582:	f7ea fe13 	bl	80111ac <__aeabi_dcmplt>
 8026586:	2800      	cmp	r0, #0
 8026588:	f47f acd0 	bne.w	8025f2c <_strtod_l+0x4a4>
 802658c:	a334      	add	r3, pc, #208	; (adr r3, 8026660 <_strtod_l+0xbd8>)
 802658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026592:	4640      	mov	r0, r8
 8026594:	4649      	mov	r1, r9
 8026596:	f7ea fe27 	bl	80111e8 <__aeabi_dcmpgt>
 802659a:	2800      	cmp	r0, #0
 802659c:	f43f af7b 	beq.w	8026496 <_strtod_l+0xa0e>
 80265a0:	e4c4      	b.n	8025f2c <_strtod_l+0x4a4>
 80265a2:	9b04      	ldr	r3, [sp, #16]
 80265a4:	b333      	cbz	r3, 80265f4 <_strtod_l+0xb6c>
 80265a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80265a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80265ac:	d822      	bhi.n	80265f4 <_strtod_l+0xb6c>
 80265ae:	a32e      	add	r3, pc, #184	; (adr r3, 8026668 <_strtod_l+0xbe0>)
 80265b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265b4:	4640      	mov	r0, r8
 80265b6:	4649      	mov	r1, r9
 80265b8:	f7ea fe02 	bl	80111c0 <__aeabi_dcmple>
 80265bc:	b1a0      	cbz	r0, 80265e8 <_strtod_l+0xb60>
 80265be:	4649      	mov	r1, r9
 80265c0:	4640      	mov	r0, r8
 80265c2:	f7ea fe59 	bl	8011278 <__aeabi_d2uiz>
 80265c6:	2801      	cmp	r0, #1
 80265c8:	bf38      	it	cc
 80265ca:	2001      	movcc	r0, #1
 80265cc:	f7ea fb02 	bl	8010bd4 <__aeabi_ui2d>
 80265d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80265d2:	4680      	mov	r8, r0
 80265d4:	4689      	mov	r9, r1
 80265d6:	bb23      	cbnz	r3, 8026622 <_strtod_l+0xb9a>
 80265d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80265dc:	9010      	str	r0, [sp, #64]	; 0x40
 80265de:	9311      	str	r3, [sp, #68]	; 0x44
 80265e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80265e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80265e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80265ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80265ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80265f0:	1a9b      	subs	r3, r3, r2
 80265f2:	9309      	str	r3, [sp, #36]	; 0x24
 80265f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80265f8:	eeb0 0a48 	vmov.f32	s0, s16
 80265fc:	eef0 0a68 	vmov.f32	s1, s17
 8026600:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8026604:	f002 f9b4 	bl	8028970 <__ulp>
 8026608:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802660c:	ec53 2b10 	vmov	r2, r3, d0
 8026610:	f7ea fb5a 	bl	8010cc8 <__aeabi_dmul>
 8026614:	ec53 2b18 	vmov	r2, r3, d8
 8026618:	f7ea f9a0 	bl	801095c <__adddf3>
 802661c:	4682      	mov	sl, r0
 802661e:	468b      	mov	fp, r1
 8026620:	e78d      	b.n	802653e <_strtod_l+0xab6>
 8026622:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8026626:	e7db      	b.n	80265e0 <_strtod_l+0xb58>
 8026628:	a311      	add	r3, pc, #68	; (adr r3, 8026670 <_strtod_l+0xbe8>)
 802662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802662e:	f7ea fdbd 	bl	80111ac <__aeabi_dcmplt>
 8026632:	e7b2      	b.n	802659a <_strtod_l+0xb12>
 8026634:	2300      	movs	r3, #0
 8026636:	930a      	str	r3, [sp, #40]	; 0x28
 8026638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802663a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802663c:	6013      	str	r3, [r2, #0]
 802663e:	f7ff ba6b 	b.w	8025b18 <_strtod_l+0x90>
 8026642:	2a65      	cmp	r2, #101	; 0x65
 8026644:	f43f ab5f 	beq.w	8025d06 <_strtod_l+0x27e>
 8026648:	2a45      	cmp	r2, #69	; 0x45
 802664a:	f43f ab5c 	beq.w	8025d06 <_strtod_l+0x27e>
 802664e:	2301      	movs	r3, #1
 8026650:	f7ff bb94 	b.w	8025d7c <_strtod_l+0x2f4>
 8026654:	f3af 8000 	nop.w
 8026658:	94a03595 	.word	0x94a03595
 802665c:	3fdfffff 	.word	0x3fdfffff
 8026660:	35afe535 	.word	0x35afe535
 8026664:	3fe00000 	.word	0x3fe00000
 8026668:	ffc00000 	.word	0xffc00000
 802666c:	41dfffff 	.word	0x41dfffff
 8026670:	94a03595 	.word	0x94a03595
 8026674:	3fcfffff 	.word	0x3fcfffff
 8026678:	3ff00000 	.word	0x3ff00000
 802667c:	7ff00000 	.word	0x7ff00000
 8026680:	7fe00000 	.word	0x7fe00000
 8026684:	7c9fffff 	.word	0x7c9fffff
 8026688:	3fe00000 	.word	0x3fe00000
 802668c:	bff00000 	.word	0xbff00000
 8026690:	7fefffff 	.word	0x7fefffff

08026694 <strtof>:
 8026694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026698:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8026748 <strtof+0xb4>
 802669c:	4b26      	ldr	r3, [pc, #152]	; (8026738 <strtof+0xa4>)
 802669e:	460a      	mov	r2, r1
 80266a0:	ed2d 8b02 	vpush	{d8}
 80266a4:	4601      	mov	r1, r0
 80266a6:	f8d8 0000 	ldr.w	r0, [r8]
 80266aa:	f7ff f9ed 	bl	8025a88 <_strtod_l>
 80266ae:	ec55 4b10 	vmov	r4, r5, d0
 80266b2:	ee10 2a10 	vmov	r2, s0
 80266b6:	ee10 0a10 	vmov	r0, s0
 80266ba:	462b      	mov	r3, r5
 80266bc:	4629      	mov	r1, r5
 80266be:	f7ea fd9d 	bl	80111fc <__aeabi_dcmpun>
 80266c2:	b190      	cbz	r0, 80266ea <strtof+0x56>
 80266c4:	2d00      	cmp	r5, #0
 80266c6:	481d      	ldr	r0, [pc, #116]	; (802673c <strtof+0xa8>)
 80266c8:	da09      	bge.n	80266de <strtof+0x4a>
 80266ca:	f002 fc19 	bl	8028f00 <nanf>
 80266ce:	eeb1 8a40 	vneg.f32	s16, s0
 80266d2:	eeb0 0a48 	vmov.f32	s0, s16
 80266d6:	ecbd 8b02 	vpop	{d8}
 80266da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80266de:	ecbd 8b02 	vpop	{d8}
 80266e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80266e6:	f002 bc0b 	b.w	8028f00 <nanf>
 80266ea:	4620      	mov	r0, r4
 80266ec:	4629      	mov	r1, r5
 80266ee:	f7ea fde3 	bl	80112b8 <__aeabi_d2f>
 80266f2:	ee08 0a10 	vmov	s16, r0
 80266f6:	eddf 7a12 	vldr	s15, [pc, #72]	; 8026740 <strtof+0xac>
 80266fa:	eeb0 7ac8 	vabs.f32	s14, s16
 80266fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8026702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026706:	dde4      	ble.n	80266d2 <strtof+0x3e>
 8026708:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 802670c:	4b0d      	ldr	r3, [pc, #52]	; (8026744 <strtof+0xb0>)
 802670e:	f04f 32ff 	mov.w	r2, #4294967295
 8026712:	4620      	mov	r0, r4
 8026714:	4639      	mov	r1, r7
 8026716:	f7ea fd71 	bl	80111fc <__aeabi_dcmpun>
 802671a:	b940      	cbnz	r0, 802672e <strtof+0x9a>
 802671c:	4b09      	ldr	r3, [pc, #36]	; (8026744 <strtof+0xb0>)
 802671e:	f04f 32ff 	mov.w	r2, #4294967295
 8026722:	4620      	mov	r0, r4
 8026724:	4639      	mov	r1, r7
 8026726:	f7ea fd4b 	bl	80111c0 <__aeabi_dcmple>
 802672a:	2800      	cmp	r0, #0
 802672c:	d0d1      	beq.n	80266d2 <strtof+0x3e>
 802672e:	f8d8 3000 	ldr.w	r3, [r8]
 8026732:	2222      	movs	r2, #34	; 0x22
 8026734:	601a      	str	r2, [r3, #0]
 8026736:	e7cc      	b.n	80266d2 <strtof+0x3e>
 8026738:	20000148 	.word	0x20000148
 802673c:	08037f50 	.word	0x08037f50
 8026740:	7f7fffff 	.word	0x7f7fffff
 8026744:	7fefffff 	.word	0x7fefffff
 8026748:	200000e0 	.word	0x200000e0

0802674c <_strtoul_l.constprop.0>:
 802674c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026750:	4f36      	ldr	r7, [pc, #216]	; (802682c <_strtoul_l.constprop.0+0xe0>)
 8026752:	4686      	mov	lr, r0
 8026754:	460d      	mov	r5, r1
 8026756:	4628      	mov	r0, r5
 8026758:	f815 4b01 	ldrb.w	r4, [r5], #1
 802675c:	5de6      	ldrb	r6, [r4, r7]
 802675e:	f016 0608 	ands.w	r6, r6, #8
 8026762:	d1f8      	bne.n	8026756 <_strtoul_l.constprop.0+0xa>
 8026764:	2c2d      	cmp	r4, #45	; 0x2d
 8026766:	d12f      	bne.n	80267c8 <_strtoul_l.constprop.0+0x7c>
 8026768:	782c      	ldrb	r4, [r5, #0]
 802676a:	2601      	movs	r6, #1
 802676c:	1c85      	adds	r5, r0, #2
 802676e:	2b00      	cmp	r3, #0
 8026770:	d057      	beq.n	8026822 <_strtoul_l.constprop.0+0xd6>
 8026772:	2b10      	cmp	r3, #16
 8026774:	d109      	bne.n	802678a <_strtoul_l.constprop.0+0x3e>
 8026776:	2c30      	cmp	r4, #48	; 0x30
 8026778:	d107      	bne.n	802678a <_strtoul_l.constprop.0+0x3e>
 802677a:	7828      	ldrb	r0, [r5, #0]
 802677c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8026780:	2858      	cmp	r0, #88	; 0x58
 8026782:	d149      	bne.n	8026818 <_strtoul_l.constprop.0+0xcc>
 8026784:	786c      	ldrb	r4, [r5, #1]
 8026786:	2310      	movs	r3, #16
 8026788:	3502      	adds	r5, #2
 802678a:	f04f 38ff 	mov.w	r8, #4294967295
 802678e:	2700      	movs	r7, #0
 8026790:	fbb8 f8f3 	udiv	r8, r8, r3
 8026794:	fb03 f908 	mul.w	r9, r3, r8
 8026798:	ea6f 0909 	mvn.w	r9, r9
 802679c:	4638      	mov	r0, r7
 802679e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80267a2:	f1bc 0f09 	cmp.w	ip, #9
 80267a6:	d814      	bhi.n	80267d2 <_strtoul_l.constprop.0+0x86>
 80267a8:	4664      	mov	r4, ip
 80267aa:	42a3      	cmp	r3, r4
 80267ac:	dd22      	ble.n	80267f4 <_strtoul_l.constprop.0+0xa8>
 80267ae:	2f00      	cmp	r7, #0
 80267b0:	db1d      	blt.n	80267ee <_strtoul_l.constprop.0+0xa2>
 80267b2:	4580      	cmp	r8, r0
 80267b4:	d31b      	bcc.n	80267ee <_strtoul_l.constprop.0+0xa2>
 80267b6:	d101      	bne.n	80267bc <_strtoul_l.constprop.0+0x70>
 80267b8:	45a1      	cmp	r9, r4
 80267ba:	db18      	blt.n	80267ee <_strtoul_l.constprop.0+0xa2>
 80267bc:	fb00 4003 	mla	r0, r0, r3, r4
 80267c0:	2701      	movs	r7, #1
 80267c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80267c6:	e7ea      	b.n	802679e <_strtoul_l.constprop.0+0x52>
 80267c8:	2c2b      	cmp	r4, #43	; 0x2b
 80267ca:	bf04      	itt	eq
 80267cc:	782c      	ldrbeq	r4, [r5, #0]
 80267ce:	1c85      	addeq	r5, r0, #2
 80267d0:	e7cd      	b.n	802676e <_strtoul_l.constprop.0+0x22>
 80267d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80267d6:	f1bc 0f19 	cmp.w	ip, #25
 80267da:	d801      	bhi.n	80267e0 <_strtoul_l.constprop.0+0x94>
 80267dc:	3c37      	subs	r4, #55	; 0x37
 80267de:	e7e4      	b.n	80267aa <_strtoul_l.constprop.0+0x5e>
 80267e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80267e4:	f1bc 0f19 	cmp.w	ip, #25
 80267e8:	d804      	bhi.n	80267f4 <_strtoul_l.constprop.0+0xa8>
 80267ea:	3c57      	subs	r4, #87	; 0x57
 80267ec:	e7dd      	b.n	80267aa <_strtoul_l.constprop.0+0x5e>
 80267ee:	f04f 37ff 	mov.w	r7, #4294967295
 80267f2:	e7e6      	b.n	80267c2 <_strtoul_l.constprop.0+0x76>
 80267f4:	2f00      	cmp	r7, #0
 80267f6:	da07      	bge.n	8026808 <_strtoul_l.constprop.0+0xbc>
 80267f8:	2322      	movs	r3, #34	; 0x22
 80267fa:	f8ce 3000 	str.w	r3, [lr]
 80267fe:	f04f 30ff 	mov.w	r0, #4294967295
 8026802:	b932      	cbnz	r2, 8026812 <_strtoul_l.constprop.0+0xc6>
 8026804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026808:	b106      	cbz	r6, 802680c <_strtoul_l.constprop.0+0xc0>
 802680a:	4240      	negs	r0, r0
 802680c:	2a00      	cmp	r2, #0
 802680e:	d0f9      	beq.n	8026804 <_strtoul_l.constprop.0+0xb8>
 8026810:	b107      	cbz	r7, 8026814 <_strtoul_l.constprop.0+0xc8>
 8026812:	1e69      	subs	r1, r5, #1
 8026814:	6011      	str	r1, [r2, #0]
 8026816:	e7f5      	b.n	8026804 <_strtoul_l.constprop.0+0xb8>
 8026818:	2430      	movs	r4, #48	; 0x30
 802681a:	2b00      	cmp	r3, #0
 802681c:	d1b5      	bne.n	802678a <_strtoul_l.constprop.0+0x3e>
 802681e:	2308      	movs	r3, #8
 8026820:	e7b3      	b.n	802678a <_strtoul_l.constprop.0+0x3e>
 8026822:	2c30      	cmp	r4, #48	; 0x30
 8026824:	d0a9      	beq.n	802677a <_strtoul_l.constprop.0+0x2e>
 8026826:	230a      	movs	r3, #10
 8026828:	e7af      	b.n	802678a <_strtoul_l.constprop.0+0x3e>
 802682a:	bf00      	nop
 802682c:	08037b39 	.word	0x08037b39

08026830 <strtoul>:
 8026830:	4613      	mov	r3, r2
 8026832:	460a      	mov	r2, r1
 8026834:	4601      	mov	r1, r0
 8026836:	4802      	ldr	r0, [pc, #8]	; (8026840 <strtoul+0x10>)
 8026838:	6800      	ldr	r0, [r0, #0]
 802683a:	f7ff bf87 	b.w	802674c <_strtoul_l.constprop.0>
 802683e:	bf00      	nop
 8026840:	200000e0 	.word	0x200000e0

08026844 <_vsniprintf_r>:
 8026844:	b530      	push	{r4, r5, lr}
 8026846:	4614      	mov	r4, r2
 8026848:	2c00      	cmp	r4, #0
 802684a:	b09b      	sub	sp, #108	; 0x6c
 802684c:	4605      	mov	r5, r0
 802684e:	461a      	mov	r2, r3
 8026850:	da05      	bge.n	802685e <_vsniprintf_r+0x1a>
 8026852:	238b      	movs	r3, #139	; 0x8b
 8026854:	6003      	str	r3, [r0, #0]
 8026856:	f04f 30ff 	mov.w	r0, #4294967295
 802685a:	b01b      	add	sp, #108	; 0x6c
 802685c:	bd30      	pop	{r4, r5, pc}
 802685e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8026862:	f8ad 300c 	strh.w	r3, [sp, #12]
 8026866:	bf14      	ite	ne
 8026868:	f104 33ff 	addne.w	r3, r4, #4294967295
 802686c:	4623      	moveq	r3, r4
 802686e:	9302      	str	r3, [sp, #8]
 8026870:	9305      	str	r3, [sp, #20]
 8026872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026876:	9100      	str	r1, [sp, #0]
 8026878:	9104      	str	r1, [sp, #16]
 802687a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802687e:	4669      	mov	r1, sp
 8026880:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026882:	f002 fa35 	bl	8028cf0 <_svfiprintf_r>
 8026886:	1c43      	adds	r3, r0, #1
 8026888:	bfbc      	itt	lt
 802688a:	238b      	movlt	r3, #139	; 0x8b
 802688c:	602b      	strlt	r3, [r5, #0]
 802688e:	2c00      	cmp	r4, #0
 8026890:	d0e3      	beq.n	802685a <_vsniprintf_r+0x16>
 8026892:	9b00      	ldr	r3, [sp, #0]
 8026894:	2200      	movs	r2, #0
 8026896:	701a      	strb	r2, [r3, #0]
 8026898:	e7df      	b.n	802685a <_vsniprintf_r+0x16>
	...

0802689c <vsniprintf>:
 802689c:	b507      	push	{r0, r1, r2, lr}
 802689e:	9300      	str	r3, [sp, #0]
 80268a0:	4613      	mov	r3, r2
 80268a2:	460a      	mov	r2, r1
 80268a4:	4601      	mov	r1, r0
 80268a6:	4803      	ldr	r0, [pc, #12]	; (80268b4 <vsniprintf+0x18>)
 80268a8:	6800      	ldr	r0, [r0, #0]
 80268aa:	f7ff ffcb 	bl	8026844 <_vsniprintf_r>
 80268ae:	b003      	add	sp, #12
 80268b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80268b4:	200000e0 	.word	0x200000e0

080268b8 <__swbuf_r>:
 80268b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80268ba:	460e      	mov	r6, r1
 80268bc:	4614      	mov	r4, r2
 80268be:	4605      	mov	r5, r0
 80268c0:	b118      	cbz	r0, 80268ca <__swbuf_r+0x12>
 80268c2:	6983      	ldr	r3, [r0, #24]
 80268c4:	b90b      	cbnz	r3, 80268ca <__swbuf_r+0x12>
 80268c6:	f001 f84b 	bl	8027960 <__sinit>
 80268ca:	4b21      	ldr	r3, [pc, #132]	; (8026950 <__swbuf_r+0x98>)
 80268cc:	429c      	cmp	r4, r3
 80268ce:	d12b      	bne.n	8026928 <__swbuf_r+0x70>
 80268d0:	686c      	ldr	r4, [r5, #4]
 80268d2:	69a3      	ldr	r3, [r4, #24]
 80268d4:	60a3      	str	r3, [r4, #8]
 80268d6:	89a3      	ldrh	r3, [r4, #12]
 80268d8:	071a      	lsls	r2, r3, #28
 80268da:	d52f      	bpl.n	802693c <__swbuf_r+0x84>
 80268dc:	6923      	ldr	r3, [r4, #16]
 80268de:	b36b      	cbz	r3, 802693c <__swbuf_r+0x84>
 80268e0:	6923      	ldr	r3, [r4, #16]
 80268e2:	6820      	ldr	r0, [r4, #0]
 80268e4:	1ac0      	subs	r0, r0, r3
 80268e6:	6963      	ldr	r3, [r4, #20]
 80268e8:	b2f6      	uxtb	r6, r6
 80268ea:	4283      	cmp	r3, r0
 80268ec:	4637      	mov	r7, r6
 80268ee:	dc04      	bgt.n	80268fa <__swbuf_r+0x42>
 80268f0:	4621      	mov	r1, r4
 80268f2:	4628      	mov	r0, r5
 80268f4:	f000 ffa0 	bl	8027838 <_fflush_r>
 80268f8:	bb30      	cbnz	r0, 8026948 <__swbuf_r+0x90>
 80268fa:	68a3      	ldr	r3, [r4, #8]
 80268fc:	3b01      	subs	r3, #1
 80268fe:	60a3      	str	r3, [r4, #8]
 8026900:	6823      	ldr	r3, [r4, #0]
 8026902:	1c5a      	adds	r2, r3, #1
 8026904:	6022      	str	r2, [r4, #0]
 8026906:	701e      	strb	r6, [r3, #0]
 8026908:	6963      	ldr	r3, [r4, #20]
 802690a:	3001      	adds	r0, #1
 802690c:	4283      	cmp	r3, r0
 802690e:	d004      	beq.n	802691a <__swbuf_r+0x62>
 8026910:	89a3      	ldrh	r3, [r4, #12]
 8026912:	07db      	lsls	r3, r3, #31
 8026914:	d506      	bpl.n	8026924 <__swbuf_r+0x6c>
 8026916:	2e0a      	cmp	r6, #10
 8026918:	d104      	bne.n	8026924 <__swbuf_r+0x6c>
 802691a:	4621      	mov	r1, r4
 802691c:	4628      	mov	r0, r5
 802691e:	f000 ff8b 	bl	8027838 <_fflush_r>
 8026922:	b988      	cbnz	r0, 8026948 <__swbuf_r+0x90>
 8026924:	4638      	mov	r0, r7
 8026926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026928:	4b0a      	ldr	r3, [pc, #40]	; (8026954 <__swbuf_r+0x9c>)
 802692a:	429c      	cmp	r4, r3
 802692c:	d101      	bne.n	8026932 <__swbuf_r+0x7a>
 802692e:	68ac      	ldr	r4, [r5, #8]
 8026930:	e7cf      	b.n	80268d2 <__swbuf_r+0x1a>
 8026932:	4b09      	ldr	r3, [pc, #36]	; (8026958 <__swbuf_r+0xa0>)
 8026934:	429c      	cmp	r4, r3
 8026936:	bf08      	it	eq
 8026938:	68ec      	ldreq	r4, [r5, #12]
 802693a:	e7ca      	b.n	80268d2 <__swbuf_r+0x1a>
 802693c:	4621      	mov	r1, r4
 802693e:	4628      	mov	r0, r5
 8026940:	f000 f80c 	bl	802695c <__swsetup_r>
 8026944:	2800      	cmp	r0, #0
 8026946:	d0cb      	beq.n	80268e0 <__swbuf_r+0x28>
 8026948:	f04f 37ff 	mov.w	r7, #4294967295
 802694c:	e7ea      	b.n	8026924 <__swbuf_r+0x6c>
 802694e:	bf00      	nop
 8026950:	08037cec 	.word	0x08037cec
 8026954:	08037d0c 	.word	0x08037d0c
 8026958:	08037ccc 	.word	0x08037ccc

0802695c <__swsetup_r>:
 802695c:	4b32      	ldr	r3, [pc, #200]	; (8026a28 <__swsetup_r+0xcc>)
 802695e:	b570      	push	{r4, r5, r6, lr}
 8026960:	681d      	ldr	r5, [r3, #0]
 8026962:	4606      	mov	r6, r0
 8026964:	460c      	mov	r4, r1
 8026966:	b125      	cbz	r5, 8026972 <__swsetup_r+0x16>
 8026968:	69ab      	ldr	r3, [r5, #24]
 802696a:	b913      	cbnz	r3, 8026972 <__swsetup_r+0x16>
 802696c:	4628      	mov	r0, r5
 802696e:	f000 fff7 	bl	8027960 <__sinit>
 8026972:	4b2e      	ldr	r3, [pc, #184]	; (8026a2c <__swsetup_r+0xd0>)
 8026974:	429c      	cmp	r4, r3
 8026976:	d10f      	bne.n	8026998 <__swsetup_r+0x3c>
 8026978:	686c      	ldr	r4, [r5, #4]
 802697a:	89a3      	ldrh	r3, [r4, #12]
 802697c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026980:	0719      	lsls	r1, r3, #28
 8026982:	d42c      	bmi.n	80269de <__swsetup_r+0x82>
 8026984:	06dd      	lsls	r5, r3, #27
 8026986:	d411      	bmi.n	80269ac <__swsetup_r+0x50>
 8026988:	2309      	movs	r3, #9
 802698a:	6033      	str	r3, [r6, #0]
 802698c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026990:	81a3      	strh	r3, [r4, #12]
 8026992:	f04f 30ff 	mov.w	r0, #4294967295
 8026996:	e03e      	b.n	8026a16 <__swsetup_r+0xba>
 8026998:	4b25      	ldr	r3, [pc, #148]	; (8026a30 <__swsetup_r+0xd4>)
 802699a:	429c      	cmp	r4, r3
 802699c:	d101      	bne.n	80269a2 <__swsetup_r+0x46>
 802699e:	68ac      	ldr	r4, [r5, #8]
 80269a0:	e7eb      	b.n	802697a <__swsetup_r+0x1e>
 80269a2:	4b24      	ldr	r3, [pc, #144]	; (8026a34 <__swsetup_r+0xd8>)
 80269a4:	429c      	cmp	r4, r3
 80269a6:	bf08      	it	eq
 80269a8:	68ec      	ldreq	r4, [r5, #12]
 80269aa:	e7e6      	b.n	802697a <__swsetup_r+0x1e>
 80269ac:	0758      	lsls	r0, r3, #29
 80269ae:	d512      	bpl.n	80269d6 <__swsetup_r+0x7a>
 80269b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80269b2:	b141      	cbz	r1, 80269c6 <__swsetup_r+0x6a>
 80269b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80269b8:	4299      	cmp	r1, r3
 80269ba:	d002      	beq.n	80269c2 <__swsetup_r+0x66>
 80269bc:	4630      	mov	r0, r6
 80269be:	f7fe fae3 	bl	8024f88 <_free_r>
 80269c2:	2300      	movs	r3, #0
 80269c4:	6363      	str	r3, [r4, #52]	; 0x34
 80269c6:	89a3      	ldrh	r3, [r4, #12]
 80269c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80269cc:	81a3      	strh	r3, [r4, #12]
 80269ce:	2300      	movs	r3, #0
 80269d0:	6063      	str	r3, [r4, #4]
 80269d2:	6923      	ldr	r3, [r4, #16]
 80269d4:	6023      	str	r3, [r4, #0]
 80269d6:	89a3      	ldrh	r3, [r4, #12]
 80269d8:	f043 0308 	orr.w	r3, r3, #8
 80269dc:	81a3      	strh	r3, [r4, #12]
 80269de:	6923      	ldr	r3, [r4, #16]
 80269e0:	b94b      	cbnz	r3, 80269f6 <__swsetup_r+0x9a>
 80269e2:	89a3      	ldrh	r3, [r4, #12]
 80269e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80269e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80269ec:	d003      	beq.n	80269f6 <__swsetup_r+0x9a>
 80269ee:	4621      	mov	r1, r4
 80269f0:	4630      	mov	r0, r6
 80269f2:	f001 fbed 	bl	80281d0 <__smakebuf_r>
 80269f6:	89a0      	ldrh	r0, [r4, #12]
 80269f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80269fc:	f010 0301 	ands.w	r3, r0, #1
 8026a00:	d00a      	beq.n	8026a18 <__swsetup_r+0xbc>
 8026a02:	2300      	movs	r3, #0
 8026a04:	60a3      	str	r3, [r4, #8]
 8026a06:	6963      	ldr	r3, [r4, #20]
 8026a08:	425b      	negs	r3, r3
 8026a0a:	61a3      	str	r3, [r4, #24]
 8026a0c:	6923      	ldr	r3, [r4, #16]
 8026a0e:	b943      	cbnz	r3, 8026a22 <__swsetup_r+0xc6>
 8026a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026a14:	d1ba      	bne.n	802698c <__swsetup_r+0x30>
 8026a16:	bd70      	pop	{r4, r5, r6, pc}
 8026a18:	0781      	lsls	r1, r0, #30
 8026a1a:	bf58      	it	pl
 8026a1c:	6963      	ldrpl	r3, [r4, #20]
 8026a1e:	60a3      	str	r3, [r4, #8]
 8026a20:	e7f4      	b.n	8026a0c <__swsetup_r+0xb0>
 8026a22:	2000      	movs	r0, #0
 8026a24:	e7f7      	b.n	8026a16 <__swsetup_r+0xba>
 8026a26:	bf00      	nop
 8026a28:	200000e0 	.word	0x200000e0
 8026a2c:	08037cec 	.word	0x08037cec
 8026a30:	08037d0c 	.word	0x08037d0c
 8026a34:	08037ccc 	.word	0x08037ccc

08026a38 <quorem>:
 8026a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a3c:	6903      	ldr	r3, [r0, #16]
 8026a3e:	690c      	ldr	r4, [r1, #16]
 8026a40:	42a3      	cmp	r3, r4
 8026a42:	4607      	mov	r7, r0
 8026a44:	f2c0 8081 	blt.w	8026b4a <quorem+0x112>
 8026a48:	3c01      	subs	r4, #1
 8026a4a:	f101 0814 	add.w	r8, r1, #20
 8026a4e:	f100 0514 	add.w	r5, r0, #20
 8026a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026a56:	9301      	str	r3, [sp, #4]
 8026a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026a60:	3301      	adds	r3, #1
 8026a62:	429a      	cmp	r2, r3
 8026a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8026a70:	d331      	bcc.n	8026ad6 <quorem+0x9e>
 8026a72:	f04f 0e00 	mov.w	lr, #0
 8026a76:	4640      	mov	r0, r8
 8026a78:	46ac      	mov	ip, r5
 8026a7a:	46f2      	mov	sl, lr
 8026a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8026a80:	b293      	uxth	r3, r2
 8026a82:	fb06 e303 	mla	r3, r6, r3, lr
 8026a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026a8a:	b29b      	uxth	r3, r3
 8026a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8026a90:	f8dc a000 	ldr.w	sl, [ip]
 8026a94:	0c12      	lsrs	r2, r2, #16
 8026a96:	fa13 f38a 	uxtah	r3, r3, sl
 8026a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8026a9e:	9300      	str	r3, [sp, #0]
 8026aa0:	9b00      	ldr	r3, [sp, #0]
 8026aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026aa6:	b292      	uxth	r2, r2
 8026aa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026ab0:	f8bd 3000 	ldrh.w	r3, [sp]
 8026ab4:	4581      	cmp	r9, r0
 8026ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026aba:	f84c 3b04 	str.w	r3, [ip], #4
 8026abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8026ac2:	d2db      	bcs.n	8026a7c <quorem+0x44>
 8026ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8026ac8:	b92b      	cbnz	r3, 8026ad6 <quorem+0x9e>
 8026aca:	9b01      	ldr	r3, [sp, #4]
 8026acc:	3b04      	subs	r3, #4
 8026ace:	429d      	cmp	r5, r3
 8026ad0:	461a      	mov	r2, r3
 8026ad2:	d32e      	bcc.n	8026b32 <quorem+0xfa>
 8026ad4:	613c      	str	r4, [r7, #16]
 8026ad6:	4638      	mov	r0, r7
 8026ad8:	f001 fea4 	bl	8028824 <__mcmp>
 8026adc:	2800      	cmp	r0, #0
 8026ade:	db24      	blt.n	8026b2a <quorem+0xf2>
 8026ae0:	3601      	adds	r6, #1
 8026ae2:	4628      	mov	r0, r5
 8026ae4:	f04f 0c00 	mov.w	ip, #0
 8026ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8026aec:	f8d0 e000 	ldr.w	lr, [r0]
 8026af0:	b293      	uxth	r3, r2
 8026af2:	ebac 0303 	sub.w	r3, ip, r3
 8026af6:	0c12      	lsrs	r2, r2, #16
 8026af8:	fa13 f38e 	uxtah	r3, r3, lr
 8026afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8026b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026b04:	b29b      	uxth	r3, r3
 8026b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026b0a:	45c1      	cmp	r9, r8
 8026b0c:	f840 3b04 	str.w	r3, [r0], #4
 8026b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026b14:	d2e8      	bcs.n	8026ae8 <quorem+0xb0>
 8026b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026b1e:	b922      	cbnz	r2, 8026b2a <quorem+0xf2>
 8026b20:	3b04      	subs	r3, #4
 8026b22:	429d      	cmp	r5, r3
 8026b24:	461a      	mov	r2, r3
 8026b26:	d30a      	bcc.n	8026b3e <quorem+0x106>
 8026b28:	613c      	str	r4, [r7, #16]
 8026b2a:	4630      	mov	r0, r6
 8026b2c:	b003      	add	sp, #12
 8026b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b32:	6812      	ldr	r2, [r2, #0]
 8026b34:	3b04      	subs	r3, #4
 8026b36:	2a00      	cmp	r2, #0
 8026b38:	d1cc      	bne.n	8026ad4 <quorem+0x9c>
 8026b3a:	3c01      	subs	r4, #1
 8026b3c:	e7c7      	b.n	8026ace <quorem+0x96>
 8026b3e:	6812      	ldr	r2, [r2, #0]
 8026b40:	3b04      	subs	r3, #4
 8026b42:	2a00      	cmp	r2, #0
 8026b44:	d1f0      	bne.n	8026b28 <quorem+0xf0>
 8026b46:	3c01      	subs	r4, #1
 8026b48:	e7eb      	b.n	8026b22 <quorem+0xea>
 8026b4a:	2000      	movs	r0, #0
 8026b4c:	e7ee      	b.n	8026b2c <quorem+0xf4>
	...

08026b50 <_dtoa_r>:
 8026b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b54:	ed2d 8b04 	vpush	{d8-d9}
 8026b58:	ec57 6b10 	vmov	r6, r7, d0
 8026b5c:	b093      	sub	sp, #76	; 0x4c
 8026b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026b64:	9106      	str	r1, [sp, #24]
 8026b66:	ee10 aa10 	vmov	sl, s0
 8026b6a:	4604      	mov	r4, r0
 8026b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8026b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8026b70:	46bb      	mov	fp, r7
 8026b72:	b975      	cbnz	r5, 8026b92 <_dtoa_r+0x42>
 8026b74:	2010      	movs	r0, #16
 8026b76:	f7fe f9e1 	bl	8024f3c <malloc>
 8026b7a:	4602      	mov	r2, r0
 8026b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8026b7e:	b920      	cbnz	r0, 8026b8a <_dtoa_r+0x3a>
 8026b80:	4ba7      	ldr	r3, [pc, #668]	; (8026e20 <_dtoa_r+0x2d0>)
 8026b82:	21ea      	movs	r1, #234	; 0xea
 8026b84:	48a7      	ldr	r0, [pc, #668]	; (8026e24 <_dtoa_r+0x2d4>)
 8026b86:	f002 fa37 	bl	8028ff8 <__assert_func>
 8026b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026b8e:	6005      	str	r5, [r0, #0]
 8026b90:	60c5      	str	r5, [r0, #12]
 8026b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026b94:	6819      	ldr	r1, [r3, #0]
 8026b96:	b151      	cbz	r1, 8026bae <_dtoa_r+0x5e>
 8026b98:	685a      	ldr	r2, [r3, #4]
 8026b9a:	604a      	str	r2, [r1, #4]
 8026b9c:	2301      	movs	r3, #1
 8026b9e:	4093      	lsls	r3, r2
 8026ba0:	608b      	str	r3, [r1, #8]
 8026ba2:	4620      	mov	r0, r4
 8026ba4:	f001 fbb2 	bl	802830c <_Bfree>
 8026ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026baa:	2200      	movs	r2, #0
 8026bac:	601a      	str	r2, [r3, #0]
 8026bae:	1e3b      	subs	r3, r7, #0
 8026bb0:	bfaa      	itet	ge
 8026bb2:	2300      	movge	r3, #0
 8026bb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8026bb8:	f8c8 3000 	strge.w	r3, [r8]
 8026bbc:	4b9a      	ldr	r3, [pc, #616]	; (8026e28 <_dtoa_r+0x2d8>)
 8026bbe:	bfbc      	itt	lt
 8026bc0:	2201      	movlt	r2, #1
 8026bc2:	f8c8 2000 	strlt.w	r2, [r8]
 8026bc6:	ea33 030b 	bics.w	r3, r3, fp
 8026bca:	d11b      	bne.n	8026c04 <_dtoa_r+0xb4>
 8026bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8026bd2:	6013      	str	r3, [r2, #0]
 8026bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026bd8:	4333      	orrs	r3, r6
 8026bda:	f000 8592 	beq.w	8027702 <_dtoa_r+0xbb2>
 8026bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026be0:	b963      	cbnz	r3, 8026bfc <_dtoa_r+0xac>
 8026be2:	4b92      	ldr	r3, [pc, #584]	; (8026e2c <_dtoa_r+0x2dc>)
 8026be4:	e022      	b.n	8026c2c <_dtoa_r+0xdc>
 8026be6:	4b92      	ldr	r3, [pc, #584]	; (8026e30 <_dtoa_r+0x2e0>)
 8026be8:	9301      	str	r3, [sp, #4]
 8026bea:	3308      	adds	r3, #8
 8026bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026bee:	6013      	str	r3, [r2, #0]
 8026bf0:	9801      	ldr	r0, [sp, #4]
 8026bf2:	b013      	add	sp, #76	; 0x4c
 8026bf4:	ecbd 8b04 	vpop	{d8-d9}
 8026bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bfc:	4b8b      	ldr	r3, [pc, #556]	; (8026e2c <_dtoa_r+0x2dc>)
 8026bfe:	9301      	str	r3, [sp, #4]
 8026c00:	3303      	adds	r3, #3
 8026c02:	e7f3      	b.n	8026bec <_dtoa_r+0x9c>
 8026c04:	2200      	movs	r2, #0
 8026c06:	2300      	movs	r3, #0
 8026c08:	4650      	mov	r0, sl
 8026c0a:	4659      	mov	r1, fp
 8026c0c:	f7ea fac4 	bl	8011198 <__aeabi_dcmpeq>
 8026c10:	ec4b ab19 	vmov	d9, sl, fp
 8026c14:	4680      	mov	r8, r0
 8026c16:	b158      	cbz	r0, 8026c30 <_dtoa_r+0xe0>
 8026c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026c1a:	2301      	movs	r3, #1
 8026c1c:	6013      	str	r3, [r2, #0]
 8026c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026c20:	2b00      	cmp	r3, #0
 8026c22:	f000 856b 	beq.w	80276fc <_dtoa_r+0xbac>
 8026c26:	4883      	ldr	r0, [pc, #524]	; (8026e34 <_dtoa_r+0x2e4>)
 8026c28:	6018      	str	r0, [r3, #0]
 8026c2a:	1e43      	subs	r3, r0, #1
 8026c2c:	9301      	str	r3, [sp, #4]
 8026c2e:	e7df      	b.n	8026bf0 <_dtoa_r+0xa0>
 8026c30:	ec4b ab10 	vmov	d0, sl, fp
 8026c34:	aa10      	add	r2, sp, #64	; 0x40
 8026c36:	a911      	add	r1, sp, #68	; 0x44
 8026c38:	4620      	mov	r0, r4
 8026c3a:	f001 ff15 	bl	8028a68 <__d2b>
 8026c3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8026c42:	ee08 0a10 	vmov	s16, r0
 8026c46:	2d00      	cmp	r5, #0
 8026c48:	f000 8084 	beq.w	8026d54 <_dtoa_r+0x204>
 8026c4c:	ee19 3a90 	vmov	r3, s19
 8026c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026c54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8026c58:	4656      	mov	r6, sl
 8026c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8026c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8026c62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8026c66:	4b74      	ldr	r3, [pc, #464]	; (8026e38 <_dtoa_r+0x2e8>)
 8026c68:	2200      	movs	r2, #0
 8026c6a:	4630      	mov	r0, r6
 8026c6c:	4639      	mov	r1, r7
 8026c6e:	f7e9 fe73 	bl	8010958 <__aeabi_dsub>
 8026c72:	a365      	add	r3, pc, #404	; (adr r3, 8026e08 <_dtoa_r+0x2b8>)
 8026c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c78:	f7ea f826 	bl	8010cc8 <__aeabi_dmul>
 8026c7c:	a364      	add	r3, pc, #400	; (adr r3, 8026e10 <_dtoa_r+0x2c0>)
 8026c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c82:	f7e9 fe6b 	bl	801095c <__adddf3>
 8026c86:	4606      	mov	r6, r0
 8026c88:	4628      	mov	r0, r5
 8026c8a:	460f      	mov	r7, r1
 8026c8c:	f7e9 ffb2 	bl	8010bf4 <__aeabi_i2d>
 8026c90:	a361      	add	r3, pc, #388	; (adr r3, 8026e18 <_dtoa_r+0x2c8>)
 8026c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c96:	f7ea f817 	bl	8010cc8 <__aeabi_dmul>
 8026c9a:	4602      	mov	r2, r0
 8026c9c:	460b      	mov	r3, r1
 8026c9e:	4630      	mov	r0, r6
 8026ca0:	4639      	mov	r1, r7
 8026ca2:	f7e9 fe5b 	bl	801095c <__adddf3>
 8026ca6:	4606      	mov	r6, r0
 8026ca8:	460f      	mov	r7, r1
 8026caa:	f7ea fabd 	bl	8011228 <__aeabi_d2iz>
 8026cae:	2200      	movs	r2, #0
 8026cb0:	9000      	str	r0, [sp, #0]
 8026cb2:	2300      	movs	r3, #0
 8026cb4:	4630      	mov	r0, r6
 8026cb6:	4639      	mov	r1, r7
 8026cb8:	f7ea fa78 	bl	80111ac <__aeabi_dcmplt>
 8026cbc:	b150      	cbz	r0, 8026cd4 <_dtoa_r+0x184>
 8026cbe:	9800      	ldr	r0, [sp, #0]
 8026cc0:	f7e9 ff98 	bl	8010bf4 <__aeabi_i2d>
 8026cc4:	4632      	mov	r2, r6
 8026cc6:	463b      	mov	r3, r7
 8026cc8:	f7ea fa66 	bl	8011198 <__aeabi_dcmpeq>
 8026ccc:	b910      	cbnz	r0, 8026cd4 <_dtoa_r+0x184>
 8026cce:	9b00      	ldr	r3, [sp, #0]
 8026cd0:	3b01      	subs	r3, #1
 8026cd2:	9300      	str	r3, [sp, #0]
 8026cd4:	9b00      	ldr	r3, [sp, #0]
 8026cd6:	2b16      	cmp	r3, #22
 8026cd8:	d85a      	bhi.n	8026d90 <_dtoa_r+0x240>
 8026cda:	9a00      	ldr	r2, [sp, #0]
 8026cdc:	4b57      	ldr	r3, [pc, #348]	; (8026e3c <_dtoa_r+0x2ec>)
 8026cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026ce6:	ec51 0b19 	vmov	r0, r1, d9
 8026cea:	f7ea fa5f 	bl	80111ac <__aeabi_dcmplt>
 8026cee:	2800      	cmp	r0, #0
 8026cf0:	d050      	beq.n	8026d94 <_dtoa_r+0x244>
 8026cf2:	9b00      	ldr	r3, [sp, #0]
 8026cf4:	3b01      	subs	r3, #1
 8026cf6:	9300      	str	r3, [sp, #0]
 8026cf8:	2300      	movs	r3, #0
 8026cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8026cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026cfe:	1b5d      	subs	r5, r3, r5
 8026d00:	1e6b      	subs	r3, r5, #1
 8026d02:	9305      	str	r3, [sp, #20]
 8026d04:	bf45      	ittet	mi
 8026d06:	f1c5 0301 	rsbmi	r3, r5, #1
 8026d0a:	9304      	strmi	r3, [sp, #16]
 8026d0c:	2300      	movpl	r3, #0
 8026d0e:	2300      	movmi	r3, #0
 8026d10:	bf4c      	ite	mi
 8026d12:	9305      	strmi	r3, [sp, #20]
 8026d14:	9304      	strpl	r3, [sp, #16]
 8026d16:	9b00      	ldr	r3, [sp, #0]
 8026d18:	2b00      	cmp	r3, #0
 8026d1a:	db3d      	blt.n	8026d98 <_dtoa_r+0x248>
 8026d1c:	9b05      	ldr	r3, [sp, #20]
 8026d1e:	9a00      	ldr	r2, [sp, #0]
 8026d20:	920a      	str	r2, [sp, #40]	; 0x28
 8026d22:	4413      	add	r3, r2
 8026d24:	9305      	str	r3, [sp, #20]
 8026d26:	2300      	movs	r3, #0
 8026d28:	9307      	str	r3, [sp, #28]
 8026d2a:	9b06      	ldr	r3, [sp, #24]
 8026d2c:	2b09      	cmp	r3, #9
 8026d2e:	f200 8089 	bhi.w	8026e44 <_dtoa_r+0x2f4>
 8026d32:	2b05      	cmp	r3, #5
 8026d34:	bfc4      	itt	gt
 8026d36:	3b04      	subgt	r3, #4
 8026d38:	9306      	strgt	r3, [sp, #24]
 8026d3a:	9b06      	ldr	r3, [sp, #24]
 8026d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8026d40:	bfcc      	ite	gt
 8026d42:	2500      	movgt	r5, #0
 8026d44:	2501      	movle	r5, #1
 8026d46:	2b03      	cmp	r3, #3
 8026d48:	f200 8087 	bhi.w	8026e5a <_dtoa_r+0x30a>
 8026d4c:	e8df f003 	tbb	[pc, r3]
 8026d50:	59383a2d 	.word	0x59383a2d
 8026d54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026d58:	441d      	add	r5, r3
 8026d5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8026d5e:	2b20      	cmp	r3, #32
 8026d60:	bfc1      	itttt	gt
 8026d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026d66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8026d6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8026d6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8026d72:	bfda      	itte	le
 8026d74:	f1c3 0320 	rsble	r3, r3, #32
 8026d78:	fa06 f003 	lslle.w	r0, r6, r3
 8026d7c:	4318      	orrgt	r0, r3
 8026d7e:	f7e9 ff29 	bl	8010bd4 <__aeabi_ui2d>
 8026d82:	2301      	movs	r3, #1
 8026d84:	4606      	mov	r6, r0
 8026d86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8026d8a:	3d01      	subs	r5, #1
 8026d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8026d8e:	e76a      	b.n	8026c66 <_dtoa_r+0x116>
 8026d90:	2301      	movs	r3, #1
 8026d92:	e7b2      	b.n	8026cfa <_dtoa_r+0x1aa>
 8026d94:	900b      	str	r0, [sp, #44]	; 0x2c
 8026d96:	e7b1      	b.n	8026cfc <_dtoa_r+0x1ac>
 8026d98:	9b04      	ldr	r3, [sp, #16]
 8026d9a:	9a00      	ldr	r2, [sp, #0]
 8026d9c:	1a9b      	subs	r3, r3, r2
 8026d9e:	9304      	str	r3, [sp, #16]
 8026da0:	4253      	negs	r3, r2
 8026da2:	9307      	str	r3, [sp, #28]
 8026da4:	2300      	movs	r3, #0
 8026da6:	930a      	str	r3, [sp, #40]	; 0x28
 8026da8:	e7bf      	b.n	8026d2a <_dtoa_r+0x1da>
 8026daa:	2300      	movs	r3, #0
 8026dac:	9308      	str	r3, [sp, #32]
 8026dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	dc55      	bgt.n	8026e60 <_dtoa_r+0x310>
 8026db4:	2301      	movs	r3, #1
 8026db6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026dba:	461a      	mov	r2, r3
 8026dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8026dbe:	e00c      	b.n	8026dda <_dtoa_r+0x28a>
 8026dc0:	2301      	movs	r3, #1
 8026dc2:	e7f3      	b.n	8026dac <_dtoa_r+0x25c>
 8026dc4:	2300      	movs	r3, #0
 8026dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026dc8:	9308      	str	r3, [sp, #32]
 8026dca:	9b00      	ldr	r3, [sp, #0]
 8026dcc:	4413      	add	r3, r2
 8026dce:	9302      	str	r3, [sp, #8]
 8026dd0:	3301      	adds	r3, #1
 8026dd2:	2b01      	cmp	r3, #1
 8026dd4:	9303      	str	r3, [sp, #12]
 8026dd6:	bfb8      	it	lt
 8026dd8:	2301      	movlt	r3, #1
 8026dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026ddc:	2200      	movs	r2, #0
 8026dde:	6042      	str	r2, [r0, #4]
 8026de0:	2204      	movs	r2, #4
 8026de2:	f102 0614 	add.w	r6, r2, #20
 8026de6:	429e      	cmp	r6, r3
 8026de8:	6841      	ldr	r1, [r0, #4]
 8026dea:	d93d      	bls.n	8026e68 <_dtoa_r+0x318>
 8026dec:	4620      	mov	r0, r4
 8026dee:	f001 fa4d 	bl	802828c <_Balloc>
 8026df2:	9001      	str	r0, [sp, #4]
 8026df4:	2800      	cmp	r0, #0
 8026df6:	d13b      	bne.n	8026e70 <_dtoa_r+0x320>
 8026df8:	4b11      	ldr	r3, [pc, #68]	; (8026e40 <_dtoa_r+0x2f0>)
 8026dfa:	4602      	mov	r2, r0
 8026dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026e00:	e6c0      	b.n	8026b84 <_dtoa_r+0x34>
 8026e02:	2301      	movs	r3, #1
 8026e04:	e7df      	b.n	8026dc6 <_dtoa_r+0x276>
 8026e06:	bf00      	nop
 8026e08:	636f4361 	.word	0x636f4361
 8026e0c:	3fd287a7 	.word	0x3fd287a7
 8026e10:	8b60c8b3 	.word	0x8b60c8b3
 8026e14:	3fc68a28 	.word	0x3fc68a28
 8026e18:	509f79fb 	.word	0x509f79fb
 8026e1c:	3fd34413 	.word	0x3fd34413
 8026e20:	08037c46 	.word	0x08037c46
 8026e24:	08037c5d 	.word	0x08037c5d
 8026e28:	7ff00000 	.word	0x7ff00000
 8026e2c:	08037c42 	.word	0x08037c42
 8026e30:	08037c39 	.word	0x08037c39
 8026e34:	08037ac1 	.word	0x08037ac1
 8026e38:	3ff80000 	.word	0x3ff80000
 8026e3c:	08037e30 	.word	0x08037e30
 8026e40:	08037cb8 	.word	0x08037cb8
 8026e44:	2501      	movs	r5, #1
 8026e46:	2300      	movs	r3, #0
 8026e48:	9306      	str	r3, [sp, #24]
 8026e4a:	9508      	str	r5, [sp, #32]
 8026e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8026e50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026e54:	2200      	movs	r2, #0
 8026e56:	2312      	movs	r3, #18
 8026e58:	e7b0      	b.n	8026dbc <_dtoa_r+0x26c>
 8026e5a:	2301      	movs	r3, #1
 8026e5c:	9308      	str	r3, [sp, #32]
 8026e5e:	e7f5      	b.n	8026e4c <_dtoa_r+0x2fc>
 8026e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026e66:	e7b8      	b.n	8026dda <_dtoa_r+0x28a>
 8026e68:	3101      	adds	r1, #1
 8026e6a:	6041      	str	r1, [r0, #4]
 8026e6c:	0052      	lsls	r2, r2, #1
 8026e6e:	e7b8      	b.n	8026de2 <_dtoa_r+0x292>
 8026e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026e72:	9a01      	ldr	r2, [sp, #4]
 8026e74:	601a      	str	r2, [r3, #0]
 8026e76:	9b03      	ldr	r3, [sp, #12]
 8026e78:	2b0e      	cmp	r3, #14
 8026e7a:	f200 809d 	bhi.w	8026fb8 <_dtoa_r+0x468>
 8026e7e:	2d00      	cmp	r5, #0
 8026e80:	f000 809a 	beq.w	8026fb8 <_dtoa_r+0x468>
 8026e84:	9b00      	ldr	r3, [sp, #0]
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	dd32      	ble.n	8026ef0 <_dtoa_r+0x3a0>
 8026e8a:	4ab7      	ldr	r2, [pc, #732]	; (8027168 <_dtoa_r+0x618>)
 8026e8c:	f003 030f 	and.w	r3, r3, #15
 8026e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026e98:	9b00      	ldr	r3, [sp, #0]
 8026e9a:	05d8      	lsls	r0, r3, #23
 8026e9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8026ea0:	d516      	bpl.n	8026ed0 <_dtoa_r+0x380>
 8026ea2:	4bb2      	ldr	r3, [pc, #712]	; (802716c <_dtoa_r+0x61c>)
 8026ea4:	ec51 0b19 	vmov	r0, r1, d9
 8026ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8026eac:	f7ea f836 	bl	8010f1c <__aeabi_ddiv>
 8026eb0:	f007 070f 	and.w	r7, r7, #15
 8026eb4:	4682      	mov	sl, r0
 8026eb6:	468b      	mov	fp, r1
 8026eb8:	2503      	movs	r5, #3
 8026eba:	4eac      	ldr	r6, [pc, #688]	; (802716c <_dtoa_r+0x61c>)
 8026ebc:	b957      	cbnz	r7, 8026ed4 <_dtoa_r+0x384>
 8026ebe:	4642      	mov	r2, r8
 8026ec0:	464b      	mov	r3, r9
 8026ec2:	4650      	mov	r0, sl
 8026ec4:	4659      	mov	r1, fp
 8026ec6:	f7ea f829 	bl	8010f1c <__aeabi_ddiv>
 8026eca:	4682      	mov	sl, r0
 8026ecc:	468b      	mov	fp, r1
 8026ece:	e028      	b.n	8026f22 <_dtoa_r+0x3d2>
 8026ed0:	2502      	movs	r5, #2
 8026ed2:	e7f2      	b.n	8026eba <_dtoa_r+0x36a>
 8026ed4:	07f9      	lsls	r1, r7, #31
 8026ed6:	d508      	bpl.n	8026eea <_dtoa_r+0x39a>
 8026ed8:	4640      	mov	r0, r8
 8026eda:	4649      	mov	r1, r9
 8026edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8026ee0:	f7e9 fef2 	bl	8010cc8 <__aeabi_dmul>
 8026ee4:	3501      	adds	r5, #1
 8026ee6:	4680      	mov	r8, r0
 8026ee8:	4689      	mov	r9, r1
 8026eea:	107f      	asrs	r7, r7, #1
 8026eec:	3608      	adds	r6, #8
 8026eee:	e7e5      	b.n	8026ebc <_dtoa_r+0x36c>
 8026ef0:	f000 809b 	beq.w	802702a <_dtoa_r+0x4da>
 8026ef4:	9b00      	ldr	r3, [sp, #0]
 8026ef6:	4f9d      	ldr	r7, [pc, #628]	; (802716c <_dtoa_r+0x61c>)
 8026ef8:	425e      	negs	r6, r3
 8026efa:	4b9b      	ldr	r3, [pc, #620]	; (8027168 <_dtoa_r+0x618>)
 8026efc:	f006 020f 	and.w	r2, r6, #15
 8026f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f08:	ec51 0b19 	vmov	r0, r1, d9
 8026f0c:	f7e9 fedc 	bl	8010cc8 <__aeabi_dmul>
 8026f10:	1136      	asrs	r6, r6, #4
 8026f12:	4682      	mov	sl, r0
 8026f14:	468b      	mov	fp, r1
 8026f16:	2300      	movs	r3, #0
 8026f18:	2502      	movs	r5, #2
 8026f1a:	2e00      	cmp	r6, #0
 8026f1c:	d17a      	bne.n	8027014 <_dtoa_r+0x4c4>
 8026f1e:	2b00      	cmp	r3, #0
 8026f20:	d1d3      	bne.n	8026eca <_dtoa_r+0x37a>
 8026f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	f000 8082 	beq.w	802702e <_dtoa_r+0x4de>
 8026f2a:	4b91      	ldr	r3, [pc, #580]	; (8027170 <_dtoa_r+0x620>)
 8026f2c:	2200      	movs	r2, #0
 8026f2e:	4650      	mov	r0, sl
 8026f30:	4659      	mov	r1, fp
 8026f32:	f7ea f93b 	bl	80111ac <__aeabi_dcmplt>
 8026f36:	2800      	cmp	r0, #0
 8026f38:	d079      	beq.n	802702e <_dtoa_r+0x4de>
 8026f3a:	9b03      	ldr	r3, [sp, #12]
 8026f3c:	2b00      	cmp	r3, #0
 8026f3e:	d076      	beq.n	802702e <_dtoa_r+0x4de>
 8026f40:	9b02      	ldr	r3, [sp, #8]
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	dd36      	ble.n	8026fb4 <_dtoa_r+0x464>
 8026f46:	9b00      	ldr	r3, [sp, #0]
 8026f48:	4650      	mov	r0, sl
 8026f4a:	4659      	mov	r1, fp
 8026f4c:	1e5f      	subs	r7, r3, #1
 8026f4e:	2200      	movs	r2, #0
 8026f50:	4b88      	ldr	r3, [pc, #544]	; (8027174 <_dtoa_r+0x624>)
 8026f52:	f7e9 feb9 	bl	8010cc8 <__aeabi_dmul>
 8026f56:	9e02      	ldr	r6, [sp, #8]
 8026f58:	4682      	mov	sl, r0
 8026f5a:	468b      	mov	fp, r1
 8026f5c:	3501      	adds	r5, #1
 8026f5e:	4628      	mov	r0, r5
 8026f60:	f7e9 fe48 	bl	8010bf4 <__aeabi_i2d>
 8026f64:	4652      	mov	r2, sl
 8026f66:	465b      	mov	r3, fp
 8026f68:	f7e9 feae 	bl	8010cc8 <__aeabi_dmul>
 8026f6c:	4b82      	ldr	r3, [pc, #520]	; (8027178 <_dtoa_r+0x628>)
 8026f6e:	2200      	movs	r2, #0
 8026f70:	f7e9 fcf4 	bl	801095c <__adddf3>
 8026f74:	46d0      	mov	r8, sl
 8026f76:	46d9      	mov	r9, fp
 8026f78:	4682      	mov	sl, r0
 8026f7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8026f7e:	2e00      	cmp	r6, #0
 8026f80:	d158      	bne.n	8027034 <_dtoa_r+0x4e4>
 8026f82:	4b7e      	ldr	r3, [pc, #504]	; (802717c <_dtoa_r+0x62c>)
 8026f84:	2200      	movs	r2, #0
 8026f86:	4640      	mov	r0, r8
 8026f88:	4649      	mov	r1, r9
 8026f8a:	f7e9 fce5 	bl	8010958 <__aeabi_dsub>
 8026f8e:	4652      	mov	r2, sl
 8026f90:	465b      	mov	r3, fp
 8026f92:	4680      	mov	r8, r0
 8026f94:	4689      	mov	r9, r1
 8026f96:	f7ea f927 	bl	80111e8 <__aeabi_dcmpgt>
 8026f9a:	2800      	cmp	r0, #0
 8026f9c:	f040 8295 	bne.w	80274ca <_dtoa_r+0x97a>
 8026fa0:	4652      	mov	r2, sl
 8026fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8026fa6:	4640      	mov	r0, r8
 8026fa8:	4649      	mov	r1, r9
 8026faa:	f7ea f8ff 	bl	80111ac <__aeabi_dcmplt>
 8026fae:	2800      	cmp	r0, #0
 8026fb0:	f040 8289 	bne.w	80274c6 <_dtoa_r+0x976>
 8026fb4:	ec5b ab19 	vmov	sl, fp, d9
 8026fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	f2c0 8148 	blt.w	8027250 <_dtoa_r+0x700>
 8026fc0:	9a00      	ldr	r2, [sp, #0]
 8026fc2:	2a0e      	cmp	r2, #14
 8026fc4:	f300 8144 	bgt.w	8027250 <_dtoa_r+0x700>
 8026fc8:	4b67      	ldr	r3, [pc, #412]	; (8027168 <_dtoa_r+0x618>)
 8026fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	f280 80d5 	bge.w	8027184 <_dtoa_r+0x634>
 8026fda:	9b03      	ldr	r3, [sp, #12]
 8026fdc:	2b00      	cmp	r3, #0
 8026fde:	f300 80d1 	bgt.w	8027184 <_dtoa_r+0x634>
 8026fe2:	f040 826f 	bne.w	80274c4 <_dtoa_r+0x974>
 8026fe6:	4b65      	ldr	r3, [pc, #404]	; (802717c <_dtoa_r+0x62c>)
 8026fe8:	2200      	movs	r2, #0
 8026fea:	4640      	mov	r0, r8
 8026fec:	4649      	mov	r1, r9
 8026fee:	f7e9 fe6b 	bl	8010cc8 <__aeabi_dmul>
 8026ff2:	4652      	mov	r2, sl
 8026ff4:	465b      	mov	r3, fp
 8026ff6:	f7ea f8ed 	bl	80111d4 <__aeabi_dcmpge>
 8026ffa:	9e03      	ldr	r6, [sp, #12]
 8026ffc:	4637      	mov	r7, r6
 8026ffe:	2800      	cmp	r0, #0
 8027000:	f040 8245 	bne.w	802748e <_dtoa_r+0x93e>
 8027004:	9d01      	ldr	r5, [sp, #4]
 8027006:	2331      	movs	r3, #49	; 0x31
 8027008:	f805 3b01 	strb.w	r3, [r5], #1
 802700c:	9b00      	ldr	r3, [sp, #0]
 802700e:	3301      	adds	r3, #1
 8027010:	9300      	str	r3, [sp, #0]
 8027012:	e240      	b.n	8027496 <_dtoa_r+0x946>
 8027014:	07f2      	lsls	r2, r6, #31
 8027016:	d505      	bpl.n	8027024 <_dtoa_r+0x4d4>
 8027018:	e9d7 2300 	ldrd	r2, r3, [r7]
 802701c:	f7e9 fe54 	bl	8010cc8 <__aeabi_dmul>
 8027020:	3501      	adds	r5, #1
 8027022:	2301      	movs	r3, #1
 8027024:	1076      	asrs	r6, r6, #1
 8027026:	3708      	adds	r7, #8
 8027028:	e777      	b.n	8026f1a <_dtoa_r+0x3ca>
 802702a:	2502      	movs	r5, #2
 802702c:	e779      	b.n	8026f22 <_dtoa_r+0x3d2>
 802702e:	9f00      	ldr	r7, [sp, #0]
 8027030:	9e03      	ldr	r6, [sp, #12]
 8027032:	e794      	b.n	8026f5e <_dtoa_r+0x40e>
 8027034:	9901      	ldr	r1, [sp, #4]
 8027036:	4b4c      	ldr	r3, [pc, #304]	; (8027168 <_dtoa_r+0x618>)
 8027038:	4431      	add	r1, r6
 802703a:	910d      	str	r1, [sp, #52]	; 0x34
 802703c:	9908      	ldr	r1, [sp, #32]
 802703e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8027042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8027046:	2900      	cmp	r1, #0
 8027048:	d043      	beq.n	80270d2 <_dtoa_r+0x582>
 802704a:	494d      	ldr	r1, [pc, #308]	; (8027180 <_dtoa_r+0x630>)
 802704c:	2000      	movs	r0, #0
 802704e:	f7e9 ff65 	bl	8010f1c <__aeabi_ddiv>
 8027052:	4652      	mov	r2, sl
 8027054:	465b      	mov	r3, fp
 8027056:	f7e9 fc7f 	bl	8010958 <__aeabi_dsub>
 802705a:	9d01      	ldr	r5, [sp, #4]
 802705c:	4682      	mov	sl, r0
 802705e:	468b      	mov	fp, r1
 8027060:	4649      	mov	r1, r9
 8027062:	4640      	mov	r0, r8
 8027064:	f7ea f8e0 	bl	8011228 <__aeabi_d2iz>
 8027068:	4606      	mov	r6, r0
 802706a:	f7e9 fdc3 	bl	8010bf4 <__aeabi_i2d>
 802706e:	4602      	mov	r2, r0
 8027070:	460b      	mov	r3, r1
 8027072:	4640      	mov	r0, r8
 8027074:	4649      	mov	r1, r9
 8027076:	f7e9 fc6f 	bl	8010958 <__aeabi_dsub>
 802707a:	3630      	adds	r6, #48	; 0x30
 802707c:	f805 6b01 	strb.w	r6, [r5], #1
 8027080:	4652      	mov	r2, sl
 8027082:	465b      	mov	r3, fp
 8027084:	4680      	mov	r8, r0
 8027086:	4689      	mov	r9, r1
 8027088:	f7ea f890 	bl	80111ac <__aeabi_dcmplt>
 802708c:	2800      	cmp	r0, #0
 802708e:	d163      	bne.n	8027158 <_dtoa_r+0x608>
 8027090:	4642      	mov	r2, r8
 8027092:	464b      	mov	r3, r9
 8027094:	4936      	ldr	r1, [pc, #216]	; (8027170 <_dtoa_r+0x620>)
 8027096:	2000      	movs	r0, #0
 8027098:	f7e9 fc5e 	bl	8010958 <__aeabi_dsub>
 802709c:	4652      	mov	r2, sl
 802709e:	465b      	mov	r3, fp
 80270a0:	f7ea f884 	bl	80111ac <__aeabi_dcmplt>
 80270a4:	2800      	cmp	r0, #0
 80270a6:	f040 80b5 	bne.w	8027214 <_dtoa_r+0x6c4>
 80270aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270ac:	429d      	cmp	r5, r3
 80270ae:	d081      	beq.n	8026fb4 <_dtoa_r+0x464>
 80270b0:	4b30      	ldr	r3, [pc, #192]	; (8027174 <_dtoa_r+0x624>)
 80270b2:	2200      	movs	r2, #0
 80270b4:	4650      	mov	r0, sl
 80270b6:	4659      	mov	r1, fp
 80270b8:	f7e9 fe06 	bl	8010cc8 <__aeabi_dmul>
 80270bc:	4b2d      	ldr	r3, [pc, #180]	; (8027174 <_dtoa_r+0x624>)
 80270be:	4682      	mov	sl, r0
 80270c0:	468b      	mov	fp, r1
 80270c2:	4640      	mov	r0, r8
 80270c4:	4649      	mov	r1, r9
 80270c6:	2200      	movs	r2, #0
 80270c8:	f7e9 fdfe 	bl	8010cc8 <__aeabi_dmul>
 80270cc:	4680      	mov	r8, r0
 80270ce:	4689      	mov	r9, r1
 80270d0:	e7c6      	b.n	8027060 <_dtoa_r+0x510>
 80270d2:	4650      	mov	r0, sl
 80270d4:	4659      	mov	r1, fp
 80270d6:	f7e9 fdf7 	bl	8010cc8 <__aeabi_dmul>
 80270da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270dc:	9d01      	ldr	r5, [sp, #4]
 80270de:	930f      	str	r3, [sp, #60]	; 0x3c
 80270e0:	4682      	mov	sl, r0
 80270e2:	468b      	mov	fp, r1
 80270e4:	4649      	mov	r1, r9
 80270e6:	4640      	mov	r0, r8
 80270e8:	f7ea f89e 	bl	8011228 <__aeabi_d2iz>
 80270ec:	4606      	mov	r6, r0
 80270ee:	f7e9 fd81 	bl	8010bf4 <__aeabi_i2d>
 80270f2:	3630      	adds	r6, #48	; 0x30
 80270f4:	4602      	mov	r2, r0
 80270f6:	460b      	mov	r3, r1
 80270f8:	4640      	mov	r0, r8
 80270fa:	4649      	mov	r1, r9
 80270fc:	f7e9 fc2c 	bl	8010958 <__aeabi_dsub>
 8027100:	f805 6b01 	strb.w	r6, [r5], #1
 8027104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027106:	429d      	cmp	r5, r3
 8027108:	4680      	mov	r8, r0
 802710a:	4689      	mov	r9, r1
 802710c:	f04f 0200 	mov.w	r2, #0
 8027110:	d124      	bne.n	802715c <_dtoa_r+0x60c>
 8027112:	4b1b      	ldr	r3, [pc, #108]	; (8027180 <_dtoa_r+0x630>)
 8027114:	4650      	mov	r0, sl
 8027116:	4659      	mov	r1, fp
 8027118:	f7e9 fc20 	bl	801095c <__adddf3>
 802711c:	4602      	mov	r2, r0
 802711e:	460b      	mov	r3, r1
 8027120:	4640      	mov	r0, r8
 8027122:	4649      	mov	r1, r9
 8027124:	f7ea f860 	bl	80111e8 <__aeabi_dcmpgt>
 8027128:	2800      	cmp	r0, #0
 802712a:	d173      	bne.n	8027214 <_dtoa_r+0x6c4>
 802712c:	4652      	mov	r2, sl
 802712e:	465b      	mov	r3, fp
 8027130:	4913      	ldr	r1, [pc, #76]	; (8027180 <_dtoa_r+0x630>)
 8027132:	2000      	movs	r0, #0
 8027134:	f7e9 fc10 	bl	8010958 <__aeabi_dsub>
 8027138:	4602      	mov	r2, r0
 802713a:	460b      	mov	r3, r1
 802713c:	4640      	mov	r0, r8
 802713e:	4649      	mov	r1, r9
 8027140:	f7ea f834 	bl	80111ac <__aeabi_dcmplt>
 8027144:	2800      	cmp	r0, #0
 8027146:	f43f af35 	beq.w	8026fb4 <_dtoa_r+0x464>
 802714a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802714c:	1e6b      	subs	r3, r5, #1
 802714e:	930f      	str	r3, [sp, #60]	; 0x3c
 8027150:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027154:	2b30      	cmp	r3, #48	; 0x30
 8027156:	d0f8      	beq.n	802714a <_dtoa_r+0x5fa>
 8027158:	9700      	str	r7, [sp, #0]
 802715a:	e049      	b.n	80271f0 <_dtoa_r+0x6a0>
 802715c:	4b05      	ldr	r3, [pc, #20]	; (8027174 <_dtoa_r+0x624>)
 802715e:	f7e9 fdb3 	bl	8010cc8 <__aeabi_dmul>
 8027162:	4680      	mov	r8, r0
 8027164:	4689      	mov	r9, r1
 8027166:	e7bd      	b.n	80270e4 <_dtoa_r+0x594>
 8027168:	08037e30 	.word	0x08037e30
 802716c:	08037e08 	.word	0x08037e08
 8027170:	3ff00000 	.word	0x3ff00000
 8027174:	40240000 	.word	0x40240000
 8027178:	401c0000 	.word	0x401c0000
 802717c:	40140000 	.word	0x40140000
 8027180:	3fe00000 	.word	0x3fe00000
 8027184:	9d01      	ldr	r5, [sp, #4]
 8027186:	4656      	mov	r6, sl
 8027188:	465f      	mov	r7, fp
 802718a:	4642      	mov	r2, r8
 802718c:	464b      	mov	r3, r9
 802718e:	4630      	mov	r0, r6
 8027190:	4639      	mov	r1, r7
 8027192:	f7e9 fec3 	bl	8010f1c <__aeabi_ddiv>
 8027196:	f7ea f847 	bl	8011228 <__aeabi_d2iz>
 802719a:	4682      	mov	sl, r0
 802719c:	f7e9 fd2a 	bl	8010bf4 <__aeabi_i2d>
 80271a0:	4642      	mov	r2, r8
 80271a2:	464b      	mov	r3, r9
 80271a4:	f7e9 fd90 	bl	8010cc8 <__aeabi_dmul>
 80271a8:	4602      	mov	r2, r0
 80271aa:	460b      	mov	r3, r1
 80271ac:	4630      	mov	r0, r6
 80271ae:	4639      	mov	r1, r7
 80271b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80271b4:	f7e9 fbd0 	bl	8010958 <__aeabi_dsub>
 80271b8:	f805 6b01 	strb.w	r6, [r5], #1
 80271bc:	9e01      	ldr	r6, [sp, #4]
 80271be:	9f03      	ldr	r7, [sp, #12]
 80271c0:	1bae      	subs	r6, r5, r6
 80271c2:	42b7      	cmp	r7, r6
 80271c4:	4602      	mov	r2, r0
 80271c6:	460b      	mov	r3, r1
 80271c8:	d135      	bne.n	8027236 <_dtoa_r+0x6e6>
 80271ca:	f7e9 fbc7 	bl	801095c <__adddf3>
 80271ce:	4642      	mov	r2, r8
 80271d0:	464b      	mov	r3, r9
 80271d2:	4606      	mov	r6, r0
 80271d4:	460f      	mov	r7, r1
 80271d6:	f7ea f807 	bl	80111e8 <__aeabi_dcmpgt>
 80271da:	b9d0      	cbnz	r0, 8027212 <_dtoa_r+0x6c2>
 80271dc:	4642      	mov	r2, r8
 80271de:	464b      	mov	r3, r9
 80271e0:	4630      	mov	r0, r6
 80271e2:	4639      	mov	r1, r7
 80271e4:	f7e9 ffd8 	bl	8011198 <__aeabi_dcmpeq>
 80271e8:	b110      	cbz	r0, 80271f0 <_dtoa_r+0x6a0>
 80271ea:	f01a 0f01 	tst.w	sl, #1
 80271ee:	d110      	bne.n	8027212 <_dtoa_r+0x6c2>
 80271f0:	4620      	mov	r0, r4
 80271f2:	ee18 1a10 	vmov	r1, s16
 80271f6:	f001 f889 	bl	802830c <_Bfree>
 80271fa:	2300      	movs	r3, #0
 80271fc:	9800      	ldr	r0, [sp, #0]
 80271fe:	702b      	strb	r3, [r5, #0]
 8027200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027202:	3001      	adds	r0, #1
 8027204:	6018      	str	r0, [r3, #0]
 8027206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027208:	2b00      	cmp	r3, #0
 802720a:	f43f acf1 	beq.w	8026bf0 <_dtoa_r+0xa0>
 802720e:	601d      	str	r5, [r3, #0]
 8027210:	e4ee      	b.n	8026bf0 <_dtoa_r+0xa0>
 8027212:	9f00      	ldr	r7, [sp, #0]
 8027214:	462b      	mov	r3, r5
 8027216:	461d      	mov	r5, r3
 8027218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802721c:	2a39      	cmp	r2, #57	; 0x39
 802721e:	d106      	bne.n	802722e <_dtoa_r+0x6de>
 8027220:	9a01      	ldr	r2, [sp, #4]
 8027222:	429a      	cmp	r2, r3
 8027224:	d1f7      	bne.n	8027216 <_dtoa_r+0x6c6>
 8027226:	9901      	ldr	r1, [sp, #4]
 8027228:	2230      	movs	r2, #48	; 0x30
 802722a:	3701      	adds	r7, #1
 802722c:	700a      	strb	r2, [r1, #0]
 802722e:	781a      	ldrb	r2, [r3, #0]
 8027230:	3201      	adds	r2, #1
 8027232:	701a      	strb	r2, [r3, #0]
 8027234:	e790      	b.n	8027158 <_dtoa_r+0x608>
 8027236:	4ba6      	ldr	r3, [pc, #664]	; (80274d0 <_dtoa_r+0x980>)
 8027238:	2200      	movs	r2, #0
 802723a:	f7e9 fd45 	bl	8010cc8 <__aeabi_dmul>
 802723e:	2200      	movs	r2, #0
 8027240:	2300      	movs	r3, #0
 8027242:	4606      	mov	r6, r0
 8027244:	460f      	mov	r7, r1
 8027246:	f7e9 ffa7 	bl	8011198 <__aeabi_dcmpeq>
 802724a:	2800      	cmp	r0, #0
 802724c:	d09d      	beq.n	802718a <_dtoa_r+0x63a>
 802724e:	e7cf      	b.n	80271f0 <_dtoa_r+0x6a0>
 8027250:	9a08      	ldr	r2, [sp, #32]
 8027252:	2a00      	cmp	r2, #0
 8027254:	f000 80d7 	beq.w	8027406 <_dtoa_r+0x8b6>
 8027258:	9a06      	ldr	r2, [sp, #24]
 802725a:	2a01      	cmp	r2, #1
 802725c:	f300 80ba 	bgt.w	80273d4 <_dtoa_r+0x884>
 8027260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027262:	2a00      	cmp	r2, #0
 8027264:	f000 80b2 	beq.w	80273cc <_dtoa_r+0x87c>
 8027268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802726c:	9e07      	ldr	r6, [sp, #28]
 802726e:	9d04      	ldr	r5, [sp, #16]
 8027270:	9a04      	ldr	r2, [sp, #16]
 8027272:	441a      	add	r2, r3
 8027274:	9204      	str	r2, [sp, #16]
 8027276:	9a05      	ldr	r2, [sp, #20]
 8027278:	2101      	movs	r1, #1
 802727a:	441a      	add	r2, r3
 802727c:	4620      	mov	r0, r4
 802727e:	9205      	str	r2, [sp, #20]
 8027280:	f001 f946 	bl	8028510 <__i2b>
 8027284:	4607      	mov	r7, r0
 8027286:	2d00      	cmp	r5, #0
 8027288:	dd0c      	ble.n	80272a4 <_dtoa_r+0x754>
 802728a:	9b05      	ldr	r3, [sp, #20]
 802728c:	2b00      	cmp	r3, #0
 802728e:	dd09      	ble.n	80272a4 <_dtoa_r+0x754>
 8027290:	42ab      	cmp	r3, r5
 8027292:	9a04      	ldr	r2, [sp, #16]
 8027294:	bfa8      	it	ge
 8027296:	462b      	movge	r3, r5
 8027298:	1ad2      	subs	r2, r2, r3
 802729a:	9204      	str	r2, [sp, #16]
 802729c:	9a05      	ldr	r2, [sp, #20]
 802729e:	1aed      	subs	r5, r5, r3
 80272a0:	1ad3      	subs	r3, r2, r3
 80272a2:	9305      	str	r3, [sp, #20]
 80272a4:	9b07      	ldr	r3, [sp, #28]
 80272a6:	b31b      	cbz	r3, 80272f0 <_dtoa_r+0x7a0>
 80272a8:	9b08      	ldr	r3, [sp, #32]
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	f000 80af 	beq.w	802740e <_dtoa_r+0x8be>
 80272b0:	2e00      	cmp	r6, #0
 80272b2:	dd13      	ble.n	80272dc <_dtoa_r+0x78c>
 80272b4:	4639      	mov	r1, r7
 80272b6:	4632      	mov	r2, r6
 80272b8:	4620      	mov	r0, r4
 80272ba:	f001 f9e9 	bl	8028690 <__pow5mult>
 80272be:	ee18 2a10 	vmov	r2, s16
 80272c2:	4601      	mov	r1, r0
 80272c4:	4607      	mov	r7, r0
 80272c6:	4620      	mov	r0, r4
 80272c8:	f001 f938 	bl	802853c <__multiply>
 80272cc:	ee18 1a10 	vmov	r1, s16
 80272d0:	4680      	mov	r8, r0
 80272d2:	4620      	mov	r0, r4
 80272d4:	f001 f81a 	bl	802830c <_Bfree>
 80272d8:	ee08 8a10 	vmov	s16, r8
 80272dc:	9b07      	ldr	r3, [sp, #28]
 80272de:	1b9a      	subs	r2, r3, r6
 80272e0:	d006      	beq.n	80272f0 <_dtoa_r+0x7a0>
 80272e2:	ee18 1a10 	vmov	r1, s16
 80272e6:	4620      	mov	r0, r4
 80272e8:	f001 f9d2 	bl	8028690 <__pow5mult>
 80272ec:	ee08 0a10 	vmov	s16, r0
 80272f0:	2101      	movs	r1, #1
 80272f2:	4620      	mov	r0, r4
 80272f4:	f001 f90c 	bl	8028510 <__i2b>
 80272f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	4606      	mov	r6, r0
 80272fe:	f340 8088 	ble.w	8027412 <_dtoa_r+0x8c2>
 8027302:	461a      	mov	r2, r3
 8027304:	4601      	mov	r1, r0
 8027306:	4620      	mov	r0, r4
 8027308:	f001 f9c2 	bl	8028690 <__pow5mult>
 802730c:	9b06      	ldr	r3, [sp, #24]
 802730e:	2b01      	cmp	r3, #1
 8027310:	4606      	mov	r6, r0
 8027312:	f340 8081 	ble.w	8027418 <_dtoa_r+0x8c8>
 8027316:	f04f 0800 	mov.w	r8, #0
 802731a:	6933      	ldr	r3, [r6, #16]
 802731c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8027320:	6918      	ldr	r0, [r3, #16]
 8027322:	f001 f8a5 	bl	8028470 <__hi0bits>
 8027326:	f1c0 0020 	rsb	r0, r0, #32
 802732a:	9b05      	ldr	r3, [sp, #20]
 802732c:	4418      	add	r0, r3
 802732e:	f010 001f 	ands.w	r0, r0, #31
 8027332:	f000 8092 	beq.w	802745a <_dtoa_r+0x90a>
 8027336:	f1c0 0320 	rsb	r3, r0, #32
 802733a:	2b04      	cmp	r3, #4
 802733c:	f340 808a 	ble.w	8027454 <_dtoa_r+0x904>
 8027340:	f1c0 001c 	rsb	r0, r0, #28
 8027344:	9b04      	ldr	r3, [sp, #16]
 8027346:	4403      	add	r3, r0
 8027348:	9304      	str	r3, [sp, #16]
 802734a:	9b05      	ldr	r3, [sp, #20]
 802734c:	4403      	add	r3, r0
 802734e:	4405      	add	r5, r0
 8027350:	9305      	str	r3, [sp, #20]
 8027352:	9b04      	ldr	r3, [sp, #16]
 8027354:	2b00      	cmp	r3, #0
 8027356:	dd07      	ble.n	8027368 <_dtoa_r+0x818>
 8027358:	ee18 1a10 	vmov	r1, s16
 802735c:	461a      	mov	r2, r3
 802735e:	4620      	mov	r0, r4
 8027360:	f001 f9f0 	bl	8028744 <__lshift>
 8027364:	ee08 0a10 	vmov	s16, r0
 8027368:	9b05      	ldr	r3, [sp, #20]
 802736a:	2b00      	cmp	r3, #0
 802736c:	dd05      	ble.n	802737a <_dtoa_r+0x82a>
 802736e:	4631      	mov	r1, r6
 8027370:	461a      	mov	r2, r3
 8027372:	4620      	mov	r0, r4
 8027374:	f001 f9e6 	bl	8028744 <__lshift>
 8027378:	4606      	mov	r6, r0
 802737a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802737c:	2b00      	cmp	r3, #0
 802737e:	d06e      	beq.n	802745e <_dtoa_r+0x90e>
 8027380:	ee18 0a10 	vmov	r0, s16
 8027384:	4631      	mov	r1, r6
 8027386:	f001 fa4d 	bl	8028824 <__mcmp>
 802738a:	2800      	cmp	r0, #0
 802738c:	da67      	bge.n	802745e <_dtoa_r+0x90e>
 802738e:	9b00      	ldr	r3, [sp, #0]
 8027390:	3b01      	subs	r3, #1
 8027392:	ee18 1a10 	vmov	r1, s16
 8027396:	9300      	str	r3, [sp, #0]
 8027398:	220a      	movs	r2, #10
 802739a:	2300      	movs	r3, #0
 802739c:	4620      	mov	r0, r4
 802739e:	f000 ffd7 	bl	8028350 <__multadd>
 80273a2:	9b08      	ldr	r3, [sp, #32]
 80273a4:	ee08 0a10 	vmov	s16, r0
 80273a8:	2b00      	cmp	r3, #0
 80273aa:	f000 81b1 	beq.w	8027710 <_dtoa_r+0xbc0>
 80273ae:	2300      	movs	r3, #0
 80273b0:	4639      	mov	r1, r7
 80273b2:	220a      	movs	r2, #10
 80273b4:	4620      	mov	r0, r4
 80273b6:	f000 ffcb 	bl	8028350 <__multadd>
 80273ba:	9b02      	ldr	r3, [sp, #8]
 80273bc:	2b00      	cmp	r3, #0
 80273be:	4607      	mov	r7, r0
 80273c0:	f300 808e 	bgt.w	80274e0 <_dtoa_r+0x990>
 80273c4:	9b06      	ldr	r3, [sp, #24]
 80273c6:	2b02      	cmp	r3, #2
 80273c8:	dc51      	bgt.n	802746e <_dtoa_r+0x91e>
 80273ca:	e089      	b.n	80274e0 <_dtoa_r+0x990>
 80273cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80273ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80273d2:	e74b      	b.n	802726c <_dtoa_r+0x71c>
 80273d4:	9b03      	ldr	r3, [sp, #12]
 80273d6:	1e5e      	subs	r6, r3, #1
 80273d8:	9b07      	ldr	r3, [sp, #28]
 80273da:	42b3      	cmp	r3, r6
 80273dc:	bfbf      	itttt	lt
 80273de:	9b07      	ldrlt	r3, [sp, #28]
 80273e0:	9607      	strlt	r6, [sp, #28]
 80273e2:	1af2      	sublt	r2, r6, r3
 80273e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80273e6:	bfb6      	itet	lt
 80273e8:	189b      	addlt	r3, r3, r2
 80273ea:	1b9e      	subge	r6, r3, r6
 80273ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80273ee:	9b03      	ldr	r3, [sp, #12]
 80273f0:	bfb8      	it	lt
 80273f2:	2600      	movlt	r6, #0
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	bfb7      	itett	lt
 80273f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80273fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8027400:	1a9d      	sublt	r5, r3, r2
 8027402:	2300      	movlt	r3, #0
 8027404:	e734      	b.n	8027270 <_dtoa_r+0x720>
 8027406:	9e07      	ldr	r6, [sp, #28]
 8027408:	9d04      	ldr	r5, [sp, #16]
 802740a:	9f08      	ldr	r7, [sp, #32]
 802740c:	e73b      	b.n	8027286 <_dtoa_r+0x736>
 802740e:	9a07      	ldr	r2, [sp, #28]
 8027410:	e767      	b.n	80272e2 <_dtoa_r+0x792>
 8027412:	9b06      	ldr	r3, [sp, #24]
 8027414:	2b01      	cmp	r3, #1
 8027416:	dc18      	bgt.n	802744a <_dtoa_r+0x8fa>
 8027418:	f1ba 0f00 	cmp.w	sl, #0
 802741c:	d115      	bne.n	802744a <_dtoa_r+0x8fa>
 802741e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8027422:	b993      	cbnz	r3, 802744a <_dtoa_r+0x8fa>
 8027424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027428:	0d1b      	lsrs	r3, r3, #20
 802742a:	051b      	lsls	r3, r3, #20
 802742c:	b183      	cbz	r3, 8027450 <_dtoa_r+0x900>
 802742e:	9b04      	ldr	r3, [sp, #16]
 8027430:	3301      	adds	r3, #1
 8027432:	9304      	str	r3, [sp, #16]
 8027434:	9b05      	ldr	r3, [sp, #20]
 8027436:	3301      	adds	r3, #1
 8027438:	9305      	str	r3, [sp, #20]
 802743a:	f04f 0801 	mov.w	r8, #1
 802743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027440:	2b00      	cmp	r3, #0
 8027442:	f47f af6a 	bne.w	802731a <_dtoa_r+0x7ca>
 8027446:	2001      	movs	r0, #1
 8027448:	e76f      	b.n	802732a <_dtoa_r+0x7da>
 802744a:	f04f 0800 	mov.w	r8, #0
 802744e:	e7f6      	b.n	802743e <_dtoa_r+0x8ee>
 8027450:	4698      	mov	r8, r3
 8027452:	e7f4      	b.n	802743e <_dtoa_r+0x8ee>
 8027454:	f43f af7d 	beq.w	8027352 <_dtoa_r+0x802>
 8027458:	4618      	mov	r0, r3
 802745a:	301c      	adds	r0, #28
 802745c:	e772      	b.n	8027344 <_dtoa_r+0x7f4>
 802745e:	9b03      	ldr	r3, [sp, #12]
 8027460:	2b00      	cmp	r3, #0
 8027462:	dc37      	bgt.n	80274d4 <_dtoa_r+0x984>
 8027464:	9b06      	ldr	r3, [sp, #24]
 8027466:	2b02      	cmp	r3, #2
 8027468:	dd34      	ble.n	80274d4 <_dtoa_r+0x984>
 802746a:	9b03      	ldr	r3, [sp, #12]
 802746c:	9302      	str	r3, [sp, #8]
 802746e:	9b02      	ldr	r3, [sp, #8]
 8027470:	b96b      	cbnz	r3, 802748e <_dtoa_r+0x93e>
 8027472:	4631      	mov	r1, r6
 8027474:	2205      	movs	r2, #5
 8027476:	4620      	mov	r0, r4
 8027478:	f000 ff6a 	bl	8028350 <__multadd>
 802747c:	4601      	mov	r1, r0
 802747e:	4606      	mov	r6, r0
 8027480:	ee18 0a10 	vmov	r0, s16
 8027484:	f001 f9ce 	bl	8028824 <__mcmp>
 8027488:	2800      	cmp	r0, #0
 802748a:	f73f adbb 	bgt.w	8027004 <_dtoa_r+0x4b4>
 802748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027490:	9d01      	ldr	r5, [sp, #4]
 8027492:	43db      	mvns	r3, r3
 8027494:	9300      	str	r3, [sp, #0]
 8027496:	f04f 0800 	mov.w	r8, #0
 802749a:	4631      	mov	r1, r6
 802749c:	4620      	mov	r0, r4
 802749e:	f000 ff35 	bl	802830c <_Bfree>
 80274a2:	2f00      	cmp	r7, #0
 80274a4:	f43f aea4 	beq.w	80271f0 <_dtoa_r+0x6a0>
 80274a8:	f1b8 0f00 	cmp.w	r8, #0
 80274ac:	d005      	beq.n	80274ba <_dtoa_r+0x96a>
 80274ae:	45b8      	cmp	r8, r7
 80274b0:	d003      	beq.n	80274ba <_dtoa_r+0x96a>
 80274b2:	4641      	mov	r1, r8
 80274b4:	4620      	mov	r0, r4
 80274b6:	f000 ff29 	bl	802830c <_Bfree>
 80274ba:	4639      	mov	r1, r7
 80274bc:	4620      	mov	r0, r4
 80274be:	f000 ff25 	bl	802830c <_Bfree>
 80274c2:	e695      	b.n	80271f0 <_dtoa_r+0x6a0>
 80274c4:	2600      	movs	r6, #0
 80274c6:	4637      	mov	r7, r6
 80274c8:	e7e1      	b.n	802748e <_dtoa_r+0x93e>
 80274ca:	9700      	str	r7, [sp, #0]
 80274cc:	4637      	mov	r7, r6
 80274ce:	e599      	b.n	8027004 <_dtoa_r+0x4b4>
 80274d0:	40240000 	.word	0x40240000
 80274d4:	9b08      	ldr	r3, [sp, #32]
 80274d6:	2b00      	cmp	r3, #0
 80274d8:	f000 80ca 	beq.w	8027670 <_dtoa_r+0xb20>
 80274dc:	9b03      	ldr	r3, [sp, #12]
 80274de:	9302      	str	r3, [sp, #8]
 80274e0:	2d00      	cmp	r5, #0
 80274e2:	dd05      	ble.n	80274f0 <_dtoa_r+0x9a0>
 80274e4:	4639      	mov	r1, r7
 80274e6:	462a      	mov	r2, r5
 80274e8:	4620      	mov	r0, r4
 80274ea:	f001 f92b 	bl	8028744 <__lshift>
 80274ee:	4607      	mov	r7, r0
 80274f0:	f1b8 0f00 	cmp.w	r8, #0
 80274f4:	d05b      	beq.n	80275ae <_dtoa_r+0xa5e>
 80274f6:	6879      	ldr	r1, [r7, #4]
 80274f8:	4620      	mov	r0, r4
 80274fa:	f000 fec7 	bl	802828c <_Balloc>
 80274fe:	4605      	mov	r5, r0
 8027500:	b928      	cbnz	r0, 802750e <_dtoa_r+0x9be>
 8027502:	4b87      	ldr	r3, [pc, #540]	; (8027720 <_dtoa_r+0xbd0>)
 8027504:	4602      	mov	r2, r0
 8027506:	f240 21ea 	movw	r1, #746	; 0x2ea
 802750a:	f7ff bb3b 	b.w	8026b84 <_dtoa_r+0x34>
 802750e:	693a      	ldr	r2, [r7, #16]
 8027510:	3202      	adds	r2, #2
 8027512:	0092      	lsls	r2, r2, #2
 8027514:	f107 010c 	add.w	r1, r7, #12
 8027518:	300c      	adds	r0, #12
 802751a:	f7fd fd1f 	bl	8024f5c <memcpy>
 802751e:	2201      	movs	r2, #1
 8027520:	4629      	mov	r1, r5
 8027522:	4620      	mov	r0, r4
 8027524:	f001 f90e 	bl	8028744 <__lshift>
 8027528:	9b01      	ldr	r3, [sp, #4]
 802752a:	f103 0901 	add.w	r9, r3, #1
 802752e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8027532:	4413      	add	r3, r2
 8027534:	9305      	str	r3, [sp, #20]
 8027536:	f00a 0301 	and.w	r3, sl, #1
 802753a:	46b8      	mov	r8, r7
 802753c:	9304      	str	r3, [sp, #16]
 802753e:	4607      	mov	r7, r0
 8027540:	4631      	mov	r1, r6
 8027542:	ee18 0a10 	vmov	r0, s16
 8027546:	f7ff fa77 	bl	8026a38 <quorem>
 802754a:	4641      	mov	r1, r8
 802754c:	9002      	str	r0, [sp, #8]
 802754e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8027552:	ee18 0a10 	vmov	r0, s16
 8027556:	f001 f965 	bl	8028824 <__mcmp>
 802755a:	463a      	mov	r2, r7
 802755c:	9003      	str	r0, [sp, #12]
 802755e:	4631      	mov	r1, r6
 8027560:	4620      	mov	r0, r4
 8027562:	f001 f97b 	bl	802885c <__mdiff>
 8027566:	68c2      	ldr	r2, [r0, #12]
 8027568:	f109 3bff 	add.w	fp, r9, #4294967295
 802756c:	4605      	mov	r5, r0
 802756e:	bb02      	cbnz	r2, 80275b2 <_dtoa_r+0xa62>
 8027570:	4601      	mov	r1, r0
 8027572:	ee18 0a10 	vmov	r0, s16
 8027576:	f001 f955 	bl	8028824 <__mcmp>
 802757a:	4602      	mov	r2, r0
 802757c:	4629      	mov	r1, r5
 802757e:	4620      	mov	r0, r4
 8027580:	9207      	str	r2, [sp, #28]
 8027582:	f000 fec3 	bl	802830c <_Bfree>
 8027586:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 802758a:	ea43 0102 	orr.w	r1, r3, r2
 802758e:	9b04      	ldr	r3, [sp, #16]
 8027590:	430b      	orrs	r3, r1
 8027592:	464d      	mov	r5, r9
 8027594:	d10f      	bne.n	80275b6 <_dtoa_r+0xa66>
 8027596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802759a:	d02a      	beq.n	80275f2 <_dtoa_r+0xaa2>
 802759c:	9b03      	ldr	r3, [sp, #12]
 802759e:	2b00      	cmp	r3, #0
 80275a0:	dd02      	ble.n	80275a8 <_dtoa_r+0xa58>
 80275a2:	9b02      	ldr	r3, [sp, #8]
 80275a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80275a8:	f88b a000 	strb.w	sl, [fp]
 80275ac:	e775      	b.n	802749a <_dtoa_r+0x94a>
 80275ae:	4638      	mov	r0, r7
 80275b0:	e7ba      	b.n	8027528 <_dtoa_r+0x9d8>
 80275b2:	2201      	movs	r2, #1
 80275b4:	e7e2      	b.n	802757c <_dtoa_r+0xa2c>
 80275b6:	9b03      	ldr	r3, [sp, #12]
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	db04      	blt.n	80275c6 <_dtoa_r+0xa76>
 80275bc:	9906      	ldr	r1, [sp, #24]
 80275be:	430b      	orrs	r3, r1
 80275c0:	9904      	ldr	r1, [sp, #16]
 80275c2:	430b      	orrs	r3, r1
 80275c4:	d122      	bne.n	802760c <_dtoa_r+0xabc>
 80275c6:	2a00      	cmp	r2, #0
 80275c8:	ddee      	ble.n	80275a8 <_dtoa_r+0xa58>
 80275ca:	ee18 1a10 	vmov	r1, s16
 80275ce:	2201      	movs	r2, #1
 80275d0:	4620      	mov	r0, r4
 80275d2:	f001 f8b7 	bl	8028744 <__lshift>
 80275d6:	4631      	mov	r1, r6
 80275d8:	ee08 0a10 	vmov	s16, r0
 80275dc:	f001 f922 	bl	8028824 <__mcmp>
 80275e0:	2800      	cmp	r0, #0
 80275e2:	dc03      	bgt.n	80275ec <_dtoa_r+0xa9c>
 80275e4:	d1e0      	bne.n	80275a8 <_dtoa_r+0xa58>
 80275e6:	f01a 0f01 	tst.w	sl, #1
 80275ea:	d0dd      	beq.n	80275a8 <_dtoa_r+0xa58>
 80275ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80275f0:	d1d7      	bne.n	80275a2 <_dtoa_r+0xa52>
 80275f2:	2339      	movs	r3, #57	; 0x39
 80275f4:	f88b 3000 	strb.w	r3, [fp]
 80275f8:	462b      	mov	r3, r5
 80275fa:	461d      	mov	r5, r3
 80275fc:	3b01      	subs	r3, #1
 80275fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8027602:	2a39      	cmp	r2, #57	; 0x39
 8027604:	d071      	beq.n	80276ea <_dtoa_r+0xb9a>
 8027606:	3201      	adds	r2, #1
 8027608:	701a      	strb	r2, [r3, #0]
 802760a:	e746      	b.n	802749a <_dtoa_r+0x94a>
 802760c:	2a00      	cmp	r2, #0
 802760e:	dd07      	ble.n	8027620 <_dtoa_r+0xad0>
 8027610:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8027614:	d0ed      	beq.n	80275f2 <_dtoa_r+0xaa2>
 8027616:	f10a 0301 	add.w	r3, sl, #1
 802761a:	f88b 3000 	strb.w	r3, [fp]
 802761e:	e73c      	b.n	802749a <_dtoa_r+0x94a>
 8027620:	9b05      	ldr	r3, [sp, #20]
 8027622:	f809 ac01 	strb.w	sl, [r9, #-1]
 8027626:	4599      	cmp	r9, r3
 8027628:	d047      	beq.n	80276ba <_dtoa_r+0xb6a>
 802762a:	ee18 1a10 	vmov	r1, s16
 802762e:	2300      	movs	r3, #0
 8027630:	220a      	movs	r2, #10
 8027632:	4620      	mov	r0, r4
 8027634:	f000 fe8c 	bl	8028350 <__multadd>
 8027638:	45b8      	cmp	r8, r7
 802763a:	ee08 0a10 	vmov	s16, r0
 802763e:	f04f 0300 	mov.w	r3, #0
 8027642:	f04f 020a 	mov.w	r2, #10
 8027646:	4641      	mov	r1, r8
 8027648:	4620      	mov	r0, r4
 802764a:	d106      	bne.n	802765a <_dtoa_r+0xb0a>
 802764c:	f000 fe80 	bl	8028350 <__multadd>
 8027650:	4680      	mov	r8, r0
 8027652:	4607      	mov	r7, r0
 8027654:	f109 0901 	add.w	r9, r9, #1
 8027658:	e772      	b.n	8027540 <_dtoa_r+0x9f0>
 802765a:	f000 fe79 	bl	8028350 <__multadd>
 802765e:	4639      	mov	r1, r7
 8027660:	4680      	mov	r8, r0
 8027662:	2300      	movs	r3, #0
 8027664:	220a      	movs	r2, #10
 8027666:	4620      	mov	r0, r4
 8027668:	f000 fe72 	bl	8028350 <__multadd>
 802766c:	4607      	mov	r7, r0
 802766e:	e7f1      	b.n	8027654 <_dtoa_r+0xb04>
 8027670:	9b03      	ldr	r3, [sp, #12]
 8027672:	9302      	str	r3, [sp, #8]
 8027674:	9d01      	ldr	r5, [sp, #4]
 8027676:	ee18 0a10 	vmov	r0, s16
 802767a:	4631      	mov	r1, r6
 802767c:	f7ff f9dc 	bl	8026a38 <quorem>
 8027680:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8027684:	9b01      	ldr	r3, [sp, #4]
 8027686:	f805 ab01 	strb.w	sl, [r5], #1
 802768a:	1aea      	subs	r2, r5, r3
 802768c:	9b02      	ldr	r3, [sp, #8]
 802768e:	4293      	cmp	r3, r2
 8027690:	dd09      	ble.n	80276a6 <_dtoa_r+0xb56>
 8027692:	ee18 1a10 	vmov	r1, s16
 8027696:	2300      	movs	r3, #0
 8027698:	220a      	movs	r2, #10
 802769a:	4620      	mov	r0, r4
 802769c:	f000 fe58 	bl	8028350 <__multadd>
 80276a0:	ee08 0a10 	vmov	s16, r0
 80276a4:	e7e7      	b.n	8027676 <_dtoa_r+0xb26>
 80276a6:	9b02      	ldr	r3, [sp, #8]
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	bfc8      	it	gt
 80276ac:	461d      	movgt	r5, r3
 80276ae:	9b01      	ldr	r3, [sp, #4]
 80276b0:	bfd8      	it	le
 80276b2:	2501      	movle	r5, #1
 80276b4:	441d      	add	r5, r3
 80276b6:	f04f 0800 	mov.w	r8, #0
 80276ba:	ee18 1a10 	vmov	r1, s16
 80276be:	2201      	movs	r2, #1
 80276c0:	4620      	mov	r0, r4
 80276c2:	f001 f83f 	bl	8028744 <__lshift>
 80276c6:	4631      	mov	r1, r6
 80276c8:	ee08 0a10 	vmov	s16, r0
 80276cc:	f001 f8aa 	bl	8028824 <__mcmp>
 80276d0:	2800      	cmp	r0, #0
 80276d2:	dc91      	bgt.n	80275f8 <_dtoa_r+0xaa8>
 80276d4:	d102      	bne.n	80276dc <_dtoa_r+0xb8c>
 80276d6:	f01a 0f01 	tst.w	sl, #1
 80276da:	d18d      	bne.n	80275f8 <_dtoa_r+0xaa8>
 80276dc:	462b      	mov	r3, r5
 80276de:	461d      	mov	r5, r3
 80276e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80276e4:	2a30      	cmp	r2, #48	; 0x30
 80276e6:	d0fa      	beq.n	80276de <_dtoa_r+0xb8e>
 80276e8:	e6d7      	b.n	802749a <_dtoa_r+0x94a>
 80276ea:	9a01      	ldr	r2, [sp, #4]
 80276ec:	429a      	cmp	r2, r3
 80276ee:	d184      	bne.n	80275fa <_dtoa_r+0xaaa>
 80276f0:	9b00      	ldr	r3, [sp, #0]
 80276f2:	3301      	adds	r3, #1
 80276f4:	9300      	str	r3, [sp, #0]
 80276f6:	2331      	movs	r3, #49	; 0x31
 80276f8:	7013      	strb	r3, [r2, #0]
 80276fa:	e6ce      	b.n	802749a <_dtoa_r+0x94a>
 80276fc:	4b09      	ldr	r3, [pc, #36]	; (8027724 <_dtoa_r+0xbd4>)
 80276fe:	f7ff ba95 	b.w	8026c2c <_dtoa_r+0xdc>
 8027702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027704:	2b00      	cmp	r3, #0
 8027706:	f47f aa6e 	bne.w	8026be6 <_dtoa_r+0x96>
 802770a:	4b07      	ldr	r3, [pc, #28]	; (8027728 <_dtoa_r+0xbd8>)
 802770c:	f7ff ba8e 	b.w	8026c2c <_dtoa_r+0xdc>
 8027710:	9b02      	ldr	r3, [sp, #8]
 8027712:	2b00      	cmp	r3, #0
 8027714:	dcae      	bgt.n	8027674 <_dtoa_r+0xb24>
 8027716:	9b06      	ldr	r3, [sp, #24]
 8027718:	2b02      	cmp	r3, #2
 802771a:	f73f aea8 	bgt.w	802746e <_dtoa_r+0x91e>
 802771e:	e7a9      	b.n	8027674 <_dtoa_r+0xb24>
 8027720:	08037cb8 	.word	0x08037cb8
 8027724:	08037ac0 	.word	0x08037ac0
 8027728:	08037c39 	.word	0x08037c39

0802772c <__sflush_r>:
 802772c:	898a      	ldrh	r2, [r1, #12]
 802772e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027732:	4605      	mov	r5, r0
 8027734:	0710      	lsls	r0, r2, #28
 8027736:	460c      	mov	r4, r1
 8027738:	d458      	bmi.n	80277ec <__sflush_r+0xc0>
 802773a:	684b      	ldr	r3, [r1, #4]
 802773c:	2b00      	cmp	r3, #0
 802773e:	dc05      	bgt.n	802774c <__sflush_r+0x20>
 8027740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8027742:	2b00      	cmp	r3, #0
 8027744:	dc02      	bgt.n	802774c <__sflush_r+0x20>
 8027746:	2000      	movs	r0, #0
 8027748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802774c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802774e:	2e00      	cmp	r6, #0
 8027750:	d0f9      	beq.n	8027746 <__sflush_r+0x1a>
 8027752:	2300      	movs	r3, #0
 8027754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027758:	682f      	ldr	r7, [r5, #0]
 802775a:	602b      	str	r3, [r5, #0]
 802775c:	d032      	beq.n	80277c4 <__sflush_r+0x98>
 802775e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027760:	89a3      	ldrh	r3, [r4, #12]
 8027762:	075a      	lsls	r2, r3, #29
 8027764:	d505      	bpl.n	8027772 <__sflush_r+0x46>
 8027766:	6863      	ldr	r3, [r4, #4]
 8027768:	1ac0      	subs	r0, r0, r3
 802776a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802776c:	b10b      	cbz	r3, 8027772 <__sflush_r+0x46>
 802776e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027770:	1ac0      	subs	r0, r0, r3
 8027772:	2300      	movs	r3, #0
 8027774:	4602      	mov	r2, r0
 8027776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027778:	6a21      	ldr	r1, [r4, #32]
 802777a:	4628      	mov	r0, r5
 802777c:	47b0      	blx	r6
 802777e:	1c43      	adds	r3, r0, #1
 8027780:	89a3      	ldrh	r3, [r4, #12]
 8027782:	d106      	bne.n	8027792 <__sflush_r+0x66>
 8027784:	6829      	ldr	r1, [r5, #0]
 8027786:	291d      	cmp	r1, #29
 8027788:	d82c      	bhi.n	80277e4 <__sflush_r+0xb8>
 802778a:	4a2a      	ldr	r2, [pc, #168]	; (8027834 <__sflush_r+0x108>)
 802778c:	40ca      	lsrs	r2, r1
 802778e:	07d6      	lsls	r6, r2, #31
 8027790:	d528      	bpl.n	80277e4 <__sflush_r+0xb8>
 8027792:	2200      	movs	r2, #0
 8027794:	6062      	str	r2, [r4, #4]
 8027796:	04d9      	lsls	r1, r3, #19
 8027798:	6922      	ldr	r2, [r4, #16]
 802779a:	6022      	str	r2, [r4, #0]
 802779c:	d504      	bpl.n	80277a8 <__sflush_r+0x7c>
 802779e:	1c42      	adds	r2, r0, #1
 80277a0:	d101      	bne.n	80277a6 <__sflush_r+0x7a>
 80277a2:	682b      	ldr	r3, [r5, #0]
 80277a4:	b903      	cbnz	r3, 80277a8 <__sflush_r+0x7c>
 80277a6:	6560      	str	r0, [r4, #84]	; 0x54
 80277a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80277aa:	602f      	str	r7, [r5, #0]
 80277ac:	2900      	cmp	r1, #0
 80277ae:	d0ca      	beq.n	8027746 <__sflush_r+0x1a>
 80277b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80277b4:	4299      	cmp	r1, r3
 80277b6:	d002      	beq.n	80277be <__sflush_r+0x92>
 80277b8:	4628      	mov	r0, r5
 80277ba:	f7fd fbe5 	bl	8024f88 <_free_r>
 80277be:	2000      	movs	r0, #0
 80277c0:	6360      	str	r0, [r4, #52]	; 0x34
 80277c2:	e7c1      	b.n	8027748 <__sflush_r+0x1c>
 80277c4:	6a21      	ldr	r1, [r4, #32]
 80277c6:	2301      	movs	r3, #1
 80277c8:	4628      	mov	r0, r5
 80277ca:	47b0      	blx	r6
 80277cc:	1c41      	adds	r1, r0, #1
 80277ce:	d1c7      	bne.n	8027760 <__sflush_r+0x34>
 80277d0:	682b      	ldr	r3, [r5, #0]
 80277d2:	2b00      	cmp	r3, #0
 80277d4:	d0c4      	beq.n	8027760 <__sflush_r+0x34>
 80277d6:	2b1d      	cmp	r3, #29
 80277d8:	d001      	beq.n	80277de <__sflush_r+0xb2>
 80277da:	2b16      	cmp	r3, #22
 80277dc:	d101      	bne.n	80277e2 <__sflush_r+0xb6>
 80277de:	602f      	str	r7, [r5, #0]
 80277e0:	e7b1      	b.n	8027746 <__sflush_r+0x1a>
 80277e2:	89a3      	ldrh	r3, [r4, #12]
 80277e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80277e8:	81a3      	strh	r3, [r4, #12]
 80277ea:	e7ad      	b.n	8027748 <__sflush_r+0x1c>
 80277ec:	690f      	ldr	r7, [r1, #16]
 80277ee:	2f00      	cmp	r7, #0
 80277f0:	d0a9      	beq.n	8027746 <__sflush_r+0x1a>
 80277f2:	0793      	lsls	r3, r2, #30
 80277f4:	680e      	ldr	r6, [r1, #0]
 80277f6:	bf08      	it	eq
 80277f8:	694b      	ldreq	r3, [r1, #20]
 80277fa:	600f      	str	r7, [r1, #0]
 80277fc:	bf18      	it	ne
 80277fe:	2300      	movne	r3, #0
 8027800:	eba6 0807 	sub.w	r8, r6, r7
 8027804:	608b      	str	r3, [r1, #8]
 8027806:	f1b8 0f00 	cmp.w	r8, #0
 802780a:	dd9c      	ble.n	8027746 <__sflush_r+0x1a>
 802780c:	6a21      	ldr	r1, [r4, #32]
 802780e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027810:	4643      	mov	r3, r8
 8027812:	463a      	mov	r2, r7
 8027814:	4628      	mov	r0, r5
 8027816:	47b0      	blx	r6
 8027818:	2800      	cmp	r0, #0
 802781a:	dc06      	bgt.n	802782a <__sflush_r+0xfe>
 802781c:	89a3      	ldrh	r3, [r4, #12]
 802781e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027822:	81a3      	strh	r3, [r4, #12]
 8027824:	f04f 30ff 	mov.w	r0, #4294967295
 8027828:	e78e      	b.n	8027748 <__sflush_r+0x1c>
 802782a:	4407      	add	r7, r0
 802782c:	eba8 0800 	sub.w	r8, r8, r0
 8027830:	e7e9      	b.n	8027806 <__sflush_r+0xda>
 8027832:	bf00      	nop
 8027834:	20400001 	.word	0x20400001

08027838 <_fflush_r>:
 8027838:	b538      	push	{r3, r4, r5, lr}
 802783a:	690b      	ldr	r3, [r1, #16]
 802783c:	4605      	mov	r5, r0
 802783e:	460c      	mov	r4, r1
 8027840:	b913      	cbnz	r3, 8027848 <_fflush_r+0x10>
 8027842:	2500      	movs	r5, #0
 8027844:	4628      	mov	r0, r5
 8027846:	bd38      	pop	{r3, r4, r5, pc}
 8027848:	b118      	cbz	r0, 8027852 <_fflush_r+0x1a>
 802784a:	6983      	ldr	r3, [r0, #24]
 802784c:	b90b      	cbnz	r3, 8027852 <_fflush_r+0x1a>
 802784e:	f000 f887 	bl	8027960 <__sinit>
 8027852:	4b14      	ldr	r3, [pc, #80]	; (80278a4 <_fflush_r+0x6c>)
 8027854:	429c      	cmp	r4, r3
 8027856:	d11b      	bne.n	8027890 <_fflush_r+0x58>
 8027858:	686c      	ldr	r4, [r5, #4]
 802785a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802785e:	2b00      	cmp	r3, #0
 8027860:	d0ef      	beq.n	8027842 <_fflush_r+0xa>
 8027862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027864:	07d0      	lsls	r0, r2, #31
 8027866:	d404      	bmi.n	8027872 <_fflush_r+0x3a>
 8027868:	0599      	lsls	r1, r3, #22
 802786a:	d402      	bmi.n	8027872 <_fflush_r+0x3a>
 802786c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802786e:	f000 fc88 	bl	8028182 <__retarget_lock_acquire_recursive>
 8027872:	4628      	mov	r0, r5
 8027874:	4621      	mov	r1, r4
 8027876:	f7ff ff59 	bl	802772c <__sflush_r>
 802787a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802787c:	07da      	lsls	r2, r3, #31
 802787e:	4605      	mov	r5, r0
 8027880:	d4e0      	bmi.n	8027844 <_fflush_r+0xc>
 8027882:	89a3      	ldrh	r3, [r4, #12]
 8027884:	059b      	lsls	r3, r3, #22
 8027886:	d4dd      	bmi.n	8027844 <_fflush_r+0xc>
 8027888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802788a:	f000 fc7b 	bl	8028184 <__retarget_lock_release_recursive>
 802788e:	e7d9      	b.n	8027844 <_fflush_r+0xc>
 8027890:	4b05      	ldr	r3, [pc, #20]	; (80278a8 <_fflush_r+0x70>)
 8027892:	429c      	cmp	r4, r3
 8027894:	d101      	bne.n	802789a <_fflush_r+0x62>
 8027896:	68ac      	ldr	r4, [r5, #8]
 8027898:	e7df      	b.n	802785a <_fflush_r+0x22>
 802789a:	4b04      	ldr	r3, [pc, #16]	; (80278ac <_fflush_r+0x74>)
 802789c:	429c      	cmp	r4, r3
 802789e:	bf08      	it	eq
 80278a0:	68ec      	ldreq	r4, [r5, #12]
 80278a2:	e7da      	b.n	802785a <_fflush_r+0x22>
 80278a4:	08037cec 	.word	0x08037cec
 80278a8:	08037d0c 	.word	0x08037d0c
 80278ac:	08037ccc 	.word	0x08037ccc

080278b0 <std>:
 80278b0:	2300      	movs	r3, #0
 80278b2:	b510      	push	{r4, lr}
 80278b4:	4604      	mov	r4, r0
 80278b6:	e9c0 3300 	strd	r3, r3, [r0]
 80278ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80278be:	6083      	str	r3, [r0, #8]
 80278c0:	8181      	strh	r1, [r0, #12]
 80278c2:	6643      	str	r3, [r0, #100]	; 0x64
 80278c4:	81c2      	strh	r2, [r0, #14]
 80278c6:	6183      	str	r3, [r0, #24]
 80278c8:	4619      	mov	r1, r3
 80278ca:	2208      	movs	r2, #8
 80278cc:	305c      	adds	r0, #92	; 0x5c
 80278ce:	f7fd fb53 	bl	8024f78 <memset>
 80278d2:	4b05      	ldr	r3, [pc, #20]	; (80278e8 <std+0x38>)
 80278d4:	6263      	str	r3, [r4, #36]	; 0x24
 80278d6:	4b05      	ldr	r3, [pc, #20]	; (80278ec <std+0x3c>)
 80278d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80278da:	4b05      	ldr	r3, [pc, #20]	; (80278f0 <std+0x40>)
 80278dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80278de:	4b05      	ldr	r3, [pc, #20]	; (80278f4 <std+0x44>)
 80278e0:	6224      	str	r4, [r4, #32]
 80278e2:	6323      	str	r3, [r4, #48]	; 0x30
 80278e4:	bd10      	pop	{r4, pc}
 80278e6:	bf00      	nop
 80278e8:	08028f0d 	.word	0x08028f0d
 80278ec:	08028f2f 	.word	0x08028f2f
 80278f0:	08028f67 	.word	0x08028f67
 80278f4:	08028f8b 	.word	0x08028f8b

080278f8 <_cleanup_r>:
 80278f8:	4901      	ldr	r1, [pc, #4]	; (8027900 <_cleanup_r+0x8>)
 80278fa:	f000 b8af 	b.w	8027a5c <_fwalk_reent>
 80278fe:	bf00      	nop
 8027900:	08027839 	.word	0x08027839

08027904 <__sfmoreglue>:
 8027904:	b570      	push	{r4, r5, r6, lr}
 8027906:	2268      	movs	r2, #104	; 0x68
 8027908:	1e4d      	subs	r5, r1, #1
 802790a:	4355      	muls	r5, r2
 802790c:	460e      	mov	r6, r1
 802790e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8027912:	f7fd fba5 	bl	8025060 <_malloc_r>
 8027916:	4604      	mov	r4, r0
 8027918:	b140      	cbz	r0, 802792c <__sfmoreglue+0x28>
 802791a:	2100      	movs	r1, #0
 802791c:	e9c0 1600 	strd	r1, r6, [r0]
 8027920:	300c      	adds	r0, #12
 8027922:	60a0      	str	r0, [r4, #8]
 8027924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027928:	f7fd fb26 	bl	8024f78 <memset>
 802792c:	4620      	mov	r0, r4
 802792e:	bd70      	pop	{r4, r5, r6, pc}

08027930 <__sfp_lock_acquire>:
 8027930:	4801      	ldr	r0, [pc, #4]	; (8027938 <__sfp_lock_acquire+0x8>)
 8027932:	f000 bc26 	b.w	8028182 <__retarget_lock_acquire_recursive>
 8027936:	bf00      	nop
 8027938:	2000b36d 	.word	0x2000b36d

0802793c <__sfp_lock_release>:
 802793c:	4801      	ldr	r0, [pc, #4]	; (8027944 <__sfp_lock_release+0x8>)
 802793e:	f000 bc21 	b.w	8028184 <__retarget_lock_release_recursive>
 8027942:	bf00      	nop
 8027944:	2000b36d 	.word	0x2000b36d

08027948 <__sinit_lock_acquire>:
 8027948:	4801      	ldr	r0, [pc, #4]	; (8027950 <__sinit_lock_acquire+0x8>)
 802794a:	f000 bc1a 	b.w	8028182 <__retarget_lock_acquire_recursive>
 802794e:	bf00      	nop
 8027950:	2000b36e 	.word	0x2000b36e

08027954 <__sinit_lock_release>:
 8027954:	4801      	ldr	r0, [pc, #4]	; (802795c <__sinit_lock_release+0x8>)
 8027956:	f000 bc15 	b.w	8028184 <__retarget_lock_release_recursive>
 802795a:	bf00      	nop
 802795c:	2000b36e 	.word	0x2000b36e

08027960 <__sinit>:
 8027960:	b510      	push	{r4, lr}
 8027962:	4604      	mov	r4, r0
 8027964:	f7ff fff0 	bl	8027948 <__sinit_lock_acquire>
 8027968:	69a3      	ldr	r3, [r4, #24]
 802796a:	b11b      	cbz	r3, 8027974 <__sinit+0x14>
 802796c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027970:	f7ff bff0 	b.w	8027954 <__sinit_lock_release>
 8027974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027978:	6523      	str	r3, [r4, #80]	; 0x50
 802797a:	4b13      	ldr	r3, [pc, #76]	; (80279c8 <__sinit+0x68>)
 802797c:	4a13      	ldr	r2, [pc, #76]	; (80279cc <__sinit+0x6c>)
 802797e:	681b      	ldr	r3, [r3, #0]
 8027980:	62a2      	str	r2, [r4, #40]	; 0x28
 8027982:	42a3      	cmp	r3, r4
 8027984:	bf04      	itt	eq
 8027986:	2301      	moveq	r3, #1
 8027988:	61a3      	streq	r3, [r4, #24]
 802798a:	4620      	mov	r0, r4
 802798c:	f000 f820 	bl	80279d0 <__sfp>
 8027990:	6060      	str	r0, [r4, #4]
 8027992:	4620      	mov	r0, r4
 8027994:	f000 f81c 	bl	80279d0 <__sfp>
 8027998:	60a0      	str	r0, [r4, #8]
 802799a:	4620      	mov	r0, r4
 802799c:	f000 f818 	bl	80279d0 <__sfp>
 80279a0:	2200      	movs	r2, #0
 80279a2:	60e0      	str	r0, [r4, #12]
 80279a4:	2104      	movs	r1, #4
 80279a6:	6860      	ldr	r0, [r4, #4]
 80279a8:	f7ff ff82 	bl	80278b0 <std>
 80279ac:	68a0      	ldr	r0, [r4, #8]
 80279ae:	2201      	movs	r2, #1
 80279b0:	2109      	movs	r1, #9
 80279b2:	f7ff ff7d 	bl	80278b0 <std>
 80279b6:	68e0      	ldr	r0, [r4, #12]
 80279b8:	2202      	movs	r2, #2
 80279ba:	2112      	movs	r1, #18
 80279bc:	f7ff ff78 	bl	80278b0 <std>
 80279c0:	2301      	movs	r3, #1
 80279c2:	61a3      	str	r3, [r4, #24]
 80279c4:	e7d2      	b.n	802796c <__sinit+0xc>
 80279c6:	bf00      	nop
 80279c8:	08037aac 	.word	0x08037aac
 80279cc:	080278f9 	.word	0x080278f9

080279d0 <__sfp>:
 80279d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279d2:	4607      	mov	r7, r0
 80279d4:	f7ff ffac 	bl	8027930 <__sfp_lock_acquire>
 80279d8:	4b1e      	ldr	r3, [pc, #120]	; (8027a54 <__sfp+0x84>)
 80279da:	681e      	ldr	r6, [r3, #0]
 80279dc:	69b3      	ldr	r3, [r6, #24]
 80279de:	b913      	cbnz	r3, 80279e6 <__sfp+0x16>
 80279e0:	4630      	mov	r0, r6
 80279e2:	f7ff ffbd 	bl	8027960 <__sinit>
 80279e6:	3648      	adds	r6, #72	; 0x48
 80279e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80279ec:	3b01      	subs	r3, #1
 80279ee:	d503      	bpl.n	80279f8 <__sfp+0x28>
 80279f0:	6833      	ldr	r3, [r6, #0]
 80279f2:	b30b      	cbz	r3, 8027a38 <__sfp+0x68>
 80279f4:	6836      	ldr	r6, [r6, #0]
 80279f6:	e7f7      	b.n	80279e8 <__sfp+0x18>
 80279f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80279fc:	b9d5      	cbnz	r5, 8027a34 <__sfp+0x64>
 80279fe:	4b16      	ldr	r3, [pc, #88]	; (8027a58 <__sfp+0x88>)
 8027a00:	60e3      	str	r3, [r4, #12]
 8027a02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8027a06:	6665      	str	r5, [r4, #100]	; 0x64
 8027a08:	f000 fbba 	bl	8028180 <__retarget_lock_init_recursive>
 8027a0c:	f7ff ff96 	bl	802793c <__sfp_lock_release>
 8027a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8027a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027a18:	6025      	str	r5, [r4, #0]
 8027a1a:	61a5      	str	r5, [r4, #24]
 8027a1c:	2208      	movs	r2, #8
 8027a1e:	4629      	mov	r1, r5
 8027a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8027a24:	f7fd faa8 	bl	8024f78 <memset>
 8027a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027a30:	4620      	mov	r0, r4
 8027a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a34:	3468      	adds	r4, #104	; 0x68
 8027a36:	e7d9      	b.n	80279ec <__sfp+0x1c>
 8027a38:	2104      	movs	r1, #4
 8027a3a:	4638      	mov	r0, r7
 8027a3c:	f7ff ff62 	bl	8027904 <__sfmoreglue>
 8027a40:	4604      	mov	r4, r0
 8027a42:	6030      	str	r0, [r6, #0]
 8027a44:	2800      	cmp	r0, #0
 8027a46:	d1d5      	bne.n	80279f4 <__sfp+0x24>
 8027a48:	f7ff ff78 	bl	802793c <__sfp_lock_release>
 8027a4c:	230c      	movs	r3, #12
 8027a4e:	603b      	str	r3, [r7, #0]
 8027a50:	e7ee      	b.n	8027a30 <__sfp+0x60>
 8027a52:	bf00      	nop
 8027a54:	08037aac 	.word	0x08037aac
 8027a58:	ffff0001 	.word	0xffff0001

08027a5c <_fwalk_reent>:
 8027a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027a60:	4606      	mov	r6, r0
 8027a62:	4688      	mov	r8, r1
 8027a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027a68:	2700      	movs	r7, #0
 8027a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8027a72:	d505      	bpl.n	8027a80 <_fwalk_reent+0x24>
 8027a74:	6824      	ldr	r4, [r4, #0]
 8027a76:	2c00      	cmp	r4, #0
 8027a78:	d1f7      	bne.n	8027a6a <_fwalk_reent+0xe>
 8027a7a:	4638      	mov	r0, r7
 8027a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027a80:	89ab      	ldrh	r3, [r5, #12]
 8027a82:	2b01      	cmp	r3, #1
 8027a84:	d907      	bls.n	8027a96 <_fwalk_reent+0x3a>
 8027a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027a8a:	3301      	adds	r3, #1
 8027a8c:	d003      	beq.n	8027a96 <_fwalk_reent+0x3a>
 8027a8e:	4629      	mov	r1, r5
 8027a90:	4630      	mov	r0, r6
 8027a92:	47c0      	blx	r8
 8027a94:	4307      	orrs	r7, r0
 8027a96:	3568      	adds	r5, #104	; 0x68
 8027a98:	e7e9      	b.n	8027a6e <_fwalk_reent+0x12>

08027a9a <rshift>:
 8027a9a:	6903      	ldr	r3, [r0, #16]
 8027a9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8027aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027aa4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8027aa8:	f100 0414 	add.w	r4, r0, #20
 8027aac:	dd45      	ble.n	8027b3a <rshift+0xa0>
 8027aae:	f011 011f 	ands.w	r1, r1, #31
 8027ab2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8027ab6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8027aba:	d10c      	bne.n	8027ad6 <rshift+0x3c>
 8027abc:	f100 0710 	add.w	r7, r0, #16
 8027ac0:	4629      	mov	r1, r5
 8027ac2:	42b1      	cmp	r1, r6
 8027ac4:	d334      	bcc.n	8027b30 <rshift+0x96>
 8027ac6:	1a9b      	subs	r3, r3, r2
 8027ac8:	009b      	lsls	r3, r3, #2
 8027aca:	1eea      	subs	r2, r5, #3
 8027acc:	4296      	cmp	r6, r2
 8027ace:	bf38      	it	cc
 8027ad0:	2300      	movcc	r3, #0
 8027ad2:	4423      	add	r3, r4
 8027ad4:	e015      	b.n	8027b02 <rshift+0x68>
 8027ad6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8027ada:	f1c1 0820 	rsb	r8, r1, #32
 8027ade:	40cf      	lsrs	r7, r1
 8027ae0:	f105 0e04 	add.w	lr, r5, #4
 8027ae4:	46a1      	mov	r9, r4
 8027ae6:	4576      	cmp	r6, lr
 8027ae8:	46f4      	mov	ip, lr
 8027aea:	d815      	bhi.n	8027b18 <rshift+0x7e>
 8027aec:	1a9a      	subs	r2, r3, r2
 8027aee:	0092      	lsls	r2, r2, #2
 8027af0:	3a04      	subs	r2, #4
 8027af2:	3501      	adds	r5, #1
 8027af4:	42ae      	cmp	r6, r5
 8027af6:	bf38      	it	cc
 8027af8:	2200      	movcc	r2, #0
 8027afa:	18a3      	adds	r3, r4, r2
 8027afc:	50a7      	str	r7, [r4, r2]
 8027afe:	b107      	cbz	r7, 8027b02 <rshift+0x68>
 8027b00:	3304      	adds	r3, #4
 8027b02:	1b1a      	subs	r2, r3, r4
 8027b04:	42a3      	cmp	r3, r4
 8027b06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8027b0a:	bf08      	it	eq
 8027b0c:	2300      	moveq	r3, #0
 8027b0e:	6102      	str	r2, [r0, #16]
 8027b10:	bf08      	it	eq
 8027b12:	6143      	streq	r3, [r0, #20]
 8027b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027b18:	f8dc c000 	ldr.w	ip, [ip]
 8027b1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8027b20:	ea4c 0707 	orr.w	r7, ip, r7
 8027b24:	f849 7b04 	str.w	r7, [r9], #4
 8027b28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027b2c:	40cf      	lsrs	r7, r1
 8027b2e:	e7da      	b.n	8027ae6 <rshift+0x4c>
 8027b30:	f851 cb04 	ldr.w	ip, [r1], #4
 8027b34:	f847 cf04 	str.w	ip, [r7, #4]!
 8027b38:	e7c3      	b.n	8027ac2 <rshift+0x28>
 8027b3a:	4623      	mov	r3, r4
 8027b3c:	e7e1      	b.n	8027b02 <rshift+0x68>

08027b3e <__hexdig_fun>:
 8027b3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8027b42:	2b09      	cmp	r3, #9
 8027b44:	d802      	bhi.n	8027b4c <__hexdig_fun+0xe>
 8027b46:	3820      	subs	r0, #32
 8027b48:	b2c0      	uxtb	r0, r0
 8027b4a:	4770      	bx	lr
 8027b4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8027b50:	2b05      	cmp	r3, #5
 8027b52:	d801      	bhi.n	8027b58 <__hexdig_fun+0x1a>
 8027b54:	3847      	subs	r0, #71	; 0x47
 8027b56:	e7f7      	b.n	8027b48 <__hexdig_fun+0xa>
 8027b58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8027b5c:	2b05      	cmp	r3, #5
 8027b5e:	d801      	bhi.n	8027b64 <__hexdig_fun+0x26>
 8027b60:	3827      	subs	r0, #39	; 0x27
 8027b62:	e7f1      	b.n	8027b48 <__hexdig_fun+0xa>
 8027b64:	2000      	movs	r0, #0
 8027b66:	4770      	bx	lr

08027b68 <__gethex>:
 8027b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b6c:	ed2d 8b02 	vpush	{d8}
 8027b70:	b089      	sub	sp, #36	; 0x24
 8027b72:	ee08 0a10 	vmov	s16, r0
 8027b76:	9304      	str	r3, [sp, #16]
 8027b78:	4bb4      	ldr	r3, [pc, #720]	; (8027e4c <__gethex+0x2e4>)
 8027b7a:	681b      	ldr	r3, [r3, #0]
 8027b7c:	9301      	str	r3, [sp, #4]
 8027b7e:	4618      	mov	r0, r3
 8027b80:	468b      	mov	fp, r1
 8027b82:	4690      	mov	r8, r2
 8027b84:	f7e8 fe86 	bl	8010894 <strlen>
 8027b88:	9b01      	ldr	r3, [sp, #4]
 8027b8a:	f8db 2000 	ldr.w	r2, [fp]
 8027b8e:	4403      	add	r3, r0
 8027b90:	4682      	mov	sl, r0
 8027b92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8027b96:	9305      	str	r3, [sp, #20]
 8027b98:	1c93      	adds	r3, r2, #2
 8027b9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8027b9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8027ba2:	32fe      	adds	r2, #254	; 0xfe
 8027ba4:	18d1      	adds	r1, r2, r3
 8027ba6:	461f      	mov	r7, r3
 8027ba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027bac:	9100      	str	r1, [sp, #0]
 8027bae:	2830      	cmp	r0, #48	; 0x30
 8027bb0:	d0f8      	beq.n	8027ba4 <__gethex+0x3c>
 8027bb2:	f7ff ffc4 	bl	8027b3e <__hexdig_fun>
 8027bb6:	4604      	mov	r4, r0
 8027bb8:	2800      	cmp	r0, #0
 8027bba:	d13a      	bne.n	8027c32 <__gethex+0xca>
 8027bbc:	9901      	ldr	r1, [sp, #4]
 8027bbe:	4652      	mov	r2, sl
 8027bc0:	4638      	mov	r0, r7
 8027bc2:	f001 f9e6 	bl	8028f92 <strncmp>
 8027bc6:	4605      	mov	r5, r0
 8027bc8:	2800      	cmp	r0, #0
 8027bca:	d168      	bne.n	8027c9e <__gethex+0x136>
 8027bcc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8027bd0:	eb07 060a 	add.w	r6, r7, sl
 8027bd4:	f7ff ffb3 	bl	8027b3e <__hexdig_fun>
 8027bd8:	2800      	cmp	r0, #0
 8027bda:	d062      	beq.n	8027ca2 <__gethex+0x13a>
 8027bdc:	4633      	mov	r3, r6
 8027bde:	7818      	ldrb	r0, [r3, #0]
 8027be0:	2830      	cmp	r0, #48	; 0x30
 8027be2:	461f      	mov	r7, r3
 8027be4:	f103 0301 	add.w	r3, r3, #1
 8027be8:	d0f9      	beq.n	8027bde <__gethex+0x76>
 8027bea:	f7ff ffa8 	bl	8027b3e <__hexdig_fun>
 8027bee:	2301      	movs	r3, #1
 8027bf0:	fab0 f480 	clz	r4, r0
 8027bf4:	0964      	lsrs	r4, r4, #5
 8027bf6:	4635      	mov	r5, r6
 8027bf8:	9300      	str	r3, [sp, #0]
 8027bfa:	463a      	mov	r2, r7
 8027bfc:	4616      	mov	r6, r2
 8027bfe:	3201      	adds	r2, #1
 8027c00:	7830      	ldrb	r0, [r6, #0]
 8027c02:	f7ff ff9c 	bl	8027b3e <__hexdig_fun>
 8027c06:	2800      	cmp	r0, #0
 8027c08:	d1f8      	bne.n	8027bfc <__gethex+0x94>
 8027c0a:	9901      	ldr	r1, [sp, #4]
 8027c0c:	4652      	mov	r2, sl
 8027c0e:	4630      	mov	r0, r6
 8027c10:	f001 f9bf 	bl	8028f92 <strncmp>
 8027c14:	b980      	cbnz	r0, 8027c38 <__gethex+0xd0>
 8027c16:	b94d      	cbnz	r5, 8027c2c <__gethex+0xc4>
 8027c18:	eb06 050a 	add.w	r5, r6, sl
 8027c1c:	462a      	mov	r2, r5
 8027c1e:	4616      	mov	r6, r2
 8027c20:	3201      	adds	r2, #1
 8027c22:	7830      	ldrb	r0, [r6, #0]
 8027c24:	f7ff ff8b 	bl	8027b3e <__hexdig_fun>
 8027c28:	2800      	cmp	r0, #0
 8027c2a:	d1f8      	bne.n	8027c1e <__gethex+0xb6>
 8027c2c:	1bad      	subs	r5, r5, r6
 8027c2e:	00ad      	lsls	r5, r5, #2
 8027c30:	e004      	b.n	8027c3c <__gethex+0xd4>
 8027c32:	2400      	movs	r4, #0
 8027c34:	4625      	mov	r5, r4
 8027c36:	e7e0      	b.n	8027bfa <__gethex+0x92>
 8027c38:	2d00      	cmp	r5, #0
 8027c3a:	d1f7      	bne.n	8027c2c <__gethex+0xc4>
 8027c3c:	7833      	ldrb	r3, [r6, #0]
 8027c3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8027c42:	2b50      	cmp	r3, #80	; 0x50
 8027c44:	d13b      	bne.n	8027cbe <__gethex+0x156>
 8027c46:	7873      	ldrb	r3, [r6, #1]
 8027c48:	2b2b      	cmp	r3, #43	; 0x2b
 8027c4a:	d02c      	beq.n	8027ca6 <__gethex+0x13e>
 8027c4c:	2b2d      	cmp	r3, #45	; 0x2d
 8027c4e:	d02e      	beq.n	8027cae <__gethex+0x146>
 8027c50:	1c71      	adds	r1, r6, #1
 8027c52:	f04f 0900 	mov.w	r9, #0
 8027c56:	7808      	ldrb	r0, [r1, #0]
 8027c58:	f7ff ff71 	bl	8027b3e <__hexdig_fun>
 8027c5c:	1e43      	subs	r3, r0, #1
 8027c5e:	b2db      	uxtb	r3, r3
 8027c60:	2b18      	cmp	r3, #24
 8027c62:	d82c      	bhi.n	8027cbe <__gethex+0x156>
 8027c64:	f1a0 0210 	sub.w	r2, r0, #16
 8027c68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8027c6c:	f7ff ff67 	bl	8027b3e <__hexdig_fun>
 8027c70:	1e43      	subs	r3, r0, #1
 8027c72:	b2db      	uxtb	r3, r3
 8027c74:	2b18      	cmp	r3, #24
 8027c76:	d91d      	bls.n	8027cb4 <__gethex+0x14c>
 8027c78:	f1b9 0f00 	cmp.w	r9, #0
 8027c7c:	d000      	beq.n	8027c80 <__gethex+0x118>
 8027c7e:	4252      	negs	r2, r2
 8027c80:	4415      	add	r5, r2
 8027c82:	f8cb 1000 	str.w	r1, [fp]
 8027c86:	b1e4      	cbz	r4, 8027cc2 <__gethex+0x15a>
 8027c88:	9b00      	ldr	r3, [sp, #0]
 8027c8a:	2b00      	cmp	r3, #0
 8027c8c:	bf14      	ite	ne
 8027c8e:	2700      	movne	r7, #0
 8027c90:	2706      	moveq	r7, #6
 8027c92:	4638      	mov	r0, r7
 8027c94:	b009      	add	sp, #36	; 0x24
 8027c96:	ecbd 8b02 	vpop	{d8}
 8027c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027c9e:	463e      	mov	r6, r7
 8027ca0:	4625      	mov	r5, r4
 8027ca2:	2401      	movs	r4, #1
 8027ca4:	e7ca      	b.n	8027c3c <__gethex+0xd4>
 8027ca6:	f04f 0900 	mov.w	r9, #0
 8027caa:	1cb1      	adds	r1, r6, #2
 8027cac:	e7d3      	b.n	8027c56 <__gethex+0xee>
 8027cae:	f04f 0901 	mov.w	r9, #1
 8027cb2:	e7fa      	b.n	8027caa <__gethex+0x142>
 8027cb4:	230a      	movs	r3, #10
 8027cb6:	fb03 0202 	mla	r2, r3, r2, r0
 8027cba:	3a10      	subs	r2, #16
 8027cbc:	e7d4      	b.n	8027c68 <__gethex+0x100>
 8027cbe:	4631      	mov	r1, r6
 8027cc0:	e7df      	b.n	8027c82 <__gethex+0x11a>
 8027cc2:	1bf3      	subs	r3, r6, r7
 8027cc4:	3b01      	subs	r3, #1
 8027cc6:	4621      	mov	r1, r4
 8027cc8:	2b07      	cmp	r3, #7
 8027cca:	dc0b      	bgt.n	8027ce4 <__gethex+0x17c>
 8027ccc:	ee18 0a10 	vmov	r0, s16
 8027cd0:	f000 fadc 	bl	802828c <_Balloc>
 8027cd4:	4604      	mov	r4, r0
 8027cd6:	b940      	cbnz	r0, 8027cea <__gethex+0x182>
 8027cd8:	4b5d      	ldr	r3, [pc, #372]	; (8027e50 <__gethex+0x2e8>)
 8027cda:	4602      	mov	r2, r0
 8027cdc:	21de      	movs	r1, #222	; 0xde
 8027cde:	485d      	ldr	r0, [pc, #372]	; (8027e54 <__gethex+0x2ec>)
 8027ce0:	f001 f98a 	bl	8028ff8 <__assert_func>
 8027ce4:	3101      	adds	r1, #1
 8027ce6:	105b      	asrs	r3, r3, #1
 8027ce8:	e7ee      	b.n	8027cc8 <__gethex+0x160>
 8027cea:	f100 0914 	add.w	r9, r0, #20
 8027cee:	f04f 0b00 	mov.w	fp, #0
 8027cf2:	f1ca 0301 	rsb	r3, sl, #1
 8027cf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8027cfa:	f8cd b000 	str.w	fp, [sp]
 8027cfe:	9306      	str	r3, [sp, #24]
 8027d00:	42b7      	cmp	r7, r6
 8027d02:	d340      	bcc.n	8027d86 <__gethex+0x21e>
 8027d04:	9802      	ldr	r0, [sp, #8]
 8027d06:	9b00      	ldr	r3, [sp, #0]
 8027d08:	f840 3b04 	str.w	r3, [r0], #4
 8027d0c:	eba0 0009 	sub.w	r0, r0, r9
 8027d10:	1080      	asrs	r0, r0, #2
 8027d12:	0146      	lsls	r6, r0, #5
 8027d14:	6120      	str	r0, [r4, #16]
 8027d16:	4618      	mov	r0, r3
 8027d18:	f000 fbaa 	bl	8028470 <__hi0bits>
 8027d1c:	1a30      	subs	r0, r6, r0
 8027d1e:	f8d8 6000 	ldr.w	r6, [r8]
 8027d22:	42b0      	cmp	r0, r6
 8027d24:	dd63      	ble.n	8027dee <__gethex+0x286>
 8027d26:	1b87      	subs	r7, r0, r6
 8027d28:	4639      	mov	r1, r7
 8027d2a:	4620      	mov	r0, r4
 8027d2c:	f000 ff4e 	bl	8028bcc <__any_on>
 8027d30:	4682      	mov	sl, r0
 8027d32:	b1a8      	cbz	r0, 8027d60 <__gethex+0x1f8>
 8027d34:	1e7b      	subs	r3, r7, #1
 8027d36:	1159      	asrs	r1, r3, #5
 8027d38:	f003 021f 	and.w	r2, r3, #31
 8027d3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8027d40:	f04f 0a01 	mov.w	sl, #1
 8027d44:	fa0a f202 	lsl.w	r2, sl, r2
 8027d48:	420a      	tst	r2, r1
 8027d4a:	d009      	beq.n	8027d60 <__gethex+0x1f8>
 8027d4c:	4553      	cmp	r3, sl
 8027d4e:	dd05      	ble.n	8027d5c <__gethex+0x1f4>
 8027d50:	1eb9      	subs	r1, r7, #2
 8027d52:	4620      	mov	r0, r4
 8027d54:	f000 ff3a 	bl	8028bcc <__any_on>
 8027d58:	2800      	cmp	r0, #0
 8027d5a:	d145      	bne.n	8027de8 <__gethex+0x280>
 8027d5c:	f04f 0a02 	mov.w	sl, #2
 8027d60:	4639      	mov	r1, r7
 8027d62:	4620      	mov	r0, r4
 8027d64:	f7ff fe99 	bl	8027a9a <rshift>
 8027d68:	443d      	add	r5, r7
 8027d6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027d6e:	42ab      	cmp	r3, r5
 8027d70:	da4c      	bge.n	8027e0c <__gethex+0x2a4>
 8027d72:	ee18 0a10 	vmov	r0, s16
 8027d76:	4621      	mov	r1, r4
 8027d78:	f000 fac8 	bl	802830c <_Bfree>
 8027d7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027d7e:	2300      	movs	r3, #0
 8027d80:	6013      	str	r3, [r2, #0]
 8027d82:	27a3      	movs	r7, #163	; 0xa3
 8027d84:	e785      	b.n	8027c92 <__gethex+0x12a>
 8027d86:	1e73      	subs	r3, r6, #1
 8027d88:	9a05      	ldr	r2, [sp, #20]
 8027d8a:	9303      	str	r3, [sp, #12]
 8027d8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027d90:	4293      	cmp	r3, r2
 8027d92:	d019      	beq.n	8027dc8 <__gethex+0x260>
 8027d94:	f1bb 0f20 	cmp.w	fp, #32
 8027d98:	d107      	bne.n	8027daa <__gethex+0x242>
 8027d9a:	9b02      	ldr	r3, [sp, #8]
 8027d9c:	9a00      	ldr	r2, [sp, #0]
 8027d9e:	f843 2b04 	str.w	r2, [r3], #4
 8027da2:	9302      	str	r3, [sp, #8]
 8027da4:	2300      	movs	r3, #0
 8027da6:	9300      	str	r3, [sp, #0]
 8027da8:	469b      	mov	fp, r3
 8027daa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8027dae:	f7ff fec6 	bl	8027b3e <__hexdig_fun>
 8027db2:	9b00      	ldr	r3, [sp, #0]
 8027db4:	f000 000f 	and.w	r0, r0, #15
 8027db8:	fa00 f00b 	lsl.w	r0, r0, fp
 8027dbc:	4303      	orrs	r3, r0
 8027dbe:	9300      	str	r3, [sp, #0]
 8027dc0:	f10b 0b04 	add.w	fp, fp, #4
 8027dc4:	9b03      	ldr	r3, [sp, #12]
 8027dc6:	e00d      	b.n	8027de4 <__gethex+0x27c>
 8027dc8:	9b03      	ldr	r3, [sp, #12]
 8027dca:	9a06      	ldr	r2, [sp, #24]
 8027dcc:	4413      	add	r3, r2
 8027dce:	42bb      	cmp	r3, r7
 8027dd0:	d3e0      	bcc.n	8027d94 <__gethex+0x22c>
 8027dd2:	4618      	mov	r0, r3
 8027dd4:	9901      	ldr	r1, [sp, #4]
 8027dd6:	9307      	str	r3, [sp, #28]
 8027dd8:	4652      	mov	r2, sl
 8027dda:	f001 f8da 	bl	8028f92 <strncmp>
 8027dde:	9b07      	ldr	r3, [sp, #28]
 8027de0:	2800      	cmp	r0, #0
 8027de2:	d1d7      	bne.n	8027d94 <__gethex+0x22c>
 8027de4:	461e      	mov	r6, r3
 8027de6:	e78b      	b.n	8027d00 <__gethex+0x198>
 8027de8:	f04f 0a03 	mov.w	sl, #3
 8027dec:	e7b8      	b.n	8027d60 <__gethex+0x1f8>
 8027dee:	da0a      	bge.n	8027e06 <__gethex+0x29e>
 8027df0:	1a37      	subs	r7, r6, r0
 8027df2:	4621      	mov	r1, r4
 8027df4:	ee18 0a10 	vmov	r0, s16
 8027df8:	463a      	mov	r2, r7
 8027dfa:	f000 fca3 	bl	8028744 <__lshift>
 8027dfe:	1bed      	subs	r5, r5, r7
 8027e00:	4604      	mov	r4, r0
 8027e02:	f100 0914 	add.w	r9, r0, #20
 8027e06:	f04f 0a00 	mov.w	sl, #0
 8027e0a:	e7ae      	b.n	8027d6a <__gethex+0x202>
 8027e0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027e10:	42a8      	cmp	r0, r5
 8027e12:	dd72      	ble.n	8027efa <__gethex+0x392>
 8027e14:	1b45      	subs	r5, r0, r5
 8027e16:	42ae      	cmp	r6, r5
 8027e18:	dc36      	bgt.n	8027e88 <__gethex+0x320>
 8027e1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027e1e:	2b02      	cmp	r3, #2
 8027e20:	d02a      	beq.n	8027e78 <__gethex+0x310>
 8027e22:	2b03      	cmp	r3, #3
 8027e24:	d02c      	beq.n	8027e80 <__gethex+0x318>
 8027e26:	2b01      	cmp	r3, #1
 8027e28:	d11c      	bne.n	8027e64 <__gethex+0x2fc>
 8027e2a:	42ae      	cmp	r6, r5
 8027e2c:	d11a      	bne.n	8027e64 <__gethex+0x2fc>
 8027e2e:	2e01      	cmp	r6, #1
 8027e30:	d112      	bne.n	8027e58 <__gethex+0x2f0>
 8027e32:	9a04      	ldr	r2, [sp, #16]
 8027e34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8027e38:	6013      	str	r3, [r2, #0]
 8027e3a:	2301      	movs	r3, #1
 8027e3c:	6123      	str	r3, [r4, #16]
 8027e3e:	f8c9 3000 	str.w	r3, [r9]
 8027e42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027e44:	2762      	movs	r7, #98	; 0x62
 8027e46:	601c      	str	r4, [r3, #0]
 8027e48:	e723      	b.n	8027c92 <__gethex+0x12a>
 8027e4a:	bf00      	nop
 8027e4c:	08037d94 	.word	0x08037d94
 8027e50:	08037cb8 	.word	0x08037cb8
 8027e54:	08037d2c 	.word	0x08037d2c
 8027e58:	1e71      	subs	r1, r6, #1
 8027e5a:	4620      	mov	r0, r4
 8027e5c:	f000 feb6 	bl	8028bcc <__any_on>
 8027e60:	2800      	cmp	r0, #0
 8027e62:	d1e6      	bne.n	8027e32 <__gethex+0x2ca>
 8027e64:	ee18 0a10 	vmov	r0, s16
 8027e68:	4621      	mov	r1, r4
 8027e6a:	f000 fa4f 	bl	802830c <_Bfree>
 8027e6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027e70:	2300      	movs	r3, #0
 8027e72:	6013      	str	r3, [r2, #0]
 8027e74:	2750      	movs	r7, #80	; 0x50
 8027e76:	e70c      	b.n	8027c92 <__gethex+0x12a>
 8027e78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027e7a:	2b00      	cmp	r3, #0
 8027e7c:	d1f2      	bne.n	8027e64 <__gethex+0x2fc>
 8027e7e:	e7d8      	b.n	8027e32 <__gethex+0x2ca>
 8027e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027e82:	2b00      	cmp	r3, #0
 8027e84:	d1d5      	bne.n	8027e32 <__gethex+0x2ca>
 8027e86:	e7ed      	b.n	8027e64 <__gethex+0x2fc>
 8027e88:	1e6f      	subs	r7, r5, #1
 8027e8a:	f1ba 0f00 	cmp.w	sl, #0
 8027e8e:	d131      	bne.n	8027ef4 <__gethex+0x38c>
 8027e90:	b127      	cbz	r7, 8027e9c <__gethex+0x334>
 8027e92:	4639      	mov	r1, r7
 8027e94:	4620      	mov	r0, r4
 8027e96:	f000 fe99 	bl	8028bcc <__any_on>
 8027e9a:	4682      	mov	sl, r0
 8027e9c:	117b      	asrs	r3, r7, #5
 8027e9e:	2101      	movs	r1, #1
 8027ea0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8027ea4:	f007 071f 	and.w	r7, r7, #31
 8027ea8:	fa01 f707 	lsl.w	r7, r1, r7
 8027eac:	421f      	tst	r7, r3
 8027eae:	4629      	mov	r1, r5
 8027eb0:	4620      	mov	r0, r4
 8027eb2:	bf18      	it	ne
 8027eb4:	f04a 0a02 	orrne.w	sl, sl, #2
 8027eb8:	1b76      	subs	r6, r6, r5
 8027eba:	f7ff fdee 	bl	8027a9a <rshift>
 8027ebe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027ec2:	2702      	movs	r7, #2
 8027ec4:	f1ba 0f00 	cmp.w	sl, #0
 8027ec8:	d048      	beq.n	8027f5c <__gethex+0x3f4>
 8027eca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027ece:	2b02      	cmp	r3, #2
 8027ed0:	d015      	beq.n	8027efe <__gethex+0x396>
 8027ed2:	2b03      	cmp	r3, #3
 8027ed4:	d017      	beq.n	8027f06 <__gethex+0x39e>
 8027ed6:	2b01      	cmp	r3, #1
 8027ed8:	d109      	bne.n	8027eee <__gethex+0x386>
 8027eda:	f01a 0f02 	tst.w	sl, #2
 8027ede:	d006      	beq.n	8027eee <__gethex+0x386>
 8027ee0:	f8d9 0000 	ldr.w	r0, [r9]
 8027ee4:	ea4a 0a00 	orr.w	sl, sl, r0
 8027ee8:	f01a 0f01 	tst.w	sl, #1
 8027eec:	d10e      	bne.n	8027f0c <__gethex+0x3a4>
 8027eee:	f047 0710 	orr.w	r7, r7, #16
 8027ef2:	e033      	b.n	8027f5c <__gethex+0x3f4>
 8027ef4:	f04f 0a01 	mov.w	sl, #1
 8027ef8:	e7d0      	b.n	8027e9c <__gethex+0x334>
 8027efa:	2701      	movs	r7, #1
 8027efc:	e7e2      	b.n	8027ec4 <__gethex+0x35c>
 8027efe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027f00:	f1c3 0301 	rsb	r3, r3, #1
 8027f04:	9315      	str	r3, [sp, #84]	; 0x54
 8027f06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027f08:	2b00      	cmp	r3, #0
 8027f0a:	d0f0      	beq.n	8027eee <__gethex+0x386>
 8027f0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8027f10:	f104 0314 	add.w	r3, r4, #20
 8027f14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027f18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027f1c:	f04f 0c00 	mov.w	ip, #0
 8027f20:	4618      	mov	r0, r3
 8027f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8027f2a:	d01c      	beq.n	8027f66 <__gethex+0x3fe>
 8027f2c:	3201      	adds	r2, #1
 8027f2e:	6002      	str	r2, [r0, #0]
 8027f30:	2f02      	cmp	r7, #2
 8027f32:	f104 0314 	add.w	r3, r4, #20
 8027f36:	d13f      	bne.n	8027fb8 <__gethex+0x450>
 8027f38:	f8d8 2000 	ldr.w	r2, [r8]
 8027f3c:	3a01      	subs	r2, #1
 8027f3e:	42b2      	cmp	r2, r6
 8027f40:	d10a      	bne.n	8027f58 <__gethex+0x3f0>
 8027f42:	1171      	asrs	r1, r6, #5
 8027f44:	2201      	movs	r2, #1
 8027f46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027f4a:	f006 061f 	and.w	r6, r6, #31
 8027f4e:	fa02 f606 	lsl.w	r6, r2, r6
 8027f52:	421e      	tst	r6, r3
 8027f54:	bf18      	it	ne
 8027f56:	4617      	movne	r7, r2
 8027f58:	f047 0720 	orr.w	r7, r7, #32
 8027f5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027f5e:	601c      	str	r4, [r3, #0]
 8027f60:	9b04      	ldr	r3, [sp, #16]
 8027f62:	601d      	str	r5, [r3, #0]
 8027f64:	e695      	b.n	8027c92 <__gethex+0x12a>
 8027f66:	4299      	cmp	r1, r3
 8027f68:	f843 cc04 	str.w	ip, [r3, #-4]
 8027f6c:	d8d8      	bhi.n	8027f20 <__gethex+0x3b8>
 8027f6e:	68a3      	ldr	r3, [r4, #8]
 8027f70:	459b      	cmp	fp, r3
 8027f72:	db19      	blt.n	8027fa8 <__gethex+0x440>
 8027f74:	6861      	ldr	r1, [r4, #4]
 8027f76:	ee18 0a10 	vmov	r0, s16
 8027f7a:	3101      	adds	r1, #1
 8027f7c:	f000 f986 	bl	802828c <_Balloc>
 8027f80:	4681      	mov	r9, r0
 8027f82:	b918      	cbnz	r0, 8027f8c <__gethex+0x424>
 8027f84:	4b1a      	ldr	r3, [pc, #104]	; (8027ff0 <__gethex+0x488>)
 8027f86:	4602      	mov	r2, r0
 8027f88:	2184      	movs	r1, #132	; 0x84
 8027f8a:	e6a8      	b.n	8027cde <__gethex+0x176>
 8027f8c:	6922      	ldr	r2, [r4, #16]
 8027f8e:	3202      	adds	r2, #2
 8027f90:	f104 010c 	add.w	r1, r4, #12
 8027f94:	0092      	lsls	r2, r2, #2
 8027f96:	300c      	adds	r0, #12
 8027f98:	f7fc ffe0 	bl	8024f5c <memcpy>
 8027f9c:	4621      	mov	r1, r4
 8027f9e:	ee18 0a10 	vmov	r0, s16
 8027fa2:	f000 f9b3 	bl	802830c <_Bfree>
 8027fa6:	464c      	mov	r4, r9
 8027fa8:	6923      	ldr	r3, [r4, #16]
 8027faa:	1c5a      	adds	r2, r3, #1
 8027fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027fb0:	6122      	str	r2, [r4, #16]
 8027fb2:	2201      	movs	r2, #1
 8027fb4:	615a      	str	r2, [r3, #20]
 8027fb6:	e7bb      	b.n	8027f30 <__gethex+0x3c8>
 8027fb8:	6922      	ldr	r2, [r4, #16]
 8027fba:	455a      	cmp	r2, fp
 8027fbc:	dd0b      	ble.n	8027fd6 <__gethex+0x46e>
 8027fbe:	2101      	movs	r1, #1
 8027fc0:	4620      	mov	r0, r4
 8027fc2:	f7ff fd6a 	bl	8027a9a <rshift>
 8027fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027fca:	3501      	adds	r5, #1
 8027fcc:	42ab      	cmp	r3, r5
 8027fce:	f6ff aed0 	blt.w	8027d72 <__gethex+0x20a>
 8027fd2:	2701      	movs	r7, #1
 8027fd4:	e7c0      	b.n	8027f58 <__gethex+0x3f0>
 8027fd6:	f016 061f 	ands.w	r6, r6, #31
 8027fda:	d0fa      	beq.n	8027fd2 <__gethex+0x46a>
 8027fdc:	4453      	add	r3, sl
 8027fde:	f1c6 0620 	rsb	r6, r6, #32
 8027fe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8027fe6:	f000 fa43 	bl	8028470 <__hi0bits>
 8027fea:	42b0      	cmp	r0, r6
 8027fec:	dbe7      	blt.n	8027fbe <__gethex+0x456>
 8027fee:	e7f0      	b.n	8027fd2 <__gethex+0x46a>
 8027ff0:	08037cb8 	.word	0x08037cb8

08027ff4 <L_shift>:
 8027ff4:	f1c2 0208 	rsb	r2, r2, #8
 8027ff8:	0092      	lsls	r2, r2, #2
 8027ffa:	b570      	push	{r4, r5, r6, lr}
 8027ffc:	f1c2 0620 	rsb	r6, r2, #32
 8028000:	6843      	ldr	r3, [r0, #4]
 8028002:	6804      	ldr	r4, [r0, #0]
 8028004:	fa03 f506 	lsl.w	r5, r3, r6
 8028008:	432c      	orrs	r4, r5
 802800a:	40d3      	lsrs	r3, r2
 802800c:	6004      	str	r4, [r0, #0]
 802800e:	f840 3f04 	str.w	r3, [r0, #4]!
 8028012:	4288      	cmp	r0, r1
 8028014:	d3f4      	bcc.n	8028000 <L_shift+0xc>
 8028016:	bd70      	pop	{r4, r5, r6, pc}

08028018 <__match>:
 8028018:	b530      	push	{r4, r5, lr}
 802801a:	6803      	ldr	r3, [r0, #0]
 802801c:	3301      	adds	r3, #1
 802801e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028022:	b914      	cbnz	r4, 802802a <__match+0x12>
 8028024:	6003      	str	r3, [r0, #0]
 8028026:	2001      	movs	r0, #1
 8028028:	bd30      	pop	{r4, r5, pc}
 802802a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802802e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8028032:	2d19      	cmp	r5, #25
 8028034:	bf98      	it	ls
 8028036:	3220      	addls	r2, #32
 8028038:	42a2      	cmp	r2, r4
 802803a:	d0f0      	beq.n	802801e <__match+0x6>
 802803c:	2000      	movs	r0, #0
 802803e:	e7f3      	b.n	8028028 <__match+0x10>

08028040 <__hexnan>:
 8028040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028044:	680b      	ldr	r3, [r1, #0]
 8028046:	115e      	asrs	r6, r3, #5
 8028048:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802804c:	f013 031f 	ands.w	r3, r3, #31
 8028050:	b087      	sub	sp, #28
 8028052:	bf18      	it	ne
 8028054:	3604      	addne	r6, #4
 8028056:	2500      	movs	r5, #0
 8028058:	1f37      	subs	r7, r6, #4
 802805a:	4690      	mov	r8, r2
 802805c:	6802      	ldr	r2, [r0, #0]
 802805e:	9301      	str	r3, [sp, #4]
 8028060:	4682      	mov	sl, r0
 8028062:	f846 5c04 	str.w	r5, [r6, #-4]
 8028066:	46b9      	mov	r9, r7
 8028068:	463c      	mov	r4, r7
 802806a:	9502      	str	r5, [sp, #8]
 802806c:	46ab      	mov	fp, r5
 802806e:	7851      	ldrb	r1, [r2, #1]
 8028070:	1c53      	adds	r3, r2, #1
 8028072:	9303      	str	r3, [sp, #12]
 8028074:	b341      	cbz	r1, 80280c8 <__hexnan+0x88>
 8028076:	4608      	mov	r0, r1
 8028078:	9205      	str	r2, [sp, #20]
 802807a:	9104      	str	r1, [sp, #16]
 802807c:	f7ff fd5f 	bl	8027b3e <__hexdig_fun>
 8028080:	2800      	cmp	r0, #0
 8028082:	d14f      	bne.n	8028124 <__hexnan+0xe4>
 8028084:	9904      	ldr	r1, [sp, #16]
 8028086:	9a05      	ldr	r2, [sp, #20]
 8028088:	2920      	cmp	r1, #32
 802808a:	d818      	bhi.n	80280be <__hexnan+0x7e>
 802808c:	9b02      	ldr	r3, [sp, #8]
 802808e:	459b      	cmp	fp, r3
 8028090:	dd13      	ble.n	80280ba <__hexnan+0x7a>
 8028092:	454c      	cmp	r4, r9
 8028094:	d206      	bcs.n	80280a4 <__hexnan+0x64>
 8028096:	2d07      	cmp	r5, #7
 8028098:	dc04      	bgt.n	80280a4 <__hexnan+0x64>
 802809a:	462a      	mov	r2, r5
 802809c:	4649      	mov	r1, r9
 802809e:	4620      	mov	r0, r4
 80280a0:	f7ff ffa8 	bl	8027ff4 <L_shift>
 80280a4:	4544      	cmp	r4, r8
 80280a6:	d950      	bls.n	802814a <__hexnan+0x10a>
 80280a8:	2300      	movs	r3, #0
 80280aa:	f1a4 0904 	sub.w	r9, r4, #4
 80280ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80280b2:	f8cd b008 	str.w	fp, [sp, #8]
 80280b6:	464c      	mov	r4, r9
 80280b8:	461d      	mov	r5, r3
 80280ba:	9a03      	ldr	r2, [sp, #12]
 80280bc:	e7d7      	b.n	802806e <__hexnan+0x2e>
 80280be:	2929      	cmp	r1, #41	; 0x29
 80280c0:	d156      	bne.n	8028170 <__hexnan+0x130>
 80280c2:	3202      	adds	r2, #2
 80280c4:	f8ca 2000 	str.w	r2, [sl]
 80280c8:	f1bb 0f00 	cmp.w	fp, #0
 80280cc:	d050      	beq.n	8028170 <__hexnan+0x130>
 80280ce:	454c      	cmp	r4, r9
 80280d0:	d206      	bcs.n	80280e0 <__hexnan+0xa0>
 80280d2:	2d07      	cmp	r5, #7
 80280d4:	dc04      	bgt.n	80280e0 <__hexnan+0xa0>
 80280d6:	462a      	mov	r2, r5
 80280d8:	4649      	mov	r1, r9
 80280da:	4620      	mov	r0, r4
 80280dc:	f7ff ff8a 	bl	8027ff4 <L_shift>
 80280e0:	4544      	cmp	r4, r8
 80280e2:	d934      	bls.n	802814e <__hexnan+0x10e>
 80280e4:	f1a8 0204 	sub.w	r2, r8, #4
 80280e8:	4623      	mov	r3, r4
 80280ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80280ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80280f2:	429f      	cmp	r7, r3
 80280f4:	d2f9      	bcs.n	80280ea <__hexnan+0xaa>
 80280f6:	1b3b      	subs	r3, r7, r4
 80280f8:	f023 0303 	bic.w	r3, r3, #3
 80280fc:	3304      	adds	r3, #4
 80280fe:	3401      	adds	r4, #1
 8028100:	3e03      	subs	r6, #3
 8028102:	42b4      	cmp	r4, r6
 8028104:	bf88      	it	hi
 8028106:	2304      	movhi	r3, #4
 8028108:	4443      	add	r3, r8
 802810a:	2200      	movs	r2, #0
 802810c:	f843 2b04 	str.w	r2, [r3], #4
 8028110:	429f      	cmp	r7, r3
 8028112:	d2fb      	bcs.n	802810c <__hexnan+0xcc>
 8028114:	683b      	ldr	r3, [r7, #0]
 8028116:	b91b      	cbnz	r3, 8028120 <__hexnan+0xe0>
 8028118:	4547      	cmp	r7, r8
 802811a:	d127      	bne.n	802816c <__hexnan+0x12c>
 802811c:	2301      	movs	r3, #1
 802811e:	603b      	str	r3, [r7, #0]
 8028120:	2005      	movs	r0, #5
 8028122:	e026      	b.n	8028172 <__hexnan+0x132>
 8028124:	3501      	adds	r5, #1
 8028126:	2d08      	cmp	r5, #8
 8028128:	f10b 0b01 	add.w	fp, fp, #1
 802812c:	dd06      	ble.n	802813c <__hexnan+0xfc>
 802812e:	4544      	cmp	r4, r8
 8028130:	d9c3      	bls.n	80280ba <__hexnan+0x7a>
 8028132:	2300      	movs	r3, #0
 8028134:	f844 3c04 	str.w	r3, [r4, #-4]
 8028138:	2501      	movs	r5, #1
 802813a:	3c04      	subs	r4, #4
 802813c:	6822      	ldr	r2, [r4, #0]
 802813e:	f000 000f 	and.w	r0, r0, #15
 8028142:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8028146:	6022      	str	r2, [r4, #0]
 8028148:	e7b7      	b.n	80280ba <__hexnan+0x7a>
 802814a:	2508      	movs	r5, #8
 802814c:	e7b5      	b.n	80280ba <__hexnan+0x7a>
 802814e:	9b01      	ldr	r3, [sp, #4]
 8028150:	2b00      	cmp	r3, #0
 8028152:	d0df      	beq.n	8028114 <__hexnan+0xd4>
 8028154:	f04f 32ff 	mov.w	r2, #4294967295
 8028158:	f1c3 0320 	rsb	r3, r3, #32
 802815c:	fa22 f303 	lsr.w	r3, r2, r3
 8028160:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8028164:	401a      	ands	r2, r3
 8028166:	f846 2c04 	str.w	r2, [r6, #-4]
 802816a:	e7d3      	b.n	8028114 <__hexnan+0xd4>
 802816c:	3f04      	subs	r7, #4
 802816e:	e7d1      	b.n	8028114 <__hexnan+0xd4>
 8028170:	2004      	movs	r0, #4
 8028172:	b007      	add	sp, #28
 8028174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028178 <_localeconv_r>:
 8028178:	4800      	ldr	r0, [pc, #0]	; (802817c <_localeconv_r+0x4>)
 802817a:	4770      	bx	lr
 802817c:	20000238 	.word	0x20000238

08028180 <__retarget_lock_init_recursive>:
 8028180:	4770      	bx	lr

08028182 <__retarget_lock_acquire_recursive>:
 8028182:	4770      	bx	lr

08028184 <__retarget_lock_release_recursive>:
 8028184:	4770      	bx	lr

08028186 <__swhatbuf_r>:
 8028186:	b570      	push	{r4, r5, r6, lr}
 8028188:	460e      	mov	r6, r1
 802818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802818e:	2900      	cmp	r1, #0
 8028190:	b096      	sub	sp, #88	; 0x58
 8028192:	4614      	mov	r4, r2
 8028194:	461d      	mov	r5, r3
 8028196:	da08      	bge.n	80281aa <__swhatbuf_r+0x24>
 8028198:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802819c:	2200      	movs	r2, #0
 802819e:	602a      	str	r2, [r5, #0]
 80281a0:	061a      	lsls	r2, r3, #24
 80281a2:	d410      	bmi.n	80281c6 <__swhatbuf_r+0x40>
 80281a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80281a8:	e00e      	b.n	80281c8 <__swhatbuf_r+0x42>
 80281aa:	466a      	mov	r2, sp
 80281ac:	f000 ff64 	bl	8029078 <_fstat_r>
 80281b0:	2800      	cmp	r0, #0
 80281b2:	dbf1      	blt.n	8028198 <__swhatbuf_r+0x12>
 80281b4:	9a01      	ldr	r2, [sp, #4]
 80281b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80281ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80281be:	425a      	negs	r2, r3
 80281c0:	415a      	adcs	r2, r3
 80281c2:	602a      	str	r2, [r5, #0]
 80281c4:	e7ee      	b.n	80281a4 <__swhatbuf_r+0x1e>
 80281c6:	2340      	movs	r3, #64	; 0x40
 80281c8:	2000      	movs	r0, #0
 80281ca:	6023      	str	r3, [r4, #0]
 80281cc:	b016      	add	sp, #88	; 0x58
 80281ce:	bd70      	pop	{r4, r5, r6, pc}

080281d0 <__smakebuf_r>:
 80281d0:	898b      	ldrh	r3, [r1, #12]
 80281d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80281d4:	079d      	lsls	r5, r3, #30
 80281d6:	4606      	mov	r6, r0
 80281d8:	460c      	mov	r4, r1
 80281da:	d507      	bpl.n	80281ec <__smakebuf_r+0x1c>
 80281dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80281e0:	6023      	str	r3, [r4, #0]
 80281e2:	6123      	str	r3, [r4, #16]
 80281e4:	2301      	movs	r3, #1
 80281e6:	6163      	str	r3, [r4, #20]
 80281e8:	b002      	add	sp, #8
 80281ea:	bd70      	pop	{r4, r5, r6, pc}
 80281ec:	ab01      	add	r3, sp, #4
 80281ee:	466a      	mov	r2, sp
 80281f0:	f7ff ffc9 	bl	8028186 <__swhatbuf_r>
 80281f4:	9900      	ldr	r1, [sp, #0]
 80281f6:	4605      	mov	r5, r0
 80281f8:	4630      	mov	r0, r6
 80281fa:	f7fc ff31 	bl	8025060 <_malloc_r>
 80281fe:	b948      	cbnz	r0, 8028214 <__smakebuf_r+0x44>
 8028200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028204:	059a      	lsls	r2, r3, #22
 8028206:	d4ef      	bmi.n	80281e8 <__smakebuf_r+0x18>
 8028208:	f023 0303 	bic.w	r3, r3, #3
 802820c:	f043 0302 	orr.w	r3, r3, #2
 8028210:	81a3      	strh	r3, [r4, #12]
 8028212:	e7e3      	b.n	80281dc <__smakebuf_r+0xc>
 8028214:	4b0d      	ldr	r3, [pc, #52]	; (802824c <__smakebuf_r+0x7c>)
 8028216:	62b3      	str	r3, [r6, #40]	; 0x28
 8028218:	89a3      	ldrh	r3, [r4, #12]
 802821a:	6020      	str	r0, [r4, #0]
 802821c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028220:	81a3      	strh	r3, [r4, #12]
 8028222:	9b00      	ldr	r3, [sp, #0]
 8028224:	6163      	str	r3, [r4, #20]
 8028226:	9b01      	ldr	r3, [sp, #4]
 8028228:	6120      	str	r0, [r4, #16]
 802822a:	b15b      	cbz	r3, 8028244 <__smakebuf_r+0x74>
 802822c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028230:	4630      	mov	r0, r6
 8028232:	f000 ff33 	bl	802909c <_isatty_r>
 8028236:	b128      	cbz	r0, 8028244 <__smakebuf_r+0x74>
 8028238:	89a3      	ldrh	r3, [r4, #12]
 802823a:	f023 0303 	bic.w	r3, r3, #3
 802823e:	f043 0301 	orr.w	r3, r3, #1
 8028242:	81a3      	strh	r3, [r4, #12]
 8028244:	89a0      	ldrh	r0, [r4, #12]
 8028246:	4305      	orrs	r5, r0
 8028248:	81a5      	strh	r5, [r4, #12]
 802824a:	e7cd      	b.n	80281e8 <__smakebuf_r+0x18>
 802824c:	080278f9 	.word	0x080278f9

08028250 <__ascii_mbtowc>:
 8028250:	b082      	sub	sp, #8
 8028252:	b901      	cbnz	r1, 8028256 <__ascii_mbtowc+0x6>
 8028254:	a901      	add	r1, sp, #4
 8028256:	b142      	cbz	r2, 802826a <__ascii_mbtowc+0x1a>
 8028258:	b14b      	cbz	r3, 802826e <__ascii_mbtowc+0x1e>
 802825a:	7813      	ldrb	r3, [r2, #0]
 802825c:	600b      	str	r3, [r1, #0]
 802825e:	7812      	ldrb	r2, [r2, #0]
 8028260:	1e10      	subs	r0, r2, #0
 8028262:	bf18      	it	ne
 8028264:	2001      	movne	r0, #1
 8028266:	b002      	add	sp, #8
 8028268:	4770      	bx	lr
 802826a:	4610      	mov	r0, r2
 802826c:	e7fb      	b.n	8028266 <__ascii_mbtowc+0x16>
 802826e:	f06f 0001 	mvn.w	r0, #1
 8028272:	e7f8      	b.n	8028266 <__ascii_mbtowc+0x16>

08028274 <__malloc_lock>:
 8028274:	4801      	ldr	r0, [pc, #4]	; (802827c <__malloc_lock+0x8>)
 8028276:	f7ff bf84 	b.w	8028182 <__retarget_lock_acquire_recursive>
 802827a:	bf00      	nop
 802827c:	2000b36c 	.word	0x2000b36c

08028280 <__malloc_unlock>:
 8028280:	4801      	ldr	r0, [pc, #4]	; (8028288 <__malloc_unlock+0x8>)
 8028282:	f7ff bf7f 	b.w	8028184 <__retarget_lock_release_recursive>
 8028286:	bf00      	nop
 8028288:	2000b36c 	.word	0x2000b36c

0802828c <_Balloc>:
 802828c:	b570      	push	{r4, r5, r6, lr}
 802828e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028290:	4604      	mov	r4, r0
 8028292:	460d      	mov	r5, r1
 8028294:	b976      	cbnz	r6, 80282b4 <_Balloc+0x28>
 8028296:	2010      	movs	r0, #16
 8028298:	f7fc fe50 	bl	8024f3c <malloc>
 802829c:	4602      	mov	r2, r0
 802829e:	6260      	str	r0, [r4, #36]	; 0x24
 80282a0:	b920      	cbnz	r0, 80282ac <_Balloc+0x20>
 80282a2:	4b18      	ldr	r3, [pc, #96]	; (8028304 <_Balloc+0x78>)
 80282a4:	4818      	ldr	r0, [pc, #96]	; (8028308 <_Balloc+0x7c>)
 80282a6:	2166      	movs	r1, #102	; 0x66
 80282a8:	f000 fea6 	bl	8028ff8 <__assert_func>
 80282ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80282b0:	6006      	str	r6, [r0, #0]
 80282b2:	60c6      	str	r6, [r0, #12]
 80282b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80282b6:	68f3      	ldr	r3, [r6, #12]
 80282b8:	b183      	cbz	r3, 80282dc <_Balloc+0x50>
 80282ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80282bc:	68db      	ldr	r3, [r3, #12]
 80282be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80282c2:	b9b8      	cbnz	r0, 80282f4 <_Balloc+0x68>
 80282c4:	2101      	movs	r1, #1
 80282c6:	fa01 f605 	lsl.w	r6, r1, r5
 80282ca:	1d72      	adds	r2, r6, #5
 80282cc:	0092      	lsls	r2, r2, #2
 80282ce:	4620      	mov	r0, r4
 80282d0:	f000 fc9d 	bl	8028c0e <_calloc_r>
 80282d4:	b160      	cbz	r0, 80282f0 <_Balloc+0x64>
 80282d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80282da:	e00e      	b.n	80282fa <_Balloc+0x6e>
 80282dc:	2221      	movs	r2, #33	; 0x21
 80282de:	2104      	movs	r1, #4
 80282e0:	4620      	mov	r0, r4
 80282e2:	f000 fc94 	bl	8028c0e <_calloc_r>
 80282e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80282e8:	60f0      	str	r0, [r6, #12]
 80282ea:	68db      	ldr	r3, [r3, #12]
 80282ec:	2b00      	cmp	r3, #0
 80282ee:	d1e4      	bne.n	80282ba <_Balloc+0x2e>
 80282f0:	2000      	movs	r0, #0
 80282f2:	bd70      	pop	{r4, r5, r6, pc}
 80282f4:	6802      	ldr	r2, [r0, #0]
 80282f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80282fa:	2300      	movs	r3, #0
 80282fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8028300:	e7f7      	b.n	80282f2 <_Balloc+0x66>
 8028302:	bf00      	nop
 8028304:	08037c46 	.word	0x08037c46
 8028308:	08037da8 	.word	0x08037da8

0802830c <_Bfree>:
 802830c:	b570      	push	{r4, r5, r6, lr}
 802830e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8028310:	4605      	mov	r5, r0
 8028312:	460c      	mov	r4, r1
 8028314:	b976      	cbnz	r6, 8028334 <_Bfree+0x28>
 8028316:	2010      	movs	r0, #16
 8028318:	f7fc fe10 	bl	8024f3c <malloc>
 802831c:	4602      	mov	r2, r0
 802831e:	6268      	str	r0, [r5, #36]	; 0x24
 8028320:	b920      	cbnz	r0, 802832c <_Bfree+0x20>
 8028322:	4b09      	ldr	r3, [pc, #36]	; (8028348 <_Bfree+0x3c>)
 8028324:	4809      	ldr	r0, [pc, #36]	; (802834c <_Bfree+0x40>)
 8028326:	218a      	movs	r1, #138	; 0x8a
 8028328:	f000 fe66 	bl	8028ff8 <__assert_func>
 802832c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028330:	6006      	str	r6, [r0, #0]
 8028332:	60c6      	str	r6, [r0, #12]
 8028334:	b13c      	cbz	r4, 8028346 <_Bfree+0x3a>
 8028336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028338:	6862      	ldr	r2, [r4, #4]
 802833a:	68db      	ldr	r3, [r3, #12]
 802833c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028340:	6021      	str	r1, [r4, #0]
 8028342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8028346:	bd70      	pop	{r4, r5, r6, pc}
 8028348:	08037c46 	.word	0x08037c46
 802834c:	08037da8 	.word	0x08037da8

08028350 <__multadd>:
 8028350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028354:	690d      	ldr	r5, [r1, #16]
 8028356:	4607      	mov	r7, r0
 8028358:	460c      	mov	r4, r1
 802835a:	461e      	mov	r6, r3
 802835c:	f101 0c14 	add.w	ip, r1, #20
 8028360:	2000      	movs	r0, #0
 8028362:	f8dc 3000 	ldr.w	r3, [ip]
 8028366:	b299      	uxth	r1, r3
 8028368:	fb02 6101 	mla	r1, r2, r1, r6
 802836c:	0c1e      	lsrs	r6, r3, #16
 802836e:	0c0b      	lsrs	r3, r1, #16
 8028370:	fb02 3306 	mla	r3, r2, r6, r3
 8028374:	b289      	uxth	r1, r1
 8028376:	3001      	adds	r0, #1
 8028378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802837c:	4285      	cmp	r5, r0
 802837e:	f84c 1b04 	str.w	r1, [ip], #4
 8028382:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8028386:	dcec      	bgt.n	8028362 <__multadd+0x12>
 8028388:	b30e      	cbz	r6, 80283ce <__multadd+0x7e>
 802838a:	68a3      	ldr	r3, [r4, #8]
 802838c:	42ab      	cmp	r3, r5
 802838e:	dc19      	bgt.n	80283c4 <__multadd+0x74>
 8028390:	6861      	ldr	r1, [r4, #4]
 8028392:	4638      	mov	r0, r7
 8028394:	3101      	adds	r1, #1
 8028396:	f7ff ff79 	bl	802828c <_Balloc>
 802839a:	4680      	mov	r8, r0
 802839c:	b928      	cbnz	r0, 80283aa <__multadd+0x5a>
 802839e:	4602      	mov	r2, r0
 80283a0:	4b0c      	ldr	r3, [pc, #48]	; (80283d4 <__multadd+0x84>)
 80283a2:	480d      	ldr	r0, [pc, #52]	; (80283d8 <__multadd+0x88>)
 80283a4:	21b5      	movs	r1, #181	; 0xb5
 80283a6:	f000 fe27 	bl	8028ff8 <__assert_func>
 80283aa:	6922      	ldr	r2, [r4, #16]
 80283ac:	3202      	adds	r2, #2
 80283ae:	f104 010c 	add.w	r1, r4, #12
 80283b2:	0092      	lsls	r2, r2, #2
 80283b4:	300c      	adds	r0, #12
 80283b6:	f7fc fdd1 	bl	8024f5c <memcpy>
 80283ba:	4621      	mov	r1, r4
 80283bc:	4638      	mov	r0, r7
 80283be:	f7ff ffa5 	bl	802830c <_Bfree>
 80283c2:	4644      	mov	r4, r8
 80283c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80283c8:	3501      	adds	r5, #1
 80283ca:	615e      	str	r6, [r3, #20]
 80283cc:	6125      	str	r5, [r4, #16]
 80283ce:	4620      	mov	r0, r4
 80283d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80283d4:	08037cb8 	.word	0x08037cb8
 80283d8:	08037da8 	.word	0x08037da8

080283dc <__s2b>:
 80283dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80283e0:	460c      	mov	r4, r1
 80283e2:	4615      	mov	r5, r2
 80283e4:	461f      	mov	r7, r3
 80283e6:	2209      	movs	r2, #9
 80283e8:	3308      	adds	r3, #8
 80283ea:	4606      	mov	r6, r0
 80283ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80283f0:	2100      	movs	r1, #0
 80283f2:	2201      	movs	r2, #1
 80283f4:	429a      	cmp	r2, r3
 80283f6:	db09      	blt.n	802840c <__s2b+0x30>
 80283f8:	4630      	mov	r0, r6
 80283fa:	f7ff ff47 	bl	802828c <_Balloc>
 80283fe:	b940      	cbnz	r0, 8028412 <__s2b+0x36>
 8028400:	4602      	mov	r2, r0
 8028402:	4b19      	ldr	r3, [pc, #100]	; (8028468 <__s2b+0x8c>)
 8028404:	4819      	ldr	r0, [pc, #100]	; (802846c <__s2b+0x90>)
 8028406:	21ce      	movs	r1, #206	; 0xce
 8028408:	f000 fdf6 	bl	8028ff8 <__assert_func>
 802840c:	0052      	lsls	r2, r2, #1
 802840e:	3101      	adds	r1, #1
 8028410:	e7f0      	b.n	80283f4 <__s2b+0x18>
 8028412:	9b08      	ldr	r3, [sp, #32]
 8028414:	6143      	str	r3, [r0, #20]
 8028416:	2d09      	cmp	r5, #9
 8028418:	f04f 0301 	mov.w	r3, #1
 802841c:	6103      	str	r3, [r0, #16]
 802841e:	dd16      	ble.n	802844e <__s2b+0x72>
 8028420:	f104 0909 	add.w	r9, r4, #9
 8028424:	46c8      	mov	r8, r9
 8028426:	442c      	add	r4, r5
 8028428:	f818 3b01 	ldrb.w	r3, [r8], #1
 802842c:	4601      	mov	r1, r0
 802842e:	3b30      	subs	r3, #48	; 0x30
 8028430:	220a      	movs	r2, #10
 8028432:	4630      	mov	r0, r6
 8028434:	f7ff ff8c 	bl	8028350 <__multadd>
 8028438:	45a0      	cmp	r8, r4
 802843a:	d1f5      	bne.n	8028428 <__s2b+0x4c>
 802843c:	f1a5 0408 	sub.w	r4, r5, #8
 8028440:	444c      	add	r4, r9
 8028442:	1b2d      	subs	r5, r5, r4
 8028444:	1963      	adds	r3, r4, r5
 8028446:	42bb      	cmp	r3, r7
 8028448:	db04      	blt.n	8028454 <__s2b+0x78>
 802844a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802844e:	340a      	adds	r4, #10
 8028450:	2509      	movs	r5, #9
 8028452:	e7f6      	b.n	8028442 <__s2b+0x66>
 8028454:	f814 3b01 	ldrb.w	r3, [r4], #1
 8028458:	4601      	mov	r1, r0
 802845a:	3b30      	subs	r3, #48	; 0x30
 802845c:	220a      	movs	r2, #10
 802845e:	4630      	mov	r0, r6
 8028460:	f7ff ff76 	bl	8028350 <__multadd>
 8028464:	e7ee      	b.n	8028444 <__s2b+0x68>
 8028466:	bf00      	nop
 8028468:	08037cb8 	.word	0x08037cb8
 802846c:	08037da8 	.word	0x08037da8

08028470 <__hi0bits>:
 8028470:	0c03      	lsrs	r3, r0, #16
 8028472:	041b      	lsls	r3, r3, #16
 8028474:	b9d3      	cbnz	r3, 80284ac <__hi0bits+0x3c>
 8028476:	0400      	lsls	r0, r0, #16
 8028478:	2310      	movs	r3, #16
 802847a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802847e:	bf04      	itt	eq
 8028480:	0200      	lsleq	r0, r0, #8
 8028482:	3308      	addeq	r3, #8
 8028484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8028488:	bf04      	itt	eq
 802848a:	0100      	lsleq	r0, r0, #4
 802848c:	3304      	addeq	r3, #4
 802848e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8028492:	bf04      	itt	eq
 8028494:	0080      	lsleq	r0, r0, #2
 8028496:	3302      	addeq	r3, #2
 8028498:	2800      	cmp	r0, #0
 802849a:	db05      	blt.n	80284a8 <__hi0bits+0x38>
 802849c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80284a0:	f103 0301 	add.w	r3, r3, #1
 80284a4:	bf08      	it	eq
 80284a6:	2320      	moveq	r3, #32
 80284a8:	4618      	mov	r0, r3
 80284aa:	4770      	bx	lr
 80284ac:	2300      	movs	r3, #0
 80284ae:	e7e4      	b.n	802847a <__hi0bits+0xa>

080284b0 <__lo0bits>:
 80284b0:	6803      	ldr	r3, [r0, #0]
 80284b2:	f013 0207 	ands.w	r2, r3, #7
 80284b6:	4601      	mov	r1, r0
 80284b8:	d00b      	beq.n	80284d2 <__lo0bits+0x22>
 80284ba:	07da      	lsls	r2, r3, #31
 80284bc:	d423      	bmi.n	8028506 <__lo0bits+0x56>
 80284be:	0798      	lsls	r0, r3, #30
 80284c0:	bf49      	itett	mi
 80284c2:	085b      	lsrmi	r3, r3, #1
 80284c4:	089b      	lsrpl	r3, r3, #2
 80284c6:	2001      	movmi	r0, #1
 80284c8:	600b      	strmi	r3, [r1, #0]
 80284ca:	bf5c      	itt	pl
 80284cc:	600b      	strpl	r3, [r1, #0]
 80284ce:	2002      	movpl	r0, #2
 80284d0:	4770      	bx	lr
 80284d2:	b298      	uxth	r0, r3
 80284d4:	b9a8      	cbnz	r0, 8028502 <__lo0bits+0x52>
 80284d6:	0c1b      	lsrs	r3, r3, #16
 80284d8:	2010      	movs	r0, #16
 80284da:	b2da      	uxtb	r2, r3
 80284dc:	b90a      	cbnz	r2, 80284e2 <__lo0bits+0x32>
 80284de:	3008      	adds	r0, #8
 80284e0:	0a1b      	lsrs	r3, r3, #8
 80284e2:	071a      	lsls	r2, r3, #28
 80284e4:	bf04      	itt	eq
 80284e6:	091b      	lsreq	r3, r3, #4
 80284e8:	3004      	addeq	r0, #4
 80284ea:	079a      	lsls	r2, r3, #30
 80284ec:	bf04      	itt	eq
 80284ee:	089b      	lsreq	r3, r3, #2
 80284f0:	3002      	addeq	r0, #2
 80284f2:	07da      	lsls	r2, r3, #31
 80284f4:	d403      	bmi.n	80284fe <__lo0bits+0x4e>
 80284f6:	085b      	lsrs	r3, r3, #1
 80284f8:	f100 0001 	add.w	r0, r0, #1
 80284fc:	d005      	beq.n	802850a <__lo0bits+0x5a>
 80284fe:	600b      	str	r3, [r1, #0]
 8028500:	4770      	bx	lr
 8028502:	4610      	mov	r0, r2
 8028504:	e7e9      	b.n	80284da <__lo0bits+0x2a>
 8028506:	2000      	movs	r0, #0
 8028508:	4770      	bx	lr
 802850a:	2020      	movs	r0, #32
 802850c:	4770      	bx	lr
	...

08028510 <__i2b>:
 8028510:	b510      	push	{r4, lr}
 8028512:	460c      	mov	r4, r1
 8028514:	2101      	movs	r1, #1
 8028516:	f7ff feb9 	bl	802828c <_Balloc>
 802851a:	4602      	mov	r2, r0
 802851c:	b928      	cbnz	r0, 802852a <__i2b+0x1a>
 802851e:	4b05      	ldr	r3, [pc, #20]	; (8028534 <__i2b+0x24>)
 8028520:	4805      	ldr	r0, [pc, #20]	; (8028538 <__i2b+0x28>)
 8028522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8028526:	f000 fd67 	bl	8028ff8 <__assert_func>
 802852a:	2301      	movs	r3, #1
 802852c:	6144      	str	r4, [r0, #20]
 802852e:	6103      	str	r3, [r0, #16]
 8028530:	bd10      	pop	{r4, pc}
 8028532:	bf00      	nop
 8028534:	08037cb8 	.word	0x08037cb8
 8028538:	08037da8 	.word	0x08037da8

0802853c <__multiply>:
 802853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028540:	4691      	mov	r9, r2
 8028542:	690a      	ldr	r2, [r1, #16]
 8028544:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028548:	429a      	cmp	r2, r3
 802854a:	bfb8      	it	lt
 802854c:	460b      	movlt	r3, r1
 802854e:	460c      	mov	r4, r1
 8028550:	bfbc      	itt	lt
 8028552:	464c      	movlt	r4, r9
 8028554:	4699      	movlt	r9, r3
 8028556:	6927      	ldr	r7, [r4, #16]
 8028558:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802855c:	68a3      	ldr	r3, [r4, #8]
 802855e:	6861      	ldr	r1, [r4, #4]
 8028560:	eb07 060a 	add.w	r6, r7, sl
 8028564:	42b3      	cmp	r3, r6
 8028566:	b085      	sub	sp, #20
 8028568:	bfb8      	it	lt
 802856a:	3101      	addlt	r1, #1
 802856c:	f7ff fe8e 	bl	802828c <_Balloc>
 8028570:	b930      	cbnz	r0, 8028580 <__multiply+0x44>
 8028572:	4602      	mov	r2, r0
 8028574:	4b44      	ldr	r3, [pc, #272]	; (8028688 <__multiply+0x14c>)
 8028576:	4845      	ldr	r0, [pc, #276]	; (802868c <__multiply+0x150>)
 8028578:	f240 115d 	movw	r1, #349	; 0x15d
 802857c:	f000 fd3c 	bl	8028ff8 <__assert_func>
 8028580:	f100 0514 	add.w	r5, r0, #20
 8028584:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8028588:	462b      	mov	r3, r5
 802858a:	2200      	movs	r2, #0
 802858c:	4543      	cmp	r3, r8
 802858e:	d321      	bcc.n	80285d4 <__multiply+0x98>
 8028590:	f104 0314 	add.w	r3, r4, #20
 8028594:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8028598:	f109 0314 	add.w	r3, r9, #20
 802859c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80285a0:	9202      	str	r2, [sp, #8]
 80285a2:	1b3a      	subs	r2, r7, r4
 80285a4:	3a15      	subs	r2, #21
 80285a6:	f022 0203 	bic.w	r2, r2, #3
 80285aa:	3204      	adds	r2, #4
 80285ac:	f104 0115 	add.w	r1, r4, #21
 80285b0:	428f      	cmp	r7, r1
 80285b2:	bf38      	it	cc
 80285b4:	2204      	movcc	r2, #4
 80285b6:	9201      	str	r2, [sp, #4]
 80285b8:	9a02      	ldr	r2, [sp, #8]
 80285ba:	9303      	str	r3, [sp, #12]
 80285bc:	429a      	cmp	r2, r3
 80285be:	d80c      	bhi.n	80285da <__multiply+0x9e>
 80285c0:	2e00      	cmp	r6, #0
 80285c2:	dd03      	ble.n	80285cc <__multiply+0x90>
 80285c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80285c8:	2b00      	cmp	r3, #0
 80285ca:	d05a      	beq.n	8028682 <__multiply+0x146>
 80285cc:	6106      	str	r6, [r0, #16]
 80285ce:	b005      	add	sp, #20
 80285d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285d4:	f843 2b04 	str.w	r2, [r3], #4
 80285d8:	e7d8      	b.n	802858c <__multiply+0x50>
 80285da:	f8b3 a000 	ldrh.w	sl, [r3]
 80285de:	f1ba 0f00 	cmp.w	sl, #0
 80285e2:	d024      	beq.n	802862e <__multiply+0xf2>
 80285e4:	f104 0e14 	add.w	lr, r4, #20
 80285e8:	46a9      	mov	r9, r5
 80285ea:	f04f 0c00 	mov.w	ip, #0
 80285ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80285f2:	f8d9 1000 	ldr.w	r1, [r9]
 80285f6:	fa1f fb82 	uxth.w	fp, r2
 80285fa:	b289      	uxth	r1, r1
 80285fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8028600:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8028604:	f8d9 2000 	ldr.w	r2, [r9]
 8028608:	4461      	add	r1, ip
 802860a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802860e:	fb0a c20b 	mla	r2, sl, fp, ip
 8028612:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8028616:	b289      	uxth	r1, r1
 8028618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802861c:	4577      	cmp	r7, lr
 802861e:	f849 1b04 	str.w	r1, [r9], #4
 8028622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8028626:	d8e2      	bhi.n	80285ee <__multiply+0xb2>
 8028628:	9a01      	ldr	r2, [sp, #4]
 802862a:	f845 c002 	str.w	ip, [r5, r2]
 802862e:	9a03      	ldr	r2, [sp, #12]
 8028630:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8028634:	3304      	adds	r3, #4
 8028636:	f1b9 0f00 	cmp.w	r9, #0
 802863a:	d020      	beq.n	802867e <__multiply+0x142>
 802863c:	6829      	ldr	r1, [r5, #0]
 802863e:	f104 0c14 	add.w	ip, r4, #20
 8028642:	46ae      	mov	lr, r5
 8028644:	f04f 0a00 	mov.w	sl, #0
 8028648:	f8bc b000 	ldrh.w	fp, [ip]
 802864c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028650:	fb09 220b 	mla	r2, r9, fp, r2
 8028654:	4492      	add	sl, r2
 8028656:	b289      	uxth	r1, r1
 8028658:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802865c:	f84e 1b04 	str.w	r1, [lr], #4
 8028660:	f85c 2b04 	ldr.w	r2, [ip], #4
 8028664:	f8be 1000 	ldrh.w	r1, [lr]
 8028668:	0c12      	lsrs	r2, r2, #16
 802866a:	fb09 1102 	mla	r1, r9, r2, r1
 802866e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8028672:	4567      	cmp	r7, ip
 8028674:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8028678:	d8e6      	bhi.n	8028648 <__multiply+0x10c>
 802867a:	9a01      	ldr	r2, [sp, #4]
 802867c:	50a9      	str	r1, [r5, r2]
 802867e:	3504      	adds	r5, #4
 8028680:	e79a      	b.n	80285b8 <__multiply+0x7c>
 8028682:	3e01      	subs	r6, #1
 8028684:	e79c      	b.n	80285c0 <__multiply+0x84>
 8028686:	bf00      	nop
 8028688:	08037cb8 	.word	0x08037cb8
 802868c:	08037da8 	.word	0x08037da8

08028690 <__pow5mult>:
 8028690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028694:	4615      	mov	r5, r2
 8028696:	f012 0203 	ands.w	r2, r2, #3
 802869a:	4606      	mov	r6, r0
 802869c:	460f      	mov	r7, r1
 802869e:	d007      	beq.n	80286b0 <__pow5mult+0x20>
 80286a0:	4c25      	ldr	r4, [pc, #148]	; (8028738 <__pow5mult+0xa8>)
 80286a2:	3a01      	subs	r2, #1
 80286a4:	2300      	movs	r3, #0
 80286a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80286aa:	f7ff fe51 	bl	8028350 <__multadd>
 80286ae:	4607      	mov	r7, r0
 80286b0:	10ad      	asrs	r5, r5, #2
 80286b2:	d03d      	beq.n	8028730 <__pow5mult+0xa0>
 80286b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80286b6:	b97c      	cbnz	r4, 80286d8 <__pow5mult+0x48>
 80286b8:	2010      	movs	r0, #16
 80286ba:	f7fc fc3f 	bl	8024f3c <malloc>
 80286be:	4602      	mov	r2, r0
 80286c0:	6270      	str	r0, [r6, #36]	; 0x24
 80286c2:	b928      	cbnz	r0, 80286d0 <__pow5mult+0x40>
 80286c4:	4b1d      	ldr	r3, [pc, #116]	; (802873c <__pow5mult+0xac>)
 80286c6:	481e      	ldr	r0, [pc, #120]	; (8028740 <__pow5mult+0xb0>)
 80286c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80286cc:	f000 fc94 	bl	8028ff8 <__assert_func>
 80286d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80286d4:	6004      	str	r4, [r0, #0]
 80286d6:	60c4      	str	r4, [r0, #12]
 80286d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80286dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80286e0:	b94c      	cbnz	r4, 80286f6 <__pow5mult+0x66>
 80286e2:	f240 2171 	movw	r1, #625	; 0x271
 80286e6:	4630      	mov	r0, r6
 80286e8:	f7ff ff12 	bl	8028510 <__i2b>
 80286ec:	2300      	movs	r3, #0
 80286ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80286f2:	4604      	mov	r4, r0
 80286f4:	6003      	str	r3, [r0, #0]
 80286f6:	f04f 0900 	mov.w	r9, #0
 80286fa:	07eb      	lsls	r3, r5, #31
 80286fc:	d50a      	bpl.n	8028714 <__pow5mult+0x84>
 80286fe:	4639      	mov	r1, r7
 8028700:	4622      	mov	r2, r4
 8028702:	4630      	mov	r0, r6
 8028704:	f7ff ff1a 	bl	802853c <__multiply>
 8028708:	4639      	mov	r1, r7
 802870a:	4680      	mov	r8, r0
 802870c:	4630      	mov	r0, r6
 802870e:	f7ff fdfd 	bl	802830c <_Bfree>
 8028712:	4647      	mov	r7, r8
 8028714:	106d      	asrs	r5, r5, #1
 8028716:	d00b      	beq.n	8028730 <__pow5mult+0xa0>
 8028718:	6820      	ldr	r0, [r4, #0]
 802871a:	b938      	cbnz	r0, 802872c <__pow5mult+0x9c>
 802871c:	4622      	mov	r2, r4
 802871e:	4621      	mov	r1, r4
 8028720:	4630      	mov	r0, r6
 8028722:	f7ff ff0b 	bl	802853c <__multiply>
 8028726:	6020      	str	r0, [r4, #0]
 8028728:	f8c0 9000 	str.w	r9, [r0]
 802872c:	4604      	mov	r4, r0
 802872e:	e7e4      	b.n	80286fa <__pow5mult+0x6a>
 8028730:	4638      	mov	r0, r7
 8028732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028736:	bf00      	nop
 8028738:	08037ef8 	.word	0x08037ef8
 802873c:	08037c46 	.word	0x08037c46
 8028740:	08037da8 	.word	0x08037da8

08028744 <__lshift>:
 8028744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028748:	460c      	mov	r4, r1
 802874a:	6849      	ldr	r1, [r1, #4]
 802874c:	6923      	ldr	r3, [r4, #16]
 802874e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8028752:	68a3      	ldr	r3, [r4, #8]
 8028754:	4607      	mov	r7, r0
 8028756:	4691      	mov	r9, r2
 8028758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802875c:	f108 0601 	add.w	r6, r8, #1
 8028760:	42b3      	cmp	r3, r6
 8028762:	db0b      	blt.n	802877c <__lshift+0x38>
 8028764:	4638      	mov	r0, r7
 8028766:	f7ff fd91 	bl	802828c <_Balloc>
 802876a:	4605      	mov	r5, r0
 802876c:	b948      	cbnz	r0, 8028782 <__lshift+0x3e>
 802876e:	4602      	mov	r2, r0
 8028770:	4b2a      	ldr	r3, [pc, #168]	; (802881c <__lshift+0xd8>)
 8028772:	482b      	ldr	r0, [pc, #172]	; (8028820 <__lshift+0xdc>)
 8028774:	f240 11d9 	movw	r1, #473	; 0x1d9
 8028778:	f000 fc3e 	bl	8028ff8 <__assert_func>
 802877c:	3101      	adds	r1, #1
 802877e:	005b      	lsls	r3, r3, #1
 8028780:	e7ee      	b.n	8028760 <__lshift+0x1c>
 8028782:	2300      	movs	r3, #0
 8028784:	f100 0114 	add.w	r1, r0, #20
 8028788:	f100 0210 	add.w	r2, r0, #16
 802878c:	4618      	mov	r0, r3
 802878e:	4553      	cmp	r3, sl
 8028790:	db37      	blt.n	8028802 <__lshift+0xbe>
 8028792:	6920      	ldr	r0, [r4, #16]
 8028794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028798:	f104 0314 	add.w	r3, r4, #20
 802879c:	f019 091f 	ands.w	r9, r9, #31
 80287a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80287a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80287a8:	d02f      	beq.n	802880a <__lshift+0xc6>
 80287aa:	f1c9 0e20 	rsb	lr, r9, #32
 80287ae:	468a      	mov	sl, r1
 80287b0:	f04f 0c00 	mov.w	ip, #0
 80287b4:	681a      	ldr	r2, [r3, #0]
 80287b6:	fa02 f209 	lsl.w	r2, r2, r9
 80287ba:	ea42 020c 	orr.w	r2, r2, ip
 80287be:	f84a 2b04 	str.w	r2, [sl], #4
 80287c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80287c6:	4298      	cmp	r0, r3
 80287c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80287cc:	d8f2      	bhi.n	80287b4 <__lshift+0x70>
 80287ce:	1b03      	subs	r3, r0, r4
 80287d0:	3b15      	subs	r3, #21
 80287d2:	f023 0303 	bic.w	r3, r3, #3
 80287d6:	3304      	adds	r3, #4
 80287d8:	f104 0215 	add.w	r2, r4, #21
 80287dc:	4290      	cmp	r0, r2
 80287de:	bf38      	it	cc
 80287e0:	2304      	movcc	r3, #4
 80287e2:	f841 c003 	str.w	ip, [r1, r3]
 80287e6:	f1bc 0f00 	cmp.w	ip, #0
 80287ea:	d001      	beq.n	80287f0 <__lshift+0xac>
 80287ec:	f108 0602 	add.w	r6, r8, #2
 80287f0:	3e01      	subs	r6, #1
 80287f2:	4638      	mov	r0, r7
 80287f4:	612e      	str	r6, [r5, #16]
 80287f6:	4621      	mov	r1, r4
 80287f8:	f7ff fd88 	bl	802830c <_Bfree>
 80287fc:	4628      	mov	r0, r5
 80287fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028802:	f842 0f04 	str.w	r0, [r2, #4]!
 8028806:	3301      	adds	r3, #1
 8028808:	e7c1      	b.n	802878e <__lshift+0x4a>
 802880a:	3904      	subs	r1, #4
 802880c:	f853 2b04 	ldr.w	r2, [r3], #4
 8028810:	f841 2f04 	str.w	r2, [r1, #4]!
 8028814:	4298      	cmp	r0, r3
 8028816:	d8f9      	bhi.n	802880c <__lshift+0xc8>
 8028818:	e7ea      	b.n	80287f0 <__lshift+0xac>
 802881a:	bf00      	nop
 802881c:	08037cb8 	.word	0x08037cb8
 8028820:	08037da8 	.word	0x08037da8

08028824 <__mcmp>:
 8028824:	b530      	push	{r4, r5, lr}
 8028826:	6902      	ldr	r2, [r0, #16]
 8028828:	690c      	ldr	r4, [r1, #16]
 802882a:	1b12      	subs	r2, r2, r4
 802882c:	d10e      	bne.n	802884c <__mcmp+0x28>
 802882e:	f100 0314 	add.w	r3, r0, #20
 8028832:	3114      	adds	r1, #20
 8028834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802883c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8028844:	42a5      	cmp	r5, r4
 8028846:	d003      	beq.n	8028850 <__mcmp+0x2c>
 8028848:	d305      	bcc.n	8028856 <__mcmp+0x32>
 802884a:	2201      	movs	r2, #1
 802884c:	4610      	mov	r0, r2
 802884e:	bd30      	pop	{r4, r5, pc}
 8028850:	4283      	cmp	r3, r0
 8028852:	d3f3      	bcc.n	802883c <__mcmp+0x18>
 8028854:	e7fa      	b.n	802884c <__mcmp+0x28>
 8028856:	f04f 32ff 	mov.w	r2, #4294967295
 802885a:	e7f7      	b.n	802884c <__mcmp+0x28>

0802885c <__mdiff>:
 802885c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028860:	460c      	mov	r4, r1
 8028862:	4606      	mov	r6, r0
 8028864:	4611      	mov	r1, r2
 8028866:	4620      	mov	r0, r4
 8028868:	4690      	mov	r8, r2
 802886a:	f7ff ffdb 	bl	8028824 <__mcmp>
 802886e:	1e05      	subs	r5, r0, #0
 8028870:	d110      	bne.n	8028894 <__mdiff+0x38>
 8028872:	4629      	mov	r1, r5
 8028874:	4630      	mov	r0, r6
 8028876:	f7ff fd09 	bl	802828c <_Balloc>
 802887a:	b930      	cbnz	r0, 802888a <__mdiff+0x2e>
 802887c:	4b3a      	ldr	r3, [pc, #232]	; (8028968 <__mdiff+0x10c>)
 802887e:	4602      	mov	r2, r0
 8028880:	f240 2132 	movw	r1, #562	; 0x232
 8028884:	4839      	ldr	r0, [pc, #228]	; (802896c <__mdiff+0x110>)
 8028886:	f000 fbb7 	bl	8028ff8 <__assert_func>
 802888a:	2301      	movs	r3, #1
 802888c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8028890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028894:	bfa4      	itt	ge
 8028896:	4643      	movge	r3, r8
 8028898:	46a0      	movge	r8, r4
 802889a:	4630      	mov	r0, r6
 802889c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80288a0:	bfa6      	itte	ge
 80288a2:	461c      	movge	r4, r3
 80288a4:	2500      	movge	r5, #0
 80288a6:	2501      	movlt	r5, #1
 80288a8:	f7ff fcf0 	bl	802828c <_Balloc>
 80288ac:	b920      	cbnz	r0, 80288b8 <__mdiff+0x5c>
 80288ae:	4b2e      	ldr	r3, [pc, #184]	; (8028968 <__mdiff+0x10c>)
 80288b0:	4602      	mov	r2, r0
 80288b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80288b6:	e7e5      	b.n	8028884 <__mdiff+0x28>
 80288b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80288bc:	6926      	ldr	r6, [r4, #16]
 80288be:	60c5      	str	r5, [r0, #12]
 80288c0:	f104 0914 	add.w	r9, r4, #20
 80288c4:	f108 0514 	add.w	r5, r8, #20
 80288c8:	f100 0e14 	add.w	lr, r0, #20
 80288cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80288d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80288d4:	f108 0210 	add.w	r2, r8, #16
 80288d8:	46f2      	mov	sl, lr
 80288da:	2100      	movs	r1, #0
 80288dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80288e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80288e4:	fa1f f883 	uxth.w	r8, r3
 80288e8:	fa11 f18b 	uxtah	r1, r1, fp
 80288ec:	0c1b      	lsrs	r3, r3, #16
 80288ee:	eba1 0808 	sub.w	r8, r1, r8
 80288f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80288f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80288fa:	fa1f f888 	uxth.w	r8, r8
 80288fe:	1419      	asrs	r1, r3, #16
 8028900:	454e      	cmp	r6, r9
 8028902:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8028906:	f84a 3b04 	str.w	r3, [sl], #4
 802890a:	d8e7      	bhi.n	80288dc <__mdiff+0x80>
 802890c:	1b33      	subs	r3, r6, r4
 802890e:	3b15      	subs	r3, #21
 8028910:	f023 0303 	bic.w	r3, r3, #3
 8028914:	3304      	adds	r3, #4
 8028916:	3415      	adds	r4, #21
 8028918:	42a6      	cmp	r6, r4
 802891a:	bf38      	it	cc
 802891c:	2304      	movcc	r3, #4
 802891e:	441d      	add	r5, r3
 8028920:	4473      	add	r3, lr
 8028922:	469e      	mov	lr, r3
 8028924:	462e      	mov	r6, r5
 8028926:	4566      	cmp	r6, ip
 8028928:	d30e      	bcc.n	8028948 <__mdiff+0xec>
 802892a:	f10c 0203 	add.w	r2, ip, #3
 802892e:	1b52      	subs	r2, r2, r5
 8028930:	f022 0203 	bic.w	r2, r2, #3
 8028934:	3d03      	subs	r5, #3
 8028936:	45ac      	cmp	ip, r5
 8028938:	bf38      	it	cc
 802893a:	2200      	movcc	r2, #0
 802893c:	441a      	add	r2, r3
 802893e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8028942:	b17b      	cbz	r3, 8028964 <__mdiff+0x108>
 8028944:	6107      	str	r7, [r0, #16]
 8028946:	e7a3      	b.n	8028890 <__mdiff+0x34>
 8028948:	f856 8b04 	ldr.w	r8, [r6], #4
 802894c:	fa11 f288 	uxtah	r2, r1, r8
 8028950:	1414      	asrs	r4, r2, #16
 8028952:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8028956:	b292      	uxth	r2, r2
 8028958:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802895c:	f84e 2b04 	str.w	r2, [lr], #4
 8028960:	1421      	asrs	r1, r4, #16
 8028962:	e7e0      	b.n	8028926 <__mdiff+0xca>
 8028964:	3f01      	subs	r7, #1
 8028966:	e7ea      	b.n	802893e <__mdiff+0xe2>
 8028968:	08037cb8 	.word	0x08037cb8
 802896c:	08037da8 	.word	0x08037da8

08028970 <__ulp>:
 8028970:	b082      	sub	sp, #8
 8028972:	ed8d 0b00 	vstr	d0, [sp]
 8028976:	9b01      	ldr	r3, [sp, #4]
 8028978:	4912      	ldr	r1, [pc, #72]	; (80289c4 <__ulp+0x54>)
 802897a:	4019      	ands	r1, r3
 802897c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8028980:	2900      	cmp	r1, #0
 8028982:	dd05      	ble.n	8028990 <__ulp+0x20>
 8028984:	2200      	movs	r2, #0
 8028986:	460b      	mov	r3, r1
 8028988:	ec43 2b10 	vmov	d0, r2, r3
 802898c:	b002      	add	sp, #8
 802898e:	4770      	bx	lr
 8028990:	4249      	negs	r1, r1
 8028992:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8028996:	ea4f 5021 	mov.w	r0, r1, asr #20
 802899a:	f04f 0200 	mov.w	r2, #0
 802899e:	f04f 0300 	mov.w	r3, #0
 80289a2:	da04      	bge.n	80289ae <__ulp+0x3e>
 80289a4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80289a8:	fa41 f300 	asr.w	r3, r1, r0
 80289ac:	e7ec      	b.n	8028988 <__ulp+0x18>
 80289ae:	f1a0 0114 	sub.w	r1, r0, #20
 80289b2:	291e      	cmp	r1, #30
 80289b4:	bfda      	itte	le
 80289b6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80289ba:	fa20 f101 	lsrle.w	r1, r0, r1
 80289be:	2101      	movgt	r1, #1
 80289c0:	460a      	mov	r2, r1
 80289c2:	e7e1      	b.n	8028988 <__ulp+0x18>
 80289c4:	7ff00000 	.word	0x7ff00000

080289c8 <__b2d>:
 80289c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80289ca:	6905      	ldr	r5, [r0, #16]
 80289cc:	f100 0714 	add.w	r7, r0, #20
 80289d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80289d4:	1f2e      	subs	r6, r5, #4
 80289d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80289da:	4620      	mov	r0, r4
 80289dc:	f7ff fd48 	bl	8028470 <__hi0bits>
 80289e0:	f1c0 0320 	rsb	r3, r0, #32
 80289e4:	280a      	cmp	r0, #10
 80289e6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8028a64 <__b2d+0x9c>
 80289ea:	600b      	str	r3, [r1, #0]
 80289ec:	dc14      	bgt.n	8028a18 <__b2d+0x50>
 80289ee:	f1c0 0e0b 	rsb	lr, r0, #11
 80289f2:	fa24 f10e 	lsr.w	r1, r4, lr
 80289f6:	42b7      	cmp	r7, r6
 80289f8:	ea41 030c 	orr.w	r3, r1, ip
 80289fc:	bf34      	ite	cc
 80289fe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028a02:	2100      	movcs	r1, #0
 8028a04:	3015      	adds	r0, #21
 8028a06:	fa04 f000 	lsl.w	r0, r4, r0
 8028a0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8028a0e:	ea40 0201 	orr.w	r2, r0, r1
 8028a12:	ec43 2b10 	vmov	d0, r2, r3
 8028a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028a18:	42b7      	cmp	r7, r6
 8028a1a:	bf3a      	itte	cc
 8028a1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028a20:	f1a5 0608 	subcc.w	r6, r5, #8
 8028a24:	2100      	movcs	r1, #0
 8028a26:	380b      	subs	r0, #11
 8028a28:	d017      	beq.n	8028a5a <__b2d+0x92>
 8028a2a:	f1c0 0c20 	rsb	ip, r0, #32
 8028a2e:	fa04 f500 	lsl.w	r5, r4, r0
 8028a32:	42be      	cmp	r6, r7
 8028a34:	fa21 f40c 	lsr.w	r4, r1, ip
 8028a38:	ea45 0504 	orr.w	r5, r5, r4
 8028a3c:	bf8c      	ite	hi
 8028a3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8028a42:	2400      	movls	r4, #0
 8028a44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8028a48:	fa01 f000 	lsl.w	r0, r1, r0
 8028a4c:	fa24 f40c 	lsr.w	r4, r4, ip
 8028a50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8028a54:	ea40 0204 	orr.w	r2, r0, r4
 8028a58:	e7db      	b.n	8028a12 <__b2d+0x4a>
 8028a5a:	ea44 030c 	orr.w	r3, r4, ip
 8028a5e:	460a      	mov	r2, r1
 8028a60:	e7d7      	b.n	8028a12 <__b2d+0x4a>
 8028a62:	bf00      	nop
 8028a64:	3ff00000 	.word	0x3ff00000

08028a68 <__d2b>:
 8028a68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028a6c:	4689      	mov	r9, r1
 8028a6e:	2101      	movs	r1, #1
 8028a70:	ec57 6b10 	vmov	r6, r7, d0
 8028a74:	4690      	mov	r8, r2
 8028a76:	f7ff fc09 	bl	802828c <_Balloc>
 8028a7a:	4604      	mov	r4, r0
 8028a7c:	b930      	cbnz	r0, 8028a8c <__d2b+0x24>
 8028a7e:	4602      	mov	r2, r0
 8028a80:	4b25      	ldr	r3, [pc, #148]	; (8028b18 <__d2b+0xb0>)
 8028a82:	4826      	ldr	r0, [pc, #152]	; (8028b1c <__d2b+0xb4>)
 8028a84:	f240 310a 	movw	r1, #778	; 0x30a
 8028a88:	f000 fab6 	bl	8028ff8 <__assert_func>
 8028a8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028a90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8028a94:	bb35      	cbnz	r5, 8028ae4 <__d2b+0x7c>
 8028a96:	2e00      	cmp	r6, #0
 8028a98:	9301      	str	r3, [sp, #4]
 8028a9a:	d028      	beq.n	8028aee <__d2b+0x86>
 8028a9c:	4668      	mov	r0, sp
 8028a9e:	9600      	str	r6, [sp, #0]
 8028aa0:	f7ff fd06 	bl	80284b0 <__lo0bits>
 8028aa4:	9900      	ldr	r1, [sp, #0]
 8028aa6:	b300      	cbz	r0, 8028aea <__d2b+0x82>
 8028aa8:	9a01      	ldr	r2, [sp, #4]
 8028aaa:	f1c0 0320 	rsb	r3, r0, #32
 8028aae:	fa02 f303 	lsl.w	r3, r2, r3
 8028ab2:	430b      	orrs	r3, r1
 8028ab4:	40c2      	lsrs	r2, r0
 8028ab6:	6163      	str	r3, [r4, #20]
 8028ab8:	9201      	str	r2, [sp, #4]
 8028aba:	9b01      	ldr	r3, [sp, #4]
 8028abc:	61a3      	str	r3, [r4, #24]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	bf14      	ite	ne
 8028ac2:	2202      	movne	r2, #2
 8028ac4:	2201      	moveq	r2, #1
 8028ac6:	6122      	str	r2, [r4, #16]
 8028ac8:	b1d5      	cbz	r5, 8028b00 <__d2b+0x98>
 8028aca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028ace:	4405      	add	r5, r0
 8028ad0:	f8c9 5000 	str.w	r5, [r9]
 8028ad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028ad8:	f8c8 0000 	str.w	r0, [r8]
 8028adc:	4620      	mov	r0, r4
 8028ade:	b003      	add	sp, #12
 8028ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028ae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028ae8:	e7d5      	b.n	8028a96 <__d2b+0x2e>
 8028aea:	6161      	str	r1, [r4, #20]
 8028aec:	e7e5      	b.n	8028aba <__d2b+0x52>
 8028aee:	a801      	add	r0, sp, #4
 8028af0:	f7ff fcde 	bl	80284b0 <__lo0bits>
 8028af4:	9b01      	ldr	r3, [sp, #4]
 8028af6:	6163      	str	r3, [r4, #20]
 8028af8:	2201      	movs	r2, #1
 8028afa:	6122      	str	r2, [r4, #16]
 8028afc:	3020      	adds	r0, #32
 8028afe:	e7e3      	b.n	8028ac8 <__d2b+0x60>
 8028b00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8028b04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028b08:	f8c9 0000 	str.w	r0, [r9]
 8028b0c:	6918      	ldr	r0, [r3, #16]
 8028b0e:	f7ff fcaf 	bl	8028470 <__hi0bits>
 8028b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8028b16:	e7df      	b.n	8028ad8 <__d2b+0x70>
 8028b18:	08037cb8 	.word	0x08037cb8
 8028b1c:	08037da8 	.word	0x08037da8

08028b20 <__ratio>:
 8028b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b24:	4688      	mov	r8, r1
 8028b26:	4669      	mov	r1, sp
 8028b28:	4681      	mov	r9, r0
 8028b2a:	f7ff ff4d 	bl	80289c8 <__b2d>
 8028b2e:	a901      	add	r1, sp, #4
 8028b30:	4640      	mov	r0, r8
 8028b32:	ec55 4b10 	vmov	r4, r5, d0
 8028b36:	f7ff ff47 	bl	80289c8 <__b2d>
 8028b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8028b42:	eba3 0c02 	sub.w	ip, r3, r2
 8028b46:	e9dd 3200 	ldrd	r3, r2, [sp]
 8028b4a:	1a9b      	subs	r3, r3, r2
 8028b4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8028b50:	ec51 0b10 	vmov	r0, r1, d0
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	bfd6      	itet	le
 8028b58:	460a      	movle	r2, r1
 8028b5a:	462a      	movgt	r2, r5
 8028b5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8028b60:	468b      	mov	fp, r1
 8028b62:	462f      	mov	r7, r5
 8028b64:	bfd4      	ite	le
 8028b66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8028b6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8028b6e:	4620      	mov	r0, r4
 8028b70:	ee10 2a10 	vmov	r2, s0
 8028b74:	465b      	mov	r3, fp
 8028b76:	4639      	mov	r1, r7
 8028b78:	f7e8 f9d0 	bl	8010f1c <__aeabi_ddiv>
 8028b7c:	ec41 0b10 	vmov	d0, r0, r1
 8028b80:	b003      	add	sp, #12
 8028b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028b86 <__copybits>:
 8028b86:	3901      	subs	r1, #1
 8028b88:	b570      	push	{r4, r5, r6, lr}
 8028b8a:	1149      	asrs	r1, r1, #5
 8028b8c:	6914      	ldr	r4, [r2, #16]
 8028b8e:	3101      	adds	r1, #1
 8028b90:	f102 0314 	add.w	r3, r2, #20
 8028b94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8028b98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8028b9c:	1f05      	subs	r5, r0, #4
 8028b9e:	42a3      	cmp	r3, r4
 8028ba0:	d30c      	bcc.n	8028bbc <__copybits+0x36>
 8028ba2:	1aa3      	subs	r3, r4, r2
 8028ba4:	3b11      	subs	r3, #17
 8028ba6:	f023 0303 	bic.w	r3, r3, #3
 8028baa:	3211      	adds	r2, #17
 8028bac:	42a2      	cmp	r2, r4
 8028bae:	bf88      	it	hi
 8028bb0:	2300      	movhi	r3, #0
 8028bb2:	4418      	add	r0, r3
 8028bb4:	2300      	movs	r3, #0
 8028bb6:	4288      	cmp	r0, r1
 8028bb8:	d305      	bcc.n	8028bc6 <__copybits+0x40>
 8028bba:	bd70      	pop	{r4, r5, r6, pc}
 8028bbc:	f853 6b04 	ldr.w	r6, [r3], #4
 8028bc0:	f845 6f04 	str.w	r6, [r5, #4]!
 8028bc4:	e7eb      	b.n	8028b9e <__copybits+0x18>
 8028bc6:	f840 3b04 	str.w	r3, [r0], #4
 8028bca:	e7f4      	b.n	8028bb6 <__copybits+0x30>

08028bcc <__any_on>:
 8028bcc:	f100 0214 	add.w	r2, r0, #20
 8028bd0:	6900      	ldr	r0, [r0, #16]
 8028bd2:	114b      	asrs	r3, r1, #5
 8028bd4:	4298      	cmp	r0, r3
 8028bd6:	b510      	push	{r4, lr}
 8028bd8:	db11      	blt.n	8028bfe <__any_on+0x32>
 8028bda:	dd0a      	ble.n	8028bf2 <__any_on+0x26>
 8028bdc:	f011 011f 	ands.w	r1, r1, #31
 8028be0:	d007      	beq.n	8028bf2 <__any_on+0x26>
 8028be2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8028be6:	fa24 f001 	lsr.w	r0, r4, r1
 8028bea:	fa00 f101 	lsl.w	r1, r0, r1
 8028bee:	428c      	cmp	r4, r1
 8028bf0:	d10b      	bne.n	8028c0a <__any_on+0x3e>
 8028bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028bf6:	4293      	cmp	r3, r2
 8028bf8:	d803      	bhi.n	8028c02 <__any_on+0x36>
 8028bfa:	2000      	movs	r0, #0
 8028bfc:	bd10      	pop	{r4, pc}
 8028bfe:	4603      	mov	r3, r0
 8028c00:	e7f7      	b.n	8028bf2 <__any_on+0x26>
 8028c02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8028c06:	2900      	cmp	r1, #0
 8028c08:	d0f5      	beq.n	8028bf6 <__any_on+0x2a>
 8028c0a:	2001      	movs	r0, #1
 8028c0c:	e7f6      	b.n	8028bfc <__any_on+0x30>

08028c0e <_calloc_r>:
 8028c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028c10:	fba1 2402 	umull	r2, r4, r1, r2
 8028c14:	b94c      	cbnz	r4, 8028c2a <_calloc_r+0x1c>
 8028c16:	4611      	mov	r1, r2
 8028c18:	9201      	str	r2, [sp, #4]
 8028c1a:	f7fc fa21 	bl	8025060 <_malloc_r>
 8028c1e:	9a01      	ldr	r2, [sp, #4]
 8028c20:	4605      	mov	r5, r0
 8028c22:	b930      	cbnz	r0, 8028c32 <_calloc_r+0x24>
 8028c24:	4628      	mov	r0, r5
 8028c26:	b003      	add	sp, #12
 8028c28:	bd30      	pop	{r4, r5, pc}
 8028c2a:	220c      	movs	r2, #12
 8028c2c:	6002      	str	r2, [r0, #0]
 8028c2e:	2500      	movs	r5, #0
 8028c30:	e7f8      	b.n	8028c24 <_calloc_r+0x16>
 8028c32:	4621      	mov	r1, r4
 8028c34:	f7fc f9a0 	bl	8024f78 <memset>
 8028c38:	e7f4      	b.n	8028c24 <_calloc_r+0x16>

08028c3a <__ssputs_r>:
 8028c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028c3e:	688e      	ldr	r6, [r1, #8]
 8028c40:	429e      	cmp	r6, r3
 8028c42:	4682      	mov	sl, r0
 8028c44:	460c      	mov	r4, r1
 8028c46:	4690      	mov	r8, r2
 8028c48:	461f      	mov	r7, r3
 8028c4a:	d838      	bhi.n	8028cbe <__ssputs_r+0x84>
 8028c4c:	898a      	ldrh	r2, [r1, #12]
 8028c4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8028c52:	d032      	beq.n	8028cba <__ssputs_r+0x80>
 8028c54:	6825      	ldr	r5, [r4, #0]
 8028c56:	6909      	ldr	r1, [r1, #16]
 8028c58:	eba5 0901 	sub.w	r9, r5, r1
 8028c5c:	6965      	ldr	r5, [r4, #20]
 8028c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8028c62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028c66:	3301      	adds	r3, #1
 8028c68:	444b      	add	r3, r9
 8028c6a:	106d      	asrs	r5, r5, #1
 8028c6c:	429d      	cmp	r5, r3
 8028c6e:	bf38      	it	cc
 8028c70:	461d      	movcc	r5, r3
 8028c72:	0553      	lsls	r3, r2, #21
 8028c74:	d531      	bpl.n	8028cda <__ssputs_r+0xa0>
 8028c76:	4629      	mov	r1, r5
 8028c78:	f7fc f9f2 	bl	8025060 <_malloc_r>
 8028c7c:	4606      	mov	r6, r0
 8028c7e:	b950      	cbnz	r0, 8028c96 <__ssputs_r+0x5c>
 8028c80:	230c      	movs	r3, #12
 8028c82:	f8ca 3000 	str.w	r3, [sl]
 8028c86:	89a3      	ldrh	r3, [r4, #12]
 8028c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028c8c:	81a3      	strh	r3, [r4, #12]
 8028c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8028c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028c96:	6921      	ldr	r1, [r4, #16]
 8028c98:	464a      	mov	r2, r9
 8028c9a:	f7fc f95f 	bl	8024f5c <memcpy>
 8028c9e:	89a3      	ldrh	r3, [r4, #12]
 8028ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8028ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028ca8:	81a3      	strh	r3, [r4, #12]
 8028caa:	6126      	str	r6, [r4, #16]
 8028cac:	6165      	str	r5, [r4, #20]
 8028cae:	444e      	add	r6, r9
 8028cb0:	eba5 0509 	sub.w	r5, r5, r9
 8028cb4:	6026      	str	r6, [r4, #0]
 8028cb6:	60a5      	str	r5, [r4, #8]
 8028cb8:	463e      	mov	r6, r7
 8028cba:	42be      	cmp	r6, r7
 8028cbc:	d900      	bls.n	8028cc0 <__ssputs_r+0x86>
 8028cbe:	463e      	mov	r6, r7
 8028cc0:	6820      	ldr	r0, [r4, #0]
 8028cc2:	4632      	mov	r2, r6
 8028cc4:	4641      	mov	r1, r8
 8028cc6:	f000 fa0b 	bl	80290e0 <memmove>
 8028cca:	68a3      	ldr	r3, [r4, #8]
 8028ccc:	1b9b      	subs	r3, r3, r6
 8028cce:	60a3      	str	r3, [r4, #8]
 8028cd0:	6823      	ldr	r3, [r4, #0]
 8028cd2:	4433      	add	r3, r6
 8028cd4:	6023      	str	r3, [r4, #0]
 8028cd6:	2000      	movs	r0, #0
 8028cd8:	e7db      	b.n	8028c92 <__ssputs_r+0x58>
 8028cda:	462a      	mov	r2, r5
 8028cdc:	f000 fa1a 	bl	8029114 <_realloc_r>
 8028ce0:	4606      	mov	r6, r0
 8028ce2:	2800      	cmp	r0, #0
 8028ce4:	d1e1      	bne.n	8028caa <__ssputs_r+0x70>
 8028ce6:	6921      	ldr	r1, [r4, #16]
 8028ce8:	4650      	mov	r0, sl
 8028cea:	f7fc f94d 	bl	8024f88 <_free_r>
 8028cee:	e7c7      	b.n	8028c80 <__ssputs_r+0x46>

08028cf0 <_svfiprintf_r>:
 8028cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cf4:	4698      	mov	r8, r3
 8028cf6:	898b      	ldrh	r3, [r1, #12]
 8028cf8:	061b      	lsls	r3, r3, #24
 8028cfa:	b09d      	sub	sp, #116	; 0x74
 8028cfc:	4607      	mov	r7, r0
 8028cfe:	460d      	mov	r5, r1
 8028d00:	4614      	mov	r4, r2
 8028d02:	d50e      	bpl.n	8028d22 <_svfiprintf_r+0x32>
 8028d04:	690b      	ldr	r3, [r1, #16]
 8028d06:	b963      	cbnz	r3, 8028d22 <_svfiprintf_r+0x32>
 8028d08:	2140      	movs	r1, #64	; 0x40
 8028d0a:	f7fc f9a9 	bl	8025060 <_malloc_r>
 8028d0e:	6028      	str	r0, [r5, #0]
 8028d10:	6128      	str	r0, [r5, #16]
 8028d12:	b920      	cbnz	r0, 8028d1e <_svfiprintf_r+0x2e>
 8028d14:	230c      	movs	r3, #12
 8028d16:	603b      	str	r3, [r7, #0]
 8028d18:	f04f 30ff 	mov.w	r0, #4294967295
 8028d1c:	e0d1      	b.n	8028ec2 <_svfiprintf_r+0x1d2>
 8028d1e:	2340      	movs	r3, #64	; 0x40
 8028d20:	616b      	str	r3, [r5, #20]
 8028d22:	2300      	movs	r3, #0
 8028d24:	9309      	str	r3, [sp, #36]	; 0x24
 8028d26:	2320      	movs	r3, #32
 8028d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8028d30:	2330      	movs	r3, #48	; 0x30
 8028d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028edc <_svfiprintf_r+0x1ec>
 8028d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028d3a:	f04f 0901 	mov.w	r9, #1
 8028d3e:	4623      	mov	r3, r4
 8028d40:	469a      	mov	sl, r3
 8028d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028d46:	b10a      	cbz	r2, 8028d4c <_svfiprintf_r+0x5c>
 8028d48:	2a25      	cmp	r2, #37	; 0x25
 8028d4a:	d1f9      	bne.n	8028d40 <_svfiprintf_r+0x50>
 8028d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8028d50:	d00b      	beq.n	8028d6a <_svfiprintf_r+0x7a>
 8028d52:	465b      	mov	r3, fp
 8028d54:	4622      	mov	r2, r4
 8028d56:	4629      	mov	r1, r5
 8028d58:	4638      	mov	r0, r7
 8028d5a:	f7ff ff6e 	bl	8028c3a <__ssputs_r>
 8028d5e:	3001      	adds	r0, #1
 8028d60:	f000 80aa 	beq.w	8028eb8 <_svfiprintf_r+0x1c8>
 8028d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028d66:	445a      	add	r2, fp
 8028d68:	9209      	str	r2, [sp, #36]	; 0x24
 8028d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8028d6e:	2b00      	cmp	r3, #0
 8028d70:	f000 80a2 	beq.w	8028eb8 <_svfiprintf_r+0x1c8>
 8028d74:	2300      	movs	r3, #0
 8028d76:	f04f 32ff 	mov.w	r2, #4294967295
 8028d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028d7e:	f10a 0a01 	add.w	sl, sl, #1
 8028d82:	9304      	str	r3, [sp, #16]
 8028d84:	9307      	str	r3, [sp, #28]
 8028d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8028d8c:	4654      	mov	r4, sl
 8028d8e:	2205      	movs	r2, #5
 8028d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028d94:	4851      	ldr	r0, [pc, #324]	; (8028edc <_svfiprintf_r+0x1ec>)
 8028d96:	f7e7 fd8b 	bl	80108b0 <memchr>
 8028d9a:	9a04      	ldr	r2, [sp, #16]
 8028d9c:	b9d8      	cbnz	r0, 8028dd6 <_svfiprintf_r+0xe6>
 8028d9e:	06d0      	lsls	r0, r2, #27
 8028da0:	bf44      	itt	mi
 8028da2:	2320      	movmi	r3, #32
 8028da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028da8:	0711      	lsls	r1, r2, #28
 8028daa:	bf44      	itt	mi
 8028dac:	232b      	movmi	r3, #43	; 0x2b
 8028dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028db2:	f89a 3000 	ldrb.w	r3, [sl]
 8028db6:	2b2a      	cmp	r3, #42	; 0x2a
 8028db8:	d015      	beq.n	8028de6 <_svfiprintf_r+0xf6>
 8028dba:	9a07      	ldr	r2, [sp, #28]
 8028dbc:	4654      	mov	r4, sl
 8028dbe:	2000      	movs	r0, #0
 8028dc0:	f04f 0c0a 	mov.w	ip, #10
 8028dc4:	4621      	mov	r1, r4
 8028dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028dca:	3b30      	subs	r3, #48	; 0x30
 8028dcc:	2b09      	cmp	r3, #9
 8028dce:	d94e      	bls.n	8028e6e <_svfiprintf_r+0x17e>
 8028dd0:	b1b0      	cbz	r0, 8028e00 <_svfiprintf_r+0x110>
 8028dd2:	9207      	str	r2, [sp, #28]
 8028dd4:	e014      	b.n	8028e00 <_svfiprintf_r+0x110>
 8028dd6:	eba0 0308 	sub.w	r3, r0, r8
 8028dda:	fa09 f303 	lsl.w	r3, r9, r3
 8028dde:	4313      	orrs	r3, r2
 8028de0:	9304      	str	r3, [sp, #16]
 8028de2:	46a2      	mov	sl, r4
 8028de4:	e7d2      	b.n	8028d8c <_svfiprintf_r+0x9c>
 8028de6:	9b03      	ldr	r3, [sp, #12]
 8028de8:	1d19      	adds	r1, r3, #4
 8028dea:	681b      	ldr	r3, [r3, #0]
 8028dec:	9103      	str	r1, [sp, #12]
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	bfbb      	ittet	lt
 8028df2:	425b      	neglt	r3, r3
 8028df4:	f042 0202 	orrlt.w	r2, r2, #2
 8028df8:	9307      	strge	r3, [sp, #28]
 8028dfa:	9307      	strlt	r3, [sp, #28]
 8028dfc:	bfb8      	it	lt
 8028dfe:	9204      	strlt	r2, [sp, #16]
 8028e00:	7823      	ldrb	r3, [r4, #0]
 8028e02:	2b2e      	cmp	r3, #46	; 0x2e
 8028e04:	d10c      	bne.n	8028e20 <_svfiprintf_r+0x130>
 8028e06:	7863      	ldrb	r3, [r4, #1]
 8028e08:	2b2a      	cmp	r3, #42	; 0x2a
 8028e0a:	d135      	bne.n	8028e78 <_svfiprintf_r+0x188>
 8028e0c:	9b03      	ldr	r3, [sp, #12]
 8028e0e:	1d1a      	adds	r2, r3, #4
 8028e10:	681b      	ldr	r3, [r3, #0]
 8028e12:	9203      	str	r2, [sp, #12]
 8028e14:	2b00      	cmp	r3, #0
 8028e16:	bfb8      	it	lt
 8028e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8028e1c:	3402      	adds	r4, #2
 8028e1e:	9305      	str	r3, [sp, #20]
 8028e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028eec <_svfiprintf_r+0x1fc>
 8028e24:	7821      	ldrb	r1, [r4, #0]
 8028e26:	2203      	movs	r2, #3
 8028e28:	4650      	mov	r0, sl
 8028e2a:	f7e7 fd41 	bl	80108b0 <memchr>
 8028e2e:	b140      	cbz	r0, 8028e42 <_svfiprintf_r+0x152>
 8028e30:	2340      	movs	r3, #64	; 0x40
 8028e32:	eba0 000a 	sub.w	r0, r0, sl
 8028e36:	fa03 f000 	lsl.w	r0, r3, r0
 8028e3a:	9b04      	ldr	r3, [sp, #16]
 8028e3c:	4303      	orrs	r3, r0
 8028e3e:	3401      	adds	r4, #1
 8028e40:	9304      	str	r3, [sp, #16]
 8028e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028e46:	4826      	ldr	r0, [pc, #152]	; (8028ee0 <_svfiprintf_r+0x1f0>)
 8028e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028e4c:	2206      	movs	r2, #6
 8028e4e:	f7e7 fd2f 	bl	80108b0 <memchr>
 8028e52:	2800      	cmp	r0, #0
 8028e54:	d038      	beq.n	8028ec8 <_svfiprintf_r+0x1d8>
 8028e56:	4b23      	ldr	r3, [pc, #140]	; (8028ee4 <_svfiprintf_r+0x1f4>)
 8028e58:	bb1b      	cbnz	r3, 8028ea2 <_svfiprintf_r+0x1b2>
 8028e5a:	9b03      	ldr	r3, [sp, #12]
 8028e5c:	3307      	adds	r3, #7
 8028e5e:	f023 0307 	bic.w	r3, r3, #7
 8028e62:	3308      	adds	r3, #8
 8028e64:	9303      	str	r3, [sp, #12]
 8028e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028e68:	4433      	add	r3, r6
 8028e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8028e6c:	e767      	b.n	8028d3e <_svfiprintf_r+0x4e>
 8028e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8028e72:	460c      	mov	r4, r1
 8028e74:	2001      	movs	r0, #1
 8028e76:	e7a5      	b.n	8028dc4 <_svfiprintf_r+0xd4>
 8028e78:	2300      	movs	r3, #0
 8028e7a:	3401      	adds	r4, #1
 8028e7c:	9305      	str	r3, [sp, #20]
 8028e7e:	4619      	mov	r1, r3
 8028e80:	f04f 0c0a 	mov.w	ip, #10
 8028e84:	4620      	mov	r0, r4
 8028e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028e8a:	3a30      	subs	r2, #48	; 0x30
 8028e8c:	2a09      	cmp	r2, #9
 8028e8e:	d903      	bls.n	8028e98 <_svfiprintf_r+0x1a8>
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	d0c5      	beq.n	8028e20 <_svfiprintf_r+0x130>
 8028e94:	9105      	str	r1, [sp, #20]
 8028e96:	e7c3      	b.n	8028e20 <_svfiprintf_r+0x130>
 8028e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8028e9c:	4604      	mov	r4, r0
 8028e9e:	2301      	movs	r3, #1
 8028ea0:	e7f0      	b.n	8028e84 <_svfiprintf_r+0x194>
 8028ea2:	ab03      	add	r3, sp, #12
 8028ea4:	9300      	str	r3, [sp, #0]
 8028ea6:	462a      	mov	r2, r5
 8028ea8:	4b0f      	ldr	r3, [pc, #60]	; (8028ee8 <_svfiprintf_r+0x1f8>)
 8028eaa:	a904      	add	r1, sp, #16
 8028eac:	4638      	mov	r0, r7
 8028eae:	f7fc f9eb 	bl	8025288 <_printf_float>
 8028eb2:	1c42      	adds	r2, r0, #1
 8028eb4:	4606      	mov	r6, r0
 8028eb6:	d1d6      	bne.n	8028e66 <_svfiprintf_r+0x176>
 8028eb8:	89ab      	ldrh	r3, [r5, #12]
 8028eba:	065b      	lsls	r3, r3, #25
 8028ebc:	f53f af2c 	bmi.w	8028d18 <_svfiprintf_r+0x28>
 8028ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028ec2:	b01d      	add	sp, #116	; 0x74
 8028ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ec8:	ab03      	add	r3, sp, #12
 8028eca:	9300      	str	r3, [sp, #0]
 8028ecc:	462a      	mov	r2, r5
 8028ece:	4b06      	ldr	r3, [pc, #24]	; (8028ee8 <_svfiprintf_r+0x1f8>)
 8028ed0:	a904      	add	r1, sp, #16
 8028ed2:	4638      	mov	r0, r7
 8028ed4:	f7fc fc7c 	bl	80257d0 <_printf_i>
 8028ed8:	e7eb      	b.n	8028eb2 <_svfiprintf_r+0x1c2>
 8028eda:	bf00      	nop
 8028edc:	08037f04 	.word	0x08037f04
 8028ee0:	08037f0e 	.word	0x08037f0e
 8028ee4:	08025289 	.word	0x08025289
 8028ee8:	08028c3b 	.word	0x08028c3b
 8028eec:	08037f0a 	.word	0x08037f0a

08028ef0 <nan>:
 8028ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028ef8 <nan+0x8>
 8028ef4:	4770      	bx	lr
 8028ef6:	bf00      	nop
 8028ef8:	00000000 	.word	0x00000000
 8028efc:	7ff80000 	.word	0x7ff80000

08028f00 <nanf>:
 8028f00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028f08 <nanf+0x8>
 8028f04:	4770      	bx	lr
 8028f06:	bf00      	nop
 8028f08:	7fc00000 	.word	0x7fc00000

08028f0c <__sread>:
 8028f0c:	b510      	push	{r4, lr}
 8028f0e:	460c      	mov	r4, r1
 8028f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f14:	f000 fa86 	bl	8029424 <_read_r>
 8028f18:	2800      	cmp	r0, #0
 8028f1a:	bfab      	itete	ge
 8028f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8028f20:	181b      	addge	r3, r3, r0
 8028f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028f26:	bfac      	ite	ge
 8028f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8028f2a:	81a3      	strhlt	r3, [r4, #12]
 8028f2c:	bd10      	pop	{r4, pc}

08028f2e <__swrite>:
 8028f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f32:	461f      	mov	r7, r3
 8028f34:	898b      	ldrh	r3, [r1, #12]
 8028f36:	05db      	lsls	r3, r3, #23
 8028f38:	4605      	mov	r5, r0
 8028f3a:	460c      	mov	r4, r1
 8028f3c:	4616      	mov	r6, r2
 8028f3e:	d505      	bpl.n	8028f4c <__swrite+0x1e>
 8028f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f44:	2302      	movs	r3, #2
 8028f46:	2200      	movs	r2, #0
 8028f48:	f000 f8b8 	bl	80290bc <_lseek_r>
 8028f4c:	89a3      	ldrh	r3, [r4, #12]
 8028f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028f56:	81a3      	strh	r3, [r4, #12]
 8028f58:	4632      	mov	r2, r6
 8028f5a:	463b      	mov	r3, r7
 8028f5c:	4628      	mov	r0, r5
 8028f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028f62:	f000 b837 	b.w	8028fd4 <_write_r>

08028f66 <__sseek>:
 8028f66:	b510      	push	{r4, lr}
 8028f68:	460c      	mov	r4, r1
 8028f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f6e:	f000 f8a5 	bl	80290bc <_lseek_r>
 8028f72:	1c43      	adds	r3, r0, #1
 8028f74:	89a3      	ldrh	r3, [r4, #12]
 8028f76:	bf15      	itete	ne
 8028f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8028f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028f82:	81a3      	strheq	r3, [r4, #12]
 8028f84:	bf18      	it	ne
 8028f86:	81a3      	strhne	r3, [r4, #12]
 8028f88:	bd10      	pop	{r4, pc}

08028f8a <__sclose>:
 8028f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028f8e:	f000 b851 	b.w	8029034 <_close_r>

08028f92 <strncmp>:
 8028f92:	b510      	push	{r4, lr}
 8028f94:	b17a      	cbz	r2, 8028fb6 <strncmp+0x24>
 8028f96:	4603      	mov	r3, r0
 8028f98:	3901      	subs	r1, #1
 8028f9a:	1884      	adds	r4, r0, r2
 8028f9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8028fa0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028fa4:	4290      	cmp	r0, r2
 8028fa6:	d101      	bne.n	8028fac <strncmp+0x1a>
 8028fa8:	42a3      	cmp	r3, r4
 8028faa:	d101      	bne.n	8028fb0 <strncmp+0x1e>
 8028fac:	1a80      	subs	r0, r0, r2
 8028fae:	bd10      	pop	{r4, pc}
 8028fb0:	2800      	cmp	r0, #0
 8028fb2:	d1f3      	bne.n	8028f9c <strncmp+0xa>
 8028fb4:	e7fa      	b.n	8028fac <strncmp+0x1a>
 8028fb6:	4610      	mov	r0, r2
 8028fb8:	e7f9      	b.n	8028fae <strncmp+0x1c>

08028fba <__ascii_wctomb>:
 8028fba:	b149      	cbz	r1, 8028fd0 <__ascii_wctomb+0x16>
 8028fbc:	2aff      	cmp	r2, #255	; 0xff
 8028fbe:	bf85      	ittet	hi
 8028fc0:	238a      	movhi	r3, #138	; 0x8a
 8028fc2:	6003      	strhi	r3, [r0, #0]
 8028fc4:	700a      	strbls	r2, [r1, #0]
 8028fc6:	f04f 30ff 	movhi.w	r0, #4294967295
 8028fca:	bf98      	it	ls
 8028fcc:	2001      	movls	r0, #1
 8028fce:	4770      	bx	lr
 8028fd0:	4608      	mov	r0, r1
 8028fd2:	4770      	bx	lr

08028fd4 <_write_r>:
 8028fd4:	b538      	push	{r3, r4, r5, lr}
 8028fd6:	4d07      	ldr	r5, [pc, #28]	; (8028ff4 <_write_r+0x20>)
 8028fd8:	4604      	mov	r4, r0
 8028fda:	4608      	mov	r0, r1
 8028fdc:	4611      	mov	r1, r2
 8028fde:	2200      	movs	r2, #0
 8028fe0:	602a      	str	r2, [r5, #0]
 8028fe2:	461a      	mov	r2, r3
 8028fe4:	f7e9 fe53 	bl	8012c8e <_write>
 8028fe8:	1c43      	adds	r3, r0, #1
 8028fea:	d102      	bne.n	8028ff2 <_write_r+0x1e>
 8028fec:	682b      	ldr	r3, [r5, #0]
 8028fee:	b103      	cbz	r3, 8028ff2 <_write_r+0x1e>
 8028ff0:	6023      	str	r3, [r4, #0]
 8028ff2:	bd38      	pop	{r3, r4, r5, pc}
 8028ff4:	2000b370 	.word	0x2000b370

08028ff8 <__assert_func>:
 8028ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028ffa:	4614      	mov	r4, r2
 8028ffc:	461a      	mov	r2, r3
 8028ffe:	4b09      	ldr	r3, [pc, #36]	; (8029024 <__assert_func+0x2c>)
 8029000:	681b      	ldr	r3, [r3, #0]
 8029002:	4605      	mov	r5, r0
 8029004:	68d8      	ldr	r0, [r3, #12]
 8029006:	b14c      	cbz	r4, 802901c <__assert_func+0x24>
 8029008:	4b07      	ldr	r3, [pc, #28]	; (8029028 <__assert_func+0x30>)
 802900a:	9100      	str	r1, [sp, #0]
 802900c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029010:	4906      	ldr	r1, [pc, #24]	; (802902c <__assert_func+0x34>)
 8029012:	462b      	mov	r3, r5
 8029014:	f000 f81e 	bl	8029054 <fiprintf>
 8029018:	f000 fa16 	bl	8029448 <abort>
 802901c:	4b04      	ldr	r3, [pc, #16]	; (8029030 <__assert_func+0x38>)
 802901e:	461c      	mov	r4, r3
 8029020:	e7f3      	b.n	802900a <__assert_func+0x12>
 8029022:	bf00      	nop
 8029024:	200000e0 	.word	0x200000e0
 8029028:	08037f15 	.word	0x08037f15
 802902c:	08037f22 	.word	0x08037f22
 8029030:	08037f50 	.word	0x08037f50

08029034 <_close_r>:
 8029034:	b538      	push	{r3, r4, r5, lr}
 8029036:	4d06      	ldr	r5, [pc, #24]	; (8029050 <_close_r+0x1c>)
 8029038:	2300      	movs	r3, #0
 802903a:	4604      	mov	r4, r0
 802903c:	4608      	mov	r0, r1
 802903e:	602b      	str	r3, [r5, #0]
 8029040:	f7e9 fe41 	bl	8012cc6 <_close>
 8029044:	1c43      	adds	r3, r0, #1
 8029046:	d102      	bne.n	802904e <_close_r+0x1a>
 8029048:	682b      	ldr	r3, [r5, #0]
 802904a:	b103      	cbz	r3, 802904e <_close_r+0x1a>
 802904c:	6023      	str	r3, [r4, #0]
 802904e:	bd38      	pop	{r3, r4, r5, pc}
 8029050:	2000b370 	.word	0x2000b370

08029054 <fiprintf>:
 8029054:	b40e      	push	{r1, r2, r3}
 8029056:	b503      	push	{r0, r1, lr}
 8029058:	4601      	mov	r1, r0
 802905a:	ab03      	add	r3, sp, #12
 802905c:	4805      	ldr	r0, [pc, #20]	; (8029074 <fiprintf+0x20>)
 802905e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029062:	6800      	ldr	r0, [r0, #0]
 8029064:	9301      	str	r3, [sp, #4]
 8029066:	f000 f8ad 	bl	80291c4 <_vfiprintf_r>
 802906a:	b002      	add	sp, #8
 802906c:	f85d eb04 	ldr.w	lr, [sp], #4
 8029070:	b003      	add	sp, #12
 8029072:	4770      	bx	lr
 8029074:	200000e0 	.word	0x200000e0

08029078 <_fstat_r>:
 8029078:	b538      	push	{r3, r4, r5, lr}
 802907a:	4d07      	ldr	r5, [pc, #28]	; (8029098 <_fstat_r+0x20>)
 802907c:	2300      	movs	r3, #0
 802907e:	4604      	mov	r4, r0
 8029080:	4608      	mov	r0, r1
 8029082:	4611      	mov	r1, r2
 8029084:	602b      	str	r3, [r5, #0]
 8029086:	f7e9 fe2a 	bl	8012cde <_fstat>
 802908a:	1c43      	adds	r3, r0, #1
 802908c:	d102      	bne.n	8029094 <_fstat_r+0x1c>
 802908e:	682b      	ldr	r3, [r5, #0]
 8029090:	b103      	cbz	r3, 8029094 <_fstat_r+0x1c>
 8029092:	6023      	str	r3, [r4, #0]
 8029094:	bd38      	pop	{r3, r4, r5, pc}
 8029096:	bf00      	nop
 8029098:	2000b370 	.word	0x2000b370

0802909c <_isatty_r>:
 802909c:	b538      	push	{r3, r4, r5, lr}
 802909e:	4d06      	ldr	r5, [pc, #24]	; (80290b8 <_isatty_r+0x1c>)
 80290a0:	2300      	movs	r3, #0
 80290a2:	4604      	mov	r4, r0
 80290a4:	4608      	mov	r0, r1
 80290a6:	602b      	str	r3, [r5, #0]
 80290a8:	f7e9 fe29 	bl	8012cfe <_isatty>
 80290ac:	1c43      	adds	r3, r0, #1
 80290ae:	d102      	bne.n	80290b6 <_isatty_r+0x1a>
 80290b0:	682b      	ldr	r3, [r5, #0]
 80290b2:	b103      	cbz	r3, 80290b6 <_isatty_r+0x1a>
 80290b4:	6023      	str	r3, [r4, #0]
 80290b6:	bd38      	pop	{r3, r4, r5, pc}
 80290b8:	2000b370 	.word	0x2000b370

080290bc <_lseek_r>:
 80290bc:	b538      	push	{r3, r4, r5, lr}
 80290be:	4d07      	ldr	r5, [pc, #28]	; (80290dc <_lseek_r+0x20>)
 80290c0:	4604      	mov	r4, r0
 80290c2:	4608      	mov	r0, r1
 80290c4:	4611      	mov	r1, r2
 80290c6:	2200      	movs	r2, #0
 80290c8:	602a      	str	r2, [r5, #0]
 80290ca:	461a      	mov	r2, r3
 80290cc:	f7e9 fe22 	bl	8012d14 <_lseek>
 80290d0:	1c43      	adds	r3, r0, #1
 80290d2:	d102      	bne.n	80290da <_lseek_r+0x1e>
 80290d4:	682b      	ldr	r3, [r5, #0]
 80290d6:	b103      	cbz	r3, 80290da <_lseek_r+0x1e>
 80290d8:	6023      	str	r3, [r4, #0]
 80290da:	bd38      	pop	{r3, r4, r5, pc}
 80290dc:	2000b370 	.word	0x2000b370

080290e0 <memmove>:
 80290e0:	4288      	cmp	r0, r1
 80290e2:	b510      	push	{r4, lr}
 80290e4:	eb01 0402 	add.w	r4, r1, r2
 80290e8:	d902      	bls.n	80290f0 <memmove+0x10>
 80290ea:	4284      	cmp	r4, r0
 80290ec:	4623      	mov	r3, r4
 80290ee:	d807      	bhi.n	8029100 <memmove+0x20>
 80290f0:	1e43      	subs	r3, r0, #1
 80290f2:	42a1      	cmp	r1, r4
 80290f4:	d008      	beq.n	8029108 <memmove+0x28>
 80290f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80290fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80290fe:	e7f8      	b.n	80290f2 <memmove+0x12>
 8029100:	4402      	add	r2, r0
 8029102:	4601      	mov	r1, r0
 8029104:	428a      	cmp	r2, r1
 8029106:	d100      	bne.n	802910a <memmove+0x2a>
 8029108:	bd10      	pop	{r4, pc}
 802910a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802910e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8029112:	e7f7      	b.n	8029104 <memmove+0x24>

08029114 <_realloc_r>:
 8029114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029118:	4680      	mov	r8, r0
 802911a:	4614      	mov	r4, r2
 802911c:	460e      	mov	r6, r1
 802911e:	b921      	cbnz	r1, 802912a <_realloc_r+0x16>
 8029120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029124:	4611      	mov	r1, r2
 8029126:	f7fb bf9b 	b.w	8025060 <_malloc_r>
 802912a:	b92a      	cbnz	r2, 8029138 <_realloc_r+0x24>
 802912c:	f7fb ff2c 	bl	8024f88 <_free_r>
 8029130:	4625      	mov	r5, r4
 8029132:	4628      	mov	r0, r5
 8029134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029138:	f000 f98d 	bl	8029456 <_malloc_usable_size_r>
 802913c:	4284      	cmp	r4, r0
 802913e:	4607      	mov	r7, r0
 8029140:	d802      	bhi.n	8029148 <_realloc_r+0x34>
 8029142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8029146:	d812      	bhi.n	802916e <_realloc_r+0x5a>
 8029148:	4621      	mov	r1, r4
 802914a:	4640      	mov	r0, r8
 802914c:	f7fb ff88 	bl	8025060 <_malloc_r>
 8029150:	4605      	mov	r5, r0
 8029152:	2800      	cmp	r0, #0
 8029154:	d0ed      	beq.n	8029132 <_realloc_r+0x1e>
 8029156:	42bc      	cmp	r4, r7
 8029158:	4622      	mov	r2, r4
 802915a:	4631      	mov	r1, r6
 802915c:	bf28      	it	cs
 802915e:	463a      	movcs	r2, r7
 8029160:	f7fb fefc 	bl	8024f5c <memcpy>
 8029164:	4631      	mov	r1, r6
 8029166:	4640      	mov	r0, r8
 8029168:	f7fb ff0e 	bl	8024f88 <_free_r>
 802916c:	e7e1      	b.n	8029132 <_realloc_r+0x1e>
 802916e:	4635      	mov	r5, r6
 8029170:	e7df      	b.n	8029132 <_realloc_r+0x1e>

08029172 <__sfputc_r>:
 8029172:	6893      	ldr	r3, [r2, #8]
 8029174:	3b01      	subs	r3, #1
 8029176:	2b00      	cmp	r3, #0
 8029178:	b410      	push	{r4}
 802917a:	6093      	str	r3, [r2, #8]
 802917c:	da08      	bge.n	8029190 <__sfputc_r+0x1e>
 802917e:	6994      	ldr	r4, [r2, #24]
 8029180:	42a3      	cmp	r3, r4
 8029182:	db01      	blt.n	8029188 <__sfputc_r+0x16>
 8029184:	290a      	cmp	r1, #10
 8029186:	d103      	bne.n	8029190 <__sfputc_r+0x1e>
 8029188:	f85d 4b04 	ldr.w	r4, [sp], #4
 802918c:	f7fd bb94 	b.w	80268b8 <__swbuf_r>
 8029190:	6813      	ldr	r3, [r2, #0]
 8029192:	1c58      	adds	r0, r3, #1
 8029194:	6010      	str	r0, [r2, #0]
 8029196:	7019      	strb	r1, [r3, #0]
 8029198:	4608      	mov	r0, r1
 802919a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802919e:	4770      	bx	lr

080291a0 <__sfputs_r>:
 80291a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291a2:	4606      	mov	r6, r0
 80291a4:	460f      	mov	r7, r1
 80291a6:	4614      	mov	r4, r2
 80291a8:	18d5      	adds	r5, r2, r3
 80291aa:	42ac      	cmp	r4, r5
 80291ac:	d101      	bne.n	80291b2 <__sfputs_r+0x12>
 80291ae:	2000      	movs	r0, #0
 80291b0:	e007      	b.n	80291c2 <__sfputs_r+0x22>
 80291b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80291b6:	463a      	mov	r2, r7
 80291b8:	4630      	mov	r0, r6
 80291ba:	f7ff ffda 	bl	8029172 <__sfputc_r>
 80291be:	1c43      	adds	r3, r0, #1
 80291c0:	d1f3      	bne.n	80291aa <__sfputs_r+0xa>
 80291c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080291c4 <_vfiprintf_r>:
 80291c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291c8:	460d      	mov	r5, r1
 80291ca:	b09d      	sub	sp, #116	; 0x74
 80291cc:	4614      	mov	r4, r2
 80291ce:	4698      	mov	r8, r3
 80291d0:	4606      	mov	r6, r0
 80291d2:	b118      	cbz	r0, 80291dc <_vfiprintf_r+0x18>
 80291d4:	6983      	ldr	r3, [r0, #24]
 80291d6:	b90b      	cbnz	r3, 80291dc <_vfiprintf_r+0x18>
 80291d8:	f7fe fbc2 	bl	8027960 <__sinit>
 80291dc:	4b89      	ldr	r3, [pc, #548]	; (8029404 <_vfiprintf_r+0x240>)
 80291de:	429d      	cmp	r5, r3
 80291e0:	d11b      	bne.n	802921a <_vfiprintf_r+0x56>
 80291e2:	6875      	ldr	r5, [r6, #4]
 80291e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80291e6:	07d9      	lsls	r1, r3, #31
 80291e8:	d405      	bmi.n	80291f6 <_vfiprintf_r+0x32>
 80291ea:	89ab      	ldrh	r3, [r5, #12]
 80291ec:	059a      	lsls	r2, r3, #22
 80291ee:	d402      	bmi.n	80291f6 <_vfiprintf_r+0x32>
 80291f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80291f2:	f7fe ffc6 	bl	8028182 <__retarget_lock_acquire_recursive>
 80291f6:	89ab      	ldrh	r3, [r5, #12]
 80291f8:	071b      	lsls	r3, r3, #28
 80291fa:	d501      	bpl.n	8029200 <_vfiprintf_r+0x3c>
 80291fc:	692b      	ldr	r3, [r5, #16]
 80291fe:	b9eb      	cbnz	r3, 802923c <_vfiprintf_r+0x78>
 8029200:	4629      	mov	r1, r5
 8029202:	4630      	mov	r0, r6
 8029204:	f7fd fbaa 	bl	802695c <__swsetup_r>
 8029208:	b1c0      	cbz	r0, 802923c <_vfiprintf_r+0x78>
 802920a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802920c:	07dc      	lsls	r4, r3, #31
 802920e:	d50e      	bpl.n	802922e <_vfiprintf_r+0x6a>
 8029210:	f04f 30ff 	mov.w	r0, #4294967295
 8029214:	b01d      	add	sp, #116	; 0x74
 8029216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802921a:	4b7b      	ldr	r3, [pc, #492]	; (8029408 <_vfiprintf_r+0x244>)
 802921c:	429d      	cmp	r5, r3
 802921e:	d101      	bne.n	8029224 <_vfiprintf_r+0x60>
 8029220:	68b5      	ldr	r5, [r6, #8]
 8029222:	e7df      	b.n	80291e4 <_vfiprintf_r+0x20>
 8029224:	4b79      	ldr	r3, [pc, #484]	; (802940c <_vfiprintf_r+0x248>)
 8029226:	429d      	cmp	r5, r3
 8029228:	bf08      	it	eq
 802922a:	68f5      	ldreq	r5, [r6, #12]
 802922c:	e7da      	b.n	80291e4 <_vfiprintf_r+0x20>
 802922e:	89ab      	ldrh	r3, [r5, #12]
 8029230:	0598      	lsls	r0, r3, #22
 8029232:	d4ed      	bmi.n	8029210 <_vfiprintf_r+0x4c>
 8029234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029236:	f7fe ffa5 	bl	8028184 <__retarget_lock_release_recursive>
 802923a:	e7e9      	b.n	8029210 <_vfiprintf_r+0x4c>
 802923c:	2300      	movs	r3, #0
 802923e:	9309      	str	r3, [sp, #36]	; 0x24
 8029240:	2320      	movs	r3, #32
 8029242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029246:	f8cd 800c 	str.w	r8, [sp, #12]
 802924a:	2330      	movs	r3, #48	; 0x30
 802924c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029410 <_vfiprintf_r+0x24c>
 8029250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029254:	f04f 0901 	mov.w	r9, #1
 8029258:	4623      	mov	r3, r4
 802925a:	469a      	mov	sl, r3
 802925c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029260:	b10a      	cbz	r2, 8029266 <_vfiprintf_r+0xa2>
 8029262:	2a25      	cmp	r2, #37	; 0x25
 8029264:	d1f9      	bne.n	802925a <_vfiprintf_r+0x96>
 8029266:	ebba 0b04 	subs.w	fp, sl, r4
 802926a:	d00b      	beq.n	8029284 <_vfiprintf_r+0xc0>
 802926c:	465b      	mov	r3, fp
 802926e:	4622      	mov	r2, r4
 8029270:	4629      	mov	r1, r5
 8029272:	4630      	mov	r0, r6
 8029274:	f7ff ff94 	bl	80291a0 <__sfputs_r>
 8029278:	3001      	adds	r0, #1
 802927a:	f000 80aa 	beq.w	80293d2 <_vfiprintf_r+0x20e>
 802927e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029280:	445a      	add	r2, fp
 8029282:	9209      	str	r2, [sp, #36]	; 0x24
 8029284:	f89a 3000 	ldrb.w	r3, [sl]
 8029288:	2b00      	cmp	r3, #0
 802928a:	f000 80a2 	beq.w	80293d2 <_vfiprintf_r+0x20e>
 802928e:	2300      	movs	r3, #0
 8029290:	f04f 32ff 	mov.w	r2, #4294967295
 8029294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029298:	f10a 0a01 	add.w	sl, sl, #1
 802929c:	9304      	str	r3, [sp, #16]
 802929e:	9307      	str	r3, [sp, #28]
 80292a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80292a4:	931a      	str	r3, [sp, #104]	; 0x68
 80292a6:	4654      	mov	r4, sl
 80292a8:	2205      	movs	r2, #5
 80292aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80292ae:	4858      	ldr	r0, [pc, #352]	; (8029410 <_vfiprintf_r+0x24c>)
 80292b0:	f7e7 fafe 	bl	80108b0 <memchr>
 80292b4:	9a04      	ldr	r2, [sp, #16]
 80292b6:	b9d8      	cbnz	r0, 80292f0 <_vfiprintf_r+0x12c>
 80292b8:	06d1      	lsls	r1, r2, #27
 80292ba:	bf44      	itt	mi
 80292bc:	2320      	movmi	r3, #32
 80292be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80292c2:	0713      	lsls	r3, r2, #28
 80292c4:	bf44      	itt	mi
 80292c6:	232b      	movmi	r3, #43	; 0x2b
 80292c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80292cc:	f89a 3000 	ldrb.w	r3, [sl]
 80292d0:	2b2a      	cmp	r3, #42	; 0x2a
 80292d2:	d015      	beq.n	8029300 <_vfiprintf_r+0x13c>
 80292d4:	9a07      	ldr	r2, [sp, #28]
 80292d6:	4654      	mov	r4, sl
 80292d8:	2000      	movs	r0, #0
 80292da:	f04f 0c0a 	mov.w	ip, #10
 80292de:	4621      	mov	r1, r4
 80292e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80292e4:	3b30      	subs	r3, #48	; 0x30
 80292e6:	2b09      	cmp	r3, #9
 80292e8:	d94e      	bls.n	8029388 <_vfiprintf_r+0x1c4>
 80292ea:	b1b0      	cbz	r0, 802931a <_vfiprintf_r+0x156>
 80292ec:	9207      	str	r2, [sp, #28]
 80292ee:	e014      	b.n	802931a <_vfiprintf_r+0x156>
 80292f0:	eba0 0308 	sub.w	r3, r0, r8
 80292f4:	fa09 f303 	lsl.w	r3, r9, r3
 80292f8:	4313      	orrs	r3, r2
 80292fa:	9304      	str	r3, [sp, #16]
 80292fc:	46a2      	mov	sl, r4
 80292fe:	e7d2      	b.n	80292a6 <_vfiprintf_r+0xe2>
 8029300:	9b03      	ldr	r3, [sp, #12]
 8029302:	1d19      	adds	r1, r3, #4
 8029304:	681b      	ldr	r3, [r3, #0]
 8029306:	9103      	str	r1, [sp, #12]
 8029308:	2b00      	cmp	r3, #0
 802930a:	bfbb      	ittet	lt
 802930c:	425b      	neglt	r3, r3
 802930e:	f042 0202 	orrlt.w	r2, r2, #2
 8029312:	9307      	strge	r3, [sp, #28]
 8029314:	9307      	strlt	r3, [sp, #28]
 8029316:	bfb8      	it	lt
 8029318:	9204      	strlt	r2, [sp, #16]
 802931a:	7823      	ldrb	r3, [r4, #0]
 802931c:	2b2e      	cmp	r3, #46	; 0x2e
 802931e:	d10c      	bne.n	802933a <_vfiprintf_r+0x176>
 8029320:	7863      	ldrb	r3, [r4, #1]
 8029322:	2b2a      	cmp	r3, #42	; 0x2a
 8029324:	d135      	bne.n	8029392 <_vfiprintf_r+0x1ce>
 8029326:	9b03      	ldr	r3, [sp, #12]
 8029328:	1d1a      	adds	r2, r3, #4
 802932a:	681b      	ldr	r3, [r3, #0]
 802932c:	9203      	str	r2, [sp, #12]
 802932e:	2b00      	cmp	r3, #0
 8029330:	bfb8      	it	lt
 8029332:	f04f 33ff 	movlt.w	r3, #4294967295
 8029336:	3402      	adds	r4, #2
 8029338:	9305      	str	r3, [sp, #20]
 802933a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029420 <_vfiprintf_r+0x25c>
 802933e:	7821      	ldrb	r1, [r4, #0]
 8029340:	2203      	movs	r2, #3
 8029342:	4650      	mov	r0, sl
 8029344:	f7e7 fab4 	bl	80108b0 <memchr>
 8029348:	b140      	cbz	r0, 802935c <_vfiprintf_r+0x198>
 802934a:	2340      	movs	r3, #64	; 0x40
 802934c:	eba0 000a 	sub.w	r0, r0, sl
 8029350:	fa03 f000 	lsl.w	r0, r3, r0
 8029354:	9b04      	ldr	r3, [sp, #16]
 8029356:	4303      	orrs	r3, r0
 8029358:	3401      	adds	r4, #1
 802935a:	9304      	str	r3, [sp, #16]
 802935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029360:	482c      	ldr	r0, [pc, #176]	; (8029414 <_vfiprintf_r+0x250>)
 8029362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029366:	2206      	movs	r2, #6
 8029368:	f7e7 faa2 	bl	80108b0 <memchr>
 802936c:	2800      	cmp	r0, #0
 802936e:	d03f      	beq.n	80293f0 <_vfiprintf_r+0x22c>
 8029370:	4b29      	ldr	r3, [pc, #164]	; (8029418 <_vfiprintf_r+0x254>)
 8029372:	bb1b      	cbnz	r3, 80293bc <_vfiprintf_r+0x1f8>
 8029374:	9b03      	ldr	r3, [sp, #12]
 8029376:	3307      	adds	r3, #7
 8029378:	f023 0307 	bic.w	r3, r3, #7
 802937c:	3308      	adds	r3, #8
 802937e:	9303      	str	r3, [sp, #12]
 8029380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029382:	443b      	add	r3, r7
 8029384:	9309      	str	r3, [sp, #36]	; 0x24
 8029386:	e767      	b.n	8029258 <_vfiprintf_r+0x94>
 8029388:	fb0c 3202 	mla	r2, ip, r2, r3
 802938c:	460c      	mov	r4, r1
 802938e:	2001      	movs	r0, #1
 8029390:	e7a5      	b.n	80292de <_vfiprintf_r+0x11a>
 8029392:	2300      	movs	r3, #0
 8029394:	3401      	adds	r4, #1
 8029396:	9305      	str	r3, [sp, #20]
 8029398:	4619      	mov	r1, r3
 802939a:	f04f 0c0a 	mov.w	ip, #10
 802939e:	4620      	mov	r0, r4
 80293a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80293a4:	3a30      	subs	r2, #48	; 0x30
 80293a6:	2a09      	cmp	r2, #9
 80293a8:	d903      	bls.n	80293b2 <_vfiprintf_r+0x1ee>
 80293aa:	2b00      	cmp	r3, #0
 80293ac:	d0c5      	beq.n	802933a <_vfiprintf_r+0x176>
 80293ae:	9105      	str	r1, [sp, #20]
 80293b0:	e7c3      	b.n	802933a <_vfiprintf_r+0x176>
 80293b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80293b6:	4604      	mov	r4, r0
 80293b8:	2301      	movs	r3, #1
 80293ba:	e7f0      	b.n	802939e <_vfiprintf_r+0x1da>
 80293bc:	ab03      	add	r3, sp, #12
 80293be:	9300      	str	r3, [sp, #0]
 80293c0:	462a      	mov	r2, r5
 80293c2:	4b16      	ldr	r3, [pc, #88]	; (802941c <_vfiprintf_r+0x258>)
 80293c4:	a904      	add	r1, sp, #16
 80293c6:	4630      	mov	r0, r6
 80293c8:	f7fb ff5e 	bl	8025288 <_printf_float>
 80293cc:	4607      	mov	r7, r0
 80293ce:	1c78      	adds	r0, r7, #1
 80293d0:	d1d6      	bne.n	8029380 <_vfiprintf_r+0x1bc>
 80293d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80293d4:	07d9      	lsls	r1, r3, #31
 80293d6:	d405      	bmi.n	80293e4 <_vfiprintf_r+0x220>
 80293d8:	89ab      	ldrh	r3, [r5, #12]
 80293da:	059a      	lsls	r2, r3, #22
 80293dc:	d402      	bmi.n	80293e4 <_vfiprintf_r+0x220>
 80293de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80293e0:	f7fe fed0 	bl	8028184 <__retarget_lock_release_recursive>
 80293e4:	89ab      	ldrh	r3, [r5, #12]
 80293e6:	065b      	lsls	r3, r3, #25
 80293e8:	f53f af12 	bmi.w	8029210 <_vfiprintf_r+0x4c>
 80293ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80293ee:	e711      	b.n	8029214 <_vfiprintf_r+0x50>
 80293f0:	ab03      	add	r3, sp, #12
 80293f2:	9300      	str	r3, [sp, #0]
 80293f4:	462a      	mov	r2, r5
 80293f6:	4b09      	ldr	r3, [pc, #36]	; (802941c <_vfiprintf_r+0x258>)
 80293f8:	a904      	add	r1, sp, #16
 80293fa:	4630      	mov	r0, r6
 80293fc:	f7fc f9e8 	bl	80257d0 <_printf_i>
 8029400:	e7e4      	b.n	80293cc <_vfiprintf_r+0x208>
 8029402:	bf00      	nop
 8029404:	08037cec 	.word	0x08037cec
 8029408:	08037d0c 	.word	0x08037d0c
 802940c:	08037ccc 	.word	0x08037ccc
 8029410:	08037f04 	.word	0x08037f04
 8029414:	08037f0e 	.word	0x08037f0e
 8029418:	08025289 	.word	0x08025289
 802941c:	080291a1 	.word	0x080291a1
 8029420:	08037f0a 	.word	0x08037f0a

08029424 <_read_r>:
 8029424:	b538      	push	{r3, r4, r5, lr}
 8029426:	4d07      	ldr	r5, [pc, #28]	; (8029444 <_read_r+0x20>)
 8029428:	4604      	mov	r4, r0
 802942a:	4608      	mov	r0, r1
 802942c:	4611      	mov	r1, r2
 802942e:	2200      	movs	r2, #0
 8029430:	602a      	str	r2, [r5, #0]
 8029432:	461a      	mov	r2, r3
 8029434:	f7e9 fc0e 	bl	8012c54 <_read>
 8029438:	1c43      	adds	r3, r0, #1
 802943a:	d102      	bne.n	8029442 <_read_r+0x1e>
 802943c:	682b      	ldr	r3, [r5, #0]
 802943e:	b103      	cbz	r3, 8029442 <_read_r+0x1e>
 8029440:	6023      	str	r3, [r4, #0]
 8029442:	bd38      	pop	{r3, r4, r5, pc}
 8029444:	2000b370 	.word	0x2000b370

08029448 <abort>:
 8029448:	b508      	push	{r3, lr}
 802944a:	2006      	movs	r0, #6
 802944c:	f000 f834 	bl	80294b8 <raise>
 8029450:	2001      	movs	r0, #1
 8029452:	f7e9 fbf5 	bl	8012c40 <_exit>

08029456 <_malloc_usable_size_r>:
 8029456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802945a:	1f18      	subs	r0, r3, #4
 802945c:	2b00      	cmp	r3, #0
 802945e:	bfbc      	itt	lt
 8029460:	580b      	ldrlt	r3, [r1, r0]
 8029462:	18c0      	addlt	r0, r0, r3
 8029464:	4770      	bx	lr

08029466 <_raise_r>:
 8029466:	291f      	cmp	r1, #31
 8029468:	b538      	push	{r3, r4, r5, lr}
 802946a:	4604      	mov	r4, r0
 802946c:	460d      	mov	r5, r1
 802946e:	d904      	bls.n	802947a <_raise_r+0x14>
 8029470:	2316      	movs	r3, #22
 8029472:	6003      	str	r3, [r0, #0]
 8029474:	f04f 30ff 	mov.w	r0, #4294967295
 8029478:	bd38      	pop	{r3, r4, r5, pc}
 802947a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802947c:	b112      	cbz	r2, 8029484 <_raise_r+0x1e>
 802947e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029482:	b94b      	cbnz	r3, 8029498 <_raise_r+0x32>
 8029484:	4620      	mov	r0, r4
 8029486:	f000 f831 	bl	80294ec <_getpid_r>
 802948a:	462a      	mov	r2, r5
 802948c:	4601      	mov	r1, r0
 802948e:	4620      	mov	r0, r4
 8029490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029494:	f000 b818 	b.w	80294c8 <_kill_r>
 8029498:	2b01      	cmp	r3, #1
 802949a:	d00a      	beq.n	80294b2 <_raise_r+0x4c>
 802949c:	1c59      	adds	r1, r3, #1
 802949e:	d103      	bne.n	80294a8 <_raise_r+0x42>
 80294a0:	2316      	movs	r3, #22
 80294a2:	6003      	str	r3, [r0, #0]
 80294a4:	2001      	movs	r0, #1
 80294a6:	e7e7      	b.n	8029478 <_raise_r+0x12>
 80294a8:	2400      	movs	r4, #0
 80294aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80294ae:	4628      	mov	r0, r5
 80294b0:	4798      	blx	r3
 80294b2:	2000      	movs	r0, #0
 80294b4:	e7e0      	b.n	8029478 <_raise_r+0x12>
	...

080294b8 <raise>:
 80294b8:	4b02      	ldr	r3, [pc, #8]	; (80294c4 <raise+0xc>)
 80294ba:	4601      	mov	r1, r0
 80294bc:	6818      	ldr	r0, [r3, #0]
 80294be:	f7ff bfd2 	b.w	8029466 <_raise_r>
 80294c2:	bf00      	nop
 80294c4:	200000e0 	.word	0x200000e0

080294c8 <_kill_r>:
 80294c8:	b538      	push	{r3, r4, r5, lr}
 80294ca:	4d07      	ldr	r5, [pc, #28]	; (80294e8 <_kill_r+0x20>)
 80294cc:	2300      	movs	r3, #0
 80294ce:	4604      	mov	r4, r0
 80294d0:	4608      	mov	r0, r1
 80294d2:	4611      	mov	r1, r2
 80294d4:	602b      	str	r3, [r5, #0]
 80294d6:	f7e9 fba3 	bl	8012c20 <_kill>
 80294da:	1c43      	adds	r3, r0, #1
 80294dc:	d102      	bne.n	80294e4 <_kill_r+0x1c>
 80294de:	682b      	ldr	r3, [r5, #0]
 80294e0:	b103      	cbz	r3, 80294e4 <_kill_r+0x1c>
 80294e2:	6023      	str	r3, [r4, #0]
 80294e4:	bd38      	pop	{r3, r4, r5, pc}
 80294e6:	bf00      	nop
 80294e8:	2000b370 	.word	0x2000b370

080294ec <_getpid_r>:
 80294ec:	f7e9 bb90 	b.w	8012c10 <_getpid>

080294f0 <_init>:
 80294f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80294f2:	bf00      	nop
 80294f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80294f6:	bc08      	pop	{r3}
 80294f8:	469e      	mov	lr, r3
 80294fa:	4770      	bx	lr

080294fc <_fini>:
 80294fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80294fe:	bf00      	nop
 8029500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029502:	bc08      	pop	{r3}
 8029504:	469e      	mov	lr, r3
 8029506:	4770      	bx	lr

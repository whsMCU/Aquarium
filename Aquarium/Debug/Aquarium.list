
Aquarium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .tag          00000068  08010000  08010000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000198  08010400  08010400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .version      000002a8  08010598  08010598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         000189b0  08010840  08010840  00010840  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000e9d4  08029200  08029200  00029200  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  08037bd4  08037bd4  000402b4  2**0
                  CONTENTS
  6 .ARM          00000008  08037bd4  08037bd4  00037bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  08037bdc  08037bdc  000402b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08037bdc  08037bdc  00037bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  08037be0  08037be0  00037be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         000002b4  20000000  08037be4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b0f4  200002c0  08037e98  000402c0  2**6
                  ALLOC
 12 ._user_heap_stack 00000604  2000b3b4  08037e98  0004b3b4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000402b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026414  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007233  00000000  00000000  000666f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002470  00000000  00000000  0006d930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000020b0  00000000  00000000  0006fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023f01  00000000  00000000  00071e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00038810  00000000  00000000  00095d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6311  00000000  00000000  000ce561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00174872  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a8a4  00000000  00000000  001748c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010840 <__do_global_dtors_aux>:
 8010840:	b510      	push	{r4, lr}
 8010842:	4c05      	ldr	r4, [pc, #20]	; (8010858 <__do_global_dtors_aux+0x18>)
 8010844:	7823      	ldrb	r3, [r4, #0]
 8010846:	b933      	cbnz	r3, 8010856 <__do_global_dtors_aux+0x16>
 8010848:	4b04      	ldr	r3, [pc, #16]	; (801085c <__do_global_dtors_aux+0x1c>)
 801084a:	b113      	cbz	r3, 8010852 <__do_global_dtors_aux+0x12>
 801084c:	4804      	ldr	r0, [pc, #16]	; (8010860 <__do_global_dtors_aux+0x20>)
 801084e:	f3af 8000 	nop.w
 8010852:	2301      	movs	r3, #1
 8010854:	7023      	strb	r3, [r4, #0]
 8010856:	bd10      	pop	{r4, pc}
 8010858:	200002c0 	.word	0x200002c0
 801085c:	00000000 	.word	0x00000000
 8010860:	080291d8 	.word	0x080291d8

08010864 <frame_dummy>:
 8010864:	b508      	push	{r3, lr}
 8010866:	4b03      	ldr	r3, [pc, #12]	; (8010874 <frame_dummy+0x10>)
 8010868:	b11b      	cbz	r3, 8010872 <frame_dummy+0xe>
 801086a:	4903      	ldr	r1, [pc, #12]	; (8010878 <frame_dummy+0x14>)
 801086c:	4803      	ldr	r0, [pc, #12]	; (801087c <frame_dummy+0x18>)
 801086e:	f3af 8000 	nop.w
 8010872:	bd08      	pop	{r3, pc}
 8010874:	00000000 	.word	0x00000000
 8010878:	200002c4 	.word	0x200002c4
 801087c:	080291d8 	.word	0x080291d8

08010880 <strcmp>:
 8010880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010888:	2a01      	cmp	r2, #1
 801088a:	bf28      	it	cs
 801088c:	429a      	cmpcs	r2, r3
 801088e:	d0f7      	beq.n	8010880 <strcmp>
 8010890:	1ad0      	subs	r0, r2, r3
 8010892:	4770      	bx	lr

08010894 <strlen>:
 8010894:	4603      	mov	r3, r0
 8010896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801089a:	2a00      	cmp	r2, #0
 801089c:	d1fb      	bne.n	8010896 <strlen+0x2>
 801089e:	1a18      	subs	r0, r3, r0
 80108a0:	3801      	subs	r0, #1
 80108a2:	4770      	bx	lr
	...

080108b0 <memchr>:
 80108b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80108b4:	2a10      	cmp	r2, #16
 80108b6:	db2b      	blt.n	8010910 <memchr+0x60>
 80108b8:	f010 0f07 	tst.w	r0, #7
 80108bc:	d008      	beq.n	80108d0 <memchr+0x20>
 80108be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80108c2:	3a01      	subs	r2, #1
 80108c4:	428b      	cmp	r3, r1
 80108c6:	d02d      	beq.n	8010924 <memchr+0x74>
 80108c8:	f010 0f07 	tst.w	r0, #7
 80108cc:	b342      	cbz	r2, 8010920 <memchr+0x70>
 80108ce:	d1f6      	bne.n	80108be <memchr+0xe>
 80108d0:	b4f0      	push	{r4, r5, r6, r7}
 80108d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80108d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80108da:	f022 0407 	bic.w	r4, r2, #7
 80108de:	f07f 0700 	mvns.w	r7, #0
 80108e2:	2300      	movs	r3, #0
 80108e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80108e8:	3c08      	subs	r4, #8
 80108ea:	ea85 0501 	eor.w	r5, r5, r1
 80108ee:	ea86 0601 	eor.w	r6, r6, r1
 80108f2:	fa85 f547 	uadd8	r5, r5, r7
 80108f6:	faa3 f587 	sel	r5, r3, r7
 80108fa:	fa86 f647 	uadd8	r6, r6, r7
 80108fe:	faa5 f687 	sel	r6, r5, r7
 8010902:	b98e      	cbnz	r6, 8010928 <memchr+0x78>
 8010904:	d1ee      	bne.n	80108e4 <memchr+0x34>
 8010906:	bcf0      	pop	{r4, r5, r6, r7}
 8010908:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801090c:	f002 0207 	and.w	r2, r2, #7
 8010910:	b132      	cbz	r2, 8010920 <memchr+0x70>
 8010912:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010916:	3a01      	subs	r2, #1
 8010918:	ea83 0301 	eor.w	r3, r3, r1
 801091c:	b113      	cbz	r3, 8010924 <memchr+0x74>
 801091e:	d1f8      	bne.n	8010912 <memchr+0x62>
 8010920:	2000      	movs	r0, #0
 8010922:	4770      	bx	lr
 8010924:	3801      	subs	r0, #1
 8010926:	4770      	bx	lr
 8010928:	2d00      	cmp	r5, #0
 801092a:	bf06      	itte	eq
 801092c:	4635      	moveq	r5, r6
 801092e:	3803      	subeq	r0, #3
 8010930:	3807      	subne	r0, #7
 8010932:	f015 0f01 	tst.w	r5, #1
 8010936:	d107      	bne.n	8010948 <memchr+0x98>
 8010938:	3001      	adds	r0, #1
 801093a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801093e:	bf02      	ittt	eq
 8010940:	3001      	addeq	r0, #1
 8010942:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010946:	3001      	addeq	r0, #1
 8010948:	bcf0      	pop	{r4, r5, r6, r7}
 801094a:	3801      	subs	r0, #1
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop

08010950 <__aeabi_drsub>:
 8010950:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010954:	e002      	b.n	801095c <__adddf3>
 8010956:	bf00      	nop

08010958 <__aeabi_dsub>:
 8010958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801095c <__adddf3>:
 801095c:	b530      	push	{r4, r5, lr}
 801095e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010962:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010966:	ea94 0f05 	teq	r4, r5
 801096a:	bf08      	it	eq
 801096c:	ea90 0f02 	teqeq	r0, r2
 8010970:	bf1f      	itttt	ne
 8010972:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010976:	ea55 0c02 	orrsne.w	ip, r5, r2
 801097a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801097e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010982:	f000 80e2 	beq.w	8010b4a <__adddf3+0x1ee>
 8010986:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801098a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801098e:	bfb8      	it	lt
 8010990:	426d      	neglt	r5, r5
 8010992:	dd0c      	ble.n	80109ae <__adddf3+0x52>
 8010994:	442c      	add	r4, r5
 8010996:	ea80 0202 	eor.w	r2, r0, r2
 801099a:	ea81 0303 	eor.w	r3, r1, r3
 801099e:	ea82 0000 	eor.w	r0, r2, r0
 80109a2:	ea83 0101 	eor.w	r1, r3, r1
 80109a6:	ea80 0202 	eor.w	r2, r0, r2
 80109aa:	ea81 0303 	eor.w	r3, r1, r3
 80109ae:	2d36      	cmp	r5, #54	; 0x36
 80109b0:	bf88      	it	hi
 80109b2:	bd30      	pophi	{r4, r5, pc}
 80109b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80109b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80109bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80109c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80109c4:	d002      	beq.n	80109cc <__adddf3+0x70>
 80109c6:	4240      	negs	r0, r0
 80109c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80109cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80109d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80109d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80109d8:	d002      	beq.n	80109e0 <__adddf3+0x84>
 80109da:	4252      	negs	r2, r2
 80109dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80109e0:	ea94 0f05 	teq	r4, r5
 80109e4:	f000 80a7 	beq.w	8010b36 <__adddf3+0x1da>
 80109e8:	f1a4 0401 	sub.w	r4, r4, #1
 80109ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80109f0:	db0d      	blt.n	8010a0e <__adddf3+0xb2>
 80109f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80109f6:	fa22 f205 	lsr.w	r2, r2, r5
 80109fa:	1880      	adds	r0, r0, r2
 80109fc:	f141 0100 	adc.w	r1, r1, #0
 8010a00:	fa03 f20e 	lsl.w	r2, r3, lr
 8010a04:	1880      	adds	r0, r0, r2
 8010a06:	fa43 f305 	asr.w	r3, r3, r5
 8010a0a:	4159      	adcs	r1, r3
 8010a0c:	e00e      	b.n	8010a2c <__adddf3+0xd0>
 8010a0e:	f1a5 0520 	sub.w	r5, r5, #32
 8010a12:	f10e 0e20 	add.w	lr, lr, #32
 8010a16:	2a01      	cmp	r2, #1
 8010a18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010a1c:	bf28      	it	cs
 8010a1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010a22:	fa43 f305 	asr.w	r3, r3, r5
 8010a26:	18c0      	adds	r0, r0, r3
 8010a28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010a2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010a30:	d507      	bpl.n	8010a42 <__adddf3+0xe6>
 8010a32:	f04f 0e00 	mov.w	lr, #0
 8010a36:	f1dc 0c00 	rsbs	ip, ip, #0
 8010a3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010a3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010a42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010a46:	d31b      	bcc.n	8010a80 <__adddf3+0x124>
 8010a48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010a4c:	d30c      	bcc.n	8010a68 <__adddf3+0x10c>
 8010a4e:	0849      	lsrs	r1, r1, #1
 8010a50:	ea5f 0030 	movs.w	r0, r0, rrx
 8010a54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010a58:	f104 0401 	add.w	r4, r4, #1
 8010a5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010a60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010a64:	f080 809a 	bcs.w	8010b9c <__adddf3+0x240>
 8010a68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8010a6c:	bf08      	it	eq
 8010a6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010a72:	f150 0000 	adcs.w	r0, r0, #0
 8010a76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010a7a:	ea41 0105 	orr.w	r1, r1, r5
 8010a7e:	bd30      	pop	{r4, r5, pc}
 8010a80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010a84:	4140      	adcs	r0, r0
 8010a86:	eb41 0101 	adc.w	r1, r1, r1
 8010a8a:	3c01      	subs	r4, #1
 8010a8c:	bf28      	it	cs
 8010a8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8010a92:	d2e9      	bcs.n	8010a68 <__adddf3+0x10c>
 8010a94:	f091 0f00 	teq	r1, #0
 8010a98:	bf04      	itt	eq
 8010a9a:	4601      	moveq	r1, r0
 8010a9c:	2000      	moveq	r0, #0
 8010a9e:	fab1 f381 	clz	r3, r1
 8010aa2:	bf08      	it	eq
 8010aa4:	3320      	addeq	r3, #32
 8010aa6:	f1a3 030b 	sub.w	r3, r3, #11
 8010aaa:	f1b3 0220 	subs.w	r2, r3, #32
 8010aae:	da0c      	bge.n	8010aca <__adddf3+0x16e>
 8010ab0:	320c      	adds	r2, #12
 8010ab2:	dd08      	ble.n	8010ac6 <__adddf3+0x16a>
 8010ab4:	f102 0c14 	add.w	ip, r2, #20
 8010ab8:	f1c2 020c 	rsb	r2, r2, #12
 8010abc:	fa01 f00c 	lsl.w	r0, r1, ip
 8010ac0:	fa21 f102 	lsr.w	r1, r1, r2
 8010ac4:	e00c      	b.n	8010ae0 <__adddf3+0x184>
 8010ac6:	f102 0214 	add.w	r2, r2, #20
 8010aca:	bfd8      	it	le
 8010acc:	f1c2 0c20 	rsble	ip, r2, #32
 8010ad0:	fa01 f102 	lsl.w	r1, r1, r2
 8010ad4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010ad8:	bfdc      	itt	le
 8010ada:	ea41 010c 	orrle.w	r1, r1, ip
 8010ade:	4090      	lslle	r0, r2
 8010ae0:	1ae4      	subs	r4, r4, r3
 8010ae2:	bfa2      	ittt	ge
 8010ae4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010ae8:	4329      	orrge	r1, r5
 8010aea:	bd30      	popge	{r4, r5, pc}
 8010aec:	ea6f 0404 	mvn.w	r4, r4
 8010af0:	3c1f      	subs	r4, #31
 8010af2:	da1c      	bge.n	8010b2e <__adddf3+0x1d2>
 8010af4:	340c      	adds	r4, #12
 8010af6:	dc0e      	bgt.n	8010b16 <__adddf3+0x1ba>
 8010af8:	f104 0414 	add.w	r4, r4, #20
 8010afc:	f1c4 0220 	rsb	r2, r4, #32
 8010b00:	fa20 f004 	lsr.w	r0, r0, r4
 8010b04:	fa01 f302 	lsl.w	r3, r1, r2
 8010b08:	ea40 0003 	orr.w	r0, r0, r3
 8010b0c:	fa21 f304 	lsr.w	r3, r1, r4
 8010b10:	ea45 0103 	orr.w	r1, r5, r3
 8010b14:	bd30      	pop	{r4, r5, pc}
 8010b16:	f1c4 040c 	rsb	r4, r4, #12
 8010b1a:	f1c4 0220 	rsb	r2, r4, #32
 8010b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8010b22:	fa01 f304 	lsl.w	r3, r1, r4
 8010b26:	ea40 0003 	orr.w	r0, r0, r3
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	bd30      	pop	{r4, r5, pc}
 8010b2e:	fa21 f004 	lsr.w	r0, r1, r4
 8010b32:	4629      	mov	r1, r5
 8010b34:	bd30      	pop	{r4, r5, pc}
 8010b36:	f094 0f00 	teq	r4, #0
 8010b3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010b3e:	bf06      	itte	eq
 8010b40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010b44:	3401      	addeq	r4, #1
 8010b46:	3d01      	subne	r5, #1
 8010b48:	e74e      	b.n	80109e8 <__adddf3+0x8c>
 8010b4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010b4e:	bf18      	it	ne
 8010b50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010b54:	d029      	beq.n	8010baa <__adddf3+0x24e>
 8010b56:	ea94 0f05 	teq	r4, r5
 8010b5a:	bf08      	it	eq
 8010b5c:	ea90 0f02 	teqeq	r0, r2
 8010b60:	d005      	beq.n	8010b6e <__adddf3+0x212>
 8010b62:	ea54 0c00 	orrs.w	ip, r4, r0
 8010b66:	bf04      	itt	eq
 8010b68:	4619      	moveq	r1, r3
 8010b6a:	4610      	moveq	r0, r2
 8010b6c:	bd30      	pop	{r4, r5, pc}
 8010b6e:	ea91 0f03 	teq	r1, r3
 8010b72:	bf1e      	ittt	ne
 8010b74:	2100      	movne	r1, #0
 8010b76:	2000      	movne	r0, #0
 8010b78:	bd30      	popne	{r4, r5, pc}
 8010b7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010b7e:	d105      	bne.n	8010b8c <__adddf3+0x230>
 8010b80:	0040      	lsls	r0, r0, #1
 8010b82:	4149      	adcs	r1, r1
 8010b84:	bf28      	it	cs
 8010b86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010b8a:	bd30      	pop	{r4, r5, pc}
 8010b8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010b90:	bf3c      	itt	cc
 8010b92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010b96:	bd30      	popcc	{r4, r5, pc}
 8010b98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010b9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010ba0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ba4:	f04f 0000 	mov.w	r0, #0
 8010ba8:	bd30      	pop	{r4, r5, pc}
 8010baa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010bae:	bf1a      	itte	ne
 8010bb0:	4619      	movne	r1, r3
 8010bb2:	4610      	movne	r0, r2
 8010bb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010bb8:	bf1c      	itt	ne
 8010bba:	460b      	movne	r3, r1
 8010bbc:	4602      	movne	r2, r0
 8010bbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010bc2:	bf06      	itte	eq
 8010bc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010bc8:	ea91 0f03 	teqeq	r1, r3
 8010bcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010bd0:	bd30      	pop	{r4, r5, pc}
 8010bd2:	bf00      	nop

08010bd4 <__aeabi_ui2d>:
 8010bd4:	f090 0f00 	teq	r0, #0
 8010bd8:	bf04      	itt	eq
 8010bda:	2100      	moveq	r1, #0
 8010bdc:	4770      	bxeq	lr
 8010bde:	b530      	push	{r4, r5, lr}
 8010be0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010be4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010be8:	f04f 0500 	mov.w	r5, #0
 8010bec:	f04f 0100 	mov.w	r1, #0
 8010bf0:	e750      	b.n	8010a94 <__adddf3+0x138>
 8010bf2:	bf00      	nop

08010bf4 <__aeabi_i2d>:
 8010bf4:	f090 0f00 	teq	r0, #0
 8010bf8:	bf04      	itt	eq
 8010bfa:	2100      	moveq	r1, #0
 8010bfc:	4770      	bxeq	lr
 8010bfe:	b530      	push	{r4, r5, lr}
 8010c00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010c04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010c08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010c0c:	bf48      	it	mi
 8010c0e:	4240      	negmi	r0, r0
 8010c10:	f04f 0100 	mov.w	r1, #0
 8010c14:	e73e      	b.n	8010a94 <__adddf3+0x138>
 8010c16:	bf00      	nop

08010c18 <__aeabi_f2d>:
 8010c18:	0042      	lsls	r2, r0, #1
 8010c1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010c1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010c22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010c26:	bf1f      	itttt	ne
 8010c28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010c2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010c30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010c34:	4770      	bxne	lr
 8010c36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8010c3a:	bf08      	it	eq
 8010c3c:	4770      	bxeq	lr
 8010c3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010c42:	bf04      	itt	eq
 8010c44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010c48:	4770      	bxeq	lr
 8010c4a:	b530      	push	{r4, r5, lr}
 8010c4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010c54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010c58:	e71c      	b.n	8010a94 <__adddf3+0x138>
 8010c5a:	bf00      	nop

08010c5c <__aeabi_ul2d>:
 8010c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8010c60:	bf08      	it	eq
 8010c62:	4770      	bxeq	lr
 8010c64:	b530      	push	{r4, r5, lr}
 8010c66:	f04f 0500 	mov.w	r5, #0
 8010c6a:	e00a      	b.n	8010c82 <__aeabi_l2d+0x16>

08010c6c <__aeabi_l2d>:
 8010c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8010c70:	bf08      	it	eq
 8010c72:	4770      	bxeq	lr
 8010c74:	b530      	push	{r4, r5, lr}
 8010c76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010c7a:	d502      	bpl.n	8010c82 <__aeabi_l2d+0x16>
 8010c7c:	4240      	negs	r0, r0
 8010c7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010c82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010c86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010c8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010c8e:	f43f aed8 	beq.w	8010a42 <__adddf3+0xe6>
 8010c92:	f04f 0203 	mov.w	r2, #3
 8010c96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010c9a:	bf18      	it	ne
 8010c9c:	3203      	addne	r2, #3
 8010c9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010ca2:	bf18      	it	ne
 8010ca4:	3203      	addne	r2, #3
 8010ca6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010caa:	f1c2 0320 	rsb	r3, r2, #32
 8010cae:	fa00 fc03 	lsl.w	ip, r0, r3
 8010cb2:	fa20 f002 	lsr.w	r0, r0, r2
 8010cb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8010cba:	ea40 000e 	orr.w	r0, r0, lr
 8010cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8010cc2:	4414      	add	r4, r2
 8010cc4:	e6bd      	b.n	8010a42 <__adddf3+0xe6>
 8010cc6:	bf00      	nop

08010cc8 <__aeabi_dmul>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010cce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010cd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010cd6:	bf1d      	ittte	ne
 8010cd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010cdc:	ea94 0f0c 	teqne	r4, ip
 8010ce0:	ea95 0f0c 	teqne	r5, ip
 8010ce4:	f000 f8de 	bleq	8010ea4 <__aeabi_dmul+0x1dc>
 8010ce8:	442c      	add	r4, r5
 8010cea:	ea81 0603 	eor.w	r6, r1, r3
 8010cee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010cf2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010cf6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010cfa:	bf18      	it	ne
 8010cfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d08:	d038      	beq.n	8010d7c <__aeabi_dmul+0xb4>
 8010d0a:	fba0 ce02 	umull	ip, lr, r0, r2
 8010d0e:	f04f 0500 	mov.w	r5, #0
 8010d12:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010d16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010d1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010d1e:	f04f 0600 	mov.w	r6, #0
 8010d22:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010d26:	f09c 0f00 	teq	ip, #0
 8010d2a:	bf18      	it	ne
 8010d2c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010d30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010d34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010d38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010d3c:	d204      	bcs.n	8010d48 <__aeabi_dmul+0x80>
 8010d3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010d42:	416d      	adcs	r5, r5
 8010d44:	eb46 0606 	adc.w	r6, r6, r6
 8010d48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010d4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010d50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010d54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010d58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010d5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010d60:	bf88      	it	hi
 8010d62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010d66:	d81e      	bhi.n	8010da6 <__aeabi_dmul+0xde>
 8010d68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010d6c:	bf08      	it	eq
 8010d6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010d72:	f150 0000 	adcs.w	r0, r0, #0
 8010d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}
 8010d7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010d80:	ea46 0101 	orr.w	r1, r6, r1
 8010d84:	ea40 0002 	orr.w	r0, r0, r2
 8010d88:	ea81 0103 	eor.w	r1, r1, r3
 8010d8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010d90:	bfc2      	ittt	gt
 8010d92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010d96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010d9a:	bd70      	popgt	{r4, r5, r6, pc}
 8010d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010da0:	f04f 0e00 	mov.w	lr, #0
 8010da4:	3c01      	subs	r4, #1
 8010da6:	f300 80ab 	bgt.w	8010f00 <__aeabi_dmul+0x238>
 8010daa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010dae:	bfde      	ittt	le
 8010db0:	2000      	movle	r0, #0
 8010db2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010db6:	bd70      	pople	{r4, r5, r6, pc}
 8010db8:	f1c4 0400 	rsb	r4, r4, #0
 8010dbc:	3c20      	subs	r4, #32
 8010dbe:	da35      	bge.n	8010e2c <__aeabi_dmul+0x164>
 8010dc0:	340c      	adds	r4, #12
 8010dc2:	dc1b      	bgt.n	8010dfc <__aeabi_dmul+0x134>
 8010dc4:	f104 0414 	add.w	r4, r4, #20
 8010dc8:	f1c4 0520 	rsb	r5, r4, #32
 8010dcc:	fa00 f305 	lsl.w	r3, r0, r5
 8010dd0:	fa20 f004 	lsr.w	r0, r0, r4
 8010dd4:	fa01 f205 	lsl.w	r2, r1, r5
 8010dd8:	ea40 0002 	orr.w	r0, r0, r2
 8010ddc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010de4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010de8:	fa21 f604 	lsr.w	r6, r1, r4
 8010dec:	eb42 0106 	adc.w	r1, r2, r6
 8010df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010df4:	bf08      	it	eq
 8010df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}
 8010dfc:	f1c4 040c 	rsb	r4, r4, #12
 8010e00:	f1c4 0520 	rsb	r5, r4, #32
 8010e04:	fa00 f304 	lsl.w	r3, r0, r4
 8010e08:	fa20 f005 	lsr.w	r0, r0, r5
 8010e0c:	fa01 f204 	lsl.w	r2, r1, r4
 8010e10:	ea40 0002 	orr.w	r0, r0, r2
 8010e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010e18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010e1c:	f141 0100 	adc.w	r1, r1, #0
 8010e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010e24:	bf08      	it	eq
 8010e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}
 8010e2c:	f1c4 0520 	rsb	r5, r4, #32
 8010e30:	fa00 f205 	lsl.w	r2, r0, r5
 8010e34:	ea4e 0e02 	orr.w	lr, lr, r2
 8010e38:	fa20 f304 	lsr.w	r3, r0, r4
 8010e3c:	fa01 f205 	lsl.w	r2, r1, r5
 8010e40:	ea43 0302 	orr.w	r3, r3, r2
 8010e44:	fa21 f004 	lsr.w	r0, r1, r4
 8010e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010e4c:	fa21 f204 	lsr.w	r2, r1, r4
 8010e50:	ea20 0002 	bic.w	r0, r0, r2
 8010e54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010e58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010e5c:	bf08      	it	eq
 8010e5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	f094 0f00 	teq	r4, #0
 8010e68:	d10f      	bne.n	8010e8a <__aeabi_dmul+0x1c2>
 8010e6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010e6e:	0040      	lsls	r0, r0, #1
 8010e70:	eb41 0101 	adc.w	r1, r1, r1
 8010e74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010e78:	bf08      	it	eq
 8010e7a:	3c01      	subeq	r4, #1
 8010e7c:	d0f7      	beq.n	8010e6e <__aeabi_dmul+0x1a6>
 8010e7e:	ea41 0106 	orr.w	r1, r1, r6
 8010e82:	f095 0f00 	teq	r5, #0
 8010e86:	bf18      	it	ne
 8010e88:	4770      	bxne	lr
 8010e8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010e8e:	0052      	lsls	r2, r2, #1
 8010e90:	eb43 0303 	adc.w	r3, r3, r3
 8010e94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010e98:	bf08      	it	eq
 8010e9a:	3d01      	subeq	r5, #1
 8010e9c:	d0f7      	beq.n	8010e8e <__aeabi_dmul+0x1c6>
 8010e9e:	ea43 0306 	orr.w	r3, r3, r6
 8010ea2:	4770      	bx	lr
 8010ea4:	ea94 0f0c 	teq	r4, ip
 8010ea8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010eac:	bf18      	it	ne
 8010eae:	ea95 0f0c 	teqne	r5, ip
 8010eb2:	d00c      	beq.n	8010ece <__aeabi_dmul+0x206>
 8010eb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010eb8:	bf18      	it	ne
 8010eba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010ebe:	d1d1      	bne.n	8010e64 <__aeabi_dmul+0x19c>
 8010ec0:	ea81 0103 	eor.w	r1, r1, r3
 8010ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010ec8:	f04f 0000 	mov.w	r0, #0
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010ed2:	bf06      	itte	eq
 8010ed4:	4610      	moveq	r0, r2
 8010ed6:	4619      	moveq	r1, r3
 8010ed8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010edc:	d019      	beq.n	8010f12 <__aeabi_dmul+0x24a>
 8010ede:	ea94 0f0c 	teq	r4, ip
 8010ee2:	d102      	bne.n	8010eea <__aeabi_dmul+0x222>
 8010ee4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010ee8:	d113      	bne.n	8010f12 <__aeabi_dmul+0x24a>
 8010eea:	ea95 0f0c 	teq	r5, ip
 8010eee:	d105      	bne.n	8010efc <__aeabi_dmul+0x234>
 8010ef0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010ef4:	bf1c      	itt	ne
 8010ef6:	4610      	movne	r0, r2
 8010ef8:	4619      	movne	r1, r3
 8010efa:	d10a      	bne.n	8010f12 <__aeabi_dmul+0x24a>
 8010efc:	ea81 0103 	eor.w	r1, r1, r3
 8010f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010f04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010f08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010f0c:	f04f 0000 	mov.w	r0, #0
 8010f10:	bd70      	pop	{r4, r5, r6, pc}
 8010f12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010f16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}

08010f1c <__aeabi_ddiv>:
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010f2a:	bf1d      	ittte	ne
 8010f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010f30:	ea94 0f0c 	teqne	r4, ip
 8010f34:	ea95 0f0c 	teqne	r5, ip
 8010f38:	f000 f8a7 	bleq	801108a <__aeabi_ddiv+0x16e>
 8010f3c:	eba4 0405 	sub.w	r4, r4, r5
 8010f40:	ea81 0e03 	eor.w	lr, r1, r3
 8010f44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010f48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010f4c:	f000 8088 	beq.w	8011060 <__aeabi_ddiv+0x144>
 8010f50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010f54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010f58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010f5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010f60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010f64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010f68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010f6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010f70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010f74:	429d      	cmp	r5, r3
 8010f76:	bf08      	it	eq
 8010f78:	4296      	cmpeq	r6, r2
 8010f7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010f7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010f82:	d202      	bcs.n	8010f8a <__aeabi_ddiv+0x6e>
 8010f84:	085b      	lsrs	r3, r3, #1
 8010f86:	ea4f 0232 	mov.w	r2, r2, rrx
 8010f8a:	1ab6      	subs	r6, r6, r2
 8010f8c:	eb65 0503 	sbc.w	r5, r5, r3
 8010f90:	085b      	lsrs	r3, r3, #1
 8010f92:	ea4f 0232 	mov.w	r2, r2, rrx
 8010f96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010f9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010f9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fa6:	bf22      	ittt	cs
 8010fa8:	1ab6      	subcs	r6, r6, r2
 8010faa:	4675      	movcs	r5, lr
 8010fac:	ea40 000c 	orrcs.w	r0, r0, ip
 8010fb0:	085b      	lsrs	r3, r3, #1
 8010fb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fbe:	bf22      	ittt	cs
 8010fc0:	1ab6      	subcs	r6, r6, r2
 8010fc2:	4675      	movcs	r5, lr
 8010fc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010fc8:	085b      	lsrs	r3, r3, #1
 8010fca:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fce:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fd6:	bf22      	ittt	cs
 8010fd8:	1ab6      	subcs	r6, r6, r2
 8010fda:	4675      	movcs	r5, lr
 8010fdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010fe0:	085b      	lsrs	r3, r3, #1
 8010fe2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010fe6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010fea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010fee:	bf22      	ittt	cs
 8010ff0:	1ab6      	subcs	r6, r6, r2
 8010ff2:	4675      	movcs	r5, lr
 8010ff4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010ff8:	ea55 0e06 	orrs.w	lr, r5, r6
 8010ffc:	d018      	beq.n	8011030 <__aeabi_ddiv+0x114>
 8010ffe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011002:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8011006:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801100a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801100e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8011012:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011016:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801101a:	d1c0      	bne.n	8010f9e <__aeabi_ddiv+0x82>
 801101c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011020:	d10b      	bne.n	801103a <__aeabi_ddiv+0x11e>
 8011022:	ea41 0100 	orr.w	r1, r1, r0
 8011026:	f04f 0000 	mov.w	r0, #0
 801102a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801102e:	e7b6      	b.n	8010f9e <__aeabi_ddiv+0x82>
 8011030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011034:	bf04      	itt	eq
 8011036:	4301      	orreq	r1, r0
 8011038:	2000      	moveq	r0, #0
 801103a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801103e:	bf88      	it	hi
 8011040:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011044:	f63f aeaf 	bhi.w	8010da6 <__aeabi_dmul+0xde>
 8011048:	ebb5 0c03 	subs.w	ip, r5, r3
 801104c:	bf04      	itt	eq
 801104e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011056:	f150 0000 	adcs.w	r0, r0, #0
 801105a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801105e:	bd70      	pop	{r4, r5, r6, pc}
 8011060:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8011064:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011068:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801106c:	bfc2      	ittt	gt
 801106e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011072:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011076:	bd70      	popgt	{r4, r5, r6, pc}
 8011078:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801107c:	f04f 0e00 	mov.w	lr, #0
 8011080:	3c01      	subs	r4, #1
 8011082:	e690      	b.n	8010da6 <__aeabi_dmul+0xde>
 8011084:	ea45 0e06 	orr.w	lr, r5, r6
 8011088:	e68d      	b.n	8010da6 <__aeabi_dmul+0xde>
 801108a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801108e:	ea94 0f0c 	teq	r4, ip
 8011092:	bf08      	it	eq
 8011094:	ea95 0f0c 	teqeq	r5, ip
 8011098:	f43f af3b 	beq.w	8010f12 <__aeabi_dmul+0x24a>
 801109c:	ea94 0f0c 	teq	r4, ip
 80110a0:	d10a      	bne.n	80110b8 <__aeabi_ddiv+0x19c>
 80110a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80110a6:	f47f af34 	bne.w	8010f12 <__aeabi_dmul+0x24a>
 80110aa:	ea95 0f0c 	teq	r5, ip
 80110ae:	f47f af25 	bne.w	8010efc <__aeabi_dmul+0x234>
 80110b2:	4610      	mov	r0, r2
 80110b4:	4619      	mov	r1, r3
 80110b6:	e72c      	b.n	8010f12 <__aeabi_dmul+0x24a>
 80110b8:	ea95 0f0c 	teq	r5, ip
 80110bc:	d106      	bne.n	80110cc <__aeabi_ddiv+0x1b0>
 80110be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80110c2:	f43f aefd 	beq.w	8010ec0 <__aeabi_dmul+0x1f8>
 80110c6:	4610      	mov	r0, r2
 80110c8:	4619      	mov	r1, r3
 80110ca:	e722      	b.n	8010f12 <__aeabi_dmul+0x24a>
 80110cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80110d0:	bf18      	it	ne
 80110d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80110d6:	f47f aec5 	bne.w	8010e64 <__aeabi_dmul+0x19c>
 80110da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80110de:	f47f af0d 	bne.w	8010efc <__aeabi_dmul+0x234>
 80110e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80110e6:	f47f aeeb 	bne.w	8010ec0 <__aeabi_dmul+0x1f8>
 80110ea:	e712      	b.n	8010f12 <__aeabi_dmul+0x24a>

080110ec <__gedf2>:
 80110ec:	f04f 3cff 	mov.w	ip, #4294967295
 80110f0:	e006      	b.n	8011100 <__cmpdf2+0x4>
 80110f2:	bf00      	nop

080110f4 <__ledf2>:
 80110f4:	f04f 0c01 	mov.w	ip, #1
 80110f8:	e002      	b.n	8011100 <__cmpdf2+0x4>
 80110fa:	bf00      	nop

080110fc <__cmpdf2>:
 80110fc:	f04f 0c01 	mov.w	ip, #1
 8011100:	f84d cd04 	str.w	ip, [sp, #-4]!
 8011104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801110c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011110:	bf18      	it	ne
 8011112:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8011116:	d01b      	beq.n	8011150 <__cmpdf2+0x54>
 8011118:	b001      	add	sp, #4
 801111a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801111e:	bf0c      	ite	eq
 8011120:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8011124:	ea91 0f03 	teqne	r1, r3
 8011128:	bf02      	ittt	eq
 801112a:	ea90 0f02 	teqeq	r0, r2
 801112e:	2000      	moveq	r0, #0
 8011130:	4770      	bxeq	lr
 8011132:	f110 0f00 	cmn.w	r0, #0
 8011136:	ea91 0f03 	teq	r1, r3
 801113a:	bf58      	it	pl
 801113c:	4299      	cmppl	r1, r3
 801113e:	bf08      	it	eq
 8011140:	4290      	cmpeq	r0, r2
 8011142:	bf2c      	ite	cs
 8011144:	17d8      	asrcs	r0, r3, #31
 8011146:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801114a:	f040 0001 	orr.w	r0, r0, #1
 801114e:	4770      	bx	lr
 8011150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011158:	d102      	bne.n	8011160 <__cmpdf2+0x64>
 801115a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801115e:	d107      	bne.n	8011170 <__cmpdf2+0x74>
 8011160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011168:	d1d6      	bne.n	8011118 <__cmpdf2+0x1c>
 801116a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801116e:	d0d3      	beq.n	8011118 <__cmpdf2+0x1c>
 8011170:	f85d 0b04 	ldr.w	r0, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop

08011178 <__aeabi_cdrcmple>:
 8011178:	4684      	mov	ip, r0
 801117a:	4610      	mov	r0, r2
 801117c:	4662      	mov	r2, ip
 801117e:	468c      	mov	ip, r1
 8011180:	4619      	mov	r1, r3
 8011182:	4663      	mov	r3, ip
 8011184:	e000      	b.n	8011188 <__aeabi_cdcmpeq>
 8011186:	bf00      	nop

08011188 <__aeabi_cdcmpeq>:
 8011188:	b501      	push	{r0, lr}
 801118a:	f7ff ffb7 	bl	80110fc <__cmpdf2>
 801118e:	2800      	cmp	r0, #0
 8011190:	bf48      	it	mi
 8011192:	f110 0f00 	cmnmi.w	r0, #0
 8011196:	bd01      	pop	{r0, pc}

08011198 <__aeabi_dcmpeq>:
 8011198:	f84d ed08 	str.w	lr, [sp, #-8]!
 801119c:	f7ff fff4 	bl	8011188 <__aeabi_cdcmpeq>
 80111a0:	bf0c      	ite	eq
 80111a2:	2001      	moveq	r0, #1
 80111a4:	2000      	movne	r0, #0
 80111a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80111aa:	bf00      	nop

080111ac <__aeabi_dcmplt>:
 80111ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111b0:	f7ff ffea 	bl	8011188 <__aeabi_cdcmpeq>
 80111b4:	bf34      	ite	cc
 80111b6:	2001      	movcc	r0, #1
 80111b8:	2000      	movcs	r0, #0
 80111ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80111be:	bf00      	nop

080111c0 <__aeabi_dcmple>:
 80111c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111c4:	f7ff ffe0 	bl	8011188 <__aeabi_cdcmpeq>
 80111c8:	bf94      	ite	ls
 80111ca:	2001      	movls	r0, #1
 80111cc:	2000      	movhi	r0, #0
 80111ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80111d2:	bf00      	nop

080111d4 <__aeabi_dcmpge>:
 80111d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111d8:	f7ff ffce 	bl	8011178 <__aeabi_cdrcmple>
 80111dc:	bf94      	ite	ls
 80111de:	2001      	movls	r0, #1
 80111e0:	2000      	movhi	r0, #0
 80111e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80111e6:	bf00      	nop

080111e8 <__aeabi_dcmpgt>:
 80111e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80111ec:	f7ff ffc4 	bl	8011178 <__aeabi_cdrcmple>
 80111f0:	bf34      	ite	cc
 80111f2:	2001      	movcc	r0, #1
 80111f4:	2000      	movcs	r0, #0
 80111f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80111fa:	bf00      	nop

080111fc <__aeabi_dcmpun>:
 80111fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011200:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011204:	d102      	bne.n	801120c <__aeabi_dcmpun+0x10>
 8011206:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801120a:	d10a      	bne.n	8011222 <__aeabi_dcmpun+0x26>
 801120c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011210:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011214:	d102      	bne.n	801121c <__aeabi_dcmpun+0x20>
 8011216:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801121a:	d102      	bne.n	8011222 <__aeabi_dcmpun+0x26>
 801121c:	f04f 0000 	mov.w	r0, #0
 8011220:	4770      	bx	lr
 8011222:	f04f 0001 	mov.w	r0, #1
 8011226:	4770      	bx	lr

08011228 <__aeabi_d2iz>:
 8011228:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801122c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011230:	d215      	bcs.n	801125e <__aeabi_d2iz+0x36>
 8011232:	d511      	bpl.n	8011258 <__aeabi_d2iz+0x30>
 8011234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801123c:	d912      	bls.n	8011264 <__aeabi_d2iz+0x3c>
 801123e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801124a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801124e:	fa23 f002 	lsr.w	r0, r3, r2
 8011252:	bf18      	it	ne
 8011254:	4240      	negne	r0, r0
 8011256:	4770      	bx	lr
 8011258:	f04f 0000 	mov.w	r0, #0
 801125c:	4770      	bx	lr
 801125e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011262:	d105      	bne.n	8011270 <__aeabi_d2iz+0x48>
 8011264:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8011268:	bf08      	it	eq
 801126a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801126e:	4770      	bx	lr
 8011270:	f04f 0000 	mov.w	r0, #0
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop

08011278 <__aeabi_d2uiz>:
 8011278:	004a      	lsls	r2, r1, #1
 801127a:	d211      	bcs.n	80112a0 <__aeabi_d2uiz+0x28>
 801127c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011280:	d211      	bcs.n	80112a6 <__aeabi_d2uiz+0x2e>
 8011282:	d50d      	bpl.n	80112a0 <__aeabi_d2uiz+0x28>
 8011284:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011288:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801128c:	d40e      	bmi.n	80112ac <__aeabi_d2uiz+0x34>
 801128e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011296:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801129a:	fa23 f002 	lsr.w	r0, r3, r2
 801129e:	4770      	bx	lr
 80112a0:	f04f 0000 	mov.w	r0, #0
 80112a4:	4770      	bx	lr
 80112a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80112aa:	d102      	bne.n	80112b2 <__aeabi_d2uiz+0x3a>
 80112ac:	f04f 30ff 	mov.w	r0, #4294967295
 80112b0:	4770      	bx	lr
 80112b2:	f04f 0000 	mov.w	r0, #0
 80112b6:	4770      	bx	lr

080112b8 <__aeabi_d2f>:
 80112b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80112bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80112c0:	bf24      	itt	cs
 80112c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80112c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80112ca:	d90d      	bls.n	80112e8 <__aeabi_d2f+0x30>
 80112cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80112d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80112d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80112d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80112dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80112e0:	bf08      	it	eq
 80112e2:	f020 0001 	biceq.w	r0, r0, #1
 80112e6:	4770      	bx	lr
 80112e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80112ec:	d121      	bne.n	8011332 <__aeabi_d2f+0x7a>
 80112ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80112f2:	bfbc      	itt	lt
 80112f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80112f8:	4770      	bxlt	lr
 80112fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80112fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8011302:	f1c2 0218 	rsb	r2, r2, #24
 8011306:	f1c2 0c20 	rsb	ip, r2, #32
 801130a:	fa10 f30c 	lsls.w	r3, r0, ip
 801130e:	fa20 f002 	lsr.w	r0, r0, r2
 8011312:	bf18      	it	ne
 8011314:	f040 0001 	orrne.w	r0, r0, #1
 8011318:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801131c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011320:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011324:	ea40 000c 	orr.w	r0, r0, ip
 8011328:	fa23 f302 	lsr.w	r3, r3, r2
 801132c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011330:	e7cc      	b.n	80112cc <__aeabi_d2f+0x14>
 8011332:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8011336:	d107      	bne.n	8011348 <__aeabi_d2f+0x90>
 8011338:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801133c:	bf1e      	ittt	ne
 801133e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8011342:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8011346:	4770      	bxne	lr
 8011348:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801134c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8011350:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <__aeabi_uldivmod>:
 8011358:	b953      	cbnz	r3, 8011370 <__aeabi_uldivmod+0x18>
 801135a:	b94a      	cbnz	r2, 8011370 <__aeabi_uldivmod+0x18>
 801135c:	2900      	cmp	r1, #0
 801135e:	bf08      	it	eq
 8011360:	2800      	cmpeq	r0, #0
 8011362:	bf1c      	itt	ne
 8011364:	f04f 31ff 	movne.w	r1, #4294967295
 8011368:	f04f 30ff 	movne.w	r0, #4294967295
 801136c:	f000 b9aa 	b.w	80116c4 <__aeabi_idiv0>
 8011370:	f1ad 0c08 	sub.w	ip, sp, #8
 8011374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8011378:	f000 f83c 	bl	80113f4 <__udivmoddi4>
 801137c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011384:	b004      	add	sp, #16
 8011386:	4770      	bx	lr

08011388 <__aeabi_d2lz>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	2200      	movs	r2, #0
 801138c:	2300      	movs	r3, #0
 801138e:	4604      	mov	r4, r0
 8011390:	460d      	mov	r5, r1
 8011392:	f7ff ff0b 	bl	80111ac <__aeabi_dcmplt>
 8011396:	b928      	cbnz	r0, 80113a4 <__aeabi_d2lz+0x1c>
 8011398:	4620      	mov	r0, r4
 801139a:	4629      	mov	r1, r5
 801139c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113a0:	f000 b80a 	b.w	80113b8 <__aeabi_d2ulz>
 80113a4:	4620      	mov	r0, r4
 80113a6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80113aa:	f000 f805 	bl	80113b8 <__aeabi_d2ulz>
 80113ae:	4240      	negs	r0, r0
 80113b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80113b4:	bd38      	pop	{r3, r4, r5, pc}
 80113b6:	bf00      	nop

080113b8 <__aeabi_d2ulz>:
 80113b8:	b5d0      	push	{r4, r6, r7, lr}
 80113ba:	4b0c      	ldr	r3, [pc, #48]	; (80113ec <__aeabi_d2ulz+0x34>)
 80113bc:	2200      	movs	r2, #0
 80113be:	4606      	mov	r6, r0
 80113c0:	460f      	mov	r7, r1
 80113c2:	f7ff fc81 	bl	8010cc8 <__aeabi_dmul>
 80113c6:	f7ff ff57 	bl	8011278 <__aeabi_d2uiz>
 80113ca:	4604      	mov	r4, r0
 80113cc:	f7ff fc02 	bl	8010bd4 <__aeabi_ui2d>
 80113d0:	4b07      	ldr	r3, [pc, #28]	; (80113f0 <__aeabi_d2ulz+0x38>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	f7ff fc78 	bl	8010cc8 <__aeabi_dmul>
 80113d8:	4602      	mov	r2, r0
 80113da:	460b      	mov	r3, r1
 80113dc:	4630      	mov	r0, r6
 80113de:	4639      	mov	r1, r7
 80113e0:	f7ff faba 	bl	8010958 <__aeabi_dsub>
 80113e4:	f7ff ff48 	bl	8011278 <__aeabi_d2uiz>
 80113e8:	4621      	mov	r1, r4
 80113ea:	bdd0      	pop	{r4, r6, r7, pc}
 80113ec:	3df00000 	.word	0x3df00000
 80113f0:	41f00000 	.word	0x41f00000

080113f4 <__udivmoddi4>:
 80113f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f8:	9d08      	ldr	r5, [sp, #32]
 80113fa:	4604      	mov	r4, r0
 80113fc:	468e      	mov	lr, r1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d14d      	bne.n	801149e <__udivmoddi4+0xaa>
 8011402:	428a      	cmp	r2, r1
 8011404:	4694      	mov	ip, r2
 8011406:	d969      	bls.n	80114dc <__udivmoddi4+0xe8>
 8011408:	fab2 f282 	clz	r2, r2
 801140c:	b152      	cbz	r2, 8011424 <__udivmoddi4+0x30>
 801140e:	fa01 f302 	lsl.w	r3, r1, r2
 8011412:	f1c2 0120 	rsb	r1, r2, #32
 8011416:	fa20 f101 	lsr.w	r1, r0, r1
 801141a:	fa0c fc02 	lsl.w	ip, ip, r2
 801141e:	ea41 0e03 	orr.w	lr, r1, r3
 8011422:	4094      	lsls	r4, r2
 8011424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8011428:	0c21      	lsrs	r1, r4, #16
 801142a:	fbbe f6f8 	udiv	r6, lr, r8
 801142e:	fa1f f78c 	uxth.w	r7, ip
 8011432:	fb08 e316 	mls	r3, r8, r6, lr
 8011436:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801143a:	fb06 f107 	mul.w	r1, r6, r7
 801143e:	4299      	cmp	r1, r3
 8011440:	d90a      	bls.n	8011458 <__udivmoddi4+0x64>
 8011442:	eb1c 0303 	adds.w	r3, ip, r3
 8011446:	f106 30ff 	add.w	r0, r6, #4294967295
 801144a:	f080 811f 	bcs.w	801168c <__udivmoddi4+0x298>
 801144e:	4299      	cmp	r1, r3
 8011450:	f240 811c 	bls.w	801168c <__udivmoddi4+0x298>
 8011454:	3e02      	subs	r6, #2
 8011456:	4463      	add	r3, ip
 8011458:	1a5b      	subs	r3, r3, r1
 801145a:	b2a4      	uxth	r4, r4
 801145c:	fbb3 f0f8 	udiv	r0, r3, r8
 8011460:	fb08 3310 	mls	r3, r8, r0, r3
 8011464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8011468:	fb00 f707 	mul.w	r7, r0, r7
 801146c:	42a7      	cmp	r7, r4
 801146e:	d90a      	bls.n	8011486 <__udivmoddi4+0x92>
 8011470:	eb1c 0404 	adds.w	r4, ip, r4
 8011474:	f100 33ff 	add.w	r3, r0, #4294967295
 8011478:	f080 810a 	bcs.w	8011690 <__udivmoddi4+0x29c>
 801147c:	42a7      	cmp	r7, r4
 801147e:	f240 8107 	bls.w	8011690 <__udivmoddi4+0x29c>
 8011482:	4464      	add	r4, ip
 8011484:	3802      	subs	r0, #2
 8011486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801148a:	1be4      	subs	r4, r4, r7
 801148c:	2600      	movs	r6, #0
 801148e:	b11d      	cbz	r5, 8011498 <__udivmoddi4+0xa4>
 8011490:	40d4      	lsrs	r4, r2
 8011492:	2300      	movs	r3, #0
 8011494:	e9c5 4300 	strd	r4, r3, [r5]
 8011498:	4631      	mov	r1, r6
 801149a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801149e:	428b      	cmp	r3, r1
 80114a0:	d909      	bls.n	80114b6 <__udivmoddi4+0xc2>
 80114a2:	2d00      	cmp	r5, #0
 80114a4:	f000 80ef 	beq.w	8011686 <__udivmoddi4+0x292>
 80114a8:	2600      	movs	r6, #0
 80114aa:	e9c5 0100 	strd	r0, r1, [r5]
 80114ae:	4630      	mov	r0, r6
 80114b0:	4631      	mov	r1, r6
 80114b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114b6:	fab3 f683 	clz	r6, r3
 80114ba:	2e00      	cmp	r6, #0
 80114bc:	d14a      	bne.n	8011554 <__udivmoddi4+0x160>
 80114be:	428b      	cmp	r3, r1
 80114c0:	d302      	bcc.n	80114c8 <__udivmoddi4+0xd4>
 80114c2:	4282      	cmp	r2, r0
 80114c4:	f200 80f9 	bhi.w	80116ba <__udivmoddi4+0x2c6>
 80114c8:	1a84      	subs	r4, r0, r2
 80114ca:	eb61 0303 	sbc.w	r3, r1, r3
 80114ce:	2001      	movs	r0, #1
 80114d0:	469e      	mov	lr, r3
 80114d2:	2d00      	cmp	r5, #0
 80114d4:	d0e0      	beq.n	8011498 <__udivmoddi4+0xa4>
 80114d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80114da:	e7dd      	b.n	8011498 <__udivmoddi4+0xa4>
 80114dc:	b902      	cbnz	r2, 80114e0 <__udivmoddi4+0xec>
 80114de:	deff      	udf	#255	; 0xff
 80114e0:	fab2 f282 	clz	r2, r2
 80114e4:	2a00      	cmp	r2, #0
 80114e6:	f040 8092 	bne.w	801160e <__udivmoddi4+0x21a>
 80114ea:	eba1 010c 	sub.w	r1, r1, ip
 80114ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80114f2:	fa1f fe8c 	uxth.w	lr, ip
 80114f6:	2601      	movs	r6, #1
 80114f8:	0c20      	lsrs	r0, r4, #16
 80114fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80114fe:	fb07 1113 	mls	r1, r7, r3, r1
 8011502:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011506:	fb0e f003 	mul.w	r0, lr, r3
 801150a:	4288      	cmp	r0, r1
 801150c:	d908      	bls.n	8011520 <__udivmoddi4+0x12c>
 801150e:	eb1c 0101 	adds.w	r1, ip, r1
 8011512:	f103 38ff 	add.w	r8, r3, #4294967295
 8011516:	d202      	bcs.n	801151e <__udivmoddi4+0x12a>
 8011518:	4288      	cmp	r0, r1
 801151a:	f200 80cb 	bhi.w	80116b4 <__udivmoddi4+0x2c0>
 801151e:	4643      	mov	r3, r8
 8011520:	1a09      	subs	r1, r1, r0
 8011522:	b2a4      	uxth	r4, r4
 8011524:	fbb1 f0f7 	udiv	r0, r1, r7
 8011528:	fb07 1110 	mls	r1, r7, r0, r1
 801152c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8011530:	fb0e fe00 	mul.w	lr, lr, r0
 8011534:	45a6      	cmp	lr, r4
 8011536:	d908      	bls.n	801154a <__udivmoddi4+0x156>
 8011538:	eb1c 0404 	adds.w	r4, ip, r4
 801153c:	f100 31ff 	add.w	r1, r0, #4294967295
 8011540:	d202      	bcs.n	8011548 <__udivmoddi4+0x154>
 8011542:	45a6      	cmp	lr, r4
 8011544:	f200 80bb 	bhi.w	80116be <__udivmoddi4+0x2ca>
 8011548:	4608      	mov	r0, r1
 801154a:	eba4 040e 	sub.w	r4, r4, lr
 801154e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8011552:	e79c      	b.n	801148e <__udivmoddi4+0x9a>
 8011554:	f1c6 0720 	rsb	r7, r6, #32
 8011558:	40b3      	lsls	r3, r6
 801155a:	fa22 fc07 	lsr.w	ip, r2, r7
 801155e:	ea4c 0c03 	orr.w	ip, ip, r3
 8011562:	fa20 f407 	lsr.w	r4, r0, r7
 8011566:	fa01 f306 	lsl.w	r3, r1, r6
 801156a:	431c      	orrs	r4, r3
 801156c:	40f9      	lsrs	r1, r7
 801156e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8011572:	fa00 f306 	lsl.w	r3, r0, r6
 8011576:	fbb1 f8f9 	udiv	r8, r1, r9
 801157a:	0c20      	lsrs	r0, r4, #16
 801157c:	fa1f fe8c 	uxth.w	lr, ip
 8011580:	fb09 1118 	mls	r1, r9, r8, r1
 8011584:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011588:	fb08 f00e 	mul.w	r0, r8, lr
 801158c:	4288      	cmp	r0, r1
 801158e:	fa02 f206 	lsl.w	r2, r2, r6
 8011592:	d90b      	bls.n	80115ac <__udivmoddi4+0x1b8>
 8011594:	eb1c 0101 	adds.w	r1, ip, r1
 8011598:	f108 3aff 	add.w	sl, r8, #4294967295
 801159c:	f080 8088 	bcs.w	80116b0 <__udivmoddi4+0x2bc>
 80115a0:	4288      	cmp	r0, r1
 80115a2:	f240 8085 	bls.w	80116b0 <__udivmoddi4+0x2bc>
 80115a6:	f1a8 0802 	sub.w	r8, r8, #2
 80115aa:	4461      	add	r1, ip
 80115ac:	1a09      	subs	r1, r1, r0
 80115ae:	b2a4      	uxth	r4, r4
 80115b0:	fbb1 f0f9 	udiv	r0, r1, r9
 80115b4:	fb09 1110 	mls	r1, r9, r0, r1
 80115b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80115bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80115c0:	458e      	cmp	lr, r1
 80115c2:	d908      	bls.n	80115d6 <__udivmoddi4+0x1e2>
 80115c4:	eb1c 0101 	adds.w	r1, ip, r1
 80115c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80115cc:	d26c      	bcs.n	80116a8 <__udivmoddi4+0x2b4>
 80115ce:	458e      	cmp	lr, r1
 80115d0:	d96a      	bls.n	80116a8 <__udivmoddi4+0x2b4>
 80115d2:	3802      	subs	r0, #2
 80115d4:	4461      	add	r1, ip
 80115d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80115da:	fba0 9402 	umull	r9, r4, r0, r2
 80115de:	eba1 010e 	sub.w	r1, r1, lr
 80115e2:	42a1      	cmp	r1, r4
 80115e4:	46c8      	mov	r8, r9
 80115e6:	46a6      	mov	lr, r4
 80115e8:	d356      	bcc.n	8011698 <__udivmoddi4+0x2a4>
 80115ea:	d053      	beq.n	8011694 <__udivmoddi4+0x2a0>
 80115ec:	b15d      	cbz	r5, 8011606 <__udivmoddi4+0x212>
 80115ee:	ebb3 0208 	subs.w	r2, r3, r8
 80115f2:	eb61 010e 	sbc.w	r1, r1, lr
 80115f6:	fa01 f707 	lsl.w	r7, r1, r7
 80115fa:	fa22 f306 	lsr.w	r3, r2, r6
 80115fe:	40f1      	lsrs	r1, r6
 8011600:	431f      	orrs	r7, r3
 8011602:	e9c5 7100 	strd	r7, r1, [r5]
 8011606:	2600      	movs	r6, #0
 8011608:	4631      	mov	r1, r6
 801160a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160e:	f1c2 0320 	rsb	r3, r2, #32
 8011612:	40d8      	lsrs	r0, r3
 8011614:	fa0c fc02 	lsl.w	ip, ip, r2
 8011618:	fa21 f303 	lsr.w	r3, r1, r3
 801161c:	4091      	lsls	r1, r2
 801161e:	4301      	orrs	r1, r0
 8011620:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011624:	fa1f fe8c 	uxth.w	lr, ip
 8011628:	fbb3 f0f7 	udiv	r0, r3, r7
 801162c:	fb07 3610 	mls	r6, r7, r0, r3
 8011630:	0c0b      	lsrs	r3, r1, #16
 8011632:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8011636:	fb00 f60e 	mul.w	r6, r0, lr
 801163a:	429e      	cmp	r6, r3
 801163c:	fa04 f402 	lsl.w	r4, r4, r2
 8011640:	d908      	bls.n	8011654 <__udivmoddi4+0x260>
 8011642:	eb1c 0303 	adds.w	r3, ip, r3
 8011646:	f100 38ff 	add.w	r8, r0, #4294967295
 801164a:	d22f      	bcs.n	80116ac <__udivmoddi4+0x2b8>
 801164c:	429e      	cmp	r6, r3
 801164e:	d92d      	bls.n	80116ac <__udivmoddi4+0x2b8>
 8011650:	3802      	subs	r0, #2
 8011652:	4463      	add	r3, ip
 8011654:	1b9b      	subs	r3, r3, r6
 8011656:	b289      	uxth	r1, r1
 8011658:	fbb3 f6f7 	udiv	r6, r3, r7
 801165c:	fb07 3316 	mls	r3, r7, r6, r3
 8011660:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011664:	fb06 f30e 	mul.w	r3, r6, lr
 8011668:	428b      	cmp	r3, r1
 801166a:	d908      	bls.n	801167e <__udivmoddi4+0x28a>
 801166c:	eb1c 0101 	adds.w	r1, ip, r1
 8011670:	f106 38ff 	add.w	r8, r6, #4294967295
 8011674:	d216      	bcs.n	80116a4 <__udivmoddi4+0x2b0>
 8011676:	428b      	cmp	r3, r1
 8011678:	d914      	bls.n	80116a4 <__udivmoddi4+0x2b0>
 801167a:	3e02      	subs	r6, #2
 801167c:	4461      	add	r1, ip
 801167e:	1ac9      	subs	r1, r1, r3
 8011680:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8011684:	e738      	b.n	80114f8 <__udivmoddi4+0x104>
 8011686:	462e      	mov	r6, r5
 8011688:	4628      	mov	r0, r5
 801168a:	e705      	b.n	8011498 <__udivmoddi4+0xa4>
 801168c:	4606      	mov	r6, r0
 801168e:	e6e3      	b.n	8011458 <__udivmoddi4+0x64>
 8011690:	4618      	mov	r0, r3
 8011692:	e6f8      	b.n	8011486 <__udivmoddi4+0x92>
 8011694:	454b      	cmp	r3, r9
 8011696:	d2a9      	bcs.n	80115ec <__udivmoddi4+0x1f8>
 8011698:	ebb9 0802 	subs.w	r8, r9, r2
 801169c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80116a0:	3801      	subs	r0, #1
 80116a2:	e7a3      	b.n	80115ec <__udivmoddi4+0x1f8>
 80116a4:	4646      	mov	r6, r8
 80116a6:	e7ea      	b.n	801167e <__udivmoddi4+0x28a>
 80116a8:	4620      	mov	r0, r4
 80116aa:	e794      	b.n	80115d6 <__udivmoddi4+0x1e2>
 80116ac:	4640      	mov	r0, r8
 80116ae:	e7d1      	b.n	8011654 <__udivmoddi4+0x260>
 80116b0:	46d0      	mov	r8, sl
 80116b2:	e77b      	b.n	80115ac <__udivmoddi4+0x1b8>
 80116b4:	3b02      	subs	r3, #2
 80116b6:	4461      	add	r1, ip
 80116b8:	e732      	b.n	8011520 <__udivmoddi4+0x12c>
 80116ba:	4630      	mov	r0, r6
 80116bc:	e709      	b.n	80114d2 <__udivmoddi4+0xde>
 80116be:	4464      	add	r4, ip
 80116c0:	3802      	subs	r0, #2
 80116c2:	e742      	b.n	801154a <__udivmoddi4+0x156>

080116c4 <__aeabi_idiv0>:
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <apInit>:

menu_t menu;
sensor_t sensor;

void apInit(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
	//cliOpen(_DEF_UART1, 57600);
	uartOpen(_DEF_UART1, 57600);
 80116cc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80116d0:	2000      	movs	r0, #0
 80116d2:	f006 fb85 	bl	8017de0 <uartOpen>
	//menuSetCallBack(lcdMain);
	cliAdd("boot", cliBoot);
 80116d6:	4916      	ldr	r1, [pc, #88]	; (8011730 <apInit+0x68>)
 80116d8:	4816      	ldr	r0, [pc, #88]	; (8011734 <apInit+0x6c>)
 80116da:	f001 ff49 	bl	8013570 <cliAdd>
	menuInit();
 80116de:	f000 f87f 	bl	80117e0 <menuInit>
	Mode = Manual_Mode;
 80116e2:	4b15      	ldr	r3, [pc, #84]	; (8011738 <apInit+0x70>)
 80116e4:	2201      	movs	r2, #1
 80116e6:	701a      	strb	r2, [r3, #0]
	sensor.setting_cnt = 3;
 80116e8:	4b14      	ldr	r3, [pc, #80]	; (801173c <apInit+0x74>)
 80116ea:	2203      	movs	r2, #3
 80116ec:	759a      	strb	r2, [r3, #22]
	sensor.setting_index = 0;
 80116ee:	4b13      	ldr	r3, [pc, #76]	; (801173c <apInit+0x74>)
 80116f0:	2200      	movs	r2, #0
 80116f2:	75da      	strb	r2, [r3, #23]
	sensor.setting = false;
 80116f4:	4b11      	ldr	r3, [pc, #68]	; (801173c <apInit+0x74>)
 80116f6:	2200      	movs	r2, #0
 80116f8:	751a      	strb	r2, [r3, #20]
	sensor.setting_mode = false;
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <apInit+0x74>)
 80116fc:	2200      	movs	r2, #0
 80116fe:	755a      	strb	r2, [r3, #21]
	sensor.ds18b20_temp_setting = 25.0;
 8011700:	4b0e      	ldr	r3, [pc, #56]	; (801173c <apInit+0x74>)
 8011702:	4a0f      	ldr	r2, [pc, #60]	; (8011740 <apInit+0x78>)
 8011704:	619a      	str	r2, [r3, #24]
	sensor.water_level_setting = 30;
 8011706:	4b0d      	ldr	r3, [pc, #52]	; (801173c <apInit+0x74>)
 8011708:	221e      	movs	r2, #30
 801170a:	621a      	str	r2, [r3, #32]
	sensor.water_tank_height  = 50;
 801170c:	4b0b      	ldr	r3, [pc, #44]	; (801173c <apInit+0x74>)
 801170e:	2232      	movs	r2, #50	; 0x32
 8011710:	609a      	str	r2, [r3, #8]
	sensor.water_temp_deadband = 2;
 8011712:	4b0a      	ldr	r3, [pc, #40]	; (801173c <apInit+0x74>)
 8011714:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011718:	61da      	str	r2, [r3, #28]
	sensor.water_level_deadband = 5;
 801171a:	4b08      	ldr	r3, [pc, #32]	; (801173c <apInit+0x74>)
 801171c:	2205      	movs	r2, #5
 801171e:	625a      	str	r2, [r3, #36]	; 0x24
	sensor.water_quality_setting = 10.0;
 8011720:	4b06      	ldr	r3, [pc, #24]	; (801173c <apInit+0x74>)
 8011722:	4a08      	ldr	r2, [pc, #32]	; (8011744 <apInit+0x7c>)
 8011724:	629a      	str	r2, [r3, #40]	; 0x28
	sensor.water_quality_deadband = 5;
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <apInit+0x74>)
 8011728:	4a07      	ldr	r2, [pc, #28]	; (8011748 <apInit+0x80>)
 801172a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801172c:	bf00      	nop
 801172e:	bd80      	pop	{r7, pc}
 8011730:	080124f5 	.word	0x080124f5
 8011734:	08029200 	.word	0x08029200
 8011738:	200002dc 	.word	0x200002dc
 801173c:	2000036c 	.word	0x2000036c
 8011740:	41c80000 	.word	0x41c80000
 8011744:	41200000 	.word	0x41200000
 8011748:	40a00000 	.word	0x40a00000

0801174c <apMain>:

void apMain(void)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8011752:	f000 ff6e 	bl	8012632 <millis>
 8011756:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 1000)
 8011758:	f000 ff6b 	bl	8012632 <millis>
 801175c:	4602      	mov	r2, r0
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	1ad3      	subs	r3, r2, r3
 8011762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011766:	d302      	bcc.n	801176e <apMain+0x22>
    {
      pre_time = millis();
 8011768:	f000 ff63 	bl	8012632 <millis>
 801176c:	6078      	str	r0, [r7, #4]

    }

    sensorMain();
 801176e:	f000 f805 	bl	801177c <sensorMain>
    //cliMain();
    menuUpdate();
 8011772:	f000 fc11 	bl	8011f98 <menuUpdate>
    SerialCom();
 8011776:	f006 f92b 	bl	80179d0 <SerialCom>
    if (millis()-pre_time >= 1000)
 801177a:	e7ed      	b.n	8011758 <apMain+0xc>

0801177c <sensorMain>:
  }
}

void sensorMain(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
    Ds18b20_ManualConvert();
 8011780:	f002 f8a2 	bl	80138c8 <Ds18b20_ManualConvert>
    Sonar_measure();
 8011784:	f005 f9e4 	bl	8016b50 <Sonar_measure>
    tds_measure();
 8011788:	f005 feaa 	bl	80174e0 <tds_measure>
    sensor.ds18b20_temp = ds18b20[0].Temperature;
 801178c:	4b0f      	ldr	r3, [pc, #60]	; (80117cc <sensorMain+0x50>)
 801178e:	689b      	ldr	r3, [r3, #8]
 8011790:	4a0f      	ldr	r2, [pc, #60]	; (80117d0 <sensorMain+0x54>)
 8011792:	6013      	str	r3, [r2, #0]

	sensor.sonar_distance = sonar_tbl[0].filter_distance_cm/10;
 8011794:	4b0f      	ldr	r3, [pc, #60]	; (80117d4 <sensorMain+0x58>)
 8011796:	699b      	ldr	r3, [r3, #24]
 8011798:	4a0f      	ldr	r2, [pc, #60]	; (80117d8 <sensorMain+0x5c>)
 801179a:	fba2 2303 	umull	r2, r3, r2, r3
 801179e:	08db      	lsrs	r3, r3, #3
 80117a0:	4a0b      	ldr	r2, [pc, #44]	; (80117d0 <sensorMain+0x54>)
 80117a2:	6053      	str	r3, [r2, #4]
	if(sensor.sonar_distance >= 50) sensor.sonar_distance = 50;
 80117a4:	4b0a      	ldr	r3, [pc, #40]	; (80117d0 <sensorMain+0x54>)
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	2b31      	cmp	r3, #49	; 0x31
 80117aa:	d902      	bls.n	80117b2 <sensorMain+0x36>
 80117ac:	4b08      	ldr	r3, [pc, #32]	; (80117d0 <sensorMain+0x54>)
 80117ae:	2232      	movs	r2, #50	; 0x32
 80117b0:	605a      	str	r2, [r3, #4]
	sensor.water_level = sensor.water_tank_height - sensor.sonar_distance;
 80117b2:	4b07      	ldr	r3, [pc, #28]	; (80117d0 <sensorMain+0x54>)
 80117b4:	689a      	ldr	r2, [r3, #8]
 80117b6:	4b06      	ldr	r3, [pc, #24]	; (80117d0 <sensorMain+0x54>)
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	4a04      	ldr	r2, [pc, #16]	; (80117d0 <sensorMain+0x54>)
 80117be:	60d3      	str	r3, [r2, #12]

	sensor.water_quality = tds_tbl[0].filter_tdsValue;
 80117c0:	4b06      	ldr	r3, [pc, #24]	; (80117dc <sensorMain+0x60>)
 80117c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c4:	4a02      	ldr	r2, [pc, #8]	; (80117d0 <sensorMain+0x54>)
 80117c6:	6113      	str	r3, [r2, #16]
}
 80117c8:	bf00      	nop
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	200007e8 	.word	0x200007e8
 80117d0:	2000036c 	.word	0x2000036c
 80117d4:	2000ac70 	.word	0x2000ac70
 80117d8:	cccccccd 	.word	0xcccccccd
 80117dc:	2000ae24 	.word	0x2000ae24

080117e0 <menuInit>:

void menuInit(void)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af02      	add	r7, sp, #8
  menu.menu_cnt = 6;
 80117e6:	4b1b      	ldr	r3, [pc, #108]	; (8011854 <menuInit+0x74>)
 80117e8:	2206      	movs	r2, #6
 80117ea:	701a      	strb	r2, [r3, #0]
  menu.menu_index = 0;
 80117ec:	4b19      	ldr	r3, [pc, #100]	; (8011854 <menuInit+0x74>)
 80117ee:	2200      	movs	r2, #0
 80117f0:	705a      	strb	r2, [r3, #1]
  buttonObjCreate(&menu.btn_user,  0, 50, 1000, 100);
 80117f2:	2364      	movs	r3, #100	; 0x64
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117fa:	2232      	movs	r2, #50	; 0x32
 80117fc:	2100      	movs	r1, #0
 80117fe:	4816      	ldr	r0, [pc, #88]	; (8011858 <menuInit+0x78>)
 8011800:	f001 fa9e 	bl	8012d40 <buttonObjCreate>
  buttonObjCreate(&menu.btn_left,   1, 50, 1000, 100);
 8011804:	2364      	movs	r3, #100	; 0x64
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801180c:	2232      	movs	r2, #50	; 0x32
 801180e:	2101      	movs	r1, #1
 8011810:	4812      	ldr	r0, [pc, #72]	; (801185c <menuInit+0x7c>)
 8011812:	f001 fa95 	bl	8012d40 <buttonObjCreate>
  buttonObjCreate(&menu.btn_right,  2, 50, 1000, 100);
 8011816:	2364      	movs	r3, #100	; 0x64
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801181e:	2232      	movs	r2, #50	; 0x32
 8011820:	2102      	movs	r1, #2
 8011822:	480f      	ldr	r0, [pc, #60]	; (8011860 <menuInit+0x80>)
 8011824:	f001 fa8c 	bl	8012d40 <buttonObjCreate>
  buttonObjCreate(&menu.btn_enter,  3, 50, 1000, 100);
 8011828:	2364      	movs	r3, #100	; 0x64
 801182a:	9300      	str	r3, [sp, #0]
 801182c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011830:	2232      	movs	r2, #50	; 0x32
 8011832:	2103      	movs	r1, #3
 8011834:	480b      	ldr	r0, [pc, #44]	; (8011864 <menuInit+0x84>)
 8011836:	f001 fa83 	bl	8012d40 <buttonObjCreate>
  buttonObjCreate(&menu.btn_exit,   4, 50, 1000, 100);
 801183a:	2364      	movs	r3, #100	; 0x64
 801183c:	9300      	str	r3, [sp, #0]
 801183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011842:	2232      	movs	r2, #50	; 0x32
 8011844:	2104      	movs	r1, #4
 8011846:	4808      	ldr	r0, [pc, #32]	; (8011868 <menuInit+0x88>)
 8011848:	f001 fa7a 	bl	8012d40 <buttonObjCreate>

  //buzzerSetVolume(1);
  //menuLoadInfo();
}
 801184c:	bf00      	nop
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	200002e8 	.word	0x200002e8
 8011858:	200002ec 	.word	0x200002ec
 801185c:	20000304 	.word	0x20000304
 8011860:	2000031c 	.word	0x2000031c
 8011864:	20000334 	.word	0x20000334
 8011868:	2000034c 	.word	0x2000034c

0801186c <mainUi>:

void mainUi(void)
{
 801186c:	b590      	push	{r4, r7, lr}
 801186e:	b085      	sub	sp, #20
 8011870:	af02      	add	r7, sp, #8
	static bool blink = 0;

	  if (lcdDrawAvailable() == true)
 8011872:	f003 fba9 	bl	8014fc8 <lcdDrawAvailable>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	f000 8372 	beq.w	8011f62 <mainUi+0x6f6>
	  {
	    lcdClearBuffer(black);
 801187e:	2000      	movs	r0, #0
 8011880:	f003 f9b6 	bl	8014bf0 <lcdClearBuffer>

	    lcdDrawVLine((lcdGetWidth()/2)+20, 16, (lcdGetHeight()/2), pink);
 8011884:	f003 fc26 	bl	80150d4 <lcdGetWidth>
 8011888:	4603      	mov	r3, r0
 801188a:	0fda      	lsrs	r2, r3, #31
 801188c:	4413      	add	r3, r2
 801188e:	105b      	asrs	r3, r3, #1
 8011890:	b29b      	uxth	r3, r3
 8011892:	3314      	adds	r3, #20
 8011894:	b29b      	uxth	r3, r3
 8011896:	b21c      	sxth	r4, r3
 8011898:	f003 fc24 	bl	80150e4 <lcdGetHeight>
 801189c:	4603      	mov	r3, r0
 801189e:	0fda      	lsrs	r2, r3, #31
 80118a0:	4413      	add	r3, r2
 80118a2:	105b      	asrs	r3, r3, #1
 80118a4:	b21a      	sxth	r2, r3
 80118a6:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80118aa:	2110      	movs	r1, #16
 80118ac:	4620      	mov	r0, r4
 80118ae:	f003 fcd7 	bl	8015260 <lcdDrawVLine>
	    lcdDrawHLine(0, 16*1, lcdGetWidth(), pink);
 80118b2:	f003 fc0f 	bl	80150d4 <lcdGetWidth>
 80118b6:	4603      	mov	r3, r0
 80118b8:	b21a      	sxth	r2, r3
 80118ba:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80118be:	2110      	movs	r1, #16
 80118c0:	2000      	movs	r0, #0
 80118c2:	f003 fcf3 	bl	80152ac <lcdDrawHLine>
	    lcdDrawHLine(0, 16*2, lcdGetWidth(), pink);
 80118c6:	f003 fc05 	bl	80150d4 <lcdGetWidth>
 80118ca:	4603      	mov	r3, r0
 80118cc:	b21a      	sxth	r2, r3
 80118ce:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80118d2:	2120      	movs	r1, #32
 80118d4:	2000      	movs	r0, #0
 80118d6:	f003 fce9 	bl	80152ac <lcdDrawHLine>
	    lcdDrawHLine(0, 16*3, lcdGetWidth(), pink);
 80118da:	f003 fbfb 	bl	80150d4 <lcdGetWidth>
 80118de:	4603      	mov	r3, r0
 80118e0:	b21a      	sxth	r2, r3
 80118e2:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80118e6:	2130      	movs	r1, #48	; 0x30
 80118e8:	2000      	movs	r0, #0
 80118ea:	f003 fcdf 	bl	80152ac <lcdDrawHLine>
	    lcdDrawHLine(0, 16*4, lcdGetWidth(), pink);
 80118ee:	f003 fbf1 	bl	80150d4 <lcdGetWidth>
 80118f2:	4603      	mov	r3, r0
 80118f4:	b21a      	sxth	r2, r3
 80118f6:	f64f 6319 	movw	r3, #65049	; 0xfe19
 80118fa:	2140      	movs	r1, #64	; 0x40
 80118fc:	2000      	movs	r0, #0
 80118fe:	f003 fcd5 	bl	80152ac <lcdDrawHLine>
	    lcdDrawHLine(0, 16*5, lcdGetWidth(), pink);
 8011902:	f003 fbe7 	bl	80150d4 <lcdGetWidth>
 8011906:	4603      	mov	r3, r0
 8011908:	b21a      	sxth	r2, r3
 801190a:	f64f 6319 	movw	r3, #65049	; 0xfe19
 801190e:	2150      	movs	r1, #80	; 0x50
 8011910:	2000      	movs	r0, #0
 8011912:	f003 fccb 	bl	80152ac <lcdDrawHLine>

	    lcdSetFont(LCD_FONT_HAN);
 8011916:	2003      	movs	r0, #3
 8011918:	f003 ff44 	bl	80157a4 <lcdSetFont>
	    lcdPrintf(0,16*0, green, "[삼둥이 아쿠아리움!]");
 801191c:	4bbd      	ldr	r3, [pc, #756]	; (8011c14 <mainUi+0x3a8>)
 801191e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8011922:	2100      	movs	r1, #0
 8011924:	2000      	movs	r0, #0
 8011926:	f003 fd6d 	bl	8015404 <lcdPrintf>

	    lcdSetFont(LCD_FONT_HAN);
 801192a:	2003      	movs	r0, #3
 801192c:	f003 ff3a 	bl	80157a4 <lcdSetFont>
	    lcdPrintf(0,16*1, white, "   현재값    세팅값");
 8011930:	4bb9      	ldr	r3, [pc, #740]	; (8011c18 <mainUi+0x3ac>)
 8011932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011936:	2110      	movs	r1, #16
 8011938:	2000      	movs	r0, #0
 801193a:	f003 fd63 	bl	8015404 <lcdPrintf>

	    lcdSetFont(LCD_FONT_HAN);
 801193e:	2003      	movs	r0, #3
 8011940:	f003 ff30 	bl	80157a4 <lcdSetFont>
	    lcdPrintf(0,16*2, white, "온도: %3.1f도" , sensor.ds18b20_temp);
 8011944:	4bb5      	ldr	r3, [pc, #724]	; (8011c1c <mainUi+0x3b0>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4618      	mov	r0, r3
 801194a:	f7ff f965 	bl	8010c18 <__aeabi_f2d>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	e9cd 2300 	strd	r2, r3, [sp]
 8011956:	4bb2      	ldr	r3, [pc, #712]	; (8011c20 <mainUi+0x3b4>)
 8011958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801195c:	2120      	movs	r1, #32
 801195e:	2000      	movs	r0, #0
 8011960:	f003 fd50 	bl	8015404 <lcdPrintf>
	    lcdPrintf(0,16*3, white, "높이:%3dcm" , sensor.water_level);
 8011964:	4bad      	ldr	r3, [pc, #692]	; (8011c1c <mainUi+0x3b0>)
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	4bae      	ldr	r3, [pc, #696]	; (8011c24 <mainUi+0x3b8>)
 801196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011970:	2130      	movs	r1, #48	; 0x30
 8011972:	2000      	movs	r0, #0
 8011974:	f003 fd46 	bl	8015404 <lcdPrintf>
	    lcdPrintf(0,16*4, white, "TDS: %4.1fppm" , sensor.water_quality);
 8011978:	4ba8      	ldr	r3, [pc, #672]	; (8011c1c <mainUi+0x3b0>)
 801197a:	691b      	ldr	r3, [r3, #16]
 801197c:	4618      	mov	r0, r3
 801197e:	f7ff f94b 	bl	8010c18 <__aeabi_f2d>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	e9cd 2300 	strd	r2, r3, [sp]
 801198a:	4ba7      	ldr	r3, [pc, #668]	; (8011c28 <mainUi+0x3bc>)
 801198c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011990:	2140      	movs	r1, #64	; 0x40
 8011992:	2000      	movs	r0, #0
 8011994:	f003 fd36 	bl	8015404 <lcdPrintf>

	    lcdPrintf((lcdGetWidth()/2)+20,16*2, white, " %3.1f도" , sensor.ds18b20_temp_setting);
 8011998:	f003 fb9c 	bl	80150d4 <lcdGetWidth>
 801199c:	4603      	mov	r3, r0
 801199e:	0fda      	lsrs	r2, r3, #31
 80119a0:	4413      	add	r3, r2
 80119a2:	105b      	asrs	r3, r3, #1
 80119a4:	f103 0414 	add.w	r4, r3, #20
 80119a8:	4b9c      	ldr	r3, [pc, #624]	; (8011c1c <mainUi+0x3b0>)
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff f933 	bl	8010c18 <__aeabi_f2d>
 80119b2:	4602      	mov	r2, r0
 80119b4:	460b      	mov	r3, r1
 80119b6:	e9cd 2300 	strd	r2, r3, [sp]
 80119ba:	4b9c      	ldr	r3, [pc, #624]	; (8011c2c <mainUi+0x3c0>)
 80119bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119c0:	2120      	movs	r1, #32
 80119c2:	4620      	mov	r0, r4
 80119c4:	f003 fd1e 	bl	8015404 <lcdPrintf>
	    lcdPrintf((lcdGetWidth()/2)+20,16*3, white, " %3dcm" , sensor.water_level_setting);
 80119c8:	f003 fb84 	bl	80150d4 <lcdGetWidth>
 80119cc:	4603      	mov	r3, r0
 80119ce:	0fda      	lsrs	r2, r3, #31
 80119d0:	4413      	add	r3, r2
 80119d2:	105b      	asrs	r3, r3, #1
 80119d4:	f103 0014 	add.w	r0, r3, #20
 80119d8:	4b90      	ldr	r3, [pc, #576]	; (8011c1c <mainUi+0x3b0>)
 80119da:	6a1b      	ldr	r3, [r3, #32]
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	4b94      	ldr	r3, [pc, #592]	; (8011c30 <mainUi+0x3c4>)
 80119e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119e4:	2130      	movs	r1, #48	; 0x30
 80119e6:	f003 fd0d 	bl	8015404 <lcdPrintf>
	    lcdPrintf((lcdGetWidth()/2)+20,16*4, white, "%4.1fppm" , sensor.water_quality_setting);
 80119ea:	f003 fb73 	bl	80150d4 <lcdGetWidth>
 80119ee:	4603      	mov	r3, r0
 80119f0:	0fda      	lsrs	r2, r3, #31
 80119f2:	4413      	add	r3, r2
 80119f4:	105b      	asrs	r3, r3, #1
 80119f6:	f103 0414 	add.w	r4, r3, #20
 80119fa:	4b88      	ldr	r3, [pc, #544]	; (8011c1c <mainUi+0x3b0>)
 80119fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff f90a 	bl	8010c18 <__aeabi_f2d>
 8011a04:	4602      	mov	r2, r0
 8011a06:	460b      	mov	r3, r1
 8011a08:	e9cd 2300 	strd	r2, r3, [sp]
 8011a0c:	4b89      	ldr	r3, [pc, #548]	; (8011c34 <mainUi+0x3c8>)
 8011a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a12:	2140      	movs	r1, #64	; 0x40
 8011a14:	4620      	mov	r0, r4
 8011a16:	f003 fcf5 	bl	8015404 <lcdPrintf>
	    //lcdDrawBufferImage(50, 20, 50, 50, TEST);
	    if(Mode == Auto_Mode)
 8011a1a:	4b87      	ldr	r3, [pc, #540]	; (8011c38 <mainUi+0x3cc>)
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	f083 0301 	eor.w	r3, r3, #1
 8011a22:	b2db      	uxtb	r3, r3
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d007      	beq.n	8011a38 <mainUi+0x1cc>
	    {
			lcdPrintf(40, 16*5, white, "MODE : AUTO");
 8011a28:	4b84      	ldr	r3, [pc, #528]	; (8011c3c <mainUi+0x3d0>)
 8011a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a2e:	2150      	movs	r1, #80	; 0x50
 8011a30:	2028      	movs	r0, #40	; 0x28
 8011a32:	f003 fce7 	bl	8015404 <lcdPrintf>
 8011a36:	e006      	b.n	8011a46 <mainUi+0x1da>
	    }else
	    {
	    	lcdPrintf(40, 16*5, white, "MODE : MANUAL");
 8011a38:	4b81      	ldr	r3, [pc, #516]	; (8011c40 <mainUi+0x3d4>)
 8011a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a3e:	2150      	movs	r1, #80	; 0x50
 8011a40:	2028      	movs	r0, #40	; 0x28
 8011a42:	f003 fcdf 	bl	8015404 <lcdPrintf>
	    }

	    blink = get_blink();
 8011a46:	f006 fd0b 	bl	8018460 <get_blink>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	4b7d      	ldr	r3, [pc, #500]	; (8011c44 <mainUi+0x3d8>)
 8011a50:	701a      	strb	r2, [r3, #0]
	    draw_fan_status(0, 16*5, blink);
 8011a52:	4b7c      	ldr	r3, [pc, #496]	; (8011c44 <mainUi+0x3d8>)
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	461a      	mov	r2, r3
 8011a58:	2150      	movs	r1, #80	; 0x50
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f006 fcb6 	bl	80183cc <draw_fan_status>

	    lcdDrawRoundRect(0, 0+112,  25, 16, 5, white);
 8011a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	2305      	movs	r3, #5
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	2310      	movs	r3, #16
 8011a6c:	2219      	movs	r2, #25
 8011a6e:	2170      	movs	r1, #112	; 0x70
 8011a70:	2000      	movs	r0, #0
 8011a72:	f003 f965 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1, 1+112, 23, 14, 5, red);
 8011a76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011a7a:	9301      	str	r3, [sp, #4]
 8011a7c:	2305      	movs	r3, #5
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	230e      	movs	r3, #14
 8011a82:	2217      	movs	r2, #23
 8011a84:	2171      	movs	r1, #113	; 0x71
 8011a86:	2001      	movs	r0, #1
 8011a88:	f003 fa54 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f003 fe89 	bl	80157a4 <lcdSetFont>
		lcdPrintf(2,5+112, white, "ATO");
 8011a92:	4b6d      	ldr	r3, [pc, #436]	; (8011c48 <mainUi+0x3dc>)
 8011a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a98:	2175      	movs	r1, #117	; 0x75
 8011a9a:	2002      	movs	r0, #2
 8011a9c:	f003 fcb2 	bl	8015404 <lcdPrintf>

	    lcdDrawRoundRect(0+26, 0+112,  25, 16, 5, white);
 8011aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	2305      	movs	r3, #5
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	2310      	movs	r3, #16
 8011aac:	2219      	movs	r2, #25
 8011aae:	2170      	movs	r1, #112	; 0x70
 8011ab0:	201a      	movs	r0, #26
 8011ab2:	f003 f945 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1+26, 1+112, 23, 14, 5, red);
 8011ab6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	2305      	movs	r3, #5
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	230e      	movs	r3, #14
 8011ac2:	2217      	movs	r2, #23
 8011ac4:	2171      	movs	r1, #113	; 0x71
 8011ac6:	201b      	movs	r0, #27
 8011ac8:	f003 fa34 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011acc:	2000      	movs	r0, #0
 8011ace:	f003 fe69 	bl	80157a4 <lcdSetFont>
		lcdPrintf(2+26,5+112, white, "S_V");
 8011ad2:	4b5e      	ldr	r3, [pc, #376]	; (8011c4c <mainUi+0x3e0>)
 8011ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ad8:	2175      	movs	r1, #117	; 0x75
 8011ada:	201c      	movs	r0, #28
 8011adc:	f003 fc92 	bl	8015404 <lcdPrintf>

		lcdDrawRoundRect(0+52, 0+112,  25, 16, 5, white);
 8011ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	2305      	movs	r3, #5
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	2310      	movs	r3, #16
 8011aec:	2219      	movs	r2, #25
 8011aee:	2170      	movs	r1, #112	; 0x70
 8011af0:	2034      	movs	r0, #52	; 0x34
 8011af2:	f003 f925 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1+52, 1+112, 23, 14, 5, red);
 8011af6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011afa:	9301      	str	r3, [sp, #4]
 8011afc:	2305      	movs	r3, #5
 8011afe:	9300      	str	r3, [sp, #0]
 8011b00:	230e      	movs	r3, #14
 8011b02:	2217      	movs	r2, #23
 8011b04:	2171      	movs	r1, #113	; 0x71
 8011b06:	2035      	movs	r0, #53	; 0x35
 8011b08:	f003 fa14 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	f003 fe49 	bl	80157a4 <lcdSetFont>
		lcdPrintf(2+52,5+112, white, "D_V");
 8011b12:	4b4f      	ldr	r3, [pc, #316]	; (8011c50 <mainUi+0x3e4>)
 8011b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b18:	2175      	movs	r1, #117	; 0x75
 8011b1a:	2036      	movs	r0, #54	; 0x36
 8011b1c:	f003 fc72 	bl	8015404 <lcdPrintf>

		lcdDrawRoundRect(0+78, 0+112,  25, 16, 5, white);
 8011b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	2305      	movs	r3, #5
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	2310      	movs	r3, #16
 8011b2c:	2219      	movs	r2, #25
 8011b2e:	2170      	movs	r1, #112	; 0x70
 8011b30:	204e      	movs	r0, #78	; 0x4e
 8011b32:	f003 f905 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1+78, 1+112, 23, 14, 5, red);
 8011b36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	2305      	movs	r3, #5
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	230e      	movs	r3, #14
 8011b42:	2217      	movs	r2, #23
 8011b44:	2171      	movs	r1, #113	; 0x71
 8011b46:	204f      	movs	r0, #79	; 0x4f
 8011b48:	f003 f9f4 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	f003 fe29 	bl	80157a4 <lcdSetFont>
		lcdPrintf(5+78,5+112, white, "PP");
 8011b52:	4b40      	ldr	r3, [pc, #256]	; (8011c54 <mainUi+0x3e8>)
 8011b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b58:	2175      	movs	r1, #117	; 0x75
 8011b5a:	2053      	movs	r0, #83	; 0x53
 8011b5c:	f003 fc52 	bl	8015404 <lcdPrintf>

		lcdDrawRoundRect(0+104, 0+112,  25, 16, 5, white);
 8011b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b64:	9301      	str	r3, [sp, #4]
 8011b66:	2305      	movs	r3, #5
 8011b68:	9300      	str	r3, [sp, #0]
 8011b6a:	2310      	movs	r3, #16
 8011b6c:	2219      	movs	r2, #25
 8011b6e:	2170      	movs	r1, #112	; 0x70
 8011b70:	2068      	movs	r0, #104	; 0x68
 8011b72:	f003 f8e5 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1+104, 1+112, 23, 14, 5, red);
 8011b76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	2305      	movs	r3, #5
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	230e      	movs	r3, #14
 8011b82:	2217      	movs	r2, #23
 8011b84:	2171      	movs	r1, #113	; 0x71
 8011b86:	2069      	movs	r0, #105	; 0x69
 8011b88:	f003 f9d4 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	f003 fe09 	bl	80157a4 <lcdSetFont>
		lcdPrintf(2+104,5+110, white, "HTR");
 8011b92:	4b31      	ldr	r3, [pc, #196]	; (8011c58 <mainUi+0x3ec>)
 8011b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b98:	2173      	movs	r1, #115	; 0x73
 8011b9a:	206a      	movs	r0, #106	; 0x6a
 8011b9c:	f003 fc32 	bl	8015404 <lcdPrintf>

		lcdDrawRoundRect(0+130, 0+112,  25, 16, 5, white);
 8011ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	2305      	movs	r3, #5
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	2310      	movs	r3, #16
 8011bac:	2219      	movs	r2, #25
 8011bae:	2170      	movs	r1, #112	; 0x70
 8011bb0:	2082      	movs	r0, #130	; 0x82
 8011bb2:	f003 f8c5 	bl	8014d40 <lcdDrawRoundRect>
		lcdDrawFillRoundRect(1+130, 1+112, 23, 14, 5, red);
 8011bb6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011bba:	9301      	str	r3, [sp, #4]
 8011bbc:	2305      	movs	r3, #5
 8011bbe:	9300      	str	r3, [sp, #0]
 8011bc0:	230e      	movs	r3, #14
 8011bc2:	2217      	movs	r2, #23
 8011bc4:	2171      	movs	r1, #113	; 0x71
 8011bc6:	2083      	movs	r0, #131	; 0x83
 8011bc8:	f003 f9b4 	bl	8014f34 <lcdDrawFillRoundRect>
		lcdSetFont(LCD_FONT_07x10);
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f003 fde9 	bl	80157a4 <lcdSetFont>
		lcdPrintf(2+130,5+110, white, "SET");
 8011bd2:	4b22      	ldr	r3, [pc, #136]	; (8011c5c <mainUi+0x3f0>)
 8011bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bd8:	2173      	movs	r1, #115	; 0x73
 8011bda:	2084      	movs	r0, #132	; 0x84
 8011bdc:	f003 fc12 	bl	8015404 <lcdPrintf>

		if(menu.menu_index == Auto)
 8011be0:	4b1f      	ldr	r3, [pc, #124]	; (8011c60 <mainUi+0x3f4>)
 8011be2:	785b      	ldrb	r3, [r3, #1]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d10d      	bne.n	8011c04 <mainUi+0x398>
		{
			lcdPrintf(40, 16*6, white, "시간 : %2d분 %2d초", minutes, seconds);
 8011be8:	4b1e      	ldr	r3, [pc, #120]	; (8011c64 <mainUi+0x3f8>)
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	461a      	mov	r2, r3
 8011bee:	4b1e      	ldr	r3, [pc, #120]	; (8011c68 <mainUi+0x3fc>)
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	9301      	str	r3, [sp, #4]
 8011bf4:	9200      	str	r2, [sp, #0]
 8011bf6:	4b1d      	ldr	r3, [pc, #116]	; (8011c6c <mainUi+0x400>)
 8011bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bfc:	2160      	movs	r1, #96	; 0x60
 8011bfe:	2028      	movs	r0, #40	; 0x28
 8011c00:	f003 fc00 	bl	8015404 <lcdPrintf>
		}

		if( menu.menu_index != Auto)
 8011c04:	4b16      	ldr	r3, [pc, #88]	; (8011c60 <mainUi+0x3f4>)
 8011c06:	785b      	ldrb	r3, [r3, #1]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f000 80cb 	beq.w	8011da4 <mainUi+0x538>
		{
			for (int i=0; i<menu.menu_cnt; i++)
 8011c0e:	2300      	movs	r3, #0
 8011c10:	607b      	str	r3, [r7, #4]
 8011c12:	e0c0      	b.n	8011d96 <mainUi+0x52a>
 8011c14:	08029208 	.word	0x08029208
 8011c18:	08029228 	.word	0x08029228
 8011c1c:	2000036c 	.word	0x2000036c
 8011c20:	08029244 	.word	0x08029244
 8011c24:	08029258 	.word	0x08029258
 8011c28:	08029268 	.word	0x08029268
 8011c2c:	08029278 	.word	0x08029278
 8011c30:	08029284 	.word	0x08029284
 8011c34:	0802928c 	.word	0x0802928c
 8011c38:	200002dc 	.word	0x200002dc
 8011c3c:	08029298 	.word	0x08029298
 8011c40:	080292a4 	.word	0x080292a4
 8011c44:	2000039c 	.word	0x2000039c
 8011c48:	080292b4 	.word	0x080292b4
 8011c4c:	080292b8 	.word	0x080292b8
 8011c50:	080292bc 	.word	0x080292bc
 8011c54:	080292c0 	.word	0x080292c0
 8011c58:	080292c4 	.word	0x080292c4
 8011c5c:	080292c8 	.word	0x080292c8
 8011c60:	200002e8 	.word	0x200002e8
 8011c64:	200002dd 	.word	0x200002dd
 8011c68:	200002de 	.word	0x200002de
 8011c6c:	080292cc 	.word	0x080292cc
			{
				if (menu.menu_index == Auto)
 8011c70:	4bbe      	ldr	r3, [pc, #760]	; (8011f6c <mainUi+0x700>)
 8011c72:	785b      	ldrb	r3, [r3, #1]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d113      	bne.n	8011ca0 <mainUi+0x434>
				{
					lcdDrawFillRoundRect(1, 1+112, 23, 14, 5, blue);
 8011c78:	231f      	movs	r3, #31
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	2305      	movs	r3, #5
 8011c7e:	9300      	str	r3, [sp, #0]
 8011c80:	230e      	movs	r3, #14
 8011c82:	2217      	movs	r2, #23
 8011c84:	2171      	movs	r1, #113	; 0x71
 8011c86:	2001      	movs	r0, #1
 8011c88:	f003 f954 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	f003 fd89 	bl	80157a4 <lcdSetFont>
					lcdPrintf(2,5+112, white, "ATO");
 8011c92:	4bb7      	ldr	r3, [pc, #732]	; (8011f70 <mainUi+0x704>)
 8011c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c98:	2175      	movs	r1, #117	; 0x75
 8011c9a:	2002      	movs	r0, #2
 8011c9c:	f003 fbb2 	bl	8015404 <lcdPrintf>
				}
				if (menu.menu_index == Supply_Valve)
 8011ca0:	4bb2      	ldr	r3, [pc, #712]	; (8011f6c <mainUi+0x700>)
 8011ca2:	785b      	ldrb	r3, [r3, #1]
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d113      	bne.n	8011cd0 <mainUi+0x464>
				{
					lcdDrawFillRoundRect(1+26, 1+112, 23, 14, 5, blue);
 8011ca8:	231f      	movs	r3, #31
 8011caa:	9301      	str	r3, [sp, #4]
 8011cac:	2305      	movs	r3, #5
 8011cae:	9300      	str	r3, [sp, #0]
 8011cb0:	230e      	movs	r3, #14
 8011cb2:	2217      	movs	r2, #23
 8011cb4:	2171      	movs	r1, #113	; 0x71
 8011cb6:	201b      	movs	r0, #27
 8011cb8:	f003 f93c 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	f003 fd71 	bl	80157a4 <lcdSetFont>
					lcdPrintf(2+26,5+112, white, "S_V");
 8011cc2:	4bac      	ldr	r3, [pc, #688]	; (8011f74 <mainUi+0x708>)
 8011cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cc8:	2175      	movs	r1, #117	; 0x75
 8011cca:	201c      	movs	r0, #28
 8011ccc:	f003 fb9a 	bl	8015404 <lcdPrintf>
				}
				if (menu.menu_index == Discharge_Valve)
 8011cd0:	4ba6      	ldr	r3, [pc, #664]	; (8011f6c <mainUi+0x700>)
 8011cd2:	785b      	ldrb	r3, [r3, #1]
 8011cd4:	2b02      	cmp	r3, #2
 8011cd6:	d113      	bne.n	8011d00 <mainUi+0x494>
				{
					lcdDrawFillRoundRect(1+52, 1+112, 23, 14, 5, blue);
 8011cd8:	231f      	movs	r3, #31
 8011cda:	9301      	str	r3, [sp, #4]
 8011cdc:	2305      	movs	r3, #5
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	230e      	movs	r3, #14
 8011ce2:	2217      	movs	r2, #23
 8011ce4:	2171      	movs	r1, #113	; 0x71
 8011ce6:	2035      	movs	r0, #53	; 0x35
 8011ce8:	f003 f924 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011cec:	2000      	movs	r0, #0
 8011cee:	f003 fd59 	bl	80157a4 <lcdSetFont>
					lcdPrintf(2+52,5+112, white, "D_V");
 8011cf2:	4ba1      	ldr	r3, [pc, #644]	; (8011f78 <mainUi+0x70c>)
 8011cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cf8:	2175      	movs	r1, #117	; 0x75
 8011cfa:	2036      	movs	r0, #54	; 0x36
 8011cfc:	f003 fb82 	bl	8015404 <lcdPrintf>
				}
				if (menu.menu_index == Discharge_Pump)
 8011d00:	4b9a      	ldr	r3, [pc, #616]	; (8011f6c <mainUi+0x700>)
 8011d02:	785b      	ldrb	r3, [r3, #1]
 8011d04:	2b03      	cmp	r3, #3
 8011d06:	d113      	bne.n	8011d30 <mainUi+0x4c4>
				{
					lcdDrawFillRoundRect(1+78, 1+112, 23, 14, 5, blue);
 8011d08:	231f      	movs	r3, #31
 8011d0a:	9301      	str	r3, [sp, #4]
 8011d0c:	2305      	movs	r3, #5
 8011d0e:	9300      	str	r3, [sp, #0]
 8011d10:	230e      	movs	r3, #14
 8011d12:	2217      	movs	r2, #23
 8011d14:	2171      	movs	r1, #113	; 0x71
 8011d16:	204f      	movs	r0, #79	; 0x4f
 8011d18:	f003 f90c 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f003 fd41 	bl	80157a4 <lcdSetFont>
					lcdPrintf(5+78,5+112, white, "PP");
 8011d22:	4b96      	ldr	r3, [pc, #600]	; (8011f7c <mainUi+0x710>)
 8011d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d28:	2175      	movs	r1, #117	; 0x75
 8011d2a:	2053      	movs	r0, #83	; 0x53
 8011d2c:	f003 fb6a 	bl	8015404 <lcdPrintf>
				}
				if (menu.menu_index == Heater)
 8011d30:	4b8e      	ldr	r3, [pc, #568]	; (8011f6c <mainUi+0x700>)
 8011d32:	785b      	ldrb	r3, [r3, #1]
 8011d34:	2b04      	cmp	r3, #4
 8011d36:	d113      	bne.n	8011d60 <mainUi+0x4f4>
				{
					lcdDrawFillRoundRect(1+104, 1+112, 23, 14, 5, blue);
 8011d38:	231f      	movs	r3, #31
 8011d3a:	9301      	str	r3, [sp, #4]
 8011d3c:	2305      	movs	r3, #5
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	230e      	movs	r3, #14
 8011d42:	2217      	movs	r2, #23
 8011d44:	2171      	movs	r1, #113	; 0x71
 8011d46:	2069      	movs	r0, #105	; 0x69
 8011d48:	f003 f8f4 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	f003 fd29 	bl	80157a4 <lcdSetFont>
					lcdPrintf(2+104,5+110, white, "HTR");
 8011d52:	4b8b      	ldr	r3, [pc, #556]	; (8011f80 <mainUi+0x714>)
 8011d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d58:	2173      	movs	r1, #115	; 0x73
 8011d5a:	206a      	movs	r0, #106	; 0x6a
 8011d5c:	f003 fb52 	bl	8015404 <lcdPrintf>
				}
				if (menu.menu_index == Setting)
 8011d60:	4b82      	ldr	r3, [pc, #520]	; (8011f6c <mainUi+0x700>)
 8011d62:	785b      	ldrb	r3, [r3, #1]
 8011d64:	2b05      	cmp	r3, #5
 8011d66:	d113      	bne.n	8011d90 <mainUi+0x524>
				{
					lcdDrawFillRoundRect(1+130, 1+112, 23, 14, 5, blue);
 8011d68:	231f      	movs	r3, #31
 8011d6a:	9301      	str	r3, [sp, #4]
 8011d6c:	2305      	movs	r3, #5
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	230e      	movs	r3, #14
 8011d72:	2217      	movs	r2, #23
 8011d74:	2171      	movs	r1, #113	; 0x71
 8011d76:	2083      	movs	r0, #131	; 0x83
 8011d78:	f003 f8dc 	bl	8014f34 <lcdDrawFillRoundRect>
					lcdSetFont(LCD_FONT_07x10);
 8011d7c:	2000      	movs	r0, #0
 8011d7e:	f003 fd11 	bl	80157a4 <lcdSetFont>
					lcdPrintf(2+130,5+110, white, "SET");
 8011d82:	4b80      	ldr	r3, [pc, #512]	; (8011f84 <mainUi+0x718>)
 8011d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d88:	2173      	movs	r1, #115	; 0x73
 8011d8a:	2084      	movs	r0, #132	; 0x84
 8011d8c:	f003 fb3a 	bl	8015404 <lcdPrintf>
			for (int i=0; i<menu.menu_cnt; i++)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	3301      	adds	r3, #1
 8011d94:	607b      	str	r3, [r7, #4]
 8011d96:	4b75      	ldr	r3, [pc, #468]	; (8011f6c <mainUi+0x700>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	f6ff af66 	blt.w	8011c70 <mainUi+0x404>
				}
			}
		}

		if( menu.menu_index == Setting)
 8011da4:	4b71      	ldr	r3, [pc, #452]	; (8011f6c <mainUi+0x700>)
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	2b05      	cmp	r3, #5
 8011daa:	f040 80d8 	bne.w	8011f5e <mainUi+0x6f2>
		{
			for (int i=0; i<sensor.setting_cnt; i++)
 8011dae:	2300      	movs	r3, #0
 8011db0:	603b      	str	r3, [r7, #0]
 8011db2:	e0cd      	b.n	8011f50 <mainUi+0x6e4>
			{
				if (sensor.setting_index == Water_Temp)
 8011db4:	4b74      	ldr	r3, [pc, #464]	; (8011f88 <mainUi+0x71c>)
 8011db6:	7ddb      	ldrb	r3, [r3, #23]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d141      	bne.n	8011e40 <mainUi+0x5d4>
				{
					lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*2)+1, 60, 15, 5, blue);
 8011dbc:	f003 f98a 	bl	80150d4 <lcdGetWidth>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	0fda      	lsrs	r2, r3, #31
 8011dc4:	4413      	add	r3, r2
 8011dc6:	105b      	asrs	r3, r3, #1
 8011dc8:	f103 0014 	add.w	r0, r3, #20
 8011dcc:	231f      	movs	r3, #31
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	2305      	movs	r3, #5
 8011dd2:	9300      	str	r3, [sp, #0]
 8011dd4:	230f      	movs	r3, #15
 8011dd6:	223c      	movs	r2, #60	; 0x3c
 8011dd8:	2121      	movs	r1, #33	; 0x21
 8011dda:	f003 f8ab 	bl	8014f34 <lcdDrawFillRoundRect>
					if(sensor.setting == true)
 8011dde:	4b6a      	ldr	r3, [pc, #424]	; (8011f88 <mainUi+0x71c>)
 8011de0:	7d1b      	ldrb	r3, [r3, #20]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d011      	beq.n	8011e0a <mainUi+0x59e>
					{
						lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*2)+1, 60, 15, 5, red);
 8011de6:	f003 f975 	bl	80150d4 <lcdGetWidth>
 8011dea:	4603      	mov	r3, r0
 8011dec:	0fda      	lsrs	r2, r3, #31
 8011dee:	4413      	add	r3, r2
 8011df0:	105b      	asrs	r3, r3, #1
 8011df2:	f103 0014 	add.w	r0, r3, #20
 8011df6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011dfa:	9301      	str	r3, [sp, #4]
 8011dfc:	2305      	movs	r3, #5
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	230f      	movs	r3, #15
 8011e02:	223c      	movs	r2, #60	; 0x3c
 8011e04:	2121      	movs	r1, #33	; 0x21
 8011e06:	f003 f895 	bl	8014f34 <lcdDrawFillRoundRect>
					}
					lcdSetFont(LCD_FONT_HAN);
 8011e0a:	2003      	movs	r0, #3
 8011e0c:	f003 fcca 	bl	80157a4 <lcdSetFont>
					lcdPrintf((lcdGetWidth()/2)+20,16*2, white, " %3.1f도" , sensor.ds18b20_temp_setting);
 8011e10:	f003 f960 	bl	80150d4 <lcdGetWidth>
 8011e14:	4603      	mov	r3, r0
 8011e16:	0fda      	lsrs	r2, r3, #31
 8011e18:	4413      	add	r3, r2
 8011e1a:	105b      	asrs	r3, r3, #1
 8011e1c:	f103 0414 	add.w	r4, r3, #20
 8011e20:	4b59      	ldr	r3, [pc, #356]	; (8011f88 <mainUi+0x71c>)
 8011e22:	699b      	ldr	r3, [r3, #24]
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7fe fef7 	bl	8010c18 <__aeabi_f2d>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8011e32:	4b56      	ldr	r3, [pc, #344]	; (8011f8c <mainUi+0x720>)
 8011e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e38:	2120      	movs	r1, #32
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f003 fae2 	bl	8015404 <lcdPrintf>
				}
				if (sensor.setting_index == Water_Level)
 8011e40:	4b51      	ldr	r3, [pc, #324]	; (8011f88 <mainUi+0x71c>)
 8011e42:	7ddb      	ldrb	r3, [r3, #23]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d13a      	bne.n	8011ebe <mainUi+0x652>
				{
					lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*3)+1, 60, 15, 5, blue);
 8011e48:	f003 f944 	bl	80150d4 <lcdGetWidth>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	0fda      	lsrs	r2, r3, #31
 8011e50:	4413      	add	r3, r2
 8011e52:	105b      	asrs	r3, r3, #1
 8011e54:	f103 0014 	add.w	r0, r3, #20
 8011e58:	231f      	movs	r3, #31
 8011e5a:	9301      	str	r3, [sp, #4]
 8011e5c:	2305      	movs	r3, #5
 8011e5e:	9300      	str	r3, [sp, #0]
 8011e60:	230f      	movs	r3, #15
 8011e62:	223c      	movs	r2, #60	; 0x3c
 8011e64:	2131      	movs	r1, #49	; 0x31
 8011e66:	f003 f865 	bl	8014f34 <lcdDrawFillRoundRect>
					if(sensor.setting == true)
 8011e6a:	4b47      	ldr	r3, [pc, #284]	; (8011f88 <mainUi+0x71c>)
 8011e6c:	7d1b      	ldrb	r3, [r3, #20]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d011      	beq.n	8011e96 <mainUi+0x62a>
					{
						lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*3)+1, 60, 15, 5, red);
 8011e72:	f003 f92f 	bl	80150d4 <lcdGetWidth>
 8011e76:	4603      	mov	r3, r0
 8011e78:	0fda      	lsrs	r2, r3, #31
 8011e7a:	4413      	add	r3, r2
 8011e7c:	105b      	asrs	r3, r3, #1
 8011e7e:	f103 0014 	add.w	r0, r3, #20
 8011e82:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011e86:	9301      	str	r3, [sp, #4]
 8011e88:	2305      	movs	r3, #5
 8011e8a:	9300      	str	r3, [sp, #0]
 8011e8c:	230f      	movs	r3, #15
 8011e8e:	223c      	movs	r2, #60	; 0x3c
 8011e90:	2131      	movs	r1, #49	; 0x31
 8011e92:	f003 f84f 	bl	8014f34 <lcdDrawFillRoundRect>
					}
					lcdSetFont(LCD_FONT_HAN);
 8011e96:	2003      	movs	r0, #3
 8011e98:	f003 fc84 	bl	80157a4 <lcdSetFont>
					lcdPrintf((lcdGetWidth()/2)+20,16*3, white, " %3dcm" , sensor.water_level_setting);
 8011e9c:	f003 f91a 	bl	80150d4 <lcdGetWidth>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	0fda      	lsrs	r2, r3, #31
 8011ea4:	4413      	add	r3, r2
 8011ea6:	105b      	asrs	r3, r3, #1
 8011ea8:	f103 0014 	add.w	r0, r3, #20
 8011eac:	4b36      	ldr	r3, [pc, #216]	; (8011f88 <mainUi+0x71c>)
 8011eae:	6a1b      	ldr	r3, [r3, #32]
 8011eb0:	9300      	str	r3, [sp, #0]
 8011eb2:	4b37      	ldr	r3, [pc, #220]	; (8011f90 <mainUi+0x724>)
 8011eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eb8:	2130      	movs	r1, #48	; 0x30
 8011eba:	f003 faa3 	bl	8015404 <lcdPrintf>
				}
				if (sensor.setting_index == Water_Quality)
 8011ebe:	4b32      	ldr	r3, [pc, #200]	; (8011f88 <mainUi+0x71c>)
 8011ec0:	7ddb      	ldrb	r3, [r3, #23]
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d141      	bne.n	8011f4a <mainUi+0x6de>
				{
					lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*4)+1, 60, 15, 5, blue);
 8011ec6:	f003 f905 	bl	80150d4 <lcdGetWidth>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	0fda      	lsrs	r2, r3, #31
 8011ece:	4413      	add	r3, r2
 8011ed0:	105b      	asrs	r3, r3, #1
 8011ed2:	f103 0014 	add.w	r0, r3, #20
 8011ed6:	231f      	movs	r3, #31
 8011ed8:	9301      	str	r3, [sp, #4]
 8011eda:	2305      	movs	r3, #5
 8011edc:	9300      	str	r3, [sp, #0]
 8011ede:	230f      	movs	r3, #15
 8011ee0:	223c      	movs	r2, #60	; 0x3c
 8011ee2:	2141      	movs	r1, #65	; 0x41
 8011ee4:	f003 f826 	bl	8014f34 <lcdDrawFillRoundRect>
					if(sensor.setting == true)
 8011ee8:	4b27      	ldr	r3, [pc, #156]	; (8011f88 <mainUi+0x71c>)
 8011eea:	7d1b      	ldrb	r3, [r3, #20]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d011      	beq.n	8011f14 <mainUi+0x6a8>
					{
						lcdDrawFillRoundRect((lcdGetWidth()/2)+20, (16*4)+1, 60, 15, 5, red);
 8011ef0:	f003 f8f0 	bl	80150d4 <lcdGetWidth>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	0fda      	lsrs	r2, r3, #31
 8011ef8:	4413      	add	r3, r2
 8011efa:	105b      	asrs	r3, r3, #1
 8011efc:	f103 0014 	add.w	r0, r3, #20
 8011f00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	2305      	movs	r3, #5
 8011f08:	9300      	str	r3, [sp, #0]
 8011f0a:	230f      	movs	r3, #15
 8011f0c:	223c      	movs	r2, #60	; 0x3c
 8011f0e:	2141      	movs	r1, #65	; 0x41
 8011f10:	f003 f810 	bl	8014f34 <lcdDrawFillRoundRect>
					}
					lcdSetFont(LCD_FONT_HAN);
 8011f14:	2003      	movs	r0, #3
 8011f16:	f003 fc45 	bl	80157a4 <lcdSetFont>
					lcdPrintf((lcdGetWidth()/2)+20,16*4, white, "%4.1fppm" , sensor.water_quality_setting);
 8011f1a:	f003 f8db 	bl	80150d4 <lcdGetWidth>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	0fda      	lsrs	r2, r3, #31
 8011f22:	4413      	add	r3, r2
 8011f24:	105b      	asrs	r3, r3, #1
 8011f26:	f103 0414 	add.w	r4, r3, #20
 8011f2a:	4b17      	ldr	r3, [pc, #92]	; (8011f88 <mainUi+0x71c>)
 8011f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fe72 	bl	8010c18 <__aeabi_f2d>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	e9cd 2300 	strd	r2, r3, [sp]
 8011f3c:	4b15      	ldr	r3, [pc, #84]	; (8011f94 <mainUi+0x728>)
 8011f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f42:	2140      	movs	r1, #64	; 0x40
 8011f44:	4620      	mov	r0, r4
 8011f46:	f003 fa5d 	bl	8015404 <lcdPrintf>
			for (int i=0; i<sensor.setting_cnt; i++)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	603b      	str	r3, [r7, #0]
 8011f50:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <mainUi+0x71c>)
 8011f52:	7d9b      	ldrb	r3, [r3, #22]
 8011f54:	461a      	mov	r2, r3
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	f6ff af2b 	blt.w	8011db4 <mainUi+0x548>
				}
			}
		}

		lcdRequestDraw();
 8011f5e:	f003 f849 	bl	8014ff4 <lcdRequestDraw>
		}
}
 8011f62:	bf00      	nop
 8011f64:	370c      	adds	r7, #12
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd90      	pop	{r4, r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	200002e8 	.word	0x200002e8
 8011f70:	080292b4 	.word	0x080292b4
 8011f74:	080292b8 	.word	0x080292b8
 8011f78:	080292bc 	.word	0x080292bc
 8011f7c:	080292c0 	.word	0x080292c0
 8011f80:	080292c4 	.word	0x080292c4
 8011f84:	080292c8 	.word	0x080292c8
 8011f88:	2000036c 	.word	0x2000036c
 8011f8c:	08029278 	.word	0x08029278
 8011f90:	08029284 	.word	0x08029284
 8011f94:	0802928c 	.word	0x0802928c

08011f98 <menuUpdate>:

void menuUpdate(void)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	af00      	add	r7, sp, #0
  buttonObjClearAndUpdate(&menu.btn_user);
 8011f9c:	4830      	ldr	r0, [pc, #192]	; (8012060 <menuUpdate+0xc8>)
 8011f9e:	f001 f84e 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_left);
 8011fa2:	4830      	ldr	r0, [pc, #192]	; (8012064 <menuUpdate+0xcc>)
 8011fa4:	f001 f84b 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_right);
 8011fa8:	482f      	ldr	r0, [pc, #188]	; (8012068 <menuUpdate+0xd0>)
 8011faa:	f001 f848 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_enter);
 8011fae:	482f      	ldr	r0, [pc, #188]	; (801206c <menuUpdate+0xd4>)
 8011fb0:	f001 f845 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_exit);
 8011fb4:	482e      	ldr	r0, [pc, #184]	; (8012070 <menuUpdate+0xd8>)
 8011fb6:	f001 f842 	bl	801303e <buttonObjClearAndUpdate>

  if (buttonObjGetEvent(&menu.btn_left) & BUTTON_EVT_CLICKED)
 8011fba:	482a      	ldr	r0, [pc, #168]	; (8012064 <menuUpdate+0xcc>)
 8011fbc:	f001 f84c 	bl	8013058 <buttonObjGetEvent>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	f003 0304 	and.w	r3, r3, #4
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d016      	beq.n	8011ff8 <menuUpdate+0x60>
  {
	if (menu.menu_index > 0)
 8011fca:	4b2a      	ldr	r3, [pc, #168]	; (8012074 <menuUpdate+0xdc>)
 8011fcc:	785b      	ldrb	r3, [r3, #1]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d006      	beq.n	8011fe0 <menuUpdate+0x48>
	{
	  menu.menu_index--;
 8011fd2:	4b28      	ldr	r3, [pc, #160]	; (8012074 <menuUpdate+0xdc>)
 8011fd4:	785b      	ldrb	r3, [r3, #1]
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	b2da      	uxtb	r2, r3
 8011fda:	4b26      	ldr	r3, [pc, #152]	; (8012074 <menuUpdate+0xdc>)
 8011fdc:	705a      	strb	r2, [r3, #1]
 8011fde:	e005      	b.n	8011fec <menuUpdate+0x54>
	}
	else
	{
	  menu.menu_index = menu.menu_cnt - 1;
 8011fe0:	4b24      	ldr	r3, [pc, #144]	; (8012074 <menuUpdate+0xdc>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	4b22      	ldr	r3, [pc, #136]	; (8012074 <menuUpdate+0xdc>)
 8011fea:	705a      	strb	r2, [r3, #1]
	}
	menu.pre_time = millis();
 8011fec:	f000 fb21 	bl	8012632 <millis>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	4a20      	ldr	r2, [pc, #128]	; (8012074 <menuUpdate+0xdc>)
 8011ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }
  if (buttonObjGetEvent(&menu.btn_right) & BUTTON_EVT_CLICKED)
 8011ff8:	481b      	ldr	r0, [pc, #108]	; (8012068 <menuUpdate+0xd0>)
 8011ffa:	f001 f82d 	bl	8013058 <buttonObjGetEvent>
 8011ffe:	4603      	mov	r3, r0
 8012000:	f003 0304 	and.w	r3, r3, #4
 8012004:	2b00      	cmp	r3, #0
 8012006:	d017      	beq.n	8012038 <menuUpdate+0xa0>
  {
	menu.menu_index++;
 8012008:	4b1a      	ldr	r3, [pc, #104]	; (8012074 <menuUpdate+0xdc>)
 801200a:	785b      	ldrb	r3, [r3, #1]
 801200c:	3301      	adds	r3, #1
 801200e:	b2da      	uxtb	r2, r3
 8012010:	4b18      	ldr	r3, [pc, #96]	; (8012074 <menuUpdate+0xdc>)
 8012012:	705a      	strb	r2, [r3, #1]
	menu.menu_index %= menu.menu_cnt;
 8012014:	4b17      	ldr	r3, [pc, #92]	; (8012074 <menuUpdate+0xdc>)
 8012016:	785b      	ldrb	r3, [r3, #1]
 8012018:	4a16      	ldr	r2, [pc, #88]	; (8012074 <menuUpdate+0xdc>)
 801201a:	7812      	ldrb	r2, [r2, #0]
 801201c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012020:	fb01 f202 	mul.w	r2, r1, r2
 8012024:	1a9b      	subs	r3, r3, r2
 8012026:	b2da      	uxtb	r2, r3
 8012028:	4b12      	ldr	r3, [pc, #72]	; (8012074 <menuUpdate+0xdc>)
 801202a:	705a      	strb	r2, [r3, #1]
		menu.pre_time = millis();
 801202c:	f000 fb01 	bl	8012632 <millis>
 8012030:	4603      	mov	r3, r0
 8012032:	4a10      	ldr	r2, [pc, #64]	; (8012074 <menuUpdate+0xdc>)
 8012034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }
  if (buttonObjGetEvent(&menu.btn_enter) & BUTTON_EVT_CLICKED)
 8012038:	480c      	ldr	r0, [pc, #48]	; (801206c <menuUpdate+0xd4>)
 801203a:	f001 f80d 	bl	8013058 <buttonObjGetEvent>
 801203e:	4603      	mov	r3, r0
 8012040:	f003 0304 	and.w	r3, r3, #4
 8012044:	2b00      	cmp	r3, #0
 8012046:	d004      	beq.n	8012052 <menuUpdate+0xba>
  {
	menuRunApp(menu.menu_index);
 8012048:	4b0a      	ldr	r3, [pc, #40]	; (8012074 <menuUpdate+0xdc>)
 801204a:	785b      	ldrb	r3, [r3, #1]
 801204c:	4618      	mov	r0, r3
 801204e:	f000 f813 	bl	8012078 <menuRunApp>
  }
  if (buttonObjGetEvent(&menu.btn_exit) & BUTTON_EVT_CLICKED)
 8012052:	4807      	ldr	r0, [pc, #28]	; (8012070 <menuUpdate+0xd8>)
 8012054:	f001 f800 	bl	8013058 <buttonObjGetEvent>
  {

  }
  mainUi();
 8012058:	f7ff fc08 	bl	801186c <mainUi>
}
 801205c:	bf00      	nop
 801205e:	bd80      	pop	{r7, pc}
 8012060:	200002ec 	.word	0x200002ec
 8012064:	20000304 	.word	0x20000304
 8012068:	2000031c 	.word	0x2000031c
 801206c:	20000334 	.word	0x20000334
 8012070:	2000034c 	.word	0x2000034c
 8012074:	200002e8 	.word	0x200002e8

08012078 <menuRunApp>:

void menuRunApp(uint8_t index)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	71fb      	strb	r3, [r7, #7]
  bool is_run = true;
 8012082:	2301      	movs	r3, #1
 8012084:	73fb      	strb	r3, [r7, #15]

  switch(index)
 8012086:	79fb      	ldrb	r3, [r7, #7]
 8012088:	2b05      	cmp	r3, #5
 801208a:	d83d      	bhi.n	8012108 <menuRunApp+0x90>
 801208c:	a201      	add	r2, pc, #4	; (adr r2, 8012094 <menuRunApp+0x1c>)
 801208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012092:	bf00      	nop
 8012094:	080120ad 	.word	0x080120ad
 8012098:	080120bf 	.word	0x080120bf
 801209c:	080120cd 	.word	0x080120cd
 80120a0:	080120db 	.word	0x080120db
 80120a4:	080120e9 	.word	0x080120e9
 80120a8:	080120f7 	.word	0x080120f7
  {
  	case Auto:
  		Mode = Auto_Mode;
 80120ac:	4b24      	ldr	r3, [pc, #144]	; (8012140 <menuRunApp+0xc8>)
 80120ae:	2200      	movs	r2, #0
 80120b0:	701a      	strb	r2, [r3, #0]
  	    AutoMain();
 80120b2:	f000 f853 	bl	801215c <AutoMain>
  	    Mode = Manual_Mode;
 80120b6:	4b22      	ldr	r3, [pc, #136]	; (8012140 <menuRunApp+0xc8>)
 80120b8:	2201      	movs	r2, #1
 80120ba:	701a      	strb	r2, [r3, #0]
  	  break;
 80120bc:	e02a      	b.n	8012114 <menuRunApp+0x9c>
    case Supply_Valve:
    	Mode = Manual_Mode;
 80120be:	4b20      	ldr	r3, [pc, #128]	; (8012140 <menuRunApp+0xc8>)
 80120c0:	2201      	movs	r2, #1
 80120c2:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(S_V);
 80120c4:	2007      	movs	r0, #7
 80120c6:	f002 fc01 	bl	80148cc <gpioPinToggle>
      break;
 80120ca:	e023      	b.n	8012114 <menuRunApp+0x9c>
    case Discharge_Valve:
    	Mode = Manual_Mode;
 80120cc:	4b1c      	ldr	r3, [pc, #112]	; (8012140 <menuRunApp+0xc8>)
 80120ce:	2201      	movs	r2, #1
 80120d0:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(D_V);
 80120d2:	2008      	movs	r0, #8
 80120d4:	f002 fbfa 	bl	80148cc <gpioPinToggle>
      break;
 80120d8:	e01c      	b.n	8012114 <menuRunApp+0x9c>
    case Discharge_Pump:
    	Mode = Manual_Mode;
 80120da:	4b19      	ldr	r3, [pc, #100]	; (8012140 <menuRunApp+0xc8>)
 80120dc:	2201      	movs	r2, #1
 80120de:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(Pp);
 80120e0:	2009      	movs	r0, #9
 80120e2:	f002 fbf3 	bl	80148cc <gpioPinToggle>
      break;
 80120e6:	e015      	b.n	8012114 <menuRunApp+0x9c>
    case Heater:
    	Mode = Manual_Mode;
 80120e8:	4b15      	ldr	r3, [pc, #84]	; (8012140 <menuRunApp+0xc8>)
 80120ea:	2201      	movs	r2, #1
 80120ec:	701a      	strb	r2, [r3, #0]
    	gpioPinToggle(HTR);
 80120ee:	200a      	movs	r0, #10
 80120f0:	f002 fbec 	bl	80148cc <gpioPinToggle>
      break;
 80120f4:	e00e      	b.n	8012114 <menuRunApp+0x9c>
    case Setting:
    	Mode = Manual_Mode;
 80120f6:	4b12      	ldr	r3, [pc, #72]	; (8012140 <menuRunApp+0xc8>)
 80120f8:	2201      	movs	r2, #1
 80120fa:	701a      	strb	r2, [r3, #0]
    	sensor.setting_mode = true;
 80120fc:	4b11      	ldr	r3, [pc, #68]	; (8012144 <menuRunApp+0xcc>)
 80120fe:	2201      	movs	r2, #1
 8012100:	755a      	strb	r2, [r3, #21]
    	//gpioPinToggle(BUZZER);
    	SettingMain();
 8012102:	f000 f8a9 	bl	8012258 <SettingMain>
      break;
 8012106:	e005      	b.n	8012114 <menuRunApp+0x9c>

    default:
    	Mode = Manual_Mode;
 8012108:	4b0d      	ldr	r3, [pc, #52]	; (8012140 <menuRunApp+0xc8>)
 801210a:	2201      	movs	r2, #1
 801210c:	701a      	strb	r2, [r3, #0]
    	is_run = false;
 801210e:	2300      	movs	r3, #0
 8012110:	73fb      	strb	r3, [r7, #15]
      break;
 8012112:	bf00      	nop
  }

  if (is_run == true)
 8012114:	7bfb      	ldrb	r3, [r7, #15]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00e      	beq.n	8012138 <menuRunApp+0xc0>
  {
	buttonObjInit(&menu.btn_user);
 801211a:	480b      	ldr	r0, [pc, #44]	; (8012148 <menuRunApp+0xd0>)
 801211c:	f000 ff68 	bl	8012ff0 <buttonObjInit>
    buttonObjInit(&menu.btn_left);
 8012120:	480a      	ldr	r0, [pc, #40]	; (801214c <menuRunApp+0xd4>)
 8012122:	f000 ff65 	bl	8012ff0 <buttonObjInit>
    buttonObjInit(&menu.btn_right);
 8012126:	480a      	ldr	r0, [pc, #40]	; (8012150 <menuRunApp+0xd8>)
 8012128:	f000 ff62 	bl	8012ff0 <buttonObjInit>
    buttonObjInit(&menu.btn_enter);
 801212c:	4809      	ldr	r0, [pc, #36]	; (8012154 <menuRunApp+0xdc>)
 801212e:	f000 ff5f 	bl	8012ff0 <buttonObjInit>
    buttonObjInit(&menu.btn_exit);
 8012132:	4809      	ldr	r0, [pc, #36]	; (8012158 <menuRunApp+0xe0>)
 8012134:	f000 ff5c 	bl	8012ff0 <buttonObjInit>
  }
}
 8012138:	bf00      	nop
 801213a:	3710      	adds	r7, #16
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	200002dc 	.word	0x200002dc
 8012144:	2000036c 	.word	0x2000036c
 8012148:	200002ec 	.word	0x200002ec
 801214c:	20000304 	.word	0x20000304
 8012150:	2000031c 	.word	0x2000031c
 8012154:	20000334 	.word	0x20000334
 8012158:	2000034c 	.word	0x2000034c

0801215c <AutoMain>:

void AutoMain(void)
{
 801215c:	b590      	push	{r4, r7, lr}
 801215e:	b089      	sub	sp, #36	; 0x24
 8012160:	af02      	add	r7, sp, #8

  button_obj_t btn_exit;

  buttonObjCreate(&btn_exit,  4, 50, 1000, 100);
 8012162:	4638      	mov	r0, r7
 8012164:	2364      	movs	r3, #100	; 0x64
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801216c:	2232      	movs	r2, #50	; 0x32
 801216e:	2104      	movs	r1, #4
 8012170:	f000 fde6 	bl	8012d40 <buttonObjCreate>


  currentTime = millis();
 8012174:	f000 fa5d 	bl	8012632 <millis>
 8012178:	4603      	mov	r3, r0
 801217a:	4a30      	ldr	r2, [pc, #192]	; (801223c <AutoMain+0xe0>)
 801217c:	6013      	str	r3, [r2, #0]
  while(1)
  {
	buttonObjClearAndUpdate(&btn_exit);
 801217e:	463b      	mov	r3, r7
 8012180:	4618      	mov	r0, r3
 8012182:	f000 ff5c 	bl	801303e <buttonObjClearAndUpdate>

    if (buttonObjGetEvent(&btn_exit) & BUTTON_EVT_CLICKED)
 8012186:	463b      	mov	r3, r7
 8012188:	4618      	mov	r0, r3
 801218a:	f000 ff65 	bl	8013058 <buttonObjGetEvent>
 801218e:	4603      	mov	r3, r0
 8012190:	f003 0304 	and.w	r3, r3, #4
 8012194:	2b00      	cmp	r3, #0
 8012196:	d13a      	bne.n	801220e <AutoMain+0xb2>
    {
      break;
    }


    cycleTime = currentTime - millis();
 8012198:	4b28      	ldr	r3, [pc, #160]	; (801223c <AutoMain+0xe0>)
 801219a:	681c      	ldr	r4, [r3, #0]
 801219c:	f000 fa49 	bl	8012632 <millis>
 80121a0:	4603      	mov	r3, r0
 80121a2:	1ae3      	subs	r3, r4, r3
 80121a4:	4a26      	ldr	r2, [pc, #152]	; (8012240 <AutoMain+0xe4>)
 80121a6:	6013      	str	r3, [r2, #0]
    minutes = cycleTime % 3600000 / 60000;
 80121a8:	4b25      	ldr	r3, [pc, #148]	; (8012240 <AutoMain+0xe4>)
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	4b25      	ldr	r3, [pc, #148]	; (8012244 <AutoMain+0xe8>)
 80121ae:	fba3 1302 	umull	r1, r3, r3, r2
 80121b2:	0d5b      	lsrs	r3, r3, #21
 80121b4:	4924      	ldr	r1, [pc, #144]	; (8012248 <AutoMain+0xec>)
 80121b6:	fb01 f303 	mul.w	r3, r1, r3
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	4a23      	ldr	r2, [pc, #140]	; (801224c <AutoMain+0xf0>)
 80121be:	fba2 2303 	umull	r2, r3, r2, r3
 80121c2:	0b9b      	lsrs	r3, r3, #14
 80121c4:	b2da      	uxtb	r2, r3
 80121c6:	4b22      	ldr	r3, [pc, #136]	; (8012250 <AutoMain+0xf4>)
 80121c8:	701a      	strb	r2, [r3, #0]
    seconds = cycleTime % 3600000 % 60000;
 80121ca:	4b1d      	ldr	r3, [pc, #116]	; (8012240 <AutoMain+0xe4>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	4b1d      	ldr	r3, [pc, #116]	; (8012244 <AutoMain+0xe8>)
 80121d0:	fba3 1302 	umull	r1, r3, r3, r2
 80121d4:	0d5b      	lsrs	r3, r3, #21
 80121d6:	491c      	ldr	r1, [pc, #112]	; (8012248 <AutoMain+0xec>)
 80121d8:	fb01 f303 	mul.w	r3, r1, r3
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	4a1b      	ldr	r2, [pc, #108]	; (801224c <AutoMain+0xf0>)
 80121e0:	fba2 1203 	umull	r1, r2, r2, r3
 80121e4:	0b92      	lsrs	r2, r2, #14
 80121e6:	f64e 2160 	movw	r1, #60000	; 0xea60
 80121ea:	fb01 f202 	mul.w	r2, r1, r2
 80121ee:	1a9a      	subs	r2, r3, r2
 80121f0:	b2d2      	uxtb	r2, r2
 80121f2:	4b18      	ldr	r3, [pc, #96]	; (8012254 <AutoMain+0xf8>)
 80121f4:	701a      	strb	r2, [r3, #0]

	sensorMain();
 80121f6:	f7ff fac1 	bl	801177c <sensorMain>
	if(Biological_Filtration() == true) break;
 80121fa:	f000 f921 	bl	8012440 <Biological_Filtration>
 80121fe:	4603      	mov	r3, r0
 8012200:	2b00      	cmp	r3, #0
 8012202:	d106      	bne.n	8012212 <AutoMain+0xb6>
//		gpioPinWrite(Pp, true); // PUMP ON
//		gpioPinWrite(D_V, true);  // Discharge_VALVE Open
//	}


	mainUi();
 8012204:	f7ff fb32 	bl	801186c <mainUi>
	SerialCom();
 8012208:	f005 fbe2 	bl	80179d0 <SerialCom>
	buttonObjClearAndUpdate(&btn_exit);
 801220c:	e7b7      	b.n	801217e <AutoMain+0x22>
      break;
 801220e:	bf00      	nop
 8012210:	e000      	b.n	8012214 <AutoMain+0xb8>
	if(Biological_Filtration() == true) break;
 8012212:	bf00      	nop
  }
  gpioPinWrite(S_V, false);
 8012214:	2100      	movs	r1, #0
 8012216:	2007      	movs	r0, #7
 8012218:	f002 face 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(D_V, false);
 801221c:	2100      	movs	r1, #0
 801221e:	2008      	movs	r0, #8
 8012220:	f002 faca 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(Pp, false);
 8012224:	2100      	movs	r1, #0
 8012226:	2009      	movs	r0, #9
 8012228:	f002 fac6 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(HTR, false);
 801222c:	2100      	movs	r1, #0
 801222e:	200a      	movs	r0, #10
 8012230:	f002 fac2 	bl	80147b8 <gpioPinWrite>

}
 8012234:	bf00      	nop
 8012236:	371c      	adds	r7, #28
 8012238:	46bd      	mov	sp, r7
 801223a:	bd90      	pop	{r4, r7, pc}
 801223c:	200002e0 	.word	0x200002e0
 8012240:	200002e4 	.word	0x200002e4
 8012244:	95217cb1 	.word	0x95217cb1
 8012248:	0036ee80 	.word	0x0036ee80
 801224c:	45e7b273 	.word	0x45e7b273
 8012250:	200002dd 	.word	0x200002dd
 8012254:	200002de 	.word	0x200002de

08012258 <SettingMain>:

void SettingMain(void)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 801225e:	f000 f9e8 	bl	8012632 <millis>
 8012262:	6078      	str	r0, [r7, #4]
  while(1)
  {
	if (sensor.setting_mode == false)
 8012264:	4b0e      	ldr	r3, [pc, #56]	; (80122a0 <SettingMain+0x48>)
 8012266:	7d5b      	ldrb	r3, [r3, #21]
 8012268:	f083 0301 	eor.w	r3, r3, #1
 801226c:	b2db      	uxtb	r3, r3
 801226e:	2b00      	cmp	r3, #0
 8012270:	d111      	bne.n	8012296 <SettingMain+0x3e>
	{
	  break;
	}
	if (millis()-pre_time >= 1000)
 8012272:	f000 f9de 	bl	8012632 <millis>
 8012276:	4602      	mov	r2, r0
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012280:	d302      	bcc.n	8012288 <SettingMain+0x30>
	{
	  pre_time = millis();
 8012282:	f000 f9d6 	bl	8012632 <millis>
 8012286:	6078      	str	r0, [r7, #4]

	}
	sensorMain();
 8012288:	f7ff fa78 	bl	801177c <sensorMain>
	SettingUpdate();
 801228c:	f000 f80a 	bl	80122a4 <SettingUpdate>
	SerialCom();
 8012290:	f005 fb9e 	bl	80179d0 <SerialCom>
	if (sensor.setting_mode == false)
 8012294:	e7e6      	b.n	8012264 <SettingMain+0xc>
	  break;
 8012296:	bf00      	nop
  }
}
 8012298:	bf00      	nop
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	2000036c 	.word	0x2000036c

080122a4 <SettingUpdate>:

void SettingUpdate(void)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	af00      	add	r7, sp, #0
  buttonObjClearAndUpdate(&menu.btn_left);
 80122a8:	4860      	ldr	r0, [pc, #384]	; (801242c <SettingUpdate+0x188>)
 80122aa:	f000 fec8 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_right);
 80122ae:	4860      	ldr	r0, [pc, #384]	; (8012430 <SettingUpdate+0x18c>)
 80122b0:	f000 fec5 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_enter);
 80122b4:	485f      	ldr	r0, [pc, #380]	; (8012434 <SettingUpdate+0x190>)
 80122b6:	f000 fec2 	bl	801303e <buttonObjClearAndUpdate>
  buttonObjClearAndUpdate(&menu.btn_exit);
 80122ba:	485f      	ldr	r0, [pc, #380]	; (8012438 <SettingUpdate+0x194>)
 80122bc:	f000 febf 	bl	801303e <buttonObjClearAndUpdate>

  if (buttonObjGetEvent(&menu.btn_left) & BUTTON_EVT_CLICKED)
 80122c0:	485a      	ldr	r0, [pc, #360]	; (801242c <SettingUpdate+0x188>)
 80122c2:	f000 fec9 	bl	8013058 <buttonObjGetEvent>
 80122c6:	4603      	mov	r3, r0
 80122c8:	f003 0304 	and.w	r3, r3, #4
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d03d      	beq.n	801234c <SettingUpdate+0xa8>
  	  {
  		  if (sensor.setting != true)
 80122d0:	4b5a      	ldr	r3, [pc, #360]	; (801243c <SettingUpdate+0x198>)
 80122d2:	7d1b      	ldrb	r3, [r3, #20]
 80122d4:	f083 0301 	eor.w	r3, r3, #1
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d011      	beq.n	8012302 <SettingUpdate+0x5e>
  		  {
  			if (sensor.setting_index > 0)
 80122de:	4b57      	ldr	r3, [pc, #348]	; (801243c <SettingUpdate+0x198>)
 80122e0:	7ddb      	ldrb	r3, [r3, #23]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d006      	beq.n	80122f4 <SettingUpdate+0x50>
  			{
  				sensor.setting_index--;
 80122e6:	4b55      	ldr	r3, [pc, #340]	; (801243c <SettingUpdate+0x198>)
 80122e8:	7ddb      	ldrb	r3, [r3, #23]
 80122ea:	3b01      	subs	r3, #1
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	4b53      	ldr	r3, [pc, #332]	; (801243c <SettingUpdate+0x198>)
 80122f0:	75da      	strb	r2, [r3, #23]
 80122f2:	e02b      	b.n	801234c <SettingUpdate+0xa8>
  			}
  			else
  			{
  				sensor.setting_index = sensor.setting_cnt - 1;
 80122f4:	4b51      	ldr	r3, [pc, #324]	; (801243c <SettingUpdate+0x198>)
 80122f6:	7d9b      	ldrb	r3, [r3, #22]
 80122f8:	3b01      	subs	r3, #1
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	4b4f      	ldr	r3, [pc, #316]	; (801243c <SettingUpdate+0x198>)
 80122fe:	75da      	strb	r2, [r3, #23]
 8012300:	e024      	b.n	801234c <SettingUpdate+0xa8>
  			}
  		  }else
  		  {
  			  if (sensor.setting_index == Water_Temp)
 8012302:	4b4e      	ldr	r3, [pc, #312]	; (801243c <SettingUpdate+0x198>)
 8012304:	7ddb      	ldrb	r3, [r3, #23]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d109      	bne.n	801231e <SettingUpdate+0x7a>
  			  {
  				  sensor.ds18b20_temp_setting -= 1;
 801230a:	4b4c      	ldr	r3, [pc, #304]	; (801243c <SettingUpdate+0x198>)
 801230c:	edd3 7a06 	vldr	s15, [r3, #24]
 8012310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012318:	4b48      	ldr	r3, [pc, #288]	; (801243c <SettingUpdate+0x198>)
 801231a:	edc3 7a06 	vstr	s15, [r3, #24]
  			  }
  			  if (sensor.setting_index == Water_Level)
 801231e:	4b47      	ldr	r3, [pc, #284]	; (801243c <SettingUpdate+0x198>)
 8012320:	7ddb      	ldrb	r3, [r3, #23]
 8012322:	2b01      	cmp	r3, #1
 8012324:	d104      	bne.n	8012330 <SettingUpdate+0x8c>
  			  {
  				  sensor.water_level_setting -= 1;
 8012326:	4b45      	ldr	r3, [pc, #276]	; (801243c <SettingUpdate+0x198>)
 8012328:	6a1b      	ldr	r3, [r3, #32]
 801232a:	3b01      	subs	r3, #1
 801232c:	4a43      	ldr	r2, [pc, #268]	; (801243c <SettingUpdate+0x198>)
 801232e:	6213      	str	r3, [r2, #32]
  			  }
  			  if (sensor.setting_index == Water_Quality)
 8012330:	4b42      	ldr	r3, [pc, #264]	; (801243c <SettingUpdate+0x198>)
 8012332:	7ddb      	ldrb	r3, [r3, #23]
 8012334:	2b02      	cmp	r3, #2
 8012336:	d109      	bne.n	801234c <SettingUpdate+0xa8>
  			  {
  				  sensor.water_quality_setting -= 1;
 8012338:	4b40      	ldr	r3, [pc, #256]	; (801243c <SettingUpdate+0x198>)
 801233a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801233e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012346:	4b3d      	ldr	r3, [pc, #244]	; (801243c <SettingUpdate+0x198>)
 8012348:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  			  }
  		  }
  	  }
  	  if (buttonObjGetEvent(&menu.btn_right) & BUTTON_EVT_CLICKED)
 801234c:	4838      	ldr	r0, [pc, #224]	; (8012430 <SettingUpdate+0x18c>)
 801234e:	f000 fe83 	bl	8013058 <buttonObjGetEvent>
 8012352:	4603      	mov	r3, r0
 8012354:	f003 0304 	and.w	r3, r3, #4
 8012358:	2b00      	cmp	r3, #0
 801235a:	d03e      	beq.n	80123da <SettingUpdate+0x136>
  	  {
  		  if (sensor.setting != true)
 801235c:	4b37      	ldr	r3, [pc, #220]	; (801243c <SettingUpdate+0x198>)
 801235e:	7d1b      	ldrb	r3, [r3, #20]
 8012360:	f083 0301 	eor.w	r3, r3, #1
 8012364:	b2db      	uxtb	r3, r3
 8012366:	2b00      	cmp	r3, #0
 8012368:	d012      	beq.n	8012390 <SettingUpdate+0xec>
  		  {
  			sensor.setting_index++;
 801236a:	4b34      	ldr	r3, [pc, #208]	; (801243c <SettingUpdate+0x198>)
 801236c:	7ddb      	ldrb	r3, [r3, #23]
 801236e:	3301      	adds	r3, #1
 8012370:	b2da      	uxtb	r2, r3
 8012372:	4b32      	ldr	r3, [pc, #200]	; (801243c <SettingUpdate+0x198>)
 8012374:	75da      	strb	r2, [r3, #23]
  			sensor.setting_index %= sensor.setting_cnt;
 8012376:	4b31      	ldr	r3, [pc, #196]	; (801243c <SettingUpdate+0x198>)
 8012378:	7ddb      	ldrb	r3, [r3, #23]
 801237a:	4a30      	ldr	r2, [pc, #192]	; (801243c <SettingUpdate+0x198>)
 801237c:	7d92      	ldrb	r2, [r2, #22]
 801237e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012382:	fb01 f202 	mul.w	r2, r1, r2
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	b2da      	uxtb	r2, r3
 801238a:	4b2c      	ldr	r3, [pc, #176]	; (801243c <SettingUpdate+0x198>)
 801238c:	75da      	strb	r2, [r3, #23]
 801238e:	e024      	b.n	80123da <SettingUpdate+0x136>
  		  }else
  		  {
  			  if (sensor.setting_index == Water_Temp)
 8012390:	4b2a      	ldr	r3, [pc, #168]	; (801243c <SettingUpdate+0x198>)
 8012392:	7ddb      	ldrb	r3, [r3, #23]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <SettingUpdate+0x108>
  			  {
  				  sensor.ds18b20_temp_setting += 1;
 8012398:	4b28      	ldr	r3, [pc, #160]	; (801243c <SettingUpdate+0x198>)
 801239a:	edd3 7a06 	vldr	s15, [r3, #24]
 801239e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123a6:	4b25      	ldr	r3, [pc, #148]	; (801243c <SettingUpdate+0x198>)
 80123a8:	edc3 7a06 	vstr	s15, [r3, #24]
  			  }
  			  if (sensor.setting_index == Water_Level)
 80123ac:	4b23      	ldr	r3, [pc, #140]	; (801243c <SettingUpdate+0x198>)
 80123ae:	7ddb      	ldrb	r3, [r3, #23]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	d104      	bne.n	80123be <SettingUpdate+0x11a>
  			  {
  				  sensor.water_level_setting += 1;
 80123b4:	4b21      	ldr	r3, [pc, #132]	; (801243c <SettingUpdate+0x198>)
 80123b6:	6a1b      	ldr	r3, [r3, #32]
 80123b8:	3301      	adds	r3, #1
 80123ba:	4a20      	ldr	r2, [pc, #128]	; (801243c <SettingUpdate+0x198>)
 80123bc:	6213      	str	r3, [r2, #32]
  			  }
  			  if (sensor.setting_index == Water_Quality)
 80123be:	4b1f      	ldr	r3, [pc, #124]	; (801243c <SettingUpdate+0x198>)
 80123c0:	7ddb      	ldrb	r3, [r3, #23]
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d109      	bne.n	80123da <SettingUpdate+0x136>
  			  {
  				  sensor.water_quality_setting += 1;
 80123c6:	4b1d      	ldr	r3, [pc, #116]	; (801243c <SettingUpdate+0x198>)
 80123c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80123cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80123d4:	4b19      	ldr	r3, [pc, #100]	; (801243c <SettingUpdate+0x198>)
 80123d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  			  }
  		  }
  	  }
  	  if (buttonObjGetEvent(&menu.btn_enter) & BUTTON_EVT_CLICKED)
 80123da:	4816      	ldr	r0, [pc, #88]	; (8012434 <SettingUpdate+0x190>)
 80123dc:	f000 fe3c 	bl	8013058 <buttonObjGetEvent>
 80123e0:	4603      	mov	r3, r0
 80123e2:	f003 0304 	and.w	r3, r3, #4
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d00e      	beq.n	8012408 <SettingUpdate+0x164>
  	  {
  		sensor.setting = !sensor.setting;
 80123ea:	4b14      	ldr	r3, [pc, #80]	; (801243c <SettingUpdate+0x198>)
 80123ec:	7d1b      	ldrb	r3, [r3, #20]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	bf14      	ite	ne
 80123f2:	2301      	movne	r3, #1
 80123f4:	2300      	moveq	r3, #0
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	f083 0301 	eor.w	r3, r3, #1
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	f003 0301 	and.w	r3, r3, #1
 8012402:	b2da      	uxtb	r2, r3
 8012404:	4b0d      	ldr	r3, [pc, #52]	; (801243c <SettingUpdate+0x198>)
 8012406:	751a      	strb	r2, [r3, #20]
  	  }
  	  if (buttonObjGetEvent(&menu.btn_exit) & BUTTON_EVT_CLICKED)
 8012408:	480b      	ldr	r0, [pc, #44]	; (8012438 <SettingUpdate+0x194>)
 801240a:	f000 fe25 	bl	8013058 <buttonObjGetEvent>
 801240e:	4603      	mov	r3, r0
 8012410:	f003 0304 	and.w	r3, r3, #4
 8012414:	2b00      	cmp	r3, #0
 8012416:	d005      	beq.n	8012424 <SettingUpdate+0x180>
  	  {
  		sensor.setting = false;
 8012418:	4b08      	ldr	r3, [pc, #32]	; (801243c <SettingUpdate+0x198>)
 801241a:	2200      	movs	r2, #0
 801241c:	751a      	strb	r2, [r3, #20]
  		sensor.setting_mode = false;
 801241e:	4b07      	ldr	r3, [pc, #28]	; (801243c <SettingUpdate+0x198>)
 8012420:	2200      	movs	r2, #0
 8012422:	755a      	strb	r2, [r3, #21]
  	  }

  	mainUi();
 8012424:	f7ff fa22 	bl	801186c <mainUi>
}
 8012428:	bf00      	nop
 801242a:	bd80      	pop	{r7, pc}
 801242c:	20000304 	.word	0x20000304
 8012430:	2000031c 	.word	0x2000031c
 8012434:	20000334 	.word	0x20000334
 8012438:	2000034c 	.word	0x2000034c
 801243c:	2000036c 	.word	0x2000036c

08012440 <Biological_Filtration>:

bool Biological_Filtration(void)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
	bool ret = 0;
 8012446:	2300      	movs	r3, #0
 8012448:	71fb      	strb	r3, [r7, #7]
	static uint8_t sequence = 0;
	switch(sequence)
 801244a:	4b28      	ldr	r3, [pc, #160]	; (80124ec <Biological_Filtration+0xac>)
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	2b03      	cmp	r3, #3
 8012450:	d83e      	bhi.n	80124d0 <Biological_Filtration+0x90>
 8012452:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <Biological_Filtration+0x18>)
 8012454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012458:	08012469 	.word	0x08012469
 801245c:	08012471 	.word	0x08012471
 8012460:	080124a1 	.word	0x080124a1
 8012464:	080124c5 	.word	0x080124c5
	{
		case BF_start:
			sequence = Discharge_water;
 8012468:	4b20      	ldr	r3, [pc, #128]	; (80124ec <Biological_Filtration+0xac>)
 801246a:	2201      	movs	r2, #1
 801246c:	701a      	strb	r2, [r3, #0]
		  break;
 801246e:	e038      	b.n	80124e2 <Biological_Filtration+0xa2>

		case Discharge_water:
			gpioPinWrite(D_V, true);
 8012470:	2101      	movs	r1, #1
 8012472:	2008      	movs	r0, #8
 8012474:	f002 f9a0 	bl	80147b8 <gpioPinWrite>
	  		gpioPinWrite(Pp, true);
 8012478:	2101      	movs	r1, #1
 801247a:	2009      	movs	r0, #9
 801247c:	f002 f99c 	bl	80147b8 <gpioPinWrite>
	  		if(sensor.water_level < 10)
 8012480:	4b1b      	ldr	r3, [pc, #108]	; (80124f0 <Biological_Filtration+0xb0>)
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	2b09      	cmp	r3, #9
 8012486:	d829      	bhi.n	80124dc <Biological_Filtration+0x9c>
	  		{
		  		gpioPinWrite(D_V, false);
 8012488:	2100      	movs	r1, #0
 801248a:	2008      	movs	r0, #8
 801248c:	f002 f994 	bl	80147b8 <gpioPinWrite>
		  		gpioPinWrite(Pp, false);
 8012490:	2100      	movs	r1, #0
 8012492:	2009      	movs	r0, #9
 8012494:	f002 f990 	bl	80147b8 <gpioPinWrite>
		  		sequence = Filling_water;
 8012498:	4b14      	ldr	r3, [pc, #80]	; (80124ec <Biological_Filtration+0xac>)
 801249a:	2202      	movs	r2, #2
 801249c:	701a      	strb	r2, [r3, #0]
	  		}
	  	  break;
 801249e:	e01d      	b.n	80124dc <Biological_Filtration+0x9c>

	    case Filling_water:
	  		gpioPinWrite(S_V, true);
 80124a0:	2101      	movs	r1, #1
 80124a2:	2007      	movs	r0, #7
 80124a4:	f002 f988 	bl	80147b8 <gpioPinWrite>
	  		if(sensor.water_level > sensor.water_level_setting)
 80124a8:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <Biological_Filtration+0xb0>)
 80124aa:	68da      	ldr	r2, [r3, #12]
 80124ac:	4b10      	ldr	r3, [pc, #64]	; (80124f0 <Biological_Filtration+0xb0>)
 80124ae:	6a1b      	ldr	r3, [r3, #32]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d915      	bls.n	80124e0 <Biological_Filtration+0xa0>
	  		{
	  			gpioPinWrite(S_V, false);  // Supply_VALVE Close
 80124b4:	2100      	movs	r1, #0
 80124b6:	2007      	movs	r0, #7
 80124b8:	f002 f97e 	bl	80147b8 <gpioPinWrite>
	  			sequence = BF_finish;
 80124bc:	4b0b      	ldr	r3, [pc, #44]	; (80124ec <Biological_Filtration+0xac>)
 80124be:	2203      	movs	r2, #3
 80124c0:	701a      	strb	r2, [r3, #0]
	  		}
	      break;
 80124c2:	e00d      	b.n	80124e0 <Biological_Filtration+0xa0>

		case BF_finish:
			ret = 1;
 80124c4:	2301      	movs	r3, #1
 80124c6:	71fb      	strb	r3, [r7, #7]
			sequence = BF_start;
 80124c8:	4b08      	ldr	r3, [pc, #32]	; (80124ec <Biological_Filtration+0xac>)
 80124ca:	2200      	movs	r2, #0
 80124cc:	701a      	strb	r2, [r3, #0]
	  	  break;
 80124ce:	e008      	b.n	80124e2 <Biological_Filtration+0xa2>

	    default:
	    	ret = 0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	71fb      	strb	r3, [r7, #7]
			sequence = BF_start;
 80124d4:	4b05      	ldr	r3, [pc, #20]	; (80124ec <Biological_Filtration+0xac>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	701a      	strb	r2, [r3, #0]
	      break;
 80124da:	e002      	b.n	80124e2 <Biological_Filtration+0xa2>
	  	  break;
 80124dc:	bf00      	nop
 80124de:	e000      	b.n	80124e2 <Biological_Filtration+0xa2>
	      break;
 80124e0:	bf00      	nop
	 }

	return ret;
 80124e2:	79fb      	ldrb	r3, [r7, #7]
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	3708      	adds	r7, #8
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	2000039d 	.word	0x2000039d
 80124f0:	2000036c 	.word	0x2000036c

080124f4 <cliBoot>:

void cliBoot(cli_args_t *args)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b084      	sub	sp, #16
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80124fc:	2300      	movs	r3, #0
 80124fe:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d11e      	bne.n	8012546 <cliBoot+0x52>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	695b      	ldr	r3, [r3, #20]
 801250c:	4926      	ldr	r1, [pc, #152]	; (80125a8 <cliBoot+0xb4>)
 801250e:	2000      	movs	r0, #0
 8012510:	4798      	blx	r3
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d016      	beq.n	8012546 <cliBoot+0x52>
  {
    firm_version_t *p_boot_ver = (firm_version_t *)(FLASH_ADDR_BOOT_VER);
 8012518:	4b24      	ldr	r3, [pc, #144]	; (80125ac <cliBoot+0xb8>)
 801251a:	60bb      	str	r3, [r7, #8]


    cliPrintf("boot ver   : %s\n", p_boot_ver->version);
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	4619      	mov	r1, r3
 8012520:	4823      	ldr	r0, [pc, #140]	; (80125b0 <cliBoot+0xbc>)
 8012522:	f000 ff15 	bl	8013350 <cliPrintf>
    cliPrintf("boot name  : %s\n", p_boot_ver->name);
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	3320      	adds	r3, #32
 801252a:	4619      	mov	r1, r3
 801252c:	4821      	ldr	r0, [pc, #132]	; (80125b4 <cliBoot+0xc0>)
 801252e:	f000 ff0f 	bl	8013350 <cliPrintf>
    cliPrintf("boot param : 0x%X\n", rtcBackupRegRead(0));
 8012532:	2000      	movs	r0, #0
 8012534:	f003 fe42 	bl	80161bc <rtcBackupRegRead>
 8012538:	4603      	mov	r3, r0
 801253a:	4619      	mov	r1, r3
 801253c:	481e      	ldr	r0, [pc, #120]	; (80125b8 <cliBoot+0xc4>)
 801253e:	f000 ff07 	bl	8013350 <cliPrintf>

    ret = true;
 8012542:	2301      	movs	r3, #1
 8012544:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "jump_boot") == true)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	881b      	ldrh	r3, [r3, #0]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d10c      	bne.n	8012568 <cliBoot+0x74>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	695b      	ldr	r3, [r3, #20]
 8012552:	491a      	ldr	r1, [pc, #104]	; (80125bc <cliBoot+0xc8>)
 8012554:	2000      	movs	r0, #0
 8012556:	4798      	blx	r3
 8012558:	4603      	mov	r3, r0
 801255a:	2b00      	cmp	r3, #0
 801255c:	d004      	beq.n	8012568 <cliBoot+0x74>
  {
    resetToBoot(0);
 801255e:	2000      	movs	r0, #0
 8012560:	f003 fdca 	bl	80160f8 <resetToBoot>
    ret = true;
 8012564:	2301      	movs	r3, #1
 8012566:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "jump_fw") == true)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	881b      	ldrh	r3, [r3, #0]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d10d      	bne.n	801258c <cliBoot+0x98>
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	695b      	ldr	r3, [r3, #20]
 8012574:	4912      	ldr	r1, [pc, #72]	; (80125c0 <cliBoot+0xcc>)
 8012576:	2000      	movs	r0, #0
 8012578:	4798      	blx	r3
 801257a:	4603      	mov	r3, r0
 801257c:	2b00      	cmp	r3, #0
 801257e:	d005      	beq.n	801258c <cliBoot+0x98>
  {
    rtcBackupRegWrite(0, 0);
 8012580:	2100      	movs	r1, #0
 8012582:	2000      	movs	r0, #0
 8012584:	f003 fe2a 	bl	80161dc <rtcBackupRegWrite>
    ret = true;
 8012588:	2301      	movs	r3, #1
 801258a:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 801258c:	7bfb      	ldrb	r3, [r7, #15]
 801258e:	f083 0301 	eor.w	r3, r3, #1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <cliBoot+0xaa>
  {
    cliPrintf("boot info\n");
 8012598:	480a      	ldr	r0, [pc, #40]	; (80125c4 <cliBoot+0xd0>)
 801259a:	f000 fed9 	bl	8013350 <cliPrintf>
  }
}
 801259e:	bf00      	nop
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	080292e4 	.word	0x080292e4
 80125ac:	08000400 	.word	0x08000400
 80125b0:	080292ec 	.word	0x080292ec
 80125b4:	08029300 	.word	0x08029300
 80125b8:	08029314 	.word	0x08029314
 80125bc:	08029328 	.word	0x08029328
 80125c0:	08029334 	.word	0x08029334
 80125c4:	0802933c 	.word	0x0802933c

080125c8 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
  HAL_Init();
 80125ce:	f00a fe5d 	bl	801d28c <HAL_Init>
  SystemClock_Config();
 80125d2:	f000 f835 	bl	8012640 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80125d6:	2300      	movs	r3, #0
 80125d8:	607b      	str	r3, [r7, #4]
 80125da:	4b0f      	ldr	r3, [pc, #60]	; (8012618 <bspInit+0x50>)
 80125dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125de:	4a0e      	ldr	r2, [pc, #56]	; (8012618 <bspInit+0x50>)
 80125e0:	f043 0304 	orr.w	r3, r3, #4
 80125e4:	6313      	str	r3, [r2, #48]	; 0x30
 80125e6:	4b0c      	ldr	r3, [pc, #48]	; (8012618 <bspInit+0x50>)
 80125e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125ea:	f003 0304 	and.w	r3, r3, #4
 80125ee:	607b      	str	r3, [r7, #4]
 80125f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80125f2:	2300      	movs	r3, #0
 80125f4:	603b      	str	r3, [r7, #0]
 80125f6:	4b08      	ldr	r3, [pc, #32]	; (8012618 <bspInit+0x50>)
 80125f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125fa:	4a07      	ldr	r2, [pc, #28]	; (8012618 <bspInit+0x50>)
 80125fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012600:	6313      	str	r3, [r2, #48]	; 0x30
 8012602:	4b05      	ldr	r3, [pc, #20]	; (8012618 <bspInit+0x50>)
 8012604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801260a:	603b      	str	r3, [r7, #0]
 801260c:	683b      	ldr	r3, [r7, #0]
}
 801260e:	bf00      	nop
 8012610:	3708      	adds	r7, #8
 8012612:	46bd      	mov	sp, r7
 8012614:	bd80      	pop	{r7, pc}
 8012616:	bf00      	nop
 8012618:	40023800 	.word	0x40023800

0801261c <delay>:

void delay(uint32_t ms)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f00a fea3 	bl	801d370 <HAL_Delay>
#endif
}
 801262a:	bf00      	nop
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <millis>:

uint32_t millis(void)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8012636:	f00a fe8f 	bl	801d358 <HAL_GetTick>
 801263a:	4603      	mov	r3, r0
}
 801263c:	4618      	mov	r0, r3
 801263e:	bd80      	pop	{r7, pc}

08012640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b09a      	sub	sp, #104	; 0x68
 8012644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801264a:	2230      	movs	r2, #48	; 0x30
 801264c:	2100      	movs	r1, #0
 801264e:	4618      	mov	r0, r3
 8012650:	f012 fb06 	bl	8024c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012658:	2200      	movs	r2, #0
 801265a:	601a      	str	r2, [r3, #0]
 801265c:	605a      	str	r2, [r3, #4]
 801265e:	609a      	str	r2, [r3, #8]
 8012660:	60da      	str	r2, [r3, #12]
 8012662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012664:	f107 030c 	add.w	r3, r7, #12
 8012668:	2200      	movs	r2, #0
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	605a      	str	r2, [r3, #4]
 801266e:	609a      	str	r2, [r3, #8]
 8012670:	60da      	str	r2, [r3, #12]
 8012672:	611a      	str	r2, [r3, #16]
 8012674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012676:	2300      	movs	r3, #0
 8012678:	60bb      	str	r3, [r7, #8]
 801267a:	4b30      	ldr	r3, [pc, #192]	; (801273c <SystemClock_Config+0xfc>)
 801267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801267e:	4a2f      	ldr	r2, [pc, #188]	; (801273c <SystemClock_Config+0xfc>)
 8012680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012684:	6413      	str	r3, [r2, #64]	; 0x40
 8012686:	4b2d      	ldr	r3, [pc, #180]	; (801273c <SystemClock_Config+0xfc>)
 8012688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801268e:	60bb      	str	r3, [r7, #8]
 8012690:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012692:	2300      	movs	r3, #0
 8012694:	607b      	str	r3, [r7, #4]
 8012696:	4b2a      	ldr	r3, [pc, #168]	; (8012740 <SystemClock_Config+0x100>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	4a29      	ldr	r2, [pc, #164]	; (8012740 <SystemClock_Config+0x100>)
 801269c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80126a0:	6013      	str	r3, [r2, #0]
 80126a2:	4b27      	ldr	r3, [pc, #156]	; (8012740 <SystemClock_Config+0x100>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80126aa:	607b      	str	r3, [r7, #4]
 80126ac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80126ae:	2309      	movs	r3, #9
 80126b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80126b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80126b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80126b8:	2301      	movs	r3, #1
 80126ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80126bc:	2302      	movs	r3, #2
 80126be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80126c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80126c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 80126c6:	2319      	movs	r3, #25
 80126c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80126ca:	23c0      	movs	r3, #192	; 0xc0
 80126cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80126ce:	2302      	movs	r3, #2
 80126d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80126d2:	2304      	movs	r3, #4
 80126d4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80126d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126da:	4618      	mov	r0, r3
 80126dc:	f00c fe82 	bl	801f3e4 <HAL_RCC_OscConfig>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80126e6:	f000 f82d 	bl	8012744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80126ea:	230f      	movs	r3, #15
 80126ec:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80126ee:	2302      	movs	r3, #2
 80126f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80126f2:	2300      	movs	r3, #0
 80126f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80126f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80126fc:	2300      	movs	r3, #0
 80126fe:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8012700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012704:	2103      	movs	r1, #3
 8012706:	4618      	mov	r0, r3
 8012708:	f00d f8da 	bl	801f8c0 <HAL_RCC_ClockConfig>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d001      	beq.n	8012716 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8012712:	f000 f817 	bl	8012744 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8012716:	2302      	movs	r3, #2
 8012718:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801271a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801271e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012720:	f107 030c 	add.w	r3, r7, #12
 8012724:	4618      	mov	r0, r3
 8012726:	f00d faab 	bl	801fc80 <HAL_RCCEx_PeriphCLKConfig>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8012730:	f000 f808 	bl	8012744 <Error_Handler>
  }
}
 8012734:	bf00      	nop
 8012736:	3768      	adds	r7, #104	; 0x68
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	40023800 	.word	0x40023800
 8012740:	40007000 	.word	0x40007000

08012744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012744:	b480      	push	{r7}
 8012746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8012748:	b672      	cpsid	i
}
 801274a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801274c:	e7fe      	b.n	801274c <Error_Handler+0x8>
	...

08012750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012756:	2300      	movs	r3, #0
 8012758:	607b      	str	r3, [r7, #4]
 801275a:	4b10      	ldr	r3, [pc, #64]	; (801279c <HAL_MspInit+0x4c>)
 801275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801275e:	4a0f      	ldr	r2, [pc, #60]	; (801279c <HAL_MspInit+0x4c>)
 8012760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012764:	6453      	str	r3, [r2, #68]	; 0x44
 8012766:	4b0d      	ldr	r3, [pc, #52]	; (801279c <HAL_MspInit+0x4c>)
 8012768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801276e:	607b      	str	r3, [r7, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012772:	2300      	movs	r3, #0
 8012774:	603b      	str	r3, [r7, #0]
 8012776:	4b09      	ldr	r3, [pc, #36]	; (801279c <HAL_MspInit+0x4c>)
 8012778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277a:	4a08      	ldr	r2, [pc, #32]	; (801279c <HAL_MspInit+0x4c>)
 801277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012780:	6413      	str	r3, [r2, #64]	; 0x40
 8012782:	4b06      	ldr	r3, [pc, #24]	; (801279c <HAL_MspInit+0x4c>)
 8012784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801278a:	603b      	str	r3, [r7, #0]
 801278c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801278e:	bf00      	nop
 8012790:	370c      	adds	r7, #12
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	40023800 	.word	0x40023800

080127a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80127a0:	b480      	push	{r7}
 80127a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80127a4:	e7fe      	b.n	80127a4 <NMI_Handler+0x4>

080127a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80127a6:	b480      	push	{r7}
 80127a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80127aa:	e7fe      	b.n	80127aa <HardFault_Handler+0x4>

080127ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80127ac:	b480      	push	{r7}
 80127ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80127b0:	e7fe      	b.n	80127b0 <MemManage_Handler+0x4>

080127b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80127b2:	b480      	push	{r7}
 80127b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80127b6:	e7fe      	b.n	80127b6 <BusFault_Handler+0x4>

080127b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80127b8:	b480      	push	{r7}
 80127ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80127bc:	e7fe      	b.n	80127bc <UsageFault_Handler+0x4>

080127be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80127be:	b480      	push	{r7}
 80127c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80127c2:	bf00      	nop
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80127cc:	b480      	push	{r7}
 80127ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80127d0:	bf00      	nop
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr

080127da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80127da:	b480      	push	{r7}
 80127dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80127de:	bf00      	nop
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80127ec:	f00a fda0 	bl	801d330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  resetISR();
 80127f0:	f003 fc60 	bl	80160b4 <resetISR>
  /* USER CODE END SysTick_IRQn 1 */
}
 80127f4:	bf00      	nop
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80127fc:	4802      	ldr	r0, [pc, #8]	; (8012808 <ADC_IRQHandler+0x10>)
 80127fe:	f00a fe1e 	bl	801d43e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8012802:	bf00      	nop
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	2000ad7c 	.word	0x2000ad7c

0801280c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 801280c:	b580      	push	{r7, lr}
 801280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8012810:	4802      	ldr	r0, [pc, #8]	; (801281c <TIM3_IRQHandler+0x10>)
 8012812:	f00f fd35 	bl	8022280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8012816:	bf00      	nop
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	2000ac30 	.word	0x2000ac30

08012820 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8012824:	4802      	ldr	r0, [pc, #8]	; (8012830 <SPI1_IRQHandler+0x10>)
 8012826:	f00f fa17 	bl	8021c58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 801282a:	bf00      	nop
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	2000acc4 	.word	0x2000acc4

08012834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012838:	4802      	ldr	r0, [pc, #8]	; (8012844 <USART1_IRQHandler+0x10>)
 801283a:	f010 fc69 	bl	8023110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801283e:	bf00      	nop
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	2000b21c 	.word	0x2000b21c

08012848 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 801284c:	4802      	ldr	r0, [pc, #8]	; (8012858 <SDIO_IRQHandler+0x10>)
 801284e:	f00d fe89 	bl	8020564 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8012852:	bf00      	nop
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	2000aaec 	.word	0x2000aaec

0801285c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012860:	4802      	ldr	r0, [pc, #8]	; (801286c <DMA2_Stream0_IRQHandler+0x10>)
 8012862:	f00b fdad 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8012866:	bf00      	nop
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	2000adc4 	.word	0x2000adc4

08012870 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8012874:	4802      	ldr	r0, [pc, #8]	; (8012880 <DMA2_Stream2_IRQHandler+0x10>)
 8012876:	f00b fda3 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 801287a:	bf00      	nop
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	2000b2bc 	.word	0x2000b2bc

08012884 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8012888:	4802      	ldr	r0, [pc, #8]	; (8012894 <DMA2_Stream3_IRQHandler+0x10>)
 801288a:	f00b fd99 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801288e:	bf00      	nop
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	2000abd0 	.word	0x2000abd0

08012898 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 801289c:	4802      	ldr	r0, [pc, #8]	; (80128a8 <DMA2_Stream5_IRQHandler+0x10>)
 801289e:	f00b fd8f 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80128a2:	bf00      	nop
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	2000ad1c 	.word	0x2000ad1c

080128ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80128b0:	4802      	ldr	r0, [pc, #8]	; (80128bc <DMA2_Stream6_IRQHandler+0x10>)
 80128b2:	f00b fd85 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80128b6:	bf00      	nop
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	2000ab70 	.word	0x2000ab70

080128c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80128c4:	4802      	ldr	r0, [pc, #8]	; (80128d0 <DMA2_Stream7_IRQHandler+0x10>)
 80128c6:	f00b fd7b 	bl	801e3c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80128ca:	bf00      	nop
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	2000b25c 	.word	0x2000b25c

080128d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80128d4:	b480      	push	{r7}
 80128d6:	af00      	add	r7, sp, #0
	return 1;
 80128d8:	2301      	movs	r3, #1
}
 80128da:	4618      	mov	r0, r3
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <_kill>:

int _kill(int pid, int sig)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80128ee:	f012 f96f 	bl	8024bd0 <__errno>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2216      	movs	r2, #22
 80128f6:	601a      	str	r2, [r3, #0]
	return -1;
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3708      	adds	r7, #8
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <_exit>:

void _exit (int status)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 801290c:	f04f 31ff 	mov.w	r1, #4294967295
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7ff ffe7 	bl	80128e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8012916:	e7fe      	b.n	8012916 <_exit+0x12>

08012918 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012924:	2300      	movs	r3, #0
 8012926:	617b      	str	r3, [r7, #20]
 8012928:	e00a      	b.n	8012940 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801292a:	f3af 8000 	nop.w
 801292e:	4601      	mov	r1, r0
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	60ba      	str	r2, [r7, #8]
 8012936:	b2ca      	uxtb	r2, r1
 8012938:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	3301      	adds	r3, #1
 801293e:	617b      	str	r3, [r7, #20]
 8012940:	697a      	ldr	r2, [r7, #20]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	429a      	cmp	r2, r3
 8012946:	dbf0      	blt.n	801292a <_read+0x12>
	}

return len;
 8012948:	687b      	ldr	r3, [r7, #4]
}
 801294a:	4618      	mov	r0, r3
 801294c:	3718      	adds	r7, #24
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b086      	sub	sp, #24
 8012956:	af00      	add	r7, sp, #0
 8012958:	60f8      	str	r0, [r7, #12]
 801295a:	60b9      	str	r1, [r7, #8]
 801295c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801295e:	2300      	movs	r3, #0
 8012960:	617b      	str	r3, [r7, #20]
 8012962:	e009      	b.n	8012978 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	1c5a      	adds	r2, r3, #1
 8012968:	60ba      	str	r2, [r7, #8]
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	4618      	mov	r0, r3
 801296e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	3301      	adds	r3, #1
 8012976:	617b      	str	r3, [r7, #20]
 8012978:	697a      	ldr	r2, [r7, #20]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	429a      	cmp	r2, r3
 801297e:	dbf1      	blt.n	8012964 <_write+0x12>
	}
	return len;
 8012980:	687b      	ldr	r3, [r7, #4]
}
 8012982:	4618      	mov	r0, r3
 8012984:	3718      	adds	r7, #24
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_close>:

int _close(int file)
{
 801298a:	b480      	push	{r7}
 801298c:	b083      	sub	sp, #12
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
	return -1;
 8012992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012996:	4618      	mov	r0, r3
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr

080129a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80129a2:	b480      	push	{r7}
 80129a4:	b083      	sub	sp, #12
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
 80129aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80129b2:	605a      	str	r2, [r3, #4]
	return 0;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	370c      	adds	r7, #12
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr

080129c2 <_isatty>:

int _isatty(int file)
{
 80129c2:	b480      	push	{r7}
 80129c4:	b083      	sub	sp, #12
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
	return 1;
 80129ca:	2301      	movs	r3, #1
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80129d8:	b480      	push	{r7}
 80129da:	b085      	sub	sp, #20
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	607a      	str	r2, [r7, #4]
	return 0;
 80129e4:	2300      	movs	r3, #0
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
	...

080129f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b086      	sub	sp, #24
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80129fc:	4a14      	ldr	r2, [pc, #80]	; (8012a50 <_sbrk+0x5c>)
 80129fe:	4b15      	ldr	r3, [pc, #84]	; (8012a54 <_sbrk+0x60>)
 8012a00:	1ad3      	subs	r3, r2, r3
 8012a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012a08:	4b13      	ldr	r3, [pc, #76]	; (8012a58 <_sbrk+0x64>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d102      	bne.n	8012a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012a10:	4b11      	ldr	r3, [pc, #68]	; (8012a58 <_sbrk+0x64>)
 8012a12:	4a12      	ldr	r2, [pc, #72]	; (8012a5c <_sbrk+0x68>)
 8012a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012a16:	4b10      	ldr	r3, [pc, #64]	; (8012a58 <_sbrk+0x64>)
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4413      	add	r3, r2
 8012a1e:	693a      	ldr	r2, [r7, #16]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d207      	bcs.n	8012a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012a24:	f012 f8d4 	bl	8024bd0 <__errno>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	220c      	movs	r2, #12
 8012a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a32:	e009      	b.n	8012a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012a34:	4b08      	ldr	r3, [pc, #32]	; (8012a58 <_sbrk+0x64>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012a3a:	4b07      	ldr	r3, [pc, #28]	; (8012a58 <_sbrk+0x64>)
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	4413      	add	r3, r2
 8012a42:	4a05      	ldr	r2, [pc, #20]	; (8012a58 <_sbrk+0x64>)
 8012a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012a46:	68fb      	ldr	r3, [r7, #12]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3718      	adds	r7, #24
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	20020000 	.word	0x20020000
 8012a54:	00000400 	.word	0x00000400
 8012a58:	200003a0 	.word	0x200003a0
 8012a5c:	2000b3b8 	.word	0x2000b3b8

08012a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012a60:	b480      	push	{r7}
 8012a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012a64:	4b07      	ldr	r3, [pc, #28]	; (8012a84 <SystemInit+0x24>)
 8012a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a6a:	4a06      	ldr	r2, [pc, #24]	; (8012a84 <SystemInit+0x24>)
 8012a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  SCB->VTOR = (uint32_t)&__isr_vector_addr;
 8012a74:	4b03      	ldr	r3, [pc, #12]	; (8012a84 <SystemInit+0x24>)
 8012a76:	4a04      	ldr	r2, [pc, #16]	; (8012a88 <SystemInit+0x28>)
 8012a78:	609a      	str	r2, [r3, #8]
#endif
}
 8012a7a:	bf00      	nop
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a82:	4770      	bx	lr
 8012a84:	e000ed00 	.word	0xe000ed00
 8012a88:	08010400 	.word	0x08010400

08012a8c <Reset_Handler>:
 8012a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012ac4 <LoopFillZerobss+0x14>
 8012a90:	2100      	movs	r1, #0
 8012a92:	e003      	b.n	8012a9c <LoopCopyDataInit>

08012a94 <CopyDataInit>:
 8012a94:	4b0c      	ldr	r3, [pc, #48]	; (8012ac8 <LoopFillZerobss+0x18>)
 8012a96:	585b      	ldr	r3, [r3, r1]
 8012a98:	5043      	str	r3, [r0, r1]
 8012a9a:	3104      	adds	r1, #4

08012a9c <LoopCopyDataInit>:
 8012a9c:	480b      	ldr	r0, [pc, #44]	; (8012acc <LoopFillZerobss+0x1c>)
 8012a9e:	4b0c      	ldr	r3, [pc, #48]	; (8012ad0 <LoopFillZerobss+0x20>)
 8012aa0:	1842      	adds	r2, r0, r1
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	d3f6      	bcc.n	8012a94 <CopyDataInit>
 8012aa6:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <LoopFillZerobss+0x24>)
 8012aa8:	e002      	b.n	8012ab0 <LoopFillZerobss>

08012aaa <FillZerobss>:
 8012aaa:	2300      	movs	r3, #0
 8012aac:	f842 3b04 	str.w	r3, [r2], #4

08012ab0 <LoopFillZerobss>:
 8012ab0:	4b09      	ldr	r3, [pc, #36]	; (8012ad8 <LoopFillZerobss+0x28>)
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d3f9      	bcc.n	8012aaa <FillZerobss>
 8012ab6:	f7ff ffd3 	bl	8012a60 <SystemInit>
 8012aba:	f012 f88f 	bl	8024bdc <__libc_init_array>
 8012abe:	f012 f87b 	bl	8024bb8 <main>
 8012ac2:	4770      	bx	lr
 8012ac4:	20020000 	.word	0x20020000
 8012ac8:	08037be4 	.word	0x08037be4
 8012acc:	20000000 	.word	0x20000000
 8012ad0:	200002b4 	.word	0x200002b4
 8012ad4:	200002c0 	.word	0x200002c0
 8012ad8:	2000b3b4 	.word	0x2000b3b4

08012adc <DMA1_Stream0_IRQHandler>:
 8012adc:	e7fe      	b.n	8012adc <DMA1_Stream0_IRQHandler>

08012ade <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8012ade:	b480      	push	{r7}
 8012ae0:	b087      	sub	sp, #28
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	60f8      	str	r0, [r7, #12]
 8012ae6:	60b9      	str	r1, [r7, #8]
 8012ae8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8012aea:	2301      	movs	r3, #1
 8012aec:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2200      	movs	r2, #0
 8012af2:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2200      	movs	r2, #0
 8012af8:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	68ba      	ldr	r2, [r7, #8]
 8012b04:	60da      	str	r2, [r3, #12]

  return ret;
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	371c      	adds	r7, #28
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b12:	4770      	bx	lr

08012b14 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b087      	sub	sp, #28
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8012b20:	2301      	movs	r3, #1
 8012b22:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8012b24:	2300      	movs	r3, #0
 8012b26:	613b      	str	r3, [r7, #16]
 8012b28:	e026      	b.n	8012b78 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	68db      	ldr	r3, [r3, #12]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d009      	beq.n	8012b46 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	68da      	ldr	r2, [r3, #12]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	441a      	add	r2, r3
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	68b9      	ldr	r1, [r7, #8]
 8012b40:	440b      	add	r3, r1
 8012b42:	7812      	ldrb	r2, [r2, #0]
 8012b44:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	685a      	ldr	r2, [r3, #4]
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d00c      	beq.n	8012b6c <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	3301      	adds	r3, #1
 8012b58:	68fa      	ldr	r2, [r7, #12]
 8012b5a:	6892      	ldr	r2, [r2, #8]
 8012b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b60:	fb01 f202 	mul.w	r2, r1, r2
 8012b64:	1a9a      	subs	r2, r3, r2
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	605a      	str	r2, [r3, #4]
 8012b6a:	e002      	b.n	8012b72 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8012b70:	e006      	b.n	8012b80 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	3301      	adds	r3, #1
 8012b76:	613b      	str	r3, [r7, #16]
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d8d4      	bhi.n	8012b2a <qbufferRead+0x16>
    }
  }

  return ret;
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	371c      	adds	r7, #28
 8012b86:	46bd      	mov	sp, r7
 8012b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8c:	4770      	bx	lr

08012b8e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8012b8e:	b480      	push	{r7}
 8012b90:	b085      	sub	sp, #20
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681a      	ldr	r2, [r3, #0]
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	1ad3      	subs	r3, r2, r3
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	6892      	ldr	r2, [r2, #8]
 8012ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ba8:	fb01 f202 	mul.w	r2, r1, r2
 8012bac:	1a9b      	subs	r3, r3, r2
 8012bae:	60fb      	str	r3, [r7, #12]

  return ret;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3714      	adds	r7, #20
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbc:	4770      	bx	lr
	...

08012bc0 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8012bc0:	b480      	push	{r7}
 8012bc2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8012bc4:	4b14      	ldr	r3, [pc, #80]	; (8012c18 <DWT_Delay_Init+0x58>)
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	4a13      	ldr	r2, [pc, #76]	; (8012c18 <DWT_Delay_Init+0x58>)
 8012bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012bce:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8012bd0:	4b11      	ldr	r3, [pc, #68]	; (8012c18 <DWT_Delay_Init+0x58>)
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	4a10      	ldr	r2, [pc, #64]	; (8012c18 <DWT_Delay_Init+0x58>)
 8012bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012bda:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8012bdc:	4b0f      	ldr	r3, [pc, #60]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	4a0e      	ldr	r2, [pc, #56]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012be2:	f023 0301 	bic.w	r3, r3, #1
 8012be6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8012be8:	4b0c      	ldr	r3, [pc, #48]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	4a0b      	ldr	r2, [pc, #44]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012bee:	f043 0301 	orr.w	r3, r3, #1
 8012bf2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8012bf4:	4b09      	ldr	r3, [pc, #36]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8012bfa:	bf00      	nop
     __ASM volatile ("NOP");
 8012bfc:	bf00      	nop
     __ASM volatile ("NOP");
 8012bfe:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8012c00:	4b06      	ldr	r3, [pc, #24]	; (8012c1c <DWT_Delay_Init+0x5c>)
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d001      	beq.n	8012c0c <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8012c08:	2300      	movs	r3, #0
 8012c0a:	e000      	b.n	8012c0e <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8012c0c:	2301      	movs	r3, #1
  }
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr
 8012c18:	e000edf0 	.word	0xe000edf0
 8012c1c:	e0001000 	.word	0xe0001000

08012c20 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b08a      	sub	sp, #40	; 0x28
 8012c24:	af00      	add	r7, sp, #0
  bool ret = true;
 8012c26:	2301      	movs	r3, #1
 8012c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c2c:	f107 030c 	add.w	r3, r7, #12
 8012c30:	2200      	movs	r2, #0
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	605a      	str	r2, [r3, #4]
 8012c36:	609a      	str	r2, [r3, #8]
 8012c38:	60da      	str	r2, [r3, #12]
 8012c3a:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	60bb      	str	r3, [r7, #8]
 8012c40:	4b23      	ldr	r3, [pc, #140]	; (8012cd0 <buttonInit+0xb0>)
 8012c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c44:	4a22      	ldr	r2, [pc, #136]	; (8012cd0 <buttonInit+0xb0>)
 8012c46:	f043 0301 	orr.w	r3, r3, #1
 8012c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8012c4c:	4b20      	ldr	r3, [pc, #128]	; (8012cd0 <buttonInit+0xb0>)
 8012c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c50:	f003 0301 	and.w	r3, r3, #1
 8012c54:	60bb      	str	r3, [r7, #8]
 8012c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012c58:	2300      	movs	r3, #0
 8012c5a:	607b      	str	r3, [r7, #4]
 8012c5c:	4b1c      	ldr	r3, [pc, #112]	; (8012cd0 <buttonInit+0xb0>)
 8012c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c60:	4a1b      	ldr	r2, [pc, #108]	; (8012cd0 <buttonInit+0xb0>)
 8012c62:	f043 0302 	orr.w	r3, r3, #2
 8012c66:	6313      	str	r3, [r2, #48]	; 0x30
 8012c68:	4b19      	ldr	r3, [pc, #100]	; (8012cd0 <buttonInit+0xb0>)
 8012c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c6c:	f003 0302 	and.w	r3, r3, #2
 8012c70:	607b      	str	r3, [r7, #4]
 8012c72:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012c74:	2300      	movs	r3, #0
 8012c76:	613b      	str	r3, [r7, #16]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c7c:	e01b      	b.n	8012cb6 <buttonInit+0x96>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8012c7e:	4a15      	ldr	r2, [pc, #84]	; (8012cd4 <buttonInit+0xb4>)
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	011b      	lsls	r3, r3, #4
 8012c84:	4413      	add	r3, r2
 8012c86:	3304      	adds	r3, #4
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 8012c8c:	4a11      	ldr	r2, [pc, #68]	; (8012cd4 <buttonInit+0xb4>)
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	011b      	lsls	r3, r3, #4
 8012c92:	4413      	add	r3, r2
 8012c94:	3308      	adds	r3, #8
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8012c9a:	4a0e      	ldr	r2, [pc, #56]	; (8012cd4 <buttonInit+0xb4>)
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	011b      	lsls	r3, r3, #4
 8012ca0:	4413      	add	r3, r2
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f107 020c 	add.w	r2, r7, #12
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f00c f8e6 	bl	801ee7c <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	2b04      	cmp	r3, #4
 8012cba:	dde0      	ble.n	8012c7e <buttonInit+0x5e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8012cbc:	4906      	ldr	r1, [pc, #24]	; (8012cd8 <buttonInit+0xb8>)
 8012cbe:	4807      	ldr	r0, [pc, #28]	; (8012cdc <buttonInit+0xbc>)
 8012cc0:	f000 fc56 	bl	8013570 <cliAdd>
#endif

  return ret;
 8012cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3728      	adds	r7, #40	; 0x28
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}
 8012cd0:	40023800 	.word	0x40023800
 8012cd4:	20000004 	.word	0x20000004
 8012cd8:	0801308d 	.word	0x0801308d
 8012cdc:	08029348 	.word	0x08029348

08012ce0 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8012cea:	2300      	movs	r3, #0
 8012cec:	73fb      	strb	r3, [r7, #15]


  if (ch >= BUTTON_MAX_CH)
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	2b04      	cmp	r3, #4
 8012cf2:	d901      	bls.n	8012cf8 <buttonGetPressed+0x18>
  {
    return false;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	e01c      	b.n	8012d32 <buttonGetPressed+0x52>
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 8012cf8:	79fb      	ldrb	r3, [r7, #7]
 8012cfa:	4a10      	ldr	r2, [pc, #64]	; (8012d3c <buttonGetPressed+0x5c>)
 8012cfc:	011b      	lsls	r3, r3, #4
 8012cfe:	4413      	add	r3, r2
 8012d00:	681a      	ldr	r2, [r3, #0]
 8012d02:	79fb      	ldrb	r3, [r7, #7]
 8012d04:	490d      	ldr	r1, [pc, #52]	; (8012d3c <buttonGetPressed+0x5c>)
 8012d06:	011b      	lsls	r3, r3, #4
 8012d08:	440b      	add	r3, r1
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4619      	mov	r1, r3
 8012d12:	4610      	mov	r0, r2
 8012d14:	f00c fb1a 	bl	801f34c <HAL_GPIO_ReadPin>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	79fb      	ldrb	r3, [r7, #7]
 8012d1e:	4a07      	ldr	r2, [pc, #28]	; (8012d3c <buttonGetPressed+0x5c>)
 8012d20:	011b      	lsls	r3, r3, #4
 8012d22:	4413      	add	r3, r2
 8012d24:	330c      	adds	r3, #12
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	4299      	cmp	r1, r3
 8012d2a:	d101      	bne.n	8012d30 <buttonGetPressed+0x50>
  {
    ret = true;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	20000004 	.word	0x20000004

08012d40 <buttonObjCreate>:
  BUTTON_OBJ_REPEATED_START,
  BUTTON_OBJ_REPEATED,
};

void buttonObjCreate(button_obj_t *p_obj, uint8_t ch, uint32_t pressed_time, uint32_t repeat_start_time, uint32_t repeat_pressed_time)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	60f8      	str	r0, [r7, #12]
 8012d48:	607a      	str	r2, [r7, #4]
 8012d4a:	603b      	str	r3, [r7, #0]
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	72fb      	strb	r3, [r7, #11]
  p_obj->ch = ch;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	7afa      	ldrb	r2, [r7, #11]
 8012d54:	701a      	strb	r2, [r3, #0]
  p_obj->state = 0;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	705a      	strb	r2, [r3, #1]
  p_obj->pre_time = millis();
 8012d5c:	f7ff fc69 	bl	8012632 <millis>
 8012d60:	4602      	mov	r2, r0
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	611a      	str	r2, [r3, #16]
  p_obj->pressed_time = pressed_time;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	605a      	str	r2, [r3, #4]
  p_obj->repeat_start_time = repeat_start_time;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	683a      	ldr	r2, [r7, #0]
 8012d70:	609a      	str	r2, [r3, #8]
  p_obj->repeat_pressed_time = repeat_pressed_time;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	69ba      	ldr	r2, [r7, #24]
 8012d76:	60da      	str	r2, [r3, #12]
  p_obj->event_flag = 0;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	751a      	strb	r2, [r3, #20]
  p_obj->state_flag = 0;
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2200      	movs	r2, #0
 8012d82:	755a      	strb	r2, [r3, #21]
  p_obj->click_count = 0;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2200      	movs	r2, #0
 8012d88:	759a      	strb	r2, [r3, #22]
}
 8012d8a:	bf00      	nop
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <buttonObjUpdateEx>:

bool buttonObjUpdateEx(button_obj_t *p_obj, bool clear_event)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8012da0:	2300      	movs	r3, #0
 8012da2:	73fb      	strb	r3, [r7, #15]


  if (clear_event == true)
 8012da4:	78fb      	ldrb	r3, [r7, #3]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d002      	beq.n	8012db0 <buttonObjUpdateEx+0x1c>
  {
    buttonObjClearEventAll(p_obj);
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f000 f960 	bl	8013070 <buttonObjClearEventAll>
  }

  switch(p_obj->state)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	785b      	ldrb	r3, [r3, #1]
 8012db4:	2b04      	cmp	r3, #4
 8012db6:	f200 8115 	bhi.w	8012fe4 <buttonObjUpdateEx+0x250>
 8012dba:	a201      	add	r2, pc, #4	; (adr r2, 8012dc0 <buttonObjUpdateEx+0x2c>)
 8012dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc0:	08012dd5 	.word	0x08012dd5
 8012dc4:	08012df5 	.word	0x08012df5
 8012dc8:	08012e1f 	.word	0x08012e1f
 8012dcc:	08012ed1 	.word	0x08012ed1
 8012dd0:	08012f57 	.word	0x08012f57
  {
    case BUTTON_OBJ_WAIT_FOR_RELEASED:
      if (buttonGetPressed(p_obj->ch) == false)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7ff ff81 	bl	8012ce0 <buttonGetPressed>
 8012dde:	4603      	mov	r3, r0
 8012de0:	f083 0301 	eor.w	r3, r3, #1
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	f000 80f3 	beq.w	8012fd2 <buttonObjUpdateEx+0x23e>
      {
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2201      	movs	r2, #1
 8012df0:	705a      	strb	r2, [r3, #1]
      }
      break;
 8012df2:	e0ee      	b.n	8012fd2 <buttonObjUpdateEx+0x23e>

    case BUTTON_OBJ_WAIT_FOR_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7ff ff71 	bl	8012ce0 <buttonGetPressed>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	f000 80e8 	beq.w	8012fd6 <buttonObjUpdateEx+0x242>
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2202      	movs	r2, #2
 8012e0a:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 8012e0c:	f7ff fc11 	bl	8012632 <millis>
 8012e10:	4602      	mov	r2, r0
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	611a      	str	r2, [r3, #16]
        p_obj->click_count = 0;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2200      	movs	r2, #0
 8012e1a:	759a      	strb	r2, [r3, #22]
      }
      break;
 8012e1c:	e0db      	b.n	8012fd6 <buttonObjUpdateEx+0x242>

    case BUTTON_OBJ_PRESSED:
      if (buttonGetPressed(p_obj->ch) == true)
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7ff ff5c 	bl	8012ce0 <buttonGetPressed>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d029      	beq.n	8012e82 <buttonObjUpdateEx+0xee>
      {
        if (millis()-p_obj->pre_time >= p_obj->pressed_time)
 8012e2e:	f7ff fc00 	bl	8012632 <millis>
 8012e32:	4602      	mov	r2, r0
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	1ad2      	subs	r2, r2, r3
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	f0c0 80cb 	bcc.w	8012fda <buttonObjUpdateEx+0x246>
        {
          ret = true;
 8012e44:	2301      	movs	r3, #1
 8012e46:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED_START;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2203      	movs	r2, #3
 8012e4c:	705a      	strb	r2, [r3, #1]
          p_obj->pre_time = millis();
 8012e4e:	f7ff fbf0 	bl	8012632 <millis>
 8012e52:	4602      	mov	r2, r0
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	611a      	str	r2, [r3, #16]
          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	7d1b      	ldrb	r3, [r3, #20]
 8012e5c:	f043 0304 	orr.w	r3, r3, #4
 8012e60:	b2da      	uxtb	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_PRESSED;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	7d5b      	ldrb	r3, [r3, #21]
 8012e6a:	f043 0301 	orr.w	r3, r3, #1
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	7d9b      	ldrb	r3, [r3, #22]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	759a      	strb	r2, [r3, #22]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
        }
      }
      break;
 8012e80:	e0ab      	b.n	8012fda <buttonObjUpdateEx+0x246>
        p_obj->state = BUTTON_OBJ_WAIT_FOR_PRESSED;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2201      	movs	r2, #1
 8012e86:	705a      	strb	r2, [r3, #1]
        if (p_obj->state_flag & BUTTON_STATE_PRESSED)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	7d5b      	ldrb	r3, [r3, #21]
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	f000 80a2 	beq.w	8012fda <buttonObjUpdateEx+0x246>
          p_obj->event_flag |= BUTTON_EVT_RELEASED;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	7d1b      	ldrb	r3, [r3, #20]
 8012e9a:	f043 0302 	orr.w	r3, r3, #2
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	751a      	strb	r2, [r3, #20]
          p_obj->state_flag |= BUTTON_STATE_RELEASED;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	7d5b      	ldrb	r3, [r3, #21]
 8012ea8:	f043 0302 	orr.w	r3, r3, #2
 8012eac:	b2da      	uxtb	r2, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_PRESSED;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	7d5b      	ldrb	r3, [r3, #21]
 8012eb6:	f023 0301 	bic.w	r3, r3, #1
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	755a      	strb	r2, [r3, #21]
          p_obj->state_flag &= ~BUTTON_STATE_REPEATED;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	7d5b      	ldrb	r3, [r3, #21]
 8012ec4:	f023 0304 	bic.w	r3, r3, #4
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	755a      	strb	r2, [r3, #21]
      break;
 8012ece:	e084      	b.n	8012fda <buttonObjUpdateEx+0x246>

    case BUTTON_OBJ_REPEATED_START:
      if (buttonGetPressed(p_obj->ch) == true)
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7ff ff03 	bl	8012ce0 <buttonGetPressed>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d031      	beq.n	8012f44 <buttonObjUpdateEx+0x1b0>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_start_time)
 8012ee0:	f7ff fba7 	bl	8012632 <millis>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	1ad2      	subs	r2, r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d374      	bcc.n	8012fde <buttonObjUpdateEx+0x24a>
        {
          ret = true;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 8012ef8:	f7ff fb9b 	bl	8012632 <millis>
 8012efc:	4602      	mov	r2, r0
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	611a      	str	r2, [r3, #16]

          ret = true;
 8012f02:	2301      	movs	r3, #1
 8012f04:	73fb      	strb	r3, [r7, #15]
          p_obj->state = BUTTON_OBJ_REPEATED;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2204      	movs	r2, #4
 8012f0a:	705a      	strb	r2, [r3, #1]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	7d1b      	ldrb	r3, [r3, #20]
 8012f10:	f043 0304 	orr.w	r3, r3, #4
 8012f14:	b2da      	uxtb	r2, r3
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	7d1b      	ldrb	r3, [r3, #20]
 8012f1e:	f043 0308 	orr.w	r3, r3, #8
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	7d5b      	ldrb	r3, [r3, #21]
 8012f2c:	f043 0304 	orr.w	r3, r3, #4
 8012f30:	b2da      	uxtb	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	7d9b      	ldrb	r3, [r3, #22]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	b2da      	uxtb	r2, r3
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	759a      	strb	r2, [r3, #22]
      else
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();
      }
      break;
 8012f42:	e04c      	b.n	8012fde <buttonObjUpdateEx+0x24a>
        p_obj->state = BUTTON_OBJ_PRESSED;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2202      	movs	r2, #2
 8012f48:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 8012f4a:	f7ff fb72 	bl	8012632 <millis>
 8012f4e:	4602      	mov	r2, r0
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	611a      	str	r2, [r3, #16]
      break;
 8012f54:	e043      	b.n	8012fde <buttonObjUpdateEx+0x24a>

    case BUTTON_OBJ_REPEATED:
      if (buttonGetPressed(p_obj->ch) == true)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7ff fec0 	bl	8012ce0 <buttonGetPressed>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d02c      	beq.n	8012fc0 <buttonObjUpdateEx+0x22c>
      {
        if (millis()-p_obj->pre_time >= p_obj->repeat_pressed_time)
 8012f66:	f7ff fb64 	bl	8012632 <millis>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	691b      	ldr	r3, [r3, #16]
 8012f70:	1ad2      	subs	r2, r2, r3
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d333      	bcc.n	8012fe2 <buttonObjUpdateEx+0x24e>
        {
          ret = true;
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	73fb      	strb	r3, [r7, #15]
          p_obj->pre_time = millis();
 8012f7e:	f7ff fb58 	bl	8012632 <millis>
 8012f82:	4602      	mov	r2, r0
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	611a      	str	r2, [r3, #16]

          p_obj->event_flag |= BUTTON_EVT_CLICKED;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	7d1b      	ldrb	r3, [r3, #20]
 8012f8c:	f043 0304 	orr.w	r3, r3, #4
 8012f90:	b2da      	uxtb	r2, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	751a      	strb	r2, [r3, #20]
          p_obj->event_flag |= BUTTON_EVT_REPEATED;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	7d1b      	ldrb	r3, [r3, #20]
 8012f9a:	f043 0308 	orr.w	r3, r3, #8
 8012f9e:	b2da      	uxtb	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	751a      	strb	r2, [r3, #20]

          p_obj->state_flag |= BUTTON_STATE_REPEATED;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	7d5b      	ldrb	r3, [r3, #21]
 8012fa8:	f043 0304 	orr.w	r3, r3, #4
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	755a      	strb	r2, [r3, #21]
          p_obj->click_count++;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	7d9b      	ldrb	r3, [r3, #22]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	b2da      	uxtb	r2, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	759a      	strb	r2, [r3, #22]
      {
        p_obj->state = BUTTON_OBJ_PRESSED;
        p_obj->pre_time = millis();

      }
      break;
 8012fbe:	e010      	b.n	8012fe2 <buttonObjUpdateEx+0x24e>
        p_obj->state = BUTTON_OBJ_PRESSED;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2202      	movs	r2, #2
 8012fc4:	705a      	strb	r2, [r3, #1]
        p_obj->pre_time = millis();
 8012fc6:	f7ff fb34 	bl	8012632 <millis>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	611a      	str	r2, [r3, #16]
      break;
 8012fd0:	e007      	b.n	8012fe2 <buttonObjUpdateEx+0x24e>
      break;
 8012fd2:	bf00      	nop
 8012fd4:	e006      	b.n	8012fe4 <buttonObjUpdateEx+0x250>
      break;
 8012fd6:	bf00      	nop
 8012fd8:	e004      	b.n	8012fe4 <buttonObjUpdateEx+0x250>
      break;
 8012fda:	bf00      	nop
 8012fdc:	e002      	b.n	8012fe4 <buttonObjUpdateEx+0x250>
      break;
 8012fde:	bf00      	nop
 8012fe0:	e000      	b.n	8012fe4 <buttonObjUpdateEx+0x250>
      break;
 8012fe2:	bf00      	nop
  }

  return ret;
 8012fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop

08012ff0 <buttonObjInit>:

bool buttonObjInit(button_obj_t *p_obj)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  p_obj->state = 0;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	705a      	strb	r2, [r3, #1]
  p_obj->pre_time = millis();
 8012ffe:	f7ff fb18 	bl	8012632 <millis>
 8013002:	4602      	mov	r2, r0
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	611a      	str	r2, [r3, #16]
  p_obj->event_flag = 0;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	751a      	strb	r2, [r3, #20]
  p_obj->state_flag = 0;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2200      	movs	r2, #0
 8013012:	755a      	strb	r2, [r3, #21]
  p_obj->click_count = 0;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2200      	movs	r2, #0
 8013018:	759a      	strb	r2, [r3, #22]
  return true;
 801301a:	2301      	movs	r3, #1
}
 801301c:	4618      	mov	r0, r3
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <buttonObjUpdate>:

bool buttonObjUpdate(button_obj_t *p_obj)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  return buttonObjUpdateEx(p_obj, false);
 801302c:	2100      	movs	r1, #0
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff feb0 	bl	8012d94 <buttonObjUpdateEx>
 8013034:	4603      	mov	r3, r0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <buttonObjClearAndUpdate>:

bool buttonObjClearAndUpdate(button_obj_t *p_obj)
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b082      	sub	sp, #8
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  return buttonObjUpdateEx(p_obj, true);
 8013046:	2101      	movs	r1, #1
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7ff fea3 	bl	8012d94 <buttonObjUpdateEx>
 801304e:	4603      	mov	r3, r0
}
 8013050:	4618      	mov	r0, r3
 8013052:	3708      	adds	r7, #8
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}

08013058 <buttonObjGetEvent>:

uint8_t buttonObjGetEvent(button_obj_t *p_obj)
{
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
  return p_obj->event_flag;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7d1b      	ldrb	r3, [r3, #20]
}
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr

08013070 <buttonObjClearEventAll>:

void buttonObjClearEventAll(button_obj_t *p_obj)
{
 8013070:	b480      	push	{r7}
 8013072:	b083      	sub	sp, #12
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
  p_obj->event_flag = 0;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	751a      	strb	r2, [r3, #20]
}
 801307e:	bf00      	nop
 8013080:	370c      	adds	r7, #12
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr
	...

0801308c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b0a8      	sub	sp, #160	; 0xa0
 8013090:	af02      	add	r7, sp, #8
 8013092:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013094:	2300      	movs	r3, #0
 8013096:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97


  if (args->argc == 1 && args->isStr(0, "show"))
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d12e      	bne.n	8013100 <cliButton+0x74>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	695b      	ldr	r3, [r3, #20]
 80130a6:	496e      	ldr	r1, [pc, #440]	; (8013260 <cliButton+0x1d4>)
 80130a8:	2000      	movs	r0, #0
 80130aa:	4798      	blx	r3
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d026      	beq.n	8013100 <cliButton+0x74>
  {
    while(cliKeepLoop())
 80130b2:	e01d      	b.n	80130f0 <cliButton+0x64>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80130b4:	2300      	movs	r3, #0
 80130b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80130ba:	e00f      	b.n	80130dc <cliButton+0x50>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80130bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130c0:	b2db      	uxtb	r3, r3
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7ff fe0c 	bl	8012ce0 <buttonGetPressed>
 80130c8:	4603      	mov	r3, r0
 80130ca:	4619      	mov	r1, r3
 80130cc:	4865      	ldr	r0, [pc, #404]	; (8013264 <cliButton+0x1d8>)
 80130ce:	f000 f93f 	bl	8013350 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80130d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130d6:	3301      	adds	r3, #1
 80130d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80130dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80130e0:	2b04      	cmp	r3, #4
 80130e2:	ddeb      	ble.n	80130bc <cliButton+0x30>
      }
      cliPrintf("\n");
 80130e4:	4860      	ldr	r0, [pc, #384]	; (8013268 <cliButton+0x1dc>)
 80130e6:	f000 f933 	bl	8013350 <cliPrintf>

      delay(100);
 80130ea:	2064      	movs	r0, #100	; 0x64
 80130ec:	f7ff fa96 	bl	801261c <delay>
    while(cliKeepLoop())
 80130f0:	f000 fa28 	bl	8013544 <cliKeepLoop>
 80130f4:	4603      	mov	r3, r0
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d1dc      	bne.n	80130b4 <cliButton+0x28>
    }

    ret = true;
 80130fa:	2301      	movs	r3, #1
 80130fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

#if HW_BUTTON_OBJ_USE == 1
  if (args->argc == 1 && args->isStr(0, "event"))
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	2b01      	cmp	r3, #1
 8013106:	f040 8099 	bne.w	801323c <cliButton+0x1b0>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	695b      	ldr	r3, [r3, #20]
 801310e:	4957      	ldr	r1, [pc, #348]	; (801326c <cliButton+0x1e0>)
 8013110:	2000      	movs	r0, #0
 8013112:	4798      	blx	r3
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	f000 8090 	beq.w	801323c <cliButton+0x1b0>
  {
    button_obj_t button[BUTTON_MAX_CH];
    uint8_t button_event;

    for (int i=0; i<BUTTON_MAX_CH; i++)
 801311c:	2300      	movs	r3, #0
 801311e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013122:	e017      	b.n	8013154 <cliButton+0xc8>
    {
      buttonObjCreate(&button[i], i, 50, 1000, 100);
 8013124:	f107 010c 	add.w	r1, r7, #12
 8013128:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801312c:	4613      	mov	r3, r2
 801312e:	005b      	lsls	r3, r3, #1
 8013130:	4413      	add	r3, r2
 8013132:	00db      	lsls	r3, r3, #3
 8013134:	18c8      	adds	r0, r1, r3
 8013136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801313a:	b2d9      	uxtb	r1, r3
 801313c:	2364      	movs	r3, #100	; 0x64
 801313e:	9300      	str	r3, [sp, #0]
 8013140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013144:	2232      	movs	r2, #50	; 0x32
 8013146:	f7ff fdfb 	bl	8012d40 <buttonObjCreate>
    for (int i=0; i<BUTTON_MAX_CH; i++)
 801314a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801314e:	3301      	adds	r3, #1
 8013150:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013154:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013158:	2b04      	cmp	r3, #4
 801315a:	dde3      	ble.n	8013124 <cliButton+0x98>
    }

    while(cliKeepLoop())
 801315c:	e066      	b.n	801322c <cliButton+0x1a0>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 801315e:	2300      	movs	r3, #0
 8013160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013164:	e05b      	b.n	801321e <cliButton+0x192>
      {
        buttonObjUpdate(&button[i]);
 8013166:	f107 010c 	add.w	r1, r7, #12
 801316a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	4618      	mov	r0, r3
 801317a:	f7ff ff53 	bl	8013024 <buttonObjUpdate>

        button_event = buttonObjGetEvent(&button[i]);
 801317e:	f107 010c 	add.w	r1, r7, #12
 8013182:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013186:	4613      	mov	r3, r2
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
 801318c:	00db      	lsls	r3, r3, #3
 801318e:	440b      	add	r3, r1
 8013190:	4618      	mov	r0, r3
 8013192:	f7ff ff61 	bl	8013058 <buttonObjGetEvent>
 8013196:	4603      	mov	r3, r0
 8013198:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (button_event > 0)
 801319c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d037      	beq.n	8013214 <cliButton+0x188>
        {
          if (button_event & BUTTON_EVT_PRESSED)
 80131a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80131a8:	f003 0301 	and.w	r3, r3, #1
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d004      	beq.n	80131ba <cliButton+0x12e>
            cliPrintf("button %d pressed\n", i);
 80131b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80131b4:	482e      	ldr	r0, [pc, #184]	; (8013270 <cliButton+0x1e4>)
 80131b6:	f000 f8cb 	bl	8013350 <cliPrintf>
          if (button_event & BUTTON_EVT_CLICKED)
 80131ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80131be:	f003 0304 	and.w	r3, r3, #4
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d00f      	beq.n	80131e6 <cliButton+0x15a>
            cliPrintf("button %d clicked cnt : %d\n", i, button[i].click_count);
 80131c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80131ca:	4613      	mov	r3, r2
 80131cc:	005b      	lsls	r3, r3, #1
 80131ce:	4413      	add	r3, r2
 80131d0:	00db      	lsls	r3, r3, #3
 80131d2:	3398      	adds	r3, #152	; 0x98
 80131d4:	443b      	add	r3, r7
 80131d6:	3b76      	subs	r3, #118	; 0x76
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	461a      	mov	r2, r3
 80131dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80131e0:	4824      	ldr	r0, [pc, #144]	; (8013274 <cliButton+0x1e8>)
 80131e2:	f000 f8b5 	bl	8013350 <cliPrintf>
          if (button_event & BUTTON_EVT_RELEASED)
 80131e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80131ea:	f003 0302 	and.w	r3, r3, #2
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d004      	beq.n	80131fc <cliButton+0x170>
            cliPrintf("button %d released\n", i);
 80131f2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80131f6:	4820      	ldr	r0, [pc, #128]	; (8013278 <cliButton+0x1ec>)
 80131f8:	f000 f8aa 	bl	8013350 <cliPrintf>

          buttonObjClearEventAll(&button[i]);
 80131fc:	f107 010c 	add.w	r1, r7, #12
 8013200:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013204:	4613      	mov	r3, r2
 8013206:	005b      	lsls	r3, r3, #1
 8013208:	4413      	add	r3, r2
 801320a:	00db      	lsls	r3, r3, #3
 801320c:	440b      	add	r3, r1
 801320e:	4618      	mov	r0, r3
 8013210:	f7ff ff2e 	bl	8013070 <buttonObjClearEventAll>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8013214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013218:	3301      	adds	r3, #1
 801321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801321e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013222:	2b04      	cmp	r3, #4
 8013224:	dd9f      	ble.n	8013166 <cliButton+0xda>
        }
      }

      delay(5);
 8013226:	2005      	movs	r0, #5
 8013228:	f7ff f9f8 	bl	801261c <delay>
    while(cliKeepLoop())
 801322c:	f000 f98a 	bl	8013544 <cliKeepLoop>
 8013230:	4603      	mov	r3, r0
 8013232:	2b00      	cmp	r3, #0
 8013234:	d193      	bne.n	801315e <cliButton+0xd2>
    }

    ret = true;
 8013236:	2301      	movs	r3, #1
 8013238:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }
  #endif


  if (ret != true)
 801323c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8013240:	f083 0301 	eor.w	r3, r3, #1
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d005      	beq.n	8013256 <cliButton+0x1ca>
  {
    cliPrintf("button show\n");
 801324a:	480c      	ldr	r0, [pc, #48]	; (801327c <cliButton+0x1f0>)
 801324c:	f000 f880 	bl	8013350 <cliPrintf>
	#if HW_BUTTON_OBJ_USE == 1
	cliPrintf("button event\n");
 8013250:	480b      	ldr	r0, [pc, #44]	; (8013280 <cliButton+0x1f4>)
 8013252:	f000 f87d 	bl	8013350 <cliPrintf>
	#endif
  }
}
 8013256:	bf00      	nop
 8013258:	3798      	adds	r7, #152	; 0x98
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	08029350 	.word	0x08029350
 8013264:	08029358 	.word	0x08029358
 8013268:	0802935c 	.word	0x0802935c
 801326c:	08029360 	.word	0x08029360
 8013270:	08029368 	.word	0x08029368
 8013274:	0802937c 	.word	0x0802937c
 8013278:	08029398 	.word	0x08029398
 801327c:	080293ac 	.word	0x080293ac
 8013280:	080293bc 	.word	0x080293bc

08013284 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8013288:	4b1b      	ldr	r3, [pc, #108]	; (80132f8 <cliInit+0x74>)
 801328a:	2200      	movs	r2, #0
 801328c:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 801328e:	4b1a      	ldr	r3, [pc, #104]	; (80132f8 <cliInit+0x74>)
 8013290:	2200      	movs	r2, #0
 8013292:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8013294:	4b18      	ldr	r3, [pc, #96]	; (80132f8 <cliInit+0x74>)
 8013296:	2200      	movs	r2, #0
 8013298:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 801329a:	4b17      	ldr	r3, [pc, #92]	; (80132f8 <cliInit+0x74>)
 801329c:	2200      	movs	r2, #0
 801329e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80132a2:	4b15      	ldr	r3, [pc, #84]	; (80132f8 <cliInit+0x74>)
 80132a4:	2200      	movs	r2, #0
 80132a6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80132aa:	4b13      	ldr	r3, [pc, #76]	; (80132f8 <cliInit+0x74>)
 80132ac:	2200      	movs	r2, #0
 80132ae:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80132b2:	4b11      	ldr	r3, [pc, #68]	; (80132f8 <cliInit+0x74>)
 80132b4:	2200      	movs	r2, #0
 80132b6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80132ba:	4b0f      	ldr	r3, [pc, #60]	; (80132f8 <cliInit+0x74>)
 80132bc:	4a0f      	ldr	r2, [pc, #60]	; (80132fc <cliInit+0x78>)
 80132be:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80132c2:	4b0d      	ldr	r3, [pc, #52]	; (80132f8 <cliInit+0x74>)
 80132c4:	4a0e      	ldr	r2, [pc, #56]	; (8013300 <cliInit+0x7c>)
 80132c6:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80132ca:	4b0b      	ldr	r3, [pc, #44]	; (80132f8 <cliInit+0x74>)
 80132cc:	4a0d      	ldr	r2, [pc, #52]	; (8013304 <cliInit+0x80>)
 80132ce:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80132d2:	4b09      	ldr	r3, [pc, #36]	; (80132f8 <cliInit+0x74>)
 80132d4:	4a0c      	ldr	r2, [pc, #48]	; (8013308 <cliInit+0x84>)
 80132d6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80132da:	4807      	ldr	r0, [pc, #28]	; (80132f8 <cliInit+0x74>)
 80132dc:	f000 f81e 	bl	801331c <cliLineClean>


  cliAdd("help", cliShowList);
 80132e0:	490a      	ldr	r1, [pc, #40]	; (801330c <cliInit+0x88>)
 80132e2:	480b      	ldr	r0, [pc, #44]	; (8013310 <cliInit+0x8c>)
 80132e4:	f000 f944 	bl	8013570 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80132e8:	490a      	ldr	r1, [pc, #40]	; (8013314 <cliInit+0x90>)
 80132ea:	480b      	ldr	r0, [pc, #44]	; (8013318 <cliInit+0x94>)
 80132ec:	f000 f940 	bl	8013570 <cliAdd>

  return true;
 80132f0:	2301      	movs	r3, #1
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	200003a4 	.word	0x200003a4
 80132fc:	08013401 	.word	0x08013401
 8013300:	08013451 	.word	0x08013451
 8013304:	080134a9 	.word	0x080134a9
 8013308:	080134f1 	.word	0x080134f1
 801330c:	08013605 	.word	0x08013605
 8013310:	080293cc 	.word	0x080293cc
 8013314:	08013675 	.word	0x08013675
 8013318:	080293d4 	.word	0x080293d4

0801331c <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2200      	movs	r2, #0
 8013330:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	223f      	movs	r2, #63	; 0x3f
 8013338:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2200      	movs	r2, #0
 8013340:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8013344:	bf00      	nop
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334e:	4770      	bx	lr

08013350 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8013350:	b40f      	push	{r0, r1, r2, r3}
 8013352:	b580      	push	{r7, lr}
 8013354:	b084      	sub	sp, #16
 8013356:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8013358:	f107 031c 	add.w	r3, r7, #28
 801335c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 801335e:	4b0d      	ldr	r3, [pc, #52]	; (8013394 <cliPrintf+0x44>)
 8013360:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	f103 0011 	add.w	r0, r3, #17
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	69ba      	ldr	r2, [r7, #24]
 801336c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013370:	f013 f908 	bl	8026584 <vsniprintf>
 8013374:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	7818      	ldrb	r0, [r3, #0]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	3311      	adds	r3, #17
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	4619      	mov	r1, r3
 8013382:	f004 feab 	bl	80180dc <uartWrite>
}
 8013386:	bf00      	nop
 8013388:	3710      	adds	r7, #16
 801338a:	46bd      	mov	sp, r7
 801338c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013390:	b004      	add	sp, #16
 8013392:	4770      	bx	lr
 8013394:	200003a4 	.word	0x200003a4

08013398 <cliToUpper>:

void cliToUpper(char *str)
{
 8013398:	b480      	push	{r7}
 801339a:	b085      	sub	sp, #20
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80133a0:	2300      	movs	r3, #0
 80133a2:	81fb      	strh	r3, [r7, #14]
 80133a4:	e018      	b.n	80133d8 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80133a6:	89fb      	ldrh	r3, [r7, #14]
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	4413      	add	r3, r2
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80133b0:	7b7b      	ldrb	r3, [r7, #13]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d014      	beq.n	80133e0 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80133b6:	7b7b      	ldrb	r3, [r7, #13]
 80133b8:	2b60      	cmp	r3, #96	; 0x60
 80133ba:	d905      	bls.n	80133c8 <cliToUpper+0x30>
 80133bc:	7b7b      	ldrb	r3, [r7, #13]
 80133be:	2b7a      	cmp	r3, #122	; 0x7a
 80133c0:	d802      	bhi.n	80133c8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80133c2:	7b7b      	ldrb	r3, [r7, #13]
 80133c4:	3b20      	subs	r3, #32
 80133c6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80133c8:	89fb      	ldrh	r3, [r7, #14]
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	4413      	add	r3, r2
 80133ce:	7b7a      	ldrb	r2, [r7, #13]
 80133d0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80133d2:	89fb      	ldrh	r3, [r7, #14]
 80133d4:	3301      	adds	r3, #1
 80133d6:	81fb      	strh	r3, [r7, #14]
 80133d8:	89fb      	ldrh	r3, [r7, #14]
 80133da:	2b0f      	cmp	r3, #15
 80133dc:	d9e3      	bls.n	80133a6 <cliToUpper+0xe>
 80133de:	e000      	b.n	80133e2 <cliToUpper+0x4a>
      break;
 80133e0:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80133e2:	89fb      	ldrh	r3, [r7, #14]
 80133e4:	2b10      	cmp	r3, #16
 80133e6:	d105      	bne.n	80133f4 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80133e8:	89fb      	ldrh	r3, [r7, #14]
 80133ea:	3b01      	subs	r3, #1
 80133ec:	687a      	ldr	r2, [r7, #4]
 80133ee:	4413      	add	r3, r2
 80133f0:	2200      	movs	r2, #0
 80133f2:	701a      	strb	r2, [r3, #0]
  }
}
 80133f4:	bf00      	nop
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	4603      	mov	r3, r0
 8013408:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 801340a:	2300      	movs	r3, #0
 801340c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 801340e:	4b0f      	ldr	r3, [pc, #60]	; (801344c <cliArgsGetData+0x4c>)
 8013410:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8013412:	79fb      	ldrb	r3, [r7, #7]
 8013414:	b29a      	uxth	r2, r3
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 801341c:	429a      	cmp	r2, r3
 801341e:	d301      	bcc.n	8013424 <cliArgsGetData+0x24>
  {
    return 0;
 8013420:	2300      	movs	r3, #0
 8013422:	e00e      	b.n	8013442 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	4413      	add	r3, r2
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2200      	movs	r2, #0
 8013434:	2100      	movs	r1, #0
 8013436:	4618      	mov	r0, r3
 8013438:	f013 f86e 	bl	8026518 <strtoul>
 801343c:	4603      	mov	r3, r0
 801343e:	60fb      	str	r3, [r7, #12]

  return ret;
 8013440:	68fb      	ldr	r3, [r7, #12]
}
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	200003a4 	.word	0x200003a4

08013450 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b084      	sub	sp, #16
 8013454:	af00      	add	r7, sp, #0
 8013456:	4603      	mov	r3, r0
 8013458:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 801345a:	f04f 0300 	mov.w	r3, #0
 801345e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8013460:	4b10      	ldr	r3, [pc, #64]	; (80134a4 <cliArgsGetFloat+0x54>)
 8013462:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	b29a      	uxth	r2, r3
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 801346e:	429a      	cmp	r2, r3
 8013470:	d302      	bcc.n	8013478 <cliArgsGetFloat+0x28>
  {
    return 0;
 8013472:	f04f 0300 	mov.w	r3, #0
 8013476:	e00d      	b.n	8013494 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 801347e:	79fb      	ldrb	r3, [r7, #7]
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	4413      	add	r3, r2
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2100      	movs	r1, #0
 8013488:	4618      	mov	r0, r3
 801348a:	f012 ff77 	bl	802637c <strtof>
 801348e:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8013492:	68fb      	ldr	r3, [r7, #12]
}
 8013494:	ee07 3a90 	vmov	s15, r3
 8013498:	eeb0 0a67 	vmov.f32	s0, s15
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	200003a4 	.word	0x200003a4

080134a8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	4603      	mov	r3, r0
 80134b0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80134b2:	2300      	movs	r3, #0
 80134b4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80134b6:	4b0d      	ldr	r3, [pc, #52]	; (80134ec <cliArgsGetStr+0x44>)
 80134b8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80134ba:	79fb      	ldrb	r3, [r7, #7]
 80134bc:	b29a      	uxth	r2, r3
 80134be:	68bb      	ldr	r3, [r7, #8]
 80134c0:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d301      	bcc.n	80134cc <cliArgsGetStr+0x24>
  {
    return 0;
 80134c8:	2300      	movs	r3, #0
 80134ca:	e008      	b.n	80134de <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80134d2:	79fb      	ldrb	r3, [r7, #7]
 80134d4:	009b      	lsls	r3, r3, #2
 80134d6:	4413      	add	r3, r2
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	60fb      	str	r3, [r7, #12]

  return ret;
 80134dc:	68fb      	ldr	r3, [r7, #12]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3714      	adds	r7, #20
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr
 80134ea:	bf00      	nop
 80134ec:	200003a4 	.word	0x200003a4

080134f0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b084      	sub	sp, #16
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	4603      	mov	r3, r0
 80134f8:	6039      	str	r1, [r7, #0]
 80134fa:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80134fc:	2300      	movs	r3, #0
 80134fe:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8013500:	4b0f      	ldr	r3, [pc, #60]	; (8013540 <cliArgsIsStr+0x50>)
 8013502:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8013504:	79fb      	ldrb	r3, [r7, #7]
 8013506:	b29a      	uxth	r2, r3
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 801350e:	429a      	cmp	r2, r3
 8013510:	d301      	bcc.n	8013516 <cliArgsIsStr+0x26>
  {
    return 0;
 8013512:	2300      	movs	r3, #0
 8013514:	e010      	b.n	8013538 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 801351c:	79fb      	ldrb	r3, [r7, #7]
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	4413      	add	r3, r2
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4619      	mov	r1, r3
 8013526:	6838      	ldr	r0, [r7, #0]
 8013528:	f7fd f9aa 	bl	8010880 <strcmp>
 801352c:	4603      	mov	r3, r0
 801352e:	2b00      	cmp	r3, #0
 8013530:	d101      	bne.n	8013536 <cliArgsIsStr+0x46>
  {
    ret = true;
 8013532:	2301      	movs	r3, #1
 8013534:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013536:	7bfb      	ldrb	r3, [r7, #15]
}
 8013538:	4618      	mov	r0, r3
 801353a:	3710      	adds	r7, #16
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	200003a4 	.word	0x200003a4

08013544 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 801354a:	4b08      	ldr	r3, [pc, #32]	; (801356c <cliKeepLoop+0x28>)
 801354c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	781b      	ldrb	r3, [r3, #0]
 8013552:	4618      	mov	r0, r3
 8013554:	f004 fd56 	bl	8018004 <uartAvailable>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <cliKeepLoop+0x1e>
  {
    return true;
 801355e:	2301      	movs	r3, #1
 8013560:	e000      	b.n	8013564 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8013562:	2300      	movs	r3, #0
  }
}
 8013564:	4618      	mov	r0, r3
 8013566:	3708      	adds	r7, #8
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}
 801356c:	200003a4 	.word	0x200003a4

08013570 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
 8013578:	6039      	str	r1, [r7, #0]
  bool ret = true;
 801357a:	2301      	movs	r3, #1
 801357c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 801357e:	4b20      	ldr	r3, [pc, #128]	; (8013600 <cliAdd+0x90>)
 8013580:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8013588:	2b0f      	cmp	r3, #15
 801358a:	d901      	bls.n	8013590 <cliAdd+0x20>
  {
    return false;
 801358c:	2300      	movs	r3, #0
 801358e:	e032      	b.n	80135f6 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8013596:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8013598:	89fa      	ldrh	r2, [r7, #14]
 801359a:	4613      	mov	r3, r2
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	4413      	add	r3, r2
 80135a0:	009b      	lsls	r3, r3, #2
 80135a2:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80135a6:	693a      	ldr	r2, [r7, #16]
 80135a8:	4413      	add	r3, r2
 80135aa:	3304      	adds	r3, #4
 80135ac:	6879      	ldr	r1, [r7, #4]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f012 f8b8 	bl	8025724 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80135b4:	89fa      	ldrh	r2, [r7, #14]
 80135b6:	6939      	ldr	r1, [r7, #16]
 80135b8:	4613      	mov	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	009b      	lsls	r3, r3, #2
 80135c0:	440b      	add	r3, r1
 80135c2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80135c6:	683a      	ldr	r2, [r7, #0]
 80135c8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80135ca:	89fa      	ldrh	r2, [r7, #14]
 80135cc:	4613      	mov	r3, r2
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80135d8:	693a      	ldr	r2, [r7, #16]
 80135da:	4413      	add	r3, r2
 80135dc:	3304      	adds	r3, #4
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff feda 	bl	8013398 <cliToUpper>

  p_cli->cmd_count++;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80135ea:	3301      	adds	r3, #1
 80135ec:	b29a      	uxth	r2, r3
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80135f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3718      	adds	r7, #24
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	200003a4 	.word	0x200003a4

08013604 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b084      	sub	sp, #16
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 801360c:	4b15      	ldr	r3, [pc, #84]	; (8013664 <cliShowList+0x60>)
 801360e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8013610:	4815      	ldr	r0, [pc, #84]	; (8013668 <cliShowList+0x64>)
 8013612:	f7ff fe9d 	bl	8013350 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8013616:	4815      	ldr	r0, [pc, #84]	; (801366c <cliShowList+0x68>)
 8013618:	f7ff fe9a 	bl	8013350 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 801361c:	2300      	movs	r3, #0
 801361e:	60fb      	str	r3, [r7, #12]
 8013620:	e012      	b.n	8013648 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	4613      	mov	r3, r2
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4413      	add	r3, r2
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	4413      	add	r3, r2
 8013634:	3304      	adds	r3, #4
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff fe8a 	bl	8013350 <cliPrintf>
    cliPrintf("\r\n");
 801363c:	480a      	ldr	r0, [pc, #40]	; (8013668 <cliShowList+0x64>)
 801363e:	f7ff fe87 	bl	8013350 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	3301      	adds	r3, #1
 8013646:	60fb      	str	r3, [r7, #12]
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 801364e:	461a      	mov	r2, r3
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	4293      	cmp	r3, r2
 8013654:	dbe5      	blt.n	8013622 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8013656:	4806      	ldr	r0, [pc, #24]	; (8013670 <cliShowList+0x6c>)
 8013658:	f7ff fe7a 	bl	8013350 <cliPrintf>
}
 801365c:	bf00      	nop
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	200003a4 	.word	0x200003a4
 8013668:	0802949c 	.word	0x0802949c
 801366c:	080294a0 	.word	0x080294a0
 8013670:	080294c0 	.word	0x080294c0

08013674 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b08c      	sub	sp, #48	; 0x30
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 801367c:	2310      	movs	r3, #16
 801367e:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	881b      	ldrh	r3, [r3, #0]
 8013684:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d103      	bne.n	801369c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8013694:	4840      	ldr	r0, [pc, #256]	; (8013798 <cliMemoryDump+0x124>)
 8013696:	f7ff fe5b 	bl	8013350 <cliPrintf>
 801369a:	e07a      	b.n	8013792 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	2b01      	cmp	r3, #1
 80136a0:	dd09      	ble.n	80136b6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	3304      	adds	r3, #4
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2200      	movs	r2, #0
 80136aa:	2100      	movs	r1, #0
 80136ac:	4618      	mov	r0, r3
 80136ae:	f012 ff33 	bl	8026518 <strtoul>
 80136b2:	4603      	mov	r3, r0
 80136b4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	2200      	movs	r2, #0
 80136bc:	2100      	movs	r1, #0
 80136be:	4618      	mov	r0, r3
 80136c0:	f012 ff2a 	bl	8026518 <strtoul>
 80136c4:	4603      	mov	r3, r0
 80136c6:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80136cc:	4833      	ldr	r0, [pc, #204]	; (801379c <cliMemoryDump+0x128>)
 80136ce:	f7ff fe3f 	bl	8013350 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80136d2:	2300      	movs	r3, #0
 80136d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136d6:	e058      	b.n	801378a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80136d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136da:	f003 0303 	and.w	r3, r3, #3
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d104      	bne.n	80136ec <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80136e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e4:	4619      	mov	r1, r3
 80136e6:	482e      	ldr	r0, [pc, #184]	; (80137a0 <cliMemoryDump+0x12c>)
 80136e8:	f7ff fe32 	bl	8013350 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80136ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	4619      	mov	r1, r3
 80136f2:	482c      	ldr	r0, [pc, #176]	; (80137a4 <cliMemoryDump+0x130>)
 80136f4:	f7ff fe2c 	bl	8013350 <cliPrintf>

    if ((idx%4) == 3)
 80136f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136fa:	425a      	negs	r2, r3
 80136fc:	f003 0303 	and.w	r3, r3, #3
 8013700:	f002 0203 	and.w	r2, r2, #3
 8013704:	bf58      	it	pl
 8013706:	4253      	negpl	r3, r2
 8013708:	2b03      	cmp	r3, #3
 801370a:	d138      	bne.n	801377e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 801370c:	4826      	ldr	r0, [pc, #152]	; (80137a8 <cliMemoryDump+0x134>)
 801370e:	f7ff fe1f 	bl	8013350 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8013712:	2300      	movs	r3, #0
 8013714:	623b      	str	r3, [r7, #32]
 8013716:	e02c      	b.n	8013772 <cliMemoryDump+0xfe>
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 801371c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 801371e:	2300      	movs	r3, #0
 8013720:	61fb      	str	r3, [r7, #28]
 8013722:	e01d      	b.n	8013760 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8013724:	f107 020c 	add.w	r2, r7, #12
 8013728:	69fb      	ldr	r3, [r7, #28]
 801372a:	4413      	add	r3, r2
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b1f      	cmp	r3, #31
 8013730:	d910      	bls.n	8013754 <cliMemoryDump+0xe0>
 8013732:	f107 020c 	add.w	r2, r7, #12
 8013736:	69fb      	ldr	r3, [r7, #28]
 8013738:	4413      	add	r3, r2
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b7e      	cmp	r3, #126	; 0x7e
 801373e:	d809      	bhi.n	8013754 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8013740:	f107 020c 	add.w	r2, r7, #12
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	4413      	add	r3, r2
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	4619      	mov	r1, r3
 801374c:	4817      	ldr	r0, [pc, #92]	; (80137ac <cliMemoryDump+0x138>)
 801374e:	f7ff fdff 	bl	8013350 <cliPrintf>
 8013752:	e002      	b.n	801375a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8013754:	4816      	ldr	r0, [pc, #88]	; (80137b0 <cliMemoryDump+0x13c>)
 8013756:	f7ff fdfb 	bl	8013350 <cliPrintf>
        for (i=0;i<4;i++)
 801375a:	69fb      	ldr	r3, [r7, #28]
 801375c:	3301      	adds	r3, #1
 801375e:	61fb      	str	r3, [r7, #28]
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	2b03      	cmp	r3, #3
 8013764:	ddde      	ble.n	8013724 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	3304      	adds	r3, #4
 801376a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 801376c:	6a3b      	ldr	r3, [r7, #32]
 801376e:	3301      	adds	r3, #1
 8013770:	623b      	str	r3, [r7, #32]
 8013772:	6a3b      	ldr	r3, [r7, #32]
 8013774:	2b03      	cmp	r3, #3
 8013776:	ddcf      	ble.n	8013718 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8013778:	480e      	ldr	r0, [pc, #56]	; (80137b4 <cliMemoryDump+0x140>)
 801377a:	f7ff fde9 	bl	8013350 <cliPrintf>
    }
    addr++;
 801377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013780:	3304      	adds	r3, #4
 8013782:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8013784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013786:	3301      	adds	r3, #1
 8013788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801378a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	429a      	cmp	r2, r3
 8013790:	dba2      	blt.n	80136d8 <cliMemoryDump+0x64>
  }
}
 8013792:	3730      	adds	r7, #48	; 0x30
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	080294e0 	.word	0x080294e0
 801379c:	080294f4 	.word	0x080294f4
 80137a0:	080294fc 	.word	0x080294fc
 80137a4:	08029508 	.word	0x08029508
 80137a8:	08029510 	.word	0x08029510
 80137ac:	08029514 	.word	0x08029514
 80137b0:	08029518 	.word	0x08029518
 80137b4:	0802951c 	.word	0x0802951c

080137b8 <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool	Ds18b20_Init(void)
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 80137be:	2305      	movs	r3, #5
 80137c0:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire, HW_DS18B20_GPIOX , HW_DS18B20_PINX);
 80137c2:	2201      	movs	r2, #1
 80137c4:	4939      	ldr	r1, [pc, #228]	; (80138ac <Ds18b20_Init+0xf4>)
 80137c6:	483a      	ldr	r0, [pc, #232]	; (80138b0 <Ds18b20_Init+0xf8>)
 80137c8:	f002 fa05 	bl	8015bd6 <OneWire_Init>
		TempSensorCount = 0;
 80137cc:	4b39      	ldr	r3, [pc, #228]	; (80138b4 <Ds18b20_Init+0xfc>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80137d2:	e002      	b.n	80137da <Ds18b20_Init+0x22>
			HAL_Delay(100);
 80137d4:	2064      	movs	r0, #100	; 0x64
 80137d6:	f009 fdcb 	bl	801d370 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 80137da:	f009 fdbd 	bl	801d358 <HAL_GetTick>
 80137de:	4603      	mov	r3, r0
 80137e0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80137e4:	4293      	cmp	r3, r2
 80137e6:	d9f5      	bls.n	80137d4 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 80137e8:	4831      	ldr	r0, [pc, #196]	; (80138b0 <Ds18b20_Init+0xf8>)
 80137ea:	f002 fae2 	bl	8015db2 <OneWire_First>
 80137ee:	4603      	mov	r3, r0
 80137f0:	461a      	mov	r2, r3
 80137f2:	4b31      	ldr	r3, [pc, #196]	; (80138b8 <Ds18b20_Init+0x100>)
 80137f4:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80137f6:	e019      	b.n	801382c <Ds18b20_Init+0x74>
		{
			HAL_Delay(100);
 80137f8:	2064      	movs	r0, #100	; 0x64
 80137fa:	f009 fdb9 	bl	801d370 <HAL_Delay>
			TempSensorCount++;
 80137fe:	4b2d      	ldr	r3, [pc, #180]	; (80138b4 <Ds18b20_Init+0xfc>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	3301      	adds	r3, #1
 8013804:	b2da      	uxtb	r2, r3
 8013806:	4b2b      	ldr	r3, [pc, #172]	; (80138b4 <Ds18b20_Init+0xfc>)
 8013808:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 801380a:	4b2a      	ldr	r3, [pc, #168]	; (80138b4 <Ds18b20_Init+0xfc>)
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	3b01      	subs	r3, #1
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	4a2a      	ldr	r2, [pc, #168]	; (80138bc <Ds18b20_Init+0x104>)
 8013814:	4413      	add	r3, r2
 8013816:	4619      	mov	r1, r3
 8013818:	4825      	ldr	r0, [pc, #148]	; (80138b0 <Ds18b20_Init+0xf8>)
 801381a:	f002 fbdf 	bl	8015fdc <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 801381e:	4824      	ldr	r0, [pc, #144]	; (80138b0 <Ds18b20_Init+0xf8>)
 8013820:	f002 fad7 	bl	8015dd2 <OneWire_Next>
 8013824:	4603      	mov	r3, r0
 8013826:	461a      	mov	r2, r3
 8013828:	4b23      	ldr	r3, [pc, #140]	; (80138b8 <Ds18b20_Init+0x100>)
 801382a:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 801382c:	4b22      	ldr	r3, [pc, #136]	; (80138b8 <Ds18b20_Init+0x100>)
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1e1      	bne.n	80137f8 <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8013834:	4b1f      	ldr	r3, [pc, #124]	; (80138b4 <Ds18b20_Init+0xfc>)
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d106      	bne.n	801384a <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 801383c:	79fb      	ldrb	r3, [r7, #7]
 801383e:	3b01      	subs	r3, #1
 8013840:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 8013842:	79fb      	ldrb	r3, [r7, #7]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1bc      	bne.n	80137c2 <Ds18b20_Init+0xa>
 8013848:	e000      	b.n	801384c <Ds18b20_Init+0x94>
			break;
 801384a:	bf00      	nop
	if(Ds18b20TryToFind==0)
 801384c:	79fb      	ldrb	r3, [r7, #7]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d101      	bne.n	8013856 <Ds18b20_Init+0x9e>
		return false;
 8013852:	2300      	movs	r3, #0
 8013854:	e026      	b.n	80138a4 <Ds18b20_Init+0xec>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8013856:	2300      	movs	r3, #0
 8013858:	71bb      	strb	r3, [r7, #6]
 801385a:	e019      	b.n	8013890 <Ds18b20_Init+0xd8>
	{
		HAL_Delay(50);
 801385c:	2032      	movs	r0, #50	; 0x32
 801385e:	f009 fd87 	bl	801d370 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8013862:	79bb      	ldrb	r3, [r7, #6]
 8013864:	011b      	lsls	r3, r3, #4
 8013866:	4a15      	ldr	r2, [pc, #84]	; (80138bc <Ds18b20_Init+0x104>)
 8013868:	4413      	add	r3, r2
 801386a:	220c      	movs	r2, #12
 801386c:	4619      	mov	r1, r3
 801386e:	4810      	ldr	r0, [pc, #64]	; (80138b0 <Ds18b20_Init+0xf8>)
 8013870:	f000 f9cc 	bl	8013c0c <DS18B20_SetResolution>
		HAL_Delay(50);
 8013874:	2032      	movs	r0, #50	; 0x32
 8013876:	f009 fd7b 	bl	801d370 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 801387a:	79bb      	ldrb	r3, [r7, #6]
 801387c:	011b      	lsls	r3, r3, #4
 801387e:	4a0f      	ldr	r2, [pc, #60]	; (80138bc <Ds18b20_Init+0x104>)
 8013880:	4413      	add	r3, r2
 8013882:	4619      	mov	r1, r3
 8013884:	480a      	ldr	r0, [pc, #40]	; (80138b0 <Ds18b20_Init+0xf8>)
 8013886:	f000 fa5a 	bl	8013d3e <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 801388a:	79bb      	ldrb	r3, [r7, #6]
 801388c:	3301      	adds	r3, #1
 801388e:	71bb      	strb	r3, [r7, #6]
 8013890:	4b08      	ldr	r3, [pc, #32]	; (80138b4 <Ds18b20_Init+0xfc>)
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	79ba      	ldrb	r2, [r7, #6]
 8013896:	429a      	cmp	r2, r3
 8013898:	d3e0      	bcc.n	801385c <Ds18b20_Init+0xa4>
	}

	#ifdef _USE_HW_CLI
	cliAdd("DS18B20", cliDS18B20);
 801389a:	4909      	ldr	r1, [pc, #36]	; (80138c0 <Ds18b20_Init+0x108>)
 801389c:	4809      	ldr	r0, [pc, #36]	; (80138c4 <Ds18b20_Init+0x10c>)
 801389e:	f7ff fe67 	bl	8013570 <cliAdd>
	#endif

	return true;
 80138a2:	2301      	movs	r3, #1
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	40020400 	.word	0x40020400
 80138b0:	200007f8 	.word	0x200007f8
 80138b4:	2000080d 	.word	0x2000080d
 80138b8:	2000080c 	.word	0x2000080c
 80138bc:	200007e8 	.word	0x200007e8
 80138c0:	08013e0d 	.word	0x08013e0d
 80138c4:	0802952c 	.word	0x0802952c

080138c8 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void)
{
 80138c8:	b590      	push	{r4, r7, lr}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;
	#else
	  switch(state)
 80138ce:	4b3f      	ldr	r3, [pc, #252]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d002      	beq.n	80138dc <Ds18b20_ManualConvert+0x14>
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d013      	beq.n	8013902 <Ds18b20_ManualConvert+0x3a>
 80138da:	e072      	b.n	80139c2 <Ds18b20_ManualConvert+0xfa>
	  {
	  	  case 0:
	  		  Ds18b20Timeout = HW_DS18B20_CONVERT_TIMEOUT_MS/10;
 80138dc:	4b3c      	ldr	r3, [pc, #240]	; (80139d0 <Ds18b20_ManualConvert+0x108>)
 80138de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80138e2:	801a      	strh	r2, [r3, #0]
	  		  DS18B20_StartAll(&OneWire);
 80138e4:	483b      	ldr	r0, [pc, #236]	; (80139d4 <Ds18b20_ManualConvert+0x10c>)
 80138e6:	f000 f87d 	bl	80139e4 <DS18B20_StartAll>
	  		  pre_time = millis();
 80138ea:	f7fe fea2 	bl	8012632 <millis>
 80138ee:	4603      	mov	r3, r0
 80138f0:	4a39      	ldr	r2, [pc, #228]	; (80139d8 <Ds18b20_ManualConvert+0x110>)
 80138f2:	6013      	str	r3, [r2, #0]
	  		  state++;
 80138f4:	4b35      	ldr	r3, [pc, #212]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	3301      	adds	r3, #1
 80138fa:	b2da      	uxtb	r2, r3
 80138fc:	4b33      	ldr	r3, [pc, #204]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 80138fe:	701a      	strb	r2, [r3, #0]
	  		  break;
 8013900:	e05f      	b.n	80139c2 <Ds18b20_ManualConvert+0xfa>

	  	  case 1:
	  		  if(millis() - pre_time >= 10)
 8013902:	f7fe fe96 	bl	8012632 <millis>
 8013906:	4602      	mov	r2, r0
 8013908:	4b33      	ldr	r3, [pc, #204]	; (80139d8 <Ds18b20_ManualConvert+0x110>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	1ad3      	subs	r3, r2, r3
 801390e:	2b09      	cmp	r3, #9
 8013910:	d956      	bls.n	80139c0 <Ds18b20_ManualConvert+0xf8>
	  		  {
	  			  if(!DS18B20_AllDone(&OneWire))
 8013912:	4830      	ldr	r0, [pc, #192]	; (80139d4 <Ds18b20_ManualConvert+0x10c>)
 8013914:	f000 fa6e 	bl	8013df4 <DS18B20_AllDone>
 8013918:	4603      	mov	r3, r0
 801391a:	2b00      	cmp	r3, #0
 801391c:	d112      	bne.n	8013944 <Ds18b20_ManualConvert+0x7c>
				  {
	  		  		pre_time = millis();
 801391e:	f7fe fe88 	bl	8012632 <millis>
 8013922:	4603      	mov	r3, r0
 8013924:	4a2c      	ldr	r2, [pc, #176]	; (80139d8 <Ds18b20_ManualConvert+0x110>)
 8013926:	6013      	str	r3, [r2, #0]
					Ds18b20Timeout-=1;
 8013928:	4b29      	ldr	r3, [pc, #164]	; (80139d0 <Ds18b20_ManualConvert+0x108>)
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	3b01      	subs	r3, #1
 801392e:	b29a      	uxth	r2, r3
 8013930:	4b27      	ldr	r3, [pc, #156]	; (80139d0 <Ds18b20_ManualConvert+0x108>)
 8013932:	801a      	strh	r2, [r3, #0]
					if(Ds18b20Timeout==0)
 8013934:	4b26      	ldr	r3, [pc, #152]	; (80139d0 <Ds18b20_ManualConvert+0x108>)
 8013936:	881b      	ldrh	r3, [r3, #0]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d141      	bne.n	80139c0 <Ds18b20_ManualConvert+0xf8>
					{
						state = 0;
 801393c:	4b23      	ldr	r3, [pc, #140]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 801393e:	2200      	movs	r2, #0
 8013940:	701a      	strb	r2, [r3, #0]
						break;
 8013942:	e03e      	b.n	80139c2 <Ds18b20_ManualConvert+0xfa>
					}
				  }
	  			  else
	  			  {
	  				  if(Ds18b20Timeout>0)
 8013944:	4b22      	ldr	r3, [pc, #136]	; (80139d0 <Ds18b20_ManualConvert+0x108>)
 8013946:	881b      	ldrh	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d024      	beq.n	8013996 <Ds18b20_ManualConvert+0xce>
	  				  {
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 801394c:	2300      	movs	r3, #0
 801394e:	71fb      	strb	r3, [r7, #7]
 8013950:	e01b      	b.n	801398a <Ds18b20_ManualConvert+0xc2>
	  					{
	  						ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8013952:	79fb      	ldrb	r3, [r7, #7]
 8013954:	011b      	lsls	r3, r3, #4
 8013956:	4a21      	ldr	r2, [pc, #132]	; (80139dc <Ds18b20_ManualConvert+0x114>)
 8013958:	1899      	adds	r1, r3, r2
 801395a:	79fb      	ldrb	r3, [r7, #7]
 801395c:	011b      	lsls	r3, r3, #4
 801395e:	3308      	adds	r3, #8
 8013960:	4a1e      	ldr	r2, [pc, #120]	; (80139dc <Ds18b20_ManualConvert+0x114>)
 8013962:	4413      	add	r3, r2
 8013964:	79fc      	ldrb	r4, [r7, #7]
 8013966:	461a      	mov	r2, r3
 8013968:	481a      	ldr	r0, [pc, #104]	; (80139d4 <Ds18b20_ManualConvert+0x10c>)
 801396a:	f000 f84f 	bl	8013a0c <DS18B20_Read>
 801396e:	4603      	mov	r3, r0
 8013970:	4619      	mov	r1, r3
 8013972:	4a1a      	ldr	r2, [pc, #104]	; (80139dc <Ds18b20_ManualConvert+0x114>)
 8013974:	0123      	lsls	r3, r4, #4
 8013976:	4413      	add	r3, r2
 8013978:	330c      	adds	r3, #12
 801397a:	460a      	mov	r2, r1
 801397c:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 801397e:	4b13      	ldr	r3, [pc, #76]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 8013980:	2200      	movs	r2, #0
 8013982:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013984:	79fb      	ldrb	r3, [r7, #7]
 8013986:	3301      	adds	r3, #1
 8013988:	71fb      	strb	r3, [r7, #7]
 801398a:	4b15      	ldr	r3, [pc, #84]	; (80139e0 <Ds18b20_ManualConvert+0x118>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	79fa      	ldrb	r2, [r7, #7]
 8013990:	429a      	cmp	r2, r3
 8013992:	d3de      	bcc.n	8013952 <Ds18b20_ManualConvert+0x8a>
	  						state = 0;
	  					}
	  				  }
	  			  }
	  		  }
			  break;
 8013994:	e014      	b.n	80139c0 <Ds18b20_ManualConvert+0xf8>
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 8013996:	2300      	movs	r3, #0
 8013998:	71bb      	strb	r3, [r7, #6]
 801399a:	e00c      	b.n	80139b6 <Ds18b20_ManualConvert+0xee>
	  						ds18b20[i].DataIsValid = false;
 801399c:	79bb      	ldrb	r3, [r7, #6]
 801399e:	4a0f      	ldr	r2, [pc, #60]	; (80139dc <Ds18b20_ManualConvert+0x114>)
 80139a0:	011b      	lsls	r3, r3, #4
 80139a2:	4413      	add	r3, r2
 80139a4:	330c      	adds	r3, #12
 80139a6:	2200      	movs	r2, #0
 80139a8:	701a      	strb	r2, [r3, #0]
	  						state = 0;
 80139aa:	4b08      	ldr	r3, [pc, #32]	; (80139cc <Ds18b20_ManualConvert+0x104>)
 80139ac:	2200      	movs	r2, #0
 80139ae:	701a      	strb	r2, [r3, #0]
	  					for (uint8_t i = 0; i < TempSensorCount; i++)
 80139b0:	79bb      	ldrb	r3, [r7, #6]
 80139b2:	3301      	adds	r3, #1
 80139b4:	71bb      	strb	r3, [r7, #6]
 80139b6:	4b0a      	ldr	r3, [pc, #40]	; (80139e0 <Ds18b20_ManualConvert+0x118>)
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	79ba      	ldrb	r2, [r7, #6]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d3ed      	bcc.n	801399c <Ds18b20_ManualConvert+0xd4>
			  break;
 80139c0:	bf00      	nop
	  }
	#endif
	  return true;
 80139c2:	2301      	movs	r3, #1
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd90      	pop	{r4, r7, pc}
 80139cc:	20000810 	.word	0x20000810
 80139d0:	2000080e 	.word	0x2000080e
 80139d4:	200007f8 	.word	0x200007f8
 80139d8:	20000814 	.word	0x20000814
 80139dc:	200007e8 	.word	0x200007e8
 80139e0:	2000080d 	.word	0x2000080d

080139e4 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f002 f91b 	bl	8015c28 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 80139f2:	21cc      	movs	r1, #204	; 0xcc
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f002 f99d 	bl	8015d34 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 80139fa:	2144      	movs	r1, #68	; 0x44
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f002 f999 	bl	8015d34 <OneWire_WriteByte>
}
 8013a02:	bf00      	nop
 8013a04:	3708      	adds	r7, #8
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
	...

08013a0c <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8013a0c:	b590      	push	{r4, r7, lr}
 8013a0e:	b08b      	sub	sp, #44	; 0x2c
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8013a22:	68b8      	ldr	r0, [r7, #8]
 8013a24:	f000 f97a 	bl	8013d1c <DS18B20_Is>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d101      	bne.n	8013a32 <DS18B20_Read+0x26>
		return false;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	e0e1      	b.n	8013bf6 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8013a32:	68f8      	ldr	r0, [r7, #12]
 8013a34:	f002 f954 	bl	8015ce0 <OneWire_ReadBit>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d101      	bne.n	8013a42 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	e0d9      	b.n	8013bf6 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f002 f8f0 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013a48:	68b9      	ldr	r1, [r7, #8]
 8013a4a:	68f8      	ldr	r0, [r7, #12]
 8013a4c:	f002 faa7 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8013a50:	21be      	movs	r1, #190	; 0xbe
 8013a52:	68f8      	ldr	r0, [r7, #12]
 8013a54:	f002 f96e 	bl	8015d34 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8013a58:	2300      	movs	r3, #0
 8013a5a:	77fb      	strb	r3, [r7, #31]
 8013a5c:	e00d      	b.n	8013a7a <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8013a5e:	7ffc      	ldrb	r4, [r7, #31]
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f002 f985 	bl	8015d70 <OneWire_ReadByte>
 8013a66:	4603      	mov	r3, r0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013a6e:	443b      	add	r3, r7
 8013a70:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8013a74:	7ffb      	ldrb	r3, [r7, #31]
 8013a76:	3301      	adds	r3, #1
 8013a78:	77fb      	strb	r3, [r7, #31]
 8013a7a:	7ffb      	ldrb	r3, [r7, #31]
 8013a7c:	2b08      	cmp	r3, #8
 8013a7e:	d9ee      	bls.n	8013a5e <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8013a80:	f107 0314 	add.w	r3, r7, #20
 8013a84:	2108      	movs	r1, #8
 8013a86:	4618      	mov	r0, r3
 8013a88:	f002 fac5 	bl	8016016 <OneWire_CRC8>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8013a90:	7f3b      	ldrb	r3, [r7, #28]
 8013a92:	7fba      	ldrb	r2, [r7, #30]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d001      	beq.n	8013a9c <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	e0ac      	b.n	8013bf6 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8013a9c:	7d3b      	ldrb	r3, [r7, #20]
 8013a9e:	b21a      	sxth	r2, r3
 8013aa0:	7d7b      	ldrb	r3, [r7, #21]
 8013aa2:	021b      	lsls	r3, r3, #8
 8013aa4:	b21b      	sxth	r3, r3
 8013aa6:	4313      	orrs	r3, r2
 8013aa8:	b21b      	sxth	r3, r3
 8013aaa:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	f002 f8bb 	bl	8015c28 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8013ab2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	da05      	bge.n	8013ac6 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8013aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013abc:	425b      	negs	r3, r3
 8013abe:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8013ac6:	7e3b      	ldrb	r3, [r7, #24]
 8013ac8:	115b      	asrs	r3, r3, #5
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	f003 0303 	and.w	r3, r3, #3
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	3309      	adds	r3, #9
 8013ad4:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8013ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ad8:	091b      	lsrs	r3, r3, #4
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8013ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ae2:	0a1b      	lsrs	r3, r3, #8
 8013ae4:	b29b      	uxth	r3, r3
 8013ae6:	011b      	lsls	r3, r3, #4
 8013ae8:	b25b      	sxtb	r3, r3
 8013aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8013aee:	b25a      	sxtb	r2, r3
 8013af0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8013af4:	4313      	orrs	r3, r2
 8013af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8013afa:	7f7b      	ldrb	r3, [r7, #29]
 8013afc:	3b09      	subs	r3, #9
 8013afe:	2b03      	cmp	r3, #3
 8013b00:	d858      	bhi.n	8013bb4 <DS18B20_Read+0x1a8>
 8013b02:	a201      	add	r2, pc, #4	; (adr r2, 8013b08 <DS18B20_Read+0xfc>)
 8013b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b08:	08013b19 	.word	0x08013b19
 8013b0c:	08013b41 	.word	0x08013b41
 8013b10:	08013b69 	.word	0x08013b69
 8013b14:	08013b91 	.word	0x08013b91
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8013b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b1a:	08db      	lsrs	r3, r3, #3
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	f003 0301 	and.w	r3, r3, #1
 8013b22:	ee07 3a90 	vmov	s15, r3
 8013b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b2a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8013b2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8013b32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b3a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8013b3e:	e03e      	b.n	8013bbe <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8013b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b42:	089b      	lsrs	r3, r3, #2
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	f003 0303 	and.w	r3, r3, #3
 8013b4a:	ee07 3a90 	vmov	s15, r3
 8013b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b52:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8013b56:	edd7 7a08 	vldr	s15, [r7, #32]
 8013b5a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8013b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b62:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8013b66:	e02a      	b.n	8013bbe <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8013b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b6a:	085b      	lsrs	r3, r3, #1
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	f003 0307 	and.w	r3, r3, #7
 8013b72:	ee07 3a90 	vmov	s15, r3
 8013b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b7a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8013b7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8013b82:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8013b86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b8a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8013b8e:	e016      	b.n	8013bbe <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8013b90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b92:	f003 030f 	and.w	r3, r3, #15
 8013b96:	ee07 3a90 	vmov	s15, r3
 8013b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b9e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8013ba2:	edd7 7a08 	vldr	s15, [r7, #32]
 8013ba6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013c00 <DS18B20_Read+0x1f4>
 8013baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bae:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8013bb2:	e004      	b.n	8013bbe <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8013bb4:	4b13      	ldr	r3, [pc, #76]	; (8013c04 <DS18B20_Read+0x1f8>)
 8013bb6:	623b      	str	r3, [r7, #32]
			digit = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8013bbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013bc2:	ee07 3a90 	vmov	s15, r3
 8013bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bca:	ed97 7a08 	vldr	s14, [r7, #32]
 8013bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013bd2:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8013bd6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d007      	beq.n	8013bee <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8013bde:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013c08 <DS18B20_Read+0x1fc>
 8013be2:	edd7 7a08 	vldr	s15, [r7, #32]
 8013be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013bea:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6a3a      	ldr	r2, [r7, #32]
 8013bf2:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8013bf4:	2301      	movs	r3, #1
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	372c      	adds	r7, #44	; 0x2c
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd90      	pop	{r4, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	3d800000 	.word	0x3d800000
 8013c04:	437f0000 	.word	0x437f0000
 8013c08:	00000000 	.word	0x00000000

08013c0c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	4613      	mov	r3, r2
 8013c18:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8013c1a:	68b8      	ldr	r0, [r7, #8]
 8013c1c:	f000 f87e 	bl	8013d1c <DS18B20_Is>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d101      	bne.n	8013c2a <DS18B20_SetResolution+0x1e>
		return 0;
 8013c26:	2300      	movs	r3, #0
 8013c28:	e074      	b.n	8013d14 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f001 fffc 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013c30:	68b9      	ldr	r1, [r7, #8]
 8013c32:	68f8      	ldr	r0, [r7, #12]
 8013c34:	f002 f9b3 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8013c38:	21be      	movs	r1, #190	; 0xbe
 8013c3a:	68f8      	ldr	r0, [r7, #12]
 8013c3c:	f002 f87a 	bl	8015d34 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f002 f895 	bl	8015d70 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8013c46:	68f8      	ldr	r0, [r7, #12]
 8013c48:	f002 f892 	bl	8015d70 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f002 f88f 	bl	8015d70 <OneWire_ReadByte>
 8013c52:	4603      	mov	r3, r0
 8013c54:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f002 f88a 	bl	8015d70 <OneWire_ReadByte>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8013c60:	68f8      	ldr	r0, [r7, #12]
 8013c62:	f002 f885 	bl	8015d70 <OneWire_ReadByte>
 8013c66:	4603      	mov	r3, r0
 8013c68:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8013c6a:	79fb      	ldrb	r3, [r7, #7]
 8013c6c:	2b09      	cmp	r3, #9
 8013c6e:	d108      	bne.n	8013c82 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8013c70:	7dfb      	ldrb	r3, [r7, #23]
 8013c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c76:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	f023 0320 	bic.w	r3, r3, #32
 8013c7e:	75fb      	strb	r3, [r7, #23]
 8013c80:	e022      	b.n	8013cc8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8013c82:	79fb      	ldrb	r3, [r7, #7]
 8013c84:	2b0a      	cmp	r3, #10
 8013c86:	d108      	bne.n	8013c9a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8013c88:	7dfb      	ldrb	r3, [r7, #23]
 8013c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c8e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8013c90:	7dfb      	ldrb	r3, [r7, #23]
 8013c92:	f043 0320 	orr.w	r3, r3, #32
 8013c96:	75fb      	strb	r3, [r7, #23]
 8013c98:	e016      	b.n	8013cc8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8013c9a:	79fb      	ldrb	r3, [r7, #7]
 8013c9c:	2b0b      	cmp	r3, #11
 8013c9e:	d108      	bne.n	8013cb2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8013ca0:	7dfb      	ldrb	r3, [r7, #23]
 8013ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ca6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8013ca8:	7dfb      	ldrb	r3, [r7, #23]
 8013caa:	f023 0320 	bic.w	r3, r3, #32
 8013cae:	75fb      	strb	r3, [r7, #23]
 8013cb0:	e00a      	b.n	8013cc8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8013cb2:	79fb      	ldrb	r3, [r7, #7]
 8013cb4:	2b0c      	cmp	r3, #12
 8013cb6:	d107      	bne.n	8013cc8 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8013cb8:	7dfb      	ldrb	r3, [r7, #23]
 8013cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cbe:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8013cc0:	7dfb      	ldrb	r3, [r7, #23]
 8013cc2:	f043 0320 	orr.w	r3, r3, #32
 8013cc6:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f001 ffad 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013cce:	68b9      	ldr	r1, [r7, #8]
 8013cd0:	68f8      	ldr	r0, [r7, #12]
 8013cd2:	f002 f964 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8013cd6:	214e      	movs	r1, #78	; 0x4e
 8013cd8:	68f8      	ldr	r0, [r7, #12]
 8013cda:	f002 f82b 	bl	8015d34 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8013cde:	7dbb      	ldrb	r3, [r7, #22]
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	68f8      	ldr	r0, [r7, #12]
 8013ce4:	f002 f826 	bl	8015d34 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8013ce8:	7d7b      	ldrb	r3, [r7, #21]
 8013cea:	4619      	mov	r1, r3
 8013cec:	68f8      	ldr	r0, [r7, #12]
 8013cee:	f002 f821 	bl	8015d34 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8013cf2:	7dfb      	ldrb	r3, [r7, #23]
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	68f8      	ldr	r0, [r7, #12]
 8013cf8:	f002 f81c 	bl	8015d34 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f001 ff93 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013d02:	68b9      	ldr	r1, [r7, #8]
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f002 f94a 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8013d0a:	2148      	movs	r1, #72	; 0x48
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f002 f811 	bl	8015d34 <OneWire_WriteByte>

	return 1;
 8013d12:	2301      	movs	r3, #1
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3718      	adds	r7, #24
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	2b28      	cmp	r3, #40	; 0x28
 8013d2a:	d101      	bne.n	8013d30 <DS18B20_Is+0x14>
		return 1;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e000      	b.n	8013d32 <DS18B20_Is+0x16>

	return 0;
 8013d30:	2300      	movs	r3, #0
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	370c      	adds	r7, #12
 8013d36:	46bd      	mov	sp, r7
 8013d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3c:	4770      	bx	lr

08013d3e <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8013d3e:	b580      	push	{r7, lr}
 8013d40:	b084      	sub	sp, #16
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
 8013d46:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8013d48:	6838      	ldr	r0, [r7, #0]
 8013d4a:	f7ff ffe7 	bl	8013d1c <DS18B20_Is>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d101      	bne.n	8013d58 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8013d54:	2300      	movs	r3, #0
 8013d56:	e049      	b.n	8013dec <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f001 ff65 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f002 f91c 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8013d66:	21be      	movs	r1, #190	; 0xbe
 8013d68:	6878      	ldr	r0, [r7, #4]
 8013d6a:	f001 ffe3 	bl	8015d34 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f001 fffe 	bl	8015d70 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f001 fffb 	bl	8015d70 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f001 fff8 	bl	8015d70 <OneWire_ReadByte>
 8013d80:	4603      	mov	r3, r0
 8013d82:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f001 fff3 	bl	8015d70 <OneWire_ReadByte>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f001 ffee 	bl	8015d70 <OneWire_ReadByte>
 8013d94:	4603      	mov	r3, r0
 8013d96:	737b      	strb	r3, [r7, #13]

	th = 125;
 8013d98:	237d      	movs	r3, #125	; 0x7d
 8013d9a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8013d9c:	23c9      	movs	r3, #201	; 0xc9
 8013d9e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f001 ff41 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f002 f8f8 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8013dae:	214e      	movs	r1, #78	; 0x4e
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f001 ffbf 	bl	8015d34 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8013db6:	7bfb      	ldrb	r3, [r7, #15]
 8013db8:	4619      	mov	r1, r3
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f001 ffba 	bl	8015d34 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8013dc0:	7bbb      	ldrb	r3, [r7, #14]
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f001 ffb5 	bl	8015d34 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8013dca:	7b7b      	ldrb	r3, [r7, #13]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f001 ffb0 	bl	8015d34 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f001 ff27 	bl	8015c28 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8013dda:	6839      	ldr	r1, [r7, #0]
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f002 f8de 	bl	8015f9e <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8013de2:	2148      	movs	r1, #72	; 0x48
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f001 ffa5 	bl	8015d34 <OneWire_WriteByte>

	return 1;
 8013dea:	2301      	movs	r3, #1
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f001 ff6f 	bl	8015ce0 <OneWire_ReadBit>
 8013e02:	4603      	mov	r3, r0
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3708      	adds	r7, #8
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <cliDS18B20>:

#ifdef _USE_HW_CLI
void cliDS18B20(cli_args_t *args)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b084      	sub	sp, #16
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8013e14:	2300      	movs	r3, #0
 8013e16:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	881b      	ldrh	r3, [r3, #0]
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d11b      	bne.n	8013e58 <cliDS18B20+0x4c>
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	4913      	ldr	r1, [pc, #76]	; (8013e74 <cliDS18B20+0x68>)
 8013e26:	2000      	movs	r0, #0
 8013e28:	4798      	blx	r3
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d013      	beq.n	8013e58 <cliDS18B20+0x4c>
  {

	  while(cliKeepLoop())
 8013e30:	e00b      	b.n	8013e4a <cliDS18B20+0x3e>
	  {
		  Ds18b20_ManualConvert();
 8013e32:	f7ff fd49 	bl	80138c8 <Ds18b20_ManualConvert>
		  cliPrintf("DS18B20_Data : %0.1f\n", ds18b20[0].Temperature);
 8013e36:	4b10      	ldr	r3, [pc, #64]	; (8013e78 <cliDS18B20+0x6c>)
 8013e38:	689b      	ldr	r3, [r3, #8]
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7fc feec 	bl	8010c18 <__aeabi_f2d>
 8013e40:	4602      	mov	r2, r0
 8013e42:	460b      	mov	r3, r1
 8013e44:	480d      	ldr	r0, [pc, #52]	; (8013e7c <cliDS18B20+0x70>)
 8013e46:	f7ff fa83 	bl	8013350 <cliPrintf>
	  while(cliKeepLoop())
 8013e4a:	f7ff fb7b 	bl	8013544 <cliKeepLoop>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d1ee      	bne.n	8013e32 <cliDS18B20+0x26>
	  }
    ret = true;
 8013e54:	2301      	movs	r3, #1
 8013e56:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8013e58:	7bfb      	ldrb	r3, [r7, #15]
 8013e5a:	f083 0301 	eor.w	r3, r3, #1
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d002      	beq.n	8013e6a <cliDS18B20+0x5e>
  {
    cliPrintf("DS18B20 test\n");
 8013e64:	4806      	ldr	r0, [pc, #24]	; (8013e80 <cliDS18B20+0x74>)
 8013e66:	f7ff fa73 	bl	8013350 <cliPrintf>
  }
}
 8013e6a:	bf00      	nop
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
 8013e72:	bf00      	nop
 8013e74:	08029534 	.word	0x08029534
 8013e78:	200007e8 	.word	0x200007e8
 8013e7c:	0802953c 	.word	0x0802953c
 8013e80:	08029554 	.word	0x08029554

08013e84 <fatfsInit>:
#ifdef _USE_HW_CLI
static void cliFatfs(cli_args_t *args);
#endif

bool fatfsInit(void)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
  bool ret = true;
 8013e8a:	2301      	movs	r3, #1
 8013e8c:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8013e8e:	490d      	ldr	r1, [pc, #52]	; (8013ec4 <fatfsInit+0x40>)
 8013e90:	480d      	ldr	r0, [pc, #52]	; (8013ec8 <fatfsInit+0x44>)
 8013e92:	f009 f90f 	bl	801d0b4 <FATFS_LinkDriver>
 8013e96:	4603      	mov	r3, r0
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d10a      	bne.n	8013eb2 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	4909      	ldr	r1, [pc, #36]	; (8013ec4 <fatfsInit+0x40>)
 8013ea0:	480a      	ldr	r0, [pc, #40]	; (8013ecc <fatfsInit+0x48>)
 8013ea2:	f007 fd01 	bl	801b8a8 <f_mount>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d102      	bne.n	8013eb2 <fatfsInit+0x2e>
    {
      is_init = true;
 8013eac:	4b08      	ldr	r3, [pc, #32]	; (8013ed0 <fatfsInit+0x4c>)
 8013eae:	2201      	movs	r2, #1
 8013eb0:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8013eb2:	4908      	ldr	r1, [pc, #32]	; (8013ed4 <fatfsInit+0x50>)
 8013eb4:	4808      	ldr	r0, [pc, #32]	; (8013ed8 <fatfsInit+0x54>)
 8013eb6:	f7ff fb5b 	bl	8013570 <cliAdd>
#endif

  return ret;
 8013eba:	79fb      	ldrb	r3, [r7, #7]
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	20000a50 	.word	0x20000a50
 8013ec8:	08029ad8 	.word	0x08029ad8
 8013ecc:	2000081c 	.word	0x2000081c
 8013ed0:	20000818 	.word	0x20000818
 8013ed4:	08013fb1 	.word	0x08013fb1
 8013ed8:	08029564 	.word	0x08029564

08013edc <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b0d6      	sub	sp, #344	; 0x158
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013ee6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013eea:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8013eec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013ef0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013ef4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	4610      	mov	r0, r2
 8013efc:	f008 fc4d 	bl	801c79a <f_opendir>
 8013f00:	4603      	mov	r3, r0
 8013f02:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8013f06:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d144      	bne.n	8013f98 <fatfsDir+0xbc>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8013f0e:	f107 0208 	add.w	r2, r7, #8
 8013f12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f16:	4611      	mov	r1, r2
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f008 fce7 	bl	801c8ec <f_readdir>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8013f24:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d130      	bne.n	8013f8e <fatfsDir+0xb2>
 8013f2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013f30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013f34:	7d9b      	ldrb	r3, [r3, #22]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d029      	beq.n	8013f8e <fatfsDir+0xb2>
      if (fno.fattrib & AM_DIR)
 8013f3a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013f3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013f42:	7a1b      	ldrb	r3, [r3, #8]
 8013f44:	f003 0310 	and.w	r3, r3, #16
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00c      	beq.n	8013f66 <fatfsDir+0x8a>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8013f4c:	f107 0308 	add.w	r3, r7, #8
 8013f50:	f103 0216 	add.w	r2, r3, #22
 8013f54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013f58:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8013f5c:	6819      	ldr	r1, [r3, #0]
 8013f5e:	4812      	ldr	r0, [pc, #72]	; (8013fa8 <fatfsDir+0xcc>)
 8013f60:	f7ff f9f6 	bl	8013350 <cliPrintf>
 8013f64:	e7d3      	b.n	8013f0e <fatfsDir+0x32>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8013f66:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013f6a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f107 0308 	add.w	r3, r7, #8
 8013f76:	f103 0216 	add.w	r2, r3, #22
 8013f7a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8013f7e:	f5a3 71aa 	sub.w	r1, r3, #340	; 0x154
 8013f82:	4603      	mov	r3, r0
 8013f84:	6809      	ldr	r1, [r1, #0]
 8013f86:	4809      	ldr	r0, [pc, #36]	; (8013fac <fatfsDir+0xd0>)
 8013f88:	f7ff f9e2 	bl	8013350 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8013f8c:	e7bf      	b.n	8013f0e <fatfsDir+0x32>
      }
    }
    f_closedir(&dir);
 8013f8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013f92:	4618      	mov	r0, r3
 8013f94:	f008 fc84 	bl	801c8a0 <f_closedir>
  }

  return res;
 8013f98:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	0802956c 	.word	0x0802956c
 8013fac:	08029578 	.word	0x08029578

08013fb0 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fbc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013fc0:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8013fc8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fcc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	881b      	ldrh	r3, [r3, #0]
 8013fd4:	2b01      	cmp	r3, #1
 8013fd6:	d14d      	bne.n	8014074 <cliFatfs+0xc4>
 8013fd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fdc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	695b      	ldr	r3, [r3, #20]
 8013fe4:	4990      	ldr	r1, [pc, #576]	; (8014228 <cliFatfs+0x278>)
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	4798      	blx	r3
 8013fea:	4603      	mov	r3, r0
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d041      	beq.n	8014074 <cliFatfs+0xc4>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8013ff0:	4b8e      	ldr	r3, [pc, #568]	; (801422c <cliFatfs+0x27c>)
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	4619      	mov	r1, r3
 8013ff6:	488e      	ldr	r0, [pc, #568]	; (8014230 <cliFatfs+0x280>)
 8013ff8:	f7ff f9aa 	bl	8013350 <cliPrintf>

    if (is_init == true)
 8013ffc:	4b8b      	ldr	r3, [pc, #556]	; (801422c <cliFatfs+0x27c>)
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d034      	beq.n	801406e <cliFatfs+0xbe>
      FATFS *fs;
       DWORD fre_clust, fre_sect, tot_sect;
       FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8014004:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8014008:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801400c:	4619      	mov	r1, r3
 801400e:	4889      	ldr	r0, [pc, #548]	; (8014234 <cliFatfs+0x284>)
 8014010:	f008 fcb9 	bl	801c986 <f_getfree>
 8014014:	4603      	mov	r3, r0
 8014016:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 801401a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801401e:	2b00      	cmp	r3, #0
 8014020:	d11f      	bne.n	8014062 <cliFatfs+0xb2>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8014022:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8014026:	699b      	ldr	r3, [r3, #24]
 8014028:	3b02      	subs	r3, #2
 801402a:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801402e:	8952      	ldrh	r2, [r2, #10]
 8014030:	fb02 f303 	mul.w	r3, r2, r3
 8014034:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8014038:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801403c:	895b      	ldrh	r3, [r3, #10]
 801403e:	461a      	mov	r2, r3
 8014040:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8014044:	fb02 f303 	mul.w	r3, r2, r3
 8014048:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 801404c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8014050:	0859      	lsrs	r1, r3, #1
 8014052:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8014056:	085b      	lsrs	r3, r3, #1
 8014058:	461a      	mov	r2, r3
 801405a:	4877      	ldr	r0, [pc, #476]	; (8014238 <cliFatfs+0x288>)
 801405c:	f7ff f978 	bl	8013350 <cliPrintf>
 8014060:	e005      	b.n	801406e <cliFatfs+0xbe>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8014062:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8014066:	4619      	mov	r1, r3
 8014068:	4874      	ldr	r0, [pc, #464]	; (801423c <cliFatfs+0x28c>)
 801406a:	f7ff f971 	bl	8013350 <cliPrintf>
       }
    }

    ret = true;
 801406e:	2301      	movs	r3, #1
 8014070:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8014074:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014078:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	881b      	ldrh	r3, [r3, #0]
 8014080:	2b01      	cmp	r3, #1
 8014082:	d11e      	bne.n	80140c2 <cliFatfs+0x112>
 8014084:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014088:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	695b      	ldr	r3, [r3, #20]
 8014090:	496b      	ldr	r1, [pc, #428]	; (8014240 <cliFatfs+0x290>)
 8014092:	2000      	movs	r0, #0
 8014094:	4798      	blx	r3
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d012      	beq.n	80140c2 <cliFatfs+0x112>
  {
    FRESULT res;

    res = fatfsDir("/");
 801409c:	4869      	ldr	r0, [pc, #420]	; (8014244 <cliFatfs+0x294>)
 801409e:	f7ff ff1d 	bl	8013edc <fatfsDir>
 80140a2:	4603      	mov	r3, r0
 80140a4:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 80140a8:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d005      	beq.n	80140bc <cliFatfs+0x10c>
    {
      cliPrintf(" err : %d\n", res);
 80140b0:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80140b4:	4619      	mov	r1, r3
 80140b6:	4861      	ldr	r0, [pc, #388]	; (801423c <cliFatfs+0x28c>)
 80140b8:	f7ff f94a 	bl	8013350 <cliPrintf>
    }

    ret = true;
 80140bc:	2301      	movs	r3, #1
 80140be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 80140c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	2b01      	cmp	r3, #1
 80140d0:	f040 8095 	bne.w	80141fe <cliFatfs+0x24e>
 80140d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	695b      	ldr	r3, [r3, #20]
 80140e0:	4959      	ldr	r1, [pc, #356]	; (8014248 <cliFatfs+0x298>)
 80140e2:	2000      	movs	r0, #0
 80140e4:	4798      	blx	r3
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 8088 	beq.w	80141fe <cliFatfs+0x24e>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 80140ee:	f7fe faa0 	bl	8012632 <millis>
 80140f2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 80140f6:	f107 0308 	add.w	r3, r7, #8
 80140fa:	220b      	movs	r2, #11
 80140fc:	4953      	ldr	r1, [pc, #332]	; (801424c <cliFatfs+0x29c>)
 80140fe:	4618      	mov	r0, r3
 8014100:	f007 fc18 	bl	801b934 <f_open>
 8014104:	4603      	mov	r3, r0
 8014106:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 801410a:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 801410e:	2b00      	cmp	r3, #0
 8014110:	d165      	bne.n	80141de <cliFatfs+0x22e>
    {
      f_printf(&log_file, "test1, ");
 8014112:	f107 0308 	add.w	r3, r7, #8
 8014116:	494e      	ldr	r1, [pc, #312]	; (8014250 <cliFatfs+0x2a0>)
 8014118:	4618      	mov	r0, r3
 801411a:	f008 fd61 	bl	801cbe0 <f_printf>
      f_printf(&log_file, "test2, ");
 801411e:	f107 0308 	add.w	r3, r7, #8
 8014122:	494c      	ldr	r1, [pc, #304]	; (8014254 <cliFatfs+0x2a4>)
 8014124:	4618      	mov	r0, r3
 8014126:	f008 fd5b 	bl	801cbe0 <f_printf>
      f_printf(&log_file, "test3, ");
 801412a:	f107 0308 	add.w	r3, r7, #8
 801412e:	494a      	ldr	r1, [pc, #296]	; (8014258 <cliFatfs+0x2a8>)
 8014130:	4618      	mov	r0, r3
 8014132:	f008 fd55 	bl	801cbe0 <f_printf>
      f_printf(&log_file, ", ");
 8014136:	f107 0308 	add.w	r3, r7, #8
 801413a:	4948      	ldr	r1, [pc, #288]	; (801425c <cliFatfs+0x2ac>)
 801413c:	4618      	mov	r0, r3
 801413e:	f008 fd4f 	bl	801cbe0 <f_printf>
      f_printf(&log_file, "\n");
 8014142:	f107 0308 	add.w	r3, r7, #8
 8014146:	4946      	ldr	r1, [pc, #280]	; (8014260 <cliFatfs+0x2b0>)
 8014148:	4618      	mov	r0, r3
 801414a:	f008 fd49 	bl	801cbe0 <f_printf>

      for (int i=0; i<8; i++)
 801414e:	2300      	movs	r3, #0
 8014150:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8014154:	e00c      	b.n	8014170 <cliFatfs+0x1c0>
      {
        f_printf(&log_file, "%d \n", i);
 8014156:	f107 0308 	add.w	r3, r7, #8
 801415a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801415e:	4941      	ldr	r1, [pc, #260]	; (8014264 <cliFatfs+0x2b4>)
 8014160:	4618      	mov	r0, r3
 8014162:	f008 fd3d 	bl	801cbe0 <f_printf>
      for (int i=0; i<8; i++)
 8014166:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801416a:	3301      	adds	r3, #1
 801416c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8014170:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8014174:	2b07      	cmp	r3, #7
 8014176:	ddee      	ble.n	8014156 <cliFatfs+0x1a6>
      }

      f_rewind(&log_file);
 8014178:	f107 0308 	add.w	r3, r7, #8
 801417c:	2100      	movs	r1, #0
 801417e:	4618      	mov	r0, r3
 8014180:	f008 f902 	bl	801c388 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8014184:	e01c      	b.n	80141c0 <cliFatfs+0x210>
      {
        len = 0;
 8014186:	2300      	movs	r3, #0
 8014188:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read (&log_file, &data, 1, &len);
 801418c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8014190:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8014194:	f107 0008 	add.w	r0, r7, #8
 8014198:	2201      	movs	r2, #1
 801419a:	f007 fd99 	bl	801bcd0 <f_read>
 801419e:	4603      	mov	r3, r0
 80141a0:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80141a4:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d10f      	bne.n	80141cc <cliFatfs+0x21c>
        {
          break;
        }
        if (len == 0)
 80141ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00d      	beq.n	80141d0 <cliFatfs+0x220>
        {
          break;
        }

        cliPrintf("%c", data);
 80141b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80141b8:	4619      	mov	r1, r3
 80141ba:	482b      	ldr	r0, [pc, #172]	; (8014268 <cliFatfs+0x2b8>)
 80141bc:	f7ff f8c8 	bl	8013350 <cliPrintf>
      while(cliKeepLoop())
 80141c0:	f7ff f9c0 	bl	8013544 <cliKeepLoop>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1dd      	bne.n	8014186 <cliFatfs+0x1d6>
 80141ca:	e002      	b.n	80141d2 <cliFatfs+0x222>
          break;
 80141cc:	bf00      	nop
 80141ce:	e000      	b.n	80141d2 <cliFatfs+0x222>
          break;
 80141d0:	bf00      	nop
      }

      f_close(&log_file);
 80141d2:	f107 0308 	add.w	r3, r7, #8
 80141d6:	4618      	mov	r0, r3
 80141d8:	f008 f8ac 	bl	801c334 <f_close>
 80141dc:	e002      	b.n	80141e4 <cliFatfs+0x234>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 80141de:	4823      	ldr	r0, [pc, #140]	; (801426c <cliFatfs+0x2bc>)
 80141e0:	f7ff f8b6 	bl	8013350 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 80141e4:	f7fe fa25 	bl	8012632 <millis>
 80141e8:	4602      	mov	r2, r0
 80141ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80141ee:	1ad3      	subs	r3, r2, r3
 80141f0:	4619      	mov	r1, r3
 80141f2:	481f      	ldr	r0, [pc, #124]	; (8014270 <cliFatfs+0x2c0>)
 80141f4:	f7ff f8ac 	bl	8013350 <cliPrintf>

    ret = true;
 80141f8:	2301      	movs	r3, #1
 80141fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 80141fe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014202:	f083 0301 	eor.w	r3, r3, #1
 8014206:	b2db      	uxtb	r3, r3
 8014208:	2b00      	cmp	r3, #0
 801420a:	d008      	beq.n	801421e <cliFatfs+0x26e>
  {
    cliPrintf("fatfs info\n");
 801420c:	4819      	ldr	r0, [pc, #100]	; (8014274 <cliFatfs+0x2c4>)
 801420e:	f7ff f89f 	bl	8013350 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8014212:	4819      	ldr	r0, [pc, #100]	; (8014278 <cliFatfs+0x2c8>)
 8014214:	f7ff f89c 	bl	8013350 <cliPrintf>
    cliPrintf("fatfs test\n");
 8014218:	4818      	ldr	r0, [pc, #96]	; (801427c <cliFatfs+0x2cc>)
 801421a:	f7ff f899 	bl	8013350 <cliPrintf>
  }
}
 801421e:	bf00      	nop
 8014220:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}
 8014228:	0802958c 	.word	0x0802958c
 801422c:	20000818 	.word	0x20000818
 8014230:	08029594 	.word	0x08029594
 8014234:	080295a8 	.word	0x080295a8
 8014238:	080295ac 	.word	0x080295ac
 801423c:	080295e0 	.word	0x080295e0
 8014240:	080295ec 	.word	0x080295ec
 8014244:	080295f0 	.word	0x080295f0
 8014248:	080295f4 	.word	0x080295f4
 801424c:	080295fc 	.word	0x080295fc
 8014250:	08029604 	.word	0x08029604
 8014254:	0802960c 	.word	0x0802960c
 8014258:	08029614 	.word	0x08029614
 801425c:	0802961c 	.word	0x0802961c
 8014260:	08029620 	.word	0x08029620
 8014264:	08029624 	.word	0x08029624
 8014268:	0802962c 	.word	0x0802962c
 801426c:	08029630 	.word	0x08029630
 8014270:	08029640 	.word	0x08029640
 8014274:	08029648 	.word	0x08029648
 8014278:	08029654 	.word	0x08029654
 801427c:	08029660 	.word	0x08029660

08014280 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 8014284:	4903      	ldr	r1, [pc, #12]	; (8014294 <flashInit+0x14>)
 8014286:	4804      	ldr	r0, [pc, #16]	; (8014298 <flashInit+0x18>)
 8014288:	f7ff f972 	bl	8013570 <cliAdd>
#endif

  return true;
 801428c:	2301      	movs	r3, #1
}
 801428e:	4618      	mov	r0, r3
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	0801445d 	.word	0x0801445d
 8014298:	0802966c 	.word	0x0802966c

0801429c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b08c      	sub	sp, #48	; 0x30
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80142a6:	2300      	movs	r3, #0
 80142a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 80142ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 80142b2:	2300      	movs	r3, #0
 80142b4:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80142b6:	2300      	movs	r3, #0
 80142b8:	627b      	str	r3, [r7, #36]	; 0x24
 80142ba:	e015      	b.n	80142e8 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 80142bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142be:	b29b      	uxth	r3, r3
 80142c0:	683a      	ldr	r2, [r7, #0]
 80142c2:	6879      	ldr	r1, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	f000 f871 	bl	80143ac <flashInSector>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d008      	beq.n	80142e2 <flashErase+0x46>
    {
      if (start_sector_num < 0)
 80142d0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	da01      	bge.n	80142dc <flashErase+0x40>
      {
        start_sector_num = i;
 80142d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142da:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 80142dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142de:	3301      	adds	r3, #1
 80142e0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e4:	3301      	adds	r3, #1
 80142e6:	627b      	str	r3, [r7, #36]	; 0x24
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	2b07      	cmp	r3, #7
 80142ec:	dde6      	ble.n	80142bc <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 80142ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d020      	beq.n	8014336 <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 80142f4:	f00a fb2e 	bl	801e954 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 80142f8:	2300      	movs	r3, #0
 80142fa:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 80142fc:	2301      	movs	r3, #1
 80142fe:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8014300:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8014304:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 801430a:	2302      	movs	r3, #2
 801430c:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 801430e:	f107 0208 	add.w	r2, r7, #8
 8014312:	f107 030c 	add.w	r3, r7, #12
 8014316:	4611      	mov	r1, r2
 8014318:	4618      	mov	r0, r3
 801431a:	f00a fc8d 	bl	801ec38 <HAL_FLASHEx_Erase>
 801431e:	4603      	mov	r3, r0
 8014320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8014324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014328:	2b00      	cmp	r3, #0
 801432a:	d102      	bne.n	8014332 <flashErase+0x96>
    {
      ret = true;
 801432c:	2301      	movs	r3, #1
 801432e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8014332:	f00a fb31 	bl	801e998 <HAL_FLASH_Lock>
  }

  return ret;
 8014336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801433a:	4618      	mov	r0, r3
 801433c:	3730      	adds	r7, #48	; 0x30
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}

08014342 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8014342:	b5b0      	push	{r4, r5, r7, lr}
 8014344:	b088      	sub	sp, #32
 8014346:	af00      	add	r7, sp, #0
 8014348:	60f8      	str	r0, [r7, #12]
 801434a:	60b9      	str	r1, [r7, #8]
 801434c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 801434e:	2301      	movs	r3, #1
 8014350:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 8014352:	f00a faff 	bl	801e954 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8014356:	2300      	movs	r3, #0
 8014358:	61bb      	str	r3, [r7, #24]
 801435a:	e01b      	b.n	8014394 <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	4413      	add	r3, r2
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8014366:	69ba      	ldr	r2, [r7, #24]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	18d1      	adds	r1, r2, r3
 801436c:	8afb      	ldrh	r3, [r7, #22]
 801436e:	2200      	movs	r2, #0
 8014370:	461c      	mov	r4, r3
 8014372:	4615      	mov	r5, r2
 8014374:	4622      	mov	r2, r4
 8014376:	462b      	mov	r3, r5
 8014378:	2000      	movs	r0, #0
 801437a:	f00a fa97 	bl	801e8ac <HAL_FLASH_Program>
 801437e:	4603      	mov	r3, r0
 8014380:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8014382:	7d7b      	ldrb	r3, [r7, #21]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <flashWrite+0x4c>
    {
      ret = false;
 8014388:	2300      	movs	r3, #0
 801438a:	77fb      	strb	r3, [r7, #31]
      break;
 801438c:	e006      	b.n	801439c <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 801438e:	69bb      	ldr	r3, [r7, #24]
 8014390:	3301      	adds	r3, #1
 8014392:	61bb      	str	r3, [r7, #24]
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	429a      	cmp	r2, r3
 801439a:	d8df      	bhi.n	801435c <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 801439c:	f00a fafc 	bl	801e998 <HAL_FLASH_Lock>

  return ret;
 80143a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3720      	adds	r7, #32
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080143ac <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b08b      	sub	sp, #44	; 0x2c
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	4603      	mov	r3, r0
 80143b4:	60b9      	str	r1, [r7, #8]
 80143b6:	607a      	str	r2, [r7, #4]
 80143b8:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80143ba:	2300      	movs	r3, #0
 80143bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80143c0:	89fb      	ldrh	r3, [r7, #14]
 80143c2:	4a25      	ldr	r2, [pc, #148]	; (8014458 <flashInSector+0xac>)
 80143c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80143c8:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80143ca:	89fb      	ldrh	r3, [r7, #14]
 80143cc:	4a22      	ldr	r2, [pc, #136]	; (8014458 <flashInSector+0xac>)
 80143ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80143d2:	89fb      	ldrh	r3, [r7, #14]
 80143d4:	4920      	ldr	r1, [pc, #128]	; (8014458 <flashInSector+0xac>)
 80143d6:	00db      	lsls	r3, r3, #3
 80143d8:	440b      	add	r3, r1
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	4413      	add	r3, r2
 80143de:	3b01      	subs	r3, #1
 80143e0:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80143e6:	68ba      	ldr	r2, [r7, #8]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4413      	add	r3, r2
 80143ec:	3b01      	subs	r3, #1
 80143ee:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80143f0:	6a3a      	ldr	r2, [r7, #32]
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d306      	bcc.n	8014406 <flashInSector+0x5a>
 80143f8:	6a3a      	ldr	r2, [r7, #32]
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d802      	bhi.n	8014406 <flashInSector+0x5a>
  {
    ret = true;
 8014400:	2301      	movs	r3, #1
 8014402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8014406:	69fa      	ldr	r2, [r7, #28]
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	429a      	cmp	r2, r3
 801440c:	d306      	bcc.n	801441c <flashInSector+0x70>
 801440e:	69fa      	ldr	r2, [r7, #28]
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	429a      	cmp	r2, r3
 8014414:	d802      	bhi.n	801441c <flashInSector+0x70>
  {
    ret = true;
 8014416:	2301      	movs	r3, #1
 8014418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	6a3b      	ldr	r3, [r7, #32]
 8014420:	429a      	cmp	r2, r3
 8014422:	d306      	bcc.n	8014432 <flashInSector+0x86>
 8014424:	69ba      	ldr	r2, [r7, #24]
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	429a      	cmp	r2, r3
 801442a:	d802      	bhi.n	8014432 <flashInSector+0x86>
  {
    ret = true;
 801442c:	2301      	movs	r3, #1
 801442e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8014432:	697a      	ldr	r2, [r7, #20]
 8014434:	6a3b      	ldr	r3, [r7, #32]
 8014436:	429a      	cmp	r2, r3
 8014438:	d306      	bcc.n	8014448 <flashInSector+0x9c>
 801443a:	697a      	ldr	r2, [r7, #20]
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	429a      	cmp	r2, r3
 8014440:	d802      	bhi.n	8014448 <flashInSector+0x9c>
  {
    ret = true;
 8014442:	2301      	movs	r3, #1
 8014444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8014448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801444c:	4618      	mov	r0, r3
 801444e:	372c      	adds	r7, #44	; 0x2c
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr
 8014458:	20000054 	.word	0x20000054

0801445c <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b08c      	sub	sp, #48	; 0x30
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8014464:	2300      	movs	r3, #0
 8014466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	2b01      	cmp	r3, #1
 8014470:	d121      	bne.n	80144b6 <cliFlash+0x5a>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	495c      	ldr	r1, [pc, #368]	; (80145e8 <cliFlash+0x18c>)
 8014478:	2000      	movs	r0, #0
 801447a:	4798      	blx	r3
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d019      	beq.n	80144b6 <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8014482:	2300      	movs	r3, #0
 8014484:	62bb      	str	r3, [r7, #40]	; 0x28
 8014486:	e010      	b.n	80144aa <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8014488:	4a58      	ldr	r2, [pc, #352]	; (80145ec <cliFlash+0x190>)
 801448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8014490:	4a56      	ldr	r2, [pc, #344]	; (80145ec <cliFlash+0x190>)
 8014492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	4413      	add	r3, r2
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	0a9b      	lsrs	r3, r3, #10
 801449c:	461a      	mov	r2, r3
 801449e:	4854      	ldr	r0, [pc, #336]	; (80145f0 <cliFlash+0x194>)
 80144a0:	f7fe ff56 	bl	8013350 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80144a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a6:	3301      	adds	r3, #1
 80144a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80144aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ac:	2b07      	cmp	r3, #7
 80144ae:	ddeb      	ble.n	8014488 <cliFlash+0x2c>
    }

    ret = true;
 80144b0:	2301      	movs	r3, #1
 80144b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	881b      	ldrh	r3, [r3, #0]
 80144ba:	2b03      	cmp	r3, #3
 80144bc:	d12b      	bne.n	8014516 <cliFlash+0xba>
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	695b      	ldr	r3, [r3, #20]
 80144c2:	494c      	ldr	r1, [pc, #304]	; (80145f4 <cliFlash+0x198>)
 80144c4:	2000      	movs	r0, #0
 80144c6:	4798      	blx	r3
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d023      	beq.n	8014516 <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	2001      	movs	r0, #1
 80144d4:	4798      	blx	r3
 80144d6:	4603      	mov	r3, r0
 80144d8:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	2002      	movs	r0, #2
 80144e0:	4798      	blx	r3
 80144e2:	4603      	mov	r3, r0
 80144e4:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 80144e6:	2300      	movs	r3, #0
 80144e8:	627b      	str	r3, [r7, #36]	; 0x24
 80144ea:	e00d      	b.n	8014508 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 80144ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144ee:	6a3b      	ldr	r3, [r7, #32]
 80144f0:	18d1      	adds	r1, r2, r3
 80144f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144f4:	6a3b      	ldr	r3, [r7, #32]
 80144f6:	4413      	add	r3, r2
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	461a      	mov	r2, r3
 80144fc:	483e      	ldr	r0, [pc, #248]	; (80145f8 <cliFlash+0x19c>)
 80144fe:	f7fe ff27 	bl	8013350 <cliPrintf>
    for (int i=0; i<length; i++)
 8014502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014504:	3301      	adds	r3, #1
 8014506:	627b      	str	r3, [r7, #36]	; 0x24
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	69fa      	ldr	r2, [r7, #28]
 801450c:	429a      	cmp	r2, r3
 801450e:	d8ed      	bhi.n	80144ec <cliFlash+0x90>
    }

    ret = true;
 8014510:	2301      	movs	r3, #1
 8014512:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	881b      	ldrh	r3, [r3, #0]
 801451a:	2b03      	cmp	r3, #3
 801451c:	d121      	bne.n	8014562 <cliFlash+0x106>
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	695b      	ldr	r3, [r3, #20]
 8014522:	4936      	ldr	r1, [pc, #216]	; (80145fc <cliFlash+0x1a0>)
 8014524:	2000      	movs	r0, #0
 8014526:	4798      	blx	r3
 8014528:	4603      	mov	r3, r0
 801452a:	2b00      	cmp	r3, #0
 801452c:	d019      	beq.n	8014562 <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	689b      	ldr	r3, [r3, #8]
 8014532:	2001      	movs	r0, #1
 8014534:	4798      	blx	r3
 8014536:	4603      	mov	r3, r0
 8014538:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	689b      	ldr	r3, [r3, #8]
 801453e:	2002      	movs	r0, #2
 8014540:	4798      	blx	r3
 8014542:	4603      	mov	r3, r0
 8014544:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8014546:	6979      	ldr	r1, [r7, #20]
 8014548:	69b8      	ldr	r0, [r7, #24]
 801454a:	f7ff fea7 	bl	801429c <flashErase>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	d003      	beq.n	801455c <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 8014554:	482a      	ldr	r0, [pc, #168]	; (8014600 <cliFlash+0x1a4>)
 8014556:	f7fe fefb 	bl	8013350 <cliPrintf>
 801455a:	e002      	b.n	8014562 <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 801455c:	4829      	ldr	r0, [pc, #164]	; (8014604 <cliFlash+0x1a8>)
 801455e:	f7fe fef7 	bl	8013350 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	2b03      	cmp	r3, #3
 8014568:	d127      	bne.n	80145ba <cliFlash+0x15e>
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	695b      	ldr	r3, [r3, #20]
 801456e:	4926      	ldr	r1, [pc, #152]	; (8014608 <cliFlash+0x1ac>)
 8014570:	2000      	movs	r0, #0
 8014572:	4798      	blx	r3
 8014574:	4603      	mov	r3, r0
 8014576:	2b00      	cmp	r3, #0
 8014578:	d01f      	beq.n	80145ba <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	689b      	ldr	r3, [r3, #8]
 801457e:	2001      	movs	r0, #1
 8014580:	4798      	blx	r3
 8014582:	4603      	mov	r3, r0
 8014584:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	2002      	movs	r0, #2
 801458c:	4798      	blx	r3
 801458e:	4603      	mov	r3, r0
 8014590:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8014592:	f107 030c 	add.w	r3, r7, #12
 8014596:	2204      	movs	r2, #4
 8014598:	4619      	mov	r1, r3
 801459a:	6938      	ldr	r0, [r7, #16]
 801459c:	f7ff fed1 	bl	8014342 <flashWrite>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d003      	beq.n	80145ae <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 80145a6:	4819      	ldr	r0, [pc, #100]	; (801460c <cliFlash+0x1b0>)
 80145a8:	f7fe fed2 	bl	8013350 <cliPrintf>
 80145ac:	e002      	b.n	80145b4 <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 80145ae:	4818      	ldr	r0, [pc, #96]	; (8014610 <cliFlash+0x1b4>)
 80145b0:	f7fe fece 	bl	8013350 <cliPrintf>
    }

    ret = true;
 80145b4:	2301      	movs	r3, #1
 80145b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 80145ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145be:	f083 0301 	eor.w	r3, r3, #1
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d00b      	beq.n	80145e0 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 80145c8:	4812      	ldr	r0, [pc, #72]	; (8014614 <cliFlash+0x1b8>)
 80145ca:	f7fe fec1 	bl	8013350 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 80145ce:	4812      	ldr	r0, [pc, #72]	; (8014618 <cliFlash+0x1bc>)
 80145d0:	f7fe febe 	bl	8013350 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 80145d4:	4811      	ldr	r0, [pc, #68]	; (801461c <cliFlash+0x1c0>)
 80145d6:	f7fe febb 	bl	8013350 <cliPrintf>
    cliPrintf("flash write addr data\n");
 80145da:	4811      	ldr	r0, [pc, #68]	; (8014620 <cliFlash+0x1c4>)
 80145dc:	f7fe feb8 	bl	8013350 <cliPrintf>
  }
}
 80145e0:	bf00      	nop
 80145e2:	3730      	adds	r7, #48	; 0x30
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	08029674 	.word	0x08029674
 80145ec:	20000054 	.word	0x20000054
 80145f0:	0802967c 	.word	0x0802967c
 80145f4:	0802968c 	.word	0x0802968c
 80145f8:	08029694 	.word	0x08029694
 80145fc:	080296a4 	.word	0x080296a4
 8014600:	080296ac 	.word	0x080296ac
 8014604:	080296b8 	.word	0x080296b8
 8014608:	080296c4 	.word	0x080296c4
 801460c:	080296cc 	.word	0x080296cc
 8014610:	080296d8 	.word	0x080296d8
 8014614:	080296e4 	.word	0x080296e4
 8014618:	080296f0 	.word	0x080296f0
 801461c:	0802970c 	.word	0x0802970c
 8014620:	08029728 	.word	0x08029728

08014624 <gpioInit>:
#endif



bool gpioInit(void)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b084      	sub	sp, #16
 8014628:	af00      	add	r7, sp, #0
  bool ret = true;
 801462a:	2301      	movs	r3, #1
 801462c:	72fb      	strb	r3, [r7, #11]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 801462e:	2300      	movs	r3, #0
 8014630:	607b      	str	r3, [r7, #4]
 8014632:	4b24      	ldr	r3, [pc, #144]	; (80146c4 <gpioInit+0xa0>)
 8014634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014636:	4a23      	ldr	r2, [pc, #140]	; (80146c4 <gpioInit+0xa0>)
 8014638:	f043 0301 	orr.w	r3, r3, #1
 801463c:	6313      	str	r3, [r2, #48]	; 0x30
 801463e:	4b21      	ldr	r3, [pc, #132]	; (80146c4 <gpioInit+0xa0>)
 8014640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014642:	f003 0301 	and.w	r3, r3, #1
 8014646:	607b      	str	r3, [r7, #4]
 8014648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801464a:	2300      	movs	r3, #0
 801464c:	603b      	str	r3, [r7, #0]
 801464e:	4b1d      	ldr	r3, [pc, #116]	; (80146c4 <gpioInit+0xa0>)
 8014650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014652:	4a1c      	ldr	r2, [pc, #112]	; (80146c4 <gpioInit+0xa0>)
 8014654:	f043 0302 	orr.w	r3, r3, #2
 8014658:	6313      	str	r3, [r2, #48]	; 0x30
 801465a:	4b1a      	ldr	r3, [pc, #104]	; (80146c4 <gpioInit+0xa0>)
 801465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801465e:	f003 0302 	and.w	r3, r3, #2
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8014666:	2300      	movs	r3, #0
 8014668:	60fb      	str	r3, [r7, #12]
 801466a:	e01e      	b.n	80146aa <gpioInit+0x86>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	b2d8      	uxtb	r0, r3
 8014670:	4915      	ldr	r1, [pc, #84]	; (80146c8 <gpioInit+0xa4>)
 8014672:	68fa      	ldr	r2, [r7, #12]
 8014674:	4613      	mov	r3, r2
 8014676:	005b      	lsls	r3, r3, #1
 8014678:	4413      	add	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	440b      	add	r3, r1
 801467e:	3308      	adds	r3, #8
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	4619      	mov	r1, r3
 8014684:	f000 f826 	bl	80146d4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	b2d8      	uxtb	r0, r3
 801468c:	490e      	ldr	r1, [pc, #56]	; (80146c8 <gpioInit+0xa4>)
 801468e:	68fa      	ldr	r2, [r7, #12]
 8014690:	4613      	mov	r3, r2
 8014692:	005b      	lsls	r3, r3, #1
 8014694:	4413      	add	r3, r2
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	440b      	add	r3, r1
 801469a:	330b      	adds	r3, #11
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	4619      	mov	r1, r3
 80146a0:	f000 f88a 	bl	80147b8 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	3301      	adds	r3, #1
 80146a8:	60fb      	str	r3, [r7, #12]
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	2b0a      	cmp	r3, #10
 80146ae:	dddd      	ble.n	801466c <gpioInit+0x48>
  }

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 80146b0:	4906      	ldr	r1, [pc, #24]	; (80146cc <gpioInit+0xa8>)
 80146b2:	4807      	ldr	r0, [pc, #28]	; (80146d0 <gpioInit+0xac>)
 80146b4:	f7fe ff5c 	bl	8013570 <cliAdd>
#endif

  return ret;
 80146b8:	7afb      	ldrb	r3, [r7, #11]
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3710      	adds	r7, #16
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}
 80146c2:	bf00      	nop
 80146c4:	40023800 	.word	0x40023800
 80146c8:	08029a08 	.word	0x08029a08
 80146cc:	08014915 	.word	0x08014915
 80146d0:	08029740 	.word	0x08029740

080146d4 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b088      	sub	sp, #32
 80146d8:	af00      	add	r7, sp, #0
 80146da:	4603      	mov	r3, r0
 80146dc:	460a      	mov	r2, r1
 80146de:	71fb      	strb	r3, [r7, #7]
 80146e0:	4613      	mov	r3, r2
 80146e2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80146e4:	2301      	movs	r3, #1
 80146e6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146e8:	f107 0308 	add.w	r3, r7, #8
 80146ec:	2200      	movs	r2, #0
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	605a      	str	r2, [r3, #4]
 80146f2:	609a      	str	r2, [r3, #8]
 80146f4:	60da      	str	r2, [r3, #12]
 80146f6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 80146f8:	79fb      	ldrb	r3, [r7, #7]
 80146fa:	2b0a      	cmp	r3, #10
 80146fc:	d901      	bls.n	8014702 <gpioPinMode+0x2e>
  {
    return false;
 80146fe:	2300      	movs	r3, #0
 8014700:	e054      	b.n	80147ac <gpioPinMode+0xd8>
  }

  switch(mode)
 8014702:	79bb      	ldrb	r3, [r7, #6]
 8014704:	2b06      	cmp	r3, #6
 8014706:	d838      	bhi.n	801477a <gpioPinMode+0xa6>
 8014708:	a201      	add	r2, pc, #4	; (adr r2, 8014710 <gpioPinMode+0x3c>)
 801470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470e:	bf00      	nop
 8014710:	0801472d 	.word	0x0801472d
 8014714:	08014737 	.word	0x08014737
 8014718:	08014741 	.word	0x08014741
 801471c:	0801474b 	.word	0x0801474b
 8014720:	08014755 	.word	0x08014755
 8014724:	0801475f 	.word	0x0801475f
 8014728:	08014769 	.word	0x08014769
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801472c:	2300      	movs	r3, #0
 801472e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014730:	2300      	movs	r3, #0
 8014732:	613b      	str	r3, [r7, #16]
      break;
 8014734:	e021      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014736:	2300      	movs	r3, #0
 8014738:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 801473a:	2301      	movs	r3, #1
 801473c:	613b      	str	r3, [r7, #16]
      break;
 801473e:	e01c      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014740:	2300      	movs	r3, #0
 8014742:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014744:	2302      	movs	r3, #2
 8014746:	613b      	str	r3, [r7, #16]
      break;
 8014748:	e017      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801474a:	2301      	movs	r3, #1
 801474c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801474e:	2300      	movs	r3, #0
 8014750:	613b      	str	r3, [r7, #16]
      break;
 8014752:	e012      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014754:	2301      	movs	r3, #1
 8014756:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014758:	2301      	movs	r3, #1
 801475a:	613b      	str	r3, [r7, #16]
      break;
 801475c:	e00d      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801475e:	2301      	movs	r3, #1
 8014760:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014762:	2302      	movs	r3, #2
 8014764:	613b      	str	r3, [r7, #16]
      break;
 8014766:	e008      	b.n	801477a <gpioPinMode+0xa6>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014768:	2302      	movs	r3, #2
 801476a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801476c:	2300      	movs	r3, #0
 801476e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014770:	2300      	movs	r3, #0
 8014772:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014774:	2302      	movs	r3, #2
 8014776:	61bb      	str	r3, [r7, #24]
      break;
 8014778:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 801477a:	79fa      	ldrb	r2, [r7, #7]
 801477c:	490d      	ldr	r1, [pc, #52]	; (80147b4 <gpioPinMode+0xe0>)
 801477e:	4613      	mov	r3, r2
 8014780:	005b      	lsls	r3, r3, #1
 8014782:	4413      	add	r3, r2
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	440b      	add	r3, r1
 8014788:	3304      	adds	r3, #4
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 801478e:	79fa      	ldrb	r2, [r7, #7]
 8014790:	4908      	ldr	r1, [pc, #32]	; (80147b4 <gpioPinMode+0xe0>)
 8014792:	4613      	mov	r3, r2
 8014794:	005b      	lsls	r3, r3, #1
 8014796:	4413      	add	r3, r2
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	440b      	add	r3, r1
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	f107 0208 	add.w	r2, r7, #8
 80147a2:	4611      	mov	r1, r2
 80147a4:	4618      	mov	r0, r3
 80147a6:	f00a fb69 	bl	801ee7c <HAL_GPIO_Init>

  return ret;
 80147aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3720      	adds	r7, #32
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	08029a08 	.word	0x08029a08

080147b8 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80147b8:	b590      	push	{r4, r7, lr}
 80147ba:	b083      	sub	sp, #12
 80147bc:	af00      	add	r7, sp, #0
 80147be:	4603      	mov	r3, r0
 80147c0:	460a      	mov	r2, r1
 80147c2:	71fb      	strb	r3, [r7, #7]
 80147c4:	4613      	mov	r3, r2
 80147c6:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80147c8:	79fb      	ldrb	r3, [r7, #7]
 80147ca:	2b0a      	cmp	r3, #10
 80147cc:	d840      	bhi.n	8014850 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80147ce:	79bb      	ldrb	r3, [r7, #6]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d01e      	beq.n	8014812 <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80147d4:	79fa      	ldrb	r2, [r7, #7]
 80147d6:	4920      	ldr	r1, [pc, #128]	; (8014858 <gpioPinWrite+0xa0>)
 80147d8:	4613      	mov	r3, r2
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	4413      	add	r3, r2
 80147de:	009b      	lsls	r3, r3, #2
 80147e0:	440b      	add	r3, r1
 80147e2:	6818      	ldr	r0, [r3, #0]
 80147e4:	79fa      	ldrb	r2, [r7, #7]
 80147e6:	491c      	ldr	r1, [pc, #112]	; (8014858 <gpioPinWrite+0xa0>)
 80147e8:	4613      	mov	r3, r2
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	4413      	add	r3, r2
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	440b      	add	r3, r1
 80147f2:	3304      	adds	r3, #4
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	b299      	uxth	r1, r3
 80147f8:	79fa      	ldrb	r2, [r7, #7]
 80147fa:	4c17      	ldr	r4, [pc, #92]	; (8014858 <gpioPinWrite+0xa0>)
 80147fc:	4613      	mov	r3, r2
 80147fe:	005b      	lsls	r3, r3, #1
 8014800:	4413      	add	r3, r2
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4423      	add	r3, r4
 8014806:	3309      	adds	r3, #9
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	461a      	mov	r2, r3
 801480c:	f00a fdb6 	bl	801f37c <HAL_GPIO_WritePin>
 8014810:	e01f      	b.n	8014852 <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8014812:	79fa      	ldrb	r2, [r7, #7]
 8014814:	4910      	ldr	r1, [pc, #64]	; (8014858 <gpioPinWrite+0xa0>)
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	009b      	lsls	r3, r3, #2
 801481e:	440b      	add	r3, r1
 8014820:	6818      	ldr	r0, [r3, #0]
 8014822:	79fa      	ldrb	r2, [r7, #7]
 8014824:	490c      	ldr	r1, [pc, #48]	; (8014858 <gpioPinWrite+0xa0>)
 8014826:	4613      	mov	r3, r2
 8014828:	005b      	lsls	r3, r3, #1
 801482a:	4413      	add	r3, r2
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	440b      	add	r3, r1
 8014830:	3304      	adds	r3, #4
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	b299      	uxth	r1, r3
 8014836:	79fa      	ldrb	r2, [r7, #7]
 8014838:	4c07      	ldr	r4, [pc, #28]	; (8014858 <gpioPinWrite+0xa0>)
 801483a:	4613      	mov	r3, r2
 801483c:	005b      	lsls	r3, r3, #1
 801483e:	4413      	add	r3, r2
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	4423      	add	r3, r4
 8014844:	330a      	adds	r3, #10
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	461a      	mov	r2, r3
 801484a:	f00a fd97 	bl	801f37c <HAL_GPIO_WritePin>
 801484e:	e000      	b.n	8014852 <gpioPinWrite+0x9a>
    return;
 8014850:	bf00      	nop
  }
}
 8014852:	370c      	adds	r7, #12
 8014854:	46bd      	mov	sp, r7
 8014856:	bd90      	pop	{r4, r7, pc}
 8014858:	08029a08 	.word	0x08029a08

0801485c <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	4603      	mov	r3, r0
 8014864:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8014866:	2300      	movs	r3, #0
 8014868:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 801486a:	79fb      	ldrb	r3, [r7, #7]
 801486c:	2b0a      	cmp	r3, #10
 801486e:	d901      	bls.n	8014874 <gpioPinRead+0x18>
  {
    return false;
 8014870:	2300      	movs	r3, #0
 8014872:	e024      	b.n	80148be <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8014874:	79fa      	ldrb	r2, [r7, #7]
 8014876:	4914      	ldr	r1, [pc, #80]	; (80148c8 <gpioPinRead+0x6c>)
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	009b      	lsls	r3, r3, #2
 8014880:	440b      	add	r3, r1
 8014882:	6818      	ldr	r0, [r3, #0]
 8014884:	79fa      	ldrb	r2, [r7, #7]
 8014886:	4910      	ldr	r1, [pc, #64]	; (80148c8 <gpioPinRead+0x6c>)
 8014888:	4613      	mov	r3, r2
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	4413      	add	r3, r2
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	440b      	add	r3, r1
 8014892:	3304      	adds	r3, #4
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	b29b      	uxth	r3, r3
 8014898:	4619      	mov	r1, r3
 801489a:	f00a fd57 	bl	801f34c <HAL_GPIO_ReadPin>
 801489e:	4603      	mov	r3, r0
 80148a0:	4618      	mov	r0, r3
 80148a2:	79fa      	ldrb	r2, [r7, #7]
 80148a4:	4908      	ldr	r1, [pc, #32]	; (80148c8 <gpioPinRead+0x6c>)
 80148a6:	4613      	mov	r3, r2
 80148a8:	005b      	lsls	r3, r3, #1
 80148aa:	4413      	add	r3, r2
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	440b      	add	r3, r1
 80148b0:	3309      	adds	r3, #9
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	4298      	cmp	r0, r3
 80148b6:	d101      	bne.n	80148bc <gpioPinRead+0x60>
  {
    ret = true;
 80148b8:	2301      	movs	r3, #1
 80148ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80148bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08029a08 	.word	0x08029a08

080148cc <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	4603      	mov	r3, r0
 80148d4:	71fb      	strb	r3, [r7, #7]
  if (ch >= GPIO_MAX_CH)
 80148d6:	79fb      	ldrb	r3, [r7, #7]
 80148d8:	2b0a      	cmp	r3, #10
 80148da:	d815      	bhi.n	8014908 <gpioPinToggle+0x3c>
  {
    return;
  }

  HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 80148dc:	79fa      	ldrb	r2, [r7, #7]
 80148de:	490c      	ldr	r1, [pc, #48]	; (8014910 <gpioPinToggle+0x44>)
 80148e0:	4613      	mov	r3, r2
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	4413      	add	r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	440b      	add	r3, r1
 80148ea:	6818      	ldr	r0, [r3, #0]
 80148ec:	79fa      	ldrb	r2, [r7, #7]
 80148ee:	4908      	ldr	r1, [pc, #32]	; (8014910 <gpioPinToggle+0x44>)
 80148f0:	4613      	mov	r3, r2
 80148f2:	005b      	lsls	r3, r3, #1
 80148f4:	4413      	add	r3, r2
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	440b      	add	r3, r1
 80148fa:	3304      	adds	r3, #4
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	b29b      	uxth	r3, r3
 8014900:	4619      	mov	r1, r3
 8014902:	f00a fd54 	bl	801f3ae <HAL_GPIO_TogglePin>
 8014906:	e000      	b.n	801490a <gpioPinToggle+0x3e>
    return;
 8014908:	bf00      	nop
}
 801490a:	3708      	adds	r7, #8
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	08029a08 	.word	0x08029a08

08014914 <cliGpio>:



#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8014914:	b590      	push	{r4, r7, lr}
 8014916:	b087      	sub	sp, #28
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 801491c:	2300      	movs	r3, #0
 801491e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	881b      	ldrh	r3, [r3, #0]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d128      	bne.n	801497a <cliGpio+0x66>
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	695b      	ldr	r3, [r3, #20]
 801492c:	4947      	ldr	r1, [pc, #284]	; (8014a4c <cliGpio+0x138>)
 801492e:	2000      	movs	r0, #0
 8014930:	4798      	blx	r3
 8014932:	4603      	mov	r3, r0
 8014934:	2b00      	cmp	r3, #0
 8014936:	d020      	beq.n	801497a <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8014938:	e018      	b.n	801496c <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 801493a:	2300      	movs	r3, #0
 801493c:	613b      	str	r3, [r7, #16]
 801493e:	e00c      	b.n	801495a <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	b2db      	uxtb	r3, r3
 8014944:	4618      	mov	r0, r3
 8014946:	f7ff ff89 	bl	801485c <gpioPinRead>
 801494a:	4603      	mov	r3, r0
 801494c:	4619      	mov	r1, r3
 801494e:	4840      	ldr	r0, [pc, #256]	; (8014a50 <cliGpio+0x13c>)
 8014950:	f7fe fcfe 	bl	8013350 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	3301      	adds	r3, #1
 8014958:	613b      	str	r3, [r7, #16]
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	2b0a      	cmp	r3, #10
 801495e:	ddef      	ble.n	8014940 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8014960:	483c      	ldr	r0, [pc, #240]	; (8014a54 <cliGpio+0x140>)
 8014962:	f7fe fcf5 	bl	8013350 <cliPrintf>
      delay(100);
 8014966:	2064      	movs	r0, #100	; 0x64
 8014968:	f7fd fe58 	bl	801261c <delay>
    while(cliKeepLoop())
 801496c:	f7fe fdea 	bl	8013544 <cliKeepLoop>
 8014970:	4603      	mov	r3, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d1e1      	bne.n	801493a <cliGpio+0x26>
    }
    ret = true;
 8014976:	2301      	movs	r3, #1
 8014978:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	2b02      	cmp	r3, #2
 8014980:	d123      	bne.n	80149ca <cliGpio+0xb6>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	695b      	ldr	r3, [r3, #20]
 8014986:	4934      	ldr	r1, [pc, #208]	; (8014a58 <cliGpio+0x144>)
 8014988:	2000      	movs	r0, #0
 801498a:	4798      	blx	r3
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d01b      	beq.n	80149ca <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	689b      	ldr	r3, [r3, #8]
 8014996:	2001      	movs	r0, #1
 8014998:	4798      	blx	r3
 801499a:	4603      	mov	r3, r0
 801499c:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 801499e:	e00d      	b.n	80149bc <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80149a0:	7bfc      	ldrb	r4, [r7, #15]
 80149a2:	7bfb      	ldrb	r3, [r7, #15]
 80149a4:	4618      	mov	r0, r3
 80149a6:	f7ff ff59 	bl	801485c <gpioPinRead>
 80149aa:	4603      	mov	r3, r0
 80149ac:	461a      	mov	r2, r3
 80149ae:	4621      	mov	r1, r4
 80149b0:	482a      	ldr	r0, [pc, #168]	; (8014a5c <cliGpio+0x148>)
 80149b2:	f7fe fccd 	bl	8013350 <cliPrintf>
      delay(100);
 80149b6:	2064      	movs	r0, #100	; 0x64
 80149b8:	f7fd fe30 	bl	801261c <delay>
    while(cliKeepLoop())
 80149bc:	f7fe fdc2 	bl	8013544 <cliKeepLoop>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d1ec      	bne.n	80149a0 <cliGpio+0x8c>
    }

    ret = true;
 80149c6:	2301      	movs	r3, #1
 80149c8:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	2b03      	cmp	r3, #3
 80149d0:	d126      	bne.n	8014a20 <cliGpio+0x10c>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	695b      	ldr	r3, [r3, #20]
 80149d6:	4922      	ldr	r1, [pc, #136]	; (8014a60 <cliGpio+0x14c>)
 80149d8:	2000      	movs	r0, #0
 80149da:	4798      	blx	r3
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d01e      	beq.n	8014a20 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	689b      	ldr	r3, [r3, #8]
 80149e6:	2001      	movs	r0, #1
 80149e8:	4798      	blx	r3
 80149ea:	4603      	mov	r3, r0
 80149ec:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	2002      	movs	r0, #2
 80149f4:	4798      	blx	r3
 80149f6:	4603      	mov	r3, r0
 80149f8:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 80149fa:	7b7b      	ldrb	r3, [r7, #13]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	bf14      	ite	ne
 8014a00:	2301      	movne	r3, #1
 8014a02:	2300      	moveq	r3, #0
 8014a04:	b2da      	uxtb	r2, r3
 8014a06:	7bbb      	ldrb	r3, [r7, #14]
 8014a08:	4611      	mov	r1, r2
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7ff fed4 	bl	80147b8 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8014a10:	7bbb      	ldrb	r3, [r7, #14]
 8014a12:	7b7a      	ldrb	r2, [r7, #13]
 8014a14:	4619      	mov	r1, r3
 8014a16:	4813      	ldr	r0, [pc, #76]	; (8014a64 <cliGpio+0x150>)
 8014a18:	f7fe fc9a 	bl	8013350 <cliPrintf>
    ret = true;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8014a20:	7dfb      	ldrb	r3, [r7, #23]
 8014a22:	f083 0301 	eor.w	r3, r3, #1
 8014a26:	b2db      	uxtb	r3, r3
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d00a      	beq.n	8014a42 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8014a2c:	480e      	ldr	r0, [pc, #56]	; (8014a68 <cliGpio+0x154>)
 8014a2e:	f7fe fc8f 	bl	8013350 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8014a32:	210a      	movs	r1, #10
 8014a34:	480d      	ldr	r0, [pc, #52]	; (8014a6c <cliGpio+0x158>)
 8014a36:	f7fe fc8b 	bl	8013350 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8014a3a:	210a      	movs	r1, #10
 8014a3c:	480c      	ldr	r0, [pc, #48]	; (8014a70 <cliGpio+0x15c>)
 8014a3e:	f7fe fc87 	bl	8013350 <cliPrintf>
  }
}
 8014a42:	bf00      	nop
 8014a44:	371c      	adds	r7, #28
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd90      	pop	{r4, r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	08029748 	.word	0x08029748
 8014a50:	08029750 	.word	0x08029750
 8014a54:	08029754 	.word	0x08029754
 8014a58:	08029758 	.word	0x08029758
 8014a5c:	08029760 	.word	0x08029760
 8014a60:	08029774 	.word	0x08029774
 8014a64:	0802977c 	.word	0x0802977c
 8014a68:	08029790 	.word	0x08029790
 8014a6c:	0802979c 	.word	0x0802979c
 8014a70:	080297b0 	.word	0x080297b0

08014a74 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8014a78:	f7fd fddb 	bl	8012632 <millis>
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	4b0d      	ldr	r3, [pc, #52]	; (8014ab4 <TransferDoneISR+0x40>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	1ad3      	subs	r3, r2, r3
 8014a84:	4a0c      	ldr	r2, [pc, #48]	; (8014ab8 <TransferDoneISR+0x44>)
 8014a86:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8014a88:	f7fd fdd3 	bl	8012632 <millis>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	4a09      	ldr	r2, [pc, #36]	; (8014ab4 <TransferDoneISR+0x40>)
 8014a90:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 8014a92:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <TransferDoneISR+0x44>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d007      	beq.n	8014aaa <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8014a9a:	4b07      	ldr	r3, [pc, #28]	; (8014ab8 <TransferDoneISR+0x44>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014aa6:	4a05      	ldr	r2, [pc, #20]	; (8014abc <TransferDoneISR+0x48>)
 8014aa8:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8014aaa:	4b05      	ldr	r3, [pc, #20]	; (8014ac0 <TransferDoneISR+0x4c>)
 8014aac:	2200      	movs	r2, #0
 8014aae:	701a      	strb	r2, [r3, #0]
}
 8014ab0:	bf00      	nop
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	20000a74 	.word	0x20000a74
 8014ab8:	20000a78 	.word	0x20000a78
 8014abc:	20000a7c 	.word	0x20000a7c
 8014ac0:	20000a72 	.word	0x20000a72

08014ac4 <lcdInit>:


bool lcdInit(void)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8014aca:	4b27      	ldr	r3, [pc, #156]	; (8014b68 <lcdInit+0xa4>)
 8014acc:	2264      	movs	r2, #100	; 0x64
 8014ace:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  is_init = st7735Init();
 8014ad0:	f004 f8de 	bl	8018c90 <st7735Init>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	4b24      	ldr	r3, [pc, #144]	; (8014b6c <lcdInit+0xa8>)
 8014ada:	701a      	strb	r2, [r3, #0]
  st7735InitDriver(&lcd);
 8014adc:	4824      	ldr	r0, [pc, #144]	; (8014b70 <lcdInit+0xac>)
 8014ade:	f004 f8e3 	bl	8018ca8 <st7735InitDriver>
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
  ssd1306InitDriver(&lcd);
#endif

  lcd.setCallBack(TransferDoneISR);
 8014ae2:	4b23      	ldr	r3, [pc, #140]	; (8014b70 <lcdInit+0xac>)
 8014ae4:	695b      	ldr	r3, [r3, #20]
 8014ae6:	4823      	ldr	r0, [pc, #140]	; (8014b74 <lcdInit+0xb0>)
 8014ae8:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8014aea:	2300      	movs	r3, #0
 8014aec:	607b      	str	r3, [r7, #4]
 8014aee:	e007      	b.n	8014b00 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8014af0:	4a21      	ldr	r2, [pc, #132]	; (8014b78 <lcdInit+0xb4>)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	2100      	movs	r1, #0
 8014af6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	3301      	adds	r3, #1
 8014afe:	607b      	str	r3, [r7, #4]
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8014b06:	dbf3      	blt.n	8014af0 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8014b08:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	481a      	ldr	r0, [pc, #104]	; (8014b78 <lcdInit+0xb4>)
 8014b10:	f010 f8a6 	bl	8024c60 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8014b14:	4b19      	ldr	r3, [pc, #100]	; (8014b7c <lcdInit+0xb8>)
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	461a      	mov	r2, r3
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	4413      	add	r3, r2
 8014b20:	035b      	lsls	r3, r3, #13
 8014b22:	4a15      	ldr	r2, [pc, #84]	; (8014b78 <lcdInit+0xb4>)
 8014b24:	4413      	add	r3, r2
 8014b26:	4a16      	ldr	r2, [pc, #88]	; (8014b80 <lcdInit+0xbc>)
 8014b28:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	9300      	str	r3, [sp, #0]
 8014b2e:	2380      	movs	r3, #128	; 0x80
 8014b30:	22a0      	movs	r2, #160	; 0xa0
 8014b32:	2100      	movs	r1, #0
 8014b34:	2000      	movs	r0, #0
 8014b36:	f000 fbdf 	bl	80152f8 <lcdDrawFillRect>
  lcdUpdateDraw();
 8014b3a:	f000 fa93 	bl	8015064 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8014b3e:	2064      	movs	r0, #100	; 0x64
 8014b40:	f000 f824 	bl	8014b8c <lcdSetBackLight>


  if (is_init != true)
 8014b44:	4b09      	ldr	r3, [pc, #36]	; (8014b6c <lcdInit+0xa8>)
 8014b46:	781b      	ldrb	r3, [r3, #0]
 8014b48:	f083 0301 	eor.w	r3, r3, #1
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d001      	beq.n	8014b56 <lcdInit+0x92>
  {
    return false;
 8014b52:	2300      	movs	r3, #0
 8014b54:	e004      	b.n	8014b60 <lcdInit+0x9c>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8014b56:	490b      	ldr	r1, [pc, #44]	; (8014b84 <lcdInit+0xc0>)
 8014b58:	480b      	ldr	r0, [pc, #44]	; (8014b88 <lcdInit+0xc4>)
 8014b5a:	f7fe fd09 	bl	8013570 <cliAdd>
#endif

  return true;
 8014b5e:	2301      	movs	r3, #1
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	20000094 	.word	0x20000094
 8014b6c:	20000a70 	.word	0x20000a70
 8014b70:	20000a54 	.word	0x20000a54
 8014b74:	08014a75 	.word	0x08014a75
 8014b78:	20000ac0 	.word	0x20000ac0
 8014b7c:	20000a71 	.word	0x20000a71
 8014b80:	20000a80 	.word	0x20000a80
 8014b84:	080157c5 	.word	0x080157c5
 8014b88:	08029a8c 	.word	0x08029a8c

08014b8c <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b082      	sub	sp, #8
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	4603      	mov	r3, r0
 8014b94:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8014b96:	79fb      	ldrb	r3, [r7, #7]
 8014b98:	2b64      	cmp	r3, #100	; 0x64
 8014b9a:	bf28      	it	cs
 8014b9c:	2364      	movcs	r3, #100	; 0x64
 8014b9e:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8014ba0:	4b0c      	ldr	r3, [pc, #48]	; (8014bd4 <lcdSetBackLight+0x48>)
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	79fa      	ldrb	r2, [r7, #7]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	d002      	beq.n	8014bb0 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 8014baa:	4a0a      	ldr	r2, [pc, #40]	; (8014bd4 <lcdSetBackLight+0x48>)
 8014bac:	79fb      	ldrb	r3, [r7, #7]
 8014bae:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8014bb0:	4b08      	ldr	r3, [pc, #32]	; (8014bd4 <lcdSetBackLight+0x48>)
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d004      	beq.n	8014bc2 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8014bb8:	2101      	movs	r1, #1
 8014bba:	2001      	movs	r0, #1
 8014bbc:	f7ff fdfc 	bl	80147b8 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8014bc0:	e003      	b.n	8014bca <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8014bc2:	2100      	movs	r1, #0
 8014bc4:	2001      	movs	r0, #1
 8014bc6:	f7ff fdf7 	bl	80147b8 <gpioPinWrite>
}
 8014bca:	bf00      	nop
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	20000094 	.word	0x20000094

08014bd8 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8014bd8:	4b04      	ldr	r3, [pc, #16]	; (8014bec <lcdDrawPixel+0x14>)
 8014bda:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8014be4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop
 8014bec:	20000a80 	.word	0x20000a80

08014bf0 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8014bf0:	b510      	push	{r4, lr}
 8014bf2:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8014bf4:	f000 fa62 	bl	80150bc <lcdGetFrameBuffer>
 8014bf8:	f500 411f 	add.w	r1, r0, #40704	; 0x9f00

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8014bfc:	b2a2      	uxth	r2, r4
 8014bfe:	1e83      	subs	r3, r0, #2
 8014c00:	31fe      	adds	r1, #254	; 0xfe
 8014c02:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8014c06:	428b      	cmp	r3, r1
 8014c08:	d1fb      	bne.n	8014c02 <lcdClearBuffer+0x12>
  }
}
 8014c0a:	bd10      	pop	{r4, pc}

08014c0c <lcdDrawCircleHelper>:
    lcdDrawHLine(x0 - x, y0 - r, 2 * x+1, color);
  }
}

LCD_OPT_DEF void lcdDrawCircleHelper( int32_t x0, int32_t y0, int32_t r, uint8_t cornername, uint32_t color)
{
 8014c0c:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8014c10:	4616      	mov	r6, r2
 8014c12:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -2 * r;
  int32_t x     = 0;

  while (x < r)
 8014c14:	2e00      	cmp	r6, #0
{
 8014c16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -2 * r;
 8014c18:	ebc6 7bc6 	rsb	fp, r6, r6, lsl #31
  while (x < r)
 8014c1c:	f340 808d 	ble.w	8014d3a <lcdDrawCircleHelper+0x12e>
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4)
    {
      lcdDrawPixel(x0 + x, y0 + r, color);
 8014c20:	fa1f f981 	uxth.w	r9, r1
 8014c24:	f003 0104 	and.w	r1, r3, #4
 8014c28:	9103      	str	r1, [sp, #12]
 8014c2a:	f003 0102 	and.w	r1, r3, #2
 8014c2e:	9101      	str	r1, [sp, #4]
 8014c30:	f003 0108 	and.w	r1, r3, #8
 8014c34:	f003 0301 	and.w	r3, r3, #1
 8014c38:	f1c6 0401 	rsb	r4, r6, #1
 8014c3c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014c40:	fa1f f880 	uxth.w	r8, r0
 8014c44:	9102      	str	r1, [sp, #8]
 8014c46:	9304      	str	r3, [sp, #16]
  int32_t x     = 0;
 8014c48:	2500      	movs	r5, #0
 8014c4a:	e00a      	b.n	8014c62 <lcdDrawCircleHelper+0x56>
      lcdDrawPixel(x0 + r, y0 + x, color);
    }
    if (cornername & 0x2)
 8014c4c:	9b01      	ldr	r3, [sp, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d12c      	bne.n	8014cac <lcdDrawCircleHelper+0xa0>
    {
      lcdDrawPixel(x0 + x, y0 - r, color);
      lcdDrawPixel(x0 + r, y0 - x, color);
    }
    if (cornername & 0x8)
 8014c52:	9b02      	ldr	r3, [sp, #8]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d141      	bne.n	8014cdc <lcdDrawCircleHelper+0xd0>
    {
      lcdDrawPixel(x0 - r, y0 + x, color);
      lcdDrawPixel(x0 - x, y0 + r, color);
    }
    if (cornername & 0x1)
 8014c58:	9b04      	ldr	r3, [sp, #16]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d156      	bne.n	8014d0c <lcdDrawCircleHelper+0x100>
  while (x < r)
 8014c5e:	42ae      	cmp	r6, r5
 8014c60:	dd6b      	ble.n	8014d3a <lcdDrawCircleHelper+0x12e>
    if (f >= 0)
 8014c62:	2c00      	cmp	r4, #0
 8014c64:	db03      	blt.n	8014c6e <lcdDrawCircleHelper+0x62>
      ddF_y += 2;
 8014c66:	f10b 0b02 	add.w	fp, fp, #2
      r--;
 8014c6a:	3e01      	subs	r6, #1
      f     += ddF_y;
 8014c6c:	445c      	add	r4, fp
    x++;
 8014c6e:	3501      	adds	r5, #1
    if (cornername & 0x4)
 8014c70:	9b03      	ldr	r3, [sp, #12]
    f     += ddF_x;
 8014c72:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8014c76:	3401      	adds	r4, #1
    if (cornername & 0x4)
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d0e7      	beq.n	8014c4c <lcdDrawCircleHelper+0x40>
      lcdDrawPixel(x0 + x, y0 + r, color);
 8014c7c:	b2b3      	uxth	r3, r6
 8014c7e:	fa1f fa85 	uxth.w	sl, r5
 8014c82:	eb09 0103 	add.w	r1, r9, r3
 8014c86:	eb08 000a 	add.w	r0, r8, sl
 8014c8a:	b289      	uxth	r1, r1
 8014c8c:	b280      	uxth	r0, r0
 8014c8e:	9305      	str	r3, [sp, #20]
 8014c90:	f7ff ffa2 	bl	8014bd8 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 + x, color);
 8014c94:	9b05      	ldr	r3, [sp, #20]
 8014c96:	eb09 010a 	add.w	r1, r9, sl
 8014c9a:	eb08 0003 	add.w	r0, r8, r3
 8014c9e:	b289      	uxth	r1, r1
 8014ca0:	b280      	uxth	r0, r0
 8014ca2:	f7ff ff99 	bl	8014bd8 <lcdDrawPixel>
    if (cornername & 0x2)
 8014ca6:	9b01      	ldr	r3, [sp, #4]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d0d2      	beq.n	8014c52 <lcdDrawCircleHelper+0x46>
      lcdDrawPixel(x0 + x, y0 - r, color);
 8014cac:	b2b3      	uxth	r3, r6
 8014cae:	fa1f fa85 	uxth.w	sl, r5
 8014cb2:	eba9 0103 	sub.w	r1, r9, r3
 8014cb6:	eb08 000a 	add.w	r0, r8, sl
 8014cba:	b289      	uxth	r1, r1
 8014cbc:	b280      	uxth	r0, r0
 8014cbe:	9305      	str	r3, [sp, #20]
 8014cc0:	f7ff ff8a 	bl	8014bd8 <lcdDrawPixel>
      lcdDrawPixel(x0 + r, y0 - x, color);
 8014cc4:	9b05      	ldr	r3, [sp, #20]
 8014cc6:	eba9 010a 	sub.w	r1, r9, sl
 8014cca:	eb08 0003 	add.w	r0, r8, r3
 8014cce:	b289      	uxth	r1, r1
 8014cd0:	b280      	uxth	r0, r0
 8014cd2:	f7ff ff81 	bl	8014bd8 <lcdDrawPixel>
    if (cornername & 0x8)
 8014cd6:	9b02      	ldr	r3, [sp, #8]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d0bd      	beq.n	8014c58 <lcdDrawCircleHelper+0x4c>
 8014cdc:	b2ab      	uxth	r3, r5
      lcdDrawPixel(x0 - r, y0 + x, color);
 8014cde:	fa1f fa86 	uxth.w	sl, r6
 8014ce2:	eb09 0103 	add.w	r1, r9, r3
 8014ce6:	eba8 000a 	sub.w	r0, r8, sl
 8014cea:	b289      	uxth	r1, r1
 8014cec:	b280      	uxth	r0, r0
 8014cee:	9305      	str	r3, [sp, #20]
 8014cf0:	f7ff ff72 	bl	8014bd8 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 + r, color);
 8014cf4:	9b05      	ldr	r3, [sp, #20]
 8014cf6:	eb0a 0109 	add.w	r1, sl, r9
 8014cfa:	eba8 0003 	sub.w	r0, r8, r3
 8014cfe:	b289      	uxth	r1, r1
 8014d00:	b280      	uxth	r0, r0
 8014d02:	f7ff ff69 	bl	8014bd8 <lcdDrawPixel>
    if (cornername & 0x1)
 8014d06:	9b04      	ldr	r3, [sp, #16]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d0a8      	beq.n	8014c5e <lcdDrawCircleHelper+0x52>
 8014d0c:	b2ab      	uxth	r3, r5
    {
      lcdDrawPixel(x0 - r, y0 - x, color);
 8014d0e:	fa1f fa86 	uxth.w	sl, r6
 8014d12:	eba9 0103 	sub.w	r1, r9, r3
 8014d16:	eba8 000a 	sub.w	r0, r8, sl
 8014d1a:	b289      	uxth	r1, r1
 8014d1c:	b280      	uxth	r0, r0
 8014d1e:	9305      	str	r3, [sp, #20]
 8014d20:	f7ff ff5a 	bl	8014bd8 <lcdDrawPixel>
      lcdDrawPixel(x0 - x, y0 - r, color);
 8014d24:	9b05      	ldr	r3, [sp, #20]
 8014d26:	eba9 010a 	sub.w	r1, r9, sl
 8014d2a:	eba8 0003 	sub.w	r0, r8, r3
 8014d2e:	b289      	uxth	r1, r1
 8014d30:	b280      	uxth	r0, r0
 8014d32:	f7ff ff51 	bl	8014bd8 <lcdDrawPixel>
  while (x < r)
 8014d36:	42ae      	cmp	r6, r5
 8014d38:	dc93      	bgt.n	8014c62 <lcdDrawCircleHelper+0x56>
    }
  }
}
 8014d3a:	b006      	add	sp, #24
 8014d3c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

08014d40 <lcdDrawRoundRect>:

LCD_OPT_DEF void lcdDrawRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8014d40:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8014d44:	b08a      	sub	sp, #40	; 0x28
 8014d46:	4694      	mov	ip, r2
 8014d48:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // smarter version
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8014d4a:	f8cd c00c 	str.w	ip, [sp, #12]
 8014d4e:	fa1f f886 	uxth.w	r8, r6
 8014d52:	ea4f 0248 	mov.w	r2, r8, lsl #1
{
 8014d56:	460c      	mov	r4, r1
 8014d58:	b291      	uxth	r1, r2
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8014d5a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
{
 8014d5e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8014d62:	4605      	mov	r5, r0
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8014d64:	b280      	uxth	r0, r0
 8014d66:	e9cd 2106 	strd	r2, r1, [sp, #24]
 8014d6a:	9005      	str	r0, [sp, #20]
 8014d6c:	1a52      	subs	r2, r2, r1
 8014d6e:	4440      	add	r0, r8
{
 8014d70:	4699      	mov	r9, r3
  lcdDrawHLine(x + r    , y        , w - r - r, color); // Top
 8014d72:	b200      	sxth	r0, r0
 8014d74:	fa1f f38a 	uxth.w	r3, sl
 8014d78:	b212      	sxth	r2, r2
 8014d7a:	b221      	sxth	r1, r4
 8014d7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d80:	9004      	str	r0, [sp, #16]
 8014d82:	f000 fa93 	bl	80152ac <lcdDrawHLine>
  lcdDrawHLine(x + r    , y + h - 1, w - r - r, color); // Bottom
 8014d86:	9804      	ldr	r0, [sp, #16]
 8014d88:	f8cd 9010 	str.w	r9, [sp, #16]
 8014d8c:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 8014d90:	9a08      	ldr	r2, [sp, #32]
 8014d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d94:	9308      	str	r3, [sp, #32]
 8014d96:	fa1f fb84 	uxth.w	fp, r4
 8014d9a:	f109 31ff 	add.w	r1, r9, #4294967295
 8014d9e:	4459      	add	r1, fp
 8014da0:	b209      	sxth	r1, r1
 8014da2:	f000 fa83 	bl	80152ac <lcdDrawHLine>
  lcdDrawVLine(x        , y + r    , h - r - r, color); // Left
 8014da6:	9b07      	ldr	r3, [sp, #28]
 8014da8:	eb08 010b 	add.w	r1, r8, fp
 8014dac:	eba9 0203 	sub.w	r2, r9, r3
 8014db0:	9b08      	ldr	r3, [sp, #32]
 8014db2:	b209      	sxth	r1, r1
 8014db4:	b212      	sxth	r2, r2
 8014db6:	b228      	sxth	r0, r5
 8014db8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014dbc:	9107      	str	r1, [sp, #28]
 8014dbe:	f000 fa4f 	bl	8015260 <lcdDrawVLine>
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8014dc2:	9a06      	ldr	r2, [sp, #24]
 8014dc4:	9b05      	ldr	r3, [sp, #20]
 8014dc6:	9907      	ldr	r1, [sp, #28]
 8014dc8:	1e50      	subs	r0, r2, #1
 8014dca:	4418      	add	r0, r3

  // draw four corners
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8014dcc:	eb05 0806 	add.w	r8, r5, r6
  lcdDrawVLine(x + w - 1, y + r    , h - r - r, color); // Right
 8014dd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014dd4:	b200      	sxth	r0, r0
 8014dd6:	f000 fa43 	bl	8015260 <lcdDrawVLine>
  lcdDrawCircleHelper(x + r        , y + r        , r, 1, color);
 8014dda:	1931      	adds	r1, r6, r4
 8014ddc:	4632      	mov	r2, r6
 8014dde:	4640      	mov	r0, r8
 8014de0:	f8cd a000 	str.w	sl, [sp]
 8014de4:	2301      	movs	r3, #1
 8014de6:	9105      	str	r1, [sp, #20]
 8014de8:	f7ff ff10 	bl	8014c0c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + r        , r, 2, color);
 8014dec:	9803      	ldr	r0, [sp, #12]
 8014dee:	9905      	ldr	r1, [sp, #20]
 8014df0:	f8cd a000 	str.w	sl, [sp]
 8014df4:	4428      	add	r0, r5
 8014df6:	1b80      	subs	r0, r0, r6
 8014df8:	3801      	subs	r0, #1
 8014dfa:	4632      	mov	r2, r6
 8014dfc:	2302      	movs	r3, #2
 8014dfe:	9003      	str	r0, [sp, #12]
 8014e00:	f7ff ff04 	bl	8014c0c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8014e04:	9904      	ldr	r1, [sp, #16]
 8014e06:	9803      	ldr	r0, [sp, #12]
 8014e08:	f8cd a000 	str.w	sl, [sp]
 8014e0c:	4421      	add	r1, r4
 8014e0e:	1b89      	subs	r1, r1, r6
 8014e10:	3901      	subs	r1, #1
 8014e12:	4632      	mov	r2, r6
 8014e14:	2304      	movs	r3, #4
 8014e16:	9103      	str	r1, [sp, #12]
 8014e18:	f7ff fef8 	bl	8014c0c <lcdDrawCircleHelper>
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8014e1c:	9903      	ldr	r1, [sp, #12]
 8014e1e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8014e22:	2308      	movs	r3, #8
 8014e24:	4632      	mov	r2, r6
 8014e26:	4640      	mov	r0, r8
}
 8014e28:	b00a      	add	sp, #40	; 0x28
 8014e2a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  lcdDrawCircleHelper(x + r        , y + h - r - 1, r, 8, color);
 8014e2e:	f7ff beed 	b.w	8014c0c <lcdDrawCircleHelper>
 8014e32:	bf00      	nop

08014e34 <lcdDrawFillCircleHelper>:

LCD_OPT_DEF void lcdDrawFillCircleHelper(int32_t x0, int32_t y0, int32_t r, uint8_t cornername, int32_t delta, uint32_t color)
{
 8014e34:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8014e38:	4690      	mov	r8, r2
 8014e3a:	b086      	sub	sp, #24
  int32_t f     = 1 - r;
  int32_t ddF_x = 1;
  int32_t ddF_y = -r - r;
 8014e3c:	f1c8 0a00 	rsb	sl, r8, #0
  int32_t y     = 0;

  delta++;

  while (y < r)
 8014e40:	f1b8 0f00 	cmp.w	r8, #0
{
 8014e44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  int32_t ddF_y = -r - r;
 8014e46:	ebaa 0a08 	sub.w	sl, sl, r8
  while (y < r)
 8014e4a:	dd6f      	ble.n	8014f2c <lcdDrawFillCircleHelper+0xf8>
 8014e4c:	3201      	adds	r2, #1
 8014e4e:	b292      	uxth	r2, r2
 8014e50:	1c95      	adds	r5, r2, #2
 8014e52:	9204      	str	r2, [sp, #16]
 8014e54:	f003 0201 	and.w	r2, r3, #1
 8014e58:	f003 0302 	and.w	r3, r3, #2
 8014e5c:	9302      	str	r3, [sp, #8]
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1)
    {
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8014e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e60:	9203      	str	r2, [sp, #12]
 8014e62:	b280      	uxth	r0, r0
 8014e64:	b289      	uxth	r1, r1
 8014e66:	f1c8 0401 	rsb	r4, r8, #1
 8014e6a:	9000      	str	r0, [sp, #0]
 8014e6c:	9101      	str	r1, [sp, #4]
 8014e6e:	b2ad      	uxth	r5, r5
  int32_t y     = 0;
 8014e70:	2600      	movs	r6, #0
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	e006      	b.n	8014e84 <lcdDrawFillCircleHelper+0x50>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
    }
    if (cornername & 0x2)
 8014e76:	9a02      	ldr	r2, [sp, #8]
 8014e78:	2a00      	cmp	r2, #0
 8014e7a:	d133      	bne.n	8014ee4 <lcdDrawFillCircleHelper+0xb0>
  while (y < r)
 8014e7c:	3502      	adds	r5, #2
 8014e7e:	45b0      	cmp	r8, r6
 8014e80:	b2ad      	uxth	r5, r5
 8014e82:	dd53      	ble.n	8014f2c <lcdDrawFillCircleHelper+0xf8>
    if (f >= 0)
 8014e84:	2c00      	cmp	r4, #0
    y++;
 8014e86:	f106 0601 	add.w	r6, r6, #1
    if (f >= 0)
 8014e8a:	db04      	blt.n	8014e96 <lcdDrawFillCircleHelper+0x62>
      ddF_y += 2;
 8014e8c:	f10a 0a02 	add.w	sl, sl, #2
      r--;
 8014e90:	f108 38ff 	add.w	r8, r8, #4294967295
      f     += ddF_y;
 8014e94:	4454      	add	r4, sl
    if (cornername & 0x1)
 8014e96:	9a03      	ldr	r2, [sp, #12]
    f     += ddF_x;
 8014e98:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8014e9c:	3401      	adds	r4, #1
    if (cornername & 0x1)
 8014e9e:	2a00      	cmp	r2, #0
 8014ea0:	d0e9      	beq.n	8014e76 <lcdDrawFillCircleHelper+0x42>
      lcdDrawHLine(x0 - r, y0 + y, r + r + delta, color);
 8014ea2:	9a04      	ldr	r2, [sp, #16]
 8014ea4:	9901      	ldr	r1, [sp, #4]
 8014ea6:	9800      	ldr	r0, [sp, #0]
 8014ea8:	9305      	str	r3, [sp, #20]
 8014eaa:	fa1f f988 	uxth.w	r9, r8
 8014eae:	fa1f fb86 	uxth.w	fp, r6
 8014eb2:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8014eb6:	4459      	add	r1, fp
 8014eb8:	eba0 0009 	sub.w	r0, r0, r9
 8014ebc:	b212      	sxth	r2, r2
 8014ebe:	b209      	sxth	r1, r1
 8014ec0:	b200      	sxth	r0, r0
 8014ec2:	f000 f9f3 	bl	80152ac <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8014ec6:	9901      	ldr	r1, [sp, #4]
 8014ec8:	9800      	ldr	r0, [sp, #0]
 8014eca:	9b05      	ldr	r3, [sp, #20]
 8014ecc:	4449      	add	r1, r9
 8014ece:	eba0 000b 	sub.w	r0, r0, fp
 8014ed2:	b22a      	sxth	r2, r5
 8014ed4:	b209      	sxth	r1, r1
 8014ed6:	b200      	sxth	r0, r0
 8014ed8:	f000 f9e8 	bl	80152ac <lcdDrawHLine>
    if (cornername & 0x2)
 8014edc:	9a02      	ldr	r2, [sp, #8]
      lcdDrawHLine(x0 - y, y0 + r, y + y + delta, color);
 8014ede:	9b05      	ldr	r3, [sp, #20]
    if (cornername & 0x2)
 8014ee0:	2a00      	cmp	r2, #0
 8014ee2:	d0cb      	beq.n	8014e7c <lcdDrawFillCircleHelper+0x48>
    {
      lcdDrawHLine(x0 - r, y0 - y, r + r + delta, color); // 11995, 1090
 8014ee4:	9a04      	ldr	r2, [sp, #16]
 8014ee6:	9901      	ldr	r1, [sp, #4]
 8014ee8:	9800      	ldr	r0, [sp, #0]
 8014eea:	9305      	str	r3, [sp, #20]
 8014eec:	fa1f f988 	uxth.w	r9, r8
 8014ef0:	fa1f fb86 	uxth.w	fp, r6
 8014ef4:	eb02 0249 	add.w	r2, r2, r9, lsl #1
 8014ef8:	eba1 010b 	sub.w	r1, r1, fp
 8014efc:	eba0 0009 	sub.w	r0, r0, r9
 8014f00:	b212      	sxth	r2, r2
 8014f02:	b209      	sxth	r1, r1
 8014f04:	b200      	sxth	r0, r0
 8014f06:	f000 f9d1 	bl	80152ac <lcdDrawHLine>
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8014f0a:	9901      	ldr	r1, [sp, #4]
 8014f0c:	9800      	ldr	r0, [sp, #0]
 8014f0e:	9b05      	ldr	r3, [sp, #20]
 8014f10:	eba1 0109 	sub.w	r1, r1, r9
 8014f14:	eba0 000b 	sub.w	r0, r0, fp
 8014f18:	b22a      	sxth	r2, r5
 8014f1a:	b209      	sxth	r1, r1
 8014f1c:	b200      	sxth	r0, r0
 8014f1e:	f000 f9c5 	bl	80152ac <lcdDrawHLine>
  while (y < r)
 8014f22:	3502      	adds	r5, #2
 8014f24:	45b0      	cmp	r8, r6
      lcdDrawHLine(x0 - y, y0 - r, y + y + delta, color);
 8014f26:	9b05      	ldr	r3, [sp, #20]
  while (y < r)
 8014f28:	b2ad      	uxth	r5, r5
 8014f2a:	dcab      	bgt.n	8014e84 <lcdDrawFillCircleHelper+0x50>
    }
  }
}
 8014f2c:	b006      	add	sp, #24
 8014f2e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8014f32:	bf00      	nop

08014f34 <lcdDrawFillRoundRect>:

LCD_OPT_DEF void lcdDrawFillRoundRect(int32_t x, int32_t y, int32_t w, int32_t h, int32_t r, uint32_t color)
{
 8014f34:	e92d 4770 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, lr}
 8014f38:	b085      	sub	sp, #20
 8014f3a:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8014f3e:	4688      	mov	r8, r1
 8014f40:	4614      	mov	r4, r2
  // smarter version
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8014f42:	b2b1      	uxth	r1, r6
 8014f44:	fa1f f289 	uxth.w	r2, r9
{
 8014f48:	461d      	mov	r5, r3
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8014f4a:	9200      	str	r2, [sp, #0]
 8014f4c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8014f50:	b222      	sxth	r2, r4
 8014f52:	4441      	add	r1, r8

  // draw four corners
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8014f54:	eba4 0446 	sub.w	r4, r4, r6, lsl #1
 8014f58:	4445      	add	r5, r8
{
 8014f5a:	4682      	mov	sl, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8014f5c:	3c01      	subs	r4, #1
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8014f5e:	b21b      	sxth	r3, r3
 8014f60:	b209      	sxth	r1, r1
 8014f62:	b200      	sxth	r0, r0
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8014f64:	1bad      	subs	r5, r5, r6
  lcdDrawFillRect(x, y + r, w, h - r - r, color);
 8014f66:	f000 f9c7 	bl	80152f8 <lcdDrawFillRect>
  lcdDrawFillCircleHelper(x + r, y + h - r - 1, r, 1, w - r - r - 1, color);
 8014f6a:	eb0a 0006 	add.w	r0, sl, r6
 8014f6e:	1e69      	subs	r1, r5, #1
 8014f70:	4632      	mov	r2, r6
 8014f72:	e9cd 4900 	strd	r4, r9, [sp]
 8014f76:	2301      	movs	r3, #1
 8014f78:	9003      	str	r0, [sp, #12]
 8014f7a:	f7ff ff5b 	bl	8014e34 <lcdDrawFillCircleHelper>
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8014f7e:	9803      	ldr	r0, [sp, #12]
 8014f80:	2302      	movs	r3, #2
 8014f82:	4632      	mov	r2, r6
 8014f84:	eb08 0106 	add.w	r1, r8, r6
 8014f88:	e9cd 490c 	strd	r4, r9, [sp, #48]	; 0x30
}
 8014f8c:	b005      	add	sp, #20
 8014f8e:	e8bd 4770 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, lr}
  lcdDrawFillCircleHelper(x + r, y + r        , r, 2, w - r - r - 1, color);
 8014f92:	f7ff bf4f 	b.w	8014e34 <lcdDrawFillCircleHelper>
 8014f96:	bf00      	nop

08014f98 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8014f98:	b480      	push	{r7}
 8014f9a:	af00      	add	r7, sp, #0
  return fps_count;
 8014f9c:	4b03      	ldr	r3, [pc, #12]	; (8014fac <lcdGetFps+0x14>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	20000a7c 	.word	0x20000a7c

08014fb0 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	af00      	add	r7, sp, #0
  return fps_time;
 8014fb4:	4b03      	ldr	r3, [pc, #12]	; (8014fc4 <lcdGetFpsTime+0x14>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc0:	4770      	bx	lr
 8014fc2:	bf00      	nop
 8014fc4:	20000a78 	.word	0x20000a78

08014fc8 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8014fcc:	4b08      	ldr	r3, [pc, #32]	; (8014ff0 <lcdDrawAvailable+0x28>)
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	bf14      	ite	ne
 8014fd4:	2301      	movne	r3, #1
 8014fd6:	2300      	moveq	r3, #0
 8014fd8:	b2db      	uxtb	r3, r3
 8014fda:	f083 0301 	eor.w	r3, r3, #1
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	f003 0301 	and.w	r3, r3, #1
 8014fe4:	b2db      	uxtb	r3, r3
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fee:	4770      	bx	lr
 8014ff0:	20000a72 	.word	0x20000a72

08014ff4 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8014ff4:	b598      	push	{r3, r4, r7, lr}
 8014ff6:	af00      	add	r7, sp, #0
  if (is_init != true)
 8014ff8:	4b15      	ldr	r3, [pc, #84]	; (8015050 <lcdRequestDraw+0x5c>)
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	f083 0301 	eor.w	r3, r3, #1
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2b00      	cmp	r3, #0
 8015004:	d001      	beq.n	801500a <lcdRequestDraw+0x16>
  {
    return false;
 8015006:	2300      	movs	r3, #0
 8015008:	e020      	b.n	801504c <lcdRequestDraw+0x58>
  }
  if (lcd_request_draw == true)
 801500a:	4b12      	ldr	r3, [pc, #72]	; (8015054 <lcdRequestDraw+0x60>)
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d001      	beq.n	8015016 <lcdRequestDraw+0x22>
  {
    return false;
 8015012:	2300      	movs	r3, #0
 8015014:	e01a      	b.n	801504c <lcdRequestDraw+0x58>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8015016:	4b10      	ldr	r3, [pc, #64]	; (8015058 <lcdRequestDraw+0x64>)
 8015018:	689c      	ldr	r4, [r3, #8]
 801501a:	237f      	movs	r3, #127	; 0x7f
 801501c:	229f      	movs	r2, #159	; 0x9f
 801501e:	2100      	movs	r1, #0
 8015020:	2000      	movs	r0, #0
 8015022:	47a0      	blx	r4

  lcd_request_draw = true;
 8015024:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <lcdRequestDraw+0x60>)
 8015026:	2201      	movs	r2, #1
 8015028:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 801502a:	4b0b      	ldr	r3, [pc, #44]	; (8015058 <lcdRequestDraw+0x64>)
 801502c:	699c      	ldr	r4, [r3, #24]
 801502e:	4b0b      	ldr	r3, [pc, #44]	; (801505c <lcdRequestDraw+0x68>)
 8015030:	781b      	ldrb	r3, [r3, #0]
 8015032:	461a      	mov	r2, r3
 8015034:	4613      	mov	r3, r2
 8015036:	009b      	lsls	r3, r3, #2
 8015038:	4413      	add	r3, r2
 801503a:	035b      	lsls	r3, r3, #13
 801503c:	4a08      	ldr	r2, [pc, #32]	; (8015060 <lcdRequestDraw+0x6c>)
 801503e:	4413      	add	r3, r2
 8015040:	2200      	movs	r2, #0
 8015042:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8015046:	4618      	mov	r0, r3
 8015048:	47a0      	blx	r4

  return true;
 801504a:	2301      	movs	r3, #1
}
 801504c:	4618      	mov	r0, r3
 801504e:	bd98      	pop	{r3, r4, r7, pc}
 8015050:	20000a70 	.word	0x20000a70
 8015054:	20000a72 	.word	0x20000a72
 8015058:	20000a54 	.word	0x20000a54
 801505c:	20000a71 	.word	0x20000a71
 8015060:	20000ac0 	.word	0x20000ac0

08015064 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 801506a:	4b13      	ldr	r3, [pc, #76]	; (80150b8 <lcdUpdateDraw+0x54>)
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	f083 0301 	eor.w	r3, r3, #1
 8015072:	b2db      	uxtb	r3, r3
 8015074:	2b00      	cmp	r3, #0
 8015076:	d118      	bne.n	80150aa <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8015078:	f7ff ffbc 	bl	8014ff4 <lcdRequestDraw>

  pre_time = millis();
 801507c:	f7fd fad9 	bl	8012632 <millis>
 8015080:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8015082:	e009      	b.n	8015098 <lcdUpdateDraw+0x34>
  {
    delay(1);
 8015084:	2001      	movs	r0, #1
 8015086:	f7fd fac9 	bl	801261c <delay>
    if (millis()-pre_time >= 100)
 801508a:	f7fd fad2 	bl	8012632 <millis>
 801508e:	4602      	mov	r2, r0
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	2b63      	cmp	r3, #99	; 0x63
 8015096:	d80a      	bhi.n	80150ae <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8015098:	f7ff ff96 	bl	8014fc8 <lcdDrawAvailable>
 801509c:	4603      	mov	r3, r0
 801509e:	f083 0301 	eor.w	r3, r3, #1
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d1ed      	bne.n	8015084 <lcdUpdateDraw+0x20>
 80150a8:	e002      	b.n	80150b0 <lcdUpdateDraw+0x4c>
    return;
 80150aa:	bf00      	nop
 80150ac:	e000      	b.n	80150b0 <lcdUpdateDraw+0x4c>
    {
      break;
 80150ae:	bf00      	nop
    }
  }
}
 80150b0:	3708      	adds	r7, #8
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	bf00      	nop
 80150b8:	20000a70 	.word	0x20000a70

080150bc <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 80150bc:	b480      	push	{r7}
 80150be:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 80150c0:	4b03      	ldr	r3, [pc, #12]	; (80150d0 <lcdGetFrameBuffer+0x14>)
 80150c2:	681b      	ldr	r3, [r3, #0]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	46bd      	mov	sp, r7
 80150c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150cc:	4770      	bx	lr
 80150ce:	bf00      	nop
 80150d0:	20000a80 	.word	0x20000a80

080150d4 <lcdGetWidth>:
{
  lcdSetBackLight(lcdGetBackLight());
}

int32_t lcdGetWidth(void)
{
 80150d4:	b480      	push	{r7}
 80150d6:	af00      	add	r7, sp, #0
  return LCD_WIDTH;
 80150d8:	23a0      	movs	r3, #160	; 0xa0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	46bd      	mov	sp, r7
 80150de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e2:	4770      	bx	lr

080150e4 <lcdGetHeight>:

int32_t lcdGetHeight(void)
{
 80150e4:	b480      	push	{r7}
 80150e6:	af00      	add	r7, sp, #0
  return LCD_HEIGHT;
 80150e8:	2380      	movs	r3, #128	; 0x80
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr

080150f4 <lcdDrawLine>:


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80150f4:	b590      	push	{r4, r7, lr}
 80150f6:	b089      	sub	sp, #36	; 0x24
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	4604      	mov	r4, r0
 80150fc:	4608      	mov	r0, r1
 80150fe:	4611      	mov	r1, r2
 8015100:	461a      	mov	r2, r3
 8015102:	4623      	mov	r3, r4
 8015104:	80fb      	strh	r3, [r7, #6]
 8015106:	4603      	mov	r3, r0
 8015108:	80bb      	strh	r3, [r7, #4]
 801510a:	460b      	mov	r3, r1
 801510c:	807b      	strh	r3, [r7, #2]
 801510e:	4613      	mov	r3, r2
 8015110:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8015112:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015116:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8015120:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8015124:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8015128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801512c:	1acb      	subs	r3, r1, r3
 801512e:	2b00      	cmp	r3, #0
 8015130:	bfb8      	it	lt
 8015132:	425b      	neglt	r3, r3
 8015134:	429a      	cmp	r2, r3
 8015136:	bfcc      	ite	gt
 8015138:	2301      	movgt	r3, #1
 801513a:	2300      	movle	r3, #0
 801513c:	b2db      	uxtb	r3, r3
 801513e:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8015140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015144:	2b00      	cmp	r3, #0
 8015146:	da01      	bge.n	801514c <lcdDrawLine+0x58>
 8015148:	2300      	movs	r3, #0
 801514a:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 801514c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015150:	2b00      	cmp	r3, #0
 8015152:	da01      	bge.n	8015158 <lcdDrawLine+0x64>
 8015154:	2300      	movs	r3, #0
 8015156:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8015158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801515c:	2b00      	cmp	r3, #0
 801515e:	da01      	bge.n	8015164 <lcdDrawLine+0x70>
 8015160:	2300      	movs	r3, #0
 8015162:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8015164:	f9b7 3000 	ldrsh.w	r3, [r7]
 8015168:	2b00      	cmp	r3, #0
 801516a:	da01      	bge.n	8015170 <lcdDrawLine+0x7c>
 801516c:	2300      	movs	r3, #0
 801516e:	803b      	strh	r3, [r7, #0]


  if (steep)
 8015170:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d00b      	beq.n	8015190 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8015178:	88fb      	ldrh	r3, [r7, #6]
 801517a:	833b      	strh	r3, [r7, #24]
 801517c:	88bb      	ldrh	r3, [r7, #4]
 801517e:	80fb      	strh	r3, [r7, #6]
 8015180:	8b3b      	ldrh	r3, [r7, #24]
 8015182:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8015184:	887b      	ldrh	r3, [r7, #2]
 8015186:	82fb      	strh	r3, [r7, #22]
 8015188:	883b      	ldrh	r3, [r7, #0]
 801518a:	807b      	strh	r3, [r7, #2]
 801518c:	8afb      	ldrh	r3, [r7, #22]
 801518e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8015190:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015198:	429a      	cmp	r2, r3
 801519a:	dd0b      	ble.n	80151b4 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 801519c:	88fb      	ldrh	r3, [r7, #6]
 801519e:	82bb      	strh	r3, [r7, #20]
 80151a0:	887b      	ldrh	r3, [r7, #2]
 80151a2:	80fb      	strh	r3, [r7, #6]
 80151a4:	8abb      	ldrh	r3, [r7, #20]
 80151a6:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 80151a8:	88bb      	ldrh	r3, [r7, #4]
 80151aa:	827b      	strh	r3, [r7, #18]
 80151ac:	883b      	ldrh	r3, [r7, #0]
 80151ae:	80bb      	strh	r3, [r7, #4]
 80151b0:	8a7b      	ldrh	r3, [r7, #18]
 80151b2:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80151b4:	887a      	ldrh	r2, [r7, #2]
 80151b6:	88fb      	ldrh	r3, [r7, #6]
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 80151be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80151c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80151c6:	1ad3      	subs	r3, r2, r3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	bfb8      	it	lt
 80151cc:	425b      	neglt	r3, r3
 80151ce:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80151d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80151d4:	0fda      	lsrs	r2, r3, #31
 80151d6:	4413      	add	r3, r2
 80151d8:	105b      	asrs	r3, r3, #1
 80151da:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 80151dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80151e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	da02      	bge.n	80151ee <lcdDrawLine+0xfa>
  {
    ystep = 1;
 80151e8:	2301      	movs	r3, #1
 80151ea:	83bb      	strh	r3, [r7, #28]
 80151ec:	e02d      	b.n	801524a <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 80151ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151f2:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 80151f4:	e029      	b.n	801524a <lcdDrawLine+0x156>
  {
    if (steep)
 80151f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d006      	beq.n	801520c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 80151fe:	88bb      	ldrh	r3, [r7, #4]
 8015200:	88f9      	ldrh	r1, [r7, #6]
 8015202:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8015204:	4618      	mov	r0, r3
 8015206:	f7ff fce7 	bl	8014bd8 <lcdDrawPixel>
 801520a:	e005      	b.n	8015218 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 801520c:	88fb      	ldrh	r3, [r7, #6]
 801520e:	88b9      	ldrh	r1, [r7, #4]
 8015210:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8015212:	4618      	mov	r0, r3
 8015214:	f7ff fce0 	bl	8014bd8 <lcdDrawPixel>
    }
    err -= dy;
 8015218:	8bfa      	ldrh	r2, [r7, #30]
 801521a:	89fb      	ldrh	r3, [r7, #14]
 801521c:	1ad3      	subs	r3, r2, r3
 801521e:	b29b      	uxth	r3, r3
 8015220:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8015222:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015226:	2b00      	cmp	r3, #0
 8015228:	da09      	bge.n	801523e <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 801522a:	88ba      	ldrh	r2, [r7, #4]
 801522c:	8bbb      	ldrh	r3, [r7, #28]
 801522e:	4413      	add	r3, r2
 8015230:	b29b      	uxth	r3, r3
 8015232:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8015234:	8bfa      	ldrh	r2, [r7, #30]
 8015236:	8a3b      	ldrh	r3, [r7, #16]
 8015238:	4413      	add	r3, r2
 801523a:	b29b      	uxth	r3, r3
 801523c:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 801523e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015242:	b29b      	uxth	r3, r3
 8015244:	3301      	adds	r3, #1
 8015246:	b29b      	uxth	r3, r3
 8015248:	80fb      	strh	r3, [r7, #6]
 801524a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801524e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015252:	429a      	cmp	r2, r3
 8015254:	ddcf      	ble.n	80151f6 <lcdDrawLine+0x102>
    }
  }
}
 8015256:	bf00      	nop
 8015258:	bf00      	nop
 801525a:	3724      	adds	r7, #36	; 0x24
 801525c:	46bd      	mov	sp, r7
 801525e:	bd90      	pop	{r4, r7, pc}

08015260 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8015260:	b590      	push	{r4, r7, lr}
 8015262:	b085      	sub	sp, #20
 8015264:	af02      	add	r7, sp, #8
 8015266:	4604      	mov	r4, r0
 8015268:	4608      	mov	r0, r1
 801526a:	4611      	mov	r1, r2
 801526c:	461a      	mov	r2, r3
 801526e:	4623      	mov	r3, r4
 8015270:	80fb      	strh	r3, [r7, #6]
 8015272:	4603      	mov	r3, r0
 8015274:	80bb      	strh	r3, [r7, #4]
 8015276:	460b      	mov	r3, r1
 8015278:	807b      	strh	r3, [r7, #2]
 801527a:	4613      	mov	r3, r2
 801527c:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 801527e:	88ba      	ldrh	r2, [r7, #4]
 8015280:	887b      	ldrh	r3, [r7, #2]
 8015282:	4413      	add	r3, r2
 8015284:	b29b      	uxth	r3, r3
 8015286:	3b01      	subs	r3, #1
 8015288:	b29b      	uxth	r3, r3
 801528a:	b21c      	sxth	r4, r3
 801528c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015290:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015294:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8015298:	883b      	ldrh	r3, [r7, #0]
 801529a:	9300      	str	r3, [sp, #0]
 801529c:	4623      	mov	r3, r4
 801529e:	f7ff ff29 	bl	80150f4 <lcdDrawLine>
}
 80152a2:	bf00      	nop
 80152a4:	370c      	adds	r7, #12
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd90      	pop	{r4, r7, pc}
 80152aa:	bf00      	nop

080152ac <lcdDrawHLine>:

void lcdDrawHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80152ac:	b590      	push	{r4, r7, lr}
 80152ae:	b085      	sub	sp, #20
 80152b0:	af02      	add	r7, sp, #8
 80152b2:	4604      	mov	r4, r0
 80152b4:	4608      	mov	r0, r1
 80152b6:	4611      	mov	r1, r2
 80152b8:	461a      	mov	r2, r3
 80152ba:	4623      	mov	r3, r4
 80152bc:	80fb      	strh	r3, [r7, #6]
 80152be:	4603      	mov	r3, r0
 80152c0:	80bb      	strh	r3, [r7, #4]
 80152c2:	460b      	mov	r3, r1
 80152c4:	807b      	strh	r3, [r7, #2]
 80152c6:	4613      	mov	r3, r2
 80152c8:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x+w-1, y, color);
 80152ca:	88fa      	ldrh	r2, [r7, #6]
 80152cc:	887b      	ldrh	r3, [r7, #2]
 80152ce:	4413      	add	r3, r2
 80152d0:	b29b      	uxth	r3, r3
 80152d2:	3b01      	subs	r3, #1
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	b21a      	sxth	r2, r3
 80152d8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80152dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80152e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80152e4:	883b      	ldrh	r3, [r7, #0]
 80152e6:	9300      	str	r3, [sp, #0]
 80152e8:	4623      	mov	r3, r4
 80152ea:	f7ff ff03 	bl	80150f4 <lcdDrawLine>
}
 80152ee:	bf00      	nop
 80152f0:	370c      	adds	r7, #12
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd90      	pop	{r4, r7, pc}
 80152f6:	bf00      	nop

080152f8 <lcdDrawFillRect>:

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80152f8:	b590      	push	{r4, r7, lr}
 80152fa:	b085      	sub	sp, #20
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	4604      	mov	r4, r0
 8015300:	4608      	mov	r0, r1
 8015302:	4611      	mov	r1, r2
 8015304:	461a      	mov	r2, r3
 8015306:	4623      	mov	r3, r4
 8015308:	80fb      	strh	r3, [r7, #6]
 801530a:	4603      	mov	r3, r0
 801530c:	80bb      	strh	r3, [r7, #4]
 801530e:	460b      	mov	r3, r1
 8015310:	807b      	strh	r3, [r7, #2]
 8015312:	4613      	mov	r3, r2
 8015314:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8015316:	88fb      	ldrh	r3, [r7, #6]
 8015318:	81fb      	strh	r3, [r7, #14]
 801531a:	e00e      	b.n	801533a <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 801531c:	8c3b      	ldrh	r3, [r7, #32]
 801531e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8015322:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8015326:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801532a:	f7ff ff99 	bl	8015260 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 801532e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015332:	b29b      	uxth	r3, r3
 8015334:	3301      	adds	r3, #1
 8015336:	b29b      	uxth	r3, r3
 8015338:	81fb      	strh	r3, [r7, #14]
 801533a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801533e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015346:	440b      	add	r3, r1
 8015348:	429a      	cmp	r2, r3
 801534a:	dbe7      	blt.n	801531c <lcdDrawFillRect+0x24>
  }
}
 801534c:	bf00      	nop
 801534e:	bf00      	nop
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	bd90      	pop	{r4, r7, pc}
 8015356:	bf00      	nop

08015358 <lcdDrawBufferImage>:
    if((y + h - 1) >= LCD_HEIGHT) return;

    lcd.setWindow(x, y, x+w-1, y+h-1);
    lcd.sendBuffer((uint8_t *)data, sizeof(uint16_t)*w*h, 10);
}
void lcdDrawBufferImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8015358:	b590      	push	{r4, r7, lr}
 801535a:	b085      	sub	sp, #20
 801535c:	af00      	add	r7, sp, #0
 801535e:	4604      	mov	r4, r0
 8015360:	4608      	mov	r0, r1
 8015362:	4611      	mov	r1, r2
 8015364:	461a      	mov	r2, r3
 8015366:	4623      	mov	r3, r4
 8015368:	80fb      	strh	r3, [r7, #6]
 801536a:	4603      	mov	r3, r0
 801536c:	80bb      	strh	r3, [r7, #4]
 801536e:	460b      	mov	r3, r1
 8015370:	807b      	strh	r3, [r7, #2]
 8015372:	4613      	mov	r3, r2
 8015374:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8015376:	88fb      	ldrh	r3, [r7, #6]
 8015378:	2b9f      	cmp	r3, #159	; 0x9f
 801537a:	d83b      	bhi.n	80153f4 <lcdDrawBufferImage+0x9c>
 801537c:	88bb      	ldrh	r3, [r7, #4]
 801537e:	2b7f      	cmp	r3, #127	; 0x7f
 8015380:	d838      	bhi.n	80153f4 <lcdDrawBufferImage+0x9c>
    if((x + w - 1) >= LCD_WIDTH) return;
 8015382:	88fa      	ldrh	r2, [r7, #6]
 8015384:	887b      	ldrh	r3, [r7, #2]
 8015386:	4413      	add	r3, r2
 8015388:	2ba0      	cmp	r3, #160	; 0xa0
 801538a:	dc35      	bgt.n	80153f8 <lcdDrawBufferImage+0xa0>
    if((y + h - 1) >= LCD_HEIGHT) return;
 801538c:	88ba      	ldrh	r2, [r7, #4]
 801538e:	883b      	ldrh	r3, [r7, #0]
 8015390:	4413      	add	r3, r2
 8015392:	2b80      	cmp	r3, #128	; 0x80
 8015394:	dc32      	bgt.n	80153fc <lcdDrawBufferImage+0xa4>

    uint16_t pixel_cnt = 0;
 8015396:	2300      	movs	r3, #0
 8015398:	81fb      	strh	r3, [r7, #14]

    for (int16_t i=y; i<y+h; i++)
 801539a:	88bb      	ldrh	r3, [r7, #4]
 801539c:	81bb      	strh	r3, [r7, #12]
 801539e:	e021      	b.n	80153e4 <lcdDrawBufferImage+0x8c>
    {
		for (int16_t j=x; j<x+w; j++)
 80153a0:	88fb      	ldrh	r3, [r7, #6]
 80153a2:	817b      	strh	r3, [r7, #10]
 80153a4:	e011      	b.n	80153ca <lcdDrawBufferImage+0x72>
		{
			lcdDrawPixel(j, i, data[pixel_cnt++]);
 80153a6:	8978      	ldrh	r0, [r7, #10]
 80153a8:	89b9      	ldrh	r1, [r7, #12]
 80153aa:	89fb      	ldrh	r3, [r7, #14]
 80153ac:	1c5a      	adds	r2, r3, #1
 80153ae:	81fa      	strh	r2, [r7, #14]
 80153b0:	005b      	lsls	r3, r3, #1
 80153b2:	6a3a      	ldr	r2, [r7, #32]
 80153b4:	4413      	add	r3, r2
 80153b6:	881b      	ldrh	r3, [r3, #0]
 80153b8:	461a      	mov	r2, r3
 80153ba:	f7ff fc0d 	bl	8014bd8 <lcdDrawPixel>
		for (int16_t j=x; j<x+w; j++)
 80153be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	3301      	adds	r3, #1
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	817b      	strh	r3, [r7, #10]
 80153ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80153ce:	88f9      	ldrh	r1, [r7, #6]
 80153d0:	887b      	ldrh	r3, [r7, #2]
 80153d2:	440b      	add	r3, r1
 80153d4:	429a      	cmp	r2, r3
 80153d6:	dbe6      	blt.n	80153a6 <lcdDrawBufferImage+0x4e>
    for (int16_t i=y; i<y+h; i++)
 80153d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80153dc:	b29b      	uxth	r3, r3
 80153de:	3301      	adds	r3, #1
 80153e0:	b29b      	uxth	r3, r3
 80153e2:	81bb      	strh	r3, [r7, #12]
 80153e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80153e8:	88b9      	ldrh	r1, [r7, #4]
 80153ea:	883b      	ldrh	r3, [r7, #0]
 80153ec:	440b      	add	r3, r1
 80153ee:	429a      	cmp	r2, r3
 80153f0:	dbd6      	blt.n	80153a0 <lcdDrawBufferImage+0x48>
 80153f2:	e004      	b.n	80153fe <lcdDrawBufferImage+0xa6>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 80153f4:	bf00      	nop
 80153f6:	e002      	b.n	80153fe <lcdDrawBufferImage+0xa6>
    if((x + w - 1) >= LCD_WIDTH) return;
 80153f8:	bf00      	nop
 80153fa:	e000      	b.n	80153fe <lcdDrawBufferImage+0xa6>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80153fc:	bf00      	nop
		}
    }
}
 80153fe:	3714      	adds	r7, #20
 8015400:	46bd      	mov	sp, r7
 8015402:	bd90      	pop	{r4, r7, pc}

08015404 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8015404:	b408      	push	{r3}
 8015406:	b590      	push	{r4, r7, lr}
 8015408:	b0d8      	sub	sp, #352	; 0x160
 801540a:	af02      	add	r7, sp, #8
 801540c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015410:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015414:	6018      	str	r0, [r3, #0]
 8015416:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801541a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801541e:	6019      	str	r1, [r3, #0]
 8015420:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015424:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8015428:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 801542a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801542e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8015432:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015436:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8015440:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8015444:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015448:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801544c:	21ff      	movs	r1, #255	; 0xff
 801544e:	f011 f899 	bl	8026584 <vsniprintf>
 8015452:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8015456:	4b80      	ldr	r3, [pc, #512]	; (8015658 <lcdPrintf+0x254>)
 8015458:	781b      	ldrb	r3, [r3, #0]
 801545a:	461a      	mov	r2, r3
 801545c:	4b7f      	ldr	r3, [pc, #508]	; (801565c <lcdPrintf+0x258>)
 801545e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d072      	beq.n	801554e <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8015468:	2300      	movs	r3, #0
 801546a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801546e:	e067      	b.n	8015540 <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 8015470:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015474:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8015478:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801547c:	4413      	add	r3, r2
 801547e:	781a      	ldrb	r2, [r3, #0]
 8015480:	4b75      	ldr	r3, [pc, #468]	; (8015658 <lcdPrintf+0x254>)
 8015482:	781b      	ldrb	r3, [r3, #0]
 8015484:	4619      	mov	r1, r3
 8015486:	4b75      	ldr	r3, [pc, #468]	; (801565c <lcdPrintf+0x258>)
 8015488:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 801548c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015490:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8015494:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015498:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 801549c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80154a0:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 80154a4:	881b      	ldrh	r3, [r3, #0]
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	4623      	mov	r3, r4
 80154aa:	6809      	ldr	r1, [r1, #0]
 80154ac:	6800      	ldr	r0, [r0, #0]
 80154ae:	f000 f92d 	bl	801570c <disEngFont>

      Size_Char = 1;
 80154b2:	2301      	movs	r3, #1
 80154b4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 80154b8:	4b67      	ldr	r3, [pc, #412]	; (8015658 <lcdPrintf+0x254>)
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	461a      	mov	r2, r3
 80154be:	4b67      	ldr	r3, [pc, #412]	; (801565c <lcdPrintf+0x258>)
 80154c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 80154ca:	4b63      	ldr	r3, [pc, #396]	; (8015658 <lcdPrintf+0x254>)
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	461a      	mov	r2, r3
 80154d0:	4b62      	ldr	r3, [pc, #392]	; (801565c <lcdPrintf+0x258>)
 80154d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154d6:	785b      	ldrb	r3, [r3, #1]
 80154d8:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 80154dc:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80154e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80154e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80154e8:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80154ec:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80154f0:	6809      	ldr	r1, [r1, #0]
 80154f2:	440a      	add	r2, r1
 80154f4:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80154f6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80154fa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80154fe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	4413      	add	r3, r2
 8015506:	2ba0      	cmp	r3, #160	; 0xa0
 8015508:	dd13      	ble.n	8015532 <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 801550a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801550e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8015512:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015516:	601a      	str	r2, [r3, #0]
        y += font_height;
 8015518:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 801551c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015520:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8015524:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8015528:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 801552c:	6809      	ldr	r1, [r1, #0]
 801552e:	440a      	add	r2, r1
 8015530:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 8015532:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015536:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801553a:	4413      	add	r3, r2
 801553c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8015540:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8015544:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8015548:	429a      	cmp	r2, r3
 801554a:	db91      	blt.n	8015470 <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 801554c:	e07b      	b.n	8015646 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 801554e:	2300      	movs	r3, #0
 8015550:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8015554:	e06f      	b.n	8015636 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8015556:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801555a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801555e:	4413      	add	r3, r2
 8015560:	f107 0214 	add.w	r2, r7, #20
 8015564:	4611      	mov	r1, r2
 8015566:	4618      	mov	r0, r3
 8015568:	f003 f8a0 	bl	80186ac <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 801556c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015570:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8015574:	881b      	ldrh	r3, [r3, #0]
 8015576:	f107 0214 	add.w	r2, r7, #20
 801557a:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 801557e:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8015582:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8015586:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 801558a:	6809      	ldr	r1, [r1, #0]
 801558c:	6800      	ldr	r0, [r0, #0]
 801558e:	f000 f867 	bl	8015660 <disHanFont>
      Size_Char = FontBuf.Size_Char;
 8015592:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015596:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801559a:	885b      	ldrh	r3, [r3, #2]
 801559c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 80155a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	dd0e      	ble.n	80155c6 <lcdPrintf+0x1c2>
        font_width = 16;
 80155a8:	2310      	movs	r3, #16
 80155aa:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 80155ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80155b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80155b6:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80155ba:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80155be:	6812      	ldr	r2, [r2, #0]
 80155c0:	3210      	adds	r2, #16
 80155c2:	601a      	str	r2, [r3, #0]
 80155c4:	e00d      	b.n	80155e2 <lcdPrintf+0x1de>
        font_width = 8;
 80155c6:	2308      	movs	r3, #8
 80155c8:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 80155cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80155d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80155d4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80155d8:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80155dc:	6812      	ldr	r2, [r2, #0]
 80155de:	3208      	adds	r2, #8
 80155e0:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 80155e2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80155e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80155ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	4413      	add	r3, r2
 80155f2:	2ba0      	cmp	r3, #160	; 0xa0
 80155f4:	dd11      	ble.n	801561a <lcdPrintf+0x216>
        x  = x_Pre;
 80155f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80155fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80155fe:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8015602:	601a      	str	r2, [r3, #0]
        y += 16;
 8015604:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8015608:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801560c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8015610:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8015614:	6812      	ldr	r2, [r2, #0]
 8015616:	3210      	adds	r2, #16
 8015618:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 801561a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801561e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015622:	889b      	ldrh	r3, [r3, #4]
 8015624:	2b04      	cmp	r3, #4
 8015626:	d00d      	beq.n	8015644 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8015628:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801562c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8015630:	4413      	add	r3, r2
 8015632:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8015636:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801563a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801563e:	429a      	cmp	r2, r3
 8015640:	db89      	blt.n	8015556 <lcdPrintf+0x152>
}
 8015642:	e000      	b.n	8015646 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8015644:	bf00      	nop
}
 8015646:	bf00      	nop
 8015648:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801564c:	46bd      	mov	sp, r7
 801564e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8015652:	b001      	add	sp, #4
 8015654:	4770      	bx	lr
 8015656:	bf00      	nop
 8015658:	20000095 	.word	0x20000095
 801565c:	20000098 	.word	0x20000098

08015660 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b088      	sub	sp, #32
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
 801566c:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	885b      	ldrh	r3, [r3, #2]
 8015672:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8015674:	8b3b      	ldrh	r3, [r7, #24]
 8015676:	2b02      	cmp	r3, #2
 8015678:	d901      	bls.n	801567e <disHanFont+0x1e>
  {
    FontSize = 2;
 801567a:	2302      	movs	r3, #2
 801567c:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 801567e:	2300      	movs	r3, #0
 8015680:	83fb      	strh	r3, [r7, #30]
 8015682:	e03a      	b.n	80156fa <disHanFont+0x9a>
  {
    index_x = 0;
 8015684:	2300      	movs	r3, #0
 8015686:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8015688:	2300      	movs	r3, #0
 801568a:	83bb      	strh	r3, [r7, #28]
 801568c:	e02e      	b.n	80156ec <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 801568e:	8bfb      	ldrh	r3, [r7, #30]
 8015690:	8b3a      	ldrh	r2, [r7, #24]
 8015692:	fb03 f202 	mul.w	r2, r3, r2
 8015696:	8bbb      	ldrh	r3, [r7, #28]
 8015698:	4413      	add	r3, r2
 801569a:	687a      	ldr	r2, [r7, #4]
 801569c:	4413      	add	r3, r2
 801569e:	799b      	ldrb	r3, [r3, #6]
 80156a0:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80156a2:	2300      	movs	r3, #0
 80156a4:	837b      	strh	r3, [r7, #26]
 80156a6:	e01b      	b.n	80156e0 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 80156a8:	7d7a      	ldrb	r2, [r7, #21]
 80156aa:	8b7b      	ldrh	r3, [r7, #26]
 80156ac:	fa02 f303 	lsl.w	r3, r2, r3
 80156b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d00d      	beq.n	80156d4 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	b29a      	uxth	r2, r3
 80156bc:	8afb      	ldrh	r3, [r7, #22]
 80156be:	4413      	add	r3, r2
 80156c0:	b298      	uxth	r0, r3
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	b29a      	uxth	r2, r3
 80156c6:	8bfb      	ldrh	r3, [r7, #30]
 80156c8:	4413      	add	r3, r2
 80156ca:	b29b      	uxth	r3, r3
 80156cc:	887a      	ldrh	r2, [r7, #2]
 80156ce:	4619      	mov	r1, r3
 80156d0:	f7ff fa82 	bl	8014bd8 <lcdDrawPixel>
        }
        index_x++;
 80156d4:	8afb      	ldrh	r3, [r7, #22]
 80156d6:	3301      	adds	r3, #1
 80156d8:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 80156da:	8b7b      	ldrh	r3, [r7, #26]
 80156dc:	3301      	adds	r3, #1
 80156de:	837b      	strh	r3, [r7, #26]
 80156e0:	8b7b      	ldrh	r3, [r7, #26]
 80156e2:	2b07      	cmp	r3, #7
 80156e4:	d9e0      	bls.n	80156a8 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80156e6:	8bbb      	ldrh	r3, [r7, #28]
 80156e8:	3301      	adds	r3, #1
 80156ea:	83bb      	strh	r3, [r7, #28]
 80156ec:	8bba      	ldrh	r2, [r7, #28]
 80156ee:	8b3b      	ldrh	r3, [r7, #24]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d3cc      	bcc.n	801568e <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80156f4:	8bfb      	ldrh	r3, [r7, #30]
 80156f6:	3301      	adds	r3, #1
 80156f8:	83fb      	strh	r3, [r7, #30]
 80156fa:	8bfb      	ldrh	r3, [r7, #30]
 80156fc:	2b0f      	cmp	r3, #15
 80156fe:	d9c1      	bls.n	8015684 <disHanFont+0x24>
      }
    }
  }
}
 8015700:	bf00      	nop
 8015702:	bf00      	nop
 8015704:	3720      	adds	r7, #32
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}
 801570a:	bf00      	nop

0801570c <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b088      	sub	sp, #32
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	60b9      	str	r1, [r7, #8]
 8015716:	603b      	str	r3, [r7, #0]
 8015718:	4613      	mov	r3, r2
 801571a:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 801571c:	2300      	movs	r3, #0
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	e035      	b.n	801578e <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	79fb      	ldrb	r3, [r7, #7]
 8015728:	3b20      	subs	r3, #32
 801572a:	6839      	ldr	r1, [r7, #0]
 801572c:	7849      	ldrb	r1, [r1, #1]
 801572e:	fb01 f303 	mul.w	r3, r1, r3
 8015732:	4619      	mov	r1, r3
 8015734:	69fb      	ldr	r3, [r7, #28]
 8015736:	440b      	add	r3, r1
 8015738:	005b      	lsls	r3, r3, #1
 801573a:	4413      	add	r3, r2
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 8015740:	2300      	movs	r3, #0
 8015742:	61bb      	str	r3, [r7, #24]
 8015744:	e01a      	b.n	801577c <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8015746:	697a      	ldr	r2, [r7, #20]
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	fa02 f303 	lsl.w	r3, r2, r3
 801574e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015752:	2b00      	cmp	r3, #0
 8015754:	d00f      	beq.n	8015776 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	b29a      	uxth	r2, r3
 801575a:	69bb      	ldr	r3, [r7, #24]
 801575c:	b29b      	uxth	r3, r3
 801575e:	4413      	add	r3, r2
 8015760:	b298      	uxth	r0, r3
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	b29a      	uxth	r2, r3
 8015766:	69fb      	ldr	r3, [r7, #28]
 8015768:	b29b      	uxth	r3, r3
 801576a:	4413      	add	r3, r2
 801576c:	b29b      	uxth	r3, r3
 801576e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8015770:	4619      	mov	r1, r3
 8015772:	f7ff fa31 	bl	8014bd8 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	3301      	adds	r3, #1
 801577a:	61bb      	str	r3, [r7, #24]
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	781b      	ldrb	r3, [r3, #0]
 8015780:	461a      	mov	r2, r3
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	4293      	cmp	r3, r2
 8015786:	d3de      	bcc.n	8015746 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	3301      	adds	r3, #1
 801578c:	61fb      	str	r3, [r7, #28]
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	785b      	ldrb	r3, [r3, #1]
 8015792:	461a      	mov	r2, r3
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	4293      	cmp	r3, r2
 8015798:	d3c3      	bcc.n	8015722 <disEngFont+0x16>
      }
    }
  }
}
 801579a:	bf00      	nop
 801579c:	bf00      	nop
 801579e:	3720      	adds	r7, #32
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	4603      	mov	r3, r0
 80157ac:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 80157ae:	4a04      	ldr	r2, [pc, #16]	; (80157c0 <lcdSetFont+0x1c>)
 80157b0:	79fb      	ldrb	r3, [r7, #7]
 80157b2:	7013      	strb	r3, [r2, #0]
}
 80157b4:	bf00      	nop
 80157b6:	370c      	adds	r7, #12
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	20000095 	.word	0x20000095

080157c4 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b086      	sub	sp, #24
 80157c8:	af02      	add	r7, sp, #8
 80157ca:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80157cc:	2300      	movs	r3, #0
 80157ce:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	881b      	ldrh	r3, [r3, #0]
 80157d4:	2b01      	cmp	r3, #1
 80157d6:	d163      	bne.n	80158a0 <cliLcd+0xdc>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	695b      	ldr	r3, [r3, #20]
 80157dc:	494e      	ldr	r1, [pc, #312]	; (8015918 <cliLcd+0x154>)
 80157de:	2000      	movs	r0, #0
 80157e0:	4798      	blx	r3
 80157e2:	4603      	mov	r3, r0
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d05b      	beq.n	80158a0 <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 80157e8:	2003      	movs	r0, #3
 80157ea:	f7ff ffdb 	bl	80157a4 <lcdSetFont>

    while(cliKeepLoop())
 80157ee:	e04b      	b.n	8015888 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 80157f0:	f7ff fbea 	bl	8014fc8 <lcdDrawAvailable>
 80157f4:	4603      	mov	r3, r0
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d046      	beq.n	8015888 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 80157fa:	2000      	movs	r0, #0
 80157fc:	f7ff f9f8 	bl	8014bf0 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8015800:	4b46      	ldr	r3, [pc, #280]	; (801591c <cliLcd+0x158>)
 8015802:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8015806:	2100      	movs	r1, #0
 8015808:	2019      	movs	r0, #25
 801580a:	f7ff fdfb 	bl	8015404 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 801580e:	f7ff fbc3 	bl	8014f98 <lcdGetFps>
 8015812:	4603      	mov	r3, r0
 8015814:	9300      	str	r3, [sp, #0]
 8015816:	4b42      	ldr	r3, [pc, #264]	; (8015920 <cliLcd+0x15c>)
 8015818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801581c:	2110      	movs	r1, #16
 801581e:	2000      	movs	r0, #0
 8015820:	f7ff fdf0 	bl	8015404 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8015824:	f7ff fbc4 	bl	8014fb0 <lcdGetFpsTime>
 8015828:	4603      	mov	r3, r0
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	4b3d      	ldr	r3, [pc, #244]	; (8015924 <cliLcd+0x160>)
 801582e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015832:	2120      	movs	r1, #32
 8015834:	2000      	movs	r0, #0
 8015836:	f7ff fde5 	bl	8015404 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 801583a:	f7fc fefa 	bl	8012632 <millis>
 801583e:	4603      	mov	r3, r0
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	4b38      	ldr	r3, [pc, #224]	; (8015924 <cliLcd+0x160>)
 8015844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015848:	2130      	movs	r1, #48	; 0x30
 801584a:	2000      	movs	r0, #0
 801584c:	f7ff fdda 	bl	8015404 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8015850:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8015854:	9300      	str	r3, [sp, #0]
 8015856:	230a      	movs	r3, #10
 8015858:	220a      	movs	r2, #10
 801585a:	2146      	movs	r1, #70	; 0x46
 801585c:	2000      	movs	r0, #0
 801585e:	f7ff fd4b 	bl	80152f8 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8015862:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8015866:	9300      	str	r3, [sp, #0]
 8015868:	230a      	movs	r3, #10
 801586a:	220a      	movs	r2, #10
 801586c:	2146      	movs	r1, #70	; 0x46
 801586e:	200a      	movs	r0, #10
 8015870:	f7ff fd42 	bl	80152f8 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8015874:	231f      	movs	r3, #31
 8015876:	9300      	str	r3, [sp, #0]
 8015878:	230a      	movs	r3, #10
 801587a:	220a      	movs	r2, #10
 801587c:	2146      	movs	r1, #70	; 0x46
 801587e:	2014      	movs	r0, #20
 8015880:	f7ff fd3a 	bl	80152f8 <lcdDrawFillRect>

        lcdRequestDraw();
 8015884:	f7ff fbb6 	bl	8014ff4 <lcdRequestDraw>
    while(cliKeepLoop())
 8015888:	f7fd fe5c 	bl	8013544 <cliKeepLoop>
 801588c:	4603      	mov	r3, r0
 801588e:	2b00      	cmp	r3, #0
 8015890:	d1ae      	bne.n	80157f0 <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 8015892:	2000      	movs	r0, #0
 8015894:	f7ff f9ac 	bl	8014bf0 <lcdClearBuffer>
    lcdUpdateDraw();
 8015898:	f7ff fbe4 	bl	8015064 <lcdUpdateDraw>

    ret = true;
 801589c:	2301      	movs	r3, #1
 801589e:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	881b      	ldrh	r3, [r3, #0]
 80158a4:	2b01      	cmp	r3, #1
 80158a6:	d126      	bne.n	80158f6 <cliLcd+0x132>
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	695b      	ldr	r3, [r3, #20]
 80158ac:	491e      	ldr	r1, [pc, #120]	; (8015928 <cliLcd+0x164>)
 80158ae:	2000      	movs	r0, #0
 80158b0:	4798      	blx	r3
 80158b2:	4603      	mov	r3, r0
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d01e      	beq.n	80158f6 <cliLcd+0x132>
  {
	  lcdClearBuffer(black);
 80158b8:	2000      	movs	r0, #0
 80158ba:	f7ff f999 	bl	8014bf0 <lcdClearBuffer>
	  lcdUpdateDraw();
 80158be:	f7ff fbd1 	bl	8015064 <lcdUpdateDraw>
	  while(cliKeepLoop())
 80158c2:	e00c      	b.n	80158de <cliLcd+0x11a>
	  {
		  static bool blink = 0;
		  blink = get_blink();
 80158c4:	f002 fdcc 	bl	8018460 <get_blink>
 80158c8:	4603      	mov	r3, r0
 80158ca:	461a      	mov	r2, r3
 80158cc:	4b17      	ldr	r3, [pc, #92]	; (801592c <cliLcd+0x168>)
 80158ce:	701a      	strb	r2, [r3, #0]
		  draw_fan_status(0, 0, blink);
 80158d0:	4b16      	ldr	r3, [pc, #88]	; (801592c <cliLcd+0x168>)
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	461a      	mov	r2, r3
 80158d6:	2100      	movs	r1, #0
 80158d8:	2000      	movs	r0, #0
 80158da:	f002 fd77 	bl	80183cc <draw_fan_status>
	  while(cliKeepLoop())
 80158de:	f7fd fe31 	bl	8013544 <cliKeepLoop>
 80158e2:	4603      	mov	r3, r0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1ed      	bne.n	80158c4 <cliLcd+0x100>
	  }
	  lcdClearBuffer(black);
 80158e8:	2000      	movs	r0, #0
 80158ea:	f7ff f981 	bl	8014bf0 <lcdClearBuffer>
	  lcdUpdateDraw();
 80158ee:	f7ff fbb9 	bl	8015064 <lcdUpdateDraw>

	  ret = true;
 80158f2:	2301      	movs	r3, #1
 80158f4:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
 80158f8:	f083 0301 	eor.w	r3, r3, #1
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d005      	beq.n	801590e <cliLcd+0x14a>
  {
    cliPrintf("lcd test\n");
 8015902:	480b      	ldr	r0, [pc, #44]	; (8015930 <cliLcd+0x16c>)
 8015904:	f7fd fd24 	bl	8013350 <cliPrintf>
    cliPrintf("lcd image\n");
 8015908:	480a      	ldr	r0, [pc, #40]	; (8015934 <cliLcd+0x170>)
 801590a:	f7fd fd21 	bl	8013350 <cliPrintf>
  }
}
 801590e:	bf00      	nop
 8015910:	3710      	adds	r7, #16
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	08029a90 	.word	0x08029a90
 801591c:	08029a98 	.word	0x08029a98
 8015920:	08029aa8 	.word	0x08029aa8
 8015924:	08029ab0 	.word	0x08029ab0
 8015928:	08029ab8 	.word	0x08029ab8
 801592c:	2000aac0 	.word	0x2000aac0
 8015930:	08029ac0 	.word	0x08029ac0
 8015934:	08029acc 	.word	0x08029acc

08015938 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b088      	sub	sp, #32
 801593c:	af00      	add	r7, sp, #0
  bool ret = true;
 801593e:	2301      	movs	r3, #1
 8015940:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015942:	1d3b      	adds	r3, r7, #4
 8015944:	2200      	movs	r2, #0
 8015946:	601a      	str	r2, [r3, #0]
 8015948:	605a      	str	r2, [r3, #4]
 801594a:	609a      	str	r2, [r3, #8]
 801594c:	60da      	str	r2, [r3, #12]
 801594e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015950:	2300      	movs	r3, #0
 8015952:	603b      	str	r3, [r7, #0]
 8015954:	4b1b      	ldr	r3, [pc, #108]	; (80159c4 <ledInit+0x8c>)
 8015956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015958:	4a1a      	ldr	r2, [pc, #104]	; (80159c4 <ledInit+0x8c>)
 801595a:	f043 0304 	orr.w	r3, r3, #4
 801595e:	6313      	str	r3, [r2, #48]	; 0x30
 8015960:	4b18      	ldr	r3, [pc, #96]	; (80159c4 <ledInit+0x8c>)
 8015962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015964:	f003 0304 	and.w	r3, r3, #4
 8015968:	603b      	str	r3, [r7, #0]
 801596a:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801596c:	2301      	movs	r3, #1
 801596e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015970:	2300      	movs	r3, #0
 8015972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015974:	2300      	movs	r3, #0
 8015976:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8015978:	2300      	movs	r3, #0
 801597a:	61fb      	str	r3, [r7, #28]
 801597c:	e016      	b.n	80159ac <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 801597e:	4a12      	ldr	r2, [pc, #72]	; (80159c8 <ledInit+0x90>)
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	4413      	add	r3, r2
 8015986:	889b      	ldrh	r3, [r3, #4]
 8015988:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 801598a:	4a0f      	ldr	r2, [pc, #60]	; (80159c8 <ledInit+0x90>)
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015992:	1d3a      	adds	r2, r7, #4
 8015994:	4611      	mov	r1, r2
 8015996:	4618      	mov	r0, r3
 8015998:	f009 fa70 	bl	801ee7c <HAL_GPIO_Init>

    ledOff(i);
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	b2db      	uxtb	r3, r3
 80159a0:	4618      	mov	r0, r3
 80159a2:	f000 f817 	bl	80159d4 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	3301      	adds	r3, #1
 80159aa:	61fb      	str	r3, [r7, #28]
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	dde5      	ble.n	801597e <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 80159b2:	4906      	ldr	r1, [pc, #24]	; (80159cc <ledInit+0x94>)
 80159b4:	4806      	ldr	r0, [pc, #24]	; (80159d0 <ledInit+0x98>)
 80159b6:	f7fd fddb 	bl	8013570 <cliAdd>
#endif

  return ret;
 80159ba:	7efb      	ldrb	r3, [r7, #27]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3720      	adds	r7, #32
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	40023800 	.word	0x40023800
 80159c8:	200000a8 	.word	0x200000a8
 80159cc:	08015a4d 	.word	0x08015a4d
 80159d0:	080297cc 	.word	0x080297cc

080159d4 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	4603      	mov	r3, r0
 80159dc:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80159de:	79fb      	ldrb	r3, [r7, #7]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d111      	bne.n	8015a08 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80159e4:	79fb      	ldrb	r3, [r7, #7]
 80159e6:	4a0a      	ldr	r2, [pc, #40]	; (8015a10 <ledOff+0x3c>)
 80159e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80159ec:	79fb      	ldrb	r3, [r7, #7]
 80159ee:	4a08      	ldr	r2, [pc, #32]	; (8015a10 <ledOff+0x3c>)
 80159f0:	00db      	lsls	r3, r3, #3
 80159f2:	4413      	add	r3, r2
 80159f4:	8899      	ldrh	r1, [r3, #4]
 80159f6:	79fb      	ldrb	r3, [r7, #7]
 80159f8:	4a05      	ldr	r2, [pc, #20]	; (8015a10 <ledOff+0x3c>)
 80159fa:	00db      	lsls	r3, r3, #3
 80159fc:	4413      	add	r3, r2
 80159fe:	79db      	ldrb	r3, [r3, #7]
 8015a00:	461a      	mov	r2, r3
 8015a02:	f009 fcbb 	bl	801f37c <HAL_GPIO_WritePin>
 8015a06:	e000      	b.n	8015a0a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8015a08:	bf00      	nop
}
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	200000a8 	.word	0x200000a8

08015a14 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	b082      	sub	sp, #8
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8015a1e:	79fb      	ldrb	r3, [r7, #7]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d10d      	bne.n	8015a40 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8015a24:	79fb      	ldrb	r3, [r7, #7]
 8015a26:	4a08      	ldr	r2, [pc, #32]	; (8015a48 <ledToggle+0x34>)
 8015a28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015a2c:	79fb      	ldrb	r3, [r7, #7]
 8015a2e:	4906      	ldr	r1, [pc, #24]	; (8015a48 <ledToggle+0x34>)
 8015a30:	00db      	lsls	r3, r3, #3
 8015a32:	440b      	add	r3, r1
 8015a34:	889b      	ldrh	r3, [r3, #4]
 8015a36:	4619      	mov	r1, r3
 8015a38:	4610      	mov	r0, r2
 8015a3a:	f009 fcb8 	bl	801f3ae <HAL_GPIO_TogglePin>
 8015a3e:	e000      	b.n	8015a42 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8015a40:	bf00      	nop
}
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	200000a8 	.word	0x200000a8

08015a4c <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b086      	sub	sp, #24
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8015a54:	2300      	movs	r3, #0
 8015a56:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	2b03      	cmp	r3, #3
 8015a5e:	d133      	bne.n	8015ac8 <cliLed+0x7c>
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	695b      	ldr	r3, [r3, #20]
 8015a64:	491f      	ldr	r1, [pc, #124]	; (8015ae4 <cliLed+0x98>)
 8015a66:	2000      	movs	r0, #0
 8015a68:	4798      	blx	r3
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d02b      	beq.n	8015ac8 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	689b      	ldr	r3, [r3, #8]
 8015a74:	2001      	movs	r0, #1
 8015a76:	4798      	blx	r3
 8015a78:	4603      	mov	r3, r0
 8015a7a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	689b      	ldr	r3, [r3, #8]
 8015a80:	2002      	movs	r0, #2
 8015a82:	4798      	blx	r3
 8015a84:	4603      	mov	r3, r0
 8015a86:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8015a88:	7dbb      	ldrb	r3, [r7, #22]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d002      	beq.n	8015a94 <cliLed+0x48>
    {
      led_ch--;
 8015a8e:	7dbb      	ldrb	r3, [r7, #22]
 8015a90:	3b01      	subs	r3, #1
 8015a92:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8015a94:	f7fc fdcd 	bl	8012632 <millis>
 8015a98:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8015a9a:	e00e      	b.n	8015aba <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8015a9c:	f7fc fdc9 	bl	8012632 <millis>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	1ad3      	subs	r3, r2, r3
 8015aa6:	68fa      	ldr	r2, [r7, #12]
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	d806      	bhi.n	8015aba <cliLed+0x6e>
      {
        pre_time = millis();
 8015aac:	f7fc fdc1 	bl	8012632 <millis>
 8015ab0:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8015ab2:	7dbb      	ldrb	r3, [r7, #22]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7ff ffad 	bl	8015a14 <ledToggle>
    while(cliKeepLoop())
 8015aba:	f7fd fd43 	bl	8013544 <cliKeepLoop>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d1eb      	bne.n	8015a9c <cliLed+0x50>
      }
    }

    ret = true;
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8015ac8:	7dfb      	ldrb	r3, [r7, #23]
 8015aca:	f083 0301 	eor.w	r3, r3, #1
 8015ace:	b2db      	uxtb	r3, r3
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d003      	beq.n	8015adc <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8015ad4:	2101      	movs	r1, #1
 8015ad6:	4804      	ldr	r0, [pc, #16]	; (8015ae8 <cliLed+0x9c>)
 8015ad8:	f7fd fc3a 	bl	8013350 <cliPrintf>
  }
}
 8015adc:	bf00      	nop
 8015ade:	3718      	adds	r7, #24
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	080297d0 	.word	0x080297d0
 8015ae8:	080297d8 	.word	0x080297d8

08015aec <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8015af4:	4b0d      	ldr	r3, [pc, #52]	; (8015b2c <DWT_Delay_us+0x40>)
 8015af6:	685b      	ldr	r3, [r3, #4]
 8015af8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8015afa:	f00a f88d 	bl	801fc18 <HAL_RCC_GetHCLKFreq>
 8015afe:	4603      	mov	r3, r0
 8015b00:	4a0b      	ldr	r2, [pc, #44]	; (8015b30 <DWT_Delay_us+0x44>)
 8015b02:	fba2 2303 	umull	r2, r3, r2, r3
 8015b06:	0c9b      	lsrs	r3, r3, #18
 8015b08:	687a      	ldr	r2, [r7, #4]
 8015b0a:	fb02 f303 	mul.w	r3, r2, r3
 8015b0e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8015b10:	bf00      	nop
 8015b12:	4b06      	ldr	r3, [pc, #24]	; (8015b2c <DWT_Delay_us+0x40>)
 8015b14:	685a      	ldr	r2, [r3, #4]
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	1ad2      	subs	r2, r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d3f8      	bcc.n	8015b12 <DWT_Delay_us+0x26>
}
 8015b20:	bf00      	nop
 8015b22:	bf00      	nop
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	e0001000 	.word	0xe0001000
 8015b30:	431bde83 	.word	0x431bde83

08015b34 <ONEWIRE_LOW>:
#include "user_delay.h"
#include "gpio.h"


void ONEWIRE_LOW(OneWire_t *gp)
{
 8015b34:	b480      	push	{r7}
 8015b36:	b083      	sub	sp, #12
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	889b      	ldrh	r3, [r3, #4]
 8015b40:	041a      	lsls	r2, r3, #16
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	619a      	str	r2, [r3, #24]
}
 8015b48:	bf00      	nop
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	889a      	ldrh	r2, [r3, #4]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	619a      	str	r2, [r3, #24]
}
 8015b66:	bf00      	nop
 8015b68:	370c      	adds	r7, #12
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b70:	4770      	bx	lr

08015b72 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8015b72:	b580      	push	{r7, lr}
 8015b74:	b088      	sub	sp, #32
 8015b76:	af00      	add	r7, sp, #0
 8015b78:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015b82:	2302      	movs	r3, #2
 8015b84:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	889b      	ldrh	r3, [r3, #4]
 8015b8a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f107 020c 	add.w	r2, r7, #12
 8015b94:	4611      	mov	r1, r2
 8015b96:	4618      	mov	r0, r3
 8015b98:	f009 f970 	bl	801ee7c <HAL_GPIO_Init>
}
 8015b9c:	bf00      	nop
 8015b9e:	3720      	adds	r7, #32
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	bd80      	pop	{r7, pc}

08015ba4 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b088      	sub	sp, #32
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8015bac:	2311      	movs	r3, #17
 8015bae:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	889b      	ldrh	r3, [r3, #4]
 8015bbc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f107 020c 	add.w	r2, r7, #12
 8015bc6:	4611      	mov	r1, r2
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f009 f957 	bl	801ee7c <HAL_GPIO_Init>

}
 8015bce:	bf00      	nop
 8015bd0:	3720      	adds	r7, #32
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b084      	sub	sp, #16
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	60f8      	str	r0, [r7, #12]
 8015bde:	60b9      	str	r1, [r7, #8]
 8015be0:	4613      	mov	r3, r2
 8015be2:	80fb      	strh	r3, [r7, #6]
	OneWireStruct->GPIOx = GPIOx;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	68ba      	ldr	r2, [r7, #8]
 8015be8:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	88fa      	ldrh	r2, [r7, #6]
 8015bee:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f7ff ffd7 	bl	8015ba4 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8015bf6:	68f8      	ldr	r0, [r7, #12]
 8015bf8:	f7ff ffac 	bl	8015b54 <ONEWIRE_HIGH>
	DWT_Delay_us(1000);
 8015bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015c00:	f7ff ff74 	bl	8015aec <DWT_Delay_us>
	ONEWIRE_LOW(OneWireStruct);
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	f7ff ff95 	bl	8015b34 <ONEWIRE_LOW>
	DWT_Delay_us(1000);
 8015c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015c0e:	f7ff ff6d 	bl	8015aec <DWT_Delay_us>
	ONEWIRE_HIGH(OneWireStruct);
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f7ff ff9e 	bl	8015b54 <ONEWIRE_HIGH>
	DWT_Delay_us(2000);
 8015c18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015c1c:	f7ff ff66 	bl	8015aec <DWT_Delay_us>
}
 8015c20:	bf00      	nop
 8015c22:	3710      	adds	r7, #16
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f7ff ff7f 	bl	8015b34 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f7ff ffb4 	bl	8015ba4 <ONEWIRE_OUTPUT>
	DWT_Delay_us(480);
 8015c3c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8015c40:	f7ff ff54 	bl	8015aec <DWT_Delay_us>
	DWT_Delay_us(20);
 8015c44:	2014      	movs	r0, #20
 8015c46:	f7ff ff51 	bl	8015aec <DWT_Delay_us>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f7ff ff91 	bl	8015b72 <ONEWIRE_INPUT>
	DWT_Delay_us(70);
 8015c50:	2046      	movs	r0, #70	; 0x46
 8015c52:	f7ff ff4b 	bl	8015aec <DWT_Delay_us>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681a      	ldr	r2, [r3, #0]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	889b      	ldrh	r3, [r3, #4]
 8015c5e:	4619      	mov	r1, r3
 8015c60:	4610      	mov	r0, r2
 8015c62:	f009 fb73 	bl	801f34c <HAL_GPIO_ReadPin>
 8015c66:	4603      	mov	r3, r0
 8015c68:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	DWT_Delay_us(410);
 8015c6a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8015c6e:	f7ff ff3d 	bl	8015aec <DWT_Delay_us>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8015c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3710      	adds	r7, #16
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	460b      	mov	r3, r1
 8015c86:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8015c88:	78fb      	ldrb	r3, [r7, #3]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d012      	beq.n	8015cb4 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7ff ff50 	bl	8015b34 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f7ff ff85 	bl	8015ba4 <ONEWIRE_OUTPUT>
		DWT_Delay_us(10);
 8015c9a:	200a      	movs	r0, #10
 8015c9c:	f7ff ff26 	bl	8015aec <DWT_Delay_us>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f7ff ff66 	bl	8015b72 <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		DWT_Delay_us(55);
 8015ca6:	2037      	movs	r0, #55	; 0x37
 8015ca8:	f7ff ff20 	bl	8015aec <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff ff60 	bl	8015b72 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		DWT_Delay_us(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8015cb2:	e011      	b.n	8015cd8 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7ff ff3d 	bl	8015b34 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f7ff ff72 	bl	8015ba4 <ONEWIRE_OUTPUT>
		DWT_Delay_us(65);
 8015cc0:	2041      	movs	r0, #65	; 0x41
 8015cc2:	f7ff ff13 	bl	8015aec <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7ff ff53 	bl	8015b72 <ONEWIRE_INPUT>
		DWT_Delay_us(5);
 8015ccc:	2005      	movs	r0, #5
 8015cce:	f7ff ff0d 	bl	8015aec <DWT_Delay_us>
		ONEWIRE_INPUT(OneWireStruct);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7ff ff4d 	bl	8015b72 <ONEWIRE_INPUT>
}
 8015cd8:	bf00      	nop
 8015cda:	3708      	adds	r7, #8
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f7ff ff21 	bl	8015b34 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f7ff ff56 	bl	8015ba4 <ONEWIRE_OUTPUT>
	DWT_Delay_us(2);
 8015cf8:	2002      	movs	r0, #2
 8015cfa:	f7ff fef7 	bl	8015aec <DWT_Delay_us>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff ff37 	bl	8015b72 <ONEWIRE_INPUT>
	DWT_Delay_us(10);
 8015d04:	200a      	movs	r0, #10
 8015d06:	f7ff fef1 	bl	8015aec <DWT_Delay_us>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	889b      	ldrh	r3, [r3, #4]
 8015d12:	4619      	mov	r1, r3
 8015d14:	4610      	mov	r0, r2
 8015d16:	f009 fb19 	bl	801f34c <HAL_GPIO_ReadPin>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d001      	beq.n	8015d24 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8015d20:	2301      	movs	r3, #1
 8015d22:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	DWT_Delay_us(50);
 8015d24:	2032      	movs	r0, #50	; 0x32
 8015d26:	f7ff fee1 	bl	8015aec <DWT_Delay_us>

	/* Return bit value */
	return bit;
 8015d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}

08015d34 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b084      	sub	sp, #16
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8015d40:	2308      	movs	r3, #8
 8015d42:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8015d44:	e00a      	b.n	8015d5c <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8015d46:	78fb      	ldrb	r3, [r7, #3]
 8015d48:	f003 0301 	and.w	r3, r3, #1
 8015d4c:	b2db      	uxtb	r3, r3
 8015d4e:	4619      	mov	r1, r3
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7ff ff93 	bl	8015c7c <OneWire_WriteBit>
		byte >>= 1;
 8015d56:	78fb      	ldrb	r3, [r7, #3]
 8015d58:	085b      	lsrs	r3, r3, #1
 8015d5a:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8015d5c:	7bfb      	ldrb	r3, [r7, #15]
 8015d5e:	1e5a      	subs	r2, r3, #1
 8015d60:	73fa      	strb	r2, [r7, #15]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d1ef      	bne.n	8015d46 <OneWire_WriteByte+0x12>
	}
}
 8015d66:	bf00      	nop
 8015d68:	bf00      	nop
 8015d6a:	3710      	adds	r7, #16
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8015d78:	2308      	movs	r3, #8
 8015d7a:	73fb      	strb	r3, [r7, #15]
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8015d80:	e00d      	b.n	8015d9e <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8015d82:	7bbb      	ldrb	r3, [r7, #14]
 8015d84:	085b      	lsrs	r3, r3, #1
 8015d86:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8015d88:	6878      	ldr	r0, [r7, #4]
 8015d8a:	f7ff ffa9 	bl	8015ce0 <OneWire_ReadBit>
 8015d8e:	4603      	mov	r3, r0
 8015d90:	01db      	lsls	r3, r3, #7
 8015d92:	b25a      	sxtb	r2, r3
 8015d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015d98:	4313      	orrs	r3, r2
 8015d9a:	b25b      	sxtb	r3, r3
 8015d9c:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8015d9e:	7bfb      	ldrb	r3, [r7, #15]
 8015da0:	1e5a      	subs	r2, r3, #1
 8015da2:	73fa      	strb	r2, [r7, #15]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d1ec      	bne.n	8015d82 <OneWire_ReadByte+0x12>
	}

	return byte;
 8015da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3710      	adds	r7, #16
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}

08015db2 <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8015db2:	b580      	push	{r7, lr}
 8015db4:	b082      	sub	sp, #8
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f000 f816 	bl	8015dec <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8015dc0:	21f0      	movs	r1, #240	; 0xf0
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f000 f825 	bl	8015e12 <OneWire_Search>
 8015dc8:	4603      	mov	r3, r0
}
 8015dca:	4618      	mov	r0, r3
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8015dd2:	b580      	push	{r7, lr}
 8015dd4:	b082      	sub	sp, #8
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8015dda:	21f0      	movs	r1, #240	; 0xf0
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f000 f818 	bl	8015e12 <OneWire_Search>
 8015de2:	4603      	mov	r3, r0
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8015dec:	b480      	push	{r7}
 8015dee:	b083      	sub	sp, #12
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2200      	movs	r2, #0
 8015e04:	71da      	strb	r2, [r3, #7]
}
 8015e06:	bf00      	nop
 8015e08:	370c      	adds	r7, #12
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr

08015e12 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b084      	sub	sp, #16
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
 8015e1a:	460b      	mov	r3, r1
 8015e1c:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8015e26:	2300      	movs	r3, #0
 8015e28:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	7a1b      	ldrb	r3, [r3, #8]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	f040 809a 	bne.w	8015f70 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7ff fef3 	bl	8015c28 <OneWire_Reset>
 8015e42:	4603      	mov	r3, r0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d00a      	beq.n	8015e5e <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2200      	movs	r2, #0
 8015e58:	71da      	strb	r2, [r3, #7]
			return 0;
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	e09b      	b.n	8015f96 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8015e5e:	78fb      	ldrb	r3, [r7, #3]
 8015e60:	4619      	mov	r1, r3
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f7ff ff66 	bl	8015d34 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7ff ff39 	bl	8015ce0 <OneWire_ReadBit>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f7ff ff34 	bl	8015ce0 <OneWire_ReadBit>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8015e7c:	7a7b      	ldrb	r3, [r7, #9]
 8015e7e:	2b01      	cmp	r3, #1
 8015e80:	d102      	bne.n	8015e88 <OneWire_Search+0x76>
 8015e82:	7a3b      	ldrb	r3, [r7, #8]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	d064      	beq.n	8015f52 <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8015e88:	7a7a      	ldrb	r2, [r7, #9]
 8015e8a:	7a3b      	ldrb	r3, [r7, #8]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	d002      	beq.n	8015e96 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8015e90:	7a7b      	ldrb	r3, [r7, #9]
 8015e92:	72bb      	strb	r3, [r7, #10]
 8015e94:	e026      	b.n	8015ee4 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	799b      	ldrb	r3, [r3, #6]
 8015e9a:	7bfa      	ldrb	r2, [r7, #15]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	d20d      	bcs.n	8015ebc <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8015ea0:	7b7b      	ldrb	r3, [r7, #13]
 8015ea2:	687a      	ldr	r2, [r7, #4]
 8015ea4:	4413      	add	r3, r2
 8015ea6:	7a5a      	ldrb	r2, [r3, #9]
 8015ea8:	7afb      	ldrb	r3, [r7, #11]
 8015eaa:	4013      	ands	r3, r2
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	bf14      	ite	ne
 8015eb2:	2301      	movne	r3, #1
 8015eb4:	2300      	moveq	r3, #0
 8015eb6:	b2db      	uxtb	r3, r3
 8015eb8:	72bb      	strb	r3, [r7, #10]
 8015eba:	e008      	b.n	8015ece <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	799b      	ldrb	r3, [r3, #6]
 8015ec0:	7bfa      	ldrb	r2, [r7, #15]
 8015ec2:	429a      	cmp	r2, r3
 8015ec4:	bf0c      	ite	eq
 8015ec6:	2301      	moveq	r3, #1
 8015ec8:	2300      	movne	r3, #0
 8015eca:	b2db      	uxtb	r3, r3
 8015ecc:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8015ece:	7abb      	ldrb	r3, [r7, #10]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d107      	bne.n	8015ee4 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8015ed4:	7bfb      	ldrb	r3, [r7, #15]
 8015ed6:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8015ed8:	7bbb      	ldrb	r3, [r7, #14]
 8015eda:	2b08      	cmp	r3, #8
 8015edc:	d802      	bhi.n	8015ee4 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	7bba      	ldrb	r2, [r7, #14]
 8015ee2:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8015ee4:	7abb      	ldrb	r3, [r7, #10]
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d10c      	bne.n	8015f04 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8015eea:	7b7b      	ldrb	r3, [r7, #13]
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	4413      	add	r3, r2
 8015ef0:	7a59      	ldrb	r1, [r3, #9]
 8015ef2:	7b7b      	ldrb	r3, [r7, #13]
 8015ef4:	7afa      	ldrb	r2, [r7, #11]
 8015ef6:	430a      	orrs	r2, r1
 8015ef8:	b2d1      	uxtb	r1, r2
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	4413      	add	r3, r2
 8015efe:	460a      	mov	r2, r1
 8015f00:	725a      	strb	r2, [r3, #9]
 8015f02:	e010      	b.n	8015f26 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8015f04:	7b7b      	ldrb	r3, [r7, #13]
 8015f06:	687a      	ldr	r2, [r7, #4]
 8015f08:	4413      	add	r3, r2
 8015f0a:	7a5b      	ldrb	r3, [r3, #9]
 8015f0c:	b25a      	sxtb	r2, r3
 8015f0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015f12:	43db      	mvns	r3, r3
 8015f14:	b25b      	sxtb	r3, r3
 8015f16:	4013      	ands	r3, r2
 8015f18:	b25a      	sxtb	r2, r3
 8015f1a:	7b7b      	ldrb	r3, [r7, #13]
 8015f1c:	b2d1      	uxtb	r1, r2
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	4413      	add	r3, r2
 8015f22:	460a      	mov	r2, r1
 8015f24:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8015f26:	7abb      	ldrb	r3, [r7, #10]
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7ff fea6 	bl	8015c7c <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8015f30:	7bfb      	ldrb	r3, [r7, #15]
 8015f32:	3301      	adds	r3, #1
 8015f34:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8015f36:	7afb      	ldrb	r3, [r7, #11]
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8015f3c:	7afb      	ldrb	r3, [r7, #11]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d104      	bne.n	8015f4c <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8015f42:	7b7b      	ldrb	r3, [r7, #13]
 8015f44:	3301      	adds	r3, #1
 8015f46:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8015f48:	2301      	movs	r3, #1
 8015f4a:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8015f4c:	7b7b      	ldrb	r3, [r7, #13]
 8015f4e:	2b07      	cmp	r3, #7
 8015f50:	d98a      	bls.n	8015e68 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8015f52:	7bfb      	ldrb	r3, [r7, #15]
 8015f54:	2b40      	cmp	r3, #64	; 0x40
 8015f56:	d90b      	bls.n	8015f70 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	7bba      	ldrb	r2, [r7, #14]
 8015f5c:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	799b      	ldrb	r3, [r3, #6]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d102      	bne.n	8015f6c <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2201      	movs	r2, #1
 8015f6a:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8015f70:	7b3b      	ldrb	r3, [r7, #12]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d003      	beq.n	8015f7e <OneWire_Search+0x16c>
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	7a5b      	ldrb	r3, [r3, #9]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d10a      	bne.n	8015f94 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	2200      	movs	r2, #0
 8015f82:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2200      	movs	r2, #0
 8015f88:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8015f90:	2300      	movs	r3, #0
 8015f92:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8015f94:	7b3b      	ldrb	r3, [r7, #12]
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8015f9e:	b580      	push	{r7, lr}
 8015fa0:	b084      	sub	sp, #16
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
 8015fa6:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8015fa8:	2155      	movs	r1, #85	; 0x55
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f7ff fec2 	bl	8015d34 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	73fb      	strb	r3, [r7, #15]
 8015fb4:	e00a      	b.n	8015fcc <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8015fb6:	7bfb      	ldrb	r3, [r7, #15]
 8015fb8:	683a      	ldr	r2, [r7, #0]
 8015fba:	4413      	add	r3, r2
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	6878      	ldr	r0, [r7, #4]
 8015fc2:	f7ff feb7 	bl	8015d34 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8015fc6:	7bfb      	ldrb	r3, [r7, #15]
 8015fc8:	3301      	adds	r3, #1
 8015fca:	73fb      	strb	r3, [r7, #15]
 8015fcc:	7bfb      	ldrb	r3, [r7, #15]
 8015fce:	2b07      	cmp	r3, #7
 8015fd0:	d9f1      	bls.n	8015fb6 <OneWire_SelectWithPointer+0x18>
	}
}
 8015fd2:	bf00      	nop
 8015fd4:	bf00      	nop
 8015fd6:	3710      	adds	r7, #16
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8015fdc:	b480      	push	{r7}
 8015fde:	b085      	sub	sp, #20
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	73fb      	strb	r3, [r7, #15]
 8015fea:	e00a      	b.n	8016002 <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8015fec:	7bfa      	ldrb	r2, [r7, #15]
 8015fee:	7bfb      	ldrb	r3, [r7, #15]
 8015ff0:	6839      	ldr	r1, [r7, #0]
 8015ff2:	440b      	add	r3, r1
 8015ff4:	6879      	ldr	r1, [r7, #4]
 8015ff6:	440a      	add	r2, r1
 8015ff8:	7a52      	ldrb	r2, [r2, #9]
 8015ffa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8015ffc:	7bfb      	ldrb	r3, [r7, #15]
 8015ffe:	3301      	adds	r3, #1
 8016000:	73fb      	strb	r3, [r7, #15]
 8016002:	7bfb      	ldrb	r3, [r7, #15]
 8016004:	2b07      	cmp	r3, #7
 8016006:	d9f1      	bls.n	8015fec <OneWire_GetFullROM+0x10>
	}
}
 8016008:	bf00      	nop
 801600a:	bf00      	nop
 801600c:	3714      	adds	r7, #20
 801600e:	46bd      	mov	sp, r7
 8016010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016014:	4770      	bx	lr

08016016 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8016016:	b480      	push	{r7}
 8016018:	b085      	sub	sp, #20
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	460b      	mov	r3, r1
 8016020:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8016022:	2300      	movs	r3, #0
 8016024:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 8016026:	e022      	b.n	801606e <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	1c5a      	adds	r2, r3, #1
 801602c:	607a      	str	r2, [r7, #4]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8016032:	2308      	movs	r3, #8
 8016034:	737b      	strb	r3, [r7, #13]
 8016036:	e017      	b.n	8016068 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8016038:	7bfa      	ldrb	r2, [r7, #15]
 801603a:	7bbb      	ldrb	r3, [r7, #14]
 801603c:	4053      	eors	r3, r2
 801603e:	b2db      	uxtb	r3, r3
 8016040:	f003 0301 	and.w	r3, r3, #1
 8016044:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8016046:	7bfb      	ldrb	r3, [r7, #15]
 8016048:	085b      	lsrs	r3, r3, #1
 801604a:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 801604c:	7b3b      	ldrb	r3, [r7, #12]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d004      	beq.n	801605c <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8016052:	7bfb      	ldrb	r3, [r7, #15]
 8016054:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8016058:	43db      	mvns	r3, r3
 801605a:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 801605c:	7bbb      	ldrb	r3, [r7, #14]
 801605e:	085b      	lsrs	r3, r3, #1
 8016060:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8016062:	7b7b      	ldrb	r3, [r7, #13]
 8016064:	3b01      	subs	r3, #1
 8016066:	737b      	strb	r3, [r7, #13]
 8016068:	7b7b      	ldrb	r3, [r7, #13]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d1e4      	bne.n	8016038 <OneWire_CRC8+0x22>
	while (len--) {
 801606e:	78fb      	ldrb	r3, [r7, #3]
 8016070:	1e5a      	subs	r2, r3, #1
 8016072:	70fa      	strb	r2, [r7, #3]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d1d7      	bne.n	8016028 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8016078:	7bfb      	ldrb	r3, [r7, #15]
}
 801607a:	4618      	mov	r0, r3
 801607c:	3714      	adds	r7, #20
 801607e:	46bd      	mov	sp, r7
 8016080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016084:	4770      	bx	lr
	...

08016088 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8016088:	b480      	push	{r7}
 801608a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801608c:	f3bf 8f4f 	dsb	sy
}
 8016090:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8016092:	4b06      	ldr	r3, [pc, #24]	; (80160ac <__NVIC_SystemReset+0x24>)
 8016094:	68db      	ldr	r3, [r3, #12]
 8016096:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801609a:	4904      	ldr	r1, [pc, #16]	; (80160ac <__NVIC_SystemReset+0x24>)
 801609c:	4b04      	ldr	r3, [pc, #16]	; (80160b0 <__NVIC_SystemReset+0x28>)
 801609e:	4313      	orrs	r3, r2
 80160a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80160a2:	f3bf 8f4f 	dsb	sy
}
 80160a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80160a8:	bf00      	nop
 80160aa:	e7fd      	b.n	80160a8 <__NVIC_SystemReset+0x20>
 80160ac:	e000ed00 	.word	0xe000ed00
 80160b0:	05fa0004 	.word	0x05fa0004

080160b4 <resetISR>:
static void resetToRunBoot(void);



void resetISR(void)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	af00      	add	r7, sp, #0
  if (run_timeout_count > 0)
 80160b8:	4b08      	ldr	r3, [pc, #32]	; (80160dc <resetISR+0x28>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d00a      	beq.n	80160d6 <resetISR+0x22>
  {
    run_timeout_count--;
 80160c0:	4b06      	ldr	r3, [pc, #24]	; (80160dc <resetISR+0x28>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3b01      	subs	r3, #1
 80160c6:	4a05      	ldr	r2, [pc, #20]	; (80160dc <resetISR+0x28>)
 80160c8:	6013      	str	r3, [r2, #0]

    if (run_timeout_count == 0)
 80160ca:	4b04      	ldr	r3, [pc, #16]	; (80160dc <resetISR+0x28>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d101      	bne.n	80160d6 <resetISR+0x22>
    {
      resetToRunBoot();
 80160d2:	f000 f825 	bl	8016120 <resetToRunBoot>
    }
  }
}
 80160d6:	bf00      	nop
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	2000aac4 	.word	0x2000aac4

080160e0 <resetInit>:


bool resetInit(void)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b083      	sub	sp, #12
 80160e4:	af00      	add	r7, sp, #0
  bool ret = true;
 80160e6:	2301      	movs	r3, #1
 80160e8:	71fb      	strb	r3, [r7, #7]
  }

  rtcBackupRegWrite(1, 0);
#endif

  return ret;
 80160ea:	79fb      	ldrb	r3, [r7, #7]
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	370c      	adds	r7, #12
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr

080160f8 <resetToBoot>:
{
  return reset_count;
}

void resetToBoot(uint32_t timeout)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  if (timeout == 0)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d102      	bne.n	801610c <resetToBoot+0x14>
  {
    resetToRunBoot();
 8016106:	f000 f80b 	bl	8016120 <resetToRunBoot>
  }
  else
  {
    run_timeout_count = timeout;
  }
}
 801610a:	e002      	b.n	8016112 <resetToBoot+0x1a>
    run_timeout_count = timeout;
 801610c:	4a03      	ldr	r2, [pc, #12]	; (801611c <resetToBoot+0x24>)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6013      	str	r3, [r2, #0]
}
 8016112:	bf00      	nop
 8016114:	3708      	adds	r7, #8
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}
 801611a:	bf00      	nop
 801611c:	2000aac4 	.word	0x2000aac4

08016120 <resetToRunBoot>:

void resetToRunBoot(void)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
  uint32_t reg;

  reg = rtcBackupRegRead(0);
 8016126:	2000      	movs	r0, #0
 8016128:	f000 f848 	bl	80161bc <rtcBackupRegRead>
 801612c:	6078      	str	r0, [r7, #4]

  reg |= (1<<0);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f043 0301 	orr.w	r3, r3, #1
 8016134:	607b      	str	r3, [r7, #4]
  rtcBackupRegWrite(0, reg);
 8016136:	6879      	ldr	r1, [r7, #4]
 8016138:	2000      	movs	r0, #0
 801613a:	f000 f84f 	bl	80161dc <rtcBackupRegWrite>
  NVIC_SystemReset();
 801613e:	f7ff ffa3 	bl	8016088 <__NVIC_SystemReset>
	...

08016144 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
  bool ret = true;
 801614a:	2301      	movs	r3, #1
 801614c:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 801614e:	2300      	movs	r3, #0
 8016150:	603b      	str	r3, [r7, #0]
 8016152:	4b17      	ldr	r3, [pc, #92]	; (80161b0 <rtcInit+0x6c>)
 8016154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016156:	4a16      	ldr	r2, [pc, #88]	; (80161b0 <rtcInit+0x6c>)
 8016158:	f043 0304 	orr.w	r3, r3, #4
 801615c:	6313      	str	r3, [r2, #48]	; 0x30
 801615e:	4b14      	ldr	r3, [pc, #80]	; (80161b0 <rtcInit+0x6c>)
 8016160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016162:	f003 0304 	and.w	r3, r3, #4
 8016166:	603b      	str	r3, [r7, #0]
 8016168:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 801616a:	4b12      	ldr	r3, [pc, #72]	; (80161b4 <rtcInit+0x70>)
 801616c:	4a12      	ldr	r2, [pc, #72]	; (80161b8 <rtcInit+0x74>)
 801616e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8016170:	4b10      	ldr	r3, [pc, #64]	; (80161b4 <rtcInit+0x70>)
 8016172:	2200      	movs	r2, #0
 8016174:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8016176:	4b0f      	ldr	r3, [pc, #60]	; (80161b4 <rtcInit+0x70>)
 8016178:	227f      	movs	r2, #127	; 0x7f
 801617a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801617c:	4b0d      	ldr	r3, [pc, #52]	; (80161b4 <rtcInit+0x70>)
 801617e:	22ff      	movs	r2, #255	; 0xff
 8016180:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8016182:	4b0c      	ldr	r3, [pc, #48]	; (80161b4 <rtcInit+0x70>)
 8016184:	2200      	movs	r2, #0
 8016186:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8016188:	4b0a      	ldr	r3, [pc, #40]	; (80161b4 <rtcInit+0x70>)
 801618a:	2200      	movs	r2, #0
 801618c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801618e:	4b09      	ldr	r3, [pc, #36]	; (80161b4 <rtcInit+0x70>)
 8016190:	2200      	movs	r2, #0
 8016192:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8016194:	4807      	ldr	r0, [pc, #28]	; (80161b4 <rtcInit+0x70>)
 8016196:	f009 fe63 	bl	801fe60 <HAL_RTC_Init>
 801619a:	4603      	mov	r3, r0
 801619c:	2b00      	cmp	r3, #0
 801619e:	d001      	beq.n	80161a4 <rtcInit+0x60>
  {
    Error_Handler();
 80161a0:	f7fc fad0 	bl	8012744 <Error_Handler>
  }

  return ret;
 80161a4:	79fb      	ldrb	r3, [r7, #7]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3708      	adds	r7, #8
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	40023800 	.word	0x40023800
 80161b4:	2000aac8 	.word	0x2000aac8
 80161b8:	40002800 	.word	0x40002800

080161bc <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b082      	sub	sp, #8
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80161c4:	6879      	ldr	r1, [r7, #4]
 80161c6:	4804      	ldr	r0, [pc, #16]	; (80161d8 <rtcBackupRegRead+0x1c>)
 80161c8:	f009 ff49 	bl	802005e <HAL_RTCEx_BKUPRead>
 80161cc:	4603      	mov	r3, r0
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3708      	adds	r7, #8
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}
 80161d6:	bf00      	nop
 80161d8:	2000aac8 	.word	0x2000aac8

080161dc <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b082      	sub	sp, #8
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80161e6:	683a      	ldr	r2, [r7, #0]
 80161e8:	6879      	ldr	r1, [r7, #4]
 80161ea:	4803      	ldr	r0, [pc, #12]	; (80161f8 <rtcBackupRegWrite+0x1c>)
 80161ec:	f009 ff1d 	bl	802002a <HAL_RTCEx_BKUPWrite>
}
 80161f0:	bf00      	nop
 80161f2:	3708      	adds	r7, #8
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	2000aac8 	.word	0x2000aac8

080161fc <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b083      	sub	sp, #12
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4a05      	ldr	r2, [pc, #20]	; (8016220 <HAL_RTC_MspInit+0x24>)
 801620a:	4293      	cmp	r3, r2
 801620c:	d102      	bne.n	8016214 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 801620e:	4b05      	ldr	r3, [pc, #20]	; (8016224 <HAL_RTC_MspInit+0x28>)
 8016210:	2201      	movs	r2, #1
 8016212:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8016214:	bf00      	nop
 8016216:	370c      	adds	r7, #12
 8016218:	46bd      	mov	sp, r7
 801621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621e:	4770      	bx	lr
 8016220:	40002800 	.word	0x40002800
 8016224:	42470e3c 	.word	0x42470e3c

08016228 <sdInit>:
static void cliSd(cli_args_t *args);
#endif


bool sdInit(void)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
  bool ret = false;
 801622e:	2300      	movs	r3, #0
 8016230:	71fb      	strb	r3, [r7, #7]


  hsd.Instance            = SDIO;
 8016232:	4b1d      	ldr	r3, [pc, #116]	; (80162a8 <sdInit+0x80>)
 8016234:	4a1d      	ldr	r2, [pc, #116]	; (80162ac <sdInit+0x84>)
 8016236:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge      = SDIO_CLOCK_EDGE_RISING;
 8016238:	4b1b      	ldr	r3, [pc, #108]	; (80162a8 <sdInit+0x80>)
 801623a:	2200      	movs	r2, #0
 801623c:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass    = SDIO_CLOCK_BYPASS_DISABLE;
 801623e:	4b1a      	ldr	r3, [pc, #104]	; (80162a8 <sdInit+0x80>)
 8016240:	2200      	movs	r2, #0
 8016242:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8016244:	4b18      	ldr	r3, [pc, #96]	; (80162a8 <sdInit+0x80>)
 8016246:	2200      	movs	r2, #0
 8016248:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide        = SDIO_BUS_WIDE_1B;
 801624a:	4b17      	ldr	r3, [pc, #92]	; (80162a8 <sdInit+0x80>)
 801624c:	2200      	movs	r2, #0
 801624e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8016250:	4b15      	ldr	r3, [pc, #84]	; (80162a8 <sdInit+0x80>)
 8016252:	2200      	movs	r2, #0
 8016254:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv       = SDIO_TRANSFER_CLK_DIV;
 8016256:	4b14      	ldr	r3, [pc, #80]	; (80162a8 <sdInit+0x80>)
 8016258:	2200      	movs	r2, #0
 801625a:	619a      	str	r2, [r3, #24]


  is_detected = false;
 801625c:	4b14      	ldr	r3, [pc, #80]	; (80162b0 <sdInit+0x88>)
 801625e:	2200      	movs	r2, #0
 8016260:	701a      	strb	r2, [r3, #0]
  if (true)//if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
  {
    is_detected = true;
 8016262:	4b13      	ldr	r3, [pc, #76]	; (80162b0 <sdInit+0x88>)
 8016264:	2201      	movs	r2, #1
 8016266:	701a      	strb	r2, [r3, #0]
  }

  if (is_detected == true)
 8016268:	4b11      	ldr	r3, [pc, #68]	; (80162b0 <sdInit+0x88>)
 801626a:	781b      	ldrb	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00f      	beq.n	8016290 <sdInit+0x68>
  {
    if (HAL_SD_Init(&hsd) == HAL_OK)
 8016270:	480d      	ldr	r0, [pc, #52]	; (80162a8 <sdInit+0x80>)
 8016272:	f009 ff0c 	bl	802008e <HAL_SD_Init>
 8016276:	4603      	mov	r3, r0
 8016278:	2b00      	cmp	r3, #0
 801627a:	d109      	bne.n	8016290 <sdInit+0x68>
    {
      if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 801627c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016280:	4809      	ldr	r0, [pc, #36]	; (80162a8 <sdInit+0x80>)
 8016282:	f00a fcd9 	bl	8020c38 <HAL_SD_ConfigWideBusOperation>
 8016286:	4603      	mov	r3, r0
 8016288:	2b00      	cmp	r3, #0
 801628a:	d101      	bne.n	8016290 <sdInit+0x68>
      {
        ret = true;
 801628c:	2301      	movs	r3, #1
 801628e:	71fb      	strb	r3, [r7, #7]
      }
    }
  }

  is_init = ret;
 8016290:	4a08      	ldr	r2, [pc, #32]	; (80162b4 <sdInit+0x8c>)
 8016292:	79fb      	ldrb	r3, [r7, #7]
 8016294:	7013      	strb	r3, [r2, #0]


#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 8016296:	4908      	ldr	r1, [pc, #32]	; (80162b8 <sdInit+0x90>)
 8016298:	4808      	ldr	r0, [pc, #32]	; (80162bc <sdInit+0x94>)
 801629a:	f7fd f969 	bl	8013570 <cliAdd>
#endif

  return ret;
 801629e:	79fb      	ldrb	r3, [r7, #7]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3708      	adds	r7, #8
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	2000aaec 	.word	0x2000aaec
 80162ac:	40012c00 	.word	0x40012c00
 80162b0:	2000aae9 	.word	0x2000aae9
 80162b4:	2000aae8 	.word	0x2000aae8
 80162b8:	080167a9 	.word	0x080167a9
 80162bc:	080297f8 	.word	0x080297f8

080162c0 <sdIsInit>:

  return ret;
}

bool sdIsInit(void)
{
 80162c0:	b480      	push	{r7}
 80162c2:	af00      	add	r7, sp, #0
  return is_init;
 80162c4:	4b03      	ldr	r3, [pc, #12]	; (80162d4 <sdIsInit+0x14>)
 80162c6:	781b      	ldrb	r3, [r3, #0]
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr
 80162d2:	bf00      	nop
 80162d4:	2000aae8 	.word	0x2000aae8

080162d8 <sdIsDetected>:

bool sdIsDetected(void)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80162dc:	2000      	movs	r0, #0
 80162de:	f7fe fabd 	bl	801485c <gpioPinRead>
 80162e2:	4603      	mov	r3, r0
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d003      	beq.n	80162f0 <sdIsDetected+0x18>
  {
    is_detected = true;
 80162e8:	4b05      	ldr	r3, [pc, #20]	; (8016300 <sdIsDetected+0x28>)
 80162ea:	2201      	movs	r2, #1
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	e002      	b.n	80162f6 <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 80162f0:	4b03      	ldr	r3, [pc, #12]	; (8016300 <sdIsDetected+0x28>)
 80162f2:	2200      	movs	r2, #0
 80162f4:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 80162f6:	4b02      	ldr	r3, [pc, #8]	; (8016300 <sdIsDetected+0x28>)
 80162f8:	781b      	ldrb	r3, [r3, #0]
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	bd80      	pop	{r7, pc}
 80162fe:	bf00      	nop
 8016300:	2000aae9 	.word	0x2000aae9

08016304 <sdGetInfo>:

bool sdGetInfo(sd_info_t *p_info)
{
 8016304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016308:	b08c      	sub	sp, #48	; 0x30
 801630a:	af00      	add	r7, sp, #0
 801630c:	6078      	str	r0, [r7, #4]
  bool ret = false;
 801630e:	2300      	movs	r3, #0
 8016310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8016318:	4b24      	ldr	r3, [pc, #144]	; (80163ac <sdGetInfo+0xa8>)
 801631a:	781b      	ldrb	r3, [r3, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d03d      	beq.n	801639c <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8016320:	f107 0308 	add.w	r3, r7, #8
 8016324:	4619      	mov	r1, r3
 8016326:	4822      	ldr	r0, [pc, #136]	; (80163b0 <sdGetInfo+0xac>)
 8016328:	f00a fc5a 	bl	8020be0 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 801632c:	68ba      	ldr	r2, [r7, #8]
 801632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016330:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016336:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8016338:	693a      	ldr	r2, [r7, #16]
 801633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633c:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 801633e:	697a      	ldr	r2, [r7, #20]
 8016340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016342:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8016344:	69ba      	ldr	r2, [r7, #24]
 8016346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016348:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 801634a:	69fa      	ldr	r2, [r7, #28]
 801634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634e:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8016350:	6a3a      	ldr	r2, [r7, #32]
 8016352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016354:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8016356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635a:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 801635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635e:	691b      	ldr	r3, [r3, #16]
 8016360:	2200      	movs	r2, #0
 8016362:	469a      	mov	sl, r3
 8016364:	4693      	mov	fp, r2
 8016366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016368:	695b      	ldr	r3, [r3, #20]
 801636a:	2200      	movs	r2, #0
 801636c:	4698      	mov	r8, r3
 801636e:	4691      	mov	r9, r2
 8016370:	fb08 f20b 	mul.w	r2, r8, fp
 8016374:	fb0a f309 	mul.w	r3, sl, r9
 8016378:	4413      	add	r3, r2
 801637a:	fbaa 4508 	umull	r4, r5, sl, r8
 801637e:	442b      	add	r3, r5
 8016380:	461d      	mov	r5, r3
 8016382:	f04f 0200 	mov.w	r2, #0
 8016386:	f04f 0300 	mov.w	r3, #0
 801638a:	0d22      	lsrs	r2, r4, #20
 801638c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8016390:	0d2b      	lsrs	r3, r5, #20
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	621a      	str	r2, [r3, #32]
    ret = true;
 8016396:	2301      	movs	r3, #1
 8016398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 801639c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3730      	adds	r7, #48	; 0x30
 80163a4:	46bd      	mov	sp, r7
 80163a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80163aa:	bf00      	nop
 80163ac:	2000aae8 	.word	0x2000aae8
 80163b0:	2000aaec 	.word	0x2000aaec

080163b4 <sdIsBusy>:

bool sdIsBusy(void)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 80163ba:	4808      	ldr	r0, [pc, #32]	; (80163dc <sdIsBusy+0x28>)
 80163bc:	f00a fcb8 	bl	8020d30 <HAL_SD_GetCardState>
 80163c0:	4603      	mov	r3, r0
 80163c2:	2b04      	cmp	r3, #4
 80163c4:	d102      	bne.n	80163cc <sdIsBusy+0x18>
  {
    is_busy = false;
 80163c6:	2300      	movs	r3, #0
 80163c8:	71fb      	strb	r3, [r7, #7]
 80163ca:	e001      	b.n	80163d0 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 80163cc:	2301      	movs	r3, #1
 80163ce:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 80163d0:	79fb      	ldrb	r3, [r7, #7]
}
 80163d2:	4618      	mov	r0, r3
 80163d4:	3708      	adds	r7, #8
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bd80      	pop	{r7, pc}
 80163da:	bf00      	nop
 80163dc:	2000aaec 	.word	0x2000aaec

080163e0 <sdIsReady>:

bool sdIsReady(uint32_t timeout)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b084      	sub	sp, #16
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 80163e8:	f7fc f923 	bl	8012632 <millis>
 80163ec:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 80163ee:	e009      	b.n	8016404 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 80163f0:	f7ff ffe0 	bl	80163b4 <sdIsBusy>
 80163f4:	4603      	mov	r3, r0
 80163f6:	f083 0301 	eor.w	r3, r3, #1
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d001      	beq.n	8016404 <sdIsReady+0x24>
    {
      return true;
 8016400:	2301      	movs	r3, #1
 8016402:	e008      	b.n	8016416 <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8016404:	f7fc f915 	bl	8012632 <millis>
 8016408:	4602      	mov	r2, r0
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	1ad3      	subs	r3, r2, r3
 801640e:	687a      	ldr	r2, [r7, #4]
 8016410:	429a      	cmp	r2, r3
 8016412:	d8ed      	bhi.n	80163f0 <sdIsReady+0x10>
    }
  }

  return false;
 8016414:	2300      	movs	r3, #0
}
 8016416:	4618      	mov	r0, r3
 8016418:	3710      	adds	r7, #16
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
	...

08016420 <sdReadBlocks>:

bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b086      	sub	sp, #24
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	607a      	str	r2, [r7, #4]
 801642c:	603b      	str	r3, [r7, #0]
  bool ret = false;
 801642e:	2300      	movs	r3, #0
 8016430:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8016432:	4b1e      	ldr	r3, [pc, #120]	; (80164ac <sdReadBlocks+0x8c>)
 8016434:	2200      	movs	r2, #0
 8016436:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	68fa      	ldr	r2, [r7, #12]
 801643c:	68b9      	ldr	r1, [r7, #8]
 801643e:	481c      	ldr	r0, [pc, #112]	; (80164b0 <sdReadBlocks+0x90>)
 8016440:	f009 feb6 	bl	80201b0 <HAL_SD_ReadBlocks_DMA>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d12a      	bne.n	80164a0 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 801644a:	f7fc f8f2 	bl	8012632 <millis>
 801644e:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8016450:	e007      	b.n	8016462 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8016452:	f7fc f8ee 	bl	8012632 <millis>
 8016456:	4602      	mov	r2, r0
 8016458:	693b      	ldr	r3, [r7, #16]
 801645a:	1ad3      	subs	r3, r2, r3
 801645c:	683a      	ldr	r2, [r7, #0]
 801645e:	429a      	cmp	r2, r3
 8016460:	d908      	bls.n	8016474 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8016462:	4b12      	ldr	r3, [pc, #72]	; (80164ac <sdReadBlocks+0x8c>)
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	b2db      	uxtb	r3, r3
 8016468:	f083 0301 	eor.w	r3, r3, #1
 801646c:	b2db      	uxtb	r3, r3
 801646e:	2b00      	cmp	r3, #0
 8016470:	d1ef      	bne.n	8016452 <sdReadBlocks+0x32>
 8016472:	e00d      	b.n	8016490 <sdReadBlocks+0x70>
      {
        break;
 8016474:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8016476:	e00b      	b.n	8016490 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8016478:	f7fc f8db 	bl	8012632 <millis>
 801647c:	4602      	mov	r2, r0
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	1ad3      	subs	r3, r2, r3
 8016482:	683a      	ldr	r2, [r7, #0]
 8016484:	429a      	cmp	r2, r3
 8016486:	d803      	bhi.n	8016490 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8016488:	4b08      	ldr	r3, [pc, #32]	; (80164ac <sdReadBlocks+0x8c>)
 801648a:	2200      	movs	r2, #0
 801648c:	701a      	strb	r2, [r3, #0]
        break;
 801648e:	e004      	b.n	801649a <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8016490:	f7ff ff90 	bl	80163b4 <sdIsBusy>
 8016494:	4603      	mov	r3, r0
 8016496:	2b00      	cmp	r3, #0
 8016498:	d1ee      	bne.n	8016478 <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 801649a:	4b04      	ldr	r3, [pc, #16]	; (80164ac <sdReadBlocks+0x8c>)
 801649c:	781b      	ldrb	r3, [r3, #0]
 801649e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80164a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3718      	adds	r7, #24
 80164a6:	46bd      	mov	sp, r7
 80164a8:	bd80      	pop	{r7, pc}
 80164aa:	bf00      	nop
 80164ac:	2000aaea 	.word	0x2000aaea
 80164b0:	2000aaec 	.word	0x2000aaec

080164b4 <sdWriteBlocks>:

bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b086      	sub	sp, #24
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	60f8      	str	r0, [r7, #12]
 80164bc:	60b9      	str	r1, [r7, #8]
 80164be:	607a      	str	r2, [r7, #4]
 80164c0:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80164c2:	2300      	movs	r3, #0
 80164c4:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 80164c6:	4b1f      	ldr	r3, [pc, #124]	; (8016544 <sdWriteBlocks+0x90>)
 80164c8:	2200      	movs	r2, #0
 80164ca:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	68fa      	ldr	r2, [r7, #12]
 80164d0:	68b9      	ldr	r1, [r7, #8]
 80164d2:	481d      	ldr	r0, [pc, #116]	; (8016548 <sdWriteBlocks+0x94>)
 80164d4:	f009 ff56 	bl	8020384 <HAL_SD_WriteBlocks_DMA>
 80164d8:	4603      	mov	r3, r0
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d12d      	bne.n	801653a <sdWriteBlocks+0x86>
  {
    pre_time = millis();
 80164de:	f7fc f8a8 	bl	8012632 <millis>
 80164e2:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 80164e4:	e007      	b.n	80164f6 <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80164e6:	f7fc f8a4 	bl	8012632 <millis>
 80164ea:	4602      	mov	r2, r0
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	1ad3      	subs	r3, r2, r3
 80164f0:	683a      	ldr	r2, [r7, #0]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d908      	bls.n	8016508 <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 80164f6:	4b13      	ldr	r3, [pc, #76]	; (8016544 <sdWriteBlocks+0x90>)
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	b2db      	uxtb	r3, r3
 80164fc:	f083 0301 	eor.w	r3, r3, #1
 8016500:	b2db      	uxtb	r3, r3
 8016502:	2b00      	cmp	r3, #0
 8016504:	d1ef      	bne.n	80164e6 <sdWriteBlocks+0x32>
 8016506:	e000      	b.n	801650a <sdWriteBlocks+0x56>
      {
        break;
 8016508:	bf00      	nop
      }
    }
    pre_time = millis();
 801650a:	f7fc f892 	bl	8012632 <millis>
 801650e:	6138      	str	r0, [r7, #16]
    while(sdIsBusy() == true)
 8016510:	e00b      	b.n	801652a <sdWriteBlocks+0x76>
    {
      if (millis()-pre_time >= timeout_ms)
 8016512:	f7fc f88e 	bl	8012632 <millis>
 8016516:	4602      	mov	r2, r0
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	683a      	ldr	r2, [r7, #0]
 801651e:	429a      	cmp	r2, r3
 8016520:	d803      	bhi.n	801652a <sdWriteBlocks+0x76>
      {
        is_tx_done = false;
 8016522:	4b08      	ldr	r3, [pc, #32]	; (8016544 <sdWriteBlocks+0x90>)
 8016524:	2200      	movs	r2, #0
 8016526:	701a      	strb	r2, [r3, #0]
        break;
 8016528:	e004      	b.n	8016534 <sdWriteBlocks+0x80>
    while(sdIsBusy() == true)
 801652a:	f7ff ff43 	bl	80163b4 <sdIsBusy>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d1ee      	bne.n	8016512 <sdWriteBlocks+0x5e>
      }
    }
    ret = is_tx_done;
 8016534:	4b03      	ldr	r3, [pc, #12]	; (8016544 <sdWriteBlocks+0x90>)
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801653a:	7dfb      	ldrb	r3, [r7, #23]
}
 801653c:	4618      	mov	r0, r3
 801653e:	3718      	adds	r7, #24
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	2000aaeb 	.word	0x2000aaeb
 8016548:	2000aaec 	.word	0x2000aaec

0801654c <HAL_SD_RxCpltCallback>:




void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801654c:	b480      	push	{r7}
 801654e:	b083      	sub	sp, #12
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8016554:	4b04      	ldr	r3, [pc, #16]	; (8016568 <HAL_SD_RxCpltCallback+0x1c>)
 8016556:	2201      	movs	r2, #1
 8016558:	701a      	strb	r2, [r3, #0]
}
 801655a:	bf00      	nop
 801655c:	370c      	adds	r7, #12
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr
 8016566:	bf00      	nop
 8016568:	2000aaea 	.word	0x2000aaea

0801656c <HAL_SD_TxCpltCallback>:

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801656c:	b480      	push	{r7}
 801656e:	b083      	sub	sp, #12
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8016574:	4b04      	ldr	r3, [pc, #16]	; (8016588 <HAL_SD_TxCpltCallback+0x1c>)
 8016576:	2201      	movs	r2, #1
 8016578:	701a      	strb	r2, [r3, #0]
}
 801657a:	bf00      	nop
 801657c:	370c      	adds	r7, #12
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	2000aaeb 	.word	0x2000aaeb

0801658c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b08c      	sub	sp, #48	; 0x30
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016594:	f107 031c 	add.w	r3, r7, #28
 8016598:	2200      	movs	r2, #0
 801659a:	601a      	str	r2, [r3, #0]
 801659c:	605a      	str	r2, [r3, #4]
 801659e:	609a      	str	r2, [r3, #8]
 80165a0:	60da      	str	r2, [r3, #12]
 80165a2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4a77      	ldr	r2, [pc, #476]	; (8016788 <HAL_SD_MspInit+0x1fc>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	f040 80e8 	bne.w	8016780 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80165b0:	2300      	movs	r3, #0
 80165b2:	61bb      	str	r3, [r7, #24]
 80165b4:	4b75      	ldr	r3, [pc, #468]	; (801678c <HAL_SD_MspInit+0x200>)
 80165b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165b8:	4a74      	ldr	r2, [pc, #464]	; (801678c <HAL_SD_MspInit+0x200>)
 80165ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80165be:	6313      	str	r3, [r2, #48]	; 0x30
 80165c0:	4b72      	ldr	r3, [pc, #456]	; (801678c <HAL_SD_MspInit+0x200>)
 80165c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80165c8:	61bb      	str	r3, [r7, #24]
 80165ca:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80165cc:	2300      	movs	r3, #0
 80165ce:	617b      	str	r3, [r7, #20]
 80165d0:	4b6e      	ldr	r3, [pc, #440]	; (801678c <HAL_SD_MspInit+0x200>)
 80165d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165d4:	4a6d      	ldr	r2, [pc, #436]	; (801678c <HAL_SD_MspInit+0x200>)
 80165d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165da:	6453      	str	r3, [r2, #68]	; 0x44
 80165dc:	4b6b      	ldr	r3, [pc, #428]	; (801678c <HAL_SD_MspInit+0x200>)
 80165de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80165e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80165e4:	617b      	str	r3, [r7, #20]
 80165e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80165e8:	2300      	movs	r3, #0
 80165ea:	613b      	str	r3, [r7, #16]
 80165ec:	4b67      	ldr	r3, [pc, #412]	; (801678c <HAL_SD_MspInit+0x200>)
 80165ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165f0:	4a66      	ldr	r2, [pc, #408]	; (801678c <HAL_SD_MspInit+0x200>)
 80165f2:	f043 0301 	orr.w	r3, r3, #1
 80165f6:	6313      	str	r3, [r2, #48]	; 0x30
 80165f8:	4b64      	ldr	r3, [pc, #400]	; (801678c <HAL_SD_MspInit+0x200>)
 80165fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165fc:	f003 0301 	and.w	r3, r3, #1
 8016600:	613b      	str	r3, [r7, #16]
 8016602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016604:	2300      	movs	r3, #0
 8016606:	60fb      	str	r3, [r7, #12]
 8016608:	4b60      	ldr	r3, [pc, #384]	; (801678c <HAL_SD_MspInit+0x200>)
 801660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801660c:	4a5f      	ldr	r2, [pc, #380]	; (801678c <HAL_SD_MspInit+0x200>)
 801660e:	f043 0302 	orr.w	r3, r3, #2
 8016612:	6313      	str	r3, [r2, #48]	; 0x30
 8016614:	4b5d      	ldr	r3, [pc, #372]	; (801678c <HAL_SD_MspInit+0x200>)
 8016616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016618:	f003 0302 	and.w	r3, r3, #2
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8016620:	f44f 7350 	mov.w	r3, #832	; 0x340
 8016624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016626:	2302      	movs	r3, #2
 8016628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801662a:	2300      	movs	r3, #0
 801662c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801662e:	2301      	movs	r3, #1
 8016630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8016632:	230c      	movs	r3, #12
 8016634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016636:	f107 031c 	add.w	r3, r7, #28
 801663a:	4619      	mov	r1, r3
 801663c:	4854      	ldr	r0, [pc, #336]	; (8016790 <HAL_SD_MspInit+0x204>)
 801663e:	f008 fc1d 	bl	801ee7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8016642:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8016646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016648:	2302      	movs	r3, #2
 801664a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801664c:	2300      	movs	r3, #0
 801664e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8016650:	2301      	movs	r3, #1
 8016652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8016654:	230c      	movs	r3, #12
 8016656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016658:	f107 031c 	add.w	r3, r7, #28
 801665c:	4619      	mov	r1, r3
 801665e:	484d      	ldr	r0, [pc, #308]	; (8016794 <HAL_SD_MspInit+0x208>)
 8016660:	f008 fc0c 	bl	801ee7c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8016664:	4b4c      	ldr	r3, [pc, #304]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016666:	4a4d      	ldr	r2, [pc, #308]	; (801679c <HAL_SD_MspInit+0x210>)
 8016668:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 801666a:	4b4b      	ldr	r3, [pc, #300]	; (8016798 <HAL_SD_MspInit+0x20c>)
 801666c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016670:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016672:	4b49      	ldr	r3, [pc, #292]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016674:	2200      	movs	r2, #0
 8016676:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8016678:	4b47      	ldr	r3, [pc, #284]	; (8016798 <HAL_SD_MspInit+0x20c>)
 801667a:	2200      	movs	r2, #0
 801667c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 801667e:	4b46      	ldr	r3, [pc, #280]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016684:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016686:	4b44      	ldr	r3, [pc, #272]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801668c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801668e:	4b42      	ldr	r3, [pc, #264]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016694:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8016696:	4b40      	ldr	r3, [pc, #256]	; (8016798 <HAL_SD_MspInit+0x20c>)
 8016698:	2220      	movs	r2, #32
 801669a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 801669c:	4b3e      	ldr	r3, [pc, #248]	; (8016798 <HAL_SD_MspInit+0x20c>)
 801669e:	2200      	movs	r2, #0
 80166a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80166a2:	4b3d      	ldr	r3, [pc, #244]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166a4:	2204      	movs	r2, #4
 80166a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80166a8:	4b3b      	ldr	r3, [pc, #236]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166aa:	2203      	movs	r2, #3
 80166ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80166ae:	4b3a      	ldr	r3, [pc, #232]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80166b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80166b6:	4b38      	ldr	r3, [pc, #224]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80166bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80166be:	4836      	ldr	r0, [pc, #216]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166c0:	f007 fcf8 	bl	801e0b4 <HAL_DMA_Init>
 80166c4:	4603      	mov	r3, r0
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d001      	beq.n	80166ce <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 80166ca:	f7fc f83b 	bl	8012744 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	4a31      	ldr	r2, [pc, #196]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166d2:	641a      	str	r2, [r3, #64]	; 0x40
 80166d4:	4a30      	ldr	r2, [pc, #192]	; (8016798 <HAL_SD_MspInit+0x20c>)
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80166da:	4b31      	ldr	r3, [pc, #196]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166dc:	4a31      	ldr	r2, [pc, #196]	; (80167a4 <HAL_SD_MspInit+0x218>)
 80166de:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80166e0:	4b2f      	ldr	r3, [pc, #188]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80166e6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80166e8:	4b2d      	ldr	r3, [pc, #180]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166ea:	2240      	movs	r2, #64	; 0x40
 80166ec:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80166ee:	4b2c      	ldr	r3, [pc, #176]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166f0:	2200      	movs	r2, #0
 80166f2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80166f4:	4b2a      	ldr	r3, [pc, #168]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80166fa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80166fc:	4b28      	ldr	r3, [pc, #160]	; (80167a0 <HAL_SD_MspInit+0x214>)
 80166fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016702:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016704:	4b26      	ldr	r3, [pc, #152]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801670a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 801670c:	4b24      	ldr	r3, [pc, #144]	; (80167a0 <HAL_SD_MspInit+0x214>)
 801670e:	2220      	movs	r2, #32
 8016710:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8016712:	4b23      	ldr	r3, [pc, #140]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016714:	2200      	movs	r2, #0
 8016716:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8016718:	4b21      	ldr	r3, [pc, #132]	; (80167a0 <HAL_SD_MspInit+0x214>)
 801671a:	2204      	movs	r2, #4
 801671c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801671e:	4b20      	ldr	r3, [pc, #128]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016720:	2203      	movs	r2, #3
 8016722:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8016724:	4b1e      	ldr	r3, [pc, #120]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016726:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801672a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 801672c:	4b1c      	ldr	r3, [pc, #112]	; (80167a0 <HAL_SD_MspInit+0x214>)
 801672e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016732:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8016734:	481a      	ldr	r0, [pc, #104]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016736:	f007 fcbd 	bl	801e0b4 <HAL_DMA_Init>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d001      	beq.n	8016744 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8016740:	f7fc f800 	bl	8012744 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	4a16      	ldr	r2, [pc, #88]	; (80167a0 <HAL_SD_MspInit+0x214>)
 8016748:	63da      	str	r2, [r3, #60]	; 0x3c
 801674a:	4a15      	ldr	r2, [pc, #84]	; (80167a0 <HAL_SD_MspInit+0x214>)
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 3, 0);
 8016750:	2200      	movs	r2, #0
 8016752:	2103      	movs	r1, #3
 8016754:	2031      	movs	r0, #49	; 0x31
 8016756:	f007 fc68 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 801675a:	2031      	movs	r0, #49	; 0x31
 801675c:	f007 fc81 	bl	801e062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8016760:	2200      	movs	r2, #0
 8016762:	2103      	movs	r1, #3
 8016764:	203b      	movs	r0, #59	; 0x3b
 8016766:	f007 fc60 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 801676a:	203b      	movs	r0, #59	; 0x3b
 801676c:	f007 fc79 	bl	801e062 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8016770:	2200      	movs	r2, #0
 8016772:	2103      	movs	r1, #3
 8016774:	2045      	movs	r0, #69	; 0x45
 8016776:	f007 fc58 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 801677a:	2045      	movs	r0, #69	; 0x45
 801677c:	f007 fc71 	bl	801e062 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8016780:	bf00      	nop
 8016782:	3730      	adds	r7, #48	; 0x30
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	40012c00 	.word	0x40012c00
 801678c:	40023800 	.word	0x40023800
 8016790:	40020000 	.word	0x40020000
 8016794:	40020400 	.word	0x40020400
 8016798:	2000ab70 	.word	0x2000ab70
 801679c:	400264a0 	.word	0x400264a0
 80167a0:	2000abd0 	.word	0x2000abd0
 80167a4:	40026458 	.word	0x40026458

080167a8 <cliSd>:



#ifdef _USE_HW_CLI
void cliSd(cli_args_t *args)
{
 80167a8:	b590      	push	{r4, r7, lr}
 80167aa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80167b4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80167b8:	6018      	str	r0, [r3, #0]
  bool ret = false;
 80167ba:	2300      	movs	r3, #0
 80167bc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 80167c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80167c4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	881b      	ldrh	r3, [r3, #0]
 80167cc:	2b01      	cmp	r3, #1
 80167ce:	f040 8094 	bne.w	80168fa <cliSd+0x152>
 80167d2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80167d6:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	695b      	ldr	r3, [r3, #20]
 80167de:	4979      	ldr	r1, [pc, #484]	; (80169c4 <cliSd+0x21c>)
 80167e0:	2000      	movs	r0, #0
 80167e2:	4798      	blx	r3
 80167e4:	4603      	mov	r3, r0
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	f000 8087 	beq.w	80168fa <cliSd+0x152>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 80167ec:	4b76      	ldr	r3, [pc, #472]	; (80169c8 <cliSd+0x220>)
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	4619      	mov	r1, r3
 80167f2:	4876      	ldr	r0, [pc, #472]	; (80169cc <cliSd+0x224>)
 80167f4:	f7fc fdac 	bl	8013350 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 80167f8:	4b75      	ldr	r3, [pc, #468]	; (80169d0 <cliSd+0x228>)
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	4619      	mov	r1, r3
 80167fe:	4875      	ldr	r0, [pc, #468]	; (80169d4 <cliSd+0x22c>)
 8016800:	f7fc fda6 	bl	8013350 <cliPrintf>

    if (is_init == true)
 8016804:	4b70      	ldr	r3, [pc, #448]	; (80169c8 <cliSd+0x220>)
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d073      	beq.n	80168f4 <cliSd+0x14c>
    {
      if (sdGetInfo(&sd_info) == true)
 801680c:	f107 030c 	add.w	r3, r7, #12
 8016810:	4618      	mov	r0, r3
 8016812:	f7ff fd77 	bl	8016304 <sdGetInfo>
 8016816:	4603      	mov	r3, r0
 8016818:	2b00      	cmp	r3, #0
 801681a:	d06b      	beq.n	80168f4 <cliSd+0x14c>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 801681c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016820:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	4619      	mov	r1, r3
 8016828:	486b      	ldr	r0, [pc, #428]	; (80169d8 <cliSd+0x230>)
 801682a:	f7fc fd91 	bl	8013350 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 801682e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016832:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	4619      	mov	r1, r3
 801683a:	4868      	ldr	r0, [pc, #416]	; (80169dc <cliSd+0x234>)
 801683c:	f7fc fd88 	bl	8013350 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8016840:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016844:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016848:	689b      	ldr	r3, [r3, #8]
 801684a:	4619      	mov	r1, r3
 801684c:	4864      	ldr	r0, [pc, #400]	; (80169e0 <cliSd+0x238>)
 801684e:	f7fc fd7f 	bl	8013350 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8016852:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016856:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801685a:	68db      	ldr	r3, [r3, #12]
 801685c:	4619      	mov	r1, r3
 801685e:	4861      	ldr	r0, [pc, #388]	; (80169e4 <cliSd+0x23c>)
 8016860:	f7fc fd76 	bl	8013350 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8016864:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016868:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	4619      	mov	r1, r3
 8016870:	485d      	ldr	r0, [pc, #372]	; (80169e8 <cliSd+0x240>)
 8016872:	f7fc fd6d 	bl	8013350 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8016876:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801687a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 801687e:	695b      	ldr	r3, [r3, #20]
 8016880:	4619      	mov	r1, r3
 8016882:	485a      	ldr	r0, [pc, #360]	; (80169ec <cliSd+0x244>)
 8016884:	f7fc fd64 	bl	8013350 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8016888:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801688c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016890:	699b      	ldr	r3, [r3, #24]
 8016892:	4619      	mov	r1, r3
 8016894:	4856      	ldr	r0, [pc, #344]	; (80169f0 <cliSd+0x248>)
 8016896:	f7fc fd5b 	bl	8013350 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 801689a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801689e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80168a2:	69db      	ldr	r3, [r3, #28]
 80168a4:	4619      	mov	r1, r3
 80168a6:	4853      	ldr	r0, [pc, #332]	; (80169f4 <cliSd+0x24c>)
 80168a8:	f7fc fd52 	bl	8013350 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80168ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80168b0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80168b4:	6a18      	ldr	r0, [r3, #32]
 80168b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80168ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80168be:	6a1b      	ldr	r3, [r3, #32]
 80168c0:	0a9c      	lsrs	r4, r3, #10
 80168c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80168c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80168ca:	6a1a      	ldr	r2, [r3, #32]
 80168cc:	4613      	mov	r3, r2
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	4413      	add	r3, r2
 80168d2:	005b      	lsls	r3, r3, #1
 80168d4:	0a99      	lsrs	r1, r3, #10
 80168d6:	4b48      	ldr	r3, [pc, #288]	; (80169f8 <cliSd+0x250>)
 80168d8:	fba3 2301 	umull	r2, r3, r3, r1
 80168dc:	08da      	lsrs	r2, r3, #3
 80168de:	4613      	mov	r3, r2
 80168e0:	009b      	lsls	r3, r3, #2
 80168e2:	4413      	add	r3, r2
 80168e4:	005b      	lsls	r3, r3, #1
 80168e6:	1aca      	subs	r2, r1, r3
 80168e8:	4613      	mov	r3, r2
 80168ea:	4622      	mov	r2, r4
 80168ec:	4601      	mov	r1, r0
 80168ee:	4843      	ldr	r0, [pc, #268]	; (80169fc <cliSd+0x254>)
 80168f0:	f7fc fd2e 	bl	8013350 <cliPrintf>
      }
    }
    ret = true;
 80168f4:	2301      	movs	r3, #1
 80168f6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80168fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80168fe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	881b      	ldrh	r3, [r3, #0]
 8016906:	2b02      	cmp	r3, #2
 8016908:	d146      	bne.n	8016998 <cliSd+0x1f0>
 801690a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801690e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	695b      	ldr	r3, [r3, #20]
 8016916:	493a      	ldr	r1, [pc, #232]	; (8016a00 <cliSd+0x258>)
 8016918:	2000      	movs	r0, #0
 801691a:	4798      	blx	r3
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d03a      	beq.n	8016998 <cliSd+0x1f0>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8016922:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016926:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	689b      	ldr	r3, [r3, #8]
 801692e:	2001      	movs	r0, #1
 8016930:	4798      	blx	r3
 8016932:	4603      	mov	r3, r0
 8016934:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8016938:	f107 010c 	add.w	r1, r7, #12
 801693c:	2364      	movs	r3, #100	; 0x64
 801693e:	2201      	movs	r2, #1
 8016940:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8016944:	f7ff fd6c 	bl	8016420 <sdReadBlocks>
 8016948:	4603      	mov	r3, r0
 801694a:	2b00      	cmp	r3, #0
 801694c:	d01e      	beq.n	801698c <cliSd+0x1e4>
    {
      for (int i=0; i<512/4; i++)
 801694e:	2300      	movs	r3, #0
 8016950:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8016954:	e015      	b.n	8016982 <cliSd+0x1da>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8016956:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801695a:	0099      	lsls	r1, r3, #2
 801695c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8016960:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8016964:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8016968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801696c:	460a      	mov	r2, r1
 801696e:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8016972:	4824      	ldr	r0, [pc, #144]	; (8016a04 <cliSd+0x25c>)
 8016974:	f7fc fcec 	bl	8013350 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8016978:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801697c:	3301      	adds	r3, #1
 801697e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8016982:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8016986:	2b7f      	cmp	r3, #127	; 0x7f
 8016988:	dde5      	ble.n	8016956 <cliSd+0x1ae>
 801698a:	e002      	b.n	8016992 <cliSd+0x1ea>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 801698c:	481e      	ldr	r0, [pc, #120]	; (8016a08 <cliSd+0x260>)
 801698e:	f7fc fcdf 	bl	8013350 <cliPrintf>
    }

    ret = true;
 8016992:	2301      	movs	r3, #1
 8016994:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8016998:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 801699c:	f083 0301 	eor.w	r3, r3, #1
 80169a0:	b2db      	uxtb	r3, r3
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d009      	beq.n	80169ba <cliSd+0x212>
  {
    cliPrintf("sd info\n");
 80169a6:	4819      	ldr	r0, [pc, #100]	; (8016a0c <cliSd+0x264>)
 80169a8:	f7fc fcd2 	bl	8013350 <cliPrintf>

    if (is_init == true)
 80169ac:	4b06      	ldr	r3, [pc, #24]	; (80169c8 <cliSd+0x220>)
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d002      	beq.n	80169ba <cliSd+0x212>
    {
      cliPrintf("sd read block_number\n");
 80169b4:	4816      	ldr	r0, [pc, #88]	; (8016a10 <cliSd+0x268>)
 80169b6:	f7fc fccb 	bl	8013350 <cliPrintf>
    }
  }
}
 80169ba:	bf00      	nop
 80169bc:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd90      	pop	{r4, r7, pc}
 80169c4:	080297fc 	.word	0x080297fc
 80169c8:	2000aae8 	.word	0x2000aae8
 80169cc:	08029804 	.word	0x08029804
 80169d0:	2000aae9 	.word	0x2000aae9
 80169d4:	08029818 	.word	0x08029818
 80169d8:	0802982c 	.word	0x0802982c
 80169dc:	0802984c 	.word	0x0802984c
 80169e0:	0802986c 	.word	0x0802986c
 80169e4:	0802988c 	.word	0x0802988c
 80169e8:	080298ac 	.word	0x080298ac
 80169ec:	080298cc 	.word	0x080298cc
 80169f0:	080298ec 	.word	0x080298ec
 80169f4:	0802990c 	.word	0x0802990c
 80169f8:	cccccccd 	.word	0xcccccccd
 80169fc:	0802992c 	.word	0x0802992c
 8016a00:	08029958 	.word	0x08029958
 8016a04:	08029960 	.word	0x08029960
 8016a08:	08029974 	.word	0x08029974
 8016a0c:	08029984 	.word	0x08029984
 8016a10:	08029990 	.word	0x08029990

08016a14 <DWT_Delay_us>:
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b084      	sub	sp, #16
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8016a1c:	4b0d      	ldr	r3, [pc, #52]	; (8016a54 <DWT_Delay_us+0x40>)
 8016a1e:	685b      	ldr	r3, [r3, #4]
 8016a20:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8016a22:	f009 f8f9 	bl	801fc18 <HAL_RCC_GetHCLKFreq>
 8016a26:	4603      	mov	r3, r0
 8016a28:	4a0b      	ldr	r2, [pc, #44]	; (8016a58 <DWT_Delay_us+0x44>)
 8016a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8016a2e:	0c9b      	lsrs	r3, r3, #18
 8016a30:	687a      	ldr	r2, [r7, #4]
 8016a32:	fb02 f303 	mul.w	r3, r2, r3
 8016a36:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8016a38:	bf00      	nop
 8016a3a:	4b06      	ldr	r3, [pc, #24]	; (8016a54 <DWT_Delay_us+0x40>)
 8016a3c:	685a      	ldr	r2, [r3, #4]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	1ad2      	subs	r2, r2, r3
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d3f8      	bcc.n	8016a3a <DWT_Delay_us+0x26>
}
 8016a48:	bf00      	nop
 8016a4a:	bf00      	nop
 8016a4c:	3710      	adds	r7, #16
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	e0001000 	.word	0xe0001000
 8016a58:	431bde83 	.word	0x431bde83

08016a5c <sonarInit>:
    {
        {0, 0, 0, 0, 0, 0, 0, 0}
    };

bool sonarInit(void)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b08c      	sub	sp, #48	; 0x30
 8016a60:	af00      	add	r7, sp, #0
	bool ret = false;
 8016a62:	2300      	movs	r3, #0
 8016a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016a68:	f107 031c 	add.w	r3, r7, #28
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	601a      	str	r2, [r3, #0]
 8016a70:	605a      	str	r2, [r3, #4]
 8016a72:	609a      	str	r2, [r3, #8]
 8016a74:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016a76:	f107 0314 	add.w	r3, r7, #20
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	601a      	str	r2, [r3, #0]
 8016a7e:	605a      	str	r2, [r3, #4]
	  TIM_IC_InitTypeDef sConfigIC = {0};
 8016a80:	1d3b      	adds	r3, r7, #4
 8016a82:	2200      	movs	r2, #0
 8016a84:	601a      	str	r2, [r3, #0]
 8016a86:	605a      	str	r2, [r3, #4]
 8016a88:	609a      	str	r2, [r3, #8]
 8016a8a:	60da      	str	r2, [r3, #12]

	  htim3.Instance = TIM3;
 8016a8c:	4b2e      	ldr	r3, [pc, #184]	; (8016b48 <sonarInit+0xec>)
 8016a8e:	4a2f      	ldr	r2, [pc, #188]	; (8016b4c <sonarInit+0xf0>)
 8016a90:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 96-1;
 8016a92:	4b2d      	ldr	r3, [pc, #180]	; (8016b48 <sonarInit+0xec>)
 8016a94:	225f      	movs	r2, #95	; 0x5f
 8016a96:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016a98:	4b2b      	ldr	r3, [pc, #172]	; (8016b48 <sonarInit+0xec>)
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 65535;
 8016a9e:	4b2a      	ldr	r3, [pc, #168]	; (8016b48 <sonarInit+0xec>)
 8016aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016aa4:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016aa6:	4b28      	ldr	r3, [pc, #160]	; (8016b48 <sonarInit+0xec>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016aac:	4b26      	ldr	r3, [pc, #152]	; (8016b48 <sonarInit+0xec>)
 8016aae:	2200      	movs	r2, #0
 8016ab0:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8016ab2:	4825      	ldr	r0, [pc, #148]	; (8016b48 <sonarInit+0xec>)
 8016ab4:	f00b fb1c 	bl	80220f0 <HAL_TIM_Base_Init>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d001      	beq.n	8016ac2 <sonarInit+0x66>
	  {
	    Error_Handler();
 8016abe:	f7fb fe41 	bl	8012744 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016ac6:	61fb      	str	r3, [r7, #28]
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8016ac8:	f107 031c 	add.w	r3, r7, #28
 8016acc:	4619      	mov	r1, r3
 8016ace:	481e      	ldr	r0, [pc, #120]	; (8016b48 <sonarInit+0xec>)
 8016ad0:	f00b fd7a 	bl	80225c8 <HAL_TIM_ConfigClockSource>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d001      	beq.n	8016ade <sonarInit+0x82>
	  {
	    Error_Handler();
 8016ada:	f7fb fe33 	bl	8012744 <Error_Handler>
	  }
	  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8016ade:	481a      	ldr	r0, [pc, #104]	; (8016b48 <sonarInit+0xec>)
 8016ae0:	f00b fb31 	bl	8022146 <HAL_TIM_IC_Init>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d001      	beq.n	8016aee <sonarInit+0x92>
	  {
	    Error_Handler();
 8016aea:	f7fb fe2b 	bl	8012744 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016aee:	2300      	movs	r3, #0
 8016af0:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016af2:	2300      	movs	r3, #0
 8016af4:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8016af6:	f107 0314 	add.w	r3, r7, #20
 8016afa:	4619      	mov	r1, r3
 8016afc:	4812      	ldr	r0, [pc, #72]	; (8016b48 <sonarInit+0xec>)
 8016afe:	f00c f8ad 	bl	8022c5c <HAL_TIMEx_MasterConfigSynchronization>
 8016b02:	4603      	mov	r3, r0
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d001      	beq.n	8016b0c <sonarInit+0xb0>
	  {
	    Error_Handler();
 8016b08:	f7fb fe1c 	bl	8012744 <Error_Handler>
	  }
	  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	607b      	str	r3, [r7, #4]
	  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8016b10:	2301      	movs	r3, #1
 8016b12:	60bb      	str	r3, [r7, #8]
	  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8016b14:	2300      	movs	r3, #0
 8016b16:	60fb      	str	r3, [r7, #12]
	  sConfigIC.ICFilter = 0;
 8016b18:	2300      	movs	r3, #0
 8016b1a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8016b1c:	1d3b      	adds	r3, r7, #4
 8016b1e:	220c      	movs	r2, #12
 8016b20:	4619      	mov	r1, r3
 8016b22:	4809      	ldr	r0, [pc, #36]	; (8016b48 <sonarInit+0xec>)
 8016b24:	f00b fcb4 	bl	8022490 <HAL_TIM_IC_ConfigChannel>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d001      	beq.n	8016b32 <sonarInit+0xd6>
	  {
	    Error_Handler();
 8016b2e:	f7fb fe09 	bl	8012744 <Error_Handler>
	  }

	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
 8016b32:	210c      	movs	r1, #12
 8016b34:	4804      	ldr	r0, [pc, #16]	; (8016b48 <sonarInit+0xec>)
 8016b36:	f00b fb3b 	bl	80221b0 <HAL_TIM_IC_Start_IT>

	return ret;
 8016b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3730      	adds	r7, #48	; 0x30
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	2000ac30 	.word	0x2000ac30
 8016b4c:	40000400 	.word	0x40000400

08016b50 <Sonar_measure>:

bool Sonar_measure(void)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
	bool ret = false;
 8016b56:	2300      	movs	r3, #0
 8016b58:	71fb      	strb	r3, [r7, #7]

	static int16_t sonarHistTab[11];
	static int sonarHistIdx = 0;
	static uint32_t sonarDistanceSum = 0;

	switch(sonar_tbl[0].state)
 8016b5a:	4b5d      	ldr	r3, [pc, #372]	; (8016cd0 <Sonar_measure+0x180>)
 8016b5c:	785b      	ldrb	r3, [r3, #1]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d002      	beq.n	8016b68 <Sonar_measure+0x18>
 8016b62:	2b01      	cmp	r3, #1
 8016b64:	d022      	beq.n	8016bac <Sonar_measure+0x5c>
 8016b66:	e0a9      	b.n	8016cbc <Sonar_measure+0x16c>
	{
		case 0:
			gpioPinMode(SONAR_DATA, _DEF_OUTPUT);
 8016b68:	2103      	movs	r1, #3
 8016b6a:	2005      	movs	r0, #5
 8016b6c:	f7fd fdb2 	bl	80146d4 <gpioPinMode>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_SET);
 8016b70:	2101      	movs	r1, #1
 8016b72:	2005      	movs	r0, #5
 8016b74:	f7fd fe20 	bl	80147b8 <gpioPinWrite>
			DWT_Delay_us(5);
 8016b78:	2005      	movs	r0, #5
 8016b7a:	f7ff ff4b 	bl	8016a14 <DWT_Delay_us>
			gpioPinWrite(SONAR_DATA, GPIO_PIN_RESET);
 8016b7e:	2100      	movs	r1, #0
 8016b80:	2005      	movs	r0, #5
 8016b82:	f7fd fe19 	bl	80147b8 <gpioPinWrite>
			gpioPinMode(SONAR_DATA, _DEF_INPUT_AF_PP);
 8016b86:	2106      	movs	r1, #6
 8016b88:	2005      	movs	r0, #5
 8016b8a:	f7fd fda3 	bl	80146d4 <gpioPinMode>
			sonar_tbl[0].wait_flag = true;
 8016b8e:	4b50      	ldr	r3, [pc, #320]	; (8016cd0 <Sonar_measure+0x180>)
 8016b90:	2201      	movs	r2, #1
 8016b92:	701a      	strb	r2, [r3, #0]
			sonar_tbl[0].state++;
 8016b94:	4b4e      	ldr	r3, [pc, #312]	; (8016cd0 <Sonar_measure+0x180>)
 8016b96:	785b      	ldrb	r3, [r3, #1]
 8016b98:	3301      	adds	r3, #1
 8016b9a:	b2da      	uxtb	r2, r3
 8016b9c:	4b4c      	ldr	r3, [pc, #304]	; (8016cd0 <Sonar_measure+0x180>)
 8016b9e:	705a      	strb	r2, [r3, #1]
			pre_time = millis();
 8016ba0:	f7fb fd47 	bl	8012632 <millis>
 8016ba4:	4603      	mov	r3, r0
 8016ba6:	4a4b      	ldr	r2, [pc, #300]	; (8016cd4 <Sonar_measure+0x184>)
 8016ba8:	6013      	str	r3, [r2, #0]
			break;
 8016baa:	e087      	b.n	8016cbc <Sonar_measure+0x16c>

		case 1:
			if(sonar_tbl[0].wait_flag == false)
 8016bac:	4b48      	ldr	r3, [pc, #288]	; (8016cd0 <Sonar_measure+0x180>)
 8016bae:	781b      	ldrb	r3, [r3, #0]
 8016bb0:	f083 0301 	eor.w	r3, r3, #1
 8016bb4:	b2db      	uxtb	r3, r3
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d06a      	beq.n	8016c90 <Sonar_measure+0x140>
			{
				if(sonar_tbl[0].falling_time > sonar_tbl[0].rising_time)
 8016bba:	4b45      	ldr	r3, [pc, #276]	; (8016cd0 <Sonar_measure+0x180>)
 8016bbc:	689a      	ldr	r2, [r3, #8]
 8016bbe:	4b44      	ldr	r3, [pc, #272]	; (8016cd0 <Sonar_measure+0x180>)
 8016bc0:	685b      	ldr	r3, [r3, #4]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	d907      	bls.n	8016bd6 <Sonar_measure+0x86>
				{
					sonar_tbl[0].duty_time = sonar_tbl[0].falling_time - sonar_tbl[0].rising_time;
 8016bc6:	4b42      	ldr	r3, [pc, #264]	; (8016cd0 <Sonar_measure+0x180>)
 8016bc8:	689a      	ldr	r2, [r3, #8]
 8016bca:	4b41      	ldr	r3, [pc, #260]	; (8016cd0 <Sonar_measure+0x180>)
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	1ad3      	subs	r3, r2, r3
 8016bd0:	4a3f      	ldr	r2, [pc, #252]	; (8016cd0 <Sonar_measure+0x180>)
 8016bd2:	60d3      	str	r3, [r2, #12]
 8016bd4:	e00e      	b.n	8016bf4 <Sonar_measure+0xa4>
				}
				else if(sonar_tbl[0].falling_time < sonar_tbl[0].rising_time)
 8016bd6:	4b3e      	ldr	r3, [pc, #248]	; (8016cd0 <Sonar_measure+0x180>)
 8016bd8:	689a      	ldr	r2, [r3, #8]
 8016bda:	4b3d      	ldr	r3, [pc, #244]	; (8016cd0 <Sonar_measure+0x180>)
 8016bdc:	685b      	ldr	r3, [r3, #4]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d208      	bcs.n	8016bf4 <Sonar_measure+0xa4>
				{
					sonar_tbl[0].duty_time = 65536 - sonar_tbl[0].rising_time + sonar_tbl[0].falling_time;
 8016be2:	4b3b      	ldr	r3, [pc, #236]	; (8016cd0 <Sonar_measure+0x180>)
 8016be4:	689a      	ldr	r2, [r3, #8]
 8016be6:	4b3a      	ldr	r3, [pc, #232]	; (8016cd0 <Sonar_measure+0x180>)
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	1ad3      	subs	r3, r2, r3
 8016bec:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8016bf0:	4a37      	ldr	r2, [pc, #220]	; (8016cd0 <Sonar_measure+0x180>)
 8016bf2:	60d3      	str	r3, [r2, #12]
				}

				sonar_tbl[0].distance_cm = (sonar_tbl[0].duty_time * 10) * 0.0172;
 8016bf4:	4b36      	ldr	r3, [pc, #216]	; (8016cd0 <Sonar_measure+0x180>)
 8016bf6:	68da      	ldr	r2, [r3, #12]
 8016bf8:	4613      	mov	r3, r2
 8016bfa:	009b      	lsls	r3, r3, #2
 8016bfc:	4413      	add	r3, r2
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7f9 ffe7 	bl	8010bd4 <__aeabi_ui2d>
 8016c06:	a330      	add	r3, pc, #192	; (adr r3, 8016cc8 <Sonar_measure+0x178>)
 8016c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0c:	f7fa f85c 	bl	8010cc8 <__aeabi_dmul>
 8016c10:	4602      	mov	r2, r0
 8016c12:	460b      	mov	r3, r1
 8016c14:	4610      	mov	r0, r2
 8016c16:	4619      	mov	r1, r3
 8016c18:	f7fa fb2e 	bl	8011278 <__aeabi_d2uiz>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	4a2c      	ldr	r2, [pc, #176]	; (8016cd0 <Sonar_measure+0x180>)
 8016c20:	6153      	str	r3, [r2, #20]

				uint8_t indexplus1 = (sonarHistIdx + 1);
 8016c22:	4b2d      	ldr	r3, [pc, #180]	; (8016cd8 <Sonar_measure+0x188>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	3301      	adds	r3, #1
 8016c2a:	71bb      	strb	r3, [r7, #6]
				if (indexplus1 == 11) indexplus1 = 0;
 8016c2c:	79bb      	ldrb	r3, [r7, #6]
 8016c2e:	2b0b      	cmp	r3, #11
 8016c30:	d101      	bne.n	8016c36 <Sonar_measure+0xe6>
 8016c32:	2300      	movs	r3, #0
 8016c34:	71bb      	strb	r3, [r7, #6]
				sonarHistTab[sonarHistIdx] = sonar_tbl[0].distance_cm;
 8016c36:	4b26      	ldr	r3, [pc, #152]	; (8016cd0 <Sonar_measure+0x180>)
 8016c38:	695a      	ldr	r2, [r3, #20]
 8016c3a:	4b27      	ldr	r3, [pc, #156]	; (8016cd8 <Sonar_measure+0x188>)
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	b211      	sxth	r1, r2
 8016c40:	4a26      	ldr	r2, [pc, #152]	; (8016cdc <Sonar_measure+0x18c>)
 8016c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sonarDistanceSum += sonarHistTab[sonarHistIdx];
 8016c46:	4b24      	ldr	r3, [pc, #144]	; (8016cd8 <Sonar_measure+0x188>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4a24      	ldr	r2, [pc, #144]	; (8016cdc <Sonar_measure+0x18c>)
 8016c4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8016c50:	461a      	mov	r2, r3
 8016c52:	4b23      	ldr	r3, [pc, #140]	; (8016ce0 <Sonar_measure+0x190>)
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	4413      	add	r3, r2
 8016c58:	4a21      	ldr	r2, [pc, #132]	; (8016ce0 <Sonar_measure+0x190>)
 8016c5a:	6013      	str	r3, [r2, #0]
				sonarDistanceSum -= sonarHistTab[indexplus1];
 8016c5c:	4b20      	ldr	r3, [pc, #128]	; (8016ce0 <Sonar_measure+0x190>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	79ba      	ldrb	r2, [r7, #6]
 8016c62:	491e      	ldr	r1, [pc, #120]	; (8016cdc <Sonar_measure+0x18c>)
 8016c64:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8016c68:	1a9b      	subs	r3, r3, r2
 8016c6a:	4a1d      	ldr	r2, [pc, #116]	; (8016ce0 <Sonar_measure+0x190>)
 8016c6c:	6013      	str	r3, [r2, #0]
				sonarHistIdx = indexplus1;
 8016c6e:	79bb      	ldrb	r3, [r7, #6]
 8016c70:	4a19      	ldr	r2, [pc, #100]	; (8016cd8 <Sonar_measure+0x188>)
 8016c72:	6013      	str	r3, [r2, #0]
				sonar_tbl[0].filter_distance_cm = sonarDistanceSum / 10;
 8016c74:	4b1a      	ldr	r3, [pc, #104]	; (8016ce0 <Sonar_measure+0x190>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	4a1a      	ldr	r2, [pc, #104]	; (8016ce4 <Sonar_measure+0x194>)
 8016c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8016c7e:	08db      	lsrs	r3, r3, #3
 8016c80:	4a13      	ldr	r2, [pc, #76]	; (8016cd0 <Sonar_measure+0x180>)
 8016c82:	6193      	str	r3, [r2, #24]

				sonar_tbl[0].state = 0;
 8016c84:	4b12      	ldr	r3, [pc, #72]	; (8016cd0 <Sonar_measure+0x180>)
 8016c86:	2200      	movs	r2, #0
 8016c88:	705a      	strb	r2, [r3, #1]
				ret = true;
 8016c8a:	2301      	movs	r3, #1
 8016c8c:	71fb      	strb	r3, [r7, #7]
					sonar_tbl[0].wait_flag = false;
					sonar_tbl[0].state = 0;
					ret = false;
				}
			}
			break;
 8016c8e:	e014      	b.n	8016cba <Sonar_measure+0x16a>
				if(millis()-pre_time >= 25)
 8016c90:	f7fb fccf 	bl	8012632 <millis>
 8016c94:	4602      	mov	r2, r0
 8016c96:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <Sonar_measure+0x184>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	1ad3      	subs	r3, r2, r3
 8016c9c:	2b18      	cmp	r3, #24
 8016c9e:	d90c      	bls.n	8016cba <Sonar_measure+0x16a>
					sonar_tbl[0].time_out_cnt++;
 8016ca0:	4b0b      	ldr	r3, [pc, #44]	; (8016cd0 <Sonar_measure+0x180>)
 8016ca2:	691b      	ldr	r3, [r3, #16]
 8016ca4:	3301      	adds	r3, #1
 8016ca6:	4a0a      	ldr	r2, [pc, #40]	; (8016cd0 <Sonar_measure+0x180>)
 8016ca8:	6113      	str	r3, [r2, #16]
					sonar_tbl[0].wait_flag = false;
 8016caa:	4b09      	ldr	r3, [pc, #36]	; (8016cd0 <Sonar_measure+0x180>)
 8016cac:	2200      	movs	r2, #0
 8016cae:	701a      	strb	r2, [r3, #0]
					sonar_tbl[0].state = 0;
 8016cb0:	4b07      	ldr	r3, [pc, #28]	; (8016cd0 <Sonar_measure+0x180>)
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	705a      	strb	r2, [r3, #1]
					ret = false;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	71fb      	strb	r3, [r7, #7]
			break;
 8016cba:	bf00      	nop
	}
	return ret;
 8016cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3708      	adds	r7, #8
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	75f6fd22 	.word	0x75f6fd22
 8016ccc:	3f919ce0 	.word	0x3f919ce0
 8016cd0:	2000ac70 	.word	0x2000ac70
 8016cd4:	2000ac8c 	.word	0x2000ac8c
 8016cd8:	2000ac90 	.word	0x2000ac90
 8016cdc:	2000ac94 	.word	0x2000ac94
 8016ce0:	2000acac 	.word	0x2000acac
 8016ce4:	cccccccd 	.word	0xcccccccd

08016ce8 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08a      	sub	sp, #40	; 0x28
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016cf0:	f107 0314 	add.w	r3, r7, #20
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	601a      	str	r2, [r3, #0]
 8016cf8:	605a      	str	r2, [r3, #4]
 8016cfa:	609a      	str	r2, [r3, #8]
 8016cfc:	60da      	str	r2, [r3, #12]
 8016cfe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	4a1d      	ldr	r2, [pc, #116]	; (8016d7c <HAL_TIM_Base_MspInit+0x94>)
 8016d06:	4293      	cmp	r3, r2
 8016d08:	d133      	bne.n	8016d72 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	613b      	str	r3, [r7, #16]
 8016d0e:	4b1c      	ldr	r3, [pc, #112]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d12:	4a1b      	ldr	r2, [pc, #108]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d14:	f043 0302 	orr.w	r3, r3, #2
 8016d18:	6413      	str	r3, [r2, #64]	; 0x40
 8016d1a:	4b19      	ldr	r3, [pc, #100]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d1e:	f003 0302 	and.w	r3, r3, #2
 8016d22:	613b      	str	r3, [r7, #16]
 8016d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016d26:	2300      	movs	r3, #0
 8016d28:	60fb      	str	r3, [r7, #12]
 8016d2a:	4b15      	ldr	r3, [pc, #84]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d2e:	4a14      	ldr	r2, [pc, #80]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d30:	f043 0302 	orr.w	r3, r3, #2
 8016d34:	6313      	str	r3, [r2, #48]	; 0x30
 8016d36:	4b12      	ldr	r3, [pc, #72]	; (8016d80 <HAL_TIM_Base_MspInit+0x98>)
 8016d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d3a:	f003 0302 	and.w	r3, r3, #2
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8016d42:	2302      	movs	r3, #2
 8016d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016d46:	2302      	movs	r3, #2
 8016d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016d52:	2302      	movs	r3, #2
 8016d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016d56:	f107 0314 	add.w	r3, r7, #20
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	4809      	ldr	r0, [pc, #36]	; (8016d84 <HAL_TIM_Base_MspInit+0x9c>)
 8016d5e:	f008 f88d 	bl	801ee7c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8016d62:	2200      	movs	r2, #0
 8016d64:	2101      	movs	r1, #1
 8016d66:	201d      	movs	r0, #29
 8016d68:	f007 f95f 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8016d6c:	201d      	movs	r0, #29
 8016d6e:	f007 f978 	bl	801e062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8016d72:	bf00      	nop
 8016d74:	3728      	adds	r7, #40	; 0x28
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	40000400 	.word	0x40000400
 8016d80:	40023800 	.word	0x40023800
 8016d84:	40020400 	.word	0x40020400

08016d88 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 && htim->Instance == TIM3 && sonar_tbl[0].wait_flag == true)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	7f1b      	ldrb	r3, [r3, #28]
 8016d94:	2b08      	cmp	r3, #8
 8016d96:	d129      	bne.n	8016dec <HAL_TIM_IC_CaptureCallback+0x64>
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	4a16      	ldr	r2, [pc, #88]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016d9e:	4293      	cmp	r3, r2
 8016da0:	d124      	bne.n	8016dec <HAL_TIM_IC_CaptureCallback+0x64>
 8016da2:	4b16      	ldr	r3, [pc, #88]	; (8016dfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d020      	beq.n	8016dec <HAL_TIM_IC_CaptureCallback+0x64>
	{
		if(Ch1_PIN) //(TIM3->CCER & TIM_CCER_CC4P) == 0
 8016daa:	4b15      	ldr	r3, [pc, #84]	; (8016e00 <HAL_TIM_IC_CaptureCallback+0x78>)
 8016dac:	691b      	ldr	r3, [r3, #16]
 8016dae:	f003 0302 	and.w	r3, r3, #2
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00d      	beq.n	8016dd2 <HAL_TIM_IC_CaptureCallback+0x4a>
		{  // Timer2 Ch1 pin(PA0) is High
			TIM3->CCR4 = 0;
 8016db6:	4b10      	ldr	r3, [pc, #64]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	641a      	str	r2, [r3, #64]	; 0x40
			sonar_tbl[0].rising_time = TIM3->CCR4; // read capture data
 8016dbc:	4b0e      	ldr	r3, [pc, #56]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dc0:	4a0e      	ldr	r2, [pc, #56]	; (8016dfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8016dc2:	6053      	str	r3, [r2, #4]
			Ch1_POL_FALLING;  // to falling edge
 8016dc4:	4b0c      	ldr	r3, [pc, #48]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016dc6:	6a1b      	ldr	r3, [r3, #32]
 8016dc8:	4a0b      	ldr	r2, [pc, #44]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016dca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016dce:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
			Ch1_POL_RISING;   // to rising edge
			sonar_tbl[0].wait_flag = false;
		}
	}
}
 8016dd0:	e00c      	b.n	8016dec <HAL_TIM_IC_CaptureCallback+0x64>
			sonar_tbl[0].falling_time = TIM3->CCR4; // read capture data
 8016dd2:	4b09      	ldr	r3, [pc, #36]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dd6:	4a09      	ldr	r2, [pc, #36]	; (8016dfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8016dd8:	6093      	str	r3, [r2, #8]
			Ch1_POL_RISING;   // to rising edge
 8016dda:	4b07      	ldr	r3, [pc, #28]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016ddc:	6a1b      	ldr	r3, [r3, #32]
 8016dde:	4a06      	ldr	r2, [pc, #24]	; (8016df8 <HAL_TIM_IC_CaptureCallback+0x70>)
 8016de0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016de4:	6213      	str	r3, [r2, #32]
			sonar_tbl[0].wait_flag = false;
 8016de6:	4b05      	ldr	r3, [pc, #20]	; (8016dfc <HAL_TIM_IC_CaptureCallback+0x74>)
 8016de8:	2200      	movs	r2, #0
 8016dea:	701a      	strb	r2, [r3, #0]
}
 8016dec:	bf00      	nop
 8016dee:	370c      	adds	r7, #12
 8016df0:	46bd      	mov	sp, r7
 8016df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df6:	4770      	bx	lr
 8016df8:	40000400 	.word	0x40000400
 8016dfc:	2000ac70 	.word	0x2000ac70
 8016e00:	40020400 	.word	0x40020400

08016e04 <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;


bool spiInit(void)
{
 8016e04:	b480      	push	{r7}
 8016e06:	b083      	sub	sp, #12
 8016e08:	af00      	add	r7, sp, #0
  bool ret = true;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8016e0e:	2300      	movs	r3, #0
 8016e10:	607b      	str	r3, [r7, #4]
 8016e12:	e03d      	b.n	8016e90 <spiInit+0x8c>
  {
    spi_tbl[i].is_open = false;
 8016e14:	4923      	ldr	r1, [pc, #140]	; (8016ea4 <spiInit+0xa0>)
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	4613      	mov	r3, r2
 8016e1a:	009b      	lsls	r3, r3, #2
 8016e1c:	4413      	add	r3, r2
 8016e1e:	009b      	lsls	r3, r3, #2
 8016e20:	440b      	add	r3, r1
 8016e22:	2200      	movs	r2, #0
 8016e24:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8016e26:	491f      	ldr	r1, [pc, #124]	; (8016ea4 <spiInit+0xa0>)
 8016e28:	687a      	ldr	r2, [r7, #4]
 8016e2a:	4613      	mov	r3, r2
 8016e2c:	009b      	lsls	r3, r3, #2
 8016e2e:	4413      	add	r3, r2
 8016e30:	009b      	lsls	r3, r3, #2
 8016e32:	440b      	add	r3, r1
 8016e34:	3301      	adds	r3, #1
 8016e36:	2201      	movs	r2, #1
 8016e38:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_error = false;
 8016e3a:	491a      	ldr	r1, [pc, #104]	; (8016ea4 <spiInit+0xa0>)
 8016e3c:	687a      	ldr	r2, [r7, #4]
 8016e3e:	4613      	mov	r3, r2
 8016e40:	009b      	lsls	r3, r3, #2
 8016e42:	4413      	add	r3, r2
 8016e44:	009b      	lsls	r3, r3, #2
 8016e46:	440b      	add	r3, r1
 8016e48:	3302      	adds	r3, #2
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8016e4e:	4915      	ldr	r1, [pc, #84]	; (8016ea4 <spiInit+0xa0>)
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	4613      	mov	r3, r2
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	4413      	add	r3, r2
 8016e58:	009b      	lsls	r3, r3, #2
 8016e5a:	440b      	add	r3, r1
 8016e5c:	3304      	adds	r3, #4
 8016e5e:	2200      	movs	r2, #0
 8016e60:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_rx = NULL;
 8016e62:	4910      	ldr	r1, [pc, #64]	; (8016ea4 <spiInit+0xa0>)
 8016e64:	687a      	ldr	r2, [r7, #4]
 8016e66:	4613      	mov	r3, r2
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	4413      	add	r3, r2
 8016e6c:	009b      	lsls	r3, r3, #2
 8016e6e:	440b      	add	r3, r1
 8016e70:	3310      	adds	r3, #16
 8016e72:	2200      	movs	r2, #0
 8016e74:	601a      	str	r2, [r3, #0]
    spi_tbl[i].h_dma_tx = NULL;
 8016e76:	490b      	ldr	r1, [pc, #44]	; (8016ea4 <spiInit+0xa0>)
 8016e78:	687a      	ldr	r2, [r7, #4]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	009b      	lsls	r3, r3, #2
 8016e7e:	4413      	add	r3, r2
 8016e80:	009b      	lsls	r3, r3, #2
 8016e82:	440b      	add	r3, r1
 8016e84:	330c      	adds	r3, #12
 8016e86:	2200      	movs	r2, #0
 8016e88:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	607b      	str	r3, [r7, #4]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	ddbe      	ble.n	8016e14 <spiInit+0x10>
  }

  return ret;
 8016e96:	78fb      	ldrb	r3, [r7, #3]
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	370c      	adds	r7, #12
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr
 8016ea4:	2000acb0 	.word	0x2000acb0

08016ea8 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8016eb6:	79fa      	ldrb	r2, [r7, #7]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	4413      	add	r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	4a23      	ldr	r2, [pc, #140]	; (8016f50 <spiBegin+0xa8>)
 8016ec2:	4413      	add	r3, r2
 8016ec4:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8016ec6:	79fb      	ldrb	r3, [r7, #7]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d001      	beq.n	8016ed0 <spiBegin+0x28>
 8016ecc:	2b01      	cmp	r3, #1
        ret = true;
      }
      break;

    case _DEF_SPI2:
      break;
 8016ece:	e03a      	b.n	8016f46 <spiBegin+0x9e>
      p_spi->h_spi = &hspi1;
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	4a20      	ldr	r2, [pc, #128]	; (8016f54 <spiBegin+0xac>)
 8016ed4:	609a      	str	r2, [r3, #8]
      p_spi->h_dma_tx = &hdma_spi1_tx;
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	4a1f      	ldr	r2, [pc, #124]	; (8016f58 <spiBegin+0xb0>)
 8016eda:	60da      	str	r2, [r3, #12]
      hspi1.Instance = SPI1;
 8016edc:	4b1d      	ldr	r3, [pc, #116]	; (8016f54 <spiBegin+0xac>)
 8016ede:	4a1f      	ldr	r2, [pc, #124]	; (8016f5c <spiBegin+0xb4>)
 8016ee0:	601a      	str	r2, [r3, #0]
      hspi1.Init.Mode = SPI_MODE_MASTER;
 8016ee2:	4b1c      	ldr	r3, [pc, #112]	; (8016f54 <spiBegin+0xac>)
 8016ee4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016ee8:	605a      	str	r2, [r3, #4]
      hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016eea:	4b1a      	ldr	r3, [pc, #104]	; (8016f54 <spiBegin+0xac>)
 8016eec:	2200      	movs	r2, #0
 8016eee:	609a      	str	r2, [r3, #8]
      hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8016ef0:	4b18      	ldr	r3, [pc, #96]	; (8016f54 <spiBegin+0xac>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	60da      	str	r2, [r3, #12]
      hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016ef6:	4b17      	ldr	r3, [pc, #92]	; (8016f54 <spiBegin+0xac>)
 8016ef8:	2200      	movs	r2, #0
 8016efa:	611a      	str	r2, [r3, #16]
      hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016efc:	4b15      	ldr	r3, [pc, #84]	; (8016f54 <spiBegin+0xac>)
 8016efe:	2200      	movs	r2, #0
 8016f00:	615a      	str	r2, [r3, #20]
      hspi1.Init.NSS = SPI_NSS_SOFT;
 8016f02:	4b14      	ldr	r3, [pc, #80]	; (8016f54 <spiBegin+0xac>)
 8016f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f08:	619a      	str	r2, [r3, #24]
      hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8016f0a:	4b12      	ldr	r3, [pc, #72]	; (8016f54 <spiBegin+0xac>)
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	61da      	str	r2, [r3, #28]
      hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f10:	4b10      	ldr	r3, [pc, #64]	; (8016f54 <spiBegin+0xac>)
 8016f12:	2200      	movs	r2, #0
 8016f14:	621a      	str	r2, [r3, #32]
      hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f16:	4b0f      	ldr	r3, [pc, #60]	; (8016f54 <spiBegin+0xac>)
 8016f18:	2200      	movs	r2, #0
 8016f1a:	625a      	str	r2, [r3, #36]	; 0x24
      hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f1c:	4b0d      	ldr	r3, [pc, #52]	; (8016f54 <spiBegin+0xac>)
 8016f1e:	2200      	movs	r2, #0
 8016f20:	629a      	str	r2, [r3, #40]	; 0x28
      hspi1.Init.CRCPolynomial = 10;
 8016f22:	4b0c      	ldr	r3, [pc, #48]	; (8016f54 <spiBegin+0xac>)
 8016f24:	220a      	movs	r2, #10
 8016f26:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SPI_DeInit(&hspi1);
 8016f28:	480a      	ldr	r0, [pc, #40]	; (8016f54 <spiBegin+0xac>)
 8016f2a:	f00a fc1d 	bl	8021768 <HAL_SPI_DeInit>
      if (HAL_SPI_Init(&hspi1) == HAL_OK)
 8016f2e:	4809      	ldr	r0, [pc, #36]	; (8016f54 <spiBegin+0xac>)
 8016f30:	f00a fbb6 	bl	80216a0 <HAL_SPI_Init>
 8016f34:	4603      	mov	r3, r0
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d104      	bne.n	8016f44 <spiBegin+0x9c>
        p_spi->is_open = true;
 8016f3a:	68bb      	ldr	r3, [r7, #8]
 8016f3c:	2201      	movs	r2, #1
 8016f3e:	701a      	strb	r2, [r3, #0]
        ret = true;
 8016f40:	2301      	movs	r3, #1
 8016f42:	73fb      	strb	r3, [r7, #15]
      break;
 8016f44:	bf00      	nop
  }

  return ret;
 8016f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	3710      	adds	r7, #16
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd80      	pop	{r7, pc}
 8016f50:	2000acb0 	.word	0x2000acb0
 8016f54:	2000acc4 	.word	0x2000acc4
 8016f58:	2000ad1c 	.word	0x2000ad1c
 8016f5c:	40013000 	.word	0x40013000

08016f60 <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	460a      	mov	r2, r1
 8016f6a:	71fb      	strb	r3, [r7, #7]
 8016f6c:	4613      	mov	r3, r2
 8016f6e:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8016f70:	79fa      	ldrb	r2, [r7, #7]
 8016f72:	4613      	mov	r3, r2
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	4413      	add	r3, r2
 8016f78:	009b      	lsls	r3, r3, #2
 8016f7a:	4a2a      	ldr	r2, [pc, #168]	; (8017024 <spiSetDataMode+0xc4>)
 8016f7c:	4413      	add	r3, r2
 8016f7e:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	f083 0301 	eor.w	r3, r3, #1
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d146      	bne.n	801701c <spiSetDataMode+0xbc>


  switch( dataMode )
 8016f8e:	79bb      	ldrb	r3, [r7, #6]
 8016f90:	2b03      	cmp	r3, #3
 8016f92:	d844      	bhi.n	801701e <spiSetDataMode+0xbe>
 8016f94:	a201      	add	r2, pc, #4	; (adr r2, 8016f9c <spiSetDataMode+0x3c>)
 8016f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f9a:	bf00      	nop
 8016f9c:	08016fad 	.word	0x08016fad
 8016fa0:	08016fc9 	.word	0x08016fc9
 8016fa4:	08016fe5 	.word	0x08016fe5
 8016fa8:	08017001 	.word	0x08017001
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	689b      	ldr	r3, [r3, #8]
 8016fb8:	2200      	movs	r2, #0
 8016fba:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	689b      	ldr	r3, [r3, #8]
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f00a fb6d 	bl	80216a0 <HAL_SPI_Init>
      break;
 8016fc6:	e02a      	b.n	801701e <spiSetDataMode+0xbe>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	689b      	ldr	r3, [r3, #8]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	689b      	ldr	r3, [r3, #8]
 8016fd4:	2201      	movs	r2, #1
 8016fd6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	689b      	ldr	r3, [r3, #8]
 8016fdc:	4618      	mov	r0, r3
 8016fde:	f00a fb5f 	bl	80216a0 <HAL_SPI_Init>
      break;
 8016fe2:	e01c      	b.n	801701e <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	689b      	ldr	r3, [r3, #8]
 8016fe8:	2202      	movs	r2, #2
 8016fea:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	689b      	ldr	r3, [r3, #8]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	689b      	ldr	r3, [r3, #8]
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	f00a fb51 	bl	80216a0 <HAL_SPI_Init>
      break;
 8016ffe:	e00e      	b.n	801701e <spiSetDataMode+0xbe>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	689b      	ldr	r3, [r3, #8]
 8017004:	2202      	movs	r2, #2
 8017006:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	689b      	ldr	r3, [r3, #8]
 801700c:	2201      	movs	r2, #1
 801700e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	689b      	ldr	r3, [r3, #8]
 8017014:	4618      	mov	r0, r3
 8017016:	f00a fb43 	bl	80216a0 <HAL_SPI_Init>
      break;
 801701a:	e000      	b.n	801701e <spiSetDataMode+0xbe>
  if (p_spi->is_open == false) return;
 801701c:	bf00      	nop
  }
}
 801701e:	3710      	adds	r7, #16
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}
 8017024:	2000acb0 	.word	0x2000acb0

08017028 <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	4603      	mov	r3, r0
 8017030:	460a      	mov	r2, r1
 8017032:	71fb      	strb	r3, [r7, #7]
 8017034:	4613      	mov	r3, r2
 8017036:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8017038:	79fa      	ldrb	r2, [r7, #7]
 801703a:	4613      	mov	r3, r2
 801703c:	009b      	lsls	r3, r3, #2
 801703e:	4413      	add	r3, r2
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	4a10      	ldr	r2, [pc, #64]	; (8017084 <spiSetBitWidth+0x5c>)
 8017044:	4413      	add	r3, r2
 8017046:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	781b      	ldrb	r3, [r3, #0]
 801704c:	f083 0301 	eor.w	r3, r3, #1
 8017050:	b2db      	uxtb	r3, r3
 8017052:	2b00      	cmp	r3, #0
 8017054:	d111      	bne.n	801707a <spiSetBitWidth+0x52>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	689b      	ldr	r3, [r3, #8]
 801705a:	2200      	movs	r2, #0
 801705c:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 801705e:	79bb      	ldrb	r3, [r7, #6]
 8017060:	2b10      	cmp	r3, #16
 8017062:	d104      	bne.n	801706e <spiSetBitWidth+0x46>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	689b      	ldr	r3, [r3, #8]
 8017068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801706c:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	689b      	ldr	r3, [r3, #8]
 8017072:	4618      	mov	r0, r3
 8017074:	f00a fb14 	bl	80216a0 <HAL_SPI_Init>
 8017078:	e000      	b.n	801707c <spiSetBitWidth+0x54>
  if (p_spi->is_open == false) return;
 801707a:	bf00      	nop
}
 801707c:	3710      	adds	r7, #16
 801707e:	46bd      	mov	sp, r7
 8017080:	bd80      	pop	{r7, pc}
 8017082:	bf00      	nop
 8017084:	2000acb0 	.word	0x2000acb0

08017088 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b086      	sub	sp, #24
 801708c:	af02      	add	r7, sp, #8
 801708e:	4603      	mov	r3, r0
 8017090:	460a      	mov	r2, r1
 8017092:	71fb      	strb	r3, [r7, #7]
 8017094:	4613      	mov	r3, r2
 8017096:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8017098:	79fa      	ldrb	r2, [r7, #7]
 801709a:	4613      	mov	r3, r2
 801709c:	009b      	lsls	r3, r3, #2
 801709e:	4413      	add	r3, r2
 80170a0:	009b      	lsls	r3, r3, #2
 80170a2:	4a0d      	ldr	r2, [pc, #52]	; (80170d8 <spiTransfer8+0x50>)
 80170a4:	4413      	add	r3, r2
 80170a6:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	f083 0301 	eor.w	r3, r3, #1
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d001      	beq.n	80170ba <spiTransfer8+0x32>
 80170b6:	2300      	movs	r3, #0
 80170b8:	e00a      	b.n	80170d0 <spiTransfer8+0x48>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 10);
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	6898      	ldr	r0, [r3, #8]
 80170be:	f107 020b 	add.w	r2, r7, #11
 80170c2:	1db9      	adds	r1, r7, #6
 80170c4:	230a      	movs	r3, #10
 80170c6:	9300      	str	r3, [sp, #0]
 80170c8:	2301      	movs	r3, #1
 80170ca:	f00a fb75 	bl	80217b8 <HAL_SPI_TransmitReceive>

  return ret;
 80170ce:	7afb      	ldrb	r3, [r7, #11]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3710      	adds	r7, #16
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	2000acb0 	.word	0x2000acb0

080170dc <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4603      	mov	r3, r0
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	607a      	str	r2, [r7, #4]
 80170e8:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 80170ea:	7bfa      	ldrb	r2, [r7, #15]
 80170ec:	4613      	mov	r3, r2
 80170ee:	009b      	lsls	r3, r3, #2
 80170f0:	4413      	add	r3, r2
 80170f2:	009b      	lsls	r3, r3, #2
 80170f4:	4a0c      	ldr	r2, [pc, #48]	; (8017128 <spiDmaTxStart+0x4c>)
 80170f6:	4413      	add	r3, r2
 80170f8:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	f083 0301 	eor.w	r3, r3, #1
 8017102:	b2db      	uxtb	r3, r3
 8017104:	2b00      	cmp	r3, #0
 8017106:	d10b      	bne.n	8017120 <spiDmaTxStart+0x44>

  p_spi->is_tx_done = false;
 8017108:	697b      	ldr	r3, [r7, #20]
 801710a:	2200      	movs	r2, #0
 801710c:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	689b      	ldr	r3, [r3, #8]
 8017112:	687a      	ldr	r2, [r7, #4]
 8017114:	b292      	uxth	r2, r2
 8017116:	68b9      	ldr	r1, [r7, #8]
 8017118:	4618      	mov	r0, r3
 801711a:	f00a fcef 	bl	8021afc <HAL_SPI_Transmit_DMA>
 801711e:	e000      	b.n	8017122 <spiDmaTxStart+0x46>
  if (p_spi->is_open == false) return;
 8017120:	bf00      	nop
}
 8017122:	3718      	adds	r7, #24
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	2000acb0 	.word	0x2000acb0

0801712c <spiDmaTxTransfer>:

bool spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b086      	sub	sp, #24
 8017130:	af00      	add	r7, sp, #0
 8017132:	60b9      	str	r1, [r7, #8]
 8017134:	607a      	str	r2, [r7, #4]
 8017136:	603b      	str	r3, [r7, #0]
 8017138:	4603      	mov	r3, r0
 801713a:	73fb      	strb	r3, [r7, #15]
  bool ret = true;
 801713c:	2301      	movs	r3, #1
 801713e:	75fb      	strb	r3, [r7, #23]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8017140:	7bfb      	ldrb	r3, [r7, #15]
 8017142:	687a      	ldr	r2, [r7, #4]
 8017144:	68b9      	ldr	r1, [r7, #8]
 8017146:	4618      	mov	r0, r3
 8017148:	f7ff ffc8 	bl	80170dc <spiDmaTxStart>

  t_time = millis();
 801714c:	f7fb fa71 	bl	8012632 <millis>
 8017150:	6138      	str	r0, [r7, #16]

  if (timeout == 0) return true;
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d101      	bne.n	801715c <spiDmaTxTransfer+0x30>
 8017158:	2301      	movs	r3, #1
 801715a:	e013      	b.n	8017184 <spiDmaTxTransfer+0x58>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 801715c:	7bfb      	ldrb	r3, [r7, #15]
 801715e:	4618      	mov	r0, r3
 8017160:	f000 f814 	bl	801718c <spiDmaTxIsDone>
 8017164:	4603      	mov	r3, r0
 8017166:	2b00      	cmp	r3, #0
 8017168:	d10a      	bne.n	8017180 <spiDmaTxTransfer+0x54>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 801716a:	f7fb fa62 	bl	8012632 <millis>
 801716e:	4602      	mov	r2, r0
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	1ad3      	subs	r3, r2, r3
 8017174:	683a      	ldr	r2, [r7, #0]
 8017176:	429a      	cmp	r2, r3
 8017178:	d2f0      	bcs.n	801715c <spiDmaTxTransfer+0x30>
    {
      ret = false;
 801717a:	2300      	movs	r3, #0
 801717c:	75fb      	strb	r3, [r7, #23]
      break;
 801717e:	e000      	b.n	8017182 <spiDmaTxTransfer+0x56>
      break;
 8017180:	bf00      	nop
    }
  }

  return ret;
 8017182:	7dfb      	ldrb	r3, [r7, #23]
}
 8017184:	4618      	mov	r0, r3
 8017186:	3718      	adds	r7, #24
 8017188:	46bd      	mov	sp, r7
 801718a:	bd80      	pop	{r7, pc}

0801718c <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 801718c:	b480      	push	{r7}
 801718e:	b085      	sub	sp, #20
 8017190:	af00      	add	r7, sp, #0
 8017192:	4603      	mov	r3, r0
 8017194:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8017196:	79fa      	ldrb	r2, [r7, #7]
 8017198:	4613      	mov	r3, r2
 801719a:	009b      	lsls	r3, r3, #2
 801719c:	4413      	add	r3, r2
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	4a09      	ldr	r2, [pc, #36]	; (80171c8 <spiDmaTxIsDone+0x3c>)
 80171a2:	4413      	add	r3, r2
 80171a4:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	f083 0301 	eor.w	r3, r3, #1
 80171ae:	b2db      	uxtb	r3, r3
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d001      	beq.n	80171b8 <spiDmaTxIsDone+0x2c>
 80171b4:	2301      	movs	r3, #1
 80171b6:	e001      	b.n	80171bc <spiDmaTxIsDone+0x30>

  return p_spi->is_tx_done;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	785b      	ldrb	r3, [r3, #1]
}
 80171bc:	4618      	mov	r0, r3
 80171be:	3714      	adds	r7, #20
 80171c0:	46bd      	mov	sp, r7
 80171c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c6:	4770      	bx	lr
 80171c8:	2000acb0 	.word	0x2000acb0

080171cc <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80171cc:	b480      	push	{r7}
 80171ce:	b085      	sub	sp, #20
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	4603      	mov	r3, r0
 80171d4:	6039      	str	r1, [r7, #0]
 80171d6:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80171d8:	79fa      	ldrb	r2, [r7, #7]
 80171da:	4613      	mov	r3, r2
 80171dc:	009b      	lsls	r3, r3, #2
 80171de:	4413      	add	r3, r2
 80171e0:	009b      	lsls	r3, r3, #2
 80171e2:	4a0a      	ldr	r2, [pc, #40]	; (801720c <spiAttachTxInterrupt+0x40>)
 80171e4:	4413      	add	r3, r2
 80171e6:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	781b      	ldrb	r3, [r3, #0]
 80171ec:	f083 0301 	eor.w	r3, r3, #1
 80171f0:	b2db      	uxtb	r3, r3
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d103      	bne.n	80171fe <spiAttachTxInterrupt+0x32>

  p_spi->func_tx = func;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	683a      	ldr	r2, [r7, #0]
 80171fa:	605a      	str	r2, [r3, #4]
 80171fc:	e000      	b.n	8017200 <spiAttachTxInterrupt+0x34>
  if (p_spi->is_open == false)     return;
 80171fe:	bf00      	nop
}
 8017200:	3714      	adds	r7, #20
 8017202:	46bd      	mov	sp, r7
 8017204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017208:	4770      	bx	lr
 801720a:	bf00      	nop
 801720c:	2000acb0 	.word	0x2000acb0

08017210 <HAL_SPI_ErrorCallback>:



void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8017210:	b480      	push	{r7}
 8017212:	b083      	sub	sp, #12
 8017214:	af00      	add	r7, sp, #0
 8017216:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	4b06      	ldr	r3, [pc, #24]	; (8017238 <HAL_SPI_ErrorCallback+0x28>)
 801721e:	689b      	ldr	r3, [r3, #8]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	429a      	cmp	r2, r3
 8017224:	d102      	bne.n	801722c <HAL_SPI_ErrorCallback+0x1c>
  {
    spi_tbl[_DEF_SPI1].is_error = true;
 8017226:	4b04      	ldr	r3, [pc, #16]	; (8017238 <HAL_SPI_ErrorCallback+0x28>)
 8017228:	2201      	movs	r2, #1
 801722a:	709a      	strb	r2, [r3, #2]
  }
}
 801722c:	bf00      	nop
 801722e:	370c      	adds	r7, #12
 8017230:	46bd      	mov	sp, r7
 8017232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017236:	4770      	bx	lr
 8017238:	2000acb0 	.word	0x2000acb0

0801723c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b084      	sub	sp, #16
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	4b0a      	ldr	r3, [pc, #40]	; (8017274 <HAL_SPI_TxCpltCallback+0x38>)
 801724a:	689b      	ldr	r3, [r3, #8]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	429a      	cmp	r2, r3
 8017250:	d10b      	bne.n	801726a <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8017252:	4b08      	ldr	r3, [pc, #32]	; (8017274 <HAL_SPI_TxCpltCallback+0x38>)
 8017254:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	2201      	movs	r2, #1
 801725a:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	685b      	ldr	r3, [r3, #4]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d002      	beq.n	801726a <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	4798      	blx	r3
    }
  }
}
 801726a:	bf00      	nop
 801726c:	3710      	adds	r7, #16
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	2000acb0 	.word	0x2000acb0

08017278 <HAL_SPI_MspInit>:
    }
  }
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b08a      	sub	sp, #40	; 0x28
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017280:	f107 0314 	add.w	r3, r7, #20
 8017284:	2200      	movs	r2, #0
 8017286:	601a      	str	r2, [r3, #0]
 8017288:	605a      	str	r2, [r3, #4]
 801728a:	609a      	str	r2, [r3, #8]
 801728c:	60da      	str	r2, [r3, #12]
 801728e:	611a      	str	r2, [r3, #16]
	  if(spiHandle->Instance==SPI1)
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	4a40      	ldr	r2, [pc, #256]	; (8017398 <HAL_SPI_MspInit+0x120>)
 8017296:	4293      	cmp	r3, r2
 8017298:	d179      	bne.n	801738e <HAL_SPI_MspInit+0x116>
	  {
	  /* USER CODE BEGIN SPI1_MspInit 0 */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 801729a:	2300      	movs	r3, #0
 801729c:	613b      	str	r3, [r7, #16]
 801729e:	4b3f      	ldr	r3, [pc, #252]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172a2:	4a3e      	ldr	r2, [pc, #248]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80172a8:	6313      	str	r3, [r2, #48]	; 0x30
 80172aa:	4b3c      	ldr	r3, [pc, #240]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80172b2:	613b      	str	r3, [r7, #16]
 80172b4:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END SPI1_MspInit 0 */
	    /* SPI1 clock enable */
	    __HAL_RCC_SPI1_CLK_ENABLE();
 80172b6:	2300      	movs	r3, #0
 80172b8:	60fb      	str	r3, [r7, #12]
 80172ba:	4b38      	ldr	r3, [pc, #224]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172be:	4a37      	ldr	r2, [pc, #220]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80172c4:	6453      	str	r3, [r2, #68]	; 0x44
 80172c6:	4b35      	ldr	r3, [pc, #212]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80172ce:	60fb      	str	r3, [r7, #12]
 80172d0:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80172d2:	2300      	movs	r3, #0
 80172d4:	60bb      	str	r3, [r7, #8]
 80172d6:	4b31      	ldr	r3, [pc, #196]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172da:	4a30      	ldr	r2, [pc, #192]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172dc:	f043 0301 	orr.w	r3, r3, #1
 80172e0:	6313      	str	r3, [r2, #48]	; 0x30
 80172e2:	4b2e      	ldr	r3, [pc, #184]	; (801739c <HAL_SPI_MspInit+0x124>)
 80172e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172e6:	f003 0301 	and.w	r3, r3, #1
 80172ea:	60bb      	str	r3, [r7, #8]
 80172ec:	68bb      	ldr	r3, [r7, #8]
	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80172ee:	23a0      	movs	r3, #160	; 0xa0
 80172f0:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80172f2:	2302      	movs	r3, #2
 80172f4:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80172f6:	2300      	movs	r3, #0
 80172f8:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80172fa:	2303      	movs	r3, #3
 80172fc:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80172fe:	2305      	movs	r3, #5
 8017300:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017302:	f107 0314 	add.w	r3, r7, #20
 8017306:	4619      	mov	r1, r3
 8017308:	4825      	ldr	r0, [pc, #148]	; (80173a0 <HAL_SPI_MspInit+0x128>)
 801730a:	f007 fdb7 	bl	801ee7c <HAL_GPIO_Init>

	    /* SPI1 DMA Init */
	    /* SPI1_TX Init */
	    hdma_spi1_tx.Instance = DMA2_Stream5;
 801730e:	4b25      	ldr	r3, [pc, #148]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017310:	4a25      	ldr	r2, [pc, #148]	; (80173a8 <HAL_SPI_MspInit+0x130>)
 8017312:	601a      	str	r2, [r3, #0]
	    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8017314:	4b23      	ldr	r3, [pc, #140]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017316:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801731a:	605a      	str	r2, [r3, #4]
	    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801731c:	4b21      	ldr	r3, [pc, #132]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 801731e:	2240      	movs	r2, #64	; 0x40
 8017320:	609a      	str	r2, [r3, #8]
	    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8017322:	4b20      	ldr	r3, [pc, #128]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017324:	2200      	movs	r2, #0
 8017326:	60da      	str	r2, [r3, #12]
	    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8017328:	4b1e      	ldr	r3, [pc, #120]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 801732a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801732e:	611a      	str	r2, [r3, #16]
	    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8017330:	4b1c      	ldr	r3, [pc, #112]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017336:	615a      	str	r2, [r3, #20]
	    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8017338:	4b1a      	ldr	r3, [pc, #104]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 801733a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801733e:	619a      	str	r2, [r3, #24]
	    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8017340:	4b18      	ldr	r3, [pc, #96]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017342:	2200      	movs	r2, #0
 8017344:	61da      	str	r2, [r3, #28]
	    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8017346:	4b17      	ldr	r3, [pc, #92]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017348:	2200      	movs	r2, #0
 801734a:	621a      	str	r2, [r3, #32]
	    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801734c:	4b15      	ldr	r3, [pc, #84]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 801734e:	2200      	movs	r2, #0
 8017350:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8017352:	4814      	ldr	r0, [pc, #80]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017354:	f006 feae 	bl	801e0b4 <HAL_DMA_Init>
 8017358:	4603      	mov	r3, r0
 801735a:	2b00      	cmp	r3, #0
 801735c:	d001      	beq.n	8017362 <HAL_SPI_MspInit+0xea>
	    {
	      Error_Handler();
 801735e:	f7fb f9f1 	bl	8012744 <Error_Handler>
	    }

	    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	4a0f      	ldr	r2, [pc, #60]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 8017366:	649a      	str	r2, [r3, #72]	; 0x48
 8017368:	4a0e      	ldr	r2, [pc, #56]	; (80173a4 <HAL_SPI_MspInit+0x12c>)
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6393      	str	r3, [r2, #56]	; 0x38

	    /* SPI1 interrupt Init */
	    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801736e:	2200      	movs	r2, #0
 8017370:	2100      	movs	r1, #0
 8017372:	2023      	movs	r0, #35	; 0x23
 8017374:	f006 fe59 	bl	801e02a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8017378:	2023      	movs	r0, #35	; 0x23
 801737a:	f006 fe72 	bl	801e062 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN SPI1_MspInit 1 */
	    /* DMA2_Stream3_IRQn interrupt configuration */
	    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 801737e:	2200      	movs	r2, #0
 8017380:	2105      	movs	r1, #5
 8017382:	2044      	movs	r0, #68	; 0x44
 8017384:	f006 fe51 	bl	801e02a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8017388:	2044      	movs	r0, #68	; 0x44
 801738a:	f006 fe6a 	bl	801e062 <HAL_NVIC_EnableIRQ>
	  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801738e:	bf00      	nop
 8017390:	3728      	adds	r7, #40	; 0x28
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	40013000 	.word	0x40013000
 801739c:	40023800 	.word	0x40023800
 80173a0:	40020000 	.word	0x40020000
 80173a4:	2000ad1c 	.word	0x2000ad1c
 80173a8:	40026488 	.word	0x40026488

080173ac <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]

	  if(spiHandle->Instance==SPI1)
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a0c      	ldr	r2, [pc, #48]	; (80173ec <HAL_SPI_MspDeInit+0x40>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d111      	bne.n	80173e2 <HAL_SPI_MspDeInit+0x36>
	  {
	  /* USER CODE BEGIN SPI1_MspDeInit 0 */

	  /* USER CODE END SPI1_MspDeInit 0 */
	    /* Peripheral clock disable */
	    __HAL_RCC_SPI1_CLK_DISABLE();
 80173be:	4b0c      	ldr	r3, [pc, #48]	; (80173f0 <HAL_SPI_MspDeInit+0x44>)
 80173c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173c2:	4a0b      	ldr	r2, [pc, #44]	; (80173f0 <HAL_SPI_MspDeInit+0x44>)
 80173c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80173c8:	6453      	str	r3, [r2, #68]	; 0x44

	    /**SPI1 GPIO Configuration
	    PA5     ------> SPI1_SCK
	    PA7     ------> SPI1_MOSI
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_7);
 80173ca:	21a0      	movs	r1, #160	; 0xa0
 80173cc:	4809      	ldr	r0, [pc, #36]	; (80173f4 <HAL_SPI_MspDeInit+0x48>)
 80173ce:	f007 fed9 	bl	801f184 <HAL_GPIO_DeInit>

	    /* SPI1 DMA DeInit */
	    HAL_DMA_DeInit(spiHandle->hdmatx);
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173d6:	4618      	mov	r0, r3
 80173d8:	f006 ff1a 	bl	801e210 <HAL_DMA_DeInit>

	    /* SPI1 interrupt Deinit */
	    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 80173dc:	2023      	movs	r0, #35	; 0x23
 80173de:	f006 fe4e 	bl	801e07e <HAL_NVIC_DisableIRQ>
	  /* USER CODE BEGIN SPI1_MspDeInit 1 */

	  /* USER CODE END SPI1_MspDeInit 1 */
	  }
}
 80173e2:	bf00      	nop
 80173e4:	3708      	adds	r7, #8
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	40013000 	.word	0x40013000
 80173f0:	40023800 	.word	0x40023800
 80173f4:	40020000 	.word	0x40020000

080173f8 <tdsInit>:

tds_tbl_t tds_tbl[HW_TDS_MAX_CH];


bool tdsInit(void)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b086      	sub	sp, #24
 80173fc:	af00      	add	r7, sp, #0
	bool ret = true;
 80173fe:	2301      	movs	r3, #1
 8017400:	75fb      	strb	r3, [r7, #23]
	tds_tbl[0].aref = 3.3;
 8017402:	4b31      	ldr	r3, [pc, #196]	; (80174c8 <tdsInit+0xd0>)
 8017404:	2203      	movs	r2, #3
 8017406:	701a      	strb	r2, [r3, #0]
	tds_tbl[0].temperature = 25.0;
 8017408:	4b2f      	ldr	r3, [pc, #188]	; (80174c8 <tdsInit+0xd0>)
 801740a:	4a30      	ldr	r2, [pc, #192]	; (80174cc <tdsInit+0xd4>)
 801740c:	609a      	str	r2, [r3, #8]
	tds_tbl[0].adcRange = 4096.0;
 801740e:	4b2e      	ldr	r3, [pc, #184]	; (80174c8 <tdsInit+0xd0>)
 8017410:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8017414:	60da      	str	r2, [r3, #12]
	tds_tbl[0].kValue = 1.0;
 8017416:	4b2c      	ldr	r3, [pc, #176]	; (80174c8 <tdsInit+0xd0>)
 8017418:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801741c:	605a      	str	r2, [r3, #4]

	  ADC_ChannelConfTypeDef sConfig = {0};
 801741e:	1d3b      	adds	r3, r7, #4
 8017420:	2200      	movs	r2, #0
 8017422:	601a      	str	r2, [r3, #0]
 8017424:	605a      	str	r2, [r3, #4]
 8017426:	609a      	str	r2, [r3, #8]
 8017428:	60da      	str	r2, [r3, #12]

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc1.Instance = ADC1;
 801742a:	4b29      	ldr	r3, [pc, #164]	; (80174d0 <tdsInit+0xd8>)
 801742c:	4a29      	ldr	r2, [pc, #164]	; (80174d4 <tdsInit+0xdc>)
 801742e:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017430:	4b27      	ldr	r3, [pc, #156]	; (80174d0 <tdsInit+0xd8>)
 8017432:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017436:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8017438:	4b25      	ldr	r3, [pc, #148]	; (80174d0 <tdsInit+0xd8>)
 801743a:	2200      	movs	r2, #0
 801743c:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 801743e:	4b24      	ldr	r3, [pc, #144]	; (80174d0 <tdsInit+0xd8>)
 8017440:	2201      	movs	r2, #1
 8017442:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8017444:	4b22      	ldr	r3, [pc, #136]	; (80174d0 <tdsInit+0xd8>)
 8017446:	2201      	movs	r2, #1
 8017448:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801744a:	4b21      	ldr	r3, [pc, #132]	; (80174d0 <tdsInit+0xd8>)
 801744c:	2200      	movs	r2, #0
 801744e:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017452:	4b1f      	ldr	r3, [pc, #124]	; (80174d0 <tdsInit+0xd8>)
 8017454:	2200      	movs	r2, #0
 8017456:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8017458:	4b1d      	ldr	r3, [pc, #116]	; (80174d0 <tdsInit+0xd8>)
 801745a:	4a1f      	ldr	r2, [pc, #124]	; (80174d8 <tdsInit+0xe0>)
 801745c:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801745e:	4b1c      	ldr	r3, [pc, #112]	; (80174d0 <tdsInit+0xd8>)
 8017460:	2200      	movs	r2, #0
 8017462:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 1;
 8017464:	4b1a      	ldr	r3, [pc, #104]	; (80174d0 <tdsInit+0xd8>)
 8017466:	2201      	movs	r2, #1
 8017468:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 801746a:	4b19      	ldr	r3, [pc, #100]	; (80174d0 <tdsInit+0xd8>)
 801746c:	2201      	movs	r2, #1
 801746e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017472:	4b17      	ldr	r3, [pc, #92]	; (80174d0 <tdsInit+0xd8>)
 8017474:	2201      	movs	r2, #1
 8017476:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8017478:	4815      	ldr	r0, [pc, #84]	; (80174d0 <tdsInit+0xd8>)
 801747a:	f005 ff9d 	bl	801d3b8 <HAL_ADC_Init>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	d001      	beq.n	8017488 <tdsInit+0x90>
	  {
	    Error_Handler();
 8017484:	f7fb f95e 	bl	8012744 <Error_Handler>
	  }
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8017488:	2301      	movs	r3, #1
 801748a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 801748c:	2301      	movs	r3, #1
 801748e:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8017490:	2307      	movs	r3, #7
 8017492:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017494:	1d3b      	adds	r3, r7, #4
 8017496:	4619      	mov	r1, r3
 8017498:	480d      	ldr	r0, [pc, #52]	; (80174d0 <tdsInit+0xd8>)
 801749a:	f006 fa0d 	bl	801d8b8 <HAL_ADC_ConfigChannel>
 801749e:	4603      	mov	r3, r0
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d001      	beq.n	80174a8 <tdsInit+0xb0>
	  {
	    Error_Handler();
 80174a4:	f7fb f94e 	bl	8012744 <Error_Handler>
	  }
	if (HAL_ADC_Start_DMA(&hadc1, &tds_tbl[0].analogValue, 1) != HAL_OK)
 80174a8:	2201      	movs	r2, #1
 80174aa:	490c      	ldr	r1, [pc, #48]	; (80174dc <tdsInit+0xe4>)
 80174ac:	4808      	ldr	r0, [pc, #32]	; (80174d0 <tdsInit+0xd8>)
 80174ae:	f006 f907 	bl	801d6c0 <HAL_ADC_Start_DMA>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d001      	beq.n	80174bc <tdsInit+0xc4>
	{
		Error_Handler();
 80174b8:	f7fb f944 	bl	8012744 <Error_Handler>
	}

	return ret;
 80174bc:	7dfb      	ldrb	r3, [r7, #23]

}
 80174be:	4618      	mov	r0, r3
 80174c0:	3718      	adds	r7, #24
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
 80174c6:	bf00      	nop
 80174c8:	2000ae24 	.word	0x2000ae24
 80174cc:	41c80000 	.word	0x41c80000
 80174d0:	2000ad7c 	.word	0x2000ad7c
 80174d4:	40012000 	.word	0x40012000
 80174d8:	0f000001 	.word	0x0f000001
 80174dc:	2000ae34 	.word	0x2000ae34

080174e0 <tds_measure>:
bool tds_measure(void)
{
 80174e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80174e4:	b082      	sub	sp, #8
 80174e6:	af00      	add	r7, sp, #0
	bool ret = true;
 80174e8:	2301      	movs	r3, #1
 80174ea:	71bb      	strb	r3, [r7, #6]
	static int16_t tdsHistTab[11];
	static int tdsHistIdx = 0;
	static uint32_t tdsValueSum = 0;

	tds_tbl_t *tds = &tds_tbl[0];
 80174ec:	4b8e      	ldr	r3, [pc, #568]	; (8017728 <tds_measure+0x248>)
 80174ee:	603b      	str	r3, [r7, #0]

	tds->voltage = tds->analogValue/tds->adcRange*tds->aref;
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	691b      	ldr	r3, [r3, #16]
 80174f4:	ee07 3a90 	vmov	s15, r3
 80174f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8017502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	781b      	ldrb	r3, [r3, #0]
 801750a:	ee07 3a90 	vmov	s15, r3
 801750e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	edc3 7a05 	vstr	s15, [r3, #20]
	tds->ecValue=(133.42*tds->voltage*tds->voltage*tds->voltage - 255.86*tds->voltage*tds->voltage + 857.39*tds->voltage)*tds->kValue;
 801751c:	683b      	ldr	r3, [r7, #0]
 801751e:	695b      	ldr	r3, [r3, #20]
 8017520:	4618      	mov	r0, r3
 8017522:	f7f9 fb79 	bl	8010c18 <__aeabi_f2d>
 8017526:	a378      	add	r3, pc, #480	; (adr r3, 8017708 <tds_measure+0x228>)
 8017528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752c:	f7f9 fbcc 	bl	8010cc8 <__aeabi_dmul>
 8017530:	4602      	mov	r2, r0
 8017532:	460b      	mov	r3, r1
 8017534:	4614      	mov	r4, r2
 8017536:	461d      	mov	r5, r3
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	695b      	ldr	r3, [r3, #20]
 801753c:	4618      	mov	r0, r3
 801753e:	f7f9 fb6b 	bl	8010c18 <__aeabi_f2d>
 8017542:	4602      	mov	r2, r0
 8017544:	460b      	mov	r3, r1
 8017546:	4620      	mov	r0, r4
 8017548:	4629      	mov	r1, r5
 801754a:	f7f9 fbbd 	bl	8010cc8 <__aeabi_dmul>
 801754e:	4602      	mov	r2, r0
 8017550:	460b      	mov	r3, r1
 8017552:	4614      	mov	r4, r2
 8017554:	461d      	mov	r5, r3
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	695b      	ldr	r3, [r3, #20]
 801755a:	4618      	mov	r0, r3
 801755c:	f7f9 fb5c 	bl	8010c18 <__aeabi_f2d>
 8017560:	4602      	mov	r2, r0
 8017562:	460b      	mov	r3, r1
 8017564:	4620      	mov	r0, r4
 8017566:	4629      	mov	r1, r5
 8017568:	f7f9 fbae 	bl	8010cc8 <__aeabi_dmul>
 801756c:	4602      	mov	r2, r0
 801756e:	460b      	mov	r3, r1
 8017570:	4614      	mov	r4, r2
 8017572:	461d      	mov	r5, r3
 8017574:	683b      	ldr	r3, [r7, #0]
 8017576:	695b      	ldr	r3, [r3, #20]
 8017578:	4618      	mov	r0, r3
 801757a:	f7f9 fb4d 	bl	8010c18 <__aeabi_f2d>
 801757e:	a364      	add	r3, pc, #400	; (adr r3, 8017710 <tds_measure+0x230>)
 8017580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017584:	f7f9 fba0 	bl	8010cc8 <__aeabi_dmul>
 8017588:	4602      	mov	r2, r0
 801758a:	460b      	mov	r3, r1
 801758c:	4690      	mov	r8, r2
 801758e:	4699      	mov	r9, r3
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	695b      	ldr	r3, [r3, #20]
 8017594:	4618      	mov	r0, r3
 8017596:	f7f9 fb3f 	bl	8010c18 <__aeabi_f2d>
 801759a:	4602      	mov	r2, r0
 801759c:	460b      	mov	r3, r1
 801759e:	4640      	mov	r0, r8
 80175a0:	4649      	mov	r1, r9
 80175a2:	f7f9 fb91 	bl	8010cc8 <__aeabi_dmul>
 80175a6:	4602      	mov	r2, r0
 80175a8:	460b      	mov	r3, r1
 80175aa:	4620      	mov	r0, r4
 80175ac:	4629      	mov	r1, r5
 80175ae:	f7f9 f9d3 	bl	8010958 <__aeabi_dsub>
 80175b2:	4602      	mov	r2, r0
 80175b4:	460b      	mov	r3, r1
 80175b6:	4614      	mov	r4, r2
 80175b8:	461d      	mov	r5, r3
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	695b      	ldr	r3, [r3, #20]
 80175be:	4618      	mov	r0, r3
 80175c0:	f7f9 fb2a 	bl	8010c18 <__aeabi_f2d>
 80175c4:	a354      	add	r3, pc, #336	; (adr r3, 8017718 <tds_measure+0x238>)
 80175c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ca:	f7f9 fb7d 	bl	8010cc8 <__aeabi_dmul>
 80175ce:	4602      	mov	r2, r0
 80175d0:	460b      	mov	r3, r1
 80175d2:	4620      	mov	r0, r4
 80175d4:	4629      	mov	r1, r5
 80175d6:	f7f9 f9c1 	bl	801095c <__adddf3>
 80175da:	4602      	mov	r2, r0
 80175dc:	460b      	mov	r3, r1
 80175de:	4614      	mov	r4, r2
 80175e0:	461d      	mov	r5, r3
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7f9 fb16 	bl	8010c18 <__aeabi_f2d>
 80175ec:	4602      	mov	r2, r0
 80175ee:	460b      	mov	r3, r1
 80175f0:	4620      	mov	r0, r4
 80175f2:	4629      	mov	r1, r5
 80175f4:	f7f9 fb68 	bl	8010cc8 <__aeabi_dmul>
 80175f8:	4602      	mov	r2, r0
 80175fa:	460b      	mov	r3, r1
 80175fc:	4610      	mov	r0, r2
 80175fe:	4619      	mov	r1, r3
 8017600:	f7f9 fe5a 	bl	80112b8 <__aeabi_d2f>
 8017604:	4602      	mov	r2, r0
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	619a      	str	r2, [r3, #24]
	tds->ecValue25  =  tds->ecValue / (1.0+0.02*(tds->temperature-25.0));  //temperature compensation
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	699b      	ldr	r3, [r3, #24]
 801760e:	4618      	mov	r0, r3
 8017610:	f7f9 fb02 	bl	8010c18 <__aeabi_f2d>
 8017614:	4604      	mov	r4, r0
 8017616:	460d      	mov	r5, r1
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	4618      	mov	r0, r3
 801761e:	f7f9 fafb 	bl	8010c18 <__aeabi_f2d>
 8017622:	f04f 0200 	mov.w	r2, #0
 8017626:	4b41      	ldr	r3, [pc, #260]	; (801772c <tds_measure+0x24c>)
 8017628:	f7f9 f996 	bl	8010958 <__aeabi_dsub>
 801762c:	4602      	mov	r2, r0
 801762e:	460b      	mov	r3, r1
 8017630:	4610      	mov	r0, r2
 8017632:	4619      	mov	r1, r3
 8017634:	a33a      	add	r3, pc, #232	; (adr r3, 8017720 <tds_measure+0x240>)
 8017636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763a:	f7f9 fb45 	bl	8010cc8 <__aeabi_dmul>
 801763e:	4602      	mov	r2, r0
 8017640:	460b      	mov	r3, r1
 8017642:	4610      	mov	r0, r2
 8017644:	4619      	mov	r1, r3
 8017646:	f04f 0200 	mov.w	r2, #0
 801764a:	4b39      	ldr	r3, [pc, #228]	; (8017730 <tds_measure+0x250>)
 801764c:	f7f9 f986 	bl	801095c <__adddf3>
 8017650:	4602      	mov	r2, r0
 8017652:	460b      	mov	r3, r1
 8017654:	4620      	mov	r0, r4
 8017656:	4629      	mov	r1, r5
 8017658:	f7f9 fc60 	bl	8010f1c <__aeabi_ddiv>
 801765c:	4602      	mov	r2, r0
 801765e:	460b      	mov	r3, r1
 8017660:	4610      	mov	r0, r2
 8017662:	4619      	mov	r1, r3
 8017664:	f7f9 fe28 	bl	80112b8 <__aeabi_d2f>
 8017668:	4602      	mov	r2, r0
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	61da      	str	r2, [r3, #28]
	tds->tdsValue = tds->ecValue25 * TdsFactor;
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	edd3 7a07 	vldr	s15, [r3, #28]
 8017674:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017678:	ee67 7a87 	vmul.f32	s15, s15, s14
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	edc3 7a08 	vstr	s15, [r3, #32]

	uint8_t indexplus1 = (tdsHistIdx + 1);
 8017682:	4b2c      	ldr	r3, [pc, #176]	; (8017734 <tds_measure+0x254>)
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	b2db      	uxtb	r3, r3
 8017688:	3301      	adds	r3, #1
 801768a:	71fb      	strb	r3, [r7, #7]
	if (indexplus1 == 11) indexplus1 = 0;
 801768c:	79fb      	ldrb	r3, [r7, #7]
 801768e:	2b0b      	cmp	r3, #11
 8017690:	d101      	bne.n	8017696 <tds_measure+0x1b6>
 8017692:	2300      	movs	r3, #0
 8017694:	71fb      	strb	r3, [r7, #7]
	tdsHistTab[tdsHistIdx] = tds->tdsValue;
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	edd3 7a08 	vldr	s15, [r3, #32]
 801769c:	4b25      	ldr	r3, [pc, #148]	; (8017734 <tds_measure+0x254>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80176a4:	ee17 2a90 	vmov	r2, s15
 80176a8:	b211      	sxth	r1, r2
 80176aa:	4a23      	ldr	r2, [pc, #140]	; (8017738 <tds_measure+0x258>)
 80176ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	tdsValueSum += tdsHistTab[tdsHistIdx];
 80176b0:	4b20      	ldr	r3, [pc, #128]	; (8017734 <tds_measure+0x254>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	4a20      	ldr	r2, [pc, #128]	; (8017738 <tds_measure+0x258>)
 80176b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80176ba:	461a      	mov	r2, r3
 80176bc:	4b1f      	ldr	r3, [pc, #124]	; (801773c <tds_measure+0x25c>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	4413      	add	r3, r2
 80176c2:	4a1e      	ldr	r2, [pc, #120]	; (801773c <tds_measure+0x25c>)
 80176c4:	6013      	str	r3, [r2, #0]
	tdsValueSum -= tdsHistTab[indexplus1];
 80176c6:	4b1d      	ldr	r3, [pc, #116]	; (801773c <tds_measure+0x25c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	79fa      	ldrb	r2, [r7, #7]
 80176cc:	491a      	ldr	r1, [pc, #104]	; (8017738 <tds_measure+0x258>)
 80176ce:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80176d2:	1a9b      	subs	r3, r3, r2
 80176d4:	4a19      	ldr	r2, [pc, #100]	; (801773c <tds_measure+0x25c>)
 80176d6:	6013      	str	r3, [r2, #0]
	tdsHistIdx = indexplus1;
 80176d8:	79fb      	ldrb	r3, [r7, #7]
 80176da:	4a16      	ldr	r2, [pc, #88]	; (8017734 <tds_measure+0x254>)
 80176dc:	6013      	str	r3, [r2, #0]
	tds->filter_tdsValue = tdsValueSum / 10;
 80176de:	4b17      	ldr	r3, [pc, #92]	; (801773c <tds_measure+0x25c>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	4a17      	ldr	r2, [pc, #92]	; (8017740 <tds_measure+0x260>)
 80176e4:	fba2 2303 	umull	r2, r3, r2, r3
 80176e8:	08db      	lsrs	r3, r3, #3
 80176ea:	ee07 3a90 	vmov	s15, r3
 80176ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	return ret;
 80176f8:	79bb      	ldrb	r3, [r7, #6]
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3708      	adds	r7, #8
 80176fe:	46bd      	mov	sp, r7
 8017700:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8017704:	f3af 8000 	nop.w
 8017708:	a3d70a3d 	.word	0xa3d70a3d
 801770c:	4060ad70 	.word	0x4060ad70
 8017710:	1eb851ec 	.word	0x1eb851ec
 8017714:	406ffb85 	.word	0x406ffb85
 8017718:	b851eb85 	.word	0xb851eb85
 801771c:	408acb1e 	.word	0x408acb1e
 8017720:	47ae147b 	.word	0x47ae147b
 8017724:	3f947ae1 	.word	0x3f947ae1
 8017728:	2000ae24 	.word	0x2000ae24
 801772c:	40390000 	.word	0x40390000
 8017730:	3ff00000 	.word	0x3ff00000
 8017734:	2000ae4c 	.word	0x2000ae4c
 8017738:	2000ae50 	.word	0x2000ae50
 801773c:	2000ae68 	.word	0x2000ae68
 8017740:	cccccccd 	.word	0xcccccccd

08017744 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08a      	sub	sp, #40	; 0x28
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801774c:	f107 0314 	add.w	r3, r7, #20
 8017750:	2200      	movs	r2, #0
 8017752:	601a      	str	r2, [r3, #0]
 8017754:	605a      	str	r2, [r3, #4]
 8017756:	609a      	str	r2, [r3, #8]
 8017758:	60da      	str	r2, [r3, #12]
 801775a:	611a      	str	r2, [r3, #16]
	  if(adcHandle->Instance==ADC1)
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	4a3e      	ldr	r2, [pc, #248]	; (801785c <HAL_ADC_MspInit+0x118>)
 8017762:	4293      	cmp	r3, r2
 8017764:	d175      	bne.n	8017852 <HAL_ADC_MspInit+0x10e>
	  {
	  /* USER CODE BEGIN ADC1_MspInit 0 */
		  /* DMA controller clock enable */
		  __HAL_RCC_DMA2_CLK_ENABLE();
 8017766:	2300      	movs	r3, #0
 8017768:	613b      	str	r3, [r7, #16]
 801776a:	4b3d      	ldr	r3, [pc, #244]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 801776c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801776e:	4a3c      	ldr	r2, [pc, #240]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 8017770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017774:	6313      	str	r3, [r2, #48]	; 0x30
 8017776:	4b3a      	ldr	r3, [pc, #232]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 8017778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801777a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801777e:	613b      	str	r3, [r7, #16]
 8017780:	693b      	ldr	r3, [r7, #16]
	  /* USER CODE END ADC1_MspInit 0 */
	    /* ADC1 clock enable */
	    __HAL_RCC_ADC1_CLK_ENABLE();
 8017782:	2300      	movs	r3, #0
 8017784:	60fb      	str	r3, [r7, #12]
 8017786:	4b36      	ldr	r3, [pc, #216]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 8017788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801778a:	4a35      	ldr	r2, [pc, #212]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 801778c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017790:	6453      	str	r3, [r2, #68]	; 0x44
 8017792:	4b33      	ldr	r3, [pc, #204]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 8017794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801779a:	60fb      	str	r3, [r7, #12]
 801779c:	68fb      	ldr	r3, [r7, #12]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 801779e:	2300      	movs	r3, #0
 80177a0:	60bb      	str	r3, [r7, #8]
 80177a2:	4b2f      	ldr	r3, [pc, #188]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 80177a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177a6:	4a2e      	ldr	r2, [pc, #184]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 80177a8:	f043 0301 	orr.w	r3, r3, #1
 80177ac:	6313      	str	r3, [r2, #48]	; 0x30
 80177ae:	4b2c      	ldr	r3, [pc, #176]	; (8017860 <HAL_ADC_MspInit+0x11c>)
 80177b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177b2:	f003 0301 	and.w	r3, r3, #1
 80177b6:	60bb      	str	r3, [r7, #8]
 80177b8:	68bb      	ldr	r3, [r7, #8]
	    /**ADC1 GPIO Configuration
	    PA1     ------> ADC1_IN1
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80177ba:	2302      	movs	r3, #2
 80177bc:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80177be:	2303      	movs	r3, #3
 80177c0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177c2:	2300      	movs	r3, #0
 80177c4:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80177c6:	f107 0314 	add.w	r3, r7, #20
 80177ca:	4619      	mov	r1, r3
 80177cc:	4825      	ldr	r0, [pc, #148]	; (8017864 <HAL_ADC_MspInit+0x120>)
 80177ce:	f007 fb55 	bl	801ee7c <HAL_GPIO_Init>

	    /* ADC1 DMA Init */
	    /* ADC1 Init */
	    hdma_adc1.Instance = DMA2_Stream0;
 80177d2:	4b25      	ldr	r3, [pc, #148]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177d4:	4a25      	ldr	r2, [pc, #148]	; (801786c <HAL_ADC_MspInit+0x128>)
 80177d6:	601a      	str	r2, [r3, #0]
	    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80177d8:	4b23      	ldr	r3, [pc, #140]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177da:	2200      	movs	r2, #0
 80177dc:	605a      	str	r2, [r3, #4]
	    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80177de:	4b22      	ldr	r3, [pc, #136]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177e0:	2200      	movs	r2, #0
 80177e2:	609a      	str	r2, [r3, #8]
	    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80177e4:	4b20      	ldr	r3, [pc, #128]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177e6:	2200      	movs	r2, #0
 80177e8:	60da      	str	r2, [r3, #12]
	    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80177ea:	4b1f      	ldr	r3, [pc, #124]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80177f0:	611a      	str	r2, [r3, #16]
	    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80177f2:	4b1d      	ldr	r3, [pc, #116]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80177f8:	615a      	str	r2, [r3, #20]
	    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80177fa:	4b1b      	ldr	r3, [pc, #108]	; (8017868 <HAL_ADC_MspInit+0x124>)
 80177fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8017800:	619a      	str	r2, [r3, #24]
	    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8017802:	4b19      	ldr	r3, [pc, #100]	; (8017868 <HAL_ADC_MspInit+0x124>)
 8017804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017808:	61da      	str	r2, [r3, #28]
	    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801780a:	4b17      	ldr	r3, [pc, #92]	; (8017868 <HAL_ADC_MspInit+0x124>)
 801780c:	2200      	movs	r2, #0
 801780e:	621a      	str	r2, [r3, #32]
	    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8017810:	4b15      	ldr	r3, [pc, #84]	; (8017868 <HAL_ADC_MspInit+0x124>)
 8017812:	2200      	movs	r2, #0
 8017814:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8017816:	4814      	ldr	r0, [pc, #80]	; (8017868 <HAL_ADC_MspInit+0x124>)
 8017818:	f006 fc4c 	bl	801e0b4 <HAL_DMA_Init>
 801781c:	4603      	mov	r3, r0
 801781e:	2b00      	cmp	r3, #0
 8017820:	d001      	beq.n	8017826 <HAL_ADC_MspInit+0xe2>
	    {
	      Error_Handler();
 8017822:	f7fa ff8f 	bl	8012744 <Error_Handler>
	    }

	    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	4a0f      	ldr	r2, [pc, #60]	; (8017868 <HAL_ADC_MspInit+0x124>)
 801782a:	639a      	str	r2, [r3, #56]	; 0x38
 801782c:	4a0e      	ldr	r2, [pc, #56]	; (8017868 <HAL_ADC_MspInit+0x124>)
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	6393      	str	r3, [r2, #56]	; 0x38

	    /* ADC1 interrupt Init */
	    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8017832:	2200      	movs	r2, #0
 8017834:	2106      	movs	r1, #6
 8017836:	2012      	movs	r0, #18
 8017838:	f006 fbf7 	bl	801e02a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801783c:	2012      	movs	r0, #18
 801783e:	f006 fc10 	bl	801e062 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_MspInit 1 */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 6, 0);
 8017842:	2200      	movs	r2, #0
 8017844:	2106      	movs	r1, #6
 8017846:	2038      	movs	r0, #56	; 0x38
 8017848:	f006 fbef 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 801784c:	2038      	movs	r0, #56	; 0x38
 801784e:	f006 fc08 	bl	801e062 <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8017852:	bf00      	nop
 8017854:	3728      	adds	r7, #40	; 0x28
 8017856:	46bd      	mov	sp, r7
 8017858:	bd80      	pop	{r7, pc}
 801785a:	bf00      	nop
 801785c:	40012000 	.word	0x40012000
 8017860:	40023800 	.word	0x40023800
 8017864:	40020000 	.word	0x40020000
 8017868:	2000adc4 	.word	0x2000adc4
 801786c:	40026410 	.word	0x40026410

08017870 <serialize8>:
static void s_struct_partial(uint8_t *cb,uint8_t siz);
//static void s_struct(uint8_t *cb,uint8_t siz);


void serialize8(uint8_t a)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b082      	sub	sp, #8
 8017874:	af00      	add	r7, sp, #0
 8017876:	4603      	mov	r3, r0
 8017878:	71fb      	strb	r3, [r7, #7]
	SerialSerialize(CURRENTPORT,a);
 801787a:	4b0a      	ldr	r3, [pc, #40]	; (80178a4 <serialize8+0x34>)
 801787c:	781b      	ldrb	r3, [r3, #0]
 801787e:	79fa      	ldrb	r2, [r7, #7]
 8017880:	4611      	mov	r1, r2
 8017882:	4618      	mov	r0, r3
 8017884:	f000 f9e6 	bl	8017c54 <SerialSerialize>
	currentPortState->checksum ^= (a & 0xFF);
 8017888:	4b07      	ldr	r3, [pc, #28]	; (80178a8 <serialize8+0x38>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	7819      	ldrb	r1, [r3, #0]
 801788e:	4b06      	ldr	r3, [pc, #24]	; (80178a8 <serialize8+0x38>)
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	79fa      	ldrb	r2, [r7, #7]
 8017894:	404a      	eors	r2, r1
 8017896:	b2d2      	uxtb	r2, r2
 8017898:	701a      	strb	r2, [r3, #0]
}
 801789a:	bf00      	nop
 801789c:	3708      	adds	r7, #8
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	2000affa 	.word	0x2000affa
 80178a8:	200000b0 	.word	0x200000b0

080178ac <read8>:
	serialize8((a>>16) & 0xFF);
	serialize8((a>>24) & 0xFF);
}

uint8_t read8(void)
{
 80178ac:	b480      	push	{r7}
 80178ae:	af00      	add	r7, sp, #0
	return currentPortState->inBuf[currentPortState->indRX++] & 0xff;
 80178b0:	4b07      	ldr	r3, [pc, #28]	; (80178d0 <read8+0x24>)
 80178b2:	6819      	ldr	r1, [r3, #0]
 80178b4:	4b06      	ldr	r3, [pc, #24]	; (80178d0 <read8+0x24>)
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	785a      	ldrb	r2, [r3, #1]
 80178ba:	1c50      	adds	r0, r2, #1
 80178bc:	b2c0      	uxtb	r0, r0
 80178be:	7058      	strb	r0, [r3, #1]
 80178c0:	4613      	mov	r3, r2
 80178c2:	440b      	add	r3, r1
 80178c4:	789b      	ldrb	r3, [r3, #2]
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	46bd      	mov	sp, r7
 80178ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ce:	4770      	bx	lr
 80178d0:	200000b0 	.word	0x200000b0

080178d4 <headSerialResponse>:
{
	headSerial(0, s, cmdMSP);
}

void headSerialResponse(uint8_t err, uint8_t s)
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	4603      	mov	r3, r0
 80178dc:	460a      	mov	r2, r1
 80178de:	71fb      	strb	r3, [r7, #7]
 80178e0:	4613      	mov	r3, r2
 80178e2:	71bb      	strb	r3, [r7, #6]
	serialize8('$');
 80178e4:	2024      	movs	r0, #36	; 0x24
 80178e6:	f7ff ffc3 	bl	8017870 <serialize8>
	serialize8('M');
 80178ea:	204d      	movs	r0, #77	; 0x4d
 80178ec:	f7ff ffc0 	bl	8017870 <serialize8>
	serialize8(err ? '!' : '>');
 80178f0:	79fb      	ldrb	r3, [r7, #7]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d001      	beq.n	80178fa <headSerialResponse+0x26>
 80178f6:	2321      	movs	r3, #33	; 0x21
 80178f8:	e000      	b.n	80178fc <headSerialResponse+0x28>
 80178fa:	233e      	movs	r3, #62	; 0x3e
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7ff ffb7 	bl	8017870 <serialize8>
	currentPortState->checksum = 0;               // start calculating a new checksum
 8017902:	4b09      	ldr	r3, [pc, #36]	; (8017928 <headSerialResponse+0x54>)
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2200      	movs	r2, #0
 8017908:	701a      	strb	r2, [r3, #0]
	serialize8(s);
 801790a:	79bb      	ldrb	r3, [r7, #6]
 801790c:	4618      	mov	r0, r3
 801790e:	f7ff ffaf 	bl	8017870 <serialize8>
	serialize8(currentPortState->cmdMSP);
 8017912:	4b05      	ldr	r3, [pc, #20]	; (8017928 <headSerialResponse+0x54>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801791a:	4618      	mov	r0, r3
 801791c:	f7ff ffa8 	bl	8017870 <serialize8>
}
 8017920:	bf00      	nop
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	200000b0 	.word	0x200000b0

0801792c <headSerialReply>:

void headSerialReply(uint8_t s)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b082      	sub	sp, #8
 8017930:	af00      	add	r7, sp, #0
 8017932:	4603      	mov	r3, r0
 8017934:	71fb      	strb	r3, [r7, #7]
	headSerialResponse(0, s);
 8017936:	79fb      	ldrb	r3, [r7, #7]
 8017938:	4619      	mov	r1, r3
 801793a:	2000      	movs	r0, #0
 801793c:	f7ff ffca 	bl	80178d4 <headSerialResponse>
}
 8017940:	bf00      	nop
 8017942:	3708      	adds	r7, #8
 8017944:	46bd      	mov	sp, r7
 8017946:	bd80      	pop	{r7, pc}

08017948 <tailSerialReply>:
{
	headSerialResponse(1, s);
}

void tailSerialReply(void)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	af00      	add	r7, sp, #0
	SerialSerialize(CURRENTPORT,currentPortState->checksum);
 801794c:	4b07      	ldr	r3, [pc, #28]	; (801796c <tailSerialReply+0x24>)
 801794e:	781a      	ldrb	r2, [r3, #0]
 8017950:	4b07      	ldr	r3, [pc, #28]	; (8017970 <tailSerialReply+0x28>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	4619      	mov	r1, r3
 8017958:	4610      	mov	r0, r2
 801795a:	f000 f97b 	bl	8017c54 <SerialSerialize>
	UartSendData(CURRENTPORT);
 801795e:	4b03      	ldr	r3, [pc, #12]	; (801796c <tailSerialReply+0x24>)
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	4618      	mov	r0, r3
 8017964:	f000 f9a0 	bl	8017ca8 <UartSendData>
	//serialize8(currentPortState->checksum);
}
 8017968:	bf00      	nop
 801796a:	bd80      	pop	{r7, pc}
 801796c:	2000affa 	.word	0x2000affa
 8017970:	200000b0 	.word	0x200000b0

08017974 <s_struct_partial>:

void s_struct_partial(uint8_t *cb,uint8_t siz)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	460b      	mov	r3, r1
 801797e:	70fb      	strb	r3, [r7, #3]
	while(siz--) serialize8(*cb++);
 8017980:	e006      	b.n	8017990 <s_struct_partial+0x1c>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	1c5a      	adds	r2, r3, #1
 8017986:	607a      	str	r2, [r7, #4]
 8017988:	781b      	ldrb	r3, [r3, #0]
 801798a:	4618      	mov	r0, r3
 801798c:	f7ff ff70 	bl	8017870 <serialize8>
 8017990:	78fb      	ldrb	r3, [r7, #3]
 8017992:	1e5a      	subs	r2, r3, #1
 8017994:	70fa      	strb	r2, [r7, #3]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d1f3      	bne.n	8017982 <s_struct_partial+0xe>
}
 801799a:	bf00      	nop
 801799c:	bf00      	nop
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <s_struct>:

void s_struct(uint8_t *cb,uint8_t siz)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	460b      	mov	r3, r1
 80179ae:	70fb      	strb	r3, [r7, #3]
	headSerialReply(siz);
 80179b0:	78fb      	ldrb	r3, [r7, #3]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7ff ffba 	bl	801792c <headSerialReply>
	s_struct_partial(cb,siz);
 80179b8:	78fb      	ldrb	r3, [r7, #3]
 80179ba:	4619      	mov	r1, r3
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f7ff ffd9 	bl	8017974 <s_struct_partial>
	tailSerialReply();
 80179c2:	f7ff ffc1 	bl	8017948 <tailSerialReply>
}
 80179c6:	bf00      	nop
 80179c8:	3708      	adds	r7, #8
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
	...

080179d0 <SerialCom>:
///////////////////////////////////////////////////

void SerialCom(void)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b082      	sub	sp, #8
 80179d4:	af00      	add	r7, sp, #0
	uint8_t c;

	currentPortState = &ports[_DEF_UART1];
 80179d6:	4b6f      	ldr	r3, [pc, #444]	; (8017b94 <SerialCom+0x1c4>)
 80179d8:	4a6f      	ldr	r2, [pc, #444]	; (8017b98 <SerialCom+0x1c8>)
 80179da:	601a      	str	r2, [r3, #0]
	CURRENTPORT = _DEF_UART1;
 80179dc:	4b6f      	ldr	r3, [pc, #444]	; (8017b9c <SerialCom+0x1cc>)
 80179de:	2200      	movs	r2, #0
 80179e0:	701a      	strb	r2, [r3, #0]
	while(uartAvailable(CURRENTPORT) > 0)
 80179e2:	e0c8      	b.n	8017b76 <SerialCom+0x1a6>
	{
		c = uartRead(CURRENTPORT);
 80179e4:	4b6d      	ldr	r3, [pc, #436]	; (8017b9c <SerialCom+0x1cc>)
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	4618      	mov	r0, r3
 80179ea:	f000 fb51 	bl	8018090 <uartRead>
 80179ee:	4603      	mov	r3, r0
 80179f0:	71fb      	strb	r3, [r7, #7]
		if (currentPortState->c_state == IDLE)
 80179f2:	4b68      	ldr	r3, [pc, #416]	; (8017b94 <SerialCom+0x1c4>)
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d10a      	bne.n	8017a14 <SerialCom+0x44>
		{
			currentPortState->c_state = (c=='$') ? HEADER_START : IDLE;
 80179fe:	79fb      	ldrb	r3, [r7, #7]
 8017a00:	2b24      	cmp	r3, #36	; 0x24
 8017a02:	bf0c      	ite	eq
 8017a04:	2301      	moveq	r3, #1
 8017a06:	2300      	movne	r3, #0
 8017a08:	b2da      	uxtb	r2, r3
 8017a0a:	4b62      	ldr	r3, [pc, #392]	; (8017b94 <SerialCom+0x1c4>)
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017a12:	e0b0      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_START)
 8017a14:	4b5f      	ldr	r3, [pc, #380]	; (8017b94 <SerialCom+0x1c4>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	d10a      	bne.n	8017a36 <SerialCom+0x66>
		{
			currentPortState->c_state = (c=='M') ? HEADER_M : IDLE;
 8017a20:	79fb      	ldrb	r3, [r7, #7]
 8017a22:	2b4d      	cmp	r3, #77	; 0x4d
 8017a24:	d101      	bne.n	8017a2a <SerialCom+0x5a>
 8017a26:	2202      	movs	r2, #2
 8017a28:	e000      	b.n	8017a2c <SerialCom+0x5c>
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	4b59      	ldr	r3, [pc, #356]	; (8017b94 <SerialCom+0x1c4>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017a34:	e09f      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_M)
 8017a36:	4b57      	ldr	r3, [pc, #348]	; (8017b94 <SerialCom+0x1c4>)
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017a3e:	2b02      	cmp	r3, #2
 8017a40:	d10a      	bne.n	8017a58 <SerialCom+0x88>
		{
			currentPortState->c_state = (c=='<') ? HEADER_ARROW : IDLE;
 8017a42:	79fb      	ldrb	r3, [r7, #7]
 8017a44:	2b3c      	cmp	r3, #60	; 0x3c
 8017a46:	d101      	bne.n	8017a4c <SerialCom+0x7c>
 8017a48:	2203      	movs	r2, #3
 8017a4a:	e000      	b.n	8017a4e <SerialCom+0x7e>
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	4b51      	ldr	r3, [pc, #324]	; (8017b94 <SerialCom+0x1c4>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017a56:	e08e      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_ARROW)
 8017a58:	4b4e      	ldr	r3, [pc, #312]	; (8017b94 <SerialCom+0x1c4>)
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017a60:	2b03      	cmp	r3, #3
 8017a62:	d129      	bne.n	8017ab8 <SerialCom+0xe8>
		{
			if (c > INBUF_SIZE)
 8017a64:	79fb      	ldrb	r3, [r7, #7]
 8017a66:	2b80      	cmp	r3, #128	; 0x80
 8017a68:	d905      	bls.n	8017a76 <SerialCom+0xa6>
			{  // now we are expecting the payload size
				currentPortState->c_state = IDLE;
 8017a6a:	4b4a      	ldr	r3, [pc, #296]	; (8017b94 <SerialCom+0x1c4>)
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	2200      	movs	r2, #0
 8017a70:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
				continue;
 8017a74:	e07f      	b.n	8017b76 <SerialCom+0x1a6>
			}
			currentPortState->dataSize = c;
 8017a76:	4b47      	ldr	r3, [pc, #284]	; (8017b94 <SerialCom+0x1c4>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	79fa      	ldrb	r2, [r7, #7]
 8017a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			currentPortState->offset = 0;
 8017a80:	4b44      	ldr	r3, [pc, #272]	; (8017b94 <SerialCom+0x1c4>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2200      	movs	r2, #0
 8017a86:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			currentPortState->indRX = 0;
 8017a8a:	4b42      	ldr	r3, [pc, #264]	; (8017b94 <SerialCom+0x1c4>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	705a      	strb	r2, [r3, #1]
			currentPortState->checksum = 0;
 8017a92:	4b40      	ldr	r3, [pc, #256]	; (8017b94 <SerialCom+0x1c4>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	2200      	movs	r2, #0
 8017a98:	701a      	strb	r2, [r3, #0]
			currentPortState->checksum ^= c;
 8017a9a:	4b3e      	ldr	r3, [pc, #248]	; (8017b94 <SerialCom+0x1c4>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	7819      	ldrb	r1, [r3, #0]
 8017aa0:	4b3c      	ldr	r3, [pc, #240]	; (8017b94 <SerialCom+0x1c4>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	79fa      	ldrb	r2, [r7, #7]
 8017aa6:	404a      	eors	r2, r1
 8017aa8:	b2d2      	uxtb	r2, r2
 8017aaa:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_SIZE;
 8017aac:	4b39      	ldr	r3, [pc, #228]	; (8017b94 <SerialCom+0x1c4>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	2204      	movs	r2, #4
 8017ab2:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017ab6:	e05e      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_SIZE)
 8017ab8:	4b36      	ldr	r3, [pc, #216]	; (8017b94 <SerialCom+0x1c4>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017ac0:	2b04      	cmp	r3, #4
 8017ac2:	d113      	bne.n	8017aec <SerialCom+0x11c>
		{
			currentPortState->cmdMSP = c;
 8017ac4:	4b33      	ldr	r3, [pc, #204]	; (8017b94 <SerialCom+0x1c4>)
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	79fa      	ldrb	r2, [r7, #7]
 8017aca:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			currentPortState->checksum ^= c;
 8017ace:	4b31      	ldr	r3, [pc, #196]	; (8017b94 <SerialCom+0x1c4>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	7819      	ldrb	r1, [r3, #0]
 8017ad4:	4b2f      	ldr	r3, [pc, #188]	; (8017b94 <SerialCom+0x1c4>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	79fa      	ldrb	r2, [r7, #7]
 8017ada:	404a      	eors	r2, r1
 8017adc:	b2d2      	uxtb	r2, r2
 8017ade:	701a      	strb	r2, [r3, #0]
			currentPortState->c_state = HEADER_CMD;
 8017ae0:	4b2c      	ldr	r3, [pc, #176]	; (8017b94 <SerialCom+0x1c4>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2205      	movs	r2, #5
 8017ae6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8017aea:	e044      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset < currentPortState->dataSize)
 8017aec:	4b29      	ldr	r3, [pc, #164]	; (8017b94 <SerialCom+0x1c4>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017af4:	2b05      	cmp	r3, #5
 8017af6:	d121      	bne.n	8017b3c <SerialCom+0x16c>
 8017af8:	4b26      	ldr	r3, [pc, #152]	; (8017b94 <SerialCom+0x1c4>)
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017b00:	4b24      	ldr	r3, [pc, #144]	; (8017b94 <SerialCom+0x1c4>)
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	d217      	bcs.n	8017b3c <SerialCom+0x16c>
		{
			currentPortState->checksum ^= c;
 8017b0c:	4b21      	ldr	r3, [pc, #132]	; (8017b94 <SerialCom+0x1c4>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	7819      	ldrb	r1, [r3, #0]
 8017b12:	4b20      	ldr	r3, [pc, #128]	; (8017b94 <SerialCom+0x1c4>)
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	79fa      	ldrb	r2, [r7, #7]
 8017b18:	404a      	eors	r2, r1
 8017b1a:	b2d2      	uxtb	r2, r2
 8017b1c:	701a      	strb	r2, [r3, #0]
			currentPortState->inBuf[currentPortState->offset++] = c;
 8017b1e:	4b1d      	ldr	r3, [pc, #116]	; (8017b94 <SerialCom+0x1c4>)
 8017b20:	6819      	ldr	r1, [r3, #0]
 8017b22:	4b1c      	ldr	r3, [pc, #112]	; (8017b94 <SerialCom+0x1c4>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017b2a:	1c50      	adds	r0, r2, #1
 8017b2c:	b2c0      	uxtb	r0, r0
 8017b2e:	f883 0083 	strb.w	r0, [r3, #131]	; 0x83
 8017b32:	4613      	mov	r3, r2
 8017b34:	440b      	add	r3, r1
 8017b36:	79fa      	ldrb	r2, [r7, #7]
 8017b38:	709a      	strb	r2, [r3, #2]
 8017b3a:	e01c      	b.n	8017b76 <SerialCom+0x1a6>
		} else if (currentPortState->c_state == HEADER_CMD && currentPortState->offset >= currentPortState->dataSize)
 8017b3c:	4b15      	ldr	r3, [pc, #84]	; (8017b94 <SerialCom+0x1c4>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8017b44:	2b05      	cmp	r3, #5
 8017b46:	d116      	bne.n	8017b76 <SerialCom+0x1a6>
 8017b48:	4b12      	ldr	r3, [pc, #72]	; (8017b94 <SerialCom+0x1c4>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	f893 2083 	ldrb.w	r2, [r3, #131]	; 0x83
 8017b50:	4b10      	ldr	r3, [pc, #64]	; (8017b94 <SerialCom+0x1c4>)
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d30c      	bcc.n	8017b76 <SerialCom+0x1a6>
		{
			if (currentPortState->checksum == c)
 8017b5c:	4b0d      	ldr	r3, [pc, #52]	; (8017b94 <SerialCom+0x1c4>)
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	79fa      	ldrb	r2, [r7, #7]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d101      	bne.n	8017b6c <SerialCom+0x19c>
			{
				evaluateCommand();
 8017b68:	f000 f81a 	bl	8017ba0 <evaluateCommand>
			}
			currentPortState->c_state = IDLE;
 8017b6c:	4b09      	ldr	r3, [pc, #36]	; (8017b94 <SerialCom+0x1c4>)
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	2200      	movs	r2, #0
 8017b72:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
	while(uartAvailable(CURRENTPORT) > 0)
 8017b76:	4b09      	ldr	r3, [pc, #36]	; (8017b9c <SerialCom+0x1cc>)
 8017b78:	781b      	ldrb	r3, [r3, #0]
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f000 fa42 	bl	8018004 <uartAvailable>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f47f af2e 	bne.w	80179e4 <SerialCom+0x14>
		}
	}
}
 8017b88:	bf00      	nop
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	200000b0 	.word	0x200000b0
 8017b98:	2000affc 	.word	0x2000affc
 8017b9c:	2000affa 	.word	0x2000affa

08017ba0 <evaluateCommand>:

void evaluateCommand(void)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b08a      	sub	sp, #40	; 0x28
 8017ba4:	af00      	add	r7, sp, #0
	switch(currentPortState->cmdMSP)
 8017ba6:	4b28      	ldr	r3, [pc, #160]	; (8017c48 <evaluateCommand+0xa8>)
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8017bae:	2bc9      	cmp	r3, #201	; 0xc9
 8017bb0:	d040      	beq.n	8017c34 <evaluateCommand+0x94>
 8017bb2:	2bc9      	cmp	r3, #201	; 0xc9
 8017bb4:	dc42      	bgt.n	8017c3c <evaluateCommand+0x9c>
 8017bb6:	2b66      	cmp	r3, #102	; 0x66
 8017bb8:	d002      	beq.n	8017bc0 <evaluateCommand+0x20>
 8017bba:	2bc8      	cmp	r3, #200	; 0xc8
 8017bbc:	d021      	beq.n	8017c02 <evaluateCommand+0x62>
			break;

		default:
			//headSerialError();
			//tailSerialReply();
			break;
 8017bbe:	e03d      	b.n	8017c3c <evaluateCommand+0x9c>
			data.water_temp = sensor.ds18b20_temp;
 8017bc0:	4b22      	ldr	r3, [pc, #136]	; (8017c4c <evaluateCommand+0xac>)
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	607b      	str	r3, [r7, #4]
			data.water_level = sensor.water_level;
 8017bc6:	4b21      	ldr	r3, [pc, #132]	; (8017c4c <evaluateCommand+0xac>)
 8017bc8:	68db      	ldr	r3, [r3, #12]
 8017bca:	60bb      	str	r3, [r7, #8]
			data.water_tds = sensor.water_quality;
 8017bcc:	4b1f      	ldr	r3, [pc, #124]	; (8017c4c <evaluateCommand+0xac>)
 8017bce:	691b      	ldr	r3, [r3, #16]
 8017bd0:	60fb      	str	r3, [r7, #12]
			data.water_temp_setting = sensor.ds18b20_temp_setting;
 8017bd2:	4b1e      	ldr	r3, [pc, #120]	; (8017c4c <evaluateCommand+0xac>)
 8017bd4:	699b      	ldr	r3, [r3, #24]
 8017bd6:	613b      	str	r3, [r7, #16]
			data.water_temp_deadband = sensor.water_temp_deadband;
 8017bd8:	4b1c      	ldr	r3, [pc, #112]	; (8017c4c <evaluateCommand+0xac>)
 8017bda:	69db      	ldr	r3, [r3, #28]
 8017bdc:	617b      	str	r3, [r7, #20]
			data.water_level_setting = sensor.water_level_setting;
 8017bde:	4b1b      	ldr	r3, [pc, #108]	; (8017c4c <evaluateCommand+0xac>)
 8017be0:	6a1b      	ldr	r3, [r3, #32]
 8017be2:	61bb      	str	r3, [r7, #24]
			data.water_level_deadband = sensor.water_level_deadband;
 8017be4:	4b19      	ldr	r3, [pc, #100]	; (8017c4c <evaluateCommand+0xac>)
 8017be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be8:	61fb      	str	r3, [r7, #28]
			data.water_quality_setting = sensor.water_quality_setting;
 8017bea:	4b18      	ldr	r3, [pc, #96]	; (8017c4c <evaluateCommand+0xac>)
 8017bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017bee:	623b      	str	r3, [r7, #32]
			data.water_quality_deadband = sensor.water_quality_deadband;
 8017bf0:	4b16      	ldr	r3, [pc, #88]	; (8017c4c <evaluateCommand+0xac>)
 8017bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bf4:	627b      	str	r3, [r7, #36]	; 0x24
			s_struct((uint8_t*)&data,36);
 8017bf6:	1d3b      	adds	r3, r7, #4
 8017bf8:	2124      	movs	r1, #36	; 0x24
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7ff fed2 	bl	80179a4 <s_struct>
			break;
 8017c00:	e01d      	b.n	8017c3e <evaluateCommand+0x9e>
			Relay[0] = read8();
 8017c02:	f7ff fe53 	bl	80178ac <read8>
 8017c06:	4603      	mov	r3, r0
 8017c08:	b25a      	sxtb	r2, r3
 8017c0a:	4b11      	ldr	r3, [pc, #68]	; (8017c50 <evaluateCommand+0xb0>)
 8017c0c:	701a      	strb	r2, [r3, #0]
			Relay[1] = read8();
 8017c0e:	f7ff fe4d 	bl	80178ac <read8>
 8017c12:	4603      	mov	r3, r0
 8017c14:	b25a      	sxtb	r2, r3
 8017c16:	4b0e      	ldr	r3, [pc, #56]	; (8017c50 <evaluateCommand+0xb0>)
 8017c18:	705a      	strb	r2, [r3, #1]
			Relay[2] = read8();
 8017c1a:	f7ff fe47 	bl	80178ac <read8>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	b25a      	sxtb	r2, r3
 8017c22:	4b0b      	ldr	r3, [pc, #44]	; (8017c50 <evaluateCommand+0xb0>)
 8017c24:	709a      	strb	r2, [r3, #2]
			Relay[3] = read8();
 8017c26:	f7ff fe41 	bl	80178ac <read8>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	b25a      	sxtb	r2, r3
 8017c2e:	4b08      	ldr	r3, [pc, #32]	; (8017c50 <evaluateCommand+0xb0>)
 8017c30:	70da      	strb	r2, [r3, #3]
			break;
 8017c32:	e004      	b.n	8017c3e <evaluateCommand+0x9e>
			resetToBoot(0);
 8017c34:	2000      	movs	r0, #0
 8017c36:	f7fe fa5f 	bl	80160f8 <resetToBoot>
			break;
 8017c3a:	e000      	b.n	8017c3e <evaluateCommand+0x9e>
			break;
 8017c3c:	bf00      	nop
	}

}
 8017c3e:	bf00      	nop
 8017c40:	3728      	adds	r7, #40	; 0x28
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}
 8017c46:	bf00      	nop
 8017c48:	200000b0 	.word	0x200000b0
 8017c4c:	2000036c 	.word	0x2000036c
 8017c50:	2000ae6c 	.word	0x2000ae6c

08017c54 <SerialSerialize>:

void SerialSerialize(uint8_t port,uint8_t a) {
 8017c54:	b480      	push	{r7}
 8017c56:	b085      	sub	sp, #20
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	460a      	mov	r2, r1
 8017c5e:	71fb      	strb	r3, [r7, #7]
 8017c60:	4613      	mov	r3, r2
 8017c62:	71bb      	strb	r3, [r7, #6]
	uint8_t t = serialHeadTX[port];
 8017c64:	79fb      	ldrb	r3, [r7, #7]
 8017c66:	4a0e      	ldr	r2, [pc, #56]	; (8017ca0 <SerialSerialize+0x4c>)
 8017c68:	5cd3      	ldrb	r3, [r2, r3]
 8017c6a:	73fb      	strb	r3, [r7, #15]
	if (++t >= TX_BUFFER_SIZE) t = 0;
 8017c6c:	7bfb      	ldrb	r3, [r7, #15]
 8017c6e:	3301      	adds	r3, #1
 8017c70:	73fb      	strb	r3, [r7, #15]
 8017c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	da01      	bge.n	8017c7e <SerialSerialize+0x2a>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	73fb      	strb	r3, [r7, #15]
	serialBufferTX[t][port] = a;
 8017c7e:	7bfa      	ldrb	r2, [r7, #15]
 8017c80:	79fb      	ldrb	r3, [r7, #7]
 8017c82:	4908      	ldr	r1, [pc, #32]	; (8017ca4 <SerialSerialize+0x50>)
 8017c84:	440a      	add	r2, r1
 8017c86:	4413      	add	r3, r2
 8017c88:	79ba      	ldrb	r2, [r7, #6]
 8017c8a:	701a      	strb	r2, [r3, #0]
	serialHeadTX[port] = t;
 8017c8c:	79fb      	ldrb	r3, [r7, #7]
 8017c8e:	4904      	ldr	r1, [pc, #16]	; (8017ca0 <SerialSerialize+0x4c>)
 8017c90:	7bfa      	ldrb	r2, [r7, #15]
 8017c92:	54ca      	strb	r2, [r1, r3]
}
 8017c94:	bf00      	nop
 8017c96:	3714      	adds	r7, #20
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9e:	4770      	bx	lr
 8017ca0:	2000ae70 	.word	0x2000ae70
 8017ca4:	2000ae78 	.word	0x2000ae78

08017ca8 <UartSendData>:

void UartSendData(uint8_t port)
{
 8017ca8:	b590      	push	{r4, r7, lr}
 8017caa:	b085      	sub	sp, #20
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	4603      	mov	r3, r0
 8017cb0:	71fb      	strb	r3, [r7, #7]
	uint8_t t = serialTailTX[port];
 8017cb2:	79fb      	ldrb	r3, [r7, #7]
 8017cb4:	4a36      	ldr	r2, [pc, #216]	; (8017d90 <UartSendData+0xe8>)
 8017cb6:	5cd3      	ldrb	r3, [r2, r3]
 8017cb8:	73fb      	strb	r3, [r7, #15]
	switch(port){
 8017cba:	79fb      	ldrb	r3, [r7, #7]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d01b      	beq.n	8017cf8 <UartSendData+0x50>
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	d049      	beq.n	8017d58 <UartSendData+0xb0>
			serialTailTX[port] = t;
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
			serialHead_1 = 0;
			break;
	}
}
 8017cc4:	e05f      	b.n	8017d86 <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 8017cc6:	7bfb      	ldrb	r3, [r7, #15]
 8017cc8:	3301      	adds	r3, #1
 8017cca:	73fb      	strb	r3, [r7, #15]
 8017ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	da01      	bge.n	8017cd8 <UartSendData+0x30>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	73fb      	strb	r3, [r7, #15]
				serialBufTx_0[serialHead_0++] = serialBufferTX[t][port];
 8017cd8:	7bf9      	ldrb	r1, [r7, #15]
 8017cda:	79fa      	ldrb	r2, [r7, #7]
 8017cdc:	4b2d      	ldr	r3, [pc, #180]	; (8017d94 <UartSendData+0xec>)
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	b2db      	uxtb	r3, r3
 8017ce2:	1c58      	adds	r0, r3, #1
 8017ce4:	b2c4      	uxtb	r4, r0
 8017ce6:	482b      	ldr	r0, [pc, #172]	; (8017d94 <UartSendData+0xec>)
 8017ce8:	7004      	strb	r4, [r0, #0]
 8017cea:	4618      	mov	r0, r3
 8017cec:	4b2a      	ldr	r3, [pc, #168]	; (8017d98 <UartSendData+0xf0>)
 8017cee:	440b      	add	r3, r1
 8017cf0:	4413      	add	r3, r2
 8017cf2:	781a      	ldrb	r2, [r3, #0]
 8017cf4:	4b29      	ldr	r3, [pc, #164]	; (8017d9c <UartSendData+0xf4>)
 8017cf6:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 8017cf8:	79fb      	ldrb	r3, [r7, #7]
 8017cfa:	4a29      	ldr	r2, [pc, #164]	; (8017da0 <UartSendData+0xf8>)
 8017cfc:	5cd3      	ldrb	r3, [r2, r3]
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	7bfa      	ldrb	r2, [r7, #15]
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d1df      	bne.n	8017cc6 <UartSendData+0x1e>
			serialTailTX[port] = t;
 8017d06:	79fb      	ldrb	r3, [r7, #7]
 8017d08:	4921      	ldr	r1, [pc, #132]	; (8017d90 <UartSendData+0xe8>)
 8017d0a:	7bfa      	ldrb	r2, [r7, #15]
 8017d0c:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART1, serialBufTx_0, serialHead_0);
 8017d0e:	4b21      	ldr	r3, [pc, #132]	; (8017d94 <UartSendData+0xec>)
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	b2db      	uxtb	r3, r3
 8017d14:	461a      	mov	r2, r3
 8017d16:	4921      	ldr	r1, [pc, #132]	; (8017d9c <UartSendData+0xf4>)
 8017d18:	2000      	movs	r0, #0
 8017d1a:	f000 fa17 	bl	801814c <uartWriteIT>
			serialHead_0 = 0;
 8017d1e:	4b1d      	ldr	r3, [pc, #116]	; (8017d94 <UartSendData+0xec>)
 8017d20:	2200      	movs	r2, #0
 8017d22:	701a      	strb	r2, [r3, #0]
			break;
 8017d24:	e02f      	b.n	8017d86 <UartSendData+0xde>
				if (++t >= TX_BUFFER_SIZE) t = 0;
 8017d26:	7bfb      	ldrb	r3, [r7, #15]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	73fb      	strb	r3, [r7, #15]
 8017d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	da01      	bge.n	8017d38 <UartSendData+0x90>
 8017d34:	2300      	movs	r3, #0
 8017d36:	73fb      	strb	r3, [r7, #15]
				serialBufTx_1[serialHead_1++] = serialBufferTX[t][port];
 8017d38:	7bf9      	ldrb	r1, [r7, #15]
 8017d3a:	79fa      	ldrb	r2, [r7, #7]
 8017d3c:	4b19      	ldr	r3, [pc, #100]	; (8017da4 <UartSendData+0xfc>)
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	1c58      	adds	r0, r3, #1
 8017d44:	b2c4      	uxtb	r4, r0
 8017d46:	4817      	ldr	r0, [pc, #92]	; (8017da4 <UartSendData+0xfc>)
 8017d48:	7004      	strb	r4, [r0, #0]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	4b12      	ldr	r3, [pc, #72]	; (8017d98 <UartSendData+0xf0>)
 8017d4e:	440b      	add	r3, r1
 8017d50:	4413      	add	r3, r2
 8017d52:	781a      	ldrb	r2, [r3, #0]
 8017d54:	4b14      	ldr	r3, [pc, #80]	; (8017da8 <UartSendData+0x100>)
 8017d56:	541a      	strb	r2, [r3, r0]
			while (serialHeadTX[port] != t)
 8017d58:	79fb      	ldrb	r3, [r7, #7]
 8017d5a:	4a11      	ldr	r2, [pc, #68]	; (8017da0 <UartSendData+0xf8>)
 8017d5c:	5cd3      	ldrb	r3, [r2, r3]
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	7bfa      	ldrb	r2, [r7, #15]
 8017d62:	429a      	cmp	r2, r3
 8017d64:	d1df      	bne.n	8017d26 <UartSendData+0x7e>
			serialTailTX[port] = t;
 8017d66:	79fb      	ldrb	r3, [r7, #7]
 8017d68:	4909      	ldr	r1, [pc, #36]	; (8017d90 <UartSendData+0xe8>)
 8017d6a:	7bfa      	ldrb	r2, [r7, #15]
 8017d6c:	54ca      	strb	r2, [r1, r3]
			uartWriteIT(_DEF_UART2, serialBufTx_1, serialHead_1);
 8017d6e:	4b0d      	ldr	r3, [pc, #52]	; (8017da4 <UartSendData+0xfc>)
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	461a      	mov	r2, r3
 8017d76:	490c      	ldr	r1, [pc, #48]	; (8017da8 <UartSendData+0x100>)
 8017d78:	2001      	movs	r0, #1
 8017d7a:	f000 f9e7 	bl	801814c <uartWriteIT>
			serialHead_1 = 0;
 8017d7e:	4b09      	ldr	r3, [pc, #36]	; (8017da4 <UartSendData+0xfc>)
 8017d80:	2200      	movs	r2, #0
 8017d82:	701a      	strb	r2, [r3, #0]
			break;
 8017d84:	bf00      	nop
}
 8017d86:	bf00      	nop
 8017d88:	3714      	adds	r7, #20
 8017d8a:	46bd      	mov	sp, r7
 8017d8c:	bd90      	pop	{r4, r7, pc}
 8017d8e:	bf00      	nop
 8017d90:	2000ae74 	.word	0x2000ae74
 8017d94:	2000aff8 	.word	0x2000aff8
 8017d98:	2000ae78 	.word	0x2000ae78
 8017d9c:	2000aef8 	.word	0x2000aef8
 8017da0:	2000ae70 	.word	0x2000ae70
 8017da4:	2000aff9 	.word	0x2000aff9
 8017da8:	2000af78 	.word	0x2000af78

08017dac <uartInit>:
#endif



bool uartInit(void)
{
 8017dac:	b480      	push	{r7}
 8017dae:	b083      	sub	sp, #12
 8017db0:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8017db2:	2300      	movs	r3, #0
 8017db4:	607b      	str	r3, [r7, #4]
 8017db6:	e007      	b.n	8017dc8 <uartInit+0x1c>
  {
    is_open[i] = false;
 8017db8:	4a08      	ldr	r2, [pc, #32]	; (8017ddc <uartInit+0x30>)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	4413      	add	r3, r2
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	607b      	str	r3, [r7, #4]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	ddf4      	ble.n	8017db8 <uartInit+0xc>
  }


  return true;
 8017dce:	2301      	movs	r3, #1
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	370c      	adds	r7, #12
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dda:	4770      	bx	lr
 8017ddc:	2000b108 	.word	0x2000b108

08017de0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b086      	sub	sp, #24
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	4603      	mov	r3, r0
 8017de8:	6039      	str	r1, [r7, #0]
 8017dea:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8017dec:	2300      	movs	r3, #0
 8017dee:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8017df0:	79fb      	ldrb	r3, [r7, #7]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d002      	beq.n	8017dfc <uartOpen+0x1c>
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d078      	beq.n	8017eec <uartOpen+0x10c>
 8017dfa:	e0ef      	b.n	8017fdc <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8017dfc:	4b7a      	ldr	r3, [pc, #488]	; (8017fe8 <uartOpen+0x208>)
 8017dfe:	4a7b      	ldr	r2, [pc, #492]	; (8017fec <uartOpen+0x20c>)
 8017e00:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 8017e02:	4a79      	ldr	r2, [pc, #484]	; (8017fe8 <uartOpen+0x208>)
 8017e04:	683b      	ldr	r3, [r7, #0]
 8017e06:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8017e08:	4b77      	ldr	r3, [pc, #476]	; (8017fe8 <uartOpen+0x208>)
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8017e0e:	4b76      	ldr	r3, [pc, #472]	; (8017fe8 <uartOpen+0x208>)
 8017e10:	2200      	movs	r2, #0
 8017e12:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 8017e14:	4b74      	ldr	r3, [pc, #464]	; (8017fe8 <uartOpen+0x208>)
 8017e16:	2200      	movs	r2, #0
 8017e18:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8017e1a:	4b73      	ldr	r3, [pc, #460]	; (8017fe8 <uartOpen+0x208>)
 8017e1c:	220c      	movs	r2, #12
 8017e1e:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8017e20:	4b71      	ldr	r3, [pc, #452]	; (8017fe8 <uartOpen+0x208>)
 8017e22:	2200      	movs	r2, #0
 8017e24:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8017e26:	4b70      	ldr	r3, [pc, #448]	; (8017fe8 <uartOpen+0x208>)
 8017e28:	2200      	movs	r2, #0
 8017e2a:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8017e2c:	486e      	ldr	r0, [pc, #440]	; (8017fe8 <uartOpen+0x208>)
 8017e2e:	f00a ffe4 	bl	8022dfa <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8017e32:	79fb      	ldrb	r3, [r7, #7]
 8017e34:	011b      	lsls	r3, r3, #4
 8017e36:	4a6e      	ldr	r2, [pc, #440]	; (8017ff0 <uartOpen+0x210>)
 8017e38:	4413      	add	r3, r2
 8017e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017e3e:	496d      	ldr	r1, [pc, #436]	; (8017ff4 <uartOpen+0x214>)
 8017e40:	4618      	mov	r0, r3
 8017e42:	f7fa fe4c 	bl	8012ade <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8017e46:	2300      	movs	r3, #0
 8017e48:	613b      	str	r3, [r7, #16]
 8017e4a:	4b6b      	ldr	r3, [pc, #428]	; (8017ff8 <uartOpen+0x218>)
 8017e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e4e:	4a6a      	ldr	r2, [pc, #424]	; (8017ff8 <uartOpen+0x218>)
 8017e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017e54:	6313      	str	r3, [r2, #48]	; 0x30
 8017e56:	4b68      	ldr	r3, [pc, #416]	; (8017ff8 <uartOpen+0x218>)
 8017e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017e5e:	613b      	str	r3, [r7, #16]
 8017e60:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8017e62:	2200      	movs	r2, #0
 8017e64:	2104      	movs	r1, #4
 8017e66:	203a      	movs	r0, #58	; 0x3a
 8017e68:	f006 f8df 	bl	801e02a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8017e6c:	203a      	movs	r0, #58	; 0x3a
 8017e6e:	f006 f8f8 	bl	801e062 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8017e72:	2200      	movs	r2, #0
 8017e74:	2104      	movs	r1, #4
 8017e76:	2046      	movs	r0, #70	; 0x46
 8017e78:	f006 f8d7 	bl	801e02a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8017e7c:	2046      	movs	r0, #70	; 0x46
 8017e7e:	f006 f8f0 	bl	801e062 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8017e82:	4859      	ldr	r0, [pc, #356]	; (8017fe8 <uartOpen+0x208>)
 8017e84:	f00a ff6c 	bl	8022d60 <HAL_UART_Init>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d002      	beq.n	8017e94 <uartOpen+0xb4>
        {
          ret = false;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8017e92:	e0a3      	b.n	8017fdc <uartOpen+0x1fc>
          ret = true;
 8017e94:	2301      	movs	r3, #1
 8017e96:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 8017e98:	79fb      	ldrb	r3, [r7, #7]
 8017e9a:	4a58      	ldr	r2, [pc, #352]	; (8017ffc <uartOpen+0x21c>)
 8017e9c:	2101      	movs	r1, #1
 8017e9e:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8017ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017ea4:	4953      	ldr	r1, [pc, #332]	; (8017ff4 <uartOpen+0x214>)
 8017ea6:	4850      	ldr	r0, [pc, #320]	; (8017fe8 <uartOpen+0x208>)
 8017ea8:	f00b f8b2 	bl	8023010 <HAL_UART_Receive_DMA>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d001      	beq.n	8017eb6 <uartOpen+0xd6>
            ret = false;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8017eb6:	79fb      	ldrb	r3, [r7, #7]
 8017eb8:	4a4d      	ldr	r2, [pc, #308]	; (8017ff0 <uartOpen+0x210>)
 8017eba:	011b      	lsls	r3, r3, #4
 8017ebc:	4413      	add	r3, r2
 8017ebe:	3308      	adds	r3, #8
 8017ec0:	6819      	ldr	r1, [r3, #0]
 8017ec2:	4b4f      	ldr	r3, [pc, #316]	; (8018000 <uartOpen+0x220>)
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	685a      	ldr	r2, [r3, #4]
 8017ec8:	79fb      	ldrb	r3, [r7, #7]
 8017eca:	1a8a      	subs	r2, r1, r2
 8017ecc:	4948      	ldr	r1, [pc, #288]	; (8017ff0 <uartOpen+0x210>)
 8017ece:	011b      	lsls	r3, r3, #4
 8017ed0:	440b      	add	r3, r1
 8017ed2:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 8017ed4:	79fa      	ldrb	r2, [r7, #7]
 8017ed6:	79fb      	ldrb	r3, [r7, #7]
 8017ed8:	4945      	ldr	r1, [pc, #276]	; (8017ff0 <uartOpen+0x210>)
 8017eda:	0112      	lsls	r2, r2, #4
 8017edc:	440a      	add	r2, r1
 8017ede:	6812      	ldr	r2, [r2, #0]
 8017ee0:	4943      	ldr	r1, [pc, #268]	; (8017ff0 <uartOpen+0x210>)
 8017ee2:	011b      	lsls	r3, r3, #4
 8017ee4:	440b      	add	r3, r1
 8017ee6:	3304      	adds	r3, #4
 8017ee8:	601a      	str	r2, [r3, #0]
      break;
 8017eea:	e077      	b.n	8017fdc <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8017eec:	4b3e      	ldr	r3, [pc, #248]	; (8017fe8 <uartOpen+0x208>)
 8017eee:	4a3f      	ldr	r2, [pc, #252]	; (8017fec <uartOpen+0x20c>)
 8017ef0:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8017ef2:	4a3d      	ldr	r2, [pc, #244]	; (8017fe8 <uartOpen+0x208>)
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8017ef8:	4b3b      	ldr	r3, [pc, #236]	; (8017fe8 <uartOpen+0x208>)
 8017efa:	2200      	movs	r2, #0
 8017efc:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8017efe:	4b3a      	ldr	r3, [pc, #232]	; (8017fe8 <uartOpen+0x208>)
 8017f00:	2200      	movs	r2, #0
 8017f02:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8017f04:	4b38      	ldr	r3, [pc, #224]	; (8017fe8 <uartOpen+0x208>)
 8017f06:	2200      	movs	r2, #0
 8017f08:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8017f0a:	4b37      	ldr	r3, [pc, #220]	; (8017fe8 <uartOpen+0x208>)
 8017f0c:	220c      	movs	r2, #12
 8017f0e:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017f10:	4b35      	ldr	r3, [pc, #212]	; (8017fe8 <uartOpen+0x208>)
 8017f12:	2200      	movs	r2, #0
 8017f14:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017f16:	4b34      	ldr	r3, [pc, #208]	; (8017fe8 <uartOpen+0x208>)
 8017f18:	2200      	movs	r2, #0
 8017f1a:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8017f1c:	4832      	ldr	r0, [pc, #200]	; (8017fe8 <uartOpen+0x208>)
 8017f1e:	f00a ff6c 	bl	8022dfa <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8017f22:	79fb      	ldrb	r3, [r7, #7]
 8017f24:	011b      	lsls	r3, r3, #4
 8017f26:	4a32      	ldr	r2, [pc, #200]	; (8017ff0 <uartOpen+0x210>)
 8017f28:	4413      	add	r3, r2
 8017f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017f2e:	4931      	ldr	r1, [pc, #196]	; (8017ff4 <uartOpen+0x214>)
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fa fdd4 	bl	8012ade <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8017f36:	2300      	movs	r3, #0
 8017f38:	60fb      	str	r3, [r7, #12]
 8017f3a:	4b2f      	ldr	r3, [pc, #188]	; (8017ff8 <uartOpen+0x218>)
 8017f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f3e:	4a2e      	ldr	r2, [pc, #184]	; (8017ff8 <uartOpen+0x218>)
 8017f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8017f44:	6313      	str	r3, [r2, #48]	; 0x30
 8017f46:	4b2c      	ldr	r3, [pc, #176]	; (8017ff8 <uartOpen+0x218>)
 8017f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017f4e:	60fb      	str	r3, [r7, #12]
 8017f50:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8017f52:	2200      	movs	r2, #0
 8017f54:	2104      	movs	r1, #4
 8017f56:	203a      	movs	r0, #58	; 0x3a
 8017f58:	f006 f867 	bl	801e02a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8017f5c:	203a      	movs	r0, #58	; 0x3a
 8017f5e:	f006 f880 	bl	801e062 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8017f62:	2200      	movs	r2, #0
 8017f64:	2104      	movs	r1, #4
 8017f66:	2046      	movs	r0, #70	; 0x46
 8017f68:	f006 f85f 	bl	801e02a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8017f6c:	2046      	movs	r0, #70	; 0x46
 8017f6e:	f006 f878 	bl	801e062 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8017f72:	481d      	ldr	r0, [pc, #116]	; (8017fe8 <uartOpen+0x208>)
 8017f74:	f00a fef4 	bl	8022d60 <HAL_UART_Init>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d002      	beq.n	8017f84 <uartOpen+0x1a4>
      {
        ret = false;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8017f82:	e02a      	b.n	8017fda <uartOpen+0x1fa>
        ret = true;
 8017f84:	2301      	movs	r3, #1
 8017f86:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8017f88:	79fb      	ldrb	r3, [r7, #7]
 8017f8a:	4a1c      	ldr	r2, [pc, #112]	; (8017ffc <uartOpen+0x21c>)
 8017f8c:	2101      	movs	r1, #1
 8017f8e:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8017f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017f94:	4917      	ldr	r1, [pc, #92]	; (8017ff4 <uartOpen+0x214>)
 8017f96:	4814      	ldr	r0, [pc, #80]	; (8017fe8 <uartOpen+0x208>)
 8017f98:	f00b f83a 	bl	8023010 <HAL_UART_Receive_DMA>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d001      	beq.n	8017fa6 <uartOpen+0x1c6>
          ret = false;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 8017fa6:	79fb      	ldrb	r3, [r7, #7]
 8017fa8:	4a11      	ldr	r2, [pc, #68]	; (8017ff0 <uartOpen+0x210>)
 8017faa:	011b      	lsls	r3, r3, #4
 8017fac:	4413      	add	r3, r2
 8017fae:	3308      	adds	r3, #8
 8017fb0:	6819      	ldr	r1, [r3, #0]
 8017fb2:	4b13      	ldr	r3, [pc, #76]	; (8018000 <uartOpen+0x220>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	685a      	ldr	r2, [r3, #4]
 8017fb8:	79fb      	ldrb	r3, [r7, #7]
 8017fba:	1a8a      	subs	r2, r1, r2
 8017fbc:	490c      	ldr	r1, [pc, #48]	; (8017ff0 <uartOpen+0x210>)
 8017fbe:	011b      	lsls	r3, r3, #4
 8017fc0:	440b      	add	r3, r1
 8017fc2:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8017fc4:	79fa      	ldrb	r2, [r7, #7]
 8017fc6:	79fb      	ldrb	r3, [r7, #7]
 8017fc8:	4909      	ldr	r1, [pc, #36]	; (8017ff0 <uartOpen+0x210>)
 8017fca:	0112      	lsls	r2, r2, #4
 8017fcc:	440a      	add	r2, r1
 8017fce:	6812      	ldr	r2, [r2, #0]
 8017fd0:	4907      	ldr	r1, [pc, #28]	; (8017ff0 <uartOpen+0x210>)
 8017fd2:	011b      	lsls	r3, r3, #4
 8017fd4:	440b      	add	r3, r1
 8017fd6:	3304      	adds	r3, #4
 8017fd8:	601a      	str	r2, [r3, #0]
      break;
 8017fda:	bf00      	nop
  }

  return ret;
 8017fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fde:	4618      	mov	r0, r3
 8017fe0:	3718      	adds	r7, #24
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	bf00      	nop
 8017fe8:	2000b21c 	.word	0x2000b21c
 8017fec:	40011000 	.word	0x40011000
 8017ff0:	2000b10c 	.word	0x2000b10c
 8017ff4:	2000b11c 	.word	0x2000b11c
 8017ff8:	40023800 	.word	0x40023800
 8017ffc:	2000b108 	.word	0x2000b108
 8018000:	2000b2bc 	.word	0x2000b2bc

08018004 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b084      	sub	sp, #16
 8018008:	af00      	add	r7, sp, #0
 801800a:	4603      	mov	r3, r0
 801800c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 801800e:	2300      	movs	r3, #0
 8018010:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8018012:	79fb      	ldrb	r3, [r7, #7]
 8018014:	2b00      	cmp	r3, #0
 8018016:	d002      	beq.n	801801e <uartAvailable+0x1a>
 8018018:	2b01      	cmp	r3, #1
 801801a:	d018      	beq.n	801804e <uartAvailable+0x4a>
 801801c:	e02f      	b.n	801807e <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 801801e:	79fb      	ldrb	r3, [r7, #7]
 8018020:	4a19      	ldr	r2, [pc, #100]	; (8018088 <uartAvailable+0x84>)
 8018022:	011b      	lsls	r3, r3, #4
 8018024:	4413      	add	r3, r2
 8018026:	3308      	adds	r3, #8
 8018028:	6819      	ldr	r1, [r3, #0]
 801802a:	4b18      	ldr	r3, [pc, #96]	; (801808c <uartAvailable+0x88>)
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	685a      	ldr	r2, [r3, #4]
 8018030:	79fb      	ldrb	r3, [r7, #7]
 8018032:	1a8a      	subs	r2, r1, r2
 8018034:	4914      	ldr	r1, [pc, #80]	; (8018088 <uartAvailable+0x84>)
 8018036:	011b      	lsls	r3, r3, #4
 8018038:	440b      	add	r3, r1
 801803a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 801803c:	79fb      	ldrb	r3, [r7, #7]
 801803e:	011b      	lsls	r3, r3, #4
 8018040:	4a11      	ldr	r2, [pc, #68]	; (8018088 <uartAvailable+0x84>)
 8018042:	4413      	add	r3, r2
 8018044:	4618      	mov	r0, r3
 8018046:	f7fa fda2 	bl	8012b8e <qbufferAvailable>
 801804a:	60f8      	str	r0, [r7, #12]
      break;
 801804c:	e017      	b.n	801807e <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 801804e:	79fb      	ldrb	r3, [r7, #7]
 8018050:	4a0d      	ldr	r2, [pc, #52]	; (8018088 <uartAvailable+0x84>)
 8018052:	011b      	lsls	r3, r3, #4
 8018054:	4413      	add	r3, r2
 8018056:	3308      	adds	r3, #8
 8018058:	6819      	ldr	r1, [r3, #0]
 801805a:	4b0c      	ldr	r3, [pc, #48]	; (801808c <uartAvailable+0x88>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	685a      	ldr	r2, [r3, #4]
 8018060:	79fb      	ldrb	r3, [r7, #7]
 8018062:	1a8a      	subs	r2, r1, r2
 8018064:	4908      	ldr	r1, [pc, #32]	; (8018088 <uartAvailable+0x84>)
 8018066:	011b      	lsls	r3, r3, #4
 8018068:	440b      	add	r3, r1
 801806a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 801806c:	79fb      	ldrb	r3, [r7, #7]
 801806e:	011b      	lsls	r3, r3, #4
 8018070:	4a05      	ldr	r2, [pc, #20]	; (8018088 <uartAvailable+0x84>)
 8018072:	4413      	add	r3, r2
 8018074:	4618      	mov	r0, r3
 8018076:	f7fa fd8a 	bl	8012b8e <qbufferAvailable>
 801807a:	60f8      	str	r0, [r7, #12]
      break;
 801807c:	bf00      	nop
  }

  return ret;
 801807e:	68fb      	ldr	r3, [r7, #12]
}
 8018080:	4618      	mov	r0, r3
 8018082:	3710      	adds	r7, #16
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}
 8018088:	2000b10c 	.word	0x2000b10c
 801808c:	2000b2bc 	.word	0x2000b2bc

08018090 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	4603      	mov	r3, r0
 8018098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 801809a:	2300      	movs	r3, #0
 801809c:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 801809e:	79fb      	ldrb	r3, [r7, #7]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d002      	beq.n	80180aa <uartRead+0x1a>
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	d008      	beq.n	80180ba <uartRead+0x2a>
 80180a8:	e00f      	b.n	80180ca <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80180aa:	f107 030f 	add.w	r3, r7, #15
 80180ae:	2201      	movs	r2, #1
 80180b0:	4619      	mov	r1, r3
 80180b2:	4808      	ldr	r0, [pc, #32]	; (80180d4 <uartRead+0x44>)
 80180b4:	f7fa fd2e 	bl	8012b14 <qbufferRead>
      break;
 80180b8:	e007      	b.n	80180ca <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80180ba:	f107 030f 	add.w	r3, r7, #15
 80180be:	2201      	movs	r2, #1
 80180c0:	4619      	mov	r1, r3
 80180c2:	4805      	ldr	r0, [pc, #20]	; (80180d8 <uartRead+0x48>)
 80180c4:	f7fa fd26 	bl	8012b14 <qbufferRead>
      break;
 80180c8:	bf00      	nop
  }

  return ret;
 80180ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80180cc:	4618      	mov	r0, r3
 80180ce:	3710      	adds	r7, #16
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	2000b10c 	.word	0x2000b10c
 80180d8:	2000b11c 	.word	0x2000b11c

080180dc <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b086      	sub	sp, #24
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	4603      	mov	r3, r0
 80180e4:	60b9      	str	r1, [r7, #8]
 80180e6:	607a      	str	r2, [r7, #4]
 80180e8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80180ea:	2300      	movs	r3, #0
 80180ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 80180ee:	7bfb      	ldrb	r3, [r7, #15]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d002      	beq.n	80180fa <uartWrite+0x1e>
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d00f      	beq.n	8018118 <uartWrite+0x3c>
 80180f8:	e020      	b.n	801813c <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	b29a      	uxth	r2, r3
 80180fe:	2364      	movs	r3, #100	; 0x64
 8018100:	68b9      	ldr	r1, [r7, #8]
 8018102:	4811      	ldr	r0, [pc, #68]	; (8018148 <uartWrite+0x6c>)
 8018104:	f00a fea5 	bl	8022e52 <HAL_UART_Transmit>
 8018108:	4603      	mov	r3, r0
 801810a:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 801810c:	7cfb      	ldrb	r3, [r7, #19]
 801810e:	2b00      	cmp	r3, #0
 8018110:	d111      	bne.n	8018136 <uartWrite+0x5a>
        {
          ret = length;
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	617b      	str	r3, [r7, #20]
        }
      break;
 8018116:	e00e      	b.n	8018136 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	b29a      	uxth	r2, r3
 801811c:	2364      	movs	r3, #100	; 0x64
 801811e:	68b9      	ldr	r1, [r7, #8]
 8018120:	4809      	ldr	r0, [pc, #36]	; (8018148 <uartWrite+0x6c>)
 8018122:	f00a fe96 	bl	8022e52 <HAL_UART_Transmit>
 8018126:	4603      	mov	r3, r0
 8018128:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 801812a:	7cfb      	ldrb	r3, [r7, #19]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d104      	bne.n	801813a <uartWrite+0x5e>
      {
        ret = length;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	617b      	str	r3, [r7, #20]
      }
      break;
 8018134:	e001      	b.n	801813a <uartWrite+0x5e>
      break;
 8018136:	bf00      	nop
 8018138:	e000      	b.n	801813c <uartWrite+0x60>
      break;
 801813a:	bf00      	nop
  }

  return ret;
 801813c:	697b      	ldr	r3, [r7, #20]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	2000b21c 	.word	0x2000b21c

0801814c <uartWriteIT>:

uint32_t uartWriteIT(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b086      	sub	sp, #24
 8018150:	af00      	add	r7, sp, #0
 8018152:	4603      	mov	r3, r0
 8018154:	60b9      	str	r1, [r7, #8]
 8018156:	607a      	str	r2, [r7, #4]
 8018158:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 801815a:	2300      	movs	r3, #0
 801815c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 801815e:	7bfb      	ldrb	r3, [r7, #15]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d001      	beq.n	8018168 <uartWriteIT+0x1c>
 8018164:	2b01      	cmp	r3, #1
//      status = HAL_UART_Transmit_IT(&huart2, p_data, length);
//      if (status == HAL_OK)
//      {
//        ret = length;
//      }
      break;
 8018166:	e00e      	b.n	8018186 <uartWriteIT+0x3a>
      status = HAL_UART_Transmit_IT(&huart1, p_data, length);
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	b29b      	uxth	r3, r3
 801816c:	461a      	mov	r2, r3
 801816e:	68b9      	ldr	r1, [r7, #8]
 8018170:	4807      	ldr	r0, [pc, #28]	; (8018190 <uartWriteIT+0x44>)
 8018172:	f00a ff07 	bl	8022f84 <HAL_UART_Transmit_IT>
 8018176:	4603      	mov	r3, r0
 8018178:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 801817a:	7cfb      	ldrb	r3, [r7, #19]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d101      	bne.n	8018184 <uartWriteIT+0x38>
        ret = length;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	617b      	str	r3, [r7, #20]
      break;
 8018184:	bf00      	nop
  }

  return ret;
 8018186:	697b      	ldr	r3, [r7, #20]
}
 8018188:	4618      	mov	r0, r3
 801818a:	3718      	adds	r7, #24
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	2000b21c 	.word	0x2000b21c

08018194 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 801819c:	bf00      	nop
 801819e:	370c      	adds	r7, #12
 80181a0:	46bd      	mov	sp, r7
 80181a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a6:	4770      	bx	lr

080181a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80181a8:	b480      	push	{r7}
 80181aa:	b083      	sub	sp, #12
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80181b0:	bf00      	nop
 80181b2:	370c      	adds	r7, #12
 80181b4:	46bd      	mov	sp, r7
 80181b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ba:	4770      	bx	lr

080181bc <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b08a      	sub	sp, #40	; 0x28
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80181c4:	f107 0314 	add.w	r3, r7, #20
 80181c8:	2200      	movs	r2, #0
 80181ca:	601a      	str	r2, [r3, #0]
 80181cc:	605a      	str	r2, [r3, #4]
 80181ce:	609a      	str	r2, [r3, #8]
 80181d0:	60da      	str	r2, [r3, #12]
 80181d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4a5b      	ldr	r2, [pc, #364]	; (8018348 <HAL_UART_MspInit+0x18c>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	f040 80b0 	bne.w	8018340 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 80181e0:	2300      	movs	r3, #0
 80181e2:	613b      	str	r3, [r7, #16]
 80181e4:	4b59      	ldr	r3, [pc, #356]	; (801834c <HAL_UART_MspInit+0x190>)
 80181e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181e8:	4a58      	ldr	r2, [pc, #352]	; (801834c <HAL_UART_MspInit+0x190>)
 80181ea:	f043 0310 	orr.w	r3, r3, #16
 80181ee:	6453      	str	r3, [r2, #68]	; 0x44
 80181f0:	4b56      	ldr	r3, [pc, #344]	; (801834c <HAL_UART_MspInit+0x190>)
 80181f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181f4:	f003 0310 	and.w	r3, r3, #16
 80181f8:	613b      	str	r3, [r7, #16]
 80181fa:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80181fc:	2300      	movs	r3, #0
 80181fe:	60fb      	str	r3, [r7, #12]
 8018200:	4b52      	ldr	r3, [pc, #328]	; (801834c <HAL_UART_MspInit+0x190>)
 8018202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018204:	4a51      	ldr	r2, [pc, #324]	; (801834c <HAL_UART_MspInit+0x190>)
 8018206:	f043 0301 	orr.w	r3, r3, #1
 801820a:	6313      	str	r3, [r2, #48]	; 0x30
 801820c:	4b4f      	ldr	r3, [pc, #316]	; (801834c <HAL_UART_MspInit+0x190>)
 801820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018210:	f003 0301 	and.w	r3, r3, #1
 8018214:	60fb      	str	r3, [r7, #12]
 8018216:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018218:	2300      	movs	r3, #0
 801821a:	60bb      	str	r3, [r7, #8]
 801821c:	4b4b      	ldr	r3, [pc, #300]	; (801834c <HAL_UART_MspInit+0x190>)
 801821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018220:	4a4a      	ldr	r2, [pc, #296]	; (801834c <HAL_UART_MspInit+0x190>)
 8018222:	f043 0302 	orr.w	r3, r3, #2
 8018226:	6313      	str	r3, [r2, #48]	; 0x30
 8018228:	4b48      	ldr	r3, [pc, #288]	; (801834c <HAL_UART_MspInit+0x190>)
 801822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801822c:	f003 0302 	and.w	r3, r3, #2
 8018230:	60bb      	str	r3, [r7, #8]
 8018232:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8018234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018238:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801823a:	2302      	movs	r3, #2
 801823c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801823e:	2300      	movs	r3, #0
 8018240:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018242:	2303      	movs	r3, #3
 8018244:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018246:	2307      	movs	r3, #7
 8018248:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801824a:	f107 0314 	add.w	r3, r7, #20
 801824e:	4619      	mov	r1, r3
 8018250:	483f      	ldr	r0, [pc, #252]	; (8018350 <HAL_UART_MspInit+0x194>)
 8018252:	f006 fe13 	bl	801ee7c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8018256:	2340      	movs	r3, #64	; 0x40
 8018258:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801825a:	2302      	movs	r3, #2
 801825c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801825e:	2300      	movs	r3, #0
 8018260:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018262:	2303      	movs	r3, #3
 8018264:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018266:	2307      	movs	r3, #7
 8018268:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801826a:	f107 0314 	add.w	r3, r7, #20
 801826e:	4619      	mov	r1, r3
 8018270:	4838      	ldr	r0, [pc, #224]	; (8018354 <HAL_UART_MspInit+0x198>)
 8018272:	f006 fe03 	bl	801ee7c <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 8018276:	4b38      	ldr	r3, [pc, #224]	; (8018358 <HAL_UART_MspInit+0x19c>)
 8018278:	4a38      	ldr	r2, [pc, #224]	; (801835c <HAL_UART_MspInit+0x1a0>)
 801827a:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 801827c:	4b36      	ldr	r3, [pc, #216]	; (8018358 <HAL_UART_MspInit+0x19c>)
 801827e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8018282:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8018284:	4b34      	ldr	r3, [pc, #208]	; (8018358 <HAL_UART_MspInit+0x19c>)
 8018286:	2240      	movs	r2, #64	; 0x40
 8018288:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801828a:	4b33      	ldr	r3, [pc, #204]	; (8018358 <HAL_UART_MspInit+0x19c>)
 801828c:	2200      	movs	r2, #0
 801828e:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8018290:	4b31      	ldr	r3, [pc, #196]	; (8018358 <HAL_UART_MspInit+0x19c>)
 8018292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018296:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8018298:	4b2f      	ldr	r3, [pc, #188]	; (8018358 <HAL_UART_MspInit+0x19c>)
 801829a:	2200      	movs	r2, #0
 801829c:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801829e:	4b2e      	ldr	r3, [pc, #184]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182a0:	2200      	movs	r2, #0
 80182a2:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80182a4:	4b2c      	ldr	r3, [pc, #176]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182a6:	2200      	movs	r2, #0
 80182a8:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80182aa:	4b2b      	ldr	r3, [pc, #172]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182ac:	2200      	movs	r2, #0
 80182ae:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80182b0:	4b29      	ldr	r3, [pc, #164]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182b2:	2200      	movs	r2, #0
 80182b4:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80182b6:	4828      	ldr	r0, [pc, #160]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182b8:	f005 fefc 	bl	801e0b4 <HAL_DMA_Init>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d001      	beq.n	80182c6 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80182c2:	f7fa fa3f 	bl	8012744 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	4a23      	ldr	r2, [pc, #140]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182ca:	631a      	str	r2, [r3, #48]	; 0x30
 80182cc:	4a22      	ldr	r2, [pc, #136]	; (8018358 <HAL_UART_MspInit+0x19c>)
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80182d2:	4b23      	ldr	r3, [pc, #140]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182d4:	4a23      	ldr	r2, [pc, #140]	; (8018364 <HAL_UART_MspInit+0x1a8>)
 80182d6:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80182d8:	4b21      	ldr	r3, [pc, #132]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80182de:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80182e0:	4b1f      	ldr	r3, [pc, #124]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182e2:	2200      	movs	r2, #0
 80182e4:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80182e6:	4b1e      	ldr	r3, [pc, #120]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182e8:	2200      	movs	r2, #0
 80182ea:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80182ec:	4b1c      	ldr	r3, [pc, #112]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80182f2:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80182f4:	4b1a      	ldr	r3, [pc, #104]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182f6:	2200      	movs	r2, #0
 80182f8:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80182fa:	4b19      	ldr	r3, [pc, #100]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 80182fc:	2200      	movs	r2, #0
 80182fe:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8018300:	4b17      	ldr	r3, [pc, #92]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 8018302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018306:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8018308:	4b15      	ldr	r3, [pc, #84]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 801830a:	2200      	movs	r2, #0
 801830c:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801830e:	4b14      	ldr	r3, [pc, #80]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 8018310:	2200      	movs	r2, #0
 8018312:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8018314:	4812      	ldr	r0, [pc, #72]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 8018316:	f005 fecd 	bl	801e0b4 <HAL_DMA_Init>
 801831a:	4603      	mov	r3, r0
 801831c:	2b00      	cmp	r3, #0
 801831e:	d001      	beq.n	8018324 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8018320:	f7fa fa10 	bl	8012744 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	4a0e      	ldr	r2, [pc, #56]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 8018328:	635a      	str	r2, [r3, #52]	; 0x34
 801832a:	4a0d      	ldr	r2, [pc, #52]	; (8018360 <HAL_UART_MspInit+0x1a4>)
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8018330:	2200      	movs	r2, #0
 8018332:	2100      	movs	r1, #0
 8018334:	2025      	movs	r0, #37	; 0x25
 8018336:	f005 fe78 	bl	801e02a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 801833a:	2025      	movs	r0, #37	; 0x25
 801833c:	f005 fe91 	bl	801e062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018340:	bf00      	nop
 8018342:	3728      	adds	r7, #40	; 0x28
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}
 8018348:	40011000 	.word	0x40011000
 801834c:	40023800 	.word	0x40023800
 8018350:	40020000 	.word	0x40020000
 8018354:	40020400 	.word	0x40020400
 8018358:	2000b25c 	.word	0x2000b25c
 801835c:	400264b8 	.word	0x400264b8
 8018360:	2000b2bc 	.word	0x2000b2bc
 8018364:	40026440 	.word	0x40026440

08018368 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b082      	sub	sp, #8
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	4a11      	ldr	r2, [pc, #68]	; (80183bc <HAL_UART_MspDeInit+0x54>)
 8018376:	4293      	cmp	r3, r2
 8018378:	d11b      	bne.n	80183b2 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 801837a:	4b11      	ldr	r3, [pc, #68]	; (80183c0 <HAL_UART_MspDeInit+0x58>)
 801837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801837e:	4a10      	ldr	r2, [pc, #64]	; (80183c0 <HAL_UART_MspDeInit+0x58>)
 8018380:	f023 0310 	bic.w	r3, r3, #16
 8018384:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8018386:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801838a:	480e      	ldr	r0, [pc, #56]	; (80183c4 <HAL_UART_MspDeInit+0x5c>)
 801838c:	f006 fefa 	bl	801f184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8018390:	2140      	movs	r1, #64	; 0x40
 8018392:	480d      	ldr	r0, [pc, #52]	; (80183c8 <HAL_UART_MspDeInit+0x60>)
 8018394:	f006 fef6 	bl	801f184 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801839c:	4618      	mov	r0, r3
 801839e:	f005 ff37 	bl	801e210 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183a6:	4618      	mov	r0, r3
 80183a8:	f005 ff32 	bl	801e210 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80183ac:	2025      	movs	r0, #37	; 0x25
 80183ae:	f005 fe66 	bl	801e07e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80183b2:	bf00      	nop
 80183b4:	3708      	adds	r7, #8
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	40011000 	.word	0x40011000
 80183c0:	40023800 	.word	0x40023800
 80183c4:	40020000 	.word	0x40020000
 80183c8:	40020400 	.word	0x40020400

080183cc <draw_fan_status>:
#include "ui_common.h"
#include "image.h"
#include "lcd.h"


void draw_fan_status(uint16_t x, uint16_t y, const bool blink) {
 80183cc:	b590      	push	{r4, r7, lr}
 80183ce:	b089      	sub	sp, #36	; 0x24
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	4603      	mov	r3, r0
 80183d4:	80fb      	strh	r3, [r7, #6]
 80183d6:	460b      	mov	r3, r1
 80183d8:	80bb      	strh	r3, [r7, #4]
 80183da:	4613      	mov	r3, r2
 80183dc:	70fb      	strb	r3, [r7, #3]
  uint8_t fanSpeed = 50;
 80183de:	2332      	movs	r3, #50	; 0x32
 80183e0:	75fb      	strb	r3, [r7, #23]
  UI_Image image;

  if (fanSpeed >= 127)
 80183e2:	7dfb      	ldrb	r3, [r7, #23]
 80183e4:	2b7e      	cmp	r3, #126	; 0x7e
 80183e6:	d910      	bls.n	801840a <draw_fan_status+0x3e>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 80183e8:	78fb      	ldrb	r3, [r7, #3]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d006      	beq.n	80183fc <draw_fan_status+0x30>
 80183ee:	4a1a      	ldr	r2, [pc, #104]	; (8018458 <draw_fan_status+0x8c>)
 80183f0:	f107 030c 	add.w	r3, r7, #12
 80183f4:	6810      	ldr	r0, [r2, #0]
 80183f6:	6851      	ldr	r1, [r2, #4]
 80183f8:	c303      	stmia	r3!, {r0, r1}
 80183fa:	e020      	b.n	801843e <draw_fan_status+0x72>
 80183fc:	4a17      	ldr	r2, [pc, #92]	; (801845c <draw_fan_status+0x90>)
 80183fe:	f107 030c 	add.w	r3, r7, #12
 8018402:	6810      	ldr	r0, [r2, #0]
 8018404:	6851      	ldr	r1, [r2, #4]
 8018406:	c303      	stmia	r3!, {r0, r1}
 8018408:	e019      	b.n	801843e <draw_fan_status+0x72>
  }
  else if (fanSpeed > 0)
 801840a:	7dfb      	ldrb	r3, [r7, #23]
 801840c:	2b00      	cmp	r3, #0
 801840e:	d010      	beq.n	8018432 <draw_fan_status+0x66>
  {
    image = blink ? Fan1_32x32x4 : Fan0_32x32x4;
 8018410:	78fb      	ldrb	r3, [r7, #3]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d006      	beq.n	8018424 <draw_fan_status+0x58>
 8018416:	4a10      	ldr	r2, [pc, #64]	; (8018458 <draw_fan_status+0x8c>)
 8018418:	f107 030c 	add.w	r3, r7, #12
 801841c:	6810      	ldr	r0, [r2, #0]
 801841e:	6851      	ldr	r1, [r2, #4]
 8018420:	c303      	stmia	r3!, {r0, r1}
 8018422:	e00c      	b.n	801843e <draw_fan_status+0x72>
 8018424:	4a0d      	ldr	r2, [pc, #52]	; (801845c <draw_fan_status+0x90>)
 8018426:	f107 030c 	add.w	r3, r7, #12
 801842a:	6810      	ldr	r0, [r2, #0]
 801842c:	6851      	ldr	r1, [r2, #4]
 801842e:	c303      	stmia	r3!, {r0, r1}
 8018430:	e005      	b.n	801843e <draw_fan_status+0x72>
  }
  else
  {
    image = Fan0_32x32x4;
 8018432:	4a0a      	ldr	r2, [pc, #40]	; (801845c <draw_fan_status+0x90>)
 8018434:	f107 030c 	add.w	r3, r7, #12
 8018438:	6810      	ldr	r0, [r2, #0]
 801843a:	6851      	ldr	r1, [r2, #4]
 801843c:	c303      	stmia	r3!, {r0, r1}
  }
  lcdDrawBufferImage(x, y, image.width, image.height, image.data);
 801843e:	8a3a      	ldrh	r2, [r7, #16]
 8018440:	8a7c      	ldrh	r4, [r7, #18]
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	88b9      	ldrh	r1, [r7, #4]
 8018446:	88f8      	ldrh	r0, [r7, #6]
 8018448:	9300      	str	r3, [sp, #0]
 801844a:	4623      	mov	r3, r4
 801844c:	f7fc ff84 	bl	8015358 <lcdDrawBufferImage>
}
 8018450:	bf00      	nop
 8018452:	371c      	adds	r7, #28
 8018454:	46bd      	mov	sp, r7
 8018456:	bd90      	pop	{r4, r7, pc}
 8018458:	080332c8 	.word	0x080332c8
 801845c:	080332c0 	.word	0x080332c0

08018460 <get_blink>:

bool get_blink() {
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
  static uint8_t blink = 0;
  static millis_t next_blink_ms = 0;
  millis_t ms = millis();
 8018466:	f7fa f8e4 	bl	8012632 <millis>
 801846a:	6078      	str	r0, [r7, #4]
  if (ELAPSED(ms, next_blink_ms)) {
 801846c:	4b0d      	ldr	r3, [pc, #52]	; (80184a4 <get_blink+0x44>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	687a      	ldr	r2, [r7, #4]
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	2b00      	cmp	r3, #0
 8018476:	db0a      	blt.n	801848e <get_blink+0x2e>
    blink ^= 0xFF;
 8018478:	4b0b      	ldr	r3, [pc, #44]	; (80184a8 <get_blink+0x48>)
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	43db      	mvns	r3, r3
 801847e:	b2da      	uxtb	r2, r3
 8018480:	4b09      	ldr	r3, [pc, #36]	; (80184a8 <get_blink+0x48>)
 8018482:	701a      	strb	r2, [r3, #0]
    next_blink_ms = ms + 1000 - (100) / 2;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 801848a:	4a06      	ldr	r2, [pc, #24]	; (80184a4 <get_blink+0x44>)
 801848c:	6013      	str	r3, [r2, #0]
  }
  return blink != 0;
 801848e:	4b06      	ldr	r3, [pc, #24]	; (80184a8 <get_blink+0x48>)
 8018490:	781b      	ldrb	r3, [r3, #0]
 8018492:	2b00      	cmp	r3, #0
 8018494:	bf14      	ite	ne
 8018496:	2301      	movne	r3, #1
 8018498:	2300      	moveq	r3, #0
 801849a:	b2db      	uxtb	r3, r3
}
 801849c:	4618      	mov	r0, r3
 801849e:	3708      	adds	r7, #8
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bd80      	pop	{r7, pc}
 80184a4:	2000b31c 	.word	0x2000b31c
 80184a8:	2000b320 	.word	0x2000b320

080184ac <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	4603      	mov	r3, r0
 80184b4:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 80184b6:	4b1d      	ldr	r3, [pc, #116]	; (801852c <SD_CheckStatus+0x80>)
 80184b8:	2200      	movs	r2, #0
 80184ba:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 80184bc:	f7fd ff00 	bl	80162c0 <sdIsInit>
 80184c0:	4603      	mov	r3, r0
 80184c2:	f083 0301 	eor.w	r3, r3, #1
 80184c6:	b2db      	uxtb	r3, r3
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d007      	beq.n	80184dc <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 80184cc:	4b17      	ldr	r3, [pc, #92]	; (801852c <SD_CheckStatus+0x80>)
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	b2db      	uxtb	r3, r3
 80184d2:	f043 0301 	orr.w	r3, r3, #1
 80184d6:	b2da      	uxtb	r2, r3
 80184d8:	4b14      	ldr	r3, [pc, #80]	; (801852c <SD_CheckStatus+0x80>)
 80184da:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 80184dc:	f7fd fefc 	bl	80162d8 <sdIsDetected>
 80184e0:	4603      	mov	r3, r0
 80184e2:	f083 0301 	eor.w	r3, r3, #1
 80184e6:	b2db      	uxtb	r3, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d007      	beq.n	80184fc <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 80184ec:	4b0f      	ldr	r3, [pc, #60]	; (801852c <SD_CheckStatus+0x80>)
 80184ee:	781b      	ldrb	r3, [r3, #0]
 80184f0:	b2db      	uxtb	r3, r3
 80184f2:	f043 0302 	orr.w	r3, r3, #2
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	4b0c      	ldr	r3, [pc, #48]	; (801852c <SD_CheckStatus+0x80>)
 80184fa:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 80184fc:	200a      	movs	r0, #10
 80184fe:	f7fd ff6f 	bl	80163e0 <sdIsReady>
 8018502:	4603      	mov	r3, r0
 8018504:	f083 0301 	eor.w	r3, r3, #1
 8018508:	b2db      	uxtb	r3, r3
 801850a:	2b00      	cmp	r3, #0
 801850c:	d007      	beq.n	801851e <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 801850e:	4b07      	ldr	r3, [pc, #28]	; (801852c <SD_CheckStatus+0x80>)
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	b2db      	uxtb	r3, r3
 8018514:	f043 0301 	orr.w	r3, r3, #1
 8018518:	b2da      	uxtb	r2, r3
 801851a:	4b04      	ldr	r3, [pc, #16]	; (801852c <SD_CheckStatus+0x80>)
 801851c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801851e:	4b03      	ldr	r3, [pc, #12]	; (801852c <SD_CheckStatus+0x80>)
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	b2db      	uxtb	r3, r3
}
 8018524:	4618      	mov	r0, r3
 8018526:	3708      	adds	r7, #8
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}
 801852c:	200000b4 	.word	0x200000b4

08018530 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	4603      	mov	r3, r0
 8018538:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 801853a:	4b0d      	ldr	r3, [pc, #52]	; (8018570 <SD_initialize+0x40>)
 801853c:	2200      	movs	r2, #0
 801853e:	701a      	strb	r2, [r3, #0]

  if (sdIsInit() != true)
 8018540:	f7fd febe 	bl	80162c0 <sdIsInit>
 8018544:	4603      	mov	r3, r0
 8018546:	f083 0301 	eor.w	r3, r3, #1
 801854a:	b2db      	uxtb	r3, r3
 801854c:	2b00      	cmp	r3, #0
 801854e:	d007      	beq.n	8018560 <SD_initialize+0x30>
  {
    Stat |= STA_NOINIT;
 8018550:	4b07      	ldr	r3, [pc, #28]	; (8018570 <SD_initialize+0x40>)
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	b2db      	uxtb	r3, r3
 8018556:	f043 0301 	orr.w	r3, r3, #1
 801855a:	b2da      	uxtb	r2, r3
 801855c:	4b04      	ldr	r3, [pc, #16]	; (8018570 <SD_initialize+0x40>)
 801855e:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8018560:	4b03      	ldr	r3, [pc, #12]	; (8018570 <SD_initialize+0x40>)
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	b2db      	uxtb	r3, r3
}
 8018566:	4618      	mov	r0, r3
 8018568:	3708      	adds	r7, #8
 801856a:	46bd      	mov	sp, r7
 801856c:	bd80      	pop	{r7, pc}
 801856e:	bf00      	nop
 8018570:	200000b4 	.word	0x200000b4

08018574 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b082      	sub	sp, #8
 8018578:	af00      	add	r7, sp, #0
 801857a:	4603      	mov	r3, r0
 801857c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801857e:	79fb      	ldrb	r3, [r7, #7]
 8018580:	4618      	mov	r0, r3
 8018582:	f7ff ff93 	bl	80184ac <SD_CheckStatus>
 8018586:	4603      	mov	r3, r0
}
 8018588:	4618      	mov	r0, r3
 801858a:	3708      	adds	r7, #8
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b086      	sub	sp, #24
 8018594:	af00      	add	r7, sp, #0
 8018596:	60b9      	str	r1, [r7, #8]
 8018598:	607a      	str	r2, [r7, #4]
 801859a:	603b      	str	r3, [r7, #0]
 801859c:	4603      	mov	r3, r0
 801859e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80185a0:	2301      	movs	r3, #1
 80185a2:	75fb      	strb	r3, [r7, #23]


  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 80185a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80185a8:	683a      	ldr	r2, [r7, #0]
 80185aa:	68b9      	ldr	r1, [r7, #8]
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f7fd ff37 	bl	8016420 <sdReadBlocks>
 80185b2:	4603      	mov	r3, r0
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d001      	beq.n	80185bc <SD_read+0x2c>
  {
    res = RES_OK;
 80185b8:	2300      	movs	r3, #0
 80185ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80185bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80185be:	4618      	mov	r0, r3
 80185c0:	3718      	adds	r7, #24
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}

080185c6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80185c6:	b580      	push	{r7, lr}
 80185c8:	b086      	sub	sp, #24
 80185ca:	af00      	add	r7, sp, #0
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	607a      	str	r2, [r7, #4]
 80185d0:	603b      	str	r3, [r7, #0]
 80185d2:	4603      	mov	r3, r0
 80185d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80185d6:	2301      	movs	r3, #1
 80185d8:	75fb      	strb	r3, [r7, #23]

  if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 80185da:	f242 7310 	movw	r3, #10000	; 0x2710
 80185de:	683a      	ldr	r2, [r7, #0]
 80185e0:	68b9      	ldr	r1, [r7, #8]
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f7fd ff66 	bl	80164b4 <sdWriteBlocks>
 80185e8:	4603      	mov	r3, r0
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d001      	beq.n	80185f2 <SD_write+0x2c>
  {
    res = RES_OK;
 80185ee:	2300      	movs	r3, #0
 80185f0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80185f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3718      	adds	r7, #24
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}

080185fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b08c      	sub	sp, #48	; 0x30
 8018600:	af00      	add	r7, sp, #0
 8018602:	4603      	mov	r3, r0
 8018604:	603a      	str	r2, [r7, #0]
 8018606:	71fb      	strb	r3, [r7, #7]
 8018608:	460b      	mov	r3, r1
 801860a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801860c:	2301      	movs	r3, #1
 801860e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8018612:	4b25      	ldr	r3, [pc, #148]	; (80186a8 <SD_ioctl+0xac>)
 8018614:	781b      	ldrb	r3, [r3, #0]
 8018616:	b2db      	uxtb	r3, r3
 8018618:	f003 0301 	and.w	r3, r3, #1
 801861c:	2b00      	cmp	r3, #0
 801861e:	d001      	beq.n	8018624 <SD_ioctl+0x28>
 8018620:	2303      	movs	r3, #3
 8018622:	e03c      	b.n	801869e <SD_ioctl+0xa2>

  switch (cmd)
 8018624:	79bb      	ldrb	r3, [r7, #6]
 8018626:	2b03      	cmp	r3, #3
 8018628:	d834      	bhi.n	8018694 <SD_ioctl+0x98>
 801862a:	a201      	add	r2, pc, #4	; (adr r2, 8018630 <SD_ioctl+0x34>)
 801862c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018630:	08018641 	.word	0x08018641
 8018634:	08018649 	.word	0x08018649
 8018638:	08018661 	.word	0x08018661
 801863c:	0801867b 	.word	0x0801867b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8018640:	2300      	movs	r3, #0
 8018642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018646:	e028      	b.n	801869a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    sdGetInfo(&sd_info);
 8018648:	f107 0308 	add.w	r3, r7, #8
 801864c:	4618      	mov	r0, r3
 801864e:	f7fd fe59 	bl	8016304 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 8018652:	6a3a      	ldr	r2, [r7, #32]
 8018654:	683b      	ldr	r3, [r7, #0]
 8018656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8018658:	2300      	movs	r3, #0
 801865a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801865e:	e01c      	b.n	801869a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    sdGetInfo(&sd_info);
 8018660:	f107 0308 	add.w	r3, r7, #8
 8018664:	4618      	mov	r0, r3
 8018666:	f7fd fe4d 	bl	8016304 <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 801866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801866c:	b29a      	uxth	r2, r3
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8018672:	2300      	movs	r3, #0
 8018674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018678:	e00f      	b.n	801869a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    sdGetInfo(&sd_info);
 801867a:	f107 0308 	add.w	r3, r7, #8
 801867e:	4618      	mov	r0, r3
 8018680:	f7fd fe40 	bl	8016304 <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8018684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018686:	0a5a      	lsrs	r2, r3, #9
 8018688:	683b      	ldr	r3, [r7, #0]
 801868a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801868c:	2300      	movs	r3, #0
 801868e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018692:	e002      	b.n	801869a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8018694:	2304      	movs	r3, #4
 8018696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801869a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3730      	adds	r7, #48	; 0x30
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	200000b4 	.word	0x200000b4

080186ac <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 80186b6:	683b      	ldr	r3, [r7, #0]
 80186b8:	3306      	adds	r3, #6
 80186ba:	2220      	movs	r2, #32
 80186bc:	2100      	movs	r1, #0
 80186be:	4618      	mov	r0, r3
 80186c0:	f00c face 	bl	8024c60 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	2200      	movs	r2, #0
 80186c8:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d003      	beq.n	80186da <hanFontLoad+0x2e>
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	2b0a      	cmp	r3, #10
 80186d8:	d107      	bne.n	80186ea <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	2204      	movs	r2, #4
 80186de:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	2201      	movs	r2, #1
 80186e4:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 80186e6:	2304      	movs	r3, #4
 80186e8:	e03b      	b.n	8018762 <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	781b      	ldrb	r3, [r3, #0]
 80186ee:	b25b      	sxtb	r3, r3
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	da2b      	bge.n	801874c <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	781b      	ldrb	r3, [r3, #0]
 80186f8:	041a      	lsls	r2, r3, #16
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	3301      	adds	r3, #1
 80186fe:	781b      	ldrb	r3, [r3, #0]
 8018700:	021b      	lsls	r3, r3, #8
 8018702:	4313      	orrs	r3, r2
 8018704:	687a      	ldr	r2, [r7, #4]
 8018706:	3202      	adds	r2, #2
 8018708:	7812      	ldrb	r2, [r2, #0]
 801870a:	4313      	orrs	r3, r2
 801870c:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	4a16      	ldr	r2, [pc, #88]	; (801876c <hanFontLoad+0xc0>)
 8018712:	4293      	cmp	r3, r2
 8018714:	d30e      	bcc.n	8018734 <hanFontLoad+0x88>
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	4a15      	ldr	r2, [pc, #84]	; (8018770 <hanFontLoad+0xc4>)
 801871a:	4293      	cmp	r3, r2
 801871c:	d80a      	bhi.n	8018734 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	2201      	movs	r2, #1
 8018722:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8018724:	683b      	ldr	r3, [r7, #0]
 8018726:	2203      	movs	r2, #3
 8018728:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 801872a:	6839      	ldr	r1, [r7, #0]
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f000 f91f 	bl	8018970 <hanUniFontLoad>
 8018732:	e009      	b.n	8018748 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	2201      	movs	r2, #1
 8018738:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	2202      	movs	r2, #2
 801873e:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8018740:	6839      	ldr	r1, [r7, #0]
 8018742:	6878      	ldr	r0, [r7, #4]
 8018744:	f000 f816 	bl	8018774 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8018748:	2301      	movs	r3, #1
 801874a:	e00a      	b.n	8018762 <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 801874c:	683b      	ldr	r3, [r7, #0]
 801874e:	2202      	movs	r2, #2
 8018750:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	2201      	movs	r2, #1
 8018756:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8018758:	6839      	ldr	r1, [r7, #0]
 801875a:	6878      	ldr	r0, [r7, #4]
 801875c:	f000 fa30 	bl	8018bc0 <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8018760:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8018762:	4618      	mov	r0, r3
 8018764:	3710      	adds	r7, #16
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	00eab080 	.word	0x00eab080
 8018770:	00ed9fb0 	.word	0x00ed9fb0

08018774 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
 801877c:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	781b      	ldrb	r3, [r3, #0]
 8018782:	021b      	lsls	r3, r3, #8
 8018784:	b21a      	sxth	r2, r3
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	3301      	adds	r3, #1
 801878a:	781b      	ldrb	r3, [r3, #0]
 801878c:	b21b      	sxth	r3, r3
 801878e:	4313      	orrs	r3, r2
 8018790:	b21b      	sxth	r3, r3
 8018792:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8018794:	89bb      	ldrh	r3, [r7, #12]
 8018796:	4618      	mov	r0, r3
 8018798:	f000 fa3c 	bl	8018c14 <hanCnvCodeWan2Johab>
 801879c:	4603      	mov	r3, r0
 801879e:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 80187a0:	89bb      	ldrh	r3, [r7, #12]
 80187a2:	0a9b      	lsrs	r3, r3, #10
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	f003 031f 	and.w	r3, r3, #31
 80187aa:	b29a      	uxth	r2, r3
 80187ac:	4b63      	ldr	r3, [pc, #396]	; (801893c <hanWanFontLoad+0x1c8>)
 80187ae:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 80187b0:	89bb      	ldrh	r3, [r7, #12]
 80187b2:	095b      	lsrs	r3, r3, #5
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	f003 031f 	and.w	r3, r3, #31
 80187ba:	b29a      	uxth	r2, r3
 80187bc:	4b60      	ldr	r3, [pc, #384]	; (8018940 <hanWanFontLoad+0x1cc>)
 80187be:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 80187c0:	89bb      	ldrh	r3, [r7, #12]
 80187c2:	f003 031f 	and.w	r3, r3, #31
 80187c6:	b29a      	uxth	r2, r3
 80187c8:	4b5e      	ldr	r3, [pc, #376]	; (8018944 <hanWanFontLoad+0x1d0>)
 80187ca:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 80187cc:	4b5b      	ldr	r3, [pc, #364]	; (801893c <hanWanFontLoad+0x1c8>)
 80187ce:	881b      	ldrh	r3, [r3, #0]
 80187d0:	461a      	mov	r2, r3
 80187d2:	4b5d      	ldr	r3, [pc, #372]	; (8018948 <hanWanFontLoad+0x1d4>)
 80187d4:	5c9b      	ldrb	r3, [r3, r2]
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	4b58      	ldr	r3, [pc, #352]	; (801893c <hanWanFontLoad+0x1c8>)
 80187da:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 80187dc:	4b58      	ldr	r3, [pc, #352]	; (8018940 <hanWanFontLoad+0x1cc>)
 80187de:	881b      	ldrh	r3, [r3, #0]
 80187e0:	461a      	mov	r2, r3
 80187e2:	4b5a      	ldr	r3, [pc, #360]	; (801894c <hanWanFontLoad+0x1d8>)
 80187e4:	5c9b      	ldrb	r3, [r3, r2]
 80187e6:	b29a      	uxth	r2, r3
 80187e8:	4b55      	ldr	r3, [pc, #340]	; (8018940 <hanWanFontLoad+0x1cc>)
 80187ea:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 80187ec:	4b55      	ldr	r3, [pc, #340]	; (8018944 <hanWanFontLoad+0x1d0>)
 80187ee:	881b      	ldrh	r3, [r3, #0]
 80187f0:	461a      	mov	r2, r3
 80187f2:	4b57      	ldr	r3, [pc, #348]	; (8018950 <hanWanFontLoad+0x1dc>)
 80187f4:	5c9b      	ldrb	r3, [r3, r2]
 80187f6:	b29a      	uxth	r2, r3
 80187f8:	4b52      	ldr	r3, [pc, #328]	; (8018944 <hanWanFontLoad+0x1d0>)
 80187fa:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80187fc:	4b51      	ldr	r3, [pc, #324]	; (8018944 <hanWanFontLoad+0x1d0>)
 80187fe:	881b      	ldrh	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d006      	beq.n	8018812 <hanWanFontLoad+0x9e>
 8018804:	4b4e      	ldr	r3, [pc, #312]	; (8018940 <hanWanFontLoad+0x1cc>)
 8018806:	881b      	ldrh	r3, [r3, #0]
 8018808:	461a      	mov	r2, r3
 801880a:	4b52      	ldr	r3, [pc, #328]	; (8018954 <hanWanFontLoad+0x1e0>)
 801880c:	5c9b      	ldrb	r3, [r3, r2]
 801880e:	b29b      	uxth	r3, r3
 8018810:	e005      	b.n	801881e <hanWanFontLoad+0xaa>
 8018812:	4b4b      	ldr	r3, [pc, #300]	; (8018940 <hanWanFontLoad+0x1cc>)
 8018814:	881b      	ldrh	r3, [r3, #0]
 8018816:	461a      	mov	r2, r3
 8018818:	4b4f      	ldr	r3, [pc, #316]	; (8018958 <hanWanFontLoad+0x1e4>)
 801881a:	5c9b      	ldrb	r3, [r3, r2]
 801881c:	b29b      	uxth	r3, r3
 801881e:	4a4f      	ldr	r2, [pc, #316]	; (801895c <hanWanFontLoad+0x1e8>)
 8018820:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8018822:	4b46      	ldr	r3, [pc, #280]	; (801893c <hanWanFontLoad+0x1c8>)
 8018824:	881b      	ldrh	r3, [r3, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d009      	beq.n	801883e <hanWanFontLoad+0xca>
 801882a:	4b44      	ldr	r3, [pc, #272]	; (801893c <hanWanFontLoad+0x1c8>)
 801882c:	881b      	ldrh	r3, [r3, #0]
 801882e:	2b01      	cmp	r3, #1
 8018830:	d005      	beq.n	801883e <hanWanFontLoad+0xca>
 8018832:	4b42      	ldr	r3, [pc, #264]	; (801893c <hanWanFontLoad+0x1c8>)
 8018834:	881b      	ldrh	r3, [r3, #0]
 8018836:	2b10      	cmp	r3, #16
 8018838:	d001      	beq.n	801883e <hanWanFontLoad+0xca>
 801883a:	2301      	movs	r3, #1
 801883c:	e000      	b.n	8018840 <hanWanFontLoad+0xcc>
 801883e:	2300      	movs	r3, #0
 8018840:	b29b      	uxth	r3, r3
 8018842:	4a40      	ldr	r2, [pc, #256]	; (8018944 <hanWanFontLoad+0x1d0>)
 8018844:	8812      	ldrh	r2, [r2, #0]
 8018846:	2a00      	cmp	r2, #0
 8018848:	d001      	beq.n	801884e <hanWanFontLoad+0xda>
 801884a:	2202      	movs	r2, #2
 801884c:	e000      	b.n	8018850 <hanWanFontLoad+0xdc>
 801884e:	2200      	movs	r2, #0
 8018850:	4413      	add	r3, r2
 8018852:	b29a      	uxth	r2, r3
 8018854:	4b42      	ldr	r3, [pc, #264]	; (8018960 <hanWanFontLoad+0x1ec>)
 8018856:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8018858:	4b39      	ldr	r3, [pc, #228]	; (8018940 <hanWanFontLoad+0x1cc>)
 801885a:	881b      	ldrh	r3, [r3, #0]
 801885c:	461a      	mov	r2, r3
 801885e:	4b41      	ldr	r3, [pc, #260]	; (8018964 <hanWanFontLoad+0x1f0>)
 8018860:	5c9b      	ldrb	r3, [r3, r2]
 8018862:	b29a      	uxth	r2, r3
 8018864:	4b40      	ldr	r3, [pc, #256]	; (8018968 <hanWanFontLoad+0x1f4>)
 8018866:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8018868:	2300      	movs	r3, #0
 801886a:	81fb      	strh	r3, [r7, #14]
 801886c:	e035      	b.n	80188da <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 801886e:	4b3b      	ldr	r3, [pc, #236]	; (801895c <hanWanFontLoad+0x1e8>)
 8018870:	881b      	ldrh	r3, [r3, #0]
 8018872:	461a      	mov	r2, r3
 8018874:	4613      	mov	r3, r2
 8018876:	009b      	lsls	r3, r3, #2
 8018878:	4413      	add	r3, r2
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	461a      	mov	r2, r3
 801887e:	4b2f      	ldr	r3, [pc, #188]	; (801893c <hanWanFontLoad+0x1c8>)
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	441a      	add	r2, r3
 8018884:	89fb      	ldrh	r3, [r7, #14]
 8018886:	4939      	ldr	r1, [pc, #228]	; (801896c <hanWanFontLoad+0x1f8>)
 8018888:	0152      	lsls	r2, r2, #5
 801888a:	4413      	add	r3, r2
 801888c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8018890:	89fb      	ldrh	r3, [r7, #14]
 8018892:	b2d1      	uxtb	r1, r2
 8018894:	683a      	ldr	r2, [r7, #0]
 8018896:	4413      	add	r3, r2
 8018898:	460a      	mov	r2, r1
 801889a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 801889c:	89fb      	ldrh	r3, [r7, #14]
 801889e:	683a      	ldr	r2, [r7, #0]
 80188a0:	4413      	add	r3, r2
 80188a2:	7999      	ldrb	r1, [r3, #6]
 80188a4:	4b2e      	ldr	r3, [pc, #184]	; (8018960 <hanWanFontLoad+0x1ec>)
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	461a      	mov	r2, r3
 80188aa:	2316      	movs	r3, #22
 80188ac:	fb02 f303 	mul.w	r3, r2, r3
 80188b0:	33a0      	adds	r3, #160	; 0xa0
 80188b2:	4a23      	ldr	r2, [pc, #140]	; (8018940 <hanWanFontLoad+0x1cc>)
 80188b4:	8812      	ldrh	r2, [r2, #0]
 80188b6:	441a      	add	r2, r3
 80188b8:	89fb      	ldrh	r3, [r7, #14]
 80188ba:	482c      	ldr	r0, [pc, #176]	; (801896c <hanWanFontLoad+0x1f8>)
 80188bc:	0152      	lsls	r2, r2, #5
 80188be:	4413      	add	r3, r2
 80188c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80188c4:	b2da      	uxtb	r2, r3
 80188c6:	89fb      	ldrh	r3, [r7, #14]
 80188c8:	430a      	orrs	r2, r1
 80188ca:	b2d1      	uxtb	r1, r2
 80188cc:	683a      	ldr	r2, [r7, #0]
 80188ce:	4413      	add	r3, r2
 80188d0:	460a      	mov	r2, r1
 80188d2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 80188d4:	89fb      	ldrh	r3, [r7, #14]
 80188d6:	3301      	adds	r3, #1
 80188d8:	81fb      	strh	r3, [r7, #14]
 80188da:	89fb      	ldrh	r3, [r7, #14]
 80188dc:	2b1f      	cmp	r3, #31
 80188de:	d9c6      	bls.n	801886e <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 80188e0:	4b18      	ldr	r3, [pc, #96]	; (8018944 <hanWanFontLoad+0x1d0>)
 80188e2:	881b      	ldrh	r3, [r3, #0]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d025      	beq.n	8018934 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 80188e8:	2300      	movs	r3, #0
 80188ea:	81fb      	strh	r3, [r7, #14]
 80188ec:	e01f      	b.n	801892e <hanWanFontLoad+0x1ba>
 80188ee:	89fb      	ldrh	r3, [r7, #14]
 80188f0:	683a      	ldr	r2, [r7, #0]
 80188f2:	4413      	add	r3, r2
 80188f4:	7999      	ldrb	r1, [r3, #6]
 80188f6:	4b1c      	ldr	r3, [pc, #112]	; (8018968 <hanWanFontLoad+0x1f4>)
 80188f8:	881b      	ldrh	r3, [r3, #0]
 80188fa:	461a      	mov	r2, r3
 80188fc:	4613      	mov	r3, r2
 80188fe:	00db      	lsls	r3, r3, #3
 8018900:	1a9b      	subs	r3, r3, r2
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	33f8      	adds	r3, #248	; 0xf8
 8018906:	4a0f      	ldr	r2, [pc, #60]	; (8018944 <hanWanFontLoad+0x1d0>)
 8018908:	8812      	ldrh	r2, [r2, #0]
 801890a:	441a      	add	r2, r3
 801890c:	89fb      	ldrh	r3, [r7, #14]
 801890e:	4817      	ldr	r0, [pc, #92]	; (801896c <hanWanFontLoad+0x1f8>)
 8018910:	0152      	lsls	r2, r2, #5
 8018912:	4413      	add	r3, r2
 8018914:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018918:	b2da      	uxtb	r2, r3
 801891a:	89fb      	ldrh	r3, [r7, #14]
 801891c:	430a      	orrs	r2, r1
 801891e:	b2d1      	uxtb	r1, r2
 8018920:	683a      	ldr	r2, [r7, #0]
 8018922:	4413      	add	r3, r2
 8018924:	460a      	mov	r2, r1
 8018926:	719a      	strb	r2, [r3, #6]
 8018928:	89fb      	ldrh	r3, [r7, #14]
 801892a:	3301      	adds	r3, #1
 801892c:	81fb      	strh	r3, [r7, #14]
 801892e:	89fb      	ldrh	r3, [r7, #14]
 8018930:	2b1f      	cmp	r3, #31
 8018932:	d9dc      	bls.n	80188ee <hanWanFontLoad+0x17a>
  }
}
 8018934:	bf00      	nop
 8018936:	3710      	adds	r7, #16
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}
 801893c:	2000b322 	.word	0x2000b322
 8018940:	2000b324 	.word	0x2000b324
 8018944:	2000b326 	.word	0x2000b326
 8018948:	0802b2ec 	.word	0x0802b2ec
 801894c:	0802b30c 	.word	0x0802b30c
 8018950:	0802b32c 	.word	0x0802b32c
 8018954:	0802b3c4 	.word	0x0802b3c4
 8018958:	0802b3ac 	.word	0x0802b3ac
 801895c:	2000b328 	.word	0x2000b328
 8018960:	2000b32a 	.word	0x2000b32a
 8018964:	0802b3dc 	.word	0x0802b3dc
 8018968:	2000b32c 	.word	0x2000b32c
 801896c:	0802d8c0 	.word	0x0802d8c0

08018970 <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8018970:	b480      	push	{r7}
 8018972:	b085      	sub	sp, #20
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	781b      	ldrb	r3, [r3, #0]
 801897e:	031b      	lsls	r3, r3, #12
 8018980:	b21a      	sxth	r2, r3
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	3301      	adds	r3, #1
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	019b      	lsls	r3, r3, #6
 801898a:	b21b      	sxth	r3, r3
 801898c:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8018990:	b21b      	sxth	r3, r3
 8018992:	4313      	orrs	r3, r2
 8018994:	b21a      	sxth	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	3302      	adds	r3, #2
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	b21b      	sxth	r3, r3
 801899e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189a2:	b21b      	sxth	r3, r3
 80189a4:	4313      	orrs	r3, r2
 80189a6:	b21b      	sxth	r3, r3
 80189a8:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 80189aa:	89bb      	ldrh	r3, [r7, #12]
 80189ac:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 80189b0:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 80189b2:	89ba      	ldrh	r2, [r7, #12]
 80189b4:	0893      	lsrs	r3, r2, #2
 80189b6:	4973      	ldr	r1, [pc, #460]	; (8018b84 <hanUniFontLoad+0x214>)
 80189b8:	fba1 3103 	umull	r3, r1, r1, r3
 80189bc:	460b      	mov	r3, r1
 80189be:	00db      	lsls	r3, r3, #3
 80189c0:	1a5b      	subs	r3, r3, r1
 80189c2:	009b      	lsls	r3, r3, #2
 80189c4:	1ad3      	subs	r3, r2, r3
 80189c6:	b29a      	uxth	r2, r3
 80189c8:	4b6f      	ldr	r3, [pc, #444]	; (8018b88 <hanUniFontLoad+0x218>)
 80189ca:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 80189cc:	89bb      	ldrh	r3, [r7, #12]
 80189ce:	089b      	lsrs	r3, r3, #2
 80189d0:	4a6c      	ldr	r2, [pc, #432]	; (8018b84 <hanUniFontLoad+0x214>)
 80189d2:	fba2 2303 	umull	r2, r3, r2, r3
 80189d6:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 80189d8:	89b9      	ldrh	r1, [r7, #12]
 80189da:	4b6c      	ldr	r3, [pc, #432]	; (8018b8c <hanUniFontLoad+0x21c>)
 80189dc:	fba3 2301 	umull	r2, r3, r3, r1
 80189e0:	1aca      	subs	r2, r1, r3
 80189e2:	0852      	lsrs	r2, r2, #1
 80189e4:	4413      	add	r3, r2
 80189e6:	091a      	lsrs	r2, r3, #4
 80189e8:	4613      	mov	r3, r2
 80189ea:	005b      	lsls	r3, r3, #1
 80189ec:	4413      	add	r3, r2
 80189ee:	00da      	lsls	r2, r3, #3
 80189f0:	1ad2      	subs	r2, r2, r3
 80189f2:	1a8b      	subs	r3, r1, r2
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	4b66      	ldr	r3, [pc, #408]	; (8018b90 <hanUniFontLoad+0x220>)
 80189f8:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 80189fa:	89ba      	ldrh	r2, [r7, #12]
 80189fc:	4b63      	ldr	r3, [pc, #396]	; (8018b8c <hanUniFontLoad+0x21c>)
 80189fe:	fba3 1302 	umull	r1, r3, r3, r2
 8018a02:	1ad2      	subs	r2, r2, r3
 8018a04:	0852      	lsrs	r2, r2, #1
 8018a06:	4413      	add	r3, r2
 8018a08:	091b      	lsrs	r3, r3, #4
 8018a0a:	b29a      	uxth	r2, r3
 8018a0c:	4b61      	ldr	r3, [pc, #388]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a0e:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8018a10:	4b60      	ldr	r3, [pc, #384]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a12:	881b      	ldrh	r3, [r3, #0]
 8018a14:	461a      	mov	r2, r3
 8018a16:	4b60      	ldr	r3, [pc, #384]	; (8018b98 <hanUniFontLoad+0x228>)
 8018a18:	5c9b      	ldrb	r3, [r3, r2]
 8018a1a:	b29a      	uxth	r2, r3
 8018a1c:	4b5d      	ldr	r3, [pc, #372]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a1e:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8018a20:	4b5b      	ldr	r3, [pc, #364]	; (8018b90 <hanUniFontLoad+0x220>)
 8018a22:	881b      	ldrh	r3, [r3, #0]
 8018a24:	461a      	mov	r2, r3
 8018a26:	4b5d      	ldr	r3, [pc, #372]	; (8018b9c <hanUniFontLoad+0x22c>)
 8018a28:	5c9b      	ldrb	r3, [r3, r2]
 8018a2a:	b29a      	uxth	r2, r3
 8018a2c:	4b58      	ldr	r3, [pc, #352]	; (8018b90 <hanUniFontLoad+0x220>)
 8018a2e:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8018a30:	4b55      	ldr	r3, [pc, #340]	; (8018b88 <hanUniFontLoad+0x218>)
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	461a      	mov	r2, r3
 8018a36:	4b5a      	ldr	r3, [pc, #360]	; (8018ba0 <hanUniFontLoad+0x230>)
 8018a38:	5c9b      	ldrb	r3, [r3, r2]
 8018a3a:	b29a      	uxth	r2, r3
 8018a3c:	4b52      	ldr	r3, [pc, #328]	; (8018b88 <hanUniFontLoad+0x218>)
 8018a3e:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8018a40:	4b51      	ldr	r3, [pc, #324]	; (8018b88 <hanUniFontLoad+0x218>)
 8018a42:	881b      	ldrh	r3, [r3, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d006      	beq.n	8018a56 <hanUniFontLoad+0xe6>
 8018a48:	4b51      	ldr	r3, [pc, #324]	; (8018b90 <hanUniFontLoad+0x220>)
 8018a4a:	881b      	ldrh	r3, [r3, #0]
 8018a4c:	461a      	mov	r2, r3
 8018a4e:	4b55      	ldr	r3, [pc, #340]	; (8018ba4 <hanUniFontLoad+0x234>)
 8018a50:	5c9b      	ldrb	r3, [r3, r2]
 8018a52:	b29b      	uxth	r3, r3
 8018a54:	e005      	b.n	8018a62 <hanUniFontLoad+0xf2>
 8018a56:	4b4e      	ldr	r3, [pc, #312]	; (8018b90 <hanUniFontLoad+0x220>)
 8018a58:	881b      	ldrh	r3, [r3, #0]
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	4b52      	ldr	r3, [pc, #328]	; (8018ba8 <hanUniFontLoad+0x238>)
 8018a5e:	5c9b      	ldrb	r3, [r3, r2]
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	4a52      	ldr	r2, [pc, #328]	; (8018bac <hanUniFontLoad+0x23c>)
 8018a64:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8018a66:	4b4b      	ldr	r3, [pc, #300]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d009      	beq.n	8018a82 <hanUniFontLoad+0x112>
 8018a6e:	4b49      	ldr	r3, [pc, #292]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a70:	881b      	ldrh	r3, [r3, #0]
 8018a72:	2b01      	cmp	r3, #1
 8018a74:	d005      	beq.n	8018a82 <hanUniFontLoad+0x112>
 8018a76:	4b47      	ldr	r3, [pc, #284]	; (8018b94 <hanUniFontLoad+0x224>)
 8018a78:	881b      	ldrh	r3, [r3, #0]
 8018a7a:	2b10      	cmp	r3, #16
 8018a7c:	d001      	beq.n	8018a82 <hanUniFontLoad+0x112>
 8018a7e:	2301      	movs	r3, #1
 8018a80:	e000      	b.n	8018a84 <hanUniFontLoad+0x114>
 8018a82:	2300      	movs	r3, #0
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	4a40      	ldr	r2, [pc, #256]	; (8018b88 <hanUniFontLoad+0x218>)
 8018a88:	8812      	ldrh	r2, [r2, #0]
 8018a8a:	2a00      	cmp	r2, #0
 8018a8c:	d001      	beq.n	8018a92 <hanUniFontLoad+0x122>
 8018a8e:	2202      	movs	r2, #2
 8018a90:	e000      	b.n	8018a94 <hanUniFontLoad+0x124>
 8018a92:	2200      	movs	r2, #0
 8018a94:	4413      	add	r3, r2
 8018a96:	b29a      	uxth	r2, r3
 8018a98:	4b45      	ldr	r3, [pc, #276]	; (8018bb0 <hanUniFontLoad+0x240>)
 8018a9a:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8018a9c:	4b3c      	ldr	r3, [pc, #240]	; (8018b90 <hanUniFontLoad+0x220>)
 8018a9e:	881b      	ldrh	r3, [r3, #0]
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	4b44      	ldr	r3, [pc, #272]	; (8018bb4 <hanUniFontLoad+0x244>)
 8018aa4:	5c9b      	ldrb	r3, [r3, r2]
 8018aa6:	b29a      	uxth	r2, r3
 8018aa8:	4b43      	ldr	r3, [pc, #268]	; (8018bb8 <hanUniFontLoad+0x248>)
 8018aaa:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8018aac:	2300      	movs	r3, #0
 8018aae:	81fb      	strh	r3, [r7, #14]
 8018ab0:	e035      	b.n	8018b1e <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8018ab2:	4b3e      	ldr	r3, [pc, #248]	; (8018bac <hanUniFontLoad+0x23c>)
 8018ab4:	881b      	ldrh	r3, [r3, #0]
 8018ab6:	461a      	mov	r2, r3
 8018ab8:	4613      	mov	r3, r2
 8018aba:	009b      	lsls	r3, r3, #2
 8018abc:	4413      	add	r3, r2
 8018abe:	009b      	lsls	r3, r3, #2
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	4b34      	ldr	r3, [pc, #208]	; (8018b94 <hanUniFontLoad+0x224>)
 8018ac4:	881b      	ldrh	r3, [r3, #0]
 8018ac6:	441a      	add	r2, r3
 8018ac8:	89fb      	ldrh	r3, [r7, #14]
 8018aca:	493c      	ldr	r1, [pc, #240]	; (8018bbc <hanUniFontLoad+0x24c>)
 8018acc:	0152      	lsls	r2, r2, #5
 8018ace:	4413      	add	r3, r2
 8018ad0:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8018ad4:	89fb      	ldrh	r3, [r7, #14]
 8018ad6:	b2d1      	uxtb	r1, r2
 8018ad8:	683a      	ldr	r2, [r7, #0]
 8018ada:	4413      	add	r3, r2
 8018adc:	460a      	mov	r2, r1
 8018ade:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8018ae0:	89fb      	ldrh	r3, [r7, #14]
 8018ae2:	683a      	ldr	r2, [r7, #0]
 8018ae4:	4413      	add	r3, r2
 8018ae6:	7999      	ldrb	r1, [r3, #6]
 8018ae8:	4b31      	ldr	r3, [pc, #196]	; (8018bb0 <hanUniFontLoad+0x240>)
 8018aea:	881b      	ldrh	r3, [r3, #0]
 8018aec:	461a      	mov	r2, r3
 8018aee:	2316      	movs	r3, #22
 8018af0:	fb02 f303 	mul.w	r3, r2, r3
 8018af4:	33a0      	adds	r3, #160	; 0xa0
 8018af6:	4a26      	ldr	r2, [pc, #152]	; (8018b90 <hanUniFontLoad+0x220>)
 8018af8:	8812      	ldrh	r2, [r2, #0]
 8018afa:	441a      	add	r2, r3
 8018afc:	89fb      	ldrh	r3, [r7, #14]
 8018afe:	482f      	ldr	r0, [pc, #188]	; (8018bbc <hanUniFontLoad+0x24c>)
 8018b00:	0152      	lsls	r2, r2, #5
 8018b02:	4413      	add	r3, r2
 8018b04:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018b08:	b2da      	uxtb	r2, r3
 8018b0a:	89fb      	ldrh	r3, [r7, #14]
 8018b0c:	430a      	orrs	r2, r1
 8018b0e:	b2d1      	uxtb	r1, r2
 8018b10:	683a      	ldr	r2, [r7, #0]
 8018b12:	4413      	add	r3, r2
 8018b14:	460a      	mov	r2, r1
 8018b16:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8018b18:	89fb      	ldrh	r3, [r7, #14]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	81fb      	strh	r3, [r7, #14]
 8018b1e:	89fb      	ldrh	r3, [r7, #14]
 8018b20:	2b1f      	cmp	r3, #31
 8018b22:	d9c6      	bls.n	8018ab2 <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8018b24:	4b18      	ldr	r3, [pc, #96]	; (8018b88 <hanUniFontLoad+0x218>)
 8018b26:	881b      	ldrh	r3, [r3, #0]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d025      	beq.n	8018b78 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	81fb      	strh	r3, [r7, #14]
 8018b30:	e01f      	b.n	8018b72 <hanUniFontLoad+0x202>
 8018b32:	89fb      	ldrh	r3, [r7, #14]
 8018b34:	683a      	ldr	r2, [r7, #0]
 8018b36:	4413      	add	r3, r2
 8018b38:	7999      	ldrb	r1, [r3, #6]
 8018b3a:	4b1f      	ldr	r3, [pc, #124]	; (8018bb8 <hanUniFontLoad+0x248>)
 8018b3c:	881b      	ldrh	r3, [r3, #0]
 8018b3e:	461a      	mov	r2, r3
 8018b40:	4613      	mov	r3, r2
 8018b42:	00db      	lsls	r3, r3, #3
 8018b44:	1a9b      	subs	r3, r3, r2
 8018b46:	009b      	lsls	r3, r3, #2
 8018b48:	33f8      	adds	r3, #248	; 0xf8
 8018b4a:	4a0f      	ldr	r2, [pc, #60]	; (8018b88 <hanUniFontLoad+0x218>)
 8018b4c:	8812      	ldrh	r2, [r2, #0]
 8018b4e:	441a      	add	r2, r3
 8018b50:	89fb      	ldrh	r3, [r7, #14]
 8018b52:	481a      	ldr	r0, [pc, #104]	; (8018bbc <hanUniFontLoad+0x24c>)
 8018b54:	0152      	lsls	r2, r2, #5
 8018b56:	4413      	add	r3, r2
 8018b58:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8018b5c:	b2da      	uxtb	r2, r3
 8018b5e:	89fb      	ldrh	r3, [r7, #14]
 8018b60:	430a      	orrs	r2, r1
 8018b62:	b2d1      	uxtb	r1, r2
 8018b64:	683a      	ldr	r2, [r7, #0]
 8018b66:	4413      	add	r3, r2
 8018b68:	460a      	mov	r2, r1
 8018b6a:	719a      	strb	r2, [r3, #6]
 8018b6c:	89fb      	ldrh	r3, [r7, #14]
 8018b6e:	3301      	adds	r3, #1
 8018b70:	81fb      	strh	r3, [r7, #14]
 8018b72:	89fb      	ldrh	r3, [r7, #14]
 8018b74:	2b1f      	cmp	r3, #31
 8018b76:	d9dc      	bls.n	8018b32 <hanUniFontLoad+0x1c2>
  }
}
 8018b78:	bf00      	nop
 8018b7a:	3714      	adds	r7, #20
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr
 8018b84:	24924925 	.word	0x24924925
 8018b88:	2000b32e 	.word	0x2000b32e
 8018b8c:	86186187 	.word	0x86186187
 8018b90:	2000b330 	.word	0x2000b330
 8018b94:	2000b332 	.word	0x2000b332
 8018b98:	0802b34c 	.word	0x0802b34c
 8018b9c:	0802b36c 	.word	0x0802b36c
 8018ba0:	0802b38c 	.word	0x0802b38c
 8018ba4:	0802b3c4 	.word	0x0802b3c4
 8018ba8:	0802b3ac 	.word	0x0802b3ac
 8018bac:	2000b334 	.word	0x2000b334
 8018bb0:	2000b336 	.word	0x2000b336
 8018bb4:	0802b3dc 	.word	0x0802b3dc
 8018bb8:	2000b338 	.word	0x2000b338
 8018bbc:	0802d8c0 	.word	0x0802d8c0

08018bc0 <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	b085      	sub	sp, #20
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	781b      	ldrb	r3, [r3, #0]
 8018bce:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8018bd0:	7b7b      	ldrb	r3, [r7, #13]
 8018bd2:	3b20      	subs	r3, #32
 8018bd4:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	81fb      	strh	r3, [r7, #14]
 8018bda:	e00f      	b.n	8018bfc <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8018bdc:	7b7a      	ldrb	r2, [r7, #13]
 8018bde:	89fb      	ldrh	r3, [r7, #14]
 8018be0:	490b      	ldr	r1, [pc, #44]	; (8018c10 <hanEngFontLoad+0x50>)
 8018be2:	0112      	lsls	r2, r2, #4
 8018be4:	4413      	add	r3, r2
 8018be6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8018bea:	89fb      	ldrh	r3, [r7, #14]
 8018bec:	b2d1      	uxtb	r1, r2
 8018bee:	683a      	ldr	r2, [r7, #0]
 8018bf0:	4413      	add	r3, r2
 8018bf2:	460a      	mov	r2, r1
 8018bf4:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8018bf6:	89fb      	ldrh	r3, [r7, #14]
 8018bf8:	3301      	adds	r3, #1
 8018bfa:	81fb      	strh	r3, [r7, #14]
 8018bfc:	89fb      	ldrh	r3, [r7, #14]
 8018bfe:	2b0f      	cmp	r3, #15
 8018c00:	d9ec      	bls.n	8018bdc <hanEngFontLoad+0x1c>
  }
}
 8018c02:	bf00      	nop
 8018c04:	bf00      	nop
 8018c06:	3714      	adds	r7, #20
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0e:	4770      	bx	lr
 8018c10:	08029aec 	.word	0x08029aec

08018c14 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8018c14:	b480      	push	{r7}
 8018c16:	b085      	sub	sp, #20
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8018c1e:	88fb      	ldrh	r3, [r7, #6]
 8018c20:	0a1b      	lsrs	r3, r3, #8
 8018c22:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8018c24:	88fb      	ldrh	r3, [r7, #6]
 8018c26:	b2db      	uxtb	r3, r3
 8018c28:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8018c2a:	89fb      	ldrh	r3, [r7, #14]
 8018c2c:	3bb0      	subs	r3, #176	; 0xb0
 8018c2e:	225e      	movs	r2, #94	; 0x5e
 8018c30:	fb03 f202 	mul.w	r2, r3, r2
 8018c34:	89bb      	ldrh	r3, [r7, #12]
 8018c36:	3ba1      	subs	r3, #161	; 0xa1
 8018c38:	4413      	add	r3, r2
 8018c3a:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8018c3c:	4a05      	ldr	r2, [pc, #20]	; (8018c54 <hanCnvCodeWan2Johab+0x40>)
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c44:	b29b      	uxth	r3, r3
}
 8018c46:	4618      	mov	r0, r3
 8018c48:	3714      	adds	r7, #20
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c50:	4770      	bx	lr
 8018c52:	bf00      	nop
 8018c54:	0802b400 	.word	0x0802b400

08018c58 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8018c5c:	4b0a      	ldr	r3, [pc, #40]	; (8018c88 <TransferDoneISR+0x30>)
 8018c5e:	781b      	ldrb	r3, [r3, #0]
 8018c60:	b2db      	uxtb	r3, r3
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d00d      	beq.n	8018c82 <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8018c66:	4b08      	ldr	r3, [pc, #32]	; (8018c88 <TransferDoneISR+0x30>)
 8018c68:	2200      	movs	r2, #0
 8018c6a:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8018c6c:	2101      	movs	r1, #1
 8018c6e:	2002      	movs	r0, #2
 8018c70:	f7fb fda2 	bl	80147b8 <gpioPinWrite>

    if (frameCallBack != NULL)
 8018c74:	4b05      	ldr	r3, [pc, #20]	; (8018c8c <TransferDoneISR+0x34>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d002      	beq.n	8018c82 <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8018c7c:	4b03      	ldr	r3, [pc, #12]	; (8018c8c <TransferDoneISR+0x34>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	4798      	blx	r3
    }
  }
}
 8018c82:	bf00      	nop
 8018c84:	bd80      	pop	{r7, pc}
 8018c86:	bf00      	nop
 8018c88:	2000b340 	.word	0x2000b340
 8018c8c:	2000b33c 	.word	0x2000b33c

08018c90 <st7735Init>:


bool st7735Init(void)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b082      	sub	sp, #8
 8018c94:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8018c96:	f000 f835 	bl	8018d04 <st7735Reset>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	71fb      	strb	r3, [r7, #7]

  return ret;
 8018c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	3708      	adds	r7, #8
 8018ca4:	46bd      	mov	sp, r7
 8018ca6:	bd80      	pop	{r7, pc}

08018ca8 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8018ca8:	b480      	push	{r7}
 8018caa:	b083      	sub	sp, #12
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	4a0d      	ldr	r2, [pc, #52]	; (8018ce8 <st7735InitDriver+0x40>)
 8018cb4:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	4a0c      	ldr	r2, [pc, #48]	; (8018cec <st7735InitDriver+0x44>)
 8018cba:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	4a0c      	ldr	r2, [pc, #48]	; (8018cf0 <st7735InitDriver+0x48>)
 8018cc0:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4a0b      	ldr	r2, [pc, #44]	; (8018cf4 <st7735InitDriver+0x4c>)
 8018cc6:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	4a0b      	ldr	r2, [pc, #44]	; (8018cf8 <st7735InitDriver+0x50>)
 8018ccc:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	4a0a      	ldr	r2, [pc, #40]	; (8018cfc <st7735InitDriver+0x54>)
 8018cd2:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	4a0a      	ldr	r2, [pc, #40]	; (8018d00 <st7735InitDriver+0x58>)
 8018cd8:	619a      	str	r2, [r3, #24]
  return true;
 8018cda:	2301      	movs	r3, #1
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr
 8018ce8:	08018c91 	.word	0x08018c91
 8018cec:	08018d05 	.word	0x08018d05
 8018cf0:	08018fc9 	.word	0x08018fc9
 8018cf4:	08018d7d 	.word	0x08018d7d
 8018cf8:	08018d8d 	.word	0x08018d8d
 8018cfc:	08019221 	.word	0x08019221
 8018d00:	080191d5 	.word	0x080191d5

08018d04 <st7735Reset>:

bool st7735Reset(void)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8018d0a:	4b1a      	ldr	r3, [pc, #104]	; (8018d74 <st7735Reset+0x70>)
 8018d0c:	781b      	ldrb	r3, [r3, #0]
 8018d0e:	4618      	mov	r0, r3
 8018d10:	f7fe f8ca 	bl	8016ea8 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8018d14:	4b17      	ldr	r3, [pc, #92]	; (8018d74 <st7735Reset+0x70>)
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	2100      	movs	r1, #0
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	f7fe f920 	bl	8016f60 <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8018d20:	4b14      	ldr	r3, [pc, #80]	; (8018d74 <st7735Reset+0x70>)
 8018d22:	781b      	ldrb	r3, [r3, #0]
 8018d24:	4914      	ldr	r1, [pc, #80]	; (8018d78 <st7735Reset+0x74>)
 8018d26:	4618      	mov	r0, r3
 8018d28:	f7fe fa50 	bl	80171cc <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8018d2c:	2100      	movs	r1, #0
 8018d2e:	2001      	movs	r0, #1
 8018d30:	f7fb fd42 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8018d34:	2101      	movs	r1, #1
 8018d36:	2003      	movs	r0, #3
 8018d38:	f7fb fd3e 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8018d3c:	2101      	movs	r1, #1
 8018d3e:	2002      	movs	r0, #2
 8018d40:	f7fb fd3a 	bl	80147b8 <gpioPinWrite>
  delay(10);
 8018d44:	200a      	movs	r0, #10
 8018d46:	f7f9 fc69 	bl	801261c <delay>

  st7735InitRegs();
 8018d4a:	f000 f863 	bl	8018e14 <st7735InitRegs>


  st7735SetRotation(1);
 8018d4e:	2001      	movs	r0, #1
 8018d50:	f000 f910 	bl	8018f74 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8018d54:	2300      	movs	r3, #0
 8018d56:	9300      	str	r3, [sp, #0]
 8018d58:	2380      	movs	r3, #128	; 0x80
 8018d5a:	22a0      	movs	r2, #160	; 0xa0
 8018d5c:	2100      	movs	r1, #0
 8018d5e:	2000      	movs	r0, #0
 8018d60:	f000 f97e 	bl	8019060 <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8018d64:	2100      	movs	r1, #0
 8018d66:	2001      	movs	r0, #1
 8018d68:	f7fb fd26 	bl	80147b8 <gpioPinWrite>
  return true;
 8018d6c:	2301      	movs	r3, #1
}
 8018d6e:	4618      	mov	r0, r3
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}
 8018d74:	2000b33a 	.word	0x2000b33a
 8018d78:	08018c59 	.word	0x08018c59

08018d7c <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8018d80:	23a0      	movs	r3, #160	; 0xa0
}
 8018d82:	4618      	mov	r0, r3
 8018d84:	46bd      	mov	sp, r7
 8018d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8a:	4770      	bx	lr

08018d8c <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8018d8c:	b480      	push	{r7}
 8018d8e:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8018d90:	2380      	movs	r3, #128	; 0x80
}
 8018d92:	4618      	mov	r0, r3
 8018d94:	46bd      	mov	sp, r7
 8018d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9a:	4770      	bx	lr

08018d9c <writecommand>:

void writecommand(uint8_t c)
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b082      	sub	sp, #8
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	4603      	mov	r3, r0
 8018da4:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8018da6:	2100      	movs	r1, #0
 8018da8:	2003      	movs	r0, #3
 8018daa:	f7fb fd05 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8018dae:	2100      	movs	r1, #0
 8018db0:	2002      	movs	r0, #2
 8018db2:	f7fb fd01 	bl	80147b8 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8018db6:	4b07      	ldr	r3, [pc, #28]	; (8018dd4 <writecommand+0x38>)
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	79fa      	ldrb	r2, [r7, #7]
 8018dbc:	4611      	mov	r1, r2
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7fe f962 	bl	8017088 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8018dc4:	2101      	movs	r1, #1
 8018dc6:	2002      	movs	r0, #2
 8018dc8:	f7fb fcf6 	bl	80147b8 <gpioPinWrite>
}
 8018dcc:	bf00      	nop
 8018dce:	3708      	adds	r7, #8
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}
 8018dd4:	2000b33a 	.word	0x2000b33a

08018dd8 <writedata>:

void writedata(uint8_t d)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	4603      	mov	r3, r0
 8018de0:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8018de2:	2101      	movs	r1, #1
 8018de4:	2003      	movs	r0, #3
 8018de6:	f7fb fce7 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8018dea:	2100      	movs	r1, #0
 8018dec:	2002      	movs	r0, #2
 8018dee:	f7fb fce3 	bl	80147b8 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8018df2:	4b07      	ldr	r3, [pc, #28]	; (8018e10 <writedata+0x38>)
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	79fa      	ldrb	r2, [r7, #7]
 8018df8:	4611      	mov	r1, r2
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7fe f944 	bl	8017088 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8018e00:	2101      	movs	r1, #1
 8018e02:	2002      	movs	r0, #2
 8018e04:	f7fb fcd8 	bl	80147b8 <gpioPinWrite>
}
 8018e08:	bf00      	nop
 8018e0a:	3708      	adds	r7, #8
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	2000b33a 	.word	0x2000b33a

08018e14 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8018e18:	2001      	movs	r0, #1
 8018e1a:	f7ff ffbf 	bl	8018d9c <writecommand>
  delay(10);
 8018e1e:	200a      	movs	r0, #10
 8018e20:	f7f9 fbfc 	bl	801261c <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8018e24:	2011      	movs	r0, #17
 8018e26:	f7ff ffb9 	bl	8018d9c <writecommand>
  delay(10);
 8018e2a:	200a      	movs	r0, #10
 8018e2c:	f7f9 fbf6 	bl	801261c <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8018e30:	20b1      	movs	r0, #177	; 0xb1
 8018e32:	f7ff ffb3 	bl	8018d9c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8018e36:	2001      	movs	r0, #1
 8018e38:	f7ff ffce 	bl	8018dd8 <writedata>
  writedata(0x2C);
 8018e3c:	202c      	movs	r0, #44	; 0x2c
 8018e3e:	f7ff ffcb 	bl	8018dd8 <writedata>
  writedata(0x2D);
 8018e42:	202d      	movs	r0, #45	; 0x2d
 8018e44:	f7ff ffc8 	bl	8018dd8 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8018e48:	20b2      	movs	r0, #178	; 0xb2
 8018e4a:	f7ff ffa7 	bl	8018d9c <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8018e4e:	2001      	movs	r0, #1
 8018e50:	f7ff ffc2 	bl	8018dd8 <writedata>
  writedata(0x2C);
 8018e54:	202c      	movs	r0, #44	; 0x2c
 8018e56:	f7ff ffbf 	bl	8018dd8 <writedata>
  writedata(0x2D);
 8018e5a:	202d      	movs	r0, #45	; 0x2d
 8018e5c:	f7ff ffbc 	bl	8018dd8 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8018e60:	20b3      	movs	r0, #179	; 0xb3
 8018e62:	f7ff ff9b 	bl	8018d9c <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8018e66:	2001      	movs	r0, #1
 8018e68:	f7ff ffb6 	bl	8018dd8 <writedata>
  writedata(0x2C);
 8018e6c:	202c      	movs	r0, #44	; 0x2c
 8018e6e:	f7ff ffb3 	bl	8018dd8 <writedata>
  writedata(0x2D);
 8018e72:	202d      	movs	r0, #45	; 0x2d
 8018e74:	f7ff ffb0 	bl	8018dd8 <writedata>
  writedata(0x01);              //     Line inversion mode
 8018e78:	2001      	movs	r0, #1
 8018e7a:	f7ff ffad 	bl	8018dd8 <writedata>
  writedata(0x2C);
 8018e7e:	202c      	movs	r0, #44	; 0x2c
 8018e80:	f7ff ffaa 	bl	8018dd8 <writedata>
  writedata(0x2D);
 8018e84:	202d      	movs	r0, #45	; 0x2d
 8018e86:	f7ff ffa7 	bl	8018dd8 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8018e8a:	20b4      	movs	r0, #180	; 0xb4
 8018e8c:	f7ff ff86 	bl	8018d9c <writecommand>
  writedata(0x07);              //     No inversion
 8018e90:	2007      	movs	r0, #7
 8018e92:	f7ff ffa1 	bl	8018dd8 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8018e96:	20c0      	movs	r0, #192	; 0xc0
 8018e98:	f7ff ff80 	bl	8018d9c <writecommand>
  writedata(0xA2);
 8018e9c:	20a2      	movs	r0, #162	; 0xa2
 8018e9e:	f7ff ff9b 	bl	8018dd8 <writedata>
  writedata(0x02);              //     -4.6V
 8018ea2:	2002      	movs	r0, #2
 8018ea4:	f7ff ff98 	bl	8018dd8 <writedata>
  writedata(0x84);              //     AUTO mode
 8018ea8:	2084      	movs	r0, #132	; 0x84
 8018eaa:	f7ff ff95 	bl	8018dd8 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8018eae:	20c1      	movs	r0, #193	; 0xc1
 8018eb0:	f7ff ff74 	bl	8018d9c <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8018eb4:	20c5      	movs	r0, #197	; 0xc5
 8018eb6:	f7ff ff8f 	bl	8018dd8 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8018eba:	20c2      	movs	r0, #194	; 0xc2
 8018ebc:	f7ff ff6e 	bl	8018d9c <writecommand>
  writedata(0x0A);              //     Opamp current small
 8018ec0:	200a      	movs	r0, #10
 8018ec2:	f7ff ff89 	bl	8018dd8 <writedata>
  writedata(0x00);              //     Boost frequency
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	f7ff ff86 	bl	8018dd8 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8018ecc:	20c3      	movs	r0, #195	; 0xc3
 8018ece:	f7ff ff65 	bl	8018d9c <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 8018ed2:	208a      	movs	r0, #138	; 0x8a
 8018ed4:	f7ff ff80 	bl	8018dd8 <writedata>
  writedata(0x2A);
 8018ed8:	202a      	movs	r0, #42	; 0x2a
 8018eda:	f7ff ff7d 	bl	8018dd8 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8018ede:	20c4      	movs	r0, #196	; 0xc4
 8018ee0:	f7ff ff5c 	bl	8018d9c <writecommand>
  writedata(0x8A);
 8018ee4:	208a      	movs	r0, #138	; 0x8a
 8018ee6:	f7ff ff77 	bl	8018dd8 <writedata>
  writedata(0xEE);
 8018eea:	20ee      	movs	r0, #238	; 0xee
 8018eec:	f7ff ff74 	bl	8018dd8 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8018ef0:	20c5      	movs	r0, #197	; 0xc5
 8018ef2:	f7ff ff53 	bl	8018d9c <writecommand>
  writedata(0x0E);
 8018ef6:	200e      	movs	r0, #14
 8018ef8:	f7ff ff6e 	bl	8018dd8 <writedata>

#if HW_ST7735_MODEL == 0
  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
#else
  writecommand(ST7735_INVOFF);  // 13: Don't invert display, no args, no delay
 8018efc:	2020      	movs	r0, #32
 8018efe:	f7ff ff4d 	bl	8018d9c <writecommand>
#endif

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8018f02:	2036      	movs	r0, #54	; 0x36
 8018f04:	f7ff ff4a 	bl	8018d9c <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8018f08:	20c8      	movs	r0, #200	; 0xc8
 8018f0a:	f7ff ff65 	bl	8018dd8 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8018f0e:	203a      	movs	r0, #58	; 0x3a
 8018f10:	f7ff ff44 	bl	8018d9c <writecommand>
  writedata(0x05);              //     16-bit color
 8018f14:	2005      	movs	r0, #5
 8018f16:	f7ff ff5f 	bl	8018dd8 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8018f1a:	202a      	movs	r0, #42	; 0x2a
 8018f1c:	f7ff ff3e 	bl	8018d9c <writecommand>
  writedata(0x00);
 8018f20:	2000      	movs	r0, #0
 8018f22:	f7ff ff59 	bl	8018dd8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8018f26:	2000      	movs	r0, #0
 8018f28:	f7ff ff56 	bl	8018dd8 <writedata>
  writedata(0x00);
 8018f2c:	2000      	movs	r0, #0
 8018f2e:	f7ff ff53 	bl	8018dd8 <writedata>
  writedata(HW_LCD_WIDTH-1);    //     XEND = 159
 8018f32:	209f      	movs	r0, #159	; 0x9f
 8018f34:	f7ff ff50 	bl	8018dd8 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8018f38:	202b      	movs	r0, #43	; 0x2b
 8018f3a:	f7ff ff2f 	bl	8018d9c <writecommand>
  writedata(0x00);
 8018f3e:	2000      	movs	r0, #0
 8018f40:	f7ff ff4a 	bl	8018dd8 <writedata>
  writedata(0x00);              //     XSTART = 0
 8018f44:	2000      	movs	r0, #0
 8018f46:	f7ff ff47 	bl	8018dd8 <writedata>
  writedata(0x00);
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	f7ff ff44 	bl	8018dd8 <writedata>
  writedata(HW_LCD_HEIGHT-1);   //     XEND = 79
 8018f50:	207f      	movs	r0, #127	; 0x7f
 8018f52:	f7ff ff41 	bl	8018dd8 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8018f56:	2013      	movs	r0, #19
 8018f58:	f7ff ff20 	bl	8018d9c <writecommand>
  delay(10);
 8018f5c:	200a      	movs	r0, #10
 8018f5e:	f7f9 fb5d 	bl	801261c <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8018f62:	2029      	movs	r0, #41	; 0x29
 8018f64:	f7ff ff1a 	bl	8018d9c <writecommand>
  delay(10);
 8018f68:	200a      	movs	r0, #10
 8018f6a:	f7f9 fb57 	bl	801261c <delay>
}
 8018f6e:	bf00      	nop
 8018f70:	bd80      	pop	{r7, pc}
	...

08018f74 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b082      	sub	sp, #8
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8018f7e:	2036      	movs	r0, #54	; 0x36
 8018f80:	f7ff ff0c 	bl	8018d9c <writecommand>

  switch (mode)
 8018f84:	79fb      	ldrb	r3, [r7, #7]
 8018f86:	2b03      	cmp	r3, #3
 8018f88:	d81a      	bhi.n	8018fc0 <st7735SetRotation+0x4c>
 8018f8a:	a201      	add	r2, pc, #4	; (adr r2, 8018f90 <st7735SetRotation+0x1c>)
 8018f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f90:	08018fa1 	.word	0x08018fa1
 8018f94:	08018fa9 	.word	0x08018fa9
 8018f98:	08018fb1 	.word	0x08018fb1
 8018f9c:	08018fb9 	.word	0x08018fb9
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8018fa0:	20c0      	movs	r0, #192	; 0xc0
 8018fa2:	f7ff ff19 	bl	8018dd8 <writedata>
     break;
 8018fa6:	e00b      	b.n	8018fc0 <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8018fa8:	20a0      	movs	r0, #160	; 0xa0
 8018faa:	f7ff ff15 	bl	8018dd8 <writedata>
     break;
 8018fae:	e007      	b.n	8018fc0 <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_RGB);
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	f7ff ff11 	bl	8018dd8 <writedata>
    break;
 8018fb6:	e003      	b.n	8018fc0 <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8018fb8:	2060      	movs	r0, #96	; 0x60
 8018fba:	f7ff ff0d 	bl	8018dd8 <writedata>
     break;
 8018fbe:	bf00      	nop
  }
}
 8018fc0:	bf00      	nop
 8018fc2:	3708      	adds	r7, #8
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}

08018fc8 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b084      	sub	sp, #16
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	60f8      	str	r0, [r7, #12]
 8018fd0:	60b9      	str	r1, [r7, #8]
 8018fd2:	607a      	str	r2, [r7, #4]
 8018fd4:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8018fd6:	4b21      	ldr	r3, [pc, #132]	; (801905c <st7735SetWindow+0x94>)
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	2108      	movs	r1, #8
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7fe f823 	bl	8017028 <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8018fe2:	202a      	movs	r0, #42	; 0x2a
 8018fe4:	f7ff feda 	bl	8018d9c <writecommand>
  writedata(0x00);
 8018fe8:	2000      	movs	r0, #0
 8018fea:	f7ff fef5 	bl	8018dd8 <writedata>
  writedata(x0+colstart);     // XSTART
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	b2da      	uxtb	r2, r3
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	b2db      	uxtb	r3, r3
 8018ff6:	4413      	add	r3, r2
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7ff feec 	bl	8018dd8 <writedata>
  writedata(0x00);
 8019000:	2000      	movs	r0, #0
 8019002:	f7ff fee9 	bl	8018dd8 <writedata>
  writedata(x1+colstart);     // XEND
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	b2da      	uxtb	r2, r3
 801900a:	2300      	movs	r3, #0
 801900c:	b2db      	uxtb	r3, r3
 801900e:	4413      	add	r3, r2
 8019010:	b2db      	uxtb	r3, r3
 8019012:	4618      	mov	r0, r3
 8019014:	f7ff fee0 	bl	8018dd8 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8019018:	202b      	movs	r0, #43	; 0x2b
 801901a:	f7ff febf 	bl	8018d9c <writecommand>
  writedata(0x00);
 801901e:	2000      	movs	r0, #0
 8019020:	f7ff feda 	bl	8018dd8 <writedata>
  writedata(y0+rowstart);     // YSTART
 8019024:	68bb      	ldr	r3, [r7, #8]
 8019026:	b2da      	uxtb	r2, r3
 8019028:	2300      	movs	r3, #0
 801902a:	b2db      	uxtb	r3, r3
 801902c:	4413      	add	r3, r2
 801902e:	b2db      	uxtb	r3, r3
 8019030:	4618      	mov	r0, r3
 8019032:	f7ff fed1 	bl	8018dd8 <writedata>
  writedata(0x00);
 8019036:	2000      	movs	r0, #0
 8019038:	f7ff fece 	bl	8018dd8 <writedata>
  writedata(y1+rowstart);     // YEND
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	b2da      	uxtb	r2, r3
 8019040:	2300      	movs	r3, #0
 8019042:	b2db      	uxtb	r3, r3
 8019044:	4413      	add	r3, r2
 8019046:	b2db      	uxtb	r3, r3
 8019048:	4618      	mov	r0, r3
 801904a:	f7ff fec5 	bl	8018dd8 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 801904e:	202c      	movs	r0, #44	; 0x2c
 8019050:	f7ff fea4 	bl	8018d9c <writecommand>
}
 8019054:	bf00      	nop
 8019056:	3710      	adds	r7, #16
 8019058:	46bd      	mov	sp, r7
 801905a:	bd80      	pop	{r7, pc}
 801905c:	2000b33a 	.word	0x2000b33a

08019060 <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 8019060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019064:	b089      	sub	sp, #36	; 0x24
 8019066:	af00      	add	r7, sp, #0
 8019068:	60f8      	str	r0, [r7, #12]
 801906a:	60b9      	str	r1, [r7, #8]
 801906c:	607a      	str	r2, [r7, #4]
 801906e:	603b      	str	r3, [r7, #0]
 8019070:	466b      	mov	r3, sp
 8019072:	461e      	mov	r6, r3
  uint16_t line_buf[w];
 8019074:	6879      	ldr	r1, [r7, #4]
 8019076:	1e4b      	subs	r3, r1, #1
 8019078:	617b      	str	r3, [r7, #20]
 801907a:	460a      	mov	r2, r1
 801907c:	2300      	movs	r3, #0
 801907e:	4690      	mov	r8, r2
 8019080:	4699      	mov	r9, r3
 8019082:	f04f 0200 	mov.w	r2, #0
 8019086:	f04f 0300 	mov.w	r3, #0
 801908a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 801908e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8019092:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8019096:	460a      	mov	r2, r1
 8019098:	2300      	movs	r3, #0
 801909a:	4614      	mov	r4, r2
 801909c:	461d      	mov	r5, r3
 801909e:	f04f 0200 	mov.w	r2, #0
 80190a2:	f04f 0300 	mov.w	r3, #0
 80190a6:	012b      	lsls	r3, r5, #4
 80190a8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80190ac:	0122      	lsls	r2, r4, #4
 80190ae:	460b      	mov	r3, r1
 80190b0:	005b      	lsls	r3, r3, #1
 80190b2:	3307      	adds	r3, #7
 80190b4:	08db      	lsrs	r3, r3, #3
 80190b6:	00db      	lsls	r3, r3, #3
 80190b8:	ebad 0d03 	sub.w	sp, sp, r3
 80190bc:	466b      	mov	r3, sp
 80190be:	3301      	adds	r3, #1
 80190c0:	085b      	lsrs	r3, r3, #1
 80190c2:	005b      	lsls	r3, r3, #1
 80190c4:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 80190c6:	22a0      	movs	r2, #160	; 0xa0
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	4293      	cmp	r3, r2
 80190cc:	da78      	bge.n	80191c0 <st7735FillRect+0x160>
 80190ce:	2280      	movs	r2, #128	; 0x80
 80190d0:	68bb      	ldr	r3, [r7, #8]
 80190d2:	4293      	cmp	r3, r2
 80190d4:	da74      	bge.n	80191c0 <st7735FillRect+0x160>

  if (x < 0) { w += x; x = 0; }
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	da05      	bge.n	80190e8 <st7735FillRect+0x88>
 80190dc:	687a      	ldr	r2, [r7, #4]
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	4413      	add	r3, r2
 80190e2:	607b      	str	r3, [r7, #4]
 80190e4:	2300      	movs	r3, #0
 80190e6:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 80190e8:	68bb      	ldr	r3, [r7, #8]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	da05      	bge.n	80190fa <st7735FillRect+0x9a>
 80190ee:	683a      	ldr	r2, [r7, #0]
 80190f0:	68bb      	ldr	r3, [r7, #8]
 80190f2:	4413      	add	r3, r2
 80190f4:	603b      	str	r3, [r7, #0]
 80190f6:	2300      	movs	r3, #0
 80190f8:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 80190fa:	68fa      	ldr	r2, [r7, #12]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	4413      	add	r3, r2
 8019100:	22a0      	movs	r2, #160	; 0xa0
 8019102:	4293      	cmp	r3, r2
 8019104:	dd03      	ble.n	801910e <st7735FillRect+0xae>
 8019106:	22a0      	movs	r2, #160	; 0xa0
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	1ad3      	subs	r3, r2, r3
 801910c:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 801910e:	68ba      	ldr	r2, [r7, #8]
 8019110:	683b      	ldr	r3, [r7, #0]
 8019112:	4413      	add	r3, r2
 8019114:	2280      	movs	r2, #128	; 0x80
 8019116:	4293      	cmp	r3, r2
 8019118:	dd03      	ble.n	8019122 <st7735FillRect+0xc2>
 801911a:	2280      	movs	r2, #128	; 0x80
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	1ad3      	subs	r3, r2, r3
 8019120:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	2b00      	cmp	r3, #0
 8019126:	dd4d      	ble.n	80191c4 <st7735FillRect+0x164>
 8019128:	683b      	ldr	r3, [r7, #0]
 801912a:	2b00      	cmp	r3, #0
 801912c:	dd4a      	ble.n	80191c4 <st7735FillRect+0x164>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 801912e:	68fa      	ldr	r2, [r7, #12]
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	4413      	add	r3, r2
 8019134:	1e59      	subs	r1, r3, #1
 8019136:	68ba      	ldr	r2, [r7, #8]
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	4413      	add	r3, r2
 801913c:	3b01      	subs	r3, #1
 801913e:	460a      	mov	r2, r1
 8019140:	68b9      	ldr	r1, [r7, #8]
 8019142:	68f8      	ldr	r0, [r7, #12]
 8019144:	f7ff ff40 	bl	8018fc8 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 8019148:	4b21      	ldr	r3, [pc, #132]	; (80191d0 <st7735FillRect+0x170>)
 801914a:	781b      	ldrb	r3, [r3, #0]
 801914c:	2110      	movs	r1, #16
 801914e:	4618      	mov	r0, r3
 8019150:	f7fd ff6a 	bl	8017028 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8019154:	2101      	movs	r1, #1
 8019156:	2003      	movs	r0, #3
 8019158:	f7fb fb2e 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 801915c:	2100      	movs	r1, #0
 801915e:	2002      	movs	r0, #2
 8019160:	f7fb fb2a 	bl	80147b8 <gpioPinWrite>

  for (int i=0; i<w; i++)
 8019164:	2300      	movs	r3, #0
 8019166:	61fb      	str	r3, [r7, #28]
 8019168:	e008      	b.n	801917c <st7735FillRect+0x11c>
  {
    line_buf[i] = color;
 801916a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801916c:	b299      	uxth	r1, r3
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	69fa      	ldr	r2, [r7, #28]
 8019172:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 8019176:	69fb      	ldr	r3, [r7, #28]
 8019178:	3301      	adds	r3, #1
 801917a:	61fb      	str	r3, [r7, #28]
 801917c:	69fa      	ldr	r2, [r7, #28]
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	429a      	cmp	r2, r3
 8019182:	dbf2      	blt.n	801916a <st7735FillRect+0x10a>
  }
  for (int i=0; i<h; i++)
 8019184:	2300      	movs	r3, #0
 8019186:	61bb      	str	r3, [r7, #24]
 8019188:	e00e      	b.n	80191a8 <st7735FillRect+0x148>
  {
    if (spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10) != true)
 801918a:	687a      	ldr	r2, [r7, #4]
 801918c:	230a      	movs	r3, #10
 801918e:	6939      	ldr	r1, [r7, #16]
 8019190:	2000      	movs	r0, #0
 8019192:	f7fd ffcb 	bl	801712c <spiDmaTxTransfer>
 8019196:	4603      	mov	r3, r0
 8019198:	f083 0301 	eor.w	r3, r3, #1
 801919c:	b2db      	uxtb	r3, r3
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d107      	bne.n	80191b2 <st7735FillRect+0x152>
  for (int i=0; i<h; i++)
 80191a2:	69bb      	ldr	r3, [r7, #24]
 80191a4:	3301      	adds	r3, #1
 80191a6:	61bb      	str	r3, [r7, #24]
 80191a8:	69ba      	ldr	r2, [r7, #24]
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	429a      	cmp	r2, r3
 80191ae:	dbec      	blt.n	801918a <st7735FillRect+0x12a>
 80191b0:	e000      	b.n	80191b4 <st7735FillRect+0x154>
    {
      break;
 80191b2:	bf00      	nop
    }
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 80191b4:	2101      	movs	r1, #1
 80191b6:	2002      	movs	r0, #2
 80191b8:	f7fb fafe 	bl	80147b8 <gpioPinWrite>
 80191bc:	46b5      	mov	sp, r6
 80191be:	e003      	b.n	80191c8 <st7735FillRect+0x168>
  if ((x >= _width) || (y >= _height)) return;
 80191c0:	bf00      	nop
 80191c2:	e000      	b.n	80191c6 <st7735FillRect+0x166>
  if ((w < 1) || (h < 1)) return;
 80191c4:	bf00      	nop
 80191c6:	46b5      	mov	sp, r6
}
 80191c8:	3724      	adds	r7, #36	; 0x24
 80191ca:	46bd      	mov	sp, r7
 80191cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191d0:	2000b33a 	.word	0x2000b33a

080191d4 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b084      	sub	sp, #16
 80191d8:	af00      	add	r7, sp, #0
 80191da:	60f8      	str	r0, [r7, #12]
 80191dc:	60b9      	str	r1, [r7, #8]
 80191de:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 80191e0:	4b0d      	ldr	r3, [pc, #52]	; (8019218 <st7735SendBuffer+0x44>)
 80191e2:	2201      	movs	r2, #1
 80191e4:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 80191e6:	4b0d      	ldr	r3, [pc, #52]	; (801921c <st7735SendBuffer+0x48>)
 80191e8:	781b      	ldrb	r3, [r3, #0]
 80191ea:	2110      	movs	r1, #16
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7fd ff1b 	bl	8017028 <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80191f2:	2101      	movs	r1, #1
 80191f4:	2003      	movs	r0, #3
 80191f6:	f7fb fadf 	bl	80147b8 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80191fa:	2100      	movs	r1, #0
 80191fc:	2002      	movs	r0, #2
 80191fe:	f7fb fadb 	bl	80147b8 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8019202:	2300      	movs	r3, #0
 8019204:	68ba      	ldr	r2, [r7, #8]
 8019206:	68f9      	ldr	r1, [r7, #12]
 8019208:	2000      	movs	r0, #0
 801920a:	f7fd ff8f 	bl	801712c <spiDmaTxTransfer>
  return true;
 801920e:	2301      	movs	r3, #1
}
 8019210:	4618      	mov	r0, r3
 8019212:	3710      	adds	r7, #16
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}
 8019218:	2000b340 	.word	0x2000b340
 801921c:	2000b33a 	.word	0x2000b33a

08019220 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 8019220:	b480      	push	{r7}
 8019222:	b083      	sub	sp, #12
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 8019228:	4a04      	ldr	r2, [pc, #16]	; (801923c <st7735SetCallBack+0x1c>)
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	6013      	str	r3, [r2, #0]

  return true;
 801922e:	2301      	movs	r3, #1
}
 8019230:	4618      	mov	r0, r3
 8019232:	370c      	adds	r7, #12
 8019234:	46bd      	mov	sp, r7
 8019236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923a:	4770      	bx	lr
 801923c:	2000b33c 	.word	0x2000b33c

08019240 <hwInit>:
        "Firmware"
    };


void hwInit(void)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	af00      	add	r7, sp, #0
  bspInit();
 8019244:	f7f9 f9c0 	bl	80125c8 <bspInit>

  rtcInit();
 8019248:	f7fc ff7c 	bl	8016144 <rtcInit>
  resetInit();
 801924c:	f7fc ff48 	bl	80160e0 <resetInit>
  cliInit();
 8019250:	f7fa f818 	bl	8013284 <cliInit>
  ledInit();
 8019254:	f7fc fb70 	bl	8015938 <ledInit>
  uartInit();
 8019258:	f7fe fda8 	bl	8017dac <uartInit>
  spiInit();
 801925c:	f7fd fdd2 	bl	8016e04 <spiInit>
  DWT_Delay_Init();
 8019260:	f7f9 fcae 	bl	8012bc0 <DWT_Delay_Init>
  buttonInit();
 8019264:	f7f9 fcdc 	bl	8012c20 <buttonInit>
  gpioInit();
 8019268:	f7fb f9dc 	bl	8014624 <gpioInit>
  flashInit();
 801926c:	f7fb f808 	bl	8014280 <flashInit>
  Ds18b20_Init();
 8019270:	f7fa faa2 	bl	80137b8 <Ds18b20_Init>
  sonarInit();
 8019274:	f7fd fbf2 	bl	8016a5c <sonarInit>

  //LCD_INIT();
  lcdInit();
 8019278:	f7fb fc24 	bl	8014ac4 <lcdInit>
  tdsInit();
 801927c:	f7fe f8bc 	bl	80173f8 <tdsInit>

  if (sdInit() == true)
 8019280:	f7fc ffd2 	bl	8016228 <sdInit>
 8019284:	4603      	mov	r3, r0
 8019286:	2b00      	cmp	r3, #0
 8019288:	d001      	beq.n	801928e <hwInit+0x4e>
  {
    fatfsInit();
 801928a:	f7fa fdfb 	bl	8013e84 <fatfsInit>
  }

  //menuInit();
}
 801928e:	bf00      	nop
 8019290:	bd80      	pop	{r7, pc}
	...

08019294 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b084      	sub	sp, #16
 8019298:	af00      	add	r7, sp, #0
 801929a:	4603      	mov	r3, r0
 801929c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801929e:	79fb      	ldrb	r3, [r7, #7]
 80192a0:	4a08      	ldr	r2, [pc, #32]	; (80192c4 <disk_status+0x30>)
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	4413      	add	r3, r2
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	685b      	ldr	r3, [r3, #4]
 80192aa:	79fa      	ldrb	r2, [r7, #7]
 80192ac:	4905      	ldr	r1, [pc, #20]	; (80192c4 <disk_status+0x30>)
 80192ae:	440a      	add	r2, r1
 80192b0:	7b12      	ldrb	r2, [r2, #12]
 80192b2:	4610      	mov	r0, r2
 80192b4:	4798      	blx	r3
 80192b6:	4603      	mov	r3, r0
 80192b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80192ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80192bc:	4618      	mov	r0, r3
 80192be:	3710      	adds	r7, #16
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}
 80192c4:	2000b370 	.word	0x2000b370

080192c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	b084      	sub	sp, #16
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	4603      	mov	r3, r0
 80192d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80192d2:	2300      	movs	r3, #0
 80192d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80192d6:	79fb      	ldrb	r3, [r7, #7]
 80192d8:	4a0d      	ldr	r2, [pc, #52]	; (8019310 <disk_initialize+0x48>)
 80192da:	5cd3      	ldrb	r3, [r2, r3]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d111      	bne.n	8019304 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80192e0:	79fb      	ldrb	r3, [r7, #7]
 80192e2:	4a0b      	ldr	r2, [pc, #44]	; (8019310 <disk_initialize+0x48>)
 80192e4:	2101      	movs	r1, #1
 80192e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80192e8:	79fb      	ldrb	r3, [r7, #7]
 80192ea:	4a09      	ldr	r2, [pc, #36]	; (8019310 <disk_initialize+0x48>)
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	4413      	add	r3, r2
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	79fa      	ldrb	r2, [r7, #7]
 80192f6:	4906      	ldr	r1, [pc, #24]	; (8019310 <disk_initialize+0x48>)
 80192f8:	440a      	add	r2, r1
 80192fa:	7b12      	ldrb	r2, [r2, #12]
 80192fc:	4610      	mov	r0, r2
 80192fe:	4798      	blx	r3
 8019300:	4603      	mov	r3, r0
 8019302:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8019304:	7bfb      	ldrb	r3, [r7, #15]
}
 8019306:	4618      	mov	r0, r3
 8019308:	3710      	adds	r7, #16
 801930a:	46bd      	mov	sp, r7
 801930c:	bd80      	pop	{r7, pc}
 801930e:	bf00      	nop
 8019310:	2000b370 	.word	0x2000b370

08019314 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8019314:	b590      	push	{r4, r7, lr}
 8019316:	b087      	sub	sp, #28
 8019318:	af00      	add	r7, sp, #0
 801931a:	60b9      	str	r1, [r7, #8]
 801931c:	607a      	str	r2, [r7, #4]
 801931e:	603b      	str	r3, [r7, #0]
 8019320:	4603      	mov	r3, r0
 8019322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8019324:	7bfb      	ldrb	r3, [r7, #15]
 8019326:	4a0a      	ldr	r2, [pc, #40]	; (8019350 <disk_read+0x3c>)
 8019328:	009b      	lsls	r3, r3, #2
 801932a:	4413      	add	r3, r2
 801932c:	685b      	ldr	r3, [r3, #4]
 801932e:	689c      	ldr	r4, [r3, #8]
 8019330:	7bfb      	ldrb	r3, [r7, #15]
 8019332:	4a07      	ldr	r2, [pc, #28]	; (8019350 <disk_read+0x3c>)
 8019334:	4413      	add	r3, r2
 8019336:	7b18      	ldrb	r0, [r3, #12]
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	68b9      	ldr	r1, [r7, #8]
 801933e:	47a0      	blx	r4
 8019340:	4603      	mov	r3, r0
 8019342:	75fb      	strb	r3, [r7, #23]
  return res;
 8019344:	7dfb      	ldrb	r3, [r7, #23]
}
 8019346:	4618      	mov	r0, r3
 8019348:	371c      	adds	r7, #28
 801934a:	46bd      	mov	sp, r7
 801934c:	bd90      	pop	{r4, r7, pc}
 801934e:	bf00      	nop
 8019350:	2000b370 	.word	0x2000b370

08019354 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8019354:	b590      	push	{r4, r7, lr}
 8019356:	b087      	sub	sp, #28
 8019358:	af00      	add	r7, sp, #0
 801935a:	60b9      	str	r1, [r7, #8]
 801935c:	607a      	str	r2, [r7, #4]
 801935e:	603b      	str	r3, [r7, #0]
 8019360:	4603      	mov	r3, r0
 8019362:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8019364:	7bfb      	ldrb	r3, [r7, #15]
 8019366:	4a0a      	ldr	r2, [pc, #40]	; (8019390 <disk_write+0x3c>)
 8019368:	009b      	lsls	r3, r3, #2
 801936a:	4413      	add	r3, r2
 801936c:	685b      	ldr	r3, [r3, #4]
 801936e:	68dc      	ldr	r4, [r3, #12]
 8019370:	7bfb      	ldrb	r3, [r7, #15]
 8019372:	4a07      	ldr	r2, [pc, #28]	; (8019390 <disk_write+0x3c>)
 8019374:	4413      	add	r3, r2
 8019376:	7b18      	ldrb	r0, [r3, #12]
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	687a      	ldr	r2, [r7, #4]
 801937c:	68b9      	ldr	r1, [r7, #8]
 801937e:	47a0      	blx	r4
 8019380:	4603      	mov	r3, r0
 8019382:	75fb      	strb	r3, [r7, #23]
  return res;
 8019384:	7dfb      	ldrb	r3, [r7, #23]
}
 8019386:	4618      	mov	r0, r3
 8019388:	371c      	adds	r7, #28
 801938a:	46bd      	mov	sp, r7
 801938c:	bd90      	pop	{r4, r7, pc}
 801938e:	bf00      	nop
 8019390:	2000b370 	.word	0x2000b370

08019394 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	4603      	mov	r3, r0
 801939c:	603a      	str	r2, [r7, #0]
 801939e:	71fb      	strb	r3, [r7, #7]
 80193a0:	460b      	mov	r3, r1
 80193a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80193a4:	79fb      	ldrb	r3, [r7, #7]
 80193a6:	4a09      	ldr	r2, [pc, #36]	; (80193cc <disk_ioctl+0x38>)
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	4413      	add	r3, r2
 80193ac:	685b      	ldr	r3, [r3, #4]
 80193ae:	691b      	ldr	r3, [r3, #16]
 80193b0:	79fa      	ldrb	r2, [r7, #7]
 80193b2:	4906      	ldr	r1, [pc, #24]	; (80193cc <disk_ioctl+0x38>)
 80193b4:	440a      	add	r2, r1
 80193b6:	7b10      	ldrb	r0, [r2, #12]
 80193b8:	79b9      	ldrb	r1, [r7, #6]
 80193ba:	683a      	ldr	r2, [r7, #0]
 80193bc:	4798      	blx	r3
 80193be:	4603      	mov	r3, r0
 80193c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80193c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80193c4:	4618      	mov	r0, r3
 80193c6:	3710      	adds	r7, #16
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	2000b370 	.word	0x2000b370

080193d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80193d0:	b480      	push	{r7}
 80193d2:	af00      	add	r7, sp, #0
  return 0;
 80193d4:	2300      	movs	r3, #0
}
 80193d6:	4618      	mov	r0, r3
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr

080193e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80193e0:	b480      	push	{r7}
 80193e2:	b085      	sub	sp, #20
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	3301      	adds	r3, #1
 80193ec:	781b      	ldrb	r3, [r3, #0]
 80193ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80193f0:	89fb      	ldrh	r3, [r7, #14]
 80193f2:	021b      	lsls	r3, r3, #8
 80193f4:	b21a      	sxth	r2, r3
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	b21b      	sxth	r3, r3
 80193fc:	4313      	orrs	r3, r2
 80193fe:	b21b      	sxth	r3, r3
 8019400:	81fb      	strh	r3, [r7, #14]
	return rv;
 8019402:	89fb      	ldrh	r3, [r7, #14]
}
 8019404:	4618      	mov	r0, r3
 8019406:	3714      	adds	r7, #20
 8019408:	46bd      	mov	sp, r7
 801940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940e:	4770      	bx	lr

08019410 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8019410:	b480      	push	{r7}
 8019412:	b085      	sub	sp, #20
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	3303      	adds	r3, #3
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	021b      	lsls	r3, r3, #8
 8019424:	687a      	ldr	r2, [r7, #4]
 8019426:	3202      	adds	r2, #2
 8019428:	7812      	ldrb	r2, [r2, #0]
 801942a:	4313      	orrs	r3, r2
 801942c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801942e:	68fb      	ldr	r3, [r7, #12]
 8019430:	021b      	lsls	r3, r3, #8
 8019432:	687a      	ldr	r2, [r7, #4]
 8019434:	3201      	adds	r2, #1
 8019436:	7812      	ldrb	r2, [r2, #0]
 8019438:	4313      	orrs	r3, r2
 801943a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	021b      	lsls	r3, r3, #8
 8019440:	687a      	ldr	r2, [r7, #4]
 8019442:	7812      	ldrb	r2, [r2, #0]
 8019444:	4313      	orrs	r3, r2
 8019446:	60fb      	str	r3, [r7, #12]
	return rv;
 8019448:	68fb      	ldr	r3, [r7, #12]
}
 801944a:	4618      	mov	r0, r3
 801944c:	3714      	adds	r7, #20
 801944e:	46bd      	mov	sp, r7
 8019450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019454:	4770      	bx	lr

08019456 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8019456:	b480      	push	{r7}
 8019458:	b083      	sub	sp, #12
 801945a:	af00      	add	r7, sp, #0
 801945c:	6078      	str	r0, [r7, #4]
 801945e:	460b      	mov	r3, r1
 8019460:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	1c5a      	adds	r2, r3, #1
 8019466:	607a      	str	r2, [r7, #4]
 8019468:	887a      	ldrh	r2, [r7, #2]
 801946a:	b2d2      	uxtb	r2, r2
 801946c:	701a      	strb	r2, [r3, #0]
 801946e:	887b      	ldrh	r3, [r7, #2]
 8019470:	0a1b      	lsrs	r3, r3, #8
 8019472:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	1c5a      	adds	r2, r3, #1
 8019478:	607a      	str	r2, [r7, #4]
 801947a:	887a      	ldrh	r2, [r7, #2]
 801947c:	b2d2      	uxtb	r2, r2
 801947e:	701a      	strb	r2, [r3, #0]
}
 8019480:	bf00      	nop
 8019482:	370c      	adds	r7, #12
 8019484:	46bd      	mov	sp, r7
 8019486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801948a:	4770      	bx	lr

0801948c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801948c:	b480      	push	{r7}
 801948e:	b083      	sub	sp, #12
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
 8019494:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	1c5a      	adds	r2, r3, #1
 801949a:	607a      	str	r2, [r7, #4]
 801949c:	683a      	ldr	r2, [r7, #0]
 801949e:	b2d2      	uxtb	r2, r2
 80194a0:	701a      	strb	r2, [r3, #0]
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	0a1b      	lsrs	r3, r3, #8
 80194a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	1c5a      	adds	r2, r3, #1
 80194ac:	607a      	str	r2, [r7, #4]
 80194ae:	683a      	ldr	r2, [r7, #0]
 80194b0:	b2d2      	uxtb	r2, r2
 80194b2:	701a      	strb	r2, [r3, #0]
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	0a1b      	lsrs	r3, r3, #8
 80194b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	1c5a      	adds	r2, r3, #1
 80194be:	607a      	str	r2, [r7, #4]
 80194c0:	683a      	ldr	r2, [r7, #0]
 80194c2:	b2d2      	uxtb	r2, r2
 80194c4:	701a      	strb	r2, [r3, #0]
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	0a1b      	lsrs	r3, r3, #8
 80194ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	1c5a      	adds	r2, r3, #1
 80194d0:	607a      	str	r2, [r7, #4]
 80194d2:	683a      	ldr	r2, [r7, #0]
 80194d4:	b2d2      	uxtb	r2, r2
 80194d6:	701a      	strb	r2, [r3, #0]
}
 80194d8:	bf00      	nop
 80194da:	370c      	adds	r7, #12
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr

080194e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80194e4:	b480      	push	{r7}
 80194e6:	b087      	sub	sp, #28
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	60f8      	str	r0, [r7, #12]
 80194ec:	60b9      	str	r1, [r7, #8]
 80194ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d00d      	beq.n	801951a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80194fe:	693a      	ldr	r2, [r7, #16]
 8019500:	1c53      	adds	r3, r2, #1
 8019502:	613b      	str	r3, [r7, #16]
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	1c59      	adds	r1, r3, #1
 8019508:	6179      	str	r1, [r7, #20]
 801950a:	7812      	ldrb	r2, [r2, #0]
 801950c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	3b01      	subs	r3, #1
 8019512:	607b      	str	r3, [r7, #4]
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d1f1      	bne.n	80194fe <mem_cpy+0x1a>
	}
}
 801951a:	bf00      	nop
 801951c:	371c      	adds	r7, #28
 801951e:	46bd      	mov	sp, r7
 8019520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019524:	4770      	bx	lr

08019526 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8019526:	b480      	push	{r7}
 8019528:	b087      	sub	sp, #28
 801952a:	af00      	add	r7, sp, #0
 801952c:	60f8      	str	r0, [r7, #12]
 801952e:	60b9      	str	r1, [r7, #8]
 8019530:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8019536:	697b      	ldr	r3, [r7, #20]
 8019538:	1c5a      	adds	r2, r3, #1
 801953a:	617a      	str	r2, [r7, #20]
 801953c:	68ba      	ldr	r2, [r7, #8]
 801953e:	b2d2      	uxtb	r2, r2
 8019540:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	3b01      	subs	r3, #1
 8019546:	607b      	str	r3, [r7, #4]
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d1f3      	bne.n	8019536 <mem_set+0x10>
}
 801954e:	bf00      	nop
 8019550:	bf00      	nop
 8019552:	371c      	adds	r7, #28
 8019554:	46bd      	mov	sp, r7
 8019556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955a:	4770      	bx	lr

0801955c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801955c:	b480      	push	{r7}
 801955e:	b089      	sub	sp, #36	; 0x24
 8019560:	af00      	add	r7, sp, #0
 8019562:	60f8      	str	r0, [r7, #12]
 8019564:	60b9      	str	r1, [r7, #8]
 8019566:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	61fb      	str	r3, [r7, #28]
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8019570:	2300      	movs	r3, #0
 8019572:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8019574:	69fb      	ldr	r3, [r7, #28]
 8019576:	1c5a      	adds	r2, r3, #1
 8019578:	61fa      	str	r2, [r7, #28]
 801957a:	781b      	ldrb	r3, [r3, #0]
 801957c:	4619      	mov	r1, r3
 801957e:	69bb      	ldr	r3, [r7, #24]
 8019580:	1c5a      	adds	r2, r3, #1
 8019582:	61ba      	str	r2, [r7, #24]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	1acb      	subs	r3, r1, r3
 8019588:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	3b01      	subs	r3, #1
 801958e:	607b      	str	r3, [r7, #4]
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d002      	beq.n	801959c <mem_cmp+0x40>
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d0eb      	beq.n	8019574 <mem_cmp+0x18>

	return r;
 801959c:	697b      	ldr	r3, [r7, #20]
}
 801959e:	4618      	mov	r0, r3
 80195a0:	3724      	adds	r7, #36	; 0x24
 80195a2:	46bd      	mov	sp, r7
 80195a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a8:	4770      	bx	lr

080195aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80195aa:	b480      	push	{r7}
 80195ac:	b083      	sub	sp, #12
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80195b4:	e002      	b.n	80195bc <chk_chr+0x12>
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	3301      	adds	r3, #1
 80195ba:	607b      	str	r3, [r7, #4]
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	781b      	ldrb	r3, [r3, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d005      	beq.n	80195d0 <chk_chr+0x26>
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	781b      	ldrb	r3, [r3, #0]
 80195c8:	461a      	mov	r2, r3
 80195ca:	683b      	ldr	r3, [r7, #0]
 80195cc:	4293      	cmp	r3, r2
 80195ce:	d1f2      	bne.n	80195b6 <chk_chr+0xc>
	return *str;
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	781b      	ldrb	r3, [r3, #0]
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	370c      	adds	r7, #12
 80195d8:	46bd      	mov	sp, r7
 80195da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195de:	4770      	bx	lr

080195e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80195e0:	b480      	push	{r7}
 80195e2:	b085      	sub	sp, #20
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
 80195e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80195ea:	2300      	movs	r3, #0
 80195ec:	60bb      	str	r3, [r7, #8]
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	60fb      	str	r3, [r7, #12]
 80195f2:	e029      	b.n	8019648 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80195f4:	4a27      	ldr	r2, [pc, #156]	; (8019694 <chk_lock+0xb4>)
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	011b      	lsls	r3, r3, #4
 80195fa:	4413      	add	r3, r2
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d01d      	beq.n	801963e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019602:	4a24      	ldr	r2, [pc, #144]	; (8019694 <chk_lock+0xb4>)
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	011b      	lsls	r3, r3, #4
 8019608:	4413      	add	r3, r2
 801960a:	681a      	ldr	r2, [r3, #0]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	429a      	cmp	r2, r3
 8019612:	d116      	bne.n	8019642 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8019614:	4a1f      	ldr	r2, [pc, #124]	; (8019694 <chk_lock+0xb4>)
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	011b      	lsls	r3, r3, #4
 801961a:	4413      	add	r3, r2
 801961c:	3304      	adds	r3, #4
 801961e:	681a      	ldr	r2, [r3, #0]
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8019624:	429a      	cmp	r2, r3
 8019626:	d10c      	bne.n	8019642 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8019628:	4a1a      	ldr	r2, [pc, #104]	; (8019694 <chk_lock+0xb4>)
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	011b      	lsls	r3, r3, #4
 801962e:	4413      	add	r3, r2
 8019630:	3308      	adds	r3, #8
 8019632:	681a      	ldr	r2, [r3, #0]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8019638:	429a      	cmp	r2, r3
 801963a:	d102      	bne.n	8019642 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801963c:	e007      	b.n	801964e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801963e:	2301      	movs	r3, #1
 8019640:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	3301      	adds	r3, #1
 8019646:	60fb      	str	r3, [r7, #12]
 8019648:	68fb      	ldr	r3, [r7, #12]
 801964a:	2b01      	cmp	r3, #1
 801964c:	d9d2      	bls.n	80195f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	2b02      	cmp	r3, #2
 8019652:	d109      	bne.n	8019668 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d102      	bne.n	8019660 <chk_lock+0x80>
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	2b02      	cmp	r3, #2
 801965e:	d101      	bne.n	8019664 <chk_lock+0x84>
 8019660:	2300      	movs	r3, #0
 8019662:	e010      	b.n	8019686 <chk_lock+0xa6>
 8019664:	2312      	movs	r3, #18
 8019666:	e00e      	b.n	8019686 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d108      	bne.n	8019680 <chk_lock+0xa0>
 801966e:	4a09      	ldr	r2, [pc, #36]	; (8019694 <chk_lock+0xb4>)
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	011b      	lsls	r3, r3, #4
 8019674:	4413      	add	r3, r2
 8019676:	330c      	adds	r3, #12
 8019678:	881b      	ldrh	r3, [r3, #0]
 801967a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801967e:	d101      	bne.n	8019684 <chk_lock+0xa4>
 8019680:	2310      	movs	r3, #16
 8019682:	e000      	b.n	8019686 <chk_lock+0xa6>
 8019684:	2300      	movs	r3, #0
}
 8019686:	4618      	mov	r0, r3
 8019688:	3714      	adds	r7, #20
 801968a:	46bd      	mov	sp, r7
 801968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop
 8019694:	2000b350 	.word	0x2000b350

08019698 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8019698:	b480      	push	{r7}
 801969a:	b083      	sub	sp, #12
 801969c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801969e:	2300      	movs	r3, #0
 80196a0:	607b      	str	r3, [r7, #4]
 80196a2:	e002      	b.n	80196aa <enq_lock+0x12>
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	3301      	adds	r3, #1
 80196a8:	607b      	str	r3, [r7, #4]
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	2b01      	cmp	r3, #1
 80196ae:	d806      	bhi.n	80196be <enq_lock+0x26>
 80196b0:	4a09      	ldr	r2, [pc, #36]	; (80196d8 <enq_lock+0x40>)
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	011b      	lsls	r3, r3, #4
 80196b6:	4413      	add	r3, r2
 80196b8:	681b      	ldr	r3, [r3, #0]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d1f2      	bne.n	80196a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2b02      	cmp	r3, #2
 80196c2:	bf14      	ite	ne
 80196c4:	2301      	movne	r3, #1
 80196c6:	2300      	moveq	r3, #0
 80196c8:	b2db      	uxtb	r3, r3
}
 80196ca:	4618      	mov	r0, r3
 80196cc:	370c      	adds	r7, #12
 80196ce:	46bd      	mov	sp, r7
 80196d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d4:	4770      	bx	lr
 80196d6:	bf00      	nop
 80196d8:	2000b350 	.word	0x2000b350

080196dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80196dc:	b480      	push	{r7}
 80196de:	b085      	sub	sp, #20
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
 80196e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80196e6:	2300      	movs	r3, #0
 80196e8:	60fb      	str	r3, [r7, #12]
 80196ea:	e01f      	b.n	801972c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80196ec:	4a41      	ldr	r2, [pc, #260]	; (80197f4 <inc_lock+0x118>)
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	011b      	lsls	r3, r3, #4
 80196f2:	4413      	add	r3, r2
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d113      	bne.n	8019726 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80196fe:	4a3d      	ldr	r2, [pc, #244]	; (80197f4 <inc_lock+0x118>)
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	011b      	lsls	r3, r3, #4
 8019704:	4413      	add	r3, r2
 8019706:	3304      	adds	r3, #4
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801970e:	429a      	cmp	r2, r3
 8019710:	d109      	bne.n	8019726 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8019712:	4a38      	ldr	r2, [pc, #224]	; (80197f4 <inc_lock+0x118>)
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	011b      	lsls	r3, r3, #4
 8019718:	4413      	add	r3, r2
 801971a:	3308      	adds	r3, #8
 801971c:	681a      	ldr	r2, [r3, #0]
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8019722:	429a      	cmp	r2, r3
 8019724:	d006      	beq.n	8019734 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	3301      	adds	r3, #1
 801972a:	60fb      	str	r3, [r7, #12]
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	2b01      	cmp	r3, #1
 8019730:	d9dc      	bls.n	80196ec <inc_lock+0x10>
 8019732:	e000      	b.n	8019736 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8019734:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	2b02      	cmp	r3, #2
 801973a:	d132      	bne.n	80197a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801973c:	2300      	movs	r3, #0
 801973e:	60fb      	str	r3, [r7, #12]
 8019740:	e002      	b.n	8019748 <inc_lock+0x6c>
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	3301      	adds	r3, #1
 8019746:	60fb      	str	r3, [r7, #12]
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	2b01      	cmp	r3, #1
 801974c:	d806      	bhi.n	801975c <inc_lock+0x80>
 801974e:	4a29      	ldr	r2, [pc, #164]	; (80197f4 <inc_lock+0x118>)
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	011b      	lsls	r3, r3, #4
 8019754:	4413      	add	r3, r2
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d1f2      	bne.n	8019742 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801975c:	68fb      	ldr	r3, [r7, #12]
 801975e:	2b02      	cmp	r3, #2
 8019760:	d101      	bne.n	8019766 <inc_lock+0x8a>
 8019762:	2300      	movs	r3, #0
 8019764:	e040      	b.n	80197e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681a      	ldr	r2, [r3, #0]
 801976a:	4922      	ldr	r1, [pc, #136]	; (80197f4 <inc_lock+0x118>)
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	011b      	lsls	r3, r3, #4
 8019770:	440b      	add	r3, r1
 8019772:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	689a      	ldr	r2, [r3, #8]
 8019778:	491e      	ldr	r1, [pc, #120]	; (80197f4 <inc_lock+0x118>)
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	011b      	lsls	r3, r3, #4
 801977e:	440b      	add	r3, r1
 8019780:	3304      	adds	r3, #4
 8019782:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	695a      	ldr	r2, [r3, #20]
 8019788:	491a      	ldr	r1, [pc, #104]	; (80197f4 <inc_lock+0x118>)
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	011b      	lsls	r3, r3, #4
 801978e:	440b      	add	r3, r1
 8019790:	3308      	adds	r3, #8
 8019792:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8019794:	4a17      	ldr	r2, [pc, #92]	; (80197f4 <inc_lock+0x118>)
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	011b      	lsls	r3, r3, #4
 801979a:	4413      	add	r3, r2
 801979c:	330c      	adds	r3, #12
 801979e:	2200      	movs	r2, #0
 80197a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80197a2:	683b      	ldr	r3, [r7, #0]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d009      	beq.n	80197bc <inc_lock+0xe0>
 80197a8:	4a12      	ldr	r2, [pc, #72]	; (80197f4 <inc_lock+0x118>)
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	011b      	lsls	r3, r3, #4
 80197ae:	4413      	add	r3, r2
 80197b0:	330c      	adds	r3, #12
 80197b2:	881b      	ldrh	r3, [r3, #0]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d001      	beq.n	80197bc <inc_lock+0xe0>
 80197b8:	2300      	movs	r3, #0
 80197ba:	e015      	b.n	80197e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80197bc:	683b      	ldr	r3, [r7, #0]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d108      	bne.n	80197d4 <inc_lock+0xf8>
 80197c2:	4a0c      	ldr	r2, [pc, #48]	; (80197f4 <inc_lock+0x118>)
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	011b      	lsls	r3, r3, #4
 80197c8:	4413      	add	r3, r2
 80197ca:	330c      	adds	r3, #12
 80197cc:	881b      	ldrh	r3, [r3, #0]
 80197ce:	3301      	adds	r3, #1
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	e001      	b.n	80197d8 <inc_lock+0xfc>
 80197d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80197d8:	4906      	ldr	r1, [pc, #24]	; (80197f4 <inc_lock+0x118>)
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	011b      	lsls	r3, r3, #4
 80197de:	440b      	add	r3, r1
 80197e0:	330c      	adds	r3, #12
 80197e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	3301      	adds	r3, #1
}
 80197e8:	4618      	mov	r0, r3
 80197ea:	3714      	adds	r7, #20
 80197ec:	46bd      	mov	sp, r7
 80197ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f2:	4770      	bx	lr
 80197f4:	2000b350 	.word	0x2000b350

080197f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80197f8:	b480      	push	{r7}
 80197fa:	b085      	sub	sp, #20
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	3b01      	subs	r3, #1
 8019804:	607b      	str	r3, [r7, #4]
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	2b01      	cmp	r3, #1
 801980a:	d825      	bhi.n	8019858 <dec_lock+0x60>
		n = Files[i].ctr;
 801980c:	4a17      	ldr	r2, [pc, #92]	; (801986c <dec_lock+0x74>)
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	011b      	lsls	r3, r3, #4
 8019812:	4413      	add	r3, r2
 8019814:	330c      	adds	r3, #12
 8019816:	881b      	ldrh	r3, [r3, #0]
 8019818:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801981a:	89fb      	ldrh	r3, [r7, #14]
 801981c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019820:	d101      	bne.n	8019826 <dec_lock+0x2e>
 8019822:	2300      	movs	r3, #0
 8019824:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8019826:	89fb      	ldrh	r3, [r7, #14]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d002      	beq.n	8019832 <dec_lock+0x3a>
 801982c:	89fb      	ldrh	r3, [r7, #14]
 801982e:	3b01      	subs	r3, #1
 8019830:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8019832:	4a0e      	ldr	r2, [pc, #56]	; (801986c <dec_lock+0x74>)
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	011b      	lsls	r3, r3, #4
 8019838:	4413      	add	r3, r2
 801983a:	330c      	adds	r3, #12
 801983c:	89fa      	ldrh	r2, [r7, #14]
 801983e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8019840:	89fb      	ldrh	r3, [r7, #14]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d105      	bne.n	8019852 <dec_lock+0x5a>
 8019846:	4a09      	ldr	r2, [pc, #36]	; (801986c <dec_lock+0x74>)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	011b      	lsls	r3, r3, #4
 801984c:	4413      	add	r3, r2
 801984e:	2200      	movs	r2, #0
 8019850:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8019852:	2300      	movs	r3, #0
 8019854:	737b      	strb	r3, [r7, #13]
 8019856:	e001      	b.n	801985c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8019858:	2302      	movs	r3, #2
 801985a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801985c:	7b7b      	ldrb	r3, [r7, #13]
}
 801985e:	4618      	mov	r0, r3
 8019860:	3714      	adds	r7, #20
 8019862:	46bd      	mov	sp, r7
 8019864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019868:	4770      	bx	lr
 801986a:	bf00      	nop
 801986c:	2000b350 	.word	0x2000b350

08019870 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8019870:	b480      	push	{r7}
 8019872:	b085      	sub	sp, #20
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8019878:	2300      	movs	r3, #0
 801987a:	60fb      	str	r3, [r7, #12]
 801987c:	e010      	b.n	80198a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801987e:	4a0d      	ldr	r2, [pc, #52]	; (80198b4 <clear_lock+0x44>)
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	011b      	lsls	r3, r3, #4
 8019884:	4413      	add	r3, r2
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	687a      	ldr	r2, [r7, #4]
 801988a:	429a      	cmp	r2, r3
 801988c:	d105      	bne.n	801989a <clear_lock+0x2a>
 801988e:	4a09      	ldr	r2, [pc, #36]	; (80198b4 <clear_lock+0x44>)
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	011b      	lsls	r3, r3, #4
 8019894:	4413      	add	r3, r2
 8019896:	2200      	movs	r2, #0
 8019898:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	3301      	adds	r3, #1
 801989e:	60fb      	str	r3, [r7, #12]
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	2b01      	cmp	r3, #1
 80198a4:	d9eb      	bls.n	801987e <clear_lock+0xe>
	}
}
 80198a6:	bf00      	nop
 80198a8:	bf00      	nop
 80198aa:	3714      	adds	r7, #20
 80198ac:	46bd      	mov	sp, r7
 80198ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b2:	4770      	bx	lr
 80198b4:	2000b350 	.word	0x2000b350

080198b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b086      	sub	sp, #24
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80198c0:	2300      	movs	r3, #0
 80198c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	78db      	ldrb	r3, [r3, #3]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d034      	beq.n	8019936 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	7858      	ldrb	r0, [r3, #1]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80198dc:	2301      	movs	r3, #1
 80198de:	697a      	ldr	r2, [r7, #20]
 80198e0:	f7ff fd38 	bl	8019354 <disk_write>
 80198e4:	4603      	mov	r3, r0
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d002      	beq.n	80198f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80198ea:	2301      	movs	r3, #1
 80198ec:	73fb      	strb	r3, [r7, #15]
 80198ee:	e022      	b.n	8019936 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	2200      	movs	r2, #0
 80198f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fa:	697a      	ldr	r2, [r7, #20]
 80198fc:	1ad2      	subs	r2, r2, r3
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	69db      	ldr	r3, [r3, #28]
 8019902:	429a      	cmp	r2, r3
 8019904:	d217      	bcs.n	8019936 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	789b      	ldrb	r3, [r3, #2]
 801990a:	613b      	str	r3, [r7, #16]
 801990c:	e010      	b.n	8019930 <sync_window+0x78>
					wsect += fs->fsize;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	69db      	ldr	r3, [r3, #28]
 8019912:	697a      	ldr	r2, [r7, #20]
 8019914:	4413      	add	r3, r2
 8019916:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	7858      	ldrb	r0, [r3, #1]
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019922:	2301      	movs	r3, #1
 8019924:	697a      	ldr	r2, [r7, #20]
 8019926:	f7ff fd15 	bl	8019354 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801992a:	693b      	ldr	r3, [r7, #16]
 801992c:	3b01      	subs	r3, #1
 801992e:	613b      	str	r3, [r7, #16]
 8019930:	693b      	ldr	r3, [r7, #16]
 8019932:	2b01      	cmp	r3, #1
 8019934:	d8eb      	bhi.n	801990e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8019936:	7bfb      	ldrb	r3, [r7, #15]
}
 8019938:	4618      	mov	r0, r3
 801993a:	3718      	adds	r7, #24
 801993c:	46bd      	mov	sp, r7
 801993e:	bd80      	pop	{r7, pc}

08019940 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b084      	sub	sp, #16
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
 8019948:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801994a:	2300      	movs	r3, #0
 801994c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019952:	683a      	ldr	r2, [r7, #0]
 8019954:	429a      	cmp	r2, r3
 8019956:	d01b      	beq.n	8019990 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8019958:	6878      	ldr	r0, [r7, #4]
 801995a:	f7ff ffad 	bl	80198b8 <sync_window>
 801995e:	4603      	mov	r3, r0
 8019960:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8019962:	7bfb      	ldrb	r3, [r7, #15]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d113      	bne.n	8019990 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	7858      	ldrb	r0, [r3, #1]
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019972:	2301      	movs	r3, #1
 8019974:	683a      	ldr	r2, [r7, #0]
 8019976:	f7ff fccd 	bl	8019314 <disk_read>
 801997a:	4603      	mov	r3, r0
 801997c:	2b00      	cmp	r3, #0
 801997e:	d004      	beq.n	801998a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8019980:	f04f 33ff 	mov.w	r3, #4294967295
 8019984:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8019986:	2301      	movs	r3, #1
 8019988:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	683a      	ldr	r2, [r7, #0]
 801998e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8019990:	7bfb      	ldrb	r3, [r7, #15]
}
 8019992:	4618      	mov	r0, r3
 8019994:	3710      	adds	r7, #16
 8019996:	46bd      	mov	sp, r7
 8019998:	bd80      	pop	{r7, pc}
	...

0801999c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b084      	sub	sp, #16
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f7ff ff87 	bl	80198b8 <sync_window>
 80199aa:	4603      	mov	r3, r0
 80199ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80199ae:	7bfb      	ldrb	r3, [r7, #15]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d158      	bne.n	8019a66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	2b03      	cmp	r3, #3
 80199ba:	d148      	bne.n	8019a4e <sync_fs+0xb2>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	791b      	ldrb	r3, [r3, #4]
 80199c0:	2b01      	cmp	r3, #1
 80199c2:	d144      	bne.n	8019a4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	3334      	adds	r3, #52	; 0x34
 80199c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80199cc:	2100      	movs	r1, #0
 80199ce:	4618      	mov	r0, r3
 80199d0:	f7ff fda9 	bl	8019526 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	3334      	adds	r3, #52	; 0x34
 80199d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80199dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7ff fd38 	bl	8019456 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	3334      	adds	r3, #52	; 0x34
 80199ea:	4921      	ldr	r1, [pc, #132]	; (8019a70 <sync_fs+0xd4>)
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7ff fd4d 	bl	801948c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	3334      	adds	r3, #52	; 0x34
 80199f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80199fa:	491e      	ldr	r1, [pc, #120]	; (8019a74 <sync_fs+0xd8>)
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7ff fd45 	bl	801948c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	3334      	adds	r3, #52	; 0x34
 8019a06:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	695b      	ldr	r3, [r3, #20]
 8019a0e:	4619      	mov	r1, r3
 8019a10:	4610      	mov	r0, r2
 8019a12:	f7ff fd3b 	bl	801948c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	3334      	adds	r3, #52	; 0x34
 8019a1a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	691b      	ldr	r3, [r3, #16]
 8019a22:	4619      	mov	r1, r3
 8019a24:	4610      	mov	r0, r2
 8019a26:	f7ff fd31 	bl	801948c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	6a1b      	ldr	r3, [r3, #32]
 8019a2e:	1c5a      	adds	r2, r3, #1
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	7858      	ldrb	r0, [r3, #1]
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019a42:	2301      	movs	r3, #1
 8019a44:	f7ff fc86 	bl	8019354 <disk_write>
			fs->fsi_flag = 0;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	785b      	ldrb	r3, [r3, #1]
 8019a52:	2200      	movs	r2, #0
 8019a54:	2100      	movs	r1, #0
 8019a56:	4618      	mov	r0, r3
 8019a58:	f7ff fc9c 	bl	8019394 <disk_ioctl>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d001      	beq.n	8019a66 <sync_fs+0xca>
 8019a62:	2301      	movs	r3, #1
 8019a64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8019a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	3710      	adds	r7, #16
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	41615252 	.word	0x41615252
 8019a74:	61417272 	.word	0x61417272

08019a78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8019a78:	b480      	push	{r7}
 8019a7a:	b083      	sub	sp, #12
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
 8019a80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	3b02      	subs	r3, #2
 8019a86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	699b      	ldr	r3, [r3, #24]
 8019a8c:	3b02      	subs	r3, #2
 8019a8e:	683a      	ldr	r2, [r7, #0]
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d301      	bcc.n	8019a98 <clust2sect+0x20>
 8019a94:	2300      	movs	r3, #0
 8019a96:	e008      	b.n	8019aaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	895b      	ldrh	r3, [r3, #10]
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	fb03 f202 	mul.w	r2, r3, r2
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019aa8:	4413      	add	r3, r2
}
 8019aaa:	4618      	mov	r0, r3
 8019aac:	370c      	adds	r7, #12
 8019aae:	46bd      	mov	sp, r7
 8019ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab4:	4770      	bx	lr

08019ab6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8019ab6:	b580      	push	{r7, lr}
 8019ab8:	b086      	sub	sp, #24
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	6078      	str	r0, [r7, #4]
 8019abe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	2b01      	cmp	r3, #1
 8019aca:	d904      	bls.n	8019ad6 <get_fat+0x20>
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	699b      	ldr	r3, [r3, #24]
 8019ad0:	683a      	ldr	r2, [r7, #0]
 8019ad2:	429a      	cmp	r2, r3
 8019ad4:	d302      	bcc.n	8019adc <get_fat+0x26>
		val = 1;	/* Internal error */
 8019ad6:	2301      	movs	r3, #1
 8019ad8:	617b      	str	r3, [r7, #20]
 8019ada:	e08f      	b.n	8019bfc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8019adc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ae0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	781b      	ldrb	r3, [r3, #0]
 8019ae6:	2b03      	cmp	r3, #3
 8019ae8:	d062      	beq.n	8019bb0 <get_fat+0xfa>
 8019aea:	2b03      	cmp	r3, #3
 8019aec:	dc7c      	bgt.n	8019be8 <get_fat+0x132>
 8019aee:	2b01      	cmp	r3, #1
 8019af0:	d002      	beq.n	8019af8 <get_fat+0x42>
 8019af2:	2b02      	cmp	r3, #2
 8019af4:	d042      	beq.n	8019b7c <get_fat+0xc6>
 8019af6:	e077      	b.n	8019be8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	60fb      	str	r3, [r7, #12]
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	085b      	lsrs	r3, r3, #1
 8019b00:	68fa      	ldr	r2, [r7, #12]
 8019b02:	4413      	add	r3, r2
 8019b04:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019b06:	693b      	ldr	r3, [r7, #16]
 8019b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	0a5b      	lsrs	r3, r3, #9
 8019b0e:	4413      	add	r3, r2
 8019b10:	4619      	mov	r1, r3
 8019b12:	6938      	ldr	r0, [r7, #16]
 8019b14:	f7ff ff14 	bl	8019940 <move_window>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d167      	bne.n	8019bee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	1c5a      	adds	r2, r3, #1
 8019b22:	60fa      	str	r2, [r7, #12]
 8019b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b28:	693a      	ldr	r2, [r7, #16]
 8019b2a:	4413      	add	r3, r2
 8019b2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019b32:	693b      	ldr	r3, [r7, #16]
 8019b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	0a5b      	lsrs	r3, r3, #9
 8019b3a:	4413      	add	r3, r2
 8019b3c:	4619      	mov	r1, r3
 8019b3e:	6938      	ldr	r0, [r7, #16]
 8019b40:	f7ff fefe 	bl	8019940 <move_window>
 8019b44:	4603      	mov	r3, r0
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d153      	bne.n	8019bf2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019b50:	693a      	ldr	r2, [r7, #16]
 8019b52:	4413      	add	r3, r2
 8019b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019b58:	021b      	lsls	r3, r3, #8
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	68bb      	ldr	r3, [r7, #8]
 8019b5e:	4313      	orrs	r3, r2
 8019b60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	f003 0301 	and.w	r3, r3, #1
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d002      	beq.n	8019b72 <get_fat+0xbc>
 8019b6c:	68bb      	ldr	r3, [r7, #8]
 8019b6e:	091b      	lsrs	r3, r3, #4
 8019b70:	e002      	b.n	8019b78 <get_fat+0xc2>
 8019b72:	68bb      	ldr	r3, [r7, #8]
 8019b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019b78:	617b      	str	r3, [r7, #20]
			break;
 8019b7a:	e03f      	b.n	8019bfc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019b7c:	693b      	ldr	r3, [r7, #16]
 8019b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b80:	683b      	ldr	r3, [r7, #0]
 8019b82:	0a1b      	lsrs	r3, r3, #8
 8019b84:	4413      	add	r3, r2
 8019b86:	4619      	mov	r1, r3
 8019b88:	6938      	ldr	r0, [r7, #16]
 8019b8a:	f7ff fed9 	bl	8019940 <move_window>
 8019b8e:	4603      	mov	r3, r0
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d130      	bne.n	8019bf6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	005b      	lsls	r3, r3, #1
 8019b9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8019ba2:	4413      	add	r3, r2
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	f7ff fc1b 	bl	80193e0 <ld_word>
 8019baa:	4603      	mov	r3, r0
 8019bac:	617b      	str	r3, [r7, #20]
			break;
 8019bae:	e025      	b.n	8019bfc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019bb0:	693b      	ldr	r3, [r7, #16]
 8019bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019bb4:	683b      	ldr	r3, [r7, #0]
 8019bb6:	09db      	lsrs	r3, r3, #7
 8019bb8:	4413      	add	r3, r2
 8019bba:	4619      	mov	r1, r3
 8019bbc:	6938      	ldr	r0, [r7, #16]
 8019bbe:	f7ff febf 	bl	8019940 <move_window>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d118      	bne.n	8019bfa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8019bc8:	693b      	ldr	r3, [r7, #16]
 8019bca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	009b      	lsls	r3, r3, #2
 8019bd2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8019bd6:	4413      	add	r3, r2
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7ff fc19 	bl	8019410 <ld_dword>
 8019bde:	4603      	mov	r3, r0
 8019be0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8019be4:	617b      	str	r3, [r7, #20]
			break;
 8019be6:	e009      	b.n	8019bfc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8019be8:	2301      	movs	r3, #1
 8019bea:	617b      	str	r3, [r7, #20]
 8019bec:	e006      	b.n	8019bfc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019bee:	bf00      	nop
 8019bf0:	e004      	b.n	8019bfc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8019bf2:	bf00      	nop
 8019bf4:	e002      	b.n	8019bfc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8019bf6:	bf00      	nop
 8019bf8:	e000      	b.n	8019bfc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8019bfa:	bf00      	nop
		}
	}

	return val;
 8019bfc:	697b      	ldr	r3, [r7, #20]
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3718      	adds	r7, #24
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}

08019c06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8019c06:	b590      	push	{r4, r7, lr}
 8019c08:	b089      	sub	sp, #36	; 0x24
 8019c0a:	af00      	add	r7, sp, #0
 8019c0c:	60f8      	str	r0, [r7, #12]
 8019c0e:	60b9      	str	r1, [r7, #8]
 8019c10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8019c12:	2302      	movs	r3, #2
 8019c14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8019c16:	68bb      	ldr	r3, [r7, #8]
 8019c18:	2b01      	cmp	r3, #1
 8019c1a:	f240 80d2 	bls.w	8019dc2 <put_fat+0x1bc>
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	699b      	ldr	r3, [r3, #24]
 8019c22:	68ba      	ldr	r2, [r7, #8]
 8019c24:	429a      	cmp	r2, r3
 8019c26:	f080 80cc 	bcs.w	8019dc2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	2b03      	cmp	r3, #3
 8019c30:	f000 8096 	beq.w	8019d60 <put_fat+0x15a>
 8019c34:	2b03      	cmp	r3, #3
 8019c36:	f300 80cd 	bgt.w	8019dd4 <put_fat+0x1ce>
 8019c3a:	2b01      	cmp	r3, #1
 8019c3c:	d002      	beq.n	8019c44 <put_fat+0x3e>
 8019c3e:	2b02      	cmp	r3, #2
 8019c40:	d06e      	beq.n	8019d20 <put_fat+0x11a>
 8019c42:	e0c7      	b.n	8019dd4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	61bb      	str	r3, [r7, #24]
 8019c48:	69bb      	ldr	r3, [r7, #24]
 8019c4a:	085b      	lsrs	r3, r3, #1
 8019c4c:	69ba      	ldr	r2, [r7, #24]
 8019c4e:	4413      	add	r3, r2
 8019c50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c56:	69bb      	ldr	r3, [r7, #24]
 8019c58:	0a5b      	lsrs	r3, r3, #9
 8019c5a:	4413      	add	r3, r2
 8019c5c:	4619      	mov	r1, r3
 8019c5e:	68f8      	ldr	r0, [r7, #12]
 8019c60:	f7ff fe6e 	bl	8019940 <move_window>
 8019c64:	4603      	mov	r3, r0
 8019c66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019c68:	7ffb      	ldrb	r3, [r7, #31]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	f040 80ab 	bne.w	8019dc6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	1c59      	adds	r1, r3, #1
 8019c7a:	61b9      	str	r1, [r7, #24]
 8019c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019c80:	4413      	add	r3, r2
 8019c82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	f003 0301 	and.w	r3, r3, #1
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d00d      	beq.n	8019caa <put_fat+0xa4>
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	b25b      	sxtb	r3, r3
 8019c94:	f003 030f 	and.w	r3, r3, #15
 8019c98:	b25a      	sxtb	r2, r3
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	b2db      	uxtb	r3, r3
 8019c9e:	011b      	lsls	r3, r3, #4
 8019ca0:	b25b      	sxtb	r3, r3
 8019ca2:	4313      	orrs	r3, r2
 8019ca4:	b25b      	sxtb	r3, r3
 8019ca6:	b2db      	uxtb	r3, r3
 8019ca8:	e001      	b.n	8019cae <put_fat+0xa8>
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	b2db      	uxtb	r3, r3
 8019cae:	697a      	ldr	r2, [r7, #20]
 8019cb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019cb2:	68fb      	ldr	r3, [r7, #12]
 8019cb4:	2201      	movs	r2, #1
 8019cb6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cbc:	69bb      	ldr	r3, [r7, #24]
 8019cbe:	0a5b      	lsrs	r3, r3, #9
 8019cc0:	4413      	add	r3, r2
 8019cc2:	4619      	mov	r1, r3
 8019cc4:	68f8      	ldr	r0, [r7, #12]
 8019cc6:	f7ff fe3b 	bl	8019940 <move_window>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019cce:	7ffb      	ldrb	r3, [r7, #31]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d17a      	bne.n	8019dca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019cda:	69bb      	ldr	r3, [r7, #24]
 8019cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8019ce0:	4413      	add	r3, r2
 8019ce2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	f003 0301 	and.w	r3, r3, #1
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d003      	beq.n	8019cf6 <put_fat+0xf0>
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	091b      	lsrs	r3, r3, #4
 8019cf2:	b2db      	uxtb	r3, r3
 8019cf4:	e00e      	b.n	8019d14 <put_fat+0x10e>
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	781b      	ldrb	r3, [r3, #0]
 8019cfa:	b25b      	sxtb	r3, r3
 8019cfc:	f023 030f 	bic.w	r3, r3, #15
 8019d00:	b25a      	sxtb	r2, r3
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	0a1b      	lsrs	r3, r3, #8
 8019d06:	b25b      	sxtb	r3, r3
 8019d08:	f003 030f 	and.w	r3, r3, #15
 8019d0c:	b25b      	sxtb	r3, r3
 8019d0e:	4313      	orrs	r3, r2
 8019d10:	b25b      	sxtb	r3, r3
 8019d12:	b2db      	uxtb	r3, r3
 8019d14:	697a      	ldr	r2, [r7, #20]
 8019d16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2201      	movs	r2, #1
 8019d1c:	70da      	strb	r2, [r3, #3]
			break;
 8019d1e:	e059      	b.n	8019dd4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	0a1b      	lsrs	r3, r3, #8
 8019d28:	4413      	add	r3, r2
 8019d2a:	4619      	mov	r1, r3
 8019d2c:	68f8      	ldr	r0, [r7, #12]
 8019d2e:	f7ff fe07 	bl	8019940 <move_window>
 8019d32:	4603      	mov	r3, r0
 8019d34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019d36:	7ffb      	ldrb	r3, [r7, #31]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d148      	bne.n	8019dce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019d42:	68bb      	ldr	r3, [r7, #8]
 8019d44:	005b      	lsls	r3, r3, #1
 8019d46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8019d4a:	4413      	add	r3, r2
 8019d4c:	687a      	ldr	r2, [r7, #4]
 8019d4e:	b292      	uxth	r2, r2
 8019d50:	4611      	mov	r1, r2
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7ff fb7f 	bl	8019456 <st_word>
			fs->wflag = 1;
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	2201      	movs	r2, #1
 8019d5c:	70da      	strb	r2, [r3, #3]
			break;
 8019d5e:	e039      	b.n	8019dd4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019d64:	68bb      	ldr	r3, [r7, #8]
 8019d66:	09db      	lsrs	r3, r3, #7
 8019d68:	4413      	add	r3, r2
 8019d6a:	4619      	mov	r1, r3
 8019d6c:	68f8      	ldr	r0, [r7, #12]
 8019d6e:	f7ff fde7 	bl	8019940 <move_window>
 8019d72:	4603      	mov	r3, r0
 8019d74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8019d76:	7ffb      	ldrb	r3, [r7, #31]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d12a      	bne.n	8019dd2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	009b      	lsls	r3, r3, #2
 8019d8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8019d90:	4413      	add	r3, r2
 8019d92:	4618      	mov	r0, r3
 8019d94:	f7ff fb3c 	bl	8019410 <ld_dword>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8019d9e:	4323      	orrs	r3, r4
 8019da0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8019da8:	68bb      	ldr	r3, [r7, #8]
 8019daa:	009b      	lsls	r3, r3, #2
 8019dac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8019db0:	4413      	add	r3, r2
 8019db2:	6879      	ldr	r1, [r7, #4]
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7ff fb69 	bl	801948c <st_dword>
			fs->wflag = 1;
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	2201      	movs	r2, #1
 8019dbe:	70da      	strb	r2, [r3, #3]
			break;
 8019dc0:	e008      	b.n	8019dd4 <put_fat+0x1ce>
		}
	}
 8019dc2:	bf00      	nop
 8019dc4:	e006      	b.n	8019dd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8019dc6:	bf00      	nop
 8019dc8:	e004      	b.n	8019dd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8019dca:	bf00      	nop
 8019dcc:	e002      	b.n	8019dd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8019dce:	bf00      	nop
 8019dd0:	e000      	b.n	8019dd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8019dd2:	bf00      	nop
	return res;
 8019dd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3724      	adds	r7, #36	; 0x24
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd90      	pop	{r4, r7, pc}

08019dde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8019dde:	b580      	push	{r7, lr}
 8019de0:	b088      	sub	sp, #32
 8019de2:	af00      	add	r7, sp, #0
 8019de4:	60f8      	str	r0, [r7, #12]
 8019de6:	60b9      	str	r1, [r7, #8]
 8019de8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8019dea:	2300      	movs	r3, #0
 8019dec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8019df4:	68bb      	ldr	r3, [r7, #8]
 8019df6:	2b01      	cmp	r3, #1
 8019df8:	d904      	bls.n	8019e04 <remove_chain+0x26>
 8019dfa:	69bb      	ldr	r3, [r7, #24]
 8019dfc:	699b      	ldr	r3, [r3, #24]
 8019dfe:	68ba      	ldr	r2, [r7, #8]
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d301      	bcc.n	8019e08 <remove_chain+0x2a>
 8019e04:	2302      	movs	r3, #2
 8019e06:	e04b      	b.n	8019ea0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d00c      	beq.n	8019e28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8019e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8019e12:	6879      	ldr	r1, [r7, #4]
 8019e14:	69b8      	ldr	r0, [r7, #24]
 8019e16:	f7ff fef6 	bl	8019c06 <put_fat>
 8019e1a:	4603      	mov	r3, r0
 8019e1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8019e1e:	7ffb      	ldrb	r3, [r7, #31]
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d001      	beq.n	8019e28 <remove_chain+0x4a>
 8019e24:	7ffb      	ldrb	r3, [r7, #31]
 8019e26:	e03b      	b.n	8019ea0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8019e28:	68b9      	ldr	r1, [r7, #8]
 8019e2a:	68f8      	ldr	r0, [r7, #12]
 8019e2c:	f7ff fe43 	bl	8019ab6 <get_fat>
 8019e30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8019e32:	697b      	ldr	r3, [r7, #20]
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d031      	beq.n	8019e9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8019e38:	697b      	ldr	r3, [r7, #20]
 8019e3a:	2b01      	cmp	r3, #1
 8019e3c:	d101      	bne.n	8019e42 <remove_chain+0x64>
 8019e3e:	2302      	movs	r3, #2
 8019e40:	e02e      	b.n	8019ea0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e48:	d101      	bne.n	8019e4e <remove_chain+0x70>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e028      	b.n	8019ea0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8019e4e:	2200      	movs	r2, #0
 8019e50:	68b9      	ldr	r1, [r7, #8]
 8019e52:	69b8      	ldr	r0, [r7, #24]
 8019e54:	f7ff fed7 	bl	8019c06 <put_fat>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8019e5c:	7ffb      	ldrb	r3, [r7, #31]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d001      	beq.n	8019e66 <remove_chain+0x88>
 8019e62:	7ffb      	ldrb	r3, [r7, #31]
 8019e64:	e01c      	b.n	8019ea0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8019e66:	69bb      	ldr	r3, [r7, #24]
 8019e68:	695a      	ldr	r2, [r3, #20]
 8019e6a:	69bb      	ldr	r3, [r7, #24]
 8019e6c:	699b      	ldr	r3, [r3, #24]
 8019e6e:	3b02      	subs	r3, #2
 8019e70:	429a      	cmp	r2, r3
 8019e72:	d20b      	bcs.n	8019e8c <remove_chain+0xae>
			fs->free_clst++;
 8019e74:	69bb      	ldr	r3, [r7, #24]
 8019e76:	695b      	ldr	r3, [r3, #20]
 8019e78:	1c5a      	adds	r2, r3, #1
 8019e7a:	69bb      	ldr	r3, [r7, #24]
 8019e7c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8019e7e:	69bb      	ldr	r3, [r7, #24]
 8019e80:	791b      	ldrb	r3, [r3, #4]
 8019e82:	f043 0301 	orr.w	r3, r3, #1
 8019e86:	b2da      	uxtb	r2, r3
 8019e88:	69bb      	ldr	r3, [r7, #24]
 8019e8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8019e8c:	697b      	ldr	r3, [r7, #20]
 8019e8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	699b      	ldr	r3, [r3, #24]
 8019e94:	68ba      	ldr	r2, [r7, #8]
 8019e96:	429a      	cmp	r2, r3
 8019e98:	d3c6      	bcc.n	8019e28 <remove_chain+0x4a>
 8019e9a:	e000      	b.n	8019e9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8019e9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8019e9e:	2300      	movs	r3, #0
}
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	3720      	adds	r7, #32
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bd80      	pop	{r7, pc}

08019ea8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b088      	sub	sp, #32
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
 8019eb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d10d      	bne.n	8019eda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8019ebe:	693b      	ldr	r3, [r7, #16]
 8019ec0:	691b      	ldr	r3, [r3, #16]
 8019ec2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8019ec4:	69bb      	ldr	r3, [r7, #24]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d004      	beq.n	8019ed4 <create_chain+0x2c>
 8019eca:	693b      	ldr	r3, [r7, #16]
 8019ecc:	699b      	ldr	r3, [r3, #24]
 8019ece:	69ba      	ldr	r2, [r7, #24]
 8019ed0:	429a      	cmp	r2, r3
 8019ed2:	d31b      	bcc.n	8019f0c <create_chain+0x64>
 8019ed4:	2301      	movs	r3, #1
 8019ed6:	61bb      	str	r3, [r7, #24]
 8019ed8:	e018      	b.n	8019f0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8019eda:	6839      	ldr	r1, [r7, #0]
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	f7ff fdea 	bl	8019ab6 <get_fat>
 8019ee2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	2b01      	cmp	r3, #1
 8019ee8:	d801      	bhi.n	8019eee <create_chain+0x46>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e070      	b.n	8019fd0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ef4:	d101      	bne.n	8019efa <create_chain+0x52>
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	e06a      	b.n	8019fd0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8019efa:	693b      	ldr	r3, [r7, #16]
 8019efc:	699b      	ldr	r3, [r3, #24]
 8019efe:	68fa      	ldr	r2, [r7, #12]
 8019f00:	429a      	cmp	r2, r3
 8019f02:	d201      	bcs.n	8019f08 <create_chain+0x60>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	e063      	b.n	8019fd0 <create_chain+0x128>
		scl = clst;
 8019f08:	683b      	ldr	r3, [r7, #0]
 8019f0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8019f0c:	69bb      	ldr	r3, [r7, #24]
 8019f0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8019f10:	69fb      	ldr	r3, [r7, #28]
 8019f12:	3301      	adds	r3, #1
 8019f14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	699b      	ldr	r3, [r3, #24]
 8019f1a:	69fa      	ldr	r2, [r7, #28]
 8019f1c:	429a      	cmp	r2, r3
 8019f1e:	d307      	bcc.n	8019f30 <create_chain+0x88>
				ncl = 2;
 8019f20:	2302      	movs	r3, #2
 8019f22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8019f24:	69fa      	ldr	r2, [r7, #28]
 8019f26:	69bb      	ldr	r3, [r7, #24]
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d901      	bls.n	8019f30 <create_chain+0x88>
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	e04f      	b.n	8019fd0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8019f30:	69f9      	ldr	r1, [r7, #28]
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f7ff fdbf 	bl	8019ab6 <get_fat>
 8019f38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d00e      	beq.n	8019f5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	2b01      	cmp	r3, #1
 8019f44:	d003      	beq.n	8019f4e <create_chain+0xa6>
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f4c:	d101      	bne.n	8019f52 <create_chain+0xaa>
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	e03e      	b.n	8019fd0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8019f52:	69fa      	ldr	r2, [r7, #28]
 8019f54:	69bb      	ldr	r3, [r7, #24]
 8019f56:	429a      	cmp	r2, r3
 8019f58:	d1da      	bne.n	8019f10 <create_chain+0x68>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	e038      	b.n	8019fd0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8019f5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8019f60:	f04f 32ff 	mov.w	r2, #4294967295
 8019f64:	69f9      	ldr	r1, [r7, #28]
 8019f66:	6938      	ldr	r0, [r7, #16]
 8019f68:	f7ff fe4d 	bl	8019c06 <put_fat>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8019f70:	7dfb      	ldrb	r3, [r7, #23]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d109      	bne.n	8019f8a <create_chain+0xe2>
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d006      	beq.n	8019f8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8019f7c:	69fa      	ldr	r2, [r7, #28]
 8019f7e:	6839      	ldr	r1, [r7, #0]
 8019f80:	6938      	ldr	r0, [r7, #16]
 8019f82:	f7ff fe40 	bl	8019c06 <put_fat>
 8019f86:	4603      	mov	r3, r0
 8019f88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8019f8a:	7dfb      	ldrb	r3, [r7, #23]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d116      	bne.n	8019fbe <create_chain+0x116>
		fs->last_clst = ncl;
 8019f90:	693b      	ldr	r3, [r7, #16]
 8019f92:	69fa      	ldr	r2, [r7, #28]
 8019f94:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8019f96:	693b      	ldr	r3, [r7, #16]
 8019f98:	695a      	ldr	r2, [r3, #20]
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	699b      	ldr	r3, [r3, #24]
 8019f9e:	3b02      	subs	r3, #2
 8019fa0:	429a      	cmp	r2, r3
 8019fa2:	d804      	bhi.n	8019fae <create_chain+0x106>
 8019fa4:	693b      	ldr	r3, [r7, #16]
 8019fa6:	695b      	ldr	r3, [r3, #20]
 8019fa8:	1e5a      	subs	r2, r3, #1
 8019faa:	693b      	ldr	r3, [r7, #16]
 8019fac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8019fae:	693b      	ldr	r3, [r7, #16]
 8019fb0:	791b      	ldrb	r3, [r3, #4]
 8019fb2:	f043 0301 	orr.w	r3, r3, #1
 8019fb6:	b2da      	uxtb	r2, r3
 8019fb8:	693b      	ldr	r3, [r7, #16]
 8019fba:	711a      	strb	r2, [r3, #4]
 8019fbc:	e007      	b.n	8019fce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8019fbe:	7dfb      	ldrb	r3, [r7, #23]
 8019fc0:	2b01      	cmp	r3, #1
 8019fc2:	d102      	bne.n	8019fca <create_chain+0x122>
 8019fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc8:	e000      	b.n	8019fcc <create_chain+0x124>
 8019fca:	2301      	movs	r3, #1
 8019fcc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8019fce:	69fb      	ldr	r3, [r7, #28]
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	3720      	adds	r7, #32
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}

08019fd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8019fd8:	b480      	push	{r7}
 8019fda:	b087      	sub	sp, #28
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fec:	3304      	adds	r3, #4
 8019fee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	0a5b      	lsrs	r3, r3, #9
 8019ff4:	68fa      	ldr	r2, [r7, #12]
 8019ff6:	8952      	ldrh	r2, [r2, #10]
 8019ff8:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ffc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8019ffe:	693b      	ldr	r3, [r7, #16]
 801a000:	1d1a      	adds	r2, r3, #4
 801a002:	613a      	str	r2, [r7, #16]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801a008:	68bb      	ldr	r3, [r7, #8]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d101      	bne.n	801a012 <clmt_clust+0x3a>
 801a00e:	2300      	movs	r3, #0
 801a010:	e010      	b.n	801a034 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801a012:	697a      	ldr	r2, [r7, #20]
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	429a      	cmp	r2, r3
 801a018:	d307      	bcc.n	801a02a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801a01a:	697a      	ldr	r2, [r7, #20]
 801a01c:	68bb      	ldr	r3, [r7, #8]
 801a01e:	1ad3      	subs	r3, r2, r3
 801a020:	617b      	str	r3, [r7, #20]
 801a022:	693b      	ldr	r3, [r7, #16]
 801a024:	3304      	adds	r3, #4
 801a026:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801a028:	e7e9      	b.n	8019ffe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801a02a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801a02c:	693b      	ldr	r3, [r7, #16]
 801a02e:	681a      	ldr	r2, [r3, #0]
 801a030:	697b      	ldr	r3, [r7, #20]
 801a032:	4413      	add	r3, r2
}
 801a034:	4618      	mov	r0, r3
 801a036:	371c      	adds	r7, #28
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr

0801a040 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b086      	sub	sp, #24
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801a050:	683b      	ldr	r3, [r7, #0]
 801a052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a056:	d204      	bcs.n	801a062 <dir_sdi+0x22>
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	f003 031f 	and.w	r3, r3, #31
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d001      	beq.n	801a066 <dir_sdi+0x26>
		return FR_INT_ERR;
 801a062:	2302      	movs	r3, #2
 801a064:	e063      	b.n	801a12e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	683a      	ldr	r2, [r7, #0]
 801a06a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	689b      	ldr	r3, [r3, #8]
 801a070:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d106      	bne.n	801a086 <dir_sdi+0x46>
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	781b      	ldrb	r3, [r3, #0]
 801a07c:	2b02      	cmp	r3, #2
 801a07e:	d902      	bls.n	801a086 <dir_sdi+0x46>
		clst = fs->dirbase;
 801a080:	693b      	ldr	r3, [r7, #16]
 801a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a084:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d10c      	bne.n	801a0a6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	095b      	lsrs	r3, r3, #5
 801a090:	693a      	ldr	r2, [r7, #16]
 801a092:	8912      	ldrh	r2, [r2, #8]
 801a094:	4293      	cmp	r3, r2
 801a096:	d301      	bcc.n	801a09c <dir_sdi+0x5c>
 801a098:	2302      	movs	r3, #2
 801a09a:	e048      	b.n	801a12e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801a09c:	693b      	ldr	r3, [r7, #16]
 801a09e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	61da      	str	r2, [r3, #28]
 801a0a4:	e029      	b.n	801a0fa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801a0a6:	693b      	ldr	r3, [r7, #16]
 801a0a8:	895b      	ldrh	r3, [r3, #10]
 801a0aa:	025b      	lsls	r3, r3, #9
 801a0ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a0ae:	e019      	b.n	801a0e4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6979      	ldr	r1, [r7, #20]
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7ff fcfe 	bl	8019ab6 <get_fat>
 801a0ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a0bc:	697b      	ldr	r3, [r7, #20]
 801a0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0c2:	d101      	bne.n	801a0c8 <dir_sdi+0x88>
 801a0c4:	2301      	movs	r3, #1
 801a0c6:	e032      	b.n	801a12e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801a0c8:	697b      	ldr	r3, [r7, #20]
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d904      	bls.n	801a0d8 <dir_sdi+0x98>
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	699b      	ldr	r3, [r3, #24]
 801a0d2:	697a      	ldr	r2, [r7, #20]
 801a0d4:	429a      	cmp	r2, r3
 801a0d6:	d301      	bcc.n	801a0dc <dir_sdi+0x9c>
 801a0d8:	2302      	movs	r3, #2
 801a0da:	e028      	b.n	801a12e <dir_sdi+0xee>
			ofs -= csz;
 801a0dc:	683a      	ldr	r2, [r7, #0]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	1ad3      	subs	r3, r2, r3
 801a0e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801a0e4:	683a      	ldr	r2, [r7, #0]
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	429a      	cmp	r2, r3
 801a0ea:	d2e1      	bcs.n	801a0b0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801a0ec:	6979      	ldr	r1, [r7, #20]
 801a0ee:	6938      	ldr	r0, [r7, #16]
 801a0f0:	f7ff fcc2 	bl	8019a78 <clust2sect>
 801a0f4:	4602      	mov	r2, r0
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	697a      	ldr	r2, [r7, #20]
 801a0fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	69db      	ldr	r3, [r3, #28]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d101      	bne.n	801a10c <dir_sdi+0xcc>
 801a108:	2302      	movs	r3, #2
 801a10a:	e010      	b.n	801a12e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	69da      	ldr	r2, [r3, #28]
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	0a5b      	lsrs	r3, r3, #9
 801a114:	441a      	add	r2, r3
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801a11a:	693b      	ldr	r3, [r7, #16]
 801a11c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a120:	683b      	ldr	r3, [r7, #0]
 801a122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a126:	441a      	add	r2, r3
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a12c:	2300      	movs	r3, #0
}
 801a12e:	4618      	mov	r0, r3
 801a130:	3718      	adds	r7, #24
 801a132:	46bd      	mov	sp, r7
 801a134:	bd80      	pop	{r7, pc}

0801a136 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801a136:	b580      	push	{r7, lr}
 801a138:	b086      	sub	sp, #24
 801a13a:	af00      	add	r7, sp, #0
 801a13c:	6078      	str	r0, [r7, #4]
 801a13e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	695b      	ldr	r3, [r3, #20]
 801a14a:	3320      	adds	r3, #32
 801a14c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	69db      	ldr	r3, [r3, #28]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d003      	beq.n	801a15e <dir_next+0x28>
 801a156:	68bb      	ldr	r3, [r7, #8]
 801a158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801a15c:	d301      	bcc.n	801a162 <dir_next+0x2c>
 801a15e:	2304      	movs	r3, #4
 801a160:	e0aa      	b.n	801a2b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a168:	2b00      	cmp	r3, #0
 801a16a:	f040 8098 	bne.w	801a29e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	69db      	ldr	r3, [r3, #28]
 801a172:	1c5a      	adds	r2, r3, #1
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	699b      	ldr	r3, [r3, #24]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d10b      	bne.n	801a198 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	095b      	lsrs	r3, r3, #5
 801a184:	68fa      	ldr	r2, [r7, #12]
 801a186:	8912      	ldrh	r2, [r2, #8]
 801a188:	4293      	cmp	r3, r2
 801a18a:	f0c0 8088 	bcc.w	801a29e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2200      	movs	r2, #0
 801a192:	61da      	str	r2, [r3, #28]
 801a194:	2304      	movs	r3, #4
 801a196:	e08f      	b.n	801a2b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	0a5b      	lsrs	r3, r3, #9
 801a19c:	68fa      	ldr	r2, [r7, #12]
 801a19e:	8952      	ldrh	r2, [r2, #10]
 801a1a0:	3a01      	subs	r2, #1
 801a1a2:	4013      	ands	r3, r2
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	d17a      	bne.n	801a29e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801a1a8:	687a      	ldr	r2, [r7, #4]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	699b      	ldr	r3, [r3, #24]
 801a1ae:	4619      	mov	r1, r3
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	f7ff fc80 	bl	8019ab6 <get_fat>
 801a1b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	2b01      	cmp	r3, #1
 801a1bc:	d801      	bhi.n	801a1c2 <dir_next+0x8c>
 801a1be:	2302      	movs	r3, #2
 801a1c0:	e07a      	b.n	801a2b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1c8:	d101      	bne.n	801a1ce <dir_next+0x98>
 801a1ca:	2301      	movs	r3, #1
 801a1cc:	e074      	b.n	801a2b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	699b      	ldr	r3, [r3, #24]
 801a1d2:	697a      	ldr	r2, [r7, #20]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d358      	bcc.n	801a28a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d104      	bne.n	801a1e8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	61da      	str	r2, [r3, #28]
 801a1e4:	2304      	movs	r3, #4
 801a1e6:	e067      	b.n	801a2b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801a1e8:	687a      	ldr	r2, [r7, #4]
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	699b      	ldr	r3, [r3, #24]
 801a1ee:	4619      	mov	r1, r3
 801a1f0:	4610      	mov	r0, r2
 801a1f2:	f7ff fe59 	bl	8019ea8 <create_chain>
 801a1f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d101      	bne.n	801a202 <dir_next+0xcc>
 801a1fe:	2307      	movs	r3, #7
 801a200:	e05a      	b.n	801a2b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801a202:	697b      	ldr	r3, [r7, #20]
 801a204:	2b01      	cmp	r3, #1
 801a206:	d101      	bne.n	801a20c <dir_next+0xd6>
 801a208:	2302      	movs	r3, #2
 801a20a:	e055      	b.n	801a2b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801a20c:	697b      	ldr	r3, [r7, #20]
 801a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a212:	d101      	bne.n	801a218 <dir_next+0xe2>
 801a214:	2301      	movs	r3, #1
 801a216:	e04f      	b.n	801a2b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801a218:	68f8      	ldr	r0, [r7, #12]
 801a21a:	f7ff fb4d 	bl	80198b8 <sync_window>
 801a21e:	4603      	mov	r3, r0
 801a220:	2b00      	cmp	r3, #0
 801a222:	d001      	beq.n	801a228 <dir_next+0xf2>
 801a224:	2301      	movs	r3, #1
 801a226:	e047      	b.n	801a2b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	3334      	adds	r3, #52	; 0x34
 801a22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a230:	2100      	movs	r1, #0
 801a232:	4618      	mov	r0, r3
 801a234:	f7ff f977 	bl	8019526 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a238:	2300      	movs	r3, #0
 801a23a:	613b      	str	r3, [r7, #16]
 801a23c:	6979      	ldr	r1, [r7, #20]
 801a23e:	68f8      	ldr	r0, [r7, #12]
 801a240:	f7ff fc1a 	bl	8019a78 <clust2sect>
 801a244:	4602      	mov	r2, r0
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	631a      	str	r2, [r3, #48]	; 0x30
 801a24a:	e012      	b.n	801a272 <dir_next+0x13c>
						fs->wflag = 1;
 801a24c:	68fb      	ldr	r3, [r7, #12]
 801a24e:	2201      	movs	r2, #1
 801a250:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801a252:	68f8      	ldr	r0, [r7, #12]
 801a254:	f7ff fb30 	bl	80198b8 <sync_window>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d001      	beq.n	801a262 <dir_next+0x12c>
 801a25e:	2301      	movs	r3, #1
 801a260:	e02a      	b.n	801a2b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801a262:	693b      	ldr	r3, [r7, #16]
 801a264:	3301      	adds	r3, #1
 801a266:	613b      	str	r3, [r7, #16]
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a26c:	1c5a      	adds	r2, r3, #1
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	631a      	str	r2, [r3, #48]	; 0x30
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	895b      	ldrh	r3, [r3, #10]
 801a276:	461a      	mov	r2, r3
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	4293      	cmp	r3, r2
 801a27c:	d3e6      	bcc.n	801a24c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a282:	693b      	ldr	r3, [r7, #16]
 801a284:	1ad2      	subs	r2, r2, r3
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	697a      	ldr	r2, [r7, #20]
 801a28e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801a290:	6979      	ldr	r1, [r7, #20]
 801a292:	68f8      	ldr	r0, [r7, #12]
 801a294:	f7ff fbf0 	bl	8019a78 <clust2sect>
 801a298:	4602      	mov	r2, r0
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	68ba      	ldr	r2, [r7, #8]
 801a2a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a2aa:	68bb      	ldr	r3, [r7, #8]
 801a2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801a2b0:	441a      	add	r2, r3
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801a2b6:	2300      	movs	r3, #0
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	3718      	adds	r7, #24
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}

0801a2c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b086      	sub	sp, #24
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801a2d0:	2100      	movs	r1, #0
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	f7ff feb4 	bl	801a040 <dir_sdi>
 801a2d8:	4603      	mov	r3, r0
 801a2da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801a2dc:	7dfb      	ldrb	r3, [r7, #23]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d12b      	bne.n	801a33a <dir_alloc+0x7a>
		n = 0;
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	69db      	ldr	r3, [r3, #28]
 801a2ea:	4619      	mov	r1, r3
 801a2ec:	68f8      	ldr	r0, [r7, #12]
 801a2ee:	f7ff fb27 	bl	8019940 <move_window>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801a2f6:	7dfb      	ldrb	r3, [r7, #23]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d11d      	bne.n	801a338 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	6a1b      	ldr	r3, [r3, #32]
 801a300:	781b      	ldrb	r3, [r3, #0]
 801a302:	2be5      	cmp	r3, #229	; 0xe5
 801a304:	d004      	beq.n	801a310 <dir_alloc+0x50>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6a1b      	ldr	r3, [r3, #32]
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d107      	bne.n	801a320 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801a310:	693b      	ldr	r3, [r7, #16]
 801a312:	3301      	adds	r3, #1
 801a314:	613b      	str	r3, [r7, #16]
 801a316:	693a      	ldr	r2, [r7, #16]
 801a318:	683b      	ldr	r3, [r7, #0]
 801a31a:	429a      	cmp	r2, r3
 801a31c:	d102      	bne.n	801a324 <dir_alloc+0x64>
 801a31e:	e00c      	b.n	801a33a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801a320:	2300      	movs	r3, #0
 801a322:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801a324:	2101      	movs	r1, #1
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f7ff ff05 	bl	801a136 <dir_next>
 801a32c:	4603      	mov	r3, r0
 801a32e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801a330:	7dfb      	ldrb	r3, [r7, #23]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d0d7      	beq.n	801a2e6 <dir_alloc+0x26>
 801a336:	e000      	b.n	801a33a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801a338:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801a33a:	7dfb      	ldrb	r3, [r7, #23]
 801a33c:	2b04      	cmp	r3, #4
 801a33e:	d101      	bne.n	801a344 <dir_alloc+0x84>
 801a340:	2307      	movs	r3, #7
 801a342:	75fb      	strb	r3, [r7, #23]
	return res;
 801a344:	7dfb      	ldrb	r3, [r7, #23]
}
 801a346:	4618      	mov	r0, r3
 801a348:	3718      	adds	r7, #24
 801a34a:	46bd      	mov	sp, r7
 801a34c:	bd80      	pop	{r7, pc}

0801a34e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801a34e:	b580      	push	{r7, lr}
 801a350:	b084      	sub	sp, #16
 801a352:	af00      	add	r7, sp, #0
 801a354:	6078      	str	r0, [r7, #4]
 801a356:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	331a      	adds	r3, #26
 801a35c:	4618      	mov	r0, r3
 801a35e:	f7ff f83f 	bl	80193e0 <ld_word>
 801a362:	4603      	mov	r3, r0
 801a364:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	781b      	ldrb	r3, [r3, #0]
 801a36a:	2b03      	cmp	r3, #3
 801a36c:	d109      	bne.n	801a382 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a36e:	683b      	ldr	r3, [r7, #0]
 801a370:	3314      	adds	r3, #20
 801a372:	4618      	mov	r0, r3
 801a374:	f7ff f834 	bl	80193e0 <ld_word>
 801a378:	4603      	mov	r3, r0
 801a37a:	041b      	lsls	r3, r3, #16
 801a37c:	68fa      	ldr	r2, [r7, #12]
 801a37e:	4313      	orrs	r3, r2
 801a380:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801a382:	68fb      	ldr	r3, [r7, #12]
}
 801a384:	4618      	mov	r0, r3
 801a386:	3710      	adds	r7, #16
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}

0801a38c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b084      	sub	sp, #16
 801a390:	af00      	add	r7, sp, #0
 801a392:	60f8      	str	r0, [r7, #12]
 801a394:	60b9      	str	r1, [r7, #8]
 801a396:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801a398:	68bb      	ldr	r3, [r7, #8]
 801a39a:	331a      	adds	r3, #26
 801a39c:	687a      	ldr	r2, [r7, #4]
 801a39e:	b292      	uxth	r2, r2
 801a3a0:	4611      	mov	r1, r2
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	f7ff f857 	bl	8019456 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801a3a8:	68fb      	ldr	r3, [r7, #12]
 801a3aa:	781b      	ldrb	r3, [r3, #0]
 801a3ac:	2b03      	cmp	r3, #3
 801a3ae:	d109      	bne.n	801a3c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801a3b0:	68bb      	ldr	r3, [r7, #8]
 801a3b2:	f103 0214 	add.w	r2, r3, #20
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	0c1b      	lsrs	r3, r3, #16
 801a3ba:	b29b      	uxth	r3, r3
 801a3bc:	4619      	mov	r1, r3
 801a3be:	4610      	mov	r0, r2
 801a3c0:	f7ff f849 	bl	8019456 <st_word>
	}
}
 801a3c4:	bf00      	nop
 801a3c6:	3710      	adds	r7, #16
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}

0801a3cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801a3cc:	b590      	push	{r4, r7, lr}
 801a3ce:	b087      	sub	sp, #28
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
 801a3d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	331a      	adds	r3, #26
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7ff f800 	bl	80193e0 <ld_word>
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d001      	beq.n	801a3ea <cmp_lfn+0x1e>
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	e059      	b.n	801a49e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801a3ea:	683b      	ldr	r3, [r7, #0]
 801a3ec:	781b      	ldrb	r3, [r3, #0]
 801a3ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3f2:	1e5a      	subs	r2, r3, #1
 801a3f4:	4613      	mov	r3, r2
 801a3f6:	005b      	lsls	r3, r3, #1
 801a3f8:	4413      	add	r3, r2
 801a3fa:	009b      	lsls	r3, r3, #2
 801a3fc:	4413      	add	r3, r2
 801a3fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a400:	2301      	movs	r3, #1
 801a402:	81fb      	strh	r3, [r7, #14]
 801a404:	2300      	movs	r3, #0
 801a406:	613b      	str	r3, [r7, #16]
 801a408:	e033      	b.n	801a472 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a40a:	4a27      	ldr	r2, [pc, #156]	; (801a4a8 <cmp_lfn+0xdc>)
 801a40c:	693b      	ldr	r3, [r7, #16]
 801a40e:	4413      	add	r3, r2
 801a410:	781b      	ldrb	r3, [r3, #0]
 801a412:	461a      	mov	r2, r3
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	4413      	add	r3, r2
 801a418:	4618      	mov	r0, r3
 801a41a:	f7fe ffe1 	bl	80193e0 <ld_word>
 801a41e:	4603      	mov	r3, r0
 801a420:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a422:	89fb      	ldrh	r3, [r7, #14]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d01a      	beq.n	801a45e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 801a428:	697b      	ldr	r3, [r7, #20]
 801a42a:	2bfe      	cmp	r3, #254	; 0xfe
 801a42c:	d812      	bhi.n	801a454 <cmp_lfn+0x88>
 801a42e:	89bb      	ldrh	r3, [r7, #12]
 801a430:	4618      	mov	r0, r3
 801a432:	f002 fea1 	bl	801d178 <ff_wtoupper>
 801a436:	4603      	mov	r3, r0
 801a438:	461c      	mov	r4, r3
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	1c5a      	adds	r2, r3, #1
 801a43e:	617a      	str	r2, [r7, #20]
 801a440:	005b      	lsls	r3, r3, #1
 801a442:	687a      	ldr	r2, [r7, #4]
 801a444:	4413      	add	r3, r2
 801a446:	881b      	ldrh	r3, [r3, #0]
 801a448:	4618      	mov	r0, r3
 801a44a:	f002 fe95 	bl	801d178 <ff_wtoupper>
 801a44e:	4603      	mov	r3, r0
 801a450:	429c      	cmp	r4, r3
 801a452:	d001      	beq.n	801a458 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801a454:	2300      	movs	r3, #0
 801a456:	e022      	b.n	801a49e <cmp_lfn+0xd2>
			}
			wc = uc;
 801a458:	89bb      	ldrh	r3, [r7, #12]
 801a45a:	81fb      	strh	r3, [r7, #14]
 801a45c:	e006      	b.n	801a46c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a45e:	89bb      	ldrh	r3, [r7, #12]
 801a460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a464:	4293      	cmp	r3, r2
 801a466:	d001      	beq.n	801a46c <cmp_lfn+0xa0>
 801a468:	2300      	movs	r3, #0
 801a46a:	e018      	b.n	801a49e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	3301      	adds	r3, #1
 801a470:	613b      	str	r3, [r7, #16]
 801a472:	693b      	ldr	r3, [r7, #16]
 801a474:	2b0c      	cmp	r3, #12
 801a476:	d9c8      	bls.n	801a40a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	781b      	ldrb	r3, [r3, #0]
 801a47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a480:	2b00      	cmp	r3, #0
 801a482:	d00b      	beq.n	801a49c <cmp_lfn+0xd0>
 801a484:	89fb      	ldrh	r3, [r7, #14]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d008      	beq.n	801a49c <cmp_lfn+0xd0>
 801a48a:	697b      	ldr	r3, [r7, #20]
 801a48c:	005b      	lsls	r3, r3, #1
 801a48e:	687a      	ldr	r2, [r7, #4]
 801a490:	4413      	add	r3, r2
 801a492:	881b      	ldrh	r3, [r3, #0]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d001      	beq.n	801a49c <cmp_lfn+0xd0>
 801a498:	2300      	movs	r3, #0
 801a49a:	e000      	b.n	801a49e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801a49c:	2301      	movs	r3, #1
}
 801a49e:	4618      	mov	r0, r3
 801a4a0:	371c      	adds	r7, #28
 801a4a2:	46bd      	mov	sp, r7
 801a4a4:	bd90      	pop	{r4, r7, pc}
 801a4a6:	bf00      	nop
 801a4a8:	08037364 	.word	0x08037364

0801a4ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b086      	sub	sp, #24
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801a4b6:	683b      	ldr	r3, [r7, #0]
 801a4b8:	331a      	adds	r3, #26
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	f7fe ff90 	bl	80193e0 <ld_word>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d001      	beq.n	801a4ca <pick_lfn+0x1e>
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	e04d      	b.n	801a566 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801a4ca:	683b      	ldr	r3, [r7, #0]
 801a4cc:	781b      	ldrb	r3, [r3, #0]
 801a4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a4d2:	1e5a      	subs	r2, r3, #1
 801a4d4:	4613      	mov	r3, r2
 801a4d6:	005b      	lsls	r3, r3, #1
 801a4d8:	4413      	add	r3, r2
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	4413      	add	r3, r2
 801a4de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a4e0:	2301      	movs	r3, #1
 801a4e2:	81fb      	strh	r3, [r7, #14]
 801a4e4:	2300      	movs	r3, #0
 801a4e6:	613b      	str	r3, [r7, #16]
 801a4e8:	e028      	b.n	801a53c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801a4ea:	4a21      	ldr	r2, [pc, #132]	; (801a570 <pick_lfn+0xc4>)
 801a4ec:	693b      	ldr	r3, [r7, #16]
 801a4ee:	4413      	add	r3, r2
 801a4f0:	781b      	ldrb	r3, [r3, #0]
 801a4f2:	461a      	mov	r2, r3
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	4413      	add	r3, r2
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7fe ff71 	bl	80193e0 <ld_word>
 801a4fe:	4603      	mov	r3, r0
 801a500:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801a502:	89fb      	ldrh	r3, [r7, #14]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d00f      	beq.n	801a528 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801a508:	697b      	ldr	r3, [r7, #20]
 801a50a:	2bfe      	cmp	r3, #254	; 0xfe
 801a50c:	d901      	bls.n	801a512 <pick_lfn+0x66>
 801a50e:	2300      	movs	r3, #0
 801a510:	e029      	b.n	801a566 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801a512:	89bb      	ldrh	r3, [r7, #12]
 801a514:	81fb      	strh	r3, [r7, #14]
 801a516:	697b      	ldr	r3, [r7, #20]
 801a518:	1c5a      	adds	r2, r3, #1
 801a51a:	617a      	str	r2, [r7, #20]
 801a51c:	005b      	lsls	r3, r3, #1
 801a51e:	687a      	ldr	r2, [r7, #4]
 801a520:	4413      	add	r3, r2
 801a522:	89fa      	ldrh	r2, [r7, #14]
 801a524:	801a      	strh	r2, [r3, #0]
 801a526:	e006      	b.n	801a536 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801a528:	89bb      	ldrh	r3, [r7, #12]
 801a52a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a52e:	4293      	cmp	r3, r2
 801a530:	d001      	beq.n	801a536 <pick_lfn+0x8a>
 801a532:	2300      	movs	r3, #0
 801a534:	e017      	b.n	801a566 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801a536:	693b      	ldr	r3, [r7, #16]
 801a538:	3301      	adds	r3, #1
 801a53a:	613b      	str	r3, [r7, #16]
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	2b0c      	cmp	r3, #12
 801a540:	d9d3      	bls.n	801a4ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d00a      	beq.n	801a564 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 801a54e:	697b      	ldr	r3, [r7, #20]
 801a550:	2bfe      	cmp	r3, #254	; 0xfe
 801a552:	d901      	bls.n	801a558 <pick_lfn+0xac>
 801a554:	2300      	movs	r3, #0
 801a556:	e006      	b.n	801a566 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 801a558:	697b      	ldr	r3, [r7, #20]
 801a55a:	005b      	lsls	r3, r3, #1
 801a55c:	687a      	ldr	r2, [r7, #4]
 801a55e:	4413      	add	r3, r2
 801a560:	2200      	movs	r2, #0
 801a562:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801a564:	2301      	movs	r3, #1
}
 801a566:	4618      	mov	r0, r3
 801a568:	3718      	adds	r7, #24
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	bf00      	nop
 801a570:	08037364 	.word	0x08037364

0801a574 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801a574:	b580      	push	{r7, lr}
 801a576:	b088      	sub	sp, #32
 801a578:	af00      	add	r7, sp, #0
 801a57a:	60f8      	str	r0, [r7, #12]
 801a57c:	60b9      	str	r1, [r7, #8]
 801a57e:	4611      	mov	r1, r2
 801a580:	461a      	mov	r2, r3
 801a582:	460b      	mov	r3, r1
 801a584:	71fb      	strb	r3, [r7, #7]
 801a586:	4613      	mov	r3, r2
 801a588:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	330d      	adds	r3, #13
 801a58e:	79ba      	ldrb	r2, [r7, #6]
 801a590:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	330b      	adds	r3, #11
 801a596:	220f      	movs	r2, #15
 801a598:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801a59a:	68bb      	ldr	r3, [r7, #8]
 801a59c:	330c      	adds	r3, #12
 801a59e:	2200      	movs	r2, #0
 801a5a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801a5a2:	68bb      	ldr	r3, [r7, #8]
 801a5a4:	331a      	adds	r3, #26
 801a5a6:	2100      	movs	r1, #0
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	f7fe ff54 	bl	8019456 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801a5ae:	79fb      	ldrb	r3, [r7, #7]
 801a5b0:	1e5a      	subs	r2, r3, #1
 801a5b2:	4613      	mov	r3, r2
 801a5b4:	005b      	lsls	r3, r3, #1
 801a5b6:	4413      	add	r3, r2
 801a5b8:	009b      	lsls	r3, r3, #2
 801a5ba:	4413      	add	r3, r2
 801a5bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	82fb      	strh	r3, [r7, #22]
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801a5c6:	8afb      	ldrh	r3, [r7, #22]
 801a5c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	d007      	beq.n	801a5e0 <put_lfn+0x6c>
 801a5d0:	69fb      	ldr	r3, [r7, #28]
 801a5d2:	1c5a      	adds	r2, r3, #1
 801a5d4:	61fa      	str	r2, [r7, #28]
 801a5d6:	005b      	lsls	r3, r3, #1
 801a5d8:	68fa      	ldr	r2, [r7, #12]
 801a5da:	4413      	add	r3, r2
 801a5dc:	881b      	ldrh	r3, [r3, #0]
 801a5de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 801a5e0:	4a17      	ldr	r2, [pc, #92]	; (801a640 <put_lfn+0xcc>)
 801a5e2:	69bb      	ldr	r3, [r7, #24]
 801a5e4:	4413      	add	r3, r2
 801a5e6:	781b      	ldrb	r3, [r3, #0]
 801a5e8:	461a      	mov	r2, r3
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	4413      	add	r3, r2
 801a5ee:	8afa      	ldrh	r2, [r7, #22]
 801a5f0:	4611      	mov	r1, r2
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7fe ff2f 	bl	8019456 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801a5f8:	8afb      	ldrh	r3, [r7, #22]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d102      	bne.n	801a604 <put_lfn+0x90>
 801a5fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a602:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801a604:	69bb      	ldr	r3, [r7, #24]
 801a606:	3301      	adds	r3, #1
 801a608:	61bb      	str	r3, [r7, #24]
 801a60a:	69bb      	ldr	r3, [r7, #24]
 801a60c:	2b0c      	cmp	r3, #12
 801a60e:	d9da      	bls.n	801a5c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801a610:	8afb      	ldrh	r3, [r7, #22]
 801a612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a616:	4293      	cmp	r3, r2
 801a618:	d006      	beq.n	801a628 <put_lfn+0xb4>
 801a61a:	69fb      	ldr	r3, [r7, #28]
 801a61c:	005b      	lsls	r3, r3, #1
 801a61e:	68fa      	ldr	r2, [r7, #12]
 801a620:	4413      	add	r3, r2
 801a622:	881b      	ldrh	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d103      	bne.n	801a630 <put_lfn+0xbc>
 801a628:	79fb      	ldrb	r3, [r7, #7]
 801a62a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a62e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	79fa      	ldrb	r2, [r7, #7]
 801a634:	701a      	strb	r2, [r3, #0]
}
 801a636:	bf00      	nop
 801a638:	3720      	adds	r7, #32
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}
 801a63e:	bf00      	nop
 801a640:	08037364 	.word	0x08037364

0801a644 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801a644:	b580      	push	{r7, lr}
 801a646:	b08c      	sub	sp, #48	; 0x30
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	607a      	str	r2, [r7, #4]
 801a650:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801a652:	220b      	movs	r2, #11
 801a654:	68b9      	ldr	r1, [r7, #8]
 801a656:	68f8      	ldr	r0, [r7, #12]
 801a658:	f7fe ff44 	bl	80194e4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801a65c:	683b      	ldr	r3, [r7, #0]
 801a65e:	2b05      	cmp	r3, #5
 801a660:	d92b      	bls.n	801a6ba <gen_numname+0x76>
		sr = seq;
 801a662:	683b      	ldr	r3, [r7, #0]
 801a664:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801a666:	e022      	b.n	801a6ae <gen_numname+0x6a>
			wc = *lfn++;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	1c9a      	adds	r2, r3, #2
 801a66c:	607a      	str	r2, [r7, #4]
 801a66e:	881b      	ldrh	r3, [r3, #0]
 801a670:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801a672:	2300      	movs	r3, #0
 801a674:	62bb      	str	r3, [r7, #40]	; 0x28
 801a676:	e017      	b.n	801a6a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	005a      	lsls	r2, r3, #1
 801a67c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a67e:	f003 0301 	and.w	r3, r3, #1
 801a682:	4413      	add	r3, r2
 801a684:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801a686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a688:	085b      	lsrs	r3, r3, #1
 801a68a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801a68c:	69fb      	ldr	r3, [r7, #28]
 801a68e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a692:	2b00      	cmp	r3, #0
 801a694:	d005      	beq.n	801a6a2 <gen_numname+0x5e>
 801a696:	69fb      	ldr	r3, [r7, #28]
 801a698:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801a69c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801a6a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a4:	3301      	adds	r3, #1
 801a6a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6aa:	2b0f      	cmp	r3, #15
 801a6ac:	d9e4      	bls.n	801a678 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	881b      	ldrh	r3, [r3, #0]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d1d8      	bne.n	801a668 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801a6b6:	69fb      	ldr	r3, [r7, #28]
 801a6b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801a6ba:	2307      	movs	r3, #7
 801a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801a6be:	683b      	ldr	r3, [r7, #0]
 801a6c0:	b2db      	uxtb	r3, r3
 801a6c2:	f003 030f 	and.w	r3, r3, #15
 801a6c6:	b2db      	uxtb	r3, r3
 801a6c8:	3330      	adds	r3, #48	; 0x30
 801a6ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801a6ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a6d2:	2b39      	cmp	r3, #57	; 0x39
 801a6d4:	d904      	bls.n	801a6e0 <gen_numname+0x9c>
 801a6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a6da:	3307      	adds	r3, #7
 801a6dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6e2:	1e5a      	subs	r2, r3, #1
 801a6e4:	62ba      	str	r2, [r7, #40]	; 0x28
 801a6e6:	3330      	adds	r3, #48	; 0x30
 801a6e8:	443b      	add	r3, r7
 801a6ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801a6ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801a6f2:	683b      	ldr	r3, [r7, #0]
 801a6f4:	091b      	lsrs	r3, r3, #4
 801a6f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d1df      	bne.n	801a6be <gen_numname+0x7a>
	ns[i] = '~';
 801a6fe:	f107 0214 	add.w	r2, r7, #20
 801a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a704:	4413      	add	r3, r2
 801a706:	227e      	movs	r2, #126	; 0x7e
 801a708:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801a70a:	2300      	movs	r3, #0
 801a70c:	627b      	str	r3, [r7, #36]	; 0x24
 801a70e:	e002      	b.n	801a716 <gen_numname+0xd2>
 801a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a712:	3301      	adds	r3, #1
 801a714:	627b      	str	r3, [r7, #36]	; 0x24
 801a716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a71a:	429a      	cmp	r2, r3
 801a71c:	d205      	bcs.n	801a72a <gen_numname+0xe6>
 801a71e:	68fa      	ldr	r2, [r7, #12]
 801a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a722:	4413      	add	r3, r2
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	2b20      	cmp	r3, #32
 801a728:	d1f2      	bne.n	801a710 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a72c:	2b07      	cmp	r3, #7
 801a72e:	d807      	bhi.n	801a740 <gen_numname+0xfc>
 801a730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a732:	1c5a      	adds	r2, r3, #1
 801a734:	62ba      	str	r2, [r7, #40]	; 0x28
 801a736:	3330      	adds	r3, #48	; 0x30
 801a738:	443b      	add	r3, r7
 801a73a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801a73e:	e000      	b.n	801a742 <gen_numname+0xfe>
 801a740:	2120      	movs	r1, #32
 801a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a744:	1c5a      	adds	r2, r3, #1
 801a746:	627a      	str	r2, [r7, #36]	; 0x24
 801a748:	68fa      	ldr	r2, [r7, #12]
 801a74a:	4413      	add	r3, r2
 801a74c:	460a      	mov	r2, r1
 801a74e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a752:	2b07      	cmp	r3, #7
 801a754:	d9e9      	bls.n	801a72a <gen_numname+0xe6>
}
 801a756:	bf00      	nop
 801a758:	bf00      	nop
 801a75a:	3730      	adds	r7, #48	; 0x30
 801a75c:	46bd      	mov	sp, r7
 801a75e:	bd80      	pop	{r7, pc}

0801a760 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801a760:	b480      	push	{r7}
 801a762:	b085      	sub	sp, #20
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801a768:	2300      	movs	r3, #0
 801a76a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801a76c:	230b      	movs	r3, #11
 801a76e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801a770:	7bfb      	ldrb	r3, [r7, #15]
 801a772:	b2da      	uxtb	r2, r3
 801a774:	0852      	lsrs	r2, r2, #1
 801a776:	01db      	lsls	r3, r3, #7
 801a778:	4313      	orrs	r3, r2
 801a77a:	b2da      	uxtb	r2, r3
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	1c59      	adds	r1, r3, #1
 801a780:	6079      	str	r1, [r7, #4]
 801a782:	781b      	ldrb	r3, [r3, #0]
 801a784:	4413      	add	r3, r2
 801a786:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801a788:	68bb      	ldr	r3, [r7, #8]
 801a78a:	3b01      	subs	r3, #1
 801a78c:	60bb      	str	r3, [r7, #8]
 801a78e:	68bb      	ldr	r3, [r7, #8]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d1ed      	bne.n	801a770 <sum_sfn+0x10>
	return sum;
 801a794:	7bfb      	ldrb	r3, [r7, #15]
}
 801a796:	4618      	mov	r0, r3
 801a798:	3714      	adds	r7, #20
 801a79a:	46bd      	mov	sp, r7
 801a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a0:	4770      	bx	lr

0801a7a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801a7a2:	b580      	push	{r7, lr}
 801a7a4:	b086      	sub	sp, #24
 801a7a6:	af00      	add	r7, sp, #0
 801a7a8:	6078      	str	r0, [r7, #4]
 801a7aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801a7ac:	2304      	movs	r3, #4
 801a7ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 801a7b6:	23ff      	movs	r3, #255	; 0xff
 801a7b8:	757b      	strb	r3, [r7, #21]
 801a7ba:	23ff      	movs	r3, #255	; 0xff
 801a7bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801a7be:	e081      	b.n	801a8c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	69db      	ldr	r3, [r3, #28]
 801a7c4:	4619      	mov	r1, r3
 801a7c6:	6938      	ldr	r0, [r7, #16]
 801a7c8:	f7ff f8ba 	bl	8019940 <move_window>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a7d0:	7dfb      	ldrb	r3, [r7, #23]
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d17c      	bne.n	801a8d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	6a1b      	ldr	r3, [r3, #32]
 801a7da:	781b      	ldrb	r3, [r3, #0]
 801a7dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801a7de:	7dbb      	ldrb	r3, [r7, #22]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d102      	bne.n	801a7ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801a7e4:	2304      	movs	r3, #4
 801a7e6:	75fb      	strb	r3, [r7, #23]
 801a7e8:	e077      	b.n	801a8da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	6a1b      	ldr	r3, [r3, #32]
 801a7ee:	330b      	adds	r3, #11
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a7f6:	73fb      	strb	r3, [r7, #15]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	7bfa      	ldrb	r2, [r7, #15]
 801a7fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801a7fe:	7dbb      	ldrb	r3, [r7, #22]
 801a800:	2be5      	cmp	r3, #229	; 0xe5
 801a802:	d00e      	beq.n	801a822 <dir_read+0x80>
 801a804:	7dbb      	ldrb	r3, [r7, #22]
 801a806:	2b2e      	cmp	r3, #46	; 0x2e
 801a808:	d00b      	beq.n	801a822 <dir_read+0x80>
 801a80a:	7bfb      	ldrb	r3, [r7, #15]
 801a80c:	f023 0320 	bic.w	r3, r3, #32
 801a810:	2b08      	cmp	r3, #8
 801a812:	bf0c      	ite	eq
 801a814:	2301      	moveq	r3, #1
 801a816:	2300      	movne	r3, #0
 801a818:	b2db      	uxtb	r3, r3
 801a81a:	461a      	mov	r2, r3
 801a81c:	683b      	ldr	r3, [r7, #0]
 801a81e:	4293      	cmp	r3, r2
 801a820:	d002      	beq.n	801a828 <dir_read+0x86>
				ord = 0xFF;
 801a822:	23ff      	movs	r3, #255	; 0xff
 801a824:	757b      	strb	r3, [r7, #21]
 801a826:	e044      	b.n	801a8b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 801a828:	7bfb      	ldrb	r3, [r7, #15]
 801a82a:	2b0f      	cmp	r3, #15
 801a82c:	d12f      	bne.n	801a88e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801a82e:	7dbb      	ldrb	r3, [r7, #22]
 801a830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a834:	2b00      	cmp	r3, #0
 801a836:	d00d      	beq.n	801a854 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	6a1b      	ldr	r3, [r3, #32]
 801a83c:	7b5b      	ldrb	r3, [r3, #13]
 801a83e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801a840:	7dbb      	ldrb	r3, [r7, #22]
 801a842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a846:	75bb      	strb	r3, [r7, #22]
 801a848:	7dbb      	ldrb	r3, [r7, #22]
 801a84a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	695a      	ldr	r2, [r3, #20]
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a854:	7dba      	ldrb	r2, [r7, #22]
 801a856:	7d7b      	ldrb	r3, [r7, #21]
 801a858:	429a      	cmp	r2, r3
 801a85a:	d115      	bne.n	801a888 <dir_read+0xe6>
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6a1b      	ldr	r3, [r3, #32]
 801a860:	330d      	adds	r3, #13
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	7d3a      	ldrb	r2, [r7, #20]
 801a866:	429a      	cmp	r2, r3
 801a868:	d10e      	bne.n	801a888 <dir_read+0xe6>
 801a86a:	693b      	ldr	r3, [r7, #16]
 801a86c:	68da      	ldr	r2, [r3, #12]
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6a1b      	ldr	r3, [r3, #32]
 801a872:	4619      	mov	r1, r3
 801a874:	4610      	mov	r0, r2
 801a876:	f7ff fe19 	bl	801a4ac <pick_lfn>
 801a87a:	4603      	mov	r3, r0
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d003      	beq.n	801a888 <dir_read+0xe6>
 801a880:	7d7b      	ldrb	r3, [r7, #21]
 801a882:	3b01      	subs	r3, #1
 801a884:	b2db      	uxtb	r3, r3
 801a886:	e000      	b.n	801a88a <dir_read+0xe8>
 801a888:	23ff      	movs	r3, #255	; 0xff
 801a88a:	757b      	strb	r3, [r7, #21]
 801a88c:	e011      	b.n	801a8b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801a88e:	7d7b      	ldrb	r3, [r7, #21]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d109      	bne.n	801a8a8 <dir_read+0x106>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	6a1b      	ldr	r3, [r3, #32]
 801a898:	4618      	mov	r0, r3
 801a89a:	f7ff ff61 	bl	801a760 <sum_sfn>
 801a89e:	4603      	mov	r3, r0
 801a8a0:	461a      	mov	r2, r3
 801a8a2:	7d3b      	ldrb	r3, [r7, #20]
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d015      	beq.n	801a8d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	f04f 32ff 	mov.w	r2, #4294967295
 801a8ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 801a8b0:	e010      	b.n	801a8d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801a8b2:	2100      	movs	r1, #0
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f7ff fc3e 	bl	801a136 <dir_next>
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a8be:	7dfb      	ldrb	r3, [r7, #23]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d109      	bne.n	801a8d8 <dir_read+0x136>
	while (dp->sect) {
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	69db      	ldr	r3, [r3, #28]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	f47f af79 	bne.w	801a7c0 <dir_read+0x1e>
 801a8ce:	e004      	b.n	801a8da <dir_read+0x138>
		if (res != FR_OK) break;
 801a8d0:	bf00      	nop
 801a8d2:	e002      	b.n	801a8da <dir_read+0x138>
					break;
 801a8d4:	bf00      	nop
 801a8d6:	e000      	b.n	801a8da <dir_read+0x138>
		if (res != FR_OK) break;
 801a8d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801a8da:	7dfb      	ldrb	r3, [r7, #23]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d002      	beq.n	801a8e6 <dir_read+0x144>
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	61da      	str	r2, [r3, #28]
	return res;
 801a8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3718      	adds	r7, #24
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b086      	sub	sp, #24
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801a8fe:	2100      	movs	r1, #0
 801a900:	6878      	ldr	r0, [r7, #4]
 801a902:	f7ff fb9d 	bl	801a040 <dir_sdi>
 801a906:	4603      	mov	r3, r0
 801a908:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801a90a:	7dfb      	ldrb	r3, [r7, #23]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d001      	beq.n	801a914 <dir_find+0x24>
 801a910:	7dfb      	ldrb	r3, [r7, #23]
 801a912:	e0a9      	b.n	801aa68 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a914:	23ff      	movs	r3, #255	; 0xff
 801a916:	753b      	strb	r3, [r7, #20]
 801a918:	7d3b      	ldrb	r3, [r7, #20]
 801a91a:	757b      	strb	r3, [r7, #21]
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	f04f 32ff 	mov.w	r2, #4294967295
 801a922:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	69db      	ldr	r3, [r3, #28]
 801a928:	4619      	mov	r1, r3
 801a92a:	6938      	ldr	r0, [r7, #16]
 801a92c:	f7ff f808 	bl	8019940 <move_window>
 801a930:	4603      	mov	r3, r0
 801a932:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801a934:	7dfb      	ldrb	r3, [r7, #23]
 801a936:	2b00      	cmp	r3, #0
 801a938:	f040 8090 	bne.w	801aa5c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	6a1b      	ldr	r3, [r3, #32]
 801a940:	781b      	ldrb	r3, [r3, #0]
 801a942:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801a944:	7dbb      	ldrb	r3, [r7, #22]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d102      	bne.n	801a950 <dir_find+0x60>
 801a94a:	2304      	movs	r3, #4
 801a94c:	75fb      	strb	r3, [r7, #23]
 801a94e:	e08a      	b.n	801aa66 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	6a1b      	ldr	r3, [r3, #32]
 801a954:	330b      	adds	r3, #11
 801a956:	781b      	ldrb	r3, [r3, #0]
 801a958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a95c:	73fb      	strb	r3, [r7, #15]
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	7bfa      	ldrb	r2, [r7, #15]
 801a962:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801a964:	7dbb      	ldrb	r3, [r7, #22]
 801a966:	2be5      	cmp	r3, #229	; 0xe5
 801a968:	d007      	beq.n	801a97a <dir_find+0x8a>
 801a96a:	7bfb      	ldrb	r3, [r7, #15]
 801a96c:	f003 0308 	and.w	r3, r3, #8
 801a970:	2b00      	cmp	r3, #0
 801a972:	d009      	beq.n	801a988 <dir_find+0x98>
 801a974:	7bfb      	ldrb	r3, [r7, #15]
 801a976:	2b0f      	cmp	r3, #15
 801a978:	d006      	beq.n	801a988 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801a97a:	23ff      	movs	r3, #255	; 0xff
 801a97c:	757b      	strb	r3, [r7, #21]
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	f04f 32ff 	mov.w	r2, #4294967295
 801a984:	631a      	str	r2, [r3, #48]	; 0x30
 801a986:	e05e      	b.n	801aa46 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801a988:	7bfb      	ldrb	r3, [r7, #15]
 801a98a:	2b0f      	cmp	r3, #15
 801a98c:	d136      	bne.n	801a9fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d154      	bne.n	801aa46 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801a99c:	7dbb      	ldrb	r3, [r7, #22]
 801a99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d00d      	beq.n	801a9c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	6a1b      	ldr	r3, [r3, #32]
 801a9aa:	7b5b      	ldrb	r3, [r3, #13]
 801a9ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801a9ae:	7dbb      	ldrb	r3, [r7, #22]
 801a9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a9b4:	75bb      	strb	r3, [r7, #22]
 801a9b6:	7dbb      	ldrb	r3, [r7, #22]
 801a9b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	695a      	ldr	r2, [r3, #20]
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801a9c2:	7dba      	ldrb	r2, [r7, #22]
 801a9c4:	7d7b      	ldrb	r3, [r7, #21]
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	d115      	bne.n	801a9f6 <dir_find+0x106>
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	6a1b      	ldr	r3, [r3, #32]
 801a9ce:	330d      	adds	r3, #13
 801a9d0:	781b      	ldrb	r3, [r3, #0]
 801a9d2:	7d3a      	ldrb	r2, [r7, #20]
 801a9d4:	429a      	cmp	r2, r3
 801a9d6:	d10e      	bne.n	801a9f6 <dir_find+0x106>
 801a9d8:	693b      	ldr	r3, [r7, #16]
 801a9da:	68da      	ldr	r2, [r3, #12]
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	6a1b      	ldr	r3, [r3, #32]
 801a9e0:	4619      	mov	r1, r3
 801a9e2:	4610      	mov	r0, r2
 801a9e4:	f7ff fcf2 	bl	801a3cc <cmp_lfn>
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d003      	beq.n	801a9f6 <dir_find+0x106>
 801a9ee:	7d7b      	ldrb	r3, [r7, #21]
 801a9f0:	3b01      	subs	r3, #1
 801a9f2:	b2db      	uxtb	r3, r3
 801a9f4:	e000      	b.n	801a9f8 <dir_find+0x108>
 801a9f6:	23ff      	movs	r3, #255	; 0xff
 801a9f8:	757b      	strb	r3, [r7, #21]
 801a9fa:	e024      	b.n	801aa46 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801a9fc:	7d7b      	ldrb	r3, [r7, #21]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d109      	bne.n	801aa16 <dir_find+0x126>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	6a1b      	ldr	r3, [r3, #32]
 801aa06:	4618      	mov	r0, r3
 801aa08:	f7ff feaa 	bl	801a760 <sum_sfn>
 801aa0c:	4603      	mov	r3, r0
 801aa0e:	461a      	mov	r2, r3
 801aa10:	7d3b      	ldrb	r3, [r7, #20]
 801aa12:	4293      	cmp	r3, r2
 801aa14:	d024      	beq.n	801aa60 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801aa1c:	f003 0301 	and.w	r3, r3, #1
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d10a      	bne.n	801aa3a <dir_find+0x14a>
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	6a18      	ldr	r0, [r3, #32]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	3324      	adds	r3, #36	; 0x24
 801aa2c:	220b      	movs	r2, #11
 801aa2e:	4619      	mov	r1, r3
 801aa30:	f7fe fd94 	bl	801955c <mem_cmp>
 801aa34:	4603      	mov	r3, r0
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d014      	beq.n	801aa64 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801aa3a:	23ff      	movs	r3, #255	; 0xff
 801aa3c:	757b      	strb	r3, [r7, #21]
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	f04f 32ff 	mov.w	r2, #4294967295
 801aa44:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801aa46:	2100      	movs	r1, #0
 801aa48:	6878      	ldr	r0, [r7, #4]
 801aa4a:	f7ff fb74 	bl	801a136 <dir_next>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801aa52:	7dfb      	ldrb	r3, [r7, #23]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	f43f af65 	beq.w	801a924 <dir_find+0x34>
 801aa5a:	e004      	b.n	801aa66 <dir_find+0x176>
		if (res != FR_OK) break;
 801aa5c:	bf00      	nop
 801aa5e:	e002      	b.n	801aa66 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801aa60:	bf00      	nop
 801aa62:	e000      	b.n	801aa66 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801aa64:	bf00      	nop

	return res;
 801aa66:	7dfb      	ldrb	r3, [r7, #23]
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3718      	adds	r7, #24
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}

0801aa70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b08c      	sub	sp, #48	; 0x30
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801aa84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d001      	beq.n	801aa90 <dir_register+0x20>
 801aa8c:	2306      	movs	r3, #6
 801aa8e:	e0e0      	b.n	801ac52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801aa90:	2300      	movs	r3, #0
 801aa92:	627b      	str	r3, [r7, #36]	; 0x24
 801aa94:	e002      	b.n	801aa9c <dir_register+0x2c>
 801aa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa98:	3301      	adds	r3, #1
 801aa9a:	627b      	str	r3, [r7, #36]	; 0x24
 801aa9c:	69fb      	ldr	r3, [r7, #28]
 801aa9e:	68da      	ldr	r2, [r3, #12]
 801aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa2:	005b      	lsls	r3, r3, #1
 801aaa4:	4413      	add	r3, r2
 801aaa6:	881b      	ldrh	r3, [r3, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d1f4      	bne.n	801aa96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801aab2:	f107 030c 	add.w	r3, r7, #12
 801aab6:	220c      	movs	r2, #12
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7fe fd13 	bl	80194e4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801aabe:	7dfb      	ldrb	r3, [r7, #23]
 801aac0:	f003 0301 	and.w	r3, r3, #1
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d032      	beq.n	801ab2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2240      	movs	r2, #64	; 0x40
 801aacc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801aad0:	2301      	movs	r3, #1
 801aad2:	62bb      	str	r3, [r7, #40]	; 0x28
 801aad4:	e016      	b.n	801ab04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801aadc:	69fb      	ldr	r3, [r7, #28]
 801aade:	68da      	ldr	r2, [r3, #12]
 801aae0:	f107 010c 	add.w	r1, r7, #12
 801aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aae6:	f7ff fdad 	bl	801a644 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801aaea:	6878      	ldr	r0, [r7, #4]
 801aaec:	f7ff ff00 	bl	801a8f0 <dir_find>
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801aaf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d106      	bne.n	801ab0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab00:	3301      	adds	r3, #1
 801ab02:	62bb      	str	r3, [r7, #40]	; 0x28
 801ab04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab06:	2b63      	cmp	r3, #99	; 0x63
 801ab08:	d9e5      	bls.n	801aad6 <dir_register+0x66>
 801ab0a:	e000      	b.n	801ab0e <dir_register+0x9e>
			if (res != FR_OK) break;
 801ab0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ab10:	2b64      	cmp	r3, #100	; 0x64
 801ab12:	d101      	bne.n	801ab18 <dir_register+0xa8>
 801ab14:	2307      	movs	r3, #7
 801ab16:	e09c      	b.n	801ac52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801ab18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab1c:	2b04      	cmp	r3, #4
 801ab1e:	d002      	beq.n	801ab26 <dir_register+0xb6>
 801ab20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab24:	e095      	b.n	801ac52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801ab26:	7dfa      	ldrb	r2, [r7, #23]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801ab2e:	7dfb      	ldrb	r3, [r7, #23]
 801ab30:	f003 0302 	and.w	r3, r3, #2
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d007      	beq.n	801ab48 <dir_register+0xd8>
 801ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab3a:	330c      	adds	r3, #12
 801ab3c:	4a47      	ldr	r2, [pc, #284]	; (801ac5c <dir_register+0x1ec>)
 801ab3e:	fba2 2303 	umull	r2, r3, r2, r3
 801ab42:	089b      	lsrs	r3, r3, #2
 801ab44:	3301      	adds	r3, #1
 801ab46:	e000      	b.n	801ab4a <dir_register+0xda>
 801ab48:	2301      	movs	r3, #1
 801ab4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801ab4c:	6a39      	ldr	r1, [r7, #32]
 801ab4e:	6878      	ldr	r0, [r7, #4]
 801ab50:	f7ff fbb6 	bl	801a2c0 <dir_alloc>
 801ab54:	4603      	mov	r3, r0
 801ab56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801ab5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	d148      	bne.n	801abf4 <dir_register+0x184>
 801ab62:	6a3b      	ldr	r3, [r7, #32]
 801ab64:	3b01      	subs	r3, #1
 801ab66:	623b      	str	r3, [r7, #32]
 801ab68:	6a3b      	ldr	r3, [r7, #32]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d042      	beq.n	801abf4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	695a      	ldr	r2, [r3, #20]
 801ab72:	6a3b      	ldr	r3, [r7, #32]
 801ab74:	015b      	lsls	r3, r3, #5
 801ab76:	1ad3      	subs	r3, r2, r3
 801ab78:	4619      	mov	r1, r3
 801ab7a:	6878      	ldr	r0, [r7, #4]
 801ab7c:	f7ff fa60 	bl	801a040 <dir_sdi>
 801ab80:	4603      	mov	r3, r0
 801ab82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801ab86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d132      	bne.n	801abf4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	3324      	adds	r3, #36	; 0x24
 801ab92:	4618      	mov	r0, r3
 801ab94:	f7ff fde4 	bl	801a760 <sum_sfn>
 801ab98:	4603      	mov	r3, r0
 801ab9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	69db      	ldr	r3, [r3, #28]
 801aba0:	4619      	mov	r1, r3
 801aba2:	69f8      	ldr	r0, [r7, #28]
 801aba4:	f7fe fecc 	bl	8019940 <move_window>
 801aba8:	4603      	mov	r3, r0
 801abaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801abae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d11d      	bne.n	801abf2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801abb6:	69fb      	ldr	r3, [r7, #28]
 801abb8:	68d8      	ldr	r0, [r3, #12]
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	6a19      	ldr	r1, [r3, #32]
 801abbe:	6a3b      	ldr	r3, [r7, #32]
 801abc0:	b2da      	uxtb	r2, r3
 801abc2:	7efb      	ldrb	r3, [r7, #27]
 801abc4:	f7ff fcd6 	bl	801a574 <put_lfn>
				fs->wflag = 1;
 801abc8:	69fb      	ldr	r3, [r7, #28]
 801abca:	2201      	movs	r2, #1
 801abcc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801abce:	2100      	movs	r1, #0
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f7ff fab0 	bl	801a136 <dir_next>
 801abd6:	4603      	mov	r3, r0
 801abd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801abdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d107      	bne.n	801abf4 <dir_register+0x184>
 801abe4:	6a3b      	ldr	r3, [r7, #32]
 801abe6:	3b01      	subs	r3, #1
 801abe8:	623b      	str	r3, [r7, #32]
 801abea:	6a3b      	ldr	r3, [r7, #32]
 801abec:	2b00      	cmp	r3, #0
 801abee:	d1d5      	bne.n	801ab9c <dir_register+0x12c>
 801abf0:	e000      	b.n	801abf4 <dir_register+0x184>
				if (res != FR_OK) break;
 801abf2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801abf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d128      	bne.n	801ac4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	69db      	ldr	r3, [r3, #28]
 801ac00:	4619      	mov	r1, r3
 801ac02:	69f8      	ldr	r0, [r7, #28]
 801ac04:	f7fe fe9c 	bl	8019940 <move_window>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801ac0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d11b      	bne.n	801ac4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	6a1b      	ldr	r3, [r3, #32]
 801ac1a:	2220      	movs	r2, #32
 801ac1c:	2100      	movs	r1, #0
 801ac1e:	4618      	mov	r0, r3
 801ac20:	f7fe fc81 	bl	8019526 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	6a18      	ldr	r0, [r3, #32]
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	3324      	adds	r3, #36	; 0x24
 801ac2c:	220b      	movs	r2, #11
 801ac2e:	4619      	mov	r1, r3
 801ac30:	f7fe fc58 	bl	80194e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	6a1b      	ldr	r3, [r3, #32]
 801ac3e:	330c      	adds	r3, #12
 801ac40:	f002 0218 	and.w	r2, r2, #24
 801ac44:	b2d2      	uxtb	r2, r2
 801ac46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 801ac48:	69fb      	ldr	r3, [r7, #28]
 801ac4a:	2201      	movs	r2, #1
 801ac4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801ac4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801ac52:	4618      	mov	r0, r3
 801ac54:	3730      	adds	r7, #48	; 0x30
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}
 801ac5a:	bf00      	nop
 801ac5c:	4ec4ec4f 	.word	0x4ec4ec4f

0801ac60 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b088      	sub	sp, #32
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
 801ac68:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801ac70:	683b      	ldr	r3, [r7, #0]
 801ac72:	2200      	movs	r2, #0
 801ac74:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	69db      	ldr	r3, [r3, #28]
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	f000 80c9 	beq.w	801ae12 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac84:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac88:	d032      	beq.n	801acf0 <get_fileinfo+0x90>
			i = j = 0;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	61bb      	str	r3, [r7, #24]
 801ac8e:	69bb      	ldr	r3, [r7, #24]
 801ac90:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801ac92:	e01b      	b.n	801accc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801ac94:	89fb      	ldrh	r3, [r7, #14]
 801ac96:	2100      	movs	r1, #0
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f002 fa31 	bl	801d100 <ff_convert>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801aca2:	89fb      	ldrh	r3, [r7, #14]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d102      	bne.n	801acae <get_fileinfo+0x4e>
 801aca8:	2300      	movs	r3, #0
 801acaa:	61fb      	str	r3, [r7, #28]
 801acac:	e01a      	b.n	801ace4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801acae:	69fb      	ldr	r3, [r7, #28]
 801acb0:	2bfe      	cmp	r3, #254	; 0xfe
 801acb2:	d902      	bls.n	801acba <get_fileinfo+0x5a>
 801acb4:	2300      	movs	r3, #0
 801acb6:	61fb      	str	r3, [r7, #28]
 801acb8:	e014      	b.n	801ace4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801acba:	69fb      	ldr	r3, [r7, #28]
 801acbc:	1c5a      	adds	r2, r3, #1
 801acbe:	61fa      	str	r2, [r7, #28]
 801acc0:	89fa      	ldrh	r2, [r7, #14]
 801acc2:	b2d1      	uxtb	r1, r2
 801acc4:	683a      	ldr	r2, [r7, #0]
 801acc6:	4413      	add	r3, r2
 801acc8:	460a      	mov	r2, r1
 801acca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801accc:	693b      	ldr	r3, [r7, #16]
 801acce:	68da      	ldr	r2, [r3, #12]
 801acd0:	69bb      	ldr	r3, [r7, #24]
 801acd2:	1c59      	adds	r1, r3, #1
 801acd4:	61b9      	str	r1, [r7, #24]
 801acd6:	005b      	lsls	r3, r3, #1
 801acd8:	4413      	add	r3, r2
 801acda:	881b      	ldrh	r3, [r3, #0]
 801acdc:	81fb      	strh	r3, [r7, #14]
 801acde:	89fb      	ldrh	r3, [r7, #14]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d1d7      	bne.n	801ac94 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801ace4:	683a      	ldr	r2, [r7, #0]
 801ace6:	69fb      	ldr	r3, [r7, #28]
 801ace8:	4413      	add	r3, r2
 801acea:	3316      	adds	r3, #22
 801acec:	2200      	movs	r2, #0
 801acee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801acf0:	2300      	movs	r3, #0
 801acf2:	61bb      	str	r3, [r7, #24]
 801acf4:	69bb      	ldr	r3, [r7, #24]
 801acf6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801acf8:	683a      	ldr	r2, [r7, #0]
 801acfa:	69fb      	ldr	r3, [r7, #28]
 801acfc:	4413      	add	r3, r2
 801acfe:	3316      	adds	r3, #22
 801ad00:	781b      	ldrb	r3, [r3, #0]
 801ad02:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801ad04:	e04c      	b.n	801ada0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	6a1a      	ldr	r2, [r3, #32]
 801ad0a:	69fb      	ldr	r3, [r7, #28]
 801ad0c:	1c59      	adds	r1, r3, #1
 801ad0e:	61f9      	str	r1, [r7, #28]
 801ad10:	4413      	add	r3, r2
 801ad12:	781b      	ldrb	r3, [r3, #0]
 801ad14:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801ad16:	7dfb      	ldrb	r3, [r7, #23]
 801ad18:	2b20      	cmp	r3, #32
 801ad1a:	d100      	bne.n	801ad1e <get_fileinfo+0xbe>
 801ad1c:	e040      	b.n	801ada0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801ad1e:	7dfb      	ldrb	r3, [r7, #23]
 801ad20:	2b05      	cmp	r3, #5
 801ad22:	d101      	bne.n	801ad28 <get_fileinfo+0xc8>
 801ad24:	23e5      	movs	r3, #229	; 0xe5
 801ad26:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801ad28:	69fb      	ldr	r3, [r7, #28]
 801ad2a:	2b09      	cmp	r3, #9
 801ad2c:	d10f      	bne.n	801ad4e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801ad2e:	89bb      	ldrh	r3, [r7, #12]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d105      	bne.n	801ad40 <get_fileinfo+0xe0>
 801ad34:	683a      	ldr	r2, [r7, #0]
 801ad36:	69bb      	ldr	r3, [r7, #24]
 801ad38:	4413      	add	r3, r2
 801ad3a:	3316      	adds	r3, #22
 801ad3c:	222e      	movs	r2, #46	; 0x2e
 801ad3e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801ad40:	69bb      	ldr	r3, [r7, #24]
 801ad42:	1c5a      	adds	r2, r3, #1
 801ad44:	61ba      	str	r2, [r7, #24]
 801ad46:	683a      	ldr	r2, [r7, #0]
 801ad48:	4413      	add	r3, r2
 801ad4a:	222e      	movs	r2, #46	; 0x2e
 801ad4c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801ad4e:	683a      	ldr	r2, [r7, #0]
 801ad50:	69bb      	ldr	r3, [r7, #24]
 801ad52:	4413      	add	r3, r2
 801ad54:	3309      	adds	r3, #9
 801ad56:	7dfa      	ldrb	r2, [r7, #23]
 801ad58:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 801ad5a:	89bb      	ldrh	r3, [r7, #12]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d11c      	bne.n	801ad9a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801ad60:	7dfb      	ldrb	r3, [r7, #23]
 801ad62:	2b40      	cmp	r3, #64	; 0x40
 801ad64:	d913      	bls.n	801ad8e <get_fileinfo+0x12e>
 801ad66:	7dfb      	ldrb	r3, [r7, #23]
 801ad68:	2b5a      	cmp	r3, #90	; 0x5a
 801ad6a:	d810      	bhi.n	801ad8e <get_fileinfo+0x12e>
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6a1b      	ldr	r3, [r3, #32]
 801ad70:	330c      	adds	r3, #12
 801ad72:	781b      	ldrb	r3, [r3, #0]
 801ad74:	461a      	mov	r2, r3
 801ad76:	69fb      	ldr	r3, [r7, #28]
 801ad78:	2b08      	cmp	r3, #8
 801ad7a:	d901      	bls.n	801ad80 <get_fileinfo+0x120>
 801ad7c:	2310      	movs	r3, #16
 801ad7e:	e000      	b.n	801ad82 <get_fileinfo+0x122>
 801ad80:	2308      	movs	r3, #8
 801ad82:	4013      	ands	r3, r2
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	d002      	beq.n	801ad8e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 801ad88:	7dfb      	ldrb	r3, [r7, #23]
 801ad8a:	3320      	adds	r3, #32
 801ad8c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801ad8e:	683a      	ldr	r2, [r7, #0]
 801ad90:	69bb      	ldr	r3, [r7, #24]
 801ad92:	4413      	add	r3, r2
 801ad94:	3316      	adds	r3, #22
 801ad96:	7dfa      	ldrb	r2, [r7, #23]
 801ad98:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	3301      	adds	r3, #1
 801ad9e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801ada0:	69fb      	ldr	r3, [r7, #28]
 801ada2:	2b0a      	cmp	r3, #10
 801ada4:	d9af      	bls.n	801ad06 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801ada6:	89bb      	ldrh	r3, [r7, #12]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d10d      	bne.n	801adc8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801adac:	683a      	ldr	r2, [r7, #0]
 801adae:	69bb      	ldr	r3, [r7, #24]
 801adb0:	4413      	add	r3, r2
 801adb2:	3316      	adds	r3, #22
 801adb4:	2200      	movs	r2, #0
 801adb6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6a1b      	ldr	r3, [r3, #32]
 801adbc:	330c      	adds	r3, #12
 801adbe:	781b      	ldrb	r3, [r3, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d101      	bne.n	801adc8 <get_fileinfo+0x168>
 801adc4:	2300      	movs	r3, #0
 801adc6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801adc8:	683a      	ldr	r2, [r7, #0]
 801adca:	69bb      	ldr	r3, [r7, #24]
 801adcc:	4413      	add	r3, r2
 801adce:	3309      	adds	r3, #9
 801add0:	2200      	movs	r2, #0
 801add2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	6a1b      	ldr	r3, [r3, #32]
 801add8:	7ada      	ldrb	r2, [r3, #11]
 801adda:	683b      	ldr	r3, [r7, #0]
 801addc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	6a1b      	ldr	r3, [r3, #32]
 801ade2:	331c      	adds	r3, #28
 801ade4:	4618      	mov	r0, r3
 801ade6:	f7fe fb13 	bl	8019410 <ld_dword>
 801adea:	4602      	mov	r2, r0
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	6a1b      	ldr	r3, [r3, #32]
 801adf4:	3316      	adds	r3, #22
 801adf6:	4618      	mov	r0, r3
 801adf8:	f7fe fb0a 	bl	8019410 <ld_dword>
 801adfc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	b29a      	uxth	r2, r3
 801ae02:	683b      	ldr	r3, [r7, #0]
 801ae04:	80da      	strh	r2, [r3, #6]
 801ae06:	68bb      	ldr	r3, [r7, #8]
 801ae08:	0c1b      	lsrs	r3, r3, #16
 801ae0a:	b29a      	uxth	r2, r3
 801ae0c:	683b      	ldr	r3, [r7, #0]
 801ae0e:	809a      	strh	r2, [r3, #4]
 801ae10:	e000      	b.n	801ae14 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801ae12:	bf00      	nop
}
 801ae14:	3720      	adds	r7, #32
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
	...

0801ae1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b08a      	sub	sp, #40	; 0x28
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
 801ae24:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	613b      	str	r3, [r7, #16]
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	68db      	ldr	r3, [r3, #12]
 801ae32:	60fb      	str	r3, [r7, #12]
 801ae34:	2300      	movs	r3, #0
 801ae36:	617b      	str	r3, [r7, #20]
 801ae38:	697b      	ldr	r3, [r7, #20]
 801ae3a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801ae3c:	69bb      	ldr	r3, [r7, #24]
 801ae3e:	1c5a      	adds	r2, r3, #1
 801ae40:	61ba      	str	r2, [r7, #24]
 801ae42:	693a      	ldr	r2, [r7, #16]
 801ae44:	4413      	add	r3, r2
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801ae4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae4c:	2b1f      	cmp	r3, #31
 801ae4e:	d940      	bls.n	801aed2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801ae50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae52:	2b2f      	cmp	r3, #47	; 0x2f
 801ae54:	d006      	beq.n	801ae64 <create_name+0x48>
 801ae56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae58:	2b5c      	cmp	r3, #92	; 0x5c
 801ae5a:	d110      	bne.n	801ae7e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801ae5c:	e002      	b.n	801ae64 <create_name+0x48>
 801ae5e:	69bb      	ldr	r3, [r7, #24]
 801ae60:	3301      	adds	r3, #1
 801ae62:	61bb      	str	r3, [r7, #24]
 801ae64:	693a      	ldr	r2, [r7, #16]
 801ae66:	69bb      	ldr	r3, [r7, #24]
 801ae68:	4413      	add	r3, r2
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	2b2f      	cmp	r3, #47	; 0x2f
 801ae6e:	d0f6      	beq.n	801ae5e <create_name+0x42>
 801ae70:	693a      	ldr	r2, [r7, #16]
 801ae72:	69bb      	ldr	r3, [r7, #24]
 801ae74:	4413      	add	r3, r2
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	2b5c      	cmp	r3, #92	; 0x5c
 801ae7a:	d0f0      	beq.n	801ae5e <create_name+0x42>
			break;
 801ae7c:	e02a      	b.n	801aed4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801ae7e:	697b      	ldr	r3, [r7, #20]
 801ae80:	2bfe      	cmp	r3, #254	; 0xfe
 801ae82:	d901      	bls.n	801ae88 <create_name+0x6c>
 801ae84:	2306      	movs	r3, #6
 801ae86:	e17d      	b.n	801b184 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 801ae88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae8a:	b2db      	uxtb	r3, r3
 801ae8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801ae8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae90:	2101      	movs	r1, #1
 801ae92:	4618      	mov	r0, r3
 801ae94:	f002 f934 	bl	801d100 <ff_convert>
 801ae98:	4603      	mov	r3, r0
 801ae9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801ae9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d101      	bne.n	801aea6 <create_name+0x8a>
 801aea2:	2306      	movs	r3, #6
 801aea4:	e16e      	b.n	801b184 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801aea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aea8:	2b7f      	cmp	r3, #127	; 0x7f
 801aeaa:	d809      	bhi.n	801aec0 <create_name+0xa4>
 801aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aeae:	4619      	mov	r1, r3
 801aeb0:	488d      	ldr	r0, [pc, #564]	; (801b0e8 <create_name+0x2cc>)
 801aeb2:	f7fe fb7a 	bl	80195aa <chk_chr>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d001      	beq.n	801aec0 <create_name+0xa4>
 801aebc:	2306      	movs	r3, #6
 801aebe:	e161      	b.n	801b184 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801aec0:	697b      	ldr	r3, [r7, #20]
 801aec2:	1c5a      	adds	r2, r3, #1
 801aec4:	617a      	str	r2, [r7, #20]
 801aec6:	005b      	lsls	r3, r3, #1
 801aec8:	68fa      	ldr	r2, [r7, #12]
 801aeca:	4413      	add	r3, r2
 801aecc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aece:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801aed0:	e7b4      	b.n	801ae3c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801aed2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801aed4:	693a      	ldr	r2, [r7, #16]
 801aed6:	69bb      	ldr	r3, [r7, #24]
 801aed8:	441a      	add	r2, r3
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801aede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801aee0:	2b1f      	cmp	r3, #31
 801aee2:	d801      	bhi.n	801aee8 <create_name+0xcc>
 801aee4:	2304      	movs	r3, #4
 801aee6:	e000      	b.n	801aeea <create_name+0xce>
 801aee8:	2300      	movs	r3, #0
 801aeea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801aeee:	e011      	b.n	801af14 <create_name+0xf8>
		w = lfn[di - 1];
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801aef6:	3b01      	subs	r3, #1
 801aef8:	005b      	lsls	r3, r3, #1
 801aefa:	68fa      	ldr	r2, [r7, #12]
 801aefc:	4413      	add	r3, r2
 801aefe:	881b      	ldrh	r3, [r3, #0]
 801af00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801af02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801af04:	2b20      	cmp	r3, #32
 801af06:	d002      	beq.n	801af0e <create_name+0xf2>
 801af08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801af0a:	2b2e      	cmp	r3, #46	; 0x2e
 801af0c:	d106      	bne.n	801af1c <create_name+0x100>
		di--;
 801af0e:	697b      	ldr	r3, [r7, #20]
 801af10:	3b01      	subs	r3, #1
 801af12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801af14:	697b      	ldr	r3, [r7, #20]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d1ea      	bne.n	801aef0 <create_name+0xd4>
 801af1a:	e000      	b.n	801af1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801af1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801af1e:	697b      	ldr	r3, [r7, #20]
 801af20:	005b      	lsls	r3, r3, #1
 801af22:	68fa      	ldr	r2, [r7, #12]
 801af24:	4413      	add	r3, r2
 801af26:	2200      	movs	r2, #0
 801af28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d101      	bne.n	801af34 <create_name+0x118>
 801af30:	2306      	movs	r3, #6
 801af32:	e127      	b.n	801b184 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	3324      	adds	r3, #36	; 0x24
 801af38:	220b      	movs	r2, #11
 801af3a:	2120      	movs	r1, #32
 801af3c:	4618      	mov	r0, r3
 801af3e:	f7fe faf2 	bl	8019526 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801af42:	2300      	movs	r3, #0
 801af44:	61bb      	str	r3, [r7, #24]
 801af46:	e002      	b.n	801af4e <create_name+0x132>
 801af48:	69bb      	ldr	r3, [r7, #24]
 801af4a:	3301      	adds	r3, #1
 801af4c:	61bb      	str	r3, [r7, #24]
 801af4e:	69bb      	ldr	r3, [r7, #24]
 801af50:	005b      	lsls	r3, r3, #1
 801af52:	68fa      	ldr	r2, [r7, #12]
 801af54:	4413      	add	r3, r2
 801af56:	881b      	ldrh	r3, [r3, #0]
 801af58:	2b20      	cmp	r3, #32
 801af5a:	d0f5      	beq.n	801af48 <create_name+0x12c>
 801af5c:	69bb      	ldr	r3, [r7, #24]
 801af5e:	005b      	lsls	r3, r3, #1
 801af60:	68fa      	ldr	r2, [r7, #12]
 801af62:	4413      	add	r3, r2
 801af64:	881b      	ldrh	r3, [r3, #0]
 801af66:	2b2e      	cmp	r3, #46	; 0x2e
 801af68:	d0ee      	beq.n	801af48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801af6a:	69bb      	ldr	r3, [r7, #24]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d009      	beq.n	801af84 <create_name+0x168>
 801af70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af74:	f043 0303 	orr.w	r3, r3, #3
 801af78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801af7c:	e002      	b.n	801af84 <create_name+0x168>
 801af7e:	697b      	ldr	r3, [r7, #20]
 801af80:	3b01      	subs	r3, #1
 801af82:	617b      	str	r3, [r7, #20]
 801af84:	697b      	ldr	r3, [r7, #20]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d009      	beq.n	801af9e <create_name+0x182>
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801af90:	3b01      	subs	r3, #1
 801af92:	005b      	lsls	r3, r3, #1
 801af94:	68fa      	ldr	r2, [r7, #12]
 801af96:	4413      	add	r3, r2
 801af98:	881b      	ldrh	r3, [r3, #0]
 801af9a:	2b2e      	cmp	r3, #46	; 0x2e
 801af9c:	d1ef      	bne.n	801af7e <create_name+0x162>

	i = b = 0; ni = 8;
 801af9e:	2300      	movs	r3, #0
 801afa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801afa4:	2300      	movs	r3, #0
 801afa6:	623b      	str	r3, [r7, #32]
 801afa8:	2308      	movs	r3, #8
 801afaa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801afac:	69bb      	ldr	r3, [r7, #24]
 801afae:	1c5a      	adds	r2, r3, #1
 801afb0:	61ba      	str	r2, [r7, #24]
 801afb2:	005b      	lsls	r3, r3, #1
 801afb4:	68fa      	ldr	r2, [r7, #12]
 801afb6:	4413      	add	r3, r2
 801afb8:	881b      	ldrh	r3, [r3, #0]
 801afba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801afbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	f000 8090 	beq.w	801b0e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801afc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801afc6:	2b20      	cmp	r3, #32
 801afc8:	d006      	beq.n	801afd8 <create_name+0x1bc>
 801afca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801afcc:	2b2e      	cmp	r3, #46	; 0x2e
 801afce:	d10a      	bne.n	801afe6 <create_name+0x1ca>
 801afd0:	69ba      	ldr	r2, [r7, #24]
 801afd2:	697b      	ldr	r3, [r7, #20]
 801afd4:	429a      	cmp	r2, r3
 801afd6:	d006      	beq.n	801afe6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801afd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801afdc:	f043 0303 	orr.w	r3, r3, #3
 801afe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801afe4:	e07d      	b.n	801b0e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801afe6:	6a3a      	ldr	r2, [r7, #32]
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	429a      	cmp	r2, r3
 801afec:	d203      	bcs.n	801aff6 <create_name+0x1da>
 801afee:	69ba      	ldr	r2, [r7, #24]
 801aff0:	697b      	ldr	r3, [r7, #20]
 801aff2:	429a      	cmp	r2, r3
 801aff4:	d123      	bne.n	801b03e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801aff6:	69fb      	ldr	r3, [r7, #28]
 801aff8:	2b0b      	cmp	r3, #11
 801affa:	d106      	bne.n	801b00a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801affc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b000:	f043 0303 	orr.w	r3, r3, #3
 801b004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b008:	e075      	b.n	801b0f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801b00a:	69ba      	ldr	r2, [r7, #24]
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	429a      	cmp	r2, r3
 801b010:	d005      	beq.n	801b01e <create_name+0x202>
 801b012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b016:	f043 0303 	orr.w	r3, r3, #3
 801b01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801b01e:	69ba      	ldr	r2, [r7, #24]
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	429a      	cmp	r2, r3
 801b024:	d866      	bhi.n	801b0f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801b026:	697b      	ldr	r3, [r7, #20]
 801b028:	61bb      	str	r3, [r7, #24]
 801b02a:	2308      	movs	r3, #8
 801b02c:	623b      	str	r3, [r7, #32]
 801b02e:	230b      	movs	r3, #11
 801b030:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801b032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b036:	009b      	lsls	r3, r3, #2
 801b038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b03c:	e051      	b.n	801b0e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801b03e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b040:	2b7f      	cmp	r3, #127	; 0x7f
 801b042:	d914      	bls.n	801b06e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801b044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b046:	2100      	movs	r1, #0
 801b048:	4618      	mov	r0, r3
 801b04a:	f002 f859 	bl	801d100 <ff_convert>
 801b04e:	4603      	mov	r3, r0
 801b050:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801b052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b054:	2b00      	cmp	r3, #0
 801b056:	d004      	beq.n	801b062 <create_name+0x246>
 801b058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b05a:	3b80      	subs	r3, #128	; 0x80
 801b05c:	4a23      	ldr	r2, [pc, #140]	; (801b0ec <create_name+0x2d0>)
 801b05e:	5cd3      	ldrb	r3, [r2, r3]
 801b060:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801b062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b066:	f043 0302 	orr.w	r3, r3, #2
 801b06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801b06e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b070:	2b00      	cmp	r3, #0
 801b072:	d007      	beq.n	801b084 <create_name+0x268>
 801b074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b076:	4619      	mov	r1, r3
 801b078:	481d      	ldr	r0, [pc, #116]	; (801b0f0 <create_name+0x2d4>)
 801b07a:	f7fe fa96 	bl	80195aa <chk_chr>
 801b07e:	4603      	mov	r3, r0
 801b080:	2b00      	cmp	r3, #0
 801b082:	d008      	beq.n	801b096 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801b084:	235f      	movs	r3, #95	; 0x5f
 801b086:	84bb      	strh	r3, [r7, #36]	; 0x24
 801b088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b08c:	f043 0303 	orr.w	r3, r3, #3
 801b090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b094:	e01b      	b.n	801b0ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801b096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b098:	2b40      	cmp	r3, #64	; 0x40
 801b09a:	d909      	bls.n	801b0b0 <create_name+0x294>
 801b09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b09e:	2b5a      	cmp	r3, #90	; 0x5a
 801b0a0:	d806      	bhi.n	801b0b0 <create_name+0x294>
					b |= 2;
 801b0a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b0a6:	f043 0302 	orr.w	r3, r3, #2
 801b0aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b0ae:	e00e      	b.n	801b0ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801b0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b0b2:	2b60      	cmp	r3, #96	; 0x60
 801b0b4:	d90b      	bls.n	801b0ce <create_name+0x2b2>
 801b0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b0b8:	2b7a      	cmp	r3, #122	; 0x7a
 801b0ba:	d808      	bhi.n	801b0ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801b0bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b0c0:	f043 0301 	orr.w	r3, r3, #1
 801b0c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b0ca:	3b20      	subs	r3, #32
 801b0cc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801b0ce:	6a3b      	ldr	r3, [r7, #32]
 801b0d0:	1c5a      	adds	r2, r3, #1
 801b0d2:	623a      	str	r2, [r7, #32]
 801b0d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b0d6:	b2d1      	uxtb	r1, r2
 801b0d8:	687a      	ldr	r2, [r7, #4]
 801b0da:	4413      	add	r3, r2
 801b0dc:	460a      	mov	r2, r1
 801b0de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801b0e2:	e763      	b.n	801afac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801b0e4:	bf00      	nop
 801b0e6:	e006      	b.n	801b0f6 <create_name+0x2da>
 801b0e8:	080299a8 	.word	0x080299a8
 801b0ec:	080372e4 	.word	0x080372e4
 801b0f0:	080299b4 	.word	0x080299b4
			if (si > di) break;			/* No extension */
 801b0f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b0fc:	2be5      	cmp	r3, #229	; 0xe5
 801b0fe:	d103      	bne.n	801b108 <create_name+0x2ec>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2205      	movs	r2, #5
 801b104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	2b08      	cmp	r3, #8
 801b10c:	d104      	bne.n	801b118 <create_name+0x2fc>
 801b10e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b112:	009b      	lsls	r3, r3, #2
 801b114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801b118:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b11c:	f003 030c 	and.w	r3, r3, #12
 801b120:	2b0c      	cmp	r3, #12
 801b122:	d005      	beq.n	801b130 <create_name+0x314>
 801b124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b128:	f003 0303 	and.w	r3, r3, #3
 801b12c:	2b03      	cmp	r3, #3
 801b12e:	d105      	bne.n	801b13c <create_name+0x320>
 801b130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b134:	f043 0302 	orr.w	r3, r3, #2
 801b138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801b13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b140:	f003 0302 	and.w	r3, r3, #2
 801b144:	2b00      	cmp	r3, #0
 801b146:	d117      	bne.n	801b178 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801b148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b14c:	f003 0303 	and.w	r3, r3, #3
 801b150:	2b01      	cmp	r3, #1
 801b152:	d105      	bne.n	801b160 <create_name+0x344>
 801b154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b158:	f043 0310 	orr.w	r3, r3, #16
 801b15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801b160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b164:	f003 030c 	and.w	r3, r3, #12
 801b168:	2b04      	cmp	r3, #4
 801b16a:	d105      	bne.n	801b178 <create_name+0x35c>
 801b16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b170:	f043 0308 	orr.w	r3, r3, #8
 801b174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b17e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801b182:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801b184:	4618      	mov	r0, r3
 801b186:	3728      	adds	r7, #40	; 0x28
 801b188:	46bd      	mov	sp, r7
 801b18a:	bd80      	pop	{r7, pc}

0801b18c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801b18c:	b580      	push	{r7, lr}
 801b18e:	b086      	sub	sp, #24
 801b190:	af00      	add	r7, sp, #0
 801b192:	6078      	str	r0, [r7, #4]
 801b194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801b19a:	693b      	ldr	r3, [r7, #16]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801b1a0:	e002      	b.n	801b1a8 <follow_path+0x1c>
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	3301      	adds	r3, #1
 801b1a6:	603b      	str	r3, [r7, #0]
 801b1a8:	683b      	ldr	r3, [r7, #0]
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	2b2f      	cmp	r3, #47	; 0x2f
 801b1ae:	d0f8      	beq.n	801b1a2 <follow_path+0x16>
 801b1b0:	683b      	ldr	r3, [r7, #0]
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	2b5c      	cmp	r3, #92	; 0x5c
 801b1b6:	d0f4      	beq.n	801b1a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801b1b8:	693b      	ldr	r3, [r7, #16]
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801b1be:	683b      	ldr	r3, [r7, #0]
 801b1c0:	781b      	ldrb	r3, [r3, #0]
 801b1c2:	2b1f      	cmp	r3, #31
 801b1c4:	d80a      	bhi.n	801b1dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	2280      	movs	r2, #128	; 0x80
 801b1ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801b1ce:	2100      	movs	r1, #0
 801b1d0:	6878      	ldr	r0, [r7, #4]
 801b1d2:	f7fe ff35 	bl	801a040 <dir_sdi>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	75fb      	strb	r3, [r7, #23]
 801b1da:	e043      	b.n	801b264 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b1dc:	463b      	mov	r3, r7
 801b1de:	4619      	mov	r1, r3
 801b1e0:	6878      	ldr	r0, [r7, #4]
 801b1e2:	f7ff fe1b 	bl	801ae1c <create_name>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b1ea:	7dfb      	ldrb	r3, [r7, #23]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d134      	bne.n	801b25a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801b1f0:	6878      	ldr	r0, [r7, #4]
 801b1f2:	f7ff fb7d 	bl	801a8f0 <dir_find>
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b200:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801b202:	7dfb      	ldrb	r3, [r7, #23]
 801b204:	2b00      	cmp	r3, #0
 801b206:	d00a      	beq.n	801b21e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801b208:	7dfb      	ldrb	r3, [r7, #23]
 801b20a:	2b04      	cmp	r3, #4
 801b20c:	d127      	bne.n	801b25e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801b20e:	7afb      	ldrb	r3, [r7, #11]
 801b210:	f003 0304 	and.w	r3, r3, #4
 801b214:	2b00      	cmp	r3, #0
 801b216:	d122      	bne.n	801b25e <follow_path+0xd2>
 801b218:	2305      	movs	r3, #5
 801b21a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801b21c:	e01f      	b.n	801b25e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b21e:	7afb      	ldrb	r3, [r7, #11]
 801b220:	f003 0304 	and.w	r3, r3, #4
 801b224:	2b00      	cmp	r3, #0
 801b226:	d11c      	bne.n	801b262 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	799b      	ldrb	r3, [r3, #6]
 801b22c:	f003 0310 	and.w	r3, r3, #16
 801b230:	2b00      	cmp	r3, #0
 801b232:	d102      	bne.n	801b23a <follow_path+0xae>
				res = FR_NO_PATH; break;
 801b234:	2305      	movs	r3, #5
 801b236:	75fb      	strb	r3, [r7, #23]
 801b238:	e014      	b.n	801b264 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	695b      	ldr	r3, [r3, #20]
 801b244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b248:	4413      	add	r3, r2
 801b24a:	4619      	mov	r1, r3
 801b24c:	68f8      	ldr	r0, [r7, #12]
 801b24e:	f7ff f87e 	bl	801a34e <ld_clust>
 801b252:	4602      	mov	r2, r0
 801b254:	693b      	ldr	r3, [r7, #16]
 801b256:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801b258:	e7c0      	b.n	801b1dc <follow_path+0x50>
			if (res != FR_OK) break;
 801b25a:	bf00      	nop
 801b25c:	e002      	b.n	801b264 <follow_path+0xd8>
				break;
 801b25e:	bf00      	nop
 801b260:	e000      	b.n	801b264 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801b262:	bf00      	nop
			}
		}
	}

	return res;
 801b264:	7dfb      	ldrb	r3, [r7, #23]
}
 801b266:	4618      	mov	r0, r3
 801b268:	3718      	adds	r7, #24
 801b26a:	46bd      	mov	sp, r7
 801b26c:	bd80      	pop	{r7, pc}

0801b26e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801b26e:	b480      	push	{r7}
 801b270:	b087      	sub	sp, #28
 801b272:	af00      	add	r7, sp, #0
 801b274:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801b276:	f04f 33ff 	mov.w	r3, #4294967295
 801b27a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d031      	beq.n	801b2e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	617b      	str	r3, [r7, #20]
 801b28a:	e002      	b.n	801b292 <get_ldnumber+0x24>
 801b28c:	697b      	ldr	r3, [r7, #20]
 801b28e:	3301      	adds	r3, #1
 801b290:	617b      	str	r3, [r7, #20]
 801b292:	697b      	ldr	r3, [r7, #20]
 801b294:	781b      	ldrb	r3, [r3, #0]
 801b296:	2b1f      	cmp	r3, #31
 801b298:	d903      	bls.n	801b2a2 <get_ldnumber+0x34>
 801b29a:	697b      	ldr	r3, [r7, #20]
 801b29c:	781b      	ldrb	r3, [r3, #0]
 801b29e:	2b3a      	cmp	r3, #58	; 0x3a
 801b2a0:	d1f4      	bne.n	801b28c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	781b      	ldrb	r3, [r3, #0]
 801b2a6:	2b3a      	cmp	r3, #58	; 0x3a
 801b2a8:	d11c      	bne.n	801b2e4 <get_ldnumber+0x76>
			tp = *path;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	1c5a      	adds	r2, r3, #1
 801b2b4:	60fa      	str	r2, [r7, #12]
 801b2b6:	781b      	ldrb	r3, [r3, #0]
 801b2b8:	3b30      	subs	r3, #48	; 0x30
 801b2ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	2b09      	cmp	r3, #9
 801b2c0:	d80e      	bhi.n	801b2e0 <get_ldnumber+0x72>
 801b2c2:	68fa      	ldr	r2, [r7, #12]
 801b2c4:	697b      	ldr	r3, [r7, #20]
 801b2c6:	429a      	cmp	r2, r3
 801b2c8:	d10a      	bne.n	801b2e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801b2ca:	68bb      	ldr	r3, [r7, #8]
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d807      	bhi.n	801b2e0 <get_ldnumber+0x72>
					vol = (int)i;
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801b2d4:	697b      	ldr	r3, [r7, #20]
 801b2d6:	3301      	adds	r3, #1
 801b2d8:	617b      	str	r3, [r7, #20]
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	697a      	ldr	r2, [r7, #20]
 801b2de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801b2e0:	693b      	ldr	r3, [r7, #16]
 801b2e2:	e002      	b.n	801b2ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801b2e8:	693b      	ldr	r3, [r7, #16]
}
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	371c      	adds	r7, #28
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f4:	4770      	bx	lr
	...

0801b2f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
 801b300:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	2200      	movs	r2, #0
 801b306:	70da      	strb	r2, [r3, #3]
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	f04f 32ff 	mov.w	r2, #4294967295
 801b30e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801b310:	6839      	ldr	r1, [r7, #0]
 801b312:	6878      	ldr	r0, [r7, #4]
 801b314:	f7fe fb14 	bl	8019940 <move_window>
 801b318:	4603      	mov	r3, r0
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d001      	beq.n	801b322 <check_fs+0x2a>
 801b31e:	2304      	movs	r3, #4
 801b320:	e038      	b.n	801b394 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	3334      	adds	r3, #52	; 0x34
 801b326:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801b32a:	4618      	mov	r0, r3
 801b32c:	f7fe f858 	bl	80193e0 <ld_word>
 801b330:	4603      	mov	r3, r0
 801b332:	461a      	mov	r2, r3
 801b334:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801b338:	429a      	cmp	r2, r3
 801b33a:	d001      	beq.n	801b340 <check_fs+0x48>
 801b33c:	2303      	movs	r3, #3
 801b33e:	e029      	b.n	801b394 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b346:	2be9      	cmp	r3, #233	; 0xe9
 801b348:	d009      	beq.n	801b35e <check_fs+0x66>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b350:	2beb      	cmp	r3, #235	; 0xeb
 801b352:	d11e      	bne.n	801b392 <check_fs+0x9a>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801b35a:	2b90      	cmp	r3, #144	; 0x90
 801b35c:	d119      	bne.n	801b392 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	3334      	adds	r3, #52	; 0x34
 801b362:	3336      	adds	r3, #54	; 0x36
 801b364:	4618      	mov	r0, r3
 801b366:	f7fe f853 	bl	8019410 <ld_dword>
 801b36a:	4603      	mov	r3, r0
 801b36c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801b370:	4a0a      	ldr	r2, [pc, #40]	; (801b39c <check_fs+0xa4>)
 801b372:	4293      	cmp	r3, r2
 801b374:	d101      	bne.n	801b37a <check_fs+0x82>
 801b376:	2300      	movs	r3, #0
 801b378:	e00c      	b.n	801b394 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	3334      	adds	r3, #52	; 0x34
 801b37e:	3352      	adds	r3, #82	; 0x52
 801b380:	4618      	mov	r0, r3
 801b382:	f7fe f845 	bl	8019410 <ld_dword>
 801b386:	4603      	mov	r3, r0
 801b388:	4a05      	ldr	r2, [pc, #20]	; (801b3a0 <check_fs+0xa8>)
 801b38a:	4293      	cmp	r3, r2
 801b38c:	d101      	bne.n	801b392 <check_fs+0x9a>
 801b38e:	2300      	movs	r3, #0
 801b390:	e000      	b.n	801b394 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801b392:	2302      	movs	r3, #2
}
 801b394:	4618      	mov	r0, r3
 801b396:	3708      	adds	r7, #8
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	00544146 	.word	0x00544146
 801b3a0:	33544146 	.word	0x33544146

0801b3a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b096      	sub	sp, #88	; 0x58
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	60f8      	str	r0, [r7, #12]
 801b3ac:	60b9      	str	r1, [r7, #8]
 801b3ae:	4613      	mov	r3, r2
 801b3b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801b3b2:	68bb      	ldr	r3, [r7, #8]
 801b3b4:	2200      	movs	r2, #0
 801b3b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801b3b8:	68f8      	ldr	r0, [r7, #12]
 801b3ba:	f7ff ff58 	bl	801b26e <get_ldnumber>
 801b3be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801b3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	da01      	bge.n	801b3ca <find_volume+0x26>
 801b3c6:	230b      	movs	r3, #11
 801b3c8:	e22d      	b.n	801b826 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801b3ca:	4aa1      	ldr	r2, [pc, #644]	; (801b650 <find_volume+0x2ac>)
 801b3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b3d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d101      	bne.n	801b3de <find_volume+0x3a>
 801b3da:	230c      	movs	r3, #12
 801b3dc:	e223      	b.n	801b826 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b3e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801b3e4:	79fb      	ldrb	r3, [r7, #7]
 801b3e6:	f023 0301 	bic.w	r3, r3, #1
 801b3ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3ee:	781b      	ldrb	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d01a      	beq.n	801b42a <find_volume+0x86>
		stat = disk_status(fs->drv);
 801b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3f6:	785b      	ldrb	r3, [r3, #1]
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7fd ff4b 	bl	8019294 <disk_status>
 801b3fe:	4603      	mov	r3, r0
 801b400:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801b404:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b408:	f003 0301 	and.w	r3, r3, #1
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	d10c      	bne.n	801b42a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801b410:	79fb      	ldrb	r3, [r7, #7]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d007      	beq.n	801b426 <find_volume+0x82>
 801b416:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b41a:	f003 0304 	and.w	r3, r3, #4
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d001      	beq.n	801b426 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801b422:	230a      	movs	r3, #10
 801b424:	e1ff      	b.n	801b826 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801b426:	2300      	movs	r3, #0
 801b428:	e1fd      	b.n	801b826 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801b42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b42c:	2200      	movs	r2, #0
 801b42e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801b430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b432:	b2da      	uxtb	r2, r3
 801b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b436:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b43a:	785b      	ldrb	r3, [r3, #1]
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7fd ff43 	bl	80192c8 <disk_initialize>
 801b442:	4603      	mov	r3, r0
 801b444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801b448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b44c:	f003 0301 	and.w	r3, r3, #1
 801b450:	2b00      	cmp	r3, #0
 801b452:	d001      	beq.n	801b458 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801b454:	2303      	movs	r3, #3
 801b456:	e1e6      	b.n	801b826 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801b458:	79fb      	ldrb	r3, [r7, #7]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d007      	beq.n	801b46e <find_volume+0xca>
 801b45e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b462:	f003 0304 	and.w	r3, r3, #4
 801b466:	2b00      	cmp	r3, #0
 801b468:	d001      	beq.n	801b46e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801b46a:	230a      	movs	r3, #10
 801b46c:	e1db      	b.n	801b826 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801b46e:	2300      	movs	r3, #0
 801b470:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801b472:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801b474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b476:	f7ff ff3f 	bl	801b2f8 <check_fs>
 801b47a:	4603      	mov	r3, r0
 801b47c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801b480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b484:	2b02      	cmp	r3, #2
 801b486:	d149      	bne.n	801b51c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b488:	2300      	movs	r3, #0
 801b48a:	643b      	str	r3, [r7, #64]	; 0x40
 801b48c:	e01e      	b.n	801b4cc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801b48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b490:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b496:	011b      	lsls	r3, r3, #4
 801b498:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801b49c:	4413      	add	r3, r2
 801b49e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4a2:	3304      	adds	r3, #4
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d006      	beq.n	801b4b8 <find_volume+0x114>
 801b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b4ac:	3308      	adds	r3, #8
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	f7fd ffae 	bl	8019410 <ld_dword>
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	e000      	b.n	801b4ba <find_volume+0x116>
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4bc:	009b      	lsls	r3, r3, #2
 801b4be:	3358      	adds	r3, #88	; 0x58
 801b4c0:	443b      	add	r3, r7
 801b4c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801b4c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4c8:	3301      	adds	r3, #1
 801b4ca:	643b      	str	r3, [r7, #64]	; 0x40
 801b4cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4ce:	2b03      	cmp	r3, #3
 801b4d0:	d9dd      	bls.n	801b48e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801b4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d002      	beq.n	801b4e2 <find_volume+0x13e>
 801b4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4de:	3b01      	subs	r3, #1
 801b4e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801b4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b4e4:	009b      	lsls	r3, r3, #2
 801b4e6:	3358      	adds	r3, #88	; 0x58
 801b4e8:	443b      	add	r3, r7
 801b4ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801b4ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801b4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d005      	beq.n	801b502 <find_volume+0x15e>
 801b4f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801b4f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b4fa:	f7ff fefd 	bl	801b2f8 <check_fs>
 801b4fe:	4603      	mov	r3, r0
 801b500:	e000      	b.n	801b504 <find_volume+0x160>
 801b502:	2303      	movs	r3, #3
 801b504:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801b508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b50c:	2b01      	cmp	r3, #1
 801b50e:	d905      	bls.n	801b51c <find_volume+0x178>
 801b510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b512:	3301      	adds	r3, #1
 801b514:	643b      	str	r3, [r7, #64]	; 0x40
 801b516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b518:	2b03      	cmp	r3, #3
 801b51a:	d9e2      	bls.n	801b4e2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801b51c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b520:	2b04      	cmp	r3, #4
 801b522:	d101      	bne.n	801b528 <find_volume+0x184>
 801b524:	2301      	movs	r3, #1
 801b526:	e17e      	b.n	801b826 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801b528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b52c:	2b01      	cmp	r3, #1
 801b52e:	d901      	bls.n	801b534 <find_volume+0x190>
 801b530:	230d      	movs	r3, #13
 801b532:	e178      	b.n	801b826 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801b534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b536:	3334      	adds	r3, #52	; 0x34
 801b538:	330b      	adds	r3, #11
 801b53a:	4618      	mov	r0, r3
 801b53c:	f7fd ff50 	bl	80193e0 <ld_word>
 801b540:	4603      	mov	r3, r0
 801b542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b546:	d001      	beq.n	801b54c <find_volume+0x1a8>
 801b548:	230d      	movs	r3, #13
 801b54a:	e16c      	b.n	801b826 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b54e:	3334      	adds	r3, #52	; 0x34
 801b550:	3316      	adds	r3, #22
 801b552:	4618      	mov	r0, r3
 801b554:	f7fd ff44 	bl	80193e0 <ld_word>
 801b558:	4603      	mov	r3, r0
 801b55a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801b55c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d106      	bne.n	801b570 <find_volume+0x1cc>
 801b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b564:	3334      	adds	r3, #52	; 0x34
 801b566:	3324      	adds	r3, #36	; 0x24
 801b568:	4618      	mov	r0, r3
 801b56a:	f7fd ff51 	bl	8019410 <ld_dword>
 801b56e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b572:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b574:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801b576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b578:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b57e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b582:	789b      	ldrb	r3, [r3, #2]
 801b584:	2b01      	cmp	r3, #1
 801b586:	d005      	beq.n	801b594 <find_volume+0x1f0>
 801b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b58a:	789b      	ldrb	r3, [r3, #2]
 801b58c:	2b02      	cmp	r3, #2
 801b58e:	d001      	beq.n	801b594 <find_volume+0x1f0>
 801b590:	230d      	movs	r3, #13
 801b592:	e148      	b.n	801b826 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b596:	789b      	ldrb	r3, [r3, #2]
 801b598:	461a      	mov	r2, r3
 801b59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b59c:	fb02 f303 	mul.w	r3, r2, r3
 801b5a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801b5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b5a8:	b29a      	uxth	r2, r3
 801b5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801b5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5b0:	895b      	ldrh	r3, [r3, #10]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d008      	beq.n	801b5c8 <find_volume+0x224>
 801b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5b8:	895b      	ldrh	r3, [r3, #10]
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5be:	895b      	ldrh	r3, [r3, #10]
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	4013      	ands	r3, r2
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d001      	beq.n	801b5cc <find_volume+0x228>
 801b5c8:	230d      	movs	r3, #13
 801b5ca:	e12c      	b.n	801b826 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801b5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5ce:	3334      	adds	r3, #52	; 0x34
 801b5d0:	3311      	adds	r3, #17
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f7fd ff04 	bl	80193e0 <ld_word>
 801b5d8:	4603      	mov	r3, r0
 801b5da:	461a      	mov	r2, r3
 801b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801b5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5e2:	891b      	ldrh	r3, [r3, #8]
 801b5e4:	f003 030f 	and.w	r3, r3, #15
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d001      	beq.n	801b5f2 <find_volume+0x24e>
 801b5ee:	230d      	movs	r3, #13
 801b5f0:	e119      	b.n	801b826 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801b5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b5f4:	3334      	adds	r3, #52	; 0x34
 801b5f6:	3313      	adds	r3, #19
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7fd fef1 	bl	80193e0 <ld_word>
 801b5fe:	4603      	mov	r3, r0
 801b600:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801b602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b604:	2b00      	cmp	r3, #0
 801b606:	d106      	bne.n	801b616 <find_volume+0x272>
 801b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b60a:	3334      	adds	r3, #52	; 0x34
 801b60c:	3320      	adds	r3, #32
 801b60e:	4618      	mov	r0, r3
 801b610:	f7fd fefe 	bl	8019410 <ld_dword>
 801b614:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b618:	3334      	adds	r3, #52	; 0x34
 801b61a:	330e      	adds	r3, #14
 801b61c:	4618      	mov	r0, r3
 801b61e:	f7fd fedf 	bl	80193e0 <ld_word>
 801b622:	4603      	mov	r3, r0
 801b624:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801b626:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d101      	bne.n	801b630 <find_volume+0x28c>
 801b62c:	230d      	movs	r3, #13
 801b62e:	e0fa      	b.n	801b826 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801b630:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b634:	4413      	add	r3, r2
 801b636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b638:	8912      	ldrh	r2, [r2, #8]
 801b63a:	0912      	lsrs	r2, r2, #4
 801b63c:	b292      	uxth	r2, r2
 801b63e:	4413      	add	r3, r2
 801b640:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801b642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b646:	429a      	cmp	r2, r3
 801b648:	d204      	bcs.n	801b654 <find_volume+0x2b0>
 801b64a:	230d      	movs	r3, #13
 801b64c:	e0eb      	b.n	801b826 <find_volume+0x482>
 801b64e:	bf00      	nop
 801b650:	2000b344 	.word	0x2000b344
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801b654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b658:	1ad3      	subs	r3, r2, r3
 801b65a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801b65c:	8952      	ldrh	r2, [r2, #10]
 801b65e:	fbb3 f3f2 	udiv	r3, r3, r2
 801b662:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b666:	2b00      	cmp	r3, #0
 801b668:	d101      	bne.n	801b66e <find_volume+0x2ca>
 801b66a:	230d      	movs	r3, #13
 801b66c:	e0db      	b.n	801b826 <find_volume+0x482>
		fmt = FS_FAT32;
 801b66e:	2303      	movs	r3, #3
 801b670:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b676:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801b67a:	4293      	cmp	r3, r2
 801b67c:	d802      	bhi.n	801b684 <find_volume+0x2e0>
 801b67e:	2302      	movs	r3, #2
 801b680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b686:	f640 72f5 	movw	r2, #4085	; 0xff5
 801b68a:	4293      	cmp	r3, r2
 801b68c:	d802      	bhi.n	801b694 <find_volume+0x2f0>
 801b68e:	2301      	movs	r3, #1
 801b690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b696:	1c9a      	adds	r2, r3, #2
 801b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b69a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b69e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b6a0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801b6a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b6a6:	441a      	add	r2, r3
 801b6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801b6ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6b0:	441a      	add	r2, r3
 801b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6b4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801b6b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b6ba:	2b03      	cmp	r3, #3
 801b6bc:	d11e      	bne.n	801b6fc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6c0:	3334      	adds	r3, #52	; 0x34
 801b6c2:	332a      	adds	r3, #42	; 0x2a
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f7fd fe8b 	bl	80193e0 <ld_word>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d001      	beq.n	801b6d4 <find_volume+0x330>
 801b6d0:	230d      	movs	r3, #13
 801b6d2:	e0a8      	b.n	801b826 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6d6:	891b      	ldrh	r3, [r3, #8]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d001      	beq.n	801b6e0 <find_volume+0x33c>
 801b6dc:	230d      	movs	r3, #13
 801b6de:	e0a2      	b.n	801b826 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801b6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6e2:	3334      	adds	r3, #52	; 0x34
 801b6e4:	332c      	adds	r3, #44	; 0x2c
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f7fd fe92 	bl	8019410 <ld_dword>
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6f0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801b6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6f4:	699b      	ldr	r3, [r3, #24]
 801b6f6:	009b      	lsls	r3, r3, #2
 801b6f8:	647b      	str	r3, [r7, #68]	; 0x44
 801b6fa:	e01f      	b.n	801b73c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6fe:	891b      	ldrh	r3, [r3, #8]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d101      	bne.n	801b708 <find_volume+0x364>
 801b704:	230d      	movs	r3, #13
 801b706:	e08e      	b.n	801b826 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801b708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b70a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b70e:	441a      	add	r2, r3
 801b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b712:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801b714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b718:	2b02      	cmp	r3, #2
 801b71a:	d103      	bne.n	801b724 <find_volume+0x380>
 801b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b71e:	699b      	ldr	r3, [r3, #24]
 801b720:	005b      	lsls	r3, r3, #1
 801b722:	e00a      	b.n	801b73a <find_volume+0x396>
 801b724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b726:	699a      	ldr	r2, [r3, #24]
 801b728:	4613      	mov	r3, r2
 801b72a:	005b      	lsls	r3, r3, #1
 801b72c:	4413      	add	r3, r2
 801b72e:	085a      	lsrs	r2, r3, #1
 801b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b732:	699b      	ldr	r3, [r3, #24]
 801b734:	f003 0301 	and.w	r3, r3, #1
 801b738:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801b73a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b73e:	69da      	ldr	r2, [r3, #28]
 801b740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b742:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801b746:	0a5b      	lsrs	r3, r3, #9
 801b748:	429a      	cmp	r2, r3
 801b74a:	d201      	bcs.n	801b750 <find_volume+0x3ac>
 801b74c:	230d      	movs	r3, #13
 801b74e:	e06a      	b.n	801b826 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b752:	f04f 32ff 	mov.w	r2, #4294967295
 801b756:	615a      	str	r2, [r3, #20]
 801b758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b75a:	695a      	ldr	r2, [r3, #20]
 801b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b75e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b762:	2280      	movs	r2, #128	; 0x80
 801b764:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801b766:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b76a:	2b03      	cmp	r3, #3
 801b76c:	d149      	bne.n	801b802 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b770:	3334      	adds	r3, #52	; 0x34
 801b772:	3330      	adds	r3, #48	; 0x30
 801b774:	4618      	mov	r0, r3
 801b776:	f7fd fe33 	bl	80193e0 <ld_word>
 801b77a:	4603      	mov	r3, r0
 801b77c:	2b01      	cmp	r3, #1
 801b77e:	d140      	bne.n	801b802 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801b780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b782:	3301      	adds	r3, #1
 801b784:	4619      	mov	r1, r3
 801b786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b788:	f7fe f8da 	bl	8019940 <move_window>
 801b78c:	4603      	mov	r3, r0
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d137      	bne.n	801b802 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801b792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b794:	2200      	movs	r2, #0
 801b796:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b79a:	3334      	adds	r3, #52	; 0x34
 801b79c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7fd fe1d 	bl	80193e0 <ld_word>
 801b7a6:	4603      	mov	r3, r0
 801b7a8:	461a      	mov	r2, r3
 801b7aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801b7ae:	429a      	cmp	r2, r3
 801b7b0:	d127      	bne.n	801b802 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7b4:	3334      	adds	r3, #52	; 0x34
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7fd fe2a 	bl	8019410 <ld_dword>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	4a1c      	ldr	r2, [pc, #112]	; (801b830 <find_volume+0x48c>)
 801b7c0:	4293      	cmp	r3, r2
 801b7c2:	d11e      	bne.n	801b802 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7c6:	3334      	adds	r3, #52	; 0x34
 801b7c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7fd fe1f 	bl	8019410 <ld_dword>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	4a17      	ldr	r2, [pc, #92]	; (801b834 <find_volume+0x490>)
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d113      	bne.n	801b802 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7dc:	3334      	adds	r3, #52	; 0x34
 801b7de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801b7e2:	4618      	mov	r0, r3
 801b7e4:	f7fd fe14 	bl	8019410 <ld_dword>
 801b7e8:	4602      	mov	r2, r0
 801b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7ec:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801b7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b7f0:	3334      	adds	r3, #52	; 0x34
 801b7f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7fd fe0a 	bl	8019410 <ld_dword>
 801b7fc:	4602      	mov	r2, r0
 801b7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b800:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b804:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801b808:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801b80a:	4b0b      	ldr	r3, [pc, #44]	; (801b838 <find_volume+0x494>)
 801b80c:	881b      	ldrh	r3, [r3, #0]
 801b80e:	3301      	adds	r3, #1
 801b810:	b29a      	uxth	r2, r3
 801b812:	4b09      	ldr	r3, [pc, #36]	; (801b838 <find_volume+0x494>)
 801b814:	801a      	strh	r2, [r3, #0]
 801b816:	4b08      	ldr	r3, [pc, #32]	; (801b838 <find_volume+0x494>)
 801b818:	881a      	ldrh	r2, [r3, #0]
 801b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b81c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801b81e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801b820:	f7fe f826 	bl	8019870 <clear_lock>
#endif
	return FR_OK;
 801b824:	2300      	movs	r3, #0
}
 801b826:	4618      	mov	r0, r3
 801b828:	3758      	adds	r7, #88	; 0x58
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
 801b82e:	bf00      	nop
 801b830:	41615252 	.word	0x41615252
 801b834:	61417272 	.word	0x61417272
 801b838:	2000b34c 	.word	0x2000b34c

0801b83c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b084      	sub	sp, #16
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
 801b844:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801b846:	2309      	movs	r3, #9
 801b848:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d01c      	beq.n	801b88a <validate+0x4e>
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	2b00      	cmp	r3, #0
 801b856:	d018      	beq.n	801b88a <validate+0x4e>
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	781b      	ldrb	r3, [r3, #0]
 801b85e:	2b00      	cmp	r3, #0
 801b860:	d013      	beq.n	801b88a <validate+0x4e>
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	889a      	ldrh	r2, [r3, #4]
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	88db      	ldrh	r3, [r3, #6]
 801b86c:	429a      	cmp	r2, r3
 801b86e:	d10c      	bne.n	801b88a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	785b      	ldrb	r3, [r3, #1]
 801b876:	4618      	mov	r0, r3
 801b878:	f7fd fd0c 	bl	8019294 <disk_status>
 801b87c:	4603      	mov	r3, r0
 801b87e:	f003 0301 	and.w	r3, r3, #1
 801b882:	2b00      	cmp	r3, #0
 801b884:	d101      	bne.n	801b88a <validate+0x4e>
			res = FR_OK;
 801b886:	2300      	movs	r3, #0
 801b888:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b88a:	7bfb      	ldrb	r3, [r7, #15]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d102      	bne.n	801b896 <validate+0x5a>
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	e000      	b.n	801b898 <validate+0x5c>
 801b896:	2300      	movs	r3, #0
 801b898:	683a      	ldr	r2, [r7, #0]
 801b89a:	6013      	str	r3, [r2, #0]
	return res;
 801b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b89e:	4618      	mov	r0, r3
 801b8a0:	3710      	adds	r7, #16
 801b8a2:	46bd      	mov	sp, r7
 801b8a4:	bd80      	pop	{r7, pc}
	...

0801b8a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801b8a8:	b580      	push	{r7, lr}
 801b8aa:	b088      	sub	sp, #32
 801b8ac:	af00      	add	r7, sp, #0
 801b8ae:	60f8      	str	r0, [r7, #12]
 801b8b0:	60b9      	str	r1, [r7, #8]
 801b8b2:	4613      	mov	r3, r2
 801b8b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801b8b6:	68bb      	ldr	r3, [r7, #8]
 801b8b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801b8ba:	f107 0310 	add.w	r3, r7, #16
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f7ff fcd5 	bl	801b26e <get_ldnumber>
 801b8c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801b8c6:	69fb      	ldr	r3, [r7, #28]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	da01      	bge.n	801b8d0 <f_mount+0x28>
 801b8cc:	230b      	movs	r3, #11
 801b8ce:	e02b      	b.n	801b928 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801b8d0:	4a17      	ldr	r2, [pc, #92]	; (801b930 <f_mount+0x88>)
 801b8d2:	69fb      	ldr	r3, [r7, #28]
 801b8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b8d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801b8da:	69bb      	ldr	r3, [r7, #24]
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d005      	beq.n	801b8ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801b8e0:	69b8      	ldr	r0, [r7, #24]
 801b8e2:	f7fd ffc5 	bl	8019870 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801b8e6:	69bb      	ldr	r3, [r7, #24]
 801b8e8:	2200      	movs	r2, #0
 801b8ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d002      	beq.n	801b8f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801b8f8:	68fa      	ldr	r2, [r7, #12]
 801b8fa:	490d      	ldr	r1, [pc, #52]	; (801b930 <f_mount+0x88>)
 801b8fc:	69fb      	ldr	r3, [r7, #28]
 801b8fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d002      	beq.n	801b90e <f_mount+0x66>
 801b908:	79fb      	ldrb	r3, [r7, #7]
 801b90a:	2b01      	cmp	r3, #1
 801b90c:	d001      	beq.n	801b912 <f_mount+0x6a>
 801b90e:	2300      	movs	r3, #0
 801b910:	e00a      	b.n	801b928 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801b912:	f107 010c 	add.w	r1, r7, #12
 801b916:	f107 0308 	add.w	r3, r7, #8
 801b91a:	2200      	movs	r2, #0
 801b91c:	4618      	mov	r0, r3
 801b91e:	f7ff fd41 	bl	801b3a4 <find_volume>
 801b922:	4603      	mov	r3, r0
 801b924:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801b926:	7dfb      	ldrb	r3, [r7, #23]
}
 801b928:	4618      	mov	r0, r3
 801b92a:	3720      	adds	r7, #32
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}
 801b930:	2000b344 	.word	0x2000b344

0801b934 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b09a      	sub	sp, #104	; 0x68
 801b938:	af00      	add	r7, sp, #0
 801b93a:	60f8      	str	r0, [r7, #12]
 801b93c:	60b9      	str	r1, [r7, #8]
 801b93e:	4613      	mov	r3, r2
 801b940:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801b942:	68fb      	ldr	r3, [r7, #12]
 801b944:	2b00      	cmp	r3, #0
 801b946:	d101      	bne.n	801b94c <f_open+0x18>
 801b948:	2309      	movs	r3, #9
 801b94a:	e1bd      	b.n	801bcc8 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801b94c:	79fb      	ldrb	r3, [r7, #7]
 801b94e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b952:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801b954:	79fa      	ldrb	r2, [r7, #7]
 801b956:	f107 0110 	add.w	r1, r7, #16
 801b95a:	f107 0308 	add.w	r3, r7, #8
 801b95e:	4618      	mov	r0, r3
 801b960:	f7ff fd20 	bl	801b3a4 <find_volume>
 801b964:	4603      	mov	r3, r0
 801b966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801b96a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b96e:	2b00      	cmp	r3, #0
 801b970:	f040 81a1 	bne.w	801bcb6 <f_open+0x382>
		dj.obj.fs = fs;
 801b974:	693b      	ldr	r3, [r7, #16]
 801b976:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 801b978:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b97c:	f001 fba9 	bl	801d0d2 <ff_memalloc>
 801b980:	65b8      	str	r0, [r7, #88]	; 0x58
 801b982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801b984:	2b00      	cmp	r3, #0
 801b986:	d101      	bne.n	801b98c <f_open+0x58>
 801b988:	2311      	movs	r3, #17
 801b98a:	e19d      	b.n	801bcc8 <f_open+0x394>
 801b98c:	693b      	ldr	r3, [r7, #16]
 801b98e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b990:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801b992:	68ba      	ldr	r2, [r7, #8]
 801b994:	f107 0314 	add.w	r3, r7, #20
 801b998:	4611      	mov	r1, r2
 801b99a:	4618      	mov	r0, r3
 801b99c:	f7ff fbf6 	bl	801b18c <follow_path>
 801b9a0:	4603      	mov	r3, r0
 801b9a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801b9a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d11a      	bne.n	801b9e4 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801b9ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801b9b2:	b25b      	sxtb	r3, r3
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	da03      	bge.n	801b9c0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 801b9b8:	2306      	movs	r3, #6
 801b9ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801b9be:	e011      	b.n	801b9e4 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801b9c0:	79fb      	ldrb	r3, [r7, #7]
 801b9c2:	f023 0301 	bic.w	r3, r3, #1
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	bf14      	ite	ne
 801b9ca:	2301      	movne	r3, #1
 801b9cc:	2300      	moveq	r3, #0
 801b9ce:	b2db      	uxtb	r3, r3
 801b9d0:	461a      	mov	r2, r3
 801b9d2:	f107 0314 	add.w	r3, r7, #20
 801b9d6:	4611      	mov	r1, r2
 801b9d8:	4618      	mov	r0, r3
 801b9da:	f7fd fe01 	bl	80195e0 <chk_lock>
 801b9de:	4603      	mov	r3, r0
 801b9e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801b9e4:	79fb      	ldrb	r3, [r7, #7]
 801b9e6:	f003 031c 	and.w	r3, r3, #28
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d07f      	beq.n	801baee <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 801b9ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d017      	beq.n	801ba26 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801b9f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801b9fa:	2b04      	cmp	r3, #4
 801b9fc:	d10e      	bne.n	801ba1c <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801b9fe:	f7fd fe4b 	bl	8019698 <enq_lock>
 801ba02:	4603      	mov	r3, r0
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d006      	beq.n	801ba16 <f_open+0xe2>
 801ba08:	f107 0314 	add.w	r3, r7, #20
 801ba0c:	4618      	mov	r0, r3
 801ba0e:	f7ff f82f 	bl	801aa70 <dir_register>
 801ba12:	4603      	mov	r3, r0
 801ba14:	e000      	b.n	801ba18 <f_open+0xe4>
 801ba16:	2312      	movs	r3, #18
 801ba18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801ba1c:	79fb      	ldrb	r3, [r7, #7]
 801ba1e:	f043 0308 	orr.w	r3, r3, #8
 801ba22:	71fb      	strb	r3, [r7, #7]
 801ba24:	e010      	b.n	801ba48 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801ba26:	7ebb      	ldrb	r3, [r7, #26]
 801ba28:	f003 0311 	and.w	r3, r3, #17
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d003      	beq.n	801ba38 <f_open+0x104>
					res = FR_DENIED;
 801ba30:	2307      	movs	r3, #7
 801ba32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801ba36:	e007      	b.n	801ba48 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801ba38:	79fb      	ldrb	r3, [r7, #7]
 801ba3a:	f003 0304 	and.w	r3, r3, #4
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d002      	beq.n	801ba48 <f_open+0x114>
 801ba42:	2308      	movs	r3, #8
 801ba44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801ba48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	d168      	bne.n	801bb22 <f_open+0x1ee>
 801ba50:	79fb      	ldrb	r3, [r7, #7]
 801ba52:	f003 0308 	and.w	r3, r3, #8
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d063      	beq.n	801bb22 <f_open+0x1ee>
				dw = GET_FATTIME();
 801ba5a:	f7fd fcb9 	bl	80193d0 <get_fattime>
 801ba5e:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801ba60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba62:	330e      	adds	r3, #14
 801ba64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba66:	4618      	mov	r0, r3
 801ba68:	f7fd fd10 	bl	801948c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba6e:	3316      	adds	r3, #22
 801ba70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ba72:	4618      	mov	r0, r3
 801ba74:	f7fd fd0a 	bl	801948c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801ba78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba7a:	330b      	adds	r3, #11
 801ba7c:	2220      	movs	r2, #32
 801ba7e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801ba80:	693b      	ldr	r3, [r7, #16]
 801ba82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ba84:	4611      	mov	r1, r2
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7fe fc61 	bl	801a34e <ld_clust>
 801ba8c:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801ba8e:	693b      	ldr	r3, [r7, #16]
 801ba90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ba92:	2200      	movs	r2, #0
 801ba94:	4618      	mov	r0, r3
 801ba96:	f7fe fc79 	bl	801a38c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba9c:	331c      	adds	r3, #28
 801ba9e:	2100      	movs	r1, #0
 801baa0:	4618      	mov	r0, r3
 801baa2:	f7fd fcf3 	bl	801948c <st_dword>
					fs->wflag = 1;
 801baa6:	693b      	ldr	r3, [r7, #16]
 801baa8:	2201      	movs	r2, #1
 801baaa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801baac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d037      	beq.n	801bb22 <f_open+0x1ee>
						dw = fs->winsect;
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bab6:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801bab8:	f107 0314 	add.w	r3, r7, #20
 801babc:	2200      	movs	r2, #0
 801babe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bac0:	4618      	mov	r0, r3
 801bac2:	f7fe f98c 	bl	8019dde <remove_chain>
 801bac6:	4603      	mov	r3, r0
 801bac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801bacc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d126      	bne.n	801bb22 <f_open+0x1ee>
							res = move_window(fs, dw);
 801bad4:	693b      	ldr	r3, [r7, #16]
 801bad6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bad8:	4618      	mov	r0, r3
 801bada:	f7fd ff31 	bl	8019940 <move_window>
 801bade:	4603      	mov	r3, r0
 801bae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801bae8:	3a01      	subs	r2, #1
 801baea:	611a      	str	r2, [r3, #16]
 801baec:	e019      	b.n	801bb22 <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801baee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d115      	bne.n	801bb22 <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801baf6:	7ebb      	ldrb	r3, [r7, #26]
 801baf8:	f003 0310 	and.w	r3, r3, #16
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d003      	beq.n	801bb08 <f_open+0x1d4>
					res = FR_NO_FILE;
 801bb00:	2304      	movs	r3, #4
 801bb02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801bb06:	e00c      	b.n	801bb22 <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801bb08:	79fb      	ldrb	r3, [r7, #7]
 801bb0a:	f003 0302 	and.w	r3, r3, #2
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d007      	beq.n	801bb22 <f_open+0x1ee>
 801bb12:	7ebb      	ldrb	r3, [r7, #26]
 801bb14:	f003 0301 	and.w	r3, r3, #1
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d002      	beq.n	801bb22 <f_open+0x1ee>
						res = FR_DENIED;
 801bb1c:	2307      	movs	r3, #7
 801bb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801bb22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d128      	bne.n	801bb7c <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801bb2a:	79fb      	ldrb	r3, [r7, #7]
 801bb2c:	f003 0308 	and.w	r3, r3, #8
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d003      	beq.n	801bb3c <f_open+0x208>
				mode |= FA_MODIFIED;
 801bb34:	79fb      	ldrb	r3, [r7, #7]
 801bb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb3a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801bb3c:	693b      	ldr	r3, [r7, #16]
 801bb3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801bb44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bb46:	68fb      	ldr	r3, [r7, #12]
 801bb48:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801bb4a:	79fb      	ldrb	r3, [r7, #7]
 801bb4c:	f023 0301 	bic.w	r3, r3, #1
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	bf14      	ite	ne
 801bb54:	2301      	movne	r3, #1
 801bb56:	2300      	moveq	r3, #0
 801bb58:	b2db      	uxtb	r3, r3
 801bb5a:	461a      	mov	r2, r3
 801bb5c:	f107 0314 	add.w	r3, r7, #20
 801bb60:	4611      	mov	r1, r2
 801bb62:	4618      	mov	r0, r3
 801bb64:	f7fd fdba 	bl	80196dc <inc_lock>
 801bb68:	4602      	mov	r2, r0
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801bb6e:	68fb      	ldr	r3, [r7, #12]
 801bb70:	691b      	ldr	r3, [r3, #16]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d102      	bne.n	801bb7c <f_open+0x248>
 801bb76:	2302      	movs	r3, #2
 801bb78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801bb7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f040 8095 	bne.w	801bcb0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801bb86:	693b      	ldr	r3, [r7, #16]
 801bb88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bb8a:	4611      	mov	r1, r2
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	f7fe fbde 	bl	801a34e <ld_clust>
 801bb92:	4602      	mov	r2, r0
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801bb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bb9a:	331c      	adds	r3, #28
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	f7fd fc37 	bl	8019410 <ld_dword>
 801bba2:	4602      	mov	r2, r0
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	2200      	movs	r2, #0
 801bbac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801bbae:	693a      	ldr	r2, [r7, #16]
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801bbb4:	693b      	ldr	r3, [r7, #16]
 801bbb6:	88da      	ldrh	r2, [r3, #6]
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	79fa      	ldrb	r2, [r7, #7]
 801bbc0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	2200      	movs	r2, #0
 801bbc6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	2200      	movs	r2, #0
 801bbcc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	3330      	adds	r3, #48	; 0x30
 801bbd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bbdc:	2100      	movs	r1, #0
 801bbde:	4618      	mov	r0, r3
 801bbe0:	f7fd fca1 	bl	8019526 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801bbe4:	79fb      	ldrb	r3, [r7, #7]
 801bbe6:	f003 0320 	and.w	r3, r3, #32
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d060      	beq.n	801bcb0 <f_open+0x37c>
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	68db      	ldr	r3, [r3, #12]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d05c      	beq.n	801bcb0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801bbf6:	68fb      	ldr	r3, [r7, #12]
 801bbf8:	68da      	ldr	r2, [r3, #12]
 801bbfa:	68fb      	ldr	r3, [r7, #12]
 801bbfc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801bbfe:	693b      	ldr	r3, [r7, #16]
 801bc00:	895b      	ldrh	r3, [r3, #10]
 801bc02:	025b      	lsls	r3, r3, #9
 801bc04:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	689b      	ldr	r3, [r3, #8]
 801bc0a:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	68db      	ldr	r3, [r3, #12]
 801bc10:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bc12:	e016      	b.n	801bc42 <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f7fd ff4c 	bl	8019ab6 <get_fat>
 801bc1e:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801bc20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	d802      	bhi.n	801bc2c <f_open+0x2f8>
 801bc26:	2302      	movs	r3, #2
 801bc28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801bc2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc32:	d102      	bne.n	801bc3a <f_open+0x306>
 801bc34:	2301      	movs	r3, #1
 801bc36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801bc3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc3e:	1ad3      	subs	r3, r2, r3
 801bc40:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bc42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d103      	bne.n	801bc52 <f_open+0x31e>
 801bc4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bc4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d8e0      	bhi.n	801bc14 <f_open+0x2e0>
				}
				fp->clust = clst;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bc56:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801bc58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d127      	bne.n	801bcb0 <f_open+0x37c>
 801bc60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d022      	beq.n	801bcb0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801bc6a:	693b      	ldr	r3, [r7, #16]
 801bc6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f7fd ff02 	bl	8019a78 <clust2sect>
 801bc74:	64b8      	str	r0, [r7, #72]	; 0x48
 801bc76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d103      	bne.n	801bc84 <f_open+0x350>
						res = FR_INT_ERR;
 801bc7c:	2302      	movs	r3, #2
 801bc7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801bc82:	e015      	b.n	801bcb0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801bc84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bc86:	0a5a      	lsrs	r2, r3, #9
 801bc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bc8a:	441a      	add	r2, r3
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	7858      	ldrb	r0, [r3, #1]
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801bc9a:	68fb      	ldr	r3, [r7, #12]
 801bc9c:	6a1a      	ldr	r2, [r3, #32]
 801bc9e:	2301      	movs	r3, #1
 801bca0:	f7fd fb38 	bl	8019314 <disk_read>
 801bca4:	4603      	mov	r3, r0
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d002      	beq.n	801bcb0 <f_open+0x37c>
 801bcaa:	2301      	movs	r3, #1
 801bcac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 801bcb0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bcb2:	f001 fa1a 	bl	801d0ea <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801bcb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d002      	beq.n	801bcc4 <f_open+0x390>
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	2200      	movs	r2, #0
 801bcc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801bcc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801bcc8:	4618      	mov	r0, r3
 801bcca:	3768      	adds	r7, #104	; 0x68
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}

0801bcd0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b08e      	sub	sp, #56	; 0x38
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	60f8      	str	r0, [r7, #12]
 801bcd8:	60b9      	str	r1, [r7, #8]
 801bcda:	607a      	str	r2, [r7, #4]
 801bcdc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801bcde:	68bb      	ldr	r3, [r7, #8]
 801bce0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801bce2:	683b      	ldr	r3, [r7, #0]
 801bce4:	2200      	movs	r2, #0
 801bce6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	f107 0214 	add.w	r2, r7, #20
 801bcee:	4611      	mov	r1, r2
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f7ff fda3 	bl	801b83c <validate>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801bcfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d107      	bne.n	801bd14 <f_read+0x44>
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	7d5b      	ldrb	r3, [r3, #21]
 801bd08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801bd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d002      	beq.n	801bd1a <f_read+0x4a>
 801bd14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bd18:	e115      	b.n	801bf46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	7d1b      	ldrb	r3, [r3, #20]
 801bd1e:	f003 0301 	and.w	r3, r3, #1
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d101      	bne.n	801bd2a <f_read+0x5a>
 801bd26:	2307      	movs	r3, #7
 801bd28:	e10d      	b.n	801bf46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	68da      	ldr	r2, [r3, #12]
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	699b      	ldr	r3, [r3, #24]
 801bd32:	1ad3      	subs	r3, r2, r3
 801bd34:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801bd36:	687a      	ldr	r2, [r7, #4]
 801bd38:	6a3b      	ldr	r3, [r7, #32]
 801bd3a:	429a      	cmp	r2, r3
 801bd3c:	f240 80fe 	bls.w	801bf3c <f_read+0x26c>
 801bd40:	6a3b      	ldr	r3, [r7, #32]
 801bd42:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801bd44:	e0fa      	b.n	801bf3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	699b      	ldr	r3, [r3, #24]
 801bd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	f040 80c6 	bne.w	801bee0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801bd54:	68fb      	ldr	r3, [r7, #12]
 801bd56:	699b      	ldr	r3, [r3, #24]
 801bd58:	0a5b      	lsrs	r3, r3, #9
 801bd5a:	697a      	ldr	r2, [r7, #20]
 801bd5c:	8952      	ldrh	r2, [r2, #10]
 801bd5e:	3a01      	subs	r2, #1
 801bd60:	4013      	ands	r3, r2
 801bd62:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801bd64:	69fb      	ldr	r3, [r7, #28]
 801bd66:	2b00      	cmp	r3, #0
 801bd68:	d12f      	bne.n	801bdca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	699b      	ldr	r3, [r3, #24]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d103      	bne.n	801bd7a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	689b      	ldr	r3, [r3, #8]
 801bd76:	633b      	str	r3, [r7, #48]	; 0x30
 801bd78:	e013      	b.n	801bda2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d007      	beq.n	801bd92 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801bd82:	68fb      	ldr	r3, [r7, #12]
 801bd84:	699b      	ldr	r3, [r3, #24]
 801bd86:	4619      	mov	r1, r3
 801bd88:	68f8      	ldr	r0, [r7, #12]
 801bd8a:	f7fe f925 	bl	8019fd8 <clmt_clust>
 801bd8e:	6338      	str	r0, [r7, #48]	; 0x30
 801bd90:	e007      	b.n	801bda2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801bd92:	68fa      	ldr	r2, [r7, #12]
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	69db      	ldr	r3, [r3, #28]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	4610      	mov	r0, r2
 801bd9c:	f7fd fe8b 	bl	8019ab6 <get_fat>
 801bda0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bda4:	2b01      	cmp	r3, #1
 801bda6:	d804      	bhi.n	801bdb2 <f_read+0xe2>
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	2202      	movs	r2, #2
 801bdac:	755a      	strb	r2, [r3, #21]
 801bdae:	2302      	movs	r3, #2
 801bdb0:	e0c9      	b.n	801bf46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdb8:	d104      	bne.n	801bdc4 <f_read+0xf4>
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	2201      	movs	r2, #1
 801bdbe:	755a      	strb	r2, [r3, #21]
 801bdc0:	2301      	movs	r3, #1
 801bdc2:	e0c0      	b.n	801bf46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bdc8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801bdca:	697a      	ldr	r2, [r7, #20]
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	69db      	ldr	r3, [r3, #28]
 801bdd0:	4619      	mov	r1, r3
 801bdd2:	4610      	mov	r0, r2
 801bdd4:	f7fd fe50 	bl	8019a78 <clust2sect>
 801bdd8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801bdda:	69bb      	ldr	r3, [r7, #24]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d104      	bne.n	801bdea <f_read+0x11a>
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	2202      	movs	r2, #2
 801bde4:	755a      	strb	r2, [r3, #21]
 801bde6:	2302      	movs	r3, #2
 801bde8:	e0ad      	b.n	801bf46 <f_read+0x276>
			sect += csect;
 801bdea:	69ba      	ldr	r2, [r7, #24]
 801bdec:	69fb      	ldr	r3, [r7, #28]
 801bdee:	4413      	add	r3, r2
 801bdf0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	0a5b      	lsrs	r3, r3, #9
 801bdf6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d039      	beq.n	801be72 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801bdfe:	69fa      	ldr	r2, [r7, #28]
 801be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be02:	4413      	add	r3, r2
 801be04:	697a      	ldr	r2, [r7, #20]
 801be06:	8952      	ldrh	r2, [r2, #10]
 801be08:	4293      	cmp	r3, r2
 801be0a:	d905      	bls.n	801be18 <f_read+0x148>
					cc = fs->csize - csect;
 801be0c:	697b      	ldr	r3, [r7, #20]
 801be0e:	895b      	ldrh	r3, [r3, #10]
 801be10:	461a      	mov	r2, r3
 801be12:	69fb      	ldr	r3, [r7, #28]
 801be14:	1ad3      	subs	r3, r2, r3
 801be16:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801be18:	697b      	ldr	r3, [r7, #20]
 801be1a:	7858      	ldrb	r0, [r3, #1]
 801be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be1e:	69ba      	ldr	r2, [r7, #24]
 801be20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801be22:	f7fd fa77 	bl	8019314 <disk_read>
 801be26:	4603      	mov	r3, r0
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d004      	beq.n	801be36 <f_read+0x166>
 801be2c:	68fb      	ldr	r3, [r7, #12]
 801be2e:	2201      	movs	r2, #1
 801be30:	755a      	strb	r2, [r3, #21]
 801be32:	2301      	movs	r3, #1
 801be34:	e087      	b.n	801bf46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	7d1b      	ldrb	r3, [r3, #20]
 801be3a:	b25b      	sxtb	r3, r3
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	da14      	bge.n	801be6a <f_read+0x19a>
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	6a1a      	ldr	r2, [r3, #32]
 801be44:	69bb      	ldr	r3, [r7, #24]
 801be46:	1ad3      	subs	r3, r2, r3
 801be48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801be4a:	429a      	cmp	r2, r3
 801be4c:	d90d      	bls.n	801be6a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	6a1a      	ldr	r2, [r3, #32]
 801be52:	69bb      	ldr	r3, [r7, #24]
 801be54:	1ad3      	subs	r3, r2, r3
 801be56:	025b      	lsls	r3, r3, #9
 801be58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be5a:	18d0      	adds	r0, r2, r3
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	3330      	adds	r3, #48	; 0x30
 801be60:	f44f 7200 	mov.w	r2, #512	; 0x200
 801be64:	4619      	mov	r1, r3
 801be66:	f7fd fb3d 	bl	80194e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be6c:	025b      	lsls	r3, r3, #9
 801be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801be70:	e050      	b.n	801bf14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	6a1b      	ldr	r3, [r3, #32]
 801be76:	69ba      	ldr	r2, [r7, #24]
 801be78:	429a      	cmp	r2, r3
 801be7a:	d02e      	beq.n	801beda <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	7d1b      	ldrb	r3, [r3, #20]
 801be80:	b25b      	sxtb	r3, r3
 801be82:	2b00      	cmp	r3, #0
 801be84:	da18      	bge.n	801beb8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801be86:	697b      	ldr	r3, [r7, #20]
 801be88:	7858      	ldrb	r0, [r3, #1]
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	6a1a      	ldr	r2, [r3, #32]
 801be94:	2301      	movs	r3, #1
 801be96:	f7fd fa5d 	bl	8019354 <disk_write>
 801be9a:	4603      	mov	r3, r0
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d004      	beq.n	801beaa <f_read+0x1da>
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	2201      	movs	r2, #1
 801bea4:	755a      	strb	r2, [r3, #21]
 801bea6:	2301      	movs	r3, #1
 801bea8:	e04d      	b.n	801bf46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	7d1b      	ldrb	r3, [r3, #20]
 801beae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801beb2:	b2da      	uxtb	r2, r3
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801beb8:	697b      	ldr	r3, [r7, #20]
 801beba:	7858      	ldrb	r0, [r3, #1]
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801bec2:	2301      	movs	r3, #1
 801bec4:	69ba      	ldr	r2, [r7, #24]
 801bec6:	f7fd fa25 	bl	8019314 <disk_read>
 801beca:	4603      	mov	r3, r0
 801becc:	2b00      	cmp	r3, #0
 801bece:	d004      	beq.n	801beda <f_read+0x20a>
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	2201      	movs	r2, #1
 801bed4:	755a      	strb	r2, [r3, #21]
 801bed6:	2301      	movs	r3, #1
 801bed8:	e035      	b.n	801bf46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	69ba      	ldr	r2, [r7, #24]
 801bede:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	699b      	ldr	r3, [r3, #24]
 801bee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bee8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801beec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801beee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	429a      	cmp	r2, r3
 801bef4:	d901      	bls.n	801befa <f_read+0x22a>
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801bf00:	68fb      	ldr	r3, [r7, #12]
 801bf02:	699b      	ldr	r3, [r3, #24]
 801bf04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bf08:	4413      	add	r3, r2
 801bf0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf0c:	4619      	mov	r1, r3
 801bf0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bf10:	f7fd fae8 	bl	80194e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801bf14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf18:	4413      	add	r3, r2
 801bf1a:	627b      	str	r3, [r7, #36]	; 0x24
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	699a      	ldr	r2, [r3, #24]
 801bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf22:	441a      	add	r2, r3
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	619a      	str	r2, [r3, #24]
 801bf28:	683b      	ldr	r3, [r7, #0]
 801bf2a:	681a      	ldr	r2, [r3, #0]
 801bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf2e:	441a      	add	r2, r3
 801bf30:	683b      	ldr	r3, [r7, #0]
 801bf32:	601a      	str	r2, [r3, #0]
 801bf34:	687a      	ldr	r2, [r7, #4]
 801bf36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf38:	1ad3      	subs	r3, r2, r3
 801bf3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	f47f af01 	bne.w	801bd46 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801bf44:	2300      	movs	r3, #0
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	3738      	adds	r7, #56	; 0x38
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}

0801bf4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801bf4e:	b580      	push	{r7, lr}
 801bf50:	b08c      	sub	sp, #48	; 0x30
 801bf52:	af00      	add	r7, sp, #0
 801bf54:	60f8      	str	r0, [r7, #12]
 801bf56:	60b9      	str	r1, [r7, #8]
 801bf58:	607a      	str	r2, [r7, #4]
 801bf5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801bf60:	683b      	ldr	r3, [r7, #0]
 801bf62:	2200      	movs	r2, #0
 801bf64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801bf66:	68fb      	ldr	r3, [r7, #12]
 801bf68:	f107 0210 	add.w	r2, r7, #16
 801bf6c:	4611      	mov	r1, r2
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7ff fc64 	bl	801b83c <validate>
 801bf74:	4603      	mov	r3, r0
 801bf76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801bf7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d107      	bne.n	801bf92 <f_write+0x44>
 801bf82:	68fb      	ldr	r3, [r7, #12]
 801bf84:	7d5b      	ldrb	r3, [r3, #21]
 801bf86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801bf8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d002      	beq.n	801bf98 <f_write+0x4a>
 801bf92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801bf96:	e14b      	b.n	801c230 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	7d1b      	ldrb	r3, [r3, #20]
 801bf9c:	f003 0302 	and.w	r3, r3, #2
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d101      	bne.n	801bfa8 <f_write+0x5a>
 801bfa4:	2307      	movs	r3, #7
 801bfa6:	e143      	b.n	801c230 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	699a      	ldr	r2, [r3, #24]
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	441a      	add	r2, r3
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	699b      	ldr	r3, [r3, #24]
 801bfb4:	429a      	cmp	r2, r3
 801bfb6:	f080 812d 	bcs.w	801c214 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	699b      	ldr	r3, [r3, #24]
 801bfbe:	43db      	mvns	r3, r3
 801bfc0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801bfc2:	e127      	b.n	801c214 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	699b      	ldr	r3, [r3, #24]
 801bfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	f040 80e3 	bne.w	801c198 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	699b      	ldr	r3, [r3, #24]
 801bfd6:	0a5b      	lsrs	r3, r3, #9
 801bfd8:	693a      	ldr	r2, [r7, #16]
 801bfda:	8952      	ldrh	r2, [r2, #10]
 801bfdc:	3a01      	subs	r2, #1
 801bfde:	4013      	ands	r3, r2
 801bfe0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801bfe2:	69bb      	ldr	r3, [r7, #24]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d143      	bne.n	801c070 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	699b      	ldr	r3, [r3, #24]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d10c      	bne.n	801c00a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	689b      	ldr	r3, [r3, #8]
 801bff4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d11a      	bne.n	801c032 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	2100      	movs	r1, #0
 801c000:	4618      	mov	r0, r3
 801c002:	f7fd ff51 	bl	8019ea8 <create_chain>
 801c006:	62b8      	str	r0, [r7, #40]	; 0x28
 801c008:	e013      	b.n	801c032 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d007      	beq.n	801c022 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	699b      	ldr	r3, [r3, #24]
 801c016:	4619      	mov	r1, r3
 801c018:	68f8      	ldr	r0, [r7, #12]
 801c01a:	f7fd ffdd 	bl	8019fd8 <clmt_clust>
 801c01e:	62b8      	str	r0, [r7, #40]	; 0x28
 801c020:	e007      	b.n	801c032 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c022:	68fa      	ldr	r2, [r7, #12]
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	69db      	ldr	r3, [r3, #28]
 801c028:	4619      	mov	r1, r3
 801c02a:	4610      	mov	r0, r2
 801c02c:	f7fd ff3c 	bl	8019ea8 <create_chain>
 801c030:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c034:	2b00      	cmp	r3, #0
 801c036:	f000 80f2 	beq.w	801c21e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c03c:	2b01      	cmp	r3, #1
 801c03e:	d104      	bne.n	801c04a <f_write+0xfc>
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	2202      	movs	r2, #2
 801c044:	755a      	strb	r2, [r3, #21]
 801c046:	2302      	movs	r3, #2
 801c048:	e0f2      	b.n	801c230 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c050:	d104      	bne.n	801c05c <f_write+0x10e>
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	2201      	movs	r2, #1
 801c056:	755a      	strb	r2, [r3, #21]
 801c058:	2301      	movs	r3, #1
 801c05a:	e0e9      	b.n	801c230 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c060:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	689b      	ldr	r3, [r3, #8]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d102      	bne.n	801c070 <f_write+0x122>
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c06e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	7d1b      	ldrb	r3, [r3, #20]
 801c074:	b25b      	sxtb	r3, r3
 801c076:	2b00      	cmp	r3, #0
 801c078:	da18      	bge.n	801c0ac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c07a:	693b      	ldr	r3, [r7, #16]
 801c07c:	7858      	ldrb	r0, [r3, #1]
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	6a1a      	ldr	r2, [r3, #32]
 801c088:	2301      	movs	r3, #1
 801c08a:	f7fd f963 	bl	8019354 <disk_write>
 801c08e:	4603      	mov	r3, r0
 801c090:	2b00      	cmp	r3, #0
 801c092:	d004      	beq.n	801c09e <f_write+0x150>
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	2201      	movs	r2, #1
 801c098:	755a      	strb	r2, [r3, #21]
 801c09a:	2301      	movs	r3, #1
 801c09c:	e0c8      	b.n	801c230 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	7d1b      	ldrb	r3, [r3, #20]
 801c0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c0a6:	b2da      	uxtb	r2, r3
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c0ac:	693a      	ldr	r2, [r7, #16]
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	69db      	ldr	r3, [r3, #28]
 801c0b2:	4619      	mov	r1, r3
 801c0b4:	4610      	mov	r0, r2
 801c0b6:	f7fd fcdf 	bl	8019a78 <clust2sect>
 801c0ba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c0bc:	697b      	ldr	r3, [r7, #20]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	d104      	bne.n	801c0cc <f_write+0x17e>
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	2202      	movs	r2, #2
 801c0c6:	755a      	strb	r2, [r3, #21]
 801c0c8:	2302      	movs	r3, #2
 801c0ca:	e0b1      	b.n	801c230 <f_write+0x2e2>
			sect += csect;
 801c0cc:	697a      	ldr	r2, [r7, #20]
 801c0ce:	69bb      	ldr	r3, [r7, #24]
 801c0d0:	4413      	add	r3, r2
 801c0d2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	0a5b      	lsrs	r3, r3, #9
 801c0d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c0da:	6a3b      	ldr	r3, [r7, #32]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d03c      	beq.n	801c15a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c0e0:	69ba      	ldr	r2, [r7, #24]
 801c0e2:	6a3b      	ldr	r3, [r7, #32]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	693a      	ldr	r2, [r7, #16]
 801c0e8:	8952      	ldrh	r2, [r2, #10]
 801c0ea:	4293      	cmp	r3, r2
 801c0ec:	d905      	bls.n	801c0fa <f_write+0x1ac>
					cc = fs->csize - csect;
 801c0ee:	693b      	ldr	r3, [r7, #16]
 801c0f0:	895b      	ldrh	r3, [r3, #10]
 801c0f2:	461a      	mov	r2, r3
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	1ad3      	subs	r3, r2, r3
 801c0f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c0fa:	693b      	ldr	r3, [r7, #16]
 801c0fc:	7858      	ldrb	r0, [r3, #1]
 801c0fe:	6a3b      	ldr	r3, [r7, #32]
 801c100:	697a      	ldr	r2, [r7, #20]
 801c102:	69f9      	ldr	r1, [r7, #28]
 801c104:	f7fd f926 	bl	8019354 <disk_write>
 801c108:	4603      	mov	r3, r0
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d004      	beq.n	801c118 <f_write+0x1ca>
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	2201      	movs	r2, #1
 801c112:	755a      	strb	r2, [r3, #21]
 801c114:	2301      	movs	r3, #1
 801c116:	e08b      	b.n	801c230 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	6a1a      	ldr	r2, [r3, #32]
 801c11c:	697b      	ldr	r3, [r7, #20]
 801c11e:	1ad3      	subs	r3, r2, r3
 801c120:	6a3a      	ldr	r2, [r7, #32]
 801c122:	429a      	cmp	r2, r3
 801c124:	d915      	bls.n	801c152 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	6a1a      	ldr	r2, [r3, #32]
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	025b      	lsls	r3, r3, #9
 801c136:	69fa      	ldr	r2, [r7, #28]
 801c138:	4413      	add	r3, r2
 801c13a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c13e:	4619      	mov	r1, r3
 801c140:	f7fd f9d0 	bl	80194e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	7d1b      	ldrb	r3, [r3, #20]
 801c148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c14c:	b2da      	uxtb	r2, r3
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801c152:	6a3b      	ldr	r3, [r7, #32]
 801c154:	025b      	lsls	r3, r3, #9
 801c156:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801c158:	e03f      	b.n	801c1da <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c15a:	68fb      	ldr	r3, [r7, #12]
 801c15c:	6a1b      	ldr	r3, [r3, #32]
 801c15e:	697a      	ldr	r2, [r7, #20]
 801c160:	429a      	cmp	r2, r3
 801c162:	d016      	beq.n	801c192 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801c164:	68fb      	ldr	r3, [r7, #12]
 801c166:	699a      	ldr	r2, [r3, #24]
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c16c:	429a      	cmp	r2, r3
 801c16e:	d210      	bcs.n	801c192 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801c170:	693b      	ldr	r3, [r7, #16]
 801c172:	7858      	ldrb	r0, [r3, #1]
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c17a:	2301      	movs	r3, #1
 801c17c:	697a      	ldr	r2, [r7, #20]
 801c17e:	f7fd f8c9 	bl	8019314 <disk_read>
 801c182:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801c184:	2b00      	cmp	r3, #0
 801c186:	d004      	beq.n	801c192 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801c188:	68fb      	ldr	r3, [r7, #12]
 801c18a:	2201      	movs	r2, #1
 801c18c:	755a      	strb	r2, [r3, #21]
 801c18e:	2301      	movs	r3, #1
 801c190:	e04e      	b.n	801c230 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	697a      	ldr	r2, [r7, #20]
 801c196:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	699b      	ldr	r3, [r3, #24]
 801c19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c1a4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801c1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	429a      	cmp	r2, r3
 801c1ac:	d901      	bls.n	801c1b2 <f_write+0x264>
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	699b      	ldr	r3, [r3, #24]
 801c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c1c0:	4413      	add	r3, r2
 801c1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c1c4:	69f9      	ldr	r1, [r7, #28]
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f7fd f98c 	bl	80194e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	7d1b      	ldrb	r3, [r3, #20]
 801c1d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c1d4:	b2da      	uxtb	r2, r3
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801c1da:	69fa      	ldr	r2, [r7, #28]
 801c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1de:	4413      	add	r3, r2
 801c1e0:	61fb      	str	r3, [r7, #28]
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	699a      	ldr	r2, [r3, #24]
 801c1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1e8:	441a      	add	r2, r3
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	619a      	str	r2, [r3, #24]
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	68da      	ldr	r2, [r3, #12]
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	699b      	ldr	r3, [r3, #24]
 801c1f6:	429a      	cmp	r2, r3
 801c1f8:	bf38      	it	cc
 801c1fa:	461a      	movcc	r2, r3
 801c1fc:	68fb      	ldr	r3, [r7, #12]
 801c1fe:	60da      	str	r2, [r3, #12]
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	681a      	ldr	r2, [r3, #0]
 801c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c206:	441a      	add	r2, r3
 801c208:	683b      	ldr	r3, [r7, #0]
 801c20a:	601a      	str	r2, [r3, #0]
 801c20c:	687a      	ldr	r2, [r7, #4]
 801c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c210:	1ad3      	subs	r3, r2, r3
 801c212:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	2b00      	cmp	r3, #0
 801c218:	f47f aed4 	bne.w	801bfc4 <f_write+0x76>
 801c21c:	e000      	b.n	801c220 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c21e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	7d1b      	ldrb	r3, [r3, #20]
 801c224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c228:	b2da      	uxtb	r2, r3
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801c22e:	2300      	movs	r3, #0
}
 801c230:	4618      	mov	r0, r3
 801c232:	3730      	adds	r7, #48	; 0x30
 801c234:	46bd      	mov	sp, r7
 801c236:	bd80      	pop	{r7, pc}

0801c238 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b086      	sub	sp, #24
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	f107 0208 	add.w	r2, r7, #8
 801c246:	4611      	mov	r1, r2
 801c248:	4618      	mov	r0, r3
 801c24a:	f7ff faf7 	bl	801b83c <validate>
 801c24e:	4603      	mov	r3, r0
 801c250:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c252:	7dfb      	ldrb	r3, [r7, #23]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d168      	bne.n	801c32a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	7d1b      	ldrb	r3, [r3, #20]
 801c25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c260:	2b00      	cmp	r3, #0
 801c262:	d062      	beq.n	801c32a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	7d1b      	ldrb	r3, [r3, #20]
 801c268:	b25b      	sxtb	r3, r3
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	da15      	bge.n	801c29a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	7858      	ldrb	r0, [r3, #1]
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	6a1a      	ldr	r2, [r3, #32]
 801c27c:	2301      	movs	r3, #1
 801c27e:	f7fd f869 	bl	8019354 <disk_write>
 801c282:	4603      	mov	r3, r0
 801c284:	2b00      	cmp	r3, #0
 801c286:	d001      	beq.n	801c28c <f_sync+0x54>
 801c288:	2301      	movs	r3, #1
 801c28a:	e04f      	b.n	801c32c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	7d1b      	ldrb	r3, [r3, #20]
 801c290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c294:	b2da      	uxtb	r2, r3
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801c29a:	f7fd f899 	bl	80193d0 <get_fattime>
 801c29e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801c2a0:	68ba      	ldr	r2, [r7, #8]
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2a6:	4619      	mov	r1, r3
 801c2a8:	4610      	mov	r0, r2
 801c2aa:	f7fd fb49 	bl	8019940 <move_window>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801c2b2:	7dfb      	ldrb	r3, [r7, #23]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d138      	bne.n	801c32a <f_sync+0xf2>
					dir = fp->dir_ptr;
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801c2be:	68fb      	ldr	r3, [r7, #12]
 801c2c0:	330b      	adds	r3, #11
 801c2c2:	781a      	ldrb	r2, [r3, #0]
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	330b      	adds	r3, #11
 801c2c8:	f042 0220 	orr.w	r2, r2, #32
 801c2cc:	b2d2      	uxtb	r2, r2
 801c2ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	6818      	ldr	r0, [r3, #0]
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	689b      	ldr	r3, [r3, #8]
 801c2d8:	461a      	mov	r2, r3
 801c2da:	68f9      	ldr	r1, [r7, #12]
 801c2dc:	f7fe f856 	bl	801a38c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	f103 021c 	add.w	r2, r3, #28
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	68db      	ldr	r3, [r3, #12]
 801c2ea:	4619      	mov	r1, r3
 801c2ec:	4610      	mov	r0, r2
 801c2ee:	f7fd f8cd 	bl	801948c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	3316      	adds	r3, #22
 801c2f6:	6939      	ldr	r1, [r7, #16]
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	f7fd f8c7 	bl	801948c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	3312      	adds	r3, #18
 801c302:	2100      	movs	r1, #0
 801c304:	4618      	mov	r0, r3
 801c306:	f7fd f8a6 	bl	8019456 <st_word>
					fs->wflag = 1;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	2201      	movs	r2, #1
 801c30e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801c310:	68bb      	ldr	r3, [r7, #8]
 801c312:	4618      	mov	r0, r3
 801c314:	f7fd fb42 	bl	801999c <sync_fs>
 801c318:	4603      	mov	r3, r0
 801c31a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	7d1b      	ldrb	r3, [r3, #20]
 801c320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c324:	b2da      	uxtb	r2, r3
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801c32a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c32c:	4618      	mov	r0, r3
 801c32e:	3718      	adds	r7, #24
 801c330:	46bd      	mov	sp, r7
 801c332:	bd80      	pop	{r7, pc}

0801c334 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b084      	sub	sp, #16
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801c33c:	6878      	ldr	r0, [r7, #4]
 801c33e:	f7ff ff7b 	bl	801c238 <f_sync>
 801c342:	4603      	mov	r3, r0
 801c344:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801c346:	7bfb      	ldrb	r3, [r7, #15]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d118      	bne.n	801c37e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	f107 0208 	add.w	r2, r7, #8
 801c352:	4611      	mov	r1, r2
 801c354:	4618      	mov	r0, r3
 801c356:	f7ff fa71 	bl	801b83c <validate>
 801c35a:	4603      	mov	r3, r0
 801c35c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801c35e:	7bfb      	ldrb	r3, [r7, #15]
 801c360:	2b00      	cmp	r3, #0
 801c362:	d10c      	bne.n	801c37e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	691b      	ldr	r3, [r3, #16]
 801c368:	4618      	mov	r0, r3
 801c36a:	f7fd fa45 	bl	80197f8 <dec_lock>
 801c36e:	4603      	mov	r3, r0
 801c370:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801c372:	7bfb      	ldrb	r3, [r7, #15]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d102      	bne.n	801c37e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2200      	movs	r2, #0
 801c37c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c380:	4618      	mov	r0, r3
 801c382:	3710      	adds	r7, #16
 801c384:	46bd      	mov	sp, r7
 801c386:	bd80      	pop	{r7, pc}

0801c388 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b090      	sub	sp, #64	; 0x40
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
 801c390:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	f107 0208 	add.w	r2, r7, #8
 801c398:	4611      	mov	r1, r2
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7ff fa4e 	bl	801b83c <validate>
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801c3a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d103      	bne.n	801c3b6 <f_lseek+0x2e>
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	7d5b      	ldrb	r3, [r3, #21]
 801c3b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801c3b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d002      	beq.n	801c3c4 <f_lseek+0x3c>
 801c3be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801c3c2:	e1e6      	b.n	801c792 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f000 80d1 	beq.w	801c570 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801c3ce:	683b      	ldr	r3, [r7, #0]
 801c3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3d4:	d15a      	bne.n	801c48c <f_lseek+0x104>
			tbl = fp->cltbl;
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3da:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3de:	1d1a      	adds	r2, r3, #4
 801c3e0:	627a      	str	r2, [r7, #36]	; 0x24
 801c3e2:	681b      	ldr	r3, [r3, #0]
 801c3e4:	617b      	str	r3, [r7, #20]
 801c3e6:	2302      	movs	r3, #2
 801c3e8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	689b      	ldr	r3, [r3, #8]
 801c3ee:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d03a      	beq.n	801c46c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3f8:	613b      	str	r3, [r7, #16]
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c400:	3302      	adds	r3, #2
 801c402:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801c404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c406:	60fb      	str	r3, [r7, #12]
 801c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c40a:	3301      	adds	r3, #1
 801c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c412:	4618      	mov	r0, r3
 801c414:	f7fd fb4f 	bl	8019ab6 <get_fat>
 801c418:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c41c:	2b01      	cmp	r3, #1
 801c41e:	d804      	bhi.n	801c42a <f_lseek+0xa2>
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	2202      	movs	r2, #2
 801c424:	755a      	strb	r2, [r3, #21]
 801c426:	2302      	movs	r3, #2
 801c428:	e1b3      	b.n	801c792 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c430:	d104      	bne.n	801c43c <f_lseek+0xb4>
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	2201      	movs	r2, #1
 801c436:	755a      	strb	r2, [r3, #21]
 801c438:	2301      	movs	r3, #1
 801c43a:	e1aa      	b.n	801c792 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	3301      	adds	r3, #1
 801c440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c442:	429a      	cmp	r2, r3
 801c444:	d0de      	beq.n	801c404 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801c446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c448:	697b      	ldr	r3, [r7, #20]
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d809      	bhi.n	801c462 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801c44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c450:	1d1a      	adds	r2, r3, #4
 801c452:	627a      	str	r2, [r7, #36]	; 0x24
 801c454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c456:	601a      	str	r2, [r3, #0]
 801c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c45a:	1d1a      	adds	r2, r3, #4
 801c45c:	627a      	str	r2, [r7, #36]	; 0x24
 801c45e:	693a      	ldr	r2, [r7, #16]
 801c460:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801c462:	68bb      	ldr	r3, [r7, #8]
 801c464:	699b      	ldr	r3, [r3, #24]
 801c466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c468:	429a      	cmp	r2, r3
 801c46a:	d3c4      	bcc.n	801c3f6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c472:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801c474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c476:	697b      	ldr	r3, [r7, #20]
 801c478:	429a      	cmp	r2, r3
 801c47a:	d803      	bhi.n	801c484 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c47e:	2200      	movs	r2, #0
 801c480:	601a      	str	r2, [r3, #0]
 801c482:	e184      	b.n	801c78e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801c484:	2311      	movs	r3, #17
 801c486:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801c48a:	e180      	b.n	801c78e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	68db      	ldr	r3, [r3, #12]
 801c490:	683a      	ldr	r2, [r7, #0]
 801c492:	429a      	cmp	r2, r3
 801c494:	d902      	bls.n	801c49c <f_lseek+0x114>
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	68db      	ldr	r3, [r3, #12]
 801c49a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	683a      	ldr	r2, [r7, #0]
 801c4a0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801c4a2:	683b      	ldr	r3, [r7, #0]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	f000 8172 	beq.w	801c78e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801c4aa:	683b      	ldr	r3, [r7, #0]
 801c4ac:	3b01      	subs	r3, #1
 801c4ae:	4619      	mov	r1, r3
 801c4b0:	6878      	ldr	r0, [r7, #4]
 801c4b2:	f7fd fd91 	bl	8019fd8 <clmt_clust>
 801c4b6:	4602      	mov	r2, r0
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801c4bc:	68ba      	ldr	r2, [r7, #8]
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	69db      	ldr	r3, [r3, #28]
 801c4c2:	4619      	mov	r1, r3
 801c4c4:	4610      	mov	r0, r2
 801c4c6:	f7fd fad7 	bl	8019a78 <clust2sect>
 801c4ca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801c4cc:	69bb      	ldr	r3, [r7, #24]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d104      	bne.n	801c4dc <f_lseek+0x154>
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2202      	movs	r2, #2
 801c4d6:	755a      	strb	r2, [r3, #21]
 801c4d8:	2302      	movs	r3, #2
 801c4da:	e15a      	b.n	801c792 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801c4dc:	683b      	ldr	r3, [r7, #0]
 801c4de:	3b01      	subs	r3, #1
 801c4e0:	0a5b      	lsrs	r3, r3, #9
 801c4e2:	68ba      	ldr	r2, [r7, #8]
 801c4e4:	8952      	ldrh	r2, [r2, #10]
 801c4e6:	3a01      	subs	r2, #1
 801c4e8:	4013      	ands	r3, r2
 801c4ea:	69ba      	ldr	r2, [r7, #24]
 801c4ec:	4413      	add	r3, r2
 801c4ee:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	699b      	ldr	r3, [r3, #24]
 801c4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	f000 8148 	beq.w	801c78e <f_lseek+0x406>
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	6a1b      	ldr	r3, [r3, #32]
 801c502:	69ba      	ldr	r2, [r7, #24]
 801c504:	429a      	cmp	r2, r3
 801c506:	f000 8142 	beq.w	801c78e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	7d1b      	ldrb	r3, [r3, #20]
 801c50e:	b25b      	sxtb	r3, r3
 801c510:	2b00      	cmp	r3, #0
 801c512:	da18      	bge.n	801c546 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c514:	68bb      	ldr	r3, [r7, #8]
 801c516:	7858      	ldrb	r0, [r3, #1]
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	6a1a      	ldr	r2, [r3, #32]
 801c522:	2301      	movs	r3, #1
 801c524:	f7fc ff16 	bl	8019354 <disk_write>
 801c528:	4603      	mov	r3, r0
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d004      	beq.n	801c538 <f_lseek+0x1b0>
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	2201      	movs	r2, #1
 801c532:	755a      	strb	r2, [r3, #21]
 801c534:	2301      	movs	r3, #1
 801c536:	e12c      	b.n	801c792 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	7d1b      	ldrb	r3, [r3, #20]
 801c53c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c540:	b2da      	uxtb	r2, r3
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801c546:	68bb      	ldr	r3, [r7, #8]
 801c548:	7858      	ldrb	r0, [r3, #1]
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c550:	2301      	movs	r3, #1
 801c552:	69ba      	ldr	r2, [r7, #24]
 801c554:	f7fc fede 	bl	8019314 <disk_read>
 801c558:	4603      	mov	r3, r0
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d004      	beq.n	801c568 <f_lseek+0x1e0>
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	2201      	movs	r2, #1
 801c562:	755a      	strb	r2, [r3, #21]
 801c564:	2301      	movs	r3, #1
 801c566:	e114      	b.n	801c792 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	69ba      	ldr	r2, [r7, #24]
 801c56c:	621a      	str	r2, [r3, #32]
 801c56e:	e10e      	b.n	801c78e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	68db      	ldr	r3, [r3, #12]
 801c574:	683a      	ldr	r2, [r7, #0]
 801c576:	429a      	cmp	r2, r3
 801c578:	d908      	bls.n	801c58c <f_lseek+0x204>
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	7d1b      	ldrb	r3, [r3, #20]
 801c57e:	f003 0302 	and.w	r3, r3, #2
 801c582:	2b00      	cmp	r3, #0
 801c584:	d102      	bne.n	801c58c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	68db      	ldr	r3, [r3, #12]
 801c58a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	699b      	ldr	r3, [r3, #24]
 801c590:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801c592:	2300      	movs	r3, #0
 801c594:	637b      	str	r3, [r7, #52]	; 0x34
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c59a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801c59c:	683b      	ldr	r3, [r7, #0]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	f000 80a7 	beq.w	801c6f2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801c5a4:	68bb      	ldr	r3, [r7, #8]
 801c5a6:	895b      	ldrh	r3, [r3, #10]
 801c5a8:	025b      	lsls	r3, r3, #9
 801c5aa:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801c5ac:	6a3b      	ldr	r3, [r7, #32]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d01b      	beq.n	801c5ea <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801c5b2:	683b      	ldr	r3, [r7, #0]
 801c5b4:	1e5a      	subs	r2, r3, #1
 801c5b6:	69fb      	ldr	r3, [r7, #28]
 801c5b8:	fbb2 f2f3 	udiv	r2, r2, r3
 801c5bc:	6a3b      	ldr	r3, [r7, #32]
 801c5be:	1e59      	subs	r1, r3, #1
 801c5c0:	69fb      	ldr	r3, [r7, #28]
 801c5c2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801c5c6:	429a      	cmp	r2, r3
 801c5c8:	d30f      	bcc.n	801c5ea <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801c5ca:	6a3b      	ldr	r3, [r7, #32]
 801c5cc:	1e5a      	subs	r2, r3, #1
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	425b      	negs	r3, r3
 801c5d2:	401a      	ands	r2, r3
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	699b      	ldr	r3, [r3, #24]
 801c5dc:	683a      	ldr	r2, [r7, #0]
 801c5de:	1ad3      	subs	r3, r2, r3
 801c5e0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	69db      	ldr	r3, [r3, #28]
 801c5e6:	63bb      	str	r3, [r7, #56]	; 0x38
 801c5e8:	e022      	b.n	801c630 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	689b      	ldr	r3, [r3, #8]
 801c5ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d119      	bne.n	801c62a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	2100      	movs	r1, #0
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7fd fc54 	bl	8019ea8 <create_chain>
 801c600:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c604:	2b01      	cmp	r3, #1
 801c606:	d104      	bne.n	801c612 <f_lseek+0x28a>
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	2202      	movs	r2, #2
 801c60c:	755a      	strb	r2, [r3, #21]
 801c60e:	2302      	movs	r3, #2
 801c610:	e0bf      	b.n	801c792 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c614:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c618:	d104      	bne.n	801c624 <f_lseek+0x29c>
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	2201      	movs	r2, #1
 801c61e:	755a      	strb	r2, [r3, #21]
 801c620:	2301      	movs	r3, #1
 801c622:	e0b6      	b.n	801c792 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c628:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c62e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c632:	2b00      	cmp	r3, #0
 801c634:	d05d      	beq.n	801c6f2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801c636:	e03a      	b.n	801c6ae <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801c638:	683a      	ldr	r2, [r7, #0]
 801c63a:	69fb      	ldr	r3, [r7, #28]
 801c63c:	1ad3      	subs	r3, r2, r3
 801c63e:	603b      	str	r3, [r7, #0]
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	699a      	ldr	r2, [r3, #24]
 801c644:	69fb      	ldr	r3, [r7, #28]
 801c646:	441a      	add	r2, r3
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	7d1b      	ldrb	r3, [r3, #20]
 801c650:	f003 0302 	and.w	r3, r3, #2
 801c654:	2b00      	cmp	r3, #0
 801c656:	d00b      	beq.n	801c670 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7fd fc23 	bl	8019ea8 <create_chain>
 801c662:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c666:	2b00      	cmp	r3, #0
 801c668:	d108      	bne.n	801c67c <f_lseek+0x2f4>
							ofs = 0; break;
 801c66a:	2300      	movs	r3, #0
 801c66c:	603b      	str	r3, [r7, #0]
 801c66e:	e022      	b.n	801c6b6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c674:	4618      	mov	r0, r3
 801c676:	f7fd fa1e 	bl	8019ab6 <get_fat>
 801c67a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c682:	d104      	bne.n	801c68e <f_lseek+0x306>
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	2201      	movs	r2, #1
 801c688:	755a      	strb	r2, [r3, #21]
 801c68a:	2301      	movs	r3, #1
 801c68c:	e081      	b.n	801c792 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801c68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c690:	2b01      	cmp	r3, #1
 801c692:	d904      	bls.n	801c69e <f_lseek+0x316>
 801c694:	68bb      	ldr	r3, [r7, #8]
 801c696:	699b      	ldr	r3, [r3, #24]
 801c698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c69a:	429a      	cmp	r2, r3
 801c69c:	d304      	bcc.n	801c6a8 <f_lseek+0x320>
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	2202      	movs	r2, #2
 801c6a2:	755a      	strb	r2, [r3, #21]
 801c6a4:	2302      	movs	r3, #2
 801c6a6:	e074      	b.n	801c792 <f_lseek+0x40a>
					fp->clust = clst;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c6ac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801c6ae:	683a      	ldr	r2, [r7, #0]
 801c6b0:	69fb      	ldr	r3, [r7, #28]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d8c0      	bhi.n	801c638 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	699a      	ldr	r2, [r3, #24]
 801c6ba:	683b      	ldr	r3, [r7, #0]
 801c6bc:	441a      	add	r2, r3
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d012      	beq.n	801c6f2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801c6cc:	68bb      	ldr	r3, [r7, #8]
 801c6ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7fd f9d1 	bl	8019a78 <clust2sect>
 801c6d6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801c6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d104      	bne.n	801c6e8 <f_lseek+0x360>
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	2202      	movs	r2, #2
 801c6e2:	755a      	strb	r2, [r3, #21]
 801c6e4:	2302      	movs	r3, #2
 801c6e6:	e054      	b.n	801c792 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	0a5b      	lsrs	r3, r3, #9
 801c6ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c6ee:	4413      	add	r3, r2
 801c6f0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	699a      	ldr	r2, [r3, #24]
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	68db      	ldr	r3, [r3, #12]
 801c6fa:	429a      	cmp	r2, r3
 801c6fc:	d90a      	bls.n	801c714 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	699a      	ldr	r2, [r3, #24]
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	7d1b      	ldrb	r3, [r3, #20]
 801c70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c70e:	b2da      	uxtb	r2, r3
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	699b      	ldr	r3, [r3, #24]
 801c718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d036      	beq.n	801c78e <f_lseek+0x406>
 801c720:	687b      	ldr	r3, [r7, #4]
 801c722:	6a1b      	ldr	r3, [r3, #32]
 801c724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c726:	429a      	cmp	r2, r3
 801c728:	d031      	beq.n	801c78e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	7d1b      	ldrb	r3, [r3, #20]
 801c72e:	b25b      	sxtb	r3, r3
 801c730:	2b00      	cmp	r3, #0
 801c732:	da18      	bge.n	801c766 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c734:	68bb      	ldr	r3, [r7, #8]
 801c736:	7858      	ldrb	r0, [r3, #1]
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	6a1a      	ldr	r2, [r3, #32]
 801c742:	2301      	movs	r3, #1
 801c744:	f7fc fe06 	bl	8019354 <disk_write>
 801c748:	4603      	mov	r3, r0
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d004      	beq.n	801c758 <f_lseek+0x3d0>
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	2201      	movs	r2, #1
 801c752:	755a      	strb	r2, [r3, #21]
 801c754:	2301      	movs	r3, #1
 801c756:	e01c      	b.n	801c792 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	7d1b      	ldrb	r3, [r3, #20]
 801c75c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c760:	b2da      	uxtb	r2, r3
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	7858      	ldrb	r0, [r3, #1]
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c770:	2301      	movs	r3, #1
 801c772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c774:	f7fc fdce 	bl	8019314 <disk_read>
 801c778:	4603      	mov	r3, r0
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d004      	beq.n	801c788 <f_lseek+0x400>
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	2201      	movs	r2, #1
 801c782:	755a      	strb	r2, [r3, #21]
 801c784:	2301      	movs	r3, #1
 801c786:	e004      	b.n	801c792 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c78c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801c78e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801c792:	4618      	mov	r0, r3
 801c794:	3740      	adds	r7, #64	; 0x40
 801c796:	46bd      	mov	sp, r7
 801c798:	bd80      	pop	{r7, pc}

0801c79a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801c79a:	b580      	push	{r7, lr}
 801c79c:	b086      	sub	sp, #24
 801c79e:	af00      	add	r7, sp, #0
 801c7a0:	6078      	str	r0, [r7, #4]
 801c7a2:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d101      	bne.n	801c7ae <f_opendir+0x14>
 801c7aa:	2309      	movs	r3, #9
 801c7ac:	e074      	b.n	801c898 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801c7b2:	f107 0108 	add.w	r1, r7, #8
 801c7b6:	463b      	mov	r3, r7
 801c7b8:	2200      	movs	r2, #0
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	f7fe fdf2 	bl	801b3a4 <find_volume>
 801c7c0:	4603      	mov	r3, r0
 801c7c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c7c4:	7dfb      	ldrb	r3, [r7, #23]
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d15f      	bne.n	801c88a <f_opendir+0xf0>
		obj->fs = fs;
 801c7ca:	68ba      	ldr	r2, [r7, #8]
 801c7cc:	693b      	ldr	r3, [r7, #16]
 801c7ce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 801c7d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c7d4:	f000 fc7d 	bl	801d0d2 <ff_memalloc>
 801c7d8:	60f8      	str	r0, [r7, #12]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d101      	bne.n	801c7e4 <f_opendir+0x4a>
 801c7e0:	2311      	movs	r3, #17
 801c7e2:	e059      	b.n	801c898 <f_opendir+0xfe>
 801c7e4:	68bb      	ldr	r3, [r7, #8]
 801c7e6:	68fa      	ldr	r2, [r7, #12]
 801c7e8:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	4619      	mov	r1, r3
 801c7ee:	6878      	ldr	r0, [r7, #4]
 801c7f0:	f7fe fccc 	bl	801b18c <follow_path>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801c7f8:	7dfb      	ldrb	r3, [r7, #23]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d13d      	bne.n	801c87a <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801c804:	b25b      	sxtb	r3, r3
 801c806:	2b00      	cmp	r3, #0
 801c808:	db12      	blt.n	801c830 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801c80a:	693b      	ldr	r3, [r7, #16]
 801c80c:	799b      	ldrb	r3, [r3, #6]
 801c80e:	f003 0310 	and.w	r3, r3, #16
 801c812:	2b00      	cmp	r3, #0
 801c814:	d00a      	beq.n	801c82c <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801c816:	68ba      	ldr	r2, [r7, #8]
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	6a1b      	ldr	r3, [r3, #32]
 801c81c:	4619      	mov	r1, r3
 801c81e:	4610      	mov	r0, r2
 801c820:	f7fd fd95 	bl	801a34e <ld_clust>
 801c824:	4602      	mov	r2, r0
 801c826:	693b      	ldr	r3, [r7, #16]
 801c828:	609a      	str	r2, [r3, #8]
 801c82a:	e001      	b.n	801c830 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801c82c:	2305      	movs	r3, #5
 801c82e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801c830:	7dfb      	ldrb	r3, [r7, #23]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d121      	bne.n	801c87a <f_opendir+0xe0>
				obj->id = fs->id;
 801c836:	68bb      	ldr	r3, [r7, #8]
 801c838:	88da      	ldrh	r2, [r3, #6]
 801c83a:	693b      	ldr	r3, [r7, #16]
 801c83c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801c83e:	2100      	movs	r1, #0
 801c840:	6878      	ldr	r0, [r7, #4]
 801c842:	f7fd fbfd 	bl	801a040 <dir_sdi>
 801c846:	4603      	mov	r3, r0
 801c848:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801c84a:	7dfb      	ldrb	r3, [r7, #23]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	d114      	bne.n	801c87a <f_opendir+0xe0>
					if (obj->sclust) {
 801c850:	693b      	ldr	r3, [r7, #16]
 801c852:	689b      	ldr	r3, [r3, #8]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d00d      	beq.n	801c874 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801c858:	2100      	movs	r1, #0
 801c85a:	6878      	ldr	r0, [r7, #4]
 801c85c:	f7fc ff3e 	bl	80196dc <inc_lock>
 801c860:	4602      	mov	r2, r0
 801c862:	693b      	ldr	r3, [r7, #16]
 801c864:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801c866:	693b      	ldr	r3, [r7, #16]
 801c868:	691b      	ldr	r3, [r3, #16]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d105      	bne.n	801c87a <f_opendir+0xe0>
 801c86e:	2312      	movs	r3, #18
 801c870:	75fb      	strb	r3, [r7, #23]
 801c872:	e002      	b.n	801c87a <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801c874:	693b      	ldr	r3, [r7, #16]
 801c876:	2200      	movs	r2, #0
 801c878:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 801c87a:	68f8      	ldr	r0, [r7, #12]
 801c87c:	f000 fc35 	bl	801d0ea <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801c880:	7dfb      	ldrb	r3, [r7, #23]
 801c882:	2b04      	cmp	r3, #4
 801c884:	d101      	bne.n	801c88a <f_opendir+0xf0>
 801c886:	2305      	movs	r3, #5
 801c888:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801c88a:	7dfb      	ldrb	r3, [r7, #23]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d002      	beq.n	801c896 <f_opendir+0xfc>
 801c890:	693b      	ldr	r3, [r7, #16]
 801c892:	2200      	movs	r2, #0
 801c894:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c896:	7dfb      	ldrb	r3, [r7, #23]
}
 801c898:	4618      	mov	r0, r3
 801c89a:	3718      	adds	r7, #24
 801c89c:	46bd      	mov	sp, r7
 801c89e:	bd80      	pop	{r7, pc}

0801c8a0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b084      	sub	sp, #16
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	f107 0208 	add.w	r2, r7, #8
 801c8ae:	4611      	mov	r1, r2
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	f7fe ffc3 	bl	801b83c <validate>
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801c8ba:	7bfb      	ldrb	r3, [r7, #15]
 801c8bc:	2b00      	cmp	r3, #0
 801c8be:	d110      	bne.n	801c8e2 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	691b      	ldr	r3, [r3, #16]
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d006      	beq.n	801c8d6 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	691b      	ldr	r3, [r3, #16]
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	f7fc ff93 	bl	80197f8 <dec_lock>
 801c8d2:	4603      	mov	r3, r0
 801c8d4:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801c8d6:	7bfb      	ldrb	r3, [r7, #15]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d102      	bne.n	801c8e2 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	2200      	movs	r2, #0
 801c8e0:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801c8e4:	4618      	mov	r0, r3
 801c8e6:	3710      	adds	r7, #16
 801c8e8:	46bd      	mov	sp, r7
 801c8ea:	bd80      	pop	{r7, pc}

0801c8ec <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b086      	sub	sp, #24
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
 801c8f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801c8f6:	687b      	ldr	r3, [r7, #4]
 801c8f8:	f107 020c 	add.w	r2, r7, #12
 801c8fc:	4611      	mov	r1, r2
 801c8fe:	4618      	mov	r0, r3
 801c900:	f7fe ff9c 	bl	801b83c <validate>
 801c904:	4603      	mov	r3, r0
 801c906:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801c908:	7dfb      	ldrb	r3, [r7, #23]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d136      	bne.n	801c97c <f_readdir+0x90>
		if (!fno) {
 801c90e:	683b      	ldr	r3, [r7, #0]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d106      	bne.n	801c922 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801c914:	2100      	movs	r1, #0
 801c916:	6878      	ldr	r0, [r7, #4]
 801c918:	f7fd fb92 	bl	801a040 <dir_sdi>
 801c91c:	4603      	mov	r3, r0
 801c91e:	75fb      	strb	r3, [r7, #23]
 801c920:	e02c      	b.n	801c97c <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 801c922:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c926:	f000 fbd4 	bl	801d0d2 <ff_memalloc>
 801c92a:	6138      	str	r0, [r7, #16]
 801c92c:	693b      	ldr	r3, [r7, #16]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d101      	bne.n	801c936 <f_readdir+0x4a>
 801c932:	2311      	movs	r3, #17
 801c934:	e023      	b.n	801c97e <f_readdir+0x92>
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	693a      	ldr	r2, [r7, #16]
 801c93a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801c93c:	2100      	movs	r1, #0
 801c93e:	6878      	ldr	r0, [r7, #4]
 801c940:	f7fd ff2f 	bl	801a7a2 <dir_read>
 801c944:	4603      	mov	r3, r0
 801c946:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801c948:	7dfb      	ldrb	r3, [r7, #23]
 801c94a:	2b04      	cmp	r3, #4
 801c94c:	d101      	bne.n	801c952 <f_readdir+0x66>
 801c94e:	2300      	movs	r3, #0
 801c950:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801c952:	7dfb      	ldrb	r3, [r7, #23]
 801c954:	2b00      	cmp	r3, #0
 801c956:	d10e      	bne.n	801c976 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 801c958:	6839      	ldr	r1, [r7, #0]
 801c95a:	6878      	ldr	r0, [r7, #4]
 801c95c:	f7fe f980 	bl	801ac60 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801c960:	2100      	movs	r1, #0
 801c962:	6878      	ldr	r0, [r7, #4]
 801c964:	f7fd fbe7 	bl	801a136 <dir_next>
 801c968:	4603      	mov	r3, r0
 801c96a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801c96c:	7dfb      	ldrb	r3, [r7, #23]
 801c96e:	2b04      	cmp	r3, #4
 801c970:	d101      	bne.n	801c976 <f_readdir+0x8a>
 801c972:	2300      	movs	r3, #0
 801c974:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 801c976:	6938      	ldr	r0, [r7, #16]
 801c978:	f000 fbb7 	bl	801d0ea <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 801c97c:	7dfb      	ldrb	r3, [r7, #23]
}
 801c97e:	4618      	mov	r0, r3
 801c980:	3718      	adds	r7, #24
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}

0801c986 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b092      	sub	sp, #72	; 0x48
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	60f8      	str	r0, [r7, #12]
 801c98e:	60b9      	str	r1, [r7, #8]
 801c990:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801c992:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801c996:	f107 030c 	add.w	r3, r7, #12
 801c99a:	2200      	movs	r2, #0
 801c99c:	4618      	mov	r0, r3
 801c99e:	f7fe fd01 	bl	801b3a4 <find_volume>
 801c9a2:	4603      	mov	r3, r0
 801c9a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801c9a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	f040 8099 	bne.w	801cae4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801c9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9ba:	695a      	ldr	r2, [r3, #20]
 801c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9be:	699b      	ldr	r3, [r3, #24]
 801c9c0:	3b02      	subs	r3, #2
 801c9c2:	429a      	cmp	r2, r3
 801c9c4:	d804      	bhi.n	801c9d0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9c8:	695a      	ldr	r2, [r3, #20]
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	601a      	str	r2, [r3, #0]
 801c9ce:	e089      	b.n	801cae4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9d6:	781b      	ldrb	r3, [r3, #0]
 801c9d8:	2b01      	cmp	r3, #1
 801c9da:	d128      	bne.n	801ca2e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801c9dc:	2302      	movs	r3, #2
 801c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9e2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801c9e4:	f107 0314 	add.w	r3, r7, #20
 801c9e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	f7fd f863 	bl	8019ab6 <get_fat>
 801c9f0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c9f8:	d103      	bne.n	801ca02 <f_getfree+0x7c>
 801c9fa:	2301      	movs	r3, #1
 801c9fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801ca00:	e063      	b.n	801caca <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca04:	2b01      	cmp	r3, #1
 801ca06:	d103      	bne.n	801ca10 <f_getfree+0x8a>
 801ca08:	2302      	movs	r3, #2
 801ca0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801ca0e:	e05c      	b.n	801caca <f_getfree+0x144>
					if (stat == 0) nfree++;
 801ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d102      	bne.n	801ca1c <f_getfree+0x96>
 801ca16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca18:	3301      	adds	r3, #1
 801ca1a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801ca1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca1e:	3301      	adds	r3, #1
 801ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca24:	699b      	ldr	r3, [r3, #24]
 801ca26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ca28:	429a      	cmp	r2, r3
 801ca2a:	d3db      	bcc.n	801c9e4 <f_getfree+0x5e>
 801ca2c:	e04d      	b.n	801caca <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801ca2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca30:	699b      	ldr	r3, [r3, #24]
 801ca32:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ca38:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	637b      	str	r3, [r7, #52]	; 0x34
 801ca3e:	2300      	movs	r3, #0
 801ca40:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801ca42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d113      	bne.n	801ca70 <f_getfree+0xea>
							res = move_window(fs, sect++);
 801ca48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ca4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca4c:	1c5a      	adds	r2, r3, #1
 801ca4e:	63ba      	str	r2, [r7, #56]	; 0x38
 801ca50:	4619      	mov	r1, r3
 801ca52:	f7fc ff75 	bl	8019940 <move_window>
 801ca56:	4603      	mov	r3, r0
 801ca58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801ca5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d131      	bne.n	801cac8 <f_getfree+0x142>
							p = fs->win;
 801ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca66:	3334      	adds	r3, #52	; 0x34
 801ca68:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801ca6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ca6e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca72:	781b      	ldrb	r3, [r3, #0]
 801ca74:	2b02      	cmp	r3, #2
 801ca76:	d10f      	bne.n	801ca98 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 801ca78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ca7a:	f7fc fcb1 	bl	80193e0 <ld_word>
 801ca7e:	4603      	mov	r3, r0
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d102      	bne.n	801ca8a <f_getfree+0x104>
 801ca84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca86:	3301      	adds	r3, #1
 801ca88:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801ca8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca8c:	3302      	adds	r3, #2
 801ca8e:	633b      	str	r3, [r7, #48]	; 0x30
 801ca90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca92:	3b02      	subs	r3, #2
 801ca94:	637b      	str	r3, [r7, #52]	; 0x34
 801ca96:	e010      	b.n	801caba <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 801ca98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ca9a:	f7fc fcb9 	bl	8019410 <ld_dword>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d102      	bne.n	801caae <f_getfree+0x128>
 801caa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801caaa:	3301      	adds	r3, #1
 801caac:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801caae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cab0:	3304      	adds	r3, #4
 801cab2:	633b      	str	r3, [r7, #48]	; 0x30
 801cab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cab6:	3b04      	subs	r3, #4
 801cab8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 801caba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cabc:	3b01      	subs	r3, #1
 801cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d1bd      	bne.n	801ca42 <f_getfree+0xbc>
 801cac6:	e000      	b.n	801caca <f_getfree+0x144>
							if (res != FR_OK) break;
 801cac8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 801caca:	68bb      	ldr	r3, [r7, #8]
 801cacc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cace:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cad4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cad8:	791a      	ldrb	r2, [r3, #4]
 801cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cadc:	f042 0201 	orr.w	r2, r2, #1
 801cae0:	b2d2      	uxtb	r2, r2
 801cae2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801cae4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801cae8:	4618      	mov	r0, r3
 801caea:	3748      	adds	r7, #72	; 0x48
 801caec:	46bd      	mov	sp, r7
 801caee:	bd80      	pop	{r7, pc}

0801caf0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b084      	sub	sp, #16
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	6078      	str	r0, [r7, #4]
 801caf8:	460b      	mov	r3, r1
 801cafa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 801cafc:	78fb      	ldrb	r3, [r7, #3]
 801cafe:	2b0a      	cmp	r3, #10
 801cb00:	d103      	bne.n	801cb0a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801cb02:	210d      	movs	r1, #13
 801cb04:	6878      	ldr	r0, [r7, #4]
 801cb06:	f7ff fff3 	bl	801caf0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	685b      	ldr	r3, [r3, #4]
 801cb0e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	db25      	blt.n	801cb62 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	1c5a      	adds	r2, r3, #1
 801cb1a:	60fa      	str	r2, [r7, #12]
 801cb1c:	687a      	ldr	r2, [r7, #4]
 801cb1e:	4413      	add	r3, r2
 801cb20:	78fa      	ldrb	r2, [r7, #3]
 801cb22:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	2b3c      	cmp	r3, #60	; 0x3c
 801cb28:	dd12      	ble.n	801cb50 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	6818      	ldr	r0, [r3, #0]
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f103 010c 	add.w	r1, r3, #12
 801cb34:	68fa      	ldr	r2, [r7, #12]
 801cb36:	f107 0308 	add.w	r3, r7, #8
 801cb3a:	f7ff fa08 	bl	801bf4e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801cb3e:	68ba      	ldr	r2, [r7, #8]
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	429a      	cmp	r2, r3
 801cb44:	d101      	bne.n	801cb4a <putc_bfd+0x5a>
 801cb46:	2300      	movs	r3, #0
 801cb48:	e001      	b.n	801cb4e <putc_bfd+0x5e>
 801cb4a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb4e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	68fa      	ldr	r2, [r7, #12]
 801cb54:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	689b      	ldr	r3, [r3, #8]
 801cb5a:	1c5a      	adds	r2, r3, #1
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	609a      	str	r2, [r3, #8]
 801cb60:	e000      	b.n	801cb64 <putc_bfd+0x74>
	if (i < 0) return;
 801cb62:	bf00      	nop
}
 801cb64:	3710      	adds	r7, #16
 801cb66:	46bd      	mov	sp, r7
 801cb68:	bd80      	pop	{r7, pc}

0801cb6a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801cb6a:	b580      	push	{r7, lr}
 801cb6c:	b084      	sub	sp, #16
 801cb6e:	af00      	add	r7, sp, #0
 801cb70:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	685b      	ldr	r3, [r3, #4]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	db16      	blt.n	801cba8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	6818      	ldr	r0, [r3, #0]
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	f103 010c 	add.w	r1, r3, #12
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	685b      	ldr	r3, [r3, #4]
 801cb88:	461a      	mov	r2, r3
 801cb8a:	f107 030c 	add.w	r3, r7, #12
 801cb8e:	f7ff f9de 	bl	801bf4e <f_write>
 801cb92:	4603      	mov	r3, r0
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d107      	bne.n	801cba8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	685b      	ldr	r3, [r3, #4]
 801cb9c:	68fa      	ldr	r2, [r7, #12]
 801cb9e:	4293      	cmp	r3, r2
 801cba0:	d102      	bne.n	801cba8 <putc_flush+0x3e>
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	689b      	ldr	r3, [r3, #8]
 801cba6:	e001      	b.n	801cbac <putc_flush+0x42>
	return EOF;
 801cba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cbac:	4618      	mov	r0, r3
 801cbae:	3710      	adds	r7, #16
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bd80      	pop	{r7, pc}

0801cbb4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801cbb4:	b480      	push	{r7}
 801cbb6:	b083      	sub	sp, #12
 801cbb8:	af00      	add	r7, sp, #0
 801cbba:	6078      	str	r0, [r7, #4]
 801cbbc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	683a      	ldr	r2, [r7, #0]
 801cbc2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	605a      	str	r2, [r3, #4]
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	685a      	ldr	r2, [r3, #4]
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	609a      	str	r2, [r3, #8]
}
 801cbd2:	bf00      	nop
 801cbd4:	370c      	adds	r7, #12
 801cbd6:	46bd      	mov	sp, r7
 801cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbdc:	4770      	bx	lr
	...

0801cbe0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801cbe0:	b40e      	push	{r1, r2, r3}
 801cbe2:	b580      	push	{r7, lr}
 801cbe4:	b0a7      	sub	sp, #156	; 0x9c
 801cbe6:	af00      	add	r7, sp, #0
 801cbe8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 801cbea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cbee:	6879      	ldr	r1, [r7, #4]
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f7ff ffdf 	bl	801cbb4 <putc_init>

	va_start(arp, fmt);
 801cbf6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801cbfa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 801cbfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cc00:	1c5a      	adds	r2, r3, #1
 801cc02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cc06:	781b      	ldrb	r3, [r3, #0]
 801cc08:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 801cc0c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	f000 81f2 	beq.w	801cffa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 801cc16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc1a:	2b25      	cmp	r3, #37	; 0x25
 801cc1c:	d008      	beq.n	801cc30 <f_printf+0x50>
			putc_bfd(&pb, c);
 801cc1e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801cc22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cc26:	4611      	mov	r1, r2
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7ff ff61 	bl	801caf0 <putc_bfd>
			continue;
 801cc2e:	e1e3      	b.n	801cff8 <f_printf+0x418>
		}
		w = f = 0;
 801cc30:	2300      	movs	r3, #0
 801cc32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cc36:	2300      	movs	r3, #0
 801cc38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 801cc3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cc40:	1c5a      	adds	r2, r3, #1
 801cc42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cc46:	781b      	ldrb	r3, [r3, #0]
 801cc48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 801cc4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc50:	2b30      	cmp	r3, #48	; 0x30
 801cc52:	d10b      	bne.n	801cc6c <f_printf+0x8c>
			f = 1; c = *fmt++;
 801cc54:	2301      	movs	r3, #1
 801cc56:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cc5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cc5e:	1c5a      	adds	r2, r3, #1
 801cc60:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cc64:	781b      	ldrb	r3, [r3, #0]
 801cc66:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 801cc6a:	e024      	b.n	801ccb6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 801cc6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc70:	2b2d      	cmp	r3, #45	; 0x2d
 801cc72:	d120      	bne.n	801ccb6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 801cc74:	2302      	movs	r3, #2
 801cc76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cc7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cc7e:	1c5a      	adds	r2, r3, #1
 801cc80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 801cc8a:	e014      	b.n	801ccb6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 801cc8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cc90:	4613      	mov	r3, r2
 801cc92:	009b      	lsls	r3, r3, #2
 801cc94:	4413      	add	r3, r2
 801cc96:	005b      	lsls	r3, r3, #1
 801cc98:	461a      	mov	r2, r3
 801cc9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cc9e:	4413      	add	r3, r2
 801cca0:	3b30      	subs	r3, #48	; 0x30
 801cca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 801cca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ccaa:	1c5a      	adds	r2, r3, #1
 801ccac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801ccb0:	781b      	ldrb	r3, [r3, #0]
 801ccb2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 801ccb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccba:	2b2f      	cmp	r3, #47	; 0x2f
 801ccbc:	d903      	bls.n	801ccc6 <f_printf+0xe6>
 801ccbe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccc2:	2b39      	cmp	r3, #57	; 0x39
 801ccc4:	d9e2      	bls.n	801cc8c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801ccc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccca:	2b6c      	cmp	r3, #108	; 0x6c
 801cccc:	d003      	beq.n	801ccd6 <f_printf+0xf6>
 801ccce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccd2:	2b4c      	cmp	r3, #76	; 0x4c
 801ccd4:	d10d      	bne.n	801ccf2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 801ccd6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ccda:	f043 0304 	orr.w	r3, r3, #4
 801ccde:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 801cce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801cce6:	1c5a      	adds	r2, r3, #1
 801cce8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801ccec:	781b      	ldrb	r3, [r3, #0]
 801ccee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 801ccf2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	f000 8181 	beq.w	801cffe <f_printf+0x41e>
		d = c;
 801ccfc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cd00:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 801cd04:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cd08:	2b60      	cmp	r3, #96	; 0x60
 801cd0a:	d908      	bls.n	801cd1e <f_printf+0x13e>
 801cd0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cd10:	2b7a      	cmp	r3, #122	; 0x7a
 801cd12:	d804      	bhi.n	801cd1e <f_printf+0x13e>
 801cd14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cd18:	3b20      	subs	r3, #32
 801cd1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 801cd1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cd22:	3b42      	subs	r3, #66	; 0x42
 801cd24:	2b16      	cmp	r3, #22
 801cd26:	f200 8098 	bhi.w	801ce5a <f_printf+0x27a>
 801cd2a:	a201      	add	r2, pc, #4	; (adr r2, 801cd30 <f_printf+0x150>)
 801cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd30:	0801ce3b 	.word	0x0801ce3b
 801cd34:	0801ce23 	.word	0x0801ce23
 801cd38:	0801ce4b 	.word	0x0801ce4b
 801cd3c:	0801ce5b 	.word	0x0801ce5b
 801cd40:	0801ce5b 	.word	0x0801ce5b
 801cd44:	0801ce5b 	.word	0x0801ce5b
 801cd48:	0801ce5b 	.word	0x0801ce5b
 801cd4c:	0801ce5b 	.word	0x0801ce5b
 801cd50:	0801ce5b 	.word	0x0801ce5b
 801cd54:	0801ce5b 	.word	0x0801ce5b
 801cd58:	0801ce5b 	.word	0x0801ce5b
 801cd5c:	0801ce5b 	.word	0x0801ce5b
 801cd60:	0801ce5b 	.word	0x0801ce5b
 801cd64:	0801ce43 	.word	0x0801ce43
 801cd68:	0801ce5b 	.word	0x0801ce5b
 801cd6c:	0801ce5b 	.word	0x0801ce5b
 801cd70:	0801ce5b 	.word	0x0801ce5b
 801cd74:	0801cd8d 	.word	0x0801cd8d
 801cd78:	0801ce5b 	.word	0x0801ce5b
 801cd7c:	0801ce4b 	.word	0x0801ce4b
 801cd80:	0801ce5b 	.word	0x0801ce5b
 801cd84:	0801ce5b 	.word	0x0801ce5b
 801cd88:	0801ce53 	.word	0x0801ce53
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 801cd8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cd8e:	1d1a      	adds	r2, r3, #4
 801cd90:	67ba      	str	r2, [r7, #120]	; 0x78
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 801cd96:	2300      	movs	r3, #0
 801cd98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cd9c:	e004      	b.n	801cda8 <f_printf+0x1c8>
 801cd9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cda2:	3301      	adds	r3, #1
 801cda4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cda8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cdaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cdae:	4413      	add	r3, r2
 801cdb0:	781b      	ldrb	r3, [r3, #0]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d1f3      	bne.n	801cd9e <f_printf+0x1be>
			if (!(f & 2)) {
 801cdb6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cdba:	f003 0302 	and.w	r3, r3, #2
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d11a      	bne.n	801cdf8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 801cdc2:	e005      	b.n	801cdd0 <f_printf+0x1f0>
 801cdc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cdc8:	2120      	movs	r1, #32
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7ff fe90 	bl	801caf0 <putc_bfd>
 801cdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cdd4:	1c5a      	adds	r2, r3, #1
 801cdd6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cdda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cdde:	429a      	cmp	r2, r3
 801cde0:	d8f0      	bhi.n	801cdc4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 801cde2:	e009      	b.n	801cdf8 <f_printf+0x218>
 801cde4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cde6:	1c5a      	adds	r2, r3, #1
 801cde8:	67fa      	str	r2, [r7, #124]	; 0x7c
 801cdea:	781a      	ldrb	r2, [r3, #0]
 801cdec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cdf0:	4611      	mov	r1, r2
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	f7ff fe7c 	bl	801caf0 <putc_bfd>
 801cdf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cdfa:	781b      	ldrb	r3, [r3, #0]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d1f1      	bne.n	801cde4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 801ce00:	e005      	b.n	801ce0e <f_printf+0x22e>
 801ce02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ce06:	2120      	movs	r1, #32
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7ff fe71 	bl	801caf0 <putc_bfd>
 801ce0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ce12:	1c5a      	adds	r2, r3, #1
 801ce14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801ce18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801ce1c:	429a      	cmp	r2, r3
 801ce1e:	d8f0      	bhi.n	801ce02 <f_printf+0x222>
			continue;
 801ce20:	e0ea      	b.n	801cff8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801ce22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ce24:	1d1a      	adds	r2, r3, #4
 801ce26:	67ba      	str	r2, [r7, #120]	; 0x78
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	b2da      	uxtb	r2, r3
 801ce2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ce30:	4611      	mov	r1, r2
 801ce32:	4618      	mov	r0, r3
 801ce34:	f7ff fe5c 	bl	801caf0 <putc_bfd>
 801ce38:	e0de      	b.n	801cff8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 801ce3a:	2302      	movs	r3, #2
 801ce3c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801ce40:	e014      	b.n	801ce6c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 801ce42:	2308      	movs	r3, #8
 801ce44:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801ce48:	e010      	b.n	801ce6c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 801ce4a:	230a      	movs	r3, #10
 801ce4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801ce50:	e00c      	b.n	801ce6c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 801ce52:	2310      	movs	r3, #16
 801ce54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 801ce58:	e008      	b.n	801ce6c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 801ce5a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 801ce5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ce62:	4611      	mov	r1, r2
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7ff fe43 	bl	801caf0 <putc_bfd>
 801ce6a:	e0c5      	b.n	801cff8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801ce6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801ce70:	f003 0304 	and.w	r3, r3, #4
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d004      	beq.n	801ce82 <f_printf+0x2a2>
 801ce78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ce7a:	1d1a      	adds	r2, r3, #4
 801ce7c:	67ba      	str	r2, [r7, #120]	; 0x78
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	e00c      	b.n	801ce9c <f_printf+0x2bc>
 801ce82:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801ce86:	2b44      	cmp	r3, #68	; 0x44
 801ce88:	d104      	bne.n	801ce94 <f_printf+0x2b4>
 801ce8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ce8c:	1d1a      	adds	r2, r3, #4
 801ce8e:	67ba      	str	r2, [r7, #120]	; 0x78
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	e003      	b.n	801ce9c <f_printf+0x2bc>
 801ce94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ce96:	1d1a      	adds	r2, r3, #4
 801ce98:	67ba      	str	r2, [r7, #120]	; 0x78
 801ce9a:	681b      	ldr	r3, [r3, #0]
 801ce9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 801cea0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cea4:	2b44      	cmp	r3, #68	; 0x44
 801cea6:	d10e      	bne.n	801cec6 <f_printf+0x2e6>
 801cea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	da0a      	bge.n	801cec6 <f_printf+0x2e6>
			v = 0 - v;
 801ceb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ceb4:	425b      	negs	r3, r3
 801ceb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 801ceba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cebe:	f043 0308 	orr.w	r3, r3, #8
 801cec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 801cec6:	2300      	movs	r3, #0
 801cec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 801cecc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 801ced0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ced4:	fbb3 f1f2 	udiv	r1, r3, r2
 801ced8:	fb01 f202 	mul.w	r2, r1, r2
 801cedc:	1a9b      	subs	r3, r3, r2
 801cede:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 801cee2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801cee6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801ceea:	fbb2 f3f3 	udiv	r3, r2, r3
 801ceee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801cef2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cef6:	2b09      	cmp	r3, #9
 801cef8:	d90b      	bls.n	801cf12 <f_printf+0x332>
 801cefa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801cefe:	2b78      	cmp	r3, #120	; 0x78
 801cf00:	d101      	bne.n	801cf06 <f_printf+0x326>
 801cf02:	2227      	movs	r2, #39	; 0x27
 801cf04:	e000      	b.n	801cf08 <f_printf+0x328>
 801cf06:	2207      	movs	r2, #7
 801cf08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 801cf0c:	4413      	add	r3, r2
 801cf0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 801cf12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf16:	1c5a      	adds	r2, r3, #1
 801cf18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801cf1c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801cf20:	3230      	adds	r2, #48	; 0x30
 801cf22:	b2d2      	uxtb	r2, r2
 801cf24:	3398      	adds	r3, #152	; 0x98
 801cf26:	443b      	add	r3, r7
 801cf28:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 801cf2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d003      	beq.n	801cf3c <f_printf+0x35c>
 801cf34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf38:	2b1f      	cmp	r3, #31
 801cf3a:	d9c7      	bls.n	801cecc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 801cf3c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cf40:	f003 0308 	and.w	r3, r3, #8
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d009      	beq.n	801cf5c <f_printf+0x37c>
 801cf48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf4c:	1c5a      	adds	r2, r3, #1
 801cf4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 801cf52:	3398      	adds	r3, #152	; 0x98
 801cf54:	443b      	add	r3, r7
 801cf56:	222d      	movs	r2, #45	; 0x2d
 801cf58:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 801cf5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cf60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cf64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cf68:	f003 0301 	and.w	r3, r3, #1
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d001      	beq.n	801cf74 <f_printf+0x394>
 801cf70:	2330      	movs	r3, #48	; 0x30
 801cf72:	e000      	b.n	801cf76 <f_printf+0x396>
 801cf74:	2320      	movs	r3, #32
 801cf76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801cf7a:	e007      	b.n	801cf8c <f_printf+0x3ac>
 801cf7c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801cf80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cf84:	4611      	mov	r1, r2
 801cf86:	4618      	mov	r0, r3
 801cf88:	f7ff fdb2 	bl	801caf0 <putc_bfd>
 801cf8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801cf90:	f003 0302 	and.w	r3, r3, #2
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d108      	bne.n	801cfaa <f_printf+0x3ca>
 801cf98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cf9c:	1c5a      	adds	r2, r3, #1
 801cf9e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cfa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cfa6:	429a      	cmp	r2, r3
 801cfa8:	d8e8      	bhi.n	801cf7c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 801cfaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfae:	3b01      	subs	r3, #1
 801cfb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801cfb4:	f107 020c 	add.w	r2, r7, #12
 801cfb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfbc:	4413      	add	r3, r2
 801cfbe:	781a      	ldrb	r2, [r3, #0]
 801cfc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cfc4:	4611      	mov	r1, r2
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	f7ff fd92 	bl	801caf0 <putc_bfd>
		} while (i);
 801cfcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d1ea      	bne.n	801cfaa <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 801cfd4:	e007      	b.n	801cfe6 <f_printf+0x406>
 801cfd6:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 801cfda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801cfde:	4611      	mov	r1, r2
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7ff fd85 	bl	801caf0 <putc_bfd>
 801cfe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801cfea:	1c5a      	adds	r2, r3, #1
 801cfec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801cff0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d8ee      	bhi.n	801cfd6 <f_printf+0x3f6>
		c = *fmt++;
 801cff8:	e600      	b.n	801cbfc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 801cffa:	bf00      	nop
 801cffc:	e000      	b.n	801d000 <f_printf+0x420>
		if (!c) break;
 801cffe:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 801d000:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d004:	4618      	mov	r0, r3
 801d006:	f7ff fdb0 	bl	801cb6a <putc_flush>
 801d00a:	4603      	mov	r3, r0
}
 801d00c:	4618      	mov	r0, r3
 801d00e:	379c      	adds	r7, #156	; 0x9c
 801d010:	46bd      	mov	sp, r7
 801d012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d016:	b003      	add	sp, #12
 801d018:	4770      	bx	lr
 801d01a:	bf00      	nop

0801d01c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801d01c:	b480      	push	{r7}
 801d01e:	b087      	sub	sp, #28
 801d020:	af00      	add	r7, sp, #0
 801d022:	60f8      	str	r0, [r7, #12]
 801d024:	60b9      	str	r1, [r7, #8]
 801d026:	4613      	mov	r3, r2
 801d028:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801d02a:	2301      	movs	r3, #1
 801d02c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801d02e:	2300      	movs	r3, #0
 801d030:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801d032:	4b1f      	ldr	r3, [pc, #124]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d034:	7b9b      	ldrb	r3, [r3, #14]
 801d036:	b2db      	uxtb	r3, r3
 801d038:	2b01      	cmp	r3, #1
 801d03a:	d831      	bhi.n	801d0a0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801d03c:	4b1c      	ldr	r3, [pc, #112]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d03e:	7b9b      	ldrb	r3, [r3, #14]
 801d040:	b2db      	uxtb	r3, r3
 801d042:	461a      	mov	r2, r3
 801d044:	4b1a      	ldr	r3, [pc, #104]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d046:	2100      	movs	r1, #0
 801d048:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801d04a:	4b19      	ldr	r3, [pc, #100]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d04c:	7b9b      	ldrb	r3, [r3, #14]
 801d04e:	b2db      	uxtb	r3, r3
 801d050:	4a17      	ldr	r2, [pc, #92]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d052:	009b      	lsls	r3, r3, #2
 801d054:	4413      	add	r3, r2
 801d056:	68fa      	ldr	r2, [r7, #12]
 801d058:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801d05a:	4b15      	ldr	r3, [pc, #84]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d05c:	7b9b      	ldrb	r3, [r3, #14]
 801d05e:	b2db      	uxtb	r3, r3
 801d060:	461a      	mov	r2, r3
 801d062:	4b13      	ldr	r3, [pc, #76]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d064:	4413      	add	r3, r2
 801d066:	79fa      	ldrb	r2, [r7, #7]
 801d068:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 801d06a:	4b11      	ldr	r3, [pc, #68]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d06c:	7b9b      	ldrb	r3, [r3, #14]
 801d06e:	b2db      	uxtb	r3, r3
 801d070:	1c5a      	adds	r2, r3, #1
 801d072:	b2d1      	uxtb	r1, r2
 801d074:	4a0e      	ldr	r2, [pc, #56]	; (801d0b0 <FATFS_LinkDriverEx+0x94>)
 801d076:	7391      	strb	r1, [r2, #14]
 801d078:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801d07a:	7dbb      	ldrb	r3, [r7, #22]
 801d07c:	3330      	adds	r3, #48	; 0x30
 801d07e:	b2da      	uxtb	r2, r3
 801d080:	68bb      	ldr	r3, [r7, #8]
 801d082:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801d084:	68bb      	ldr	r3, [r7, #8]
 801d086:	3301      	adds	r3, #1
 801d088:	223a      	movs	r2, #58	; 0x3a
 801d08a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	3302      	adds	r3, #2
 801d090:	222f      	movs	r2, #47	; 0x2f
 801d092:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801d094:	68bb      	ldr	r3, [r7, #8]
 801d096:	3303      	adds	r3, #3
 801d098:	2200      	movs	r2, #0
 801d09a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801d09c:	2300      	movs	r3, #0
 801d09e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801d0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	371c      	adds	r7, #28
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ac:	4770      	bx	lr
 801d0ae:	bf00      	nop
 801d0b0:	2000b370 	.word	0x2000b370

0801d0b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801d0b4:	b580      	push	{r7, lr}
 801d0b6:	b082      	sub	sp, #8
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	6078      	str	r0, [r7, #4]
 801d0bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801d0be:	2200      	movs	r2, #0
 801d0c0:	6839      	ldr	r1, [r7, #0]
 801d0c2:	6878      	ldr	r0, [r7, #4]
 801d0c4:	f7ff ffaa 	bl	801d01c <FATFS_LinkDriverEx>
 801d0c8:	4603      	mov	r3, r0
}
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	3708      	adds	r7, #8
 801d0ce:	46bd      	mov	sp, r7
 801d0d0:	bd80      	pop	{r7, pc}

0801d0d2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 801d0d2:	b580      	push	{r7, lr}
 801d0d4:	b082      	sub	sp, #8
 801d0d6:	af00      	add	r7, sp, #0
 801d0d8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801d0da:	6878      	ldr	r0, [r7, #4]
 801d0dc:	f007 fda2 	bl	8024c24 <malloc>
 801d0e0:	4603      	mov	r3, r0
}
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	3708      	adds	r7, #8
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	bd80      	pop	{r7, pc}

0801d0ea <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801d0ea:	b580      	push	{r7, lr}
 801d0ec:	b082      	sub	sp, #8
 801d0ee:	af00      	add	r7, sp, #0
 801d0f0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801d0f2:	6878      	ldr	r0, [r7, #4]
 801d0f4:	f007 fd9e 	bl	8024c34 <free>
}
 801d0f8:	bf00      	nop
 801d0fa:	3708      	adds	r7, #8
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	bd80      	pop	{r7, pc}

0801d100 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801d100:	b480      	push	{r7}
 801d102:	b085      	sub	sp, #20
 801d104:	af00      	add	r7, sp, #0
 801d106:	4603      	mov	r3, r0
 801d108:	6039      	str	r1, [r7, #0]
 801d10a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801d10c:	88fb      	ldrh	r3, [r7, #6]
 801d10e:	2b7f      	cmp	r3, #127	; 0x7f
 801d110:	d802      	bhi.n	801d118 <ff_convert+0x18>
		c = chr;
 801d112:	88fb      	ldrh	r3, [r7, #6]
 801d114:	81fb      	strh	r3, [r7, #14]
 801d116:	e025      	b.n	801d164 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801d118:	683b      	ldr	r3, [r7, #0]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d00b      	beq.n	801d136 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801d11e:	88fb      	ldrh	r3, [r7, #6]
 801d120:	2bff      	cmp	r3, #255	; 0xff
 801d122:	d805      	bhi.n	801d130 <ff_convert+0x30>
 801d124:	88fb      	ldrh	r3, [r7, #6]
 801d126:	3b80      	subs	r3, #128	; 0x80
 801d128:	4a12      	ldr	r2, [pc, #72]	; (801d174 <ff_convert+0x74>)
 801d12a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d12e:	e000      	b.n	801d132 <ff_convert+0x32>
 801d130:	2300      	movs	r3, #0
 801d132:	81fb      	strh	r3, [r7, #14]
 801d134:	e016      	b.n	801d164 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801d136:	2300      	movs	r3, #0
 801d138:	81fb      	strh	r3, [r7, #14]
 801d13a:	e009      	b.n	801d150 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801d13c:	89fb      	ldrh	r3, [r7, #14]
 801d13e:	4a0d      	ldr	r2, [pc, #52]	; (801d174 <ff_convert+0x74>)
 801d140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801d144:	88fa      	ldrh	r2, [r7, #6]
 801d146:	429a      	cmp	r2, r3
 801d148:	d006      	beq.n	801d158 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801d14a:	89fb      	ldrh	r3, [r7, #14]
 801d14c:	3301      	adds	r3, #1
 801d14e:	81fb      	strh	r3, [r7, #14]
 801d150:	89fb      	ldrh	r3, [r7, #14]
 801d152:	2b7f      	cmp	r3, #127	; 0x7f
 801d154:	d9f2      	bls.n	801d13c <ff_convert+0x3c>
 801d156:	e000      	b.n	801d15a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801d158:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801d15a:	89fb      	ldrh	r3, [r7, #14]
 801d15c:	3380      	adds	r3, #128	; 0x80
 801d15e:	b29b      	uxth	r3, r3
 801d160:	b2db      	uxtb	r3, r3
 801d162:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801d164:	89fb      	ldrh	r3, [r7, #14]
}
 801d166:	4618      	mov	r0, r3
 801d168:	3714      	adds	r7, #20
 801d16a:	46bd      	mov	sp, r7
 801d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d170:	4770      	bx	lr
 801d172:	bf00      	nop
 801d174:	08037374 	.word	0x08037374

0801d178 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801d178:	b480      	push	{r7}
 801d17a:	b087      	sub	sp, #28
 801d17c:	af00      	add	r7, sp, #0
 801d17e:	4603      	mov	r3, r0
 801d180:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801d182:	88fb      	ldrh	r3, [r7, #6]
 801d184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d188:	d201      	bcs.n	801d18e <ff_wtoupper+0x16>
 801d18a:	4b3e      	ldr	r3, [pc, #248]	; (801d284 <ff_wtoupper+0x10c>)
 801d18c:	e000      	b.n	801d190 <ff_wtoupper+0x18>
 801d18e:	4b3e      	ldr	r3, [pc, #248]	; (801d288 <ff_wtoupper+0x110>)
 801d190:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801d192:	697b      	ldr	r3, [r7, #20]
 801d194:	1c9a      	adds	r2, r3, #2
 801d196:	617a      	str	r2, [r7, #20]
 801d198:	881b      	ldrh	r3, [r3, #0]
 801d19a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801d19c:	8a7b      	ldrh	r3, [r7, #18]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d068      	beq.n	801d274 <ff_wtoupper+0xfc>
 801d1a2:	88fa      	ldrh	r2, [r7, #6]
 801d1a4:	8a7b      	ldrh	r3, [r7, #18]
 801d1a6:	429a      	cmp	r2, r3
 801d1a8:	d364      	bcc.n	801d274 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801d1aa:	697b      	ldr	r3, [r7, #20]
 801d1ac:	1c9a      	adds	r2, r3, #2
 801d1ae:	617a      	str	r2, [r7, #20]
 801d1b0:	881b      	ldrh	r3, [r3, #0]
 801d1b2:	823b      	strh	r3, [r7, #16]
 801d1b4:	8a3b      	ldrh	r3, [r7, #16]
 801d1b6:	0a1b      	lsrs	r3, r3, #8
 801d1b8:	81fb      	strh	r3, [r7, #14]
 801d1ba:	8a3b      	ldrh	r3, [r7, #16]
 801d1bc:	b2db      	uxtb	r3, r3
 801d1be:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801d1c0:	88fa      	ldrh	r2, [r7, #6]
 801d1c2:	8a79      	ldrh	r1, [r7, #18]
 801d1c4:	8a3b      	ldrh	r3, [r7, #16]
 801d1c6:	440b      	add	r3, r1
 801d1c8:	429a      	cmp	r2, r3
 801d1ca:	da49      	bge.n	801d260 <ff_wtoupper+0xe8>
			switch (cmd) {
 801d1cc:	89fb      	ldrh	r3, [r7, #14]
 801d1ce:	2b08      	cmp	r3, #8
 801d1d0:	d84f      	bhi.n	801d272 <ff_wtoupper+0xfa>
 801d1d2:	a201      	add	r2, pc, #4	; (adr r2, 801d1d8 <ff_wtoupper+0x60>)
 801d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1d8:	0801d1fd 	.word	0x0801d1fd
 801d1dc:	0801d20f 	.word	0x0801d20f
 801d1e0:	0801d225 	.word	0x0801d225
 801d1e4:	0801d22d 	.word	0x0801d22d
 801d1e8:	0801d235 	.word	0x0801d235
 801d1ec:	0801d23d 	.word	0x0801d23d
 801d1f0:	0801d245 	.word	0x0801d245
 801d1f4:	0801d24d 	.word	0x0801d24d
 801d1f8:	0801d255 	.word	0x0801d255
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801d1fc:	88fa      	ldrh	r2, [r7, #6]
 801d1fe:	8a7b      	ldrh	r3, [r7, #18]
 801d200:	1ad3      	subs	r3, r2, r3
 801d202:	005b      	lsls	r3, r3, #1
 801d204:	697a      	ldr	r2, [r7, #20]
 801d206:	4413      	add	r3, r2
 801d208:	881b      	ldrh	r3, [r3, #0]
 801d20a:	80fb      	strh	r3, [r7, #6]
 801d20c:	e027      	b.n	801d25e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801d20e:	88fa      	ldrh	r2, [r7, #6]
 801d210:	8a7b      	ldrh	r3, [r7, #18]
 801d212:	1ad3      	subs	r3, r2, r3
 801d214:	b29b      	uxth	r3, r3
 801d216:	f003 0301 	and.w	r3, r3, #1
 801d21a:	b29b      	uxth	r3, r3
 801d21c:	88fa      	ldrh	r2, [r7, #6]
 801d21e:	1ad3      	subs	r3, r2, r3
 801d220:	80fb      	strh	r3, [r7, #6]
 801d222:	e01c      	b.n	801d25e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801d224:	88fb      	ldrh	r3, [r7, #6]
 801d226:	3b10      	subs	r3, #16
 801d228:	80fb      	strh	r3, [r7, #6]
 801d22a:	e018      	b.n	801d25e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801d22c:	88fb      	ldrh	r3, [r7, #6]
 801d22e:	3b20      	subs	r3, #32
 801d230:	80fb      	strh	r3, [r7, #6]
 801d232:	e014      	b.n	801d25e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801d234:	88fb      	ldrh	r3, [r7, #6]
 801d236:	3b30      	subs	r3, #48	; 0x30
 801d238:	80fb      	strh	r3, [r7, #6]
 801d23a:	e010      	b.n	801d25e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801d23c:	88fb      	ldrh	r3, [r7, #6]
 801d23e:	3b1a      	subs	r3, #26
 801d240:	80fb      	strh	r3, [r7, #6]
 801d242:	e00c      	b.n	801d25e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801d244:	88fb      	ldrh	r3, [r7, #6]
 801d246:	3308      	adds	r3, #8
 801d248:	80fb      	strh	r3, [r7, #6]
 801d24a:	e008      	b.n	801d25e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801d24c:	88fb      	ldrh	r3, [r7, #6]
 801d24e:	3b50      	subs	r3, #80	; 0x50
 801d250:	80fb      	strh	r3, [r7, #6]
 801d252:	e004      	b.n	801d25e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801d254:	88fb      	ldrh	r3, [r7, #6]
 801d256:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801d25a:	80fb      	strh	r3, [r7, #6]
 801d25c:	bf00      	nop
			}
			break;
 801d25e:	e008      	b.n	801d272 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801d260:	89fb      	ldrh	r3, [r7, #14]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d195      	bne.n	801d192 <ff_wtoupper+0x1a>
 801d266:	8a3b      	ldrh	r3, [r7, #16]
 801d268:	005b      	lsls	r3, r3, #1
 801d26a:	697a      	ldr	r2, [r7, #20]
 801d26c:	4413      	add	r3, r2
 801d26e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801d270:	e78f      	b.n	801d192 <ff_wtoupper+0x1a>
			break;
 801d272:	bf00      	nop
	}

	return chr;
 801d274:	88fb      	ldrh	r3, [r7, #6]
}
 801d276:	4618      	mov	r0, r3
 801d278:	371c      	adds	r7, #28
 801d27a:	46bd      	mov	sp, r7
 801d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d280:	4770      	bx	lr
 801d282:	bf00      	nop
 801d284:	08037474 	.word	0x08037474
 801d288:	08037668 	.word	0x08037668

0801d28c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801d28c:	b580      	push	{r7, lr}
 801d28e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801d290:	4b0e      	ldr	r3, [pc, #56]	; (801d2cc <HAL_Init+0x40>)
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	4a0d      	ldr	r2, [pc, #52]	; (801d2cc <HAL_Init+0x40>)
 801d296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801d29a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801d29c:	4b0b      	ldr	r3, [pc, #44]	; (801d2cc <HAL_Init+0x40>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	4a0a      	ldr	r2, [pc, #40]	; (801d2cc <HAL_Init+0x40>)
 801d2a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801d2a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801d2a8:	4b08      	ldr	r3, [pc, #32]	; (801d2cc <HAL_Init+0x40>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	4a07      	ldr	r2, [pc, #28]	; (801d2cc <HAL_Init+0x40>)
 801d2ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d2b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801d2b4:	2003      	movs	r0, #3
 801d2b6:	f000 fead 	bl	801e014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801d2ba:	2000      	movs	r0, #0
 801d2bc:	f000 f808 	bl	801d2d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801d2c0:	f7f5 fa46 	bl	8012750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801d2c4:	2300      	movs	r3, #0
}
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	bd80      	pop	{r7, pc}
 801d2ca:	bf00      	nop
 801d2cc:	40023c00 	.word	0x40023c00

0801d2d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b082      	sub	sp, #8
 801d2d4:	af00      	add	r7, sp, #0
 801d2d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801d2d8:	4b12      	ldr	r3, [pc, #72]	; (801d324 <HAL_InitTick+0x54>)
 801d2da:	681a      	ldr	r2, [r3, #0]
 801d2dc:	4b12      	ldr	r3, [pc, #72]	; (801d328 <HAL_InitTick+0x58>)
 801d2de:	781b      	ldrb	r3, [r3, #0]
 801d2e0:	4619      	mov	r1, r3
 801d2e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d2e6:	fbb3 f3f1 	udiv	r3, r3, r1
 801d2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f000 fed3 	bl	801e09a <HAL_SYSTICK_Config>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d001      	beq.n	801d2fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	e00e      	b.n	801d31c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801d2fe:	687b      	ldr	r3, [r7, #4]
 801d300:	2b0f      	cmp	r3, #15
 801d302:	d80a      	bhi.n	801d31a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801d304:	2200      	movs	r2, #0
 801d306:	6879      	ldr	r1, [r7, #4]
 801d308:	f04f 30ff 	mov.w	r0, #4294967295
 801d30c:	f000 fe8d 	bl	801e02a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801d310:	4a06      	ldr	r2, [pc, #24]	; (801d32c <HAL_InitTick+0x5c>)
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801d316:	2300      	movs	r3, #0
 801d318:	e000      	b.n	801d31c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801d31a:	2301      	movs	r3, #1
}
 801d31c:	4618      	mov	r0, r3
 801d31e:	3708      	adds	r7, #8
 801d320:	46bd      	mov	sp, r7
 801d322:	bd80      	pop	{r7, pc}
 801d324:	20000000 	.word	0x20000000
 801d328:	200000dc 	.word	0x200000dc
 801d32c:	200000d8 	.word	0x200000d8

0801d330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801d330:	b480      	push	{r7}
 801d332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801d334:	4b06      	ldr	r3, [pc, #24]	; (801d350 <HAL_IncTick+0x20>)
 801d336:	781b      	ldrb	r3, [r3, #0]
 801d338:	461a      	mov	r2, r3
 801d33a:	4b06      	ldr	r3, [pc, #24]	; (801d354 <HAL_IncTick+0x24>)
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	4413      	add	r3, r2
 801d340:	4a04      	ldr	r2, [pc, #16]	; (801d354 <HAL_IncTick+0x24>)
 801d342:	6013      	str	r3, [r2, #0]
}
 801d344:	bf00      	nop
 801d346:	46bd      	mov	sp, r7
 801d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d34c:	4770      	bx	lr
 801d34e:	bf00      	nop
 801d350:	200000dc 	.word	0x200000dc
 801d354:	2000b380 	.word	0x2000b380

0801d358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801d358:	b480      	push	{r7}
 801d35a:	af00      	add	r7, sp, #0
  return uwTick;
 801d35c:	4b03      	ldr	r3, [pc, #12]	; (801d36c <HAL_GetTick+0x14>)
 801d35e:	681b      	ldr	r3, [r3, #0]
}
 801d360:	4618      	mov	r0, r3
 801d362:	46bd      	mov	sp, r7
 801d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d368:	4770      	bx	lr
 801d36a:	bf00      	nop
 801d36c:	2000b380 	.word	0x2000b380

0801d370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801d370:	b580      	push	{r7, lr}
 801d372:	b084      	sub	sp, #16
 801d374:	af00      	add	r7, sp, #0
 801d376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801d378:	f7ff ffee 	bl	801d358 <HAL_GetTick>
 801d37c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d388:	d005      	beq.n	801d396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801d38a:	4b0a      	ldr	r3, [pc, #40]	; (801d3b4 <HAL_Delay+0x44>)
 801d38c:	781b      	ldrb	r3, [r3, #0]
 801d38e:	461a      	mov	r2, r3
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	4413      	add	r3, r2
 801d394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801d396:	bf00      	nop
 801d398:	f7ff ffde 	bl	801d358 <HAL_GetTick>
 801d39c:	4602      	mov	r2, r0
 801d39e:	68bb      	ldr	r3, [r7, #8]
 801d3a0:	1ad3      	subs	r3, r2, r3
 801d3a2:	68fa      	ldr	r2, [r7, #12]
 801d3a4:	429a      	cmp	r2, r3
 801d3a6:	d8f7      	bhi.n	801d398 <HAL_Delay+0x28>
  {
  }
}
 801d3a8:	bf00      	nop
 801d3aa:	bf00      	nop
 801d3ac:	3710      	adds	r7, #16
 801d3ae:	46bd      	mov	sp, r7
 801d3b0:	bd80      	pop	{r7, pc}
 801d3b2:	bf00      	nop
 801d3b4:	200000dc 	.word	0x200000dc

0801d3b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b084      	sub	sp, #16
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801d3c0:	2300      	movs	r3, #0
 801d3c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d101      	bne.n	801d3ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 801d3ca:	2301      	movs	r3, #1
 801d3cc:	e033      	b.n	801d436 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d109      	bne.n	801d3ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801d3d6:	6878      	ldr	r0, [r7, #4]
 801d3d8:	f7fa f9b4 	bl	8017744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	2200      	movs	r2, #0
 801d3e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	2200      	movs	r2, #0
 801d3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d3ea:	687b      	ldr	r3, [r7, #4]
 801d3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3ee:	f003 0310 	and.w	r3, r3, #16
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d118      	bne.n	801d428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d3fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801d3fe:	f023 0302 	bic.w	r3, r3, #2
 801d402:	f043 0202 	orr.w	r2, r3, #2
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801d40a:	6878      	ldr	r0, [r7, #4]
 801d40c:	f000 fb86 	bl	801db1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	2200      	movs	r2, #0
 801d414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d41a:	f023 0303 	bic.w	r3, r3, #3
 801d41e:	f043 0201 	orr.w	r2, r3, #1
 801d422:	687b      	ldr	r3, [r7, #4]
 801d424:	641a      	str	r2, [r3, #64]	; 0x40
 801d426:	e001      	b.n	801d42c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801d428:	2301      	movs	r3, #1
 801d42a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	2200      	movs	r2, #0
 801d430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 801d434:	7bfb      	ldrb	r3, [r7, #15]
}
 801d436:	4618      	mov	r0, r3
 801d438:	3710      	adds	r7, #16
 801d43a:	46bd      	mov	sp, r7
 801d43c:	bd80      	pop	{r7, pc}

0801d43e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 801d43e:	b580      	push	{r7, lr}
 801d440:	b084      	sub	sp, #16
 801d442:	af00      	add	r7, sp, #0
 801d444:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 801d446:	2300      	movs	r3, #0
 801d448:	60fb      	str	r3, [r7, #12]
 801d44a:	2300      	movs	r3, #0
 801d44c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	681b      	ldr	r3, [r3, #0]
 801d454:	f003 0302 	and.w	r3, r3, #2
 801d458:	2b02      	cmp	r3, #2
 801d45a:	bf0c      	ite	eq
 801d45c:	2301      	moveq	r3, #1
 801d45e:	2300      	movne	r3, #0
 801d460:	b2db      	uxtb	r3, r3
 801d462:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	685b      	ldr	r3, [r3, #4]
 801d46a:	f003 0320 	and.w	r3, r3, #32
 801d46e:	2b20      	cmp	r3, #32
 801d470:	bf0c      	ite	eq
 801d472:	2301      	moveq	r3, #1
 801d474:	2300      	movne	r3, #0
 801d476:	b2db      	uxtb	r3, r3
 801d478:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d049      	beq.n	801d514 <HAL_ADC_IRQHandler+0xd6>
 801d480:	68bb      	ldr	r3, [r7, #8]
 801d482:	2b00      	cmp	r3, #0
 801d484:	d046      	beq.n	801d514 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d486:	687b      	ldr	r3, [r7, #4]
 801d488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d48a:	f003 0310 	and.w	r3, r3, #16
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d105      	bne.n	801d49e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801d49a:	687b      	ldr	r3, [r7, #4]
 801d49c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	689b      	ldr	r3, [r3, #8]
 801d4a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d12b      	bne.n	801d504 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d127      	bne.n	801d504 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d006      	beq.n	801d4d0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	689b      	ldr	r3, [r3, #8]
 801d4c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d119      	bne.n	801d504 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	685a      	ldr	r2, [r3, #4]
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	f022 0220 	bic.w	r2, r2, #32
 801d4de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d105      	bne.n	801d504 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4fc:	f043 0201 	orr.w	r2, r3, #1
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801d504:	6878      	ldr	r0, [r7, #4]
 801d506:	f000 f9af 	bl	801d868 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	f06f 0212 	mvn.w	r2, #18
 801d512:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	f003 0304 	and.w	r3, r3, #4
 801d51e:	2b04      	cmp	r3, #4
 801d520:	bf0c      	ite	eq
 801d522:	2301      	moveq	r3, #1
 801d524:	2300      	movne	r3, #0
 801d526:	b2db      	uxtb	r3, r3
 801d528:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	685b      	ldr	r3, [r3, #4]
 801d530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d534:	2b80      	cmp	r3, #128	; 0x80
 801d536:	bf0c      	ite	eq
 801d538:	2301      	moveq	r3, #1
 801d53a:	2300      	movne	r3, #0
 801d53c:	b2db      	uxtb	r3, r3
 801d53e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d057      	beq.n	801d5f6 <HAL_ADC_IRQHandler+0x1b8>
 801d546:	68bb      	ldr	r3, [r7, #8]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d054      	beq.n	801d5f6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d550:	f003 0310 	and.w	r3, r3, #16
 801d554:	2b00      	cmp	r3, #0
 801d556:	d105      	bne.n	801d564 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d55c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	689b      	ldr	r3, [r3, #8]
 801d56a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d139      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d578:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d006      	beq.n	801d58e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	689b      	ldr	r3, [r3, #8]
 801d586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d12b      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	685b      	ldr	r3, [r3, #4]
 801d594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d124      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	689b      	ldr	r3, [r3, #8]
 801d5a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d11d      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d119      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	685a      	ldr	r2, [r3, #4]
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d5c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	d105      	bne.n	801d5e6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5de:	f043 0201 	orr.w	r2, r3, #1
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801d5e6:	6878      	ldr	r0, [r7, #4]
 801d5e8:	f000 fc16 	bl	801de18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	f06f 020c 	mvn.w	r2, #12
 801d5f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	f003 0301 	and.w	r3, r3, #1
 801d600:	2b01      	cmp	r3, #1
 801d602:	bf0c      	ite	eq
 801d604:	2301      	moveq	r3, #1
 801d606:	2300      	movne	r3, #0
 801d608:	b2db      	uxtb	r3, r3
 801d60a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	685b      	ldr	r3, [r3, #4]
 801d612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d616:	2b40      	cmp	r3, #64	; 0x40
 801d618:	bf0c      	ite	eq
 801d61a:	2301      	moveq	r3, #1
 801d61c:	2300      	movne	r3, #0
 801d61e:	b2db      	uxtb	r3, r3
 801d620:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	2b00      	cmp	r3, #0
 801d626:	d017      	beq.n	801d658 <HAL_ADC_IRQHandler+0x21a>
 801d628:	68bb      	ldr	r3, [r7, #8]
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d014      	beq.n	801d658 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	f003 0301 	and.w	r3, r3, #1
 801d638:	2b01      	cmp	r3, #1
 801d63a:	d10d      	bne.n	801d658 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801d644:	687b      	ldr	r3, [r7, #4]
 801d646:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 801d648:	6878      	ldr	r0, [r7, #4]
 801d64a:	f000 f921 	bl	801d890 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 801d64e:	687b      	ldr	r3, [r7, #4]
 801d650:	681b      	ldr	r3, [r3, #0]
 801d652:	f06f 0201 	mvn.w	r2, #1
 801d656:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	f003 0320 	and.w	r3, r3, #32
 801d662:	2b20      	cmp	r3, #32
 801d664:	bf0c      	ite	eq
 801d666:	2301      	moveq	r3, #1
 801d668:	2300      	movne	r3, #0
 801d66a:	b2db      	uxtb	r3, r3
 801d66c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	681b      	ldr	r3, [r3, #0]
 801d672:	685b      	ldr	r3, [r3, #4]
 801d674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d67c:	bf0c      	ite	eq
 801d67e:	2301      	moveq	r3, #1
 801d680:	2300      	movne	r3, #0
 801d682:	b2db      	uxtb	r3, r3
 801d684:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d015      	beq.n	801d6b8 <HAL_ADC_IRQHandler+0x27a>
 801d68c:	68bb      	ldr	r3, [r7, #8]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d012      	beq.n	801d6b8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d696:	f043 0202 	orr.w	r2, r3, #2
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	f06f 0220 	mvn.w	r2, #32
 801d6a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801d6a8:	6878      	ldr	r0, [r7, #4]
 801d6aa:	f000 f8fb 	bl	801d8a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	f06f 0220 	mvn.w	r2, #32
 801d6b6:	601a      	str	r2, [r3, #0]
  }
}
 801d6b8:	bf00      	nop
 801d6ba:	3710      	adds	r7, #16
 801d6bc:	46bd      	mov	sp, r7
 801d6be:	bd80      	pop	{r7, pc}

0801d6c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801d6c0:	b580      	push	{r7, lr}
 801d6c2:	b086      	sub	sp, #24
 801d6c4:	af00      	add	r7, sp, #0
 801d6c6:	60f8      	str	r0, [r7, #12]
 801d6c8:	60b9      	str	r1, [r7, #8]
 801d6ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 801d6cc:	2300      	movs	r3, #0
 801d6ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d101      	bne.n	801d6de <HAL_ADC_Start_DMA+0x1e>
 801d6da:	2302      	movs	r3, #2
 801d6dc:	e0b1      	b.n	801d842 <HAL_ADC_Start_DMA+0x182>
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	2201      	movs	r2, #1
 801d6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	689b      	ldr	r3, [r3, #8]
 801d6ec:	f003 0301 	and.w	r3, r3, #1
 801d6f0:	2b01      	cmp	r3, #1
 801d6f2:	d018      	beq.n	801d726 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	681b      	ldr	r3, [r3, #0]
 801d6f8:	689a      	ldr	r2, [r3, #8]
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	f042 0201 	orr.w	r2, r2, #1
 801d702:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801d704:	4b51      	ldr	r3, [pc, #324]	; (801d84c <HAL_ADC_Start_DMA+0x18c>)
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	4a51      	ldr	r2, [pc, #324]	; (801d850 <HAL_ADC_Start_DMA+0x190>)
 801d70a:	fba2 2303 	umull	r2, r3, r2, r3
 801d70e:	0c9a      	lsrs	r2, r3, #18
 801d710:	4613      	mov	r3, r2
 801d712:	005b      	lsls	r3, r3, #1
 801d714:	4413      	add	r3, r2
 801d716:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801d718:	e002      	b.n	801d720 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 801d71a:	693b      	ldr	r3, [r7, #16]
 801d71c:	3b01      	subs	r3, #1
 801d71e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 801d720:	693b      	ldr	r3, [r7, #16]
 801d722:	2b00      	cmp	r3, #0
 801d724:	d1f9      	bne.n	801d71a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801d726:	68fb      	ldr	r3, [r7, #12]
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	689b      	ldr	r3, [r3, #8]
 801d72c:	f003 0301 	and.w	r3, r3, #1
 801d730:	2b01      	cmp	r3, #1
 801d732:	f040 8085 	bne.w	801d840 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d73a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 801d73e:	f023 0301 	bic.w	r3, r3, #1
 801d742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801d746:	68fb      	ldr	r3, [r7, #12]
 801d748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	685b      	ldr	r3, [r3, #4]
 801d750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d754:	2b00      	cmp	r3, #0
 801d756:	d007      	beq.n	801d768 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d75c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801d760:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801d764:	68fb      	ldr	r3, [r7, #12]
 801d766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d76c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d774:	d106      	bne.n	801d784 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d77a:	f023 0206 	bic.w	r2, r3, #6
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	645a      	str	r2, [r3, #68]	; 0x44
 801d782:	e002      	b.n	801d78a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	2200      	movs	r2, #0
 801d788:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	2200      	movs	r2, #0
 801d78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801d792:	4b30      	ldr	r3, [pc, #192]	; (801d854 <HAL_ADC_Start_DMA+0x194>)
 801d794:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801d796:	68fb      	ldr	r3, [r7, #12]
 801d798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d79a:	4a2f      	ldr	r2, [pc, #188]	; (801d858 <HAL_ADC_Start_DMA+0x198>)
 801d79c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7a2:	4a2e      	ldr	r2, [pc, #184]	; (801d85c <HAL_ADC_Start_DMA+0x19c>)
 801d7a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801d7a6:	68fb      	ldr	r3, [r7, #12]
 801d7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7aa:	4a2d      	ldr	r2, [pc, #180]	; (801d860 <HAL_ADC_Start_DMA+0x1a0>)
 801d7ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801d7b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801d7b8:	68fb      	ldr	r3, [r7, #12]
 801d7ba:	681b      	ldr	r3, [r3, #0]
 801d7bc:	685a      	ldr	r2, [r3, #4]
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801d7c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801d7c8:	68fb      	ldr	r3, [r7, #12]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	689a      	ldr	r2, [r3, #8]
 801d7ce:	68fb      	ldr	r3, [r7, #12]
 801d7d0:	681b      	ldr	r3, [r3, #0]
 801d7d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801d7d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801d7dc:	68fb      	ldr	r3, [r7, #12]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	334c      	adds	r3, #76	; 0x4c
 801d7e2:	4619      	mov	r1, r3
 801d7e4:	68ba      	ldr	r2, [r7, #8]
 801d7e6:	687b      	ldr	r3, [r7, #4]
 801d7e8:	f000 fd70 	bl	801e2cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 801d7ec:	697b      	ldr	r3, [r7, #20]
 801d7ee:	685b      	ldr	r3, [r3, #4]
 801d7f0:	f003 031f 	and.w	r3, r3, #31
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d10f      	bne.n	801d818 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 801d7f8:	68fb      	ldr	r3, [r7, #12]
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	689b      	ldr	r3, [r3, #8]
 801d7fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d802:	2b00      	cmp	r3, #0
 801d804:	d11c      	bne.n	801d840 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	689a      	ldr	r2, [r3, #8]
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801d814:	609a      	str	r2, [r3, #8]
 801d816:	e013      	b.n	801d840 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	4a11      	ldr	r2, [pc, #68]	; (801d864 <HAL_ADC_Start_DMA+0x1a4>)
 801d81e:	4293      	cmp	r3, r2
 801d820:	d10e      	bne.n	801d840 <HAL_ADC_Start_DMA+0x180>
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	689b      	ldr	r3, [r3, #8]
 801d828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	d107      	bne.n	801d840 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	689a      	ldr	r2, [r3, #8]
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	681b      	ldr	r3, [r3, #0]
 801d83a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801d83e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 801d840:	2300      	movs	r3, #0
}
 801d842:	4618      	mov	r0, r3
 801d844:	3718      	adds	r7, #24
 801d846:	46bd      	mov	sp, r7
 801d848:	bd80      	pop	{r7, pc}
 801d84a:	bf00      	nop
 801d84c:	20000000 	.word	0x20000000
 801d850:	431bde83 	.word	0x431bde83
 801d854:	40012300 	.word	0x40012300
 801d858:	0801dd15 	.word	0x0801dd15
 801d85c:	0801ddcf 	.word	0x0801ddcf
 801d860:	0801ddeb 	.word	0x0801ddeb
 801d864:	40012000 	.word	0x40012000

0801d868 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d868:	b480      	push	{r7}
 801d86a:	b083      	sub	sp, #12
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 801d870:	bf00      	nop
 801d872:	370c      	adds	r7, #12
 801d874:	46bd      	mov	sp, r7
 801d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d87a:	4770      	bx	lr

0801d87c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d87c:	b480      	push	{r7}
 801d87e:	b083      	sub	sp, #12
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 801d884:	bf00      	nop
 801d886:	370c      	adds	r7, #12
 801d888:	46bd      	mov	sp, r7
 801d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d88e:	4770      	bx	lr

0801d890 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 801d890:	b480      	push	{r7}
 801d892:	b083      	sub	sp, #12
 801d894:	af00      	add	r7, sp, #0
 801d896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 801d898:	bf00      	nop
 801d89a:	370c      	adds	r7, #12
 801d89c:	46bd      	mov	sp, r7
 801d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a2:	4770      	bx	lr

0801d8a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801d8a4:	b480      	push	{r7}
 801d8a6:	b083      	sub	sp, #12
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801d8ac:	bf00      	nop
 801d8ae:	370c      	adds	r7, #12
 801d8b0:	46bd      	mov	sp, r7
 801d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8b6:	4770      	bx	lr

0801d8b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 801d8b8:	b480      	push	{r7}
 801d8ba:	b085      	sub	sp, #20
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
 801d8c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d8cc:	2b01      	cmp	r3, #1
 801d8ce:	d101      	bne.n	801d8d4 <HAL_ADC_ConfigChannel+0x1c>
 801d8d0:	2302      	movs	r3, #2
 801d8d2:	e113      	b.n	801dafc <HAL_ADC_ConfigChannel+0x244>
 801d8d4:	687b      	ldr	r3, [r7, #4]
 801d8d6:	2201      	movs	r2, #1
 801d8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801d8dc:	683b      	ldr	r3, [r7, #0]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	2b09      	cmp	r3, #9
 801d8e2:	d925      	bls.n	801d930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	68d9      	ldr	r1, [r3, #12]
 801d8ea:	683b      	ldr	r3, [r7, #0]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	b29b      	uxth	r3, r3
 801d8f0:	461a      	mov	r2, r3
 801d8f2:	4613      	mov	r3, r2
 801d8f4:	005b      	lsls	r3, r3, #1
 801d8f6:	4413      	add	r3, r2
 801d8f8:	3b1e      	subs	r3, #30
 801d8fa:	2207      	movs	r2, #7
 801d8fc:	fa02 f303 	lsl.w	r3, r2, r3
 801d900:	43da      	mvns	r2, r3
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	400a      	ands	r2, r1
 801d908:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	68d9      	ldr	r1, [r3, #12]
 801d910:	683b      	ldr	r3, [r7, #0]
 801d912:	689a      	ldr	r2, [r3, #8]
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	b29b      	uxth	r3, r3
 801d91a:	4618      	mov	r0, r3
 801d91c:	4603      	mov	r3, r0
 801d91e:	005b      	lsls	r3, r3, #1
 801d920:	4403      	add	r3, r0
 801d922:	3b1e      	subs	r3, #30
 801d924:	409a      	lsls	r2, r3
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	430a      	orrs	r2, r1
 801d92c:	60da      	str	r2, [r3, #12]
 801d92e:	e022      	b.n	801d976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	6919      	ldr	r1, [r3, #16]
 801d936:	683b      	ldr	r3, [r7, #0]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	b29b      	uxth	r3, r3
 801d93c:	461a      	mov	r2, r3
 801d93e:	4613      	mov	r3, r2
 801d940:	005b      	lsls	r3, r3, #1
 801d942:	4413      	add	r3, r2
 801d944:	2207      	movs	r2, #7
 801d946:	fa02 f303 	lsl.w	r3, r2, r3
 801d94a:	43da      	mvns	r2, r3
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	681b      	ldr	r3, [r3, #0]
 801d950:	400a      	ands	r2, r1
 801d952:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	6919      	ldr	r1, [r3, #16]
 801d95a:	683b      	ldr	r3, [r7, #0]
 801d95c:	689a      	ldr	r2, [r3, #8]
 801d95e:	683b      	ldr	r3, [r7, #0]
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	b29b      	uxth	r3, r3
 801d964:	4618      	mov	r0, r3
 801d966:	4603      	mov	r3, r0
 801d968:	005b      	lsls	r3, r3, #1
 801d96a:	4403      	add	r3, r0
 801d96c:	409a      	lsls	r2, r3
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	430a      	orrs	r2, r1
 801d974:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801d976:	683b      	ldr	r3, [r7, #0]
 801d978:	685b      	ldr	r3, [r3, #4]
 801d97a:	2b06      	cmp	r3, #6
 801d97c:	d824      	bhi.n	801d9c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	685a      	ldr	r2, [r3, #4]
 801d988:	4613      	mov	r3, r2
 801d98a:	009b      	lsls	r3, r3, #2
 801d98c:	4413      	add	r3, r2
 801d98e:	3b05      	subs	r3, #5
 801d990:	221f      	movs	r2, #31
 801d992:	fa02 f303 	lsl.w	r3, r2, r3
 801d996:	43da      	mvns	r2, r3
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	400a      	ands	r2, r1
 801d99e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801d9a6:	683b      	ldr	r3, [r7, #0]
 801d9a8:	681b      	ldr	r3, [r3, #0]
 801d9aa:	b29b      	uxth	r3, r3
 801d9ac:	4618      	mov	r0, r3
 801d9ae:	683b      	ldr	r3, [r7, #0]
 801d9b0:	685a      	ldr	r2, [r3, #4]
 801d9b2:	4613      	mov	r3, r2
 801d9b4:	009b      	lsls	r3, r3, #2
 801d9b6:	4413      	add	r3, r2
 801d9b8:	3b05      	subs	r3, #5
 801d9ba:	fa00 f203 	lsl.w	r2, r0, r3
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	430a      	orrs	r2, r1
 801d9c4:	635a      	str	r2, [r3, #52]	; 0x34
 801d9c6:	e04c      	b.n	801da62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 801d9c8:	683b      	ldr	r3, [r7, #0]
 801d9ca:	685b      	ldr	r3, [r3, #4]
 801d9cc:	2b0c      	cmp	r3, #12
 801d9ce:	d824      	bhi.n	801da1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801d9d6:	683b      	ldr	r3, [r7, #0]
 801d9d8:	685a      	ldr	r2, [r3, #4]
 801d9da:	4613      	mov	r3, r2
 801d9dc:	009b      	lsls	r3, r3, #2
 801d9de:	4413      	add	r3, r2
 801d9e0:	3b23      	subs	r3, #35	; 0x23
 801d9e2:	221f      	movs	r2, #31
 801d9e4:	fa02 f303 	lsl.w	r3, r2, r3
 801d9e8:	43da      	mvns	r2, r3
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	400a      	ands	r2, r1
 801d9f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	681b      	ldr	r3, [r3, #0]
 801d9f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	b29b      	uxth	r3, r3
 801d9fe:	4618      	mov	r0, r3
 801da00:	683b      	ldr	r3, [r7, #0]
 801da02:	685a      	ldr	r2, [r3, #4]
 801da04:	4613      	mov	r3, r2
 801da06:	009b      	lsls	r3, r3, #2
 801da08:	4413      	add	r3, r2
 801da0a:	3b23      	subs	r3, #35	; 0x23
 801da0c:	fa00 f203 	lsl.w	r2, r0, r3
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	430a      	orrs	r2, r1
 801da16:	631a      	str	r2, [r3, #48]	; 0x30
 801da18:	e023      	b.n	801da62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801da20:	683b      	ldr	r3, [r7, #0]
 801da22:	685a      	ldr	r2, [r3, #4]
 801da24:	4613      	mov	r3, r2
 801da26:	009b      	lsls	r3, r3, #2
 801da28:	4413      	add	r3, r2
 801da2a:	3b41      	subs	r3, #65	; 0x41
 801da2c:	221f      	movs	r2, #31
 801da2e:	fa02 f303 	lsl.w	r3, r2, r3
 801da32:	43da      	mvns	r2, r3
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	400a      	ands	r2, r1
 801da3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801da42:	683b      	ldr	r3, [r7, #0]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	b29b      	uxth	r3, r3
 801da48:	4618      	mov	r0, r3
 801da4a:	683b      	ldr	r3, [r7, #0]
 801da4c:	685a      	ldr	r2, [r3, #4]
 801da4e:	4613      	mov	r3, r2
 801da50:	009b      	lsls	r3, r3, #2
 801da52:	4413      	add	r3, r2
 801da54:	3b41      	subs	r3, #65	; 0x41
 801da56:	fa00 f203 	lsl.w	r2, r0, r3
 801da5a:	687b      	ldr	r3, [r7, #4]
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	430a      	orrs	r2, r1
 801da60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801da62:	4b29      	ldr	r3, [pc, #164]	; (801db08 <HAL_ADC_ConfigChannel+0x250>)
 801da64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	4a28      	ldr	r2, [pc, #160]	; (801db0c <HAL_ADC_ConfigChannel+0x254>)
 801da6c:	4293      	cmp	r3, r2
 801da6e:	d10f      	bne.n	801da90 <HAL_ADC_ConfigChannel+0x1d8>
 801da70:	683b      	ldr	r3, [r7, #0]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	2b12      	cmp	r3, #18
 801da76:	d10b      	bne.n	801da90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	685b      	ldr	r3, [r3, #4]
 801da7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	685b      	ldr	r3, [r3, #4]
 801da88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	4a1d      	ldr	r2, [pc, #116]	; (801db0c <HAL_ADC_ConfigChannel+0x254>)
 801da96:	4293      	cmp	r3, r2
 801da98:	d12b      	bne.n	801daf2 <HAL_ADC_ConfigChannel+0x23a>
 801da9a:	683b      	ldr	r3, [r7, #0]
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	4a1c      	ldr	r2, [pc, #112]	; (801db10 <HAL_ADC_ConfigChannel+0x258>)
 801daa0:	4293      	cmp	r3, r2
 801daa2:	d003      	beq.n	801daac <HAL_ADC_ConfigChannel+0x1f4>
 801daa4:	683b      	ldr	r3, [r7, #0]
 801daa6:	681b      	ldr	r3, [r3, #0]
 801daa8:	2b11      	cmp	r3, #17
 801daaa:	d122      	bne.n	801daf2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 801daac:	68fb      	ldr	r3, [r7, #12]
 801daae:	685b      	ldr	r3, [r3, #4]
 801dab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	685b      	ldr	r3, [r3, #4]
 801dabc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 801dac4:	683b      	ldr	r3, [r7, #0]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	4a11      	ldr	r2, [pc, #68]	; (801db10 <HAL_ADC_ConfigChannel+0x258>)
 801daca:	4293      	cmp	r3, r2
 801dacc:	d111      	bne.n	801daf2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801dace:	4b11      	ldr	r3, [pc, #68]	; (801db14 <HAL_ADC_ConfigChannel+0x25c>)
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	4a11      	ldr	r2, [pc, #68]	; (801db18 <HAL_ADC_ConfigChannel+0x260>)
 801dad4:	fba2 2303 	umull	r2, r3, r2, r3
 801dad8:	0c9a      	lsrs	r2, r3, #18
 801dada:	4613      	mov	r3, r2
 801dadc:	009b      	lsls	r3, r3, #2
 801dade:	4413      	add	r3, r2
 801dae0:	005b      	lsls	r3, r3, #1
 801dae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801dae4:	e002      	b.n	801daec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 801dae6:	68bb      	ldr	r3, [r7, #8]
 801dae8:	3b01      	subs	r3, #1
 801daea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801daec:	68bb      	ldr	r3, [r7, #8]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d1f9      	bne.n	801dae6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	2200      	movs	r2, #0
 801daf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801dafa:	2300      	movs	r3, #0
}
 801dafc:	4618      	mov	r0, r3
 801dafe:	3714      	adds	r7, #20
 801db00:	46bd      	mov	sp, r7
 801db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db06:	4770      	bx	lr
 801db08:	40012300 	.word	0x40012300
 801db0c:	40012000 	.word	0x40012000
 801db10:	10000012 	.word	0x10000012
 801db14:	20000000 	.word	0x20000000
 801db18:	431bde83 	.word	0x431bde83

0801db1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801db1c:	b480      	push	{r7}
 801db1e:	b085      	sub	sp, #20
 801db20:	af00      	add	r7, sp, #0
 801db22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801db24:	4b79      	ldr	r3, [pc, #484]	; (801dd0c <ADC_Init+0x1f0>)
 801db26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	685a      	ldr	r2, [r3, #4]
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	685b      	ldr	r3, [r3, #4]
 801db3c:	431a      	orrs	r2, r3
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	685a      	ldr	r2, [r3, #4]
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801db50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	6859      	ldr	r1, [r3, #4]
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	691b      	ldr	r3, [r3, #16]
 801db5c:	021a      	lsls	r2, r3, #8
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	430a      	orrs	r2, r1
 801db64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	685a      	ldr	r2, [r3, #4]
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801db74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	6859      	ldr	r1, [r3, #4]
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	689a      	ldr	r2, [r3, #8]
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	430a      	orrs	r2, r1
 801db86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 801db88:	687b      	ldr	r3, [r7, #4]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	689a      	ldr	r2, [r3, #8]
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801db96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	6899      	ldr	r1, [r3, #8]
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	68da      	ldr	r2, [r3, #12]
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	430a      	orrs	r2, r1
 801dba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dbae:	4a58      	ldr	r2, [pc, #352]	; (801dd10 <ADC_Init+0x1f4>)
 801dbb0:	4293      	cmp	r3, r2
 801dbb2:	d022      	beq.n	801dbfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	689a      	ldr	r2, [r3, #8]
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	681b      	ldr	r3, [r3, #0]
 801dbbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801dbc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	6899      	ldr	r1, [r3, #8]
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	430a      	orrs	r2, r1
 801dbd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	689a      	ldr	r2, [r3, #8]
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801dbe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	6899      	ldr	r1, [r3, #8]
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	430a      	orrs	r2, r1
 801dbf6:	609a      	str	r2, [r3, #8]
 801dbf8:	e00f      	b.n	801dc1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	689a      	ldr	r2, [r3, #8]
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	681b      	ldr	r3, [r3, #0]
 801dc04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801dc08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801dc0a:	687b      	ldr	r3, [r7, #4]
 801dc0c:	681b      	ldr	r3, [r3, #0]
 801dc0e:	689a      	ldr	r2, [r3, #8]
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801dc18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	689a      	ldr	r2, [r3, #8]
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	f022 0202 	bic.w	r2, r2, #2
 801dc28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	6899      	ldr	r1, [r3, #8]
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	7e1b      	ldrb	r3, [r3, #24]
 801dc34:	005a      	lsls	r2, r3, #1
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	430a      	orrs	r2, r1
 801dc3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	f893 3020 	ldrb.w	r3, [r3, #32]
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d01b      	beq.n	801dc80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	685a      	ldr	r2, [r3, #4]
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801dc56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	685a      	ldr	r2, [r3, #4]
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	681b      	ldr	r3, [r3, #0]
 801dc62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801dc66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	6859      	ldr	r1, [r3, #4]
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dc72:	3b01      	subs	r3, #1
 801dc74:	035a      	lsls	r2, r3, #13
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	430a      	orrs	r2, r1
 801dc7c:	605a      	str	r2, [r3, #4]
 801dc7e:	e007      	b.n	801dc90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	685a      	ldr	r2, [r3, #4]
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801dc8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801dc9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	69db      	ldr	r3, [r3, #28]
 801dcaa:	3b01      	subs	r3, #1
 801dcac:	051a      	lsls	r2, r3, #20
 801dcae:	687b      	ldr	r3, [r7, #4]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	430a      	orrs	r2, r1
 801dcb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	689a      	ldr	r2, [r3, #8]
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801dcc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	6899      	ldr	r1, [r3, #8]
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dcd2:	025a      	lsls	r2, r3, #9
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	430a      	orrs	r2, r1
 801dcda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	689a      	ldr	r2, [r3, #8]
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801dcea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	6899      	ldr	r1, [r3, #8]
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	695b      	ldr	r3, [r3, #20]
 801dcf6:	029a      	lsls	r2, r3, #10
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	430a      	orrs	r2, r1
 801dcfe:	609a      	str	r2, [r3, #8]
}
 801dd00:	bf00      	nop
 801dd02:	3714      	adds	r7, #20
 801dd04:	46bd      	mov	sp, r7
 801dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0a:	4770      	bx	lr
 801dd0c:	40012300 	.word	0x40012300
 801dd10:	0f000001 	.word	0x0f000001

0801dd14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b084      	sub	sp, #16
 801dd18:	af00      	add	r7, sp, #0
 801dd1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d13c      	bne.n	801dda8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801dd36:	68fb      	ldr	r3, [r7, #12]
 801dd38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	689b      	ldr	r3, [r3, #8]
 801dd40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d12b      	bne.n	801dda0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801dd4c:	2b00      	cmp	r3, #0
 801dd4e:	d127      	bne.n	801dda0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d006      	beq.n	801dd6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	689b      	ldr	r3, [r3, #8]
 801dd64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d119      	bne.n	801dda0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801dd6c:	68fb      	ldr	r3, [r7, #12]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	685a      	ldr	r2, [r3, #4]
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	f022 0220 	bic.w	r2, r2, #32
 801dd7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 801dd7c:	68fb      	ldr	r3, [r7, #12]
 801dd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d105      	bne.n	801dda0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd98:	f043 0201 	orr.w	r2, r3, #1
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801dda0:	68f8      	ldr	r0, [r7, #12]
 801dda2:	f7ff fd61 	bl	801d868 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801dda6:	e00e      	b.n	801ddc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddac:	f003 0310 	and.w	r3, r3, #16
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d003      	beq.n	801ddbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801ddb4:	68f8      	ldr	r0, [r7, #12]
 801ddb6:	f7ff fd75 	bl	801d8a4 <HAL_ADC_ErrorCallback>
}
 801ddba:	e004      	b.n	801ddc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ddc2:	6878      	ldr	r0, [r7, #4]
 801ddc4:	4798      	blx	r3
}
 801ddc6:	bf00      	nop
 801ddc8:	3710      	adds	r7, #16
 801ddca:	46bd      	mov	sp, r7
 801ddcc:	bd80      	pop	{r7, pc}

0801ddce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 801ddce:	b580      	push	{r7, lr}
 801ddd0:	b084      	sub	sp, #16
 801ddd2:	af00      	add	r7, sp, #0
 801ddd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801dddc:	68f8      	ldr	r0, [r7, #12]
 801ddde:	f7ff fd4d 	bl	801d87c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801dde2:	bf00      	nop
 801dde4:	3710      	adds	r7, #16
 801dde6:	46bd      	mov	sp, r7
 801dde8:	bd80      	pop	{r7, pc}

0801ddea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 801ddea:	b580      	push	{r7, lr}
 801ddec:	b084      	sub	sp, #16
 801ddee:	af00      	add	r7, sp, #0
 801ddf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddf6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	2240      	movs	r2, #64	; 0x40
 801ddfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801de02:	f043 0204 	orr.w	r2, r3, #4
 801de06:	68fb      	ldr	r3, [r7, #12]
 801de08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801de0a:	68f8      	ldr	r0, [r7, #12]
 801de0c:	f7ff fd4a 	bl	801d8a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801de10:	bf00      	nop
 801de12:	3710      	adds	r7, #16
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}

0801de18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801de18:	b480      	push	{r7}
 801de1a:	b083      	sub	sp, #12
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 801de20:	bf00      	nop
 801de22:	370c      	adds	r7, #12
 801de24:	46bd      	mov	sp, r7
 801de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de2a:	4770      	bx	lr

0801de2c <__NVIC_SetPriorityGrouping>:
{
 801de2c:	b480      	push	{r7}
 801de2e:	b085      	sub	sp, #20
 801de30:	af00      	add	r7, sp, #0
 801de32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	f003 0307 	and.w	r3, r3, #7
 801de3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801de3c:	4b0c      	ldr	r3, [pc, #48]	; (801de70 <__NVIC_SetPriorityGrouping+0x44>)
 801de3e:	68db      	ldr	r3, [r3, #12]
 801de40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801de42:	68ba      	ldr	r2, [r7, #8]
 801de44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801de48:	4013      	ands	r3, r2
 801de4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801de50:	68bb      	ldr	r3, [r7, #8]
 801de52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801de54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801de58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801de5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801de5e:	4a04      	ldr	r2, [pc, #16]	; (801de70 <__NVIC_SetPriorityGrouping+0x44>)
 801de60:	68bb      	ldr	r3, [r7, #8]
 801de62:	60d3      	str	r3, [r2, #12]
}
 801de64:	bf00      	nop
 801de66:	3714      	adds	r7, #20
 801de68:	46bd      	mov	sp, r7
 801de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6e:	4770      	bx	lr
 801de70:	e000ed00 	.word	0xe000ed00

0801de74 <__NVIC_GetPriorityGrouping>:
{
 801de74:	b480      	push	{r7}
 801de76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801de78:	4b04      	ldr	r3, [pc, #16]	; (801de8c <__NVIC_GetPriorityGrouping+0x18>)
 801de7a:	68db      	ldr	r3, [r3, #12]
 801de7c:	0a1b      	lsrs	r3, r3, #8
 801de7e:	f003 0307 	and.w	r3, r3, #7
}
 801de82:	4618      	mov	r0, r3
 801de84:	46bd      	mov	sp, r7
 801de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8a:	4770      	bx	lr
 801de8c:	e000ed00 	.word	0xe000ed00

0801de90 <__NVIC_EnableIRQ>:
{
 801de90:	b480      	push	{r7}
 801de92:	b083      	sub	sp, #12
 801de94:	af00      	add	r7, sp, #0
 801de96:	4603      	mov	r3, r0
 801de98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801de9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	db0b      	blt.n	801deba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801dea2:	79fb      	ldrb	r3, [r7, #7]
 801dea4:	f003 021f 	and.w	r2, r3, #31
 801dea8:	4907      	ldr	r1, [pc, #28]	; (801dec8 <__NVIC_EnableIRQ+0x38>)
 801deaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801deae:	095b      	lsrs	r3, r3, #5
 801deb0:	2001      	movs	r0, #1
 801deb2:	fa00 f202 	lsl.w	r2, r0, r2
 801deb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801deba:	bf00      	nop
 801debc:	370c      	adds	r7, #12
 801debe:	46bd      	mov	sp, r7
 801dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dec4:	4770      	bx	lr
 801dec6:	bf00      	nop
 801dec8:	e000e100 	.word	0xe000e100

0801decc <__NVIC_DisableIRQ>:
{
 801decc:	b480      	push	{r7}
 801dece:	b083      	sub	sp, #12
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	4603      	mov	r3, r0
 801ded4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ded6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	db12      	blt.n	801df04 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801dede:	79fb      	ldrb	r3, [r7, #7]
 801dee0:	f003 021f 	and.w	r2, r3, #31
 801dee4:	490a      	ldr	r1, [pc, #40]	; (801df10 <__NVIC_DisableIRQ+0x44>)
 801dee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801deea:	095b      	lsrs	r3, r3, #5
 801deec:	2001      	movs	r0, #1
 801deee:	fa00 f202 	lsl.w	r2, r0, r2
 801def2:	3320      	adds	r3, #32
 801def4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801def8:	f3bf 8f4f 	dsb	sy
}
 801defc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801defe:	f3bf 8f6f 	isb	sy
}
 801df02:	bf00      	nop
}
 801df04:	bf00      	nop
 801df06:	370c      	adds	r7, #12
 801df08:	46bd      	mov	sp, r7
 801df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df0e:	4770      	bx	lr
 801df10:	e000e100 	.word	0xe000e100

0801df14 <__NVIC_SetPriority>:
{
 801df14:	b480      	push	{r7}
 801df16:	b083      	sub	sp, #12
 801df18:	af00      	add	r7, sp, #0
 801df1a:	4603      	mov	r3, r0
 801df1c:	6039      	str	r1, [r7, #0]
 801df1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801df20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df24:	2b00      	cmp	r3, #0
 801df26:	db0a      	blt.n	801df3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801df28:	683b      	ldr	r3, [r7, #0]
 801df2a:	b2da      	uxtb	r2, r3
 801df2c:	490c      	ldr	r1, [pc, #48]	; (801df60 <__NVIC_SetPriority+0x4c>)
 801df2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df32:	0112      	lsls	r2, r2, #4
 801df34:	b2d2      	uxtb	r2, r2
 801df36:	440b      	add	r3, r1
 801df38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801df3c:	e00a      	b.n	801df54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801df3e:	683b      	ldr	r3, [r7, #0]
 801df40:	b2da      	uxtb	r2, r3
 801df42:	4908      	ldr	r1, [pc, #32]	; (801df64 <__NVIC_SetPriority+0x50>)
 801df44:	79fb      	ldrb	r3, [r7, #7]
 801df46:	f003 030f 	and.w	r3, r3, #15
 801df4a:	3b04      	subs	r3, #4
 801df4c:	0112      	lsls	r2, r2, #4
 801df4e:	b2d2      	uxtb	r2, r2
 801df50:	440b      	add	r3, r1
 801df52:	761a      	strb	r2, [r3, #24]
}
 801df54:	bf00      	nop
 801df56:	370c      	adds	r7, #12
 801df58:	46bd      	mov	sp, r7
 801df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5e:	4770      	bx	lr
 801df60:	e000e100 	.word	0xe000e100
 801df64:	e000ed00 	.word	0xe000ed00

0801df68 <NVIC_EncodePriority>:
{
 801df68:	b480      	push	{r7}
 801df6a:	b089      	sub	sp, #36	; 0x24
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	60f8      	str	r0, [r7, #12]
 801df70:	60b9      	str	r1, [r7, #8]
 801df72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	f003 0307 	and.w	r3, r3, #7
 801df7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801df7c:	69fb      	ldr	r3, [r7, #28]
 801df7e:	f1c3 0307 	rsb	r3, r3, #7
 801df82:	2b04      	cmp	r3, #4
 801df84:	bf28      	it	cs
 801df86:	2304      	movcs	r3, #4
 801df88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801df8a:	69fb      	ldr	r3, [r7, #28]
 801df8c:	3304      	adds	r3, #4
 801df8e:	2b06      	cmp	r3, #6
 801df90:	d902      	bls.n	801df98 <NVIC_EncodePriority+0x30>
 801df92:	69fb      	ldr	r3, [r7, #28]
 801df94:	3b03      	subs	r3, #3
 801df96:	e000      	b.n	801df9a <NVIC_EncodePriority+0x32>
 801df98:	2300      	movs	r3, #0
 801df9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801df9c:	f04f 32ff 	mov.w	r2, #4294967295
 801dfa0:	69bb      	ldr	r3, [r7, #24]
 801dfa2:	fa02 f303 	lsl.w	r3, r2, r3
 801dfa6:	43da      	mvns	r2, r3
 801dfa8:	68bb      	ldr	r3, [r7, #8]
 801dfaa:	401a      	ands	r2, r3
 801dfac:	697b      	ldr	r3, [r7, #20]
 801dfae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801dfb0:	f04f 31ff 	mov.w	r1, #4294967295
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	fa01 f303 	lsl.w	r3, r1, r3
 801dfba:	43d9      	mvns	r1, r3
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801dfc0:	4313      	orrs	r3, r2
}
 801dfc2:	4618      	mov	r0, r3
 801dfc4:	3724      	adds	r7, #36	; 0x24
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfcc:	4770      	bx	lr
	...

0801dfd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	3b01      	subs	r3, #1
 801dfdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801dfe0:	d301      	bcc.n	801dfe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801dfe2:	2301      	movs	r3, #1
 801dfe4:	e00f      	b.n	801e006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801dfe6:	4a0a      	ldr	r2, [pc, #40]	; (801e010 <SysTick_Config+0x40>)
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	3b01      	subs	r3, #1
 801dfec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801dfee:	210f      	movs	r1, #15
 801dff0:	f04f 30ff 	mov.w	r0, #4294967295
 801dff4:	f7ff ff8e 	bl	801df14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801dff8:	4b05      	ldr	r3, [pc, #20]	; (801e010 <SysTick_Config+0x40>)
 801dffa:	2200      	movs	r2, #0
 801dffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801dffe:	4b04      	ldr	r3, [pc, #16]	; (801e010 <SysTick_Config+0x40>)
 801e000:	2207      	movs	r2, #7
 801e002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801e004:	2300      	movs	r3, #0
}
 801e006:	4618      	mov	r0, r3
 801e008:	3708      	adds	r7, #8
 801e00a:	46bd      	mov	sp, r7
 801e00c:	bd80      	pop	{r7, pc}
 801e00e:	bf00      	nop
 801e010:	e000e010 	.word	0xe000e010

0801e014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801e014:	b580      	push	{r7, lr}
 801e016:	b082      	sub	sp, #8
 801e018:	af00      	add	r7, sp, #0
 801e01a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801e01c:	6878      	ldr	r0, [r7, #4]
 801e01e:	f7ff ff05 	bl	801de2c <__NVIC_SetPriorityGrouping>
}
 801e022:	bf00      	nop
 801e024:	3708      	adds	r7, #8
 801e026:	46bd      	mov	sp, r7
 801e028:	bd80      	pop	{r7, pc}

0801e02a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801e02a:	b580      	push	{r7, lr}
 801e02c:	b086      	sub	sp, #24
 801e02e:	af00      	add	r7, sp, #0
 801e030:	4603      	mov	r3, r0
 801e032:	60b9      	str	r1, [r7, #8]
 801e034:	607a      	str	r2, [r7, #4]
 801e036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801e038:	2300      	movs	r3, #0
 801e03a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801e03c:	f7ff ff1a 	bl	801de74 <__NVIC_GetPriorityGrouping>
 801e040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801e042:	687a      	ldr	r2, [r7, #4]
 801e044:	68b9      	ldr	r1, [r7, #8]
 801e046:	6978      	ldr	r0, [r7, #20]
 801e048:	f7ff ff8e 	bl	801df68 <NVIC_EncodePriority>
 801e04c:	4602      	mov	r2, r0
 801e04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e052:	4611      	mov	r1, r2
 801e054:	4618      	mov	r0, r3
 801e056:	f7ff ff5d 	bl	801df14 <__NVIC_SetPriority>
}
 801e05a:	bf00      	nop
 801e05c:	3718      	adds	r7, #24
 801e05e:	46bd      	mov	sp, r7
 801e060:	bd80      	pop	{r7, pc}

0801e062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801e062:	b580      	push	{r7, lr}
 801e064:	b082      	sub	sp, #8
 801e066:	af00      	add	r7, sp, #0
 801e068:	4603      	mov	r3, r0
 801e06a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801e06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e070:	4618      	mov	r0, r3
 801e072:	f7ff ff0d 	bl	801de90 <__NVIC_EnableIRQ>
}
 801e076:	bf00      	nop
 801e078:	3708      	adds	r7, #8
 801e07a:	46bd      	mov	sp, r7
 801e07c:	bd80      	pop	{r7, pc}

0801e07e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801e07e:	b580      	push	{r7, lr}
 801e080:	b082      	sub	sp, #8
 801e082:	af00      	add	r7, sp, #0
 801e084:	4603      	mov	r3, r0
 801e086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801e088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e08c:	4618      	mov	r0, r3
 801e08e:	f7ff ff1d 	bl	801decc <__NVIC_DisableIRQ>
}
 801e092:	bf00      	nop
 801e094:	3708      	adds	r7, #8
 801e096:	46bd      	mov	sp, r7
 801e098:	bd80      	pop	{r7, pc}

0801e09a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801e09a:	b580      	push	{r7, lr}
 801e09c:	b082      	sub	sp, #8
 801e09e:	af00      	add	r7, sp, #0
 801e0a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801e0a2:	6878      	ldr	r0, [r7, #4]
 801e0a4:	f7ff ff94 	bl	801dfd0 <SysTick_Config>
 801e0a8:	4603      	mov	r3, r0
}
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	3708      	adds	r7, #8
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	bd80      	pop	{r7, pc}
	...

0801e0b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801e0b4:	b580      	push	{r7, lr}
 801e0b6:	b086      	sub	sp, #24
 801e0b8:	af00      	add	r7, sp, #0
 801e0ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801e0bc:	2300      	movs	r3, #0
 801e0be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801e0c0:	f7ff f94a 	bl	801d358 <HAL_GetTick>
 801e0c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d101      	bne.n	801e0d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801e0cc:	2301      	movs	r3, #1
 801e0ce:	e099      	b.n	801e204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	2200      	movs	r2, #0
 801e0d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	2202      	movs	r2, #2
 801e0dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	681a      	ldr	r2, [r3, #0]
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	f022 0201 	bic.w	r2, r2, #1
 801e0ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e0f0:	e00f      	b.n	801e112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e0f2:	f7ff f931 	bl	801d358 <HAL_GetTick>
 801e0f6:	4602      	mov	r2, r0
 801e0f8:	693b      	ldr	r3, [r7, #16]
 801e0fa:	1ad3      	subs	r3, r2, r3
 801e0fc:	2b05      	cmp	r3, #5
 801e0fe:	d908      	bls.n	801e112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	2220      	movs	r2, #32
 801e104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	2203      	movs	r2, #3
 801e10a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801e10e:	2303      	movs	r3, #3
 801e110:	e078      	b.n	801e204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	f003 0301 	and.w	r3, r3, #1
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d1e8      	bne.n	801e0f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801e128:	697a      	ldr	r2, [r7, #20]
 801e12a:	4b38      	ldr	r3, [pc, #224]	; (801e20c <HAL_DMA_Init+0x158>)
 801e12c:	4013      	ands	r3, r2
 801e12e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	685a      	ldr	r2, [r3, #4]
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	689b      	ldr	r3, [r3, #8]
 801e138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e13e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	691b      	ldr	r3, [r3, #16]
 801e144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e146:	687b      	ldr	r3, [r7, #4]
 801e148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e14a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	699b      	ldr	r3, [r3, #24]
 801e150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	6a1b      	ldr	r3, [r3, #32]
 801e15c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e15e:	697a      	ldr	r2, [r7, #20]
 801e160:	4313      	orrs	r3, r2
 801e162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e168:	2b04      	cmp	r3, #4
 801e16a:	d107      	bne.n	801e17c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e174:	4313      	orrs	r3, r2
 801e176:	697a      	ldr	r2, [r7, #20]
 801e178:	4313      	orrs	r3, r2
 801e17a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	697a      	ldr	r2, [r7, #20]
 801e182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	681b      	ldr	r3, [r3, #0]
 801e188:	695b      	ldr	r3, [r3, #20]
 801e18a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801e18c:	697b      	ldr	r3, [r7, #20]
 801e18e:	f023 0307 	bic.w	r3, r3, #7
 801e192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e198:	697a      	ldr	r2, [r7, #20]
 801e19a:	4313      	orrs	r3, r2
 801e19c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1a2:	2b04      	cmp	r3, #4
 801e1a4:	d117      	bne.n	801e1d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801e1a6:	687b      	ldr	r3, [r7, #4]
 801e1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1aa:	697a      	ldr	r2, [r7, #20]
 801e1ac:	4313      	orrs	r3, r2
 801e1ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d00e      	beq.n	801e1d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801e1b8:	6878      	ldr	r0, [r7, #4]
 801e1ba:	f000 fafb 	bl	801e7b4 <DMA_CheckFifoParam>
 801e1be:	4603      	mov	r3, r0
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d008      	beq.n	801e1d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801e1c4:	687b      	ldr	r3, [r7, #4]
 801e1c6:	2240      	movs	r2, #64	; 0x40
 801e1c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	2201      	movs	r2, #1
 801e1ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	e016      	b.n	801e204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	697a      	ldr	r2, [r7, #20]
 801e1dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e1de:	6878      	ldr	r0, [r7, #4]
 801e1e0:	f000 fab2 	bl	801e748 <DMA_CalcBaseAndBitshift>
 801e1e4:	4603      	mov	r3, r0
 801e1e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e1ec:	223f      	movs	r2, #63	; 0x3f
 801e1ee:	409a      	lsls	r2, r3
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	2200      	movs	r2, #0
 801e1f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801e1fa:	687b      	ldr	r3, [r7, #4]
 801e1fc:	2201      	movs	r2, #1
 801e1fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801e202:	2300      	movs	r3, #0
}
 801e204:	4618      	mov	r0, r3
 801e206:	3718      	adds	r7, #24
 801e208:	46bd      	mov	sp, r7
 801e20a:	bd80      	pop	{r7, pc}
 801e20c:	f010803f 	.word	0xf010803f

0801e210 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b084      	sub	sp, #16
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d101      	bne.n	801e222 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801e21e:	2301      	movs	r3, #1
 801e220:	e050      	b.n	801e2c4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e228:	b2db      	uxtb	r3, r3
 801e22a:	2b02      	cmp	r3, #2
 801e22c:	d101      	bne.n	801e232 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 801e22e:	2302      	movs	r3, #2
 801e230:	e048      	b.n	801e2c4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	681a      	ldr	r2, [r3, #0]
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	f022 0201 	bic.w	r2, r2, #1
 801e240:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	2200      	movs	r2, #0
 801e248:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	2200      	movs	r2, #0
 801e250:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	681b      	ldr	r3, [r3, #0]
 801e256:	2200      	movs	r2, #0
 801e258:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	681b      	ldr	r3, [r3, #0]
 801e25e:	2200      	movs	r2, #0
 801e260:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	2200      	movs	r2, #0
 801e268:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	2221      	movs	r2, #33	; 0x21
 801e270:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e272:	6878      	ldr	r0, [r7, #4]
 801e274:	f000 fa68 	bl	801e748 <DMA_CalcBaseAndBitshift>
 801e278:	4603      	mov	r3, r0
 801e27a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	2200      	movs	r2, #0
 801e280:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	2200      	movs	r2, #0
 801e286:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	2200      	movs	r2, #0
 801e28c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	2200      	movs	r2, #0
 801e292:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	2200      	movs	r2, #0
 801e298:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	2200      	movs	r2, #0
 801e29e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2a4:	223f      	movs	r2, #63	; 0x3f
 801e2a6:	409a      	lsls	r2, r3
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	2200      	movs	r2, #0
 801e2b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	2200      	movs	r2, #0
 801e2b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801e2ba:	687b      	ldr	r3, [r7, #4]
 801e2bc:	2200      	movs	r2, #0
 801e2be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801e2c2:	2300      	movs	r3, #0
}
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	3710      	adds	r7, #16
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}

0801e2cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b086      	sub	sp, #24
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	60f8      	str	r0, [r7, #12]
 801e2d4:	60b9      	str	r1, [r7, #8]
 801e2d6:	607a      	str	r2, [r7, #4]
 801e2d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e2da:	2300      	movs	r3, #0
 801e2dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e2de:	68fb      	ldr	r3, [r7, #12]
 801e2e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e2e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e2ea:	2b01      	cmp	r3, #1
 801e2ec:	d101      	bne.n	801e2f2 <HAL_DMA_Start_IT+0x26>
 801e2ee:	2302      	movs	r3, #2
 801e2f0:	e040      	b.n	801e374 <HAL_DMA_Start_IT+0xa8>
 801e2f2:	68fb      	ldr	r3, [r7, #12]
 801e2f4:	2201      	movs	r2, #1
 801e2f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e300:	b2db      	uxtb	r3, r3
 801e302:	2b01      	cmp	r3, #1
 801e304:	d12f      	bne.n	801e366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	2202      	movs	r2, #2
 801e30a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e30e:	68fb      	ldr	r3, [r7, #12]
 801e310:	2200      	movs	r2, #0
 801e312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e314:	683b      	ldr	r3, [r7, #0]
 801e316:	687a      	ldr	r2, [r7, #4]
 801e318:	68b9      	ldr	r1, [r7, #8]
 801e31a:	68f8      	ldr	r0, [r7, #12]
 801e31c:	f000 f9e6 	bl	801e6ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e324:	223f      	movs	r2, #63	; 0x3f
 801e326:	409a      	lsls	r2, r3
 801e328:	693b      	ldr	r3, [r7, #16]
 801e32a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e32c:	68fb      	ldr	r3, [r7, #12]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	681a      	ldr	r2, [r3, #0]
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	f042 0216 	orr.w	r2, r2, #22
 801e33a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e33c:	68fb      	ldr	r3, [r7, #12]
 801e33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e340:	2b00      	cmp	r3, #0
 801e342:	d007      	beq.n	801e354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	681a      	ldr	r2, [r3, #0]
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	681b      	ldr	r3, [r3, #0]
 801e34e:	f042 0208 	orr.w	r2, r2, #8
 801e352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	681a      	ldr	r2, [r3, #0]
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	f042 0201 	orr.w	r2, r2, #1
 801e362:	601a      	str	r2, [r3, #0]
 801e364:	e005      	b.n	801e372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e366:	68fb      	ldr	r3, [r7, #12]
 801e368:	2200      	movs	r2, #0
 801e36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e36e:	2302      	movs	r3, #2
 801e370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e372:	7dfb      	ldrb	r3, [r7, #23]
}
 801e374:	4618      	mov	r0, r3
 801e376:	3718      	adds	r7, #24
 801e378:	46bd      	mov	sp, r7
 801e37a:	bd80      	pop	{r7, pc}

0801e37c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e37c:	b480      	push	{r7}
 801e37e:	b083      	sub	sp, #12
 801e380:	af00      	add	r7, sp, #0
 801e382:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e38a:	b2db      	uxtb	r3, r3
 801e38c:	2b02      	cmp	r3, #2
 801e38e:	d004      	beq.n	801e39a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	2280      	movs	r2, #128	; 0x80
 801e394:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e396:	2301      	movs	r3, #1
 801e398:	e00c      	b.n	801e3b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	2205      	movs	r2, #5
 801e39e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	681a      	ldr	r2, [r3, #0]
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	681b      	ldr	r3, [r3, #0]
 801e3ac:	f022 0201 	bic.w	r2, r2, #1
 801e3b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e3b2:	2300      	movs	r3, #0
}
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	370c      	adds	r7, #12
 801e3b8:	46bd      	mov	sp, r7
 801e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3be:	4770      	bx	lr

0801e3c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e3c0:	b580      	push	{r7, lr}
 801e3c2:	b086      	sub	sp, #24
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e3cc:	4b8e      	ldr	r3, [pc, #568]	; (801e608 <HAL_DMA_IRQHandler+0x248>)
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	4a8e      	ldr	r2, [pc, #568]	; (801e60c <HAL_DMA_IRQHandler+0x24c>)
 801e3d2:	fba2 2303 	umull	r2, r3, r2, r3
 801e3d6:	0a9b      	lsrs	r3, r3, #10
 801e3d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e3de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e3e0:	693b      	ldr	r3, [r7, #16]
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3ea:	2208      	movs	r2, #8
 801e3ec:	409a      	lsls	r2, r3
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	4013      	ands	r3, r2
 801e3f2:	2b00      	cmp	r3, #0
 801e3f4:	d01a      	beq.n	801e42c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	f003 0304 	and.w	r3, r3, #4
 801e400:	2b00      	cmp	r3, #0
 801e402:	d013      	beq.n	801e42c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	681a      	ldr	r2, [r3, #0]
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	f022 0204 	bic.w	r2, r2, #4
 801e412:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e418:	2208      	movs	r2, #8
 801e41a:	409a      	lsls	r2, r3
 801e41c:	693b      	ldr	r3, [r7, #16]
 801e41e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e424:	f043 0201 	orr.w	r2, r3, #1
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e430:	2201      	movs	r2, #1
 801e432:	409a      	lsls	r2, r3
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	4013      	ands	r3, r2
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d012      	beq.n	801e462 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	695b      	ldr	r3, [r3, #20]
 801e442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e446:	2b00      	cmp	r3, #0
 801e448:	d00b      	beq.n	801e462 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e44e:	2201      	movs	r2, #1
 801e450:	409a      	lsls	r2, r3
 801e452:	693b      	ldr	r3, [r7, #16]
 801e454:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e45a:	f043 0202 	orr.w	r2, r3, #2
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e466:	2204      	movs	r2, #4
 801e468:	409a      	lsls	r2, r3
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	4013      	ands	r3, r2
 801e46e:	2b00      	cmp	r3, #0
 801e470:	d012      	beq.n	801e498 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	f003 0302 	and.w	r3, r3, #2
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d00b      	beq.n	801e498 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e484:	2204      	movs	r2, #4
 801e486:	409a      	lsls	r2, r3
 801e488:	693b      	ldr	r3, [r7, #16]
 801e48a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e490:	f043 0204 	orr.w	r2, r3, #4
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e49c:	2210      	movs	r2, #16
 801e49e:	409a      	lsls	r2, r3
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	4013      	ands	r3, r2
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d043      	beq.n	801e530 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	f003 0308 	and.w	r3, r3, #8
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d03c      	beq.n	801e530 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e4ba:	2210      	movs	r2, #16
 801e4bc:	409a      	lsls	r2, r3
 801e4be:	693b      	ldr	r3, [r7, #16]
 801e4c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d018      	beq.n	801e502 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	d108      	bne.n	801e4f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d024      	beq.n	801e530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4ea:	6878      	ldr	r0, [r7, #4]
 801e4ec:	4798      	blx	r3
 801e4ee:	e01f      	b.n	801e530 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d01b      	beq.n	801e530 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e4fc:	6878      	ldr	r0, [r7, #4]
 801e4fe:	4798      	blx	r3
 801e500:	e016      	b.n	801e530 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d107      	bne.n	801e520 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	681a      	ldr	r2, [r3, #0]
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	f022 0208 	bic.w	r2, r2, #8
 801e51e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e524:	2b00      	cmp	r3, #0
 801e526:	d003      	beq.n	801e530 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e52c:	6878      	ldr	r0, [r7, #4]
 801e52e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e534:	2220      	movs	r2, #32
 801e536:	409a      	lsls	r2, r3
 801e538:	68fb      	ldr	r3, [r7, #12]
 801e53a:	4013      	ands	r3, r2
 801e53c:	2b00      	cmp	r3, #0
 801e53e:	f000 808f 	beq.w	801e660 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	f003 0310 	and.w	r3, r3, #16
 801e54c:	2b00      	cmp	r3, #0
 801e54e:	f000 8087 	beq.w	801e660 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e556:	2220      	movs	r2, #32
 801e558:	409a      	lsls	r2, r3
 801e55a:	693b      	ldr	r3, [r7, #16]
 801e55c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e564:	b2db      	uxtb	r3, r3
 801e566:	2b05      	cmp	r3, #5
 801e568:	d136      	bne.n	801e5d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	681a      	ldr	r2, [r3, #0]
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	f022 0216 	bic.w	r2, r2, #22
 801e578:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e57a:	687b      	ldr	r3, [r7, #4]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	695a      	ldr	r2, [r3, #20]
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e588:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d103      	bne.n	801e59a <HAL_DMA_IRQHandler+0x1da>
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e596:	2b00      	cmp	r3, #0
 801e598:	d007      	beq.n	801e5aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	681a      	ldr	r2, [r3, #0]
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	f022 0208 	bic.w	r2, r2, #8
 801e5a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e5ae:	223f      	movs	r2, #63	; 0x3f
 801e5b0:	409a      	lsls	r2, r3
 801e5b2:	693b      	ldr	r3, [r7, #16]
 801e5b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e5b6:	687b      	ldr	r3, [r7, #4]
 801e5b8:	2200      	movs	r2, #0
 801e5ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	2201      	movs	r2, #1
 801e5c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d07e      	beq.n	801e6cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e5d2:	6878      	ldr	r0, [r7, #4]
 801e5d4:	4798      	blx	r3
        }
        return;
 801e5d6:	e079      	b.n	801e6cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	681b      	ldr	r3, [r3, #0]
 801e5de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d01d      	beq.n	801e622 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	681b      	ldr	r3, [r3, #0]
 801e5ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d10d      	bne.n	801e610 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d031      	beq.n	801e660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e5fc:	687b      	ldr	r3, [r7, #4]
 801e5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e600:	6878      	ldr	r0, [r7, #4]
 801e602:	4798      	blx	r3
 801e604:	e02c      	b.n	801e660 <HAL_DMA_IRQHandler+0x2a0>
 801e606:	bf00      	nop
 801e608:	20000000 	.word	0x20000000
 801e60c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e614:	2b00      	cmp	r3, #0
 801e616:	d023      	beq.n	801e660 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e61c:	6878      	ldr	r0, [r7, #4]
 801e61e:	4798      	blx	r3
 801e620:	e01e      	b.n	801e660 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e62c:	2b00      	cmp	r3, #0
 801e62e:	d10f      	bne.n	801e650 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	681a      	ldr	r2, [r3, #0]
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	f022 0210 	bic.w	r2, r2, #16
 801e63e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	2200      	movs	r2, #0
 801e644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	2201      	movs	r2, #1
 801e64c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e654:	2b00      	cmp	r3, #0
 801e656:	d003      	beq.n	801e660 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e65c:	6878      	ldr	r0, [r7, #4]
 801e65e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e664:	2b00      	cmp	r3, #0
 801e666:	d032      	beq.n	801e6ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e66c:	f003 0301 	and.w	r3, r3, #1
 801e670:	2b00      	cmp	r3, #0
 801e672:	d022      	beq.n	801e6ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	2205      	movs	r2, #5
 801e678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	681a      	ldr	r2, [r3, #0]
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	f022 0201 	bic.w	r2, r2, #1
 801e68a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e68c:	68bb      	ldr	r3, [r7, #8]
 801e68e:	3301      	adds	r3, #1
 801e690:	60bb      	str	r3, [r7, #8]
 801e692:	697a      	ldr	r2, [r7, #20]
 801e694:	429a      	cmp	r2, r3
 801e696:	d307      	bcc.n	801e6a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	f003 0301 	and.w	r3, r3, #1
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d1f2      	bne.n	801e68c <HAL_DMA_IRQHandler+0x2cc>
 801e6a6:	e000      	b.n	801e6aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 801e6a8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	2200      	movs	r2, #0
 801e6ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	2201      	movs	r2, #1
 801e6b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d005      	beq.n	801e6ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e6c6:	6878      	ldr	r0, [r7, #4]
 801e6c8:	4798      	blx	r3
 801e6ca:	e000      	b.n	801e6ce <HAL_DMA_IRQHandler+0x30e>
        return;
 801e6cc:	bf00      	nop
    }
  }
}
 801e6ce:	3718      	adds	r7, #24
 801e6d0:	46bd      	mov	sp, r7
 801e6d2:	bd80      	pop	{r7, pc}

0801e6d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801e6d4:	b480      	push	{r7}
 801e6d6:	b083      	sub	sp, #12
 801e6d8:	af00      	add	r7, sp, #0
 801e6da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	370c      	adds	r7, #12
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ea:	4770      	bx	lr

0801e6ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e6ec:	b480      	push	{r7}
 801e6ee:	b085      	sub	sp, #20
 801e6f0:	af00      	add	r7, sp, #0
 801e6f2:	60f8      	str	r0, [r7, #12]
 801e6f4:	60b9      	str	r1, [r7, #8]
 801e6f6:	607a      	str	r2, [r7, #4]
 801e6f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801e6fa:	68fb      	ldr	r3, [r7, #12]
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	681a      	ldr	r2, [r3, #0]
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801e70a:	68fb      	ldr	r3, [r7, #12]
 801e70c:	681b      	ldr	r3, [r3, #0]
 801e70e:	683a      	ldr	r2, [r7, #0]
 801e710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	689b      	ldr	r3, [r3, #8]
 801e716:	2b40      	cmp	r3, #64	; 0x40
 801e718:	d108      	bne.n	801e72c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801e71a:	68fb      	ldr	r3, [r7, #12]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	687a      	ldr	r2, [r7, #4]
 801e720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801e722:	68fb      	ldr	r3, [r7, #12]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	68ba      	ldr	r2, [r7, #8]
 801e728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801e72a:	e007      	b.n	801e73c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	68ba      	ldr	r2, [r7, #8]
 801e732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801e734:	68fb      	ldr	r3, [r7, #12]
 801e736:	681b      	ldr	r3, [r3, #0]
 801e738:	687a      	ldr	r2, [r7, #4]
 801e73a:	60da      	str	r2, [r3, #12]
}
 801e73c:	bf00      	nop
 801e73e:	3714      	adds	r7, #20
 801e740:	46bd      	mov	sp, r7
 801e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e746:	4770      	bx	lr

0801e748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801e748:	b480      	push	{r7}
 801e74a:	b085      	sub	sp, #20
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	681b      	ldr	r3, [r3, #0]
 801e754:	b2db      	uxtb	r3, r3
 801e756:	3b10      	subs	r3, #16
 801e758:	4a14      	ldr	r2, [pc, #80]	; (801e7ac <DMA_CalcBaseAndBitshift+0x64>)
 801e75a:	fba2 2303 	umull	r2, r3, r2, r3
 801e75e:	091b      	lsrs	r3, r3, #4
 801e760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801e762:	4a13      	ldr	r2, [pc, #76]	; (801e7b0 <DMA_CalcBaseAndBitshift+0x68>)
 801e764:	68fb      	ldr	r3, [r7, #12]
 801e766:	4413      	add	r3, r2
 801e768:	781b      	ldrb	r3, [r3, #0]
 801e76a:	461a      	mov	r2, r3
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	2b03      	cmp	r3, #3
 801e774:	d909      	bls.n	801e78a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e77e:	f023 0303 	bic.w	r3, r3, #3
 801e782:	1d1a      	adds	r2, r3, #4
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	659a      	str	r2, [r3, #88]	; 0x58
 801e788:	e007      	b.n	801e79a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e792:	f023 0303 	bic.w	r3, r3, #3
 801e796:	687a      	ldr	r2, [r7, #4]
 801e798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801e79e:	4618      	mov	r0, r3
 801e7a0:	3714      	adds	r7, #20
 801e7a2:	46bd      	mov	sp, r7
 801e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7a8:	4770      	bx	lr
 801e7aa:	bf00      	nop
 801e7ac:	aaaaaaab 	.word	0xaaaaaaab
 801e7b0:	08037724 	.word	0x08037724

0801e7b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801e7b4:	b480      	push	{r7}
 801e7b6:	b085      	sub	sp, #20
 801e7b8:	af00      	add	r7, sp, #0
 801e7ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e7bc:	2300      	movs	r3, #0
 801e7be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	699b      	ldr	r3, [r3, #24]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d11f      	bne.n	801e80e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801e7ce:	68bb      	ldr	r3, [r7, #8]
 801e7d0:	2b03      	cmp	r3, #3
 801e7d2:	d856      	bhi.n	801e882 <DMA_CheckFifoParam+0xce>
 801e7d4:	a201      	add	r2, pc, #4	; (adr r2, 801e7dc <DMA_CheckFifoParam+0x28>)
 801e7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e7da:	bf00      	nop
 801e7dc:	0801e7ed 	.word	0x0801e7ed
 801e7e0:	0801e7ff 	.word	0x0801e7ff
 801e7e4:	0801e7ed 	.word	0x0801e7ed
 801e7e8:	0801e883 	.word	0x0801e883
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d046      	beq.n	801e886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801e7f8:	2301      	movs	r3, #1
 801e7fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e7fc:	e043      	b.n	801e886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e806:	d140      	bne.n	801e88a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801e808:	2301      	movs	r3, #1
 801e80a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e80c:	e03d      	b.n	801e88a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	699b      	ldr	r3, [r3, #24]
 801e812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e816:	d121      	bne.n	801e85c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801e818:	68bb      	ldr	r3, [r7, #8]
 801e81a:	2b03      	cmp	r3, #3
 801e81c:	d837      	bhi.n	801e88e <DMA_CheckFifoParam+0xda>
 801e81e:	a201      	add	r2, pc, #4	; (adr r2, 801e824 <DMA_CheckFifoParam+0x70>)
 801e820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e824:	0801e835 	.word	0x0801e835
 801e828:	0801e83b 	.word	0x0801e83b
 801e82c:	0801e835 	.word	0x0801e835
 801e830:	0801e84d 	.word	0x0801e84d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801e834:	2301      	movs	r3, #1
 801e836:	73fb      	strb	r3, [r7, #15]
      break;
 801e838:	e030      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e83e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e842:	2b00      	cmp	r3, #0
 801e844:	d025      	beq.n	801e892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801e846:	2301      	movs	r3, #1
 801e848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e84a:	e022      	b.n	801e892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e854:	d11f      	bne.n	801e896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801e856:	2301      	movs	r3, #1
 801e858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801e85a:	e01c      	b.n	801e896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801e85c:	68bb      	ldr	r3, [r7, #8]
 801e85e:	2b02      	cmp	r3, #2
 801e860:	d903      	bls.n	801e86a <DMA_CheckFifoParam+0xb6>
 801e862:	68bb      	ldr	r3, [r7, #8]
 801e864:	2b03      	cmp	r3, #3
 801e866:	d003      	beq.n	801e870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801e868:	e018      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801e86a:	2301      	movs	r3, #1
 801e86c:	73fb      	strb	r3, [r7, #15]
      break;
 801e86e:	e015      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d00e      	beq.n	801e89a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801e87c:	2301      	movs	r3, #1
 801e87e:	73fb      	strb	r3, [r7, #15]
      break;
 801e880:	e00b      	b.n	801e89a <DMA_CheckFifoParam+0xe6>
      break;
 801e882:	bf00      	nop
 801e884:	e00a      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;
 801e886:	bf00      	nop
 801e888:	e008      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;
 801e88a:	bf00      	nop
 801e88c:	e006      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;
 801e88e:	bf00      	nop
 801e890:	e004      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;
 801e892:	bf00      	nop
 801e894:	e002      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;   
 801e896:	bf00      	nop
 801e898:	e000      	b.n	801e89c <DMA_CheckFifoParam+0xe8>
      break;
 801e89a:	bf00      	nop
    }
  } 
  
  return status; 
 801e89c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e89e:	4618      	mov	r0, r3
 801e8a0:	3714      	adds	r7, #20
 801e8a2:	46bd      	mov	sp, r7
 801e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a8:	4770      	bx	lr
 801e8aa:	bf00      	nop

0801e8ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b086      	sub	sp, #24
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	60f8      	str	r0, [r7, #12]
 801e8b4:	60b9      	str	r1, [r7, #8]
 801e8b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 801e8ba:	2301      	movs	r3, #1
 801e8bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801e8be:	4b23      	ldr	r3, [pc, #140]	; (801e94c <HAL_FLASH_Program+0xa0>)
 801e8c0:	7e1b      	ldrb	r3, [r3, #24]
 801e8c2:	2b01      	cmp	r3, #1
 801e8c4:	d101      	bne.n	801e8ca <HAL_FLASH_Program+0x1e>
 801e8c6:	2302      	movs	r3, #2
 801e8c8:	e03b      	b.n	801e942 <HAL_FLASH_Program+0x96>
 801e8ca:	4b20      	ldr	r3, [pc, #128]	; (801e94c <HAL_FLASH_Program+0xa0>)
 801e8cc:	2201      	movs	r2, #1
 801e8ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801e8d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 801e8d4:	f000 f870 	bl	801e9b8 <FLASH_WaitForLastOperation>
 801e8d8:	4603      	mov	r3, r0
 801e8da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 801e8dc:	7dfb      	ldrb	r3, [r7, #23]
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d12b      	bne.n	801e93a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801e8e2:	68fb      	ldr	r3, [r7, #12]
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d105      	bne.n	801e8f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 801e8e8:	783b      	ldrb	r3, [r7, #0]
 801e8ea:	4619      	mov	r1, r3
 801e8ec:	68b8      	ldr	r0, [r7, #8]
 801e8ee:	f000 f91b 	bl	801eb28 <FLASH_Program_Byte>
 801e8f2:	e016      	b.n	801e922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 801e8f4:	68fb      	ldr	r3, [r7, #12]
 801e8f6:	2b01      	cmp	r3, #1
 801e8f8:	d105      	bne.n	801e906 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 801e8fa:	883b      	ldrh	r3, [r7, #0]
 801e8fc:	4619      	mov	r1, r3
 801e8fe:	68b8      	ldr	r0, [r7, #8]
 801e900:	f000 f8ee 	bl	801eae0 <FLASH_Program_HalfWord>
 801e904:	e00d      	b.n	801e922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 801e906:	68fb      	ldr	r3, [r7, #12]
 801e908:	2b02      	cmp	r3, #2
 801e90a:	d105      	bne.n	801e918 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801e90c:	683b      	ldr	r3, [r7, #0]
 801e90e:	4619      	mov	r1, r3
 801e910:	68b8      	ldr	r0, [r7, #8]
 801e912:	f000 f8c3 	bl	801ea9c <FLASH_Program_Word>
 801e916:	e004      	b.n	801e922 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 801e918:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e91c:	68b8      	ldr	r0, [r7, #8]
 801e91e:	f000 f88b 	bl	801ea38 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801e922:	f24c 3050 	movw	r0, #50000	; 0xc350
 801e926:	f000 f847 	bl	801e9b8 <FLASH_WaitForLastOperation>
 801e92a:	4603      	mov	r3, r0
 801e92c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801e92e:	4b08      	ldr	r3, [pc, #32]	; (801e950 <HAL_FLASH_Program+0xa4>)
 801e930:	691b      	ldr	r3, [r3, #16]
 801e932:	4a07      	ldr	r2, [pc, #28]	; (801e950 <HAL_FLASH_Program+0xa4>)
 801e934:	f023 0301 	bic.w	r3, r3, #1
 801e938:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801e93a:	4b04      	ldr	r3, [pc, #16]	; (801e94c <HAL_FLASH_Program+0xa0>)
 801e93c:	2200      	movs	r2, #0
 801e93e:	761a      	strb	r2, [r3, #24]
  
  return status;
 801e940:	7dfb      	ldrb	r3, [r7, #23]
}
 801e942:	4618      	mov	r0, r3
 801e944:	3718      	adds	r7, #24
 801e946:	46bd      	mov	sp, r7
 801e948:	bd80      	pop	{r7, pc}
 801e94a:	bf00      	nop
 801e94c:	2000b384 	.word	0x2000b384
 801e950:	40023c00 	.word	0x40023c00

0801e954 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801e954:	b480      	push	{r7}
 801e956:	b083      	sub	sp, #12
 801e958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801e95a:	2300      	movs	r3, #0
 801e95c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801e95e:	4b0b      	ldr	r3, [pc, #44]	; (801e98c <HAL_FLASH_Unlock+0x38>)
 801e960:	691b      	ldr	r3, [r3, #16]
 801e962:	2b00      	cmp	r3, #0
 801e964:	da0b      	bge.n	801e97e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801e966:	4b09      	ldr	r3, [pc, #36]	; (801e98c <HAL_FLASH_Unlock+0x38>)
 801e968:	4a09      	ldr	r2, [pc, #36]	; (801e990 <HAL_FLASH_Unlock+0x3c>)
 801e96a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801e96c:	4b07      	ldr	r3, [pc, #28]	; (801e98c <HAL_FLASH_Unlock+0x38>)
 801e96e:	4a09      	ldr	r2, [pc, #36]	; (801e994 <HAL_FLASH_Unlock+0x40>)
 801e970:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801e972:	4b06      	ldr	r3, [pc, #24]	; (801e98c <HAL_FLASH_Unlock+0x38>)
 801e974:	691b      	ldr	r3, [r3, #16]
 801e976:	2b00      	cmp	r3, #0
 801e978:	da01      	bge.n	801e97e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801e97a:	2301      	movs	r3, #1
 801e97c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801e97e:	79fb      	ldrb	r3, [r7, #7]
}
 801e980:	4618      	mov	r0, r3
 801e982:	370c      	adds	r7, #12
 801e984:	46bd      	mov	sp, r7
 801e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e98a:	4770      	bx	lr
 801e98c:	40023c00 	.word	0x40023c00
 801e990:	45670123 	.word	0x45670123
 801e994:	cdef89ab 	.word	0xcdef89ab

0801e998 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801e998:	b480      	push	{r7}
 801e99a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801e99c:	4b05      	ldr	r3, [pc, #20]	; (801e9b4 <HAL_FLASH_Lock+0x1c>)
 801e99e:	691b      	ldr	r3, [r3, #16]
 801e9a0:	4a04      	ldr	r2, [pc, #16]	; (801e9b4 <HAL_FLASH_Lock+0x1c>)
 801e9a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801e9a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 801e9a8:	2300      	movs	r3, #0
}
 801e9aa:	4618      	mov	r0, r3
 801e9ac:	46bd      	mov	sp, r7
 801e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9b2:	4770      	bx	lr
 801e9b4:	40023c00 	.word	0x40023c00

0801e9b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 801e9b8:	b580      	push	{r7, lr}
 801e9ba:	b084      	sub	sp, #16
 801e9bc:	af00      	add	r7, sp, #0
 801e9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801e9c4:	4b1a      	ldr	r3, [pc, #104]	; (801ea30 <FLASH_WaitForLastOperation+0x78>)
 801e9c6:	2200      	movs	r2, #0
 801e9c8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801e9ca:	f7fe fcc5 	bl	801d358 <HAL_GetTick>
 801e9ce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801e9d0:	e010      	b.n	801e9f4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e9d8:	d00c      	beq.n	801e9f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	2b00      	cmp	r3, #0
 801e9de:	d007      	beq.n	801e9f0 <FLASH_WaitForLastOperation+0x38>
 801e9e0:	f7fe fcba 	bl	801d358 <HAL_GetTick>
 801e9e4:	4602      	mov	r2, r0
 801e9e6:	68fb      	ldr	r3, [r7, #12]
 801e9e8:	1ad3      	subs	r3, r2, r3
 801e9ea:	687a      	ldr	r2, [r7, #4]
 801e9ec:	429a      	cmp	r2, r3
 801e9ee:	d201      	bcs.n	801e9f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801e9f0:	2303      	movs	r3, #3
 801e9f2:	e019      	b.n	801ea28 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801e9f4:	4b0f      	ldr	r3, [pc, #60]	; (801ea34 <FLASH_WaitForLastOperation+0x7c>)
 801e9f6:	68db      	ldr	r3, [r3, #12]
 801e9f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e9fc:	2b00      	cmp	r3, #0
 801e9fe:	d1e8      	bne.n	801e9d2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801ea00:	4b0c      	ldr	r3, [pc, #48]	; (801ea34 <FLASH_WaitForLastOperation+0x7c>)
 801ea02:	68db      	ldr	r3, [r3, #12]
 801ea04:	f003 0301 	and.w	r3, r3, #1
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d002      	beq.n	801ea12 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801ea0c:	4b09      	ldr	r3, [pc, #36]	; (801ea34 <FLASH_WaitForLastOperation+0x7c>)
 801ea0e:	2201      	movs	r2, #1
 801ea10:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801ea12:	4b08      	ldr	r3, [pc, #32]	; (801ea34 <FLASH_WaitForLastOperation+0x7c>)
 801ea14:	68db      	ldr	r3, [r3, #12]
 801ea16:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d003      	beq.n	801ea26 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801ea1e:	f000 f8a5 	bl	801eb6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 801ea22:	2301      	movs	r3, #1
 801ea24:	e000      	b.n	801ea28 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 801ea26:	2300      	movs	r3, #0
  
}  
 801ea28:	4618      	mov	r0, r3
 801ea2a:	3710      	adds	r7, #16
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	bd80      	pop	{r7, pc}
 801ea30:	2000b384 	.word	0x2000b384
 801ea34:	40023c00 	.word	0x40023c00

0801ea38 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801ea38:	b480      	push	{r7}
 801ea3a:	b085      	sub	sp, #20
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	60f8      	str	r0, [r7, #12]
 801ea40:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ea44:	4b14      	ldr	r3, [pc, #80]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea46:	691b      	ldr	r3, [r3, #16]
 801ea48:	4a13      	ldr	r2, [pc, #76]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ea4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 801ea50:	4b11      	ldr	r3, [pc, #68]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea52:	691b      	ldr	r3, [r3, #16]
 801ea54:	4a10      	ldr	r2, [pc, #64]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801ea5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801ea5c:	4b0e      	ldr	r3, [pc, #56]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea5e:	691b      	ldr	r3, [r3, #16]
 801ea60:	4a0d      	ldr	r2, [pc, #52]	; (801ea98 <FLASH_Program_DoubleWord+0x60>)
 801ea62:	f043 0301 	orr.w	r3, r3, #1
 801ea66:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	683a      	ldr	r2, [r7, #0]
 801ea6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801ea6e:	f3bf 8f6f 	isb	sy
}
 801ea72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 801ea74:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ea78:	f04f 0200 	mov.w	r2, #0
 801ea7c:	f04f 0300 	mov.w	r3, #0
 801ea80:	000a      	movs	r2, r1
 801ea82:	2300      	movs	r3, #0
 801ea84:	68f9      	ldr	r1, [r7, #12]
 801ea86:	3104      	adds	r1, #4
 801ea88:	4613      	mov	r3, r2
 801ea8a:	600b      	str	r3, [r1, #0]
}
 801ea8c:	bf00      	nop
 801ea8e:	3714      	adds	r7, #20
 801ea90:	46bd      	mov	sp, r7
 801ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea96:	4770      	bx	lr
 801ea98:	40023c00 	.word	0x40023c00

0801ea9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 801ea9c:	b480      	push	{r7}
 801ea9e:	b083      	sub	sp, #12
 801eaa0:	af00      	add	r7, sp, #0
 801eaa2:	6078      	str	r0, [r7, #4]
 801eaa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801eaa6:	4b0d      	ldr	r3, [pc, #52]	; (801eadc <FLASH_Program_Word+0x40>)
 801eaa8:	691b      	ldr	r3, [r3, #16]
 801eaaa:	4a0c      	ldr	r2, [pc, #48]	; (801eadc <FLASH_Program_Word+0x40>)
 801eaac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eab0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801eab2:	4b0a      	ldr	r3, [pc, #40]	; (801eadc <FLASH_Program_Word+0x40>)
 801eab4:	691b      	ldr	r3, [r3, #16]
 801eab6:	4a09      	ldr	r2, [pc, #36]	; (801eadc <FLASH_Program_Word+0x40>)
 801eab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801eabc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801eabe:	4b07      	ldr	r3, [pc, #28]	; (801eadc <FLASH_Program_Word+0x40>)
 801eac0:	691b      	ldr	r3, [r3, #16]
 801eac2:	4a06      	ldr	r2, [pc, #24]	; (801eadc <FLASH_Program_Word+0x40>)
 801eac4:	f043 0301 	orr.w	r3, r3, #1
 801eac8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	683a      	ldr	r2, [r7, #0]
 801eace:	601a      	str	r2, [r3, #0]
}
 801ead0:	bf00      	nop
 801ead2:	370c      	adds	r7, #12
 801ead4:	46bd      	mov	sp, r7
 801ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eada:	4770      	bx	lr
 801eadc:	40023c00 	.word	0x40023c00

0801eae0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 801eae0:	b480      	push	{r7}
 801eae2:	b083      	sub	sp, #12
 801eae4:	af00      	add	r7, sp, #0
 801eae6:	6078      	str	r0, [r7, #4]
 801eae8:	460b      	mov	r3, r1
 801eaea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801eaec:	4b0d      	ldr	r3, [pc, #52]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eaee:	691b      	ldr	r3, [r3, #16]
 801eaf0:	4a0c      	ldr	r2, [pc, #48]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eaf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eaf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801eaf8:	4b0a      	ldr	r3, [pc, #40]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eafa:	691b      	ldr	r3, [r3, #16]
 801eafc:	4a09      	ldr	r2, [pc, #36]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eafe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801eb02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801eb04:	4b07      	ldr	r3, [pc, #28]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eb06:	691b      	ldr	r3, [r3, #16]
 801eb08:	4a06      	ldr	r2, [pc, #24]	; (801eb24 <FLASH_Program_HalfWord+0x44>)
 801eb0a:	f043 0301 	orr.w	r3, r3, #1
 801eb0e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	887a      	ldrh	r2, [r7, #2]
 801eb14:	801a      	strh	r2, [r3, #0]
}
 801eb16:	bf00      	nop
 801eb18:	370c      	adds	r7, #12
 801eb1a:	46bd      	mov	sp, r7
 801eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb20:	4770      	bx	lr
 801eb22:	bf00      	nop
 801eb24:	40023c00 	.word	0x40023c00

0801eb28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 801eb28:	b480      	push	{r7}
 801eb2a:	b083      	sub	sp, #12
 801eb2c:	af00      	add	r7, sp, #0
 801eb2e:	6078      	str	r0, [r7, #4]
 801eb30:	460b      	mov	r3, r1
 801eb32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801eb34:	4b0c      	ldr	r3, [pc, #48]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb36:	691b      	ldr	r3, [r3, #16]
 801eb38:	4a0b      	ldr	r2, [pc, #44]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 801eb40:	4b09      	ldr	r3, [pc, #36]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb42:	4a09      	ldr	r2, [pc, #36]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb44:	691b      	ldr	r3, [r3, #16]
 801eb46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801eb48:	4b07      	ldr	r3, [pc, #28]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb4a:	691b      	ldr	r3, [r3, #16]
 801eb4c:	4a06      	ldr	r2, [pc, #24]	; (801eb68 <FLASH_Program_Byte+0x40>)
 801eb4e:	f043 0301 	orr.w	r3, r3, #1
 801eb52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	78fa      	ldrb	r2, [r7, #3]
 801eb58:	701a      	strb	r2, [r3, #0]
}
 801eb5a:	bf00      	nop
 801eb5c:	370c      	adds	r7, #12
 801eb5e:	46bd      	mov	sp, r7
 801eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb64:	4770      	bx	lr
 801eb66:	bf00      	nop
 801eb68:	40023c00 	.word	0x40023c00

0801eb6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 801eb6c:	b480      	push	{r7}
 801eb6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 801eb70:	4b2f      	ldr	r3, [pc, #188]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801eb72:	68db      	ldr	r3, [r3, #12]
 801eb74:	f003 0310 	and.w	r3, r3, #16
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d008      	beq.n	801eb8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801eb7c:	4b2d      	ldr	r3, [pc, #180]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801eb7e:	69db      	ldr	r3, [r3, #28]
 801eb80:	f043 0310 	orr.w	r3, r3, #16
 801eb84:	4a2b      	ldr	r2, [pc, #172]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801eb86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801eb88:	4b29      	ldr	r3, [pc, #164]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801eb8a:	2210      	movs	r2, #16
 801eb8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 801eb8e:	4b28      	ldr	r3, [pc, #160]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801eb90:	68db      	ldr	r3, [r3, #12]
 801eb92:	f003 0320 	and.w	r3, r3, #32
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d008      	beq.n	801ebac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801eb9a:	4b26      	ldr	r3, [pc, #152]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801eb9c:	69db      	ldr	r3, [r3, #28]
 801eb9e:	f043 0308 	orr.w	r3, r3, #8
 801eba2:	4a24      	ldr	r2, [pc, #144]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801eba4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801eba6:	4b22      	ldr	r3, [pc, #136]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801eba8:	2220      	movs	r2, #32
 801ebaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 801ebac:	4b20      	ldr	r3, [pc, #128]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ebae:	68db      	ldr	r3, [r3, #12]
 801ebb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d008      	beq.n	801ebca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801ebb8:	4b1e      	ldr	r3, [pc, #120]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebba:	69db      	ldr	r3, [r3, #28]
 801ebbc:	f043 0304 	orr.w	r3, r3, #4
 801ebc0:	4a1c      	ldr	r2, [pc, #112]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801ebc4:	4b1a      	ldr	r3, [pc, #104]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ebc6:	2240      	movs	r2, #64	; 0x40
 801ebc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801ebca:	4b19      	ldr	r3, [pc, #100]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ebcc:	68db      	ldr	r3, [r3, #12]
 801ebce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d008      	beq.n	801ebe8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801ebd6:	4b17      	ldr	r3, [pc, #92]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebd8:	69db      	ldr	r3, [r3, #28]
 801ebda:	f043 0302 	orr.w	r3, r3, #2
 801ebde:	4a15      	ldr	r2, [pc, #84]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebe0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801ebe2:	4b13      	ldr	r3, [pc, #76]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ebe4:	2280      	movs	r2, #128	; 0x80
 801ebe6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801ebe8:	4b11      	ldr	r3, [pc, #68]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ebea:	68db      	ldr	r3, [r3, #12]
 801ebec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d009      	beq.n	801ec08 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801ebf4:	4b0f      	ldr	r3, [pc, #60]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebf6:	69db      	ldr	r3, [r3, #28]
 801ebf8:	f043 0301 	orr.w	r3, r3, #1
 801ebfc:	4a0d      	ldr	r2, [pc, #52]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ebfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 801ec00:	4b0b      	ldr	r3, [pc, #44]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ec02:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ec06:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801ec08:	4b09      	ldr	r3, [pc, #36]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ec0a:	68db      	ldr	r3, [r3, #12]
 801ec0c:	f003 0302 	and.w	r3, r3, #2
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d008      	beq.n	801ec26 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801ec14:	4b07      	ldr	r3, [pc, #28]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ec16:	69db      	ldr	r3, [r3, #28]
 801ec18:	f043 0320 	orr.w	r3, r3, #32
 801ec1c:	4a05      	ldr	r2, [pc, #20]	; (801ec34 <FLASH_SetErrorCode+0xc8>)
 801ec1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 801ec20:	4b03      	ldr	r3, [pc, #12]	; (801ec30 <FLASH_SetErrorCode+0xc4>)
 801ec22:	2202      	movs	r2, #2
 801ec24:	60da      	str	r2, [r3, #12]
  }
}
 801ec26:	bf00      	nop
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec2e:	4770      	bx	lr
 801ec30:	40023c00 	.word	0x40023c00
 801ec34:	2000b384 	.word	0x2000b384

0801ec38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 801ec38:	b580      	push	{r7, lr}
 801ec3a:	b084      	sub	sp, #16
 801ec3c:	af00      	add	r7, sp, #0
 801ec3e:	6078      	str	r0, [r7, #4]
 801ec40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801ec42:	2301      	movs	r3, #1
 801ec44:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801ec46:	2300      	movs	r3, #0
 801ec48:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801ec4a:	4b31      	ldr	r3, [pc, #196]	; (801ed10 <HAL_FLASHEx_Erase+0xd8>)
 801ec4c:	7e1b      	ldrb	r3, [r3, #24]
 801ec4e:	2b01      	cmp	r3, #1
 801ec50:	d101      	bne.n	801ec56 <HAL_FLASHEx_Erase+0x1e>
 801ec52:	2302      	movs	r3, #2
 801ec54:	e058      	b.n	801ed08 <HAL_FLASHEx_Erase+0xd0>
 801ec56:	4b2e      	ldr	r3, [pc, #184]	; (801ed10 <HAL_FLASHEx_Erase+0xd8>)
 801ec58:	2201      	movs	r2, #1
 801ec5a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ec5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ec60:	f7ff feaa 	bl	801e9b8 <FLASH_WaitForLastOperation>
 801ec64:	4603      	mov	r3, r0
 801ec66:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 801ec68:	7bfb      	ldrb	r3, [r7, #15]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d148      	bne.n	801ed00 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	f04f 32ff 	mov.w	r2, #4294967295
 801ec74:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	2b01      	cmp	r3, #1
 801ec7c:	d115      	bne.n	801ecaa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	691b      	ldr	r3, [r3, #16]
 801ec82:	b2da      	uxtb	r2, r3
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	685b      	ldr	r3, [r3, #4]
 801ec88:	4619      	mov	r1, r3
 801ec8a:	4610      	mov	r0, r2
 801ec8c:	f000 f844 	bl	801ed18 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ec90:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ec94:	f7ff fe90 	bl	801e9b8 <FLASH_WaitForLastOperation>
 801ec98:	4603      	mov	r3, r0
 801ec9a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801ec9c:	4b1d      	ldr	r3, [pc, #116]	; (801ed14 <HAL_FLASHEx_Erase+0xdc>)
 801ec9e:	691b      	ldr	r3, [r3, #16]
 801eca0:	4a1c      	ldr	r2, [pc, #112]	; (801ed14 <HAL_FLASHEx_Erase+0xdc>)
 801eca2:	f023 0304 	bic.w	r3, r3, #4
 801eca6:	6113      	str	r3, [r2, #16]
 801eca8:	e028      	b.n	801ecfc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	689b      	ldr	r3, [r3, #8]
 801ecae:	60bb      	str	r3, [r7, #8]
 801ecb0:	e01c      	b.n	801ecec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	691b      	ldr	r3, [r3, #16]
 801ecb6:	b2db      	uxtb	r3, r3
 801ecb8:	4619      	mov	r1, r3
 801ecba:	68b8      	ldr	r0, [r7, #8]
 801ecbc:	f000 f850 	bl	801ed60 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ecc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 801ecc4:	f7ff fe78 	bl	801e9b8 <FLASH_WaitForLastOperation>
 801ecc8:	4603      	mov	r3, r0
 801ecca:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801eccc:	4b11      	ldr	r3, [pc, #68]	; (801ed14 <HAL_FLASHEx_Erase+0xdc>)
 801ecce:	691b      	ldr	r3, [r3, #16]
 801ecd0:	4a10      	ldr	r2, [pc, #64]	; (801ed14 <HAL_FLASHEx_Erase+0xdc>)
 801ecd2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801ecd6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 801ecd8:	7bfb      	ldrb	r3, [r7, #15]
 801ecda:	2b00      	cmp	r3, #0
 801ecdc:	d003      	beq.n	801ece6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801ecde:	683b      	ldr	r3, [r7, #0]
 801ece0:	68ba      	ldr	r2, [r7, #8]
 801ece2:	601a      	str	r2, [r3, #0]
          break;
 801ece4:	e00a      	b.n	801ecfc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801ece6:	68bb      	ldr	r3, [r7, #8]
 801ece8:	3301      	adds	r3, #1
 801ecea:	60bb      	str	r3, [r7, #8]
 801ecec:	687b      	ldr	r3, [r7, #4]
 801ecee:	68da      	ldr	r2, [r3, #12]
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	689b      	ldr	r3, [r3, #8]
 801ecf4:	4413      	add	r3, r2
 801ecf6:	68ba      	ldr	r2, [r7, #8]
 801ecf8:	429a      	cmp	r2, r3
 801ecfa:	d3da      	bcc.n	801ecb2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 801ecfc:	f000 f878 	bl	801edf0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801ed00:	4b03      	ldr	r3, [pc, #12]	; (801ed10 <HAL_FLASHEx_Erase+0xd8>)
 801ed02:	2200      	movs	r2, #0
 801ed04:	761a      	strb	r2, [r3, #24]

  return status;
 801ed06:	7bfb      	ldrb	r3, [r7, #15]
}
 801ed08:	4618      	mov	r0, r3
 801ed0a:	3710      	adds	r7, #16
 801ed0c:	46bd      	mov	sp, r7
 801ed0e:	bd80      	pop	{r7, pc}
 801ed10:	2000b384 	.word	0x2000b384
 801ed14:	40023c00 	.word	0x40023c00

0801ed18 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 801ed18:	b480      	push	{r7}
 801ed1a:	b083      	sub	sp, #12
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	4603      	mov	r3, r0
 801ed20:	6039      	str	r1, [r7, #0]
 801ed22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ed24:	4b0d      	ldr	r3, [pc, #52]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed26:	691b      	ldr	r3, [r3, #16]
 801ed28:	4a0c      	ldr	r2, [pc, #48]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ed2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 801ed30:	4b0a      	ldr	r3, [pc, #40]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed32:	691b      	ldr	r3, [r3, #16]
 801ed34:	4a09      	ldr	r2, [pc, #36]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed36:	f043 0304 	orr.w	r3, r3, #4
 801ed3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 801ed3c:	4b07      	ldr	r3, [pc, #28]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed3e:	691a      	ldr	r2, [r3, #16]
 801ed40:	79fb      	ldrb	r3, [r7, #7]
 801ed42:	021b      	lsls	r3, r3, #8
 801ed44:	4313      	orrs	r3, r2
 801ed46:	4a05      	ldr	r2, [pc, #20]	; (801ed5c <FLASH_MassErase+0x44>)
 801ed48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ed4c:	6113      	str	r3, [r2, #16]
}
 801ed4e:	bf00      	nop
 801ed50:	370c      	adds	r7, #12
 801ed52:	46bd      	mov	sp, r7
 801ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed58:	4770      	bx	lr
 801ed5a:	bf00      	nop
 801ed5c:	40023c00 	.word	0x40023c00

0801ed60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801ed60:	b480      	push	{r7}
 801ed62:	b085      	sub	sp, #20
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	6078      	str	r0, [r7, #4]
 801ed68:	460b      	mov	r3, r1
 801ed6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801ed70:	78fb      	ldrb	r3, [r7, #3]
 801ed72:	2b00      	cmp	r3, #0
 801ed74:	d102      	bne.n	801ed7c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 801ed76:	2300      	movs	r3, #0
 801ed78:	60fb      	str	r3, [r7, #12]
 801ed7a:	e010      	b.n	801ed9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801ed7c:	78fb      	ldrb	r3, [r7, #3]
 801ed7e:	2b01      	cmp	r3, #1
 801ed80:	d103      	bne.n	801ed8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801ed82:	f44f 7380 	mov.w	r3, #256	; 0x100
 801ed86:	60fb      	str	r3, [r7, #12]
 801ed88:	e009      	b.n	801ed9e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801ed8a:	78fb      	ldrb	r3, [r7, #3]
 801ed8c:	2b02      	cmp	r3, #2
 801ed8e:	d103      	bne.n	801ed98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801ed90:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ed94:	60fb      	str	r3, [r7, #12]
 801ed96:	e002      	b.n	801ed9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 801ed98:	f44f 7340 	mov.w	r3, #768	; 0x300
 801ed9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801ed9e:	4b13      	ldr	r3, [pc, #76]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801eda0:	691b      	ldr	r3, [r3, #16]
 801eda2:	4a12      	ldr	r2, [pc, #72]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801eda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eda8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801edaa:	4b10      	ldr	r3, [pc, #64]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edac:	691a      	ldr	r2, [r3, #16]
 801edae:	490f      	ldr	r1, [pc, #60]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	4313      	orrs	r3, r2
 801edb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801edb6:	4b0d      	ldr	r3, [pc, #52]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edb8:	691b      	ldr	r3, [r3, #16]
 801edba:	4a0c      	ldr	r2, [pc, #48]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801edc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801edc2:	4b0a      	ldr	r3, [pc, #40]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edc4:	691a      	ldr	r2, [r3, #16]
 801edc6:	687b      	ldr	r3, [r7, #4]
 801edc8:	00db      	lsls	r3, r3, #3
 801edca:	4313      	orrs	r3, r2
 801edcc:	4a07      	ldr	r2, [pc, #28]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edce:	f043 0302 	orr.w	r3, r3, #2
 801edd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801edd4:	4b05      	ldr	r3, [pc, #20]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edd6:	691b      	ldr	r3, [r3, #16]
 801edd8:	4a04      	ldr	r2, [pc, #16]	; (801edec <FLASH_Erase_Sector+0x8c>)
 801edda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801edde:	6113      	str	r3, [r2, #16]
}
 801ede0:	bf00      	nop
 801ede2:	3714      	adds	r7, #20
 801ede4:	46bd      	mov	sp, r7
 801ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edea:	4770      	bx	lr
 801edec:	40023c00 	.word	0x40023c00

0801edf0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801edf0:	b480      	push	{r7}
 801edf2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801edf4:	4b20      	ldr	r3, [pc, #128]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801edf6:	681b      	ldr	r3, [r3, #0]
 801edf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d017      	beq.n	801ee30 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801ee00:	4b1d      	ldr	r3, [pc, #116]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee02:	681b      	ldr	r3, [r3, #0]
 801ee04:	4a1c      	ldr	r2, [pc, #112]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ee0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801ee0c:	4b1a      	ldr	r3, [pc, #104]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	4a19      	ldr	r2, [pc, #100]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ee16:	6013      	str	r3, [r2, #0]
 801ee18:	4b17      	ldr	r3, [pc, #92]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	4a16      	ldr	r2, [pc, #88]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ee22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801ee24:	4b14      	ldr	r3, [pc, #80]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee26:	681b      	ldr	r3, [r3, #0]
 801ee28:	4a13      	ldr	r2, [pc, #76]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ee2e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 801ee30:	4b11      	ldr	r3, [pc, #68]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d017      	beq.n	801ee6c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 801ee3c:	4b0e      	ldr	r3, [pc, #56]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	4a0d      	ldr	r2, [pc, #52]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ee46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801ee48:	4b0b      	ldr	r3, [pc, #44]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	4a0a      	ldr	r2, [pc, #40]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801ee52:	6013      	str	r3, [r2, #0]
 801ee54:	4b08      	ldr	r3, [pc, #32]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	4a07      	ldr	r2, [pc, #28]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ee5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801ee60:	4b05      	ldr	r3, [pc, #20]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	4a04      	ldr	r2, [pc, #16]	; (801ee78 <FLASH_FlushCaches+0x88>)
 801ee66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ee6a:	6013      	str	r3, [r2, #0]
  }
}
 801ee6c:	bf00      	nop
 801ee6e:	46bd      	mov	sp, r7
 801ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee74:	4770      	bx	lr
 801ee76:	bf00      	nop
 801ee78:	40023c00 	.word	0x40023c00

0801ee7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ee7c:	b480      	push	{r7}
 801ee7e:	b089      	sub	sp, #36	; 0x24
 801ee80:	af00      	add	r7, sp, #0
 801ee82:	6078      	str	r0, [r7, #4]
 801ee84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801ee86:	2300      	movs	r3, #0
 801ee88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801ee8e:	2300      	movs	r3, #0
 801ee90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801ee92:	2300      	movs	r3, #0
 801ee94:	61fb      	str	r3, [r7, #28]
 801ee96:	e159      	b.n	801f14c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801ee98:	2201      	movs	r2, #1
 801ee9a:	69fb      	ldr	r3, [r7, #28]
 801ee9c:	fa02 f303 	lsl.w	r3, r2, r3
 801eea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801eea2:	683b      	ldr	r3, [r7, #0]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	697a      	ldr	r2, [r7, #20]
 801eea8:	4013      	ands	r3, r2
 801eeaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801eeac:	693a      	ldr	r2, [r7, #16]
 801eeae:	697b      	ldr	r3, [r7, #20]
 801eeb0:	429a      	cmp	r2, r3
 801eeb2:	f040 8148 	bne.w	801f146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	685b      	ldr	r3, [r3, #4]
 801eeba:	2b01      	cmp	r3, #1
 801eebc:	d00b      	beq.n	801eed6 <HAL_GPIO_Init+0x5a>
 801eebe:	683b      	ldr	r3, [r7, #0]
 801eec0:	685b      	ldr	r3, [r3, #4]
 801eec2:	2b02      	cmp	r3, #2
 801eec4:	d007      	beq.n	801eed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801eec6:	683b      	ldr	r3, [r7, #0]
 801eec8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801eeca:	2b11      	cmp	r3, #17
 801eecc:	d003      	beq.n	801eed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801eece:	683b      	ldr	r3, [r7, #0]
 801eed0:	685b      	ldr	r3, [r3, #4]
 801eed2:	2b12      	cmp	r3, #18
 801eed4:	d130      	bne.n	801ef38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	689b      	ldr	r3, [r3, #8]
 801eeda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801eedc:	69fb      	ldr	r3, [r7, #28]
 801eede:	005b      	lsls	r3, r3, #1
 801eee0:	2203      	movs	r2, #3
 801eee2:	fa02 f303 	lsl.w	r3, r2, r3
 801eee6:	43db      	mvns	r3, r3
 801eee8:	69ba      	ldr	r2, [r7, #24]
 801eeea:	4013      	ands	r3, r2
 801eeec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801eeee:	683b      	ldr	r3, [r7, #0]
 801eef0:	68da      	ldr	r2, [r3, #12]
 801eef2:	69fb      	ldr	r3, [r7, #28]
 801eef4:	005b      	lsls	r3, r3, #1
 801eef6:	fa02 f303 	lsl.w	r3, r2, r3
 801eefa:	69ba      	ldr	r2, [r7, #24]
 801eefc:	4313      	orrs	r3, r2
 801eefe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	69ba      	ldr	r2, [r7, #24]
 801ef04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	685b      	ldr	r3, [r3, #4]
 801ef0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801ef0c:	2201      	movs	r2, #1
 801ef0e:	69fb      	ldr	r3, [r7, #28]
 801ef10:	fa02 f303 	lsl.w	r3, r2, r3
 801ef14:	43db      	mvns	r3, r3
 801ef16:	69ba      	ldr	r2, [r7, #24]
 801ef18:	4013      	ands	r3, r2
 801ef1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801ef1c:	683b      	ldr	r3, [r7, #0]
 801ef1e:	685b      	ldr	r3, [r3, #4]
 801ef20:	091b      	lsrs	r3, r3, #4
 801ef22:	f003 0201 	and.w	r2, r3, #1
 801ef26:	69fb      	ldr	r3, [r7, #28]
 801ef28:	fa02 f303 	lsl.w	r3, r2, r3
 801ef2c:	69ba      	ldr	r2, [r7, #24]
 801ef2e:	4313      	orrs	r3, r2
 801ef30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	69ba      	ldr	r2, [r7, #24]
 801ef36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	68db      	ldr	r3, [r3, #12]
 801ef3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801ef3e:	69fb      	ldr	r3, [r7, #28]
 801ef40:	005b      	lsls	r3, r3, #1
 801ef42:	2203      	movs	r2, #3
 801ef44:	fa02 f303 	lsl.w	r3, r2, r3
 801ef48:	43db      	mvns	r3, r3
 801ef4a:	69ba      	ldr	r2, [r7, #24]
 801ef4c:	4013      	ands	r3, r2
 801ef4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ef50:	683b      	ldr	r3, [r7, #0]
 801ef52:	689a      	ldr	r2, [r3, #8]
 801ef54:	69fb      	ldr	r3, [r7, #28]
 801ef56:	005b      	lsls	r3, r3, #1
 801ef58:	fa02 f303 	lsl.w	r3, r2, r3
 801ef5c:	69ba      	ldr	r2, [r7, #24]
 801ef5e:	4313      	orrs	r3, r2
 801ef60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	69ba      	ldr	r2, [r7, #24]
 801ef66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801ef68:	683b      	ldr	r3, [r7, #0]
 801ef6a:	685b      	ldr	r3, [r3, #4]
 801ef6c:	2b02      	cmp	r3, #2
 801ef6e:	d003      	beq.n	801ef78 <HAL_GPIO_Init+0xfc>
 801ef70:	683b      	ldr	r3, [r7, #0]
 801ef72:	685b      	ldr	r3, [r3, #4]
 801ef74:	2b12      	cmp	r3, #18
 801ef76:	d123      	bne.n	801efc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ef78:	69fb      	ldr	r3, [r7, #28]
 801ef7a:	08da      	lsrs	r2, r3, #3
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	3208      	adds	r2, #8
 801ef80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ef84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801ef86:	69fb      	ldr	r3, [r7, #28]
 801ef88:	f003 0307 	and.w	r3, r3, #7
 801ef8c:	009b      	lsls	r3, r3, #2
 801ef8e:	220f      	movs	r2, #15
 801ef90:	fa02 f303 	lsl.w	r3, r2, r3
 801ef94:	43db      	mvns	r3, r3
 801ef96:	69ba      	ldr	r2, [r7, #24]
 801ef98:	4013      	ands	r3, r2
 801ef9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801ef9c:	683b      	ldr	r3, [r7, #0]
 801ef9e:	691a      	ldr	r2, [r3, #16]
 801efa0:	69fb      	ldr	r3, [r7, #28]
 801efa2:	f003 0307 	and.w	r3, r3, #7
 801efa6:	009b      	lsls	r3, r3, #2
 801efa8:	fa02 f303 	lsl.w	r3, r2, r3
 801efac:	69ba      	ldr	r2, [r7, #24]
 801efae:	4313      	orrs	r3, r2
 801efb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801efb2:	69fb      	ldr	r3, [r7, #28]
 801efb4:	08da      	lsrs	r2, r3, #3
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	3208      	adds	r2, #8
 801efba:	69b9      	ldr	r1, [r7, #24]
 801efbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801efc6:	69fb      	ldr	r3, [r7, #28]
 801efc8:	005b      	lsls	r3, r3, #1
 801efca:	2203      	movs	r2, #3
 801efcc:	fa02 f303 	lsl.w	r3, r2, r3
 801efd0:	43db      	mvns	r3, r3
 801efd2:	69ba      	ldr	r2, [r7, #24]
 801efd4:	4013      	ands	r3, r2
 801efd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801efd8:	683b      	ldr	r3, [r7, #0]
 801efda:	685b      	ldr	r3, [r3, #4]
 801efdc:	f003 0203 	and.w	r2, r3, #3
 801efe0:	69fb      	ldr	r3, [r7, #28]
 801efe2:	005b      	lsls	r3, r3, #1
 801efe4:	fa02 f303 	lsl.w	r3, r2, r3
 801efe8:	69ba      	ldr	r2, [r7, #24]
 801efea:	4313      	orrs	r3, r2
 801efec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	69ba      	ldr	r2, [r7, #24]
 801eff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801eff4:	683b      	ldr	r3, [r7, #0]
 801eff6:	685b      	ldr	r3, [r3, #4]
 801eff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801effc:	2b00      	cmp	r3, #0
 801effe:	f000 80a2 	beq.w	801f146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f002:	2300      	movs	r3, #0
 801f004:	60fb      	str	r3, [r7, #12]
 801f006:	4b57      	ldr	r3, [pc, #348]	; (801f164 <HAL_GPIO_Init+0x2e8>)
 801f008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f00a:	4a56      	ldr	r2, [pc, #344]	; (801f164 <HAL_GPIO_Init+0x2e8>)
 801f00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f010:	6453      	str	r3, [r2, #68]	; 0x44
 801f012:	4b54      	ldr	r3, [pc, #336]	; (801f164 <HAL_GPIO_Init+0x2e8>)
 801f014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f01a:	60fb      	str	r3, [r7, #12]
 801f01c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801f01e:	4a52      	ldr	r2, [pc, #328]	; (801f168 <HAL_GPIO_Init+0x2ec>)
 801f020:	69fb      	ldr	r3, [r7, #28]
 801f022:	089b      	lsrs	r3, r3, #2
 801f024:	3302      	adds	r3, #2
 801f026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f02a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801f02c:	69fb      	ldr	r3, [r7, #28]
 801f02e:	f003 0303 	and.w	r3, r3, #3
 801f032:	009b      	lsls	r3, r3, #2
 801f034:	220f      	movs	r2, #15
 801f036:	fa02 f303 	lsl.w	r3, r2, r3
 801f03a:	43db      	mvns	r3, r3
 801f03c:	69ba      	ldr	r2, [r7, #24]
 801f03e:	4013      	ands	r3, r2
 801f040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	4a49      	ldr	r2, [pc, #292]	; (801f16c <HAL_GPIO_Init+0x2f0>)
 801f046:	4293      	cmp	r3, r2
 801f048:	d019      	beq.n	801f07e <HAL_GPIO_Init+0x202>
 801f04a:	687b      	ldr	r3, [r7, #4]
 801f04c:	4a48      	ldr	r2, [pc, #288]	; (801f170 <HAL_GPIO_Init+0x2f4>)
 801f04e:	4293      	cmp	r3, r2
 801f050:	d013      	beq.n	801f07a <HAL_GPIO_Init+0x1fe>
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	4a47      	ldr	r2, [pc, #284]	; (801f174 <HAL_GPIO_Init+0x2f8>)
 801f056:	4293      	cmp	r3, r2
 801f058:	d00d      	beq.n	801f076 <HAL_GPIO_Init+0x1fa>
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	4a46      	ldr	r2, [pc, #280]	; (801f178 <HAL_GPIO_Init+0x2fc>)
 801f05e:	4293      	cmp	r3, r2
 801f060:	d007      	beq.n	801f072 <HAL_GPIO_Init+0x1f6>
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	4a45      	ldr	r2, [pc, #276]	; (801f17c <HAL_GPIO_Init+0x300>)
 801f066:	4293      	cmp	r3, r2
 801f068:	d101      	bne.n	801f06e <HAL_GPIO_Init+0x1f2>
 801f06a:	2304      	movs	r3, #4
 801f06c:	e008      	b.n	801f080 <HAL_GPIO_Init+0x204>
 801f06e:	2307      	movs	r3, #7
 801f070:	e006      	b.n	801f080 <HAL_GPIO_Init+0x204>
 801f072:	2303      	movs	r3, #3
 801f074:	e004      	b.n	801f080 <HAL_GPIO_Init+0x204>
 801f076:	2302      	movs	r3, #2
 801f078:	e002      	b.n	801f080 <HAL_GPIO_Init+0x204>
 801f07a:	2301      	movs	r3, #1
 801f07c:	e000      	b.n	801f080 <HAL_GPIO_Init+0x204>
 801f07e:	2300      	movs	r3, #0
 801f080:	69fa      	ldr	r2, [r7, #28]
 801f082:	f002 0203 	and.w	r2, r2, #3
 801f086:	0092      	lsls	r2, r2, #2
 801f088:	4093      	lsls	r3, r2
 801f08a:	69ba      	ldr	r2, [r7, #24]
 801f08c:	4313      	orrs	r3, r2
 801f08e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801f090:	4935      	ldr	r1, [pc, #212]	; (801f168 <HAL_GPIO_Init+0x2ec>)
 801f092:	69fb      	ldr	r3, [r7, #28]
 801f094:	089b      	lsrs	r3, r3, #2
 801f096:	3302      	adds	r3, #2
 801f098:	69ba      	ldr	r2, [r7, #24]
 801f09a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801f09e:	4b38      	ldr	r3, [pc, #224]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f0a4:	693b      	ldr	r3, [r7, #16]
 801f0a6:	43db      	mvns	r3, r3
 801f0a8:	69ba      	ldr	r2, [r7, #24]
 801f0aa:	4013      	ands	r3, r2
 801f0ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801f0ae:	683b      	ldr	r3, [r7, #0]
 801f0b0:	685b      	ldr	r3, [r3, #4]
 801f0b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f0b6:	2b00      	cmp	r3, #0
 801f0b8:	d003      	beq.n	801f0c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801f0ba:	69ba      	ldr	r2, [r7, #24]
 801f0bc:	693b      	ldr	r3, [r7, #16]
 801f0be:	4313      	orrs	r3, r2
 801f0c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801f0c2:	4a2f      	ldr	r2, [pc, #188]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f0c4:	69bb      	ldr	r3, [r7, #24]
 801f0c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801f0c8:	4b2d      	ldr	r3, [pc, #180]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f0ca:	685b      	ldr	r3, [r3, #4]
 801f0cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f0ce:	693b      	ldr	r3, [r7, #16]
 801f0d0:	43db      	mvns	r3, r3
 801f0d2:	69ba      	ldr	r2, [r7, #24]
 801f0d4:	4013      	ands	r3, r2
 801f0d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801f0d8:	683b      	ldr	r3, [r7, #0]
 801f0da:	685b      	ldr	r3, [r3, #4]
 801f0dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d003      	beq.n	801f0ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801f0e4:	69ba      	ldr	r2, [r7, #24]
 801f0e6:	693b      	ldr	r3, [r7, #16]
 801f0e8:	4313      	orrs	r3, r2
 801f0ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801f0ec:	4a24      	ldr	r2, [pc, #144]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f0ee:	69bb      	ldr	r3, [r7, #24]
 801f0f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801f0f2:	4b23      	ldr	r3, [pc, #140]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f0f4:	689b      	ldr	r3, [r3, #8]
 801f0f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f0f8:	693b      	ldr	r3, [r7, #16]
 801f0fa:	43db      	mvns	r3, r3
 801f0fc:	69ba      	ldr	r2, [r7, #24]
 801f0fe:	4013      	ands	r3, r2
 801f100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	685b      	ldr	r3, [r3, #4]
 801f106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d003      	beq.n	801f116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801f10e:	69ba      	ldr	r2, [r7, #24]
 801f110:	693b      	ldr	r3, [r7, #16]
 801f112:	4313      	orrs	r3, r2
 801f114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801f116:	4a1a      	ldr	r2, [pc, #104]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f118:	69bb      	ldr	r3, [r7, #24]
 801f11a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801f11c:	4b18      	ldr	r3, [pc, #96]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f11e:	68db      	ldr	r3, [r3, #12]
 801f120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801f122:	693b      	ldr	r3, [r7, #16]
 801f124:	43db      	mvns	r3, r3
 801f126:	69ba      	ldr	r2, [r7, #24]
 801f128:	4013      	ands	r3, r2
 801f12a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801f12c:	683b      	ldr	r3, [r7, #0]
 801f12e:	685b      	ldr	r3, [r3, #4]
 801f130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f134:	2b00      	cmp	r3, #0
 801f136:	d003      	beq.n	801f140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801f138:	69ba      	ldr	r2, [r7, #24]
 801f13a:	693b      	ldr	r3, [r7, #16]
 801f13c:	4313      	orrs	r3, r2
 801f13e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801f140:	4a0f      	ldr	r2, [pc, #60]	; (801f180 <HAL_GPIO_Init+0x304>)
 801f142:	69bb      	ldr	r3, [r7, #24]
 801f144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f146:	69fb      	ldr	r3, [r7, #28]
 801f148:	3301      	adds	r3, #1
 801f14a:	61fb      	str	r3, [r7, #28]
 801f14c:	69fb      	ldr	r3, [r7, #28]
 801f14e:	2b0f      	cmp	r3, #15
 801f150:	f67f aea2 	bls.w	801ee98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801f154:	bf00      	nop
 801f156:	bf00      	nop
 801f158:	3724      	adds	r7, #36	; 0x24
 801f15a:	46bd      	mov	sp, r7
 801f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f160:	4770      	bx	lr
 801f162:	bf00      	nop
 801f164:	40023800 	.word	0x40023800
 801f168:	40013800 	.word	0x40013800
 801f16c:	40020000 	.word	0x40020000
 801f170:	40020400 	.word	0x40020400
 801f174:	40020800 	.word	0x40020800
 801f178:	40020c00 	.word	0x40020c00
 801f17c:	40021000 	.word	0x40021000
 801f180:	40013c00 	.word	0x40013c00

0801f184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801f184:	b480      	push	{r7}
 801f186:	b087      	sub	sp, #28
 801f188:	af00      	add	r7, sp, #0
 801f18a:	6078      	str	r0, [r7, #4]
 801f18c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801f18e:	2300      	movs	r3, #0
 801f190:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801f192:	2300      	movs	r3, #0
 801f194:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801f196:	2300      	movs	r3, #0
 801f198:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f19a:	2300      	movs	r3, #0
 801f19c:	617b      	str	r3, [r7, #20]
 801f19e:	e0bb      	b.n	801f318 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801f1a0:	2201      	movs	r2, #1
 801f1a2:	697b      	ldr	r3, [r7, #20]
 801f1a4:	fa02 f303 	lsl.w	r3, r2, r3
 801f1a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801f1aa:	683a      	ldr	r2, [r7, #0]
 801f1ac:	693b      	ldr	r3, [r7, #16]
 801f1ae:	4013      	ands	r3, r2
 801f1b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801f1b2:	68fa      	ldr	r2, [r7, #12]
 801f1b4:	693b      	ldr	r3, [r7, #16]
 801f1b6:	429a      	cmp	r2, r3
 801f1b8:	f040 80ab 	bne.w	801f312 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801f1bc:	4a5c      	ldr	r2, [pc, #368]	; (801f330 <HAL_GPIO_DeInit+0x1ac>)
 801f1be:	697b      	ldr	r3, [r7, #20]
 801f1c0:	089b      	lsrs	r3, r3, #2
 801f1c2:	3302      	adds	r3, #2
 801f1c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f1c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801f1ca:	697b      	ldr	r3, [r7, #20]
 801f1cc:	f003 0303 	and.w	r3, r3, #3
 801f1d0:	009b      	lsls	r3, r3, #2
 801f1d2:	220f      	movs	r2, #15
 801f1d4:	fa02 f303 	lsl.w	r3, r2, r3
 801f1d8:	68ba      	ldr	r2, [r7, #8]
 801f1da:	4013      	ands	r3, r2
 801f1dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	4a54      	ldr	r2, [pc, #336]	; (801f334 <HAL_GPIO_DeInit+0x1b0>)
 801f1e2:	4293      	cmp	r3, r2
 801f1e4:	d019      	beq.n	801f21a <HAL_GPIO_DeInit+0x96>
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	4a53      	ldr	r2, [pc, #332]	; (801f338 <HAL_GPIO_DeInit+0x1b4>)
 801f1ea:	4293      	cmp	r3, r2
 801f1ec:	d013      	beq.n	801f216 <HAL_GPIO_DeInit+0x92>
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	4a52      	ldr	r2, [pc, #328]	; (801f33c <HAL_GPIO_DeInit+0x1b8>)
 801f1f2:	4293      	cmp	r3, r2
 801f1f4:	d00d      	beq.n	801f212 <HAL_GPIO_DeInit+0x8e>
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	4a51      	ldr	r2, [pc, #324]	; (801f340 <HAL_GPIO_DeInit+0x1bc>)
 801f1fa:	4293      	cmp	r3, r2
 801f1fc:	d007      	beq.n	801f20e <HAL_GPIO_DeInit+0x8a>
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	4a50      	ldr	r2, [pc, #320]	; (801f344 <HAL_GPIO_DeInit+0x1c0>)
 801f202:	4293      	cmp	r3, r2
 801f204:	d101      	bne.n	801f20a <HAL_GPIO_DeInit+0x86>
 801f206:	2304      	movs	r3, #4
 801f208:	e008      	b.n	801f21c <HAL_GPIO_DeInit+0x98>
 801f20a:	2307      	movs	r3, #7
 801f20c:	e006      	b.n	801f21c <HAL_GPIO_DeInit+0x98>
 801f20e:	2303      	movs	r3, #3
 801f210:	e004      	b.n	801f21c <HAL_GPIO_DeInit+0x98>
 801f212:	2302      	movs	r3, #2
 801f214:	e002      	b.n	801f21c <HAL_GPIO_DeInit+0x98>
 801f216:	2301      	movs	r3, #1
 801f218:	e000      	b.n	801f21c <HAL_GPIO_DeInit+0x98>
 801f21a:	2300      	movs	r3, #0
 801f21c:	697a      	ldr	r2, [r7, #20]
 801f21e:	f002 0203 	and.w	r2, r2, #3
 801f222:	0092      	lsls	r2, r2, #2
 801f224:	4093      	lsls	r3, r2
 801f226:	68ba      	ldr	r2, [r7, #8]
 801f228:	429a      	cmp	r2, r3
 801f22a:	d132      	bne.n	801f292 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801f22c:	4b46      	ldr	r3, [pc, #280]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f22e:	681a      	ldr	r2, [r3, #0]
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	43db      	mvns	r3, r3
 801f234:	4944      	ldr	r1, [pc, #272]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f236:	4013      	ands	r3, r2
 801f238:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801f23a:	4b43      	ldr	r3, [pc, #268]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f23c:	685a      	ldr	r2, [r3, #4]
 801f23e:	68fb      	ldr	r3, [r7, #12]
 801f240:	43db      	mvns	r3, r3
 801f242:	4941      	ldr	r1, [pc, #260]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f244:	4013      	ands	r3, r2
 801f246:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801f248:	4b3f      	ldr	r3, [pc, #252]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f24a:	689a      	ldr	r2, [r3, #8]
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	43db      	mvns	r3, r3
 801f250:	493d      	ldr	r1, [pc, #244]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f252:	4013      	ands	r3, r2
 801f254:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801f256:	4b3c      	ldr	r3, [pc, #240]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f258:	68da      	ldr	r2, [r3, #12]
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	43db      	mvns	r3, r3
 801f25e:	493a      	ldr	r1, [pc, #232]	; (801f348 <HAL_GPIO_DeInit+0x1c4>)
 801f260:	4013      	ands	r3, r2
 801f262:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801f264:	697b      	ldr	r3, [r7, #20]
 801f266:	f003 0303 	and.w	r3, r3, #3
 801f26a:	009b      	lsls	r3, r3, #2
 801f26c:	220f      	movs	r2, #15
 801f26e:	fa02 f303 	lsl.w	r3, r2, r3
 801f272:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801f274:	4a2e      	ldr	r2, [pc, #184]	; (801f330 <HAL_GPIO_DeInit+0x1ac>)
 801f276:	697b      	ldr	r3, [r7, #20]
 801f278:	089b      	lsrs	r3, r3, #2
 801f27a:	3302      	adds	r3, #2
 801f27c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f280:	68bb      	ldr	r3, [r7, #8]
 801f282:	43da      	mvns	r2, r3
 801f284:	482a      	ldr	r0, [pc, #168]	; (801f330 <HAL_GPIO_DeInit+0x1ac>)
 801f286:	697b      	ldr	r3, [r7, #20]
 801f288:	089b      	lsrs	r3, r3, #2
 801f28a:	400a      	ands	r2, r1
 801f28c:	3302      	adds	r3, #2
 801f28e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801f292:	687b      	ldr	r3, [r7, #4]
 801f294:	681a      	ldr	r2, [r3, #0]
 801f296:	697b      	ldr	r3, [r7, #20]
 801f298:	005b      	lsls	r3, r3, #1
 801f29a:	2103      	movs	r1, #3
 801f29c:	fa01 f303 	lsl.w	r3, r1, r3
 801f2a0:	43db      	mvns	r3, r3
 801f2a2:	401a      	ands	r2, r3
 801f2a4:	687b      	ldr	r3, [r7, #4]
 801f2a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801f2a8:	697b      	ldr	r3, [r7, #20]
 801f2aa:	08da      	lsrs	r2, r3, #3
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	3208      	adds	r2, #8
 801f2b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f2b4:	697b      	ldr	r3, [r7, #20]
 801f2b6:	f003 0307 	and.w	r3, r3, #7
 801f2ba:	009b      	lsls	r3, r3, #2
 801f2bc:	220f      	movs	r2, #15
 801f2be:	fa02 f303 	lsl.w	r3, r2, r3
 801f2c2:	43db      	mvns	r3, r3
 801f2c4:	697a      	ldr	r2, [r7, #20]
 801f2c6:	08d2      	lsrs	r2, r2, #3
 801f2c8:	4019      	ands	r1, r3
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	3208      	adds	r2, #8
 801f2ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	68da      	ldr	r2, [r3, #12]
 801f2d6:	697b      	ldr	r3, [r7, #20]
 801f2d8:	005b      	lsls	r3, r3, #1
 801f2da:	2103      	movs	r1, #3
 801f2dc:	fa01 f303 	lsl.w	r3, r1, r3
 801f2e0:	43db      	mvns	r3, r3
 801f2e2:	401a      	ands	r2, r3
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	685a      	ldr	r2, [r3, #4]
 801f2ec:	2101      	movs	r1, #1
 801f2ee:	697b      	ldr	r3, [r7, #20]
 801f2f0:	fa01 f303 	lsl.w	r3, r1, r3
 801f2f4:	43db      	mvns	r3, r3
 801f2f6:	401a      	ands	r2, r3
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	689a      	ldr	r2, [r3, #8]
 801f300:	697b      	ldr	r3, [r7, #20]
 801f302:	005b      	lsls	r3, r3, #1
 801f304:	2103      	movs	r1, #3
 801f306:	fa01 f303 	lsl.w	r3, r1, r3
 801f30a:	43db      	mvns	r3, r3
 801f30c:	401a      	ands	r2, r3
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f312:	697b      	ldr	r3, [r7, #20]
 801f314:	3301      	adds	r3, #1
 801f316:	617b      	str	r3, [r7, #20]
 801f318:	697b      	ldr	r3, [r7, #20]
 801f31a:	2b0f      	cmp	r3, #15
 801f31c:	f67f af40 	bls.w	801f1a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801f320:	bf00      	nop
 801f322:	bf00      	nop
 801f324:	371c      	adds	r7, #28
 801f326:	46bd      	mov	sp, r7
 801f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f32c:	4770      	bx	lr
 801f32e:	bf00      	nop
 801f330:	40013800 	.word	0x40013800
 801f334:	40020000 	.word	0x40020000
 801f338:	40020400 	.word	0x40020400
 801f33c:	40020800 	.word	0x40020800
 801f340:	40020c00 	.word	0x40020c00
 801f344:	40021000 	.word	0x40021000
 801f348:	40013c00 	.word	0x40013c00

0801f34c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801f34c:	b480      	push	{r7}
 801f34e:	b085      	sub	sp, #20
 801f350:	af00      	add	r7, sp, #0
 801f352:	6078      	str	r0, [r7, #4]
 801f354:	460b      	mov	r3, r1
 801f356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	691a      	ldr	r2, [r3, #16]
 801f35c:	887b      	ldrh	r3, [r7, #2]
 801f35e:	4013      	ands	r3, r2
 801f360:	2b00      	cmp	r3, #0
 801f362:	d002      	beq.n	801f36a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801f364:	2301      	movs	r3, #1
 801f366:	73fb      	strb	r3, [r7, #15]
 801f368:	e001      	b.n	801f36e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801f36a:	2300      	movs	r3, #0
 801f36c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801f36e:	7bfb      	ldrb	r3, [r7, #15]
}
 801f370:	4618      	mov	r0, r3
 801f372:	3714      	adds	r7, #20
 801f374:	46bd      	mov	sp, r7
 801f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37a:	4770      	bx	lr

0801f37c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801f37c:	b480      	push	{r7}
 801f37e:	b083      	sub	sp, #12
 801f380:	af00      	add	r7, sp, #0
 801f382:	6078      	str	r0, [r7, #4]
 801f384:	460b      	mov	r3, r1
 801f386:	807b      	strh	r3, [r7, #2]
 801f388:	4613      	mov	r3, r2
 801f38a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801f38c:	787b      	ldrb	r3, [r7, #1]
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d003      	beq.n	801f39a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801f392:	887a      	ldrh	r2, [r7, #2]
 801f394:	687b      	ldr	r3, [r7, #4]
 801f396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801f398:	e003      	b.n	801f3a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801f39a:	887b      	ldrh	r3, [r7, #2]
 801f39c:	041a      	lsls	r2, r3, #16
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	619a      	str	r2, [r3, #24]
}
 801f3a2:	bf00      	nop
 801f3a4:	370c      	adds	r7, #12
 801f3a6:	46bd      	mov	sp, r7
 801f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ac:	4770      	bx	lr

0801f3ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801f3ae:	b480      	push	{r7}
 801f3b0:	b083      	sub	sp, #12
 801f3b2:	af00      	add	r7, sp, #0
 801f3b4:	6078      	str	r0, [r7, #4]
 801f3b6:	460b      	mov	r3, r1
 801f3b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	695a      	ldr	r2, [r3, #20]
 801f3be:	887b      	ldrh	r3, [r7, #2]
 801f3c0:	401a      	ands	r2, r3
 801f3c2:	887b      	ldrh	r3, [r7, #2]
 801f3c4:	429a      	cmp	r2, r3
 801f3c6:	d104      	bne.n	801f3d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801f3c8:	887b      	ldrh	r3, [r7, #2]
 801f3ca:	041a      	lsls	r2, r3, #16
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 801f3d0:	e002      	b.n	801f3d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 801f3d2:	887a      	ldrh	r2, [r7, #2]
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	619a      	str	r2, [r3, #24]
}
 801f3d8:	bf00      	nop
 801f3da:	370c      	adds	r7, #12
 801f3dc:	46bd      	mov	sp, r7
 801f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3e2:	4770      	bx	lr

0801f3e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b086      	sub	sp, #24
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d101      	bne.n	801f3f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f3f2:	2301      	movs	r3, #1
 801f3f4:	e25e      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	f003 0301 	and.w	r3, r3, #1
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d075      	beq.n	801f4ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f402:	4b88      	ldr	r3, [pc, #544]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f404:	689b      	ldr	r3, [r3, #8]
 801f406:	f003 030c 	and.w	r3, r3, #12
 801f40a:	2b04      	cmp	r3, #4
 801f40c:	d00c      	beq.n	801f428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f40e:	4b85      	ldr	r3, [pc, #532]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f410:	689b      	ldr	r3, [r3, #8]
 801f412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f416:	2b08      	cmp	r3, #8
 801f418:	d112      	bne.n	801f440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f41a:	4b82      	ldr	r3, [pc, #520]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f41c:	685b      	ldr	r3, [r3, #4]
 801f41e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f426:	d10b      	bne.n	801f440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f428:	4b7e      	ldr	r3, [pc, #504]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f430:	2b00      	cmp	r3, #0
 801f432:	d05b      	beq.n	801f4ec <HAL_RCC_OscConfig+0x108>
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	685b      	ldr	r3, [r3, #4]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d157      	bne.n	801f4ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f43c:	2301      	movs	r3, #1
 801f43e:	e239      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	685b      	ldr	r3, [r3, #4]
 801f444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f448:	d106      	bne.n	801f458 <HAL_RCC_OscConfig+0x74>
 801f44a:	4b76      	ldr	r3, [pc, #472]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	4a75      	ldr	r2, [pc, #468]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f454:	6013      	str	r3, [r2, #0]
 801f456:	e01d      	b.n	801f494 <HAL_RCC_OscConfig+0xb0>
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	685b      	ldr	r3, [r3, #4]
 801f45c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f460:	d10c      	bne.n	801f47c <HAL_RCC_OscConfig+0x98>
 801f462:	4b70      	ldr	r3, [pc, #448]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	4a6f      	ldr	r2, [pc, #444]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f46c:	6013      	str	r3, [r2, #0]
 801f46e:	4b6d      	ldr	r3, [pc, #436]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	4a6c      	ldr	r2, [pc, #432]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f478:	6013      	str	r3, [r2, #0]
 801f47a:	e00b      	b.n	801f494 <HAL_RCC_OscConfig+0xb0>
 801f47c:	4b69      	ldr	r3, [pc, #420]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	4a68      	ldr	r2, [pc, #416]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f486:	6013      	str	r3, [r2, #0]
 801f488:	4b66      	ldr	r3, [pc, #408]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	4a65      	ldr	r2, [pc, #404]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f48e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d013      	beq.n	801f4c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f49c:	f7fd ff5c 	bl	801d358 <HAL_GetTick>
 801f4a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f4a2:	e008      	b.n	801f4b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f4a4:	f7fd ff58 	bl	801d358 <HAL_GetTick>
 801f4a8:	4602      	mov	r2, r0
 801f4aa:	693b      	ldr	r3, [r7, #16]
 801f4ac:	1ad3      	subs	r3, r2, r3
 801f4ae:	2b64      	cmp	r3, #100	; 0x64
 801f4b0:	d901      	bls.n	801f4b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f4b2:	2303      	movs	r3, #3
 801f4b4:	e1fe      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f4b6:	4b5b      	ldr	r3, [pc, #364]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d0f0      	beq.n	801f4a4 <HAL_RCC_OscConfig+0xc0>
 801f4c2:	e014      	b.n	801f4ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f4c4:	f7fd ff48 	bl	801d358 <HAL_GetTick>
 801f4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f4ca:	e008      	b.n	801f4de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f4cc:	f7fd ff44 	bl	801d358 <HAL_GetTick>
 801f4d0:	4602      	mov	r2, r0
 801f4d2:	693b      	ldr	r3, [r7, #16]
 801f4d4:	1ad3      	subs	r3, r2, r3
 801f4d6:	2b64      	cmp	r3, #100	; 0x64
 801f4d8:	d901      	bls.n	801f4de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f4da:	2303      	movs	r3, #3
 801f4dc:	e1ea      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f4de:	4b51      	ldr	r3, [pc, #324]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f4e0:	681b      	ldr	r3, [r3, #0]
 801f4e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f4e6:	2b00      	cmp	r3, #0
 801f4e8:	d1f0      	bne.n	801f4cc <HAL_RCC_OscConfig+0xe8>
 801f4ea:	e000      	b.n	801f4ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f4ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	f003 0302 	and.w	r3, r3, #2
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d063      	beq.n	801f5c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f4fa:	4b4a      	ldr	r3, [pc, #296]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f4fc:	689b      	ldr	r3, [r3, #8]
 801f4fe:	f003 030c 	and.w	r3, r3, #12
 801f502:	2b00      	cmp	r3, #0
 801f504:	d00b      	beq.n	801f51e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f506:	4b47      	ldr	r3, [pc, #284]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f508:	689b      	ldr	r3, [r3, #8]
 801f50a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f50e:	2b08      	cmp	r3, #8
 801f510:	d11c      	bne.n	801f54c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f512:	4b44      	ldr	r3, [pc, #272]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f514:	685b      	ldr	r3, [r3, #4]
 801f516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d116      	bne.n	801f54c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f51e:	4b41      	ldr	r3, [pc, #260]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	f003 0302 	and.w	r3, r3, #2
 801f526:	2b00      	cmp	r3, #0
 801f528:	d005      	beq.n	801f536 <HAL_RCC_OscConfig+0x152>
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	68db      	ldr	r3, [r3, #12]
 801f52e:	2b01      	cmp	r3, #1
 801f530:	d001      	beq.n	801f536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f532:	2301      	movs	r3, #1
 801f534:	e1be      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f536:	4b3b      	ldr	r3, [pc, #236]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	691b      	ldr	r3, [r3, #16]
 801f542:	00db      	lsls	r3, r3, #3
 801f544:	4937      	ldr	r1, [pc, #220]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f546:	4313      	orrs	r3, r2
 801f548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f54a:	e03a      	b.n	801f5c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	68db      	ldr	r3, [r3, #12]
 801f550:	2b00      	cmp	r3, #0
 801f552:	d020      	beq.n	801f596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f554:	4b34      	ldr	r3, [pc, #208]	; (801f628 <HAL_RCC_OscConfig+0x244>)
 801f556:	2201      	movs	r2, #1
 801f558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f55a:	f7fd fefd 	bl	801d358 <HAL_GetTick>
 801f55e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f560:	e008      	b.n	801f574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f562:	f7fd fef9 	bl	801d358 <HAL_GetTick>
 801f566:	4602      	mov	r2, r0
 801f568:	693b      	ldr	r3, [r7, #16]
 801f56a:	1ad3      	subs	r3, r2, r3
 801f56c:	2b02      	cmp	r3, #2
 801f56e:	d901      	bls.n	801f574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f570:	2303      	movs	r3, #3
 801f572:	e19f      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f574:	4b2b      	ldr	r3, [pc, #172]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	f003 0302 	and.w	r3, r3, #2
 801f57c:	2b00      	cmp	r3, #0
 801f57e:	d0f0      	beq.n	801f562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f580:	4b28      	ldr	r3, [pc, #160]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	691b      	ldr	r3, [r3, #16]
 801f58c:	00db      	lsls	r3, r3, #3
 801f58e:	4925      	ldr	r1, [pc, #148]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f590:	4313      	orrs	r3, r2
 801f592:	600b      	str	r3, [r1, #0]
 801f594:	e015      	b.n	801f5c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f596:	4b24      	ldr	r3, [pc, #144]	; (801f628 <HAL_RCC_OscConfig+0x244>)
 801f598:	2200      	movs	r2, #0
 801f59a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f59c:	f7fd fedc 	bl	801d358 <HAL_GetTick>
 801f5a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f5a2:	e008      	b.n	801f5b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f5a4:	f7fd fed8 	bl	801d358 <HAL_GetTick>
 801f5a8:	4602      	mov	r2, r0
 801f5aa:	693b      	ldr	r3, [r7, #16]
 801f5ac:	1ad3      	subs	r3, r2, r3
 801f5ae:	2b02      	cmp	r3, #2
 801f5b0:	d901      	bls.n	801f5b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f5b2:	2303      	movs	r3, #3
 801f5b4:	e17e      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f5b6:	4b1b      	ldr	r3, [pc, #108]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f5b8:	681b      	ldr	r3, [r3, #0]
 801f5ba:	f003 0302 	and.w	r3, r3, #2
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d1f0      	bne.n	801f5a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	f003 0308 	and.w	r3, r3, #8
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d036      	beq.n	801f63c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	695b      	ldr	r3, [r3, #20]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d016      	beq.n	801f604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f5d6:	4b15      	ldr	r3, [pc, #84]	; (801f62c <HAL_RCC_OscConfig+0x248>)
 801f5d8:	2201      	movs	r2, #1
 801f5da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f5dc:	f7fd febc 	bl	801d358 <HAL_GetTick>
 801f5e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f5e2:	e008      	b.n	801f5f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f5e4:	f7fd feb8 	bl	801d358 <HAL_GetTick>
 801f5e8:	4602      	mov	r2, r0
 801f5ea:	693b      	ldr	r3, [r7, #16]
 801f5ec:	1ad3      	subs	r3, r2, r3
 801f5ee:	2b02      	cmp	r3, #2
 801f5f0:	d901      	bls.n	801f5f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f5f2:	2303      	movs	r3, #3
 801f5f4:	e15e      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f5f6:	4b0b      	ldr	r3, [pc, #44]	; (801f624 <HAL_RCC_OscConfig+0x240>)
 801f5f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5fa:	f003 0302 	and.w	r3, r3, #2
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d0f0      	beq.n	801f5e4 <HAL_RCC_OscConfig+0x200>
 801f602:	e01b      	b.n	801f63c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f604:	4b09      	ldr	r3, [pc, #36]	; (801f62c <HAL_RCC_OscConfig+0x248>)
 801f606:	2200      	movs	r2, #0
 801f608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f60a:	f7fd fea5 	bl	801d358 <HAL_GetTick>
 801f60e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f610:	e00e      	b.n	801f630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f612:	f7fd fea1 	bl	801d358 <HAL_GetTick>
 801f616:	4602      	mov	r2, r0
 801f618:	693b      	ldr	r3, [r7, #16]
 801f61a:	1ad3      	subs	r3, r2, r3
 801f61c:	2b02      	cmp	r3, #2
 801f61e:	d907      	bls.n	801f630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801f620:	2303      	movs	r3, #3
 801f622:	e147      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
 801f624:	40023800 	.word	0x40023800
 801f628:	42470000 	.word	0x42470000
 801f62c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f630:	4b88      	ldr	r3, [pc, #544]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f634:	f003 0302 	and.w	r3, r3, #2
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d1ea      	bne.n	801f612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	f003 0304 	and.w	r3, r3, #4
 801f644:	2b00      	cmp	r3, #0
 801f646:	f000 8097 	beq.w	801f778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f64a:	2300      	movs	r3, #0
 801f64c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f64e:	4b81      	ldr	r3, [pc, #516]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f656:	2b00      	cmp	r3, #0
 801f658:	d10f      	bne.n	801f67a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f65a:	2300      	movs	r3, #0
 801f65c:	60bb      	str	r3, [r7, #8]
 801f65e:	4b7d      	ldr	r3, [pc, #500]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f662:	4a7c      	ldr	r2, [pc, #496]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f668:	6413      	str	r3, [r2, #64]	; 0x40
 801f66a:	4b7a      	ldr	r3, [pc, #488]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f672:	60bb      	str	r3, [r7, #8]
 801f674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f676:	2301      	movs	r3, #1
 801f678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f67a:	4b77      	ldr	r3, [pc, #476]	; (801f858 <HAL_RCC_OscConfig+0x474>)
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f682:	2b00      	cmp	r3, #0
 801f684:	d118      	bne.n	801f6b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f686:	4b74      	ldr	r3, [pc, #464]	; (801f858 <HAL_RCC_OscConfig+0x474>)
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	4a73      	ldr	r2, [pc, #460]	; (801f858 <HAL_RCC_OscConfig+0x474>)
 801f68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f692:	f7fd fe61 	bl	801d358 <HAL_GetTick>
 801f696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f698:	e008      	b.n	801f6ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f69a:	f7fd fe5d 	bl	801d358 <HAL_GetTick>
 801f69e:	4602      	mov	r2, r0
 801f6a0:	693b      	ldr	r3, [r7, #16]
 801f6a2:	1ad3      	subs	r3, r2, r3
 801f6a4:	2b02      	cmp	r3, #2
 801f6a6:	d901      	bls.n	801f6ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 801f6a8:	2303      	movs	r3, #3
 801f6aa:	e103      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f6ac:	4b6a      	ldr	r3, [pc, #424]	; (801f858 <HAL_RCC_OscConfig+0x474>)
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d0f0      	beq.n	801f69a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	689b      	ldr	r3, [r3, #8]
 801f6bc:	2b01      	cmp	r3, #1
 801f6be:	d106      	bne.n	801f6ce <HAL_RCC_OscConfig+0x2ea>
 801f6c0:	4b64      	ldr	r3, [pc, #400]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6c4:	4a63      	ldr	r2, [pc, #396]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6c6:	f043 0301 	orr.w	r3, r3, #1
 801f6ca:	6713      	str	r3, [r2, #112]	; 0x70
 801f6cc:	e01c      	b.n	801f708 <HAL_RCC_OscConfig+0x324>
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	689b      	ldr	r3, [r3, #8]
 801f6d2:	2b05      	cmp	r3, #5
 801f6d4:	d10c      	bne.n	801f6f0 <HAL_RCC_OscConfig+0x30c>
 801f6d6:	4b5f      	ldr	r3, [pc, #380]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6da:	4a5e      	ldr	r2, [pc, #376]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6dc:	f043 0304 	orr.w	r3, r3, #4
 801f6e0:	6713      	str	r3, [r2, #112]	; 0x70
 801f6e2:	4b5c      	ldr	r3, [pc, #368]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6e6:	4a5b      	ldr	r2, [pc, #364]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6e8:	f043 0301 	orr.w	r3, r3, #1
 801f6ec:	6713      	str	r3, [r2, #112]	; 0x70
 801f6ee:	e00b      	b.n	801f708 <HAL_RCC_OscConfig+0x324>
 801f6f0:	4b58      	ldr	r3, [pc, #352]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f6f4:	4a57      	ldr	r2, [pc, #348]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6f6:	f023 0301 	bic.w	r3, r3, #1
 801f6fa:	6713      	str	r3, [r2, #112]	; 0x70
 801f6fc:	4b55      	ldr	r3, [pc, #340]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f700:	4a54      	ldr	r2, [pc, #336]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f702:	f023 0304 	bic.w	r3, r3, #4
 801f706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	689b      	ldr	r3, [r3, #8]
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d015      	beq.n	801f73c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f710:	f7fd fe22 	bl	801d358 <HAL_GetTick>
 801f714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f716:	e00a      	b.n	801f72e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f718:	f7fd fe1e 	bl	801d358 <HAL_GetTick>
 801f71c:	4602      	mov	r2, r0
 801f71e:	693b      	ldr	r3, [r7, #16]
 801f720:	1ad3      	subs	r3, r2, r3
 801f722:	f241 3288 	movw	r2, #5000	; 0x1388
 801f726:	4293      	cmp	r3, r2
 801f728:	d901      	bls.n	801f72e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801f72a:	2303      	movs	r3, #3
 801f72c:	e0c2      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f72e:	4b49      	ldr	r3, [pc, #292]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f732:	f003 0302 	and.w	r3, r3, #2
 801f736:	2b00      	cmp	r3, #0
 801f738:	d0ee      	beq.n	801f718 <HAL_RCC_OscConfig+0x334>
 801f73a:	e014      	b.n	801f766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f73c:	f7fd fe0c 	bl	801d358 <HAL_GetTick>
 801f740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f742:	e00a      	b.n	801f75a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f744:	f7fd fe08 	bl	801d358 <HAL_GetTick>
 801f748:	4602      	mov	r2, r0
 801f74a:	693b      	ldr	r3, [r7, #16]
 801f74c:	1ad3      	subs	r3, r2, r3
 801f74e:	f241 3288 	movw	r2, #5000	; 0x1388
 801f752:	4293      	cmp	r3, r2
 801f754:	d901      	bls.n	801f75a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 801f756:	2303      	movs	r3, #3
 801f758:	e0ac      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f75a:	4b3e      	ldr	r3, [pc, #248]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f75e:	f003 0302 	and.w	r3, r3, #2
 801f762:	2b00      	cmp	r3, #0
 801f764:	d1ee      	bne.n	801f744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f766:	7dfb      	ldrb	r3, [r7, #23]
 801f768:	2b01      	cmp	r3, #1
 801f76a:	d105      	bne.n	801f778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f76c:	4b39      	ldr	r3, [pc, #228]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f770:	4a38      	ldr	r2, [pc, #224]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f778:	687b      	ldr	r3, [r7, #4]
 801f77a:	699b      	ldr	r3, [r3, #24]
 801f77c:	2b00      	cmp	r3, #0
 801f77e:	f000 8098 	beq.w	801f8b2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f782:	4b34      	ldr	r3, [pc, #208]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f784:	689b      	ldr	r3, [r3, #8]
 801f786:	f003 030c 	and.w	r3, r3, #12
 801f78a:	2b08      	cmp	r3, #8
 801f78c:	d05c      	beq.n	801f848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	699b      	ldr	r3, [r3, #24]
 801f792:	2b02      	cmp	r3, #2
 801f794:	d141      	bne.n	801f81a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f796:	4b31      	ldr	r3, [pc, #196]	; (801f85c <HAL_RCC_OscConfig+0x478>)
 801f798:	2200      	movs	r2, #0
 801f79a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f79c:	f7fd fddc 	bl	801d358 <HAL_GetTick>
 801f7a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f7a2:	e008      	b.n	801f7b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f7a4:	f7fd fdd8 	bl	801d358 <HAL_GetTick>
 801f7a8:	4602      	mov	r2, r0
 801f7aa:	693b      	ldr	r3, [r7, #16]
 801f7ac:	1ad3      	subs	r3, r2, r3
 801f7ae:	2b02      	cmp	r3, #2
 801f7b0:	d901      	bls.n	801f7b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801f7b2:	2303      	movs	r3, #3
 801f7b4:	e07e      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f7b6:	4b27      	ldr	r3, [pc, #156]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d1f0      	bne.n	801f7a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	69da      	ldr	r2, [r3, #28]
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	6a1b      	ldr	r3, [r3, #32]
 801f7ca:	431a      	orrs	r2, r3
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7d0:	019b      	lsls	r3, r3, #6
 801f7d2:	431a      	orrs	r2, r3
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f7d8:	085b      	lsrs	r3, r3, #1
 801f7da:	3b01      	subs	r3, #1
 801f7dc:	041b      	lsls	r3, r3, #16
 801f7de:	431a      	orrs	r2, r3
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f7e4:	061b      	lsls	r3, r3, #24
 801f7e6:	491b      	ldr	r1, [pc, #108]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f7e8:	4313      	orrs	r3, r2
 801f7ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f7ec:	4b1b      	ldr	r3, [pc, #108]	; (801f85c <HAL_RCC_OscConfig+0x478>)
 801f7ee:	2201      	movs	r2, #1
 801f7f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f7f2:	f7fd fdb1 	bl	801d358 <HAL_GetTick>
 801f7f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f7f8:	e008      	b.n	801f80c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f7fa:	f7fd fdad 	bl	801d358 <HAL_GetTick>
 801f7fe:	4602      	mov	r2, r0
 801f800:	693b      	ldr	r3, [r7, #16]
 801f802:	1ad3      	subs	r3, r2, r3
 801f804:	2b02      	cmp	r3, #2
 801f806:	d901      	bls.n	801f80c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801f808:	2303      	movs	r3, #3
 801f80a:	e053      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f80c:	4b11      	ldr	r3, [pc, #68]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f814:	2b00      	cmp	r3, #0
 801f816:	d0f0      	beq.n	801f7fa <HAL_RCC_OscConfig+0x416>
 801f818:	e04b      	b.n	801f8b2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f81a:	4b10      	ldr	r3, [pc, #64]	; (801f85c <HAL_RCC_OscConfig+0x478>)
 801f81c:	2200      	movs	r2, #0
 801f81e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f820:	f7fd fd9a 	bl	801d358 <HAL_GetTick>
 801f824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f826:	e008      	b.n	801f83a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f828:	f7fd fd96 	bl	801d358 <HAL_GetTick>
 801f82c:	4602      	mov	r2, r0
 801f82e:	693b      	ldr	r3, [r7, #16]
 801f830:	1ad3      	subs	r3, r2, r3
 801f832:	2b02      	cmp	r3, #2
 801f834:	d901      	bls.n	801f83a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801f836:	2303      	movs	r3, #3
 801f838:	e03c      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f83a:	4b06      	ldr	r3, [pc, #24]	; (801f854 <HAL_RCC_OscConfig+0x470>)
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f842:	2b00      	cmp	r3, #0
 801f844:	d1f0      	bne.n	801f828 <HAL_RCC_OscConfig+0x444>
 801f846:	e034      	b.n	801f8b2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	699b      	ldr	r3, [r3, #24]
 801f84c:	2b01      	cmp	r3, #1
 801f84e:	d107      	bne.n	801f860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801f850:	2301      	movs	r3, #1
 801f852:	e02f      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
 801f854:	40023800 	.word	0x40023800
 801f858:	40007000 	.word	0x40007000
 801f85c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f860:	4b16      	ldr	r3, [pc, #88]	; (801f8bc <HAL_RCC_OscConfig+0x4d8>)
 801f862:	685b      	ldr	r3, [r3, #4]
 801f864:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	69db      	ldr	r3, [r3, #28]
 801f870:	429a      	cmp	r2, r3
 801f872:	d11c      	bne.n	801f8ae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f87e:	429a      	cmp	r2, r3
 801f880:	d115      	bne.n	801f8ae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f882:	68fa      	ldr	r2, [r7, #12]
 801f884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f888:	4013      	ands	r3, r2
 801f88a:	687a      	ldr	r2, [r7, #4]
 801f88c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f88e:	4293      	cmp	r3, r2
 801f890:	d10d      	bne.n	801f8ae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f89c:	429a      	cmp	r2, r3
 801f89e:	d106      	bne.n	801f8ae <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801f8aa:	429a      	cmp	r2, r3
 801f8ac:	d001      	beq.n	801f8b2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 801f8ae:	2301      	movs	r3, #1
 801f8b0:	e000      	b.n	801f8b4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 801f8b2:	2300      	movs	r3, #0
}
 801f8b4:	4618      	mov	r0, r3
 801f8b6:	3718      	adds	r7, #24
 801f8b8:	46bd      	mov	sp, r7
 801f8ba:	bd80      	pop	{r7, pc}
 801f8bc:	40023800 	.word	0x40023800

0801f8c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b084      	sub	sp, #16
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
 801f8c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d101      	bne.n	801f8d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801f8d0:	2301      	movs	r3, #1
 801f8d2:	e0cc      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801f8d4:	4b68      	ldr	r3, [pc, #416]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	f003 030f 	and.w	r3, r3, #15
 801f8dc:	683a      	ldr	r2, [r7, #0]
 801f8de:	429a      	cmp	r2, r3
 801f8e0:	d90c      	bls.n	801f8fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f8e2:	4b65      	ldr	r3, [pc, #404]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f8e4:	683a      	ldr	r2, [r7, #0]
 801f8e6:	b2d2      	uxtb	r2, r2
 801f8e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f8ea:	4b63      	ldr	r3, [pc, #396]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	f003 030f 	and.w	r3, r3, #15
 801f8f2:	683a      	ldr	r2, [r7, #0]
 801f8f4:	429a      	cmp	r2, r3
 801f8f6:	d001      	beq.n	801f8fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801f8f8:	2301      	movs	r3, #1
 801f8fa:	e0b8      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	681b      	ldr	r3, [r3, #0]
 801f900:	f003 0302 	and.w	r3, r3, #2
 801f904:	2b00      	cmp	r3, #0
 801f906:	d020      	beq.n	801f94a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	f003 0304 	and.w	r3, r3, #4
 801f910:	2b00      	cmp	r3, #0
 801f912:	d005      	beq.n	801f920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801f914:	4b59      	ldr	r3, [pc, #356]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f916:	689b      	ldr	r3, [r3, #8]
 801f918:	4a58      	ldr	r2, [pc, #352]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f91a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801f91e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	f003 0308 	and.w	r3, r3, #8
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d005      	beq.n	801f938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801f92c:	4b53      	ldr	r3, [pc, #332]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f92e:	689b      	ldr	r3, [r3, #8]
 801f930:	4a52      	ldr	r2, [pc, #328]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801f936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801f938:	4b50      	ldr	r3, [pc, #320]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f93a:	689b      	ldr	r3, [r3, #8]
 801f93c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	689b      	ldr	r3, [r3, #8]
 801f944:	494d      	ldr	r1, [pc, #308]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f946:	4313      	orrs	r3, r2
 801f948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	681b      	ldr	r3, [r3, #0]
 801f94e:	f003 0301 	and.w	r3, r3, #1
 801f952:	2b00      	cmp	r3, #0
 801f954:	d044      	beq.n	801f9e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	685b      	ldr	r3, [r3, #4]
 801f95a:	2b01      	cmp	r3, #1
 801f95c:	d107      	bne.n	801f96e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f95e:	4b47      	ldr	r3, [pc, #284]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f966:	2b00      	cmp	r3, #0
 801f968:	d119      	bne.n	801f99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f96a:	2301      	movs	r3, #1
 801f96c:	e07f      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	685b      	ldr	r3, [r3, #4]
 801f972:	2b02      	cmp	r3, #2
 801f974:	d003      	beq.n	801f97e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801f97a:	2b03      	cmp	r3, #3
 801f97c:	d107      	bne.n	801f98e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f97e:	4b3f      	ldr	r3, [pc, #252]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f986:	2b00      	cmp	r3, #0
 801f988:	d109      	bne.n	801f99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f98a:	2301      	movs	r3, #1
 801f98c:	e06f      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f98e:	4b3b      	ldr	r3, [pc, #236]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	f003 0302 	and.w	r3, r3, #2
 801f996:	2b00      	cmp	r3, #0
 801f998:	d101      	bne.n	801f99e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801f99a:	2301      	movs	r3, #1
 801f99c:	e067      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801f99e:	4b37      	ldr	r3, [pc, #220]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f9a0:	689b      	ldr	r3, [r3, #8]
 801f9a2:	f023 0203 	bic.w	r2, r3, #3
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	685b      	ldr	r3, [r3, #4]
 801f9aa:	4934      	ldr	r1, [pc, #208]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f9ac:	4313      	orrs	r3, r2
 801f9ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801f9b0:	f7fd fcd2 	bl	801d358 <HAL_GetTick>
 801f9b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f9b6:	e00a      	b.n	801f9ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801f9b8:	f7fd fcce 	bl	801d358 <HAL_GetTick>
 801f9bc:	4602      	mov	r2, r0
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	1ad3      	subs	r3, r2, r3
 801f9c2:	f241 3288 	movw	r2, #5000	; 0x1388
 801f9c6:	4293      	cmp	r3, r2
 801f9c8:	d901      	bls.n	801f9ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801f9ca:	2303      	movs	r3, #3
 801f9cc:	e04f      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801f9ce:	4b2b      	ldr	r3, [pc, #172]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801f9d0:	689b      	ldr	r3, [r3, #8]
 801f9d2:	f003 020c 	and.w	r2, r3, #12
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	685b      	ldr	r3, [r3, #4]
 801f9da:	009b      	lsls	r3, r3, #2
 801f9dc:	429a      	cmp	r2, r3
 801f9de:	d1eb      	bne.n	801f9b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801f9e0:	4b25      	ldr	r3, [pc, #148]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	f003 030f 	and.w	r3, r3, #15
 801f9e8:	683a      	ldr	r2, [r7, #0]
 801f9ea:	429a      	cmp	r2, r3
 801f9ec:	d20c      	bcs.n	801fa08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801f9ee:	4b22      	ldr	r3, [pc, #136]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f9f0:	683a      	ldr	r2, [r7, #0]
 801f9f2:	b2d2      	uxtb	r2, r2
 801f9f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801f9f6:	4b20      	ldr	r3, [pc, #128]	; (801fa78 <HAL_RCC_ClockConfig+0x1b8>)
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	f003 030f 	and.w	r3, r3, #15
 801f9fe:	683a      	ldr	r2, [r7, #0]
 801fa00:	429a      	cmp	r2, r3
 801fa02:	d001      	beq.n	801fa08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fa04:	2301      	movs	r3, #1
 801fa06:	e032      	b.n	801fa6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	f003 0304 	and.w	r3, r3, #4
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d008      	beq.n	801fa26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fa14:	4b19      	ldr	r3, [pc, #100]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801fa16:	689b      	ldr	r3, [r3, #8]
 801fa18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	68db      	ldr	r3, [r3, #12]
 801fa20:	4916      	ldr	r1, [pc, #88]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801fa22:	4313      	orrs	r3, r2
 801fa24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	681b      	ldr	r3, [r3, #0]
 801fa2a:	f003 0308 	and.w	r3, r3, #8
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d009      	beq.n	801fa46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801fa32:	4b12      	ldr	r3, [pc, #72]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801fa34:	689b      	ldr	r3, [r3, #8]
 801fa36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fa3a:	687b      	ldr	r3, [r7, #4]
 801fa3c:	691b      	ldr	r3, [r3, #16]
 801fa3e:	00db      	lsls	r3, r3, #3
 801fa40:	490e      	ldr	r1, [pc, #56]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801fa42:	4313      	orrs	r3, r2
 801fa44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fa46:	f000 f821 	bl	801fa8c <HAL_RCC_GetSysClockFreq>
 801fa4a:	4602      	mov	r2, r0
 801fa4c:	4b0b      	ldr	r3, [pc, #44]	; (801fa7c <HAL_RCC_ClockConfig+0x1bc>)
 801fa4e:	689b      	ldr	r3, [r3, #8]
 801fa50:	091b      	lsrs	r3, r3, #4
 801fa52:	f003 030f 	and.w	r3, r3, #15
 801fa56:	490a      	ldr	r1, [pc, #40]	; (801fa80 <HAL_RCC_ClockConfig+0x1c0>)
 801fa58:	5ccb      	ldrb	r3, [r1, r3]
 801fa5a:	fa22 f303 	lsr.w	r3, r2, r3
 801fa5e:	4a09      	ldr	r2, [pc, #36]	; (801fa84 <HAL_RCC_ClockConfig+0x1c4>)
 801fa60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801fa62:	4b09      	ldr	r3, [pc, #36]	; (801fa88 <HAL_RCC_ClockConfig+0x1c8>)
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	4618      	mov	r0, r3
 801fa68:	f7fd fc32 	bl	801d2d0 <HAL_InitTick>

  return HAL_OK;
 801fa6c:	2300      	movs	r3, #0
}
 801fa6e:	4618      	mov	r0, r3
 801fa70:	3710      	adds	r7, #16
 801fa72:	46bd      	mov	sp, r7
 801fa74:	bd80      	pop	{r7, pc}
 801fa76:	bf00      	nop
 801fa78:	40023c00 	.word	0x40023c00
 801fa7c:	40023800 	.word	0x40023800
 801fa80:	080299f0 	.word	0x080299f0
 801fa84:	20000000 	.word	0x20000000
 801fa88:	200000d8 	.word	0x200000d8

0801fa8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801fa8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fa90:	b090      	sub	sp, #64	; 0x40
 801fa92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fa94:	2300      	movs	r3, #0
 801fa96:	637b      	str	r3, [r7, #52]	; 0x34
 801fa98:	2300      	movs	r3, #0
 801fa9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fa9c:	2300      	movs	r3, #0
 801fa9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 801faa0:	2300      	movs	r3, #0
 801faa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801faa4:	4b59      	ldr	r3, [pc, #356]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801faa6:	689b      	ldr	r3, [r3, #8]
 801faa8:	f003 030c 	and.w	r3, r3, #12
 801faac:	2b08      	cmp	r3, #8
 801faae:	d00d      	beq.n	801facc <HAL_RCC_GetSysClockFreq+0x40>
 801fab0:	2b08      	cmp	r3, #8
 801fab2:	f200 80a1 	bhi.w	801fbf8 <HAL_RCC_GetSysClockFreq+0x16c>
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	d002      	beq.n	801fac0 <HAL_RCC_GetSysClockFreq+0x34>
 801faba:	2b04      	cmp	r3, #4
 801fabc:	d003      	beq.n	801fac6 <HAL_RCC_GetSysClockFreq+0x3a>
 801fabe:	e09b      	b.n	801fbf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801fac0:	4b53      	ldr	r3, [pc, #332]	; (801fc10 <HAL_RCC_GetSysClockFreq+0x184>)
 801fac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 801fac4:	e09b      	b.n	801fbfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fac6:	4b53      	ldr	r3, [pc, #332]	; (801fc14 <HAL_RCC_GetSysClockFreq+0x188>)
 801fac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801faca:	e098      	b.n	801fbfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801facc:	4b4f      	ldr	r3, [pc, #316]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801face:	685b      	ldr	r3, [r3, #4]
 801fad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fad6:	4b4d      	ldr	r3, [pc, #308]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801fad8:	685b      	ldr	r3, [r3, #4]
 801fada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d028      	beq.n	801fb34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fae2:	4b4a      	ldr	r3, [pc, #296]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801fae4:	685b      	ldr	r3, [r3, #4]
 801fae6:	099b      	lsrs	r3, r3, #6
 801fae8:	2200      	movs	r2, #0
 801faea:	623b      	str	r3, [r7, #32]
 801faec:	627a      	str	r2, [r7, #36]	; 0x24
 801faee:	6a3b      	ldr	r3, [r7, #32]
 801faf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801faf4:	2100      	movs	r1, #0
 801faf6:	4b47      	ldr	r3, [pc, #284]	; (801fc14 <HAL_RCC_GetSysClockFreq+0x188>)
 801faf8:	fb03 f201 	mul.w	r2, r3, r1
 801fafc:	2300      	movs	r3, #0
 801fafe:	fb00 f303 	mul.w	r3, r0, r3
 801fb02:	4413      	add	r3, r2
 801fb04:	4a43      	ldr	r2, [pc, #268]	; (801fc14 <HAL_RCC_GetSysClockFreq+0x188>)
 801fb06:	fba0 1202 	umull	r1, r2, r0, r2
 801fb0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fb0c:	460a      	mov	r2, r1
 801fb0e:	62ba      	str	r2, [r7, #40]	; 0x28
 801fb10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fb12:	4413      	add	r3, r2
 801fb14:	62fb      	str	r3, [r7, #44]	; 0x2c
 801fb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fb18:	2200      	movs	r2, #0
 801fb1a:	61bb      	str	r3, [r7, #24]
 801fb1c:	61fa      	str	r2, [r7, #28]
 801fb1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801fb22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801fb26:	f7f1 fc17 	bl	8011358 <__aeabi_uldivmod>
 801fb2a:	4602      	mov	r2, r0
 801fb2c:	460b      	mov	r3, r1
 801fb2e:	4613      	mov	r3, r2
 801fb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 801fb32:	e053      	b.n	801fbdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fb34:	4b35      	ldr	r3, [pc, #212]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801fb36:	685b      	ldr	r3, [r3, #4]
 801fb38:	099b      	lsrs	r3, r3, #6
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	613b      	str	r3, [r7, #16]
 801fb3e:	617a      	str	r2, [r7, #20]
 801fb40:	693b      	ldr	r3, [r7, #16]
 801fb42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801fb46:	f04f 0b00 	mov.w	fp, #0
 801fb4a:	4652      	mov	r2, sl
 801fb4c:	465b      	mov	r3, fp
 801fb4e:	f04f 0000 	mov.w	r0, #0
 801fb52:	f04f 0100 	mov.w	r1, #0
 801fb56:	0159      	lsls	r1, r3, #5
 801fb58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801fb5c:	0150      	lsls	r0, r2, #5
 801fb5e:	4602      	mov	r2, r0
 801fb60:	460b      	mov	r3, r1
 801fb62:	ebb2 080a 	subs.w	r8, r2, sl
 801fb66:	eb63 090b 	sbc.w	r9, r3, fp
 801fb6a:	f04f 0200 	mov.w	r2, #0
 801fb6e:	f04f 0300 	mov.w	r3, #0
 801fb72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801fb76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801fb7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801fb7e:	ebb2 0408 	subs.w	r4, r2, r8
 801fb82:	eb63 0509 	sbc.w	r5, r3, r9
 801fb86:	f04f 0200 	mov.w	r2, #0
 801fb8a:	f04f 0300 	mov.w	r3, #0
 801fb8e:	00eb      	lsls	r3, r5, #3
 801fb90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801fb94:	00e2      	lsls	r2, r4, #3
 801fb96:	4614      	mov	r4, r2
 801fb98:	461d      	mov	r5, r3
 801fb9a:	eb14 030a 	adds.w	r3, r4, sl
 801fb9e:	603b      	str	r3, [r7, #0]
 801fba0:	eb45 030b 	adc.w	r3, r5, fp
 801fba4:	607b      	str	r3, [r7, #4]
 801fba6:	f04f 0200 	mov.w	r2, #0
 801fbaa:	f04f 0300 	mov.w	r3, #0
 801fbae:	e9d7 4500 	ldrd	r4, r5, [r7]
 801fbb2:	4629      	mov	r1, r5
 801fbb4:	028b      	lsls	r3, r1, #10
 801fbb6:	4621      	mov	r1, r4
 801fbb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801fbbc:	4621      	mov	r1, r4
 801fbbe:	028a      	lsls	r2, r1, #10
 801fbc0:	4610      	mov	r0, r2
 801fbc2:	4619      	mov	r1, r3
 801fbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbc6:	2200      	movs	r2, #0
 801fbc8:	60bb      	str	r3, [r7, #8]
 801fbca:	60fa      	str	r2, [r7, #12]
 801fbcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801fbd0:	f7f1 fbc2 	bl	8011358 <__aeabi_uldivmod>
 801fbd4:	4602      	mov	r2, r0
 801fbd6:	460b      	mov	r3, r1
 801fbd8:	4613      	mov	r3, r2
 801fbda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801fbdc:	4b0b      	ldr	r3, [pc, #44]	; (801fc0c <HAL_RCC_GetSysClockFreq+0x180>)
 801fbde:	685b      	ldr	r3, [r3, #4]
 801fbe0:	0c1b      	lsrs	r3, r3, #16
 801fbe2:	f003 0303 	and.w	r3, r3, #3
 801fbe6:	3301      	adds	r3, #1
 801fbe8:	005b      	lsls	r3, r3, #1
 801fbea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 801fbec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbf0:	fbb2 f3f3 	udiv	r3, r2, r3
 801fbf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801fbf6:	e002      	b.n	801fbfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fbf8:	4b05      	ldr	r3, [pc, #20]	; (801fc10 <HAL_RCC_GetSysClockFreq+0x184>)
 801fbfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801fbfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 801fbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801fc00:	4618      	mov	r0, r3
 801fc02:	3740      	adds	r7, #64	; 0x40
 801fc04:	46bd      	mov	sp, r7
 801fc06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801fc0a:	bf00      	nop
 801fc0c:	40023800 	.word	0x40023800
 801fc10:	00f42400 	.word	0x00f42400
 801fc14:	017d7840 	.word	0x017d7840

0801fc18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fc18:	b480      	push	{r7}
 801fc1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fc1c:	4b03      	ldr	r3, [pc, #12]	; (801fc2c <HAL_RCC_GetHCLKFreq+0x14>)
 801fc1e:	681b      	ldr	r3, [r3, #0]
}
 801fc20:	4618      	mov	r0, r3
 801fc22:	46bd      	mov	sp, r7
 801fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc28:	4770      	bx	lr
 801fc2a:	bf00      	nop
 801fc2c:	20000000 	.word	0x20000000

0801fc30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801fc34:	f7ff fff0 	bl	801fc18 <HAL_RCC_GetHCLKFreq>
 801fc38:	4602      	mov	r2, r0
 801fc3a:	4b05      	ldr	r3, [pc, #20]	; (801fc50 <HAL_RCC_GetPCLK1Freq+0x20>)
 801fc3c:	689b      	ldr	r3, [r3, #8]
 801fc3e:	0a9b      	lsrs	r3, r3, #10
 801fc40:	f003 0307 	and.w	r3, r3, #7
 801fc44:	4903      	ldr	r1, [pc, #12]	; (801fc54 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fc46:	5ccb      	ldrb	r3, [r1, r3]
 801fc48:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fc4c:	4618      	mov	r0, r3
 801fc4e:	bd80      	pop	{r7, pc}
 801fc50:	40023800 	.word	0x40023800
 801fc54:	08029a00 	.word	0x08029a00

0801fc58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fc58:	b580      	push	{r7, lr}
 801fc5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801fc5c:	f7ff ffdc 	bl	801fc18 <HAL_RCC_GetHCLKFreq>
 801fc60:	4602      	mov	r2, r0
 801fc62:	4b05      	ldr	r3, [pc, #20]	; (801fc78 <HAL_RCC_GetPCLK2Freq+0x20>)
 801fc64:	689b      	ldr	r3, [r3, #8]
 801fc66:	0b5b      	lsrs	r3, r3, #13
 801fc68:	f003 0307 	and.w	r3, r3, #7
 801fc6c:	4903      	ldr	r1, [pc, #12]	; (801fc7c <HAL_RCC_GetPCLK2Freq+0x24>)
 801fc6e:	5ccb      	ldrb	r3, [r1, r3]
 801fc70:	fa22 f303 	lsr.w	r3, r2, r3
}
 801fc74:	4618      	mov	r0, r3
 801fc76:	bd80      	pop	{r7, pc}
 801fc78:	40023800 	.word	0x40023800
 801fc7c:	08029a00 	.word	0x08029a00

0801fc80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801fc80:	b580      	push	{r7, lr}
 801fc82:	b086      	sub	sp, #24
 801fc84:	af00      	add	r7, sp, #0
 801fc86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801fc88:	2300      	movs	r3, #0
 801fc8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	f003 0301 	and.w	r3, r3, #1
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	d105      	bne.n	801fca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	681b      	ldr	r3, [r3, #0]
 801fca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d038      	beq.n	801fd1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801fca8:	4b68      	ldr	r3, [pc, #416]	; (801fe4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801fcaa:	2200      	movs	r2, #0
 801fcac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801fcae:	f7fd fb53 	bl	801d358 <HAL_GetTick>
 801fcb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801fcb4:	e008      	b.n	801fcc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801fcb6:	f7fd fb4f 	bl	801d358 <HAL_GetTick>
 801fcba:	4602      	mov	r2, r0
 801fcbc:	697b      	ldr	r3, [r7, #20]
 801fcbe:	1ad3      	subs	r3, r2, r3
 801fcc0:	2b02      	cmp	r3, #2
 801fcc2:	d901      	bls.n	801fcc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801fcc4:	2303      	movs	r3, #3
 801fcc6:	e0bd      	b.n	801fe44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801fcc8:	4b61      	ldr	r3, [pc, #388]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d1f0      	bne.n	801fcb6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	685a      	ldr	r2, [r3, #4]
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	689b      	ldr	r3, [r3, #8]
 801fcdc:	019b      	lsls	r3, r3, #6
 801fcde:	431a      	orrs	r2, r3
 801fce0:	687b      	ldr	r3, [r7, #4]
 801fce2:	68db      	ldr	r3, [r3, #12]
 801fce4:	071b      	lsls	r3, r3, #28
 801fce6:	495a      	ldr	r1, [pc, #360]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fce8:	4313      	orrs	r3, r2
 801fcea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801fcee:	4b57      	ldr	r3, [pc, #348]	; (801fe4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 801fcf0:	2201      	movs	r2, #1
 801fcf2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 801fcf4:	f7fd fb30 	bl	801d358 <HAL_GetTick>
 801fcf8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801fcfa:	e008      	b.n	801fd0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801fcfc:	f7fd fb2c 	bl	801d358 <HAL_GetTick>
 801fd00:	4602      	mov	r2, r0
 801fd02:	697b      	ldr	r3, [r7, #20]
 801fd04:	1ad3      	subs	r3, r2, r3
 801fd06:	2b02      	cmp	r3, #2
 801fd08:	d901      	bls.n	801fd0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801fd0a:	2303      	movs	r3, #3
 801fd0c:	e09a      	b.n	801fe44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801fd0e:	4b50      	ldr	r3, [pc, #320]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d0f0      	beq.n	801fcfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	681b      	ldr	r3, [r3, #0]
 801fd1e:	f003 0302 	and.w	r3, r3, #2
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	f000 8083 	beq.w	801fe2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801fd28:	2300      	movs	r3, #0
 801fd2a:	60fb      	str	r3, [r7, #12]
 801fd2c:	4b48      	ldr	r3, [pc, #288]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd30:	4a47      	ldr	r2, [pc, #284]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801fd36:	6413      	str	r3, [r2, #64]	; 0x40
 801fd38:	4b45      	ldr	r3, [pc, #276]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fd3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801fd40:	60fb      	str	r3, [r7, #12]
 801fd42:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 801fd44:	4b43      	ldr	r3, [pc, #268]	; (801fe54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	4a42      	ldr	r2, [pc, #264]	; (801fe54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801fd4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801fd4e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801fd50:	f7fd fb02 	bl	801d358 <HAL_GetTick>
 801fd54:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 801fd56:	e008      	b.n	801fd6a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801fd58:	f7fd fafe 	bl	801d358 <HAL_GetTick>
 801fd5c:	4602      	mov	r2, r0
 801fd5e:	697b      	ldr	r3, [r7, #20]
 801fd60:	1ad3      	subs	r3, r2, r3
 801fd62:	2b02      	cmp	r3, #2
 801fd64:	d901      	bls.n	801fd6a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 801fd66:	2303      	movs	r3, #3
 801fd68:	e06c      	b.n	801fe44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801fd6a:	4b3a      	ldr	r3, [pc, #232]	; (801fe54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d0f0      	beq.n	801fd58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801fd76:	4b36      	ldr	r3, [pc, #216]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fd7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fd7e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801fd80:	693b      	ldr	r3, [r7, #16]
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d02f      	beq.n	801fde6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	691b      	ldr	r3, [r3, #16]
 801fd8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fd8e:	693a      	ldr	r2, [r7, #16]
 801fd90:	429a      	cmp	r2, r3
 801fd92:	d028      	beq.n	801fde6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801fd94:	4b2e      	ldr	r3, [pc, #184]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fd98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fd9c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801fd9e:	4b2e      	ldr	r3, [pc, #184]	; (801fe58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801fda0:	2201      	movs	r2, #1
 801fda2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801fda4:	4b2c      	ldr	r3, [pc, #176]	; (801fe58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801fda6:	2200      	movs	r2, #0
 801fda8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801fdaa:	4a29      	ldr	r2, [pc, #164]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fdac:	693b      	ldr	r3, [r7, #16]
 801fdae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801fdb0:	4b27      	ldr	r3, [pc, #156]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fdb4:	f003 0301 	and.w	r3, r3, #1
 801fdb8:	2b01      	cmp	r3, #1
 801fdba:	d114      	bne.n	801fde6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801fdbc:	f7fd facc 	bl	801d358 <HAL_GetTick>
 801fdc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fdc2:	e00a      	b.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801fdc4:	f7fd fac8 	bl	801d358 <HAL_GetTick>
 801fdc8:	4602      	mov	r2, r0
 801fdca:	697b      	ldr	r3, [r7, #20]
 801fdcc:	1ad3      	subs	r3, r2, r3
 801fdce:	f241 3288 	movw	r2, #5000	; 0x1388
 801fdd2:	4293      	cmp	r3, r2
 801fdd4:	d901      	bls.n	801fdda <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 801fdd6:	2303      	movs	r3, #3
 801fdd8:	e034      	b.n	801fe44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801fdda:	4b1d      	ldr	r3, [pc, #116]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fdde:	f003 0302 	and.w	r3, r3, #2
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d0ee      	beq.n	801fdc4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	691b      	ldr	r3, [r3, #16]
 801fdea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801fdee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fdf2:	d10d      	bne.n	801fe10 <HAL_RCCEx_PeriphCLKConfig+0x190>
 801fdf4:	4b16      	ldr	r3, [pc, #88]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fdf6:	689b      	ldr	r3, [r3, #8]
 801fdf8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	691b      	ldr	r3, [r3, #16]
 801fe00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801fe04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fe08:	4911      	ldr	r1, [pc, #68]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fe0a:	4313      	orrs	r3, r2
 801fe0c:	608b      	str	r3, [r1, #8]
 801fe0e:	e005      	b.n	801fe1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 801fe10:	4b0f      	ldr	r3, [pc, #60]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fe12:	689b      	ldr	r3, [r3, #8]
 801fe14:	4a0e      	ldr	r2, [pc, #56]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fe16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801fe1a:	6093      	str	r3, [r2, #8]
 801fe1c:	4b0c      	ldr	r3, [pc, #48]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fe1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	691b      	ldr	r3, [r3, #16]
 801fe24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fe28:	4909      	ldr	r1, [pc, #36]	; (801fe50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801fe2a:	4313      	orrs	r3, r2
 801fe2c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	f003 0308 	and.w	r3, r3, #8
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	d003      	beq.n	801fe42 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	7d1a      	ldrb	r2, [r3, #20]
 801fe3e:	4b07      	ldr	r3, [pc, #28]	; (801fe5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 801fe40:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801fe42:	2300      	movs	r3, #0
}
 801fe44:	4618      	mov	r0, r3
 801fe46:	3718      	adds	r7, #24
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	bd80      	pop	{r7, pc}
 801fe4c:	42470068 	.word	0x42470068
 801fe50:	40023800 	.word	0x40023800
 801fe54:	40007000 	.word	0x40007000
 801fe58:	42470e40 	.word	0x42470e40
 801fe5c:	424711e0 	.word	0x424711e0

0801fe60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801fe60:	b580      	push	{r7, lr}
 801fe62:	b082      	sub	sp, #8
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d101      	bne.n	801fe72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 801fe6e:	2301      	movs	r3, #1
 801fe70:	e083      	b.n	801ff7a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	7f5b      	ldrb	r3, [r3, #29]
 801fe76:	b2db      	uxtb	r3, r3
 801fe78:	2b00      	cmp	r3, #0
 801fe7a:	d105      	bne.n	801fe88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	2200      	movs	r2, #0
 801fe80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801fe82:	6878      	ldr	r0, [r7, #4]
 801fe84:	f7f6 f9ba 	bl	80161fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	2202      	movs	r2, #2
 801fe8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	681b      	ldr	r3, [r3, #0]
 801fe92:	22ca      	movs	r2, #202	; 0xca
 801fe94:	625a      	str	r2, [r3, #36]	; 0x24
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	2253      	movs	r2, #83	; 0x53
 801fe9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801fe9e:	6878      	ldr	r0, [r7, #4]
 801fea0:	f000 f897 	bl	801ffd2 <RTC_EnterInitMode>
 801fea4:	4603      	mov	r3, r0
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d008      	beq.n	801febc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	22ff      	movs	r2, #255	; 0xff
 801feb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	2204      	movs	r2, #4
 801feb6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 801feb8:	2301      	movs	r3, #1
 801feba:	e05e      	b.n	801ff7a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	689b      	ldr	r3, [r3, #8]
 801fec2:	687a      	ldr	r2, [r7, #4]
 801fec4:	6812      	ldr	r2, [r2, #0]
 801fec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801feca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fece:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	6899      	ldr	r1, [r3, #8]
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	685a      	ldr	r2, [r3, #4]
 801feda:	687b      	ldr	r3, [r7, #4]
 801fedc:	691b      	ldr	r3, [r3, #16]
 801fede:	431a      	orrs	r2, r3
 801fee0:	687b      	ldr	r3, [r7, #4]
 801fee2:	695b      	ldr	r3, [r3, #20]
 801fee4:	431a      	orrs	r2, r3
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	430a      	orrs	r2, r1
 801feec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	687a      	ldr	r2, [r7, #4]
 801fef4:	68d2      	ldr	r2, [r2, #12]
 801fef6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	6919      	ldr	r1, [r3, #16]
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	689b      	ldr	r3, [r3, #8]
 801ff02:	041a      	lsls	r2, r3, #16
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	430a      	orrs	r2, r1
 801ff0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	68da      	ldr	r2, [r3, #12]
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ff1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	689b      	ldr	r3, [r3, #8]
 801ff22:	f003 0320 	and.w	r3, r3, #32
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d10e      	bne.n	801ff48 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801ff2a:	6878      	ldr	r0, [r7, #4]
 801ff2c:	f000 f829 	bl	801ff82 <HAL_RTC_WaitForSynchro>
 801ff30:	4603      	mov	r3, r0
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d008      	beq.n	801ff48 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	22ff      	movs	r2, #255	; 0xff
 801ff3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	2204      	movs	r2, #4
 801ff42:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 801ff44:	2301      	movs	r3, #1
 801ff46:	e018      	b.n	801ff7a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801ff56:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	699a      	ldr	r2, [r3, #24]
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	430a      	orrs	r2, r1
 801ff68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	22ff      	movs	r2, #255	; 0xff
 801ff70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	2201      	movs	r2, #1
 801ff76:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 801ff78:	2300      	movs	r3, #0
  }
}
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	3708      	adds	r7, #8
 801ff7e:	46bd      	mov	sp, r7
 801ff80:	bd80      	pop	{r7, pc}

0801ff82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801ff82:	b580      	push	{r7, lr}
 801ff84:	b084      	sub	sp, #16
 801ff86:	af00      	add	r7, sp, #0
 801ff88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ff8a:	2300      	movs	r3, #0
 801ff8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	68da      	ldr	r2, [r3, #12]
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 801ff9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801ff9e:	f7fd f9db 	bl	801d358 <HAL_GetTick>
 801ffa2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801ffa4:	e009      	b.n	801ffba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801ffa6:	f7fd f9d7 	bl	801d358 <HAL_GetTick>
 801ffaa:	4602      	mov	r2, r0
 801ffac:	68fb      	ldr	r3, [r7, #12]
 801ffae:	1ad3      	subs	r3, r2, r3
 801ffb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ffb4:	d901      	bls.n	801ffba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 801ffb6:	2303      	movs	r3, #3
 801ffb8:	e007      	b.n	801ffca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	68db      	ldr	r3, [r3, #12]
 801ffc0:	f003 0320 	and.w	r3, r3, #32
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d0ee      	beq.n	801ffa6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 801ffc8:	2300      	movs	r3, #0
}
 801ffca:	4618      	mov	r0, r3
 801ffcc:	3710      	adds	r7, #16
 801ffce:	46bd      	mov	sp, r7
 801ffd0:	bd80      	pop	{r7, pc}

0801ffd2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801ffd2:	b580      	push	{r7, lr}
 801ffd4:	b084      	sub	sp, #16
 801ffd6:	af00      	add	r7, sp, #0
 801ffd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801ffda:	2300      	movs	r3, #0
 801ffdc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	681b      	ldr	r3, [r3, #0]
 801ffe2:	68db      	ldr	r3, [r3, #12]
 801ffe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d119      	bne.n	8020020 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	f04f 32ff 	mov.w	r2, #4294967295
 801fff4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801fff6:	f7fd f9af 	bl	801d358 <HAL_GetTick>
 801fffa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801fffc:	e009      	b.n	8020012 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 801fffe:	f7fd f9ab 	bl	801d358 <HAL_GetTick>
 8020002:	4602      	mov	r2, r0
 8020004:	68fb      	ldr	r3, [r7, #12]
 8020006:	1ad3      	subs	r3, r2, r3
 8020008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802000c:	d901      	bls.n	8020012 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 802000e:	2303      	movs	r3, #3
 8020010:	e007      	b.n	8020022 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	68db      	ldr	r3, [r3, #12]
 8020018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802001c:	2b00      	cmp	r3, #0
 802001e:	d0ee      	beq.n	801fffe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8020020:	2300      	movs	r3, #0
}
 8020022:	4618      	mov	r0, r3
 8020024:	3710      	adds	r7, #16
 8020026:	46bd      	mov	sp, r7
 8020028:	bd80      	pop	{r7, pc}

0802002a <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 802002a:	b480      	push	{r7}
 802002c:	b087      	sub	sp, #28
 802002e:	af00      	add	r7, sp, #0
 8020030:	60f8      	str	r0, [r7, #12]
 8020032:	60b9      	str	r1, [r7, #8]
 8020034:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8020036:	2300      	movs	r3, #0
 8020038:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 802003a:	68fb      	ldr	r3, [r7, #12]
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	3350      	adds	r3, #80	; 0x50
 8020040:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8020042:	68bb      	ldr	r3, [r7, #8]
 8020044:	009b      	lsls	r3, r3, #2
 8020046:	697a      	ldr	r2, [r7, #20]
 8020048:	4413      	add	r3, r2
 802004a:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 802004c:	697b      	ldr	r3, [r7, #20]
 802004e:	687a      	ldr	r2, [r7, #4]
 8020050:	601a      	str	r2, [r3, #0]
}
 8020052:	bf00      	nop
 8020054:	371c      	adds	r7, #28
 8020056:	46bd      	mov	sp, r7
 8020058:	f85d 7b04 	ldr.w	r7, [sp], #4
 802005c:	4770      	bx	lr

0802005e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 802005e:	b480      	push	{r7}
 8020060:	b085      	sub	sp, #20
 8020062:	af00      	add	r7, sp, #0
 8020064:	6078      	str	r0, [r7, #4]
 8020066:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8020068:	2300      	movs	r3, #0
 802006a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	3350      	adds	r3, #80	; 0x50
 8020072:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8020074:	683b      	ldr	r3, [r7, #0]
 8020076:	009b      	lsls	r3, r3, #2
 8020078:	68fa      	ldr	r2, [r7, #12]
 802007a:	4413      	add	r3, r2
 802007c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 802007e:	68fb      	ldr	r3, [r7, #12]
 8020080:	681b      	ldr	r3, [r3, #0]
}
 8020082:	4618      	mov	r0, r3
 8020084:	3714      	adds	r7, #20
 8020086:	46bd      	mov	sp, r7
 8020088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802008c:	4770      	bx	lr

0802008e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 802008e:	b580      	push	{r7, lr}
 8020090:	b082      	sub	sp, #8
 8020092:	af00      	add	r7, sp, #0
 8020094:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d101      	bne.n	80200a0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 802009c:	2301      	movs	r3, #1
 802009e:	e022      	b.n	80200e6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80200a6:	b2db      	uxtb	r3, r3
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d105      	bne.n	80200b8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	2200      	movs	r2, #0
 80200b0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80200b2:	6878      	ldr	r0, [r7, #4]
 80200b4:	f7f6 fa6a 	bl	801658c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80200b8:	687b      	ldr	r3, [r7, #4]
 80200ba:	2203      	movs	r2, #3
 80200bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80200c0:	6878      	ldr	r0, [r7, #4]
 80200c2:	f000 f815 	bl	80200f0 <HAL_SD_InitCard>
 80200c6:	4603      	mov	r3, r0
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	d001      	beq.n	80200d0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80200cc:	2301      	movs	r3, #1
 80200ce:	e00a      	b.n	80200e6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	2200      	movs	r2, #0
 80200d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	2200      	movs	r2, #0
 80200da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80200dc:	687b      	ldr	r3, [r7, #4]
 80200de:	2201      	movs	r2, #1
 80200e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80200e4:	2300      	movs	r3, #0
}
 80200e6:	4618      	mov	r0, r3
 80200e8:	3708      	adds	r7, #8
 80200ea:	46bd      	mov	sp, r7
 80200ec:	bd80      	pop	{r7, pc}
	...

080200f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80200f0:	b5b0      	push	{r4, r5, r7, lr}
 80200f2:	b08e      	sub	sp, #56	; 0x38
 80200f4:	af04      	add	r7, sp, #16
 80200f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80200f8:	2300      	movs	r3, #0
 80200fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80200fc:	2300      	movs	r3, #0
 80200fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8020100:	2300      	movs	r3, #0
 8020102:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8020104:	2300      	movs	r3, #0
 8020106:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8020108:	2300      	movs	r3, #0
 802010a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 802010c:	2376      	movs	r3, #118	; 0x76
 802010e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	681d      	ldr	r5, [r3, #0]
 8020114:	466c      	mov	r4, sp
 8020116:	f107 0314 	add.w	r3, r7, #20
 802011a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802011e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8020122:	f107 0308 	add.w	r3, r7, #8
 8020126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020128:	4628      	mov	r0, r5
 802012a:	f003 ffe1 	bl	80240f0 <SDIO_Init>
 802012e:	4603      	mov	r3, r0
 8020130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8020134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020138:	2b00      	cmp	r3, #0
 802013a:	d001      	beq.n	8020140 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 802013c:	2301      	movs	r3, #1
 802013e:	e031      	b.n	80201a4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8020140:	4b1a      	ldr	r3, [pc, #104]	; (80201ac <HAL_SD_InitCard+0xbc>)
 8020142:	2200      	movs	r2, #0
 8020144:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	4618      	mov	r0, r3
 802014c:	f004 f819 	bl	8024182 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8020150:	4b16      	ldr	r3, [pc, #88]	; (80201ac <HAL_SD_InitCard+0xbc>)
 8020152:	2201      	movs	r2, #1
 8020154:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8020156:	6878      	ldr	r0, [r7, #4]
 8020158:	f000 ffe6 	bl	8021128 <SD_PowerON>
 802015c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 802015e:	6a3b      	ldr	r3, [r7, #32]
 8020160:	2b00      	cmp	r3, #0
 8020162:	d00b      	beq.n	802017c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	2201      	movs	r2, #1
 8020168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020170:	6a3b      	ldr	r3, [r7, #32]
 8020172:	431a      	orrs	r2, r3
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8020178:	2301      	movs	r3, #1
 802017a:	e013      	b.n	80201a4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 802017c:	6878      	ldr	r0, [r7, #4]
 802017e:	f000 ff05 	bl	8020f8c <SD_InitCard>
 8020182:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8020184:	6a3b      	ldr	r3, [r7, #32]
 8020186:	2b00      	cmp	r3, #0
 8020188:	d00b      	beq.n	80201a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	2201      	movs	r2, #1
 802018e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8020192:	687b      	ldr	r3, [r7, #4]
 8020194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020196:	6a3b      	ldr	r3, [r7, #32]
 8020198:	431a      	orrs	r2, r3
 802019a:	687b      	ldr	r3, [r7, #4]
 802019c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 802019e:	2301      	movs	r3, #1
 80201a0:	e000      	b.n	80201a4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80201a2:	2300      	movs	r3, #0
}
 80201a4:	4618      	mov	r0, r3
 80201a6:	3728      	adds	r7, #40	; 0x28
 80201a8:	46bd      	mov	sp, r7
 80201aa:	bdb0      	pop	{r4, r5, r7, pc}
 80201ac:	422580a0 	.word	0x422580a0

080201b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80201b0:	b580      	push	{r7, lr}
 80201b2:	b08c      	sub	sp, #48	; 0x30
 80201b4:	af00      	add	r7, sp, #0
 80201b6:	60f8      	str	r0, [r7, #12]
 80201b8:	60b9      	str	r1, [r7, #8]
 80201ba:	607a      	str	r2, [r7, #4]
 80201bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80201c2:	68bb      	ldr	r3, [r7, #8]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d107      	bne.n	80201d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80201c8:	68fb      	ldr	r3, [r7, #12]
 80201ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80201d0:	68fb      	ldr	r3, [r7, #12]
 80201d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80201d4:	2301      	movs	r3, #1
 80201d6:	e0c9      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80201de:	b2db      	uxtb	r3, r3
 80201e0:	2b01      	cmp	r3, #1
 80201e2:	f040 80c2 	bne.w	802036a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80201e6:	68fb      	ldr	r3, [r7, #12]
 80201e8:	2200      	movs	r2, #0
 80201ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80201ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80201ee:	683b      	ldr	r3, [r7, #0]
 80201f0:	441a      	add	r2, r3
 80201f2:	68fb      	ldr	r3, [r7, #12]
 80201f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80201f6:	429a      	cmp	r2, r3
 80201f8:	d907      	bls.n	802020a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80201fa:	68fb      	ldr	r3, [r7, #12]
 80201fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80201fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8020202:	68fb      	ldr	r3, [r7, #12]
 8020204:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8020206:	2301      	movs	r3, #1
 8020208:	e0b0      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	2203      	movs	r2, #3
 802020e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	681b      	ldr	r3, [r3, #0]
 8020216:	2200      	movs	r2, #0
 8020218:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 802021a:	68fb      	ldr	r3, [r7, #12]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020220:	68fa      	ldr	r2, [r7, #12]
 8020222:	6812      	ldr	r2, [r2, #0]
 8020224:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8020228:	f043 0302 	orr.w	r3, r3, #2
 802022c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 802022e:	68fb      	ldr	r3, [r7, #12]
 8020230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020232:	4a50      	ldr	r2, [pc, #320]	; (8020374 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8020234:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8020236:	68fb      	ldr	r3, [r7, #12]
 8020238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802023a:	4a4f      	ldr	r2, [pc, #316]	; (8020378 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 802023c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020242:	2200      	movs	r2, #0
 8020244:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8020246:	68fb      	ldr	r3, [r7, #12]
 8020248:	6c18      	ldr	r0, [r3, #64]	; 0x40
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	3380      	adds	r3, #128	; 0x80
 8020250:	4619      	mov	r1, r3
 8020252:	68ba      	ldr	r2, [r7, #8]
 8020254:	683b      	ldr	r3, [r7, #0]
 8020256:	025b      	lsls	r3, r3, #9
 8020258:	089b      	lsrs	r3, r3, #2
 802025a:	f7fe f837 	bl	801e2cc <HAL_DMA_Start_IT>
 802025e:	4603      	mov	r3, r0
 8020260:	2b00      	cmp	r3, #0
 8020262:	d017      	beq.n	8020294 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8020264:	68fb      	ldr	r3, [r7, #12]
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8020272:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020274:	68fb      	ldr	r3, [r7, #12]
 8020276:	681b      	ldr	r3, [r3, #0]
 8020278:	4a40      	ldr	r2, [pc, #256]	; (802037c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 802027a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 802027c:	68fb      	ldr	r3, [r7, #12]
 802027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020280:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8020284:	68fb      	ldr	r3, [r7, #12]
 8020286:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	2201      	movs	r2, #1
 802028c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8020290:	2301      	movs	r3, #1
 8020292:	e06b      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8020294:	4b3a      	ldr	r3, [pc, #232]	; (8020380 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8020296:	2201      	movs	r2, #1
 8020298:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802029e:	2b01      	cmp	r3, #1
 80202a0:	d002      	beq.n	80202a8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80202a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80202a4:	025b      	lsls	r3, r3, #9
 80202a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80202b0:	4618      	mov	r0, r3
 80202b2:	f003 fff9 	bl	80242a8 <SDMMC_CmdBlockLength>
 80202b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80202b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d00f      	beq.n	80202de <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80202be:	68fb      	ldr	r3, [r7, #12]
 80202c0:	681b      	ldr	r3, [r3, #0]
 80202c2:	4a2e      	ldr	r2, [pc, #184]	; (802037c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80202c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80202ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202cc:	431a      	orrs	r2, r3
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80202d2:	68fb      	ldr	r3, [r7, #12]
 80202d4:	2201      	movs	r2, #1
 80202d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80202da:	2301      	movs	r3, #1
 80202dc:	e046      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80202de:	f04f 33ff 	mov.w	r3, #4294967295
 80202e2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	025b      	lsls	r3, r3, #9
 80202e8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80202ea:	2390      	movs	r3, #144	; 0x90
 80202ec:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80202ee:	2302      	movs	r3, #2
 80202f0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80202f2:	2300      	movs	r3, #0
 80202f4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80202f6:	2301      	movs	r3, #1
 80202f8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80202fa:	68fb      	ldr	r3, [r7, #12]
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	f107 0210 	add.w	r2, r7, #16
 8020302:	4611      	mov	r1, r2
 8020304:	4618      	mov	r0, r3
 8020306:	f003 ffa3 	bl	8024250 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 802030a:	683b      	ldr	r3, [r7, #0]
 802030c:	2b01      	cmp	r3, #1
 802030e:	d90a      	bls.n	8020326 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	2282      	movs	r2, #130	; 0x82
 8020314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	681b      	ldr	r3, [r3, #0]
 802031a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802031c:	4618      	mov	r0, r3
 802031e:	f004 f807 	bl	8024330 <SDMMC_CmdReadMultiBlock>
 8020322:	62f8      	str	r0, [r7, #44]	; 0x2c
 8020324:	e009      	b.n	802033a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	2281      	movs	r2, #129	; 0x81
 802032a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 802032c:	68fb      	ldr	r3, [r7, #12]
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020332:	4618      	mov	r0, r3
 8020334:	f003 ffda 	bl	80242ec <SDMMC_CmdReadSingleBlock>
 8020338:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 802033a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802033c:	2b00      	cmp	r3, #0
 802033e:	d012      	beq.n	8020366 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020340:	68fb      	ldr	r3, [r7, #12]
 8020342:	681b      	ldr	r3, [r3, #0]
 8020344:	4a0d      	ldr	r2, [pc, #52]	; (802037c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8020346:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8020348:	68fb      	ldr	r3, [r7, #12]
 802034a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802034c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802034e:	431a      	orrs	r2, r3
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8020354:	68fb      	ldr	r3, [r7, #12]
 8020356:	2201      	movs	r2, #1
 8020358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 802035c:	68fb      	ldr	r3, [r7, #12]
 802035e:	2200      	movs	r2, #0
 8020360:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8020362:	2301      	movs	r3, #1
 8020364:	e002      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8020366:	2300      	movs	r3, #0
 8020368:	e000      	b.n	802036c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 802036a:	2302      	movs	r3, #2
  }
}
 802036c:	4618      	mov	r0, r3
 802036e:	3730      	adds	r7, #48	; 0x30
 8020370:	46bd      	mov	sp, r7
 8020372:	bd80      	pop	{r7, pc}
 8020374:	08020d9b 	.word	0x08020d9b
 8020378:	08020e0d 	.word	0x08020e0d
 802037c:	004005ff 	.word	0x004005ff
 8020380:	4225858c 	.word	0x4225858c

08020384 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8020384:	b580      	push	{r7, lr}
 8020386:	b08c      	sub	sp, #48	; 0x30
 8020388:	af00      	add	r7, sp, #0
 802038a:	60f8      	str	r0, [r7, #12]
 802038c:	60b9      	str	r1, [r7, #8]
 802038e:	607a      	str	r2, [r7, #4]
 8020390:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8020396:	68bb      	ldr	r3, [r7, #8]
 8020398:	2b00      	cmp	r3, #0
 802039a:	d107      	bne.n	80203ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 802039c:	68fb      	ldr	r3, [r7, #12]
 802039e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80203a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80203a4:	68fb      	ldr	r3, [r7, #12]
 80203a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80203a8:	2301      	movs	r3, #1
 80203aa:	e0ce      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80203b2:	b2db      	uxtb	r3, r3
 80203b4:	2b01      	cmp	r3, #1
 80203b6:	f040 80c7 	bne.w	8020548 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80203ba:	68fb      	ldr	r3, [r7, #12]
 80203bc:	2200      	movs	r2, #0
 80203be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80203c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80203c2:	683b      	ldr	r3, [r7, #0]
 80203c4:	441a      	add	r2, r3
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80203ca:	429a      	cmp	r2, r3
 80203cc:	d907      	bls.n	80203de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80203ce:	68fb      	ldr	r3, [r7, #12]
 80203d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80203d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80203d6:	68fb      	ldr	r3, [r7, #12]
 80203d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80203da:	2301      	movs	r3, #1
 80203dc:	e0b5      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80203de:	68fb      	ldr	r3, [r7, #12]
 80203e0:	2203      	movs	r2, #3
 80203e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	681b      	ldr	r3, [r3, #0]
 80203ea:	2200      	movs	r2, #0
 80203ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80203ee:	68fb      	ldr	r3, [r7, #12]
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80203f4:	68fa      	ldr	r2, [r7, #12]
 80203f6:	6812      	ldr	r2, [r2, #0]
 80203f8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80203fc:	f043 0302 	orr.w	r3, r3, #2
 8020400:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8020402:	68fb      	ldr	r3, [r7, #12]
 8020404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020406:	4a53      	ldr	r2, [pc, #332]	; (8020554 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8020408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 802040a:	68fb      	ldr	r3, [r7, #12]
 802040c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802040e:	4a52      	ldr	r2, [pc, #328]	; (8020558 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8020410:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8020412:	68fb      	ldr	r3, [r7, #12]
 8020414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020416:	2200      	movs	r2, #0
 8020418:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802041e:	2b01      	cmp	r3, #1
 8020420:	d002      	beq.n	8020428 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8020422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020424:	025b      	lsls	r3, r3, #9
 8020426:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8020428:	68fb      	ldr	r3, [r7, #12]
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020430:	4618      	mov	r0, r3
 8020432:	f003 ff39 	bl	80242a8 <SDMMC_CmdBlockLength>
 8020436:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8020438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802043a:	2b00      	cmp	r3, #0
 802043c:	d00f      	beq.n	802045e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	681b      	ldr	r3, [r3, #0]
 8020442:	4a46      	ldr	r2, [pc, #280]	; (802055c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8020444:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802044a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802044c:	431a      	orrs	r2, r3
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8020452:	68fb      	ldr	r3, [r7, #12]
 8020454:	2201      	movs	r2, #1
 8020456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 802045a:	2301      	movs	r3, #1
 802045c:	e075      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 802045e:	683b      	ldr	r3, [r7, #0]
 8020460:	2b01      	cmp	r3, #1
 8020462:	d90a      	bls.n	802047a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8020464:	68fb      	ldr	r3, [r7, #12]
 8020466:	22a0      	movs	r2, #160	; 0xa0
 8020468:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	681b      	ldr	r3, [r3, #0]
 802046e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020470:	4618      	mov	r0, r3
 8020472:	f003 ffa1 	bl	80243b8 <SDMMC_CmdWriteMultiBlock>
 8020476:	62f8      	str	r0, [r7, #44]	; 0x2c
 8020478:	e009      	b.n	802048e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 802047a:	68fb      	ldr	r3, [r7, #12]
 802047c:	2290      	movs	r2, #144	; 0x90
 802047e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8020480:	68fb      	ldr	r3, [r7, #12]
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020486:	4618      	mov	r0, r3
 8020488:	f003 ff74 	bl	8024374 <SDMMC_CmdWriteSingleBlock>
 802048c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 802048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020490:	2b00      	cmp	r3, #0
 8020492:	d012      	beq.n	80204ba <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	4a30      	ldr	r2, [pc, #192]	; (802055c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 802049a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80204a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80204a2:	431a      	orrs	r2, r3
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80204a8:	68fb      	ldr	r3, [r7, #12]
 80204aa:	2201      	movs	r2, #1
 80204ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	2200      	movs	r2, #0
 80204b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80204b6:	2301      	movs	r3, #1
 80204b8:	e047      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80204ba:	4b29      	ldr	r3, [pc, #164]	; (8020560 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80204bc:	2201      	movs	r2, #1
 80204be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80204c4:	68b9      	ldr	r1, [r7, #8]
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	681b      	ldr	r3, [r3, #0]
 80204ca:	3380      	adds	r3, #128	; 0x80
 80204cc:	461a      	mov	r2, r3
 80204ce:	683b      	ldr	r3, [r7, #0]
 80204d0:	025b      	lsls	r3, r3, #9
 80204d2:	089b      	lsrs	r3, r3, #2
 80204d4:	f7fd fefa 	bl	801e2cc <HAL_DMA_Start_IT>
 80204d8:	4603      	mov	r3, r0
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d01c      	beq.n	8020518 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80204e4:	68fa      	ldr	r2, [r7, #12]
 80204e6:	6812      	ldr	r2, [r2, #0]
 80204e8:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80204ec:	f023 0302 	bic.w	r3, r3, #2
 80204f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80204f2:	68fb      	ldr	r3, [r7, #12]
 80204f4:	681b      	ldr	r3, [r3, #0]
 80204f6:	4a19      	ldr	r2, [pc, #100]	; (802055c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80204f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80204fa:	68fb      	ldr	r3, [r7, #12]
 80204fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80204fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	2201      	movs	r2, #1
 802050a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 802050e:	68fb      	ldr	r3, [r7, #12]
 8020510:	2200      	movs	r2, #0
 8020512:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8020514:	2301      	movs	r3, #1
 8020516:	e018      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8020518:	f04f 33ff 	mov.w	r3, #4294967295
 802051c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 802051e:	683b      	ldr	r3, [r7, #0]
 8020520:	025b      	lsls	r3, r3, #9
 8020522:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8020524:	2390      	movs	r3, #144	; 0x90
 8020526:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8020528:	2300      	movs	r3, #0
 802052a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 802052c:	2300      	movs	r3, #0
 802052e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8020530:	2301      	movs	r3, #1
 8020532:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	681b      	ldr	r3, [r3, #0]
 8020538:	f107 0210 	add.w	r2, r7, #16
 802053c:	4611      	mov	r1, r2
 802053e:	4618      	mov	r0, r3
 8020540:	f003 fe86 	bl	8024250 <SDIO_ConfigData>

      return HAL_OK;
 8020544:	2300      	movs	r3, #0
 8020546:	e000      	b.n	802054a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8020548:	2302      	movs	r3, #2
  }
}
 802054a:	4618      	mov	r0, r3
 802054c:	3730      	adds	r7, #48	; 0x30
 802054e:	46bd      	mov	sp, r7
 8020550:	bd80      	pop	{r7, pc}
 8020552:	bf00      	nop
 8020554:	08020d71 	.word	0x08020d71
 8020558:	08020e0d 	.word	0x08020e0d
 802055c:	004005ff 	.word	0x004005ff
 8020560:	4225858c 	.word	0x4225858c

08020564 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8020564:	b580      	push	{r7, lr}
 8020566:	b084      	sub	sp, #16
 8020568:	af00      	add	r7, sp, #0
 802056a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020570:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	681b      	ldr	r3, [r3, #0]
 8020576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802057c:	2b00      	cmp	r3, #0
 802057e:	d008      	beq.n	8020592 <HAL_SD_IRQHandler+0x2e>
 8020580:	68fb      	ldr	r3, [r7, #12]
 8020582:	f003 0308 	and.w	r3, r3, #8
 8020586:	2b00      	cmp	r3, #0
 8020588:	d003      	beq.n	8020592 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 802058a:	6878      	ldr	r0, [r7, #4]
 802058c:	f000 ffe2 	bl	8021554 <SD_Read_IT>
 8020590:	e165      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8020592:	687b      	ldr	r3, [r7, #4]
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802059c:	2b00      	cmp	r3, #0
 802059e:	f000 808f 	beq.w	80206c0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	681b      	ldr	r3, [r3, #0]
 80205a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80205aa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80205b2:	687a      	ldr	r2, [r7, #4]
 80205b4:	6812      	ldr	r2, [r2, #0]
 80205b6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80205ba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80205be:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	681b      	ldr	r3, [r3, #0]
 80205ca:	f022 0201 	bic.w	r2, r2, #1
 80205ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80205d0:	68fb      	ldr	r3, [r7, #12]
 80205d2:	f003 0308 	and.w	r3, r3, #8
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d039      	beq.n	802064e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80205da:	68fb      	ldr	r3, [r7, #12]
 80205dc:	f003 0302 	and.w	r3, r3, #2
 80205e0:	2b00      	cmp	r3, #0
 80205e2:	d104      	bne.n	80205ee <HAL_SD_IRQHandler+0x8a>
 80205e4:	68fb      	ldr	r3, [r7, #12]
 80205e6:	f003 0320 	and.w	r3, r3, #32
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d011      	beq.n	8020612 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	4618      	mov	r0, r3
 80205f4:	f003 ff02 	bl	80243fc <SDMMC_CmdStopTransfer>
 80205f8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80205fa:	68bb      	ldr	r3, [r7, #8]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d008      	beq.n	8020612 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020604:	68bb      	ldr	r3, [r7, #8]
 8020606:	431a      	orrs	r2, r3
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 802060c:	6878      	ldr	r0, [r7, #4]
 802060e:	f000 f92f 	bl	8020870 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	681b      	ldr	r3, [r3, #0]
 8020616:	f240 523a 	movw	r2, #1338	; 0x53a
 802061a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	2201      	movs	r2, #1
 8020620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	2200      	movs	r2, #0
 8020628:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	f003 0301 	and.w	r3, r3, #1
 8020630:	2b00      	cmp	r3, #0
 8020632:	d104      	bne.n	802063e <HAL_SD_IRQHandler+0xda>
 8020634:	68fb      	ldr	r3, [r7, #12]
 8020636:	f003 0302 	and.w	r3, r3, #2
 802063a:	2b00      	cmp	r3, #0
 802063c:	d003      	beq.n	8020646 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 802063e:	6878      	ldr	r0, [r7, #4]
 8020640:	f7f5 ff84 	bl	801654c <HAL_SD_RxCpltCallback>
 8020644:	e10b      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8020646:	6878      	ldr	r0, [r7, #4]
 8020648:	f7f5 ff90 	bl	801656c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 802064c:	e107      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020654:	2b00      	cmp	r3, #0
 8020656:	f000 8102 	beq.w	802085e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 802065a:	68fb      	ldr	r3, [r7, #12]
 802065c:	f003 0320 	and.w	r3, r3, #32
 8020660:	2b00      	cmp	r3, #0
 8020662:	d011      	beq.n	8020688 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	4618      	mov	r0, r3
 802066a:	f003 fec7 	bl	80243fc <SDMMC_CmdStopTransfer>
 802066e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8020670:	68bb      	ldr	r3, [r7, #8]
 8020672:	2b00      	cmp	r3, #0
 8020674:	d008      	beq.n	8020688 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802067a:	68bb      	ldr	r3, [r7, #8]
 802067c:	431a      	orrs	r2, r3
 802067e:	687b      	ldr	r3, [r7, #4]
 8020680:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8020682:	6878      	ldr	r0, [r7, #4]
 8020684:	f000 f8f4 	bl	8020870 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8020688:	68fb      	ldr	r3, [r7, #12]
 802068a:	f003 0301 	and.w	r3, r3, #1
 802068e:	2b00      	cmp	r3, #0
 8020690:	f040 80e5 	bne.w	802085e <HAL_SD_IRQHandler+0x2fa>
 8020694:	68fb      	ldr	r3, [r7, #12]
 8020696:	f003 0302 	and.w	r3, r3, #2
 802069a:	2b00      	cmp	r3, #0
 802069c:	f040 80df 	bne.w	802085e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	681b      	ldr	r3, [r3, #0]
 80206a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206a6:	687b      	ldr	r3, [r7, #4]
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	f022 0208 	bic.w	r2, r2, #8
 80206ae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80206b0:	687b      	ldr	r3, [r7, #4]
 80206b2:	2201      	movs	r2, #1
 80206b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80206b8:	6878      	ldr	r0, [r7, #4]
 80206ba:	f7f5 ff57 	bl	801656c <HAL_SD_TxCpltCallback>
}
 80206be:	e0ce      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80206c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	d008      	beq.n	80206e0 <HAL_SD_IRQHandler+0x17c>
 80206ce:	68fb      	ldr	r3, [r7, #12]
 80206d0:	f003 0308 	and.w	r3, r3, #8
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d003      	beq.n	80206e0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80206d8:	6878      	ldr	r0, [r7, #4]
 80206da:	f000 ff8c 	bl	80215f6 <SD_Write_IT>
 80206de:	e0be      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80206e6:	f240 233a 	movw	r3, #570	; 0x23a
 80206ea:	4013      	ands	r3, r2
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	f000 80b6 	beq.w	802085e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80206f8:	f003 0302 	and.w	r3, r3, #2
 80206fc:	2b00      	cmp	r3, #0
 80206fe:	d005      	beq.n	802070c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020704:	f043 0202 	orr.w	r2, r3, #2
 8020708:	687b      	ldr	r3, [r7, #4]
 802070a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020712:	f003 0308 	and.w	r3, r3, #8
 8020716:	2b00      	cmp	r3, #0
 8020718:	d005      	beq.n	8020726 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802071e:	f043 0208 	orr.w	r2, r3, #8
 8020722:	687b      	ldr	r3, [r7, #4]
 8020724:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802072c:	f003 0320 	and.w	r3, r3, #32
 8020730:	2b00      	cmp	r3, #0
 8020732:	d005      	beq.n	8020740 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020738:	f043 0220 	orr.w	r2, r3, #32
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020746:	f003 0310 	and.w	r3, r3, #16
 802074a:	2b00      	cmp	r3, #0
 802074c:	d005      	beq.n	802075a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020752:	f043 0210 	orr.w	r2, r3, #16
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	681b      	ldr	r3, [r3, #0]
 802075e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8020764:	2b00      	cmp	r3, #0
 8020766:	d005      	beq.n	8020774 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8020768:	687b      	ldr	r3, [r7, #4]
 802076a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802076c:	f043 0208 	orr.w	r2, r3, #8
 8020770:	687b      	ldr	r3, [r7, #4]
 8020772:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	f240 723a 	movw	r2, #1850	; 0x73a
 802077c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 802077e:	687b      	ldr	r3, [r7, #4]
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020784:	687a      	ldr	r2, [r7, #4]
 8020786:	6812      	ldr	r2, [r2, #0]
 8020788:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 802078c:	f023 0302 	bic.w	r3, r3, #2
 8020790:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	681b      	ldr	r3, [r3, #0]
 8020796:	4618      	mov	r0, r3
 8020798:	f003 fe30 	bl	80243fc <SDMMC_CmdStopTransfer>
 802079c:	4602      	mov	r2, r0
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207a2:	431a      	orrs	r2, r3
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	f003 0308 	and.w	r3, r3, #8
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d00a      	beq.n	80207c8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80207b2:	687b      	ldr	r3, [r7, #4]
 80207b4:	2201      	movs	r2, #1
 80207b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80207ba:	687b      	ldr	r3, [r7, #4]
 80207bc:	2200      	movs	r2, #0
 80207be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80207c0:	6878      	ldr	r0, [r7, #4]
 80207c2:	f000 f855 	bl	8020870 <HAL_SD_ErrorCallback>
}
 80207c6:	e04a      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80207c8:	68fb      	ldr	r3, [r7, #12]
 80207ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d045      	beq.n	802085e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80207d2:	68fb      	ldr	r3, [r7, #12]
 80207d4:	f003 0310 	and.w	r3, r3, #16
 80207d8:	2b00      	cmp	r3, #0
 80207da:	d104      	bne.n	80207e6 <HAL_SD_IRQHandler+0x282>
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	f003 0320 	and.w	r3, r3, #32
 80207e2:	2b00      	cmp	r3, #0
 80207e4:	d011      	beq.n	802080a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207ea:	4a1f      	ldr	r2, [pc, #124]	; (8020868 <HAL_SD_IRQHandler+0x304>)
 80207ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80207f2:	4618      	mov	r0, r3
 80207f4:	f7fd fdc2 	bl	801e37c <HAL_DMA_Abort_IT>
 80207f8:	4603      	mov	r3, r0
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d02f      	beq.n	802085e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020802:	4618      	mov	r0, r3
 8020804:	f000 fb54 	bl	8020eb0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8020808:	e029      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 802080a:	68fb      	ldr	r3, [r7, #12]
 802080c:	f003 0301 	and.w	r3, r3, #1
 8020810:	2b00      	cmp	r3, #0
 8020812:	d104      	bne.n	802081e <HAL_SD_IRQHandler+0x2ba>
 8020814:	68fb      	ldr	r3, [r7, #12]
 8020816:	f003 0302 	and.w	r3, r3, #2
 802081a:	2b00      	cmp	r3, #0
 802081c:	d011      	beq.n	8020842 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020822:	4a12      	ldr	r2, [pc, #72]	; (802086c <HAL_SD_IRQHandler+0x308>)
 8020824:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802082a:	4618      	mov	r0, r3
 802082c:	f7fd fda6 	bl	801e37c <HAL_DMA_Abort_IT>
 8020830:	4603      	mov	r3, r0
 8020832:	2b00      	cmp	r3, #0
 8020834:	d013      	beq.n	802085e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802083a:	4618      	mov	r0, r3
 802083c:	f000 fb6f 	bl	8020f1e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8020840:	e00d      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	2200      	movs	r2, #0
 8020846:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	2201      	movs	r2, #1
 802084c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	2200      	movs	r2, #0
 8020854:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8020856:	6878      	ldr	r0, [r7, #4]
 8020858:	f000 f814 	bl	8020884 <HAL_SD_AbortCallback>
}
 802085c:	e7ff      	b.n	802085e <HAL_SD_IRQHandler+0x2fa>
 802085e:	bf00      	nop
 8020860:	3710      	adds	r7, #16
 8020862:	46bd      	mov	sp, r7
 8020864:	bd80      	pop	{r7, pc}
 8020866:	bf00      	nop
 8020868:	08020eb1 	.word	0x08020eb1
 802086c:	08020f1f 	.word	0x08020f1f

08020870 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8020870:	b480      	push	{r7}
 8020872:	b083      	sub	sp, #12
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8020878:	bf00      	nop
 802087a:	370c      	adds	r7, #12
 802087c:	46bd      	mov	sp, r7
 802087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020882:	4770      	bx	lr

08020884 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8020884:	b480      	push	{r7}
 8020886:	b083      	sub	sp, #12
 8020888:	af00      	add	r7, sp, #0
 802088a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 802088c:	bf00      	nop
 802088e:	370c      	adds	r7, #12
 8020890:	46bd      	mov	sp, r7
 8020892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020896:	4770      	bx	lr

08020898 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8020898:	b480      	push	{r7}
 802089a:	b083      	sub	sp, #12
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
 80208a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80208a2:	687b      	ldr	r3, [r7, #4]
 80208a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208a6:	0f9b      	lsrs	r3, r3, #30
 80208a8:	b2da      	uxtb	r2, r3
 80208aa:	683b      	ldr	r3, [r7, #0]
 80208ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208b2:	0e9b      	lsrs	r3, r3, #26
 80208b4:	b2db      	uxtb	r3, r3
 80208b6:	f003 030f 	and.w	r3, r3, #15
 80208ba:	b2da      	uxtb	r2, r3
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208c4:	0e1b      	lsrs	r3, r3, #24
 80208c6:	b2db      	uxtb	r3, r3
 80208c8:	f003 0303 	and.w	r3, r3, #3
 80208cc:	b2da      	uxtb	r2, r3
 80208ce:	683b      	ldr	r3, [r7, #0]
 80208d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208d6:	0c1b      	lsrs	r3, r3, #16
 80208d8:	b2da      	uxtb	r2, r3
 80208da:	683b      	ldr	r3, [r7, #0]
 80208dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80208de:	687b      	ldr	r3, [r7, #4]
 80208e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208e2:	0a1b      	lsrs	r3, r3, #8
 80208e4:	b2da      	uxtb	r2, r3
 80208e6:	683b      	ldr	r3, [r7, #0]
 80208e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80208ee:	b2da      	uxtb	r2, r3
 80208f0:	683b      	ldr	r3, [r7, #0]
 80208f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80208f8:	0d1b      	lsrs	r3, r3, #20
 80208fa:	b29a      	uxth	r2, r3
 80208fc:	683b      	ldr	r3, [r7, #0]
 80208fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020904:	0c1b      	lsrs	r3, r3, #16
 8020906:	b2db      	uxtb	r3, r3
 8020908:	f003 030f 	and.w	r3, r3, #15
 802090c:	b2da      	uxtb	r2, r3
 802090e:	683b      	ldr	r3, [r7, #0]
 8020910:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020916:	0bdb      	lsrs	r3, r3, #15
 8020918:	b2db      	uxtb	r3, r3
 802091a:	f003 0301 	and.w	r3, r3, #1
 802091e:	b2da      	uxtb	r2, r3
 8020920:	683b      	ldr	r3, [r7, #0]
 8020922:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020928:	0b9b      	lsrs	r3, r3, #14
 802092a:	b2db      	uxtb	r3, r3
 802092c:	f003 0301 	and.w	r3, r3, #1
 8020930:	b2da      	uxtb	r2, r3
 8020932:	683b      	ldr	r3, [r7, #0]
 8020934:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802093a:	0b5b      	lsrs	r3, r3, #13
 802093c:	b2db      	uxtb	r3, r3
 802093e:	f003 0301 	and.w	r3, r3, #1
 8020942:	b2da      	uxtb	r2, r3
 8020944:	683b      	ldr	r3, [r7, #0]
 8020946:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802094c:	0b1b      	lsrs	r3, r3, #12
 802094e:	b2db      	uxtb	r3, r3
 8020950:	f003 0301 	and.w	r3, r3, #1
 8020954:	b2da      	uxtb	r2, r3
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 802095a:	683b      	ldr	r3, [r7, #0]
 802095c:	2200      	movs	r2, #0
 802095e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020964:	2b00      	cmp	r3, #0
 8020966:	d163      	bne.n	8020a30 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802096c:	009a      	lsls	r2, r3, #2
 802096e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8020972:	4013      	ands	r3, r2
 8020974:	687a      	ldr	r2, [r7, #4]
 8020976:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8020978:	0f92      	lsrs	r2, r2, #30
 802097a:	431a      	orrs	r2, r3
 802097c:	683b      	ldr	r3, [r7, #0]
 802097e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020984:	0edb      	lsrs	r3, r3, #27
 8020986:	b2db      	uxtb	r3, r3
 8020988:	f003 0307 	and.w	r3, r3, #7
 802098c:	b2da      	uxtb	r2, r3
 802098e:	683b      	ldr	r3, [r7, #0]
 8020990:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020996:	0e1b      	lsrs	r3, r3, #24
 8020998:	b2db      	uxtb	r3, r3
 802099a:	f003 0307 	and.w	r3, r3, #7
 802099e:	b2da      	uxtb	r2, r3
 80209a0:	683b      	ldr	r3, [r7, #0]
 80209a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80209a8:	0d5b      	lsrs	r3, r3, #21
 80209aa:	b2db      	uxtb	r3, r3
 80209ac:	f003 0307 	and.w	r3, r3, #7
 80209b0:	b2da      	uxtb	r2, r3
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80209ba:	0c9b      	lsrs	r3, r3, #18
 80209bc:	b2db      	uxtb	r3, r3
 80209be:	f003 0307 	and.w	r3, r3, #7
 80209c2:	b2da      	uxtb	r2, r3
 80209c4:	683b      	ldr	r3, [r7, #0]
 80209c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80209cc:	0bdb      	lsrs	r3, r3, #15
 80209ce:	b2db      	uxtb	r3, r3
 80209d0:	f003 0307 	and.w	r3, r3, #7
 80209d4:	b2da      	uxtb	r2, r3
 80209d6:	683b      	ldr	r3, [r7, #0]
 80209d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80209da:	683b      	ldr	r3, [r7, #0]
 80209dc:	691b      	ldr	r3, [r3, #16]
 80209de:	1c5a      	adds	r2, r3, #1
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80209e4:	683b      	ldr	r3, [r7, #0]
 80209e6:	7e1b      	ldrb	r3, [r3, #24]
 80209e8:	b2db      	uxtb	r3, r3
 80209ea:	f003 0307 	and.w	r3, r3, #7
 80209ee:	3302      	adds	r3, #2
 80209f0:	2201      	movs	r2, #1
 80209f2:	fa02 f303 	lsl.w	r3, r2, r3
 80209f6:	687a      	ldr	r2, [r7, #4]
 80209f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80209fa:	fb03 f202 	mul.w	r2, r3, r2
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8020a02:	683b      	ldr	r3, [r7, #0]
 8020a04:	7a1b      	ldrb	r3, [r3, #8]
 8020a06:	b2db      	uxtb	r3, r3
 8020a08:	f003 030f 	and.w	r3, r3, #15
 8020a0c:	2201      	movs	r2, #1
 8020a0e:	409a      	lsls	r2, r3
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020a18:	687a      	ldr	r2, [r7, #4]
 8020a1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8020a1c:	0a52      	lsrs	r2, r2, #9
 8020a1e:	fb03 f202 	mul.w	r2, r3, r2
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a2c:	661a      	str	r2, [r3, #96]	; 0x60
 8020a2e:	e031      	b.n	8020a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020a34:	2b01      	cmp	r3, #1
 8020a36:	d11d      	bne.n	8020a74 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8020a3c:	041b      	lsls	r3, r3, #16
 8020a3e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020a46:	0c1b      	lsrs	r3, r3, #16
 8020a48:	431a      	orrs	r2, r3
 8020a4a:	683b      	ldr	r3, [r7, #0]
 8020a4c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8020a4e:	683b      	ldr	r3, [r7, #0]
 8020a50:	691b      	ldr	r3, [r3, #16]
 8020a52:	3301      	adds	r3, #1
 8020a54:	029a      	lsls	r2, r3, #10
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8020a5a:	687b      	ldr	r3, [r7, #4]
 8020a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	661a      	str	r2, [r3, #96]	; 0x60
 8020a72:	e00f      	b.n	8020a94 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	681b      	ldr	r3, [r3, #0]
 8020a78:	4a58      	ldr	r2, [pc, #352]	; (8020bdc <HAL_SD_GetCardCSD+0x344>)
 8020a7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	2201      	movs	r2, #1
 8020a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8020a90:	2301      	movs	r3, #1
 8020a92:	e09d      	b.n	8020bd0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8020a94:	687b      	ldr	r3, [r7, #4]
 8020a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020a98:	0b9b      	lsrs	r3, r3, #14
 8020a9a:	b2db      	uxtb	r3, r3
 8020a9c:	f003 0301 	and.w	r3, r3, #1
 8020aa0:	b2da      	uxtb	r2, r3
 8020aa2:	683b      	ldr	r3, [r7, #0]
 8020aa4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020aaa:	09db      	lsrs	r3, r3, #7
 8020aac:	b2db      	uxtb	r3, r3
 8020aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020ab2:	b2da      	uxtb	r2, r3
 8020ab4:	683b      	ldr	r3, [r7, #0]
 8020ab6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020abc:	b2db      	uxtb	r3, r3
 8020abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020ac2:	b2da      	uxtb	r2, r3
 8020ac4:	683b      	ldr	r3, [r7, #0]
 8020ac6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020acc:	0fdb      	lsrs	r3, r3, #31
 8020ace:	b2da      	uxtb	r2, r3
 8020ad0:	683b      	ldr	r3, [r7, #0]
 8020ad2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ad8:	0f5b      	lsrs	r3, r3, #29
 8020ada:	b2db      	uxtb	r3, r3
 8020adc:	f003 0303 	and.w	r3, r3, #3
 8020ae0:	b2da      	uxtb	r2, r3
 8020ae2:	683b      	ldr	r3, [r7, #0]
 8020ae4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020aea:	0e9b      	lsrs	r3, r3, #26
 8020aec:	b2db      	uxtb	r3, r3
 8020aee:	f003 0307 	and.w	r3, r3, #7
 8020af2:	b2da      	uxtb	r2, r3
 8020af4:	683b      	ldr	r3, [r7, #0]
 8020af6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8020af8:	687b      	ldr	r3, [r7, #4]
 8020afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020afc:	0d9b      	lsrs	r3, r3, #22
 8020afe:	b2db      	uxtb	r3, r3
 8020b00:	f003 030f 	and.w	r3, r3, #15
 8020b04:	b2da      	uxtb	r2, r3
 8020b06:	683b      	ldr	r3, [r7, #0]
 8020b08:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b0e:	0d5b      	lsrs	r3, r3, #21
 8020b10:	b2db      	uxtb	r3, r3
 8020b12:	f003 0301 	and.w	r3, r3, #1
 8020b16:	b2da      	uxtb	r2, r3
 8020b18:	683b      	ldr	r3, [r7, #0]
 8020b1a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8020b1e:	683b      	ldr	r3, [r7, #0]
 8020b20:	2200      	movs	r2, #0
 8020b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b2a:	0c1b      	lsrs	r3, r3, #16
 8020b2c:	b2db      	uxtb	r3, r3
 8020b2e:	f003 0301 	and.w	r3, r3, #1
 8020b32:	b2da      	uxtb	r2, r3
 8020b34:	683b      	ldr	r3, [r7, #0]
 8020b36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b3e:	0bdb      	lsrs	r3, r3, #15
 8020b40:	b2db      	uxtb	r3, r3
 8020b42:	f003 0301 	and.w	r3, r3, #1
 8020b46:	b2da      	uxtb	r2, r3
 8020b48:	683b      	ldr	r3, [r7, #0]
 8020b4a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b52:	0b9b      	lsrs	r3, r3, #14
 8020b54:	b2db      	uxtb	r3, r3
 8020b56:	f003 0301 	and.w	r3, r3, #1
 8020b5a:	b2da      	uxtb	r2, r3
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b66:	0b5b      	lsrs	r3, r3, #13
 8020b68:	b2db      	uxtb	r3, r3
 8020b6a:	f003 0301 	and.w	r3, r3, #1
 8020b6e:	b2da      	uxtb	r2, r3
 8020b70:	683b      	ldr	r3, [r7, #0]
 8020b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8020b76:	687b      	ldr	r3, [r7, #4]
 8020b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b7a:	0b1b      	lsrs	r3, r3, #12
 8020b7c:	b2db      	uxtb	r3, r3
 8020b7e:	f003 0301 	and.w	r3, r3, #1
 8020b82:	b2da      	uxtb	r2, r3
 8020b84:	683b      	ldr	r3, [r7, #0]
 8020b86:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8020b8a:	687b      	ldr	r3, [r7, #4]
 8020b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020b8e:	0a9b      	lsrs	r3, r3, #10
 8020b90:	b2db      	uxtb	r3, r3
 8020b92:	f003 0303 	and.w	r3, r3, #3
 8020b96:	b2da      	uxtb	r2, r3
 8020b98:	683b      	ldr	r3, [r7, #0]
 8020b9a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ba2:	0a1b      	lsrs	r3, r3, #8
 8020ba4:	b2db      	uxtb	r3, r3
 8020ba6:	f003 0303 	and.w	r3, r3, #3
 8020baa:	b2da      	uxtb	r2, r3
 8020bac:	683b      	ldr	r3, [r7, #0]
 8020bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8020bb2:	687b      	ldr	r3, [r7, #4]
 8020bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020bb6:	085b      	lsrs	r3, r3, #1
 8020bb8:	b2db      	uxtb	r3, r3
 8020bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020bbe:	b2da      	uxtb	r2, r3
 8020bc0:	683b      	ldr	r3, [r7, #0]
 8020bc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8020bc6:	683b      	ldr	r3, [r7, #0]
 8020bc8:	2201      	movs	r2, #1
 8020bca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8020bce:	2300      	movs	r3, #0
}
 8020bd0:	4618      	mov	r0, r3
 8020bd2:	370c      	adds	r7, #12
 8020bd4:	46bd      	mov	sp, r7
 8020bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bda:	4770      	bx	lr
 8020bdc:	004005ff 	.word	0x004005ff

08020be0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8020be0:	b480      	push	{r7}
 8020be2:	b083      	sub	sp, #12
 8020be4:	af00      	add	r7, sp, #0
 8020be6:	6078      	str	r0, [r7, #4]
 8020be8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020bee:	683b      	ldr	r3, [r7, #0]
 8020bf0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8020bf6:	683b      	ldr	r3, [r7, #0]
 8020bf8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020c06:	683b      	ldr	r3, [r7, #0]
 8020c08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8020c0e:	683b      	ldr	r3, [r7, #0]
 8020c10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8020c1a:	687b      	ldr	r3, [r7, #4]
 8020c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020c1e:	683b      	ldr	r3, [r7, #0]
 8020c20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8020c26:	683b      	ldr	r3, [r7, #0]
 8020c28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8020c2a:	2300      	movs	r3, #0
}
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	370c      	adds	r7, #12
 8020c30:	46bd      	mov	sp, r7
 8020c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c36:	4770      	bx	lr

08020c38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8020c38:	b5b0      	push	{r4, r5, r7, lr}
 8020c3a:	b08e      	sub	sp, #56	; 0x38
 8020c3c:	af04      	add	r7, sp, #16
 8020c3e:	6078      	str	r0, [r7, #4]
 8020c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	2203      	movs	r2, #3
 8020c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020c4e:	2b03      	cmp	r3, #3
 8020c50:	d02e      	beq.n	8020cb0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8020c52:	683b      	ldr	r3, [r7, #0]
 8020c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020c58:	d106      	bne.n	8020c68 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020c62:	687b      	ldr	r3, [r7, #4]
 8020c64:	639a      	str	r2, [r3, #56]	; 0x38
 8020c66:	e029      	b.n	8020cbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8020c68:	683b      	ldr	r3, [r7, #0]
 8020c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020c6e:	d10a      	bne.n	8020c86 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8020c70:	6878      	ldr	r0, [r7, #4]
 8020c72:	f000 fb0f 	bl	8021294 <SD_WideBus_Enable>
 8020c76:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c7e:	431a      	orrs	r2, r3
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	639a      	str	r2, [r3, #56]	; 0x38
 8020c84:	e01a      	b.n	8020cbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8020c86:	683b      	ldr	r3, [r7, #0]
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d10a      	bne.n	8020ca2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8020c8c:	6878      	ldr	r0, [r7, #4]
 8020c8e:	f000 fb4c 	bl	802132a <SD_WideBus_Disable>
 8020c92:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c9a:	431a      	orrs	r2, r3
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8020ca0:	e00c      	b.n	8020cbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ca6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	639a      	str	r2, [r3, #56]	; 0x38
 8020cae:	e005      	b.n	8020cbc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020cb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d009      	beq.n	8020cd8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	681b      	ldr	r3, [r3, #0]
 8020cc8:	4a18      	ldr	r2, [pc, #96]	; (8020d2c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8020cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	2201      	movs	r2, #1
 8020cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8020cd4:	2301      	movs	r3, #1
 8020cd6:	e024      	b.n	8020d22 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	685b      	ldr	r3, [r3, #4]
 8020cdc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	689b      	ldr	r3, [r3, #8]
 8020ce2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	68db      	ldr	r3, [r3, #12]
 8020ce8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8020cea:	683b      	ldr	r3, [r7, #0]
 8020cec:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	695b      	ldr	r3, [r3, #20]
 8020cf2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	699b      	ldr	r3, [r3, #24]
 8020cf8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	681d      	ldr	r5, [r3, #0]
 8020cfe:	466c      	mov	r4, sp
 8020d00:	f107 0318 	add.w	r3, r7, #24
 8020d04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020d08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8020d0c:	f107 030c 	add.w	r3, r7, #12
 8020d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8020d12:	4628      	mov	r0, r5
 8020d14:	f003 f9ec 	bl	80240f0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	2201      	movs	r2, #1
 8020d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8020d20:	2300      	movs	r3, #0
}
 8020d22:	4618      	mov	r0, r3
 8020d24:	3728      	adds	r7, #40	; 0x28
 8020d26:	46bd      	mov	sp, r7
 8020d28:	bdb0      	pop	{r4, r5, r7, pc}
 8020d2a:	bf00      	nop
 8020d2c:	004005ff 	.word	0x004005ff

08020d30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8020d30:	b580      	push	{r7, lr}
 8020d32:	b086      	sub	sp, #24
 8020d34:	af00      	add	r7, sp, #0
 8020d36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8020d3c:	f107 030c 	add.w	r3, r7, #12
 8020d40:	4619      	mov	r1, r3
 8020d42:	6878      	ldr	r0, [r7, #4]
 8020d44:	f000 fa7e 	bl	8021244 <SD_SendStatus>
 8020d48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8020d4a:	697b      	ldr	r3, [r7, #20]
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d005      	beq.n	8020d5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020d54:	697b      	ldr	r3, [r7, #20]
 8020d56:	431a      	orrs	r2, r3
 8020d58:	687b      	ldr	r3, [r7, #4]
 8020d5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8020d5c:	68fb      	ldr	r3, [r7, #12]
 8020d5e:	0a5b      	lsrs	r3, r3, #9
 8020d60:	f003 030f 	and.w	r3, r3, #15
 8020d64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8020d66:	693b      	ldr	r3, [r7, #16]
}
 8020d68:	4618      	mov	r0, r3
 8020d6a:	3718      	adds	r7, #24
 8020d6c:	46bd      	mov	sp, r7
 8020d6e:	bd80      	pop	{r7, pc}

08020d70 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8020d70:	b480      	push	{r7}
 8020d72:	b085      	sub	sp, #20
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8020d78:	687b      	ldr	r3, [r7, #4]
 8020d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d7c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8020d7e:	68fb      	ldr	r3, [r7, #12]
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020d84:	68fb      	ldr	r3, [r7, #12]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020d8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8020d8e:	bf00      	nop
 8020d90:	3714      	adds	r7, #20
 8020d92:	46bd      	mov	sp, r7
 8020d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d98:	4770      	bx	lr

08020d9a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8020d9a:	b580      	push	{r7, lr}
 8020d9c:	b084      	sub	sp, #16
 8020d9e:	af00      	add	r7, sp, #0
 8020da0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020da6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8020da8:	68fb      	ldr	r3, [r7, #12]
 8020daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020dac:	2b82      	cmp	r3, #130	; 0x82
 8020dae:	d111      	bne.n	8020dd4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8020db0:	68fb      	ldr	r3, [r7, #12]
 8020db2:	681b      	ldr	r3, [r3, #0]
 8020db4:	4618      	mov	r0, r3
 8020db6:	f003 fb21 	bl	80243fc <SDMMC_CmdStopTransfer>
 8020dba:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8020dbc:	68bb      	ldr	r3, [r7, #8]
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	d008      	beq.n	8020dd4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8020dc2:	68fb      	ldr	r3, [r7, #12]
 8020dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020dc6:	68bb      	ldr	r3, [r7, #8]
 8020dc8:	431a      	orrs	r2, r3
 8020dca:	68fb      	ldr	r3, [r7, #12]
 8020dcc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8020dce:	68f8      	ldr	r0, [r7, #12]
 8020dd0:	f7ff fd4e 	bl	8020870 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8020dd4:	68fb      	ldr	r3, [r7, #12]
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020dda:	68fb      	ldr	r3, [r7, #12]
 8020ddc:	681b      	ldr	r3, [r3, #0]
 8020dde:	f022 0208 	bic.w	r2, r2, #8
 8020de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8020de4:	68fb      	ldr	r3, [r7, #12]
 8020de6:	681b      	ldr	r3, [r3, #0]
 8020de8:	f240 523a 	movw	r2, #1338	; 0x53a
 8020dec:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8020dee:	68fb      	ldr	r3, [r7, #12]
 8020df0:	2201      	movs	r2, #1
 8020df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8020df6:	68fb      	ldr	r3, [r7, #12]
 8020df8:	2200      	movs	r2, #0
 8020dfa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8020dfc:	68f8      	ldr	r0, [r7, #12]
 8020dfe:	f7f5 fba5 	bl	801654c <HAL_SD_RxCpltCallback>
#endif
}
 8020e02:	bf00      	nop
 8020e04:	3710      	adds	r7, #16
 8020e06:	46bd      	mov	sp, r7
 8020e08:	bd80      	pop	{r7, pc}
	...

08020e0c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b086      	sub	sp, #24
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e18:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8020e1a:	6878      	ldr	r0, [r7, #4]
 8020e1c:	f7fd fc5a 	bl	801e6d4 <HAL_DMA_GetError>
 8020e20:	4603      	mov	r3, r0
 8020e22:	2b02      	cmp	r3, #2
 8020e24:	d03e      	beq.n	8020ea4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8020e26:	697b      	ldr	r3, [r7, #20]
 8020e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020e2c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8020e2e:	697b      	ldr	r3, [r7, #20]
 8020e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020e34:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8020e36:	693b      	ldr	r3, [r7, #16]
 8020e38:	2b01      	cmp	r3, #1
 8020e3a:	d002      	beq.n	8020e42 <SD_DMAError+0x36>
 8020e3c:	68fb      	ldr	r3, [r7, #12]
 8020e3e:	2b01      	cmp	r3, #1
 8020e40:	d12d      	bne.n	8020e9e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8020e42:	697b      	ldr	r3, [r7, #20]
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	4a19      	ldr	r2, [pc, #100]	; (8020eac <SD_DMAError+0xa0>)
 8020e48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8020e4a:	697b      	ldr	r3, [r7, #20]
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020e50:	697b      	ldr	r3, [r7, #20]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8020e58:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8020e5a:	697b      	ldr	r3, [r7, #20]
 8020e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8020e62:	697b      	ldr	r3, [r7, #20]
 8020e64:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8020e66:	6978      	ldr	r0, [r7, #20]
 8020e68:	f7ff ff62 	bl	8020d30 <HAL_SD_GetCardState>
 8020e6c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8020e6e:	68bb      	ldr	r3, [r7, #8]
 8020e70:	2b06      	cmp	r3, #6
 8020e72:	d002      	beq.n	8020e7a <SD_DMAError+0x6e>
 8020e74:	68bb      	ldr	r3, [r7, #8]
 8020e76:	2b05      	cmp	r3, #5
 8020e78:	d10a      	bne.n	8020e90 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8020e7a:	697b      	ldr	r3, [r7, #20]
 8020e7c:	681b      	ldr	r3, [r3, #0]
 8020e7e:	4618      	mov	r0, r3
 8020e80:	f003 fabc 	bl	80243fc <SDMMC_CmdStopTransfer>
 8020e84:	4602      	mov	r2, r0
 8020e86:	697b      	ldr	r3, [r7, #20]
 8020e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e8a:	431a      	orrs	r2, r3
 8020e8c:	697b      	ldr	r3, [r7, #20]
 8020e8e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8020e90:	697b      	ldr	r3, [r7, #20]
 8020e92:	2201      	movs	r2, #1
 8020e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8020e98:	697b      	ldr	r3, [r7, #20]
 8020e9a:	2200      	movs	r2, #0
 8020e9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8020e9e:	6978      	ldr	r0, [r7, #20]
 8020ea0:	f7ff fce6 	bl	8020870 <HAL_SD_ErrorCallback>
#endif
  }
}
 8020ea4:	bf00      	nop
 8020ea6:	3718      	adds	r7, #24
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	bd80      	pop	{r7, pc}
 8020eac:	004005ff 	.word	0x004005ff

08020eb0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8020eb0:	b580      	push	{r7, lr}
 8020eb2:	b084      	sub	sp, #16
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ebc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8020ebe:	68fb      	ldr	r3, [r7, #12]
 8020ec0:	681b      	ldr	r3, [r3, #0]
 8020ec2:	f240 523a 	movw	r2, #1338	; 0x53a
 8020ec6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8020ec8:	68f8      	ldr	r0, [r7, #12]
 8020eca:	f7ff ff31 	bl	8020d30 <HAL_SD_GetCardState>
 8020ece:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8020ed0:	68fb      	ldr	r3, [r7, #12]
 8020ed2:	2201      	movs	r2, #1
 8020ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8020ed8:	68fb      	ldr	r3, [r7, #12]
 8020eda:	2200      	movs	r2, #0
 8020edc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8020ede:	68bb      	ldr	r3, [r7, #8]
 8020ee0:	2b06      	cmp	r3, #6
 8020ee2:	d002      	beq.n	8020eea <SD_DMATxAbort+0x3a>
 8020ee4:	68bb      	ldr	r3, [r7, #8]
 8020ee6:	2b05      	cmp	r3, #5
 8020ee8:	d10a      	bne.n	8020f00 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	681b      	ldr	r3, [r3, #0]
 8020eee:	4618      	mov	r0, r3
 8020ef0:	f003 fa84 	bl	80243fc <SDMMC_CmdStopTransfer>
 8020ef4:	4602      	mov	r2, r0
 8020ef6:	68fb      	ldr	r3, [r7, #12]
 8020ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020efa:	431a      	orrs	r2, r3
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f04:	2b00      	cmp	r3, #0
 8020f06:	d103      	bne.n	8020f10 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8020f08:	68f8      	ldr	r0, [r7, #12]
 8020f0a:	f7ff fcbb 	bl	8020884 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8020f0e:	e002      	b.n	8020f16 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8020f10:	68f8      	ldr	r0, [r7, #12]
 8020f12:	f7ff fcad 	bl	8020870 <HAL_SD_ErrorCallback>
}
 8020f16:	bf00      	nop
 8020f18:	3710      	adds	r7, #16
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	bd80      	pop	{r7, pc}

08020f1e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8020f1e:	b580      	push	{r7, lr}
 8020f20:	b084      	sub	sp, #16
 8020f22:	af00      	add	r7, sp, #0
 8020f24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f2a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8020f2c:	68fb      	ldr	r3, [r7, #12]
 8020f2e:	681b      	ldr	r3, [r3, #0]
 8020f30:	f240 523a 	movw	r2, #1338	; 0x53a
 8020f34:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8020f36:	68f8      	ldr	r0, [r7, #12]
 8020f38:	f7ff fefa 	bl	8020d30 <HAL_SD_GetCardState>
 8020f3c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8020f3e:	68fb      	ldr	r3, [r7, #12]
 8020f40:	2201      	movs	r2, #1
 8020f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	2200      	movs	r2, #0
 8020f4a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8020f4c:	68bb      	ldr	r3, [r7, #8]
 8020f4e:	2b06      	cmp	r3, #6
 8020f50:	d002      	beq.n	8020f58 <SD_DMARxAbort+0x3a>
 8020f52:	68bb      	ldr	r3, [r7, #8]
 8020f54:	2b05      	cmp	r3, #5
 8020f56:	d10a      	bne.n	8020f6e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8020f58:	68fb      	ldr	r3, [r7, #12]
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	4618      	mov	r0, r3
 8020f5e:	f003 fa4d 	bl	80243fc <SDMMC_CmdStopTransfer>
 8020f62:	4602      	mov	r2, r0
 8020f64:	68fb      	ldr	r3, [r7, #12]
 8020f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f68:	431a      	orrs	r2, r3
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8020f6e:	68fb      	ldr	r3, [r7, #12]
 8020f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d103      	bne.n	8020f7e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8020f76:	68f8      	ldr	r0, [r7, #12]
 8020f78:	f7ff fc84 	bl	8020884 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8020f7c:	e002      	b.n	8020f84 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8020f7e:	68f8      	ldr	r0, [r7, #12]
 8020f80:	f7ff fc76 	bl	8020870 <HAL_SD_ErrorCallback>
}
 8020f84:	bf00      	nop
 8020f86:	3710      	adds	r7, #16
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	bd80      	pop	{r7, pc}

08020f8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8020f8c:	b5b0      	push	{r4, r5, r7, lr}
 8020f8e:	b094      	sub	sp, #80	; 0x50
 8020f90:	af04      	add	r7, sp, #16
 8020f92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8020f94:	2301      	movs	r3, #1
 8020f96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	681b      	ldr	r3, [r3, #0]
 8020f9c:	4618      	mov	r0, r3
 8020f9e:	f003 f8ff 	bl	80241a0 <SDIO_GetPowerState>
 8020fa2:	4603      	mov	r3, r0
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d102      	bne.n	8020fae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8020fa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8020fac:	e0b8      	b.n	8021120 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020fb2:	2b03      	cmp	r3, #3
 8020fb4:	d02f      	beq.n	8021016 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	681b      	ldr	r3, [r3, #0]
 8020fba:	4618      	mov	r0, r3
 8020fbc:	f003 fb28 	bl	8024610 <SDMMC_CmdSendCID>
 8020fc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8020fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d001      	beq.n	8020fcc <SD_InitCard+0x40>
    {
      return errorstate;
 8020fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020fca:	e0a9      	b.n	8021120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	2100      	movs	r1, #0
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	f003 f929 	bl	802422a <SDIO_GetResponse>
 8020fd8:	4602      	mov	r2, r0
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8020fde:	687b      	ldr	r3, [r7, #4]
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	2104      	movs	r1, #4
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	f003 f920 	bl	802422a <SDIO_GetResponse>
 8020fea:	4602      	mov	r2, r0
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	681b      	ldr	r3, [r3, #0]
 8020ff4:	2108      	movs	r1, #8
 8020ff6:	4618      	mov	r0, r3
 8020ff8:	f003 f917 	bl	802422a <SDIO_GetResponse>
 8020ffc:	4602      	mov	r2, r0
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	681b      	ldr	r3, [r3, #0]
 8021006:	210c      	movs	r1, #12
 8021008:	4618      	mov	r0, r3
 802100a:	f003 f90e 	bl	802422a <SDIO_GetResponse>
 802100e:	4602      	mov	r2, r0
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802101a:	2b03      	cmp	r3, #3
 802101c:	d00d      	beq.n	802103a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	f107 020e 	add.w	r2, r7, #14
 8021026:	4611      	mov	r1, r2
 8021028:	4618      	mov	r0, r3
 802102a:	f003 fb2e 	bl	802468a <SDMMC_CmdSetRelAdd>
 802102e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8021030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021032:	2b00      	cmp	r3, #0
 8021034:	d001      	beq.n	802103a <SD_InitCard+0xae>
    {
      return errorstate;
 8021036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021038:	e072      	b.n	8021120 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802103e:	2b03      	cmp	r3, #3
 8021040:	d036      	beq.n	80210b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8021042:	89fb      	ldrh	r3, [r7, #14]
 8021044:	461a      	mov	r2, r3
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	681a      	ldr	r2, [r3, #0]
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021052:	041b      	lsls	r3, r3, #16
 8021054:	4619      	mov	r1, r3
 8021056:	4610      	mov	r0, r2
 8021058:	f003 faf8 	bl	802464c <SDMMC_CmdSendCSD>
 802105c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 802105e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021060:	2b00      	cmp	r3, #0
 8021062:	d001      	beq.n	8021068 <SD_InitCard+0xdc>
    {
      return errorstate;
 8021064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021066:	e05b      	b.n	8021120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	681b      	ldr	r3, [r3, #0]
 802106c:	2100      	movs	r1, #0
 802106e:	4618      	mov	r0, r3
 8021070:	f003 f8db 	bl	802422a <SDIO_GetResponse>
 8021074:	4602      	mov	r2, r0
 8021076:	687b      	ldr	r3, [r7, #4]
 8021078:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	2104      	movs	r1, #4
 8021080:	4618      	mov	r0, r3
 8021082:	f003 f8d2 	bl	802422a <SDIO_GetResponse>
 8021086:	4602      	mov	r2, r0
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	2108      	movs	r1, #8
 8021092:	4618      	mov	r0, r3
 8021094:	f003 f8c9 	bl	802422a <SDIO_GetResponse>
 8021098:	4602      	mov	r2, r0
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	210c      	movs	r1, #12
 80210a4:	4618      	mov	r0, r3
 80210a6:	f003 f8c0 	bl	802422a <SDIO_GetResponse>
 80210aa:	4602      	mov	r2, r0
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	2104      	movs	r1, #4
 80210b6:	4618      	mov	r0, r3
 80210b8:	f003 f8b7 	bl	802422a <SDIO_GetResponse>
 80210bc:	4603      	mov	r3, r0
 80210be:	0d1a      	lsrs	r2, r3, #20
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80210c4:	f107 0310 	add.w	r3, r7, #16
 80210c8:	4619      	mov	r1, r3
 80210ca:	6878      	ldr	r0, [r7, #4]
 80210cc:	f7ff fbe4 	bl	8020898 <HAL_SD_GetCardCSD>
 80210d0:	4603      	mov	r3, r0
 80210d2:	2b00      	cmp	r3, #0
 80210d4:	d002      	beq.n	80210dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80210d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80210da:	e021      	b.n	8021120 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	6819      	ldr	r1, [r3, #0]
 80210e0:	687b      	ldr	r3, [r7, #4]
 80210e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80210e4:	041b      	lsls	r3, r3, #16
 80210e6:	2200      	movs	r2, #0
 80210e8:	461c      	mov	r4, r3
 80210ea:	4615      	mov	r5, r2
 80210ec:	4622      	mov	r2, r4
 80210ee:	462b      	mov	r3, r5
 80210f0:	4608      	mov	r0, r1
 80210f2:	f003 f9a5 	bl	8024440 <SDMMC_CmdSelDesel>
 80210f6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80210f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80210fa:	2b00      	cmp	r3, #0
 80210fc:	d001      	beq.n	8021102 <SD_InitCard+0x176>
  {
    return errorstate;
 80210fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021100:	e00e      	b.n	8021120 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	681d      	ldr	r5, [r3, #0]
 8021106:	687b      	ldr	r3, [r7, #4]
 8021108:	466c      	mov	r4, sp
 802110a:	f103 0210 	add.w	r2, r3, #16
 802110e:	ca07      	ldmia	r2, {r0, r1, r2}
 8021110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021114:	3304      	adds	r3, #4
 8021116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021118:	4628      	mov	r0, r5
 802111a:	f002 ffe9 	bl	80240f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 802111e:	2300      	movs	r3, #0
}
 8021120:	4618      	mov	r0, r3
 8021122:	3740      	adds	r7, #64	; 0x40
 8021124:	46bd      	mov	sp, r7
 8021126:	bdb0      	pop	{r4, r5, r7, pc}

08021128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8021128:	b580      	push	{r7, lr}
 802112a:	b086      	sub	sp, #24
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8021130:	2300      	movs	r3, #0
 8021132:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8021134:	2300      	movs	r3, #0
 8021136:	617b      	str	r3, [r7, #20]
 8021138:	2300      	movs	r3, #0
 802113a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	4618      	mov	r0, r3
 8021142:	f003 f9a0 	bl	8024486 <SDMMC_CmdGoIdleState>
 8021146:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	2b00      	cmp	r3, #0
 802114c:	d001      	beq.n	8021152 <SD_PowerON+0x2a>
  {
    return errorstate;
 802114e:	68fb      	ldr	r3, [r7, #12]
 8021150:	e072      	b.n	8021238 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	4618      	mov	r0, r3
 8021158:	f003 f9b3 	bl	80244c2 <SDMMC_CmdOperCond>
 802115c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	2b00      	cmp	r3, #0
 8021162:	d00d      	beq.n	8021180 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	2200      	movs	r2, #0
 8021168:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	681b      	ldr	r3, [r3, #0]
 802116e:	4618      	mov	r0, r3
 8021170:	f003 f989 	bl	8024486 <SDMMC_CmdGoIdleState>
 8021174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d004      	beq.n	8021186 <SD_PowerON+0x5e>
    {
      return errorstate;
 802117c:	68fb      	ldr	r3, [r7, #12]
 802117e:	e05b      	b.n	8021238 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	2201      	movs	r2, #1
 8021184:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802118a:	2b01      	cmp	r3, #1
 802118c:	d137      	bne.n	80211fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	2100      	movs	r1, #0
 8021194:	4618      	mov	r0, r3
 8021196:	f003 f9b3 	bl	8024500 <SDMMC_CmdAppCommand>
 802119a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d02d      	beq.n	80211fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80211a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80211a6:	e047      	b.n	8021238 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	2100      	movs	r1, #0
 80211ae:	4618      	mov	r0, r3
 80211b0:	f003 f9a6 	bl	8024500 <SDMMC_CmdAppCommand>
 80211b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80211b6:	68fb      	ldr	r3, [r7, #12]
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d001      	beq.n	80211c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	e03b      	b.n	8021238 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	491e      	ldr	r1, [pc, #120]	; (8021240 <SD_PowerON+0x118>)
 80211c6:	4618      	mov	r0, r3
 80211c8:	f003 f9bc 	bl	8024544 <SDMMC_CmdAppOperCommand>
 80211cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80211ce:	68fb      	ldr	r3, [r7, #12]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d002      	beq.n	80211da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80211d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80211d8:	e02e      	b.n	8021238 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80211da:	687b      	ldr	r3, [r7, #4]
 80211dc:	681b      	ldr	r3, [r3, #0]
 80211de:	2100      	movs	r1, #0
 80211e0:	4618      	mov	r0, r3
 80211e2:	f003 f822 	bl	802422a <SDIO_GetResponse>
 80211e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80211e8:	697b      	ldr	r3, [r7, #20]
 80211ea:	0fdb      	lsrs	r3, r3, #31
 80211ec:	2b01      	cmp	r3, #1
 80211ee:	d101      	bne.n	80211f4 <SD_PowerON+0xcc>
 80211f0:	2301      	movs	r3, #1
 80211f2:	e000      	b.n	80211f6 <SD_PowerON+0xce>
 80211f4:	2300      	movs	r3, #0
 80211f6:	613b      	str	r3, [r7, #16]

    count++;
 80211f8:	68bb      	ldr	r3, [r7, #8]
 80211fa:	3301      	adds	r3, #1
 80211fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80211fe:	68bb      	ldr	r3, [r7, #8]
 8021200:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021204:	4293      	cmp	r3, r2
 8021206:	d802      	bhi.n	802120e <SD_PowerON+0xe6>
 8021208:	693b      	ldr	r3, [r7, #16]
 802120a:	2b00      	cmp	r3, #0
 802120c:	d0cc      	beq.n	80211a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 802120e:	68bb      	ldr	r3, [r7, #8]
 8021210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021214:	4293      	cmp	r3, r2
 8021216:	d902      	bls.n	802121e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8021218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 802121c:	e00c      	b.n	8021238 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 802121e:	697b      	ldr	r3, [r7, #20]
 8021220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8021224:	2b00      	cmp	r3, #0
 8021226:	d003      	beq.n	8021230 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	2201      	movs	r2, #1
 802122c:	645a      	str	r2, [r3, #68]	; 0x44
 802122e:	e002      	b.n	8021236 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	2200      	movs	r2, #0
 8021234:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8021236:	2300      	movs	r3, #0
}
 8021238:	4618      	mov	r0, r3
 802123a:	3718      	adds	r7, #24
 802123c:	46bd      	mov	sp, r7
 802123e:	bd80      	pop	{r7, pc}
 8021240:	c1100000 	.word	0xc1100000

08021244 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8021244:	b580      	push	{r7, lr}
 8021246:	b084      	sub	sp, #16
 8021248:	af00      	add	r7, sp, #0
 802124a:	6078      	str	r0, [r7, #4]
 802124c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 802124e:	683b      	ldr	r3, [r7, #0]
 8021250:	2b00      	cmp	r3, #0
 8021252:	d102      	bne.n	802125a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8021254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021258:	e018      	b.n	802128c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	681a      	ldr	r2, [r3, #0]
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021262:	041b      	lsls	r3, r3, #16
 8021264:	4619      	mov	r1, r3
 8021266:	4610      	mov	r0, r2
 8021268:	f003 fa30 	bl	80246cc <SDMMC_CmdSendStatus>
 802126c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 802126e:	68fb      	ldr	r3, [r7, #12]
 8021270:	2b00      	cmp	r3, #0
 8021272:	d001      	beq.n	8021278 <SD_SendStatus+0x34>
  {
    return errorstate;
 8021274:	68fb      	ldr	r3, [r7, #12]
 8021276:	e009      	b.n	802128c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	681b      	ldr	r3, [r3, #0]
 802127c:	2100      	movs	r1, #0
 802127e:	4618      	mov	r0, r3
 8021280:	f002 ffd3 	bl	802422a <SDIO_GetResponse>
 8021284:	4602      	mov	r2, r0
 8021286:	683b      	ldr	r3, [r7, #0]
 8021288:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 802128a:	2300      	movs	r3, #0
}
 802128c:	4618      	mov	r0, r3
 802128e:	3710      	adds	r7, #16
 8021290:	46bd      	mov	sp, r7
 8021292:	bd80      	pop	{r7, pc}

08021294 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8021294:	b580      	push	{r7, lr}
 8021296:	b086      	sub	sp, #24
 8021298:	af00      	add	r7, sp, #0
 802129a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 802129c:	2300      	movs	r3, #0
 802129e:	60fb      	str	r3, [r7, #12]
 80212a0:	2300      	movs	r3, #0
 80212a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80212a4:	687b      	ldr	r3, [r7, #4]
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	2100      	movs	r1, #0
 80212aa:	4618      	mov	r0, r3
 80212ac:	f002 ffbd 	bl	802422a <SDIO_GetResponse>
 80212b0:	4603      	mov	r3, r0
 80212b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80212b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80212ba:	d102      	bne.n	80212c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80212bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80212c0:	e02f      	b.n	8021322 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80212c2:	f107 030c 	add.w	r3, r7, #12
 80212c6:	4619      	mov	r1, r3
 80212c8:	6878      	ldr	r0, [r7, #4]
 80212ca:	f000 f879 	bl	80213c0 <SD_FindSCR>
 80212ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80212d0:	697b      	ldr	r3, [r7, #20]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d001      	beq.n	80212da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	e023      	b.n	8021322 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80212da:	693b      	ldr	r3, [r7, #16]
 80212dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d01c      	beq.n	802131e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	681a      	ldr	r2, [r3, #0]
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80212ec:	041b      	lsls	r3, r3, #16
 80212ee:	4619      	mov	r1, r3
 80212f0:	4610      	mov	r0, r2
 80212f2:	f003 f905 	bl	8024500 <SDMMC_CmdAppCommand>
 80212f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80212f8:	697b      	ldr	r3, [r7, #20]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d001      	beq.n	8021302 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80212fe:	697b      	ldr	r3, [r7, #20]
 8021300:	e00f      	b.n	8021322 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	2102      	movs	r1, #2
 8021308:	4618      	mov	r0, r3
 802130a:	f003 f93e 	bl	802458a <SDMMC_CmdBusWidth>
 802130e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8021310:	697b      	ldr	r3, [r7, #20]
 8021312:	2b00      	cmp	r3, #0
 8021314:	d001      	beq.n	802131a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8021316:	697b      	ldr	r3, [r7, #20]
 8021318:	e003      	b.n	8021322 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 802131a:	2300      	movs	r3, #0
 802131c:	e001      	b.n	8021322 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 802131e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8021322:	4618      	mov	r0, r3
 8021324:	3718      	adds	r7, #24
 8021326:	46bd      	mov	sp, r7
 8021328:	bd80      	pop	{r7, pc}

0802132a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 802132a:	b580      	push	{r7, lr}
 802132c:	b086      	sub	sp, #24
 802132e:	af00      	add	r7, sp, #0
 8021330:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8021332:	2300      	movs	r3, #0
 8021334:	60fb      	str	r3, [r7, #12]
 8021336:	2300      	movs	r3, #0
 8021338:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	681b      	ldr	r3, [r3, #0]
 802133e:	2100      	movs	r1, #0
 8021340:	4618      	mov	r0, r3
 8021342:	f002 ff72 	bl	802422a <SDIO_GetResponse>
 8021346:	4603      	mov	r3, r0
 8021348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802134c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8021350:	d102      	bne.n	8021358 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8021352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021356:	e02f      	b.n	80213b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8021358:	f107 030c 	add.w	r3, r7, #12
 802135c:	4619      	mov	r1, r3
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f82e 	bl	80213c0 <SD_FindSCR>
 8021364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8021366:	697b      	ldr	r3, [r7, #20]
 8021368:	2b00      	cmp	r3, #0
 802136a:	d001      	beq.n	8021370 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 802136c:	697b      	ldr	r3, [r7, #20]
 802136e:	e023      	b.n	80213b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8021370:	693b      	ldr	r3, [r7, #16]
 8021372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021376:	2b00      	cmp	r3, #0
 8021378:	d01c      	beq.n	80213b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 802137a:	687b      	ldr	r3, [r7, #4]
 802137c:	681a      	ldr	r2, [r3, #0]
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021382:	041b      	lsls	r3, r3, #16
 8021384:	4619      	mov	r1, r3
 8021386:	4610      	mov	r0, r2
 8021388:	f003 f8ba 	bl	8024500 <SDMMC_CmdAppCommand>
 802138c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 802138e:	697b      	ldr	r3, [r7, #20]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d001      	beq.n	8021398 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8021394:	697b      	ldr	r3, [r7, #20]
 8021396:	e00f      	b.n	80213b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8021398:	687b      	ldr	r3, [r7, #4]
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	2100      	movs	r1, #0
 802139e:	4618      	mov	r0, r3
 80213a0:	f003 f8f3 	bl	802458a <SDMMC_CmdBusWidth>
 80213a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80213a6:	697b      	ldr	r3, [r7, #20]
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	d001      	beq.n	80213b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80213ac:	697b      	ldr	r3, [r7, #20]
 80213ae:	e003      	b.n	80213b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80213b0:	2300      	movs	r3, #0
 80213b2:	e001      	b.n	80213b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80213b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80213b8:	4618      	mov	r0, r3
 80213ba:	3718      	adds	r7, #24
 80213bc:	46bd      	mov	sp, r7
 80213be:	bd80      	pop	{r7, pc}

080213c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80213c0:	b590      	push	{r4, r7, lr}
 80213c2:	b08f      	sub	sp, #60	; 0x3c
 80213c4:	af00      	add	r7, sp, #0
 80213c6:	6078      	str	r0, [r7, #4]
 80213c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80213ca:	f7fb ffc5 	bl	801d358 <HAL_GetTick>
 80213ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80213d0:	2300      	movs	r3, #0
 80213d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80213d4:	2300      	movs	r3, #0
 80213d6:	60bb      	str	r3, [r7, #8]
 80213d8:	2300      	movs	r3, #0
 80213da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80213dc:	683b      	ldr	r3, [r7, #0]
 80213de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	2108      	movs	r1, #8
 80213e6:	4618      	mov	r0, r3
 80213e8:	f002 ff5e 	bl	80242a8 <SDMMC_CmdBlockLength>
 80213ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80213ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d001      	beq.n	80213f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80213f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213f6:	e0a9      	b.n	802154c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	681a      	ldr	r2, [r3, #0]
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021400:	041b      	lsls	r3, r3, #16
 8021402:	4619      	mov	r1, r3
 8021404:	4610      	mov	r0, r2
 8021406:	f003 f87b 	bl	8024500 <SDMMC_CmdAppCommand>
 802140a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 802140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140e:	2b00      	cmp	r3, #0
 8021410:	d001      	beq.n	8021416 <SD_FindSCR+0x56>
  {
    return errorstate;
 8021412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021414:	e09a      	b.n	802154c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8021416:	f04f 33ff 	mov.w	r3, #4294967295
 802141a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 802141c:	2308      	movs	r3, #8
 802141e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8021420:	2330      	movs	r3, #48	; 0x30
 8021422:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8021424:	2302      	movs	r3, #2
 8021426:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8021428:	2300      	movs	r3, #0
 802142a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 802142c:	2301      	movs	r3, #1
 802142e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	f107 0210 	add.w	r2, r7, #16
 8021438:	4611      	mov	r1, r2
 802143a:	4618      	mov	r0, r3
 802143c:	f002 ff08 	bl	8024250 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	681b      	ldr	r3, [r3, #0]
 8021444:	4618      	mov	r0, r3
 8021446:	f003 f8c2 	bl	80245ce <SDMMC_CmdSendSCR>
 802144a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 802144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802144e:	2b00      	cmp	r3, #0
 8021450:	d022      	beq.n	8021498 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8021452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021454:	e07a      	b.n	802154c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	681b      	ldr	r3, [r3, #0]
 802145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8021460:	2b00      	cmp	r3, #0
 8021462:	d00e      	beq.n	8021482 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8021464:	687b      	ldr	r3, [r7, #4]
 8021466:	6819      	ldr	r1, [r3, #0]
 8021468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802146a:	009b      	lsls	r3, r3, #2
 802146c:	f107 0208 	add.w	r2, r7, #8
 8021470:	18d4      	adds	r4, r2, r3
 8021472:	4608      	mov	r0, r1
 8021474:	f002 fe67 	bl	8024146 <SDIO_ReadFIFO>
 8021478:	4603      	mov	r3, r0
 802147a:	6023      	str	r3, [r4, #0]
      index++;
 802147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802147e:	3301      	adds	r3, #1
 8021480:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8021482:	f7fb ff69 	bl	801d358 <HAL_GetTick>
 8021486:	4602      	mov	r2, r0
 8021488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802148a:	1ad3      	subs	r3, r2, r3
 802148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021490:	d102      	bne.n	8021498 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8021492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021496:	e059      	b.n	802154c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802149e:	f240 432a 	movw	r3, #1066	; 0x42a
 80214a2:	4013      	ands	r3, r2
 80214a4:	2b00      	cmp	r3, #0
 80214a6:	d0d6      	beq.n	8021456 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80214ae:	f003 0308 	and.w	r3, r3, #8
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d005      	beq.n	80214c2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80214b6:	687b      	ldr	r3, [r7, #4]
 80214b8:	681b      	ldr	r3, [r3, #0]
 80214ba:	2208      	movs	r2, #8
 80214bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80214be:	2308      	movs	r3, #8
 80214c0:	e044      	b.n	802154c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80214c8:	f003 0302 	and.w	r3, r3, #2
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d005      	beq.n	80214dc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80214d0:	687b      	ldr	r3, [r7, #4]
 80214d2:	681b      	ldr	r3, [r3, #0]
 80214d4:	2202      	movs	r2, #2
 80214d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80214d8:	2302      	movs	r3, #2
 80214da:	e037      	b.n	802154c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80214dc:	687b      	ldr	r3, [r7, #4]
 80214de:	681b      	ldr	r3, [r3, #0]
 80214e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80214e2:	f003 0320 	and.w	r3, r3, #32
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d005      	beq.n	80214f6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	2220      	movs	r2, #32
 80214f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80214f2:	2320      	movs	r3, #32
 80214f4:	e02a      	b.n	802154c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80214fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	061a      	lsls	r2, r3, #24
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	021b      	lsls	r3, r3, #8
 8021508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802150c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	0a1b      	lsrs	r3, r3, #8
 8021512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8021516:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8021518:	68fb      	ldr	r3, [r7, #12]
 802151a:	0e1b      	lsrs	r3, r3, #24
 802151c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 802151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021520:	601a      	str	r2, [r3, #0]
    scr++;
 8021522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021524:	3304      	adds	r3, #4
 8021526:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8021528:	68bb      	ldr	r3, [r7, #8]
 802152a:	061a      	lsls	r2, r3, #24
 802152c:	68bb      	ldr	r3, [r7, #8]
 802152e:	021b      	lsls	r3, r3, #8
 8021530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8021534:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8021536:	68bb      	ldr	r3, [r7, #8]
 8021538:	0a1b      	lsrs	r3, r3, #8
 802153a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 802153e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8021540:	68bb      	ldr	r3, [r7, #8]
 8021542:	0e1b      	lsrs	r3, r3, #24
 8021544:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8021546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021548:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 802154a:	2300      	movs	r3, #0
}
 802154c:	4618      	mov	r0, r3
 802154e:	373c      	adds	r7, #60	; 0x3c
 8021550:	46bd      	mov	sp, r7
 8021552:	bd90      	pop	{r4, r7, pc}

08021554 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8021554:	b580      	push	{r7, lr}
 8021556:	b086      	sub	sp, #24
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021560:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021566:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8021568:	693b      	ldr	r3, [r7, #16]
 802156a:	2b00      	cmp	r3, #0
 802156c:	d03f      	beq.n	80215ee <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 802156e:	2300      	movs	r3, #0
 8021570:	617b      	str	r3, [r7, #20]
 8021572:	e033      	b.n	80215dc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8021574:	687b      	ldr	r3, [r7, #4]
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	4618      	mov	r0, r3
 802157a:	f002 fde4 	bl	8024146 <SDIO_ReadFIFO>
 802157e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8021580:	68bb      	ldr	r3, [r7, #8]
 8021582:	b2da      	uxtb	r2, r3
 8021584:	68fb      	ldr	r3, [r7, #12]
 8021586:	701a      	strb	r2, [r3, #0]
      tmp++;
 8021588:	68fb      	ldr	r3, [r7, #12]
 802158a:	3301      	adds	r3, #1
 802158c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 802158e:	693b      	ldr	r3, [r7, #16]
 8021590:	3b01      	subs	r3, #1
 8021592:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8021594:	68bb      	ldr	r3, [r7, #8]
 8021596:	0a1b      	lsrs	r3, r3, #8
 8021598:	b2da      	uxtb	r2, r3
 802159a:	68fb      	ldr	r3, [r7, #12]
 802159c:	701a      	strb	r2, [r3, #0]
      tmp++;
 802159e:	68fb      	ldr	r3, [r7, #12]
 80215a0:	3301      	adds	r3, #1
 80215a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80215a4:	693b      	ldr	r3, [r7, #16]
 80215a6:	3b01      	subs	r3, #1
 80215a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80215aa:	68bb      	ldr	r3, [r7, #8]
 80215ac:	0c1b      	lsrs	r3, r3, #16
 80215ae:	b2da      	uxtb	r2, r3
 80215b0:	68fb      	ldr	r3, [r7, #12]
 80215b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80215b4:	68fb      	ldr	r3, [r7, #12]
 80215b6:	3301      	adds	r3, #1
 80215b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80215ba:	693b      	ldr	r3, [r7, #16]
 80215bc:	3b01      	subs	r3, #1
 80215be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80215c0:	68bb      	ldr	r3, [r7, #8]
 80215c2:	0e1b      	lsrs	r3, r3, #24
 80215c4:	b2da      	uxtb	r2, r3
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	3301      	adds	r3, #1
 80215ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80215d0:	693b      	ldr	r3, [r7, #16]
 80215d2:	3b01      	subs	r3, #1
 80215d4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80215d6:	697b      	ldr	r3, [r7, #20]
 80215d8:	3301      	adds	r3, #1
 80215da:	617b      	str	r3, [r7, #20]
 80215dc:	697b      	ldr	r3, [r7, #20]
 80215de:	2b07      	cmp	r3, #7
 80215e0:	d9c8      	bls.n	8021574 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	68fa      	ldr	r2, [r7, #12]
 80215e6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	693a      	ldr	r2, [r7, #16]
 80215ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80215ee:	bf00      	nop
 80215f0:	3718      	adds	r7, #24
 80215f2:	46bd      	mov	sp, r7
 80215f4:	bd80      	pop	{r7, pc}

080215f6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80215f6:	b580      	push	{r7, lr}
 80215f8:	b086      	sub	sp, #24
 80215fa:	af00      	add	r7, sp, #0
 80215fc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	6a1b      	ldr	r3, [r3, #32]
 8021602:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021608:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 802160a:	693b      	ldr	r3, [r7, #16]
 802160c:	2b00      	cmp	r3, #0
 802160e:	d043      	beq.n	8021698 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8021610:	2300      	movs	r3, #0
 8021612:	617b      	str	r3, [r7, #20]
 8021614:	e037      	b.n	8021686 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8021616:	68fb      	ldr	r3, [r7, #12]
 8021618:	781b      	ldrb	r3, [r3, #0]
 802161a:	60bb      	str	r3, [r7, #8]
      tmp++;
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	3301      	adds	r3, #1
 8021620:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8021622:	693b      	ldr	r3, [r7, #16]
 8021624:	3b01      	subs	r3, #1
 8021626:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	781b      	ldrb	r3, [r3, #0]
 802162c:	021a      	lsls	r2, r3, #8
 802162e:	68bb      	ldr	r3, [r7, #8]
 8021630:	4313      	orrs	r3, r2
 8021632:	60bb      	str	r3, [r7, #8]
      tmp++;
 8021634:	68fb      	ldr	r3, [r7, #12]
 8021636:	3301      	adds	r3, #1
 8021638:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 802163a:	693b      	ldr	r3, [r7, #16]
 802163c:	3b01      	subs	r3, #1
 802163e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8021640:	68fb      	ldr	r3, [r7, #12]
 8021642:	781b      	ldrb	r3, [r3, #0]
 8021644:	041a      	lsls	r2, r3, #16
 8021646:	68bb      	ldr	r3, [r7, #8]
 8021648:	4313      	orrs	r3, r2
 802164a:	60bb      	str	r3, [r7, #8]
      tmp++;
 802164c:	68fb      	ldr	r3, [r7, #12]
 802164e:	3301      	adds	r3, #1
 8021650:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8021652:	693b      	ldr	r3, [r7, #16]
 8021654:	3b01      	subs	r3, #1
 8021656:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8021658:	68fb      	ldr	r3, [r7, #12]
 802165a:	781b      	ldrb	r3, [r3, #0]
 802165c:	061a      	lsls	r2, r3, #24
 802165e:	68bb      	ldr	r3, [r7, #8]
 8021660:	4313      	orrs	r3, r2
 8021662:	60bb      	str	r3, [r7, #8]
      tmp++;
 8021664:	68fb      	ldr	r3, [r7, #12]
 8021666:	3301      	adds	r3, #1
 8021668:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 802166a:	693b      	ldr	r3, [r7, #16]
 802166c:	3b01      	subs	r3, #1
 802166e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	f107 0208 	add.w	r2, r7, #8
 8021678:	4611      	mov	r1, r2
 802167a:	4618      	mov	r0, r3
 802167c:	f002 fd70 	bl	8024160 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8021680:	697b      	ldr	r3, [r7, #20]
 8021682:	3301      	adds	r3, #1
 8021684:	617b      	str	r3, [r7, #20]
 8021686:	697b      	ldr	r3, [r7, #20]
 8021688:	2b07      	cmp	r3, #7
 802168a:	d9c4      	bls.n	8021616 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	68fa      	ldr	r2, [r7, #12]
 8021690:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8021692:	687b      	ldr	r3, [r7, #4]
 8021694:	693a      	ldr	r2, [r7, #16]
 8021696:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8021698:	bf00      	nop
 802169a:	3718      	adds	r7, #24
 802169c:	46bd      	mov	sp, r7
 802169e:	bd80      	pop	{r7, pc}

080216a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80216a0:	b580      	push	{r7, lr}
 80216a2:	b082      	sub	sp, #8
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d101      	bne.n	80216b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80216ae:	2301      	movs	r3, #1
 80216b0:	e056      	b.n	8021760 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	2200      	movs	r2, #0
 80216b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80216be:	b2db      	uxtb	r3, r3
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d106      	bne.n	80216d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80216c4:	687b      	ldr	r3, [r7, #4]
 80216c6:	2200      	movs	r2, #0
 80216c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80216cc:	6878      	ldr	r0, [r7, #4]
 80216ce:	f7f5 fdd3 	bl	8017278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	2202      	movs	r2, #2
 80216d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	681a      	ldr	r2, [r3, #0]
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80216e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	685a      	ldr	r2, [r3, #4]
 80216ee:	687b      	ldr	r3, [r7, #4]
 80216f0:	689b      	ldr	r3, [r3, #8]
 80216f2:	431a      	orrs	r2, r3
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	68db      	ldr	r3, [r3, #12]
 80216f8:	431a      	orrs	r2, r3
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	691b      	ldr	r3, [r3, #16]
 80216fe:	431a      	orrs	r2, r3
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	695b      	ldr	r3, [r3, #20]
 8021704:	431a      	orrs	r2, r3
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	699b      	ldr	r3, [r3, #24]
 802170a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802170e:	431a      	orrs	r2, r3
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	69db      	ldr	r3, [r3, #28]
 8021714:	431a      	orrs	r2, r3
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	6a1b      	ldr	r3, [r3, #32]
 802171a:	ea42 0103 	orr.w	r1, r2, r3
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	681b      	ldr	r3, [r3, #0]
 8021726:	430a      	orrs	r2, r1
 8021728:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	699b      	ldr	r3, [r3, #24]
 802172e:	0c1b      	lsrs	r3, r3, #16
 8021730:	f003 0104 	and.w	r1, r3, #4
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	430a      	orrs	r2, r1
 802173e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	69da      	ldr	r2, [r3, #28]
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802174e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	2200      	movs	r2, #0
 8021754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8021756:	687b      	ldr	r3, [r7, #4]
 8021758:	2201      	movs	r2, #1
 802175a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802175e:	2300      	movs	r3, #0
}
 8021760:	4618      	mov	r0, r3
 8021762:	3708      	adds	r7, #8
 8021764:	46bd      	mov	sp, r7
 8021766:	bd80      	pop	{r7, pc}

08021768 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8021768:	b580      	push	{r7, lr}
 802176a:	b082      	sub	sp, #8
 802176c:	af00      	add	r7, sp, #0
 802176e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	2b00      	cmp	r3, #0
 8021774:	d101      	bne.n	802177a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8021776:	2301      	movs	r3, #1
 8021778:	e01a      	b.n	80217b0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	2202      	movs	r2, #2
 802177e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	681a      	ldr	r2, [r3, #0]
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021790:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8021792:	6878      	ldr	r0, [r7, #4]
 8021794:	f7f5 fe0a 	bl	80173ac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	2200      	movs	r2, #0
 802179c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	2200      	movs	r2, #0
 80217a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	2200      	movs	r2, #0
 80217aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80217ae:	2300      	movs	r3, #0
}
 80217b0:	4618      	mov	r0, r3
 80217b2:	3708      	adds	r7, #8
 80217b4:	46bd      	mov	sp, r7
 80217b6:	bd80      	pop	{r7, pc}

080217b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b08c      	sub	sp, #48	; 0x30
 80217bc:	af00      	add	r7, sp, #0
 80217be:	60f8      	str	r0, [r7, #12]
 80217c0:	60b9      	str	r1, [r7, #8]
 80217c2:	607a      	str	r2, [r7, #4]
 80217c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80217c6:	2301      	movs	r3, #1
 80217c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80217ca:	2300      	movs	r3, #0
 80217cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80217d0:	68fb      	ldr	r3, [r7, #12]
 80217d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80217d6:	2b01      	cmp	r3, #1
 80217d8:	d101      	bne.n	80217de <HAL_SPI_TransmitReceive+0x26>
 80217da:	2302      	movs	r3, #2
 80217dc:	e18a      	b.n	8021af4 <HAL_SPI_TransmitReceive+0x33c>
 80217de:	68fb      	ldr	r3, [r7, #12]
 80217e0:	2201      	movs	r2, #1
 80217e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80217e6:	f7fb fdb7 	bl	801d358 <HAL_GetTick>
 80217ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80217ec:	68fb      	ldr	r3, [r7, #12]
 80217ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80217f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	685b      	ldr	r3, [r3, #4]
 80217fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80217fc:	887b      	ldrh	r3, [r7, #2]
 80217fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8021800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021804:	2b01      	cmp	r3, #1
 8021806:	d00f      	beq.n	8021828 <HAL_SPI_TransmitReceive+0x70>
 8021808:	69fb      	ldr	r3, [r7, #28]
 802180a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802180e:	d107      	bne.n	8021820 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8021810:	68fb      	ldr	r3, [r7, #12]
 8021812:	689b      	ldr	r3, [r3, #8]
 8021814:	2b00      	cmp	r3, #0
 8021816:	d103      	bne.n	8021820 <HAL_SPI_TransmitReceive+0x68>
 8021818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802181c:	2b04      	cmp	r3, #4
 802181e:	d003      	beq.n	8021828 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8021820:	2302      	movs	r3, #2
 8021822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8021826:	e15b      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8021828:	68bb      	ldr	r3, [r7, #8]
 802182a:	2b00      	cmp	r3, #0
 802182c:	d005      	beq.n	802183a <HAL_SPI_TransmitReceive+0x82>
 802182e:	687b      	ldr	r3, [r7, #4]
 8021830:	2b00      	cmp	r3, #0
 8021832:	d002      	beq.n	802183a <HAL_SPI_TransmitReceive+0x82>
 8021834:	887b      	ldrh	r3, [r7, #2]
 8021836:	2b00      	cmp	r3, #0
 8021838:	d103      	bne.n	8021842 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 802183a:	2301      	movs	r3, #1
 802183c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8021840:	e14e      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8021842:	68fb      	ldr	r3, [r7, #12]
 8021844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021848:	b2db      	uxtb	r3, r3
 802184a:	2b04      	cmp	r3, #4
 802184c:	d003      	beq.n	8021856 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802184e:	68fb      	ldr	r3, [r7, #12]
 8021850:	2205      	movs	r2, #5
 8021852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	2200      	movs	r2, #0
 802185a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802185c:	68fb      	ldr	r3, [r7, #12]
 802185e:	687a      	ldr	r2, [r7, #4]
 8021860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8021862:	68fb      	ldr	r3, [r7, #12]
 8021864:	887a      	ldrh	r2, [r7, #2]
 8021866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8021868:	68fb      	ldr	r3, [r7, #12]
 802186a:	887a      	ldrh	r2, [r7, #2]
 802186c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802186e:	68fb      	ldr	r3, [r7, #12]
 8021870:	68ba      	ldr	r2, [r7, #8]
 8021872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8021874:	68fb      	ldr	r3, [r7, #12]
 8021876:	887a      	ldrh	r2, [r7, #2]
 8021878:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 802187a:	68fb      	ldr	r3, [r7, #12]
 802187c:	887a      	ldrh	r2, [r7, #2]
 802187e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	2200      	movs	r2, #0
 8021884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	2200      	movs	r2, #0
 802188a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802188c:	68fb      	ldr	r3, [r7, #12]
 802188e:	681b      	ldr	r3, [r3, #0]
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021896:	2b40      	cmp	r3, #64	; 0x40
 8021898:	d007      	beq.n	80218aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802189a:	68fb      	ldr	r3, [r7, #12]
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	681a      	ldr	r2, [r3, #0]
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	681b      	ldr	r3, [r3, #0]
 80218a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80218a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	68db      	ldr	r3, [r3, #12]
 80218ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80218b2:	d178      	bne.n	80219a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80218b4:	68fb      	ldr	r3, [r7, #12]
 80218b6:	685b      	ldr	r3, [r3, #4]
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d002      	beq.n	80218c2 <HAL_SPI_TransmitReceive+0x10a>
 80218bc:	8b7b      	ldrh	r3, [r7, #26]
 80218be:	2b01      	cmp	r3, #1
 80218c0:	d166      	bne.n	8021990 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218c6:	881a      	ldrh	r2, [r3, #0]
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	681b      	ldr	r3, [r3, #0]
 80218cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80218ce:	68fb      	ldr	r3, [r7, #12]
 80218d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218d2:	1c9a      	adds	r2, r3, #2
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80218d8:	68fb      	ldr	r3, [r7, #12]
 80218da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80218dc:	b29b      	uxth	r3, r3
 80218de:	3b01      	subs	r3, #1
 80218e0:	b29a      	uxth	r2, r3
 80218e2:	68fb      	ldr	r3, [r7, #12]
 80218e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80218e6:	e053      	b.n	8021990 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	681b      	ldr	r3, [r3, #0]
 80218ec:	689b      	ldr	r3, [r3, #8]
 80218ee:	f003 0302 	and.w	r3, r3, #2
 80218f2:	2b02      	cmp	r3, #2
 80218f4:	d11b      	bne.n	802192e <HAL_SPI_TransmitReceive+0x176>
 80218f6:	68fb      	ldr	r3, [r7, #12]
 80218f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80218fa:	b29b      	uxth	r3, r3
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d016      	beq.n	802192e <HAL_SPI_TransmitReceive+0x176>
 8021900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021902:	2b01      	cmp	r3, #1
 8021904:	d113      	bne.n	802192e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8021906:	68fb      	ldr	r3, [r7, #12]
 8021908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802190a:	881a      	ldrh	r2, [r3, #0]
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	681b      	ldr	r3, [r3, #0]
 8021910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8021912:	68fb      	ldr	r3, [r7, #12]
 8021914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021916:	1c9a      	adds	r2, r3, #2
 8021918:	68fb      	ldr	r3, [r7, #12]
 802191a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802191c:	68fb      	ldr	r3, [r7, #12]
 802191e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021920:	b29b      	uxth	r3, r3
 8021922:	3b01      	subs	r3, #1
 8021924:	b29a      	uxth	r2, r3
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802192a:	2300      	movs	r3, #0
 802192c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802192e:	68fb      	ldr	r3, [r7, #12]
 8021930:	681b      	ldr	r3, [r3, #0]
 8021932:	689b      	ldr	r3, [r3, #8]
 8021934:	f003 0301 	and.w	r3, r3, #1
 8021938:	2b01      	cmp	r3, #1
 802193a:	d119      	bne.n	8021970 <HAL_SPI_TransmitReceive+0x1b8>
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021940:	b29b      	uxth	r3, r3
 8021942:	2b00      	cmp	r3, #0
 8021944:	d014      	beq.n	8021970 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8021946:	68fb      	ldr	r3, [r7, #12]
 8021948:	681b      	ldr	r3, [r3, #0]
 802194a:	68da      	ldr	r2, [r3, #12]
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021950:	b292      	uxth	r2, r2
 8021952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8021954:	68fb      	ldr	r3, [r7, #12]
 8021956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021958:	1c9a      	adds	r2, r3, #2
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802195e:	68fb      	ldr	r3, [r7, #12]
 8021960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021962:	b29b      	uxth	r3, r3
 8021964:	3b01      	subs	r3, #1
 8021966:	b29a      	uxth	r2, r3
 8021968:	68fb      	ldr	r3, [r7, #12]
 802196a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802196c:	2301      	movs	r3, #1
 802196e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8021970:	f7fb fcf2 	bl	801d358 <HAL_GetTick>
 8021974:	4602      	mov	r2, r0
 8021976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021978:	1ad3      	subs	r3, r2, r3
 802197a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802197c:	429a      	cmp	r2, r3
 802197e:	d807      	bhi.n	8021990 <HAL_SPI_TransmitReceive+0x1d8>
 8021980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021986:	d003      	beq.n	8021990 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8021988:	2303      	movs	r3, #3
 802198a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802198e:	e0a7      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021990:	68fb      	ldr	r3, [r7, #12]
 8021992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021994:	b29b      	uxth	r3, r3
 8021996:	2b00      	cmp	r3, #0
 8021998:	d1a6      	bne.n	80218e8 <HAL_SPI_TransmitReceive+0x130>
 802199a:	68fb      	ldr	r3, [r7, #12]
 802199c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802199e:	b29b      	uxth	r3, r3
 80219a0:	2b00      	cmp	r3, #0
 80219a2:	d1a1      	bne.n	80218e8 <HAL_SPI_TransmitReceive+0x130>
 80219a4:	e07c      	b.n	8021aa0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80219a6:	68fb      	ldr	r3, [r7, #12]
 80219a8:	685b      	ldr	r3, [r3, #4]
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d002      	beq.n	80219b4 <HAL_SPI_TransmitReceive+0x1fc>
 80219ae:	8b7b      	ldrh	r3, [r7, #26]
 80219b0:	2b01      	cmp	r3, #1
 80219b2:	d16b      	bne.n	8021a8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80219b8:	68fb      	ldr	r3, [r7, #12]
 80219ba:	681b      	ldr	r3, [r3, #0]
 80219bc:	330c      	adds	r3, #12
 80219be:	7812      	ldrb	r2, [r2, #0]
 80219c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80219c2:	68fb      	ldr	r3, [r7, #12]
 80219c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219c6:	1c5a      	adds	r2, r3, #1
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80219cc:	68fb      	ldr	r3, [r7, #12]
 80219ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80219d0:	b29b      	uxth	r3, r3
 80219d2:	3b01      	subs	r3, #1
 80219d4:	b29a      	uxth	r2, r3
 80219d6:	68fb      	ldr	r3, [r7, #12]
 80219d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80219da:	e057      	b.n	8021a8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80219dc:	68fb      	ldr	r3, [r7, #12]
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	689b      	ldr	r3, [r3, #8]
 80219e2:	f003 0302 	and.w	r3, r3, #2
 80219e6:	2b02      	cmp	r3, #2
 80219e8:	d11c      	bne.n	8021a24 <HAL_SPI_TransmitReceive+0x26c>
 80219ea:	68fb      	ldr	r3, [r7, #12]
 80219ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80219ee:	b29b      	uxth	r3, r3
 80219f0:	2b00      	cmp	r3, #0
 80219f2:	d017      	beq.n	8021a24 <HAL_SPI_TransmitReceive+0x26c>
 80219f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219f6:	2b01      	cmp	r3, #1
 80219f8:	d114      	bne.n	8021a24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80219fe:	68fb      	ldr	r3, [r7, #12]
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	330c      	adds	r3, #12
 8021a04:	7812      	ldrb	r2, [r2, #0]
 8021a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8021a08:	68fb      	ldr	r3, [r7, #12]
 8021a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a0c:	1c5a      	adds	r2, r3, #1
 8021a0e:	68fb      	ldr	r3, [r7, #12]
 8021a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021a16:	b29b      	uxth	r3, r3
 8021a18:	3b01      	subs	r3, #1
 8021a1a:	b29a      	uxth	r2, r3
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8021a20:	2300      	movs	r3, #0
 8021a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	681b      	ldr	r3, [r3, #0]
 8021a28:	689b      	ldr	r3, [r3, #8]
 8021a2a:	f003 0301 	and.w	r3, r3, #1
 8021a2e:	2b01      	cmp	r3, #1
 8021a30:	d119      	bne.n	8021a66 <HAL_SPI_TransmitReceive+0x2ae>
 8021a32:	68fb      	ldr	r3, [r7, #12]
 8021a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021a36:	b29b      	uxth	r3, r3
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d014      	beq.n	8021a66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8021a3c:	68fb      	ldr	r3, [r7, #12]
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	68da      	ldr	r2, [r3, #12]
 8021a42:	68fb      	ldr	r3, [r7, #12]
 8021a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a46:	b2d2      	uxtb	r2, r2
 8021a48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8021a4a:	68fb      	ldr	r3, [r7, #12]
 8021a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a4e:	1c5a      	adds	r2, r3, #1
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8021a54:	68fb      	ldr	r3, [r7, #12]
 8021a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021a58:	b29b      	uxth	r3, r3
 8021a5a:	3b01      	subs	r3, #1
 8021a5c:	b29a      	uxth	r2, r3
 8021a5e:	68fb      	ldr	r3, [r7, #12]
 8021a60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8021a62:	2301      	movs	r3, #1
 8021a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8021a66:	f7fb fc77 	bl	801d358 <HAL_GetTick>
 8021a6a:	4602      	mov	r2, r0
 8021a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a6e:	1ad3      	subs	r3, r2, r3
 8021a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021a72:	429a      	cmp	r2, r3
 8021a74:	d803      	bhi.n	8021a7e <HAL_SPI_TransmitReceive+0x2c6>
 8021a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021a7c:	d102      	bne.n	8021a84 <HAL_SPI_TransmitReceive+0x2cc>
 8021a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d103      	bne.n	8021a8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8021a84:	2303      	movs	r3, #3
 8021a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8021a8a:	e029      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8021a8c:	68fb      	ldr	r3, [r7, #12]
 8021a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021a90:	b29b      	uxth	r3, r3
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d1a2      	bne.n	80219dc <HAL_SPI_TransmitReceive+0x224>
 8021a96:	68fb      	ldr	r3, [r7, #12]
 8021a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8021a9a:	b29b      	uxth	r3, r3
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d19d      	bne.n	80219dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8021aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8021aa4:	68f8      	ldr	r0, [r7, #12]
 8021aa6:	f000 fae1 	bl	802206c <SPI_EndRxTxTransaction>
 8021aaa:	4603      	mov	r3, r0
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d006      	beq.n	8021abe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8021ab0:	2301      	movs	r3, #1
 8021ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8021ab6:	68fb      	ldr	r3, [r7, #12]
 8021ab8:	2220      	movs	r2, #32
 8021aba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8021abc:	e010      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8021abe:	68fb      	ldr	r3, [r7, #12]
 8021ac0:	689b      	ldr	r3, [r3, #8]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d10b      	bne.n	8021ade <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	617b      	str	r3, [r7, #20]
 8021aca:	68fb      	ldr	r3, [r7, #12]
 8021acc:	681b      	ldr	r3, [r3, #0]
 8021ace:	68db      	ldr	r3, [r3, #12]
 8021ad0:	617b      	str	r3, [r7, #20]
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	689b      	ldr	r3, [r3, #8]
 8021ad8:	617b      	str	r3, [r7, #20]
 8021ada:	697b      	ldr	r3, [r7, #20]
 8021adc:	e000      	b.n	8021ae0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8021ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	2201      	movs	r2, #1
 8021ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	2200      	movs	r2, #0
 8021aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8021af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	3730      	adds	r7, #48	; 0x30
 8021af8:	46bd      	mov	sp, r7
 8021afa:	bd80      	pop	{r7, pc}

08021afc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8021afc:	b580      	push	{r7, lr}
 8021afe:	b086      	sub	sp, #24
 8021b00:	af00      	add	r7, sp, #0
 8021b02:	60f8      	str	r0, [r7, #12]
 8021b04:	60b9      	str	r1, [r7, #8]
 8021b06:	4613      	mov	r3, r2
 8021b08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8021b0a:	2300      	movs	r3, #0
 8021b0c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8021b0e:	68fb      	ldr	r3, [r7, #12]
 8021b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8021b14:	2b01      	cmp	r3, #1
 8021b16:	d101      	bne.n	8021b1c <HAL_SPI_Transmit_DMA+0x20>
 8021b18:	2302      	movs	r3, #2
 8021b1a:	e093      	b.n	8021c44 <HAL_SPI_Transmit_DMA+0x148>
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	2201      	movs	r2, #1
 8021b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021b2a:	b2db      	uxtb	r3, r3
 8021b2c:	2b01      	cmp	r3, #1
 8021b2e:	d002      	beq.n	8021b36 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8021b30:	2302      	movs	r3, #2
 8021b32:	75fb      	strb	r3, [r7, #23]
    goto error;
 8021b34:	e081      	b.n	8021c3a <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8021b36:	68bb      	ldr	r3, [r7, #8]
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d002      	beq.n	8021b42 <HAL_SPI_Transmit_DMA+0x46>
 8021b3c:	88fb      	ldrh	r3, [r7, #6]
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d102      	bne.n	8021b48 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8021b42:	2301      	movs	r3, #1
 8021b44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8021b46:	e078      	b.n	8021c3a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8021b48:	68fb      	ldr	r3, [r7, #12]
 8021b4a:	2203      	movs	r2, #3
 8021b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8021b50:	68fb      	ldr	r3, [r7, #12]
 8021b52:	2200      	movs	r2, #0
 8021b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	68ba      	ldr	r2, [r7, #8]
 8021b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8021b5c:	68fb      	ldr	r3, [r7, #12]
 8021b5e:	88fa      	ldrh	r2, [r7, #6]
 8021b60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8021b62:	68fb      	ldr	r3, [r7, #12]
 8021b64:	88fa      	ldrh	r2, [r7, #6]
 8021b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8021b68:	68fb      	ldr	r3, [r7, #12]
 8021b6a:	2200      	movs	r2, #0
 8021b6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8021b6e:	68fb      	ldr	r3, [r7, #12]
 8021b70:	2200      	movs	r2, #0
 8021b72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	2200      	movs	r2, #0
 8021b78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8021b7a:	68fb      	ldr	r3, [r7, #12]
 8021b7c:	2200      	movs	r2, #0
 8021b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8021b80:	68fb      	ldr	r3, [r7, #12]
 8021b82:	2200      	movs	r2, #0
 8021b84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021b86:	68fb      	ldr	r3, [r7, #12]
 8021b88:	689b      	ldr	r3, [r3, #8]
 8021b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021b8e:	d107      	bne.n	8021ba0 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8021b90:	68fb      	ldr	r3, [r7, #12]
 8021b92:	681b      	ldr	r3, [r3, #0]
 8021b94:	681a      	ldr	r2, [r3, #0]
 8021b96:	68fb      	ldr	r3, [r7, #12]
 8021b98:	681b      	ldr	r3, [r3, #0]
 8021b9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8021b9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021ba4:	4a29      	ldr	r2, [pc, #164]	; (8021c4c <HAL_SPI_Transmit_DMA+0x150>)
 8021ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8021ba8:	68fb      	ldr	r3, [r7, #12]
 8021baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021bac:	4a28      	ldr	r2, [pc, #160]	; (8021c50 <HAL_SPI_Transmit_DMA+0x154>)
 8021bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8021bb0:	68fb      	ldr	r3, [r7, #12]
 8021bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021bb4:	4a27      	ldr	r2, [pc, #156]	; (8021c54 <HAL_SPI_Transmit_DMA+0x158>)
 8021bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8021bb8:	68fb      	ldr	r3, [r7, #12]
 8021bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8021bc0:	68fb      	ldr	r3, [r7, #12]
 8021bc2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8021bc4:	68fb      	ldr	r3, [r7, #12]
 8021bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bc8:	4619      	mov	r1, r3
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	681b      	ldr	r3, [r3, #0]
 8021bce:	330c      	adds	r3, #12
 8021bd0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8021bd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8021bd8:	f7fc fb78 	bl	801e2cc <HAL_DMA_Start_IT>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d00c      	beq.n	8021bfc <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8021be2:	68fb      	ldr	r3, [r7, #12]
 8021be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021be6:	f043 0210 	orr.w	r2, r3, #16
 8021bea:	68fb      	ldr	r3, [r7, #12]
 8021bec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8021bee:	2301      	movs	r3, #1
 8021bf0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8021bf2:	68fb      	ldr	r3, [r7, #12]
 8021bf4:	2201      	movs	r2, #1
 8021bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8021bfa:	e01e      	b.n	8021c3a <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8021bfc:	68fb      	ldr	r3, [r7, #12]
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021c06:	2b40      	cmp	r3, #64	; 0x40
 8021c08:	d007      	beq.n	8021c1a <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8021c0a:	68fb      	ldr	r3, [r7, #12]
 8021c0c:	681b      	ldr	r3, [r3, #0]
 8021c0e:	681a      	ldr	r2, [r3, #0]
 8021c10:	68fb      	ldr	r3, [r7, #12]
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021c18:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8021c1a:	68fb      	ldr	r3, [r7, #12]
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	685a      	ldr	r2, [r3, #4]
 8021c20:	68fb      	ldr	r3, [r7, #12]
 8021c22:	681b      	ldr	r3, [r3, #0]
 8021c24:	f042 0220 	orr.w	r2, r2, #32
 8021c28:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8021c2a:	68fb      	ldr	r3, [r7, #12]
 8021c2c:	681b      	ldr	r3, [r3, #0]
 8021c2e:	685a      	ldr	r2, [r3, #4]
 8021c30:	68fb      	ldr	r3, [r7, #12]
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	f042 0202 	orr.w	r2, r2, #2
 8021c38:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8021c3a:	68fb      	ldr	r3, [r7, #12]
 8021c3c:	2200      	movs	r2, #0
 8021c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8021c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8021c44:	4618      	mov	r0, r3
 8021c46:	3718      	adds	r7, #24
 8021c48:	46bd      	mov	sp, r7
 8021c4a:	bd80      	pop	{r7, pc}
 8021c4c:	08021f15 	.word	0x08021f15
 8021c50:	08021e6d 	.word	0x08021e6d
 8021c54:	08021f31 	.word	0x08021f31

08021c58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8021c58:	b580      	push	{r7, lr}
 8021c5a:	b088      	sub	sp, #32
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	685b      	ldr	r3, [r3, #4]
 8021c66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	681b      	ldr	r3, [r3, #0]
 8021c6c:	689b      	ldr	r3, [r3, #8]
 8021c6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8021c70:	69bb      	ldr	r3, [r7, #24]
 8021c72:	099b      	lsrs	r3, r3, #6
 8021c74:	f003 0301 	and.w	r3, r3, #1
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d10f      	bne.n	8021c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8021c7c:	69bb      	ldr	r3, [r7, #24]
 8021c7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8021c82:	2b00      	cmp	r3, #0
 8021c84:	d00a      	beq.n	8021c9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8021c86:	69fb      	ldr	r3, [r7, #28]
 8021c88:	099b      	lsrs	r3, r3, #6
 8021c8a:	f003 0301 	and.w	r3, r3, #1
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d004      	beq.n	8021c9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c96:	6878      	ldr	r0, [r7, #4]
 8021c98:	4798      	blx	r3
    return;
 8021c9a:	e0d7      	b.n	8021e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8021c9c:	69bb      	ldr	r3, [r7, #24]
 8021c9e:	085b      	lsrs	r3, r3, #1
 8021ca0:	f003 0301 	and.w	r3, r3, #1
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d00a      	beq.n	8021cbe <HAL_SPI_IRQHandler+0x66>
 8021ca8:	69fb      	ldr	r3, [r7, #28]
 8021caa:	09db      	lsrs	r3, r3, #7
 8021cac:	f003 0301 	and.w	r3, r3, #1
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d004      	beq.n	8021cbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cb8:	6878      	ldr	r0, [r7, #4]
 8021cba:	4798      	blx	r3
    return;
 8021cbc:	e0c6      	b.n	8021e4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8021cbe:	69bb      	ldr	r3, [r7, #24]
 8021cc0:	095b      	lsrs	r3, r3, #5
 8021cc2:	f003 0301 	and.w	r3, r3, #1
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d10c      	bne.n	8021ce4 <HAL_SPI_IRQHandler+0x8c>
 8021cca:	69bb      	ldr	r3, [r7, #24]
 8021ccc:	099b      	lsrs	r3, r3, #6
 8021cce:	f003 0301 	and.w	r3, r3, #1
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	d106      	bne.n	8021ce4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8021cd6:	69bb      	ldr	r3, [r7, #24]
 8021cd8:	0a1b      	lsrs	r3, r3, #8
 8021cda:	f003 0301 	and.w	r3, r3, #1
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	f000 80b4 	beq.w	8021e4c <HAL_SPI_IRQHandler+0x1f4>
 8021ce4:	69fb      	ldr	r3, [r7, #28]
 8021ce6:	095b      	lsrs	r3, r3, #5
 8021ce8:	f003 0301 	and.w	r3, r3, #1
 8021cec:	2b00      	cmp	r3, #0
 8021cee:	f000 80ad 	beq.w	8021e4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8021cf2:	69bb      	ldr	r3, [r7, #24]
 8021cf4:	099b      	lsrs	r3, r3, #6
 8021cf6:	f003 0301 	and.w	r3, r3, #1
 8021cfa:	2b00      	cmp	r3, #0
 8021cfc:	d023      	beq.n	8021d46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8021d04:	b2db      	uxtb	r3, r3
 8021d06:	2b03      	cmp	r3, #3
 8021d08:	d011      	beq.n	8021d2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8021d0a:	687b      	ldr	r3, [r7, #4]
 8021d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d0e:	f043 0204 	orr.w	r2, r3, #4
 8021d12:	687b      	ldr	r3, [r7, #4]
 8021d14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021d16:	2300      	movs	r3, #0
 8021d18:	617b      	str	r3, [r7, #20]
 8021d1a:	687b      	ldr	r3, [r7, #4]
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	68db      	ldr	r3, [r3, #12]
 8021d20:	617b      	str	r3, [r7, #20]
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	681b      	ldr	r3, [r3, #0]
 8021d26:	689b      	ldr	r3, [r3, #8]
 8021d28:	617b      	str	r3, [r7, #20]
 8021d2a:	697b      	ldr	r3, [r7, #20]
 8021d2c:	e00b      	b.n	8021d46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021d2e:	2300      	movs	r3, #0
 8021d30:	613b      	str	r3, [r7, #16]
 8021d32:	687b      	ldr	r3, [r7, #4]
 8021d34:	681b      	ldr	r3, [r3, #0]
 8021d36:	68db      	ldr	r3, [r3, #12]
 8021d38:	613b      	str	r3, [r7, #16]
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	689b      	ldr	r3, [r3, #8]
 8021d40:	613b      	str	r3, [r7, #16]
 8021d42:	693b      	ldr	r3, [r7, #16]
        return;
 8021d44:	e082      	b.n	8021e4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8021d46:	69bb      	ldr	r3, [r7, #24]
 8021d48:	095b      	lsrs	r3, r3, #5
 8021d4a:	f003 0301 	and.w	r3, r3, #1
 8021d4e:	2b00      	cmp	r3, #0
 8021d50:	d014      	beq.n	8021d7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8021d52:	687b      	ldr	r3, [r7, #4]
 8021d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d56:	f043 0201 	orr.w	r2, r3, #1
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8021d5e:	2300      	movs	r3, #0
 8021d60:	60fb      	str	r3, [r7, #12]
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	689b      	ldr	r3, [r3, #8]
 8021d68:	60fb      	str	r3, [r7, #12]
 8021d6a:	687b      	ldr	r3, [r7, #4]
 8021d6c:	681b      	ldr	r3, [r3, #0]
 8021d6e:	681a      	ldr	r2, [r3, #0]
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	681b      	ldr	r3, [r3, #0]
 8021d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021d78:	601a      	str	r2, [r3, #0]
 8021d7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8021d7c:	69bb      	ldr	r3, [r7, #24]
 8021d7e:	0a1b      	lsrs	r3, r3, #8
 8021d80:	f003 0301 	and.w	r3, r3, #1
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d00c      	beq.n	8021da2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021d8c:	f043 0208 	orr.w	r2, r3, #8
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8021d94:	2300      	movs	r3, #0
 8021d96:	60bb      	str	r3, [r7, #8]
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	689b      	ldr	r3, [r3, #8]
 8021d9e:	60bb      	str	r3, [r7, #8]
 8021da0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021da6:	2b00      	cmp	r3, #0
 8021da8:	d04f      	beq.n	8021e4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	681b      	ldr	r3, [r3, #0]
 8021dae:	685a      	ldr	r2, [r3, #4]
 8021db0:	687b      	ldr	r3, [r7, #4]
 8021db2:	681b      	ldr	r3, [r3, #0]
 8021db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8021db8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	2201      	movs	r2, #1
 8021dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8021dc2:	69fb      	ldr	r3, [r7, #28]
 8021dc4:	f003 0302 	and.w	r3, r3, #2
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d104      	bne.n	8021dd6 <HAL_SPI_IRQHandler+0x17e>
 8021dcc:	69fb      	ldr	r3, [r7, #28]
 8021dce:	f003 0301 	and.w	r3, r3, #1
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d034      	beq.n	8021e40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8021dd6:	687b      	ldr	r3, [r7, #4]
 8021dd8:	681b      	ldr	r3, [r3, #0]
 8021dda:	685a      	ldr	r2, [r3, #4]
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	f022 0203 	bic.w	r2, r2, #3
 8021de4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d011      	beq.n	8021e12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021df2:	4a18      	ldr	r2, [pc, #96]	; (8021e54 <HAL_SPI_IRQHandler+0x1fc>)
 8021df4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021dfa:	4618      	mov	r0, r3
 8021dfc:	f7fc fabe 	bl	801e37c <HAL_DMA_Abort_IT>
 8021e00:	4603      	mov	r3, r0
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d005      	beq.n	8021e12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8021e0e:	687b      	ldr	r3, [r7, #4]
 8021e10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	d016      	beq.n	8021e48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021e1e:	4a0d      	ldr	r2, [pc, #52]	; (8021e54 <HAL_SPI_IRQHandler+0x1fc>)
 8021e20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8021e22:	687b      	ldr	r3, [r7, #4]
 8021e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021e26:	4618      	mov	r0, r3
 8021e28:	f7fc faa8 	bl	801e37c <HAL_DMA_Abort_IT>
 8021e2c:	4603      	mov	r3, r0
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d00a      	beq.n	8021e48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8021e32:	687b      	ldr	r3, [r7, #4]
 8021e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021e36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8021e3a:	687b      	ldr	r3, [r7, #4]
 8021e3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8021e3e:	e003      	b.n	8021e48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8021e40:	6878      	ldr	r0, [r7, #4]
 8021e42:	f7f5 f9e5 	bl	8017210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8021e46:	e000      	b.n	8021e4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8021e48:	bf00      	nop
    return;
 8021e4a:	bf00      	nop
  }
}
 8021e4c:	3720      	adds	r7, #32
 8021e4e:	46bd      	mov	sp, r7
 8021e50:	bd80      	pop	{r7, pc}
 8021e52:	bf00      	nop
 8021e54:	08021f71 	.word	0x08021f71

08021e58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8021e58:	b480      	push	{r7}
 8021e5a:	b083      	sub	sp, #12
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8021e60:	bf00      	nop
 8021e62:	370c      	adds	r7, #12
 8021e64:	46bd      	mov	sp, r7
 8021e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e6a:	4770      	bx	lr

08021e6c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8021e6c:	b580      	push	{r7, lr}
 8021e6e:	b086      	sub	sp, #24
 8021e70:	af00      	add	r7, sp, #0
 8021e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8021e7a:	f7fb fa6d 	bl	801d358 <HAL_GetTick>
 8021e7e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	681b      	ldr	r3, [r3, #0]
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021e8e:	d03b      	beq.n	8021f08 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8021e90:	697b      	ldr	r3, [r7, #20]
 8021e92:	681b      	ldr	r3, [r3, #0]
 8021e94:	685a      	ldr	r2, [r3, #4]
 8021e96:	697b      	ldr	r3, [r7, #20]
 8021e98:	681b      	ldr	r3, [r3, #0]
 8021e9a:	f022 0220 	bic.w	r2, r2, #32
 8021e9e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8021ea0:	697b      	ldr	r3, [r7, #20]
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	685a      	ldr	r2, [r3, #4]
 8021ea6:	697b      	ldr	r3, [r7, #20]
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	f022 0202 	bic.w	r2, r2, #2
 8021eae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8021eb0:	693a      	ldr	r2, [r7, #16]
 8021eb2:	2164      	movs	r1, #100	; 0x64
 8021eb4:	6978      	ldr	r0, [r7, #20]
 8021eb6:	f000 f8d9 	bl	802206c <SPI_EndRxTxTransaction>
 8021eba:	4603      	mov	r3, r0
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d005      	beq.n	8021ecc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8021ec0:	697b      	ldr	r3, [r7, #20]
 8021ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021ec4:	f043 0220 	orr.w	r2, r3, #32
 8021ec8:	697b      	ldr	r3, [r7, #20]
 8021eca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8021ecc:	697b      	ldr	r3, [r7, #20]
 8021ece:	689b      	ldr	r3, [r3, #8]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d10a      	bne.n	8021eea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8021ed4:	2300      	movs	r3, #0
 8021ed6:	60fb      	str	r3, [r7, #12]
 8021ed8:	697b      	ldr	r3, [r7, #20]
 8021eda:	681b      	ldr	r3, [r3, #0]
 8021edc:	68db      	ldr	r3, [r3, #12]
 8021ede:	60fb      	str	r3, [r7, #12]
 8021ee0:	697b      	ldr	r3, [r7, #20]
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	689b      	ldr	r3, [r3, #8]
 8021ee6:	60fb      	str	r3, [r7, #12]
 8021ee8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8021eea:	697b      	ldr	r3, [r7, #20]
 8021eec:	2200      	movs	r2, #0
 8021eee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8021ef0:	697b      	ldr	r3, [r7, #20]
 8021ef2:	2201      	movs	r2, #1
 8021ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8021ef8:	697b      	ldr	r3, [r7, #20]
 8021efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	d003      	beq.n	8021f08 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8021f00:	6978      	ldr	r0, [r7, #20]
 8021f02:	f7f5 f985 	bl	8017210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8021f06:	e002      	b.n	8021f0e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8021f08:	6978      	ldr	r0, [r7, #20]
 8021f0a:	f7f5 f997 	bl	801723c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8021f0e:	3718      	adds	r7, #24
 8021f10:	46bd      	mov	sp, r7
 8021f12:	bd80      	pop	{r7, pc}

08021f14 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8021f14:	b580      	push	{r7, lr}
 8021f16:	b084      	sub	sp, #16
 8021f18:	af00      	add	r7, sp, #0
 8021f1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f20:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8021f22:	68f8      	ldr	r0, [r7, #12]
 8021f24:	f7ff ff98 	bl	8021e58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8021f28:	bf00      	nop
 8021f2a:	3710      	adds	r7, #16
 8021f2c:	46bd      	mov	sp, r7
 8021f2e:	bd80      	pop	{r7, pc}

08021f30 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b084      	sub	sp, #16
 8021f34:	af00      	add	r7, sp, #0
 8021f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f3c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8021f3e:	68fb      	ldr	r3, [r7, #12]
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	685a      	ldr	r2, [r3, #4]
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	f022 0203 	bic.w	r2, r2, #3
 8021f4c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8021f4e:	68fb      	ldr	r3, [r7, #12]
 8021f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8021f52:	f043 0210 	orr.w	r2, r3, #16
 8021f56:	68fb      	ldr	r3, [r7, #12]
 8021f58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8021f5a:	68fb      	ldr	r3, [r7, #12]
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8021f62:	68f8      	ldr	r0, [r7, #12]
 8021f64:	f7f5 f954 	bl	8017210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8021f68:	bf00      	nop
 8021f6a:	3710      	adds	r7, #16
 8021f6c:	46bd      	mov	sp, r7
 8021f6e:	bd80      	pop	{r7, pc}

08021f70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8021f70:	b580      	push	{r7, lr}
 8021f72:	b084      	sub	sp, #16
 8021f74:	af00      	add	r7, sp, #0
 8021f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021f7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8021f7e:	68fb      	ldr	r3, [r7, #12]
 8021f80:	2200      	movs	r2, #0
 8021f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8021f84:	68fb      	ldr	r3, [r7, #12]
 8021f86:	2200      	movs	r2, #0
 8021f88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8021f8a:	68f8      	ldr	r0, [r7, #12]
 8021f8c:	f7f5 f940 	bl	8017210 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8021f90:	bf00      	nop
 8021f92:	3710      	adds	r7, #16
 8021f94:	46bd      	mov	sp, r7
 8021f96:	bd80      	pop	{r7, pc}

08021f98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8021f98:	b580      	push	{r7, lr}
 8021f9a:	b084      	sub	sp, #16
 8021f9c:	af00      	add	r7, sp, #0
 8021f9e:	60f8      	str	r0, [r7, #12]
 8021fa0:	60b9      	str	r1, [r7, #8]
 8021fa2:	603b      	str	r3, [r7, #0]
 8021fa4:	4613      	mov	r3, r2
 8021fa6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8021fa8:	e04c      	b.n	8022044 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8021faa:	683b      	ldr	r3, [r7, #0]
 8021fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021fb0:	d048      	beq.n	8022044 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8021fb2:	f7fb f9d1 	bl	801d358 <HAL_GetTick>
 8021fb6:	4602      	mov	r2, r0
 8021fb8:	69bb      	ldr	r3, [r7, #24]
 8021fba:	1ad3      	subs	r3, r2, r3
 8021fbc:	683a      	ldr	r2, [r7, #0]
 8021fbe:	429a      	cmp	r2, r3
 8021fc0:	d902      	bls.n	8021fc8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8021fc2:	683b      	ldr	r3, [r7, #0]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d13d      	bne.n	8022044 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8021fc8:	68fb      	ldr	r3, [r7, #12]
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	685a      	ldr	r2, [r3, #4]
 8021fce:	68fb      	ldr	r3, [r7, #12]
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8021fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8021fd8:	68fb      	ldr	r3, [r7, #12]
 8021fda:	685b      	ldr	r3, [r3, #4]
 8021fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8021fe0:	d111      	bne.n	8022006 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8021fe2:	68fb      	ldr	r3, [r7, #12]
 8021fe4:	689b      	ldr	r3, [r3, #8]
 8021fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021fea:	d004      	beq.n	8021ff6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8021fec:	68fb      	ldr	r3, [r7, #12]
 8021fee:	689b      	ldr	r3, [r3, #8]
 8021ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021ff4:	d107      	bne.n	8022006 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8021ff6:	68fb      	ldr	r3, [r7, #12]
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	681a      	ldr	r2, [r3, #0]
 8021ffc:	68fb      	ldr	r3, [r7, #12]
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8022004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8022006:	68fb      	ldr	r3, [r7, #12]
 8022008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802200a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802200e:	d10f      	bne.n	8022030 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8022010:	68fb      	ldr	r3, [r7, #12]
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	681a      	ldr	r2, [r3, #0]
 8022016:	68fb      	ldr	r3, [r7, #12]
 8022018:	681b      	ldr	r3, [r3, #0]
 802201a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802201e:	601a      	str	r2, [r3, #0]
 8022020:	68fb      	ldr	r3, [r7, #12]
 8022022:	681b      	ldr	r3, [r3, #0]
 8022024:	681a      	ldr	r2, [r3, #0]
 8022026:	68fb      	ldr	r3, [r7, #12]
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802202e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8022030:	68fb      	ldr	r3, [r7, #12]
 8022032:	2201      	movs	r2, #1
 8022034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8022038:	68fb      	ldr	r3, [r7, #12]
 802203a:	2200      	movs	r2, #0
 802203c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8022040:	2303      	movs	r3, #3
 8022042:	e00f      	b.n	8022064 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8022044:	68fb      	ldr	r3, [r7, #12]
 8022046:	681b      	ldr	r3, [r3, #0]
 8022048:	689a      	ldr	r2, [r3, #8]
 802204a:	68bb      	ldr	r3, [r7, #8]
 802204c:	4013      	ands	r3, r2
 802204e:	68ba      	ldr	r2, [r7, #8]
 8022050:	429a      	cmp	r2, r3
 8022052:	bf0c      	ite	eq
 8022054:	2301      	moveq	r3, #1
 8022056:	2300      	movne	r3, #0
 8022058:	b2db      	uxtb	r3, r3
 802205a:	461a      	mov	r2, r3
 802205c:	79fb      	ldrb	r3, [r7, #7]
 802205e:	429a      	cmp	r2, r3
 8022060:	d1a3      	bne.n	8021faa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8022062:	2300      	movs	r3, #0
}
 8022064:	4618      	mov	r0, r3
 8022066:	3710      	adds	r7, #16
 8022068:	46bd      	mov	sp, r7
 802206a:	bd80      	pop	{r7, pc}

0802206c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802206c:	b580      	push	{r7, lr}
 802206e:	b088      	sub	sp, #32
 8022070:	af02      	add	r7, sp, #8
 8022072:	60f8      	str	r0, [r7, #12]
 8022074:	60b9      	str	r1, [r7, #8]
 8022076:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8022078:	4b1b      	ldr	r3, [pc, #108]	; (80220e8 <SPI_EndRxTxTransaction+0x7c>)
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	4a1b      	ldr	r2, [pc, #108]	; (80220ec <SPI_EndRxTxTransaction+0x80>)
 802207e:	fba2 2303 	umull	r2, r3, r2, r3
 8022082:	0d5b      	lsrs	r3, r3, #21
 8022084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8022088:	fb02 f303 	mul.w	r3, r2, r3
 802208c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802208e:	68fb      	ldr	r3, [r7, #12]
 8022090:	685b      	ldr	r3, [r3, #4]
 8022092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8022096:	d112      	bne.n	80220be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8022098:	687b      	ldr	r3, [r7, #4]
 802209a:	9300      	str	r3, [sp, #0]
 802209c:	68bb      	ldr	r3, [r7, #8]
 802209e:	2200      	movs	r2, #0
 80220a0:	2180      	movs	r1, #128	; 0x80
 80220a2:	68f8      	ldr	r0, [r7, #12]
 80220a4:	f7ff ff78 	bl	8021f98 <SPI_WaitFlagStateUntilTimeout>
 80220a8:	4603      	mov	r3, r0
 80220aa:	2b00      	cmp	r3, #0
 80220ac:	d016      	beq.n	80220dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80220ae:	68fb      	ldr	r3, [r7, #12]
 80220b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80220b2:	f043 0220 	orr.w	r2, r3, #32
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80220ba:	2303      	movs	r3, #3
 80220bc:	e00f      	b.n	80220de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80220be:	697b      	ldr	r3, [r7, #20]
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d00a      	beq.n	80220da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80220c4:	697b      	ldr	r3, [r7, #20]
 80220c6:	3b01      	subs	r3, #1
 80220c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	689b      	ldr	r3, [r3, #8]
 80220d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80220d4:	2b80      	cmp	r3, #128	; 0x80
 80220d6:	d0f2      	beq.n	80220be <SPI_EndRxTxTransaction+0x52>
 80220d8:	e000      	b.n	80220dc <SPI_EndRxTxTransaction+0x70>
        break;
 80220da:	bf00      	nop
  }

  return HAL_OK;
 80220dc:	2300      	movs	r3, #0
}
 80220de:	4618      	mov	r0, r3
 80220e0:	3718      	adds	r7, #24
 80220e2:	46bd      	mov	sp, r7
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	bf00      	nop
 80220e8:	20000000 	.word	0x20000000
 80220ec:	165e9f81 	.word	0x165e9f81

080220f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b082      	sub	sp, #8
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d101      	bne.n	8022102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80220fe:	2301      	movs	r3, #1
 8022100:	e01d      	b.n	802213e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8022108:	b2db      	uxtb	r3, r3
 802210a:	2b00      	cmp	r3, #0
 802210c:	d106      	bne.n	802211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	2200      	movs	r2, #0
 8022112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8022116:	6878      	ldr	r0, [r7, #4]
 8022118:	f7f4 fde6 	bl	8016ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	2202      	movs	r2, #2
 8022120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8022124:	687b      	ldr	r3, [r7, #4]
 8022126:	681a      	ldr	r2, [r3, #0]
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	3304      	adds	r3, #4
 802212c:	4619      	mov	r1, r3
 802212e:	4610      	mov	r0, r2
 8022130:	f000 fb36 	bl	80227a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	2201      	movs	r2, #1
 8022138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802213c:	2300      	movs	r3, #0
}
 802213e:	4618      	mov	r0, r3
 8022140:	3708      	adds	r7, #8
 8022142:	46bd      	mov	sp, r7
 8022144:	bd80      	pop	{r7, pc}

08022146 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8022146:	b580      	push	{r7, lr}
 8022148:	b082      	sub	sp, #8
 802214a:	af00      	add	r7, sp, #0
 802214c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	2b00      	cmp	r3, #0
 8022152:	d101      	bne.n	8022158 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8022154:	2301      	movs	r3, #1
 8022156:	e01d      	b.n	8022194 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8022158:	687b      	ldr	r3, [r7, #4]
 802215a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802215e:	b2db      	uxtb	r3, r3
 8022160:	2b00      	cmp	r3, #0
 8022162:	d106      	bne.n	8022172 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	2200      	movs	r2, #0
 8022168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 802216c:	6878      	ldr	r0, [r7, #4]
 802216e:	f000 f815 	bl	802219c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022172:	687b      	ldr	r3, [r7, #4]
 8022174:	2202      	movs	r2, #2
 8022176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	681a      	ldr	r2, [r3, #0]
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	3304      	adds	r3, #4
 8022182:	4619      	mov	r1, r3
 8022184:	4610      	mov	r0, r2
 8022186:	f000 fb0b 	bl	80227a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	2201      	movs	r2, #1
 802218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8022192:	2300      	movs	r3, #0
}
 8022194:	4618      	mov	r0, r3
 8022196:	3708      	adds	r7, #8
 8022198:	46bd      	mov	sp, r7
 802219a:	bd80      	pop	{r7, pc}

0802219c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 802219c:	b480      	push	{r7}
 802219e:	b083      	sub	sp, #12
 80221a0:	af00      	add	r7, sp, #0
 80221a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80221a4:	bf00      	nop
 80221a6:	370c      	adds	r7, #12
 80221a8:	46bd      	mov	sp, r7
 80221aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ae:	4770      	bx	lr

080221b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b084      	sub	sp, #16
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	6078      	str	r0, [r7, #4]
 80221b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80221ba:	683b      	ldr	r3, [r7, #0]
 80221bc:	2b0c      	cmp	r3, #12
 80221be:	d841      	bhi.n	8022244 <HAL_TIM_IC_Start_IT+0x94>
 80221c0:	a201      	add	r2, pc, #4	; (adr r2, 80221c8 <HAL_TIM_IC_Start_IT+0x18>)
 80221c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80221c6:	bf00      	nop
 80221c8:	080221fd 	.word	0x080221fd
 80221cc:	08022245 	.word	0x08022245
 80221d0:	08022245 	.word	0x08022245
 80221d4:	08022245 	.word	0x08022245
 80221d8:	0802220f 	.word	0x0802220f
 80221dc:	08022245 	.word	0x08022245
 80221e0:	08022245 	.word	0x08022245
 80221e4:	08022245 	.word	0x08022245
 80221e8:	08022221 	.word	0x08022221
 80221ec:	08022245 	.word	0x08022245
 80221f0:	08022245 	.word	0x08022245
 80221f4:	08022245 	.word	0x08022245
 80221f8:	08022233 	.word	0x08022233
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	681b      	ldr	r3, [r3, #0]
 8022200:	68da      	ldr	r2, [r3, #12]
 8022202:	687b      	ldr	r3, [r7, #4]
 8022204:	681b      	ldr	r3, [r3, #0]
 8022206:	f042 0202 	orr.w	r2, r2, #2
 802220a:	60da      	str	r2, [r3, #12]
      break;
 802220c:	e01b      	b.n	8022246 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 802220e:	687b      	ldr	r3, [r7, #4]
 8022210:	681b      	ldr	r3, [r3, #0]
 8022212:	68da      	ldr	r2, [r3, #12]
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	f042 0204 	orr.w	r2, r2, #4
 802221c:	60da      	str	r2, [r3, #12]
      break;
 802221e:	e012      	b.n	8022246 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8022220:	687b      	ldr	r3, [r7, #4]
 8022222:	681b      	ldr	r3, [r3, #0]
 8022224:	68da      	ldr	r2, [r3, #12]
 8022226:	687b      	ldr	r3, [r7, #4]
 8022228:	681b      	ldr	r3, [r3, #0]
 802222a:	f042 0208 	orr.w	r2, r2, #8
 802222e:	60da      	str	r2, [r3, #12]
      break;
 8022230:	e009      	b.n	8022246 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	681b      	ldr	r3, [r3, #0]
 8022236:	68da      	ldr	r2, [r3, #12]
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	f042 0210 	orr.w	r2, r2, #16
 8022240:	60da      	str	r2, [r3, #12]
      break;
 8022242:	e000      	b.n	8022246 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8022244:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	2201      	movs	r2, #1
 802224c:	6839      	ldr	r1, [r7, #0]
 802224e:	4618      	mov	r0, r3
 8022250:	f000 fcde 	bl	8022c10 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	681b      	ldr	r3, [r3, #0]
 8022258:	689b      	ldr	r3, [r3, #8]
 802225a:	f003 0307 	and.w	r3, r3, #7
 802225e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8022260:	68fb      	ldr	r3, [r7, #12]
 8022262:	2b06      	cmp	r3, #6
 8022264:	d007      	beq.n	8022276 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	681a      	ldr	r2, [r3, #0]
 802226c:	687b      	ldr	r3, [r7, #4]
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	f042 0201 	orr.w	r2, r2, #1
 8022274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8022276:	2300      	movs	r3, #0
}
 8022278:	4618      	mov	r0, r3
 802227a:	3710      	adds	r7, #16
 802227c:	46bd      	mov	sp, r7
 802227e:	bd80      	pop	{r7, pc}

08022280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8022280:	b580      	push	{r7, lr}
 8022282:	b082      	sub	sp, #8
 8022284:	af00      	add	r7, sp, #0
 8022286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	681b      	ldr	r3, [r3, #0]
 802228c:	691b      	ldr	r3, [r3, #16]
 802228e:	f003 0302 	and.w	r3, r3, #2
 8022292:	2b02      	cmp	r3, #2
 8022294:	d122      	bne.n	80222dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	68db      	ldr	r3, [r3, #12]
 802229c:	f003 0302 	and.w	r3, r3, #2
 80222a0:	2b02      	cmp	r3, #2
 80222a2:	d11b      	bne.n	80222dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	681b      	ldr	r3, [r3, #0]
 80222a8:	f06f 0202 	mvn.w	r2, #2
 80222ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80222ae:	687b      	ldr	r3, [r7, #4]
 80222b0:	2201      	movs	r2, #1
 80222b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	699b      	ldr	r3, [r3, #24]
 80222ba:	f003 0303 	and.w	r3, r3, #3
 80222be:	2b00      	cmp	r3, #0
 80222c0:	d003      	beq.n	80222ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80222c2:	6878      	ldr	r0, [r7, #4]
 80222c4:	f7f4 fd60 	bl	8016d88 <HAL_TIM_IC_CaptureCallback>
 80222c8:	e005      	b.n	80222d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80222ca:	6878      	ldr	r0, [r7, #4]
 80222cc:	f000 fa4a 	bl	8022764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80222d0:	6878      	ldr	r0, [r7, #4]
 80222d2:	f000 fa51 	bl	8022778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80222d6:	687b      	ldr	r3, [r7, #4]
 80222d8:	2200      	movs	r2, #0
 80222da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	691b      	ldr	r3, [r3, #16]
 80222e2:	f003 0304 	and.w	r3, r3, #4
 80222e6:	2b04      	cmp	r3, #4
 80222e8:	d122      	bne.n	8022330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80222ea:	687b      	ldr	r3, [r7, #4]
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	68db      	ldr	r3, [r3, #12]
 80222f0:	f003 0304 	and.w	r3, r3, #4
 80222f4:	2b04      	cmp	r3, #4
 80222f6:	d11b      	bne.n	8022330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	681b      	ldr	r3, [r3, #0]
 80222fc:	f06f 0204 	mvn.w	r2, #4
 8022300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	2202      	movs	r2, #2
 8022306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	699b      	ldr	r3, [r3, #24]
 802230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022312:	2b00      	cmp	r3, #0
 8022314:	d003      	beq.n	802231e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8022316:	6878      	ldr	r0, [r7, #4]
 8022318:	f7f4 fd36 	bl	8016d88 <HAL_TIM_IC_CaptureCallback>
 802231c:	e005      	b.n	802232a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802231e:	6878      	ldr	r0, [r7, #4]
 8022320:	f000 fa20 	bl	8022764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022324:	6878      	ldr	r0, [r7, #4]
 8022326:	f000 fa27 	bl	8022778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802232a:	687b      	ldr	r3, [r7, #4]
 802232c:	2200      	movs	r2, #0
 802232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	681b      	ldr	r3, [r3, #0]
 8022334:	691b      	ldr	r3, [r3, #16]
 8022336:	f003 0308 	and.w	r3, r3, #8
 802233a:	2b08      	cmp	r3, #8
 802233c:	d122      	bne.n	8022384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802233e:	687b      	ldr	r3, [r7, #4]
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	68db      	ldr	r3, [r3, #12]
 8022344:	f003 0308 	and.w	r3, r3, #8
 8022348:	2b08      	cmp	r3, #8
 802234a:	d11b      	bne.n	8022384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802234c:	687b      	ldr	r3, [r7, #4]
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	f06f 0208 	mvn.w	r2, #8
 8022354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	2204      	movs	r2, #4
 802235a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802235c:	687b      	ldr	r3, [r7, #4]
 802235e:	681b      	ldr	r3, [r3, #0]
 8022360:	69db      	ldr	r3, [r3, #28]
 8022362:	f003 0303 	and.w	r3, r3, #3
 8022366:	2b00      	cmp	r3, #0
 8022368:	d003      	beq.n	8022372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802236a:	6878      	ldr	r0, [r7, #4]
 802236c:	f7f4 fd0c 	bl	8016d88 <HAL_TIM_IC_CaptureCallback>
 8022370:	e005      	b.n	802237e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8022372:	6878      	ldr	r0, [r7, #4]
 8022374:	f000 f9f6 	bl	8022764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8022378:	6878      	ldr	r0, [r7, #4]
 802237a:	f000 f9fd 	bl	8022778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	2200      	movs	r2, #0
 8022382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	691b      	ldr	r3, [r3, #16]
 802238a:	f003 0310 	and.w	r3, r3, #16
 802238e:	2b10      	cmp	r3, #16
 8022390:	d122      	bne.n	80223d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8022392:	687b      	ldr	r3, [r7, #4]
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	68db      	ldr	r3, [r3, #12]
 8022398:	f003 0310 	and.w	r3, r3, #16
 802239c:	2b10      	cmp	r3, #16
 802239e:	d11b      	bne.n	80223d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	681b      	ldr	r3, [r3, #0]
 80223a4:	f06f 0210 	mvn.w	r2, #16
 80223a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	2208      	movs	r2, #8
 80223ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	69db      	ldr	r3, [r3, #28]
 80223b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80223ba:	2b00      	cmp	r3, #0
 80223bc:	d003      	beq.n	80223c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80223be:	6878      	ldr	r0, [r7, #4]
 80223c0:	f7f4 fce2 	bl	8016d88 <HAL_TIM_IC_CaptureCallback>
 80223c4:	e005      	b.n	80223d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80223c6:	6878      	ldr	r0, [r7, #4]
 80223c8:	f000 f9cc 	bl	8022764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80223cc:	6878      	ldr	r0, [r7, #4]
 80223ce:	f000 f9d3 	bl	8022778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80223d2:	687b      	ldr	r3, [r7, #4]
 80223d4:	2200      	movs	r2, #0
 80223d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	681b      	ldr	r3, [r3, #0]
 80223dc:	691b      	ldr	r3, [r3, #16]
 80223de:	f003 0301 	and.w	r3, r3, #1
 80223e2:	2b01      	cmp	r3, #1
 80223e4:	d10e      	bne.n	8022404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	681b      	ldr	r3, [r3, #0]
 80223ea:	68db      	ldr	r3, [r3, #12]
 80223ec:	f003 0301 	and.w	r3, r3, #1
 80223f0:	2b01      	cmp	r3, #1
 80223f2:	d107      	bne.n	8022404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	f06f 0201 	mvn.w	r2, #1
 80223fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80223fe:	6878      	ldr	r0, [r7, #4]
 8022400:	f000 f9a6 	bl	8022750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	681b      	ldr	r3, [r3, #0]
 8022408:	691b      	ldr	r3, [r3, #16]
 802240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802240e:	2b80      	cmp	r3, #128	; 0x80
 8022410:	d10e      	bne.n	8022430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	681b      	ldr	r3, [r3, #0]
 8022416:	68db      	ldr	r3, [r3, #12]
 8022418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802241c:	2b80      	cmp	r3, #128	; 0x80
 802241e:	d107      	bne.n	8022430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8022420:	687b      	ldr	r3, [r7, #4]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8022428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802242a:	6878      	ldr	r0, [r7, #4]
 802242c:	f000 fc8e 	bl	8022d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	681b      	ldr	r3, [r3, #0]
 8022434:	691b      	ldr	r3, [r3, #16]
 8022436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802243a:	2b40      	cmp	r3, #64	; 0x40
 802243c:	d10e      	bne.n	802245c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	68db      	ldr	r3, [r3, #12]
 8022444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022448:	2b40      	cmp	r3, #64	; 0x40
 802244a:	d107      	bne.n	802245c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	681b      	ldr	r3, [r3, #0]
 8022450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8022454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8022456:	6878      	ldr	r0, [r7, #4]
 8022458:	f000 f998 	bl	802278c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	691b      	ldr	r3, [r3, #16]
 8022462:	f003 0320 	and.w	r3, r3, #32
 8022466:	2b20      	cmp	r3, #32
 8022468:	d10e      	bne.n	8022488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	68db      	ldr	r3, [r3, #12]
 8022470:	f003 0320 	and.w	r3, r3, #32
 8022474:	2b20      	cmp	r3, #32
 8022476:	d107      	bne.n	8022488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	681b      	ldr	r3, [r3, #0]
 802247c:	f06f 0220 	mvn.w	r2, #32
 8022480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8022482:	6878      	ldr	r0, [r7, #4]
 8022484:	f000 fc58 	bl	8022d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8022488:	bf00      	nop
 802248a:	3708      	adds	r7, #8
 802248c:	46bd      	mov	sp, r7
 802248e:	bd80      	pop	{r7, pc}

08022490 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8022490:	b580      	push	{r7, lr}
 8022492:	b084      	sub	sp, #16
 8022494:	af00      	add	r7, sp, #0
 8022496:	60f8      	str	r0, [r7, #12]
 8022498:	60b9      	str	r1, [r7, #8]
 802249a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 802249c:	68fb      	ldr	r3, [r7, #12]
 802249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80224a2:	2b01      	cmp	r3, #1
 80224a4:	d101      	bne.n	80224aa <HAL_TIM_IC_ConfigChannel+0x1a>
 80224a6:	2302      	movs	r3, #2
 80224a8:	e08a      	b.n	80225c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80224aa:	68fb      	ldr	r3, [r7, #12]
 80224ac:	2201      	movs	r2, #1
 80224ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80224b2:	68fb      	ldr	r3, [r7, #12]
 80224b4:	2202      	movs	r2, #2
 80224b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d11b      	bne.n	80224f8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	6818      	ldr	r0, [r3, #0]
 80224c4:	68bb      	ldr	r3, [r7, #8]
 80224c6:	6819      	ldr	r1, [r3, #0]
 80224c8:	68bb      	ldr	r3, [r7, #8]
 80224ca:	685a      	ldr	r2, [r3, #4]
 80224cc:	68bb      	ldr	r3, [r7, #8]
 80224ce:	68db      	ldr	r3, [r3, #12]
 80224d0:	f000 f9e6 	bl	80228a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80224d4:	68fb      	ldr	r3, [r7, #12]
 80224d6:	681b      	ldr	r3, [r3, #0]
 80224d8:	699a      	ldr	r2, [r3, #24]
 80224da:	68fb      	ldr	r3, [r7, #12]
 80224dc:	681b      	ldr	r3, [r3, #0]
 80224de:	f022 020c 	bic.w	r2, r2, #12
 80224e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80224e4:	68fb      	ldr	r3, [r7, #12]
 80224e6:	681b      	ldr	r3, [r3, #0]
 80224e8:	6999      	ldr	r1, [r3, #24]
 80224ea:	68bb      	ldr	r3, [r7, #8]
 80224ec:	689a      	ldr	r2, [r3, #8]
 80224ee:	68fb      	ldr	r3, [r7, #12]
 80224f0:	681b      	ldr	r3, [r3, #0]
 80224f2:	430a      	orrs	r2, r1
 80224f4:	619a      	str	r2, [r3, #24]
 80224f6:	e05a      	b.n	80225ae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80224f8:	687b      	ldr	r3, [r7, #4]
 80224fa:	2b04      	cmp	r3, #4
 80224fc:	d11c      	bne.n	8022538 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80224fe:	68fb      	ldr	r3, [r7, #12]
 8022500:	6818      	ldr	r0, [r3, #0]
 8022502:	68bb      	ldr	r3, [r7, #8]
 8022504:	6819      	ldr	r1, [r3, #0]
 8022506:	68bb      	ldr	r3, [r7, #8]
 8022508:	685a      	ldr	r2, [r3, #4]
 802250a:	68bb      	ldr	r3, [r7, #8]
 802250c:	68db      	ldr	r3, [r3, #12]
 802250e:	f000 fa5e 	bl	80229ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8022512:	68fb      	ldr	r3, [r7, #12]
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	699a      	ldr	r2, [r3, #24]
 8022518:	68fb      	ldr	r3, [r7, #12]
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8022520:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8022522:	68fb      	ldr	r3, [r7, #12]
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	6999      	ldr	r1, [r3, #24]
 8022528:	68bb      	ldr	r3, [r7, #8]
 802252a:	689b      	ldr	r3, [r3, #8]
 802252c:	021a      	lsls	r2, r3, #8
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	681b      	ldr	r3, [r3, #0]
 8022532:	430a      	orrs	r2, r1
 8022534:	619a      	str	r2, [r3, #24]
 8022536:	e03a      	b.n	80225ae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8022538:	687b      	ldr	r3, [r7, #4]
 802253a:	2b08      	cmp	r3, #8
 802253c:	d11b      	bne.n	8022576 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 802253e:	68fb      	ldr	r3, [r7, #12]
 8022540:	6818      	ldr	r0, [r3, #0]
 8022542:	68bb      	ldr	r3, [r7, #8]
 8022544:	6819      	ldr	r1, [r3, #0]
 8022546:	68bb      	ldr	r3, [r7, #8]
 8022548:	685a      	ldr	r2, [r3, #4]
 802254a:	68bb      	ldr	r3, [r7, #8]
 802254c:	68db      	ldr	r3, [r3, #12]
 802254e:	f000 faab 	bl	8022aa8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8022552:	68fb      	ldr	r3, [r7, #12]
 8022554:	681b      	ldr	r3, [r3, #0]
 8022556:	69da      	ldr	r2, [r3, #28]
 8022558:	68fb      	ldr	r3, [r7, #12]
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	f022 020c 	bic.w	r2, r2, #12
 8022560:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8022562:	68fb      	ldr	r3, [r7, #12]
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	69d9      	ldr	r1, [r3, #28]
 8022568:	68bb      	ldr	r3, [r7, #8]
 802256a:	689a      	ldr	r2, [r3, #8]
 802256c:	68fb      	ldr	r3, [r7, #12]
 802256e:	681b      	ldr	r3, [r3, #0]
 8022570:	430a      	orrs	r2, r1
 8022572:	61da      	str	r2, [r3, #28]
 8022574:	e01b      	b.n	80225ae <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8022576:	68fb      	ldr	r3, [r7, #12]
 8022578:	6818      	ldr	r0, [r3, #0]
 802257a:	68bb      	ldr	r3, [r7, #8]
 802257c:	6819      	ldr	r1, [r3, #0]
 802257e:	68bb      	ldr	r3, [r7, #8]
 8022580:	685a      	ldr	r2, [r3, #4]
 8022582:	68bb      	ldr	r3, [r7, #8]
 8022584:	68db      	ldr	r3, [r3, #12]
 8022586:	f000 facb 	bl	8022b20 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 802258a:	68fb      	ldr	r3, [r7, #12]
 802258c:	681b      	ldr	r3, [r3, #0]
 802258e:	69da      	ldr	r2, [r3, #28]
 8022590:	68fb      	ldr	r3, [r7, #12]
 8022592:	681b      	ldr	r3, [r3, #0]
 8022594:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8022598:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 802259a:	68fb      	ldr	r3, [r7, #12]
 802259c:	681b      	ldr	r3, [r3, #0]
 802259e:	69d9      	ldr	r1, [r3, #28]
 80225a0:	68bb      	ldr	r3, [r7, #8]
 80225a2:	689b      	ldr	r3, [r3, #8]
 80225a4:	021a      	lsls	r2, r3, #8
 80225a6:	68fb      	ldr	r3, [r7, #12]
 80225a8:	681b      	ldr	r3, [r3, #0]
 80225aa:	430a      	orrs	r2, r1
 80225ac:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	2201      	movs	r2, #1
 80225b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80225b6:	68fb      	ldr	r3, [r7, #12]
 80225b8:	2200      	movs	r2, #0
 80225ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80225be:	2300      	movs	r3, #0
}
 80225c0:	4618      	mov	r0, r3
 80225c2:	3710      	adds	r7, #16
 80225c4:	46bd      	mov	sp, r7
 80225c6:	bd80      	pop	{r7, pc}

080225c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80225c8:	b580      	push	{r7, lr}
 80225ca:	b084      	sub	sp, #16
 80225cc:	af00      	add	r7, sp, #0
 80225ce:	6078      	str	r0, [r7, #4]
 80225d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80225d2:	687b      	ldr	r3, [r7, #4]
 80225d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80225d8:	2b01      	cmp	r3, #1
 80225da:	d101      	bne.n	80225e0 <HAL_TIM_ConfigClockSource+0x18>
 80225dc:	2302      	movs	r3, #2
 80225de:	e0b3      	b.n	8022748 <HAL_TIM_ConfigClockSource+0x180>
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	2201      	movs	r2, #1
 80225e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	2202      	movs	r2, #2
 80225ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	689b      	ldr	r3, [r3, #8]
 80225f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80225f8:	68fb      	ldr	r3, [r7, #12]
 80225fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80225fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022606:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	681b      	ldr	r3, [r3, #0]
 802260c:	68fa      	ldr	r2, [r7, #12]
 802260e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8022610:	683b      	ldr	r3, [r7, #0]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8022618:	d03e      	beq.n	8022698 <HAL_TIM_ConfigClockSource+0xd0>
 802261a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802261e:	f200 8087 	bhi.w	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022626:	f000 8085 	beq.w	8022734 <HAL_TIM_ConfigClockSource+0x16c>
 802262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802262e:	d87f      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022630:	2b70      	cmp	r3, #112	; 0x70
 8022632:	d01a      	beq.n	802266a <HAL_TIM_ConfigClockSource+0xa2>
 8022634:	2b70      	cmp	r3, #112	; 0x70
 8022636:	d87b      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022638:	2b60      	cmp	r3, #96	; 0x60
 802263a:	d050      	beq.n	80226de <HAL_TIM_ConfigClockSource+0x116>
 802263c:	2b60      	cmp	r3, #96	; 0x60
 802263e:	d877      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022640:	2b50      	cmp	r3, #80	; 0x50
 8022642:	d03c      	beq.n	80226be <HAL_TIM_ConfigClockSource+0xf6>
 8022644:	2b50      	cmp	r3, #80	; 0x50
 8022646:	d873      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022648:	2b40      	cmp	r3, #64	; 0x40
 802264a:	d058      	beq.n	80226fe <HAL_TIM_ConfigClockSource+0x136>
 802264c:	2b40      	cmp	r3, #64	; 0x40
 802264e:	d86f      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022650:	2b30      	cmp	r3, #48	; 0x30
 8022652:	d064      	beq.n	802271e <HAL_TIM_ConfigClockSource+0x156>
 8022654:	2b30      	cmp	r3, #48	; 0x30
 8022656:	d86b      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022658:	2b20      	cmp	r3, #32
 802265a:	d060      	beq.n	802271e <HAL_TIM_ConfigClockSource+0x156>
 802265c:	2b20      	cmp	r3, #32
 802265e:	d867      	bhi.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
 8022660:	2b00      	cmp	r3, #0
 8022662:	d05c      	beq.n	802271e <HAL_TIM_ConfigClockSource+0x156>
 8022664:	2b10      	cmp	r3, #16
 8022666:	d05a      	beq.n	802271e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8022668:	e062      	b.n	8022730 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	6818      	ldr	r0, [r3, #0]
 802266e:	683b      	ldr	r3, [r7, #0]
 8022670:	6899      	ldr	r1, [r3, #8]
 8022672:	683b      	ldr	r3, [r7, #0]
 8022674:	685a      	ldr	r2, [r3, #4]
 8022676:	683b      	ldr	r3, [r7, #0]
 8022678:	68db      	ldr	r3, [r3, #12]
 802267a:	f000 faa9 	bl	8022bd0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	681b      	ldr	r3, [r3, #0]
 8022682:	689b      	ldr	r3, [r3, #8]
 8022684:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8022686:	68fb      	ldr	r3, [r7, #12]
 8022688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802268c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802268e:	687b      	ldr	r3, [r7, #4]
 8022690:	681b      	ldr	r3, [r3, #0]
 8022692:	68fa      	ldr	r2, [r7, #12]
 8022694:	609a      	str	r2, [r3, #8]
      break;
 8022696:	e04e      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	6818      	ldr	r0, [r3, #0]
 802269c:	683b      	ldr	r3, [r7, #0]
 802269e:	6899      	ldr	r1, [r3, #8]
 80226a0:	683b      	ldr	r3, [r7, #0]
 80226a2:	685a      	ldr	r2, [r3, #4]
 80226a4:	683b      	ldr	r3, [r7, #0]
 80226a6:	68db      	ldr	r3, [r3, #12]
 80226a8:	f000 fa92 	bl	8022bd0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	681b      	ldr	r3, [r3, #0]
 80226b0:	689a      	ldr	r2, [r3, #8]
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80226ba:	609a      	str	r2, [r3, #8]
      break;
 80226bc:	e03b      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	6818      	ldr	r0, [r3, #0]
 80226c2:	683b      	ldr	r3, [r7, #0]
 80226c4:	6859      	ldr	r1, [r3, #4]
 80226c6:	683b      	ldr	r3, [r7, #0]
 80226c8:	68db      	ldr	r3, [r3, #12]
 80226ca:	461a      	mov	r2, r3
 80226cc:	f000 f950 	bl	8022970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	2150      	movs	r1, #80	; 0x50
 80226d6:	4618      	mov	r0, r3
 80226d8:	f000 fa5f 	bl	8022b9a <TIM_ITRx_SetConfig>
      break;
 80226dc:	e02b      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	6818      	ldr	r0, [r3, #0]
 80226e2:	683b      	ldr	r3, [r7, #0]
 80226e4:	6859      	ldr	r1, [r3, #4]
 80226e6:	683b      	ldr	r3, [r7, #0]
 80226e8:	68db      	ldr	r3, [r3, #12]
 80226ea:	461a      	mov	r2, r3
 80226ec:	f000 f9ac 	bl	8022a48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	2160      	movs	r1, #96	; 0x60
 80226f6:	4618      	mov	r0, r3
 80226f8:	f000 fa4f 	bl	8022b9a <TIM_ITRx_SetConfig>
      break;
 80226fc:	e01b      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	6818      	ldr	r0, [r3, #0]
 8022702:	683b      	ldr	r3, [r7, #0]
 8022704:	6859      	ldr	r1, [r3, #4]
 8022706:	683b      	ldr	r3, [r7, #0]
 8022708:	68db      	ldr	r3, [r3, #12]
 802270a:	461a      	mov	r2, r3
 802270c:	f000 f930 	bl	8022970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	2140      	movs	r1, #64	; 0x40
 8022716:	4618      	mov	r0, r3
 8022718:	f000 fa3f 	bl	8022b9a <TIM_ITRx_SetConfig>
      break;
 802271c:	e00b      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	681a      	ldr	r2, [r3, #0]
 8022722:	683b      	ldr	r3, [r7, #0]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	4619      	mov	r1, r3
 8022728:	4610      	mov	r0, r2
 802272a:	f000 fa36 	bl	8022b9a <TIM_ITRx_SetConfig>
      break;
 802272e:	e002      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8022730:	bf00      	nop
 8022732:	e000      	b.n	8022736 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8022734:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	2201      	movs	r2, #1
 802273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	2200      	movs	r2, #0
 8022742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022746:	2300      	movs	r3, #0
}
 8022748:	4618      	mov	r0, r3
 802274a:	3710      	adds	r7, #16
 802274c:	46bd      	mov	sp, r7
 802274e:	bd80      	pop	{r7, pc}

08022750 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022750:	b480      	push	{r7}
 8022752:	b083      	sub	sp, #12
 8022754:	af00      	add	r7, sp, #0
 8022756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8022758:	bf00      	nop
 802275a:	370c      	adds	r7, #12
 802275c:	46bd      	mov	sp, r7
 802275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022762:	4770      	bx	lr

08022764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022764:	b480      	push	{r7}
 8022766:	b083      	sub	sp, #12
 8022768:	af00      	add	r7, sp, #0
 802276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802276c:	bf00      	nop
 802276e:	370c      	adds	r7, #12
 8022770:	46bd      	mov	sp, r7
 8022772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022776:	4770      	bx	lr

08022778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8022778:	b480      	push	{r7}
 802277a:	b083      	sub	sp, #12
 802277c:	af00      	add	r7, sp, #0
 802277e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8022780:	bf00      	nop
 8022782:	370c      	adds	r7, #12
 8022784:	46bd      	mov	sp, r7
 8022786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802278a:	4770      	bx	lr

0802278c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802278c:	b480      	push	{r7}
 802278e:	b083      	sub	sp, #12
 8022790:	af00      	add	r7, sp, #0
 8022792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8022794:	bf00      	nop
 8022796:	370c      	adds	r7, #12
 8022798:	46bd      	mov	sp, r7
 802279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802279e:	4770      	bx	lr

080227a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80227a0:	b480      	push	{r7}
 80227a2:	b085      	sub	sp, #20
 80227a4:	af00      	add	r7, sp, #0
 80227a6:	6078      	str	r0, [r7, #4]
 80227a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	4a34      	ldr	r2, [pc, #208]	; (8022884 <TIM_Base_SetConfig+0xe4>)
 80227b4:	4293      	cmp	r3, r2
 80227b6:	d00f      	beq.n	80227d8 <TIM_Base_SetConfig+0x38>
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80227be:	d00b      	beq.n	80227d8 <TIM_Base_SetConfig+0x38>
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	4a31      	ldr	r2, [pc, #196]	; (8022888 <TIM_Base_SetConfig+0xe8>)
 80227c4:	4293      	cmp	r3, r2
 80227c6:	d007      	beq.n	80227d8 <TIM_Base_SetConfig+0x38>
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	4a30      	ldr	r2, [pc, #192]	; (802288c <TIM_Base_SetConfig+0xec>)
 80227cc:	4293      	cmp	r3, r2
 80227ce:	d003      	beq.n	80227d8 <TIM_Base_SetConfig+0x38>
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	4a2f      	ldr	r2, [pc, #188]	; (8022890 <TIM_Base_SetConfig+0xf0>)
 80227d4:	4293      	cmp	r3, r2
 80227d6:	d108      	bne.n	80227ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80227de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80227e0:	683b      	ldr	r3, [r7, #0]
 80227e2:	685b      	ldr	r3, [r3, #4]
 80227e4:	68fa      	ldr	r2, [r7, #12]
 80227e6:	4313      	orrs	r3, r2
 80227e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	4a25      	ldr	r2, [pc, #148]	; (8022884 <TIM_Base_SetConfig+0xe4>)
 80227ee:	4293      	cmp	r3, r2
 80227f0:	d01b      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80227f8:	d017      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	4a22      	ldr	r2, [pc, #136]	; (8022888 <TIM_Base_SetConfig+0xe8>)
 80227fe:	4293      	cmp	r3, r2
 8022800:	d013      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	4a21      	ldr	r2, [pc, #132]	; (802288c <TIM_Base_SetConfig+0xec>)
 8022806:	4293      	cmp	r3, r2
 8022808:	d00f      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	4a20      	ldr	r2, [pc, #128]	; (8022890 <TIM_Base_SetConfig+0xf0>)
 802280e:	4293      	cmp	r3, r2
 8022810:	d00b      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	4a1f      	ldr	r2, [pc, #124]	; (8022894 <TIM_Base_SetConfig+0xf4>)
 8022816:	4293      	cmp	r3, r2
 8022818:	d007      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	4a1e      	ldr	r2, [pc, #120]	; (8022898 <TIM_Base_SetConfig+0xf8>)
 802281e:	4293      	cmp	r3, r2
 8022820:	d003      	beq.n	802282a <TIM_Base_SetConfig+0x8a>
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	4a1d      	ldr	r2, [pc, #116]	; (802289c <TIM_Base_SetConfig+0xfc>)
 8022826:	4293      	cmp	r3, r2
 8022828:	d108      	bne.n	802283c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8022832:	683b      	ldr	r3, [r7, #0]
 8022834:	68db      	ldr	r3, [r3, #12]
 8022836:	68fa      	ldr	r2, [r7, #12]
 8022838:	4313      	orrs	r3, r2
 802283a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802283c:	68fb      	ldr	r3, [r7, #12]
 802283e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8022842:	683b      	ldr	r3, [r7, #0]
 8022844:	695b      	ldr	r3, [r3, #20]
 8022846:	4313      	orrs	r3, r2
 8022848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	68fa      	ldr	r2, [r7, #12]
 802284e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8022850:	683b      	ldr	r3, [r7, #0]
 8022852:	689a      	ldr	r2, [r3, #8]
 8022854:	687b      	ldr	r3, [r7, #4]
 8022856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8022858:	683b      	ldr	r3, [r7, #0]
 802285a:	681a      	ldr	r2, [r3, #0]
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	4a08      	ldr	r2, [pc, #32]	; (8022884 <TIM_Base_SetConfig+0xe4>)
 8022864:	4293      	cmp	r3, r2
 8022866:	d103      	bne.n	8022870 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8022868:	683b      	ldr	r3, [r7, #0]
 802286a:	691a      	ldr	r2, [r3, #16]
 802286c:	687b      	ldr	r3, [r7, #4]
 802286e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	2201      	movs	r2, #1
 8022874:	615a      	str	r2, [r3, #20]
}
 8022876:	bf00      	nop
 8022878:	3714      	adds	r7, #20
 802287a:	46bd      	mov	sp, r7
 802287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022880:	4770      	bx	lr
 8022882:	bf00      	nop
 8022884:	40010000 	.word	0x40010000
 8022888:	40000400 	.word	0x40000400
 802288c:	40000800 	.word	0x40000800
 8022890:	40000c00 	.word	0x40000c00
 8022894:	40014000 	.word	0x40014000
 8022898:	40014400 	.word	0x40014400
 802289c:	40014800 	.word	0x40014800

080228a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80228a0:	b480      	push	{r7}
 80228a2:	b087      	sub	sp, #28
 80228a4:	af00      	add	r7, sp, #0
 80228a6:	60f8      	str	r0, [r7, #12]
 80228a8:	60b9      	str	r1, [r7, #8]
 80228aa:	607a      	str	r2, [r7, #4]
 80228ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80228ae:	68fb      	ldr	r3, [r7, #12]
 80228b0:	6a1b      	ldr	r3, [r3, #32]
 80228b2:	f023 0201 	bic.w	r2, r3, #1
 80228b6:	68fb      	ldr	r3, [r7, #12]
 80228b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	699b      	ldr	r3, [r3, #24]
 80228be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80228c0:	68fb      	ldr	r3, [r7, #12]
 80228c2:	6a1b      	ldr	r3, [r3, #32]
 80228c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	4a24      	ldr	r2, [pc, #144]	; (802295c <TIM_TI1_SetConfig+0xbc>)
 80228ca:	4293      	cmp	r3, r2
 80228cc:	d013      	beq.n	80228f6 <TIM_TI1_SetConfig+0x56>
 80228ce:	68fb      	ldr	r3, [r7, #12]
 80228d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80228d4:	d00f      	beq.n	80228f6 <TIM_TI1_SetConfig+0x56>
 80228d6:	68fb      	ldr	r3, [r7, #12]
 80228d8:	4a21      	ldr	r2, [pc, #132]	; (8022960 <TIM_TI1_SetConfig+0xc0>)
 80228da:	4293      	cmp	r3, r2
 80228dc:	d00b      	beq.n	80228f6 <TIM_TI1_SetConfig+0x56>
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	4a20      	ldr	r2, [pc, #128]	; (8022964 <TIM_TI1_SetConfig+0xc4>)
 80228e2:	4293      	cmp	r3, r2
 80228e4:	d007      	beq.n	80228f6 <TIM_TI1_SetConfig+0x56>
 80228e6:	68fb      	ldr	r3, [r7, #12]
 80228e8:	4a1f      	ldr	r2, [pc, #124]	; (8022968 <TIM_TI1_SetConfig+0xc8>)
 80228ea:	4293      	cmp	r3, r2
 80228ec:	d003      	beq.n	80228f6 <TIM_TI1_SetConfig+0x56>
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	4a1e      	ldr	r2, [pc, #120]	; (802296c <TIM_TI1_SetConfig+0xcc>)
 80228f2:	4293      	cmp	r3, r2
 80228f4:	d101      	bne.n	80228fa <TIM_TI1_SetConfig+0x5a>
 80228f6:	2301      	movs	r3, #1
 80228f8:	e000      	b.n	80228fc <TIM_TI1_SetConfig+0x5c>
 80228fa:	2300      	movs	r3, #0
 80228fc:	2b00      	cmp	r3, #0
 80228fe:	d008      	beq.n	8022912 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8022900:	697b      	ldr	r3, [r7, #20]
 8022902:	f023 0303 	bic.w	r3, r3, #3
 8022906:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8022908:	697a      	ldr	r2, [r7, #20]
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	4313      	orrs	r3, r2
 802290e:	617b      	str	r3, [r7, #20]
 8022910:	e003      	b.n	802291a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8022912:	697b      	ldr	r3, [r7, #20]
 8022914:	f043 0301 	orr.w	r3, r3, #1
 8022918:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802291a:	697b      	ldr	r3, [r7, #20]
 802291c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8022922:	683b      	ldr	r3, [r7, #0]
 8022924:	011b      	lsls	r3, r3, #4
 8022926:	b2db      	uxtb	r3, r3
 8022928:	697a      	ldr	r2, [r7, #20]
 802292a:	4313      	orrs	r3, r2
 802292c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802292e:	693b      	ldr	r3, [r7, #16]
 8022930:	f023 030a 	bic.w	r3, r3, #10
 8022934:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8022936:	68bb      	ldr	r3, [r7, #8]
 8022938:	f003 030a 	and.w	r3, r3, #10
 802293c:	693a      	ldr	r2, [r7, #16]
 802293e:	4313      	orrs	r3, r2
 8022940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8022942:	68fb      	ldr	r3, [r7, #12]
 8022944:	697a      	ldr	r2, [r7, #20]
 8022946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022948:	68fb      	ldr	r3, [r7, #12]
 802294a:	693a      	ldr	r2, [r7, #16]
 802294c:	621a      	str	r2, [r3, #32]
}
 802294e:	bf00      	nop
 8022950:	371c      	adds	r7, #28
 8022952:	46bd      	mov	sp, r7
 8022954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022958:	4770      	bx	lr
 802295a:	bf00      	nop
 802295c:	40010000 	.word	0x40010000
 8022960:	40000400 	.word	0x40000400
 8022964:	40000800 	.word	0x40000800
 8022968:	40000c00 	.word	0x40000c00
 802296c:	40014000 	.word	0x40014000

08022970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8022970:	b480      	push	{r7}
 8022972:	b087      	sub	sp, #28
 8022974:	af00      	add	r7, sp, #0
 8022976:	60f8      	str	r0, [r7, #12]
 8022978:	60b9      	str	r1, [r7, #8]
 802297a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802297c:	68fb      	ldr	r3, [r7, #12]
 802297e:	6a1b      	ldr	r3, [r3, #32]
 8022980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	6a1b      	ldr	r3, [r3, #32]
 8022986:	f023 0201 	bic.w	r2, r3, #1
 802298a:	68fb      	ldr	r3, [r7, #12]
 802298c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	699b      	ldr	r3, [r3, #24]
 8022992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8022994:	693b      	ldr	r3, [r7, #16]
 8022996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802299a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802299c:	687b      	ldr	r3, [r7, #4]
 802299e:	011b      	lsls	r3, r3, #4
 80229a0:	693a      	ldr	r2, [r7, #16]
 80229a2:	4313      	orrs	r3, r2
 80229a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80229a6:	697b      	ldr	r3, [r7, #20]
 80229a8:	f023 030a 	bic.w	r3, r3, #10
 80229ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80229ae:	697a      	ldr	r2, [r7, #20]
 80229b0:	68bb      	ldr	r3, [r7, #8]
 80229b2:	4313      	orrs	r3, r2
 80229b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80229b6:	68fb      	ldr	r3, [r7, #12]
 80229b8:	693a      	ldr	r2, [r7, #16]
 80229ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80229bc:	68fb      	ldr	r3, [r7, #12]
 80229be:	697a      	ldr	r2, [r7, #20]
 80229c0:	621a      	str	r2, [r3, #32]
}
 80229c2:	bf00      	nop
 80229c4:	371c      	adds	r7, #28
 80229c6:	46bd      	mov	sp, r7
 80229c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229cc:	4770      	bx	lr

080229ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80229ce:	b480      	push	{r7}
 80229d0:	b087      	sub	sp, #28
 80229d2:	af00      	add	r7, sp, #0
 80229d4:	60f8      	str	r0, [r7, #12]
 80229d6:	60b9      	str	r1, [r7, #8]
 80229d8:	607a      	str	r2, [r7, #4]
 80229da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80229dc:	68fb      	ldr	r3, [r7, #12]
 80229de:	6a1b      	ldr	r3, [r3, #32]
 80229e0:	f023 0210 	bic.w	r2, r3, #16
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80229e8:	68fb      	ldr	r3, [r7, #12]
 80229ea:	699b      	ldr	r3, [r3, #24]
 80229ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80229ee:	68fb      	ldr	r3, [r7, #12]
 80229f0:	6a1b      	ldr	r3, [r3, #32]
 80229f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80229f4:	697b      	ldr	r3, [r7, #20]
 80229f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80229fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	021b      	lsls	r3, r3, #8
 8022a00:	697a      	ldr	r2, [r7, #20]
 8022a02:	4313      	orrs	r3, r2
 8022a04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022a06:	697b      	ldr	r3, [r7, #20]
 8022a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8022a0e:	683b      	ldr	r3, [r7, #0]
 8022a10:	031b      	lsls	r3, r3, #12
 8022a12:	b29b      	uxth	r3, r3
 8022a14:	697a      	ldr	r2, [r7, #20]
 8022a16:	4313      	orrs	r3, r2
 8022a18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022a1a:	693b      	ldr	r3, [r7, #16]
 8022a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8022a20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8022a22:	68bb      	ldr	r3, [r7, #8]
 8022a24:	011b      	lsls	r3, r3, #4
 8022a26:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8022a2a:	693a      	ldr	r2, [r7, #16]
 8022a2c:	4313      	orrs	r3, r2
 8022a2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8022a30:	68fb      	ldr	r3, [r7, #12]
 8022a32:	697a      	ldr	r2, [r7, #20]
 8022a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022a36:	68fb      	ldr	r3, [r7, #12]
 8022a38:	693a      	ldr	r2, [r7, #16]
 8022a3a:	621a      	str	r2, [r3, #32]
}
 8022a3c:	bf00      	nop
 8022a3e:	371c      	adds	r7, #28
 8022a40:	46bd      	mov	sp, r7
 8022a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a46:	4770      	bx	lr

08022a48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8022a48:	b480      	push	{r7}
 8022a4a:	b087      	sub	sp, #28
 8022a4c:	af00      	add	r7, sp, #0
 8022a4e:	60f8      	str	r0, [r7, #12]
 8022a50:	60b9      	str	r1, [r7, #8]
 8022a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8022a54:	68fb      	ldr	r3, [r7, #12]
 8022a56:	6a1b      	ldr	r3, [r3, #32]
 8022a58:	f023 0210 	bic.w	r2, r3, #16
 8022a5c:	68fb      	ldr	r3, [r7, #12]
 8022a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8022a60:	68fb      	ldr	r3, [r7, #12]
 8022a62:	699b      	ldr	r3, [r3, #24]
 8022a64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022a66:	68fb      	ldr	r3, [r7, #12]
 8022a68:	6a1b      	ldr	r3, [r3, #32]
 8022a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8022a6c:	697b      	ldr	r3, [r7, #20]
 8022a6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022a72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8022a74:	687b      	ldr	r3, [r7, #4]
 8022a76:	031b      	lsls	r3, r3, #12
 8022a78:	697a      	ldr	r2, [r7, #20]
 8022a7a:	4313      	orrs	r3, r2
 8022a7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8022a7e:	693b      	ldr	r3, [r7, #16]
 8022a80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8022a84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8022a86:	68bb      	ldr	r3, [r7, #8]
 8022a88:	011b      	lsls	r3, r3, #4
 8022a8a:	693a      	ldr	r2, [r7, #16]
 8022a8c:	4313      	orrs	r3, r2
 8022a8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8022a90:	68fb      	ldr	r3, [r7, #12]
 8022a92:	697a      	ldr	r2, [r7, #20]
 8022a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8022a96:	68fb      	ldr	r3, [r7, #12]
 8022a98:	693a      	ldr	r2, [r7, #16]
 8022a9a:	621a      	str	r2, [r3, #32]
}
 8022a9c:	bf00      	nop
 8022a9e:	371c      	adds	r7, #28
 8022aa0:	46bd      	mov	sp, r7
 8022aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa6:	4770      	bx	lr

08022aa8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8022aa8:	b480      	push	{r7}
 8022aaa:	b087      	sub	sp, #28
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	60f8      	str	r0, [r7, #12]
 8022ab0:	60b9      	str	r1, [r7, #8]
 8022ab2:	607a      	str	r2, [r7, #4]
 8022ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8022ab6:	68fb      	ldr	r3, [r7, #12]
 8022ab8:	6a1b      	ldr	r3, [r3, #32]
 8022aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022abe:	68fb      	ldr	r3, [r7, #12]
 8022ac0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	69db      	ldr	r3, [r3, #28]
 8022ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022ac8:	68fb      	ldr	r3, [r7, #12]
 8022aca:	6a1b      	ldr	r3, [r3, #32]
 8022acc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8022ace:	697b      	ldr	r3, [r7, #20]
 8022ad0:	f023 0303 	bic.w	r3, r3, #3
 8022ad4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8022ad6:	697a      	ldr	r2, [r7, #20]
 8022ad8:	687b      	ldr	r3, [r7, #4]
 8022ada:	4313      	orrs	r3, r2
 8022adc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8022ade:	697b      	ldr	r3, [r7, #20]
 8022ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8022ae4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8022ae6:	683b      	ldr	r3, [r7, #0]
 8022ae8:	011b      	lsls	r3, r3, #4
 8022aea:	b2db      	uxtb	r3, r3
 8022aec:	697a      	ldr	r2, [r7, #20]
 8022aee:	4313      	orrs	r3, r2
 8022af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8022af2:	693b      	ldr	r3, [r7, #16]
 8022af4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8022af8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8022afa:	68bb      	ldr	r3, [r7, #8]
 8022afc:	021b      	lsls	r3, r3, #8
 8022afe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8022b02:	693a      	ldr	r2, [r7, #16]
 8022b04:	4313      	orrs	r3, r2
 8022b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8022b08:	68fb      	ldr	r3, [r7, #12]
 8022b0a:	697a      	ldr	r2, [r7, #20]
 8022b0c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8022b0e:	68fb      	ldr	r3, [r7, #12]
 8022b10:	693a      	ldr	r2, [r7, #16]
 8022b12:	621a      	str	r2, [r3, #32]
}
 8022b14:	bf00      	nop
 8022b16:	371c      	adds	r7, #28
 8022b18:	46bd      	mov	sp, r7
 8022b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b1e:	4770      	bx	lr

08022b20 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8022b20:	b480      	push	{r7}
 8022b22:	b087      	sub	sp, #28
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	60f8      	str	r0, [r7, #12]
 8022b28:	60b9      	str	r1, [r7, #8]
 8022b2a:	607a      	str	r2, [r7, #4]
 8022b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8022b2e:	68fb      	ldr	r3, [r7, #12]
 8022b30:	6a1b      	ldr	r3, [r3, #32]
 8022b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8022b36:	68fb      	ldr	r3, [r7, #12]
 8022b38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	69db      	ldr	r3, [r3, #28]
 8022b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8022b40:	68fb      	ldr	r3, [r7, #12]
 8022b42:	6a1b      	ldr	r3, [r3, #32]
 8022b44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8022b46:	697b      	ldr	r3, [r7, #20]
 8022b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8022b4e:	687b      	ldr	r3, [r7, #4]
 8022b50:	021b      	lsls	r3, r3, #8
 8022b52:	697a      	ldr	r2, [r7, #20]
 8022b54:	4313      	orrs	r3, r2
 8022b56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8022b58:	697b      	ldr	r3, [r7, #20]
 8022b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8022b5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8022b60:	683b      	ldr	r3, [r7, #0]
 8022b62:	031b      	lsls	r3, r3, #12
 8022b64:	b29b      	uxth	r3, r3
 8022b66:	697a      	ldr	r2, [r7, #20]
 8022b68:	4313      	orrs	r3, r2
 8022b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8022b6c:	693b      	ldr	r3, [r7, #16]
 8022b6e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8022b72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8022b74:	68bb      	ldr	r3, [r7, #8]
 8022b76:	031b      	lsls	r3, r3, #12
 8022b78:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8022b7c:	693a      	ldr	r2, [r7, #16]
 8022b7e:	4313      	orrs	r3, r2
 8022b80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8022b82:	68fb      	ldr	r3, [r7, #12]
 8022b84:	697a      	ldr	r2, [r7, #20]
 8022b86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8022b88:	68fb      	ldr	r3, [r7, #12]
 8022b8a:	693a      	ldr	r2, [r7, #16]
 8022b8c:	621a      	str	r2, [r3, #32]
}
 8022b8e:	bf00      	nop
 8022b90:	371c      	adds	r7, #28
 8022b92:	46bd      	mov	sp, r7
 8022b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b98:	4770      	bx	lr

08022b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8022b9a:	b480      	push	{r7}
 8022b9c:	b085      	sub	sp, #20
 8022b9e:	af00      	add	r7, sp, #0
 8022ba0:	6078      	str	r0, [r7, #4]
 8022ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	689b      	ldr	r3, [r3, #8]
 8022ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8022baa:	68fb      	ldr	r3, [r7, #12]
 8022bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8022bb2:	683a      	ldr	r2, [r7, #0]
 8022bb4:	68fb      	ldr	r3, [r7, #12]
 8022bb6:	4313      	orrs	r3, r2
 8022bb8:	f043 0307 	orr.w	r3, r3, #7
 8022bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022bbe:	687b      	ldr	r3, [r7, #4]
 8022bc0:	68fa      	ldr	r2, [r7, #12]
 8022bc2:	609a      	str	r2, [r3, #8]
}
 8022bc4:	bf00      	nop
 8022bc6:	3714      	adds	r7, #20
 8022bc8:	46bd      	mov	sp, r7
 8022bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bce:	4770      	bx	lr

08022bd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8022bd0:	b480      	push	{r7}
 8022bd2:	b087      	sub	sp, #28
 8022bd4:	af00      	add	r7, sp, #0
 8022bd6:	60f8      	str	r0, [r7, #12]
 8022bd8:	60b9      	str	r1, [r7, #8]
 8022bda:	607a      	str	r2, [r7, #4]
 8022bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8022bde:	68fb      	ldr	r3, [r7, #12]
 8022be0:	689b      	ldr	r3, [r3, #8]
 8022be2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8022be4:	697b      	ldr	r3, [r7, #20]
 8022be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8022bea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8022bec:	683b      	ldr	r3, [r7, #0]
 8022bee:	021a      	lsls	r2, r3, #8
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	431a      	orrs	r2, r3
 8022bf4:	68bb      	ldr	r3, [r7, #8]
 8022bf6:	4313      	orrs	r3, r2
 8022bf8:	697a      	ldr	r2, [r7, #20]
 8022bfa:	4313      	orrs	r3, r2
 8022bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8022bfe:	68fb      	ldr	r3, [r7, #12]
 8022c00:	697a      	ldr	r2, [r7, #20]
 8022c02:	609a      	str	r2, [r3, #8]
}
 8022c04:	bf00      	nop
 8022c06:	371c      	adds	r7, #28
 8022c08:	46bd      	mov	sp, r7
 8022c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c0e:	4770      	bx	lr

08022c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8022c10:	b480      	push	{r7}
 8022c12:	b087      	sub	sp, #28
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	60f8      	str	r0, [r7, #12]
 8022c18:	60b9      	str	r1, [r7, #8]
 8022c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8022c1c:	68bb      	ldr	r3, [r7, #8]
 8022c1e:	f003 031f 	and.w	r3, r3, #31
 8022c22:	2201      	movs	r2, #1
 8022c24:	fa02 f303 	lsl.w	r3, r2, r3
 8022c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8022c2a:	68fb      	ldr	r3, [r7, #12]
 8022c2c:	6a1a      	ldr	r2, [r3, #32]
 8022c2e:	697b      	ldr	r3, [r7, #20]
 8022c30:	43db      	mvns	r3, r3
 8022c32:	401a      	ands	r2, r3
 8022c34:	68fb      	ldr	r3, [r7, #12]
 8022c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8022c38:	68fb      	ldr	r3, [r7, #12]
 8022c3a:	6a1a      	ldr	r2, [r3, #32]
 8022c3c:	68bb      	ldr	r3, [r7, #8]
 8022c3e:	f003 031f 	and.w	r3, r3, #31
 8022c42:	6879      	ldr	r1, [r7, #4]
 8022c44:	fa01 f303 	lsl.w	r3, r1, r3
 8022c48:	431a      	orrs	r2, r3
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	621a      	str	r2, [r3, #32]
}
 8022c4e:	bf00      	nop
 8022c50:	371c      	adds	r7, #28
 8022c52:	46bd      	mov	sp, r7
 8022c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c58:	4770      	bx	lr
	...

08022c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8022c5c:	b480      	push	{r7}
 8022c5e:	b085      	sub	sp, #20
 8022c60:	af00      	add	r7, sp, #0
 8022c62:	6078      	str	r0, [r7, #4]
 8022c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022c6c:	2b01      	cmp	r3, #1
 8022c6e:	d101      	bne.n	8022c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8022c70:	2302      	movs	r3, #2
 8022c72:	e050      	b.n	8022d16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	2201      	movs	r2, #1
 8022c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	2202      	movs	r2, #2
 8022c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	685b      	ldr	r3, [r3, #4]
 8022c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	689b      	ldr	r3, [r3, #8]
 8022c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8022c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8022c9c:	683b      	ldr	r3, [r7, #0]
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	68fa      	ldr	r2, [r7, #12]
 8022ca2:	4313      	orrs	r3, r2
 8022ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	681b      	ldr	r3, [r3, #0]
 8022caa:	68fa      	ldr	r2, [r7, #12]
 8022cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	4a1c      	ldr	r2, [pc, #112]	; (8022d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8022cb4:	4293      	cmp	r3, r2
 8022cb6:	d018      	beq.n	8022cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	681b      	ldr	r3, [r3, #0]
 8022cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022cc0:	d013      	beq.n	8022cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022cc2:	687b      	ldr	r3, [r7, #4]
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	4a18      	ldr	r2, [pc, #96]	; (8022d28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8022cc8:	4293      	cmp	r3, r2
 8022cca:	d00e      	beq.n	8022cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	4a16      	ldr	r2, [pc, #88]	; (8022d2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8022cd2:	4293      	cmp	r3, r2
 8022cd4:	d009      	beq.n	8022cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	681b      	ldr	r3, [r3, #0]
 8022cda:	4a15      	ldr	r2, [pc, #84]	; (8022d30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8022cdc:	4293      	cmp	r3, r2
 8022cde:	d004      	beq.n	8022cea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8022ce0:	687b      	ldr	r3, [r7, #4]
 8022ce2:	681b      	ldr	r3, [r3, #0]
 8022ce4:	4a13      	ldr	r2, [pc, #76]	; (8022d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8022ce6:	4293      	cmp	r3, r2
 8022ce8:	d10c      	bne.n	8022d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8022cea:	68bb      	ldr	r3, [r7, #8]
 8022cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8022cf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8022cf2:	683b      	ldr	r3, [r7, #0]
 8022cf4:	685b      	ldr	r3, [r3, #4]
 8022cf6:	68ba      	ldr	r2, [r7, #8]
 8022cf8:	4313      	orrs	r3, r2
 8022cfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8022cfc:	687b      	ldr	r3, [r7, #4]
 8022cfe:	681b      	ldr	r3, [r3, #0]
 8022d00:	68ba      	ldr	r2, [r7, #8]
 8022d02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	2201      	movs	r2, #1
 8022d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	2200      	movs	r2, #0
 8022d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8022d14:	2300      	movs	r3, #0
}
 8022d16:	4618      	mov	r0, r3
 8022d18:	3714      	adds	r7, #20
 8022d1a:	46bd      	mov	sp, r7
 8022d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d20:	4770      	bx	lr
 8022d22:	bf00      	nop
 8022d24:	40010000 	.word	0x40010000
 8022d28:	40000400 	.word	0x40000400
 8022d2c:	40000800 	.word	0x40000800
 8022d30:	40000c00 	.word	0x40000c00
 8022d34:	40014000 	.word	0x40014000

08022d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8022d38:	b480      	push	{r7}
 8022d3a:	b083      	sub	sp, #12
 8022d3c:	af00      	add	r7, sp, #0
 8022d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8022d40:	bf00      	nop
 8022d42:	370c      	adds	r7, #12
 8022d44:	46bd      	mov	sp, r7
 8022d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d4a:	4770      	bx	lr

08022d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8022d4c:	b480      	push	{r7}
 8022d4e:	b083      	sub	sp, #12
 8022d50:	af00      	add	r7, sp, #0
 8022d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8022d54:	bf00      	nop
 8022d56:	370c      	adds	r7, #12
 8022d58:	46bd      	mov	sp, r7
 8022d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d5e:	4770      	bx	lr

08022d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022d60:	b580      	push	{r7, lr}
 8022d62:	b082      	sub	sp, #8
 8022d64:	af00      	add	r7, sp, #0
 8022d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	2b00      	cmp	r3, #0
 8022d6c:	d101      	bne.n	8022d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022d6e:	2301      	movs	r3, #1
 8022d70:	e03f      	b.n	8022df2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8022d78:	b2db      	uxtb	r3, r3
 8022d7a:	2b00      	cmp	r3, #0
 8022d7c:	d106      	bne.n	8022d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022d7e:	687b      	ldr	r3, [r7, #4]
 8022d80:	2200      	movs	r2, #0
 8022d82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022d86:	6878      	ldr	r0, [r7, #4]
 8022d88:	f7f5 fa18 	bl	80181bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022d8c:	687b      	ldr	r3, [r7, #4]
 8022d8e:	2224      	movs	r2, #36	; 0x24
 8022d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	681b      	ldr	r3, [r3, #0]
 8022d98:	68da      	ldr	r2, [r3, #12]
 8022d9a:	687b      	ldr	r3, [r7, #4]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8022da4:	6878      	ldr	r0, [r7, #4]
 8022da6:	f000 fcd5 	bl	8023754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	681b      	ldr	r3, [r3, #0]
 8022dae:	691a      	ldr	r2, [r3, #16]
 8022db0:	687b      	ldr	r3, [r7, #4]
 8022db2:	681b      	ldr	r3, [r3, #0]
 8022db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	695a      	ldr	r2, [r3, #20]
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	681b      	ldr	r3, [r3, #0]
 8022dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8022dca:	687b      	ldr	r3, [r7, #4]
 8022dcc:	681b      	ldr	r3, [r3, #0]
 8022dce:	68da      	ldr	r2, [r3, #12]
 8022dd0:	687b      	ldr	r3, [r7, #4]
 8022dd2:	681b      	ldr	r3, [r3, #0]
 8022dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8022dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	2200      	movs	r2, #0
 8022dde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	2220      	movs	r2, #32
 8022de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	2220      	movs	r2, #32
 8022dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8022df0:	2300      	movs	r3, #0
}
 8022df2:	4618      	mov	r0, r3
 8022df4:	3708      	adds	r7, #8
 8022df6:	46bd      	mov	sp, r7
 8022df8:	bd80      	pop	{r7, pc}

08022dfa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8022dfa:	b580      	push	{r7, lr}
 8022dfc:	b082      	sub	sp, #8
 8022dfe:	af00      	add	r7, sp, #0
 8022e00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d101      	bne.n	8022e0c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8022e08:	2301      	movs	r3, #1
 8022e0a:	e01e      	b.n	8022e4a <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	2224      	movs	r2, #36	; 0x24
 8022e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	681b      	ldr	r3, [r3, #0]
 8022e18:	68da      	ldr	r2, [r3, #12]
 8022e1a:	687b      	ldr	r3, [r7, #4]
 8022e1c:	681b      	ldr	r3, [r3, #0]
 8022e1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8022e22:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8022e24:	6878      	ldr	r0, [r7, #4]
 8022e26:	f7f5 fa9f 	bl	8018368 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	2200      	movs	r2, #0
 8022e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	2200      	movs	r2, #0
 8022e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8022e38:	687b      	ldr	r3, [r7, #4]
 8022e3a:	2200      	movs	r2, #0
 8022e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8022e40:	687b      	ldr	r3, [r7, #4]
 8022e42:	2200      	movs	r2, #0
 8022e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8022e48:	2300      	movs	r3, #0
}
 8022e4a:	4618      	mov	r0, r3
 8022e4c:	3708      	adds	r7, #8
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	bd80      	pop	{r7, pc}

08022e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8022e52:	b580      	push	{r7, lr}
 8022e54:	b088      	sub	sp, #32
 8022e56:	af02      	add	r7, sp, #8
 8022e58:	60f8      	str	r0, [r7, #12]
 8022e5a:	60b9      	str	r1, [r7, #8]
 8022e5c:	603b      	str	r3, [r7, #0]
 8022e5e:	4613      	mov	r3, r2
 8022e60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8022e62:	2300      	movs	r3, #0
 8022e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022e66:	68fb      	ldr	r3, [r7, #12]
 8022e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8022e6c:	b2db      	uxtb	r3, r3
 8022e6e:	2b20      	cmp	r3, #32
 8022e70:	f040 8083 	bne.w	8022f7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8022e74:	68bb      	ldr	r3, [r7, #8]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d002      	beq.n	8022e80 <HAL_UART_Transmit+0x2e>
 8022e7a:	88fb      	ldrh	r3, [r7, #6]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d101      	bne.n	8022e84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8022e80:	2301      	movs	r3, #1
 8022e82:	e07b      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022e84:	68fb      	ldr	r3, [r7, #12]
 8022e86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8022e8a:	2b01      	cmp	r3, #1
 8022e8c:	d101      	bne.n	8022e92 <HAL_UART_Transmit+0x40>
 8022e8e:	2302      	movs	r3, #2
 8022e90:	e074      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
 8022e92:	68fb      	ldr	r3, [r7, #12]
 8022e94:	2201      	movs	r2, #1
 8022e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022e9a:	68fb      	ldr	r3, [r7, #12]
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022ea0:	68fb      	ldr	r3, [r7, #12]
 8022ea2:	2221      	movs	r2, #33	; 0x21
 8022ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8022ea8:	f7fa fa56 	bl	801d358 <HAL_GetTick>
 8022eac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8022eae:	68fb      	ldr	r3, [r7, #12]
 8022eb0:	88fa      	ldrh	r2, [r7, #6]
 8022eb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022eb4:	68fb      	ldr	r3, [r7, #12]
 8022eb6:	88fa      	ldrh	r2, [r7, #6]
 8022eb8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8022eba:	68fb      	ldr	r3, [r7, #12]
 8022ebc:	2200      	movs	r2, #0
 8022ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8022ec2:	e042      	b.n	8022f4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8022ec4:	68fb      	ldr	r3, [r7, #12]
 8022ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022ec8:	b29b      	uxth	r3, r3
 8022eca:	3b01      	subs	r3, #1
 8022ecc:	b29a      	uxth	r2, r3
 8022ece:	68fb      	ldr	r3, [r7, #12]
 8022ed0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8022ed2:	68fb      	ldr	r3, [r7, #12]
 8022ed4:	689b      	ldr	r3, [r3, #8]
 8022ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022eda:	d122      	bne.n	8022f22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022edc:	683b      	ldr	r3, [r7, #0]
 8022ede:	9300      	str	r3, [sp, #0]
 8022ee0:	697b      	ldr	r3, [r7, #20]
 8022ee2:	2200      	movs	r2, #0
 8022ee4:	2180      	movs	r1, #128	; 0x80
 8022ee6:	68f8      	ldr	r0, [r7, #12]
 8022ee8:	f000 fab2 	bl	8023450 <UART_WaitOnFlagUntilTimeout>
 8022eec:	4603      	mov	r3, r0
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	d001      	beq.n	8022ef6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8022ef2:	2303      	movs	r3, #3
 8022ef4:	e042      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8022ef6:	68bb      	ldr	r3, [r7, #8]
 8022ef8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8022efa:	693b      	ldr	r3, [r7, #16]
 8022efc:	881b      	ldrh	r3, [r3, #0]
 8022efe:	461a      	mov	r2, r3
 8022f00:	68fb      	ldr	r3, [r7, #12]
 8022f02:	681b      	ldr	r3, [r3, #0]
 8022f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8022f08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8022f0a:	68fb      	ldr	r3, [r7, #12]
 8022f0c:	691b      	ldr	r3, [r3, #16]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d103      	bne.n	8022f1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8022f12:	68bb      	ldr	r3, [r7, #8]
 8022f14:	3302      	adds	r3, #2
 8022f16:	60bb      	str	r3, [r7, #8]
 8022f18:	e017      	b.n	8022f4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8022f1a:	68bb      	ldr	r3, [r7, #8]
 8022f1c:	3301      	adds	r3, #1
 8022f1e:	60bb      	str	r3, [r7, #8]
 8022f20:	e013      	b.n	8022f4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8022f22:	683b      	ldr	r3, [r7, #0]
 8022f24:	9300      	str	r3, [sp, #0]
 8022f26:	697b      	ldr	r3, [r7, #20]
 8022f28:	2200      	movs	r2, #0
 8022f2a:	2180      	movs	r1, #128	; 0x80
 8022f2c:	68f8      	ldr	r0, [r7, #12]
 8022f2e:	f000 fa8f 	bl	8023450 <UART_WaitOnFlagUntilTimeout>
 8022f32:	4603      	mov	r3, r0
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d001      	beq.n	8022f3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8022f38:	2303      	movs	r3, #3
 8022f3a:	e01f      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8022f3c:	68bb      	ldr	r3, [r7, #8]
 8022f3e:	1c5a      	adds	r2, r3, #1
 8022f40:	60ba      	str	r2, [r7, #8]
 8022f42:	781a      	ldrb	r2, [r3, #0]
 8022f44:	68fb      	ldr	r3, [r7, #12]
 8022f46:	681b      	ldr	r3, [r3, #0]
 8022f48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8022f4a:	68fb      	ldr	r3, [r7, #12]
 8022f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8022f4e:	b29b      	uxth	r3, r3
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d1b7      	bne.n	8022ec4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022f54:	683b      	ldr	r3, [r7, #0]
 8022f56:	9300      	str	r3, [sp, #0]
 8022f58:	697b      	ldr	r3, [r7, #20]
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	2140      	movs	r1, #64	; 0x40
 8022f5e:	68f8      	ldr	r0, [r7, #12]
 8022f60:	f000 fa76 	bl	8023450 <UART_WaitOnFlagUntilTimeout>
 8022f64:	4603      	mov	r3, r0
 8022f66:	2b00      	cmp	r3, #0
 8022f68:	d001      	beq.n	8022f6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8022f6a:	2303      	movs	r3, #3
 8022f6c:	e006      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022f6e:	68fb      	ldr	r3, [r7, #12]
 8022f70:	2220      	movs	r2, #32
 8022f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8022f76:	2300      	movs	r3, #0
 8022f78:	e000      	b.n	8022f7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8022f7a:	2302      	movs	r3, #2
  }
}
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	3718      	adds	r7, #24
 8022f80:	46bd      	mov	sp, r7
 8022f82:	bd80      	pop	{r7, pc}

08022f84 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022f84:	b480      	push	{r7}
 8022f86:	b085      	sub	sp, #20
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	60f8      	str	r0, [r7, #12]
 8022f8c:	60b9      	str	r1, [r7, #8]
 8022f8e:	4613      	mov	r3, r2
 8022f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022f92:	68fb      	ldr	r3, [r7, #12]
 8022f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8022f98:	b2db      	uxtb	r3, r3
 8022f9a:	2b20      	cmp	r3, #32
 8022f9c:	d130      	bne.n	8023000 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8022f9e:	68bb      	ldr	r3, [r7, #8]
 8022fa0:	2b00      	cmp	r3, #0
 8022fa2:	d002      	beq.n	8022faa <HAL_UART_Transmit_IT+0x26>
 8022fa4:	88fb      	ldrh	r3, [r7, #6]
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	d101      	bne.n	8022fae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8022faa:	2301      	movs	r3, #1
 8022fac:	e029      	b.n	8023002 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8022fb4:	2b01      	cmp	r3, #1
 8022fb6:	d101      	bne.n	8022fbc <HAL_UART_Transmit_IT+0x38>
 8022fb8:	2302      	movs	r3, #2
 8022fba:	e022      	b.n	8023002 <HAL_UART_Transmit_IT+0x7e>
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	2201      	movs	r2, #1
 8022fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8022fc4:	68fb      	ldr	r3, [r7, #12]
 8022fc6:	68ba      	ldr	r2, [r7, #8]
 8022fc8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8022fca:	68fb      	ldr	r3, [r7, #12]
 8022fcc:	88fa      	ldrh	r2, [r7, #6]
 8022fce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8022fd0:	68fb      	ldr	r3, [r7, #12]
 8022fd2:	88fa      	ldrh	r2, [r7, #6]
 8022fd4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022fd6:	68fb      	ldr	r3, [r7, #12]
 8022fd8:	2200      	movs	r2, #0
 8022fda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022fdc:	68fb      	ldr	r3, [r7, #12]
 8022fde:	2221      	movs	r2, #33	; 0x21
 8022fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8022fe4:	68fb      	ldr	r3, [r7, #12]
 8022fe6:	2200      	movs	r2, #0
 8022fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	68da      	ldr	r2, [r3, #12]
 8022ff2:	68fb      	ldr	r3, [r7, #12]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022ffa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8022ffc:	2300      	movs	r3, #0
 8022ffe:	e000      	b.n	8023002 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8023000:	2302      	movs	r3, #2
  }
}
 8023002:	4618      	mov	r0, r3
 8023004:	3714      	adds	r7, #20
 8023006:	46bd      	mov	sp, r7
 8023008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802300c:	4770      	bx	lr
	...

08023010 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8023010:	b580      	push	{r7, lr}
 8023012:	b086      	sub	sp, #24
 8023014:	af00      	add	r7, sp, #0
 8023016:	60f8      	str	r0, [r7, #12]
 8023018:	60b9      	str	r1, [r7, #8]
 802301a:	4613      	mov	r3, r2
 802301c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802301e:	68fb      	ldr	r3, [r7, #12]
 8023020:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8023024:	b2db      	uxtb	r3, r3
 8023026:	2b20      	cmp	r3, #32
 8023028:	d166      	bne.n	80230f8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 802302a:	68bb      	ldr	r3, [r7, #8]
 802302c:	2b00      	cmp	r3, #0
 802302e:	d002      	beq.n	8023036 <HAL_UART_Receive_DMA+0x26>
 8023030:	88fb      	ldrh	r3, [r7, #6]
 8023032:	2b00      	cmp	r3, #0
 8023034:	d101      	bne.n	802303a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8023036:	2301      	movs	r3, #1
 8023038:	e05f      	b.n	80230fa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802303a:	68fb      	ldr	r3, [r7, #12]
 802303c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023040:	2b01      	cmp	r3, #1
 8023042:	d101      	bne.n	8023048 <HAL_UART_Receive_DMA+0x38>
 8023044:	2302      	movs	r3, #2
 8023046:	e058      	b.n	80230fa <HAL_UART_Receive_DMA+0xea>
 8023048:	68fb      	ldr	r3, [r7, #12]
 802304a:	2201      	movs	r2, #1
 802304c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8023050:	68ba      	ldr	r2, [r7, #8]
 8023052:	68fb      	ldr	r3, [r7, #12]
 8023054:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8023056:	68fb      	ldr	r3, [r7, #12]
 8023058:	88fa      	ldrh	r2, [r7, #6]
 802305a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802305c:	68fb      	ldr	r3, [r7, #12]
 802305e:	2200      	movs	r2, #0
 8023060:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023062:	68fb      	ldr	r3, [r7, #12]
 8023064:	2222      	movs	r2, #34	; 0x22
 8023066:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 802306a:	68fb      	ldr	r3, [r7, #12]
 802306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802306e:	4a25      	ldr	r2, [pc, #148]	; (8023104 <HAL_UART_Receive_DMA+0xf4>)
 8023070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8023072:	68fb      	ldr	r3, [r7, #12]
 8023074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023076:	4a24      	ldr	r2, [pc, #144]	; (8023108 <HAL_UART_Receive_DMA+0xf8>)
 8023078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 802307a:	68fb      	ldr	r3, [r7, #12]
 802307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802307e:	4a23      	ldr	r2, [pc, #140]	; (802310c <HAL_UART_Receive_DMA+0xfc>)
 8023080:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023086:	2200      	movs	r2, #0
 8023088:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 802308a:	f107 0308 	add.w	r3, r7, #8
 802308e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8023090:	68fb      	ldr	r3, [r7, #12]
 8023092:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8023094:	68fb      	ldr	r3, [r7, #12]
 8023096:	681b      	ldr	r3, [r3, #0]
 8023098:	3304      	adds	r3, #4
 802309a:	4619      	mov	r1, r3
 802309c:	697b      	ldr	r3, [r7, #20]
 802309e:	681a      	ldr	r2, [r3, #0]
 80230a0:	88fb      	ldrh	r3, [r7, #6]
 80230a2:	f7fb f913 	bl	801e2cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80230a6:	2300      	movs	r3, #0
 80230a8:	613b      	str	r3, [r7, #16]
 80230aa:	68fb      	ldr	r3, [r7, #12]
 80230ac:	681b      	ldr	r3, [r3, #0]
 80230ae:	681b      	ldr	r3, [r3, #0]
 80230b0:	613b      	str	r3, [r7, #16]
 80230b2:	68fb      	ldr	r3, [r7, #12]
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	685b      	ldr	r3, [r3, #4]
 80230b8:	613b      	str	r3, [r7, #16]
 80230ba:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80230bc:	68fb      	ldr	r3, [r7, #12]
 80230be:	2200      	movs	r2, #0
 80230c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80230c4:	68fb      	ldr	r3, [r7, #12]
 80230c6:	681b      	ldr	r3, [r3, #0]
 80230c8:	68da      	ldr	r2, [r3, #12]
 80230ca:	68fb      	ldr	r3, [r7, #12]
 80230cc:	681b      	ldr	r3, [r3, #0]
 80230ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80230d2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80230d4:	68fb      	ldr	r3, [r7, #12]
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	695a      	ldr	r2, [r3, #20]
 80230da:	68fb      	ldr	r3, [r7, #12]
 80230dc:	681b      	ldr	r3, [r3, #0]
 80230de:	f042 0201 	orr.w	r2, r2, #1
 80230e2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80230e4:	68fb      	ldr	r3, [r7, #12]
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	695a      	ldr	r2, [r3, #20]
 80230ea:	68fb      	ldr	r3, [r7, #12]
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80230f2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80230f4:	2300      	movs	r3, #0
 80230f6:	e000      	b.n	80230fa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80230f8:	2302      	movs	r3, #2
  }
}
 80230fa:	4618      	mov	r0, r3
 80230fc:	3718      	adds	r7, #24
 80230fe:	46bd      	mov	sp, r7
 8023100:	bd80      	pop	{r7, pc}
 8023102:	bf00      	nop
 8023104:	08023339 	.word	0x08023339
 8023108:	080233a1 	.word	0x080233a1
 802310c:	080233bd 	.word	0x080233bd

08023110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8023110:	b580      	push	{r7, lr}
 8023112:	b088      	sub	sp, #32
 8023114:	af00      	add	r7, sp, #0
 8023116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	681b      	ldr	r3, [r3, #0]
 802311c:	681b      	ldr	r3, [r3, #0]
 802311e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	68db      	ldr	r3, [r3, #12]
 8023126:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	695b      	ldr	r3, [r3, #20]
 802312e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8023130:	2300      	movs	r3, #0
 8023132:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8023134:	2300      	movs	r3, #0
 8023136:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8023138:	69fb      	ldr	r3, [r7, #28]
 802313a:	f003 030f 	and.w	r3, r3, #15
 802313e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8023140:	693b      	ldr	r3, [r7, #16]
 8023142:	2b00      	cmp	r3, #0
 8023144:	d10d      	bne.n	8023162 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023146:	69fb      	ldr	r3, [r7, #28]
 8023148:	f003 0320 	and.w	r3, r3, #32
 802314c:	2b00      	cmp	r3, #0
 802314e:	d008      	beq.n	8023162 <HAL_UART_IRQHandler+0x52>
 8023150:	69bb      	ldr	r3, [r7, #24]
 8023152:	f003 0320 	and.w	r3, r3, #32
 8023156:	2b00      	cmp	r3, #0
 8023158:	d003      	beq.n	8023162 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 802315a:	6878      	ldr	r0, [r7, #4]
 802315c:	f000 fa78 	bl	8023650 <UART_Receive_IT>
      return;
 8023160:	e0d0      	b.n	8023304 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8023162:	693b      	ldr	r3, [r7, #16]
 8023164:	2b00      	cmp	r3, #0
 8023166:	f000 80b0 	beq.w	80232ca <HAL_UART_IRQHandler+0x1ba>
 802316a:	697b      	ldr	r3, [r7, #20]
 802316c:	f003 0301 	and.w	r3, r3, #1
 8023170:	2b00      	cmp	r3, #0
 8023172:	d105      	bne.n	8023180 <HAL_UART_IRQHandler+0x70>
 8023174:	69bb      	ldr	r3, [r7, #24]
 8023176:	f403 7390 	and.w	r3, r3, #288	; 0x120
 802317a:	2b00      	cmp	r3, #0
 802317c:	f000 80a5 	beq.w	80232ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8023180:	69fb      	ldr	r3, [r7, #28]
 8023182:	f003 0301 	and.w	r3, r3, #1
 8023186:	2b00      	cmp	r3, #0
 8023188:	d00a      	beq.n	80231a0 <HAL_UART_IRQHandler+0x90>
 802318a:	69bb      	ldr	r3, [r7, #24]
 802318c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023190:	2b00      	cmp	r3, #0
 8023192:	d005      	beq.n	80231a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8023194:	687b      	ldr	r3, [r7, #4]
 8023196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023198:	f043 0201 	orr.w	r2, r3, #1
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80231a0:	69fb      	ldr	r3, [r7, #28]
 80231a2:	f003 0304 	and.w	r3, r3, #4
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	d00a      	beq.n	80231c0 <HAL_UART_IRQHandler+0xb0>
 80231aa:	697b      	ldr	r3, [r7, #20]
 80231ac:	f003 0301 	and.w	r3, r3, #1
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	d005      	beq.n	80231c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80231b4:	687b      	ldr	r3, [r7, #4]
 80231b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80231b8:	f043 0202 	orr.w	r2, r3, #2
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80231c0:	69fb      	ldr	r3, [r7, #28]
 80231c2:	f003 0302 	and.w	r3, r3, #2
 80231c6:	2b00      	cmp	r3, #0
 80231c8:	d00a      	beq.n	80231e0 <HAL_UART_IRQHandler+0xd0>
 80231ca:	697b      	ldr	r3, [r7, #20]
 80231cc:	f003 0301 	and.w	r3, r3, #1
 80231d0:	2b00      	cmp	r3, #0
 80231d2:	d005      	beq.n	80231e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80231d8:	f043 0204 	orr.w	r2, r3, #4
 80231dc:	687b      	ldr	r3, [r7, #4]
 80231de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80231e0:	69fb      	ldr	r3, [r7, #28]
 80231e2:	f003 0308 	and.w	r3, r3, #8
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d00f      	beq.n	802320a <HAL_UART_IRQHandler+0xfa>
 80231ea:	69bb      	ldr	r3, [r7, #24]
 80231ec:	f003 0320 	and.w	r3, r3, #32
 80231f0:	2b00      	cmp	r3, #0
 80231f2:	d104      	bne.n	80231fe <HAL_UART_IRQHandler+0xee>
 80231f4:	697b      	ldr	r3, [r7, #20]
 80231f6:	f003 0301 	and.w	r3, r3, #1
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	d005      	beq.n	802320a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023202:	f043 0208 	orr.w	r2, r3, #8
 8023206:	687b      	ldr	r3, [r7, #4]
 8023208:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802320e:	2b00      	cmp	r3, #0
 8023210:	d077      	beq.n	8023302 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023212:	69fb      	ldr	r3, [r7, #28]
 8023214:	f003 0320 	and.w	r3, r3, #32
 8023218:	2b00      	cmp	r3, #0
 802321a:	d007      	beq.n	802322c <HAL_UART_IRQHandler+0x11c>
 802321c:	69bb      	ldr	r3, [r7, #24]
 802321e:	f003 0320 	and.w	r3, r3, #32
 8023222:	2b00      	cmp	r3, #0
 8023224:	d002      	beq.n	802322c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8023226:	6878      	ldr	r0, [r7, #4]
 8023228:	f000 fa12 	bl	8023650 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	681b      	ldr	r3, [r3, #0]
 8023230:	695b      	ldr	r3, [r3, #20]
 8023232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023236:	2b40      	cmp	r3, #64	; 0x40
 8023238:	bf0c      	ite	eq
 802323a:	2301      	moveq	r3, #1
 802323c:	2300      	movne	r3, #0
 802323e:	b2db      	uxtb	r3, r3
 8023240:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8023242:	687b      	ldr	r3, [r7, #4]
 8023244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023246:	f003 0308 	and.w	r3, r3, #8
 802324a:	2b00      	cmp	r3, #0
 802324c:	d102      	bne.n	8023254 <HAL_UART_IRQHandler+0x144>
 802324e:	68fb      	ldr	r3, [r7, #12]
 8023250:	2b00      	cmp	r3, #0
 8023252:	d031      	beq.n	80232b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8023254:	6878      	ldr	r0, [r7, #4]
 8023256:	f000 f95b 	bl	8023510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802325a:	687b      	ldr	r3, [r7, #4]
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	695b      	ldr	r3, [r3, #20]
 8023260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023264:	2b40      	cmp	r3, #64	; 0x40
 8023266:	d123      	bne.n	80232b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	695a      	ldr	r2, [r3, #20]
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023276:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8023278:	687b      	ldr	r3, [r7, #4]
 802327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802327c:	2b00      	cmp	r3, #0
 802327e:	d013      	beq.n	80232a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023284:	4a21      	ldr	r2, [pc, #132]	; (802330c <HAL_UART_IRQHandler+0x1fc>)
 8023286:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802328c:	4618      	mov	r0, r3
 802328e:	f7fb f875 	bl	801e37c <HAL_DMA_Abort_IT>
 8023292:	4603      	mov	r3, r0
 8023294:	2b00      	cmp	r3, #0
 8023296:	d016      	beq.n	80232c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802329e:	687a      	ldr	r2, [r7, #4]
 80232a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80232a2:	4610      	mov	r0, r2
 80232a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232a6:	e00e      	b.n	80232c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80232a8:	6878      	ldr	r0, [r7, #4]
 80232aa:	f7f4 ff73 	bl	8018194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232ae:	e00a      	b.n	80232c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80232b0:	6878      	ldr	r0, [r7, #4]
 80232b2:	f7f4 ff6f 	bl	8018194 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232b6:	e006      	b.n	80232c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80232b8:	6878      	ldr	r0, [r7, #4]
 80232ba:	f7f4 ff6b 	bl	8018194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	2200      	movs	r2, #0
 80232c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80232c4:	e01d      	b.n	8023302 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232c6:	bf00      	nop
    return;
 80232c8:	e01b      	b.n	8023302 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80232ca:	69fb      	ldr	r3, [r7, #28]
 80232cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d008      	beq.n	80232e6 <HAL_UART_IRQHandler+0x1d6>
 80232d4:	69bb      	ldr	r3, [r7, #24]
 80232d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d003      	beq.n	80232e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80232de:	6878      	ldr	r0, [r7, #4]
 80232e0:	f000 f948 	bl	8023574 <UART_Transmit_IT>
    return;
 80232e4:	e00e      	b.n	8023304 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80232e6:	69fb      	ldr	r3, [r7, #28]
 80232e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80232ec:	2b00      	cmp	r3, #0
 80232ee:	d009      	beq.n	8023304 <HAL_UART_IRQHandler+0x1f4>
 80232f0:	69bb      	ldr	r3, [r7, #24]
 80232f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80232f6:	2b00      	cmp	r3, #0
 80232f8:	d004      	beq.n	8023304 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80232fa:	6878      	ldr	r0, [r7, #4]
 80232fc:	f000 f990 	bl	8023620 <UART_EndTransmit_IT>
    return;
 8023300:	e000      	b.n	8023304 <HAL_UART_IRQHandler+0x1f4>
    return;
 8023302:	bf00      	nop
  }
}
 8023304:	3720      	adds	r7, #32
 8023306:	46bd      	mov	sp, r7
 8023308:	bd80      	pop	{r7, pc}
 802330a:	bf00      	nop
 802330c:	0802354d 	.word	0x0802354d

08023310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8023310:	b480      	push	{r7}
 8023312:	b083      	sub	sp, #12
 8023314:	af00      	add	r7, sp, #0
 8023316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8023318:	bf00      	nop
 802331a:	370c      	adds	r7, #12
 802331c:	46bd      	mov	sp, r7
 802331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023322:	4770      	bx	lr

08023324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8023324:	b480      	push	{r7}
 8023326:	b083      	sub	sp, #12
 8023328:	af00      	add	r7, sp, #0
 802332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 802332c:	bf00      	nop
 802332e:	370c      	adds	r7, #12
 8023330:	46bd      	mov	sp, r7
 8023332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023336:	4770      	bx	lr

08023338 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8023338:	b580      	push	{r7, lr}
 802333a:	b084      	sub	sp, #16
 802333c:	af00      	add	r7, sp, #0
 802333e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023340:	687b      	ldr	r3, [r7, #4]
 8023342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023344:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023350:	2b00      	cmp	r3, #0
 8023352:	d11e      	bne.n	8023392 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8023354:	68fb      	ldr	r3, [r7, #12]
 8023356:	2200      	movs	r2, #0
 8023358:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802335a:	68fb      	ldr	r3, [r7, #12]
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	68da      	ldr	r2, [r3, #12]
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023368:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802336a:	68fb      	ldr	r3, [r7, #12]
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	695a      	ldr	r2, [r3, #20]
 8023370:	68fb      	ldr	r3, [r7, #12]
 8023372:	681b      	ldr	r3, [r3, #0]
 8023374:	f022 0201 	bic.w	r2, r2, #1
 8023378:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	681b      	ldr	r3, [r3, #0]
 802337e:	695a      	ldr	r2, [r3, #20]
 8023380:	68fb      	ldr	r3, [r7, #12]
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023388:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	2220      	movs	r2, #32
 802338e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8023392:	68f8      	ldr	r0, [r7, #12]
 8023394:	f7f4 ff08 	bl	80181a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023398:	bf00      	nop
 802339a:	3710      	adds	r7, #16
 802339c:	46bd      	mov	sp, r7
 802339e:	bd80      	pop	{r7, pc}

080233a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b084      	sub	sp, #16
 80233a4:	af00      	add	r7, sp, #0
 80233a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80233a8:	687b      	ldr	r3, [r7, #4]
 80233aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80233ae:	68f8      	ldr	r0, [r7, #12]
 80233b0:	f7ff ffb8 	bl	8023324 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80233b4:	bf00      	nop
 80233b6:	3710      	adds	r7, #16
 80233b8:	46bd      	mov	sp, r7
 80233ba:	bd80      	pop	{r7, pc}

080233bc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80233bc:	b580      	push	{r7, lr}
 80233be:	b084      	sub	sp, #16
 80233c0:	af00      	add	r7, sp, #0
 80233c2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80233c4:	2300      	movs	r3, #0
 80233c6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233cc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80233ce:	68bb      	ldr	r3, [r7, #8]
 80233d0:	681b      	ldr	r3, [r3, #0]
 80233d2:	695b      	ldr	r3, [r3, #20]
 80233d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80233d8:	2b80      	cmp	r3, #128	; 0x80
 80233da:	bf0c      	ite	eq
 80233dc:	2301      	moveq	r3, #1
 80233de:	2300      	movne	r3, #0
 80233e0:	b2db      	uxtb	r3, r3
 80233e2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80233e4:	68bb      	ldr	r3, [r7, #8]
 80233e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80233ea:	b2db      	uxtb	r3, r3
 80233ec:	2b21      	cmp	r3, #33	; 0x21
 80233ee:	d108      	bne.n	8023402 <UART_DMAError+0x46>
 80233f0:	68fb      	ldr	r3, [r7, #12]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d005      	beq.n	8023402 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80233f6:	68bb      	ldr	r3, [r7, #8]
 80233f8:	2200      	movs	r2, #0
 80233fa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80233fc:	68b8      	ldr	r0, [r7, #8]
 80233fe:	f000 f871 	bl	80234e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8023402:	68bb      	ldr	r3, [r7, #8]
 8023404:	681b      	ldr	r3, [r3, #0]
 8023406:	695b      	ldr	r3, [r3, #20]
 8023408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802340c:	2b40      	cmp	r3, #64	; 0x40
 802340e:	bf0c      	ite	eq
 8023410:	2301      	moveq	r3, #1
 8023412:	2300      	movne	r3, #0
 8023414:	b2db      	uxtb	r3, r3
 8023416:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8023418:	68bb      	ldr	r3, [r7, #8]
 802341a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802341e:	b2db      	uxtb	r3, r3
 8023420:	2b22      	cmp	r3, #34	; 0x22
 8023422:	d108      	bne.n	8023436 <UART_DMAError+0x7a>
 8023424:	68fb      	ldr	r3, [r7, #12]
 8023426:	2b00      	cmp	r3, #0
 8023428:	d005      	beq.n	8023436 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 802342a:	68bb      	ldr	r3, [r7, #8]
 802342c:	2200      	movs	r2, #0
 802342e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8023430:	68b8      	ldr	r0, [r7, #8]
 8023432:	f000 f86d 	bl	8023510 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8023436:	68bb      	ldr	r3, [r7, #8]
 8023438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802343a:	f043 0210 	orr.w	r2, r3, #16
 802343e:	68bb      	ldr	r3, [r7, #8]
 8023440:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8023442:	68b8      	ldr	r0, [r7, #8]
 8023444:	f7f4 fea6 	bl	8018194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8023448:	bf00      	nop
 802344a:	3710      	adds	r7, #16
 802344c:	46bd      	mov	sp, r7
 802344e:	bd80      	pop	{r7, pc}

08023450 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8023450:	b580      	push	{r7, lr}
 8023452:	b084      	sub	sp, #16
 8023454:	af00      	add	r7, sp, #0
 8023456:	60f8      	str	r0, [r7, #12]
 8023458:	60b9      	str	r1, [r7, #8]
 802345a:	603b      	str	r3, [r7, #0]
 802345c:	4613      	mov	r3, r2
 802345e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023460:	e02c      	b.n	80234bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023462:	69bb      	ldr	r3, [r7, #24]
 8023464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023468:	d028      	beq.n	80234bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802346a:	69bb      	ldr	r3, [r7, #24]
 802346c:	2b00      	cmp	r3, #0
 802346e:	d007      	beq.n	8023480 <UART_WaitOnFlagUntilTimeout+0x30>
 8023470:	f7f9 ff72 	bl	801d358 <HAL_GetTick>
 8023474:	4602      	mov	r2, r0
 8023476:	683b      	ldr	r3, [r7, #0]
 8023478:	1ad3      	subs	r3, r2, r3
 802347a:	69ba      	ldr	r2, [r7, #24]
 802347c:	429a      	cmp	r2, r3
 802347e:	d21d      	bcs.n	80234bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	68da      	ldr	r2, [r3, #12]
 8023486:	68fb      	ldr	r3, [r7, #12]
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802348e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023490:	68fb      	ldr	r3, [r7, #12]
 8023492:	681b      	ldr	r3, [r3, #0]
 8023494:	695a      	ldr	r2, [r3, #20]
 8023496:	68fb      	ldr	r3, [r7, #12]
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	f022 0201 	bic.w	r2, r2, #1
 802349e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80234a0:	68fb      	ldr	r3, [r7, #12]
 80234a2:	2220      	movs	r2, #32
 80234a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80234a8:	68fb      	ldr	r3, [r7, #12]
 80234aa:	2220      	movs	r2, #32
 80234ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80234b0:	68fb      	ldr	r3, [r7, #12]
 80234b2:	2200      	movs	r2, #0
 80234b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80234b8:	2303      	movs	r3, #3
 80234ba:	e00f      	b.n	80234dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80234bc:	68fb      	ldr	r3, [r7, #12]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	681a      	ldr	r2, [r3, #0]
 80234c2:	68bb      	ldr	r3, [r7, #8]
 80234c4:	4013      	ands	r3, r2
 80234c6:	68ba      	ldr	r2, [r7, #8]
 80234c8:	429a      	cmp	r2, r3
 80234ca:	bf0c      	ite	eq
 80234cc:	2301      	moveq	r3, #1
 80234ce:	2300      	movne	r3, #0
 80234d0:	b2db      	uxtb	r3, r3
 80234d2:	461a      	mov	r2, r3
 80234d4:	79fb      	ldrb	r3, [r7, #7]
 80234d6:	429a      	cmp	r2, r3
 80234d8:	d0c3      	beq.n	8023462 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80234da:	2300      	movs	r3, #0
}
 80234dc:	4618      	mov	r0, r3
 80234de:	3710      	adds	r7, #16
 80234e0:	46bd      	mov	sp, r7
 80234e2:	bd80      	pop	{r7, pc}

080234e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80234e4:	b480      	push	{r7}
 80234e6:	b083      	sub	sp, #12
 80234e8:	af00      	add	r7, sp, #0
 80234ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	68da      	ldr	r2, [r3, #12]
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80234fa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	2220      	movs	r2, #32
 8023500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8023504:	bf00      	nop
 8023506:	370c      	adds	r7, #12
 8023508:	46bd      	mov	sp, r7
 802350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802350e:	4770      	bx	lr

08023510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8023510:	b480      	push	{r7}
 8023512:	b083      	sub	sp, #12
 8023514:	af00      	add	r7, sp, #0
 8023516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	681b      	ldr	r3, [r3, #0]
 802351c:	68da      	ldr	r2, [r3, #12]
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	681b      	ldr	r3, [r3, #0]
 8023522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8023526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023528:	687b      	ldr	r3, [r7, #4]
 802352a:	681b      	ldr	r3, [r3, #0]
 802352c:	695a      	ldr	r2, [r3, #20]
 802352e:	687b      	ldr	r3, [r7, #4]
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	f022 0201 	bic.w	r2, r2, #1
 8023536:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8023538:	687b      	ldr	r3, [r7, #4]
 802353a:	2220      	movs	r2, #32
 802353c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8023540:	bf00      	nop
 8023542:	370c      	adds	r7, #12
 8023544:	46bd      	mov	sp, r7
 8023546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354a:	4770      	bx	lr

0802354c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802354c:	b580      	push	{r7, lr}
 802354e:	b084      	sub	sp, #16
 8023550:	af00      	add	r7, sp, #0
 8023552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802355a:	68fb      	ldr	r3, [r7, #12]
 802355c:	2200      	movs	r2, #0
 802355e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8023560:	68fb      	ldr	r3, [r7, #12]
 8023562:	2200      	movs	r2, #0
 8023564:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8023566:	68f8      	ldr	r0, [r7, #12]
 8023568:	f7f4 fe14 	bl	8018194 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802356c:	bf00      	nop
 802356e:	3710      	adds	r7, #16
 8023570:	46bd      	mov	sp, r7
 8023572:	bd80      	pop	{r7, pc}

08023574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8023574:	b480      	push	{r7}
 8023576:	b085      	sub	sp, #20
 8023578:	af00      	add	r7, sp, #0
 802357a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023582:	b2db      	uxtb	r3, r3
 8023584:	2b21      	cmp	r3, #33	; 0x21
 8023586:	d144      	bne.n	8023612 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8023588:	687b      	ldr	r3, [r7, #4]
 802358a:	689b      	ldr	r3, [r3, #8]
 802358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8023590:	d11a      	bne.n	80235c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	6a1b      	ldr	r3, [r3, #32]
 8023596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8023598:	68fb      	ldr	r3, [r7, #12]
 802359a:	881b      	ldrh	r3, [r3, #0]
 802359c:	461a      	mov	r2, r3
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	681b      	ldr	r3, [r3, #0]
 80235a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80235a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80235a8:	687b      	ldr	r3, [r7, #4]
 80235aa:	691b      	ldr	r3, [r3, #16]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	d105      	bne.n	80235bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	6a1b      	ldr	r3, [r3, #32]
 80235b4:	1c9a      	adds	r2, r3, #2
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	621a      	str	r2, [r3, #32]
 80235ba:	e00e      	b.n	80235da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80235bc:	687b      	ldr	r3, [r7, #4]
 80235be:	6a1b      	ldr	r3, [r3, #32]
 80235c0:	1c5a      	adds	r2, r3, #1
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	621a      	str	r2, [r3, #32]
 80235c6:	e008      	b.n	80235da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	6a1b      	ldr	r3, [r3, #32]
 80235cc:	1c59      	adds	r1, r3, #1
 80235ce:	687a      	ldr	r2, [r7, #4]
 80235d0:	6211      	str	r1, [r2, #32]
 80235d2:	781a      	ldrb	r2, [r3, #0]
 80235d4:	687b      	ldr	r3, [r7, #4]
 80235d6:	681b      	ldr	r3, [r3, #0]
 80235d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80235de:	b29b      	uxth	r3, r3
 80235e0:	3b01      	subs	r3, #1
 80235e2:	b29b      	uxth	r3, r3
 80235e4:	687a      	ldr	r2, [r7, #4]
 80235e6:	4619      	mov	r1, r3
 80235e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	d10f      	bne.n	802360e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	68da      	ldr	r2, [r3, #12]
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	681b      	ldr	r3, [r3, #0]
 80235f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80235fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	681b      	ldr	r3, [r3, #0]
 8023602:	68da      	ldr	r2, [r3, #12]
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802360c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802360e:	2300      	movs	r3, #0
 8023610:	e000      	b.n	8023614 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8023612:	2302      	movs	r3, #2
  }
}
 8023614:	4618      	mov	r0, r3
 8023616:	3714      	adds	r7, #20
 8023618:	46bd      	mov	sp, r7
 802361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802361e:	4770      	bx	lr

08023620 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8023620:	b580      	push	{r7, lr}
 8023622:	b082      	sub	sp, #8
 8023624:	af00      	add	r7, sp, #0
 8023626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8023628:	687b      	ldr	r3, [r7, #4]
 802362a:	681b      	ldr	r3, [r3, #0]
 802362c:	68da      	ldr	r2, [r3, #12]
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	681b      	ldr	r3, [r3, #0]
 8023632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8023636:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	2220      	movs	r2, #32
 802363c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8023640:	6878      	ldr	r0, [r7, #4]
 8023642:	f7ff fe65 	bl	8023310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8023646:	2300      	movs	r3, #0
}
 8023648:	4618      	mov	r0, r3
 802364a:	3708      	adds	r7, #8
 802364c:	46bd      	mov	sp, r7
 802364e:	bd80      	pop	{r7, pc}

08023650 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8023650:	b580      	push	{r7, lr}
 8023652:	b084      	sub	sp, #16
 8023654:	af00      	add	r7, sp, #0
 8023656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8023658:	687b      	ldr	r3, [r7, #4]
 802365a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802365e:	b2db      	uxtb	r3, r3
 8023660:	2b22      	cmp	r3, #34	; 0x22
 8023662:	d171      	bne.n	8023748 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8023664:	687b      	ldr	r3, [r7, #4]
 8023666:	689b      	ldr	r3, [r3, #8]
 8023668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802366c:	d123      	bne.n	80236b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 802366e:	687b      	ldr	r3, [r7, #4]
 8023670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023672:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8023674:	687b      	ldr	r3, [r7, #4]
 8023676:	691b      	ldr	r3, [r3, #16]
 8023678:	2b00      	cmp	r3, #0
 802367a:	d10e      	bne.n	802369a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	681b      	ldr	r3, [r3, #0]
 8023680:	685b      	ldr	r3, [r3, #4]
 8023682:	b29b      	uxth	r3, r3
 8023684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023688:	b29a      	uxth	r2, r3
 802368a:	68fb      	ldr	r3, [r7, #12]
 802368c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 802368e:	687b      	ldr	r3, [r7, #4]
 8023690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023692:	1c9a      	adds	r2, r3, #2
 8023694:	687b      	ldr	r3, [r7, #4]
 8023696:	629a      	str	r2, [r3, #40]	; 0x28
 8023698:	e029      	b.n	80236ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	681b      	ldr	r3, [r3, #0]
 802369e:	685b      	ldr	r3, [r3, #4]
 80236a0:	b29b      	uxth	r3, r3
 80236a2:	b2db      	uxtb	r3, r3
 80236a4:	b29a      	uxth	r2, r3
 80236a6:	68fb      	ldr	r3, [r7, #12]
 80236a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236ae:	1c5a      	adds	r2, r3, #1
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	629a      	str	r2, [r3, #40]	; 0x28
 80236b4:	e01b      	b.n	80236ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	691b      	ldr	r3, [r3, #16]
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d10a      	bne.n	80236d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	681b      	ldr	r3, [r3, #0]
 80236c2:	6858      	ldr	r0, [r3, #4]
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236c8:	1c59      	adds	r1, r3, #1
 80236ca:	687a      	ldr	r2, [r7, #4]
 80236cc:	6291      	str	r1, [r2, #40]	; 0x28
 80236ce:	b2c2      	uxtb	r2, r0
 80236d0:	701a      	strb	r2, [r3, #0]
 80236d2:	e00c      	b.n	80236ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	685b      	ldr	r3, [r3, #4]
 80236da:	b2da      	uxtb	r2, r3
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236e0:	1c58      	adds	r0, r3, #1
 80236e2:	6879      	ldr	r1, [r7, #4]
 80236e4:	6288      	str	r0, [r1, #40]	; 0x28
 80236e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80236ea:	b2d2      	uxtb	r2, r2
 80236ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80236f2:	b29b      	uxth	r3, r3
 80236f4:	3b01      	subs	r3, #1
 80236f6:	b29b      	uxth	r3, r3
 80236f8:	687a      	ldr	r2, [r7, #4]
 80236fa:	4619      	mov	r1, r3
 80236fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d120      	bne.n	8023744 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8023702:	687b      	ldr	r3, [r7, #4]
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	68da      	ldr	r2, [r3, #12]
 8023708:	687b      	ldr	r3, [r7, #4]
 802370a:	681b      	ldr	r3, [r3, #0]
 802370c:	f022 0220 	bic.w	r2, r2, #32
 8023710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	681b      	ldr	r3, [r3, #0]
 8023716:	68da      	ldr	r2, [r3, #12]
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	681b      	ldr	r3, [r3, #0]
 8023726:	695a      	ldr	r2, [r3, #20]
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	681b      	ldr	r3, [r3, #0]
 802372c:	f022 0201 	bic.w	r2, r2, #1
 8023730:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8023732:	687b      	ldr	r3, [r7, #4]
 8023734:	2220      	movs	r2, #32
 8023736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802373a:	6878      	ldr	r0, [r7, #4]
 802373c:	f7f4 fd34 	bl	80181a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8023740:	2300      	movs	r3, #0
 8023742:	e002      	b.n	802374a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8023744:	2300      	movs	r3, #0
 8023746:	e000      	b.n	802374a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8023748:	2302      	movs	r3, #2
  }
}
 802374a:	4618      	mov	r0, r3
 802374c:	3710      	adds	r7, #16
 802374e:	46bd      	mov	sp, r7
 8023750:	bd80      	pop	{r7, pc}
	...

08023754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023758:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 802375c:	af00      	add	r7, sp, #0
 802375e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023762:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023766:	681b      	ldr	r3, [r3, #0]
 8023768:	691b      	ldr	r3, [r3, #16]
 802376a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802376e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023772:	68d9      	ldr	r1, [r3, #12]
 8023774:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023778:	681a      	ldr	r2, [r3, #0]
 802377a:	ea40 0301 	orr.w	r3, r0, r1
 802377e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8023780:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023784:	689a      	ldr	r2, [r3, #8]
 8023786:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802378a:	691b      	ldr	r3, [r3, #16]
 802378c:	431a      	orrs	r2, r3
 802378e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023792:	695b      	ldr	r3, [r3, #20]
 8023794:	431a      	orrs	r2, r3
 8023796:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802379a:	69db      	ldr	r3, [r3, #28]
 802379c:	4313      	orrs	r3, r2
 802379e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80237a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	68db      	ldr	r3, [r3, #12]
 80237aa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80237ae:	f021 010c 	bic.w	r1, r1, #12
 80237b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237b6:	681a      	ldr	r2, [r3, #0]
 80237b8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80237bc:	430b      	orrs	r3, r1
 80237be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80237c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237c4:	681b      	ldr	r3, [r3, #0]
 80237c6:	695b      	ldr	r3, [r3, #20]
 80237c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80237cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237d0:	6999      	ldr	r1, [r3, #24]
 80237d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237d6:	681a      	ldr	r2, [r3, #0]
 80237d8:	ea40 0301 	orr.w	r3, r0, r1
 80237dc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80237de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237e2:	69db      	ldr	r3, [r3, #28]
 80237e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80237e8:	f040 824a 	bne.w	8023c80 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80237ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237f0:	681a      	ldr	r2, [r3, #0]
 80237f2:	4b96      	ldr	r3, [pc, #600]	; (8023a4c <UART_SetConfig+0x2f8>)
 80237f4:	429a      	cmp	r2, r3
 80237f6:	d006      	beq.n	8023806 <UART_SetConfig+0xb2>
 80237f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80237fc:	681a      	ldr	r2, [r3, #0]
 80237fe:	4b94      	ldr	r3, [pc, #592]	; (8023a50 <UART_SetConfig+0x2fc>)
 8023800:	429a      	cmp	r2, r3
 8023802:	f040 8129 	bne.w	8023a58 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8023806:	f7fc fa27 	bl	801fc58 <HAL_RCC_GetPCLK2Freq>
 802380a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802380e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023812:	2200      	movs	r2, #0
 8023814:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8023818:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 802381c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8023820:	4622      	mov	r2, r4
 8023822:	462b      	mov	r3, r5
 8023824:	1891      	adds	r1, r2, r2
 8023826:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 802382a:	415b      	adcs	r3, r3
 802382c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8023830:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8023834:	4621      	mov	r1, r4
 8023836:	1851      	adds	r1, r2, r1
 8023838:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 802383c:	4629      	mov	r1, r5
 802383e:	414b      	adcs	r3, r1
 8023840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023844:	f04f 0200 	mov.w	r2, #0
 8023848:	f04f 0300 	mov.w	r3, #0
 802384c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8023850:	4649      	mov	r1, r9
 8023852:	00cb      	lsls	r3, r1, #3
 8023854:	4641      	mov	r1, r8
 8023856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802385a:	4641      	mov	r1, r8
 802385c:	00ca      	lsls	r2, r1, #3
 802385e:	4610      	mov	r0, r2
 8023860:	4619      	mov	r1, r3
 8023862:	4603      	mov	r3, r0
 8023864:	4622      	mov	r2, r4
 8023866:	189b      	adds	r3, r3, r2
 8023868:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 802386c:	462b      	mov	r3, r5
 802386e:	460a      	mov	r2, r1
 8023870:	eb42 0303 	adc.w	r3, r2, r3
 8023874:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8023878:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 802387c:	685b      	ldr	r3, [r3, #4]
 802387e:	2200      	movs	r2, #0
 8023880:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8023884:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8023888:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 802388c:	460b      	mov	r3, r1
 802388e:	18db      	adds	r3, r3, r3
 8023890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8023894:	4613      	mov	r3, r2
 8023896:	eb42 0303 	adc.w	r3, r2, r3
 802389a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802389e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80238a2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80238a6:	f7ed fd57 	bl	8011358 <__aeabi_uldivmod>
 80238aa:	4602      	mov	r2, r0
 80238ac:	460b      	mov	r3, r1
 80238ae:	4b69      	ldr	r3, [pc, #420]	; (8023a54 <UART_SetConfig+0x300>)
 80238b0:	fba3 2302 	umull	r2, r3, r3, r2
 80238b4:	095b      	lsrs	r3, r3, #5
 80238b6:	011c      	lsls	r4, r3, #4
 80238b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80238bc:	2200      	movs	r2, #0
 80238be:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80238c2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80238c6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 80238ca:	4642      	mov	r2, r8
 80238cc:	464b      	mov	r3, r9
 80238ce:	1891      	adds	r1, r2, r2
 80238d0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80238d4:	415b      	adcs	r3, r3
 80238d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80238da:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80238de:	4641      	mov	r1, r8
 80238e0:	1851      	adds	r1, r2, r1
 80238e2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80238e6:	4649      	mov	r1, r9
 80238e8:	414b      	adcs	r3, r1
 80238ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80238ee:	f04f 0200 	mov.w	r2, #0
 80238f2:	f04f 0300 	mov.w	r3, #0
 80238f6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80238fa:	4659      	mov	r1, fp
 80238fc:	00cb      	lsls	r3, r1, #3
 80238fe:	4651      	mov	r1, sl
 8023900:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023904:	4651      	mov	r1, sl
 8023906:	00ca      	lsls	r2, r1, #3
 8023908:	4610      	mov	r0, r2
 802390a:	4619      	mov	r1, r3
 802390c:	4603      	mov	r3, r0
 802390e:	4642      	mov	r2, r8
 8023910:	189b      	adds	r3, r3, r2
 8023912:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8023916:	464b      	mov	r3, r9
 8023918:	460a      	mov	r2, r1
 802391a:	eb42 0303 	adc.w	r3, r2, r3
 802391e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8023922:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023926:	685b      	ldr	r3, [r3, #4]
 8023928:	2200      	movs	r2, #0
 802392a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 802392e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8023932:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8023936:	460b      	mov	r3, r1
 8023938:	18db      	adds	r3, r3, r3
 802393a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802393e:	4613      	mov	r3, r2
 8023940:	eb42 0303 	adc.w	r3, r2, r3
 8023944:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023948:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 802394c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8023950:	f7ed fd02 	bl	8011358 <__aeabi_uldivmod>
 8023954:	4602      	mov	r2, r0
 8023956:	460b      	mov	r3, r1
 8023958:	4611      	mov	r1, r2
 802395a:	4b3e      	ldr	r3, [pc, #248]	; (8023a54 <UART_SetConfig+0x300>)
 802395c:	fba3 2301 	umull	r2, r3, r3, r1
 8023960:	095b      	lsrs	r3, r3, #5
 8023962:	2264      	movs	r2, #100	; 0x64
 8023964:	fb02 f303 	mul.w	r3, r2, r3
 8023968:	1acb      	subs	r3, r1, r3
 802396a:	00db      	lsls	r3, r3, #3
 802396c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023970:	4b38      	ldr	r3, [pc, #224]	; (8023a54 <UART_SetConfig+0x300>)
 8023972:	fba3 2302 	umull	r2, r3, r3, r2
 8023976:	095b      	lsrs	r3, r3, #5
 8023978:	005b      	lsls	r3, r3, #1
 802397a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802397e:	441c      	add	r4, r3
 8023980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023984:	2200      	movs	r2, #0
 8023986:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 802398a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 802398e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8023992:	4642      	mov	r2, r8
 8023994:	464b      	mov	r3, r9
 8023996:	1891      	adds	r1, r2, r2
 8023998:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 802399c:	415b      	adcs	r3, r3
 802399e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80239a2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80239a6:	4641      	mov	r1, r8
 80239a8:	1851      	adds	r1, r2, r1
 80239aa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80239ae:	4649      	mov	r1, r9
 80239b0:	414b      	adcs	r3, r1
 80239b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80239b6:	f04f 0200 	mov.w	r2, #0
 80239ba:	f04f 0300 	mov.w	r3, #0
 80239be:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 80239c2:	4659      	mov	r1, fp
 80239c4:	00cb      	lsls	r3, r1, #3
 80239c6:	4651      	mov	r1, sl
 80239c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80239cc:	4651      	mov	r1, sl
 80239ce:	00ca      	lsls	r2, r1, #3
 80239d0:	4610      	mov	r0, r2
 80239d2:	4619      	mov	r1, r3
 80239d4:	4603      	mov	r3, r0
 80239d6:	4642      	mov	r2, r8
 80239d8:	189b      	adds	r3, r3, r2
 80239da:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80239de:	464b      	mov	r3, r9
 80239e0:	460a      	mov	r2, r1
 80239e2:	eb42 0303 	adc.w	r3, r2, r3
 80239e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80239ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80239ee:	685b      	ldr	r3, [r3, #4]
 80239f0:	2200      	movs	r2, #0
 80239f2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80239f6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80239fa:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80239fe:	460b      	mov	r3, r1
 8023a00:	18db      	adds	r3, r3, r3
 8023a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8023a06:	4613      	mov	r3, r2
 8023a08:	eb42 0303 	adc.w	r3, r2, r3
 8023a0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8023a10:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8023a14:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8023a18:	f7ed fc9e 	bl	8011358 <__aeabi_uldivmod>
 8023a1c:	4602      	mov	r2, r0
 8023a1e:	460b      	mov	r3, r1
 8023a20:	4b0c      	ldr	r3, [pc, #48]	; (8023a54 <UART_SetConfig+0x300>)
 8023a22:	fba3 1302 	umull	r1, r3, r3, r2
 8023a26:	095b      	lsrs	r3, r3, #5
 8023a28:	2164      	movs	r1, #100	; 0x64
 8023a2a:	fb01 f303 	mul.w	r3, r1, r3
 8023a2e:	1ad3      	subs	r3, r2, r3
 8023a30:	00db      	lsls	r3, r3, #3
 8023a32:	3332      	adds	r3, #50	; 0x32
 8023a34:	4a07      	ldr	r2, [pc, #28]	; (8023a54 <UART_SetConfig+0x300>)
 8023a36:	fba2 2303 	umull	r2, r3, r2, r3
 8023a3a:	095b      	lsrs	r3, r3, #5
 8023a3c:	f003 0207 	and.w	r2, r3, #7
 8023a40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023a44:	681b      	ldr	r3, [r3, #0]
 8023a46:	4422      	add	r2, r4
 8023a48:	609a      	str	r2, [r3, #8]
 8023a4a:	e349      	b.n	80240e0 <UART_SetConfig+0x98c>
 8023a4c:	40011000 	.word	0x40011000
 8023a50:	40011400 	.word	0x40011400
 8023a54:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8023a58:	f7fc f8ea 	bl	801fc30 <HAL_RCC_GetPCLK1Freq>
 8023a5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8023a60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023a64:	2200      	movs	r2, #0
 8023a66:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8023a6a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8023a6e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8023a72:	4622      	mov	r2, r4
 8023a74:	462b      	mov	r3, r5
 8023a76:	1891      	adds	r1, r2, r2
 8023a78:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8023a7c:	415b      	adcs	r3, r3
 8023a7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8023a82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8023a86:	4621      	mov	r1, r4
 8023a88:	eb12 0a01 	adds.w	sl, r2, r1
 8023a8c:	4629      	mov	r1, r5
 8023a8e:	eb43 0b01 	adc.w	fp, r3, r1
 8023a92:	f04f 0200 	mov.w	r2, #0
 8023a96:	f04f 0300 	mov.w	r3, #0
 8023a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8023a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8023aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8023aa6:	4692      	mov	sl, r2
 8023aa8:	469b      	mov	fp, r3
 8023aaa:	4623      	mov	r3, r4
 8023aac:	eb1a 0303 	adds.w	r3, sl, r3
 8023ab0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8023ab4:	462b      	mov	r3, r5
 8023ab6:	eb4b 0303 	adc.w	r3, fp, r3
 8023aba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8023abe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023ac2:	685b      	ldr	r3, [r3, #4]
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8023aca:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8023ace:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8023ad2:	460b      	mov	r3, r1
 8023ad4:	18db      	adds	r3, r3, r3
 8023ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8023ada:	4613      	mov	r3, r2
 8023adc:	eb42 0303 	adc.w	r3, r2, r3
 8023ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023ae4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8023ae8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8023aec:	f7ed fc34 	bl	8011358 <__aeabi_uldivmod>
 8023af0:	4602      	mov	r2, r0
 8023af2:	460b      	mov	r3, r1
 8023af4:	4b61      	ldr	r3, [pc, #388]	; (8023c7c <UART_SetConfig+0x528>)
 8023af6:	fba3 2302 	umull	r2, r3, r3, r2
 8023afa:	095b      	lsrs	r3, r3, #5
 8023afc:	011c      	lsls	r4, r3, #4
 8023afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023b02:	2200      	movs	r2, #0
 8023b04:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8023b08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8023b0c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8023b10:	4642      	mov	r2, r8
 8023b12:	464b      	mov	r3, r9
 8023b14:	1891      	adds	r1, r2, r2
 8023b16:	67b9      	str	r1, [r7, #120]	; 0x78
 8023b18:	415b      	adcs	r3, r3
 8023b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8023b1c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8023b20:	4641      	mov	r1, r8
 8023b22:	1851      	adds	r1, r2, r1
 8023b24:	6739      	str	r1, [r7, #112]	; 0x70
 8023b26:	4649      	mov	r1, r9
 8023b28:	414b      	adcs	r3, r1
 8023b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8023b2c:	f04f 0200 	mov.w	r2, #0
 8023b30:	f04f 0300 	mov.w	r3, #0
 8023b34:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8023b38:	4659      	mov	r1, fp
 8023b3a:	00cb      	lsls	r3, r1, #3
 8023b3c:	4651      	mov	r1, sl
 8023b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023b42:	4651      	mov	r1, sl
 8023b44:	00ca      	lsls	r2, r1, #3
 8023b46:	4610      	mov	r0, r2
 8023b48:	4619      	mov	r1, r3
 8023b4a:	4603      	mov	r3, r0
 8023b4c:	4642      	mov	r2, r8
 8023b4e:	189b      	adds	r3, r3, r2
 8023b50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8023b54:	464b      	mov	r3, r9
 8023b56:	460a      	mov	r2, r1
 8023b58:	eb42 0303 	adc.w	r3, r2, r3
 8023b5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8023b60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023b64:	685b      	ldr	r3, [r3, #4]
 8023b66:	2200      	movs	r2, #0
 8023b68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8023b6c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8023b70:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8023b74:	460b      	mov	r3, r1
 8023b76:	18db      	adds	r3, r3, r3
 8023b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8023b7a:	4613      	mov	r3, r2
 8023b7c:	eb42 0303 	adc.w	r3, r2, r3
 8023b80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023b82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8023b86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8023b8a:	f7ed fbe5 	bl	8011358 <__aeabi_uldivmod>
 8023b8e:	4602      	mov	r2, r0
 8023b90:	460b      	mov	r3, r1
 8023b92:	4611      	mov	r1, r2
 8023b94:	4b39      	ldr	r3, [pc, #228]	; (8023c7c <UART_SetConfig+0x528>)
 8023b96:	fba3 2301 	umull	r2, r3, r3, r1
 8023b9a:	095b      	lsrs	r3, r3, #5
 8023b9c:	2264      	movs	r2, #100	; 0x64
 8023b9e:	fb02 f303 	mul.w	r3, r2, r3
 8023ba2:	1acb      	subs	r3, r1, r3
 8023ba4:	00db      	lsls	r3, r3, #3
 8023ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8023baa:	4b34      	ldr	r3, [pc, #208]	; (8023c7c <UART_SetConfig+0x528>)
 8023bac:	fba3 2302 	umull	r2, r3, r3, r2
 8023bb0:	095b      	lsrs	r3, r3, #5
 8023bb2:	005b      	lsls	r3, r3, #1
 8023bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8023bb8:	441c      	add	r4, r3
 8023bba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023bbe:	2200      	movs	r2, #0
 8023bc0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8023bc4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8023bc8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8023bcc:	4642      	mov	r2, r8
 8023bce:	464b      	mov	r3, r9
 8023bd0:	1891      	adds	r1, r2, r2
 8023bd2:	6639      	str	r1, [r7, #96]	; 0x60
 8023bd4:	415b      	adcs	r3, r3
 8023bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8023bd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8023bdc:	4641      	mov	r1, r8
 8023bde:	1851      	adds	r1, r2, r1
 8023be0:	65b9      	str	r1, [r7, #88]	; 0x58
 8023be2:	4649      	mov	r1, r9
 8023be4:	414b      	adcs	r3, r1
 8023be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8023be8:	f04f 0200 	mov.w	r2, #0
 8023bec:	f04f 0300 	mov.w	r3, #0
 8023bf0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8023bf4:	4659      	mov	r1, fp
 8023bf6:	00cb      	lsls	r3, r1, #3
 8023bf8:	4651      	mov	r1, sl
 8023bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023bfe:	4651      	mov	r1, sl
 8023c00:	00ca      	lsls	r2, r1, #3
 8023c02:	4610      	mov	r0, r2
 8023c04:	4619      	mov	r1, r3
 8023c06:	4603      	mov	r3, r0
 8023c08:	4642      	mov	r2, r8
 8023c0a:	189b      	adds	r3, r3, r2
 8023c0c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8023c10:	464b      	mov	r3, r9
 8023c12:	460a      	mov	r2, r1
 8023c14:	eb42 0303 	adc.w	r3, r2, r3
 8023c18:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8023c1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023c20:	685b      	ldr	r3, [r3, #4]
 8023c22:	2200      	movs	r2, #0
 8023c24:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8023c28:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8023c2c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8023c30:	460b      	mov	r3, r1
 8023c32:	18db      	adds	r3, r3, r3
 8023c34:	653b      	str	r3, [r7, #80]	; 0x50
 8023c36:	4613      	mov	r3, r2
 8023c38:	eb42 0303 	adc.w	r3, r2, r3
 8023c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8023c3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8023c42:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8023c46:	f7ed fb87 	bl	8011358 <__aeabi_uldivmod>
 8023c4a:	4602      	mov	r2, r0
 8023c4c:	460b      	mov	r3, r1
 8023c4e:	4b0b      	ldr	r3, [pc, #44]	; (8023c7c <UART_SetConfig+0x528>)
 8023c50:	fba3 1302 	umull	r1, r3, r3, r2
 8023c54:	095b      	lsrs	r3, r3, #5
 8023c56:	2164      	movs	r1, #100	; 0x64
 8023c58:	fb01 f303 	mul.w	r3, r1, r3
 8023c5c:	1ad3      	subs	r3, r2, r3
 8023c5e:	00db      	lsls	r3, r3, #3
 8023c60:	3332      	adds	r3, #50	; 0x32
 8023c62:	4a06      	ldr	r2, [pc, #24]	; (8023c7c <UART_SetConfig+0x528>)
 8023c64:	fba2 2303 	umull	r2, r3, r2, r3
 8023c68:	095b      	lsrs	r3, r3, #5
 8023c6a:	f003 0207 	and.w	r2, r3, #7
 8023c6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	4422      	add	r2, r4
 8023c76:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8023c78:	e232      	b.n	80240e0 <UART_SetConfig+0x98c>
 8023c7a:	bf00      	nop
 8023c7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8023c80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023c84:	681a      	ldr	r2, [r3, #0]
 8023c86:	4b8d      	ldr	r3, [pc, #564]	; (8023ebc <UART_SetConfig+0x768>)
 8023c88:	429a      	cmp	r2, r3
 8023c8a:	d006      	beq.n	8023c9a <UART_SetConfig+0x546>
 8023c8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023c90:	681a      	ldr	r2, [r3, #0]
 8023c92:	4b8b      	ldr	r3, [pc, #556]	; (8023ec0 <UART_SetConfig+0x76c>)
 8023c94:	429a      	cmp	r2, r3
 8023c96:	f040 8117 	bne.w	8023ec8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8023c9a:	f7fb ffdd 	bl	801fc58 <HAL_RCC_GetPCLK2Freq>
 8023c9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023ca6:	2200      	movs	r2, #0
 8023ca8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8023cac:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8023cb0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8023cb4:	4622      	mov	r2, r4
 8023cb6:	462b      	mov	r3, r5
 8023cb8:	1891      	adds	r1, r2, r2
 8023cba:	64b9      	str	r1, [r7, #72]	; 0x48
 8023cbc:	415b      	adcs	r3, r3
 8023cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023cc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8023cc4:	4621      	mov	r1, r4
 8023cc6:	eb12 0801 	adds.w	r8, r2, r1
 8023cca:	4629      	mov	r1, r5
 8023ccc:	eb43 0901 	adc.w	r9, r3, r1
 8023cd0:	f04f 0200 	mov.w	r2, #0
 8023cd4:	f04f 0300 	mov.w	r3, #0
 8023cd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8023cdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8023ce0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8023ce4:	4690      	mov	r8, r2
 8023ce6:	4699      	mov	r9, r3
 8023ce8:	4623      	mov	r3, r4
 8023cea:	eb18 0303 	adds.w	r3, r8, r3
 8023cee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8023cf2:	462b      	mov	r3, r5
 8023cf4:	eb49 0303 	adc.w	r3, r9, r3
 8023cf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8023cfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023d00:	685b      	ldr	r3, [r3, #4]
 8023d02:	2200      	movs	r2, #0
 8023d04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8023d08:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8023d0c:	f04f 0200 	mov.w	r2, #0
 8023d10:	f04f 0300 	mov.w	r3, #0
 8023d14:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8023d18:	4629      	mov	r1, r5
 8023d1a:	008b      	lsls	r3, r1, #2
 8023d1c:	4621      	mov	r1, r4
 8023d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023d22:	4621      	mov	r1, r4
 8023d24:	008a      	lsls	r2, r1, #2
 8023d26:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8023d2a:	f7ed fb15 	bl	8011358 <__aeabi_uldivmod>
 8023d2e:	4602      	mov	r2, r0
 8023d30:	460b      	mov	r3, r1
 8023d32:	4b64      	ldr	r3, [pc, #400]	; (8023ec4 <UART_SetConfig+0x770>)
 8023d34:	fba3 2302 	umull	r2, r3, r3, r2
 8023d38:	095b      	lsrs	r3, r3, #5
 8023d3a:	011c      	lsls	r4, r3, #4
 8023d3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023d40:	2200      	movs	r2, #0
 8023d42:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8023d46:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8023d4a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8023d4e:	4642      	mov	r2, r8
 8023d50:	464b      	mov	r3, r9
 8023d52:	1891      	adds	r1, r2, r2
 8023d54:	6439      	str	r1, [r7, #64]	; 0x40
 8023d56:	415b      	adcs	r3, r3
 8023d58:	647b      	str	r3, [r7, #68]	; 0x44
 8023d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8023d5e:	4641      	mov	r1, r8
 8023d60:	1851      	adds	r1, r2, r1
 8023d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8023d64:	4649      	mov	r1, r9
 8023d66:	414b      	adcs	r3, r1
 8023d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023d6a:	f04f 0200 	mov.w	r2, #0
 8023d6e:	f04f 0300 	mov.w	r3, #0
 8023d72:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8023d76:	4659      	mov	r1, fp
 8023d78:	00cb      	lsls	r3, r1, #3
 8023d7a:	4651      	mov	r1, sl
 8023d7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023d80:	4651      	mov	r1, sl
 8023d82:	00ca      	lsls	r2, r1, #3
 8023d84:	4610      	mov	r0, r2
 8023d86:	4619      	mov	r1, r3
 8023d88:	4603      	mov	r3, r0
 8023d8a:	4642      	mov	r2, r8
 8023d8c:	189b      	adds	r3, r3, r2
 8023d8e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8023d92:	464b      	mov	r3, r9
 8023d94:	460a      	mov	r2, r1
 8023d96:	eb42 0303 	adc.w	r3, r2, r3
 8023d9a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8023d9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023da2:	685b      	ldr	r3, [r3, #4]
 8023da4:	2200      	movs	r2, #0
 8023da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8023daa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8023dae:	f04f 0200 	mov.w	r2, #0
 8023db2:	f04f 0300 	mov.w	r3, #0
 8023db6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8023dba:	4649      	mov	r1, r9
 8023dbc:	008b      	lsls	r3, r1, #2
 8023dbe:	4641      	mov	r1, r8
 8023dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023dc4:	4641      	mov	r1, r8
 8023dc6:	008a      	lsls	r2, r1, #2
 8023dc8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8023dcc:	f7ed fac4 	bl	8011358 <__aeabi_uldivmod>
 8023dd0:	4602      	mov	r2, r0
 8023dd2:	460b      	mov	r3, r1
 8023dd4:	4b3b      	ldr	r3, [pc, #236]	; (8023ec4 <UART_SetConfig+0x770>)
 8023dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8023dda:	095b      	lsrs	r3, r3, #5
 8023ddc:	2164      	movs	r1, #100	; 0x64
 8023dde:	fb01 f303 	mul.w	r3, r1, r3
 8023de2:	1ad3      	subs	r3, r2, r3
 8023de4:	011b      	lsls	r3, r3, #4
 8023de6:	3332      	adds	r3, #50	; 0x32
 8023de8:	4a36      	ldr	r2, [pc, #216]	; (8023ec4 <UART_SetConfig+0x770>)
 8023dea:	fba2 2303 	umull	r2, r3, r2, r3
 8023dee:	095b      	lsrs	r3, r3, #5
 8023df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023df4:	441c      	add	r4, r3
 8023df6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023dfa:	2200      	movs	r2, #0
 8023dfc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8023e00:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8023e04:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8023e08:	4642      	mov	r2, r8
 8023e0a:	464b      	mov	r3, r9
 8023e0c:	1891      	adds	r1, r2, r2
 8023e0e:	6339      	str	r1, [r7, #48]	; 0x30
 8023e10:	415b      	adcs	r3, r3
 8023e12:	637b      	str	r3, [r7, #52]	; 0x34
 8023e14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8023e18:	4641      	mov	r1, r8
 8023e1a:	1851      	adds	r1, r2, r1
 8023e1c:	62b9      	str	r1, [r7, #40]	; 0x28
 8023e1e:	4649      	mov	r1, r9
 8023e20:	414b      	adcs	r3, r1
 8023e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023e24:	f04f 0200 	mov.w	r2, #0
 8023e28:	f04f 0300 	mov.w	r3, #0
 8023e2c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8023e30:	4659      	mov	r1, fp
 8023e32:	00cb      	lsls	r3, r1, #3
 8023e34:	4651      	mov	r1, sl
 8023e36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023e3a:	4651      	mov	r1, sl
 8023e3c:	00ca      	lsls	r2, r1, #3
 8023e3e:	4610      	mov	r0, r2
 8023e40:	4619      	mov	r1, r3
 8023e42:	4603      	mov	r3, r0
 8023e44:	4642      	mov	r2, r8
 8023e46:	189b      	adds	r3, r3, r2
 8023e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8023e4c:	464b      	mov	r3, r9
 8023e4e:	460a      	mov	r2, r1
 8023e50:	eb42 0303 	adc.w	r3, r2, r3
 8023e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8023e58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023e5c:	685b      	ldr	r3, [r3, #4]
 8023e5e:	2200      	movs	r2, #0
 8023e60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8023e64:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8023e68:	f04f 0200 	mov.w	r2, #0
 8023e6c:	f04f 0300 	mov.w	r3, #0
 8023e70:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8023e74:	4649      	mov	r1, r9
 8023e76:	008b      	lsls	r3, r1, #2
 8023e78:	4641      	mov	r1, r8
 8023e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023e7e:	4641      	mov	r1, r8
 8023e80:	008a      	lsls	r2, r1, #2
 8023e82:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8023e86:	f7ed fa67 	bl	8011358 <__aeabi_uldivmod>
 8023e8a:	4602      	mov	r2, r0
 8023e8c:	460b      	mov	r3, r1
 8023e8e:	4b0d      	ldr	r3, [pc, #52]	; (8023ec4 <UART_SetConfig+0x770>)
 8023e90:	fba3 1302 	umull	r1, r3, r3, r2
 8023e94:	095b      	lsrs	r3, r3, #5
 8023e96:	2164      	movs	r1, #100	; 0x64
 8023e98:	fb01 f303 	mul.w	r3, r1, r3
 8023e9c:	1ad3      	subs	r3, r2, r3
 8023e9e:	011b      	lsls	r3, r3, #4
 8023ea0:	3332      	adds	r3, #50	; 0x32
 8023ea2:	4a08      	ldr	r2, [pc, #32]	; (8023ec4 <UART_SetConfig+0x770>)
 8023ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8023ea8:	095b      	lsrs	r3, r3, #5
 8023eaa:	f003 020f 	and.w	r2, r3, #15
 8023eae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	4422      	add	r2, r4
 8023eb6:	609a      	str	r2, [r3, #8]
 8023eb8:	e112      	b.n	80240e0 <UART_SetConfig+0x98c>
 8023eba:	bf00      	nop
 8023ebc:	40011000 	.word	0x40011000
 8023ec0:	40011400 	.word	0x40011400
 8023ec4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8023ec8:	f7fb feb2 	bl	801fc30 <HAL_RCC_GetPCLK1Freq>
 8023ecc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8023ed0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023ed4:	2200      	movs	r2, #0
 8023ed6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8023eda:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8023ede:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8023ee2:	4642      	mov	r2, r8
 8023ee4:	464b      	mov	r3, r9
 8023ee6:	1891      	adds	r1, r2, r2
 8023ee8:	6239      	str	r1, [r7, #32]
 8023eea:	415b      	adcs	r3, r3
 8023eec:	627b      	str	r3, [r7, #36]	; 0x24
 8023eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8023ef2:	4641      	mov	r1, r8
 8023ef4:	1854      	adds	r4, r2, r1
 8023ef6:	4649      	mov	r1, r9
 8023ef8:	eb43 0501 	adc.w	r5, r3, r1
 8023efc:	f04f 0200 	mov.w	r2, #0
 8023f00:	f04f 0300 	mov.w	r3, #0
 8023f04:	00eb      	lsls	r3, r5, #3
 8023f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8023f0a:	00e2      	lsls	r2, r4, #3
 8023f0c:	4614      	mov	r4, r2
 8023f0e:	461d      	mov	r5, r3
 8023f10:	4643      	mov	r3, r8
 8023f12:	18e3      	adds	r3, r4, r3
 8023f14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8023f18:	464b      	mov	r3, r9
 8023f1a:	eb45 0303 	adc.w	r3, r5, r3
 8023f1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8023f22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023f26:	685b      	ldr	r3, [r3, #4]
 8023f28:	2200      	movs	r2, #0
 8023f2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8023f2e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8023f32:	f04f 0200 	mov.w	r2, #0
 8023f36:	f04f 0300 	mov.w	r3, #0
 8023f3a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8023f3e:	4629      	mov	r1, r5
 8023f40:	008b      	lsls	r3, r1, #2
 8023f42:	4621      	mov	r1, r4
 8023f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023f48:	4621      	mov	r1, r4
 8023f4a:	008a      	lsls	r2, r1, #2
 8023f4c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8023f50:	f7ed fa02 	bl	8011358 <__aeabi_uldivmod>
 8023f54:	4602      	mov	r2, r0
 8023f56:	460b      	mov	r3, r1
 8023f58:	4b64      	ldr	r3, [pc, #400]	; (80240ec <UART_SetConfig+0x998>)
 8023f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8023f5e:	095b      	lsrs	r3, r3, #5
 8023f60:	011c      	lsls	r4, r3, #4
 8023f62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8023f66:	2200      	movs	r2, #0
 8023f68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8023f6c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8023f70:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8023f74:	4642      	mov	r2, r8
 8023f76:	464b      	mov	r3, r9
 8023f78:	1891      	adds	r1, r2, r2
 8023f7a:	61b9      	str	r1, [r7, #24]
 8023f7c:	415b      	adcs	r3, r3
 8023f7e:	61fb      	str	r3, [r7, #28]
 8023f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8023f84:	4641      	mov	r1, r8
 8023f86:	1851      	adds	r1, r2, r1
 8023f88:	6139      	str	r1, [r7, #16]
 8023f8a:	4649      	mov	r1, r9
 8023f8c:	414b      	adcs	r3, r1
 8023f8e:	617b      	str	r3, [r7, #20]
 8023f90:	f04f 0200 	mov.w	r2, #0
 8023f94:	f04f 0300 	mov.w	r3, #0
 8023f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8023f9c:	4659      	mov	r1, fp
 8023f9e:	00cb      	lsls	r3, r1, #3
 8023fa0:	4651      	mov	r1, sl
 8023fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8023fa6:	4651      	mov	r1, sl
 8023fa8:	00ca      	lsls	r2, r1, #3
 8023faa:	4610      	mov	r0, r2
 8023fac:	4619      	mov	r1, r3
 8023fae:	4603      	mov	r3, r0
 8023fb0:	4642      	mov	r2, r8
 8023fb2:	189b      	adds	r3, r3, r2
 8023fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8023fb8:	464b      	mov	r3, r9
 8023fba:	460a      	mov	r2, r1
 8023fbc:	eb42 0303 	adc.w	r3, r2, r3
 8023fc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8023fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8023fc8:	685b      	ldr	r3, [r3, #4]
 8023fca:	2200      	movs	r2, #0
 8023fcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8023fd0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8023fd4:	f04f 0200 	mov.w	r2, #0
 8023fd8:	f04f 0300 	mov.w	r3, #0
 8023fdc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8023fe0:	4649      	mov	r1, r9
 8023fe2:	008b      	lsls	r3, r1, #2
 8023fe4:	4641      	mov	r1, r8
 8023fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8023fea:	4641      	mov	r1, r8
 8023fec:	008a      	lsls	r2, r1, #2
 8023fee:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8023ff2:	f7ed f9b1 	bl	8011358 <__aeabi_uldivmod>
 8023ff6:	4602      	mov	r2, r0
 8023ff8:	460b      	mov	r3, r1
 8023ffa:	4b3c      	ldr	r3, [pc, #240]	; (80240ec <UART_SetConfig+0x998>)
 8023ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8024000:	095b      	lsrs	r3, r3, #5
 8024002:	2164      	movs	r1, #100	; 0x64
 8024004:	fb01 f303 	mul.w	r3, r1, r3
 8024008:	1ad3      	subs	r3, r2, r3
 802400a:	011b      	lsls	r3, r3, #4
 802400c:	3332      	adds	r3, #50	; 0x32
 802400e:	4a37      	ldr	r2, [pc, #220]	; (80240ec <UART_SetConfig+0x998>)
 8024010:	fba2 2303 	umull	r2, r3, r2, r3
 8024014:	095b      	lsrs	r3, r3, #5
 8024016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802401a:	441c      	add	r4, r3
 802401c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8024020:	2200      	movs	r2, #0
 8024022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8024026:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802402a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 802402e:	4642      	mov	r2, r8
 8024030:	464b      	mov	r3, r9
 8024032:	1891      	adds	r1, r2, r2
 8024034:	60b9      	str	r1, [r7, #8]
 8024036:	415b      	adcs	r3, r3
 8024038:	60fb      	str	r3, [r7, #12]
 802403a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802403e:	4641      	mov	r1, r8
 8024040:	1851      	adds	r1, r2, r1
 8024042:	6039      	str	r1, [r7, #0]
 8024044:	4649      	mov	r1, r9
 8024046:	414b      	adcs	r3, r1
 8024048:	607b      	str	r3, [r7, #4]
 802404a:	f04f 0200 	mov.w	r2, #0
 802404e:	f04f 0300 	mov.w	r3, #0
 8024052:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8024056:	4659      	mov	r1, fp
 8024058:	00cb      	lsls	r3, r1, #3
 802405a:	4651      	mov	r1, sl
 802405c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024060:	4651      	mov	r1, sl
 8024062:	00ca      	lsls	r2, r1, #3
 8024064:	4610      	mov	r0, r2
 8024066:	4619      	mov	r1, r3
 8024068:	4603      	mov	r3, r0
 802406a:	4642      	mov	r2, r8
 802406c:	189b      	adds	r3, r3, r2
 802406e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024072:	464b      	mov	r3, r9
 8024074:	460a      	mov	r2, r1
 8024076:	eb42 0303 	adc.w	r3, r2, r3
 802407a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802407e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8024082:	685b      	ldr	r3, [r3, #4]
 8024084:	2200      	movs	r2, #0
 8024086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802408a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802408e:	f04f 0200 	mov.w	r2, #0
 8024092:	f04f 0300 	mov.w	r3, #0
 8024096:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 802409a:	4649      	mov	r1, r9
 802409c:	008b      	lsls	r3, r1, #2
 802409e:	4641      	mov	r1, r8
 80240a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80240a4:	4641      	mov	r1, r8
 80240a6:	008a      	lsls	r2, r1, #2
 80240a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80240ac:	f7ed f954 	bl	8011358 <__aeabi_uldivmod>
 80240b0:	4602      	mov	r2, r0
 80240b2:	460b      	mov	r3, r1
 80240b4:	4b0d      	ldr	r3, [pc, #52]	; (80240ec <UART_SetConfig+0x998>)
 80240b6:	fba3 1302 	umull	r1, r3, r3, r2
 80240ba:	095b      	lsrs	r3, r3, #5
 80240bc:	2164      	movs	r1, #100	; 0x64
 80240be:	fb01 f303 	mul.w	r3, r1, r3
 80240c2:	1ad3      	subs	r3, r2, r3
 80240c4:	011b      	lsls	r3, r3, #4
 80240c6:	3332      	adds	r3, #50	; 0x32
 80240c8:	4a08      	ldr	r2, [pc, #32]	; (80240ec <UART_SetConfig+0x998>)
 80240ca:	fba2 2303 	umull	r2, r3, r2, r3
 80240ce:	095b      	lsrs	r3, r3, #5
 80240d0:	f003 020f 	and.w	r2, r3, #15
 80240d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80240d8:	681b      	ldr	r3, [r3, #0]
 80240da:	4422      	add	r2, r4
 80240dc:	609a      	str	r2, [r3, #8]
}
 80240de:	e7ff      	b.n	80240e0 <UART_SetConfig+0x98c>
 80240e0:	bf00      	nop
 80240e2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80240e6:	46bd      	mov	sp, r7
 80240e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80240ec:	51eb851f 	.word	0x51eb851f

080240f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80240f0:	b084      	sub	sp, #16
 80240f2:	b480      	push	{r7}
 80240f4:	b085      	sub	sp, #20
 80240f6:	af00      	add	r7, sp, #0
 80240f8:	6078      	str	r0, [r7, #4]
 80240fa:	f107 001c 	add.w	r0, r7, #28
 80240fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8024102:	2300      	movs	r3, #0
 8024104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8024106:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8024108:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 802410a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 802410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 802410e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8024110:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8024112:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8024114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8024116:	431a      	orrs	r2, r3
             Init.ClockDiv
 8024118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 802411a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 802411c:	68fa      	ldr	r2, [r7, #12]
 802411e:	4313      	orrs	r3, r2
 8024120:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	685b      	ldr	r3, [r3, #4]
 8024126:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 802412a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802412e:	68fa      	ldr	r2, [r7, #12]
 8024130:	431a      	orrs	r2, r3
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8024136:	2300      	movs	r3, #0
}
 8024138:	4618      	mov	r0, r3
 802413a:	3714      	adds	r7, #20
 802413c:	46bd      	mov	sp, r7
 802413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024142:	b004      	add	sp, #16
 8024144:	4770      	bx	lr

08024146 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8024146:	b480      	push	{r7}
 8024148:	b083      	sub	sp, #12
 802414a:	af00      	add	r7, sp, #0
 802414c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8024154:	4618      	mov	r0, r3
 8024156:	370c      	adds	r7, #12
 8024158:	46bd      	mov	sp, r7
 802415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802415e:	4770      	bx	lr

08024160 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8024160:	b480      	push	{r7}
 8024162:	b083      	sub	sp, #12
 8024164:	af00      	add	r7, sp, #0
 8024166:	6078      	str	r0, [r7, #4]
 8024168:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 802416a:	683b      	ldr	r3, [r7, #0]
 802416c:	681a      	ldr	r2, [r3, #0]
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8024174:	2300      	movs	r3, #0
}
 8024176:	4618      	mov	r0, r3
 8024178:	370c      	adds	r7, #12
 802417a:	46bd      	mov	sp, r7
 802417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024180:	4770      	bx	lr

08024182 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8024182:	b580      	push	{r7, lr}
 8024184:	b082      	sub	sp, #8
 8024186:	af00      	add	r7, sp, #0
 8024188:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 802418a:	687b      	ldr	r3, [r7, #4]
 802418c:	2203      	movs	r2, #3
 802418e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8024190:	2002      	movs	r0, #2
 8024192:	f7f9 f8ed 	bl	801d370 <HAL_Delay>
  
  return HAL_OK;
 8024196:	2300      	movs	r3, #0
}
 8024198:	4618      	mov	r0, r3
 802419a:	3708      	adds	r7, #8
 802419c:	46bd      	mov	sp, r7
 802419e:	bd80      	pop	{r7, pc}

080241a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80241a0:	b480      	push	{r7}
 80241a2:	b083      	sub	sp, #12
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	f003 0303 	and.w	r3, r3, #3
}
 80241b0:	4618      	mov	r0, r3
 80241b2:	370c      	adds	r7, #12
 80241b4:	46bd      	mov	sp, r7
 80241b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ba:	4770      	bx	lr

080241bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80241bc:	b480      	push	{r7}
 80241be:	b085      	sub	sp, #20
 80241c0:	af00      	add	r7, sp, #0
 80241c2:	6078      	str	r0, [r7, #4]
 80241c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80241c6:	2300      	movs	r3, #0
 80241c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80241ca:	683b      	ldr	r3, [r7, #0]
 80241cc:	681a      	ldr	r2, [r3, #0]
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80241d2:	683b      	ldr	r3, [r7, #0]
 80241d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80241d6:	683b      	ldr	r3, [r7, #0]
 80241d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80241da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80241dc:	683b      	ldr	r3, [r7, #0]
 80241de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80241e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80241e2:	683b      	ldr	r3, [r7, #0]
 80241e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80241e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80241e8:	68fa      	ldr	r2, [r7, #12]
 80241ea:	4313      	orrs	r3, r2
 80241ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	68db      	ldr	r3, [r3, #12]
 80241f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80241f6:	f023 030f 	bic.w	r3, r3, #15
 80241fa:	68fa      	ldr	r2, [r7, #12]
 80241fc:	431a      	orrs	r2, r3
 80241fe:	687b      	ldr	r3, [r7, #4]
 8024200:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8024202:	2300      	movs	r3, #0
}
 8024204:	4618      	mov	r0, r3
 8024206:	3714      	adds	r7, #20
 8024208:	46bd      	mov	sp, r7
 802420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802420e:	4770      	bx	lr

08024210 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8024210:	b480      	push	{r7}
 8024212:	b083      	sub	sp, #12
 8024214:	af00      	add	r7, sp, #0
 8024216:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	691b      	ldr	r3, [r3, #16]
 802421c:	b2db      	uxtb	r3, r3
}
 802421e:	4618      	mov	r0, r3
 8024220:	370c      	adds	r7, #12
 8024222:	46bd      	mov	sp, r7
 8024224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024228:	4770      	bx	lr

0802422a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 802422a:	b480      	push	{r7}
 802422c:	b085      	sub	sp, #20
 802422e:	af00      	add	r7, sp, #0
 8024230:	6078      	str	r0, [r7, #4]
 8024232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	3314      	adds	r3, #20
 8024238:	461a      	mov	r2, r3
 802423a:	683b      	ldr	r3, [r7, #0]
 802423c:	4413      	add	r3, r2
 802423e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8024240:	68fb      	ldr	r3, [r7, #12]
 8024242:	681b      	ldr	r3, [r3, #0]
}  
 8024244:	4618      	mov	r0, r3
 8024246:	3714      	adds	r7, #20
 8024248:	46bd      	mov	sp, r7
 802424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802424e:	4770      	bx	lr

08024250 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8024250:	b480      	push	{r7}
 8024252:	b085      	sub	sp, #20
 8024254:	af00      	add	r7, sp, #0
 8024256:	6078      	str	r0, [r7, #4]
 8024258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 802425a:	2300      	movs	r3, #0
 802425c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 802425e:	683b      	ldr	r3, [r7, #0]
 8024260:	681a      	ldr	r2, [r3, #0]
 8024262:	687b      	ldr	r3, [r7, #4]
 8024264:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8024266:	683b      	ldr	r3, [r7, #0]
 8024268:	685a      	ldr	r2, [r3, #4]
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 802426e:	683b      	ldr	r3, [r7, #0]
 8024270:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8024272:	683b      	ldr	r3, [r7, #0]
 8024274:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8024276:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8024278:	683b      	ldr	r3, [r7, #0]
 802427a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 802427c:	431a      	orrs	r2, r3
                       Data->DPSM);
 802427e:	683b      	ldr	r3, [r7, #0]
 8024280:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8024282:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8024284:	68fa      	ldr	r2, [r7, #12]
 8024286:	4313      	orrs	r3, r2
 8024288:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802428e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8024292:	68fb      	ldr	r3, [r7, #12]
 8024294:	431a      	orrs	r2, r3
 8024296:	687b      	ldr	r3, [r7, #4]
 8024298:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 802429a:	2300      	movs	r3, #0

}
 802429c:	4618      	mov	r0, r3
 802429e:	3714      	adds	r7, #20
 80242a0:	46bd      	mov	sp, r7
 80242a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242a6:	4770      	bx	lr

080242a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80242a8:	b580      	push	{r7, lr}
 80242aa:	b088      	sub	sp, #32
 80242ac:	af00      	add	r7, sp, #0
 80242ae:	6078      	str	r0, [r7, #4]
 80242b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80242b2:	683b      	ldr	r3, [r7, #0]
 80242b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80242b6:	2310      	movs	r3, #16
 80242b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80242ba:	2340      	movs	r3, #64	; 0x40
 80242bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80242be:	2300      	movs	r3, #0
 80242c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80242c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80242c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80242c8:	f107 0308 	add.w	r3, r7, #8
 80242cc:	4619      	mov	r1, r3
 80242ce:	6878      	ldr	r0, [r7, #4]
 80242d0:	f7ff ff74 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80242d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80242d8:	2110      	movs	r1, #16
 80242da:	6878      	ldr	r0, [r7, #4]
 80242dc:	f000 fa40 	bl	8024760 <SDMMC_GetCmdResp1>
 80242e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80242e2:	69fb      	ldr	r3, [r7, #28]
}
 80242e4:	4618      	mov	r0, r3
 80242e6:	3720      	adds	r7, #32
 80242e8:	46bd      	mov	sp, r7
 80242ea:	bd80      	pop	{r7, pc}

080242ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80242ec:	b580      	push	{r7, lr}
 80242ee:	b088      	sub	sp, #32
 80242f0:	af00      	add	r7, sp, #0
 80242f2:	6078      	str	r0, [r7, #4]
 80242f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80242f6:	683b      	ldr	r3, [r7, #0]
 80242f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80242fa:	2311      	movs	r3, #17
 80242fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80242fe:	2340      	movs	r3, #64	; 0x40
 8024300:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024302:	2300      	movs	r3, #0
 8024304:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802430a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802430c:	f107 0308 	add.w	r3, r7, #8
 8024310:	4619      	mov	r1, r3
 8024312:	6878      	ldr	r0, [r7, #4]
 8024314:	f7ff ff52 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8024318:	f241 3288 	movw	r2, #5000	; 0x1388
 802431c:	2111      	movs	r1, #17
 802431e:	6878      	ldr	r0, [r7, #4]
 8024320:	f000 fa1e 	bl	8024760 <SDMMC_GetCmdResp1>
 8024324:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024326:	69fb      	ldr	r3, [r7, #28]
}
 8024328:	4618      	mov	r0, r3
 802432a:	3720      	adds	r7, #32
 802432c:	46bd      	mov	sp, r7
 802432e:	bd80      	pop	{r7, pc}

08024330 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8024330:	b580      	push	{r7, lr}
 8024332:	b088      	sub	sp, #32
 8024334:	af00      	add	r7, sp, #0
 8024336:	6078      	str	r0, [r7, #4]
 8024338:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 802433a:	683b      	ldr	r3, [r7, #0]
 802433c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 802433e:	2312      	movs	r3, #18
 8024340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024342:	2340      	movs	r3, #64	; 0x40
 8024344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024346:	2300      	movs	r3, #0
 8024348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802434e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024350:	f107 0308 	add.w	r3, r7, #8
 8024354:	4619      	mov	r1, r3
 8024356:	6878      	ldr	r0, [r7, #4]
 8024358:	f7ff ff30 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 802435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024360:	2112      	movs	r1, #18
 8024362:	6878      	ldr	r0, [r7, #4]
 8024364:	f000 f9fc 	bl	8024760 <SDMMC_GetCmdResp1>
 8024368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802436a:	69fb      	ldr	r3, [r7, #28]
}
 802436c:	4618      	mov	r0, r3
 802436e:	3720      	adds	r7, #32
 8024370:	46bd      	mov	sp, r7
 8024372:	bd80      	pop	{r7, pc}

08024374 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8024374:	b580      	push	{r7, lr}
 8024376:	b088      	sub	sp, #32
 8024378:	af00      	add	r7, sp, #0
 802437a:	6078      	str	r0, [r7, #4]
 802437c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 802437e:	683b      	ldr	r3, [r7, #0]
 8024380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8024382:	2318      	movs	r3, #24
 8024384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024386:	2340      	movs	r3, #64	; 0x40
 8024388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802438a:	2300      	movs	r3, #0
 802438c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802438e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024394:	f107 0308 	add.w	r3, r7, #8
 8024398:	4619      	mov	r1, r3
 802439a:	6878      	ldr	r0, [r7, #4]
 802439c:	f7ff ff0e 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80243a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80243a4:	2118      	movs	r1, #24
 80243a6:	6878      	ldr	r0, [r7, #4]
 80243a8:	f000 f9da 	bl	8024760 <SDMMC_GetCmdResp1>
 80243ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80243ae:	69fb      	ldr	r3, [r7, #28]
}
 80243b0:	4618      	mov	r0, r3
 80243b2:	3720      	adds	r7, #32
 80243b4:	46bd      	mov	sp, r7
 80243b6:	bd80      	pop	{r7, pc}

080243b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80243b8:	b580      	push	{r7, lr}
 80243ba:	b088      	sub	sp, #32
 80243bc:	af00      	add	r7, sp, #0
 80243be:	6078      	str	r0, [r7, #4]
 80243c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80243c2:	683b      	ldr	r3, [r7, #0]
 80243c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80243c6:	2319      	movs	r3, #25
 80243c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80243ca:	2340      	movs	r3, #64	; 0x40
 80243cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80243ce:	2300      	movs	r3, #0
 80243d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80243d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80243d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80243d8:	f107 0308 	add.w	r3, r7, #8
 80243dc:	4619      	mov	r1, r3
 80243de:	6878      	ldr	r0, [r7, #4]
 80243e0:	f7ff feec 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80243e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80243e8:	2119      	movs	r1, #25
 80243ea:	6878      	ldr	r0, [r7, #4]
 80243ec:	f000 f9b8 	bl	8024760 <SDMMC_GetCmdResp1>
 80243f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80243f2:	69fb      	ldr	r3, [r7, #28]
}
 80243f4:	4618      	mov	r0, r3
 80243f6:	3720      	adds	r7, #32
 80243f8:	46bd      	mov	sp, r7
 80243fa:	bd80      	pop	{r7, pc}

080243fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80243fc:	b580      	push	{r7, lr}
 80243fe:	b088      	sub	sp, #32
 8024400:	af00      	add	r7, sp, #0
 8024402:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8024404:	2300      	movs	r3, #0
 8024406:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8024408:	230c      	movs	r3, #12
 802440a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802440c:	2340      	movs	r3, #64	; 0x40
 802440e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024410:	2300      	movs	r3, #0
 8024412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024418:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802441a:	f107 0308 	add.w	r3, r7, #8
 802441e:	4619      	mov	r1, r3
 8024420:	6878      	ldr	r0, [r7, #4]
 8024422:	f7ff fecb 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8024426:	4a05      	ldr	r2, [pc, #20]	; (802443c <SDMMC_CmdStopTransfer+0x40>)
 8024428:	210c      	movs	r1, #12
 802442a:	6878      	ldr	r0, [r7, #4]
 802442c:	f000 f998 	bl	8024760 <SDMMC_GetCmdResp1>
 8024430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024432:	69fb      	ldr	r3, [r7, #28]
}
 8024434:	4618      	mov	r0, r3
 8024436:	3720      	adds	r7, #32
 8024438:	46bd      	mov	sp, r7
 802443a:	bd80      	pop	{r7, pc}
 802443c:	05f5e100 	.word	0x05f5e100

08024440 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8024440:	b580      	push	{r7, lr}
 8024442:	b08a      	sub	sp, #40	; 0x28
 8024444:	af00      	add	r7, sp, #0
 8024446:	60f8      	str	r0, [r7, #12]
 8024448:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 802444c:	683b      	ldr	r3, [r7, #0]
 802444e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8024450:	2307      	movs	r3, #7
 8024452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024454:	2340      	movs	r3, #64	; 0x40
 8024456:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024458:	2300      	movs	r3, #0
 802445a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802445c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024460:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024462:	f107 0310 	add.w	r3, r7, #16
 8024466:	4619      	mov	r1, r3
 8024468:	68f8      	ldr	r0, [r7, #12]
 802446a:	f7ff fea7 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 802446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024472:	2107      	movs	r1, #7
 8024474:	68f8      	ldr	r0, [r7, #12]
 8024476:	f000 f973 	bl	8024760 <SDMMC_GetCmdResp1>
 802447a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 802447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802447e:	4618      	mov	r0, r3
 8024480:	3728      	adds	r7, #40	; 0x28
 8024482:	46bd      	mov	sp, r7
 8024484:	bd80      	pop	{r7, pc}

08024486 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8024486:	b580      	push	{r7, lr}
 8024488:	b088      	sub	sp, #32
 802448a:	af00      	add	r7, sp, #0
 802448c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 802448e:	2300      	movs	r3, #0
 8024490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8024492:	2300      	movs	r3, #0
 8024494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8024496:	2300      	movs	r3, #0
 8024498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 802449a:	2300      	movs	r3, #0
 802449c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802449e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80244a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80244a4:	f107 0308 	add.w	r3, r7, #8
 80244a8:	4619      	mov	r1, r3
 80244aa:	6878      	ldr	r0, [r7, #4]
 80244ac:	f7ff fe86 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80244b0:	6878      	ldr	r0, [r7, #4]
 80244b2:	f000 f92d 	bl	8024710 <SDMMC_GetCmdError>
 80244b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80244b8:	69fb      	ldr	r3, [r7, #28]
}
 80244ba:	4618      	mov	r0, r3
 80244bc:	3720      	adds	r7, #32
 80244be:	46bd      	mov	sp, r7
 80244c0:	bd80      	pop	{r7, pc}

080244c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80244c2:	b580      	push	{r7, lr}
 80244c4:	b088      	sub	sp, #32
 80244c6:	af00      	add	r7, sp, #0
 80244c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80244ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80244ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80244d0:	2308      	movs	r3, #8
 80244d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80244d4:	2340      	movs	r3, #64	; 0x40
 80244d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80244d8:	2300      	movs	r3, #0
 80244da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80244dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80244e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80244e2:	f107 0308 	add.w	r3, r7, #8
 80244e6:	4619      	mov	r1, r3
 80244e8:	6878      	ldr	r0, [r7, #4]
 80244ea:	f7ff fe67 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80244ee:	6878      	ldr	r0, [r7, #4]
 80244f0:	f000 fb16 	bl	8024b20 <SDMMC_GetCmdResp7>
 80244f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80244f6:	69fb      	ldr	r3, [r7, #28]
}
 80244f8:	4618      	mov	r0, r3
 80244fa:	3720      	adds	r7, #32
 80244fc:	46bd      	mov	sp, r7
 80244fe:	bd80      	pop	{r7, pc}

08024500 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8024500:	b580      	push	{r7, lr}
 8024502:	b088      	sub	sp, #32
 8024504:	af00      	add	r7, sp, #0
 8024506:	6078      	str	r0, [r7, #4]
 8024508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 802450a:	683b      	ldr	r3, [r7, #0]
 802450c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 802450e:	2337      	movs	r3, #55	; 0x37
 8024510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8024512:	2340      	movs	r3, #64	; 0x40
 8024514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024516:	2300      	movs	r3, #0
 8024518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 802451a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802451e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8024520:	f107 0308 	add.w	r3, r7, #8
 8024524:	4619      	mov	r1, r3
 8024526:	6878      	ldr	r0, [r7, #4]
 8024528:	f7ff fe48 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 802452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024530:	2137      	movs	r1, #55	; 0x37
 8024532:	6878      	ldr	r0, [r7, #4]
 8024534:	f000 f914 	bl	8024760 <SDMMC_GetCmdResp1>
 8024538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802453a:	69fb      	ldr	r3, [r7, #28]
}
 802453c:	4618      	mov	r0, r3
 802453e:	3720      	adds	r7, #32
 8024540:	46bd      	mov	sp, r7
 8024542:	bd80      	pop	{r7, pc}

08024544 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8024544:	b580      	push	{r7, lr}
 8024546:	b088      	sub	sp, #32
 8024548:	af00      	add	r7, sp, #0
 802454a:	6078      	str	r0, [r7, #4]
 802454c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 802454e:	683b      	ldr	r3, [r7, #0]
 8024550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 802455a:	2329      	movs	r3, #41	; 0x29
 802455c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802455e:	2340      	movs	r3, #64	; 0x40
 8024560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024562:	2300      	movs	r3, #0
 8024564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802456a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802456c:	f107 0308 	add.w	r3, r7, #8
 8024570:	4619      	mov	r1, r3
 8024572:	6878      	ldr	r0, [r7, #4]
 8024574:	f7ff fe22 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8024578:	6878      	ldr	r0, [r7, #4]
 802457a:	f000 fa23 	bl	80249c4 <SDMMC_GetCmdResp3>
 802457e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024580:	69fb      	ldr	r3, [r7, #28]
}
 8024582:	4618      	mov	r0, r3
 8024584:	3720      	adds	r7, #32
 8024586:	46bd      	mov	sp, r7
 8024588:	bd80      	pop	{r7, pc}

0802458a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 802458a:	b580      	push	{r7, lr}
 802458c:	b088      	sub	sp, #32
 802458e:	af00      	add	r7, sp, #0
 8024590:	6078      	str	r0, [r7, #4]
 8024592:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8024594:	683b      	ldr	r3, [r7, #0]
 8024596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8024598:	2306      	movs	r3, #6
 802459a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802459c:	2340      	movs	r3, #64	; 0x40
 802459e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80245a0:	2300      	movs	r3, #0
 80245a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80245a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80245a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80245aa:	f107 0308 	add.w	r3, r7, #8
 80245ae:	4619      	mov	r1, r3
 80245b0:	6878      	ldr	r0, [r7, #4]
 80245b2:	f7ff fe03 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80245b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80245ba:	2106      	movs	r1, #6
 80245bc:	6878      	ldr	r0, [r7, #4]
 80245be:	f000 f8cf 	bl	8024760 <SDMMC_GetCmdResp1>
 80245c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80245c4:	69fb      	ldr	r3, [r7, #28]
}
 80245c6:	4618      	mov	r0, r3
 80245c8:	3720      	adds	r7, #32
 80245ca:	46bd      	mov	sp, r7
 80245cc:	bd80      	pop	{r7, pc}

080245ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80245ce:	b580      	push	{r7, lr}
 80245d0:	b088      	sub	sp, #32
 80245d2:	af00      	add	r7, sp, #0
 80245d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80245d6:	2300      	movs	r3, #0
 80245d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80245da:	2333      	movs	r3, #51	; 0x33
 80245dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80245de:	2340      	movs	r3, #64	; 0x40
 80245e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80245e2:	2300      	movs	r3, #0
 80245e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80245e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80245ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80245ec:	f107 0308 	add.w	r3, r7, #8
 80245f0:	4619      	mov	r1, r3
 80245f2:	6878      	ldr	r0, [r7, #4]
 80245f4:	f7ff fde2 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80245f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80245fc:	2133      	movs	r1, #51	; 0x33
 80245fe:	6878      	ldr	r0, [r7, #4]
 8024600:	f000 f8ae 	bl	8024760 <SDMMC_GetCmdResp1>
 8024604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024606:	69fb      	ldr	r3, [r7, #28]
}
 8024608:	4618      	mov	r0, r3
 802460a:	3720      	adds	r7, #32
 802460c:	46bd      	mov	sp, r7
 802460e:	bd80      	pop	{r7, pc}

08024610 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8024610:	b580      	push	{r7, lr}
 8024612:	b088      	sub	sp, #32
 8024614:	af00      	add	r7, sp, #0
 8024616:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8024618:	2300      	movs	r3, #0
 802461a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 802461c:	2302      	movs	r3, #2
 802461e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8024620:	23c0      	movs	r3, #192	; 0xc0
 8024622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024624:	2300      	movs	r3, #0
 8024626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802462c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802462e:	f107 0308 	add.w	r3, r7, #8
 8024632:	4619      	mov	r1, r3
 8024634:	6878      	ldr	r0, [r7, #4]
 8024636:	f7ff fdc1 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 802463a:	6878      	ldr	r0, [r7, #4]
 802463c:	f000 f97c 	bl	8024938 <SDMMC_GetCmdResp2>
 8024640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024642:	69fb      	ldr	r3, [r7, #28]
}
 8024644:	4618      	mov	r0, r3
 8024646:	3720      	adds	r7, #32
 8024648:	46bd      	mov	sp, r7
 802464a:	bd80      	pop	{r7, pc}

0802464c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 802464c:	b580      	push	{r7, lr}
 802464e:	b088      	sub	sp, #32
 8024650:	af00      	add	r7, sp, #0
 8024652:	6078      	str	r0, [r7, #4]
 8024654:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8024656:	683b      	ldr	r3, [r7, #0]
 8024658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 802465a:	2309      	movs	r3, #9
 802465c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 802465e:	23c0      	movs	r3, #192	; 0xc0
 8024660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8024662:	2300      	movs	r3, #0
 8024664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8024666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802466a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 802466c:	f107 0308 	add.w	r3, r7, #8
 8024670:	4619      	mov	r1, r3
 8024672:	6878      	ldr	r0, [r7, #4]
 8024674:	f7ff fda2 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8024678:	6878      	ldr	r0, [r7, #4]
 802467a:	f000 f95d 	bl	8024938 <SDMMC_GetCmdResp2>
 802467e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024680:	69fb      	ldr	r3, [r7, #28]
}
 8024682:	4618      	mov	r0, r3
 8024684:	3720      	adds	r7, #32
 8024686:	46bd      	mov	sp, r7
 8024688:	bd80      	pop	{r7, pc}

0802468a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 802468a:	b580      	push	{r7, lr}
 802468c:	b088      	sub	sp, #32
 802468e:	af00      	add	r7, sp, #0
 8024690:	6078      	str	r0, [r7, #4]
 8024692:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8024694:	2300      	movs	r3, #0
 8024696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8024698:	2303      	movs	r3, #3
 802469a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 802469c:	2340      	movs	r3, #64	; 0x40
 802469e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80246a0:	2300      	movs	r3, #0
 80246a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80246a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80246a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80246aa:	f107 0308 	add.w	r3, r7, #8
 80246ae:	4619      	mov	r1, r3
 80246b0:	6878      	ldr	r0, [r7, #4]
 80246b2:	f7ff fd83 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80246b6:	683a      	ldr	r2, [r7, #0]
 80246b8:	2103      	movs	r1, #3
 80246ba:	6878      	ldr	r0, [r7, #4]
 80246bc:	f000 f9bc 	bl	8024a38 <SDMMC_GetCmdResp6>
 80246c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80246c2:	69fb      	ldr	r3, [r7, #28]
}
 80246c4:	4618      	mov	r0, r3
 80246c6:	3720      	adds	r7, #32
 80246c8:	46bd      	mov	sp, r7
 80246ca:	bd80      	pop	{r7, pc}

080246cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80246cc:	b580      	push	{r7, lr}
 80246ce:	b088      	sub	sp, #32
 80246d0:	af00      	add	r7, sp, #0
 80246d2:	6078      	str	r0, [r7, #4]
 80246d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80246d6:	683b      	ldr	r3, [r7, #0]
 80246d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80246da:	230d      	movs	r3, #13
 80246dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80246de:	2340      	movs	r3, #64	; 0x40
 80246e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80246e2:	2300      	movs	r3, #0
 80246e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80246e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80246ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80246ec:	f107 0308 	add.w	r3, r7, #8
 80246f0:	4619      	mov	r1, r3
 80246f2:	6878      	ldr	r0, [r7, #4]
 80246f4:	f7ff fd62 	bl	80241bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80246f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80246fc:	210d      	movs	r1, #13
 80246fe:	6878      	ldr	r0, [r7, #4]
 8024700:	f000 f82e 	bl	8024760 <SDMMC_GetCmdResp1>
 8024704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8024706:	69fb      	ldr	r3, [r7, #28]
}
 8024708:	4618      	mov	r0, r3
 802470a:	3720      	adds	r7, #32
 802470c:	46bd      	mov	sp, r7
 802470e:	bd80      	pop	{r7, pc}

08024710 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8024710:	b490      	push	{r4, r7}
 8024712:	b082      	sub	sp, #8
 8024714:	af00      	add	r7, sp, #0
 8024716:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024718:	4b0f      	ldr	r3, [pc, #60]	; (8024758 <SDMMC_GetCmdError+0x48>)
 802471a:	681b      	ldr	r3, [r3, #0]
 802471c:	4a0f      	ldr	r2, [pc, #60]	; (802475c <SDMMC_GetCmdError+0x4c>)
 802471e:	fba2 2303 	umull	r2, r3, r2, r3
 8024722:	0a5b      	lsrs	r3, r3, #9
 8024724:	f241 3288 	movw	r2, #5000	; 0x1388
 8024728:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 802472c:	4623      	mov	r3, r4
 802472e:	1e5c      	subs	r4, r3, #1
 8024730:	2b00      	cmp	r3, #0
 8024732:	d102      	bne.n	802473a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024738:	e009      	b.n	802474e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 802473a:	687b      	ldr	r3, [r7, #4]
 802473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024742:	2b00      	cmp	r3, #0
 8024744:	d0f2      	beq.n	802472c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	22c5      	movs	r2, #197	; 0xc5
 802474a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 802474c:	2300      	movs	r3, #0
}
 802474e:	4618      	mov	r0, r3
 8024750:	3708      	adds	r7, #8
 8024752:	46bd      	mov	sp, r7
 8024754:	bc90      	pop	{r4, r7}
 8024756:	4770      	bx	lr
 8024758:	20000000 	.word	0x20000000
 802475c:	10624dd3 	.word	0x10624dd3

08024760 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8024760:	b590      	push	{r4, r7, lr}
 8024762:	b087      	sub	sp, #28
 8024764:	af00      	add	r7, sp, #0
 8024766:	60f8      	str	r0, [r7, #12]
 8024768:	460b      	mov	r3, r1
 802476a:	607a      	str	r2, [r7, #4]
 802476c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 802476e:	4b6f      	ldr	r3, [pc, #444]	; (802492c <SDMMC_GetCmdResp1+0x1cc>)
 8024770:	681b      	ldr	r3, [r3, #0]
 8024772:	4a6f      	ldr	r2, [pc, #444]	; (8024930 <SDMMC_GetCmdResp1+0x1d0>)
 8024774:	fba2 2303 	umull	r2, r3, r2, r3
 8024778:	0a5b      	lsrs	r3, r3, #9
 802477a:	687a      	ldr	r2, [r7, #4]
 802477c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024780:	4623      	mov	r3, r4
 8024782:	1e5c      	subs	r4, r3, #1
 8024784:	2b00      	cmp	r3, #0
 8024786:	d102      	bne.n	802478e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 802478c:	e0c9      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 802478e:	68fb      	ldr	r3, [r7, #12]
 8024790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024792:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024794:	697b      	ldr	r3, [r7, #20]
 8024796:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802479a:	2b00      	cmp	r3, #0
 802479c:	d0f0      	beq.n	8024780 <SDMMC_GetCmdResp1+0x20>
 802479e:	697b      	ldr	r3, [r7, #20]
 80247a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	d1eb      	bne.n	8024780 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80247a8:	68fb      	ldr	r3, [r7, #12]
 80247aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80247ac:	f003 0304 	and.w	r3, r3, #4
 80247b0:	2b00      	cmp	r3, #0
 80247b2:	d004      	beq.n	80247be <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80247b4:	68fb      	ldr	r3, [r7, #12]
 80247b6:	2204      	movs	r2, #4
 80247b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80247ba:	2304      	movs	r3, #4
 80247bc:	e0b1      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80247c2:	f003 0301 	and.w	r3, r3, #1
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	d004      	beq.n	80247d4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80247ca:	68fb      	ldr	r3, [r7, #12]
 80247cc:	2201      	movs	r2, #1
 80247ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80247d0:	2301      	movs	r3, #1
 80247d2:	e0a6      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80247d4:	68fb      	ldr	r3, [r7, #12]
 80247d6:	22c5      	movs	r2, #197	; 0xc5
 80247d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80247da:	68f8      	ldr	r0, [r7, #12]
 80247dc:	f7ff fd18 	bl	8024210 <SDIO_GetCommandResponse>
 80247e0:	4603      	mov	r3, r0
 80247e2:	461a      	mov	r2, r3
 80247e4:	7afb      	ldrb	r3, [r7, #11]
 80247e6:	4293      	cmp	r3, r2
 80247e8:	d001      	beq.n	80247ee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80247ea:	2301      	movs	r3, #1
 80247ec:	e099      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80247ee:	2100      	movs	r1, #0
 80247f0:	68f8      	ldr	r0, [r7, #12]
 80247f2:	f7ff fd1a 	bl	802422a <SDIO_GetResponse>
 80247f6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80247f8:	693a      	ldr	r2, [r7, #16]
 80247fa:	4b4e      	ldr	r3, [pc, #312]	; (8024934 <SDMMC_GetCmdResp1+0x1d4>)
 80247fc:	4013      	ands	r3, r2
 80247fe:	2b00      	cmp	r3, #0
 8024800:	d101      	bne.n	8024806 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8024802:	2300      	movs	r3, #0
 8024804:	e08d      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8024806:	693b      	ldr	r3, [r7, #16]
 8024808:	2b00      	cmp	r3, #0
 802480a:	da02      	bge.n	8024812 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 802480c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8024810:	e087      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8024812:	693b      	ldr	r3, [r7, #16]
 8024814:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8024818:	2b00      	cmp	r3, #0
 802481a:	d001      	beq.n	8024820 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 802481c:	2340      	movs	r3, #64	; 0x40
 802481e:	e080      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8024820:	693b      	ldr	r3, [r7, #16]
 8024822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024826:	2b00      	cmp	r3, #0
 8024828:	d001      	beq.n	802482e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802482a:	2380      	movs	r3, #128	; 0x80
 802482c:	e079      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 802482e:	693b      	ldr	r3, [r7, #16]
 8024830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024834:	2b00      	cmp	r3, #0
 8024836:	d002      	beq.n	802483e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8024838:	f44f 7380 	mov.w	r3, #256	; 0x100
 802483c:	e071      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 802483e:	693b      	ldr	r3, [r7, #16]
 8024840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8024844:	2b00      	cmp	r3, #0
 8024846:	d002      	beq.n	802484e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8024848:	f44f 7300 	mov.w	r3, #512	; 0x200
 802484c:	e069      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 802484e:	693b      	ldr	r3, [r7, #16]
 8024850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024854:	2b00      	cmp	r3, #0
 8024856:	d002      	beq.n	802485e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8024858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802485c:	e061      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 802485e:	693b      	ldr	r3, [r7, #16]
 8024860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024864:	2b00      	cmp	r3, #0
 8024866:	d002      	beq.n	802486e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8024868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802486c:	e059      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 802486e:	693b      	ldr	r3, [r7, #16]
 8024870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8024874:	2b00      	cmp	r3, #0
 8024876:	d002      	beq.n	802487e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8024878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802487c:	e051      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 802487e:	693b      	ldr	r3, [r7, #16]
 8024880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024884:	2b00      	cmp	r3, #0
 8024886:	d002      	beq.n	802488e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8024888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802488c:	e049      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 802488e:	693b      	ldr	r3, [r7, #16]
 8024890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024894:	2b00      	cmp	r3, #0
 8024896:	d002      	beq.n	802489e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8024898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 802489c:	e041      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802489e:	693b      	ldr	r3, [r7, #16]
 80248a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80248a4:	2b00      	cmp	r3, #0
 80248a6:	d002      	beq.n	80248ae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80248a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80248ac:	e039      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80248ae:	693b      	ldr	r3, [r7, #16]
 80248b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80248b4:	2b00      	cmp	r3, #0
 80248b6:	d002      	beq.n	80248be <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80248b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80248bc:	e031      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80248be:	693b      	ldr	r3, [r7, #16]
 80248c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80248c4:	2b00      	cmp	r3, #0
 80248c6:	d002      	beq.n	80248ce <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80248c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80248cc:	e029      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80248ce:	693b      	ldr	r3, [r7, #16]
 80248d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	d002      	beq.n	80248de <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80248d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80248dc:	e021      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80248de:	693b      	ldr	r3, [r7, #16]
 80248e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80248e4:	2b00      	cmp	r3, #0
 80248e6:	d002      	beq.n	80248ee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80248e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80248ec:	e019      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80248ee:	693b      	ldr	r3, [r7, #16]
 80248f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	d002      	beq.n	80248fe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80248f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80248fc:	e011      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80248fe:	693b      	ldr	r3, [r7, #16]
 8024900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024904:	2b00      	cmp	r3, #0
 8024906:	d002      	beq.n	802490e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8024908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802490c:	e009      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 802490e:	693b      	ldr	r3, [r7, #16]
 8024910:	f003 0308 	and.w	r3, r3, #8
 8024914:	2b00      	cmp	r3, #0
 8024916:	d002      	beq.n	802491e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8024918:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802491c:	e001      	b.n	8024922 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802491e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8024922:	4618      	mov	r0, r3
 8024924:	371c      	adds	r7, #28
 8024926:	46bd      	mov	sp, r7
 8024928:	bd90      	pop	{r4, r7, pc}
 802492a:	bf00      	nop
 802492c:	20000000 	.word	0x20000000
 8024930:	10624dd3 	.word	0x10624dd3
 8024934:	fdffe008 	.word	0xfdffe008

08024938 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8024938:	b490      	push	{r4, r7}
 802493a:	b084      	sub	sp, #16
 802493c:	af00      	add	r7, sp, #0
 802493e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024940:	4b1e      	ldr	r3, [pc, #120]	; (80249bc <SDMMC_GetCmdResp2+0x84>)
 8024942:	681b      	ldr	r3, [r3, #0]
 8024944:	4a1e      	ldr	r2, [pc, #120]	; (80249c0 <SDMMC_GetCmdResp2+0x88>)
 8024946:	fba2 2303 	umull	r2, r3, r2, r3
 802494a:	0a5b      	lsrs	r3, r3, #9
 802494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8024950:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024954:	4623      	mov	r3, r4
 8024956:	1e5c      	subs	r4, r3, #1
 8024958:	2b00      	cmp	r3, #0
 802495a:	d102      	bne.n	8024962 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 802495c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024960:	e026      	b.n	80249b0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024966:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024968:	68fb      	ldr	r3, [r7, #12]
 802496a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 802496e:	2b00      	cmp	r3, #0
 8024970:	d0f0      	beq.n	8024954 <SDMMC_GetCmdResp2+0x1c>
 8024972:	68fb      	ldr	r3, [r7, #12]
 8024974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024978:	2b00      	cmp	r3, #0
 802497a:	d1eb      	bne.n	8024954 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024980:	f003 0304 	and.w	r3, r3, #4
 8024984:	2b00      	cmp	r3, #0
 8024986:	d004      	beq.n	8024992 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024988:	687b      	ldr	r3, [r7, #4]
 802498a:	2204      	movs	r2, #4
 802498c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802498e:	2304      	movs	r3, #4
 8024990:	e00e      	b.n	80249b0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024996:	f003 0301 	and.w	r3, r3, #1
 802499a:	2b00      	cmp	r3, #0
 802499c:	d004      	beq.n	80249a8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 802499e:	687b      	ldr	r3, [r7, #4]
 80249a0:	2201      	movs	r2, #1
 80249a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80249a4:	2301      	movs	r3, #1
 80249a6:	e003      	b.n	80249b0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	22c5      	movs	r2, #197	; 0xc5
 80249ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80249ae:	2300      	movs	r3, #0
}
 80249b0:	4618      	mov	r0, r3
 80249b2:	3710      	adds	r7, #16
 80249b4:	46bd      	mov	sp, r7
 80249b6:	bc90      	pop	{r4, r7}
 80249b8:	4770      	bx	lr
 80249ba:	bf00      	nop
 80249bc:	20000000 	.word	0x20000000
 80249c0:	10624dd3 	.word	0x10624dd3

080249c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80249c4:	b490      	push	{r4, r7}
 80249c6:	b084      	sub	sp, #16
 80249c8:	af00      	add	r7, sp, #0
 80249ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80249cc:	4b18      	ldr	r3, [pc, #96]	; (8024a30 <SDMMC_GetCmdResp3+0x6c>)
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	4a18      	ldr	r2, [pc, #96]	; (8024a34 <SDMMC_GetCmdResp3+0x70>)
 80249d2:	fba2 2303 	umull	r2, r3, r2, r3
 80249d6:	0a5b      	lsrs	r3, r3, #9
 80249d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80249dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80249e0:	4623      	mov	r3, r4
 80249e2:	1e5c      	subs	r4, r3, #1
 80249e4:	2b00      	cmp	r3, #0
 80249e6:	d102      	bne.n	80249ee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80249e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80249ec:	e01b      	b.n	8024a26 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80249ee:	687b      	ldr	r3, [r7, #4]
 80249f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80249f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80249f4:	68fb      	ldr	r3, [r7, #12]
 80249f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	d0f0      	beq.n	80249e0 <SDMMC_GetCmdResp3+0x1c>
 80249fe:	68fb      	ldr	r3, [r7, #12]
 8024a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	d1eb      	bne.n	80249e0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a0c:	f003 0304 	and.w	r3, r3, #4
 8024a10:	2b00      	cmp	r3, #0
 8024a12:	d004      	beq.n	8024a1e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024a14:	687b      	ldr	r3, [r7, #4]
 8024a16:	2204      	movs	r2, #4
 8024a18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024a1a:	2304      	movs	r3, #4
 8024a1c:	e003      	b.n	8024a26 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	22c5      	movs	r2, #197	; 0xc5
 8024a22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8024a24:	2300      	movs	r3, #0
}
 8024a26:	4618      	mov	r0, r3
 8024a28:	3710      	adds	r7, #16
 8024a2a:	46bd      	mov	sp, r7
 8024a2c:	bc90      	pop	{r4, r7}
 8024a2e:	4770      	bx	lr
 8024a30:	20000000 	.word	0x20000000
 8024a34:	10624dd3 	.word	0x10624dd3

08024a38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8024a38:	b590      	push	{r4, r7, lr}
 8024a3a:	b087      	sub	sp, #28
 8024a3c:	af00      	add	r7, sp, #0
 8024a3e:	60f8      	str	r0, [r7, #12]
 8024a40:	460b      	mov	r3, r1
 8024a42:	607a      	str	r2, [r7, #4]
 8024a44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024a46:	4b34      	ldr	r3, [pc, #208]	; (8024b18 <SDMMC_GetCmdResp6+0xe0>)
 8024a48:	681b      	ldr	r3, [r3, #0]
 8024a4a:	4a34      	ldr	r2, [pc, #208]	; (8024b1c <SDMMC_GetCmdResp6+0xe4>)
 8024a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8024a50:	0a5b      	lsrs	r3, r3, #9
 8024a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a56:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024a5a:	4623      	mov	r3, r4
 8024a5c:	1e5c      	subs	r4, r3, #1
 8024a5e:	2b00      	cmp	r3, #0
 8024a60:	d102      	bne.n	8024a68 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024a62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024a66:	e052      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8024a68:	68fb      	ldr	r3, [r7, #12]
 8024a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a6c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024a6e:	697b      	ldr	r3, [r7, #20]
 8024a70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024a74:	2b00      	cmp	r3, #0
 8024a76:	d0f0      	beq.n	8024a5a <SDMMC_GetCmdResp6+0x22>
 8024a78:	697b      	ldr	r3, [r7, #20]
 8024a7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024a7e:	2b00      	cmp	r3, #0
 8024a80:	d1eb      	bne.n	8024a5a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024a82:	68fb      	ldr	r3, [r7, #12]
 8024a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a86:	f003 0304 	and.w	r3, r3, #4
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	d004      	beq.n	8024a98 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024a8e:	68fb      	ldr	r3, [r7, #12]
 8024a90:	2204      	movs	r2, #4
 8024a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024a94:	2304      	movs	r3, #4
 8024a96:	e03a      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024a98:	68fb      	ldr	r3, [r7, #12]
 8024a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024a9c:	f003 0301 	and.w	r3, r3, #1
 8024aa0:	2b00      	cmp	r3, #0
 8024aa2:	d004      	beq.n	8024aae <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024aa4:	68fb      	ldr	r3, [r7, #12]
 8024aa6:	2201      	movs	r2, #1
 8024aa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024aaa:	2301      	movs	r3, #1
 8024aac:	e02f      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8024aae:	68f8      	ldr	r0, [r7, #12]
 8024ab0:	f7ff fbae 	bl	8024210 <SDIO_GetCommandResponse>
 8024ab4:	4603      	mov	r3, r0
 8024ab6:	461a      	mov	r2, r3
 8024ab8:	7afb      	ldrb	r3, [r7, #11]
 8024aba:	4293      	cmp	r3, r2
 8024abc:	d001      	beq.n	8024ac2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024abe:	2301      	movs	r3, #1
 8024ac0:	e025      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8024ac2:	68fb      	ldr	r3, [r7, #12]
 8024ac4:	22c5      	movs	r2, #197	; 0xc5
 8024ac6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8024ac8:	2100      	movs	r1, #0
 8024aca:	68f8      	ldr	r0, [r7, #12]
 8024acc:	f7ff fbad 	bl	802422a <SDIO_GetResponse>
 8024ad0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8024ad2:	693b      	ldr	r3, [r7, #16]
 8024ad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8024ad8:	2b00      	cmp	r3, #0
 8024ada:	d106      	bne.n	8024aea <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8024adc:	693b      	ldr	r3, [r7, #16]
 8024ade:	0c1b      	lsrs	r3, r3, #16
 8024ae0:	b29a      	uxth	r2, r3
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8024ae6:	2300      	movs	r3, #0
 8024ae8:	e011      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8024aea:	693b      	ldr	r3, [r7, #16]
 8024aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024af0:	2b00      	cmp	r3, #0
 8024af2:	d002      	beq.n	8024afa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8024af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8024af8:	e009      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8024afa:	693b      	ldr	r3, [r7, #16]
 8024afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024b00:	2b00      	cmp	r3, #0
 8024b02:	d002      	beq.n	8024b0a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8024b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024b08:	e001      	b.n	8024b0e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8024b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8024b0e:	4618      	mov	r0, r3
 8024b10:	371c      	adds	r7, #28
 8024b12:	46bd      	mov	sp, r7
 8024b14:	bd90      	pop	{r4, r7, pc}
 8024b16:	bf00      	nop
 8024b18:	20000000 	.word	0x20000000
 8024b1c:	10624dd3 	.word	0x10624dd3

08024b20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8024b20:	b490      	push	{r4, r7}
 8024b22:	b084      	sub	sp, #16
 8024b24:	af00      	add	r7, sp, #0
 8024b26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8024b28:	4b21      	ldr	r3, [pc, #132]	; (8024bb0 <SDMMC_GetCmdResp7+0x90>)
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	4a21      	ldr	r2, [pc, #132]	; (8024bb4 <SDMMC_GetCmdResp7+0x94>)
 8024b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8024b32:	0a5b      	lsrs	r3, r3, #9
 8024b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8024b38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8024b3c:	4623      	mov	r3, r4
 8024b3e:	1e5c      	subs	r4, r3, #1
 8024b40:	2b00      	cmp	r3, #0
 8024b42:	d102      	bne.n	8024b4a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8024b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8024b48:	e02c      	b.n	8024ba4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8024b4a:	687b      	ldr	r3, [r7, #4]
 8024b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024b50:	68fb      	ldr	r3, [r7, #12]
 8024b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d0f0      	beq.n	8024b3c <SDMMC_GetCmdResp7+0x1c>
 8024b5a:	68fb      	ldr	r3, [r7, #12]
 8024b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8024b60:	2b00      	cmp	r3, #0
 8024b62:	d1eb      	bne.n	8024b3c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b68:	f003 0304 	and.w	r3, r3, #4
 8024b6c:	2b00      	cmp	r3, #0
 8024b6e:	d004      	beq.n	8024b7a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	2204      	movs	r2, #4
 8024b74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8024b76:	2304      	movs	r3, #4
 8024b78:	e014      	b.n	8024ba4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b7e:	f003 0301 	and.w	r3, r3, #1
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	d004      	beq.n	8024b90 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8024b86:	687b      	ldr	r3, [r7, #4]
 8024b88:	2201      	movs	r2, #1
 8024b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8024b8c:	2301      	movs	r3, #1
 8024b8e:	e009      	b.n	8024ba4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8024b90:	687b      	ldr	r3, [r7, #4]
 8024b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024b98:	2b00      	cmp	r3, #0
 8024b9a:	d002      	beq.n	8024ba2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	2240      	movs	r2, #64	; 0x40
 8024ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8024ba2:	2300      	movs	r3, #0
  
}
 8024ba4:	4618      	mov	r0, r3
 8024ba6:	3710      	adds	r7, #16
 8024ba8:	46bd      	mov	sp, r7
 8024baa:	bc90      	pop	{r4, r7}
 8024bac:	4770      	bx	lr
 8024bae:	bf00      	nop
 8024bb0:	20000000 	.word	0x20000000
 8024bb4:	10624dd3 	.word	0x10624dd3

08024bb8 <main>:




int main(void)
{
 8024bb8:	b580      	push	{r7, lr}
 8024bba:	af00      	add	r7, sp, #0
  hwInit();
 8024bbc:	f7f4 fb40 	bl	8019240 <hwInit>
  apInit();
 8024bc0:	f7ec fd82 	bl	80116c8 <apInit>

  apMain();
 8024bc4:	f7ec fdc2 	bl	801174c <apMain>

  return 0;
 8024bc8:	2300      	movs	r3, #0
}
 8024bca:	4618      	mov	r0, r3
 8024bcc:	bd80      	pop	{r7, pc}
	...

08024bd0 <__errno>:
 8024bd0:	4b01      	ldr	r3, [pc, #4]	; (8024bd8 <__errno+0x8>)
 8024bd2:	6818      	ldr	r0, [r3, #0]
 8024bd4:	4770      	bx	lr
 8024bd6:	bf00      	nop
 8024bd8:	200000e0 	.word	0x200000e0

08024bdc <__libc_init_array>:
 8024bdc:	b570      	push	{r4, r5, r6, lr}
 8024bde:	4d0d      	ldr	r5, [pc, #52]	; (8024c14 <__libc_init_array+0x38>)
 8024be0:	4c0d      	ldr	r4, [pc, #52]	; (8024c18 <__libc_init_array+0x3c>)
 8024be2:	1b64      	subs	r4, r4, r5
 8024be4:	10a4      	asrs	r4, r4, #2
 8024be6:	2600      	movs	r6, #0
 8024be8:	42a6      	cmp	r6, r4
 8024bea:	d109      	bne.n	8024c00 <__libc_init_array+0x24>
 8024bec:	4d0b      	ldr	r5, [pc, #44]	; (8024c1c <__libc_init_array+0x40>)
 8024bee:	4c0c      	ldr	r4, [pc, #48]	; (8024c20 <__libc_init_array+0x44>)
 8024bf0:	f004 faf2 	bl	80291d8 <_init>
 8024bf4:	1b64      	subs	r4, r4, r5
 8024bf6:	10a4      	asrs	r4, r4, #2
 8024bf8:	2600      	movs	r6, #0
 8024bfa:	42a6      	cmp	r6, r4
 8024bfc:	d105      	bne.n	8024c0a <__libc_init_array+0x2e>
 8024bfe:	bd70      	pop	{r4, r5, r6, pc}
 8024c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8024c04:	4798      	blx	r3
 8024c06:	3601      	adds	r6, #1
 8024c08:	e7ee      	b.n	8024be8 <__libc_init_array+0xc>
 8024c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8024c0e:	4798      	blx	r3
 8024c10:	3601      	adds	r6, #1
 8024c12:	e7f2      	b.n	8024bfa <__libc_init_array+0x1e>
 8024c14:	08037bdc 	.word	0x08037bdc
 8024c18:	08037bdc 	.word	0x08037bdc
 8024c1c:	08037bdc 	.word	0x08037bdc
 8024c20:	08037be0 	.word	0x08037be0

08024c24 <malloc>:
 8024c24:	4b02      	ldr	r3, [pc, #8]	; (8024c30 <malloc+0xc>)
 8024c26:	4601      	mov	r1, r0
 8024c28:	6818      	ldr	r0, [r3, #0]
 8024c2a:	f000 b88d 	b.w	8024d48 <_malloc_r>
 8024c2e:	bf00      	nop
 8024c30:	200000e0 	.word	0x200000e0

08024c34 <free>:
 8024c34:	4b02      	ldr	r3, [pc, #8]	; (8024c40 <free+0xc>)
 8024c36:	4601      	mov	r1, r0
 8024c38:	6818      	ldr	r0, [r3, #0]
 8024c3a:	f000 b819 	b.w	8024c70 <_free_r>
 8024c3e:	bf00      	nop
 8024c40:	200000e0 	.word	0x200000e0

08024c44 <memcpy>:
 8024c44:	440a      	add	r2, r1
 8024c46:	4291      	cmp	r1, r2
 8024c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8024c4c:	d100      	bne.n	8024c50 <memcpy+0xc>
 8024c4e:	4770      	bx	lr
 8024c50:	b510      	push	{r4, lr}
 8024c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024c5a:	4291      	cmp	r1, r2
 8024c5c:	d1f9      	bne.n	8024c52 <memcpy+0xe>
 8024c5e:	bd10      	pop	{r4, pc}

08024c60 <memset>:
 8024c60:	4402      	add	r2, r0
 8024c62:	4603      	mov	r3, r0
 8024c64:	4293      	cmp	r3, r2
 8024c66:	d100      	bne.n	8024c6a <memset+0xa>
 8024c68:	4770      	bx	lr
 8024c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8024c6e:	e7f9      	b.n	8024c64 <memset+0x4>

08024c70 <_free_r>:
 8024c70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024c72:	2900      	cmp	r1, #0
 8024c74:	d044      	beq.n	8024d00 <_free_r+0x90>
 8024c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024c7a:	9001      	str	r0, [sp, #4]
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	f1a1 0404 	sub.w	r4, r1, #4
 8024c82:	bfb8      	it	lt
 8024c84:	18e4      	addlt	r4, r4, r3
 8024c86:	f003 f969 	bl	8027f5c <__malloc_lock>
 8024c8a:	4a1e      	ldr	r2, [pc, #120]	; (8024d04 <_free_r+0x94>)
 8024c8c:	9801      	ldr	r0, [sp, #4]
 8024c8e:	6813      	ldr	r3, [r2, #0]
 8024c90:	b933      	cbnz	r3, 8024ca0 <_free_r+0x30>
 8024c92:	6063      	str	r3, [r4, #4]
 8024c94:	6014      	str	r4, [r2, #0]
 8024c96:	b003      	add	sp, #12
 8024c98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024c9c:	f003 b964 	b.w	8027f68 <__malloc_unlock>
 8024ca0:	42a3      	cmp	r3, r4
 8024ca2:	d908      	bls.n	8024cb6 <_free_r+0x46>
 8024ca4:	6825      	ldr	r5, [r4, #0]
 8024ca6:	1961      	adds	r1, r4, r5
 8024ca8:	428b      	cmp	r3, r1
 8024caa:	bf01      	itttt	eq
 8024cac:	6819      	ldreq	r1, [r3, #0]
 8024cae:	685b      	ldreq	r3, [r3, #4]
 8024cb0:	1949      	addeq	r1, r1, r5
 8024cb2:	6021      	streq	r1, [r4, #0]
 8024cb4:	e7ed      	b.n	8024c92 <_free_r+0x22>
 8024cb6:	461a      	mov	r2, r3
 8024cb8:	685b      	ldr	r3, [r3, #4]
 8024cba:	b10b      	cbz	r3, 8024cc0 <_free_r+0x50>
 8024cbc:	42a3      	cmp	r3, r4
 8024cbe:	d9fa      	bls.n	8024cb6 <_free_r+0x46>
 8024cc0:	6811      	ldr	r1, [r2, #0]
 8024cc2:	1855      	adds	r5, r2, r1
 8024cc4:	42a5      	cmp	r5, r4
 8024cc6:	d10b      	bne.n	8024ce0 <_free_r+0x70>
 8024cc8:	6824      	ldr	r4, [r4, #0]
 8024cca:	4421      	add	r1, r4
 8024ccc:	1854      	adds	r4, r2, r1
 8024cce:	42a3      	cmp	r3, r4
 8024cd0:	6011      	str	r1, [r2, #0]
 8024cd2:	d1e0      	bne.n	8024c96 <_free_r+0x26>
 8024cd4:	681c      	ldr	r4, [r3, #0]
 8024cd6:	685b      	ldr	r3, [r3, #4]
 8024cd8:	6053      	str	r3, [r2, #4]
 8024cda:	4421      	add	r1, r4
 8024cdc:	6011      	str	r1, [r2, #0]
 8024cde:	e7da      	b.n	8024c96 <_free_r+0x26>
 8024ce0:	d902      	bls.n	8024ce8 <_free_r+0x78>
 8024ce2:	230c      	movs	r3, #12
 8024ce4:	6003      	str	r3, [r0, #0]
 8024ce6:	e7d6      	b.n	8024c96 <_free_r+0x26>
 8024ce8:	6825      	ldr	r5, [r4, #0]
 8024cea:	1961      	adds	r1, r4, r5
 8024cec:	428b      	cmp	r3, r1
 8024cee:	bf04      	itt	eq
 8024cf0:	6819      	ldreq	r1, [r3, #0]
 8024cf2:	685b      	ldreq	r3, [r3, #4]
 8024cf4:	6063      	str	r3, [r4, #4]
 8024cf6:	bf04      	itt	eq
 8024cf8:	1949      	addeq	r1, r1, r5
 8024cfa:	6021      	streq	r1, [r4, #0]
 8024cfc:	6054      	str	r4, [r2, #4]
 8024cfe:	e7ca      	b.n	8024c96 <_free_r+0x26>
 8024d00:	b003      	add	sp, #12
 8024d02:	bd30      	pop	{r4, r5, pc}
 8024d04:	2000b3a4 	.word	0x2000b3a4

08024d08 <sbrk_aligned>:
 8024d08:	b570      	push	{r4, r5, r6, lr}
 8024d0a:	4e0e      	ldr	r6, [pc, #56]	; (8024d44 <sbrk_aligned+0x3c>)
 8024d0c:	460c      	mov	r4, r1
 8024d0e:	6831      	ldr	r1, [r6, #0]
 8024d10:	4605      	mov	r5, r0
 8024d12:	b911      	cbnz	r1, 8024d1a <sbrk_aligned+0x12>
 8024d14:	f000 fcf6 	bl	8025704 <_sbrk_r>
 8024d18:	6030      	str	r0, [r6, #0]
 8024d1a:	4621      	mov	r1, r4
 8024d1c:	4628      	mov	r0, r5
 8024d1e:	f000 fcf1 	bl	8025704 <_sbrk_r>
 8024d22:	1c43      	adds	r3, r0, #1
 8024d24:	d00a      	beq.n	8024d3c <sbrk_aligned+0x34>
 8024d26:	1cc4      	adds	r4, r0, #3
 8024d28:	f024 0403 	bic.w	r4, r4, #3
 8024d2c:	42a0      	cmp	r0, r4
 8024d2e:	d007      	beq.n	8024d40 <sbrk_aligned+0x38>
 8024d30:	1a21      	subs	r1, r4, r0
 8024d32:	4628      	mov	r0, r5
 8024d34:	f000 fce6 	bl	8025704 <_sbrk_r>
 8024d38:	3001      	adds	r0, #1
 8024d3a:	d101      	bne.n	8024d40 <sbrk_aligned+0x38>
 8024d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8024d40:	4620      	mov	r0, r4
 8024d42:	bd70      	pop	{r4, r5, r6, pc}
 8024d44:	2000b3a8 	.word	0x2000b3a8

08024d48 <_malloc_r>:
 8024d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d4c:	1ccd      	adds	r5, r1, #3
 8024d4e:	f025 0503 	bic.w	r5, r5, #3
 8024d52:	3508      	adds	r5, #8
 8024d54:	2d0c      	cmp	r5, #12
 8024d56:	bf38      	it	cc
 8024d58:	250c      	movcc	r5, #12
 8024d5a:	2d00      	cmp	r5, #0
 8024d5c:	4607      	mov	r7, r0
 8024d5e:	db01      	blt.n	8024d64 <_malloc_r+0x1c>
 8024d60:	42a9      	cmp	r1, r5
 8024d62:	d905      	bls.n	8024d70 <_malloc_r+0x28>
 8024d64:	230c      	movs	r3, #12
 8024d66:	603b      	str	r3, [r7, #0]
 8024d68:	2600      	movs	r6, #0
 8024d6a:	4630      	mov	r0, r6
 8024d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d70:	4e2e      	ldr	r6, [pc, #184]	; (8024e2c <_malloc_r+0xe4>)
 8024d72:	f003 f8f3 	bl	8027f5c <__malloc_lock>
 8024d76:	6833      	ldr	r3, [r6, #0]
 8024d78:	461c      	mov	r4, r3
 8024d7a:	bb34      	cbnz	r4, 8024dca <_malloc_r+0x82>
 8024d7c:	4629      	mov	r1, r5
 8024d7e:	4638      	mov	r0, r7
 8024d80:	f7ff ffc2 	bl	8024d08 <sbrk_aligned>
 8024d84:	1c43      	adds	r3, r0, #1
 8024d86:	4604      	mov	r4, r0
 8024d88:	d14d      	bne.n	8024e26 <_malloc_r+0xde>
 8024d8a:	6834      	ldr	r4, [r6, #0]
 8024d8c:	4626      	mov	r6, r4
 8024d8e:	2e00      	cmp	r6, #0
 8024d90:	d140      	bne.n	8024e14 <_malloc_r+0xcc>
 8024d92:	6823      	ldr	r3, [r4, #0]
 8024d94:	4631      	mov	r1, r6
 8024d96:	4638      	mov	r0, r7
 8024d98:	eb04 0803 	add.w	r8, r4, r3
 8024d9c:	f000 fcb2 	bl	8025704 <_sbrk_r>
 8024da0:	4580      	cmp	r8, r0
 8024da2:	d13a      	bne.n	8024e1a <_malloc_r+0xd2>
 8024da4:	6821      	ldr	r1, [r4, #0]
 8024da6:	3503      	adds	r5, #3
 8024da8:	1a6d      	subs	r5, r5, r1
 8024daa:	f025 0503 	bic.w	r5, r5, #3
 8024dae:	3508      	adds	r5, #8
 8024db0:	2d0c      	cmp	r5, #12
 8024db2:	bf38      	it	cc
 8024db4:	250c      	movcc	r5, #12
 8024db6:	4629      	mov	r1, r5
 8024db8:	4638      	mov	r0, r7
 8024dba:	f7ff ffa5 	bl	8024d08 <sbrk_aligned>
 8024dbe:	3001      	adds	r0, #1
 8024dc0:	d02b      	beq.n	8024e1a <_malloc_r+0xd2>
 8024dc2:	6823      	ldr	r3, [r4, #0]
 8024dc4:	442b      	add	r3, r5
 8024dc6:	6023      	str	r3, [r4, #0]
 8024dc8:	e00e      	b.n	8024de8 <_malloc_r+0xa0>
 8024dca:	6822      	ldr	r2, [r4, #0]
 8024dcc:	1b52      	subs	r2, r2, r5
 8024dce:	d41e      	bmi.n	8024e0e <_malloc_r+0xc6>
 8024dd0:	2a0b      	cmp	r2, #11
 8024dd2:	d916      	bls.n	8024e02 <_malloc_r+0xba>
 8024dd4:	1961      	adds	r1, r4, r5
 8024dd6:	42a3      	cmp	r3, r4
 8024dd8:	6025      	str	r5, [r4, #0]
 8024dda:	bf18      	it	ne
 8024ddc:	6059      	strne	r1, [r3, #4]
 8024dde:	6863      	ldr	r3, [r4, #4]
 8024de0:	bf08      	it	eq
 8024de2:	6031      	streq	r1, [r6, #0]
 8024de4:	5162      	str	r2, [r4, r5]
 8024de6:	604b      	str	r3, [r1, #4]
 8024de8:	4638      	mov	r0, r7
 8024dea:	f104 060b 	add.w	r6, r4, #11
 8024dee:	f003 f8bb 	bl	8027f68 <__malloc_unlock>
 8024df2:	f026 0607 	bic.w	r6, r6, #7
 8024df6:	1d23      	adds	r3, r4, #4
 8024df8:	1af2      	subs	r2, r6, r3
 8024dfa:	d0b6      	beq.n	8024d6a <_malloc_r+0x22>
 8024dfc:	1b9b      	subs	r3, r3, r6
 8024dfe:	50a3      	str	r3, [r4, r2]
 8024e00:	e7b3      	b.n	8024d6a <_malloc_r+0x22>
 8024e02:	6862      	ldr	r2, [r4, #4]
 8024e04:	42a3      	cmp	r3, r4
 8024e06:	bf0c      	ite	eq
 8024e08:	6032      	streq	r2, [r6, #0]
 8024e0a:	605a      	strne	r2, [r3, #4]
 8024e0c:	e7ec      	b.n	8024de8 <_malloc_r+0xa0>
 8024e0e:	4623      	mov	r3, r4
 8024e10:	6864      	ldr	r4, [r4, #4]
 8024e12:	e7b2      	b.n	8024d7a <_malloc_r+0x32>
 8024e14:	4634      	mov	r4, r6
 8024e16:	6876      	ldr	r6, [r6, #4]
 8024e18:	e7b9      	b.n	8024d8e <_malloc_r+0x46>
 8024e1a:	230c      	movs	r3, #12
 8024e1c:	603b      	str	r3, [r7, #0]
 8024e1e:	4638      	mov	r0, r7
 8024e20:	f003 f8a2 	bl	8027f68 <__malloc_unlock>
 8024e24:	e7a1      	b.n	8024d6a <_malloc_r+0x22>
 8024e26:	6025      	str	r5, [r4, #0]
 8024e28:	e7de      	b.n	8024de8 <_malloc_r+0xa0>
 8024e2a:	bf00      	nop
 8024e2c:	2000b3a4 	.word	0x2000b3a4

08024e30 <__cvt>:
 8024e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024e34:	ec55 4b10 	vmov	r4, r5, d0
 8024e38:	2d00      	cmp	r5, #0
 8024e3a:	460e      	mov	r6, r1
 8024e3c:	4619      	mov	r1, r3
 8024e3e:	462b      	mov	r3, r5
 8024e40:	bfbb      	ittet	lt
 8024e42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024e46:	461d      	movlt	r5, r3
 8024e48:	2300      	movge	r3, #0
 8024e4a:	232d      	movlt	r3, #45	; 0x2d
 8024e4c:	700b      	strb	r3, [r1, #0]
 8024e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024e54:	4691      	mov	r9, r2
 8024e56:	f023 0820 	bic.w	r8, r3, #32
 8024e5a:	bfbc      	itt	lt
 8024e5c:	4622      	movlt	r2, r4
 8024e5e:	4614      	movlt	r4, r2
 8024e60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024e64:	d005      	beq.n	8024e72 <__cvt+0x42>
 8024e66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024e6a:	d100      	bne.n	8024e6e <__cvt+0x3e>
 8024e6c:	3601      	adds	r6, #1
 8024e6e:	2102      	movs	r1, #2
 8024e70:	e000      	b.n	8024e74 <__cvt+0x44>
 8024e72:	2103      	movs	r1, #3
 8024e74:	ab03      	add	r3, sp, #12
 8024e76:	9301      	str	r3, [sp, #4]
 8024e78:	ab02      	add	r3, sp, #8
 8024e7a:	9300      	str	r3, [sp, #0]
 8024e7c:	ec45 4b10 	vmov	d0, r4, r5
 8024e80:	4653      	mov	r3, sl
 8024e82:	4632      	mov	r2, r6
 8024e84:	f001 fcd8 	bl	8026838 <_dtoa_r>
 8024e88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024e8c:	4607      	mov	r7, r0
 8024e8e:	d102      	bne.n	8024e96 <__cvt+0x66>
 8024e90:	f019 0f01 	tst.w	r9, #1
 8024e94:	d022      	beq.n	8024edc <__cvt+0xac>
 8024e96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024e9a:	eb07 0906 	add.w	r9, r7, r6
 8024e9e:	d110      	bne.n	8024ec2 <__cvt+0x92>
 8024ea0:	783b      	ldrb	r3, [r7, #0]
 8024ea2:	2b30      	cmp	r3, #48	; 0x30
 8024ea4:	d10a      	bne.n	8024ebc <__cvt+0x8c>
 8024ea6:	2200      	movs	r2, #0
 8024ea8:	2300      	movs	r3, #0
 8024eaa:	4620      	mov	r0, r4
 8024eac:	4629      	mov	r1, r5
 8024eae:	f7ec f973 	bl	8011198 <__aeabi_dcmpeq>
 8024eb2:	b918      	cbnz	r0, 8024ebc <__cvt+0x8c>
 8024eb4:	f1c6 0601 	rsb	r6, r6, #1
 8024eb8:	f8ca 6000 	str.w	r6, [sl]
 8024ebc:	f8da 3000 	ldr.w	r3, [sl]
 8024ec0:	4499      	add	r9, r3
 8024ec2:	2200      	movs	r2, #0
 8024ec4:	2300      	movs	r3, #0
 8024ec6:	4620      	mov	r0, r4
 8024ec8:	4629      	mov	r1, r5
 8024eca:	f7ec f965 	bl	8011198 <__aeabi_dcmpeq>
 8024ece:	b108      	cbz	r0, 8024ed4 <__cvt+0xa4>
 8024ed0:	f8cd 900c 	str.w	r9, [sp, #12]
 8024ed4:	2230      	movs	r2, #48	; 0x30
 8024ed6:	9b03      	ldr	r3, [sp, #12]
 8024ed8:	454b      	cmp	r3, r9
 8024eda:	d307      	bcc.n	8024eec <__cvt+0xbc>
 8024edc:	9b03      	ldr	r3, [sp, #12]
 8024ede:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024ee0:	1bdb      	subs	r3, r3, r7
 8024ee2:	4638      	mov	r0, r7
 8024ee4:	6013      	str	r3, [r2, #0]
 8024ee6:	b004      	add	sp, #16
 8024ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024eec:	1c59      	adds	r1, r3, #1
 8024eee:	9103      	str	r1, [sp, #12]
 8024ef0:	701a      	strb	r2, [r3, #0]
 8024ef2:	e7f0      	b.n	8024ed6 <__cvt+0xa6>

08024ef4 <__exponent>:
 8024ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024ef6:	4603      	mov	r3, r0
 8024ef8:	2900      	cmp	r1, #0
 8024efa:	bfb8      	it	lt
 8024efc:	4249      	neglt	r1, r1
 8024efe:	f803 2b02 	strb.w	r2, [r3], #2
 8024f02:	bfb4      	ite	lt
 8024f04:	222d      	movlt	r2, #45	; 0x2d
 8024f06:	222b      	movge	r2, #43	; 0x2b
 8024f08:	2909      	cmp	r1, #9
 8024f0a:	7042      	strb	r2, [r0, #1]
 8024f0c:	dd2a      	ble.n	8024f64 <__exponent+0x70>
 8024f0e:	f10d 0407 	add.w	r4, sp, #7
 8024f12:	46a4      	mov	ip, r4
 8024f14:	270a      	movs	r7, #10
 8024f16:	46a6      	mov	lr, r4
 8024f18:	460a      	mov	r2, r1
 8024f1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8024f1e:	fb07 1516 	mls	r5, r7, r6, r1
 8024f22:	3530      	adds	r5, #48	; 0x30
 8024f24:	2a63      	cmp	r2, #99	; 0x63
 8024f26:	f104 34ff 	add.w	r4, r4, #4294967295
 8024f2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024f2e:	4631      	mov	r1, r6
 8024f30:	dcf1      	bgt.n	8024f16 <__exponent+0x22>
 8024f32:	3130      	adds	r1, #48	; 0x30
 8024f34:	f1ae 0502 	sub.w	r5, lr, #2
 8024f38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024f3c:	1c44      	adds	r4, r0, #1
 8024f3e:	4629      	mov	r1, r5
 8024f40:	4561      	cmp	r1, ip
 8024f42:	d30a      	bcc.n	8024f5a <__exponent+0x66>
 8024f44:	f10d 0209 	add.w	r2, sp, #9
 8024f48:	eba2 020e 	sub.w	r2, r2, lr
 8024f4c:	4565      	cmp	r5, ip
 8024f4e:	bf88      	it	hi
 8024f50:	2200      	movhi	r2, #0
 8024f52:	4413      	add	r3, r2
 8024f54:	1a18      	subs	r0, r3, r0
 8024f56:	b003      	add	sp, #12
 8024f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024f5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8024f62:	e7ed      	b.n	8024f40 <__exponent+0x4c>
 8024f64:	2330      	movs	r3, #48	; 0x30
 8024f66:	3130      	adds	r1, #48	; 0x30
 8024f68:	7083      	strb	r3, [r0, #2]
 8024f6a:	70c1      	strb	r1, [r0, #3]
 8024f6c:	1d03      	adds	r3, r0, #4
 8024f6e:	e7f1      	b.n	8024f54 <__exponent+0x60>

08024f70 <_printf_float>:
 8024f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f74:	ed2d 8b02 	vpush	{d8}
 8024f78:	b08d      	sub	sp, #52	; 0x34
 8024f7a:	460c      	mov	r4, r1
 8024f7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024f80:	4616      	mov	r6, r2
 8024f82:	461f      	mov	r7, r3
 8024f84:	4605      	mov	r5, r0
 8024f86:	f002 ff6b 	bl	8027e60 <_localeconv_r>
 8024f8a:	f8d0 a000 	ldr.w	sl, [r0]
 8024f8e:	4650      	mov	r0, sl
 8024f90:	f7eb fc80 	bl	8010894 <strlen>
 8024f94:	2300      	movs	r3, #0
 8024f96:	930a      	str	r3, [sp, #40]	; 0x28
 8024f98:	6823      	ldr	r3, [r4, #0]
 8024f9a:	9305      	str	r3, [sp, #20]
 8024f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8024fa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8024fa4:	3307      	adds	r3, #7
 8024fa6:	f023 0307 	bic.w	r3, r3, #7
 8024faa:	f103 0208 	add.w	r2, r3, #8
 8024fae:	f8c8 2000 	str.w	r2, [r8]
 8024fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fb6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8024fba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8024fbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8024fc2:	9307      	str	r3, [sp, #28]
 8024fc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8024fc8:	ee08 0a10 	vmov	s16, r0
 8024fcc:	4b9f      	ldr	r3, [pc, #636]	; (802524c <_printf_float+0x2dc>)
 8024fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8024fd6:	f7ec f911 	bl	80111fc <__aeabi_dcmpun>
 8024fda:	bb88      	cbnz	r0, 8025040 <_printf_float+0xd0>
 8024fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024fe0:	4b9a      	ldr	r3, [pc, #616]	; (802524c <_printf_float+0x2dc>)
 8024fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8024fe6:	f7ec f8eb 	bl	80111c0 <__aeabi_dcmple>
 8024fea:	bb48      	cbnz	r0, 8025040 <_printf_float+0xd0>
 8024fec:	2200      	movs	r2, #0
 8024fee:	2300      	movs	r3, #0
 8024ff0:	4640      	mov	r0, r8
 8024ff2:	4649      	mov	r1, r9
 8024ff4:	f7ec f8da 	bl	80111ac <__aeabi_dcmplt>
 8024ff8:	b110      	cbz	r0, 8025000 <_printf_float+0x90>
 8024ffa:	232d      	movs	r3, #45	; 0x2d
 8024ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025000:	4b93      	ldr	r3, [pc, #588]	; (8025250 <_printf_float+0x2e0>)
 8025002:	4894      	ldr	r0, [pc, #592]	; (8025254 <_printf_float+0x2e4>)
 8025004:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8025008:	bf94      	ite	ls
 802500a:	4698      	movls	r8, r3
 802500c:	4680      	movhi	r8, r0
 802500e:	2303      	movs	r3, #3
 8025010:	6123      	str	r3, [r4, #16]
 8025012:	9b05      	ldr	r3, [sp, #20]
 8025014:	f023 0204 	bic.w	r2, r3, #4
 8025018:	6022      	str	r2, [r4, #0]
 802501a:	f04f 0900 	mov.w	r9, #0
 802501e:	9700      	str	r7, [sp, #0]
 8025020:	4633      	mov	r3, r6
 8025022:	aa0b      	add	r2, sp, #44	; 0x2c
 8025024:	4621      	mov	r1, r4
 8025026:	4628      	mov	r0, r5
 8025028:	f000 f9d8 	bl	80253dc <_printf_common>
 802502c:	3001      	adds	r0, #1
 802502e:	f040 8090 	bne.w	8025152 <_printf_float+0x1e2>
 8025032:	f04f 30ff 	mov.w	r0, #4294967295
 8025036:	b00d      	add	sp, #52	; 0x34
 8025038:	ecbd 8b02 	vpop	{d8}
 802503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025040:	4642      	mov	r2, r8
 8025042:	464b      	mov	r3, r9
 8025044:	4640      	mov	r0, r8
 8025046:	4649      	mov	r1, r9
 8025048:	f7ec f8d8 	bl	80111fc <__aeabi_dcmpun>
 802504c:	b140      	cbz	r0, 8025060 <_printf_float+0xf0>
 802504e:	464b      	mov	r3, r9
 8025050:	2b00      	cmp	r3, #0
 8025052:	bfbc      	itt	lt
 8025054:	232d      	movlt	r3, #45	; 0x2d
 8025056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802505a:	487f      	ldr	r0, [pc, #508]	; (8025258 <_printf_float+0x2e8>)
 802505c:	4b7f      	ldr	r3, [pc, #508]	; (802525c <_printf_float+0x2ec>)
 802505e:	e7d1      	b.n	8025004 <_printf_float+0x94>
 8025060:	6863      	ldr	r3, [r4, #4]
 8025062:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8025066:	9206      	str	r2, [sp, #24]
 8025068:	1c5a      	adds	r2, r3, #1
 802506a:	d13f      	bne.n	80250ec <_printf_float+0x17c>
 802506c:	2306      	movs	r3, #6
 802506e:	6063      	str	r3, [r4, #4]
 8025070:	9b05      	ldr	r3, [sp, #20]
 8025072:	6861      	ldr	r1, [r4, #4]
 8025074:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8025078:	2300      	movs	r3, #0
 802507a:	9303      	str	r3, [sp, #12]
 802507c:	ab0a      	add	r3, sp, #40	; 0x28
 802507e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8025082:	ab09      	add	r3, sp, #36	; 0x24
 8025084:	ec49 8b10 	vmov	d0, r8, r9
 8025088:	9300      	str	r3, [sp, #0]
 802508a:	6022      	str	r2, [r4, #0]
 802508c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8025090:	4628      	mov	r0, r5
 8025092:	f7ff fecd 	bl	8024e30 <__cvt>
 8025096:	9b06      	ldr	r3, [sp, #24]
 8025098:	9909      	ldr	r1, [sp, #36]	; 0x24
 802509a:	2b47      	cmp	r3, #71	; 0x47
 802509c:	4680      	mov	r8, r0
 802509e:	d108      	bne.n	80250b2 <_printf_float+0x142>
 80250a0:	1cc8      	adds	r0, r1, #3
 80250a2:	db02      	blt.n	80250aa <_printf_float+0x13a>
 80250a4:	6863      	ldr	r3, [r4, #4]
 80250a6:	4299      	cmp	r1, r3
 80250a8:	dd41      	ble.n	802512e <_printf_float+0x1be>
 80250aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80250ae:	fa5f fb8b 	uxtb.w	fp, fp
 80250b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80250b6:	d820      	bhi.n	80250fa <_printf_float+0x18a>
 80250b8:	3901      	subs	r1, #1
 80250ba:	465a      	mov	r2, fp
 80250bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80250c0:	9109      	str	r1, [sp, #36]	; 0x24
 80250c2:	f7ff ff17 	bl	8024ef4 <__exponent>
 80250c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80250c8:	1813      	adds	r3, r2, r0
 80250ca:	2a01      	cmp	r2, #1
 80250cc:	4681      	mov	r9, r0
 80250ce:	6123      	str	r3, [r4, #16]
 80250d0:	dc02      	bgt.n	80250d8 <_printf_float+0x168>
 80250d2:	6822      	ldr	r2, [r4, #0]
 80250d4:	07d2      	lsls	r2, r2, #31
 80250d6:	d501      	bpl.n	80250dc <_printf_float+0x16c>
 80250d8:	3301      	adds	r3, #1
 80250da:	6123      	str	r3, [r4, #16]
 80250dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d09c      	beq.n	802501e <_printf_float+0xae>
 80250e4:	232d      	movs	r3, #45	; 0x2d
 80250e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250ea:	e798      	b.n	802501e <_printf_float+0xae>
 80250ec:	9a06      	ldr	r2, [sp, #24]
 80250ee:	2a47      	cmp	r2, #71	; 0x47
 80250f0:	d1be      	bne.n	8025070 <_printf_float+0x100>
 80250f2:	2b00      	cmp	r3, #0
 80250f4:	d1bc      	bne.n	8025070 <_printf_float+0x100>
 80250f6:	2301      	movs	r3, #1
 80250f8:	e7b9      	b.n	802506e <_printf_float+0xfe>
 80250fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80250fe:	d118      	bne.n	8025132 <_printf_float+0x1c2>
 8025100:	2900      	cmp	r1, #0
 8025102:	6863      	ldr	r3, [r4, #4]
 8025104:	dd0b      	ble.n	802511e <_printf_float+0x1ae>
 8025106:	6121      	str	r1, [r4, #16]
 8025108:	b913      	cbnz	r3, 8025110 <_printf_float+0x1a0>
 802510a:	6822      	ldr	r2, [r4, #0]
 802510c:	07d0      	lsls	r0, r2, #31
 802510e:	d502      	bpl.n	8025116 <_printf_float+0x1a6>
 8025110:	3301      	adds	r3, #1
 8025112:	440b      	add	r3, r1
 8025114:	6123      	str	r3, [r4, #16]
 8025116:	65a1      	str	r1, [r4, #88]	; 0x58
 8025118:	f04f 0900 	mov.w	r9, #0
 802511c:	e7de      	b.n	80250dc <_printf_float+0x16c>
 802511e:	b913      	cbnz	r3, 8025126 <_printf_float+0x1b6>
 8025120:	6822      	ldr	r2, [r4, #0]
 8025122:	07d2      	lsls	r2, r2, #31
 8025124:	d501      	bpl.n	802512a <_printf_float+0x1ba>
 8025126:	3302      	adds	r3, #2
 8025128:	e7f4      	b.n	8025114 <_printf_float+0x1a4>
 802512a:	2301      	movs	r3, #1
 802512c:	e7f2      	b.n	8025114 <_printf_float+0x1a4>
 802512e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8025132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025134:	4299      	cmp	r1, r3
 8025136:	db05      	blt.n	8025144 <_printf_float+0x1d4>
 8025138:	6823      	ldr	r3, [r4, #0]
 802513a:	6121      	str	r1, [r4, #16]
 802513c:	07d8      	lsls	r0, r3, #31
 802513e:	d5ea      	bpl.n	8025116 <_printf_float+0x1a6>
 8025140:	1c4b      	adds	r3, r1, #1
 8025142:	e7e7      	b.n	8025114 <_printf_float+0x1a4>
 8025144:	2900      	cmp	r1, #0
 8025146:	bfd4      	ite	le
 8025148:	f1c1 0202 	rsble	r2, r1, #2
 802514c:	2201      	movgt	r2, #1
 802514e:	4413      	add	r3, r2
 8025150:	e7e0      	b.n	8025114 <_printf_float+0x1a4>
 8025152:	6823      	ldr	r3, [r4, #0]
 8025154:	055a      	lsls	r2, r3, #21
 8025156:	d407      	bmi.n	8025168 <_printf_float+0x1f8>
 8025158:	6923      	ldr	r3, [r4, #16]
 802515a:	4642      	mov	r2, r8
 802515c:	4631      	mov	r1, r6
 802515e:	4628      	mov	r0, r5
 8025160:	47b8      	blx	r7
 8025162:	3001      	adds	r0, #1
 8025164:	d12c      	bne.n	80251c0 <_printf_float+0x250>
 8025166:	e764      	b.n	8025032 <_printf_float+0xc2>
 8025168:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802516c:	f240 80e0 	bls.w	8025330 <_printf_float+0x3c0>
 8025170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025174:	2200      	movs	r2, #0
 8025176:	2300      	movs	r3, #0
 8025178:	f7ec f80e 	bl	8011198 <__aeabi_dcmpeq>
 802517c:	2800      	cmp	r0, #0
 802517e:	d034      	beq.n	80251ea <_printf_float+0x27a>
 8025180:	4a37      	ldr	r2, [pc, #220]	; (8025260 <_printf_float+0x2f0>)
 8025182:	2301      	movs	r3, #1
 8025184:	4631      	mov	r1, r6
 8025186:	4628      	mov	r0, r5
 8025188:	47b8      	blx	r7
 802518a:	3001      	adds	r0, #1
 802518c:	f43f af51 	beq.w	8025032 <_printf_float+0xc2>
 8025190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025194:	429a      	cmp	r2, r3
 8025196:	db02      	blt.n	802519e <_printf_float+0x22e>
 8025198:	6823      	ldr	r3, [r4, #0]
 802519a:	07d8      	lsls	r0, r3, #31
 802519c:	d510      	bpl.n	80251c0 <_printf_float+0x250>
 802519e:	ee18 3a10 	vmov	r3, s16
 80251a2:	4652      	mov	r2, sl
 80251a4:	4631      	mov	r1, r6
 80251a6:	4628      	mov	r0, r5
 80251a8:	47b8      	blx	r7
 80251aa:	3001      	adds	r0, #1
 80251ac:	f43f af41 	beq.w	8025032 <_printf_float+0xc2>
 80251b0:	f04f 0800 	mov.w	r8, #0
 80251b4:	f104 091a 	add.w	r9, r4, #26
 80251b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251ba:	3b01      	subs	r3, #1
 80251bc:	4543      	cmp	r3, r8
 80251be:	dc09      	bgt.n	80251d4 <_printf_float+0x264>
 80251c0:	6823      	ldr	r3, [r4, #0]
 80251c2:	079b      	lsls	r3, r3, #30
 80251c4:	f100 8105 	bmi.w	80253d2 <_printf_float+0x462>
 80251c8:	68e0      	ldr	r0, [r4, #12]
 80251ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251cc:	4298      	cmp	r0, r3
 80251ce:	bfb8      	it	lt
 80251d0:	4618      	movlt	r0, r3
 80251d2:	e730      	b.n	8025036 <_printf_float+0xc6>
 80251d4:	2301      	movs	r3, #1
 80251d6:	464a      	mov	r2, r9
 80251d8:	4631      	mov	r1, r6
 80251da:	4628      	mov	r0, r5
 80251dc:	47b8      	blx	r7
 80251de:	3001      	adds	r0, #1
 80251e0:	f43f af27 	beq.w	8025032 <_printf_float+0xc2>
 80251e4:	f108 0801 	add.w	r8, r8, #1
 80251e8:	e7e6      	b.n	80251b8 <_printf_float+0x248>
 80251ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251ec:	2b00      	cmp	r3, #0
 80251ee:	dc39      	bgt.n	8025264 <_printf_float+0x2f4>
 80251f0:	4a1b      	ldr	r2, [pc, #108]	; (8025260 <_printf_float+0x2f0>)
 80251f2:	2301      	movs	r3, #1
 80251f4:	4631      	mov	r1, r6
 80251f6:	4628      	mov	r0, r5
 80251f8:	47b8      	blx	r7
 80251fa:	3001      	adds	r0, #1
 80251fc:	f43f af19 	beq.w	8025032 <_printf_float+0xc2>
 8025200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025204:	4313      	orrs	r3, r2
 8025206:	d102      	bne.n	802520e <_printf_float+0x29e>
 8025208:	6823      	ldr	r3, [r4, #0]
 802520a:	07d9      	lsls	r1, r3, #31
 802520c:	d5d8      	bpl.n	80251c0 <_printf_float+0x250>
 802520e:	ee18 3a10 	vmov	r3, s16
 8025212:	4652      	mov	r2, sl
 8025214:	4631      	mov	r1, r6
 8025216:	4628      	mov	r0, r5
 8025218:	47b8      	blx	r7
 802521a:	3001      	adds	r0, #1
 802521c:	f43f af09 	beq.w	8025032 <_printf_float+0xc2>
 8025220:	f04f 0900 	mov.w	r9, #0
 8025224:	f104 0a1a 	add.w	sl, r4, #26
 8025228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802522a:	425b      	negs	r3, r3
 802522c:	454b      	cmp	r3, r9
 802522e:	dc01      	bgt.n	8025234 <_printf_float+0x2c4>
 8025230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025232:	e792      	b.n	802515a <_printf_float+0x1ea>
 8025234:	2301      	movs	r3, #1
 8025236:	4652      	mov	r2, sl
 8025238:	4631      	mov	r1, r6
 802523a:	4628      	mov	r0, r5
 802523c:	47b8      	blx	r7
 802523e:	3001      	adds	r0, #1
 8025240:	f43f aef7 	beq.w	8025032 <_printf_float+0xc2>
 8025244:	f109 0901 	add.w	r9, r9, #1
 8025248:	e7ee      	b.n	8025228 <_printf_float+0x2b8>
 802524a:	bf00      	nop
 802524c:	7fefffff 	.word	0x7fefffff
 8025250:	08037730 	.word	0x08037730
 8025254:	08037734 	.word	0x08037734
 8025258:	0803773c 	.word	0x0803773c
 802525c:	08037738 	.word	0x08037738
 8025260:	08037740 	.word	0x08037740
 8025264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025268:	429a      	cmp	r2, r3
 802526a:	bfa8      	it	ge
 802526c:	461a      	movge	r2, r3
 802526e:	2a00      	cmp	r2, #0
 8025270:	4691      	mov	r9, r2
 8025272:	dc37      	bgt.n	80252e4 <_printf_float+0x374>
 8025274:	f04f 0b00 	mov.w	fp, #0
 8025278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802527c:	f104 021a 	add.w	r2, r4, #26
 8025280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025282:	9305      	str	r3, [sp, #20]
 8025284:	eba3 0309 	sub.w	r3, r3, r9
 8025288:	455b      	cmp	r3, fp
 802528a:	dc33      	bgt.n	80252f4 <_printf_float+0x384>
 802528c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025290:	429a      	cmp	r2, r3
 8025292:	db3b      	blt.n	802530c <_printf_float+0x39c>
 8025294:	6823      	ldr	r3, [r4, #0]
 8025296:	07da      	lsls	r2, r3, #31
 8025298:	d438      	bmi.n	802530c <_printf_float+0x39c>
 802529a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802529c:	9a05      	ldr	r2, [sp, #20]
 802529e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80252a0:	1a9a      	subs	r2, r3, r2
 80252a2:	eba3 0901 	sub.w	r9, r3, r1
 80252a6:	4591      	cmp	r9, r2
 80252a8:	bfa8      	it	ge
 80252aa:	4691      	movge	r9, r2
 80252ac:	f1b9 0f00 	cmp.w	r9, #0
 80252b0:	dc35      	bgt.n	802531e <_printf_float+0x3ae>
 80252b2:	f04f 0800 	mov.w	r8, #0
 80252b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80252ba:	f104 0a1a 	add.w	sl, r4, #26
 80252be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80252c2:	1a9b      	subs	r3, r3, r2
 80252c4:	eba3 0309 	sub.w	r3, r3, r9
 80252c8:	4543      	cmp	r3, r8
 80252ca:	f77f af79 	ble.w	80251c0 <_printf_float+0x250>
 80252ce:	2301      	movs	r3, #1
 80252d0:	4652      	mov	r2, sl
 80252d2:	4631      	mov	r1, r6
 80252d4:	4628      	mov	r0, r5
 80252d6:	47b8      	blx	r7
 80252d8:	3001      	adds	r0, #1
 80252da:	f43f aeaa 	beq.w	8025032 <_printf_float+0xc2>
 80252de:	f108 0801 	add.w	r8, r8, #1
 80252e2:	e7ec      	b.n	80252be <_printf_float+0x34e>
 80252e4:	4613      	mov	r3, r2
 80252e6:	4631      	mov	r1, r6
 80252e8:	4642      	mov	r2, r8
 80252ea:	4628      	mov	r0, r5
 80252ec:	47b8      	blx	r7
 80252ee:	3001      	adds	r0, #1
 80252f0:	d1c0      	bne.n	8025274 <_printf_float+0x304>
 80252f2:	e69e      	b.n	8025032 <_printf_float+0xc2>
 80252f4:	2301      	movs	r3, #1
 80252f6:	4631      	mov	r1, r6
 80252f8:	4628      	mov	r0, r5
 80252fa:	9205      	str	r2, [sp, #20]
 80252fc:	47b8      	blx	r7
 80252fe:	3001      	adds	r0, #1
 8025300:	f43f ae97 	beq.w	8025032 <_printf_float+0xc2>
 8025304:	9a05      	ldr	r2, [sp, #20]
 8025306:	f10b 0b01 	add.w	fp, fp, #1
 802530a:	e7b9      	b.n	8025280 <_printf_float+0x310>
 802530c:	ee18 3a10 	vmov	r3, s16
 8025310:	4652      	mov	r2, sl
 8025312:	4631      	mov	r1, r6
 8025314:	4628      	mov	r0, r5
 8025316:	47b8      	blx	r7
 8025318:	3001      	adds	r0, #1
 802531a:	d1be      	bne.n	802529a <_printf_float+0x32a>
 802531c:	e689      	b.n	8025032 <_printf_float+0xc2>
 802531e:	9a05      	ldr	r2, [sp, #20]
 8025320:	464b      	mov	r3, r9
 8025322:	4442      	add	r2, r8
 8025324:	4631      	mov	r1, r6
 8025326:	4628      	mov	r0, r5
 8025328:	47b8      	blx	r7
 802532a:	3001      	adds	r0, #1
 802532c:	d1c1      	bne.n	80252b2 <_printf_float+0x342>
 802532e:	e680      	b.n	8025032 <_printf_float+0xc2>
 8025330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025332:	2a01      	cmp	r2, #1
 8025334:	dc01      	bgt.n	802533a <_printf_float+0x3ca>
 8025336:	07db      	lsls	r3, r3, #31
 8025338:	d538      	bpl.n	80253ac <_printf_float+0x43c>
 802533a:	2301      	movs	r3, #1
 802533c:	4642      	mov	r2, r8
 802533e:	4631      	mov	r1, r6
 8025340:	4628      	mov	r0, r5
 8025342:	47b8      	blx	r7
 8025344:	3001      	adds	r0, #1
 8025346:	f43f ae74 	beq.w	8025032 <_printf_float+0xc2>
 802534a:	ee18 3a10 	vmov	r3, s16
 802534e:	4652      	mov	r2, sl
 8025350:	4631      	mov	r1, r6
 8025352:	4628      	mov	r0, r5
 8025354:	47b8      	blx	r7
 8025356:	3001      	adds	r0, #1
 8025358:	f43f ae6b 	beq.w	8025032 <_printf_float+0xc2>
 802535c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025360:	2200      	movs	r2, #0
 8025362:	2300      	movs	r3, #0
 8025364:	f7eb ff18 	bl	8011198 <__aeabi_dcmpeq>
 8025368:	b9d8      	cbnz	r0, 80253a2 <_printf_float+0x432>
 802536a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802536c:	f108 0201 	add.w	r2, r8, #1
 8025370:	3b01      	subs	r3, #1
 8025372:	4631      	mov	r1, r6
 8025374:	4628      	mov	r0, r5
 8025376:	47b8      	blx	r7
 8025378:	3001      	adds	r0, #1
 802537a:	d10e      	bne.n	802539a <_printf_float+0x42a>
 802537c:	e659      	b.n	8025032 <_printf_float+0xc2>
 802537e:	2301      	movs	r3, #1
 8025380:	4652      	mov	r2, sl
 8025382:	4631      	mov	r1, r6
 8025384:	4628      	mov	r0, r5
 8025386:	47b8      	blx	r7
 8025388:	3001      	adds	r0, #1
 802538a:	f43f ae52 	beq.w	8025032 <_printf_float+0xc2>
 802538e:	f108 0801 	add.w	r8, r8, #1
 8025392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025394:	3b01      	subs	r3, #1
 8025396:	4543      	cmp	r3, r8
 8025398:	dcf1      	bgt.n	802537e <_printf_float+0x40e>
 802539a:	464b      	mov	r3, r9
 802539c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80253a0:	e6dc      	b.n	802515c <_printf_float+0x1ec>
 80253a2:	f04f 0800 	mov.w	r8, #0
 80253a6:	f104 0a1a 	add.w	sl, r4, #26
 80253aa:	e7f2      	b.n	8025392 <_printf_float+0x422>
 80253ac:	2301      	movs	r3, #1
 80253ae:	4642      	mov	r2, r8
 80253b0:	e7df      	b.n	8025372 <_printf_float+0x402>
 80253b2:	2301      	movs	r3, #1
 80253b4:	464a      	mov	r2, r9
 80253b6:	4631      	mov	r1, r6
 80253b8:	4628      	mov	r0, r5
 80253ba:	47b8      	blx	r7
 80253bc:	3001      	adds	r0, #1
 80253be:	f43f ae38 	beq.w	8025032 <_printf_float+0xc2>
 80253c2:	f108 0801 	add.w	r8, r8, #1
 80253c6:	68e3      	ldr	r3, [r4, #12]
 80253c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80253ca:	1a5b      	subs	r3, r3, r1
 80253cc:	4543      	cmp	r3, r8
 80253ce:	dcf0      	bgt.n	80253b2 <_printf_float+0x442>
 80253d0:	e6fa      	b.n	80251c8 <_printf_float+0x258>
 80253d2:	f04f 0800 	mov.w	r8, #0
 80253d6:	f104 0919 	add.w	r9, r4, #25
 80253da:	e7f4      	b.n	80253c6 <_printf_float+0x456>

080253dc <_printf_common>:
 80253dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253e0:	4616      	mov	r6, r2
 80253e2:	4699      	mov	r9, r3
 80253e4:	688a      	ldr	r2, [r1, #8]
 80253e6:	690b      	ldr	r3, [r1, #16]
 80253e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80253ec:	4293      	cmp	r3, r2
 80253ee:	bfb8      	it	lt
 80253f0:	4613      	movlt	r3, r2
 80253f2:	6033      	str	r3, [r6, #0]
 80253f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80253f8:	4607      	mov	r7, r0
 80253fa:	460c      	mov	r4, r1
 80253fc:	b10a      	cbz	r2, 8025402 <_printf_common+0x26>
 80253fe:	3301      	adds	r3, #1
 8025400:	6033      	str	r3, [r6, #0]
 8025402:	6823      	ldr	r3, [r4, #0]
 8025404:	0699      	lsls	r1, r3, #26
 8025406:	bf42      	ittt	mi
 8025408:	6833      	ldrmi	r3, [r6, #0]
 802540a:	3302      	addmi	r3, #2
 802540c:	6033      	strmi	r3, [r6, #0]
 802540e:	6825      	ldr	r5, [r4, #0]
 8025410:	f015 0506 	ands.w	r5, r5, #6
 8025414:	d106      	bne.n	8025424 <_printf_common+0x48>
 8025416:	f104 0a19 	add.w	sl, r4, #25
 802541a:	68e3      	ldr	r3, [r4, #12]
 802541c:	6832      	ldr	r2, [r6, #0]
 802541e:	1a9b      	subs	r3, r3, r2
 8025420:	42ab      	cmp	r3, r5
 8025422:	dc26      	bgt.n	8025472 <_printf_common+0x96>
 8025424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025428:	1e13      	subs	r3, r2, #0
 802542a:	6822      	ldr	r2, [r4, #0]
 802542c:	bf18      	it	ne
 802542e:	2301      	movne	r3, #1
 8025430:	0692      	lsls	r2, r2, #26
 8025432:	d42b      	bmi.n	802548c <_printf_common+0xb0>
 8025434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025438:	4649      	mov	r1, r9
 802543a:	4638      	mov	r0, r7
 802543c:	47c0      	blx	r8
 802543e:	3001      	adds	r0, #1
 8025440:	d01e      	beq.n	8025480 <_printf_common+0xa4>
 8025442:	6823      	ldr	r3, [r4, #0]
 8025444:	68e5      	ldr	r5, [r4, #12]
 8025446:	6832      	ldr	r2, [r6, #0]
 8025448:	f003 0306 	and.w	r3, r3, #6
 802544c:	2b04      	cmp	r3, #4
 802544e:	bf08      	it	eq
 8025450:	1aad      	subeq	r5, r5, r2
 8025452:	68a3      	ldr	r3, [r4, #8]
 8025454:	6922      	ldr	r2, [r4, #16]
 8025456:	bf0c      	ite	eq
 8025458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802545c:	2500      	movne	r5, #0
 802545e:	4293      	cmp	r3, r2
 8025460:	bfc4      	itt	gt
 8025462:	1a9b      	subgt	r3, r3, r2
 8025464:	18ed      	addgt	r5, r5, r3
 8025466:	2600      	movs	r6, #0
 8025468:	341a      	adds	r4, #26
 802546a:	42b5      	cmp	r5, r6
 802546c:	d11a      	bne.n	80254a4 <_printf_common+0xc8>
 802546e:	2000      	movs	r0, #0
 8025470:	e008      	b.n	8025484 <_printf_common+0xa8>
 8025472:	2301      	movs	r3, #1
 8025474:	4652      	mov	r2, sl
 8025476:	4649      	mov	r1, r9
 8025478:	4638      	mov	r0, r7
 802547a:	47c0      	blx	r8
 802547c:	3001      	adds	r0, #1
 802547e:	d103      	bne.n	8025488 <_printf_common+0xac>
 8025480:	f04f 30ff 	mov.w	r0, #4294967295
 8025484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025488:	3501      	adds	r5, #1
 802548a:	e7c6      	b.n	802541a <_printf_common+0x3e>
 802548c:	18e1      	adds	r1, r4, r3
 802548e:	1c5a      	adds	r2, r3, #1
 8025490:	2030      	movs	r0, #48	; 0x30
 8025492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025496:	4422      	add	r2, r4
 8025498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802549c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80254a0:	3302      	adds	r3, #2
 80254a2:	e7c7      	b.n	8025434 <_printf_common+0x58>
 80254a4:	2301      	movs	r3, #1
 80254a6:	4622      	mov	r2, r4
 80254a8:	4649      	mov	r1, r9
 80254aa:	4638      	mov	r0, r7
 80254ac:	47c0      	blx	r8
 80254ae:	3001      	adds	r0, #1
 80254b0:	d0e6      	beq.n	8025480 <_printf_common+0xa4>
 80254b2:	3601      	adds	r6, #1
 80254b4:	e7d9      	b.n	802546a <_printf_common+0x8e>
	...

080254b8 <_printf_i>:
 80254b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80254bc:	7e0f      	ldrb	r7, [r1, #24]
 80254be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80254c0:	2f78      	cmp	r7, #120	; 0x78
 80254c2:	4691      	mov	r9, r2
 80254c4:	4680      	mov	r8, r0
 80254c6:	460c      	mov	r4, r1
 80254c8:	469a      	mov	sl, r3
 80254ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80254ce:	d807      	bhi.n	80254e0 <_printf_i+0x28>
 80254d0:	2f62      	cmp	r7, #98	; 0x62
 80254d2:	d80a      	bhi.n	80254ea <_printf_i+0x32>
 80254d4:	2f00      	cmp	r7, #0
 80254d6:	f000 80d8 	beq.w	802568a <_printf_i+0x1d2>
 80254da:	2f58      	cmp	r7, #88	; 0x58
 80254dc:	f000 80a3 	beq.w	8025626 <_printf_i+0x16e>
 80254e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80254e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80254e8:	e03a      	b.n	8025560 <_printf_i+0xa8>
 80254ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80254ee:	2b15      	cmp	r3, #21
 80254f0:	d8f6      	bhi.n	80254e0 <_printf_i+0x28>
 80254f2:	a101      	add	r1, pc, #4	; (adr r1, 80254f8 <_printf_i+0x40>)
 80254f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80254f8:	08025551 	.word	0x08025551
 80254fc:	08025565 	.word	0x08025565
 8025500:	080254e1 	.word	0x080254e1
 8025504:	080254e1 	.word	0x080254e1
 8025508:	080254e1 	.word	0x080254e1
 802550c:	080254e1 	.word	0x080254e1
 8025510:	08025565 	.word	0x08025565
 8025514:	080254e1 	.word	0x080254e1
 8025518:	080254e1 	.word	0x080254e1
 802551c:	080254e1 	.word	0x080254e1
 8025520:	080254e1 	.word	0x080254e1
 8025524:	08025671 	.word	0x08025671
 8025528:	08025595 	.word	0x08025595
 802552c:	08025653 	.word	0x08025653
 8025530:	080254e1 	.word	0x080254e1
 8025534:	080254e1 	.word	0x080254e1
 8025538:	08025693 	.word	0x08025693
 802553c:	080254e1 	.word	0x080254e1
 8025540:	08025595 	.word	0x08025595
 8025544:	080254e1 	.word	0x080254e1
 8025548:	080254e1 	.word	0x080254e1
 802554c:	0802565b 	.word	0x0802565b
 8025550:	682b      	ldr	r3, [r5, #0]
 8025552:	1d1a      	adds	r2, r3, #4
 8025554:	681b      	ldr	r3, [r3, #0]
 8025556:	602a      	str	r2, [r5, #0]
 8025558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802555c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025560:	2301      	movs	r3, #1
 8025562:	e0a3      	b.n	80256ac <_printf_i+0x1f4>
 8025564:	6820      	ldr	r0, [r4, #0]
 8025566:	6829      	ldr	r1, [r5, #0]
 8025568:	0606      	lsls	r6, r0, #24
 802556a:	f101 0304 	add.w	r3, r1, #4
 802556e:	d50a      	bpl.n	8025586 <_printf_i+0xce>
 8025570:	680e      	ldr	r6, [r1, #0]
 8025572:	602b      	str	r3, [r5, #0]
 8025574:	2e00      	cmp	r6, #0
 8025576:	da03      	bge.n	8025580 <_printf_i+0xc8>
 8025578:	232d      	movs	r3, #45	; 0x2d
 802557a:	4276      	negs	r6, r6
 802557c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025580:	485e      	ldr	r0, [pc, #376]	; (80256fc <_printf_i+0x244>)
 8025582:	230a      	movs	r3, #10
 8025584:	e019      	b.n	80255ba <_printf_i+0x102>
 8025586:	680e      	ldr	r6, [r1, #0]
 8025588:	602b      	str	r3, [r5, #0]
 802558a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802558e:	bf18      	it	ne
 8025590:	b236      	sxthne	r6, r6
 8025592:	e7ef      	b.n	8025574 <_printf_i+0xbc>
 8025594:	682b      	ldr	r3, [r5, #0]
 8025596:	6820      	ldr	r0, [r4, #0]
 8025598:	1d19      	adds	r1, r3, #4
 802559a:	6029      	str	r1, [r5, #0]
 802559c:	0601      	lsls	r1, r0, #24
 802559e:	d501      	bpl.n	80255a4 <_printf_i+0xec>
 80255a0:	681e      	ldr	r6, [r3, #0]
 80255a2:	e002      	b.n	80255aa <_printf_i+0xf2>
 80255a4:	0646      	lsls	r6, r0, #25
 80255a6:	d5fb      	bpl.n	80255a0 <_printf_i+0xe8>
 80255a8:	881e      	ldrh	r6, [r3, #0]
 80255aa:	4854      	ldr	r0, [pc, #336]	; (80256fc <_printf_i+0x244>)
 80255ac:	2f6f      	cmp	r7, #111	; 0x6f
 80255ae:	bf0c      	ite	eq
 80255b0:	2308      	moveq	r3, #8
 80255b2:	230a      	movne	r3, #10
 80255b4:	2100      	movs	r1, #0
 80255b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80255ba:	6865      	ldr	r5, [r4, #4]
 80255bc:	60a5      	str	r5, [r4, #8]
 80255be:	2d00      	cmp	r5, #0
 80255c0:	bfa2      	ittt	ge
 80255c2:	6821      	ldrge	r1, [r4, #0]
 80255c4:	f021 0104 	bicge.w	r1, r1, #4
 80255c8:	6021      	strge	r1, [r4, #0]
 80255ca:	b90e      	cbnz	r6, 80255d0 <_printf_i+0x118>
 80255cc:	2d00      	cmp	r5, #0
 80255ce:	d04d      	beq.n	802566c <_printf_i+0x1b4>
 80255d0:	4615      	mov	r5, r2
 80255d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80255d6:	fb03 6711 	mls	r7, r3, r1, r6
 80255da:	5dc7      	ldrb	r7, [r0, r7]
 80255dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80255e0:	4637      	mov	r7, r6
 80255e2:	42bb      	cmp	r3, r7
 80255e4:	460e      	mov	r6, r1
 80255e6:	d9f4      	bls.n	80255d2 <_printf_i+0x11a>
 80255e8:	2b08      	cmp	r3, #8
 80255ea:	d10b      	bne.n	8025604 <_printf_i+0x14c>
 80255ec:	6823      	ldr	r3, [r4, #0]
 80255ee:	07de      	lsls	r6, r3, #31
 80255f0:	d508      	bpl.n	8025604 <_printf_i+0x14c>
 80255f2:	6923      	ldr	r3, [r4, #16]
 80255f4:	6861      	ldr	r1, [r4, #4]
 80255f6:	4299      	cmp	r1, r3
 80255f8:	bfde      	ittt	le
 80255fa:	2330      	movle	r3, #48	; 0x30
 80255fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025600:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025604:	1b52      	subs	r2, r2, r5
 8025606:	6122      	str	r2, [r4, #16]
 8025608:	f8cd a000 	str.w	sl, [sp]
 802560c:	464b      	mov	r3, r9
 802560e:	aa03      	add	r2, sp, #12
 8025610:	4621      	mov	r1, r4
 8025612:	4640      	mov	r0, r8
 8025614:	f7ff fee2 	bl	80253dc <_printf_common>
 8025618:	3001      	adds	r0, #1
 802561a:	d14c      	bne.n	80256b6 <_printf_i+0x1fe>
 802561c:	f04f 30ff 	mov.w	r0, #4294967295
 8025620:	b004      	add	sp, #16
 8025622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025626:	4835      	ldr	r0, [pc, #212]	; (80256fc <_printf_i+0x244>)
 8025628:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802562c:	6829      	ldr	r1, [r5, #0]
 802562e:	6823      	ldr	r3, [r4, #0]
 8025630:	f851 6b04 	ldr.w	r6, [r1], #4
 8025634:	6029      	str	r1, [r5, #0]
 8025636:	061d      	lsls	r5, r3, #24
 8025638:	d514      	bpl.n	8025664 <_printf_i+0x1ac>
 802563a:	07df      	lsls	r7, r3, #31
 802563c:	bf44      	itt	mi
 802563e:	f043 0320 	orrmi.w	r3, r3, #32
 8025642:	6023      	strmi	r3, [r4, #0]
 8025644:	b91e      	cbnz	r6, 802564e <_printf_i+0x196>
 8025646:	6823      	ldr	r3, [r4, #0]
 8025648:	f023 0320 	bic.w	r3, r3, #32
 802564c:	6023      	str	r3, [r4, #0]
 802564e:	2310      	movs	r3, #16
 8025650:	e7b0      	b.n	80255b4 <_printf_i+0xfc>
 8025652:	6823      	ldr	r3, [r4, #0]
 8025654:	f043 0320 	orr.w	r3, r3, #32
 8025658:	6023      	str	r3, [r4, #0]
 802565a:	2378      	movs	r3, #120	; 0x78
 802565c:	4828      	ldr	r0, [pc, #160]	; (8025700 <_printf_i+0x248>)
 802565e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025662:	e7e3      	b.n	802562c <_printf_i+0x174>
 8025664:	0659      	lsls	r1, r3, #25
 8025666:	bf48      	it	mi
 8025668:	b2b6      	uxthmi	r6, r6
 802566a:	e7e6      	b.n	802563a <_printf_i+0x182>
 802566c:	4615      	mov	r5, r2
 802566e:	e7bb      	b.n	80255e8 <_printf_i+0x130>
 8025670:	682b      	ldr	r3, [r5, #0]
 8025672:	6826      	ldr	r6, [r4, #0]
 8025674:	6961      	ldr	r1, [r4, #20]
 8025676:	1d18      	adds	r0, r3, #4
 8025678:	6028      	str	r0, [r5, #0]
 802567a:	0635      	lsls	r5, r6, #24
 802567c:	681b      	ldr	r3, [r3, #0]
 802567e:	d501      	bpl.n	8025684 <_printf_i+0x1cc>
 8025680:	6019      	str	r1, [r3, #0]
 8025682:	e002      	b.n	802568a <_printf_i+0x1d2>
 8025684:	0670      	lsls	r0, r6, #25
 8025686:	d5fb      	bpl.n	8025680 <_printf_i+0x1c8>
 8025688:	8019      	strh	r1, [r3, #0]
 802568a:	2300      	movs	r3, #0
 802568c:	6123      	str	r3, [r4, #16]
 802568e:	4615      	mov	r5, r2
 8025690:	e7ba      	b.n	8025608 <_printf_i+0x150>
 8025692:	682b      	ldr	r3, [r5, #0]
 8025694:	1d1a      	adds	r2, r3, #4
 8025696:	602a      	str	r2, [r5, #0]
 8025698:	681d      	ldr	r5, [r3, #0]
 802569a:	6862      	ldr	r2, [r4, #4]
 802569c:	2100      	movs	r1, #0
 802569e:	4628      	mov	r0, r5
 80256a0:	f7eb f906 	bl	80108b0 <memchr>
 80256a4:	b108      	cbz	r0, 80256aa <_printf_i+0x1f2>
 80256a6:	1b40      	subs	r0, r0, r5
 80256a8:	6060      	str	r0, [r4, #4]
 80256aa:	6863      	ldr	r3, [r4, #4]
 80256ac:	6123      	str	r3, [r4, #16]
 80256ae:	2300      	movs	r3, #0
 80256b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80256b4:	e7a8      	b.n	8025608 <_printf_i+0x150>
 80256b6:	6923      	ldr	r3, [r4, #16]
 80256b8:	462a      	mov	r2, r5
 80256ba:	4649      	mov	r1, r9
 80256bc:	4640      	mov	r0, r8
 80256be:	47d0      	blx	sl
 80256c0:	3001      	adds	r0, #1
 80256c2:	d0ab      	beq.n	802561c <_printf_i+0x164>
 80256c4:	6823      	ldr	r3, [r4, #0]
 80256c6:	079b      	lsls	r3, r3, #30
 80256c8:	d413      	bmi.n	80256f2 <_printf_i+0x23a>
 80256ca:	68e0      	ldr	r0, [r4, #12]
 80256cc:	9b03      	ldr	r3, [sp, #12]
 80256ce:	4298      	cmp	r0, r3
 80256d0:	bfb8      	it	lt
 80256d2:	4618      	movlt	r0, r3
 80256d4:	e7a4      	b.n	8025620 <_printf_i+0x168>
 80256d6:	2301      	movs	r3, #1
 80256d8:	4632      	mov	r2, r6
 80256da:	4649      	mov	r1, r9
 80256dc:	4640      	mov	r0, r8
 80256de:	47d0      	blx	sl
 80256e0:	3001      	adds	r0, #1
 80256e2:	d09b      	beq.n	802561c <_printf_i+0x164>
 80256e4:	3501      	adds	r5, #1
 80256e6:	68e3      	ldr	r3, [r4, #12]
 80256e8:	9903      	ldr	r1, [sp, #12]
 80256ea:	1a5b      	subs	r3, r3, r1
 80256ec:	42ab      	cmp	r3, r5
 80256ee:	dcf2      	bgt.n	80256d6 <_printf_i+0x21e>
 80256f0:	e7eb      	b.n	80256ca <_printf_i+0x212>
 80256f2:	2500      	movs	r5, #0
 80256f4:	f104 0619 	add.w	r6, r4, #25
 80256f8:	e7f5      	b.n	80256e6 <_printf_i+0x22e>
 80256fa:	bf00      	nop
 80256fc:	08037742 	.word	0x08037742
 8025700:	08037753 	.word	0x08037753

08025704 <_sbrk_r>:
 8025704:	b538      	push	{r3, r4, r5, lr}
 8025706:	4d06      	ldr	r5, [pc, #24]	; (8025720 <_sbrk_r+0x1c>)
 8025708:	2300      	movs	r3, #0
 802570a:	4604      	mov	r4, r0
 802570c:	4608      	mov	r0, r1
 802570e:	602b      	str	r3, [r5, #0]
 8025710:	f7ed f970 	bl	80129f4 <_sbrk>
 8025714:	1c43      	adds	r3, r0, #1
 8025716:	d102      	bne.n	802571e <_sbrk_r+0x1a>
 8025718:	682b      	ldr	r3, [r5, #0]
 802571a:	b103      	cbz	r3, 802571e <_sbrk_r+0x1a>
 802571c:	6023      	str	r3, [r4, #0]
 802571e:	bd38      	pop	{r3, r4, r5, pc}
 8025720:	2000b3b0 	.word	0x2000b3b0

08025724 <strcpy>:
 8025724:	4603      	mov	r3, r0
 8025726:	f811 2b01 	ldrb.w	r2, [r1], #1
 802572a:	f803 2b01 	strb.w	r2, [r3], #1
 802572e:	2a00      	cmp	r2, #0
 8025730:	d1f9      	bne.n	8025726 <strcpy+0x2>
 8025732:	4770      	bx	lr

08025734 <sulp>:
 8025734:	b570      	push	{r4, r5, r6, lr}
 8025736:	4604      	mov	r4, r0
 8025738:	460d      	mov	r5, r1
 802573a:	ec45 4b10 	vmov	d0, r4, r5
 802573e:	4616      	mov	r6, r2
 8025740:	f002 ff8a 	bl	8028658 <__ulp>
 8025744:	ec51 0b10 	vmov	r0, r1, d0
 8025748:	b17e      	cbz	r6, 802576a <sulp+0x36>
 802574a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802574e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8025752:	2b00      	cmp	r3, #0
 8025754:	dd09      	ble.n	802576a <sulp+0x36>
 8025756:	051b      	lsls	r3, r3, #20
 8025758:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802575c:	2400      	movs	r4, #0
 802575e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8025762:	4622      	mov	r2, r4
 8025764:	462b      	mov	r3, r5
 8025766:	f7eb faaf 	bl	8010cc8 <__aeabi_dmul>
 802576a:	bd70      	pop	{r4, r5, r6, pc}
 802576c:	0000      	movs	r0, r0
	...

08025770 <_strtod_l>:
 8025770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025774:	ed2d 8b02 	vpush	{d8}
 8025778:	b09d      	sub	sp, #116	; 0x74
 802577a:	461f      	mov	r7, r3
 802577c:	2300      	movs	r3, #0
 802577e:	9318      	str	r3, [sp, #96]	; 0x60
 8025780:	4ba2      	ldr	r3, [pc, #648]	; (8025a0c <_strtod_l+0x29c>)
 8025782:	9213      	str	r2, [sp, #76]	; 0x4c
 8025784:	681b      	ldr	r3, [r3, #0]
 8025786:	9305      	str	r3, [sp, #20]
 8025788:	4604      	mov	r4, r0
 802578a:	4618      	mov	r0, r3
 802578c:	4688      	mov	r8, r1
 802578e:	f7eb f881 	bl	8010894 <strlen>
 8025792:	f04f 0a00 	mov.w	sl, #0
 8025796:	4605      	mov	r5, r0
 8025798:	f04f 0b00 	mov.w	fp, #0
 802579c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80257a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257a2:	781a      	ldrb	r2, [r3, #0]
 80257a4:	2a2b      	cmp	r2, #43	; 0x2b
 80257a6:	d04e      	beq.n	8025846 <_strtod_l+0xd6>
 80257a8:	d83b      	bhi.n	8025822 <_strtod_l+0xb2>
 80257aa:	2a0d      	cmp	r2, #13
 80257ac:	d834      	bhi.n	8025818 <_strtod_l+0xa8>
 80257ae:	2a08      	cmp	r2, #8
 80257b0:	d834      	bhi.n	802581c <_strtod_l+0xac>
 80257b2:	2a00      	cmp	r2, #0
 80257b4:	d03e      	beq.n	8025834 <_strtod_l+0xc4>
 80257b6:	2300      	movs	r3, #0
 80257b8:	930a      	str	r3, [sp, #40]	; 0x28
 80257ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80257bc:	7833      	ldrb	r3, [r6, #0]
 80257be:	2b30      	cmp	r3, #48	; 0x30
 80257c0:	f040 80b0 	bne.w	8025924 <_strtod_l+0x1b4>
 80257c4:	7873      	ldrb	r3, [r6, #1]
 80257c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80257ca:	2b58      	cmp	r3, #88	; 0x58
 80257cc:	d168      	bne.n	80258a0 <_strtod_l+0x130>
 80257ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80257d0:	9301      	str	r3, [sp, #4]
 80257d2:	ab18      	add	r3, sp, #96	; 0x60
 80257d4:	9702      	str	r7, [sp, #8]
 80257d6:	9300      	str	r3, [sp, #0]
 80257d8:	4a8d      	ldr	r2, [pc, #564]	; (8025a10 <_strtod_l+0x2a0>)
 80257da:	ab19      	add	r3, sp, #100	; 0x64
 80257dc:	a917      	add	r1, sp, #92	; 0x5c
 80257de:	4620      	mov	r0, r4
 80257e0:	f002 f836 	bl	8027850 <__gethex>
 80257e4:	f010 0707 	ands.w	r7, r0, #7
 80257e8:	4605      	mov	r5, r0
 80257ea:	d005      	beq.n	80257f8 <_strtod_l+0x88>
 80257ec:	2f06      	cmp	r7, #6
 80257ee:	d12c      	bne.n	802584a <_strtod_l+0xda>
 80257f0:	3601      	adds	r6, #1
 80257f2:	2300      	movs	r3, #0
 80257f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80257f6:	930a      	str	r3, [sp, #40]	; 0x28
 80257f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	f040 8590 	bne.w	8026320 <_strtod_l+0xbb0>
 8025800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025802:	b1eb      	cbz	r3, 8025840 <_strtod_l+0xd0>
 8025804:	4652      	mov	r2, sl
 8025806:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802580a:	ec43 2b10 	vmov	d0, r2, r3
 802580e:	b01d      	add	sp, #116	; 0x74
 8025810:	ecbd 8b02 	vpop	{d8}
 8025814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025818:	2a20      	cmp	r2, #32
 802581a:	d1cc      	bne.n	80257b6 <_strtod_l+0x46>
 802581c:	3301      	adds	r3, #1
 802581e:	9317      	str	r3, [sp, #92]	; 0x5c
 8025820:	e7be      	b.n	80257a0 <_strtod_l+0x30>
 8025822:	2a2d      	cmp	r2, #45	; 0x2d
 8025824:	d1c7      	bne.n	80257b6 <_strtod_l+0x46>
 8025826:	2201      	movs	r2, #1
 8025828:	920a      	str	r2, [sp, #40]	; 0x28
 802582a:	1c5a      	adds	r2, r3, #1
 802582c:	9217      	str	r2, [sp, #92]	; 0x5c
 802582e:	785b      	ldrb	r3, [r3, #1]
 8025830:	2b00      	cmp	r3, #0
 8025832:	d1c2      	bne.n	80257ba <_strtod_l+0x4a>
 8025834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025836:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 802583a:	2b00      	cmp	r3, #0
 802583c:	f040 856e 	bne.w	802631c <_strtod_l+0xbac>
 8025840:	4652      	mov	r2, sl
 8025842:	465b      	mov	r3, fp
 8025844:	e7e1      	b.n	802580a <_strtod_l+0x9a>
 8025846:	2200      	movs	r2, #0
 8025848:	e7ee      	b.n	8025828 <_strtod_l+0xb8>
 802584a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802584c:	b13a      	cbz	r2, 802585e <_strtod_l+0xee>
 802584e:	2135      	movs	r1, #53	; 0x35
 8025850:	a81a      	add	r0, sp, #104	; 0x68
 8025852:	f003 f80c 	bl	802886e <__copybits>
 8025856:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025858:	4620      	mov	r0, r4
 802585a:	f002 fbcb 	bl	8027ff4 <_Bfree>
 802585e:	3f01      	subs	r7, #1
 8025860:	2f04      	cmp	r7, #4
 8025862:	d806      	bhi.n	8025872 <_strtod_l+0x102>
 8025864:	e8df f007 	tbb	[pc, r7]
 8025868:	1714030a 	.word	0x1714030a
 802586c:	0a          	.byte	0x0a
 802586d:	00          	.byte	0x00
 802586e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8025872:	0728      	lsls	r0, r5, #28
 8025874:	d5c0      	bpl.n	80257f8 <_strtod_l+0x88>
 8025876:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802587a:	e7bd      	b.n	80257f8 <_strtod_l+0x88>
 802587c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8025880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8025882:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8025886:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802588a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802588e:	e7f0      	b.n	8025872 <_strtod_l+0x102>
 8025890:	f8df b180 	ldr.w	fp, [pc, #384]	; 8025a14 <_strtod_l+0x2a4>
 8025894:	e7ed      	b.n	8025872 <_strtod_l+0x102>
 8025896:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 802589a:	f04f 3aff 	mov.w	sl, #4294967295
 802589e:	e7e8      	b.n	8025872 <_strtod_l+0x102>
 80258a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80258a2:	1c5a      	adds	r2, r3, #1
 80258a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80258a6:	785b      	ldrb	r3, [r3, #1]
 80258a8:	2b30      	cmp	r3, #48	; 0x30
 80258aa:	d0f9      	beq.n	80258a0 <_strtod_l+0x130>
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	d0a3      	beq.n	80257f8 <_strtod_l+0x88>
 80258b0:	2301      	movs	r3, #1
 80258b2:	f04f 0900 	mov.w	r9, #0
 80258b6:	9304      	str	r3, [sp, #16]
 80258b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80258ba:	9308      	str	r3, [sp, #32]
 80258bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80258c0:	464f      	mov	r7, r9
 80258c2:	220a      	movs	r2, #10
 80258c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80258c6:	7806      	ldrb	r6, [r0, #0]
 80258c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80258cc:	b2d9      	uxtb	r1, r3
 80258ce:	2909      	cmp	r1, #9
 80258d0:	d92a      	bls.n	8025928 <_strtod_l+0x1b8>
 80258d2:	9905      	ldr	r1, [sp, #20]
 80258d4:	462a      	mov	r2, r5
 80258d6:	f003 f9d0 	bl	8028c7a <strncmp>
 80258da:	b398      	cbz	r0, 8025944 <_strtod_l+0x1d4>
 80258dc:	2000      	movs	r0, #0
 80258de:	4632      	mov	r2, r6
 80258e0:	463d      	mov	r5, r7
 80258e2:	9005      	str	r0, [sp, #20]
 80258e4:	4603      	mov	r3, r0
 80258e6:	2a65      	cmp	r2, #101	; 0x65
 80258e8:	d001      	beq.n	80258ee <_strtod_l+0x17e>
 80258ea:	2a45      	cmp	r2, #69	; 0x45
 80258ec:	d118      	bne.n	8025920 <_strtod_l+0x1b0>
 80258ee:	b91d      	cbnz	r5, 80258f8 <_strtod_l+0x188>
 80258f0:	9a04      	ldr	r2, [sp, #16]
 80258f2:	4302      	orrs	r2, r0
 80258f4:	d09e      	beq.n	8025834 <_strtod_l+0xc4>
 80258f6:	2500      	movs	r5, #0
 80258f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80258fc:	f108 0201 	add.w	r2, r8, #1
 8025900:	9217      	str	r2, [sp, #92]	; 0x5c
 8025902:	f898 2001 	ldrb.w	r2, [r8, #1]
 8025906:	2a2b      	cmp	r2, #43	; 0x2b
 8025908:	d075      	beq.n	80259f6 <_strtod_l+0x286>
 802590a:	2a2d      	cmp	r2, #45	; 0x2d
 802590c:	d07b      	beq.n	8025a06 <_strtod_l+0x296>
 802590e:	f04f 0c00 	mov.w	ip, #0
 8025912:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8025916:	2909      	cmp	r1, #9
 8025918:	f240 8082 	bls.w	8025a20 <_strtod_l+0x2b0>
 802591c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8025920:	2600      	movs	r6, #0
 8025922:	e09d      	b.n	8025a60 <_strtod_l+0x2f0>
 8025924:	2300      	movs	r3, #0
 8025926:	e7c4      	b.n	80258b2 <_strtod_l+0x142>
 8025928:	2f08      	cmp	r7, #8
 802592a:	bfd8      	it	le
 802592c:	9907      	ldrle	r1, [sp, #28]
 802592e:	f100 0001 	add.w	r0, r0, #1
 8025932:	bfda      	itte	le
 8025934:	fb02 3301 	mlale	r3, r2, r1, r3
 8025938:	9307      	strle	r3, [sp, #28]
 802593a:	fb02 3909 	mlagt	r9, r2, r9, r3
 802593e:	3701      	adds	r7, #1
 8025940:	9017      	str	r0, [sp, #92]	; 0x5c
 8025942:	e7bf      	b.n	80258c4 <_strtod_l+0x154>
 8025944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025946:	195a      	adds	r2, r3, r5
 8025948:	9217      	str	r2, [sp, #92]	; 0x5c
 802594a:	5d5a      	ldrb	r2, [r3, r5]
 802594c:	2f00      	cmp	r7, #0
 802594e:	d037      	beq.n	80259c0 <_strtod_l+0x250>
 8025950:	9005      	str	r0, [sp, #20]
 8025952:	463d      	mov	r5, r7
 8025954:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8025958:	2b09      	cmp	r3, #9
 802595a:	d912      	bls.n	8025982 <_strtod_l+0x212>
 802595c:	2301      	movs	r3, #1
 802595e:	e7c2      	b.n	80258e6 <_strtod_l+0x176>
 8025960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025962:	1c5a      	adds	r2, r3, #1
 8025964:	9217      	str	r2, [sp, #92]	; 0x5c
 8025966:	785a      	ldrb	r2, [r3, #1]
 8025968:	3001      	adds	r0, #1
 802596a:	2a30      	cmp	r2, #48	; 0x30
 802596c:	d0f8      	beq.n	8025960 <_strtod_l+0x1f0>
 802596e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8025972:	2b08      	cmp	r3, #8
 8025974:	f200 84d9 	bhi.w	802632a <_strtod_l+0xbba>
 8025978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802597a:	9005      	str	r0, [sp, #20]
 802597c:	2000      	movs	r0, #0
 802597e:	9308      	str	r3, [sp, #32]
 8025980:	4605      	mov	r5, r0
 8025982:	3a30      	subs	r2, #48	; 0x30
 8025984:	f100 0301 	add.w	r3, r0, #1
 8025988:	d014      	beq.n	80259b4 <_strtod_l+0x244>
 802598a:	9905      	ldr	r1, [sp, #20]
 802598c:	4419      	add	r1, r3
 802598e:	9105      	str	r1, [sp, #20]
 8025990:	462b      	mov	r3, r5
 8025992:	eb00 0e05 	add.w	lr, r0, r5
 8025996:	210a      	movs	r1, #10
 8025998:	4573      	cmp	r3, lr
 802599a:	d113      	bne.n	80259c4 <_strtod_l+0x254>
 802599c:	182b      	adds	r3, r5, r0
 802599e:	2b08      	cmp	r3, #8
 80259a0:	f105 0501 	add.w	r5, r5, #1
 80259a4:	4405      	add	r5, r0
 80259a6:	dc1c      	bgt.n	80259e2 <_strtod_l+0x272>
 80259a8:	9907      	ldr	r1, [sp, #28]
 80259aa:	230a      	movs	r3, #10
 80259ac:	fb03 2301 	mla	r3, r3, r1, r2
 80259b0:	9307      	str	r3, [sp, #28]
 80259b2:	2300      	movs	r3, #0
 80259b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80259b6:	1c51      	adds	r1, r2, #1
 80259b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80259ba:	7852      	ldrb	r2, [r2, #1]
 80259bc:	4618      	mov	r0, r3
 80259be:	e7c9      	b.n	8025954 <_strtod_l+0x1e4>
 80259c0:	4638      	mov	r0, r7
 80259c2:	e7d2      	b.n	802596a <_strtod_l+0x1fa>
 80259c4:	2b08      	cmp	r3, #8
 80259c6:	dc04      	bgt.n	80259d2 <_strtod_l+0x262>
 80259c8:	9e07      	ldr	r6, [sp, #28]
 80259ca:	434e      	muls	r6, r1
 80259cc:	9607      	str	r6, [sp, #28]
 80259ce:	3301      	adds	r3, #1
 80259d0:	e7e2      	b.n	8025998 <_strtod_l+0x228>
 80259d2:	f103 0c01 	add.w	ip, r3, #1
 80259d6:	f1bc 0f10 	cmp.w	ip, #16
 80259da:	bfd8      	it	le
 80259dc:	fb01 f909 	mulle.w	r9, r1, r9
 80259e0:	e7f5      	b.n	80259ce <_strtod_l+0x25e>
 80259e2:	2d10      	cmp	r5, #16
 80259e4:	bfdc      	itt	le
 80259e6:	230a      	movle	r3, #10
 80259e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80259ec:	e7e1      	b.n	80259b2 <_strtod_l+0x242>
 80259ee:	2300      	movs	r3, #0
 80259f0:	9305      	str	r3, [sp, #20]
 80259f2:	2301      	movs	r3, #1
 80259f4:	e77c      	b.n	80258f0 <_strtod_l+0x180>
 80259f6:	f04f 0c00 	mov.w	ip, #0
 80259fa:	f108 0202 	add.w	r2, r8, #2
 80259fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8025a00:	f898 2002 	ldrb.w	r2, [r8, #2]
 8025a04:	e785      	b.n	8025912 <_strtod_l+0x1a2>
 8025a06:	f04f 0c01 	mov.w	ip, #1
 8025a0a:	e7f6      	b.n	80259fa <_strtod_l+0x28a>
 8025a0c:	08037a14 	.word	0x08037a14
 8025a10:	08037764 	.word	0x08037764
 8025a14:	7ff00000 	.word	0x7ff00000
 8025a18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025a1a:	1c51      	adds	r1, r2, #1
 8025a1c:	9117      	str	r1, [sp, #92]	; 0x5c
 8025a1e:	7852      	ldrb	r2, [r2, #1]
 8025a20:	2a30      	cmp	r2, #48	; 0x30
 8025a22:	d0f9      	beq.n	8025a18 <_strtod_l+0x2a8>
 8025a24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8025a28:	2908      	cmp	r1, #8
 8025a2a:	f63f af79 	bhi.w	8025920 <_strtod_l+0x1b0>
 8025a2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8025a32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025a34:	9206      	str	r2, [sp, #24]
 8025a36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8025a38:	1c51      	adds	r1, r2, #1
 8025a3a:	9117      	str	r1, [sp, #92]	; 0x5c
 8025a3c:	7852      	ldrb	r2, [r2, #1]
 8025a3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8025a42:	2e09      	cmp	r6, #9
 8025a44:	d937      	bls.n	8025ab6 <_strtod_l+0x346>
 8025a46:	9e06      	ldr	r6, [sp, #24]
 8025a48:	1b89      	subs	r1, r1, r6
 8025a4a:	2908      	cmp	r1, #8
 8025a4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8025a50:	dc02      	bgt.n	8025a58 <_strtod_l+0x2e8>
 8025a52:	4576      	cmp	r6, lr
 8025a54:	bfa8      	it	ge
 8025a56:	4676      	movge	r6, lr
 8025a58:	f1bc 0f00 	cmp.w	ip, #0
 8025a5c:	d000      	beq.n	8025a60 <_strtod_l+0x2f0>
 8025a5e:	4276      	negs	r6, r6
 8025a60:	2d00      	cmp	r5, #0
 8025a62:	d14d      	bne.n	8025b00 <_strtod_l+0x390>
 8025a64:	9904      	ldr	r1, [sp, #16]
 8025a66:	4301      	orrs	r1, r0
 8025a68:	f47f aec6 	bne.w	80257f8 <_strtod_l+0x88>
 8025a6c:	2b00      	cmp	r3, #0
 8025a6e:	f47f aee1 	bne.w	8025834 <_strtod_l+0xc4>
 8025a72:	2a69      	cmp	r2, #105	; 0x69
 8025a74:	d027      	beq.n	8025ac6 <_strtod_l+0x356>
 8025a76:	dc24      	bgt.n	8025ac2 <_strtod_l+0x352>
 8025a78:	2a49      	cmp	r2, #73	; 0x49
 8025a7a:	d024      	beq.n	8025ac6 <_strtod_l+0x356>
 8025a7c:	2a4e      	cmp	r2, #78	; 0x4e
 8025a7e:	f47f aed9 	bne.w	8025834 <_strtod_l+0xc4>
 8025a82:	499f      	ldr	r1, [pc, #636]	; (8025d00 <_strtod_l+0x590>)
 8025a84:	a817      	add	r0, sp, #92	; 0x5c
 8025a86:	f002 f93b 	bl	8027d00 <__match>
 8025a8a:	2800      	cmp	r0, #0
 8025a8c:	f43f aed2 	beq.w	8025834 <_strtod_l+0xc4>
 8025a90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025a92:	781b      	ldrb	r3, [r3, #0]
 8025a94:	2b28      	cmp	r3, #40	; 0x28
 8025a96:	d12d      	bne.n	8025af4 <_strtod_l+0x384>
 8025a98:	499a      	ldr	r1, [pc, #616]	; (8025d04 <_strtod_l+0x594>)
 8025a9a:	aa1a      	add	r2, sp, #104	; 0x68
 8025a9c:	a817      	add	r0, sp, #92	; 0x5c
 8025a9e:	f002 f943 	bl	8027d28 <__hexnan>
 8025aa2:	2805      	cmp	r0, #5
 8025aa4:	d126      	bne.n	8025af4 <_strtod_l+0x384>
 8025aa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025aa8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8025aac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8025ab0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8025ab4:	e6a0      	b.n	80257f8 <_strtod_l+0x88>
 8025ab6:	210a      	movs	r1, #10
 8025ab8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8025abc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8025ac0:	e7b9      	b.n	8025a36 <_strtod_l+0x2c6>
 8025ac2:	2a6e      	cmp	r2, #110	; 0x6e
 8025ac4:	e7db      	b.n	8025a7e <_strtod_l+0x30e>
 8025ac6:	4990      	ldr	r1, [pc, #576]	; (8025d08 <_strtod_l+0x598>)
 8025ac8:	a817      	add	r0, sp, #92	; 0x5c
 8025aca:	f002 f919 	bl	8027d00 <__match>
 8025ace:	2800      	cmp	r0, #0
 8025ad0:	f43f aeb0 	beq.w	8025834 <_strtod_l+0xc4>
 8025ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025ad6:	498d      	ldr	r1, [pc, #564]	; (8025d0c <_strtod_l+0x59c>)
 8025ad8:	3b01      	subs	r3, #1
 8025ada:	a817      	add	r0, sp, #92	; 0x5c
 8025adc:	9317      	str	r3, [sp, #92]	; 0x5c
 8025ade:	f002 f90f 	bl	8027d00 <__match>
 8025ae2:	b910      	cbnz	r0, 8025aea <_strtod_l+0x37a>
 8025ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025ae6:	3301      	adds	r3, #1
 8025ae8:	9317      	str	r3, [sp, #92]	; 0x5c
 8025aea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8025d1c <_strtod_l+0x5ac>
 8025aee:	f04f 0a00 	mov.w	sl, #0
 8025af2:	e681      	b.n	80257f8 <_strtod_l+0x88>
 8025af4:	4886      	ldr	r0, [pc, #536]	; (8025d10 <_strtod_l+0x5a0>)
 8025af6:	f003 f86f 	bl	8028bd8 <nan>
 8025afa:	ec5b ab10 	vmov	sl, fp, d0
 8025afe:	e67b      	b.n	80257f8 <_strtod_l+0x88>
 8025b00:	9b05      	ldr	r3, [sp, #20]
 8025b02:	9807      	ldr	r0, [sp, #28]
 8025b04:	1af3      	subs	r3, r6, r3
 8025b06:	2f00      	cmp	r7, #0
 8025b08:	bf08      	it	eq
 8025b0a:	462f      	moveq	r7, r5
 8025b0c:	2d10      	cmp	r5, #16
 8025b0e:	9306      	str	r3, [sp, #24]
 8025b10:	46a8      	mov	r8, r5
 8025b12:	bfa8      	it	ge
 8025b14:	f04f 0810 	movge.w	r8, #16
 8025b18:	f7eb f85c 	bl	8010bd4 <__aeabi_ui2d>
 8025b1c:	2d09      	cmp	r5, #9
 8025b1e:	4682      	mov	sl, r0
 8025b20:	468b      	mov	fp, r1
 8025b22:	dd13      	ble.n	8025b4c <_strtod_l+0x3dc>
 8025b24:	4b7b      	ldr	r3, [pc, #492]	; (8025d14 <_strtod_l+0x5a4>)
 8025b26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8025b2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8025b2e:	f7eb f8cb 	bl	8010cc8 <__aeabi_dmul>
 8025b32:	4682      	mov	sl, r0
 8025b34:	4648      	mov	r0, r9
 8025b36:	468b      	mov	fp, r1
 8025b38:	f7eb f84c 	bl	8010bd4 <__aeabi_ui2d>
 8025b3c:	4602      	mov	r2, r0
 8025b3e:	460b      	mov	r3, r1
 8025b40:	4650      	mov	r0, sl
 8025b42:	4659      	mov	r1, fp
 8025b44:	f7ea ff0a 	bl	801095c <__adddf3>
 8025b48:	4682      	mov	sl, r0
 8025b4a:	468b      	mov	fp, r1
 8025b4c:	2d0f      	cmp	r5, #15
 8025b4e:	dc38      	bgt.n	8025bc2 <_strtod_l+0x452>
 8025b50:	9b06      	ldr	r3, [sp, #24]
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	f43f ae50 	beq.w	80257f8 <_strtod_l+0x88>
 8025b58:	dd24      	ble.n	8025ba4 <_strtod_l+0x434>
 8025b5a:	2b16      	cmp	r3, #22
 8025b5c:	dc0b      	bgt.n	8025b76 <_strtod_l+0x406>
 8025b5e:	496d      	ldr	r1, [pc, #436]	; (8025d14 <_strtod_l+0x5a4>)
 8025b60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b68:	4652      	mov	r2, sl
 8025b6a:	465b      	mov	r3, fp
 8025b6c:	f7eb f8ac 	bl	8010cc8 <__aeabi_dmul>
 8025b70:	4682      	mov	sl, r0
 8025b72:	468b      	mov	fp, r1
 8025b74:	e640      	b.n	80257f8 <_strtod_l+0x88>
 8025b76:	9a06      	ldr	r2, [sp, #24]
 8025b78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8025b7c:	4293      	cmp	r3, r2
 8025b7e:	db20      	blt.n	8025bc2 <_strtod_l+0x452>
 8025b80:	4c64      	ldr	r4, [pc, #400]	; (8025d14 <_strtod_l+0x5a4>)
 8025b82:	f1c5 050f 	rsb	r5, r5, #15
 8025b86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8025b8a:	4652      	mov	r2, sl
 8025b8c:	465b      	mov	r3, fp
 8025b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b92:	f7eb f899 	bl	8010cc8 <__aeabi_dmul>
 8025b96:	9b06      	ldr	r3, [sp, #24]
 8025b98:	1b5d      	subs	r5, r3, r5
 8025b9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8025b9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8025ba2:	e7e3      	b.n	8025b6c <_strtod_l+0x3fc>
 8025ba4:	9b06      	ldr	r3, [sp, #24]
 8025ba6:	3316      	adds	r3, #22
 8025ba8:	db0b      	blt.n	8025bc2 <_strtod_l+0x452>
 8025baa:	9b05      	ldr	r3, [sp, #20]
 8025bac:	1b9e      	subs	r6, r3, r6
 8025bae:	4b59      	ldr	r3, [pc, #356]	; (8025d14 <_strtod_l+0x5a4>)
 8025bb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8025bb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025bb8:	4650      	mov	r0, sl
 8025bba:	4659      	mov	r1, fp
 8025bbc:	f7eb f9ae 	bl	8010f1c <__aeabi_ddiv>
 8025bc0:	e7d6      	b.n	8025b70 <_strtod_l+0x400>
 8025bc2:	9b06      	ldr	r3, [sp, #24]
 8025bc4:	eba5 0808 	sub.w	r8, r5, r8
 8025bc8:	4498      	add	r8, r3
 8025bca:	f1b8 0f00 	cmp.w	r8, #0
 8025bce:	dd74      	ble.n	8025cba <_strtod_l+0x54a>
 8025bd0:	f018 030f 	ands.w	r3, r8, #15
 8025bd4:	d00a      	beq.n	8025bec <_strtod_l+0x47c>
 8025bd6:	494f      	ldr	r1, [pc, #316]	; (8025d14 <_strtod_l+0x5a4>)
 8025bd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025bdc:	4652      	mov	r2, sl
 8025bde:	465b      	mov	r3, fp
 8025be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025be4:	f7eb f870 	bl	8010cc8 <__aeabi_dmul>
 8025be8:	4682      	mov	sl, r0
 8025bea:	468b      	mov	fp, r1
 8025bec:	f038 080f 	bics.w	r8, r8, #15
 8025bf0:	d04f      	beq.n	8025c92 <_strtod_l+0x522>
 8025bf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8025bf6:	dd22      	ble.n	8025c3e <_strtod_l+0x4ce>
 8025bf8:	2500      	movs	r5, #0
 8025bfa:	462e      	mov	r6, r5
 8025bfc:	9507      	str	r5, [sp, #28]
 8025bfe:	9505      	str	r5, [sp, #20]
 8025c00:	2322      	movs	r3, #34	; 0x22
 8025c02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8025d1c <_strtod_l+0x5ac>
 8025c06:	6023      	str	r3, [r4, #0]
 8025c08:	f04f 0a00 	mov.w	sl, #0
 8025c0c:	9b07      	ldr	r3, [sp, #28]
 8025c0e:	2b00      	cmp	r3, #0
 8025c10:	f43f adf2 	beq.w	80257f8 <_strtod_l+0x88>
 8025c14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025c16:	4620      	mov	r0, r4
 8025c18:	f002 f9ec 	bl	8027ff4 <_Bfree>
 8025c1c:	9905      	ldr	r1, [sp, #20]
 8025c1e:	4620      	mov	r0, r4
 8025c20:	f002 f9e8 	bl	8027ff4 <_Bfree>
 8025c24:	4631      	mov	r1, r6
 8025c26:	4620      	mov	r0, r4
 8025c28:	f002 f9e4 	bl	8027ff4 <_Bfree>
 8025c2c:	9907      	ldr	r1, [sp, #28]
 8025c2e:	4620      	mov	r0, r4
 8025c30:	f002 f9e0 	bl	8027ff4 <_Bfree>
 8025c34:	4629      	mov	r1, r5
 8025c36:	4620      	mov	r0, r4
 8025c38:	f002 f9dc 	bl	8027ff4 <_Bfree>
 8025c3c:	e5dc      	b.n	80257f8 <_strtod_l+0x88>
 8025c3e:	4b36      	ldr	r3, [pc, #216]	; (8025d18 <_strtod_l+0x5a8>)
 8025c40:	9304      	str	r3, [sp, #16]
 8025c42:	2300      	movs	r3, #0
 8025c44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8025c48:	4650      	mov	r0, sl
 8025c4a:	4659      	mov	r1, fp
 8025c4c:	4699      	mov	r9, r3
 8025c4e:	f1b8 0f01 	cmp.w	r8, #1
 8025c52:	dc21      	bgt.n	8025c98 <_strtod_l+0x528>
 8025c54:	b10b      	cbz	r3, 8025c5a <_strtod_l+0x4ea>
 8025c56:	4682      	mov	sl, r0
 8025c58:	468b      	mov	fp, r1
 8025c5a:	4b2f      	ldr	r3, [pc, #188]	; (8025d18 <_strtod_l+0x5a8>)
 8025c5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8025c60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8025c64:	4652      	mov	r2, sl
 8025c66:	465b      	mov	r3, fp
 8025c68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8025c6c:	f7eb f82c 	bl	8010cc8 <__aeabi_dmul>
 8025c70:	4b2a      	ldr	r3, [pc, #168]	; (8025d1c <_strtod_l+0x5ac>)
 8025c72:	460a      	mov	r2, r1
 8025c74:	400b      	ands	r3, r1
 8025c76:	492a      	ldr	r1, [pc, #168]	; (8025d20 <_strtod_l+0x5b0>)
 8025c78:	428b      	cmp	r3, r1
 8025c7a:	4682      	mov	sl, r0
 8025c7c:	d8bc      	bhi.n	8025bf8 <_strtod_l+0x488>
 8025c7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8025c82:	428b      	cmp	r3, r1
 8025c84:	bf86      	itte	hi
 8025c86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8025d24 <_strtod_l+0x5b4>
 8025c8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8025c8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8025c92:	2300      	movs	r3, #0
 8025c94:	9304      	str	r3, [sp, #16]
 8025c96:	e084      	b.n	8025da2 <_strtod_l+0x632>
 8025c98:	f018 0f01 	tst.w	r8, #1
 8025c9c:	d005      	beq.n	8025caa <_strtod_l+0x53a>
 8025c9e:	9b04      	ldr	r3, [sp, #16]
 8025ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ca4:	f7eb f810 	bl	8010cc8 <__aeabi_dmul>
 8025ca8:	2301      	movs	r3, #1
 8025caa:	9a04      	ldr	r2, [sp, #16]
 8025cac:	3208      	adds	r2, #8
 8025cae:	f109 0901 	add.w	r9, r9, #1
 8025cb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8025cb6:	9204      	str	r2, [sp, #16]
 8025cb8:	e7c9      	b.n	8025c4e <_strtod_l+0x4de>
 8025cba:	d0ea      	beq.n	8025c92 <_strtod_l+0x522>
 8025cbc:	f1c8 0800 	rsb	r8, r8, #0
 8025cc0:	f018 020f 	ands.w	r2, r8, #15
 8025cc4:	d00a      	beq.n	8025cdc <_strtod_l+0x56c>
 8025cc6:	4b13      	ldr	r3, [pc, #76]	; (8025d14 <_strtod_l+0x5a4>)
 8025cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025ccc:	4650      	mov	r0, sl
 8025cce:	4659      	mov	r1, fp
 8025cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cd4:	f7eb f922 	bl	8010f1c <__aeabi_ddiv>
 8025cd8:	4682      	mov	sl, r0
 8025cda:	468b      	mov	fp, r1
 8025cdc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8025ce0:	d0d7      	beq.n	8025c92 <_strtod_l+0x522>
 8025ce2:	f1b8 0f1f 	cmp.w	r8, #31
 8025ce6:	dd1f      	ble.n	8025d28 <_strtod_l+0x5b8>
 8025ce8:	2500      	movs	r5, #0
 8025cea:	462e      	mov	r6, r5
 8025cec:	9507      	str	r5, [sp, #28]
 8025cee:	9505      	str	r5, [sp, #20]
 8025cf0:	2322      	movs	r3, #34	; 0x22
 8025cf2:	f04f 0a00 	mov.w	sl, #0
 8025cf6:	f04f 0b00 	mov.w	fp, #0
 8025cfa:	6023      	str	r3, [r4, #0]
 8025cfc:	e786      	b.n	8025c0c <_strtod_l+0x49c>
 8025cfe:	bf00      	nop
 8025d00:	0803773d 	.word	0x0803773d
 8025d04:	08037778 	.word	0x08037778
 8025d08:	08037735 	.word	0x08037735
 8025d0c:	080378bc 	.word	0x080378bc
 8025d10:	08037bd0 	.word	0x08037bd0
 8025d14:	08037ab0 	.word	0x08037ab0
 8025d18:	08037a88 	.word	0x08037a88
 8025d1c:	7ff00000 	.word	0x7ff00000
 8025d20:	7ca00000 	.word	0x7ca00000
 8025d24:	7fefffff 	.word	0x7fefffff
 8025d28:	f018 0310 	ands.w	r3, r8, #16
 8025d2c:	bf18      	it	ne
 8025d2e:	236a      	movne	r3, #106	; 0x6a
 8025d30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80260e0 <_strtod_l+0x970>
 8025d34:	9304      	str	r3, [sp, #16]
 8025d36:	4650      	mov	r0, sl
 8025d38:	4659      	mov	r1, fp
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	f018 0f01 	tst.w	r8, #1
 8025d40:	d004      	beq.n	8025d4c <_strtod_l+0x5dc>
 8025d42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8025d46:	f7ea ffbf 	bl	8010cc8 <__aeabi_dmul>
 8025d4a:	2301      	movs	r3, #1
 8025d4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8025d50:	f109 0908 	add.w	r9, r9, #8
 8025d54:	d1f2      	bne.n	8025d3c <_strtod_l+0x5cc>
 8025d56:	b10b      	cbz	r3, 8025d5c <_strtod_l+0x5ec>
 8025d58:	4682      	mov	sl, r0
 8025d5a:	468b      	mov	fp, r1
 8025d5c:	9b04      	ldr	r3, [sp, #16]
 8025d5e:	b1c3      	cbz	r3, 8025d92 <_strtod_l+0x622>
 8025d60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8025d64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8025d68:	2b00      	cmp	r3, #0
 8025d6a:	4659      	mov	r1, fp
 8025d6c:	dd11      	ble.n	8025d92 <_strtod_l+0x622>
 8025d6e:	2b1f      	cmp	r3, #31
 8025d70:	f340 8124 	ble.w	8025fbc <_strtod_l+0x84c>
 8025d74:	2b34      	cmp	r3, #52	; 0x34
 8025d76:	bfde      	ittt	le
 8025d78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8025d7c:	f04f 33ff 	movle.w	r3, #4294967295
 8025d80:	fa03 f202 	lslle.w	r2, r3, r2
 8025d84:	f04f 0a00 	mov.w	sl, #0
 8025d88:	bfcc      	ite	gt
 8025d8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8025d8e:	ea02 0b01 	andle.w	fp, r2, r1
 8025d92:	2200      	movs	r2, #0
 8025d94:	2300      	movs	r3, #0
 8025d96:	4650      	mov	r0, sl
 8025d98:	4659      	mov	r1, fp
 8025d9a:	f7eb f9fd 	bl	8011198 <__aeabi_dcmpeq>
 8025d9e:	2800      	cmp	r0, #0
 8025da0:	d1a2      	bne.n	8025ce8 <_strtod_l+0x578>
 8025da2:	9b07      	ldr	r3, [sp, #28]
 8025da4:	9300      	str	r3, [sp, #0]
 8025da6:	9908      	ldr	r1, [sp, #32]
 8025da8:	462b      	mov	r3, r5
 8025daa:	463a      	mov	r2, r7
 8025dac:	4620      	mov	r0, r4
 8025dae:	f002 f989 	bl	80280c4 <__s2b>
 8025db2:	9007      	str	r0, [sp, #28]
 8025db4:	2800      	cmp	r0, #0
 8025db6:	f43f af1f 	beq.w	8025bf8 <_strtod_l+0x488>
 8025dba:	9b05      	ldr	r3, [sp, #20]
 8025dbc:	1b9e      	subs	r6, r3, r6
 8025dbe:	9b06      	ldr	r3, [sp, #24]
 8025dc0:	2b00      	cmp	r3, #0
 8025dc2:	bfb4      	ite	lt
 8025dc4:	4633      	movlt	r3, r6
 8025dc6:	2300      	movge	r3, #0
 8025dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8025dca:	9b06      	ldr	r3, [sp, #24]
 8025dcc:	2500      	movs	r5, #0
 8025dce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025dd2:	9312      	str	r3, [sp, #72]	; 0x48
 8025dd4:	462e      	mov	r6, r5
 8025dd6:	9b07      	ldr	r3, [sp, #28]
 8025dd8:	4620      	mov	r0, r4
 8025dda:	6859      	ldr	r1, [r3, #4]
 8025ddc:	f002 f8ca 	bl	8027f74 <_Balloc>
 8025de0:	9005      	str	r0, [sp, #20]
 8025de2:	2800      	cmp	r0, #0
 8025de4:	f43f af0c 	beq.w	8025c00 <_strtod_l+0x490>
 8025de8:	9b07      	ldr	r3, [sp, #28]
 8025dea:	691a      	ldr	r2, [r3, #16]
 8025dec:	3202      	adds	r2, #2
 8025dee:	f103 010c 	add.w	r1, r3, #12
 8025df2:	0092      	lsls	r2, r2, #2
 8025df4:	300c      	adds	r0, #12
 8025df6:	f7fe ff25 	bl	8024c44 <memcpy>
 8025dfa:	ec4b ab10 	vmov	d0, sl, fp
 8025dfe:	aa1a      	add	r2, sp, #104	; 0x68
 8025e00:	a919      	add	r1, sp, #100	; 0x64
 8025e02:	4620      	mov	r0, r4
 8025e04:	f002 fca4 	bl	8028750 <__d2b>
 8025e08:	ec4b ab18 	vmov	d8, sl, fp
 8025e0c:	9018      	str	r0, [sp, #96]	; 0x60
 8025e0e:	2800      	cmp	r0, #0
 8025e10:	f43f aef6 	beq.w	8025c00 <_strtod_l+0x490>
 8025e14:	2101      	movs	r1, #1
 8025e16:	4620      	mov	r0, r4
 8025e18:	f002 f9ee 	bl	80281f8 <__i2b>
 8025e1c:	4606      	mov	r6, r0
 8025e1e:	2800      	cmp	r0, #0
 8025e20:	f43f aeee 	beq.w	8025c00 <_strtod_l+0x490>
 8025e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025e26:	9904      	ldr	r1, [sp, #16]
 8025e28:	2b00      	cmp	r3, #0
 8025e2a:	bfab      	itete	ge
 8025e2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8025e2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8025e30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8025e32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8025e36:	bfac      	ite	ge
 8025e38:	eb03 0902 	addge.w	r9, r3, r2
 8025e3c:	1ad7      	sublt	r7, r2, r3
 8025e3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025e40:	eba3 0801 	sub.w	r8, r3, r1
 8025e44:	4490      	add	r8, r2
 8025e46:	4ba1      	ldr	r3, [pc, #644]	; (80260cc <_strtod_l+0x95c>)
 8025e48:	f108 38ff 	add.w	r8, r8, #4294967295
 8025e4c:	4598      	cmp	r8, r3
 8025e4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8025e52:	f280 80c7 	bge.w	8025fe4 <_strtod_l+0x874>
 8025e56:	eba3 0308 	sub.w	r3, r3, r8
 8025e5a:	2b1f      	cmp	r3, #31
 8025e5c:	eba2 0203 	sub.w	r2, r2, r3
 8025e60:	f04f 0101 	mov.w	r1, #1
 8025e64:	f300 80b1 	bgt.w	8025fca <_strtod_l+0x85a>
 8025e68:	fa01 f303 	lsl.w	r3, r1, r3
 8025e6c:	930d      	str	r3, [sp, #52]	; 0x34
 8025e6e:	2300      	movs	r3, #0
 8025e70:	9308      	str	r3, [sp, #32]
 8025e72:	eb09 0802 	add.w	r8, r9, r2
 8025e76:	9b04      	ldr	r3, [sp, #16]
 8025e78:	45c1      	cmp	r9, r8
 8025e7a:	4417      	add	r7, r2
 8025e7c:	441f      	add	r7, r3
 8025e7e:	464b      	mov	r3, r9
 8025e80:	bfa8      	it	ge
 8025e82:	4643      	movge	r3, r8
 8025e84:	42bb      	cmp	r3, r7
 8025e86:	bfa8      	it	ge
 8025e88:	463b      	movge	r3, r7
 8025e8a:	2b00      	cmp	r3, #0
 8025e8c:	bfc2      	ittt	gt
 8025e8e:	eba8 0803 	subgt.w	r8, r8, r3
 8025e92:	1aff      	subgt	r7, r7, r3
 8025e94:	eba9 0903 	subgt.w	r9, r9, r3
 8025e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e9a:	2b00      	cmp	r3, #0
 8025e9c:	dd17      	ble.n	8025ece <_strtod_l+0x75e>
 8025e9e:	4631      	mov	r1, r6
 8025ea0:	461a      	mov	r2, r3
 8025ea2:	4620      	mov	r0, r4
 8025ea4:	f002 fa68 	bl	8028378 <__pow5mult>
 8025ea8:	4606      	mov	r6, r0
 8025eaa:	2800      	cmp	r0, #0
 8025eac:	f43f aea8 	beq.w	8025c00 <_strtod_l+0x490>
 8025eb0:	4601      	mov	r1, r0
 8025eb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025eb4:	4620      	mov	r0, r4
 8025eb6:	f002 f9b5 	bl	8028224 <__multiply>
 8025eba:	900b      	str	r0, [sp, #44]	; 0x2c
 8025ebc:	2800      	cmp	r0, #0
 8025ebe:	f43f ae9f 	beq.w	8025c00 <_strtod_l+0x490>
 8025ec2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025ec4:	4620      	mov	r0, r4
 8025ec6:	f002 f895 	bl	8027ff4 <_Bfree>
 8025eca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ecc:	9318      	str	r3, [sp, #96]	; 0x60
 8025ece:	f1b8 0f00 	cmp.w	r8, #0
 8025ed2:	f300 808c 	bgt.w	8025fee <_strtod_l+0x87e>
 8025ed6:	9b06      	ldr	r3, [sp, #24]
 8025ed8:	2b00      	cmp	r3, #0
 8025eda:	dd08      	ble.n	8025eee <_strtod_l+0x77e>
 8025edc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025ede:	9905      	ldr	r1, [sp, #20]
 8025ee0:	4620      	mov	r0, r4
 8025ee2:	f002 fa49 	bl	8028378 <__pow5mult>
 8025ee6:	9005      	str	r0, [sp, #20]
 8025ee8:	2800      	cmp	r0, #0
 8025eea:	f43f ae89 	beq.w	8025c00 <_strtod_l+0x490>
 8025eee:	2f00      	cmp	r7, #0
 8025ef0:	dd08      	ble.n	8025f04 <_strtod_l+0x794>
 8025ef2:	9905      	ldr	r1, [sp, #20]
 8025ef4:	463a      	mov	r2, r7
 8025ef6:	4620      	mov	r0, r4
 8025ef8:	f002 fa98 	bl	802842c <__lshift>
 8025efc:	9005      	str	r0, [sp, #20]
 8025efe:	2800      	cmp	r0, #0
 8025f00:	f43f ae7e 	beq.w	8025c00 <_strtod_l+0x490>
 8025f04:	f1b9 0f00 	cmp.w	r9, #0
 8025f08:	dd08      	ble.n	8025f1c <_strtod_l+0x7ac>
 8025f0a:	4631      	mov	r1, r6
 8025f0c:	464a      	mov	r2, r9
 8025f0e:	4620      	mov	r0, r4
 8025f10:	f002 fa8c 	bl	802842c <__lshift>
 8025f14:	4606      	mov	r6, r0
 8025f16:	2800      	cmp	r0, #0
 8025f18:	f43f ae72 	beq.w	8025c00 <_strtod_l+0x490>
 8025f1c:	9a05      	ldr	r2, [sp, #20]
 8025f1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025f20:	4620      	mov	r0, r4
 8025f22:	f002 fb0f 	bl	8028544 <__mdiff>
 8025f26:	4605      	mov	r5, r0
 8025f28:	2800      	cmp	r0, #0
 8025f2a:	f43f ae69 	beq.w	8025c00 <_strtod_l+0x490>
 8025f2e:	68c3      	ldr	r3, [r0, #12]
 8025f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8025f32:	2300      	movs	r3, #0
 8025f34:	60c3      	str	r3, [r0, #12]
 8025f36:	4631      	mov	r1, r6
 8025f38:	f002 fae8 	bl	802850c <__mcmp>
 8025f3c:	2800      	cmp	r0, #0
 8025f3e:	da60      	bge.n	8026002 <_strtod_l+0x892>
 8025f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f42:	ea53 030a 	orrs.w	r3, r3, sl
 8025f46:	f040 8082 	bne.w	802604e <_strtod_l+0x8de>
 8025f4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025f4e:	2b00      	cmp	r3, #0
 8025f50:	d17d      	bne.n	802604e <_strtod_l+0x8de>
 8025f52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8025f56:	0d1b      	lsrs	r3, r3, #20
 8025f58:	051b      	lsls	r3, r3, #20
 8025f5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8025f5e:	d976      	bls.n	802604e <_strtod_l+0x8de>
 8025f60:	696b      	ldr	r3, [r5, #20]
 8025f62:	b913      	cbnz	r3, 8025f6a <_strtod_l+0x7fa>
 8025f64:	692b      	ldr	r3, [r5, #16]
 8025f66:	2b01      	cmp	r3, #1
 8025f68:	dd71      	ble.n	802604e <_strtod_l+0x8de>
 8025f6a:	4629      	mov	r1, r5
 8025f6c:	2201      	movs	r2, #1
 8025f6e:	4620      	mov	r0, r4
 8025f70:	f002 fa5c 	bl	802842c <__lshift>
 8025f74:	4631      	mov	r1, r6
 8025f76:	4605      	mov	r5, r0
 8025f78:	f002 fac8 	bl	802850c <__mcmp>
 8025f7c:	2800      	cmp	r0, #0
 8025f7e:	dd66      	ble.n	802604e <_strtod_l+0x8de>
 8025f80:	9904      	ldr	r1, [sp, #16]
 8025f82:	4a53      	ldr	r2, [pc, #332]	; (80260d0 <_strtod_l+0x960>)
 8025f84:	465b      	mov	r3, fp
 8025f86:	2900      	cmp	r1, #0
 8025f88:	f000 8081 	beq.w	802608e <_strtod_l+0x91e>
 8025f8c:	ea02 010b 	and.w	r1, r2, fp
 8025f90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8025f94:	dc7b      	bgt.n	802608e <_strtod_l+0x91e>
 8025f96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8025f9a:	f77f aea9 	ble.w	8025cf0 <_strtod_l+0x580>
 8025f9e:	4b4d      	ldr	r3, [pc, #308]	; (80260d4 <_strtod_l+0x964>)
 8025fa0:	4650      	mov	r0, sl
 8025fa2:	4659      	mov	r1, fp
 8025fa4:	2200      	movs	r2, #0
 8025fa6:	f7ea fe8f 	bl	8010cc8 <__aeabi_dmul>
 8025faa:	460b      	mov	r3, r1
 8025fac:	4303      	orrs	r3, r0
 8025fae:	bf08      	it	eq
 8025fb0:	2322      	moveq	r3, #34	; 0x22
 8025fb2:	4682      	mov	sl, r0
 8025fb4:	468b      	mov	fp, r1
 8025fb6:	bf08      	it	eq
 8025fb8:	6023      	streq	r3, [r4, #0]
 8025fba:	e62b      	b.n	8025c14 <_strtod_l+0x4a4>
 8025fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8025fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8025fc4:	ea03 0a0a 	and.w	sl, r3, sl
 8025fc8:	e6e3      	b.n	8025d92 <_strtod_l+0x622>
 8025fca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8025fce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8025fd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8025fd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8025fda:	fa01 f308 	lsl.w	r3, r1, r8
 8025fde:	9308      	str	r3, [sp, #32]
 8025fe0:	910d      	str	r1, [sp, #52]	; 0x34
 8025fe2:	e746      	b.n	8025e72 <_strtod_l+0x702>
 8025fe4:	2300      	movs	r3, #0
 8025fe6:	9308      	str	r3, [sp, #32]
 8025fe8:	2301      	movs	r3, #1
 8025fea:	930d      	str	r3, [sp, #52]	; 0x34
 8025fec:	e741      	b.n	8025e72 <_strtod_l+0x702>
 8025fee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8025ff0:	4642      	mov	r2, r8
 8025ff2:	4620      	mov	r0, r4
 8025ff4:	f002 fa1a 	bl	802842c <__lshift>
 8025ff8:	9018      	str	r0, [sp, #96]	; 0x60
 8025ffa:	2800      	cmp	r0, #0
 8025ffc:	f47f af6b 	bne.w	8025ed6 <_strtod_l+0x766>
 8026000:	e5fe      	b.n	8025c00 <_strtod_l+0x490>
 8026002:	465f      	mov	r7, fp
 8026004:	d16e      	bne.n	80260e4 <_strtod_l+0x974>
 8026006:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026008:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802600c:	b342      	cbz	r2, 8026060 <_strtod_l+0x8f0>
 802600e:	4a32      	ldr	r2, [pc, #200]	; (80260d8 <_strtod_l+0x968>)
 8026010:	4293      	cmp	r3, r2
 8026012:	d128      	bne.n	8026066 <_strtod_l+0x8f6>
 8026014:	9b04      	ldr	r3, [sp, #16]
 8026016:	4651      	mov	r1, sl
 8026018:	b1eb      	cbz	r3, 8026056 <_strtod_l+0x8e6>
 802601a:	4b2d      	ldr	r3, [pc, #180]	; (80260d0 <_strtod_l+0x960>)
 802601c:	403b      	ands	r3, r7
 802601e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8026022:	f04f 32ff 	mov.w	r2, #4294967295
 8026026:	d819      	bhi.n	802605c <_strtod_l+0x8ec>
 8026028:	0d1b      	lsrs	r3, r3, #20
 802602a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802602e:	fa02 f303 	lsl.w	r3, r2, r3
 8026032:	4299      	cmp	r1, r3
 8026034:	d117      	bne.n	8026066 <_strtod_l+0x8f6>
 8026036:	4b29      	ldr	r3, [pc, #164]	; (80260dc <_strtod_l+0x96c>)
 8026038:	429f      	cmp	r7, r3
 802603a:	d102      	bne.n	8026042 <_strtod_l+0x8d2>
 802603c:	3101      	adds	r1, #1
 802603e:	f43f addf 	beq.w	8025c00 <_strtod_l+0x490>
 8026042:	4b23      	ldr	r3, [pc, #140]	; (80260d0 <_strtod_l+0x960>)
 8026044:	403b      	ands	r3, r7
 8026046:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802604a:	f04f 0a00 	mov.w	sl, #0
 802604e:	9b04      	ldr	r3, [sp, #16]
 8026050:	2b00      	cmp	r3, #0
 8026052:	d1a4      	bne.n	8025f9e <_strtod_l+0x82e>
 8026054:	e5de      	b.n	8025c14 <_strtod_l+0x4a4>
 8026056:	f04f 33ff 	mov.w	r3, #4294967295
 802605a:	e7ea      	b.n	8026032 <_strtod_l+0x8c2>
 802605c:	4613      	mov	r3, r2
 802605e:	e7e8      	b.n	8026032 <_strtod_l+0x8c2>
 8026060:	ea53 030a 	orrs.w	r3, r3, sl
 8026064:	d08c      	beq.n	8025f80 <_strtod_l+0x810>
 8026066:	9b08      	ldr	r3, [sp, #32]
 8026068:	b1db      	cbz	r3, 80260a2 <_strtod_l+0x932>
 802606a:	423b      	tst	r3, r7
 802606c:	d0ef      	beq.n	802604e <_strtod_l+0x8de>
 802606e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026070:	9a04      	ldr	r2, [sp, #16]
 8026072:	4650      	mov	r0, sl
 8026074:	4659      	mov	r1, fp
 8026076:	b1c3      	cbz	r3, 80260aa <_strtod_l+0x93a>
 8026078:	f7ff fb5c 	bl	8025734 <sulp>
 802607c:	4602      	mov	r2, r0
 802607e:	460b      	mov	r3, r1
 8026080:	ec51 0b18 	vmov	r0, r1, d8
 8026084:	f7ea fc6a 	bl	801095c <__adddf3>
 8026088:	4682      	mov	sl, r0
 802608a:	468b      	mov	fp, r1
 802608c:	e7df      	b.n	802604e <_strtod_l+0x8de>
 802608e:	4013      	ands	r3, r2
 8026090:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8026094:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8026098:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802609c:	f04f 3aff 	mov.w	sl, #4294967295
 80260a0:	e7d5      	b.n	802604e <_strtod_l+0x8de>
 80260a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80260a4:	ea13 0f0a 	tst.w	r3, sl
 80260a8:	e7e0      	b.n	802606c <_strtod_l+0x8fc>
 80260aa:	f7ff fb43 	bl	8025734 <sulp>
 80260ae:	4602      	mov	r2, r0
 80260b0:	460b      	mov	r3, r1
 80260b2:	ec51 0b18 	vmov	r0, r1, d8
 80260b6:	f7ea fc4f 	bl	8010958 <__aeabi_dsub>
 80260ba:	2200      	movs	r2, #0
 80260bc:	2300      	movs	r3, #0
 80260be:	4682      	mov	sl, r0
 80260c0:	468b      	mov	fp, r1
 80260c2:	f7eb f869 	bl	8011198 <__aeabi_dcmpeq>
 80260c6:	2800      	cmp	r0, #0
 80260c8:	d0c1      	beq.n	802604e <_strtod_l+0x8de>
 80260ca:	e611      	b.n	8025cf0 <_strtod_l+0x580>
 80260cc:	fffffc02 	.word	0xfffffc02
 80260d0:	7ff00000 	.word	0x7ff00000
 80260d4:	39500000 	.word	0x39500000
 80260d8:	000fffff 	.word	0x000fffff
 80260dc:	7fefffff 	.word	0x7fefffff
 80260e0:	08037790 	.word	0x08037790
 80260e4:	4631      	mov	r1, r6
 80260e6:	4628      	mov	r0, r5
 80260e8:	f002 fb8e 	bl	8028808 <__ratio>
 80260ec:	ec59 8b10 	vmov	r8, r9, d0
 80260f0:	ee10 0a10 	vmov	r0, s0
 80260f4:	2200      	movs	r2, #0
 80260f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80260fa:	4649      	mov	r1, r9
 80260fc:	f7eb f860 	bl	80111c0 <__aeabi_dcmple>
 8026100:	2800      	cmp	r0, #0
 8026102:	d07a      	beq.n	80261fa <_strtod_l+0xa8a>
 8026104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026106:	2b00      	cmp	r3, #0
 8026108:	d04a      	beq.n	80261a0 <_strtod_l+0xa30>
 802610a:	4b95      	ldr	r3, [pc, #596]	; (8026360 <_strtod_l+0xbf0>)
 802610c:	2200      	movs	r2, #0
 802610e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8026112:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8026360 <_strtod_l+0xbf0>
 8026116:	f04f 0800 	mov.w	r8, #0
 802611a:	4b92      	ldr	r3, [pc, #584]	; (8026364 <_strtod_l+0xbf4>)
 802611c:	403b      	ands	r3, r7
 802611e:	930d      	str	r3, [sp, #52]	; 0x34
 8026120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026122:	4b91      	ldr	r3, [pc, #580]	; (8026368 <_strtod_l+0xbf8>)
 8026124:	429a      	cmp	r2, r3
 8026126:	f040 80b0 	bne.w	802628a <_strtod_l+0xb1a>
 802612a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802612e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8026132:	ec4b ab10 	vmov	d0, sl, fp
 8026136:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802613a:	f002 fa8d 	bl	8028658 <__ulp>
 802613e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026142:	ec53 2b10 	vmov	r2, r3, d0
 8026146:	f7ea fdbf 	bl	8010cc8 <__aeabi_dmul>
 802614a:	4652      	mov	r2, sl
 802614c:	465b      	mov	r3, fp
 802614e:	f7ea fc05 	bl	801095c <__adddf3>
 8026152:	460b      	mov	r3, r1
 8026154:	4983      	ldr	r1, [pc, #524]	; (8026364 <_strtod_l+0xbf4>)
 8026156:	4a85      	ldr	r2, [pc, #532]	; (802636c <_strtod_l+0xbfc>)
 8026158:	4019      	ands	r1, r3
 802615a:	4291      	cmp	r1, r2
 802615c:	4682      	mov	sl, r0
 802615e:	d960      	bls.n	8026222 <_strtod_l+0xab2>
 8026160:	ee18 3a90 	vmov	r3, s17
 8026164:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8026168:	4293      	cmp	r3, r2
 802616a:	d104      	bne.n	8026176 <_strtod_l+0xa06>
 802616c:	ee18 3a10 	vmov	r3, s16
 8026170:	3301      	adds	r3, #1
 8026172:	f43f ad45 	beq.w	8025c00 <_strtod_l+0x490>
 8026176:	f8df b200 	ldr.w	fp, [pc, #512]	; 8026378 <_strtod_l+0xc08>
 802617a:	f04f 3aff 	mov.w	sl, #4294967295
 802617e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8026180:	4620      	mov	r0, r4
 8026182:	f001 ff37 	bl	8027ff4 <_Bfree>
 8026186:	9905      	ldr	r1, [sp, #20]
 8026188:	4620      	mov	r0, r4
 802618a:	f001 ff33 	bl	8027ff4 <_Bfree>
 802618e:	4631      	mov	r1, r6
 8026190:	4620      	mov	r0, r4
 8026192:	f001 ff2f 	bl	8027ff4 <_Bfree>
 8026196:	4629      	mov	r1, r5
 8026198:	4620      	mov	r0, r4
 802619a:	f001 ff2b 	bl	8027ff4 <_Bfree>
 802619e:	e61a      	b.n	8025dd6 <_strtod_l+0x666>
 80261a0:	f1ba 0f00 	cmp.w	sl, #0
 80261a4:	d11b      	bne.n	80261de <_strtod_l+0xa6e>
 80261a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80261aa:	b9f3      	cbnz	r3, 80261ea <_strtod_l+0xa7a>
 80261ac:	4b6c      	ldr	r3, [pc, #432]	; (8026360 <_strtod_l+0xbf0>)
 80261ae:	2200      	movs	r2, #0
 80261b0:	4640      	mov	r0, r8
 80261b2:	4649      	mov	r1, r9
 80261b4:	f7ea fffa 	bl	80111ac <__aeabi_dcmplt>
 80261b8:	b9d0      	cbnz	r0, 80261f0 <_strtod_l+0xa80>
 80261ba:	4640      	mov	r0, r8
 80261bc:	4649      	mov	r1, r9
 80261be:	4b6c      	ldr	r3, [pc, #432]	; (8026370 <_strtod_l+0xc00>)
 80261c0:	2200      	movs	r2, #0
 80261c2:	f7ea fd81 	bl	8010cc8 <__aeabi_dmul>
 80261c6:	4680      	mov	r8, r0
 80261c8:	4689      	mov	r9, r1
 80261ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80261ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80261d2:	9315      	str	r3, [sp, #84]	; 0x54
 80261d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80261d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80261dc:	e79d      	b.n	802611a <_strtod_l+0x9aa>
 80261de:	f1ba 0f01 	cmp.w	sl, #1
 80261e2:	d102      	bne.n	80261ea <_strtod_l+0xa7a>
 80261e4:	2f00      	cmp	r7, #0
 80261e6:	f43f ad83 	beq.w	8025cf0 <_strtod_l+0x580>
 80261ea:	4b62      	ldr	r3, [pc, #392]	; (8026374 <_strtod_l+0xc04>)
 80261ec:	2200      	movs	r2, #0
 80261ee:	e78e      	b.n	802610e <_strtod_l+0x99e>
 80261f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8026370 <_strtod_l+0xc00>
 80261f4:	f04f 0800 	mov.w	r8, #0
 80261f8:	e7e7      	b.n	80261ca <_strtod_l+0xa5a>
 80261fa:	4b5d      	ldr	r3, [pc, #372]	; (8026370 <_strtod_l+0xc00>)
 80261fc:	4640      	mov	r0, r8
 80261fe:	4649      	mov	r1, r9
 8026200:	2200      	movs	r2, #0
 8026202:	f7ea fd61 	bl	8010cc8 <__aeabi_dmul>
 8026206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026208:	4680      	mov	r8, r0
 802620a:	4689      	mov	r9, r1
 802620c:	b933      	cbnz	r3, 802621c <_strtod_l+0xaac>
 802620e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026212:	900e      	str	r0, [sp, #56]	; 0x38
 8026214:	930f      	str	r3, [sp, #60]	; 0x3c
 8026216:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 802621a:	e7dd      	b.n	80261d8 <_strtod_l+0xa68>
 802621c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8026220:	e7f9      	b.n	8026216 <_strtod_l+0xaa6>
 8026222:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8026226:	9b04      	ldr	r3, [sp, #16]
 8026228:	2b00      	cmp	r3, #0
 802622a:	d1a8      	bne.n	802617e <_strtod_l+0xa0e>
 802622c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026230:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026232:	0d1b      	lsrs	r3, r3, #20
 8026234:	051b      	lsls	r3, r3, #20
 8026236:	429a      	cmp	r2, r3
 8026238:	d1a1      	bne.n	802617e <_strtod_l+0xa0e>
 802623a:	4640      	mov	r0, r8
 802623c:	4649      	mov	r1, r9
 802623e:	f7eb f8a3 	bl	8011388 <__aeabi_d2lz>
 8026242:	f7ea fd13 	bl	8010c6c <__aeabi_l2d>
 8026246:	4602      	mov	r2, r0
 8026248:	460b      	mov	r3, r1
 802624a:	4640      	mov	r0, r8
 802624c:	4649      	mov	r1, r9
 802624e:	f7ea fb83 	bl	8010958 <__aeabi_dsub>
 8026252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8026258:	ea43 030a 	orr.w	r3, r3, sl
 802625c:	4313      	orrs	r3, r2
 802625e:	4680      	mov	r8, r0
 8026260:	4689      	mov	r9, r1
 8026262:	d055      	beq.n	8026310 <_strtod_l+0xba0>
 8026264:	a336      	add	r3, pc, #216	; (adr r3, 8026340 <_strtod_l+0xbd0>)
 8026266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802626a:	f7ea ff9f 	bl	80111ac <__aeabi_dcmplt>
 802626e:	2800      	cmp	r0, #0
 8026270:	f47f acd0 	bne.w	8025c14 <_strtod_l+0x4a4>
 8026274:	a334      	add	r3, pc, #208	; (adr r3, 8026348 <_strtod_l+0xbd8>)
 8026276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802627a:	4640      	mov	r0, r8
 802627c:	4649      	mov	r1, r9
 802627e:	f7ea ffb3 	bl	80111e8 <__aeabi_dcmpgt>
 8026282:	2800      	cmp	r0, #0
 8026284:	f43f af7b 	beq.w	802617e <_strtod_l+0xa0e>
 8026288:	e4c4      	b.n	8025c14 <_strtod_l+0x4a4>
 802628a:	9b04      	ldr	r3, [sp, #16]
 802628c:	b333      	cbz	r3, 80262dc <_strtod_l+0xb6c>
 802628e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026290:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8026294:	d822      	bhi.n	80262dc <_strtod_l+0xb6c>
 8026296:	a32e      	add	r3, pc, #184	; (adr r3, 8026350 <_strtod_l+0xbe0>)
 8026298:	e9d3 2300 	ldrd	r2, r3, [r3]
 802629c:	4640      	mov	r0, r8
 802629e:	4649      	mov	r1, r9
 80262a0:	f7ea ff8e 	bl	80111c0 <__aeabi_dcmple>
 80262a4:	b1a0      	cbz	r0, 80262d0 <_strtod_l+0xb60>
 80262a6:	4649      	mov	r1, r9
 80262a8:	4640      	mov	r0, r8
 80262aa:	f7ea ffe5 	bl	8011278 <__aeabi_d2uiz>
 80262ae:	2801      	cmp	r0, #1
 80262b0:	bf38      	it	cc
 80262b2:	2001      	movcc	r0, #1
 80262b4:	f7ea fc8e 	bl	8010bd4 <__aeabi_ui2d>
 80262b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80262ba:	4680      	mov	r8, r0
 80262bc:	4689      	mov	r9, r1
 80262be:	bb23      	cbnz	r3, 802630a <_strtod_l+0xb9a>
 80262c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80262c4:	9010      	str	r0, [sp, #64]	; 0x40
 80262c6:	9311      	str	r3, [sp, #68]	; 0x44
 80262c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80262cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80262d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80262d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80262d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80262d8:	1a9b      	subs	r3, r3, r2
 80262da:	9309      	str	r3, [sp, #36]	; 0x24
 80262dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80262e0:	eeb0 0a48 	vmov.f32	s0, s16
 80262e4:	eef0 0a68 	vmov.f32	s1, s17
 80262e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80262ec:	f002 f9b4 	bl	8028658 <__ulp>
 80262f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80262f4:	ec53 2b10 	vmov	r2, r3, d0
 80262f8:	f7ea fce6 	bl	8010cc8 <__aeabi_dmul>
 80262fc:	ec53 2b18 	vmov	r2, r3, d8
 8026300:	f7ea fb2c 	bl	801095c <__adddf3>
 8026304:	4682      	mov	sl, r0
 8026306:	468b      	mov	fp, r1
 8026308:	e78d      	b.n	8026226 <_strtod_l+0xab6>
 802630a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 802630e:	e7db      	b.n	80262c8 <_strtod_l+0xb58>
 8026310:	a311      	add	r3, pc, #68	; (adr r3, 8026358 <_strtod_l+0xbe8>)
 8026312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026316:	f7ea ff49 	bl	80111ac <__aeabi_dcmplt>
 802631a:	e7b2      	b.n	8026282 <_strtod_l+0xb12>
 802631c:	2300      	movs	r3, #0
 802631e:	930a      	str	r3, [sp, #40]	; 0x28
 8026320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026322:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026324:	6013      	str	r3, [r2, #0]
 8026326:	f7ff ba6b 	b.w	8025800 <_strtod_l+0x90>
 802632a:	2a65      	cmp	r2, #101	; 0x65
 802632c:	f43f ab5f 	beq.w	80259ee <_strtod_l+0x27e>
 8026330:	2a45      	cmp	r2, #69	; 0x45
 8026332:	f43f ab5c 	beq.w	80259ee <_strtod_l+0x27e>
 8026336:	2301      	movs	r3, #1
 8026338:	f7ff bb94 	b.w	8025a64 <_strtod_l+0x2f4>
 802633c:	f3af 8000 	nop.w
 8026340:	94a03595 	.word	0x94a03595
 8026344:	3fdfffff 	.word	0x3fdfffff
 8026348:	35afe535 	.word	0x35afe535
 802634c:	3fe00000 	.word	0x3fe00000
 8026350:	ffc00000 	.word	0xffc00000
 8026354:	41dfffff 	.word	0x41dfffff
 8026358:	94a03595 	.word	0x94a03595
 802635c:	3fcfffff 	.word	0x3fcfffff
 8026360:	3ff00000 	.word	0x3ff00000
 8026364:	7ff00000 	.word	0x7ff00000
 8026368:	7fe00000 	.word	0x7fe00000
 802636c:	7c9fffff 	.word	0x7c9fffff
 8026370:	3fe00000 	.word	0x3fe00000
 8026374:	bff00000 	.word	0xbff00000
 8026378:	7fefffff 	.word	0x7fefffff

0802637c <strtof>:
 802637c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026380:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8026430 <strtof+0xb4>
 8026384:	4b26      	ldr	r3, [pc, #152]	; (8026420 <strtof+0xa4>)
 8026386:	460a      	mov	r2, r1
 8026388:	ed2d 8b02 	vpush	{d8}
 802638c:	4601      	mov	r1, r0
 802638e:	f8d8 0000 	ldr.w	r0, [r8]
 8026392:	f7ff f9ed 	bl	8025770 <_strtod_l>
 8026396:	ec55 4b10 	vmov	r4, r5, d0
 802639a:	ee10 2a10 	vmov	r2, s0
 802639e:	ee10 0a10 	vmov	r0, s0
 80263a2:	462b      	mov	r3, r5
 80263a4:	4629      	mov	r1, r5
 80263a6:	f7ea ff29 	bl	80111fc <__aeabi_dcmpun>
 80263aa:	b190      	cbz	r0, 80263d2 <strtof+0x56>
 80263ac:	2d00      	cmp	r5, #0
 80263ae:	481d      	ldr	r0, [pc, #116]	; (8026424 <strtof+0xa8>)
 80263b0:	da09      	bge.n	80263c6 <strtof+0x4a>
 80263b2:	f002 fc19 	bl	8028be8 <nanf>
 80263b6:	eeb1 8a40 	vneg.f32	s16, s0
 80263ba:	eeb0 0a48 	vmov.f32	s0, s16
 80263be:	ecbd 8b02 	vpop	{d8}
 80263c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80263c6:	ecbd 8b02 	vpop	{d8}
 80263ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80263ce:	f002 bc0b 	b.w	8028be8 <nanf>
 80263d2:	4620      	mov	r0, r4
 80263d4:	4629      	mov	r1, r5
 80263d6:	f7ea ff6f 	bl	80112b8 <__aeabi_d2f>
 80263da:	ee08 0a10 	vmov	s16, r0
 80263de:	eddf 7a12 	vldr	s15, [pc, #72]	; 8026428 <strtof+0xac>
 80263e2:	eeb0 7ac8 	vabs.f32	s14, s16
 80263e6:	eeb4 7a67 	vcmp.f32	s14, s15
 80263ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263ee:	dde4      	ble.n	80263ba <strtof+0x3e>
 80263f0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80263f4:	4b0d      	ldr	r3, [pc, #52]	; (802642c <strtof+0xb0>)
 80263f6:	f04f 32ff 	mov.w	r2, #4294967295
 80263fa:	4620      	mov	r0, r4
 80263fc:	4639      	mov	r1, r7
 80263fe:	f7ea fefd 	bl	80111fc <__aeabi_dcmpun>
 8026402:	b940      	cbnz	r0, 8026416 <strtof+0x9a>
 8026404:	4b09      	ldr	r3, [pc, #36]	; (802642c <strtof+0xb0>)
 8026406:	f04f 32ff 	mov.w	r2, #4294967295
 802640a:	4620      	mov	r0, r4
 802640c:	4639      	mov	r1, r7
 802640e:	f7ea fed7 	bl	80111c0 <__aeabi_dcmple>
 8026412:	2800      	cmp	r0, #0
 8026414:	d0d1      	beq.n	80263ba <strtof+0x3e>
 8026416:	f8d8 3000 	ldr.w	r3, [r8]
 802641a:	2222      	movs	r2, #34	; 0x22
 802641c:	601a      	str	r2, [r3, #0]
 802641e:	e7cc      	b.n	80263ba <strtof+0x3e>
 8026420:	20000148 	.word	0x20000148
 8026424:	08037bd0 	.word	0x08037bd0
 8026428:	7f7fffff 	.word	0x7f7fffff
 802642c:	7fefffff 	.word	0x7fefffff
 8026430:	200000e0 	.word	0x200000e0

08026434 <_strtoul_l.constprop.0>:
 8026434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026438:	4f36      	ldr	r7, [pc, #216]	; (8026514 <_strtoul_l.constprop.0+0xe0>)
 802643a:	4686      	mov	lr, r0
 802643c:	460d      	mov	r5, r1
 802643e:	4628      	mov	r0, r5
 8026440:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026444:	5de6      	ldrb	r6, [r4, r7]
 8026446:	f016 0608 	ands.w	r6, r6, #8
 802644a:	d1f8      	bne.n	802643e <_strtoul_l.constprop.0+0xa>
 802644c:	2c2d      	cmp	r4, #45	; 0x2d
 802644e:	d12f      	bne.n	80264b0 <_strtoul_l.constprop.0+0x7c>
 8026450:	782c      	ldrb	r4, [r5, #0]
 8026452:	2601      	movs	r6, #1
 8026454:	1c85      	adds	r5, r0, #2
 8026456:	2b00      	cmp	r3, #0
 8026458:	d057      	beq.n	802650a <_strtoul_l.constprop.0+0xd6>
 802645a:	2b10      	cmp	r3, #16
 802645c:	d109      	bne.n	8026472 <_strtoul_l.constprop.0+0x3e>
 802645e:	2c30      	cmp	r4, #48	; 0x30
 8026460:	d107      	bne.n	8026472 <_strtoul_l.constprop.0+0x3e>
 8026462:	7828      	ldrb	r0, [r5, #0]
 8026464:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8026468:	2858      	cmp	r0, #88	; 0x58
 802646a:	d149      	bne.n	8026500 <_strtoul_l.constprop.0+0xcc>
 802646c:	786c      	ldrb	r4, [r5, #1]
 802646e:	2310      	movs	r3, #16
 8026470:	3502      	adds	r5, #2
 8026472:	f04f 38ff 	mov.w	r8, #4294967295
 8026476:	2700      	movs	r7, #0
 8026478:	fbb8 f8f3 	udiv	r8, r8, r3
 802647c:	fb03 f908 	mul.w	r9, r3, r8
 8026480:	ea6f 0909 	mvn.w	r9, r9
 8026484:	4638      	mov	r0, r7
 8026486:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802648a:	f1bc 0f09 	cmp.w	ip, #9
 802648e:	d814      	bhi.n	80264ba <_strtoul_l.constprop.0+0x86>
 8026490:	4664      	mov	r4, ip
 8026492:	42a3      	cmp	r3, r4
 8026494:	dd22      	ble.n	80264dc <_strtoul_l.constprop.0+0xa8>
 8026496:	2f00      	cmp	r7, #0
 8026498:	db1d      	blt.n	80264d6 <_strtoul_l.constprop.0+0xa2>
 802649a:	4580      	cmp	r8, r0
 802649c:	d31b      	bcc.n	80264d6 <_strtoul_l.constprop.0+0xa2>
 802649e:	d101      	bne.n	80264a4 <_strtoul_l.constprop.0+0x70>
 80264a0:	45a1      	cmp	r9, r4
 80264a2:	db18      	blt.n	80264d6 <_strtoul_l.constprop.0+0xa2>
 80264a4:	fb00 4003 	mla	r0, r0, r3, r4
 80264a8:	2701      	movs	r7, #1
 80264aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80264ae:	e7ea      	b.n	8026486 <_strtoul_l.constprop.0+0x52>
 80264b0:	2c2b      	cmp	r4, #43	; 0x2b
 80264b2:	bf04      	itt	eq
 80264b4:	782c      	ldrbeq	r4, [r5, #0]
 80264b6:	1c85      	addeq	r5, r0, #2
 80264b8:	e7cd      	b.n	8026456 <_strtoul_l.constprop.0+0x22>
 80264ba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80264be:	f1bc 0f19 	cmp.w	ip, #25
 80264c2:	d801      	bhi.n	80264c8 <_strtoul_l.constprop.0+0x94>
 80264c4:	3c37      	subs	r4, #55	; 0x37
 80264c6:	e7e4      	b.n	8026492 <_strtoul_l.constprop.0+0x5e>
 80264c8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80264cc:	f1bc 0f19 	cmp.w	ip, #25
 80264d0:	d804      	bhi.n	80264dc <_strtoul_l.constprop.0+0xa8>
 80264d2:	3c57      	subs	r4, #87	; 0x57
 80264d4:	e7dd      	b.n	8026492 <_strtoul_l.constprop.0+0x5e>
 80264d6:	f04f 37ff 	mov.w	r7, #4294967295
 80264da:	e7e6      	b.n	80264aa <_strtoul_l.constprop.0+0x76>
 80264dc:	2f00      	cmp	r7, #0
 80264de:	da07      	bge.n	80264f0 <_strtoul_l.constprop.0+0xbc>
 80264e0:	2322      	movs	r3, #34	; 0x22
 80264e2:	f8ce 3000 	str.w	r3, [lr]
 80264e6:	f04f 30ff 	mov.w	r0, #4294967295
 80264ea:	b932      	cbnz	r2, 80264fa <_strtoul_l.constprop.0+0xc6>
 80264ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80264f0:	b106      	cbz	r6, 80264f4 <_strtoul_l.constprop.0+0xc0>
 80264f2:	4240      	negs	r0, r0
 80264f4:	2a00      	cmp	r2, #0
 80264f6:	d0f9      	beq.n	80264ec <_strtoul_l.constprop.0+0xb8>
 80264f8:	b107      	cbz	r7, 80264fc <_strtoul_l.constprop.0+0xc8>
 80264fa:	1e69      	subs	r1, r5, #1
 80264fc:	6011      	str	r1, [r2, #0]
 80264fe:	e7f5      	b.n	80264ec <_strtoul_l.constprop.0+0xb8>
 8026500:	2430      	movs	r4, #48	; 0x30
 8026502:	2b00      	cmp	r3, #0
 8026504:	d1b5      	bne.n	8026472 <_strtoul_l.constprop.0+0x3e>
 8026506:	2308      	movs	r3, #8
 8026508:	e7b3      	b.n	8026472 <_strtoul_l.constprop.0+0x3e>
 802650a:	2c30      	cmp	r4, #48	; 0x30
 802650c:	d0a9      	beq.n	8026462 <_strtoul_l.constprop.0+0x2e>
 802650e:	230a      	movs	r3, #10
 8026510:	e7af      	b.n	8026472 <_strtoul_l.constprop.0+0x3e>
 8026512:	bf00      	nop
 8026514:	080377b9 	.word	0x080377b9

08026518 <strtoul>:
 8026518:	4613      	mov	r3, r2
 802651a:	460a      	mov	r2, r1
 802651c:	4601      	mov	r1, r0
 802651e:	4802      	ldr	r0, [pc, #8]	; (8026528 <strtoul+0x10>)
 8026520:	6800      	ldr	r0, [r0, #0]
 8026522:	f7ff bf87 	b.w	8026434 <_strtoul_l.constprop.0>
 8026526:	bf00      	nop
 8026528:	200000e0 	.word	0x200000e0

0802652c <_vsniprintf_r>:
 802652c:	b530      	push	{r4, r5, lr}
 802652e:	4614      	mov	r4, r2
 8026530:	2c00      	cmp	r4, #0
 8026532:	b09b      	sub	sp, #108	; 0x6c
 8026534:	4605      	mov	r5, r0
 8026536:	461a      	mov	r2, r3
 8026538:	da05      	bge.n	8026546 <_vsniprintf_r+0x1a>
 802653a:	238b      	movs	r3, #139	; 0x8b
 802653c:	6003      	str	r3, [r0, #0]
 802653e:	f04f 30ff 	mov.w	r0, #4294967295
 8026542:	b01b      	add	sp, #108	; 0x6c
 8026544:	bd30      	pop	{r4, r5, pc}
 8026546:	f44f 7302 	mov.w	r3, #520	; 0x208
 802654a:	f8ad 300c 	strh.w	r3, [sp, #12]
 802654e:	bf14      	ite	ne
 8026550:	f104 33ff 	addne.w	r3, r4, #4294967295
 8026554:	4623      	moveq	r3, r4
 8026556:	9302      	str	r3, [sp, #8]
 8026558:	9305      	str	r3, [sp, #20]
 802655a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802655e:	9100      	str	r1, [sp, #0]
 8026560:	9104      	str	r1, [sp, #16]
 8026562:	f8ad 300e 	strh.w	r3, [sp, #14]
 8026566:	4669      	mov	r1, sp
 8026568:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802656a:	f002 fa35 	bl	80289d8 <_svfiprintf_r>
 802656e:	1c43      	adds	r3, r0, #1
 8026570:	bfbc      	itt	lt
 8026572:	238b      	movlt	r3, #139	; 0x8b
 8026574:	602b      	strlt	r3, [r5, #0]
 8026576:	2c00      	cmp	r4, #0
 8026578:	d0e3      	beq.n	8026542 <_vsniprintf_r+0x16>
 802657a:	9b00      	ldr	r3, [sp, #0]
 802657c:	2200      	movs	r2, #0
 802657e:	701a      	strb	r2, [r3, #0]
 8026580:	e7df      	b.n	8026542 <_vsniprintf_r+0x16>
	...

08026584 <vsniprintf>:
 8026584:	b507      	push	{r0, r1, r2, lr}
 8026586:	9300      	str	r3, [sp, #0]
 8026588:	4613      	mov	r3, r2
 802658a:	460a      	mov	r2, r1
 802658c:	4601      	mov	r1, r0
 802658e:	4803      	ldr	r0, [pc, #12]	; (802659c <vsniprintf+0x18>)
 8026590:	6800      	ldr	r0, [r0, #0]
 8026592:	f7ff ffcb 	bl	802652c <_vsniprintf_r>
 8026596:	b003      	add	sp, #12
 8026598:	f85d fb04 	ldr.w	pc, [sp], #4
 802659c:	200000e0 	.word	0x200000e0

080265a0 <__swbuf_r>:
 80265a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265a2:	460e      	mov	r6, r1
 80265a4:	4614      	mov	r4, r2
 80265a6:	4605      	mov	r5, r0
 80265a8:	b118      	cbz	r0, 80265b2 <__swbuf_r+0x12>
 80265aa:	6983      	ldr	r3, [r0, #24]
 80265ac:	b90b      	cbnz	r3, 80265b2 <__swbuf_r+0x12>
 80265ae:	f001 f84b 	bl	8027648 <__sinit>
 80265b2:	4b21      	ldr	r3, [pc, #132]	; (8026638 <__swbuf_r+0x98>)
 80265b4:	429c      	cmp	r4, r3
 80265b6:	d12b      	bne.n	8026610 <__swbuf_r+0x70>
 80265b8:	686c      	ldr	r4, [r5, #4]
 80265ba:	69a3      	ldr	r3, [r4, #24]
 80265bc:	60a3      	str	r3, [r4, #8]
 80265be:	89a3      	ldrh	r3, [r4, #12]
 80265c0:	071a      	lsls	r2, r3, #28
 80265c2:	d52f      	bpl.n	8026624 <__swbuf_r+0x84>
 80265c4:	6923      	ldr	r3, [r4, #16]
 80265c6:	b36b      	cbz	r3, 8026624 <__swbuf_r+0x84>
 80265c8:	6923      	ldr	r3, [r4, #16]
 80265ca:	6820      	ldr	r0, [r4, #0]
 80265cc:	1ac0      	subs	r0, r0, r3
 80265ce:	6963      	ldr	r3, [r4, #20]
 80265d0:	b2f6      	uxtb	r6, r6
 80265d2:	4283      	cmp	r3, r0
 80265d4:	4637      	mov	r7, r6
 80265d6:	dc04      	bgt.n	80265e2 <__swbuf_r+0x42>
 80265d8:	4621      	mov	r1, r4
 80265da:	4628      	mov	r0, r5
 80265dc:	f000 ffa0 	bl	8027520 <_fflush_r>
 80265e0:	bb30      	cbnz	r0, 8026630 <__swbuf_r+0x90>
 80265e2:	68a3      	ldr	r3, [r4, #8]
 80265e4:	3b01      	subs	r3, #1
 80265e6:	60a3      	str	r3, [r4, #8]
 80265e8:	6823      	ldr	r3, [r4, #0]
 80265ea:	1c5a      	adds	r2, r3, #1
 80265ec:	6022      	str	r2, [r4, #0]
 80265ee:	701e      	strb	r6, [r3, #0]
 80265f0:	6963      	ldr	r3, [r4, #20]
 80265f2:	3001      	adds	r0, #1
 80265f4:	4283      	cmp	r3, r0
 80265f6:	d004      	beq.n	8026602 <__swbuf_r+0x62>
 80265f8:	89a3      	ldrh	r3, [r4, #12]
 80265fa:	07db      	lsls	r3, r3, #31
 80265fc:	d506      	bpl.n	802660c <__swbuf_r+0x6c>
 80265fe:	2e0a      	cmp	r6, #10
 8026600:	d104      	bne.n	802660c <__swbuf_r+0x6c>
 8026602:	4621      	mov	r1, r4
 8026604:	4628      	mov	r0, r5
 8026606:	f000 ff8b 	bl	8027520 <_fflush_r>
 802660a:	b988      	cbnz	r0, 8026630 <__swbuf_r+0x90>
 802660c:	4638      	mov	r0, r7
 802660e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026610:	4b0a      	ldr	r3, [pc, #40]	; (802663c <__swbuf_r+0x9c>)
 8026612:	429c      	cmp	r4, r3
 8026614:	d101      	bne.n	802661a <__swbuf_r+0x7a>
 8026616:	68ac      	ldr	r4, [r5, #8]
 8026618:	e7cf      	b.n	80265ba <__swbuf_r+0x1a>
 802661a:	4b09      	ldr	r3, [pc, #36]	; (8026640 <__swbuf_r+0xa0>)
 802661c:	429c      	cmp	r4, r3
 802661e:	bf08      	it	eq
 8026620:	68ec      	ldreq	r4, [r5, #12]
 8026622:	e7ca      	b.n	80265ba <__swbuf_r+0x1a>
 8026624:	4621      	mov	r1, r4
 8026626:	4628      	mov	r0, r5
 8026628:	f000 f80c 	bl	8026644 <__swsetup_r>
 802662c:	2800      	cmp	r0, #0
 802662e:	d0cb      	beq.n	80265c8 <__swbuf_r+0x28>
 8026630:	f04f 37ff 	mov.w	r7, #4294967295
 8026634:	e7ea      	b.n	802660c <__swbuf_r+0x6c>
 8026636:	bf00      	nop
 8026638:	0803796c 	.word	0x0803796c
 802663c:	0803798c 	.word	0x0803798c
 8026640:	0803794c 	.word	0x0803794c

08026644 <__swsetup_r>:
 8026644:	4b32      	ldr	r3, [pc, #200]	; (8026710 <__swsetup_r+0xcc>)
 8026646:	b570      	push	{r4, r5, r6, lr}
 8026648:	681d      	ldr	r5, [r3, #0]
 802664a:	4606      	mov	r6, r0
 802664c:	460c      	mov	r4, r1
 802664e:	b125      	cbz	r5, 802665a <__swsetup_r+0x16>
 8026650:	69ab      	ldr	r3, [r5, #24]
 8026652:	b913      	cbnz	r3, 802665a <__swsetup_r+0x16>
 8026654:	4628      	mov	r0, r5
 8026656:	f000 fff7 	bl	8027648 <__sinit>
 802665a:	4b2e      	ldr	r3, [pc, #184]	; (8026714 <__swsetup_r+0xd0>)
 802665c:	429c      	cmp	r4, r3
 802665e:	d10f      	bne.n	8026680 <__swsetup_r+0x3c>
 8026660:	686c      	ldr	r4, [r5, #4]
 8026662:	89a3      	ldrh	r3, [r4, #12]
 8026664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026668:	0719      	lsls	r1, r3, #28
 802666a:	d42c      	bmi.n	80266c6 <__swsetup_r+0x82>
 802666c:	06dd      	lsls	r5, r3, #27
 802666e:	d411      	bmi.n	8026694 <__swsetup_r+0x50>
 8026670:	2309      	movs	r3, #9
 8026672:	6033      	str	r3, [r6, #0]
 8026674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026678:	81a3      	strh	r3, [r4, #12]
 802667a:	f04f 30ff 	mov.w	r0, #4294967295
 802667e:	e03e      	b.n	80266fe <__swsetup_r+0xba>
 8026680:	4b25      	ldr	r3, [pc, #148]	; (8026718 <__swsetup_r+0xd4>)
 8026682:	429c      	cmp	r4, r3
 8026684:	d101      	bne.n	802668a <__swsetup_r+0x46>
 8026686:	68ac      	ldr	r4, [r5, #8]
 8026688:	e7eb      	b.n	8026662 <__swsetup_r+0x1e>
 802668a:	4b24      	ldr	r3, [pc, #144]	; (802671c <__swsetup_r+0xd8>)
 802668c:	429c      	cmp	r4, r3
 802668e:	bf08      	it	eq
 8026690:	68ec      	ldreq	r4, [r5, #12]
 8026692:	e7e6      	b.n	8026662 <__swsetup_r+0x1e>
 8026694:	0758      	lsls	r0, r3, #29
 8026696:	d512      	bpl.n	80266be <__swsetup_r+0x7a>
 8026698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802669a:	b141      	cbz	r1, 80266ae <__swsetup_r+0x6a>
 802669c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80266a0:	4299      	cmp	r1, r3
 80266a2:	d002      	beq.n	80266aa <__swsetup_r+0x66>
 80266a4:	4630      	mov	r0, r6
 80266a6:	f7fe fae3 	bl	8024c70 <_free_r>
 80266aa:	2300      	movs	r3, #0
 80266ac:	6363      	str	r3, [r4, #52]	; 0x34
 80266ae:	89a3      	ldrh	r3, [r4, #12]
 80266b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80266b4:	81a3      	strh	r3, [r4, #12]
 80266b6:	2300      	movs	r3, #0
 80266b8:	6063      	str	r3, [r4, #4]
 80266ba:	6923      	ldr	r3, [r4, #16]
 80266bc:	6023      	str	r3, [r4, #0]
 80266be:	89a3      	ldrh	r3, [r4, #12]
 80266c0:	f043 0308 	orr.w	r3, r3, #8
 80266c4:	81a3      	strh	r3, [r4, #12]
 80266c6:	6923      	ldr	r3, [r4, #16]
 80266c8:	b94b      	cbnz	r3, 80266de <__swsetup_r+0x9a>
 80266ca:	89a3      	ldrh	r3, [r4, #12]
 80266cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80266d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80266d4:	d003      	beq.n	80266de <__swsetup_r+0x9a>
 80266d6:	4621      	mov	r1, r4
 80266d8:	4630      	mov	r0, r6
 80266da:	f001 fbed 	bl	8027eb8 <__smakebuf_r>
 80266de:	89a0      	ldrh	r0, [r4, #12]
 80266e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80266e4:	f010 0301 	ands.w	r3, r0, #1
 80266e8:	d00a      	beq.n	8026700 <__swsetup_r+0xbc>
 80266ea:	2300      	movs	r3, #0
 80266ec:	60a3      	str	r3, [r4, #8]
 80266ee:	6963      	ldr	r3, [r4, #20]
 80266f0:	425b      	negs	r3, r3
 80266f2:	61a3      	str	r3, [r4, #24]
 80266f4:	6923      	ldr	r3, [r4, #16]
 80266f6:	b943      	cbnz	r3, 802670a <__swsetup_r+0xc6>
 80266f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80266fc:	d1ba      	bne.n	8026674 <__swsetup_r+0x30>
 80266fe:	bd70      	pop	{r4, r5, r6, pc}
 8026700:	0781      	lsls	r1, r0, #30
 8026702:	bf58      	it	pl
 8026704:	6963      	ldrpl	r3, [r4, #20]
 8026706:	60a3      	str	r3, [r4, #8]
 8026708:	e7f4      	b.n	80266f4 <__swsetup_r+0xb0>
 802670a:	2000      	movs	r0, #0
 802670c:	e7f7      	b.n	80266fe <__swsetup_r+0xba>
 802670e:	bf00      	nop
 8026710:	200000e0 	.word	0x200000e0
 8026714:	0803796c 	.word	0x0803796c
 8026718:	0803798c 	.word	0x0803798c
 802671c:	0803794c 	.word	0x0803794c

08026720 <quorem>:
 8026720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026724:	6903      	ldr	r3, [r0, #16]
 8026726:	690c      	ldr	r4, [r1, #16]
 8026728:	42a3      	cmp	r3, r4
 802672a:	4607      	mov	r7, r0
 802672c:	f2c0 8081 	blt.w	8026832 <quorem+0x112>
 8026730:	3c01      	subs	r4, #1
 8026732:	f101 0814 	add.w	r8, r1, #20
 8026736:	f100 0514 	add.w	r5, r0, #20
 802673a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802673e:	9301      	str	r3, [sp, #4]
 8026740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026748:	3301      	adds	r3, #1
 802674a:	429a      	cmp	r2, r3
 802674c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026754:	fbb2 f6f3 	udiv	r6, r2, r3
 8026758:	d331      	bcc.n	80267be <quorem+0x9e>
 802675a:	f04f 0e00 	mov.w	lr, #0
 802675e:	4640      	mov	r0, r8
 8026760:	46ac      	mov	ip, r5
 8026762:	46f2      	mov	sl, lr
 8026764:	f850 2b04 	ldr.w	r2, [r0], #4
 8026768:	b293      	uxth	r3, r2
 802676a:	fb06 e303 	mla	r3, r6, r3, lr
 802676e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026772:	b29b      	uxth	r3, r3
 8026774:	ebaa 0303 	sub.w	r3, sl, r3
 8026778:	f8dc a000 	ldr.w	sl, [ip]
 802677c:	0c12      	lsrs	r2, r2, #16
 802677e:	fa13 f38a 	uxtah	r3, r3, sl
 8026782:	fb06 e202 	mla	r2, r6, r2, lr
 8026786:	9300      	str	r3, [sp, #0]
 8026788:	9b00      	ldr	r3, [sp, #0]
 802678a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802678e:	b292      	uxth	r2, r2
 8026790:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026798:	f8bd 3000 	ldrh.w	r3, [sp]
 802679c:	4581      	cmp	r9, r0
 802679e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80267a2:	f84c 3b04 	str.w	r3, [ip], #4
 80267a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80267aa:	d2db      	bcs.n	8026764 <quorem+0x44>
 80267ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80267b0:	b92b      	cbnz	r3, 80267be <quorem+0x9e>
 80267b2:	9b01      	ldr	r3, [sp, #4]
 80267b4:	3b04      	subs	r3, #4
 80267b6:	429d      	cmp	r5, r3
 80267b8:	461a      	mov	r2, r3
 80267ba:	d32e      	bcc.n	802681a <quorem+0xfa>
 80267bc:	613c      	str	r4, [r7, #16]
 80267be:	4638      	mov	r0, r7
 80267c0:	f001 fea4 	bl	802850c <__mcmp>
 80267c4:	2800      	cmp	r0, #0
 80267c6:	db24      	blt.n	8026812 <quorem+0xf2>
 80267c8:	3601      	adds	r6, #1
 80267ca:	4628      	mov	r0, r5
 80267cc:	f04f 0c00 	mov.w	ip, #0
 80267d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80267d4:	f8d0 e000 	ldr.w	lr, [r0]
 80267d8:	b293      	uxth	r3, r2
 80267da:	ebac 0303 	sub.w	r3, ip, r3
 80267de:	0c12      	lsrs	r2, r2, #16
 80267e0:	fa13 f38e 	uxtah	r3, r3, lr
 80267e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80267e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80267ec:	b29b      	uxth	r3, r3
 80267ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80267f2:	45c1      	cmp	r9, r8
 80267f4:	f840 3b04 	str.w	r3, [r0], #4
 80267f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80267fc:	d2e8      	bcs.n	80267d0 <quorem+0xb0>
 80267fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026806:	b922      	cbnz	r2, 8026812 <quorem+0xf2>
 8026808:	3b04      	subs	r3, #4
 802680a:	429d      	cmp	r5, r3
 802680c:	461a      	mov	r2, r3
 802680e:	d30a      	bcc.n	8026826 <quorem+0x106>
 8026810:	613c      	str	r4, [r7, #16]
 8026812:	4630      	mov	r0, r6
 8026814:	b003      	add	sp, #12
 8026816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802681a:	6812      	ldr	r2, [r2, #0]
 802681c:	3b04      	subs	r3, #4
 802681e:	2a00      	cmp	r2, #0
 8026820:	d1cc      	bne.n	80267bc <quorem+0x9c>
 8026822:	3c01      	subs	r4, #1
 8026824:	e7c7      	b.n	80267b6 <quorem+0x96>
 8026826:	6812      	ldr	r2, [r2, #0]
 8026828:	3b04      	subs	r3, #4
 802682a:	2a00      	cmp	r2, #0
 802682c:	d1f0      	bne.n	8026810 <quorem+0xf0>
 802682e:	3c01      	subs	r4, #1
 8026830:	e7eb      	b.n	802680a <quorem+0xea>
 8026832:	2000      	movs	r0, #0
 8026834:	e7ee      	b.n	8026814 <quorem+0xf4>
	...

08026838 <_dtoa_r>:
 8026838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802683c:	ed2d 8b04 	vpush	{d8-d9}
 8026840:	ec57 6b10 	vmov	r6, r7, d0
 8026844:	b093      	sub	sp, #76	; 0x4c
 8026846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802684c:	9106      	str	r1, [sp, #24]
 802684e:	ee10 aa10 	vmov	sl, s0
 8026852:	4604      	mov	r4, r0
 8026854:	9209      	str	r2, [sp, #36]	; 0x24
 8026856:	930c      	str	r3, [sp, #48]	; 0x30
 8026858:	46bb      	mov	fp, r7
 802685a:	b975      	cbnz	r5, 802687a <_dtoa_r+0x42>
 802685c:	2010      	movs	r0, #16
 802685e:	f7fe f9e1 	bl	8024c24 <malloc>
 8026862:	4602      	mov	r2, r0
 8026864:	6260      	str	r0, [r4, #36]	; 0x24
 8026866:	b920      	cbnz	r0, 8026872 <_dtoa_r+0x3a>
 8026868:	4ba7      	ldr	r3, [pc, #668]	; (8026b08 <_dtoa_r+0x2d0>)
 802686a:	21ea      	movs	r1, #234	; 0xea
 802686c:	48a7      	ldr	r0, [pc, #668]	; (8026b0c <_dtoa_r+0x2d4>)
 802686e:	f002 fa37 	bl	8028ce0 <__assert_func>
 8026872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026876:	6005      	str	r5, [r0, #0]
 8026878:	60c5      	str	r5, [r0, #12]
 802687a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802687c:	6819      	ldr	r1, [r3, #0]
 802687e:	b151      	cbz	r1, 8026896 <_dtoa_r+0x5e>
 8026880:	685a      	ldr	r2, [r3, #4]
 8026882:	604a      	str	r2, [r1, #4]
 8026884:	2301      	movs	r3, #1
 8026886:	4093      	lsls	r3, r2
 8026888:	608b      	str	r3, [r1, #8]
 802688a:	4620      	mov	r0, r4
 802688c:	f001 fbb2 	bl	8027ff4 <_Bfree>
 8026890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026892:	2200      	movs	r2, #0
 8026894:	601a      	str	r2, [r3, #0]
 8026896:	1e3b      	subs	r3, r7, #0
 8026898:	bfaa      	itet	ge
 802689a:	2300      	movge	r3, #0
 802689c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80268a0:	f8c8 3000 	strge.w	r3, [r8]
 80268a4:	4b9a      	ldr	r3, [pc, #616]	; (8026b10 <_dtoa_r+0x2d8>)
 80268a6:	bfbc      	itt	lt
 80268a8:	2201      	movlt	r2, #1
 80268aa:	f8c8 2000 	strlt.w	r2, [r8]
 80268ae:	ea33 030b 	bics.w	r3, r3, fp
 80268b2:	d11b      	bne.n	80268ec <_dtoa_r+0xb4>
 80268b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80268b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80268ba:	6013      	str	r3, [r2, #0]
 80268bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80268c0:	4333      	orrs	r3, r6
 80268c2:	f000 8592 	beq.w	80273ea <_dtoa_r+0xbb2>
 80268c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80268c8:	b963      	cbnz	r3, 80268e4 <_dtoa_r+0xac>
 80268ca:	4b92      	ldr	r3, [pc, #584]	; (8026b14 <_dtoa_r+0x2dc>)
 80268cc:	e022      	b.n	8026914 <_dtoa_r+0xdc>
 80268ce:	4b92      	ldr	r3, [pc, #584]	; (8026b18 <_dtoa_r+0x2e0>)
 80268d0:	9301      	str	r3, [sp, #4]
 80268d2:	3308      	adds	r3, #8
 80268d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80268d6:	6013      	str	r3, [r2, #0]
 80268d8:	9801      	ldr	r0, [sp, #4]
 80268da:	b013      	add	sp, #76	; 0x4c
 80268dc:	ecbd 8b04 	vpop	{d8-d9}
 80268e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268e4:	4b8b      	ldr	r3, [pc, #556]	; (8026b14 <_dtoa_r+0x2dc>)
 80268e6:	9301      	str	r3, [sp, #4]
 80268e8:	3303      	adds	r3, #3
 80268ea:	e7f3      	b.n	80268d4 <_dtoa_r+0x9c>
 80268ec:	2200      	movs	r2, #0
 80268ee:	2300      	movs	r3, #0
 80268f0:	4650      	mov	r0, sl
 80268f2:	4659      	mov	r1, fp
 80268f4:	f7ea fc50 	bl	8011198 <__aeabi_dcmpeq>
 80268f8:	ec4b ab19 	vmov	d9, sl, fp
 80268fc:	4680      	mov	r8, r0
 80268fe:	b158      	cbz	r0, 8026918 <_dtoa_r+0xe0>
 8026900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026902:	2301      	movs	r3, #1
 8026904:	6013      	str	r3, [r2, #0]
 8026906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026908:	2b00      	cmp	r3, #0
 802690a:	f000 856b 	beq.w	80273e4 <_dtoa_r+0xbac>
 802690e:	4883      	ldr	r0, [pc, #524]	; (8026b1c <_dtoa_r+0x2e4>)
 8026910:	6018      	str	r0, [r3, #0]
 8026912:	1e43      	subs	r3, r0, #1
 8026914:	9301      	str	r3, [sp, #4]
 8026916:	e7df      	b.n	80268d8 <_dtoa_r+0xa0>
 8026918:	ec4b ab10 	vmov	d0, sl, fp
 802691c:	aa10      	add	r2, sp, #64	; 0x40
 802691e:	a911      	add	r1, sp, #68	; 0x44
 8026920:	4620      	mov	r0, r4
 8026922:	f001 ff15 	bl	8028750 <__d2b>
 8026926:	f3cb 550a 	ubfx	r5, fp, #20, #11
 802692a:	ee08 0a10 	vmov	s16, r0
 802692e:	2d00      	cmp	r5, #0
 8026930:	f000 8084 	beq.w	8026a3c <_dtoa_r+0x204>
 8026934:	ee19 3a90 	vmov	r3, s19
 8026938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802693c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8026940:	4656      	mov	r6, sl
 8026942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8026946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802694a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802694e:	4b74      	ldr	r3, [pc, #464]	; (8026b20 <_dtoa_r+0x2e8>)
 8026950:	2200      	movs	r2, #0
 8026952:	4630      	mov	r0, r6
 8026954:	4639      	mov	r1, r7
 8026956:	f7e9 ffff 	bl	8010958 <__aeabi_dsub>
 802695a:	a365      	add	r3, pc, #404	; (adr r3, 8026af0 <_dtoa_r+0x2b8>)
 802695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026960:	f7ea f9b2 	bl	8010cc8 <__aeabi_dmul>
 8026964:	a364      	add	r3, pc, #400	; (adr r3, 8026af8 <_dtoa_r+0x2c0>)
 8026966:	e9d3 2300 	ldrd	r2, r3, [r3]
 802696a:	f7e9 fff7 	bl	801095c <__adddf3>
 802696e:	4606      	mov	r6, r0
 8026970:	4628      	mov	r0, r5
 8026972:	460f      	mov	r7, r1
 8026974:	f7ea f93e 	bl	8010bf4 <__aeabi_i2d>
 8026978:	a361      	add	r3, pc, #388	; (adr r3, 8026b00 <_dtoa_r+0x2c8>)
 802697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802697e:	f7ea f9a3 	bl	8010cc8 <__aeabi_dmul>
 8026982:	4602      	mov	r2, r0
 8026984:	460b      	mov	r3, r1
 8026986:	4630      	mov	r0, r6
 8026988:	4639      	mov	r1, r7
 802698a:	f7e9 ffe7 	bl	801095c <__adddf3>
 802698e:	4606      	mov	r6, r0
 8026990:	460f      	mov	r7, r1
 8026992:	f7ea fc49 	bl	8011228 <__aeabi_d2iz>
 8026996:	2200      	movs	r2, #0
 8026998:	9000      	str	r0, [sp, #0]
 802699a:	2300      	movs	r3, #0
 802699c:	4630      	mov	r0, r6
 802699e:	4639      	mov	r1, r7
 80269a0:	f7ea fc04 	bl	80111ac <__aeabi_dcmplt>
 80269a4:	b150      	cbz	r0, 80269bc <_dtoa_r+0x184>
 80269a6:	9800      	ldr	r0, [sp, #0]
 80269a8:	f7ea f924 	bl	8010bf4 <__aeabi_i2d>
 80269ac:	4632      	mov	r2, r6
 80269ae:	463b      	mov	r3, r7
 80269b0:	f7ea fbf2 	bl	8011198 <__aeabi_dcmpeq>
 80269b4:	b910      	cbnz	r0, 80269bc <_dtoa_r+0x184>
 80269b6:	9b00      	ldr	r3, [sp, #0]
 80269b8:	3b01      	subs	r3, #1
 80269ba:	9300      	str	r3, [sp, #0]
 80269bc:	9b00      	ldr	r3, [sp, #0]
 80269be:	2b16      	cmp	r3, #22
 80269c0:	d85a      	bhi.n	8026a78 <_dtoa_r+0x240>
 80269c2:	9a00      	ldr	r2, [sp, #0]
 80269c4:	4b57      	ldr	r3, [pc, #348]	; (8026b24 <_dtoa_r+0x2ec>)
 80269c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80269ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269ce:	ec51 0b19 	vmov	r0, r1, d9
 80269d2:	f7ea fbeb 	bl	80111ac <__aeabi_dcmplt>
 80269d6:	2800      	cmp	r0, #0
 80269d8:	d050      	beq.n	8026a7c <_dtoa_r+0x244>
 80269da:	9b00      	ldr	r3, [sp, #0]
 80269dc:	3b01      	subs	r3, #1
 80269de:	9300      	str	r3, [sp, #0]
 80269e0:	2300      	movs	r3, #0
 80269e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80269e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80269e6:	1b5d      	subs	r5, r3, r5
 80269e8:	1e6b      	subs	r3, r5, #1
 80269ea:	9305      	str	r3, [sp, #20]
 80269ec:	bf45      	ittet	mi
 80269ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80269f2:	9304      	strmi	r3, [sp, #16]
 80269f4:	2300      	movpl	r3, #0
 80269f6:	2300      	movmi	r3, #0
 80269f8:	bf4c      	ite	mi
 80269fa:	9305      	strmi	r3, [sp, #20]
 80269fc:	9304      	strpl	r3, [sp, #16]
 80269fe:	9b00      	ldr	r3, [sp, #0]
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	db3d      	blt.n	8026a80 <_dtoa_r+0x248>
 8026a04:	9b05      	ldr	r3, [sp, #20]
 8026a06:	9a00      	ldr	r2, [sp, #0]
 8026a08:	920a      	str	r2, [sp, #40]	; 0x28
 8026a0a:	4413      	add	r3, r2
 8026a0c:	9305      	str	r3, [sp, #20]
 8026a0e:	2300      	movs	r3, #0
 8026a10:	9307      	str	r3, [sp, #28]
 8026a12:	9b06      	ldr	r3, [sp, #24]
 8026a14:	2b09      	cmp	r3, #9
 8026a16:	f200 8089 	bhi.w	8026b2c <_dtoa_r+0x2f4>
 8026a1a:	2b05      	cmp	r3, #5
 8026a1c:	bfc4      	itt	gt
 8026a1e:	3b04      	subgt	r3, #4
 8026a20:	9306      	strgt	r3, [sp, #24]
 8026a22:	9b06      	ldr	r3, [sp, #24]
 8026a24:	f1a3 0302 	sub.w	r3, r3, #2
 8026a28:	bfcc      	ite	gt
 8026a2a:	2500      	movgt	r5, #0
 8026a2c:	2501      	movle	r5, #1
 8026a2e:	2b03      	cmp	r3, #3
 8026a30:	f200 8087 	bhi.w	8026b42 <_dtoa_r+0x30a>
 8026a34:	e8df f003 	tbb	[pc, r3]
 8026a38:	59383a2d 	.word	0x59383a2d
 8026a3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026a40:	441d      	add	r5, r3
 8026a42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8026a46:	2b20      	cmp	r3, #32
 8026a48:	bfc1      	itttt	gt
 8026a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026a4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8026a52:	fa0b f303 	lslgt.w	r3, fp, r3
 8026a56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8026a5a:	bfda      	itte	le
 8026a5c:	f1c3 0320 	rsble	r3, r3, #32
 8026a60:	fa06 f003 	lslle.w	r0, r6, r3
 8026a64:	4318      	orrgt	r0, r3
 8026a66:	f7ea f8b5 	bl	8010bd4 <__aeabi_ui2d>
 8026a6a:	2301      	movs	r3, #1
 8026a6c:	4606      	mov	r6, r0
 8026a6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8026a72:	3d01      	subs	r5, #1
 8026a74:	930e      	str	r3, [sp, #56]	; 0x38
 8026a76:	e76a      	b.n	802694e <_dtoa_r+0x116>
 8026a78:	2301      	movs	r3, #1
 8026a7a:	e7b2      	b.n	80269e2 <_dtoa_r+0x1aa>
 8026a7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8026a7e:	e7b1      	b.n	80269e4 <_dtoa_r+0x1ac>
 8026a80:	9b04      	ldr	r3, [sp, #16]
 8026a82:	9a00      	ldr	r2, [sp, #0]
 8026a84:	1a9b      	subs	r3, r3, r2
 8026a86:	9304      	str	r3, [sp, #16]
 8026a88:	4253      	negs	r3, r2
 8026a8a:	9307      	str	r3, [sp, #28]
 8026a8c:	2300      	movs	r3, #0
 8026a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8026a90:	e7bf      	b.n	8026a12 <_dtoa_r+0x1da>
 8026a92:	2300      	movs	r3, #0
 8026a94:	9308      	str	r3, [sp, #32]
 8026a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	dc55      	bgt.n	8026b48 <_dtoa_r+0x310>
 8026a9c:	2301      	movs	r3, #1
 8026a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026aa2:	461a      	mov	r2, r3
 8026aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8026aa6:	e00c      	b.n	8026ac2 <_dtoa_r+0x28a>
 8026aa8:	2301      	movs	r3, #1
 8026aaa:	e7f3      	b.n	8026a94 <_dtoa_r+0x25c>
 8026aac:	2300      	movs	r3, #0
 8026aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026ab0:	9308      	str	r3, [sp, #32]
 8026ab2:	9b00      	ldr	r3, [sp, #0]
 8026ab4:	4413      	add	r3, r2
 8026ab6:	9302      	str	r3, [sp, #8]
 8026ab8:	3301      	adds	r3, #1
 8026aba:	2b01      	cmp	r3, #1
 8026abc:	9303      	str	r3, [sp, #12]
 8026abe:	bfb8      	it	lt
 8026ac0:	2301      	movlt	r3, #1
 8026ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026ac4:	2200      	movs	r2, #0
 8026ac6:	6042      	str	r2, [r0, #4]
 8026ac8:	2204      	movs	r2, #4
 8026aca:	f102 0614 	add.w	r6, r2, #20
 8026ace:	429e      	cmp	r6, r3
 8026ad0:	6841      	ldr	r1, [r0, #4]
 8026ad2:	d93d      	bls.n	8026b50 <_dtoa_r+0x318>
 8026ad4:	4620      	mov	r0, r4
 8026ad6:	f001 fa4d 	bl	8027f74 <_Balloc>
 8026ada:	9001      	str	r0, [sp, #4]
 8026adc:	2800      	cmp	r0, #0
 8026ade:	d13b      	bne.n	8026b58 <_dtoa_r+0x320>
 8026ae0:	4b11      	ldr	r3, [pc, #68]	; (8026b28 <_dtoa_r+0x2f0>)
 8026ae2:	4602      	mov	r2, r0
 8026ae4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026ae8:	e6c0      	b.n	802686c <_dtoa_r+0x34>
 8026aea:	2301      	movs	r3, #1
 8026aec:	e7df      	b.n	8026aae <_dtoa_r+0x276>
 8026aee:	bf00      	nop
 8026af0:	636f4361 	.word	0x636f4361
 8026af4:	3fd287a7 	.word	0x3fd287a7
 8026af8:	8b60c8b3 	.word	0x8b60c8b3
 8026afc:	3fc68a28 	.word	0x3fc68a28
 8026b00:	509f79fb 	.word	0x509f79fb
 8026b04:	3fd34413 	.word	0x3fd34413
 8026b08:	080378c6 	.word	0x080378c6
 8026b0c:	080378dd 	.word	0x080378dd
 8026b10:	7ff00000 	.word	0x7ff00000
 8026b14:	080378c2 	.word	0x080378c2
 8026b18:	080378b9 	.word	0x080378b9
 8026b1c:	08037741 	.word	0x08037741
 8026b20:	3ff80000 	.word	0x3ff80000
 8026b24:	08037ab0 	.word	0x08037ab0
 8026b28:	08037938 	.word	0x08037938
 8026b2c:	2501      	movs	r5, #1
 8026b2e:	2300      	movs	r3, #0
 8026b30:	9306      	str	r3, [sp, #24]
 8026b32:	9508      	str	r5, [sp, #32]
 8026b34:	f04f 33ff 	mov.w	r3, #4294967295
 8026b38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026b3c:	2200      	movs	r2, #0
 8026b3e:	2312      	movs	r3, #18
 8026b40:	e7b0      	b.n	8026aa4 <_dtoa_r+0x26c>
 8026b42:	2301      	movs	r3, #1
 8026b44:	9308      	str	r3, [sp, #32]
 8026b46:	e7f5      	b.n	8026b34 <_dtoa_r+0x2fc>
 8026b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8026b4e:	e7b8      	b.n	8026ac2 <_dtoa_r+0x28a>
 8026b50:	3101      	adds	r1, #1
 8026b52:	6041      	str	r1, [r0, #4]
 8026b54:	0052      	lsls	r2, r2, #1
 8026b56:	e7b8      	b.n	8026aca <_dtoa_r+0x292>
 8026b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026b5a:	9a01      	ldr	r2, [sp, #4]
 8026b5c:	601a      	str	r2, [r3, #0]
 8026b5e:	9b03      	ldr	r3, [sp, #12]
 8026b60:	2b0e      	cmp	r3, #14
 8026b62:	f200 809d 	bhi.w	8026ca0 <_dtoa_r+0x468>
 8026b66:	2d00      	cmp	r5, #0
 8026b68:	f000 809a 	beq.w	8026ca0 <_dtoa_r+0x468>
 8026b6c:	9b00      	ldr	r3, [sp, #0]
 8026b6e:	2b00      	cmp	r3, #0
 8026b70:	dd32      	ble.n	8026bd8 <_dtoa_r+0x3a0>
 8026b72:	4ab7      	ldr	r2, [pc, #732]	; (8026e50 <_dtoa_r+0x618>)
 8026b74:	f003 030f 	and.w	r3, r3, #15
 8026b78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026b80:	9b00      	ldr	r3, [sp, #0]
 8026b82:	05d8      	lsls	r0, r3, #23
 8026b84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8026b88:	d516      	bpl.n	8026bb8 <_dtoa_r+0x380>
 8026b8a:	4bb2      	ldr	r3, [pc, #712]	; (8026e54 <_dtoa_r+0x61c>)
 8026b8c:	ec51 0b19 	vmov	r0, r1, d9
 8026b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8026b94:	f7ea f9c2 	bl	8010f1c <__aeabi_ddiv>
 8026b98:	f007 070f 	and.w	r7, r7, #15
 8026b9c:	4682      	mov	sl, r0
 8026b9e:	468b      	mov	fp, r1
 8026ba0:	2503      	movs	r5, #3
 8026ba2:	4eac      	ldr	r6, [pc, #688]	; (8026e54 <_dtoa_r+0x61c>)
 8026ba4:	b957      	cbnz	r7, 8026bbc <_dtoa_r+0x384>
 8026ba6:	4642      	mov	r2, r8
 8026ba8:	464b      	mov	r3, r9
 8026baa:	4650      	mov	r0, sl
 8026bac:	4659      	mov	r1, fp
 8026bae:	f7ea f9b5 	bl	8010f1c <__aeabi_ddiv>
 8026bb2:	4682      	mov	sl, r0
 8026bb4:	468b      	mov	fp, r1
 8026bb6:	e028      	b.n	8026c0a <_dtoa_r+0x3d2>
 8026bb8:	2502      	movs	r5, #2
 8026bba:	e7f2      	b.n	8026ba2 <_dtoa_r+0x36a>
 8026bbc:	07f9      	lsls	r1, r7, #31
 8026bbe:	d508      	bpl.n	8026bd2 <_dtoa_r+0x39a>
 8026bc0:	4640      	mov	r0, r8
 8026bc2:	4649      	mov	r1, r9
 8026bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8026bc8:	f7ea f87e 	bl	8010cc8 <__aeabi_dmul>
 8026bcc:	3501      	adds	r5, #1
 8026bce:	4680      	mov	r8, r0
 8026bd0:	4689      	mov	r9, r1
 8026bd2:	107f      	asrs	r7, r7, #1
 8026bd4:	3608      	adds	r6, #8
 8026bd6:	e7e5      	b.n	8026ba4 <_dtoa_r+0x36c>
 8026bd8:	f000 809b 	beq.w	8026d12 <_dtoa_r+0x4da>
 8026bdc:	9b00      	ldr	r3, [sp, #0]
 8026bde:	4f9d      	ldr	r7, [pc, #628]	; (8026e54 <_dtoa_r+0x61c>)
 8026be0:	425e      	negs	r6, r3
 8026be2:	4b9b      	ldr	r3, [pc, #620]	; (8026e50 <_dtoa_r+0x618>)
 8026be4:	f006 020f 	and.w	r2, r6, #15
 8026be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026bf0:	ec51 0b19 	vmov	r0, r1, d9
 8026bf4:	f7ea f868 	bl	8010cc8 <__aeabi_dmul>
 8026bf8:	1136      	asrs	r6, r6, #4
 8026bfa:	4682      	mov	sl, r0
 8026bfc:	468b      	mov	fp, r1
 8026bfe:	2300      	movs	r3, #0
 8026c00:	2502      	movs	r5, #2
 8026c02:	2e00      	cmp	r6, #0
 8026c04:	d17a      	bne.n	8026cfc <_dtoa_r+0x4c4>
 8026c06:	2b00      	cmp	r3, #0
 8026c08:	d1d3      	bne.n	8026bb2 <_dtoa_r+0x37a>
 8026c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026c0c:	2b00      	cmp	r3, #0
 8026c0e:	f000 8082 	beq.w	8026d16 <_dtoa_r+0x4de>
 8026c12:	4b91      	ldr	r3, [pc, #580]	; (8026e58 <_dtoa_r+0x620>)
 8026c14:	2200      	movs	r2, #0
 8026c16:	4650      	mov	r0, sl
 8026c18:	4659      	mov	r1, fp
 8026c1a:	f7ea fac7 	bl	80111ac <__aeabi_dcmplt>
 8026c1e:	2800      	cmp	r0, #0
 8026c20:	d079      	beq.n	8026d16 <_dtoa_r+0x4de>
 8026c22:	9b03      	ldr	r3, [sp, #12]
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	d076      	beq.n	8026d16 <_dtoa_r+0x4de>
 8026c28:	9b02      	ldr	r3, [sp, #8]
 8026c2a:	2b00      	cmp	r3, #0
 8026c2c:	dd36      	ble.n	8026c9c <_dtoa_r+0x464>
 8026c2e:	9b00      	ldr	r3, [sp, #0]
 8026c30:	4650      	mov	r0, sl
 8026c32:	4659      	mov	r1, fp
 8026c34:	1e5f      	subs	r7, r3, #1
 8026c36:	2200      	movs	r2, #0
 8026c38:	4b88      	ldr	r3, [pc, #544]	; (8026e5c <_dtoa_r+0x624>)
 8026c3a:	f7ea f845 	bl	8010cc8 <__aeabi_dmul>
 8026c3e:	9e02      	ldr	r6, [sp, #8]
 8026c40:	4682      	mov	sl, r0
 8026c42:	468b      	mov	fp, r1
 8026c44:	3501      	adds	r5, #1
 8026c46:	4628      	mov	r0, r5
 8026c48:	f7e9 ffd4 	bl	8010bf4 <__aeabi_i2d>
 8026c4c:	4652      	mov	r2, sl
 8026c4e:	465b      	mov	r3, fp
 8026c50:	f7ea f83a 	bl	8010cc8 <__aeabi_dmul>
 8026c54:	4b82      	ldr	r3, [pc, #520]	; (8026e60 <_dtoa_r+0x628>)
 8026c56:	2200      	movs	r2, #0
 8026c58:	f7e9 fe80 	bl	801095c <__adddf3>
 8026c5c:	46d0      	mov	r8, sl
 8026c5e:	46d9      	mov	r9, fp
 8026c60:	4682      	mov	sl, r0
 8026c62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8026c66:	2e00      	cmp	r6, #0
 8026c68:	d158      	bne.n	8026d1c <_dtoa_r+0x4e4>
 8026c6a:	4b7e      	ldr	r3, [pc, #504]	; (8026e64 <_dtoa_r+0x62c>)
 8026c6c:	2200      	movs	r2, #0
 8026c6e:	4640      	mov	r0, r8
 8026c70:	4649      	mov	r1, r9
 8026c72:	f7e9 fe71 	bl	8010958 <__aeabi_dsub>
 8026c76:	4652      	mov	r2, sl
 8026c78:	465b      	mov	r3, fp
 8026c7a:	4680      	mov	r8, r0
 8026c7c:	4689      	mov	r9, r1
 8026c7e:	f7ea fab3 	bl	80111e8 <__aeabi_dcmpgt>
 8026c82:	2800      	cmp	r0, #0
 8026c84:	f040 8295 	bne.w	80271b2 <_dtoa_r+0x97a>
 8026c88:	4652      	mov	r2, sl
 8026c8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8026c8e:	4640      	mov	r0, r8
 8026c90:	4649      	mov	r1, r9
 8026c92:	f7ea fa8b 	bl	80111ac <__aeabi_dcmplt>
 8026c96:	2800      	cmp	r0, #0
 8026c98:	f040 8289 	bne.w	80271ae <_dtoa_r+0x976>
 8026c9c:	ec5b ab19 	vmov	sl, fp, d9
 8026ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026ca2:	2b00      	cmp	r3, #0
 8026ca4:	f2c0 8148 	blt.w	8026f38 <_dtoa_r+0x700>
 8026ca8:	9a00      	ldr	r2, [sp, #0]
 8026caa:	2a0e      	cmp	r2, #14
 8026cac:	f300 8144 	bgt.w	8026f38 <_dtoa_r+0x700>
 8026cb0:	4b67      	ldr	r3, [pc, #412]	; (8026e50 <_dtoa_r+0x618>)
 8026cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026cb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	f280 80d5 	bge.w	8026e6c <_dtoa_r+0x634>
 8026cc2:	9b03      	ldr	r3, [sp, #12]
 8026cc4:	2b00      	cmp	r3, #0
 8026cc6:	f300 80d1 	bgt.w	8026e6c <_dtoa_r+0x634>
 8026cca:	f040 826f 	bne.w	80271ac <_dtoa_r+0x974>
 8026cce:	4b65      	ldr	r3, [pc, #404]	; (8026e64 <_dtoa_r+0x62c>)
 8026cd0:	2200      	movs	r2, #0
 8026cd2:	4640      	mov	r0, r8
 8026cd4:	4649      	mov	r1, r9
 8026cd6:	f7e9 fff7 	bl	8010cc8 <__aeabi_dmul>
 8026cda:	4652      	mov	r2, sl
 8026cdc:	465b      	mov	r3, fp
 8026cde:	f7ea fa79 	bl	80111d4 <__aeabi_dcmpge>
 8026ce2:	9e03      	ldr	r6, [sp, #12]
 8026ce4:	4637      	mov	r7, r6
 8026ce6:	2800      	cmp	r0, #0
 8026ce8:	f040 8245 	bne.w	8027176 <_dtoa_r+0x93e>
 8026cec:	9d01      	ldr	r5, [sp, #4]
 8026cee:	2331      	movs	r3, #49	; 0x31
 8026cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8026cf4:	9b00      	ldr	r3, [sp, #0]
 8026cf6:	3301      	adds	r3, #1
 8026cf8:	9300      	str	r3, [sp, #0]
 8026cfa:	e240      	b.n	802717e <_dtoa_r+0x946>
 8026cfc:	07f2      	lsls	r2, r6, #31
 8026cfe:	d505      	bpl.n	8026d0c <_dtoa_r+0x4d4>
 8026d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026d04:	f7e9 ffe0 	bl	8010cc8 <__aeabi_dmul>
 8026d08:	3501      	adds	r5, #1
 8026d0a:	2301      	movs	r3, #1
 8026d0c:	1076      	asrs	r6, r6, #1
 8026d0e:	3708      	adds	r7, #8
 8026d10:	e777      	b.n	8026c02 <_dtoa_r+0x3ca>
 8026d12:	2502      	movs	r5, #2
 8026d14:	e779      	b.n	8026c0a <_dtoa_r+0x3d2>
 8026d16:	9f00      	ldr	r7, [sp, #0]
 8026d18:	9e03      	ldr	r6, [sp, #12]
 8026d1a:	e794      	b.n	8026c46 <_dtoa_r+0x40e>
 8026d1c:	9901      	ldr	r1, [sp, #4]
 8026d1e:	4b4c      	ldr	r3, [pc, #304]	; (8026e50 <_dtoa_r+0x618>)
 8026d20:	4431      	add	r1, r6
 8026d22:	910d      	str	r1, [sp, #52]	; 0x34
 8026d24:	9908      	ldr	r1, [sp, #32]
 8026d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8026d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026d2e:	2900      	cmp	r1, #0
 8026d30:	d043      	beq.n	8026dba <_dtoa_r+0x582>
 8026d32:	494d      	ldr	r1, [pc, #308]	; (8026e68 <_dtoa_r+0x630>)
 8026d34:	2000      	movs	r0, #0
 8026d36:	f7ea f8f1 	bl	8010f1c <__aeabi_ddiv>
 8026d3a:	4652      	mov	r2, sl
 8026d3c:	465b      	mov	r3, fp
 8026d3e:	f7e9 fe0b 	bl	8010958 <__aeabi_dsub>
 8026d42:	9d01      	ldr	r5, [sp, #4]
 8026d44:	4682      	mov	sl, r0
 8026d46:	468b      	mov	fp, r1
 8026d48:	4649      	mov	r1, r9
 8026d4a:	4640      	mov	r0, r8
 8026d4c:	f7ea fa6c 	bl	8011228 <__aeabi_d2iz>
 8026d50:	4606      	mov	r6, r0
 8026d52:	f7e9 ff4f 	bl	8010bf4 <__aeabi_i2d>
 8026d56:	4602      	mov	r2, r0
 8026d58:	460b      	mov	r3, r1
 8026d5a:	4640      	mov	r0, r8
 8026d5c:	4649      	mov	r1, r9
 8026d5e:	f7e9 fdfb 	bl	8010958 <__aeabi_dsub>
 8026d62:	3630      	adds	r6, #48	; 0x30
 8026d64:	f805 6b01 	strb.w	r6, [r5], #1
 8026d68:	4652      	mov	r2, sl
 8026d6a:	465b      	mov	r3, fp
 8026d6c:	4680      	mov	r8, r0
 8026d6e:	4689      	mov	r9, r1
 8026d70:	f7ea fa1c 	bl	80111ac <__aeabi_dcmplt>
 8026d74:	2800      	cmp	r0, #0
 8026d76:	d163      	bne.n	8026e40 <_dtoa_r+0x608>
 8026d78:	4642      	mov	r2, r8
 8026d7a:	464b      	mov	r3, r9
 8026d7c:	4936      	ldr	r1, [pc, #216]	; (8026e58 <_dtoa_r+0x620>)
 8026d7e:	2000      	movs	r0, #0
 8026d80:	f7e9 fdea 	bl	8010958 <__aeabi_dsub>
 8026d84:	4652      	mov	r2, sl
 8026d86:	465b      	mov	r3, fp
 8026d88:	f7ea fa10 	bl	80111ac <__aeabi_dcmplt>
 8026d8c:	2800      	cmp	r0, #0
 8026d8e:	f040 80b5 	bne.w	8026efc <_dtoa_r+0x6c4>
 8026d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d94:	429d      	cmp	r5, r3
 8026d96:	d081      	beq.n	8026c9c <_dtoa_r+0x464>
 8026d98:	4b30      	ldr	r3, [pc, #192]	; (8026e5c <_dtoa_r+0x624>)
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	4650      	mov	r0, sl
 8026d9e:	4659      	mov	r1, fp
 8026da0:	f7e9 ff92 	bl	8010cc8 <__aeabi_dmul>
 8026da4:	4b2d      	ldr	r3, [pc, #180]	; (8026e5c <_dtoa_r+0x624>)
 8026da6:	4682      	mov	sl, r0
 8026da8:	468b      	mov	fp, r1
 8026daa:	4640      	mov	r0, r8
 8026dac:	4649      	mov	r1, r9
 8026dae:	2200      	movs	r2, #0
 8026db0:	f7e9 ff8a 	bl	8010cc8 <__aeabi_dmul>
 8026db4:	4680      	mov	r8, r0
 8026db6:	4689      	mov	r9, r1
 8026db8:	e7c6      	b.n	8026d48 <_dtoa_r+0x510>
 8026dba:	4650      	mov	r0, sl
 8026dbc:	4659      	mov	r1, fp
 8026dbe:	f7e9 ff83 	bl	8010cc8 <__aeabi_dmul>
 8026dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026dc4:	9d01      	ldr	r5, [sp, #4]
 8026dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8026dc8:	4682      	mov	sl, r0
 8026dca:	468b      	mov	fp, r1
 8026dcc:	4649      	mov	r1, r9
 8026dce:	4640      	mov	r0, r8
 8026dd0:	f7ea fa2a 	bl	8011228 <__aeabi_d2iz>
 8026dd4:	4606      	mov	r6, r0
 8026dd6:	f7e9 ff0d 	bl	8010bf4 <__aeabi_i2d>
 8026dda:	3630      	adds	r6, #48	; 0x30
 8026ddc:	4602      	mov	r2, r0
 8026dde:	460b      	mov	r3, r1
 8026de0:	4640      	mov	r0, r8
 8026de2:	4649      	mov	r1, r9
 8026de4:	f7e9 fdb8 	bl	8010958 <__aeabi_dsub>
 8026de8:	f805 6b01 	strb.w	r6, [r5], #1
 8026dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026dee:	429d      	cmp	r5, r3
 8026df0:	4680      	mov	r8, r0
 8026df2:	4689      	mov	r9, r1
 8026df4:	f04f 0200 	mov.w	r2, #0
 8026df8:	d124      	bne.n	8026e44 <_dtoa_r+0x60c>
 8026dfa:	4b1b      	ldr	r3, [pc, #108]	; (8026e68 <_dtoa_r+0x630>)
 8026dfc:	4650      	mov	r0, sl
 8026dfe:	4659      	mov	r1, fp
 8026e00:	f7e9 fdac 	bl	801095c <__adddf3>
 8026e04:	4602      	mov	r2, r0
 8026e06:	460b      	mov	r3, r1
 8026e08:	4640      	mov	r0, r8
 8026e0a:	4649      	mov	r1, r9
 8026e0c:	f7ea f9ec 	bl	80111e8 <__aeabi_dcmpgt>
 8026e10:	2800      	cmp	r0, #0
 8026e12:	d173      	bne.n	8026efc <_dtoa_r+0x6c4>
 8026e14:	4652      	mov	r2, sl
 8026e16:	465b      	mov	r3, fp
 8026e18:	4913      	ldr	r1, [pc, #76]	; (8026e68 <_dtoa_r+0x630>)
 8026e1a:	2000      	movs	r0, #0
 8026e1c:	f7e9 fd9c 	bl	8010958 <__aeabi_dsub>
 8026e20:	4602      	mov	r2, r0
 8026e22:	460b      	mov	r3, r1
 8026e24:	4640      	mov	r0, r8
 8026e26:	4649      	mov	r1, r9
 8026e28:	f7ea f9c0 	bl	80111ac <__aeabi_dcmplt>
 8026e2c:	2800      	cmp	r0, #0
 8026e2e:	f43f af35 	beq.w	8026c9c <_dtoa_r+0x464>
 8026e32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026e34:	1e6b      	subs	r3, r5, #1
 8026e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026e3c:	2b30      	cmp	r3, #48	; 0x30
 8026e3e:	d0f8      	beq.n	8026e32 <_dtoa_r+0x5fa>
 8026e40:	9700      	str	r7, [sp, #0]
 8026e42:	e049      	b.n	8026ed8 <_dtoa_r+0x6a0>
 8026e44:	4b05      	ldr	r3, [pc, #20]	; (8026e5c <_dtoa_r+0x624>)
 8026e46:	f7e9 ff3f 	bl	8010cc8 <__aeabi_dmul>
 8026e4a:	4680      	mov	r8, r0
 8026e4c:	4689      	mov	r9, r1
 8026e4e:	e7bd      	b.n	8026dcc <_dtoa_r+0x594>
 8026e50:	08037ab0 	.word	0x08037ab0
 8026e54:	08037a88 	.word	0x08037a88
 8026e58:	3ff00000 	.word	0x3ff00000
 8026e5c:	40240000 	.word	0x40240000
 8026e60:	401c0000 	.word	0x401c0000
 8026e64:	40140000 	.word	0x40140000
 8026e68:	3fe00000 	.word	0x3fe00000
 8026e6c:	9d01      	ldr	r5, [sp, #4]
 8026e6e:	4656      	mov	r6, sl
 8026e70:	465f      	mov	r7, fp
 8026e72:	4642      	mov	r2, r8
 8026e74:	464b      	mov	r3, r9
 8026e76:	4630      	mov	r0, r6
 8026e78:	4639      	mov	r1, r7
 8026e7a:	f7ea f84f 	bl	8010f1c <__aeabi_ddiv>
 8026e7e:	f7ea f9d3 	bl	8011228 <__aeabi_d2iz>
 8026e82:	4682      	mov	sl, r0
 8026e84:	f7e9 feb6 	bl	8010bf4 <__aeabi_i2d>
 8026e88:	4642      	mov	r2, r8
 8026e8a:	464b      	mov	r3, r9
 8026e8c:	f7e9 ff1c 	bl	8010cc8 <__aeabi_dmul>
 8026e90:	4602      	mov	r2, r0
 8026e92:	460b      	mov	r3, r1
 8026e94:	4630      	mov	r0, r6
 8026e96:	4639      	mov	r1, r7
 8026e98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8026e9c:	f7e9 fd5c 	bl	8010958 <__aeabi_dsub>
 8026ea0:	f805 6b01 	strb.w	r6, [r5], #1
 8026ea4:	9e01      	ldr	r6, [sp, #4]
 8026ea6:	9f03      	ldr	r7, [sp, #12]
 8026ea8:	1bae      	subs	r6, r5, r6
 8026eaa:	42b7      	cmp	r7, r6
 8026eac:	4602      	mov	r2, r0
 8026eae:	460b      	mov	r3, r1
 8026eb0:	d135      	bne.n	8026f1e <_dtoa_r+0x6e6>
 8026eb2:	f7e9 fd53 	bl	801095c <__adddf3>
 8026eb6:	4642      	mov	r2, r8
 8026eb8:	464b      	mov	r3, r9
 8026eba:	4606      	mov	r6, r0
 8026ebc:	460f      	mov	r7, r1
 8026ebe:	f7ea f993 	bl	80111e8 <__aeabi_dcmpgt>
 8026ec2:	b9d0      	cbnz	r0, 8026efa <_dtoa_r+0x6c2>
 8026ec4:	4642      	mov	r2, r8
 8026ec6:	464b      	mov	r3, r9
 8026ec8:	4630      	mov	r0, r6
 8026eca:	4639      	mov	r1, r7
 8026ecc:	f7ea f964 	bl	8011198 <__aeabi_dcmpeq>
 8026ed0:	b110      	cbz	r0, 8026ed8 <_dtoa_r+0x6a0>
 8026ed2:	f01a 0f01 	tst.w	sl, #1
 8026ed6:	d110      	bne.n	8026efa <_dtoa_r+0x6c2>
 8026ed8:	4620      	mov	r0, r4
 8026eda:	ee18 1a10 	vmov	r1, s16
 8026ede:	f001 f889 	bl	8027ff4 <_Bfree>
 8026ee2:	2300      	movs	r3, #0
 8026ee4:	9800      	ldr	r0, [sp, #0]
 8026ee6:	702b      	strb	r3, [r5, #0]
 8026ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026eea:	3001      	adds	r0, #1
 8026eec:	6018      	str	r0, [r3, #0]
 8026eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026ef0:	2b00      	cmp	r3, #0
 8026ef2:	f43f acf1 	beq.w	80268d8 <_dtoa_r+0xa0>
 8026ef6:	601d      	str	r5, [r3, #0]
 8026ef8:	e4ee      	b.n	80268d8 <_dtoa_r+0xa0>
 8026efa:	9f00      	ldr	r7, [sp, #0]
 8026efc:	462b      	mov	r3, r5
 8026efe:	461d      	mov	r5, r3
 8026f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026f04:	2a39      	cmp	r2, #57	; 0x39
 8026f06:	d106      	bne.n	8026f16 <_dtoa_r+0x6de>
 8026f08:	9a01      	ldr	r2, [sp, #4]
 8026f0a:	429a      	cmp	r2, r3
 8026f0c:	d1f7      	bne.n	8026efe <_dtoa_r+0x6c6>
 8026f0e:	9901      	ldr	r1, [sp, #4]
 8026f10:	2230      	movs	r2, #48	; 0x30
 8026f12:	3701      	adds	r7, #1
 8026f14:	700a      	strb	r2, [r1, #0]
 8026f16:	781a      	ldrb	r2, [r3, #0]
 8026f18:	3201      	adds	r2, #1
 8026f1a:	701a      	strb	r2, [r3, #0]
 8026f1c:	e790      	b.n	8026e40 <_dtoa_r+0x608>
 8026f1e:	4ba6      	ldr	r3, [pc, #664]	; (80271b8 <_dtoa_r+0x980>)
 8026f20:	2200      	movs	r2, #0
 8026f22:	f7e9 fed1 	bl	8010cc8 <__aeabi_dmul>
 8026f26:	2200      	movs	r2, #0
 8026f28:	2300      	movs	r3, #0
 8026f2a:	4606      	mov	r6, r0
 8026f2c:	460f      	mov	r7, r1
 8026f2e:	f7ea f933 	bl	8011198 <__aeabi_dcmpeq>
 8026f32:	2800      	cmp	r0, #0
 8026f34:	d09d      	beq.n	8026e72 <_dtoa_r+0x63a>
 8026f36:	e7cf      	b.n	8026ed8 <_dtoa_r+0x6a0>
 8026f38:	9a08      	ldr	r2, [sp, #32]
 8026f3a:	2a00      	cmp	r2, #0
 8026f3c:	f000 80d7 	beq.w	80270ee <_dtoa_r+0x8b6>
 8026f40:	9a06      	ldr	r2, [sp, #24]
 8026f42:	2a01      	cmp	r2, #1
 8026f44:	f300 80ba 	bgt.w	80270bc <_dtoa_r+0x884>
 8026f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f4a:	2a00      	cmp	r2, #0
 8026f4c:	f000 80b2 	beq.w	80270b4 <_dtoa_r+0x87c>
 8026f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8026f54:	9e07      	ldr	r6, [sp, #28]
 8026f56:	9d04      	ldr	r5, [sp, #16]
 8026f58:	9a04      	ldr	r2, [sp, #16]
 8026f5a:	441a      	add	r2, r3
 8026f5c:	9204      	str	r2, [sp, #16]
 8026f5e:	9a05      	ldr	r2, [sp, #20]
 8026f60:	2101      	movs	r1, #1
 8026f62:	441a      	add	r2, r3
 8026f64:	4620      	mov	r0, r4
 8026f66:	9205      	str	r2, [sp, #20]
 8026f68:	f001 f946 	bl	80281f8 <__i2b>
 8026f6c:	4607      	mov	r7, r0
 8026f6e:	2d00      	cmp	r5, #0
 8026f70:	dd0c      	ble.n	8026f8c <_dtoa_r+0x754>
 8026f72:	9b05      	ldr	r3, [sp, #20]
 8026f74:	2b00      	cmp	r3, #0
 8026f76:	dd09      	ble.n	8026f8c <_dtoa_r+0x754>
 8026f78:	42ab      	cmp	r3, r5
 8026f7a:	9a04      	ldr	r2, [sp, #16]
 8026f7c:	bfa8      	it	ge
 8026f7e:	462b      	movge	r3, r5
 8026f80:	1ad2      	subs	r2, r2, r3
 8026f82:	9204      	str	r2, [sp, #16]
 8026f84:	9a05      	ldr	r2, [sp, #20]
 8026f86:	1aed      	subs	r5, r5, r3
 8026f88:	1ad3      	subs	r3, r2, r3
 8026f8a:	9305      	str	r3, [sp, #20]
 8026f8c:	9b07      	ldr	r3, [sp, #28]
 8026f8e:	b31b      	cbz	r3, 8026fd8 <_dtoa_r+0x7a0>
 8026f90:	9b08      	ldr	r3, [sp, #32]
 8026f92:	2b00      	cmp	r3, #0
 8026f94:	f000 80af 	beq.w	80270f6 <_dtoa_r+0x8be>
 8026f98:	2e00      	cmp	r6, #0
 8026f9a:	dd13      	ble.n	8026fc4 <_dtoa_r+0x78c>
 8026f9c:	4639      	mov	r1, r7
 8026f9e:	4632      	mov	r2, r6
 8026fa0:	4620      	mov	r0, r4
 8026fa2:	f001 f9e9 	bl	8028378 <__pow5mult>
 8026fa6:	ee18 2a10 	vmov	r2, s16
 8026faa:	4601      	mov	r1, r0
 8026fac:	4607      	mov	r7, r0
 8026fae:	4620      	mov	r0, r4
 8026fb0:	f001 f938 	bl	8028224 <__multiply>
 8026fb4:	ee18 1a10 	vmov	r1, s16
 8026fb8:	4680      	mov	r8, r0
 8026fba:	4620      	mov	r0, r4
 8026fbc:	f001 f81a 	bl	8027ff4 <_Bfree>
 8026fc0:	ee08 8a10 	vmov	s16, r8
 8026fc4:	9b07      	ldr	r3, [sp, #28]
 8026fc6:	1b9a      	subs	r2, r3, r6
 8026fc8:	d006      	beq.n	8026fd8 <_dtoa_r+0x7a0>
 8026fca:	ee18 1a10 	vmov	r1, s16
 8026fce:	4620      	mov	r0, r4
 8026fd0:	f001 f9d2 	bl	8028378 <__pow5mult>
 8026fd4:	ee08 0a10 	vmov	s16, r0
 8026fd8:	2101      	movs	r1, #1
 8026fda:	4620      	mov	r0, r4
 8026fdc:	f001 f90c 	bl	80281f8 <__i2b>
 8026fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fe2:	2b00      	cmp	r3, #0
 8026fe4:	4606      	mov	r6, r0
 8026fe6:	f340 8088 	ble.w	80270fa <_dtoa_r+0x8c2>
 8026fea:	461a      	mov	r2, r3
 8026fec:	4601      	mov	r1, r0
 8026fee:	4620      	mov	r0, r4
 8026ff0:	f001 f9c2 	bl	8028378 <__pow5mult>
 8026ff4:	9b06      	ldr	r3, [sp, #24]
 8026ff6:	2b01      	cmp	r3, #1
 8026ff8:	4606      	mov	r6, r0
 8026ffa:	f340 8081 	ble.w	8027100 <_dtoa_r+0x8c8>
 8026ffe:	f04f 0800 	mov.w	r8, #0
 8027002:	6933      	ldr	r3, [r6, #16]
 8027004:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8027008:	6918      	ldr	r0, [r3, #16]
 802700a:	f001 f8a5 	bl	8028158 <__hi0bits>
 802700e:	f1c0 0020 	rsb	r0, r0, #32
 8027012:	9b05      	ldr	r3, [sp, #20]
 8027014:	4418      	add	r0, r3
 8027016:	f010 001f 	ands.w	r0, r0, #31
 802701a:	f000 8092 	beq.w	8027142 <_dtoa_r+0x90a>
 802701e:	f1c0 0320 	rsb	r3, r0, #32
 8027022:	2b04      	cmp	r3, #4
 8027024:	f340 808a 	ble.w	802713c <_dtoa_r+0x904>
 8027028:	f1c0 001c 	rsb	r0, r0, #28
 802702c:	9b04      	ldr	r3, [sp, #16]
 802702e:	4403      	add	r3, r0
 8027030:	9304      	str	r3, [sp, #16]
 8027032:	9b05      	ldr	r3, [sp, #20]
 8027034:	4403      	add	r3, r0
 8027036:	4405      	add	r5, r0
 8027038:	9305      	str	r3, [sp, #20]
 802703a:	9b04      	ldr	r3, [sp, #16]
 802703c:	2b00      	cmp	r3, #0
 802703e:	dd07      	ble.n	8027050 <_dtoa_r+0x818>
 8027040:	ee18 1a10 	vmov	r1, s16
 8027044:	461a      	mov	r2, r3
 8027046:	4620      	mov	r0, r4
 8027048:	f001 f9f0 	bl	802842c <__lshift>
 802704c:	ee08 0a10 	vmov	s16, r0
 8027050:	9b05      	ldr	r3, [sp, #20]
 8027052:	2b00      	cmp	r3, #0
 8027054:	dd05      	ble.n	8027062 <_dtoa_r+0x82a>
 8027056:	4631      	mov	r1, r6
 8027058:	461a      	mov	r2, r3
 802705a:	4620      	mov	r0, r4
 802705c:	f001 f9e6 	bl	802842c <__lshift>
 8027060:	4606      	mov	r6, r0
 8027062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027064:	2b00      	cmp	r3, #0
 8027066:	d06e      	beq.n	8027146 <_dtoa_r+0x90e>
 8027068:	ee18 0a10 	vmov	r0, s16
 802706c:	4631      	mov	r1, r6
 802706e:	f001 fa4d 	bl	802850c <__mcmp>
 8027072:	2800      	cmp	r0, #0
 8027074:	da67      	bge.n	8027146 <_dtoa_r+0x90e>
 8027076:	9b00      	ldr	r3, [sp, #0]
 8027078:	3b01      	subs	r3, #1
 802707a:	ee18 1a10 	vmov	r1, s16
 802707e:	9300      	str	r3, [sp, #0]
 8027080:	220a      	movs	r2, #10
 8027082:	2300      	movs	r3, #0
 8027084:	4620      	mov	r0, r4
 8027086:	f000 ffd7 	bl	8028038 <__multadd>
 802708a:	9b08      	ldr	r3, [sp, #32]
 802708c:	ee08 0a10 	vmov	s16, r0
 8027090:	2b00      	cmp	r3, #0
 8027092:	f000 81b1 	beq.w	80273f8 <_dtoa_r+0xbc0>
 8027096:	2300      	movs	r3, #0
 8027098:	4639      	mov	r1, r7
 802709a:	220a      	movs	r2, #10
 802709c:	4620      	mov	r0, r4
 802709e:	f000 ffcb 	bl	8028038 <__multadd>
 80270a2:	9b02      	ldr	r3, [sp, #8]
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	4607      	mov	r7, r0
 80270a8:	f300 808e 	bgt.w	80271c8 <_dtoa_r+0x990>
 80270ac:	9b06      	ldr	r3, [sp, #24]
 80270ae:	2b02      	cmp	r3, #2
 80270b0:	dc51      	bgt.n	8027156 <_dtoa_r+0x91e>
 80270b2:	e089      	b.n	80271c8 <_dtoa_r+0x990>
 80270b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80270b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80270ba:	e74b      	b.n	8026f54 <_dtoa_r+0x71c>
 80270bc:	9b03      	ldr	r3, [sp, #12]
 80270be:	1e5e      	subs	r6, r3, #1
 80270c0:	9b07      	ldr	r3, [sp, #28]
 80270c2:	42b3      	cmp	r3, r6
 80270c4:	bfbf      	itttt	lt
 80270c6:	9b07      	ldrlt	r3, [sp, #28]
 80270c8:	9607      	strlt	r6, [sp, #28]
 80270ca:	1af2      	sublt	r2, r6, r3
 80270cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80270ce:	bfb6      	itet	lt
 80270d0:	189b      	addlt	r3, r3, r2
 80270d2:	1b9e      	subge	r6, r3, r6
 80270d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80270d6:	9b03      	ldr	r3, [sp, #12]
 80270d8:	bfb8      	it	lt
 80270da:	2600      	movlt	r6, #0
 80270dc:	2b00      	cmp	r3, #0
 80270de:	bfb7      	itett	lt
 80270e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80270e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80270e8:	1a9d      	sublt	r5, r3, r2
 80270ea:	2300      	movlt	r3, #0
 80270ec:	e734      	b.n	8026f58 <_dtoa_r+0x720>
 80270ee:	9e07      	ldr	r6, [sp, #28]
 80270f0:	9d04      	ldr	r5, [sp, #16]
 80270f2:	9f08      	ldr	r7, [sp, #32]
 80270f4:	e73b      	b.n	8026f6e <_dtoa_r+0x736>
 80270f6:	9a07      	ldr	r2, [sp, #28]
 80270f8:	e767      	b.n	8026fca <_dtoa_r+0x792>
 80270fa:	9b06      	ldr	r3, [sp, #24]
 80270fc:	2b01      	cmp	r3, #1
 80270fe:	dc18      	bgt.n	8027132 <_dtoa_r+0x8fa>
 8027100:	f1ba 0f00 	cmp.w	sl, #0
 8027104:	d115      	bne.n	8027132 <_dtoa_r+0x8fa>
 8027106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802710a:	b993      	cbnz	r3, 8027132 <_dtoa_r+0x8fa>
 802710c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8027110:	0d1b      	lsrs	r3, r3, #20
 8027112:	051b      	lsls	r3, r3, #20
 8027114:	b183      	cbz	r3, 8027138 <_dtoa_r+0x900>
 8027116:	9b04      	ldr	r3, [sp, #16]
 8027118:	3301      	adds	r3, #1
 802711a:	9304      	str	r3, [sp, #16]
 802711c:	9b05      	ldr	r3, [sp, #20]
 802711e:	3301      	adds	r3, #1
 8027120:	9305      	str	r3, [sp, #20]
 8027122:	f04f 0801 	mov.w	r8, #1
 8027126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027128:	2b00      	cmp	r3, #0
 802712a:	f47f af6a 	bne.w	8027002 <_dtoa_r+0x7ca>
 802712e:	2001      	movs	r0, #1
 8027130:	e76f      	b.n	8027012 <_dtoa_r+0x7da>
 8027132:	f04f 0800 	mov.w	r8, #0
 8027136:	e7f6      	b.n	8027126 <_dtoa_r+0x8ee>
 8027138:	4698      	mov	r8, r3
 802713a:	e7f4      	b.n	8027126 <_dtoa_r+0x8ee>
 802713c:	f43f af7d 	beq.w	802703a <_dtoa_r+0x802>
 8027140:	4618      	mov	r0, r3
 8027142:	301c      	adds	r0, #28
 8027144:	e772      	b.n	802702c <_dtoa_r+0x7f4>
 8027146:	9b03      	ldr	r3, [sp, #12]
 8027148:	2b00      	cmp	r3, #0
 802714a:	dc37      	bgt.n	80271bc <_dtoa_r+0x984>
 802714c:	9b06      	ldr	r3, [sp, #24]
 802714e:	2b02      	cmp	r3, #2
 8027150:	dd34      	ble.n	80271bc <_dtoa_r+0x984>
 8027152:	9b03      	ldr	r3, [sp, #12]
 8027154:	9302      	str	r3, [sp, #8]
 8027156:	9b02      	ldr	r3, [sp, #8]
 8027158:	b96b      	cbnz	r3, 8027176 <_dtoa_r+0x93e>
 802715a:	4631      	mov	r1, r6
 802715c:	2205      	movs	r2, #5
 802715e:	4620      	mov	r0, r4
 8027160:	f000 ff6a 	bl	8028038 <__multadd>
 8027164:	4601      	mov	r1, r0
 8027166:	4606      	mov	r6, r0
 8027168:	ee18 0a10 	vmov	r0, s16
 802716c:	f001 f9ce 	bl	802850c <__mcmp>
 8027170:	2800      	cmp	r0, #0
 8027172:	f73f adbb 	bgt.w	8026cec <_dtoa_r+0x4b4>
 8027176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027178:	9d01      	ldr	r5, [sp, #4]
 802717a:	43db      	mvns	r3, r3
 802717c:	9300      	str	r3, [sp, #0]
 802717e:	f04f 0800 	mov.w	r8, #0
 8027182:	4631      	mov	r1, r6
 8027184:	4620      	mov	r0, r4
 8027186:	f000 ff35 	bl	8027ff4 <_Bfree>
 802718a:	2f00      	cmp	r7, #0
 802718c:	f43f aea4 	beq.w	8026ed8 <_dtoa_r+0x6a0>
 8027190:	f1b8 0f00 	cmp.w	r8, #0
 8027194:	d005      	beq.n	80271a2 <_dtoa_r+0x96a>
 8027196:	45b8      	cmp	r8, r7
 8027198:	d003      	beq.n	80271a2 <_dtoa_r+0x96a>
 802719a:	4641      	mov	r1, r8
 802719c:	4620      	mov	r0, r4
 802719e:	f000 ff29 	bl	8027ff4 <_Bfree>
 80271a2:	4639      	mov	r1, r7
 80271a4:	4620      	mov	r0, r4
 80271a6:	f000 ff25 	bl	8027ff4 <_Bfree>
 80271aa:	e695      	b.n	8026ed8 <_dtoa_r+0x6a0>
 80271ac:	2600      	movs	r6, #0
 80271ae:	4637      	mov	r7, r6
 80271b0:	e7e1      	b.n	8027176 <_dtoa_r+0x93e>
 80271b2:	9700      	str	r7, [sp, #0]
 80271b4:	4637      	mov	r7, r6
 80271b6:	e599      	b.n	8026cec <_dtoa_r+0x4b4>
 80271b8:	40240000 	.word	0x40240000
 80271bc:	9b08      	ldr	r3, [sp, #32]
 80271be:	2b00      	cmp	r3, #0
 80271c0:	f000 80ca 	beq.w	8027358 <_dtoa_r+0xb20>
 80271c4:	9b03      	ldr	r3, [sp, #12]
 80271c6:	9302      	str	r3, [sp, #8]
 80271c8:	2d00      	cmp	r5, #0
 80271ca:	dd05      	ble.n	80271d8 <_dtoa_r+0x9a0>
 80271cc:	4639      	mov	r1, r7
 80271ce:	462a      	mov	r2, r5
 80271d0:	4620      	mov	r0, r4
 80271d2:	f001 f92b 	bl	802842c <__lshift>
 80271d6:	4607      	mov	r7, r0
 80271d8:	f1b8 0f00 	cmp.w	r8, #0
 80271dc:	d05b      	beq.n	8027296 <_dtoa_r+0xa5e>
 80271de:	6879      	ldr	r1, [r7, #4]
 80271e0:	4620      	mov	r0, r4
 80271e2:	f000 fec7 	bl	8027f74 <_Balloc>
 80271e6:	4605      	mov	r5, r0
 80271e8:	b928      	cbnz	r0, 80271f6 <_dtoa_r+0x9be>
 80271ea:	4b87      	ldr	r3, [pc, #540]	; (8027408 <_dtoa_r+0xbd0>)
 80271ec:	4602      	mov	r2, r0
 80271ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80271f2:	f7ff bb3b 	b.w	802686c <_dtoa_r+0x34>
 80271f6:	693a      	ldr	r2, [r7, #16]
 80271f8:	3202      	adds	r2, #2
 80271fa:	0092      	lsls	r2, r2, #2
 80271fc:	f107 010c 	add.w	r1, r7, #12
 8027200:	300c      	adds	r0, #12
 8027202:	f7fd fd1f 	bl	8024c44 <memcpy>
 8027206:	2201      	movs	r2, #1
 8027208:	4629      	mov	r1, r5
 802720a:	4620      	mov	r0, r4
 802720c:	f001 f90e 	bl	802842c <__lshift>
 8027210:	9b01      	ldr	r3, [sp, #4]
 8027212:	f103 0901 	add.w	r9, r3, #1
 8027216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802721a:	4413      	add	r3, r2
 802721c:	9305      	str	r3, [sp, #20]
 802721e:	f00a 0301 	and.w	r3, sl, #1
 8027222:	46b8      	mov	r8, r7
 8027224:	9304      	str	r3, [sp, #16]
 8027226:	4607      	mov	r7, r0
 8027228:	4631      	mov	r1, r6
 802722a:	ee18 0a10 	vmov	r0, s16
 802722e:	f7ff fa77 	bl	8026720 <quorem>
 8027232:	4641      	mov	r1, r8
 8027234:	9002      	str	r0, [sp, #8]
 8027236:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802723a:	ee18 0a10 	vmov	r0, s16
 802723e:	f001 f965 	bl	802850c <__mcmp>
 8027242:	463a      	mov	r2, r7
 8027244:	9003      	str	r0, [sp, #12]
 8027246:	4631      	mov	r1, r6
 8027248:	4620      	mov	r0, r4
 802724a:	f001 f97b 	bl	8028544 <__mdiff>
 802724e:	68c2      	ldr	r2, [r0, #12]
 8027250:	f109 3bff 	add.w	fp, r9, #4294967295
 8027254:	4605      	mov	r5, r0
 8027256:	bb02      	cbnz	r2, 802729a <_dtoa_r+0xa62>
 8027258:	4601      	mov	r1, r0
 802725a:	ee18 0a10 	vmov	r0, s16
 802725e:	f001 f955 	bl	802850c <__mcmp>
 8027262:	4602      	mov	r2, r0
 8027264:	4629      	mov	r1, r5
 8027266:	4620      	mov	r0, r4
 8027268:	9207      	str	r2, [sp, #28]
 802726a:	f000 fec3 	bl	8027ff4 <_Bfree>
 802726e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8027272:	ea43 0102 	orr.w	r1, r3, r2
 8027276:	9b04      	ldr	r3, [sp, #16]
 8027278:	430b      	orrs	r3, r1
 802727a:	464d      	mov	r5, r9
 802727c:	d10f      	bne.n	802729e <_dtoa_r+0xa66>
 802727e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8027282:	d02a      	beq.n	80272da <_dtoa_r+0xaa2>
 8027284:	9b03      	ldr	r3, [sp, #12]
 8027286:	2b00      	cmp	r3, #0
 8027288:	dd02      	ble.n	8027290 <_dtoa_r+0xa58>
 802728a:	9b02      	ldr	r3, [sp, #8]
 802728c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8027290:	f88b a000 	strb.w	sl, [fp]
 8027294:	e775      	b.n	8027182 <_dtoa_r+0x94a>
 8027296:	4638      	mov	r0, r7
 8027298:	e7ba      	b.n	8027210 <_dtoa_r+0x9d8>
 802729a:	2201      	movs	r2, #1
 802729c:	e7e2      	b.n	8027264 <_dtoa_r+0xa2c>
 802729e:	9b03      	ldr	r3, [sp, #12]
 80272a0:	2b00      	cmp	r3, #0
 80272a2:	db04      	blt.n	80272ae <_dtoa_r+0xa76>
 80272a4:	9906      	ldr	r1, [sp, #24]
 80272a6:	430b      	orrs	r3, r1
 80272a8:	9904      	ldr	r1, [sp, #16]
 80272aa:	430b      	orrs	r3, r1
 80272ac:	d122      	bne.n	80272f4 <_dtoa_r+0xabc>
 80272ae:	2a00      	cmp	r2, #0
 80272b0:	ddee      	ble.n	8027290 <_dtoa_r+0xa58>
 80272b2:	ee18 1a10 	vmov	r1, s16
 80272b6:	2201      	movs	r2, #1
 80272b8:	4620      	mov	r0, r4
 80272ba:	f001 f8b7 	bl	802842c <__lshift>
 80272be:	4631      	mov	r1, r6
 80272c0:	ee08 0a10 	vmov	s16, r0
 80272c4:	f001 f922 	bl	802850c <__mcmp>
 80272c8:	2800      	cmp	r0, #0
 80272ca:	dc03      	bgt.n	80272d4 <_dtoa_r+0xa9c>
 80272cc:	d1e0      	bne.n	8027290 <_dtoa_r+0xa58>
 80272ce:	f01a 0f01 	tst.w	sl, #1
 80272d2:	d0dd      	beq.n	8027290 <_dtoa_r+0xa58>
 80272d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80272d8:	d1d7      	bne.n	802728a <_dtoa_r+0xa52>
 80272da:	2339      	movs	r3, #57	; 0x39
 80272dc:	f88b 3000 	strb.w	r3, [fp]
 80272e0:	462b      	mov	r3, r5
 80272e2:	461d      	mov	r5, r3
 80272e4:	3b01      	subs	r3, #1
 80272e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80272ea:	2a39      	cmp	r2, #57	; 0x39
 80272ec:	d071      	beq.n	80273d2 <_dtoa_r+0xb9a>
 80272ee:	3201      	adds	r2, #1
 80272f0:	701a      	strb	r2, [r3, #0]
 80272f2:	e746      	b.n	8027182 <_dtoa_r+0x94a>
 80272f4:	2a00      	cmp	r2, #0
 80272f6:	dd07      	ble.n	8027308 <_dtoa_r+0xad0>
 80272f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80272fc:	d0ed      	beq.n	80272da <_dtoa_r+0xaa2>
 80272fe:	f10a 0301 	add.w	r3, sl, #1
 8027302:	f88b 3000 	strb.w	r3, [fp]
 8027306:	e73c      	b.n	8027182 <_dtoa_r+0x94a>
 8027308:	9b05      	ldr	r3, [sp, #20]
 802730a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802730e:	4599      	cmp	r9, r3
 8027310:	d047      	beq.n	80273a2 <_dtoa_r+0xb6a>
 8027312:	ee18 1a10 	vmov	r1, s16
 8027316:	2300      	movs	r3, #0
 8027318:	220a      	movs	r2, #10
 802731a:	4620      	mov	r0, r4
 802731c:	f000 fe8c 	bl	8028038 <__multadd>
 8027320:	45b8      	cmp	r8, r7
 8027322:	ee08 0a10 	vmov	s16, r0
 8027326:	f04f 0300 	mov.w	r3, #0
 802732a:	f04f 020a 	mov.w	r2, #10
 802732e:	4641      	mov	r1, r8
 8027330:	4620      	mov	r0, r4
 8027332:	d106      	bne.n	8027342 <_dtoa_r+0xb0a>
 8027334:	f000 fe80 	bl	8028038 <__multadd>
 8027338:	4680      	mov	r8, r0
 802733a:	4607      	mov	r7, r0
 802733c:	f109 0901 	add.w	r9, r9, #1
 8027340:	e772      	b.n	8027228 <_dtoa_r+0x9f0>
 8027342:	f000 fe79 	bl	8028038 <__multadd>
 8027346:	4639      	mov	r1, r7
 8027348:	4680      	mov	r8, r0
 802734a:	2300      	movs	r3, #0
 802734c:	220a      	movs	r2, #10
 802734e:	4620      	mov	r0, r4
 8027350:	f000 fe72 	bl	8028038 <__multadd>
 8027354:	4607      	mov	r7, r0
 8027356:	e7f1      	b.n	802733c <_dtoa_r+0xb04>
 8027358:	9b03      	ldr	r3, [sp, #12]
 802735a:	9302      	str	r3, [sp, #8]
 802735c:	9d01      	ldr	r5, [sp, #4]
 802735e:	ee18 0a10 	vmov	r0, s16
 8027362:	4631      	mov	r1, r6
 8027364:	f7ff f9dc 	bl	8026720 <quorem>
 8027368:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802736c:	9b01      	ldr	r3, [sp, #4]
 802736e:	f805 ab01 	strb.w	sl, [r5], #1
 8027372:	1aea      	subs	r2, r5, r3
 8027374:	9b02      	ldr	r3, [sp, #8]
 8027376:	4293      	cmp	r3, r2
 8027378:	dd09      	ble.n	802738e <_dtoa_r+0xb56>
 802737a:	ee18 1a10 	vmov	r1, s16
 802737e:	2300      	movs	r3, #0
 8027380:	220a      	movs	r2, #10
 8027382:	4620      	mov	r0, r4
 8027384:	f000 fe58 	bl	8028038 <__multadd>
 8027388:	ee08 0a10 	vmov	s16, r0
 802738c:	e7e7      	b.n	802735e <_dtoa_r+0xb26>
 802738e:	9b02      	ldr	r3, [sp, #8]
 8027390:	2b00      	cmp	r3, #0
 8027392:	bfc8      	it	gt
 8027394:	461d      	movgt	r5, r3
 8027396:	9b01      	ldr	r3, [sp, #4]
 8027398:	bfd8      	it	le
 802739a:	2501      	movle	r5, #1
 802739c:	441d      	add	r5, r3
 802739e:	f04f 0800 	mov.w	r8, #0
 80273a2:	ee18 1a10 	vmov	r1, s16
 80273a6:	2201      	movs	r2, #1
 80273a8:	4620      	mov	r0, r4
 80273aa:	f001 f83f 	bl	802842c <__lshift>
 80273ae:	4631      	mov	r1, r6
 80273b0:	ee08 0a10 	vmov	s16, r0
 80273b4:	f001 f8aa 	bl	802850c <__mcmp>
 80273b8:	2800      	cmp	r0, #0
 80273ba:	dc91      	bgt.n	80272e0 <_dtoa_r+0xaa8>
 80273bc:	d102      	bne.n	80273c4 <_dtoa_r+0xb8c>
 80273be:	f01a 0f01 	tst.w	sl, #1
 80273c2:	d18d      	bne.n	80272e0 <_dtoa_r+0xaa8>
 80273c4:	462b      	mov	r3, r5
 80273c6:	461d      	mov	r5, r3
 80273c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80273cc:	2a30      	cmp	r2, #48	; 0x30
 80273ce:	d0fa      	beq.n	80273c6 <_dtoa_r+0xb8e>
 80273d0:	e6d7      	b.n	8027182 <_dtoa_r+0x94a>
 80273d2:	9a01      	ldr	r2, [sp, #4]
 80273d4:	429a      	cmp	r2, r3
 80273d6:	d184      	bne.n	80272e2 <_dtoa_r+0xaaa>
 80273d8:	9b00      	ldr	r3, [sp, #0]
 80273da:	3301      	adds	r3, #1
 80273dc:	9300      	str	r3, [sp, #0]
 80273de:	2331      	movs	r3, #49	; 0x31
 80273e0:	7013      	strb	r3, [r2, #0]
 80273e2:	e6ce      	b.n	8027182 <_dtoa_r+0x94a>
 80273e4:	4b09      	ldr	r3, [pc, #36]	; (802740c <_dtoa_r+0xbd4>)
 80273e6:	f7ff ba95 	b.w	8026914 <_dtoa_r+0xdc>
 80273ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80273ec:	2b00      	cmp	r3, #0
 80273ee:	f47f aa6e 	bne.w	80268ce <_dtoa_r+0x96>
 80273f2:	4b07      	ldr	r3, [pc, #28]	; (8027410 <_dtoa_r+0xbd8>)
 80273f4:	f7ff ba8e 	b.w	8026914 <_dtoa_r+0xdc>
 80273f8:	9b02      	ldr	r3, [sp, #8]
 80273fa:	2b00      	cmp	r3, #0
 80273fc:	dcae      	bgt.n	802735c <_dtoa_r+0xb24>
 80273fe:	9b06      	ldr	r3, [sp, #24]
 8027400:	2b02      	cmp	r3, #2
 8027402:	f73f aea8 	bgt.w	8027156 <_dtoa_r+0x91e>
 8027406:	e7a9      	b.n	802735c <_dtoa_r+0xb24>
 8027408:	08037938 	.word	0x08037938
 802740c:	08037740 	.word	0x08037740
 8027410:	080378b9 	.word	0x080378b9

08027414 <__sflush_r>:
 8027414:	898a      	ldrh	r2, [r1, #12]
 8027416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802741a:	4605      	mov	r5, r0
 802741c:	0710      	lsls	r0, r2, #28
 802741e:	460c      	mov	r4, r1
 8027420:	d458      	bmi.n	80274d4 <__sflush_r+0xc0>
 8027422:	684b      	ldr	r3, [r1, #4]
 8027424:	2b00      	cmp	r3, #0
 8027426:	dc05      	bgt.n	8027434 <__sflush_r+0x20>
 8027428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802742a:	2b00      	cmp	r3, #0
 802742c:	dc02      	bgt.n	8027434 <__sflush_r+0x20>
 802742e:	2000      	movs	r0, #0
 8027430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027436:	2e00      	cmp	r6, #0
 8027438:	d0f9      	beq.n	802742e <__sflush_r+0x1a>
 802743a:	2300      	movs	r3, #0
 802743c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027440:	682f      	ldr	r7, [r5, #0]
 8027442:	602b      	str	r3, [r5, #0]
 8027444:	d032      	beq.n	80274ac <__sflush_r+0x98>
 8027446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8027448:	89a3      	ldrh	r3, [r4, #12]
 802744a:	075a      	lsls	r2, r3, #29
 802744c:	d505      	bpl.n	802745a <__sflush_r+0x46>
 802744e:	6863      	ldr	r3, [r4, #4]
 8027450:	1ac0      	subs	r0, r0, r3
 8027452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027454:	b10b      	cbz	r3, 802745a <__sflush_r+0x46>
 8027456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027458:	1ac0      	subs	r0, r0, r3
 802745a:	2300      	movs	r3, #0
 802745c:	4602      	mov	r2, r0
 802745e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027460:	6a21      	ldr	r1, [r4, #32]
 8027462:	4628      	mov	r0, r5
 8027464:	47b0      	blx	r6
 8027466:	1c43      	adds	r3, r0, #1
 8027468:	89a3      	ldrh	r3, [r4, #12]
 802746a:	d106      	bne.n	802747a <__sflush_r+0x66>
 802746c:	6829      	ldr	r1, [r5, #0]
 802746e:	291d      	cmp	r1, #29
 8027470:	d82c      	bhi.n	80274cc <__sflush_r+0xb8>
 8027472:	4a2a      	ldr	r2, [pc, #168]	; (802751c <__sflush_r+0x108>)
 8027474:	40ca      	lsrs	r2, r1
 8027476:	07d6      	lsls	r6, r2, #31
 8027478:	d528      	bpl.n	80274cc <__sflush_r+0xb8>
 802747a:	2200      	movs	r2, #0
 802747c:	6062      	str	r2, [r4, #4]
 802747e:	04d9      	lsls	r1, r3, #19
 8027480:	6922      	ldr	r2, [r4, #16]
 8027482:	6022      	str	r2, [r4, #0]
 8027484:	d504      	bpl.n	8027490 <__sflush_r+0x7c>
 8027486:	1c42      	adds	r2, r0, #1
 8027488:	d101      	bne.n	802748e <__sflush_r+0x7a>
 802748a:	682b      	ldr	r3, [r5, #0]
 802748c:	b903      	cbnz	r3, 8027490 <__sflush_r+0x7c>
 802748e:	6560      	str	r0, [r4, #84]	; 0x54
 8027490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027492:	602f      	str	r7, [r5, #0]
 8027494:	2900      	cmp	r1, #0
 8027496:	d0ca      	beq.n	802742e <__sflush_r+0x1a>
 8027498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802749c:	4299      	cmp	r1, r3
 802749e:	d002      	beq.n	80274a6 <__sflush_r+0x92>
 80274a0:	4628      	mov	r0, r5
 80274a2:	f7fd fbe5 	bl	8024c70 <_free_r>
 80274a6:	2000      	movs	r0, #0
 80274a8:	6360      	str	r0, [r4, #52]	; 0x34
 80274aa:	e7c1      	b.n	8027430 <__sflush_r+0x1c>
 80274ac:	6a21      	ldr	r1, [r4, #32]
 80274ae:	2301      	movs	r3, #1
 80274b0:	4628      	mov	r0, r5
 80274b2:	47b0      	blx	r6
 80274b4:	1c41      	adds	r1, r0, #1
 80274b6:	d1c7      	bne.n	8027448 <__sflush_r+0x34>
 80274b8:	682b      	ldr	r3, [r5, #0]
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d0c4      	beq.n	8027448 <__sflush_r+0x34>
 80274be:	2b1d      	cmp	r3, #29
 80274c0:	d001      	beq.n	80274c6 <__sflush_r+0xb2>
 80274c2:	2b16      	cmp	r3, #22
 80274c4:	d101      	bne.n	80274ca <__sflush_r+0xb6>
 80274c6:	602f      	str	r7, [r5, #0]
 80274c8:	e7b1      	b.n	802742e <__sflush_r+0x1a>
 80274ca:	89a3      	ldrh	r3, [r4, #12]
 80274cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80274d0:	81a3      	strh	r3, [r4, #12]
 80274d2:	e7ad      	b.n	8027430 <__sflush_r+0x1c>
 80274d4:	690f      	ldr	r7, [r1, #16]
 80274d6:	2f00      	cmp	r7, #0
 80274d8:	d0a9      	beq.n	802742e <__sflush_r+0x1a>
 80274da:	0793      	lsls	r3, r2, #30
 80274dc:	680e      	ldr	r6, [r1, #0]
 80274de:	bf08      	it	eq
 80274e0:	694b      	ldreq	r3, [r1, #20]
 80274e2:	600f      	str	r7, [r1, #0]
 80274e4:	bf18      	it	ne
 80274e6:	2300      	movne	r3, #0
 80274e8:	eba6 0807 	sub.w	r8, r6, r7
 80274ec:	608b      	str	r3, [r1, #8]
 80274ee:	f1b8 0f00 	cmp.w	r8, #0
 80274f2:	dd9c      	ble.n	802742e <__sflush_r+0x1a>
 80274f4:	6a21      	ldr	r1, [r4, #32]
 80274f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80274f8:	4643      	mov	r3, r8
 80274fa:	463a      	mov	r2, r7
 80274fc:	4628      	mov	r0, r5
 80274fe:	47b0      	blx	r6
 8027500:	2800      	cmp	r0, #0
 8027502:	dc06      	bgt.n	8027512 <__sflush_r+0xfe>
 8027504:	89a3      	ldrh	r3, [r4, #12]
 8027506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802750a:	81a3      	strh	r3, [r4, #12]
 802750c:	f04f 30ff 	mov.w	r0, #4294967295
 8027510:	e78e      	b.n	8027430 <__sflush_r+0x1c>
 8027512:	4407      	add	r7, r0
 8027514:	eba8 0800 	sub.w	r8, r8, r0
 8027518:	e7e9      	b.n	80274ee <__sflush_r+0xda>
 802751a:	bf00      	nop
 802751c:	20400001 	.word	0x20400001

08027520 <_fflush_r>:
 8027520:	b538      	push	{r3, r4, r5, lr}
 8027522:	690b      	ldr	r3, [r1, #16]
 8027524:	4605      	mov	r5, r0
 8027526:	460c      	mov	r4, r1
 8027528:	b913      	cbnz	r3, 8027530 <_fflush_r+0x10>
 802752a:	2500      	movs	r5, #0
 802752c:	4628      	mov	r0, r5
 802752e:	bd38      	pop	{r3, r4, r5, pc}
 8027530:	b118      	cbz	r0, 802753a <_fflush_r+0x1a>
 8027532:	6983      	ldr	r3, [r0, #24]
 8027534:	b90b      	cbnz	r3, 802753a <_fflush_r+0x1a>
 8027536:	f000 f887 	bl	8027648 <__sinit>
 802753a:	4b14      	ldr	r3, [pc, #80]	; (802758c <_fflush_r+0x6c>)
 802753c:	429c      	cmp	r4, r3
 802753e:	d11b      	bne.n	8027578 <_fflush_r+0x58>
 8027540:	686c      	ldr	r4, [r5, #4]
 8027542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027546:	2b00      	cmp	r3, #0
 8027548:	d0ef      	beq.n	802752a <_fflush_r+0xa>
 802754a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802754c:	07d0      	lsls	r0, r2, #31
 802754e:	d404      	bmi.n	802755a <_fflush_r+0x3a>
 8027550:	0599      	lsls	r1, r3, #22
 8027552:	d402      	bmi.n	802755a <_fflush_r+0x3a>
 8027554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027556:	f000 fc88 	bl	8027e6a <__retarget_lock_acquire_recursive>
 802755a:	4628      	mov	r0, r5
 802755c:	4621      	mov	r1, r4
 802755e:	f7ff ff59 	bl	8027414 <__sflush_r>
 8027562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027564:	07da      	lsls	r2, r3, #31
 8027566:	4605      	mov	r5, r0
 8027568:	d4e0      	bmi.n	802752c <_fflush_r+0xc>
 802756a:	89a3      	ldrh	r3, [r4, #12]
 802756c:	059b      	lsls	r3, r3, #22
 802756e:	d4dd      	bmi.n	802752c <_fflush_r+0xc>
 8027570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027572:	f000 fc7b 	bl	8027e6c <__retarget_lock_release_recursive>
 8027576:	e7d9      	b.n	802752c <_fflush_r+0xc>
 8027578:	4b05      	ldr	r3, [pc, #20]	; (8027590 <_fflush_r+0x70>)
 802757a:	429c      	cmp	r4, r3
 802757c:	d101      	bne.n	8027582 <_fflush_r+0x62>
 802757e:	68ac      	ldr	r4, [r5, #8]
 8027580:	e7df      	b.n	8027542 <_fflush_r+0x22>
 8027582:	4b04      	ldr	r3, [pc, #16]	; (8027594 <_fflush_r+0x74>)
 8027584:	429c      	cmp	r4, r3
 8027586:	bf08      	it	eq
 8027588:	68ec      	ldreq	r4, [r5, #12]
 802758a:	e7da      	b.n	8027542 <_fflush_r+0x22>
 802758c:	0803796c 	.word	0x0803796c
 8027590:	0803798c 	.word	0x0803798c
 8027594:	0803794c 	.word	0x0803794c

08027598 <std>:
 8027598:	2300      	movs	r3, #0
 802759a:	b510      	push	{r4, lr}
 802759c:	4604      	mov	r4, r0
 802759e:	e9c0 3300 	strd	r3, r3, [r0]
 80275a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80275a6:	6083      	str	r3, [r0, #8]
 80275a8:	8181      	strh	r1, [r0, #12]
 80275aa:	6643      	str	r3, [r0, #100]	; 0x64
 80275ac:	81c2      	strh	r2, [r0, #14]
 80275ae:	6183      	str	r3, [r0, #24]
 80275b0:	4619      	mov	r1, r3
 80275b2:	2208      	movs	r2, #8
 80275b4:	305c      	adds	r0, #92	; 0x5c
 80275b6:	f7fd fb53 	bl	8024c60 <memset>
 80275ba:	4b05      	ldr	r3, [pc, #20]	; (80275d0 <std+0x38>)
 80275bc:	6263      	str	r3, [r4, #36]	; 0x24
 80275be:	4b05      	ldr	r3, [pc, #20]	; (80275d4 <std+0x3c>)
 80275c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80275c2:	4b05      	ldr	r3, [pc, #20]	; (80275d8 <std+0x40>)
 80275c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80275c6:	4b05      	ldr	r3, [pc, #20]	; (80275dc <std+0x44>)
 80275c8:	6224      	str	r4, [r4, #32]
 80275ca:	6323      	str	r3, [r4, #48]	; 0x30
 80275cc:	bd10      	pop	{r4, pc}
 80275ce:	bf00      	nop
 80275d0:	08028bf5 	.word	0x08028bf5
 80275d4:	08028c17 	.word	0x08028c17
 80275d8:	08028c4f 	.word	0x08028c4f
 80275dc:	08028c73 	.word	0x08028c73

080275e0 <_cleanup_r>:
 80275e0:	4901      	ldr	r1, [pc, #4]	; (80275e8 <_cleanup_r+0x8>)
 80275e2:	f000 b8af 	b.w	8027744 <_fwalk_reent>
 80275e6:	bf00      	nop
 80275e8:	08027521 	.word	0x08027521

080275ec <__sfmoreglue>:
 80275ec:	b570      	push	{r4, r5, r6, lr}
 80275ee:	2268      	movs	r2, #104	; 0x68
 80275f0:	1e4d      	subs	r5, r1, #1
 80275f2:	4355      	muls	r5, r2
 80275f4:	460e      	mov	r6, r1
 80275f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80275fa:	f7fd fba5 	bl	8024d48 <_malloc_r>
 80275fe:	4604      	mov	r4, r0
 8027600:	b140      	cbz	r0, 8027614 <__sfmoreglue+0x28>
 8027602:	2100      	movs	r1, #0
 8027604:	e9c0 1600 	strd	r1, r6, [r0]
 8027608:	300c      	adds	r0, #12
 802760a:	60a0      	str	r0, [r4, #8]
 802760c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8027610:	f7fd fb26 	bl	8024c60 <memset>
 8027614:	4620      	mov	r0, r4
 8027616:	bd70      	pop	{r4, r5, r6, pc}

08027618 <__sfp_lock_acquire>:
 8027618:	4801      	ldr	r0, [pc, #4]	; (8027620 <__sfp_lock_acquire+0x8>)
 802761a:	f000 bc26 	b.w	8027e6a <__retarget_lock_acquire_recursive>
 802761e:	bf00      	nop
 8027620:	2000b3ad 	.word	0x2000b3ad

08027624 <__sfp_lock_release>:
 8027624:	4801      	ldr	r0, [pc, #4]	; (802762c <__sfp_lock_release+0x8>)
 8027626:	f000 bc21 	b.w	8027e6c <__retarget_lock_release_recursive>
 802762a:	bf00      	nop
 802762c:	2000b3ad 	.word	0x2000b3ad

08027630 <__sinit_lock_acquire>:
 8027630:	4801      	ldr	r0, [pc, #4]	; (8027638 <__sinit_lock_acquire+0x8>)
 8027632:	f000 bc1a 	b.w	8027e6a <__retarget_lock_acquire_recursive>
 8027636:	bf00      	nop
 8027638:	2000b3ae 	.word	0x2000b3ae

0802763c <__sinit_lock_release>:
 802763c:	4801      	ldr	r0, [pc, #4]	; (8027644 <__sinit_lock_release+0x8>)
 802763e:	f000 bc15 	b.w	8027e6c <__retarget_lock_release_recursive>
 8027642:	bf00      	nop
 8027644:	2000b3ae 	.word	0x2000b3ae

08027648 <__sinit>:
 8027648:	b510      	push	{r4, lr}
 802764a:	4604      	mov	r4, r0
 802764c:	f7ff fff0 	bl	8027630 <__sinit_lock_acquire>
 8027650:	69a3      	ldr	r3, [r4, #24]
 8027652:	b11b      	cbz	r3, 802765c <__sinit+0x14>
 8027654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027658:	f7ff bff0 	b.w	802763c <__sinit_lock_release>
 802765c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8027660:	6523      	str	r3, [r4, #80]	; 0x50
 8027662:	4b13      	ldr	r3, [pc, #76]	; (80276b0 <__sinit+0x68>)
 8027664:	4a13      	ldr	r2, [pc, #76]	; (80276b4 <__sinit+0x6c>)
 8027666:	681b      	ldr	r3, [r3, #0]
 8027668:	62a2      	str	r2, [r4, #40]	; 0x28
 802766a:	42a3      	cmp	r3, r4
 802766c:	bf04      	itt	eq
 802766e:	2301      	moveq	r3, #1
 8027670:	61a3      	streq	r3, [r4, #24]
 8027672:	4620      	mov	r0, r4
 8027674:	f000 f820 	bl	80276b8 <__sfp>
 8027678:	6060      	str	r0, [r4, #4]
 802767a:	4620      	mov	r0, r4
 802767c:	f000 f81c 	bl	80276b8 <__sfp>
 8027680:	60a0      	str	r0, [r4, #8]
 8027682:	4620      	mov	r0, r4
 8027684:	f000 f818 	bl	80276b8 <__sfp>
 8027688:	2200      	movs	r2, #0
 802768a:	60e0      	str	r0, [r4, #12]
 802768c:	2104      	movs	r1, #4
 802768e:	6860      	ldr	r0, [r4, #4]
 8027690:	f7ff ff82 	bl	8027598 <std>
 8027694:	68a0      	ldr	r0, [r4, #8]
 8027696:	2201      	movs	r2, #1
 8027698:	2109      	movs	r1, #9
 802769a:	f7ff ff7d 	bl	8027598 <std>
 802769e:	68e0      	ldr	r0, [r4, #12]
 80276a0:	2202      	movs	r2, #2
 80276a2:	2112      	movs	r1, #18
 80276a4:	f7ff ff78 	bl	8027598 <std>
 80276a8:	2301      	movs	r3, #1
 80276aa:	61a3      	str	r3, [r4, #24]
 80276ac:	e7d2      	b.n	8027654 <__sinit+0xc>
 80276ae:	bf00      	nop
 80276b0:	0803772c 	.word	0x0803772c
 80276b4:	080275e1 	.word	0x080275e1

080276b8 <__sfp>:
 80276b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80276ba:	4607      	mov	r7, r0
 80276bc:	f7ff ffac 	bl	8027618 <__sfp_lock_acquire>
 80276c0:	4b1e      	ldr	r3, [pc, #120]	; (802773c <__sfp+0x84>)
 80276c2:	681e      	ldr	r6, [r3, #0]
 80276c4:	69b3      	ldr	r3, [r6, #24]
 80276c6:	b913      	cbnz	r3, 80276ce <__sfp+0x16>
 80276c8:	4630      	mov	r0, r6
 80276ca:	f7ff ffbd 	bl	8027648 <__sinit>
 80276ce:	3648      	adds	r6, #72	; 0x48
 80276d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80276d4:	3b01      	subs	r3, #1
 80276d6:	d503      	bpl.n	80276e0 <__sfp+0x28>
 80276d8:	6833      	ldr	r3, [r6, #0]
 80276da:	b30b      	cbz	r3, 8027720 <__sfp+0x68>
 80276dc:	6836      	ldr	r6, [r6, #0]
 80276de:	e7f7      	b.n	80276d0 <__sfp+0x18>
 80276e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80276e4:	b9d5      	cbnz	r5, 802771c <__sfp+0x64>
 80276e6:	4b16      	ldr	r3, [pc, #88]	; (8027740 <__sfp+0x88>)
 80276e8:	60e3      	str	r3, [r4, #12]
 80276ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80276ee:	6665      	str	r5, [r4, #100]	; 0x64
 80276f0:	f000 fbba 	bl	8027e68 <__retarget_lock_init_recursive>
 80276f4:	f7ff ff96 	bl	8027624 <__sfp_lock_release>
 80276f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80276fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8027700:	6025      	str	r5, [r4, #0]
 8027702:	61a5      	str	r5, [r4, #24]
 8027704:	2208      	movs	r2, #8
 8027706:	4629      	mov	r1, r5
 8027708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802770c:	f7fd faa8 	bl	8024c60 <memset>
 8027710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8027714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8027718:	4620      	mov	r0, r4
 802771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802771c:	3468      	adds	r4, #104	; 0x68
 802771e:	e7d9      	b.n	80276d4 <__sfp+0x1c>
 8027720:	2104      	movs	r1, #4
 8027722:	4638      	mov	r0, r7
 8027724:	f7ff ff62 	bl	80275ec <__sfmoreglue>
 8027728:	4604      	mov	r4, r0
 802772a:	6030      	str	r0, [r6, #0]
 802772c:	2800      	cmp	r0, #0
 802772e:	d1d5      	bne.n	80276dc <__sfp+0x24>
 8027730:	f7ff ff78 	bl	8027624 <__sfp_lock_release>
 8027734:	230c      	movs	r3, #12
 8027736:	603b      	str	r3, [r7, #0]
 8027738:	e7ee      	b.n	8027718 <__sfp+0x60>
 802773a:	bf00      	nop
 802773c:	0803772c 	.word	0x0803772c
 8027740:	ffff0001 	.word	0xffff0001

08027744 <_fwalk_reent>:
 8027744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027748:	4606      	mov	r6, r0
 802774a:	4688      	mov	r8, r1
 802774c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8027750:	2700      	movs	r7, #0
 8027752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8027756:	f1b9 0901 	subs.w	r9, r9, #1
 802775a:	d505      	bpl.n	8027768 <_fwalk_reent+0x24>
 802775c:	6824      	ldr	r4, [r4, #0]
 802775e:	2c00      	cmp	r4, #0
 8027760:	d1f7      	bne.n	8027752 <_fwalk_reent+0xe>
 8027762:	4638      	mov	r0, r7
 8027764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027768:	89ab      	ldrh	r3, [r5, #12]
 802776a:	2b01      	cmp	r3, #1
 802776c:	d907      	bls.n	802777e <_fwalk_reent+0x3a>
 802776e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8027772:	3301      	adds	r3, #1
 8027774:	d003      	beq.n	802777e <_fwalk_reent+0x3a>
 8027776:	4629      	mov	r1, r5
 8027778:	4630      	mov	r0, r6
 802777a:	47c0      	blx	r8
 802777c:	4307      	orrs	r7, r0
 802777e:	3568      	adds	r5, #104	; 0x68
 8027780:	e7e9      	b.n	8027756 <_fwalk_reent+0x12>

08027782 <rshift>:
 8027782:	6903      	ldr	r3, [r0, #16]
 8027784:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8027788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802778c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8027790:	f100 0414 	add.w	r4, r0, #20
 8027794:	dd45      	ble.n	8027822 <rshift+0xa0>
 8027796:	f011 011f 	ands.w	r1, r1, #31
 802779a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802779e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80277a2:	d10c      	bne.n	80277be <rshift+0x3c>
 80277a4:	f100 0710 	add.w	r7, r0, #16
 80277a8:	4629      	mov	r1, r5
 80277aa:	42b1      	cmp	r1, r6
 80277ac:	d334      	bcc.n	8027818 <rshift+0x96>
 80277ae:	1a9b      	subs	r3, r3, r2
 80277b0:	009b      	lsls	r3, r3, #2
 80277b2:	1eea      	subs	r2, r5, #3
 80277b4:	4296      	cmp	r6, r2
 80277b6:	bf38      	it	cc
 80277b8:	2300      	movcc	r3, #0
 80277ba:	4423      	add	r3, r4
 80277bc:	e015      	b.n	80277ea <rshift+0x68>
 80277be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80277c2:	f1c1 0820 	rsb	r8, r1, #32
 80277c6:	40cf      	lsrs	r7, r1
 80277c8:	f105 0e04 	add.w	lr, r5, #4
 80277cc:	46a1      	mov	r9, r4
 80277ce:	4576      	cmp	r6, lr
 80277d0:	46f4      	mov	ip, lr
 80277d2:	d815      	bhi.n	8027800 <rshift+0x7e>
 80277d4:	1a9a      	subs	r2, r3, r2
 80277d6:	0092      	lsls	r2, r2, #2
 80277d8:	3a04      	subs	r2, #4
 80277da:	3501      	adds	r5, #1
 80277dc:	42ae      	cmp	r6, r5
 80277de:	bf38      	it	cc
 80277e0:	2200      	movcc	r2, #0
 80277e2:	18a3      	adds	r3, r4, r2
 80277e4:	50a7      	str	r7, [r4, r2]
 80277e6:	b107      	cbz	r7, 80277ea <rshift+0x68>
 80277e8:	3304      	adds	r3, #4
 80277ea:	1b1a      	subs	r2, r3, r4
 80277ec:	42a3      	cmp	r3, r4
 80277ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80277f2:	bf08      	it	eq
 80277f4:	2300      	moveq	r3, #0
 80277f6:	6102      	str	r2, [r0, #16]
 80277f8:	bf08      	it	eq
 80277fa:	6143      	streq	r3, [r0, #20]
 80277fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027800:	f8dc c000 	ldr.w	ip, [ip]
 8027804:	fa0c fc08 	lsl.w	ip, ip, r8
 8027808:	ea4c 0707 	orr.w	r7, ip, r7
 802780c:	f849 7b04 	str.w	r7, [r9], #4
 8027810:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027814:	40cf      	lsrs	r7, r1
 8027816:	e7da      	b.n	80277ce <rshift+0x4c>
 8027818:	f851 cb04 	ldr.w	ip, [r1], #4
 802781c:	f847 cf04 	str.w	ip, [r7, #4]!
 8027820:	e7c3      	b.n	80277aa <rshift+0x28>
 8027822:	4623      	mov	r3, r4
 8027824:	e7e1      	b.n	80277ea <rshift+0x68>

08027826 <__hexdig_fun>:
 8027826:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802782a:	2b09      	cmp	r3, #9
 802782c:	d802      	bhi.n	8027834 <__hexdig_fun+0xe>
 802782e:	3820      	subs	r0, #32
 8027830:	b2c0      	uxtb	r0, r0
 8027832:	4770      	bx	lr
 8027834:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8027838:	2b05      	cmp	r3, #5
 802783a:	d801      	bhi.n	8027840 <__hexdig_fun+0x1a>
 802783c:	3847      	subs	r0, #71	; 0x47
 802783e:	e7f7      	b.n	8027830 <__hexdig_fun+0xa>
 8027840:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8027844:	2b05      	cmp	r3, #5
 8027846:	d801      	bhi.n	802784c <__hexdig_fun+0x26>
 8027848:	3827      	subs	r0, #39	; 0x27
 802784a:	e7f1      	b.n	8027830 <__hexdig_fun+0xa>
 802784c:	2000      	movs	r0, #0
 802784e:	4770      	bx	lr

08027850 <__gethex>:
 8027850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027854:	ed2d 8b02 	vpush	{d8}
 8027858:	b089      	sub	sp, #36	; 0x24
 802785a:	ee08 0a10 	vmov	s16, r0
 802785e:	9304      	str	r3, [sp, #16]
 8027860:	4bb4      	ldr	r3, [pc, #720]	; (8027b34 <__gethex+0x2e4>)
 8027862:	681b      	ldr	r3, [r3, #0]
 8027864:	9301      	str	r3, [sp, #4]
 8027866:	4618      	mov	r0, r3
 8027868:	468b      	mov	fp, r1
 802786a:	4690      	mov	r8, r2
 802786c:	f7e9 f812 	bl	8010894 <strlen>
 8027870:	9b01      	ldr	r3, [sp, #4]
 8027872:	f8db 2000 	ldr.w	r2, [fp]
 8027876:	4403      	add	r3, r0
 8027878:	4682      	mov	sl, r0
 802787a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802787e:	9305      	str	r3, [sp, #20]
 8027880:	1c93      	adds	r3, r2, #2
 8027882:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8027886:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802788a:	32fe      	adds	r2, #254	; 0xfe
 802788c:	18d1      	adds	r1, r2, r3
 802788e:	461f      	mov	r7, r3
 8027890:	f813 0b01 	ldrb.w	r0, [r3], #1
 8027894:	9100      	str	r1, [sp, #0]
 8027896:	2830      	cmp	r0, #48	; 0x30
 8027898:	d0f8      	beq.n	802788c <__gethex+0x3c>
 802789a:	f7ff ffc4 	bl	8027826 <__hexdig_fun>
 802789e:	4604      	mov	r4, r0
 80278a0:	2800      	cmp	r0, #0
 80278a2:	d13a      	bne.n	802791a <__gethex+0xca>
 80278a4:	9901      	ldr	r1, [sp, #4]
 80278a6:	4652      	mov	r2, sl
 80278a8:	4638      	mov	r0, r7
 80278aa:	f001 f9e6 	bl	8028c7a <strncmp>
 80278ae:	4605      	mov	r5, r0
 80278b0:	2800      	cmp	r0, #0
 80278b2:	d168      	bne.n	8027986 <__gethex+0x136>
 80278b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80278b8:	eb07 060a 	add.w	r6, r7, sl
 80278bc:	f7ff ffb3 	bl	8027826 <__hexdig_fun>
 80278c0:	2800      	cmp	r0, #0
 80278c2:	d062      	beq.n	802798a <__gethex+0x13a>
 80278c4:	4633      	mov	r3, r6
 80278c6:	7818      	ldrb	r0, [r3, #0]
 80278c8:	2830      	cmp	r0, #48	; 0x30
 80278ca:	461f      	mov	r7, r3
 80278cc:	f103 0301 	add.w	r3, r3, #1
 80278d0:	d0f9      	beq.n	80278c6 <__gethex+0x76>
 80278d2:	f7ff ffa8 	bl	8027826 <__hexdig_fun>
 80278d6:	2301      	movs	r3, #1
 80278d8:	fab0 f480 	clz	r4, r0
 80278dc:	0964      	lsrs	r4, r4, #5
 80278de:	4635      	mov	r5, r6
 80278e0:	9300      	str	r3, [sp, #0]
 80278e2:	463a      	mov	r2, r7
 80278e4:	4616      	mov	r6, r2
 80278e6:	3201      	adds	r2, #1
 80278e8:	7830      	ldrb	r0, [r6, #0]
 80278ea:	f7ff ff9c 	bl	8027826 <__hexdig_fun>
 80278ee:	2800      	cmp	r0, #0
 80278f0:	d1f8      	bne.n	80278e4 <__gethex+0x94>
 80278f2:	9901      	ldr	r1, [sp, #4]
 80278f4:	4652      	mov	r2, sl
 80278f6:	4630      	mov	r0, r6
 80278f8:	f001 f9bf 	bl	8028c7a <strncmp>
 80278fc:	b980      	cbnz	r0, 8027920 <__gethex+0xd0>
 80278fe:	b94d      	cbnz	r5, 8027914 <__gethex+0xc4>
 8027900:	eb06 050a 	add.w	r5, r6, sl
 8027904:	462a      	mov	r2, r5
 8027906:	4616      	mov	r6, r2
 8027908:	3201      	adds	r2, #1
 802790a:	7830      	ldrb	r0, [r6, #0]
 802790c:	f7ff ff8b 	bl	8027826 <__hexdig_fun>
 8027910:	2800      	cmp	r0, #0
 8027912:	d1f8      	bne.n	8027906 <__gethex+0xb6>
 8027914:	1bad      	subs	r5, r5, r6
 8027916:	00ad      	lsls	r5, r5, #2
 8027918:	e004      	b.n	8027924 <__gethex+0xd4>
 802791a:	2400      	movs	r4, #0
 802791c:	4625      	mov	r5, r4
 802791e:	e7e0      	b.n	80278e2 <__gethex+0x92>
 8027920:	2d00      	cmp	r5, #0
 8027922:	d1f7      	bne.n	8027914 <__gethex+0xc4>
 8027924:	7833      	ldrb	r3, [r6, #0]
 8027926:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802792a:	2b50      	cmp	r3, #80	; 0x50
 802792c:	d13b      	bne.n	80279a6 <__gethex+0x156>
 802792e:	7873      	ldrb	r3, [r6, #1]
 8027930:	2b2b      	cmp	r3, #43	; 0x2b
 8027932:	d02c      	beq.n	802798e <__gethex+0x13e>
 8027934:	2b2d      	cmp	r3, #45	; 0x2d
 8027936:	d02e      	beq.n	8027996 <__gethex+0x146>
 8027938:	1c71      	adds	r1, r6, #1
 802793a:	f04f 0900 	mov.w	r9, #0
 802793e:	7808      	ldrb	r0, [r1, #0]
 8027940:	f7ff ff71 	bl	8027826 <__hexdig_fun>
 8027944:	1e43      	subs	r3, r0, #1
 8027946:	b2db      	uxtb	r3, r3
 8027948:	2b18      	cmp	r3, #24
 802794a:	d82c      	bhi.n	80279a6 <__gethex+0x156>
 802794c:	f1a0 0210 	sub.w	r2, r0, #16
 8027950:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8027954:	f7ff ff67 	bl	8027826 <__hexdig_fun>
 8027958:	1e43      	subs	r3, r0, #1
 802795a:	b2db      	uxtb	r3, r3
 802795c:	2b18      	cmp	r3, #24
 802795e:	d91d      	bls.n	802799c <__gethex+0x14c>
 8027960:	f1b9 0f00 	cmp.w	r9, #0
 8027964:	d000      	beq.n	8027968 <__gethex+0x118>
 8027966:	4252      	negs	r2, r2
 8027968:	4415      	add	r5, r2
 802796a:	f8cb 1000 	str.w	r1, [fp]
 802796e:	b1e4      	cbz	r4, 80279aa <__gethex+0x15a>
 8027970:	9b00      	ldr	r3, [sp, #0]
 8027972:	2b00      	cmp	r3, #0
 8027974:	bf14      	ite	ne
 8027976:	2700      	movne	r7, #0
 8027978:	2706      	moveq	r7, #6
 802797a:	4638      	mov	r0, r7
 802797c:	b009      	add	sp, #36	; 0x24
 802797e:	ecbd 8b02 	vpop	{d8}
 8027982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027986:	463e      	mov	r6, r7
 8027988:	4625      	mov	r5, r4
 802798a:	2401      	movs	r4, #1
 802798c:	e7ca      	b.n	8027924 <__gethex+0xd4>
 802798e:	f04f 0900 	mov.w	r9, #0
 8027992:	1cb1      	adds	r1, r6, #2
 8027994:	e7d3      	b.n	802793e <__gethex+0xee>
 8027996:	f04f 0901 	mov.w	r9, #1
 802799a:	e7fa      	b.n	8027992 <__gethex+0x142>
 802799c:	230a      	movs	r3, #10
 802799e:	fb03 0202 	mla	r2, r3, r2, r0
 80279a2:	3a10      	subs	r2, #16
 80279a4:	e7d4      	b.n	8027950 <__gethex+0x100>
 80279a6:	4631      	mov	r1, r6
 80279a8:	e7df      	b.n	802796a <__gethex+0x11a>
 80279aa:	1bf3      	subs	r3, r6, r7
 80279ac:	3b01      	subs	r3, #1
 80279ae:	4621      	mov	r1, r4
 80279b0:	2b07      	cmp	r3, #7
 80279b2:	dc0b      	bgt.n	80279cc <__gethex+0x17c>
 80279b4:	ee18 0a10 	vmov	r0, s16
 80279b8:	f000 fadc 	bl	8027f74 <_Balloc>
 80279bc:	4604      	mov	r4, r0
 80279be:	b940      	cbnz	r0, 80279d2 <__gethex+0x182>
 80279c0:	4b5d      	ldr	r3, [pc, #372]	; (8027b38 <__gethex+0x2e8>)
 80279c2:	4602      	mov	r2, r0
 80279c4:	21de      	movs	r1, #222	; 0xde
 80279c6:	485d      	ldr	r0, [pc, #372]	; (8027b3c <__gethex+0x2ec>)
 80279c8:	f001 f98a 	bl	8028ce0 <__assert_func>
 80279cc:	3101      	adds	r1, #1
 80279ce:	105b      	asrs	r3, r3, #1
 80279d0:	e7ee      	b.n	80279b0 <__gethex+0x160>
 80279d2:	f100 0914 	add.w	r9, r0, #20
 80279d6:	f04f 0b00 	mov.w	fp, #0
 80279da:	f1ca 0301 	rsb	r3, sl, #1
 80279de:	f8cd 9008 	str.w	r9, [sp, #8]
 80279e2:	f8cd b000 	str.w	fp, [sp]
 80279e6:	9306      	str	r3, [sp, #24]
 80279e8:	42b7      	cmp	r7, r6
 80279ea:	d340      	bcc.n	8027a6e <__gethex+0x21e>
 80279ec:	9802      	ldr	r0, [sp, #8]
 80279ee:	9b00      	ldr	r3, [sp, #0]
 80279f0:	f840 3b04 	str.w	r3, [r0], #4
 80279f4:	eba0 0009 	sub.w	r0, r0, r9
 80279f8:	1080      	asrs	r0, r0, #2
 80279fa:	0146      	lsls	r6, r0, #5
 80279fc:	6120      	str	r0, [r4, #16]
 80279fe:	4618      	mov	r0, r3
 8027a00:	f000 fbaa 	bl	8028158 <__hi0bits>
 8027a04:	1a30      	subs	r0, r6, r0
 8027a06:	f8d8 6000 	ldr.w	r6, [r8]
 8027a0a:	42b0      	cmp	r0, r6
 8027a0c:	dd63      	ble.n	8027ad6 <__gethex+0x286>
 8027a0e:	1b87      	subs	r7, r0, r6
 8027a10:	4639      	mov	r1, r7
 8027a12:	4620      	mov	r0, r4
 8027a14:	f000 ff4e 	bl	80288b4 <__any_on>
 8027a18:	4682      	mov	sl, r0
 8027a1a:	b1a8      	cbz	r0, 8027a48 <__gethex+0x1f8>
 8027a1c:	1e7b      	subs	r3, r7, #1
 8027a1e:	1159      	asrs	r1, r3, #5
 8027a20:	f003 021f 	and.w	r2, r3, #31
 8027a24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8027a28:	f04f 0a01 	mov.w	sl, #1
 8027a2c:	fa0a f202 	lsl.w	r2, sl, r2
 8027a30:	420a      	tst	r2, r1
 8027a32:	d009      	beq.n	8027a48 <__gethex+0x1f8>
 8027a34:	4553      	cmp	r3, sl
 8027a36:	dd05      	ble.n	8027a44 <__gethex+0x1f4>
 8027a38:	1eb9      	subs	r1, r7, #2
 8027a3a:	4620      	mov	r0, r4
 8027a3c:	f000 ff3a 	bl	80288b4 <__any_on>
 8027a40:	2800      	cmp	r0, #0
 8027a42:	d145      	bne.n	8027ad0 <__gethex+0x280>
 8027a44:	f04f 0a02 	mov.w	sl, #2
 8027a48:	4639      	mov	r1, r7
 8027a4a:	4620      	mov	r0, r4
 8027a4c:	f7ff fe99 	bl	8027782 <rshift>
 8027a50:	443d      	add	r5, r7
 8027a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027a56:	42ab      	cmp	r3, r5
 8027a58:	da4c      	bge.n	8027af4 <__gethex+0x2a4>
 8027a5a:	ee18 0a10 	vmov	r0, s16
 8027a5e:	4621      	mov	r1, r4
 8027a60:	f000 fac8 	bl	8027ff4 <_Bfree>
 8027a64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027a66:	2300      	movs	r3, #0
 8027a68:	6013      	str	r3, [r2, #0]
 8027a6a:	27a3      	movs	r7, #163	; 0xa3
 8027a6c:	e785      	b.n	802797a <__gethex+0x12a>
 8027a6e:	1e73      	subs	r3, r6, #1
 8027a70:	9a05      	ldr	r2, [sp, #20]
 8027a72:	9303      	str	r3, [sp, #12]
 8027a74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027a78:	4293      	cmp	r3, r2
 8027a7a:	d019      	beq.n	8027ab0 <__gethex+0x260>
 8027a7c:	f1bb 0f20 	cmp.w	fp, #32
 8027a80:	d107      	bne.n	8027a92 <__gethex+0x242>
 8027a82:	9b02      	ldr	r3, [sp, #8]
 8027a84:	9a00      	ldr	r2, [sp, #0]
 8027a86:	f843 2b04 	str.w	r2, [r3], #4
 8027a8a:	9302      	str	r3, [sp, #8]
 8027a8c:	2300      	movs	r3, #0
 8027a8e:	9300      	str	r3, [sp, #0]
 8027a90:	469b      	mov	fp, r3
 8027a92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8027a96:	f7ff fec6 	bl	8027826 <__hexdig_fun>
 8027a9a:	9b00      	ldr	r3, [sp, #0]
 8027a9c:	f000 000f 	and.w	r0, r0, #15
 8027aa0:	fa00 f00b 	lsl.w	r0, r0, fp
 8027aa4:	4303      	orrs	r3, r0
 8027aa6:	9300      	str	r3, [sp, #0]
 8027aa8:	f10b 0b04 	add.w	fp, fp, #4
 8027aac:	9b03      	ldr	r3, [sp, #12]
 8027aae:	e00d      	b.n	8027acc <__gethex+0x27c>
 8027ab0:	9b03      	ldr	r3, [sp, #12]
 8027ab2:	9a06      	ldr	r2, [sp, #24]
 8027ab4:	4413      	add	r3, r2
 8027ab6:	42bb      	cmp	r3, r7
 8027ab8:	d3e0      	bcc.n	8027a7c <__gethex+0x22c>
 8027aba:	4618      	mov	r0, r3
 8027abc:	9901      	ldr	r1, [sp, #4]
 8027abe:	9307      	str	r3, [sp, #28]
 8027ac0:	4652      	mov	r2, sl
 8027ac2:	f001 f8da 	bl	8028c7a <strncmp>
 8027ac6:	9b07      	ldr	r3, [sp, #28]
 8027ac8:	2800      	cmp	r0, #0
 8027aca:	d1d7      	bne.n	8027a7c <__gethex+0x22c>
 8027acc:	461e      	mov	r6, r3
 8027ace:	e78b      	b.n	80279e8 <__gethex+0x198>
 8027ad0:	f04f 0a03 	mov.w	sl, #3
 8027ad4:	e7b8      	b.n	8027a48 <__gethex+0x1f8>
 8027ad6:	da0a      	bge.n	8027aee <__gethex+0x29e>
 8027ad8:	1a37      	subs	r7, r6, r0
 8027ada:	4621      	mov	r1, r4
 8027adc:	ee18 0a10 	vmov	r0, s16
 8027ae0:	463a      	mov	r2, r7
 8027ae2:	f000 fca3 	bl	802842c <__lshift>
 8027ae6:	1bed      	subs	r5, r5, r7
 8027ae8:	4604      	mov	r4, r0
 8027aea:	f100 0914 	add.w	r9, r0, #20
 8027aee:	f04f 0a00 	mov.w	sl, #0
 8027af2:	e7ae      	b.n	8027a52 <__gethex+0x202>
 8027af4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8027af8:	42a8      	cmp	r0, r5
 8027afa:	dd72      	ble.n	8027be2 <__gethex+0x392>
 8027afc:	1b45      	subs	r5, r0, r5
 8027afe:	42ae      	cmp	r6, r5
 8027b00:	dc36      	bgt.n	8027b70 <__gethex+0x320>
 8027b02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027b06:	2b02      	cmp	r3, #2
 8027b08:	d02a      	beq.n	8027b60 <__gethex+0x310>
 8027b0a:	2b03      	cmp	r3, #3
 8027b0c:	d02c      	beq.n	8027b68 <__gethex+0x318>
 8027b0e:	2b01      	cmp	r3, #1
 8027b10:	d11c      	bne.n	8027b4c <__gethex+0x2fc>
 8027b12:	42ae      	cmp	r6, r5
 8027b14:	d11a      	bne.n	8027b4c <__gethex+0x2fc>
 8027b16:	2e01      	cmp	r6, #1
 8027b18:	d112      	bne.n	8027b40 <__gethex+0x2f0>
 8027b1a:	9a04      	ldr	r2, [sp, #16]
 8027b1c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8027b20:	6013      	str	r3, [r2, #0]
 8027b22:	2301      	movs	r3, #1
 8027b24:	6123      	str	r3, [r4, #16]
 8027b26:	f8c9 3000 	str.w	r3, [r9]
 8027b2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027b2c:	2762      	movs	r7, #98	; 0x62
 8027b2e:	601c      	str	r4, [r3, #0]
 8027b30:	e723      	b.n	802797a <__gethex+0x12a>
 8027b32:	bf00      	nop
 8027b34:	08037a14 	.word	0x08037a14
 8027b38:	08037938 	.word	0x08037938
 8027b3c:	080379ac 	.word	0x080379ac
 8027b40:	1e71      	subs	r1, r6, #1
 8027b42:	4620      	mov	r0, r4
 8027b44:	f000 feb6 	bl	80288b4 <__any_on>
 8027b48:	2800      	cmp	r0, #0
 8027b4a:	d1e6      	bne.n	8027b1a <__gethex+0x2ca>
 8027b4c:	ee18 0a10 	vmov	r0, s16
 8027b50:	4621      	mov	r1, r4
 8027b52:	f000 fa4f 	bl	8027ff4 <_Bfree>
 8027b56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027b58:	2300      	movs	r3, #0
 8027b5a:	6013      	str	r3, [r2, #0]
 8027b5c:	2750      	movs	r7, #80	; 0x50
 8027b5e:	e70c      	b.n	802797a <__gethex+0x12a>
 8027b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	d1f2      	bne.n	8027b4c <__gethex+0x2fc>
 8027b66:	e7d8      	b.n	8027b1a <__gethex+0x2ca>
 8027b68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027b6a:	2b00      	cmp	r3, #0
 8027b6c:	d1d5      	bne.n	8027b1a <__gethex+0x2ca>
 8027b6e:	e7ed      	b.n	8027b4c <__gethex+0x2fc>
 8027b70:	1e6f      	subs	r7, r5, #1
 8027b72:	f1ba 0f00 	cmp.w	sl, #0
 8027b76:	d131      	bne.n	8027bdc <__gethex+0x38c>
 8027b78:	b127      	cbz	r7, 8027b84 <__gethex+0x334>
 8027b7a:	4639      	mov	r1, r7
 8027b7c:	4620      	mov	r0, r4
 8027b7e:	f000 fe99 	bl	80288b4 <__any_on>
 8027b82:	4682      	mov	sl, r0
 8027b84:	117b      	asrs	r3, r7, #5
 8027b86:	2101      	movs	r1, #1
 8027b88:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8027b8c:	f007 071f 	and.w	r7, r7, #31
 8027b90:	fa01 f707 	lsl.w	r7, r1, r7
 8027b94:	421f      	tst	r7, r3
 8027b96:	4629      	mov	r1, r5
 8027b98:	4620      	mov	r0, r4
 8027b9a:	bf18      	it	ne
 8027b9c:	f04a 0a02 	orrne.w	sl, sl, #2
 8027ba0:	1b76      	subs	r6, r6, r5
 8027ba2:	f7ff fdee 	bl	8027782 <rshift>
 8027ba6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027baa:	2702      	movs	r7, #2
 8027bac:	f1ba 0f00 	cmp.w	sl, #0
 8027bb0:	d048      	beq.n	8027c44 <__gethex+0x3f4>
 8027bb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8027bb6:	2b02      	cmp	r3, #2
 8027bb8:	d015      	beq.n	8027be6 <__gethex+0x396>
 8027bba:	2b03      	cmp	r3, #3
 8027bbc:	d017      	beq.n	8027bee <__gethex+0x39e>
 8027bbe:	2b01      	cmp	r3, #1
 8027bc0:	d109      	bne.n	8027bd6 <__gethex+0x386>
 8027bc2:	f01a 0f02 	tst.w	sl, #2
 8027bc6:	d006      	beq.n	8027bd6 <__gethex+0x386>
 8027bc8:	f8d9 0000 	ldr.w	r0, [r9]
 8027bcc:	ea4a 0a00 	orr.w	sl, sl, r0
 8027bd0:	f01a 0f01 	tst.w	sl, #1
 8027bd4:	d10e      	bne.n	8027bf4 <__gethex+0x3a4>
 8027bd6:	f047 0710 	orr.w	r7, r7, #16
 8027bda:	e033      	b.n	8027c44 <__gethex+0x3f4>
 8027bdc:	f04f 0a01 	mov.w	sl, #1
 8027be0:	e7d0      	b.n	8027b84 <__gethex+0x334>
 8027be2:	2701      	movs	r7, #1
 8027be4:	e7e2      	b.n	8027bac <__gethex+0x35c>
 8027be6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027be8:	f1c3 0301 	rsb	r3, r3, #1
 8027bec:	9315      	str	r3, [sp, #84]	; 0x54
 8027bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	d0f0      	beq.n	8027bd6 <__gethex+0x386>
 8027bf4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8027bf8:	f104 0314 	add.w	r3, r4, #20
 8027bfc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8027c00:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8027c04:	f04f 0c00 	mov.w	ip, #0
 8027c08:	4618      	mov	r0, r3
 8027c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c0e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8027c12:	d01c      	beq.n	8027c4e <__gethex+0x3fe>
 8027c14:	3201      	adds	r2, #1
 8027c16:	6002      	str	r2, [r0, #0]
 8027c18:	2f02      	cmp	r7, #2
 8027c1a:	f104 0314 	add.w	r3, r4, #20
 8027c1e:	d13f      	bne.n	8027ca0 <__gethex+0x450>
 8027c20:	f8d8 2000 	ldr.w	r2, [r8]
 8027c24:	3a01      	subs	r2, #1
 8027c26:	42b2      	cmp	r2, r6
 8027c28:	d10a      	bne.n	8027c40 <__gethex+0x3f0>
 8027c2a:	1171      	asrs	r1, r6, #5
 8027c2c:	2201      	movs	r2, #1
 8027c2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8027c32:	f006 061f 	and.w	r6, r6, #31
 8027c36:	fa02 f606 	lsl.w	r6, r2, r6
 8027c3a:	421e      	tst	r6, r3
 8027c3c:	bf18      	it	ne
 8027c3e:	4617      	movne	r7, r2
 8027c40:	f047 0720 	orr.w	r7, r7, #32
 8027c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027c46:	601c      	str	r4, [r3, #0]
 8027c48:	9b04      	ldr	r3, [sp, #16]
 8027c4a:	601d      	str	r5, [r3, #0]
 8027c4c:	e695      	b.n	802797a <__gethex+0x12a>
 8027c4e:	4299      	cmp	r1, r3
 8027c50:	f843 cc04 	str.w	ip, [r3, #-4]
 8027c54:	d8d8      	bhi.n	8027c08 <__gethex+0x3b8>
 8027c56:	68a3      	ldr	r3, [r4, #8]
 8027c58:	459b      	cmp	fp, r3
 8027c5a:	db19      	blt.n	8027c90 <__gethex+0x440>
 8027c5c:	6861      	ldr	r1, [r4, #4]
 8027c5e:	ee18 0a10 	vmov	r0, s16
 8027c62:	3101      	adds	r1, #1
 8027c64:	f000 f986 	bl	8027f74 <_Balloc>
 8027c68:	4681      	mov	r9, r0
 8027c6a:	b918      	cbnz	r0, 8027c74 <__gethex+0x424>
 8027c6c:	4b1a      	ldr	r3, [pc, #104]	; (8027cd8 <__gethex+0x488>)
 8027c6e:	4602      	mov	r2, r0
 8027c70:	2184      	movs	r1, #132	; 0x84
 8027c72:	e6a8      	b.n	80279c6 <__gethex+0x176>
 8027c74:	6922      	ldr	r2, [r4, #16]
 8027c76:	3202      	adds	r2, #2
 8027c78:	f104 010c 	add.w	r1, r4, #12
 8027c7c:	0092      	lsls	r2, r2, #2
 8027c7e:	300c      	adds	r0, #12
 8027c80:	f7fc ffe0 	bl	8024c44 <memcpy>
 8027c84:	4621      	mov	r1, r4
 8027c86:	ee18 0a10 	vmov	r0, s16
 8027c8a:	f000 f9b3 	bl	8027ff4 <_Bfree>
 8027c8e:	464c      	mov	r4, r9
 8027c90:	6923      	ldr	r3, [r4, #16]
 8027c92:	1c5a      	adds	r2, r3, #1
 8027c94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8027c98:	6122      	str	r2, [r4, #16]
 8027c9a:	2201      	movs	r2, #1
 8027c9c:	615a      	str	r2, [r3, #20]
 8027c9e:	e7bb      	b.n	8027c18 <__gethex+0x3c8>
 8027ca0:	6922      	ldr	r2, [r4, #16]
 8027ca2:	455a      	cmp	r2, fp
 8027ca4:	dd0b      	ble.n	8027cbe <__gethex+0x46e>
 8027ca6:	2101      	movs	r1, #1
 8027ca8:	4620      	mov	r0, r4
 8027caa:	f7ff fd6a 	bl	8027782 <rshift>
 8027cae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8027cb2:	3501      	adds	r5, #1
 8027cb4:	42ab      	cmp	r3, r5
 8027cb6:	f6ff aed0 	blt.w	8027a5a <__gethex+0x20a>
 8027cba:	2701      	movs	r7, #1
 8027cbc:	e7c0      	b.n	8027c40 <__gethex+0x3f0>
 8027cbe:	f016 061f 	ands.w	r6, r6, #31
 8027cc2:	d0fa      	beq.n	8027cba <__gethex+0x46a>
 8027cc4:	4453      	add	r3, sl
 8027cc6:	f1c6 0620 	rsb	r6, r6, #32
 8027cca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8027cce:	f000 fa43 	bl	8028158 <__hi0bits>
 8027cd2:	42b0      	cmp	r0, r6
 8027cd4:	dbe7      	blt.n	8027ca6 <__gethex+0x456>
 8027cd6:	e7f0      	b.n	8027cba <__gethex+0x46a>
 8027cd8:	08037938 	.word	0x08037938

08027cdc <L_shift>:
 8027cdc:	f1c2 0208 	rsb	r2, r2, #8
 8027ce0:	0092      	lsls	r2, r2, #2
 8027ce2:	b570      	push	{r4, r5, r6, lr}
 8027ce4:	f1c2 0620 	rsb	r6, r2, #32
 8027ce8:	6843      	ldr	r3, [r0, #4]
 8027cea:	6804      	ldr	r4, [r0, #0]
 8027cec:	fa03 f506 	lsl.w	r5, r3, r6
 8027cf0:	432c      	orrs	r4, r5
 8027cf2:	40d3      	lsrs	r3, r2
 8027cf4:	6004      	str	r4, [r0, #0]
 8027cf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8027cfa:	4288      	cmp	r0, r1
 8027cfc:	d3f4      	bcc.n	8027ce8 <L_shift+0xc>
 8027cfe:	bd70      	pop	{r4, r5, r6, pc}

08027d00 <__match>:
 8027d00:	b530      	push	{r4, r5, lr}
 8027d02:	6803      	ldr	r3, [r0, #0]
 8027d04:	3301      	adds	r3, #1
 8027d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027d0a:	b914      	cbnz	r4, 8027d12 <__match+0x12>
 8027d0c:	6003      	str	r3, [r0, #0]
 8027d0e:	2001      	movs	r0, #1
 8027d10:	bd30      	pop	{r4, r5, pc}
 8027d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027d16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8027d1a:	2d19      	cmp	r5, #25
 8027d1c:	bf98      	it	ls
 8027d1e:	3220      	addls	r2, #32
 8027d20:	42a2      	cmp	r2, r4
 8027d22:	d0f0      	beq.n	8027d06 <__match+0x6>
 8027d24:	2000      	movs	r0, #0
 8027d26:	e7f3      	b.n	8027d10 <__match+0x10>

08027d28 <__hexnan>:
 8027d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d2c:	680b      	ldr	r3, [r1, #0]
 8027d2e:	115e      	asrs	r6, r3, #5
 8027d30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8027d34:	f013 031f 	ands.w	r3, r3, #31
 8027d38:	b087      	sub	sp, #28
 8027d3a:	bf18      	it	ne
 8027d3c:	3604      	addne	r6, #4
 8027d3e:	2500      	movs	r5, #0
 8027d40:	1f37      	subs	r7, r6, #4
 8027d42:	4690      	mov	r8, r2
 8027d44:	6802      	ldr	r2, [r0, #0]
 8027d46:	9301      	str	r3, [sp, #4]
 8027d48:	4682      	mov	sl, r0
 8027d4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8027d4e:	46b9      	mov	r9, r7
 8027d50:	463c      	mov	r4, r7
 8027d52:	9502      	str	r5, [sp, #8]
 8027d54:	46ab      	mov	fp, r5
 8027d56:	7851      	ldrb	r1, [r2, #1]
 8027d58:	1c53      	adds	r3, r2, #1
 8027d5a:	9303      	str	r3, [sp, #12]
 8027d5c:	b341      	cbz	r1, 8027db0 <__hexnan+0x88>
 8027d5e:	4608      	mov	r0, r1
 8027d60:	9205      	str	r2, [sp, #20]
 8027d62:	9104      	str	r1, [sp, #16]
 8027d64:	f7ff fd5f 	bl	8027826 <__hexdig_fun>
 8027d68:	2800      	cmp	r0, #0
 8027d6a:	d14f      	bne.n	8027e0c <__hexnan+0xe4>
 8027d6c:	9904      	ldr	r1, [sp, #16]
 8027d6e:	9a05      	ldr	r2, [sp, #20]
 8027d70:	2920      	cmp	r1, #32
 8027d72:	d818      	bhi.n	8027da6 <__hexnan+0x7e>
 8027d74:	9b02      	ldr	r3, [sp, #8]
 8027d76:	459b      	cmp	fp, r3
 8027d78:	dd13      	ble.n	8027da2 <__hexnan+0x7a>
 8027d7a:	454c      	cmp	r4, r9
 8027d7c:	d206      	bcs.n	8027d8c <__hexnan+0x64>
 8027d7e:	2d07      	cmp	r5, #7
 8027d80:	dc04      	bgt.n	8027d8c <__hexnan+0x64>
 8027d82:	462a      	mov	r2, r5
 8027d84:	4649      	mov	r1, r9
 8027d86:	4620      	mov	r0, r4
 8027d88:	f7ff ffa8 	bl	8027cdc <L_shift>
 8027d8c:	4544      	cmp	r4, r8
 8027d8e:	d950      	bls.n	8027e32 <__hexnan+0x10a>
 8027d90:	2300      	movs	r3, #0
 8027d92:	f1a4 0904 	sub.w	r9, r4, #4
 8027d96:	f844 3c04 	str.w	r3, [r4, #-4]
 8027d9a:	f8cd b008 	str.w	fp, [sp, #8]
 8027d9e:	464c      	mov	r4, r9
 8027da0:	461d      	mov	r5, r3
 8027da2:	9a03      	ldr	r2, [sp, #12]
 8027da4:	e7d7      	b.n	8027d56 <__hexnan+0x2e>
 8027da6:	2929      	cmp	r1, #41	; 0x29
 8027da8:	d156      	bne.n	8027e58 <__hexnan+0x130>
 8027daa:	3202      	adds	r2, #2
 8027dac:	f8ca 2000 	str.w	r2, [sl]
 8027db0:	f1bb 0f00 	cmp.w	fp, #0
 8027db4:	d050      	beq.n	8027e58 <__hexnan+0x130>
 8027db6:	454c      	cmp	r4, r9
 8027db8:	d206      	bcs.n	8027dc8 <__hexnan+0xa0>
 8027dba:	2d07      	cmp	r5, #7
 8027dbc:	dc04      	bgt.n	8027dc8 <__hexnan+0xa0>
 8027dbe:	462a      	mov	r2, r5
 8027dc0:	4649      	mov	r1, r9
 8027dc2:	4620      	mov	r0, r4
 8027dc4:	f7ff ff8a 	bl	8027cdc <L_shift>
 8027dc8:	4544      	cmp	r4, r8
 8027dca:	d934      	bls.n	8027e36 <__hexnan+0x10e>
 8027dcc:	f1a8 0204 	sub.w	r2, r8, #4
 8027dd0:	4623      	mov	r3, r4
 8027dd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8027dd6:	f842 1f04 	str.w	r1, [r2, #4]!
 8027dda:	429f      	cmp	r7, r3
 8027ddc:	d2f9      	bcs.n	8027dd2 <__hexnan+0xaa>
 8027dde:	1b3b      	subs	r3, r7, r4
 8027de0:	f023 0303 	bic.w	r3, r3, #3
 8027de4:	3304      	adds	r3, #4
 8027de6:	3401      	adds	r4, #1
 8027de8:	3e03      	subs	r6, #3
 8027dea:	42b4      	cmp	r4, r6
 8027dec:	bf88      	it	hi
 8027dee:	2304      	movhi	r3, #4
 8027df0:	4443      	add	r3, r8
 8027df2:	2200      	movs	r2, #0
 8027df4:	f843 2b04 	str.w	r2, [r3], #4
 8027df8:	429f      	cmp	r7, r3
 8027dfa:	d2fb      	bcs.n	8027df4 <__hexnan+0xcc>
 8027dfc:	683b      	ldr	r3, [r7, #0]
 8027dfe:	b91b      	cbnz	r3, 8027e08 <__hexnan+0xe0>
 8027e00:	4547      	cmp	r7, r8
 8027e02:	d127      	bne.n	8027e54 <__hexnan+0x12c>
 8027e04:	2301      	movs	r3, #1
 8027e06:	603b      	str	r3, [r7, #0]
 8027e08:	2005      	movs	r0, #5
 8027e0a:	e026      	b.n	8027e5a <__hexnan+0x132>
 8027e0c:	3501      	adds	r5, #1
 8027e0e:	2d08      	cmp	r5, #8
 8027e10:	f10b 0b01 	add.w	fp, fp, #1
 8027e14:	dd06      	ble.n	8027e24 <__hexnan+0xfc>
 8027e16:	4544      	cmp	r4, r8
 8027e18:	d9c3      	bls.n	8027da2 <__hexnan+0x7a>
 8027e1a:	2300      	movs	r3, #0
 8027e1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8027e20:	2501      	movs	r5, #1
 8027e22:	3c04      	subs	r4, #4
 8027e24:	6822      	ldr	r2, [r4, #0]
 8027e26:	f000 000f 	and.w	r0, r0, #15
 8027e2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8027e2e:	6022      	str	r2, [r4, #0]
 8027e30:	e7b7      	b.n	8027da2 <__hexnan+0x7a>
 8027e32:	2508      	movs	r5, #8
 8027e34:	e7b5      	b.n	8027da2 <__hexnan+0x7a>
 8027e36:	9b01      	ldr	r3, [sp, #4]
 8027e38:	2b00      	cmp	r3, #0
 8027e3a:	d0df      	beq.n	8027dfc <__hexnan+0xd4>
 8027e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8027e40:	f1c3 0320 	rsb	r3, r3, #32
 8027e44:	fa22 f303 	lsr.w	r3, r2, r3
 8027e48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8027e4c:	401a      	ands	r2, r3
 8027e4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8027e52:	e7d3      	b.n	8027dfc <__hexnan+0xd4>
 8027e54:	3f04      	subs	r7, #4
 8027e56:	e7d1      	b.n	8027dfc <__hexnan+0xd4>
 8027e58:	2004      	movs	r0, #4
 8027e5a:	b007      	add	sp, #28
 8027e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027e60 <_localeconv_r>:
 8027e60:	4800      	ldr	r0, [pc, #0]	; (8027e64 <_localeconv_r+0x4>)
 8027e62:	4770      	bx	lr
 8027e64:	20000238 	.word	0x20000238

08027e68 <__retarget_lock_init_recursive>:
 8027e68:	4770      	bx	lr

08027e6a <__retarget_lock_acquire_recursive>:
 8027e6a:	4770      	bx	lr

08027e6c <__retarget_lock_release_recursive>:
 8027e6c:	4770      	bx	lr

08027e6e <__swhatbuf_r>:
 8027e6e:	b570      	push	{r4, r5, r6, lr}
 8027e70:	460e      	mov	r6, r1
 8027e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027e76:	2900      	cmp	r1, #0
 8027e78:	b096      	sub	sp, #88	; 0x58
 8027e7a:	4614      	mov	r4, r2
 8027e7c:	461d      	mov	r5, r3
 8027e7e:	da08      	bge.n	8027e92 <__swhatbuf_r+0x24>
 8027e80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027e84:	2200      	movs	r2, #0
 8027e86:	602a      	str	r2, [r5, #0]
 8027e88:	061a      	lsls	r2, r3, #24
 8027e8a:	d410      	bmi.n	8027eae <__swhatbuf_r+0x40>
 8027e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027e90:	e00e      	b.n	8027eb0 <__swhatbuf_r+0x42>
 8027e92:	466a      	mov	r2, sp
 8027e94:	f000 ff64 	bl	8028d60 <_fstat_r>
 8027e98:	2800      	cmp	r0, #0
 8027e9a:	dbf1      	blt.n	8027e80 <__swhatbuf_r+0x12>
 8027e9c:	9a01      	ldr	r2, [sp, #4]
 8027e9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027ea2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027ea6:	425a      	negs	r2, r3
 8027ea8:	415a      	adcs	r2, r3
 8027eaa:	602a      	str	r2, [r5, #0]
 8027eac:	e7ee      	b.n	8027e8c <__swhatbuf_r+0x1e>
 8027eae:	2340      	movs	r3, #64	; 0x40
 8027eb0:	2000      	movs	r0, #0
 8027eb2:	6023      	str	r3, [r4, #0]
 8027eb4:	b016      	add	sp, #88	; 0x58
 8027eb6:	bd70      	pop	{r4, r5, r6, pc}

08027eb8 <__smakebuf_r>:
 8027eb8:	898b      	ldrh	r3, [r1, #12]
 8027eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027ebc:	079d      	lsls	r5, r3, #30
 8027ebe:	4606      	mov	r6, r0
 8027ec0:	460c      	mov	r4, r1
 8027ec2:	d507      	bpl.n	8027ed4 <__smakebuf_r+0x1c>
 8027ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027ec8:	6023      	str	r3, [r4, #0]
 8027eca:	6123      	str	r3, [r4, #16]
 8027ecc:	2301      	movs	r3, #1
 8027ece:	6163      	str	r3, [r4, #20]
 8027ed0:	b002      	add	sp, #8
 8027ed2:	bd70      	pop	{r4, r5, r6, pc}
 8027ed4:	ab01      	add	r3, sp, #4
 8027ed6:	466a      	mov	r2, sp
 8027ed8:	f7ff ffc9 	bl	8027e6e <__swhatbuf_r>
 8027edc:	9900      	ldr	r1, [sp, #0]
 8027ede:	4605      	mov	r5, r0
 8027ee0:	4630      	mov	r0, r6
 8027ee2:	f7fc ff31 	bl	8024d48 <_malloc_r>
 8027ee6:	b948      	cbnz	r0, 8027efc <__smakebuf_r+0x44>
 8027ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027eec:	059a      	lsls	r2, r3, #22
 8027eee:	d4ef      	bmi.n	8027ed0 <__smakebuf_r+0x18>
 8027ef0:	f023 0303 	bic.w	r3, r3, #3
 8027ef4:	f043 0302 	orr.w	r3, r3, #2
 8027ef8:	81a3      	strh	r3, [r4, #12]
 8027efa:	e7e3      	b.n	8027ec4 <__smakebuf_r+0xc>
 8027efc:	4b0d      	ldr	r3, [pc, #52]	; (8027f34 <__smakebuf_r+0x7c>)
 8027efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8027f00:	89a3      	ldrh	r3, [r4, #12]
 8027f02:	6020      	str	r0, [r4, #0]
 8027f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f08:	81a3      	strh	r3, [r4, #12]
 8027f0a:	9b00      	ldr	r3, [sp, #0]
 8027f0c:	6163      	str	r3, [r4, #20]
 8027f0e:	9b01      	ldr	r3, [sp, #4]
 8027f10:	6120      	str	r0, [r4, #16]
 8027f12:	b15b      	cbz	r3, 8027f2c <__smakebuf_r+0x74>
 8027f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027f18:	4630      	mov	r0, r6
 8027f1a:	f000 ff33 	bl	8028d84 <_isatty_r>
 8027f1e:	b128      	cbz	r0, 8027f2c <__smakebuf_r+0x74>
 8027f20:	89a3      	ldrh	r3, [r4, #12]
 8027f22:	f023 0303 	bic.w	r3, r3, #3
 8027f26:	f043 0301 	orr.w	r3, r3, #1
 8027f2a:	81a3      	strh	r3, [r4, #12]
 8027f2c:	89a0      	ldrh	r0, [r4, #12]
 8027f2e:	4305      	orrs	r5, r0
 8027f30:	81a5      	strh	r5, [r4, #12]
 8027f32:	e7cd      	b.n	8027ed0 <__smakebuf_r+0x18>
 8027f34:	080275e1 	.word	0x080275e1

08027f38 <__ascii_mbtowc>:
 8027f38:	b082      	sub	sp, #8
 8027f3a:	b901      	cbnz	r1, 8027f3e <__ascii_mbtowc+0x6>
 8027f3c:	a901      	add	r1, sp, #4
 8027f3e:	b142      	cbz	r2, 8027f52 <__ascii_mbtowc+0x1a>
 8027f40:	b14b      	cbz	r3, 8027f56 <__ascii_mbtowc+0x1e>
 8027f42:	7813      	ldrb	r3, [r2, #0]
 8027f44:	600b      	str	r3, [r1, #0]
 8027f46:	7812      	ldrb	r2, [r2, #0]
 8027f48:	1e10      	subs	r0, r2, #0
 8027f4a:	bf18      	it	ne
 8027f4c:	2001      	movne	r0, #1
 8027f4e:	b002      	add	sp, #8
 8027f50:	4770      	bx	lr
 8027f52:	4610      	mov	r0, r2
 8027f54:	e7fb      	b.n	8027f4e <__ascii_mbtowc+0x16>
 8027f56:	f06f 0001 	mvn.w	r0, #1
 8027f5a:	e7f8      	b.n	8027f4e <__ascii_mbtowc+0x16>

08027f5c <__malloc_lock>:
 8027f5c:	4801      	ldr	r0, [pc, #4]	; (8027f64 <__malloc_lock+0x8>)
 8027f5e:	f7ff bf84 	b.w	8027e6a <__retarget_lock_acquire_recursive>
 8027f62:	bf00      	nop
 8027f64:	2000b3ac 	.word	0x2000b3ac

08027f68 <__malloc_unlock>:
 8027f68:	4801      	ldr	r0, [pc, #4]	; (8027f70 <__malloc_unlock+0x8>)
 8027f6a:	f7ff bf7f 	b.w	8027e6c <__retarget_lock_release_recursive>
 8027f6e:	bf00      	nop
 8027f70:	2000b3ac 	.word	0x2000b3ac

08027f74 <_Balloc>:
 8027f74:	b570      	push	{r4, r5, r6, lr}
 8027f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027f78:	4604      	mov	r4, r0
 8027f7a:	460d      	mov	r5, r1
 8027f7c:	b976      	cbnz	r6, 8027f9c <_Balloc+0x28>
 8027f7e:	2010      	movs	r0, #16
 8027f80:	f7fc fe50 	bl	8024c24 <malloc>
 8027f84:	4602      	mov	r2, r0
 8027f86:	6260      	str	r0, [r4, #36]	; 0x24
 8027f88:	b920      	cbnz	r0, 8027f94 <_Balloc+0x20>
 8027f8a:	4b18      	ldr	r3, [pc, #96]	; (8027fec <_Balloc+0x78>)
 8027f8c:	4818      	ldr	r0, [pc, #96]	; (8027ff0 <_Balloc+0x7c>)
 8027f8e:	2166      	movs	r1, #102	; 0x66
 8027f90:	f000 fea6 	bl	8028ce0 <__assert_func>
 8027f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027f98:	6006      	str	r6, [r0, #0]
 8027f9a:	60c6      	str	r6, [r0, #12]
 8027f9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027f9e:	68f3      	ldr	r3, [r6, #12]
 8027fa0:	b183      	cbz	r3, 8027fc4 <_Balloc+0x50>
 8027fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027fa4:	68db      	ldr	r3, [r3, #12]
 8027fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027faa:	b9b8      	cbnz	r0, 8027fdc <_Balloc+0x68>
 8027fac:	2101      	movs	r1, #1
 8027fae:	fa01 f605 	lsl.w	r6, r1, r5
 8027fb2:	1d72      	adds	r2, r6, #5
 8027fb4:	0092      	lsls	r2, r2, #2
 8027fb6:	4620      	mov	r0, r4
 8027fb8:	f000 fc9d 	bl	80288f6 <_calloc_r>
 8027fbc:	b160      	cbz	r0, 8027fd8 <_Balloc+0x64>
 8027fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027fc2:	e00e      	b.n	8027fe2 <_Balloc+0x6e>
 8027fc4:	2221      	movs	r2, #33	; 0x21
 8027fc6:	2104      	movs	r1, #4
 8027fc8:	4620      	mov	r0, r4
 8027fca:	f000 fc94 	bl	80288f6 <_calloc_r>
 8027fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027fd0:	60f0      	str	r0, [r6, #12]
 8027fd2:	68db      	ldr	r3, [r3, #12]
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	d1e4      	bne.n	8027fa2 <_Balloc+0x2e>
 8027fd8:	2000      	movs	r0, #0
 8027fda:	bd70      	pop	{r4, r5, r6, pc}
 8027fdc:	6802      	ldr	r2, [r0, #0]
 8027fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027fe2:	2300      	movs	r3, #0
 8027fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027fe8:	e7f7      	b.n	8027fda <_Balloc+0x66>
 8027fea:	bf00      	nop
 8027fec:	080378c6 	.word	0x080378c6
 8027ff0:	08037a28 	.word	0x08037a28

08027ff4 <_Bfree>:
 8027ff4:	b570      	push	{r4, r5, r6, lr}
 8027ff6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027ff8:	4605      	mov	r5, r0
 8027ffa:	460c      	mov	r4, r1
 8027ffc:	b976      	cbnz	r6, 802801c <_Bfree+0x28>
 8027ffe:	2010      	movs	r0, #16
 8028000:	f7fc fe10 	bl	8024c24 <malloc>
 8028004:	4602      	mov	r2, r0
 8028006:	6268      	str	r0, [r5, #36]	; 0x24
 8028008:	b920      	cbnz	r0, 8028014 <_Bfree+0x20>
 802800a:	4b09      	ldr	r3, [pc, #36]	; (8028030 <_Bfree+0x3c>)
 802800c:	4809      	ldr	r0, [pc, #36]	; (8028034 <_Bfree+0x40>)
 802800e:	218a      	movs	r1, #138	; 0x8a
 8028010:	f000 fe66 	bl	8028ce0 <__assert_func>
 8028014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8028018:	6006      	str	r6, [r0, #0]
 802801a:	60c6      	str	r6, [r0, #12]
 802801c:	b13c      	cbz	r4, 802802e <_Bfree+0x3a>
 802801e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8028020:	6862      	ldr	r2, [r4, #4]
 8028022:	68db      	ldr	r3, [r3, #12]
 8028024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028028:	6021      	str	r1, [r4, #0]
 802802a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802802e:	bd70      	pop	{r4, r5, r6, pc}
 8028030:	080378c6 	.word	0x080378c6
 8028034:	08037a28 	.word	0x08037a28

08028038 <__multadd>:
 8028038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802803c:	690d      	ldr	r5, [r1, #16]
 802803e:	4607      	mov	r7, r0
 8028040:	460c      	mov	r4, r1
 8028042:	461e      	mov	r6, r3
 8028044:	f101 0c14 	add.w	ip, r1, #20
 8028048:	2000      	movs	r0, #0
 802804a:	f8dc 3000 	ldr.w	r3, [ip]
 802804e:	b299      	uxth	r1, r3
 8028050:	fb02 6101 	mla	r1, r2, r1, r6
 8028054:	0c1e      	lsrs	r6, r3, #16
 8028056:	0c0b      	lsrs	r3, r1, #16
 8028058:	fb02 3306 	mla	r3, r2, r6, r3
 802805c:	b289      	uxth	r1, r1
 802805e:	3001      	adds	r0, #1
 8028060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8028064:	4285      	cmp	r5, r0
 8028066:	f84c 1b04 	str.w	r1, [ip], #4
 802806a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802806e:	dcec      	bgt.n	802804a <__multadd+0x12>
 8028070:	b30e      	cbz	r6, 80280b6 <__multadd+0x7e>
 8028072:	68a3      	ldr	r3, [r4, #8]
 8028074:	42ab      	cmp	r3, r5
 8028076:	dc19      	bgt.n	80280ac <__multadd+0x74>
 8028078:	6861      	ldr	r1, [r4, #4]
 802807a:	4638      	mov	r0, r7
 802807c:	3101      	adds	r1, #1
 802807e:	f7ff ff79 	bl	8027f74 <_Balloc>
 8028082:	4680      	mov	r8, r0
 8028084:	b928      	cbnz	r0, 8028092 <__multadd+0x5a>
 8028086:	4602      	mov	r2, r0
 8028088:	4b0c      	ldr	r3, [pc, #48]	; (80280bc <__multadd+0x84>)
 802808a:	480d      	ldr	r0, [pc, #52]	; (80280c0 <__multadd+0x88>)
 802808c:	21b5      	movs	r1, #181	; 0xb5
 802808e:	f000 fe27 	bl	8028ce0 <__assert_func>
 8028092:	6922      	ldr	r2, [r4, #16]
 8028094:	3202      	adds	r2, #2
 8028096:	f104 010c 	add.w	r1, r4, #12
 802809a:	0092      	lsls	r2, r2, #2
 802809c:	300c      	adds	r0, #12
 802809e:	f7fc fdd1 	bl	8024c44 <memcpy>
 80280a2:	4621      	mov	r1, r4
 80280a4:	4638      	mov	r0, r7
 80280a6:	f7ff ffa5 	bl	8027ff4 <_Bfree>
 80280aa:	4644      	mov	r4, r8
 80280ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80280b0:	3501      	adds	r5, #1
 80280b2:	615e      	str	r6, [r3, #20]
 80280b4:	6125      	str	r5, [r4, #16]
 80280b6:	4620      	mov	r0, r4
 80280b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80280bc:	08037938 	.word	0x08037938
 80280c0:	08037a28 	.word	0x08037a28

080280c4 <__s2b>:
 80280c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80280c8:	460c      	mov	r4, r1
 80280ca:	4615      	mov	r5, r2
 80280cc:	461f      	mov	r7, r3
 80280ce:	2209      	movs	r2, #9
 80280d0:	3308      	adds	r3, #8
 80280d2:	4606      	mov	r6, r0
 80280d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80280d8:	2100      	movs	r1, #0
 80280da:	2201      	movs	r2, #1
 80280dc:	429a      	cmp	r2, r3
 80280de:	db09      	blt.n	80280f4 <__s2b+0x30>
 80280e0:	4630      	mov	r0, r6
 80280e2:	f7ff ff47 	bl	8027f74 <_Balloc>
 80280e6:	b940      	cbnz	r0, 80280fa <__s2b+0x36>
 80280e8:	4602      	mov	r2, r0
 80280ea:	4b19      	ldr	r3, [pc, #100]	; (8028150 <__s2b+0x8c>)
 80280ec:	4819      	ldr	r0, [pc, #100]	; (8028154 <__s2b+0x90>)
 80280ee:	21ce      	movs	r1, #206	; 0xce
 80280f0:	f000 fdf6 	bl	8028ce0 <__assert_func>
 80280f4:	0052      	lsls	r2, r2, #1
 80280f6:	3101      	adds	r1, #1
 80280f8:	e7f0      	b.n	80280dc <__s2b+0x18>
 80280fa:	9b08      	ldr	r3, [sp, #32]
 80280fc:	6143      	str	r3, [r0, #20]
 80280fe:	2d09      	cmp	r5, #9
 8028100:	f04f 0301 	mov.w	r3, #1
 8028104:	6103      	str	r3, [r0, #16]
 8028106:	dd16      	ble.n	8028136 <__s2b+0x72>
 8028108:	f104 0909 	add.w	r9, r4, #9
 802810c:	46c8      	mov	r8, r9
 802810e:	442c      	add	r4, r5
 8028110:	f818 3b01 	ldrb.w	r3, [r8], #1
 8028114:	4601      	mov	r1, r0
 8028116:	3b30      	subs	r3, #48	; 0x30
 8028118:	220a      	movs	r2, #10
 802811a:	4630      	mov	r0, r6
 802811c:	f7ff ff8c 	bl	8028038 <__multadd>
 8028120:	45a0      	cmp	r8, r4
 8028122:	d1f5      	bne.n	8028110 <__s2b+0x4c>
 8028124:	f1a5 0408 	sub.w	r4, r5, #8
 8028128:	444c      	add	r4, r9
 802812a:	1b2d      	subs	r5, r5, r4
 802812c:	1963      	adds	r3, r4, r5
 802812e:	42bb      	cmp	r3, r7
 8028130:	db04      	blt.n	802813c <__s2b+0x78>
 8028132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028136:	340a      	adds	r4, #10
 8028138:	2509      	movs	r5, #9
 802813a:	e7f6      	b.n	802812a <__s2b+0x66>
 802813c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8028140:	4601      	mov	r1, r0
 8028142:	3b30      	subs	r3, #48	; 0x30
 8028144:	220a      	movs	r2, #10
 8028146:	4630      	mov	r0, r6
 8028148:	f7ff ff76 	bl	8028038 <__multadd>
 802814c:	e7ee      	b.n	802812c <__s2b+0x68>
 802814e:	bf00      	nop
 8028150:	08037938 	.word	0x08037938
 8028154:	08037a28 	.word	0x08037a28

08028158 <__hi0bits>:
 8028158:	0c03      	lsrs	r3, r0, #16
 802815a:	041b      	lsls	r3, r3, #16
 802815c:	b9d3      	cbnz	r3, 8028194 <__hi0bits+0x3c>
 802815e:	0400      	lsls	r0, r0, #16
 8028160:	2310      	movs	r3, #16
 8028162:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8028166:	bf04      	itt	eq
 8028168:	0200      	lsleq	r0, r0, #8
 802816a:	3308      	addeq	r3, #8
 802816c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8028170:	bf04      	itt	eq
 8028172:	0100      	lsleq	r0, r0, #4
 8028174:	3304      	addeq	r3, #4
 8028176:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802817a:	bf04      	itt	eq
 802817c:	0080      	lsleq	r0, r0, #2
 802817e:	3302      	addeq	r3, #2
 8028180:	2800      	cmp	r0, #0
 8028182:	db05      	blt.n	8028190 <__hi0bits+0x38>
 8028184:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8028188:	f103 0301 	add.w	r3, r3, #1
 802818c:	bf08      	it	eq
 802818e:	2320      	moveq	r3, #32
 8028190:	4618      	mov	r0, r3
 8028192:	4770      	bx	lr
 8028194:	2300      	movs	r3, #0
 8028196:	e7e4      	b.n	8028162 <__hi0bits+0xa>

08028198 <__lo0bits>:
 8028198:	6803      	ldr	r3, [r0, #0]
 802819a:	f013 0207 	ands.w	r2, r3, #7
 802819e:	4601      	mov	r1, r0
 80281a0:	d00b      	beq.n	80281ba <__lo0bits+0x22>
 80281a2:	07da      	lsls	r2, r3, #31
 80281a4:	d423      	bmi.n	80281ee <__lo0bits+0x56>
 80281a6:	0798      	lsls	r0, r3, #30
 80281a8:	bf49      	itett	mi
 80281aa:	085b      	lsrmi	r3, r3, #1
 80281ac:	089b      	lsrpl	r3, r3, #2
 80281ae:	2001      	movmi	r0, #1
 80281b0:	600b      	strmi	r3, [r1, #0]
 80281b2:	bf5c      	itt	pl
 80281b4:	600b      	strpl	r3, [r1, #0]
 80281b6:	2002      	movpl	r0, #2
 80281b8:	4770      	bx	lr
 80281ba:	b298      	uxth	r0, r3
 80281bc:	b9a8      	cbnz	r0, 80281ea <__lo0bits+0x52>
 80281be:	0c1b      	lsrs	r3, r3, #16
 80281c0:	2010      	movs	r0, #16
 80281c2:	b2da      	uxtb	r2, r3
 80281c4:	b90a      	cbnz	r2, 80281ca <__lo0bits+0x32>
 80281c6:	3008      	adds	r0, #8
 80281c8:	0a1b      	lsrs	r3, r3, #8
 80281ca:	071a      	lsls	r2, r3, #28
 80281cc:	bf04      	itt	eq
 80281ce:	091b      	lsreq	r3, r3, #4
 80281d0:	3004      	addeq	r0, #4
 80281d2:	079a      	lsls	r2, r3, #30
 80281d4:	bf04      	itt	eq
 80281d6:	089b      	lsreq	r3, r3, #2
 80281d8:	3002      	addeq	r0, #2
 80281da:	07da      	lsls	r2, r3, #31
 80281dc:	d403      	bmi.n	80281e6 <__lo0bits+0x4e>
 80281de:	085b      	lsrs	r3, r3, #1
 80281e0:	f100 0001 	add.w	r0, r0, #1
 80281e4:	d005      	beq.n	80281f2 <__lo0bits+0x5a>
 80281e6:	600b      	str	r3, [r1, #0]
 80281e8:	4770      	bx	lr
 80281ea:	4610      	mov	r0, r2
 80281ec:	e7e9      	b.n	80281c2 <__lo0bits+0x2a>
 80281ee:	2000      	movs	r0, #0
 80281f0:	4770      	bx	lr
 80281f2:	2020      	movs	r0, #32
 80281f4:	4770      	bx	lr
	...

080281f8 <__i2b>:
 80281f8:	b510      	push	{r4, lr}
 80281fa:	460c      	mov	r4, r1
 80281fc:	2101      	movs	r1, #1
 80281fe:	f7ff feb9 	bl	8027f74 <_Balloc>
 8028202:	4602      	mov	r2, r0
 8028204:	b928      	cbnz	r0, 8028212 <__i2b+0x1a>
 8028206:	4b05      	ldr	r3, [pc, #20]	; (802821c <__i2b+0x24>)
 8028208:	4805      	ldr	r0, [pc, #20]	; (8028220 <__i2b+0x28>)
 802820a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802820e:	f000 fd67 	bl	8028ce0 <__assert_func>
 8028212:	2301      	movs	r3, #1
 8028214:	6144      	str	r4, [r0, #20]
 8028216:	6103      	str	r3, [r0, #16]
 8028218:	bd10      	pop	{r4, pc}
 802821a:	bf00      	nop
 802821c:	08037938 	.word	0x08037938
 8028220:	08037a28 	.word	0x08037a28

08028224 <__multiply>:
 8028224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028228:	4691      	mov	r9, r2
 802822a:	690a      	ldr	r2, [r1, #16]
 802822c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028230:	429a      	cmp	r2, r3
 8028232:	bfb8      	it	lt
 8028234:	460b      	movlt	r3, r1
 8028236:	460c      	mov	r4, r1
 8028238:	bfbc      	itt	lt
 802823a:	464c      	movlt	r4, r9
 802823c:	4699      	movlt	r9, r3
 802823e:	6927      	ldr	r7, [r4, #16]
 8028240:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8028244:	68a3      	ldr	r3, [r4, #8]
 8028246:	6861      	ldr	r1, [r4, #4]
 8028248:	eb07 060a 	add.w	r6, r7, sl
 802824c:	42b3      	cmp	r3, r6
 802824e:	b085      	sub	sp, #20
 8028250:	bfb8      	it	lt
 8028252:	3101      	addlt	r1, #1
 8028254:	f7ff fe8e 	bl	8027f74 <_Balloc>
 8028258:	b930      	cbnz	r0, 8028268 <__multiply+0x44>
 802825a:	4602      	mov	r2, r0
 802825c:	4b44      	ldr	r3, [pc, #272]	; (8028370 <__multiply+0x14c>)
 802825e:	4845      	ldr	r0, [pc, #276]	; (8028374 <__multiply+0x150>)
 8028260:	f240 115d 	movw	r1, #349	; 0x15d
 8028264:	f000 fd3c 	bl	8028ce0 <__assert_func>
 8028268:	f100 0514 	add.w	r5, r0, #20
 802826c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8028270:	462b      	mov	r3, r5
 8028272:	2200      	movs	r2, #0
 8028274:	4543      	cmp	r3, r8
 8028276:	d321      	bcc.n	80282bc <__multiply+0x98>
 8028278:	f104 0314 	add.w	r3, r4, #20
 802827c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8028280:	f109 0314 	add.w	r3, r9, #20
 8028284:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8028288:	9202      	str	r2, [sp, #8]
 802828a:	1b3a      	subs	r2, r7, r4
 802828c:	3a15      	subs	r2, #21
 802828e:	f022 0203 	bic.w	r2, r2, #3
 8028292:	3204      	adds	r2, #4
 8028294:	f104 0115 	add.w	r1, r4, #21
 8028298:	428f      	cmp	r7, r1
 802829a:	bf38      	it	cc
 802829c:	2204      	movcc	r2, #4
 802829e:	9201      	str	r2, [sp, #4]
 80282a0:	9a02      	ldr	r2, [sp, #8]
 80282a2:	9303      	str	r3, [sp, #12]
 80282a4:	429a      	cmp	r2, r3
 80282a6:	d80c      	bhi.n	80282c2 <__multiply+0x9e>
 80282a8:	2e00      	cmp	r6, #0
 80282aa:	dd03      	ble.n	80282b4 <__multiply+0x90>
 80282ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d05a      	beq.n	802836a <__multiply+0x146>
 80282b4:	6106      	str	r6, [r0, #16]
 80282b6:	b005      	add	sp, #20
 80282b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282bc:	f843 2b04 	str.w	r2, [r3], #4
 80282c0:	e7d8      	b.n	8028274 <__multiply+0x50>
 80282c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80282c6:	f1ba 0f00 	cmp.w	sl, #0
 80282ca:	d024      	beq.n	8028316 <__multiply+0xf2>
 80282cc:	f104 0e14 	add.w	lr, r4, #20
 80282d0:	46a9      	mov	r9, r5
 80282d2:	f04f 0c00 	mov.w	ip, #0
 80282d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80282da:	f8d9 1000 	ldr.w	r1, [r9]
 80282de:	fa1f fb82 	uxth.w	fp, r2
 80282e2:	b289      	uxth	r1, r1
 80282e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80282e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80282ec:	f8d9 2000 	ldr.w	r2, [r9]
 80282f0:	4461      	add	r1, ip
 80282f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80282f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80282fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80282fe:	b289      	uxth	r1, r1
 8028300:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8028304:	4577      	cmp	r7, lr
 8028306:	f849 1b04 	str.w	r1, [r9], #4
 802830a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802830e:	d8e2      	bhi.n	80282d6 <__multiply+0xb2>
 8028310:	9a01      	ldr	r2, [sp, #4]
 8028312:	f845 c002 	str.w	ip, [r5, r2]
 8028316:	9a03      	ldr	r2, [sp, #12]
 8028318:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802831c:	3304      	adds	r3, #4
 802831e:	f1b9 0f00 	cmp.w	r9, #0
 8028322:	d020      	beq.n	8028366 <__multiply+0x142>
 8028324:	6829      	ldr	r1, [r5, #0]
 8028326:	f104 0c14 	add.w	ip, r4, #20
 802832a:	46ae      	mov	lr, r5
 802832c:	f04f 0a00 	mov.w	sl, #0
 8028330:	f8bc b000 	ldrh.w	fp, [ip]
 8028334:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028338:	fb09 220b 	mla	r2, r9, fp, r2
 802833c:	4492      	add	sl, r2
 802833e:	b289      	uxth	r1, r1
 8028340:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8028344:	f84e 1b04 	str.w	r1, [lr], #4
 8028348:	f85c 2b04 	ldr.w	r2, [ip], #4
 802834c:	f8be 1000 	ldrh.w	r1, [lr]
 8028350:	0c12      	lsrs	r2, r2, #16
 8028352:	fb09 1102 	mla	r1, r9, r2, r1
 8028356:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802835a:	4567      	cmp	r7, ip
 802835c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8028360:	d8e6      	bhi.n	8028330 <__multiply+0x10c>
 8028362:	9a01      	ldr	r2, [sp, #4]
 8028364:	50a9      	str	r1, [r5, r2]
 8028366:	3504      	adds	r5, #4
 8028368:	e79a      	b.n	80282a0 <__multiply+0x7c>
 802836a:	3e01      	subs	r6, #1
 802836c:	e79c      	b.n	80282a8 <__multiply+0x84>
 802836e:	bf00      	nop
 8028370:	08037938 	.word	0x08037938
 8028374:	08037a28 	.word	0x08037a28

08028378 <__pow5mult>:
 8028378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802837c:	4615      	mov	r5, r2
 802837e:	f012 0203 	ands.w	r2, r2, #3
 8028382:	4606      	mov	r6, r0
 8028384:	460f      	mov	r7, r1
 8028386:	d007      	beq.n	8028398 <__pow5mult+0x20>
 8028388:	4c25      	ldr	r4, [pc, #148]	; (8028420 <__pow5mult+0xa8>)
 802838a:	3a01      	subs	r2, #1
 802838c:	2300      	movs	r3, #0
 802838e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8028392:	f7ff fe51 	bl	8028038 <__multadd>
 8028396:	4607      	mov	r7, r0
 8028398:	10ad      	asrs	r5, r5, #2
 802839a:	d03d      	beq.n	8028418 <__pow5mult+0xa0>
 802839c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802839e:	b97c      	cbnz	r4, 80283c0 <__pow5mult+0x48>
 80283a0:	2010      	movs	r0, #16
 80283a2:	f7fc fc3f 	bl	8024c24 <malloc>
 80283a6:	4602      	mov	r2, r0
 80283a8:	6270      	str	r0, [r6, #36]	; 0x24
 80283aa:	b928      	cbnz	r0, 80283b8 <__pow5mult+0x40>
 80283ac:	4b1d      	ldr	r3, [pc, #116]	; (8028424 <__pow5mult+0xac>)
 80283ae:	481e      	ldr	r0, [pc, #120]	; (8028428 <__pow5mult+0xb0>)
 80283b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80283b4:	f000 fc94 	bl	8028ce0 <__assert_func>
 80283b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80283bc:	6004      	str	r4, [r0, #0]
 80283be:	60c4      	str	r4, [r0, #12]
 80283c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80283c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80283c8:	b94c      	cbnz	r4, 80283de <__pow5mult+0x66>
 80283ca:	f240 2171 	movw	r1, #625	; 0x271
 80283ce:	4630      	mov	r0, r6
 80283d0:	f7ff ff12 	bl	80281f8 <__i2b>
 80283d4:	2300      	movs	r3, #0
 80283d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80283da:	4604      	mov	r4, r0
 80283dc:	6003      	str	r3, [r0, #0]
 80283de:	f04f 0900 	mov.w	r9, #0
 80283e2:	07eb      	lsls	r3, r5, #31
 80283e4:	d50a      	bpl.n	80283fc <__pow5mult+0x84>
 80283e6:	4639      	mov	r1, r7
 80283e8:	4622      	mov	r2, r4
 80283ea:	4630      	mov	r0, r6
 80283ec:	f7ff ff1a 	bl	8028224 <__multiply>
 80283f0:	4639      	mov	r1, r7
 80283f2:	4680      	mov	r8, r0
 80283f4:	4630      	mov	r0, r6
 80283f6:	f7ff fdfd 	bl	8027ff4 <_Bfree>
 80283fa:	4647      	mov	r7, r8
 80283fc:	106d      	asrs	r5, r5, #1
 80283fe:	d00b      	beq.n	8028418 <__pow5mult+0xa0>
 8028400:	6820      	ldr	r0, [r4, #0]
 8028402:	b938      	cbnz	r0, 8028414 <__pow5mult+0x9c>
 8028404:	4622      	mov	r2, r4
 8028406:	4621      	mov	r1, r4
 8028408:	4630      	mov	r0, r6
 802840a:	f7ff ff0b 	bl	8028224 <__multiply>
 802840e:	6020      	str	r0, [r4, #0]
 8028410:	f8c0 9000 	str.w	r9, [r0]
 8028414:	4604      	mov	r4, r0
 8028416:	e7e4      	b.n	80283e2 <__pow5mult+0x6a>
 8028418:	4638      	mov	r0, r7
 802841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802841e:	bf00      	nop
 8028420:	08037b78 	.word	0x08037b78
 8028424:	080378c6 	.word	0x080378c6
 8028428:	08037a28 	.word	0x08037a28

0802842c <__lshift>:
 802842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028430:	460c      	mov	r4, r1
 8028432:	6849      	ldr	r1, [r1, #4]
 8028434:	6923      	ldr	r3, [r4, #16]
 8028436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802843a:	68a3      	ldr	r3, [r4, #8]
 802843c:	4607      	mov	r7, r0
 802843e:	4691      	mov	r9, r2
 8028440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8028444:	f108 0601 	add.w	r6, r8, #1
 8028448:	42b3      	cmp	r3, r6
 802844a:	db0b      	blt.n	8028464 <__lshift+0x38>
 802844c:	4638      	mov	r0, r7
 802844e:	f7ff fd91 	bl	8027f74 <_Balloc>
 8028452:	4605      	mov	r5, r0
 8028454:	b948      	cbnz	r0, 802846a <__lshift+0x3e>
 8028456:	4602      	mov	r2, r0
 8028458:	4b2a      	ldr	r3, [pc, #168]	; (8028504 <__lshift+0xd8>)
 802845a:	482b      	ldr	r0, [pc, #172]	; (8028508 <__lshift+0xdc>)
 802845c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8028460:	f000 fc3e 	bl	8028ce0 <__assert_func>
 8028464:	3101      	adds	r1, #1
 8028466:	005b      	lsls	r3, r3, #1
 8028468:	e7ee      	b.n	8028448 <__lshift+0x1c>
 802846a:	2300      	movs	r3, #0
 802846c:	f100 0114 	add.w	r1, r0, #20
 8028470:	f100 0210 	add.w	r2, r0, #16
 8028474:	4618      	mov	r0, r3
 8028476:	4553      	cmp	r3, sl
 8028478:	db37      	blt.n	80284ea <__lshift+0xbe>
 802847a:	6920      	ldr	r0, [r4, #16]
 802847c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8028480:	f104 0314 	add.w	r3, r4, #20
 8028484:	f019 091f 	ands.w	r9, r9, #31
 8028488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802848c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8028490:	d02f      	beq.n	80284f2 <__lshift+0xc6>
 8028492:	f1c9 0e20 	rsb	lr, r9, #32
 8028496:	468a      	mov	sl, r1
 8028498:	f04f 0c00 	mov.w	ip, #0
 802849c:	681a      	ldr	r2, [r3, #0]
 802849e:	fa02 f209 	lsl.w	r2, r2, r9
 80284a2:	ea42 020c 	orr.w	r2, r2, ip
 80284a6:	f84a 2b04 	str.w	r2, [sl], #4
 80284aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80284ae:	4298      	cmp	r0, r3
 80284b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80284b4:	d8f2      	bhi.n	802849c <__lshift+0x70>
 80284b6:	1b03      	subs	r3, r0, r4
 80284b8:	3b15      	subs	r3, #21
 80284ba:	f023 0303 	bic.w	r3, r3, #3
 80284be:	3304      	adds	r3, #4
 80284c0:	f104 0215 	add.w	r2, r4, #21
 80284c4:	4290      	cmp	r0, r2
 80284c6:	bf38      	it	cc
 80284c8:	2304      	movcc	r3, #4
 80284ca:	f841 c003 	str.w	ip, [r1, r3]
 80284ce:	f1bc 0f00 	cmp.w	ip, #0
 80284d2:	d001      	beq.n	80284d8 <__lshift+0xac>
 80284d4:	f108 0602 	add.w	r6, r8, #2
 80284d8:	3e01      	subs	r6, #1
 80284da:	4638      	mov	r0, r7
 80284dc:	612e      	str	r6, [r5, #16]
 80284de:	4621      	mov	r1, r4
 80284e0:	f7ff fd88 	bl	8027ff4 <_Bfree>
 80284e4:	4628      	mov	r0, r5
 80284e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80284ee:	3301      	adds	r3, #1
 80284f0:	e7c1      	b.n	8028476 <__lshift+0x4a>
 80284f2:	3904      	subs	r1, #4
 80284f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80284f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80284fc:	4298      	cmp	r0, r3
 80284fe:	d8f9      	bhi.n	80284f4 <__lshift+0xc8>
 8028500:	e7ea      	b.n	80284d8 <__lshift+0xac>
 8028502:	bf00      	nop
 8028504:	08037938 	.word	0x08037938
 8028508:	08037a28 	.word	0x08037a28

0802850c <__mcmp>:
 802850c:	b530      	push	{r4, r5, lr}
 802850e:	6902      	ldr	r2, [r0, #16]
 8028510:	690c      	ldr	r4, [r1, #16]
 8028512:	1b12      	subs	r2, r2, r4
 8028514:	d10e      	bne.n	8028534 <__mcmp+0x28>
 8028516:	f100 0314 	add.w	r3, r0, #20
 802851a:	3114      	adds	r1, #20
 802851c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028520:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8028524:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028528:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802852c:	42a5      	cmp	r5, r4
 802852e:	d003      	beq.n	8028538 <__mcmp+0x2c>
 8028530:	d305      	bcc.n	802853e <__mcmp+0x32>
 8028532:	2201      	movs	r2, #1
 8028534:	4610      	mov	r0, r2
 8028536:	bd30      	pop	{r4, r5, pc}
 8028538:	4283      	cmp	r3, r0
 802853a:	d3f3      	bcc.n	8028524 <__mcmp+0x18>
 802853c:	e7fa      	b.n	8028534 <__mcmp+0x28>
 802853e:	f04f 32ff 	mov.w	r2, #4294967295
 8028542:	e7f7      	b.n	8028534 <__mcmp+0x28>

08028544 <__mdiff>:
 8028544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028548:	460c      	mov	r4, r1
 802854a:	4606      	mov	r6, r0
 802854c:	4611      	mov	r1, r2
 802854e:	4620      	mov	r0, r4
 8028550:	4690      	mov	r8, r2
 8028552:	f7ff ffdb 	bl	802850c <__mcmp>
 8028556:	1e05      	subs	r5, r0, #0
 8028558:	d110      	bne.n	802857c <__mdiff+0x38>
 802855a:	4629      	mov	r1, r5
 802855c:	4630      	mov	r0, r6
 802855e:	f7ff fd09 	bl	8027f74 <_Balloc>
 8028562:	b930      	cbnz	r0, 8028572 <__mdiff+0x2e>
 8028564:	4b3a      	ldr	r3, [pc, #232]	; (8028650 <__mdiff+0x10c>)
 8028566:	4602      	mov	r2, r0
 8028568:	f240 2132 	movw	r1, #562	; 0x232
 802856c:	4839      	ldr	r0, [pc, #228]	; (8028654 <__mdiff+0x110>)
 802856e:	f000 fbb7 	bl	8028ce0 <__assert_func>
 8028572:	2301      	movs	r3, #1
 8028574:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8028578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802857c:	bfa4      	itt	ge
 802857e:	4643      	movge	r3, r8
 8028580:	46a0      	movge	r8, r4
 8028582:	4630      	mov	r0, r6
 8028584:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8028588:	bfa6      	itte	ge
 802858a:	461c      	movge	r4, r3
 802858c:	2500      	movge	r5, #0
 802858e:	2501      	movlt	r5, #1
 8028590:	f7ff fcf0 	bl	8027f74 <_Balloc>
 8028594:	b920      	cbnz	r0, 80285a0 <__mdiff+0x5c>
 8028596:	4b2e      	ldr	r3, [pc, #184]	; (8028650 <__mdiff+0x10c>)
 8028598:	4602      	mov	r2, r0
 802859a:	f44f 7110 	mov.w	r1, #576	; 0x240
 802859e:	e7e5      	b.n	802856c <__mdiff+0x28>
 80285a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80285a4:	6926      	ldr	r6, [r4, #16]
 80285a6:	60c5      	str	r5, [r0, #12]
 80285a8:	f104 0914 	add.w	r9, r4, #20
 80285ac:	f108 0514 	add.w	r5, r8, #20
 80285b0:	f100 0e14 	add.w	lr, r0, #20
 80285b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80285b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80285bc:	f108 0210 	add.w	r2, r8, #16
 80285c0:	46f2      	mov	sl, lr
 80285c2:	2100      	movs	r1, #0
 80285c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80285c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80285cc:	fa1f f883 	uxth.w	r8, r3
 80285d0:	fa11 f18b 	uxtah	r1, r1, fp
 80285d4:	0c1b      	lsrs	r3, r3, #16
 80285d6:	eba1 0808 	sub.w	r8, r1, r8
 80285da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80285de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80285e2:	fa1f f888 	uxth.w	r8, r8
 80285e6:	1419      	asrs	r1, r3, #16
 80285e8:	454e      	cmp	r6, r9
 80285ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80285ee:	f84a 3b04 	str.w	r3, [sl], #4
 80285f2:	d8e7      	bhi.n	80285c4 <__mdiff+0x80>
 80285f4:	1b33      	subs	r3, r6, r4
 80285f6:	3b15      	subs	r3, #21
 80285f8:	f023 0303 	bic.w	r3, r3, #3
 80285fc:	3304      	adds	r3, #4
 80285fe:	3415      	adds	r4, #21
 8028600:	42a6      	cmp	r6, r4
 8028602:	bf38      	it	cc
 8028604:	2304      	movcc	r3, #4
 8028606:	441d      	add	r5, r3
 8028608:	4473      	add	r3, lr
 802860a:	469e      	mov	lr, r3
 802860c:	462e      	mov	r6, r5
 802860e:	4566      	cmp	r6, ip
 8028610:	d30e      	bcc.n	8028630 <__mdiff+0xec>
 8028612:	f10c 0203 	add.w	r2, ip, #3
 8028616:	1b52      	subs	r2, r2, r5
 8028618:	f022 0203 	bic.w	r2, r2, #3
 802861c:	3d03      	subs	r5, #3
 802861e:	45ac      	cmp	ip, r5
 8028620:	bf38      	it	cc
 8028622:	2200      	movcc	r2, #0
 8028624:	441a      	add	r2, r3
 8028626:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802862a:	b17b      	cbz	r3, 802864c <__mdiff+0x108>
 802862c:	6107      	str	r7, [r0, #16]
 802862e:	e7a3      	b.n	8028578 <__mdiff+0x34>
 8028630:	f856 8b04 	ldr.w	r8, [r6], #4
 8028634:	fa11 f288 	uxtah	r2, r1, r8
 8028638:	1414      	asrs	r4, r2, #16
 802863a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802863e:	b292      	uxth	r2, r2
 8028640:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8028644:	f84e 2b04 	str.w	r2, [lr], #4
 8028648:	1421      	asrs	r1, r4, #16
 802864a:	e7e0      	b.n	802860e <__mdiff+0xca>
 802864c:	3f01      	subs	r7, #1
 802864e:	e7ea      	b.n	8028626 <__mdiff+0xe2>
 8028650:	08037938 	.word	0x08037938
 8028654:	08037a28 	.word	0x08037a28

08028658 <__ulp>:
 8028658:	b082      	sub	sp, #8
 802865a:	ed8d 0b00 	vstr	d0, [sp]
 802865e:	9b01      	ldr	r3, [sp, #4]
 8028660:	4912      	ldr	r1, [pc, #72]	; (80286ac <__ulp+0x54>)
 8028662:	4019      	ands	r1, r3
 8028664:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8028668:	2900      	cmp	r1, #0
 802866a:	dd05      	ble.n	8028678 <__ulp+0x20>
 802866c:	2200      	movs	r2, #0
 802866e:	460b      	mov	r3, r1
 8028670:	ec43 2b10 	vmov	d0, r2, r3
 8028674:	b002      	add	sp, #8
 8028676:	4770      	bx	lr
 8028678:	4249      	negs	r1, r1
 802867a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 802867e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8028682:	f04f 0200 	mov.w	r2, #0
 8028686:	f04f 0300 	mov.w	r3, #0
 802868a:	da04      	bge.n	8028696 <__ulp+0x3e>
 802868c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8028690:	fa41 f300 	asr.w	r3, r1, r0
 8028694:	e7ec      	b.n	8028670 <__ulp+0x18>
 8028696:	f1a0 0114 	sub.w	r1, r0, #20
 802869a:	291e      	cmp	r1, #30
 802869c:	bfda      	itte	le
 802869e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80286a2:	fa20 f101 	lsrle.w	r1, r0, r1
 80286a6:	2101      	movgt	r1, #1
 80286a8:	460a      	mov	r2, r1
 80286aa:	e7e1      	b.n	8028670 <__ulp+0x18>
 80286ac:	7ff00000 	.word	0x7ff00000

080286b0 <__b2d>:
 80286b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80286b2:	6905      	ldr	r5, [r0, #16]
 80286b4:	f100 0714 	add.w	r7, r0, #20
 80286b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80286bc:	1f2e      	subs	r6, r5, #4
 80286be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80286c2:	4620      	mov	r0, r4
 80286c4:	f7ff fd48 	bl	8028158 <__hi0bits>
 80286c8:	f1c0 0320 	rsb	r3, r0, #32
 80286cc:	280a      	cmp	r0, #10
 80286ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 802874c <__b2d+0x9c>
 80286d2:	600b      	str	r3, [r1, #0]
 80286d4:	dc14      	bgt.n	8028700 <__b2d+0x50>
 80286d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80286da:	fa24 f10e 	lsr.w	r1, r4, lr
 80286de:	42b7      	cmp	r7, r6
 80286e0:	ea41 030c 	orr.w	r3, r1, ip
 80286e4:	bf34      	ite	cc
 80286e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80286ea:	2100      	movcs	r1, #0
 80286ec:	3015      	adds	r0, #21
 80286ee:	fa04 f000 	lsl.w	r0, r4, r0
 80286f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80286f6:	ea40 0201 	orr.w	r2, r0, r1
 80286fa:	ec43 2b10 	vmov	d0, r2, r3
 80286fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028700:	42b7      	cmp	r7, r6
 8028702:	bf3a      	itte	cc
 8028704:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8028708:	f1a5 0608 	subcc.w	r6, r5, #8
 802870c:	2100      	movcs	r1, #0
 802870e:	380b      	subs	r0, #11
 8028710:	d017      	beq.n	8028742 <__b2d+0x92>
 8028712:	f1c0 0c20 	rsb	ip, r0, #32
 8028716:	fa04 f500 	lsl.w	r5, r4, r0
 802871a:	42be      	cmp	r6, r7
 802871c:	fa21 f40c 	lsr.w	r4, r1, ip
 8028720:	ea45 0504 	orr.w	r5, r5, r4
 8028724:	bf8c      	ite	hi
 8028726:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802872a:	2400      	movls	r4, #0
 802872c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8028730:	fa01 f000 	lsl.w	r0, r1, r0
 8028734:	fa24 f40c 	lsr.w	r4, r4, ip
 8028738:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802873c:	ea40 0204 	orr.w	r2, r0, r4
 8028740:	e7db      	b.n	80286fa <__b2d+0x4a>
 8028742:	ea44 030c 	orr.w	r3, r4, ip
 8028746:	460a      	mov	r2, r1
 8028748:	e7d7      	b.n	80286fa <__b2d+0x4a>
 802874a:	bf00      	nop
 802874c:	3ff00000 	.word	0x3ff00000

08028750 <__d2b>:
 8028750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8028754:	4689      	mov	r9, r1
 8028756:	2101      	movs	r1, #1
 8028758:	ec57 6b10 	vmov	r6, r7, d0
 802875c:	4690      	mov	r8, r2
 802875e:	f7ff fc09 	bl	8027f74 <_Balloc>
 8028762:	4604      	mov	r4, r0
 8028764:	b930      	cbnz	r0, 8028774 <__d2b+0x24>
 8028766:	4602      	mov	r2, r0
 8028768:	4b25      	ldr	r3, [pc, #148]	; (8028800 <__d2b+0xb0>)
 802876a:	4826      	ldr	r0, [pc, #152]	; (8028804 <__d2b+0xb4>)
 802876c:	f240 310a 	movw	r1, #778	; 0x30a
 8028770:	f000 fab6 	bl	8028ce0 <__assert_func>
 8028774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8028778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802877c:	bb35      	cbnz	r5, 80287cc <__d2b+0x7c>
 802877e:	2e00      	cmp	r6, #0
 8028780:	9301      	str	r3, [sp, #4]
 8028782:	d028      	beq.n	80287d6 <__d2b+0x86>
 8028784:	4668      	mov	r0, sp
 8028786:	9600      	str	r6, [sp, #0]
 8028788:	f7ff fd06 	bl	8028198 <__lo0bits>
 802878c:	9900      	ldr	r1, [sp, #0]
 802878e:	b300      	cbz	r0, 80287d2 <__d2b+0x82>
 8028790:	9a01      	ldr	r2, [sp, #4]
 8028792:	f1c0 0320 	rsb	r3, r0, #32
 8028796:	fa02 f303 	lsl.w	r3, r2, r3
 802879a:	430b      	orrs	r3, r1
 802879c:	40c2      	lsrs	r2, r0
 802879e:	6163      	str	r3, [r4, #20]
 80287a0:	9201      	str	r2, [sp, #4]
 80287a2:	9b01      	ldr	r3, [sp, #4]
 80287a4:	61a3      	str	r3, [r4, #24]
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	bf14      	ite	ne
 80287aa:	2202      	movne	r2, #2
 80287ac:	2201      	moveq	r2, #1
 80287ae:	6122      	str	r2, [r4, #16]
 80287b0:	b1d5      	cbz	r5, 80287e8 <__d2b+0x98>
 80287b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80287b6:	4405      	add	r5, r0
 80287b8:	f8c9 5000 	str.w	r5, [r9]
 80287bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80287c0:	f8c8 0000 	str.w	r0, [r8]
 80287c4:	4620      	mov	r0, r4
 80287c6:	b003      	add	sp, #12
 80287c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80287cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80287d0:	e7d5      	b.n	802877e <__d2b+0x2e>
 80287d2:	6161      	str	r1, [r4, #20]
 80287d4:	e7e5      	b.n	80287a2 <__d2b+0x52>
 80287d6:	a801      	add	r0, sp, #4
 80287d8:	f7ff fcde 	bl	8028198 <__lo0bits>
 80287dc:	9b01      	ldr	r3, [sp, #4]
 80287de:	6163      	str	r3, [r4, #20]
 80287e0:	2201      	movs	r2, #1
 80287e2:	6122      	str	r2, [r4, #16]
 80287e4:	3020      	adds	r0, #32
 80287e6:	e7e3      	b.n	80287b0 <__d2b+0x60>
 80287e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80287ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80287f0:	f8c9 0000 	str.w	r0, [r9]
 80287f4:	6918      	ldr	r0, [r3, #16]
 80287f6:	f7ff fcaf 	bl	8028158 <__hi0bits>
 80287fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80287fe:	e7df      	b.n	80287c0 <__d2b+0x70>
 8028800:	08037938 	.word	0x08037938
 8028804:	08037a28 	.word	0x08037a28

08028808 <__ratio>:
 8028808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802880c:	4688      	mov	r8, r1
 802880e:	4669      	mov	r1, sp
 8028810:	4681      	mov	r9, r0
 8028812:	f7ff ff4d 	bl	80286b0 <__b2d>
 8028816:	a901      	add	r1, sp, #4
 8028818:	4640      	mov	r0, r8
 802881a:	ec55 4b10 	vmov	r4, r5, d0
 802881e:	f7ff ff47 	bl	80286b0 <__b2d>
 8028822:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8028826:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802882a:	eba3 0c02 	sub.w	ip, r3, r2
 802882e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8028832:	1a9b      	subs	r3, r3, r2
 8028834:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8028838:	ec51 0b10 	vmov	r0, r1, d0
 802883c:	2b00      	cmp	r3, #0
 802883e:	bfd6      	itet	le
 8028840:	460a      	movle	r2, r1
 8028842:	462a      	movgt	r2, r5
 8028844:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8028848:	468b      	mov	fp, r1
 802884a:	462f      	mov	r7, r5
 802884c:	bfd4      	ite	le
 802884e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8028852:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8028856:	4620      	mov	r0, r4
 8028858:	ee10 2a10 	vmov	r2, s0
 802885c:	465b      	mov	r3, fp
 802885e:	4639      	mov	r1, r7
 8028860:	f7e8 fb5c 	bl	8010f1c <__aeabi_ddiv>
 8028864:	ec41 0b10 	vmov	d0, r0, r1
 8028868:	b003      	add	sp, #12
 802886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802886e <__copybits>:
 802886e:	3901      	subs	r1, #1
 8028870:	b570      	push	{r4, r5, r6, lr}
 8028872:	1149      	asrs	r1, r1, #5
 8028874:	6914      	ldr	r4, [r2, #16]
 8028876:	3101      	adds	r1, #1
 8028878:	f102 0314 	add.w	r3, r2, #20
 802887c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8028880:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8028884:	1f05      	subs	r5, r0, #4
 8028886:	42a3      	cmp	r3, r4
 8028888:	d30c      	bcc.n	80288a4 <__copybits+0x36>
 802888a:	1aa3      	subs	r3, r4, r2
 802888c:	3b11      	subs	r3, #17
 802888e:	f023 0303 	bic.w	r3, r3, #3
 8028892:	3211      	adds	r2, #17
 8028894:	42a2      	cmp	r2, r4
 8028896:	bf88      	it	hi
 8028898:	2300      	movhi	r3, #0
 802889a:	4418      	add	r0, r3
 802889c:	2300      	movs	r3, #0
 802889e:	4288      	cmp	r0, r1
 80288a0:	d305      	bcc.n	80288ae <__copybits+0x40>
 80288a2:	bd70      	pop	{r4, r5, r6, pc}
 80288a4:	f853 6b04 	ldr.w	r6, [r3], #4
 80288a8:	f845 6f04 	str.w	r6, [r5, #4]!
 80288ac:	e7eb      	b.n	8028886 <__copybits+0x18>
 80288ae:	f840 3b04 	str.w	r3, [r0], #4
 80288b2:	e7f4      	b.n	802889e <__copybits+0x30>

080288b4 <__any_on>:
 80288b4:	f100 0214 	add.w	r2, r0, #20
 80288b8:	6900      	ldr	r0, [r0, #16]
 80288ba:	114b      	asrs	r3, r1, #5
 80288bc:	4298      	cmp	r0, r3
 80288be:	b510      	push	{r4, lr}
 80288c0:	db11      	blt.n	80288e6 <__any_on+0x32>
 80288c2:	dd0a      	ble.n	80288da <__any_on+0x26>
 80288c4:	f011 011f 	ands.w	r1, r1, #31
 80288c8:	d007      	beq.n	80288da <__any_on+0x26>
 80288ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80288ce:	fa24 f001 	lsr.w	r0, r4, r1
 80288d2:	fa00 f101 	lsl.w	r1, r0, r1
 80288d6:	428c      	cmp	r4, r1
 80288d8:	d10b      	bne.n	80288f2 <__any_on+0x3e>
 80288da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80288de:	4293      	cmp	r3, r2
 80288e0:	d803      	bhi.n	80288ea <__any_on+0x36>
 80288e2:	2000      	movs	r0, #0
 80288e4:	bd10      	pop	{r4, pc}
 80288e6:	4603      	mov	r3, r0
 80288e8:	e7f7      	b.n	80288da <__any_on+0x26>
 80288ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80288ee:	2900      	cmp	r1, #0
 80288f0:	d0f5      	beq.n	80288de <__any_on+0x2a>
 80288f2:	2001      	movs	r0, #1
 80288f4:	e7f6      	b.n	80288e4 <__any_on+0x30>

080288f6 <_calloc_r>:
 80288f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80288f8:	fba1 2402 	umull	r2, r4, r1, r2
 80288fc:	b94c      	cbnz	r4, 8028912 <_calloc_r+0x1c>
 80288fe:	4611      	mov	r1, r2
 8028900:	9201      	str	r2, [sp, #4]
 8028902:	f7fc fa21 	bl	8024d48 <_malloc_r>
 8028906:	9a01      	ldr	r2, [sp, #4]
 8028908:	4605      	mov	r5, r0
 802890a:	b930      	cbnz	r0, 802891a <_calloc_r+0x24>
 802890c:	4628      	mov	r0, r5
 802890e:	b003      	add	sp, #12
 8028910:	bd30      	pop	{r4, r5, pc}
 8028912:	220c      	movs	r2, #12
 8028914:	6002      	str	r2, [r0, #0]
 8028916:	2500      	movs	r5, #0
 8028918:	e7f8      	b.n	802890c <_calloc_r+0x16>
 802891a:	4621      	mov	r1, r4
 802891c:	f7fc f9a0 	bl	8024c60 <memset>
 8028920:	e7f4      	b.n	802890c <_calloc_r+0x16>

08028922 <__ssputs_r>:
 8028922:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028926:	688e      	ldr	r6, [r1, #8]
 8028928:	429e      	cmp	r6, r3
 802892a:	4682      	mov	sl, r0
 802892c:	460c      	mov	r4, r1
 802892e:	4690      	mov	r8, r2
 8028930:	461f      	mov	r7, r3
 8028932:	d838      	bhi.n	80289a6 <__ssputs_r+0x84>
 8028934:	898a      	ldrh	r2, [r1, #12]
 8028936:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802893a:	d032      	beq.n	80289a2 <__ssputs_r+0x80>
 802893c:	6825      	ldr	r5, [r4, #0]
 802893e:	6909      	ldr	r1, [r1, #16]
 8028940:	eba5 0901 	sub.w	r9, r5, r1
 8028944:	6965      	ldr	r5, [r4, #20]
 8028946:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802894a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802894e:	3301      	adds	r3, #1
 8028950:	444b      	add	r3, r9
 8028952:	106d      	asrs	r5, r5, #1
 8028954:	429d      	cmp	r5, r3
 8028956:	bf38      	it	cc
 8028958:	461d      	movcc	r5, r3
 802895a:	0553      	lsls	r3, r2, #21
 802895c:	d531      	bpl.n	80289c2 <__ssputs_r+0xa0>
 802895e:	4629      	mov	r1, r5
 8028960:	f7fc f9f2 	bl	8024d48 <_malloc_r>
 8028964:	4606      	mov	r6, r0
 8028966:	b950      	cbnz	r0, 802897e <__ssputs_r+0x5c>
 8028968:	230c      	movs	r3, #12
 802896a:	f8ca 3000 	str.w	r3, [sl]
 802896e:	89a3      	ldrh	r3, [r4, #12]
 8028970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028974:	81a3      	strh	r3, [r4, #12]
 8028976:	f04f 30ff 	mov.w	r0, #4294967295
 802897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802897e:	6921      	ldr	r1, [r4, #16]
 8028980:	464a      	mov	r2, r9
 8028982:	f7fc f95f 	bl	8024c44 <memcpy>
 8028986:	89a3      	ldrh	r3, [r4, #12]
 8028988:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802898c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028990:	81a3      	strh	r3, [r4, #12]
 8028992:	6126      	str	r6, [r4, #16]
 8028994:	6165      	str	r5, [r4, #20]
 8028996:	444e      	add	r6, r9
 8028998:	eba5 0509 	sub.w	r5, r5, r9
 802899c:	6026      	str	r6, [r4, #0]
 802899e:	60a5      	str	r5, [r4, #8]
 80289a0:	463e      	mov	r6, r7
 80289a2:	42be      	cmp	r6, r7
 80289a4:	d900      	bls.n	80289a8 <__ssputs_r+0x86>
 80289a6:	463e      	mov	r6, r7
 80289a8:	6820      	ldr	r0, [r4, #0]
 80289aa:	4632      	mov	r2, r6
 80289ac:	4641      	mov	r1, r8
 80289ae:	f000 fa0b 	bl	8028dc8 <memmove>
 80289b2:	68a3      	ldr	r3, [r4, #8]
 80289b4:	1b9b      	subs	r3, r3, r6
 80289b6:	60a3      	str	r3, [r4, #8]
 80289b8:	6823      	ldr	r3, [r4, #0]
 80289ba:	4433      	add	r3, r6
 80289bc:	6023      	str	r3, [r4, #0]
 80289be:	2000      	movs	r0, #0
 80289c0:	e7db      	b.n	802897a <__ssputs_r+0x58>
 80289c2:	462a      	mov	r2, r5
 80289c4:	f000 fa1a 	bl	8028dfc <_realloc_r>
 80289c8:	4606      	mov	r6, r0
 80289ca:	2800      	cmp	r0, #0
 80289cc:	d1e1      	bne.n	8028992 <__ssputs_r+0x70>
 80289ce:	6921      	ldr	r1, [r4, #16]
 80289d0:	4650      	mov	r0, sl
 80289d2:	f7fc f94d 	bl	8024c70 <_free_r>
 80289d6:	e7c7      	b.n	8028968 <__ssputs_r+0x46>

080289d8 <_svfiprintf_r>:
 80289d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289dc:	4698      	mov	r8, r3
 80289de:	898b      	ldrh	r3, [r1, #12]
 80289e0:	061b      	lsls	r3, r3, #24
 80289e2:	b09d      	sub	sp, #116	; 0x74
 80289e4:	4607      	mov	r7, r0
 80289e6:	460d      	mov	r5, r1
 80289e8:	4614      	mov	r4, r2
 80289ea:	d50e      	bpl.n	8028a0a <_svfiprintf_r+0x32>
 80289ec:	690b      	ldr	r3, [r1, #16]
 80289ee:	b963      	cbnz	r3, 8028a0a <_svfiprintf_r+0x32>
 80289f0:	2140      	movs	r1, #64	; 0x40
 80289f2:	f7fc f9a9 	bl	8024d48 <_malloc_r>
 80289f6:	6028      	str	r0, [r5, #0]
 80289f8:	6128      	str	r0, [r5, #16]
 80289fa:	b920      	cbnz	r0, 8028a06 <_svfiprintf_r+0x2e>
 80289fc:	230c      	movs	r3, #12
 80289fe:	603b      	str	r3, [r7, #0]
 8028a00:	f04f 30ff 	mov.w	r0, #4294967295
 8028a04:	e0d1      	b.n	8028baa <_svfiprintf_r+0x1d2>
 8028a06:	2340      	movs	r3, #64	; 0x40
 8028a08:	616b      	str	r3, [r5, #20]
 8028a0a:	2300      	movs	r3, #0
 8028a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8028a0e:	2320      	movs	r3, #32
 8028a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8028a18:	2330      	movs	r3, #48	; 0x30
 8028a1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028bc4 <_svfiprintf_r+0x1ec>
 8028a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028a22:	f04f 0901 	mov.w	r9, #1
 8028a26:	4623      	mov	r3, r4
 8028a28:	469a      	mov	sl, r3
 8028a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028a2e:	b10a      	cbz	r2, 8028a34 <_svfiprintf_r+0x5c>
 8028a30:	2a25      	cmp	r2, #37	; 0x25
 8028a32:	d1f9      	bne.n	8028a28 <_svfiprintf_r+0x50>
 8028a34:	ebba 0b04 	subs.w	fp, sl, r4
 8028a38:	d00b      	beq.n	8028a52 <_svfiprintf_r+0x7a>
 8028a3a:	465b      	mov	r3, fp
 8028a3c:	4622      	mov	r2, r4
 8028a3e:	4629      	mov	r1, r5
 8028a40:	4638      	mov	r0, r7
 8028a42:	f7ff ff6e 	bl	8028922 <__ssputs_r>
 8028a46:	3001      	adds	r0, #1
 8028a48:	f000 80aa 	beq.w	8028ba0 <_svfiprintf_r+0x1c8>
 8028a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028a4e:	445a      	add	r2, fp
 8028a50:	9209      	str	r2, [sp, #36]	; 0x24
 8028a52:	f89a 3000 	ldrb.w	r3, [sl]
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	f000 80a2 	beq.w	8028ba0 <_svfiprintf_r+0x1c8>
 8028a5c:	2300      	movs	r3, #0
 8028a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8028a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028a66:	f10a 0a01 	add.w	sl, sl, #1
 8028a6a:	9304      	str	r3, [sp, #16]
 8028a6c:	9307      	str	r3, [sp, #28]
 8028a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028a72:	931a      	str	r3, [sp, #104]	; 0x68
 8028a74:	4654      	mov	r4, sl
 8028a76:	2205      	movs	r2, #5
 8028a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028a7c:	4851      	ldr	r0, [pc, #324]	; (8028bc4 <_svfiprintf_r+0x1ec>)
 8028a7e:	f7e7 ff17 	bl	80108b0 <memchr>
 8028a82:	9a04      	ldr	r2, [sp, #16]
 8028a84:	b9d8      	cbnz	r0, 8028abe <_svfiprintf_r+0xe6>
 8028a86:	06d0      	lsls	r0, r2, #27
 8028a88:	bf44      	itt	mi
 8028a8a:	2320      	movmi	r3, #32
 8028a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028a90:	0711      	lsls	r1, r2, #28
 8028a92:	bf44      	itt	mi
 8028a94:	232b      	movmi	r3, #43	; 0x2b
 8028a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8028a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8028aa0:	d015      	beq.n	8028ace <_svfiprintf_r+0xf6>
 8028aa2:	9a07      	ldr	r2, [sp, #28]
 8028aa4:	4654      	mov	r4, sl
 8028aa6:	2000      	movs	r0, #0
 8028aa8:	f04f 0c0a 	mov.w	ip, #10
 8028aac:	4621      	mov	r1, r4
 8028aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028ab2:	3b30      	subs	r3, #48	; 0x30
 8028ab4:	2b09      	cmp	r3, #9
 8028ab6:	d94e      	bls.n	8028b56 <_svfiprintf_r+0x17e>
 8028ab8:	b1b0      	cbz	r0, 8028ae8 <_svfiprintf_r+0x110>
 8028aba:	9207      	str	r2, [sp, #28]
 8028abc:	e014      	b.n	8028ae8 <_svfiprintf_r+0x110>
 8028abe:	eba0 0308 	sub.w	r3, r0, r8
 8028ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8028ac6:	4313      	orrs	r3, r2
 8028ac8:	9304      	str	r3, [sp, #16]
 8028aca:	46a2      	mov	sl, r4
 8028acc:	e7d2      	b.n	8028a74 <_svfiprintf_r+0x9c>
 8028ace:	9b03      	ldr	r3, [sp, #12]
 8028ad0:	1d19      	adds	r1, r3, #4
 8028ad2:	681b      	ldr	r3, [r3, #0]
 8028ad4:	9103      	str	r1, [sp, #12]
 8028ad6:	2b00      	cmp	r3, #0
 8028ad8:	bfbb      	ittet	lt
 8028ada:	425b      	neglt	r3, r3
 8028adc:	f042 0202 	orrlt.w	r2, r2, #2
 8028ae0:	9307      	strge	r3, [sp, #28]
 8028ae2:	9307      	strlt	r3, [sp, #28]
 8028ae4:	bfb8      	it	lt
 8028ae6:	9204      	strlt	r2, [sp, #16]
 8028ae8:	7823      	ldrb	r3, [r4, #0]
 8028aea:	2b2e      	cmp	r3, #46	; 0x2e
 8028aec:	d10c      	bne.n	8028b08 <_svfiprintf_r+0x130>
 8028aee:	7863      	ldrb	r3, [r4, #1]
 8028af0:	2b2a      	cmp	r3, #42	; 0x2a
 8028af2:	d135      	bne.n	8028b60 <_svfiprintf_r+0x188>
 8028af4:	9b03      	ldr	r3, [sp, #12]
 8028af6:	1d1a      	adds	r2, r3, #4
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	9203      	str	r2, [sp, #12]
 8028afc:	2b00      	cmp	r3, #0
 8028afe:	bfb8      	it	lt
 8028b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8028b04:	3402      	adds	r4, #2
 8028b06:	9305      	str	r3, [sp, #20]
 8028b08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028bd4 <_svfiprintf_r+0x1fc>
 8028b0c:	7821      	ldrb	r1, [r4, #0]
 8028b0e:	2203      	movs	r2, #3
 8028b10:	4650      	mov	r0, sl
 8028b12:	f7e7 fecd 	bl	80108b0 <memchr>
 8028b16:	b140      	cbz	r0, 8028b2a <_svfiprintf_r+0x152>
 8028b18:	2340      	movs	r3, #64	; 0x40
 8028b1a:	eba0 000a 	sub.w	r0, r0, sl
 8028b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8028b22:	9b04      	ldr	r3, [sp, #16]
 8028b24:	4303      	orrs	r3, r0
 8028b26:	3401      	adds	r4, #1
 8028b28:	9304      	str	r3, [sp, #16]
 8028b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028b2e:	4826      	ldr	r0, [pc, #152]	; (8028bc8 <_svfiprintf_r+0x1f0>)
 8028b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028b34:	2206      	movs	r2, #6
 8028b36:	f7e7 febb 	bl	80108b0 <memchr>
 8028b3a:	2800      	cmp	r0, #0
 8028b3c:	d038      	beq.n	8028bb0 <_svfiprintf_r+0x1d8>
 8028b3e:	4b23      	ldr	r3, [pc, #140]	; (8028bcc <_svfiprintf_r+0x1f4>)
 8028b40:	bb1b      	cbnz	r3, 8028b8a <_svfiprintf_r+0x1b2>
 8028b42:	9b03      	ldr	r3, [sp, #12]
 8028b44:	3307      	adds	r3, #7
 8028b46:	f023 0307 	bic.w	r3, r3, #7
 8028b4a:	3308      	adds	r3, #8
 8028b4c:	9303      	str	r3, [sp, #12]
 8028b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b50:	4433      	add	r3, r6
 8028b52:	9309      	str	r3, [sp, #36]	; 0x24
 8028b54:	e767      	b.n	8028a26 <_svfiprintf_r+0x4e>
 8028b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8028b5a:	460c      	mov	r4, r1
 8028b5c:	2001      	movs	r0, #1
 8028b5e:	e7a5      	b.n	8028aac <_svfiprintf_r+0xd4>
 8028b60:	2300      	movs	r3, #0
 8028b62:	3401      	adds	r4, #1
 8028b64:	9305      	str	r3, [sp, #20]
 8028b66:	4619      	mov	r1, r3
 8028b68:	f04f 0c0a 	mov.w	ip, #10
 8028b6c:	4620      	mov	r0, r4
 8028b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028b72:	3a30      	subs	r2, #48	; 0x30
 8028b74:	2a09      	cmp	r2, #9
 8028b76:	d903      	bls.n	8028b80 <_svfiprintf_r+0x1a8>
 8028b78:	2b00      	cmp	r3, #0
 8028b7a:	d0c5      	beq.n	8028b08 <_svfiprintf_r+0x130>
 8028b7c:	9105      	str	r1, [sp, #20]
 8028b7e:	e7c3      	b.n	8028b08 <_svfiprintf_r+0x130>
 8028b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8028b84:	4604      	mov	r4, r0
 8028b86:	2301      	movs	r3, #1
 8028b88:	e7f0      	b.n	8028b6c <_svfiprintf_r+0x194>
 8028b8a:	ab03      	add	r3, sp, #12
 8028b8c:	9300      	str	r3, [sp, #0]
 8028b8e:	462a      	mov	r2, r5
 8028b90:	4b0f      	ldr	r3, [pc, #60]	; (8028bd0 <_svfiprintf_r+0x1f8>)
 8028b92:	a904      	add	r1, sp, #16
 8028b94:	4638      	mov	r0, r7
 8028b96:	f7fc f9eb 	bl	8024f70 <_printf_float>
 8028b9a:	1c42      	adds	r2, r0, #1
 8028b9c:	4606      	mov	r6, r0
 8028b9e:	d1d6      	bne.n	8028b4e <_svfiprintf_r+0x176>
 8028ba0:	89ab      	ldrh	r3, [r5, #12]
 8028ba2:	065b      	lsls	r3, r3, #25
 8028ba4:	f53f af2c 	bmi.w	8028a00 <_svfiprintf_r+0x28>
 8028ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028baa:	b01d      	add	sp, #116	; 0x74
 8028bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028bb0:	ab03      	add	r3, sp, #12
 8028bb2:	9300      	str	r3, [sp, #0]
 8028bb4:	462a      	mov	r2, r5
 8028bb6:	4b06      	ldr	r3, [pc, #24]	; (8028bd0 <_svfiprintf_r+0x1f8>)
 8028bb8:	a904      	add	r1, sp, #16
 8028bba:	4638      	mov	r0, r7
 8028bbc:	f7fc fc7c 	bl	80254b8 <_printf_i>
 8028bc0:	e7eb      	b.n	8028b9a <_svfiprintf_r+0x1c2>
 8028bc2:	bf00      	nop
 8028bc4:	08037b84 	.word	0x08037b84
 8028bc8:	08037b8e 	.word	0x08037b8e
 8028bcc:	08024f71 	.word	0x08024f71
 8028bd0:	08028923 	.word	0x08028923
 8028bd4:	08037b8a 	.word	0x08037b8a

08028bd8 <nan>:
 8028bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028be0 <nan+0x8>
 8028bdc:	4770      	bx	lr
 8028bde:	bf00      	nop
 8028be0:	00000000 	.word	0x00000000
 8028be4:	7ff80000 	.word	0x7ff80000

08028be8 <nanf>:
 8028be8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028bf0 <nanf+0x8>
 8028bec:	4770      	bx	lr
 8028bee:	bf00      	nop
 8028bf0:	7fc00000 	.word	0x7fc00000

08028bf4 <__sread>:
 8028bf4:	b510      	push	{r4, lr}
 8028bf6:	460c      	mov	r4, r1
 8028bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028bfc:	f000 fa86 	bl	802910c <_read_r>
 8028c00:	2800      	cmp	r0, #0
 8028c02:	bfab      	itete	ge
 8028c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8028c06:	89a3      	ldrhlt	r3, [r4, #12]
 8028c08:	181b      	addge	r3, r3, r0
 8028c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8028c0e:	bfac      	ite	ge
 8028c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8028c12:	81a3      	strhlt	r3, [r4, #12]
 8028c14:	bd10      	pop	{r4, pc}

08028c16 <__swrite>:
 8028c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028c1a:	461f      	mov	r7, r3
 8028c1c:	898b      	ldrh	r3, [r1, #12]
 8028c1e:	05db      	lsls	r3, r3, #23
 8028c20:	4605      	mov	r5, r0
 8028c22:	460c      	mov	r4, r1
 8028c24:	4616      	mov	r6, r2
 8028c26:	d505      	bpl.n	8028c34 <__swrite+0x1e>
 8028c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c2c:	2302      	movs	r3, #2
 8028c2e:	2200      	movs	r2, #0
 8028c30:	f000 f8b8 	bl	8028da4 <_lseek_r>
 8028c34:	89a3      	ldrh	r3, [r4, #12]
 8028c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028c3e:	81a3      	strh	r3, [r4, #12]
 8028c40:	4632      	mov	r2, r6
 8028c42:	463b      	mov	r3, r7
 8028c44:	4628      	mov	r0, r5
 8028c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028c4a:	f000 b837 	b.w	8028cbc <_write_r>

08028c4e <__sseek>:
 8028c4e:	b510      	push	{r4, lr}
 8028c50:	460c      	mov	r4, r1
 8028c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c56:	f000 f8a5 	bl	8028da4 <_lseek_r>
 8028c5a:	1c43      	adds	r3, r0, #1
 8028c5c:	89a3      	ldrh	r3, [r4, #12]
 8028c5e:	bf15      	itete	ne
 8028c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8028c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8028c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8028c6a:	81a3      	strheq	r3, [r4, #12]
 8028c6c:	bf18      	it	ne
 8028c6e:	81a3      	strhne	r3, [r4, #12]
 8028c70:	bd10      	pop	{r4, pc}

08028c72 <__sclose>:
 8028c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028c76:	f000 b851 	b.w	8028d1c <_close_r>

08028c7a <strncmp>:
 8028c7a:	b510      	push	{r4, lr}
 8028c7c:	b17a      	cbz	r2, 8028c9e <strncmp+0x24>
 8028c7e:	4603      	mov	r3, r0
 8028c80:	3901      	subs	r1, #1
 8028c82:	1884      	adds	r4, r0, r2
 8028c84:	f813 0b01 	ldrb.w	r0, [r3], #1
 8028c88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8028c8c:	4290      	cmp	r0, r2
 8028c8e:	d101      	bne.n	8028c94 <strncmp+0x1a>
 8028c90:	42a3      	cmp	r3, r4
 8028c92:	d101      	bne.n	8028c98 <strncmp+0x1e>
 8028c94:	1a80      	subs	r0, r0, r2
 8028c96:	bd10      	pop	{r4, pc}
 8028c98:	2800      	cmp	r0, #0
 8028c9a:	d1f3      	bne.n	8028c84 <strncmp+0xa>
 8028c9c:	e7fa      	b.n	8028c94 <strncmp+0x1a>
 8028c9e:	4610      	mov	r0, r2
 8028ca0:	e7f9      	b.n	8028c96 <strncmp+0x1c>

08028ca2 <__ascii_wctomb>:
 8028ca2:	b149      	cbz	r1, 8028cb8 <__ascii_wctomb+0x16>
 8028ca4:	2aff      	cmp	r2, #255	; 0xff
 8028ca6:	bf85      	ittet	hi
 8028ca8:	238a      	movhi	r3, #138	; 0x8a
 8028caa:	6003      	strhi	r3, [r0, #0]
 8028cac:	700a      	strbls	r2, [r1, #0]
 8028cae:	f04f 30ff 	movhi.w	r0, #4294967295
 8028cb2:	bf98      	it	ls
 8028cb4:	2001      	movls	r0, #1
 8028cb6:	4770      	bx	lr
 8028cb8:	4608      	mov	r0, r1
 8028cba:	4770      	bx	lr

08028cbc <_write_r>:
 8028cbc:	b538      	push	{r3, r4, r5, lr}
 8028cbe:	4d07      	ldr	r5, [pc, #28]	; (8028cdc <_write_r+0x20>)
 8028cc0:	4604      	mov	r4, r0
 8028cc2:	4608      	mov	r0, r1
 8028cc4:	4611      	mov	r1, r2
 8028cc6:	2200      	movs	r2, #0
 8028cc8:	602a      	str	r2, [r5, #0]
 8028cca:	461a      	mov	r2, r3
 8028ccc:	f7e9 fe41 	bl	8012952 <_write>
 8028cd0:	1c43      	adds	r3, r0, #1
 8028cd2:	d102      	bne.n	8028cda <_write_r+0x1e>
 8028cd4:	682b      	ldr	r3, [r5, #0]
 8028cd6:	b103      	cbz	r3, 8028cda <_write_r+0x1e>
 8028cd8:	6023      	str	r3, [r4, #0]
 8028cda:	bd38      	pop	{r3, r4, r5, pc}
 8028cdc:	2000b3b0 	.word	0x2000b3b0

08028ce0 <__assert_func>:
 8028ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028ce2:	4614      	mov	r4, r2
 8028ce4:	461a      	mov	r2, r3
 8028ce6:	4b09      	ldr	r3, [pc, #36]	; (8028d0c <__assert_func+0x2c>)
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	4605      	mov	r5, r0
 8028cec:	68d8      	ldr	r0, [r3, #12]
 8028cee:	b14c      	cbz	r4, 8028d04 <__assert_func+0x24>
 8028cf0:	4b07      	ldr	r3, [pc, #28]	; (8028d10 <__assert_func+0x30>)
 8028cf2:	9100      	str	r1, [sp, #0]
 8028cf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028cf8:	4906      	ldr	r1, [pc, #24]	; (8028d14 <__assert_func+0x34>)
 8028cfa:	462b      	mov	r3, r5
 8028cfc:	f000 f81e 	bl	8028d3c <fiprintf>
 8028d00:	f000 fa16 	bl	8029130 <abort>
 8028d04:	4b04      	ldr	r3, [pc, #16]	; (8028d18 <__assert_func+0x38>)
 8028d06:	461c      	mov	r4, r3
 8028d08:	e7f3      	b.n	8028cf2 <__assert_func+0x12>
 8028d0a:	bf00      	nop
 8028d0c:	200000e0 	.word	0x200000e0
 8028d10:	08037b95 	.word	0x08037b95
 8028d14:	08037ba2 	.word	0x08037ba2
 8028d18:	08037bd0 	.word	0x08037bd0

08028d1c <_close_r>:
 8028d1c:	b538      	push	{r3, r4, r5, lr}
 8028d1e:	4d06      	ldr	r5, [pc, #24]	; (8028d38 <_close_r+0x1c>)
 8028d20:	2300      	movs	r3, #0
 8028d22:	4604      	mov	r4, r0
 8028d24:	4608      	mov	r0, r1
 8028d26:	602b      	str	r3, [r5, #0]
 8028d28:	f7e9 fe2f 	bl	801298a <_close>
 8028d2c:	1c43      	adds	r3, r0, #1
 8028d2e:	d102      	bne.n	8028d36 <_close_r+0x1a>
 8028d30:	682b      	ldr	r3, [r5, #0]
 8028d32:	b103      	cbz	r3, 8028d36 <_close_r+0x1a>
 8028d34:	6023      	str	r3, [r4, #0]
 8028d36:	bd38      	pop	{r3, r4, r5, pc}
 8028d38:	2000b3b0 	.word	0x2000b3b0

08028d3c <fiprintf>:
 8028d3c:	b40e      	push	{r1, r2, r3}
 8028d3e:	b503      	push	{r0, r1, lr}
 8028d40:	4601      	mov	r1, r0
 8028d42:	ab03      	add	r3, sp, #12
 8028d44:	4805      	ldr	r0, [pc, #20]	; (8028d5c <fiprintf+0x20>)
 8028d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8028d4a:	6800      	ldr	r0, [r0, #0]
 8028d4c:	9301      	str	r3, [sp, #4]
 8028d4e:	f000 f8ad 	bl	8028eac <_vfiprintf_r>
 8028d52:	b002      	add	sp, #8
 8028d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8028d58:	b003      	add	sp, #12
 8028d5a:	4770      	bx	lr
 8028d5c:	200000e0 	.word	0x200000e0

08028d60 <_fstat_r>:
 8028d60:	b538      	push	{r3, r4, r5, lr}
 8028d62:	4d07      	ldr	r5, [pc, #28]	; (8028d80 <_fstat_r+0x20>)
 8028d64:	2300      	movs	r3, #0
 8028d66:	4604      	mov	r4, r0
 8028d68:	4608      	mov	r0, r1
 8028d6a:	4611      	mov	r1, r2
 8028d6c:	602b      	str	r3, [r5, #0]
 8028d6e:	f7e9 fe18 	bl	80129a2 <_fstat>
 8028d72:	1c43      	adds	r3, r0, #1
 8028d74:	d102      	bne.n	8028d7c <_fstat_r+0x1c>
 8028d76:	682b      	ldr	r3, [r5, #0]
 8028d78:	b103      	cbz	r3, 8028d7c <_fstat_r+0x1c>
 8028d7a:	6023      	str	r3, [r4, #0]
 8028d7c:	bd38      	pop	{r3, r4, r5, pc}
 8028d7e:	bf00      	nop
 8028d80:	2000b3b0 	.word	0x2000b3b0

08028d84 <_isatty_r>:
 8028d84:	b538      	push	{r3, r4, r5, lr}
 8028d86:	4d06      	ldr	r5, [pc, #24]	; (8028da0 <_isatty_r+0x1c>)
 8028d88:	2300      	movs	r3, #0
 8028d8a:	4604      	mov	r4, r0
 8028d8c:	4608      	mov	r0, r1
 8028d8e:	602b      	str	r3, [r5, #0]
 8028d90:	f7e9 fe17 	bl	80129c2 <_isatty>
 8028d94:	1c43      	adds	r3, r0, #1
 8028d96:	d102      	bne.n	8028d9e <_isatty_r+0x1a>
 8028d98:	682b      	ldr	r3, [r5, #0]
 8028d9a:	b103      	cbz	r3, 8028d9e <_isatty_r+0x1a>
 8028d9c:	6023      	str	r3, [r4, #0]
 8028d9e:	bd38      	pop	{r3, r4, r5, pc}
 8028da0:	2000b3b0 	.word	0x2000b3b0

08028da4 <_lseek_r>:
 8028da4:	b538      	push	{r3, r4, r5, lr}
 8028da6:	4d07      	ldr	r5, [pc, #28]	; (8028dc4 <_lseek_r+0x20>)
 8028da8:	4604      	mov	r4, r0
 8028daa:	4608      	mov	r0, r1
 8028dac:	4611      	mov	r1, r2
 8028dae:	2200      	movs	r2, #0
 8028db0:	602a      	str	r2, [r5, #0]
 8028db2:	461a      	mov	r2, r3
 8028db4:	f7e9 fe10 	bl	80129d8 <_lseek>
 8028db8:	1c43      	adds	r3, r0, #1
 8028dba:	d102      	bne.n	8028dc2 <_lseek_r+0x1e>
 8028dbc:	682b      	ldr	r3, [r5, #0]
 8028dbe:	b103      	cbz	r3, 8028dc2 <_lseek_r+0x1e>
 8028dc0:	6023      	str	r3, [r4, #0]
 8028dc2:	bd38      	pop	{r3, r4, r5, pc}
 8028dc4:	2000b3b0 	.word	0x2000b3b0

08028dc8 <memmove>:
 8028dc8:	4288      	cmp	r0, r1
 8028dca:	b510      	push	{r4, lr}
 8028dcc:	eb01 0402 	add.w	r4, r1, r2
 8028dd0:	d902      	bls.n	8028dd8 <memmove+0x10>
 8028dd2:	4284      	cmp	r4, r0
 8028dd4:	4623      	mov	r3, r4
 8028dd6:	d807      	bhi.n	8028de8 <memmove+0x20>
 8028dd8:	1e43      	subs	r3, r0, #1
 8028dda:	42a1      	cmp	r1, r4
 8028ddc:	d008      	beq.n	8028df0 <memmove+0x28>
 8028dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028de6:	e7f8      	b.n	8028dda <memmove+0x12>
 8028de8:	4402      	add	r2, r0
 8028dea:	4601      	mov	r1, r0
 8028dec:	428a      	cmp	r2, r1
 8028dee:	d100      	bne.n	8028df2 <memmove+0x2a>
 8028df0:	bd10      	pop	{r4, pc}
 8028df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8028df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8028dfa:	e7f7      	b.n	8028dec <memmove+0x24>

08028dfc <_realloc_r>:
 8028dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e00:	4680      	mov	r8, r0
 8028e02:	4614      	mov	r4, r2
 8028e04:	460e      	mov	r6, r1
 8028e06:	b921      	cbnz	r1, 8028e12 <_realloc_r+0x16>
 8028e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e0c:	4611      	mov	r1, r2
 8028e0e:	f7fb bf9b 	b.w	8024d48 <_malloc_r>
 8028e12:	b92a      	cbnz	r2, 8028e20 <_realloc_r+0x24>
 8028e14:	f7fb ff2c 	bl	8024c70 <_free_r>
 8028e18:	4625      	mov	r5, r4
 8028e1a:	4628      	mov	r0, r5
 8028e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e20:	f000 f98d 	bl	802913e <_malloc_usable_size_r>
 8028e24:	4284      	cmp	r4, r0
 8028e26:	4607      	mov	r7, r0
 8028e28:	d802      	bhi.n	8028e30 <_realloc_r+0x34>
 8028e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028e2e:	d812      	bhi.n	8028e56 <_realloc_r+0x5a>
 8028e30:	4621      	mov	r1, r4
 8028e32:	4640      	mov	r0, r8
 8028e34:	f7fb ff88 	bl	8024d48 <_malloc_r>
 8028e38:	4605      	mov	r5, r0
 8028e3a:	2800      	cmp	r0, #0
 8028e3c:	d0ed      	beq.n	8028e1a <_realloc_r+0x1e>
 8028e3e:	42bc      	cmp	r4, r7
 8028e40:	4622      	mov	r2, r4
 8028e42:	4631      	mov	r1, r6
 8028e44:	bf28      	it	cs
 8028e46:	463a      	movcs	r2, r7
 8028e48:	f7fb fefc 	bl	8024c44 <memcpy>
 8028e4c:	4631      	mov	r1, r6
 8028e4e:	4640      	mov	r0, r8
 8028e50:	f7fb ff0e 	bl	8024c70 <_free_r>
 8028e54:	e7e1      	b.n	8028e1a <_realloc_r+0x1e>
 8028e56:	4635      	mov	r5, r6
 8028e58:	e7df      	b.n	8028e1a <_realloc_r+0x1e>

08028e5a <__sfputc_r>:
 8028e5a:	6893      	ldr	r3, [r2, #8]
 8028e5c:	3b01      	subs	r3, #1
 8028e5e:	2b00      	cmp	r3, #0
 8028e60:	b410      	push	{r4}
 8028e62:	6093      	str	r3, [r2, #8]
 8028e64:	da08      	bge.n	8028e78 <__sfputc_r+0x1e>
 8028e66:	6994      	ldr	r4, [r2, #24]
 8028e68:	42a3      	cmp	r3, r4
 8028e6a:	db01      	blt.n	8028e70 <__sfputc_r+0x16>
 8028e6c:	290a      	cmp	r1, #10
 8028e6e:	d103      	bne.n	8028e78 <__sfputc_r+0x1e>
 8028e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028e74:	f7fd bb94 	b.w	80265a0 <__swbuf_r>
 8028e78:	6813      	ldr	r3, [r2, #0]
 8028e7a:	1c58      	adds	r0, r3, #1
 8028e7c:	6010      	str	r0, [r2, #0]
 8028e7e:	7019      	strb	r1, [r3, #0]
 8028e80:	4608      	mov	r0, r1
 8028e82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028e86:	4770      	bx	lr

08028e88 <__sfputs_r>:
 8028e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e8a:	4606      	mov	r6, r0
 8028e8c:	460f      	mov	r7, r1
 8028e8e:	4614      	mov	r4, r2
 8028e90:	18d5      	adds	r5, r2, r3
 8028e92:	42ac      	cmp	r4, r5
 8028e94:	d101      	bne.n	8028e9a <__sfputs_r+0x12>
 8028e96:	2000      	movs	r0, #0
 8028e98:	e007      	b.n	8028eaa <__sfputs_r+0x22>
 8028e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028e9e:	463a      	mov	r2, r7
 8028ea0:	4630      	mov	r0, r6
 8028ea2:	f7ff ffda 	bl	8028e5a <__sfputc_r>
 8028ea6:	1c43      	adds	r3, r0, #1
 8028ea8:	d1f3      	bne.n	8028e92 <__sfputs_r+0xa>
 8028eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08028eac <_vfiprintf_r>:
 8028eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028eb0:	460d      	mov	r5, r1
 8028eb2:	b09d      	sub	sp, #116	; 0x74
 8028eb4:	4614      	mov	r4, r2
 8028eb6:	4698      	mov	r8, r3
 8028eb8:	4606      	mov	r6, r0
 8028eba:	b118      	cbz	r0, 8028ec4 <_vfiprintf_r+0x18>
 8028ebc:	6983      	ldr	r3, [r0, #24]
 8028ebe:	b90b      	cbnz	r3, 8028ec4 <_vfiprintf_r+0x18>
 8028ec0:	f7fe fbc2 	bl	8027648 <__sinit>
 8028ec4:	4b89      	ldr	r3, [pc, #548]	; (80290ec <_vfiprintf_r+0x240>)
 8028ec6:	429d      	cmp	r5, r3
 8028ec8:	d11b      	bne.n	8028f02 <_vfiprintf_r+0x56>
 8028eca:	6875      	ldr	r5, [r6, #4]
 8028ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028ece:	07d9      	lsls	r1, r3, #31
 8028ed0:	d405      	bmi.n	8028ede <_vfiprintf_r+0x32>
 8028ed2:	89ab      	ldrh	r3, [r5, #12]
 8028ed4:	059a      	lsls	r2, r3, #22
 8028ed6:	d402      	bmi.n	8028ede <_vfiprintf_r+0x32>
 8028ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028eda:	f7fe ffc6 	bl	8027e6a <__retarget_lock_acquire_recursive>
 8028ede:	89ab      	ldrh	r3, [r5, #12]
 8028ee0:	071b      	lsls	r3, r3, #28
 8028ee2:	d501      	bpl.n	8028ee8 <_vfiprintf_r+0x3c>
 8028ee4:	692b      	ldr	r3, [r5, #16]
 8028ee6:	b9eb      	cbnz	r3, 8028f24 <_vfiprintf_r+0x78>
 8028ee8:	4629      	mov	r1, r5
 8028eea:	4630      	mov	r0, r6
 8028eec:	f7fd fbaa 	bl	8026644 <__swsetup_r>
 8028ef0:	b1c0      	cbz	r0, 8028f24 <_vfiprintf_r+0x78>
 8028ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028ef4:	07dc      	lsls	r4, r3, #31
 8028ef6:	d50e      	bpl.n	8028f16 <_vfiprintf_r+0x6a>
 8028ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8028efc:	b01d      	add	sp, #116	; 0x74
 8028efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f02:	4b7b      	ldr	r3, [pc, #492]	; (80290f0 <_vfiprintf_r+0x244>)
 8028f04:	429d      	cmp	r5, r3
 8028f06:	d101      	bne.n	8028f0c <_vfiprintf_r+0x60>
 8028f08:	68b5      	ldr	r5, [r6, #8]
 8028f0a:	e7df      	b.n	8028ecc <_vfiprintf_r+0x20>
 8028f0c:	4b79      	ldr	r3, [pc, #484]	; (80290f4 <_vfiprintf_r+0x248>)
 8028f0e:	429d      	cmp	r5, r3
 8028f10:	bf08      	it	eq
 8028f12:	68f5      	ldreq	r5, [r6, #12]
 8028f14:	e7da      	b.n	8028ecc <_vfiprintf_r+0x20>
 8028f16:	89ab      	ldrh	r3, [r5, #12]
 8028f18:	0598      	lsls	r0, r3, #22
 8028f1a:	d4ed      	bmi.n	8028ef8 <_vfiprintf_r+0x4c>
 8028f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028f1e:	f7fe ffa5 	bl	8027e6c <__retarget_lock_release_recursive>
 8028f22:	e7e9      	b.n	8028ef8 <_vfiprintf_r+0x4c>
 8028f24:	2300      	movs	r3, #0
 8028f26:	9309      	str	r3, [sp, #36]	; 0x24
 8028f28:	2320      	movs	r3, #32
 8028f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8028f32:	2330      	movs	r3, #48	; 0x30
 8028f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80290f8 <_vfiprintf_r+0x24c>
 8028f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028f3c:	f04f 0901 	mov.w	r9, #1
 8028f40:	4623      	mov	r3, r4
 8028f42:	469a      	mov	sl, r3
 8028f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028f48:	b10a      	cbz	r2, 8028f4e <_vfiprintf_r+0xa2>
 8028f4a:	2a25      	cmp	r2, #37	; 0x25
 8028f4c:	d1f9      	bne.n	8028f42 <_vfiprintf_r+0x96>
 8028f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8028f52:	d00b      	beq.n	8028f6c <_vfiprintf_r+0xc0>
 8028f54:	465b      	mov	r3, fp
 8028f56:	4622      	mov	r2, r4
 8028f58:	4629      	mov	r1, r5
 8028f5a:	4630      	mov	r0, r6
 8028f5c:	f7ff ff94 	bl	8028e88 <__sfputs_r>
 8028f60:	3001      	adds	r0, #1
 8028f62:	f000 80aa 	beq.w	80290ba <_vfiprintf_r+0x20e>
 8028f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028f68:	445a      	add	r2, fp
 8028f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8028f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8028f70:	2b00      	cmp	r3, #0
 8028f72:	f000 80a2 	beq.w	80290ba <_vfiprintf_r+0x20e>
 8028f76:	2300      	movs	r3, #0
 8028f78:	f04f 32ff 	mov.w	r2, #4294967295
 8028f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028f80:	f10a 0a01 	add.w	sl, sl, #1
 8028f84:	9304      	str	r3, [sp, #16]
 8028f86:	9307      	str	r3, [sp, #28]
 8028f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8028f8e:	4654      	mov	r4, sl
 8028f90:	2205      	movs	r2, #5
 8028f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028f96:	4858      	ldr	r0, [pc, #352]	; (80290f8 <_vfiprintf_r+0x24c>)
 8028f98:	f7e7 fc8a 	bl	80108b0 <memchr>
 8028f9c:	9a04      	ldr	r2, [sp, #16]
 8028f9e:	b9d8      	cbnz	r0, 8028fd8 <_vfiprintf_r+0x12c>
 8028fa0:	06d1      	lsls	r1, r2, #27
 8028fa2:	bf44      	itt	mi
 8028fa4:	2320      	movmi	r3, #32
 8028fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028faa:	0713      	lsls	r3, r2, #28
 8028fac:	bf44      	itt	mi
 8028fae:	232b      	movmi	r3, #43	; 0x2b
 8028fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8028fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8028fba:	d015      	beq.n	8028fe8 <_vfiprintf_r+0x13c>
 8028fbc:	9a07      	ldr	r2, [sp, #28]
 8028fbe:	4654      	mov	r4, sl
 8028fc0:	2000      	movs	r0, #0
 8028fc2:	f04f 0c0a 	mov.w	ip, #10
 8028fc6:	4621      	mov	r1, r4
 8028fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028fcc:	3b30      	subs	r3, #48	; 0x30
 8028fce:	2b09      	cmp	r3, #9
 8028fd0:	d94e      	bls.n	8029070 <_vfiprintf_r+0x1c4>
 8028fd2:	b1b0      	cbz	r0, 8029002 <_vfiprintf_r+0x156>
 8028fd4:	9207      	str	r2, [sp, #28]
 8028fd6:	e014      	b.n	8029002 <_vfiprintf_r+0x156>
 8028fd8:	eba0 0308 	sub.w	r3, r0, r8
 8028fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8028fe0:	4313      	orrs	r3, r2
 8028fe2:	9304      	str	r3, [sp, #16]
 8028fe4:	46a2      	mov	sl, r4
 8028fe6:	e7d2      	b.n	8028f8e <_vfiprintf_r+0xe2>
 8028fe8:	9b03      	ldr	r3, [sp, #12]
 8028fea:	1d19      	adds	r1, r3, #4
 8028fec:	681b      	ldr	r3, [r3, #0]
 8028fee:	9103      	str	r1, [sp, #12]
 8028ff0:	2b00      	cmp	r3, #0
 8028ff2:	bfbb      	ittet	lt
 8028ff4:	425b      	neglt	r3, r3
 8028ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8028ffa:	9307      	strge	r3, [sp, #28]
 8028ffc:	9307      	strlt	r3, [sp, #28]
 8028ffe:	bfb8      	it	lt
 8029000:	9204      	strlt	r2, [sp, #16]
 8029002:	7823      	ldrb	r3, [r4, #0]
 8029004:	2b2e      	cmp	r3, #46	; 0x2e
 8029006:	d10c      	bne.n	8029022 <_vfiprintf_r+0x176>
 8029008:	7863      	ldrb	r3, [r4, #1]
 802900a:	2b2a      	cmp	r3, #42	; 0x2a
 802900c:	d135      	bne.n	802907a <_vfiprintf_r+0x1ce>
 802900e:	9b03      	ldr	r3, [sp, #12]
 8029010:	1d1a      	adds	r2, r3, #4
 8029012:	681b      	ldr	r3, [r3, #0]
 8029014:	9203      	str	r2, [sp, #12]
 8029016:	2b00      	cmp	r3, #0
 8029018:	bfb8      	it	lt
 802901a:	f04f 33ff 	movlt.w	r3, #4294967295
 802901e:	3402      	adds	r4, #2
 8029020:	9305      	str	r3, [sp, #20]
 8029022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029108 <_vfiprintf_r+0x25c>
 8029026:	7821      	ldrb	r1, [r4, #0]
 8029028:	2203      	movs	r2, #3
 802902a:	4650      	mov	r0, sl
 802902c:	f7e7 fc40 	bl	80108b0 <memchr>
 8029030:	b140      	cbz	r0, 8029044 <_vfiprintf_r+0x198>
 8029032:	2340      	movs	r3, #64	; 0x40
 8029034:	eba0 000a 	sub.w	r0, r0, sl
 8029038:	fa03 f000 	lsl.w	r0, r3, r0
 802903c:	9b04      	ldr	r3, [sp, #16]
 802903e:	4303      	orrs	r3, r0
 8029040:	3401      	adds	r4, #1
 8029042:	9304      	str	r3, [sp, #16]
 8029044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029048:	482c      	ldr	r0, [pc, #176]	; (80290fc <_vfiprintf_r+0x250>)
 802904a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802904e:	2206      	movs	r2, #6
 8029050:	f7e7 fc2e 	bl	80108b0 <memchr>
 8029054:	2800      	cmp	r0, #0
 8029056:	d03f      	beq.n	80290d8 <_vfiprintf_r+0x22c>
 8029058:	4b29      	ldr	r3, [pc, #164]	; (8029100 <_vfiprintf_r+0x254>)
 802905a:	bb1b      	cbnz	r3, 80290a4 <_vfiprintf_r+0x1f8>
 802905c:	9b03      	ldr	r3, [sp, #12]
 802905e:	3307      	adds	r3, #7
 8029060:	f023 0307 	bic.w	r3, r3, #7
 8029064:	3308      	adds	r3, #8
 8029066:	9303      	str	r3, [sp, #12]
 8029068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802906a:	443b      	add	r3, r7
 802906c:	9309      	str	r3, [sp, #36]	; 0x24
 802906e:	e767      	b.n	8028f40 <_vfiprintf_r+0x94>
 8029070:	fb0c 3202 	mla	r2, ip, r2, r3
 8029074:	460c      	mov	r4, r1
 8029076:	2001      	movs	r0, #1
 8029078:	e7a5      	b.n	8028fc6 <_vfiprintf_r+0x11a>
 802907a:	2300      	movs	r3, #0
 802907c:	3401      	adds	r4, #1
 802907e:	9305      	str	r3, [sp, #20]
 8029080:	4619      	mov	r1, r3
 8029082:	f04f 0c0a 	mov.w	ip, #10
 8029086:	4620      	mov	r0, r4
 8029088:	f810 2b01 	ldrb.w	r2, [r0], #1
 802908c:	3a30      	subs	r2, #48	; 0x30
 802908e:	2a09      	cmp	r2, #9
 8029090:	d903      	bls.n	802909a <_vfiprintf_r+0x1ee>
 8029092:	2b00      	cmp	r3, #0
 8029094:	d0c5      	beq.n	8029022 <_vfiprintf_r+0x176>
 8029096:	9105      	str	r1, [sp, #20]
 8029098:	e7c3      	b.n	8029022 <_vfiprintf_r+0x176>
 802909a:	fb0c 2101 	mla	r1, ip, r1, r2
 802909e:	4604      	mov	r4, r0
 80290a0:	2301      	movs	r3, #1
 80290a2:	e7f0      	b.n	8029086 <_vfiprintf_r+0x1da>
 80290a4:	ab03      	add	r3, sp, #12
 80290a6:	9300      	str	r3, [sp, #0]
 80290a8:	462a      	mov	r2, r5
 80290aa:	4b16      	ldr	r3, [pc, #88]	; (8029104 <_vfiprintf_r+0x258>)
 80290ac:	a904      	add	r1, sp, #16
 80290ae:	4630      	mov	r0, r6
 80290b0:	f7fb ff5e 	bl	8024f70 <_printf_float>
 80290b4:	4607      	mov	r7, r0
 80290b6:	1c78      	adds	r0, r7, #1
 80290b8:	d1d6      	bne.n	8029068 <_vfiprintf_r+0x1bc>
 80290ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80290bc:	07d9      	lsls	r1, r3, #31
 80290be:	d405      	bmi.n	80290cc <_vfiprintf_r+0x220>
 80290c0:	89ab      	ldrh	r3, [r5, #12]
 80290c2:	059a      	lsls	r2, r3, #22
 80290c4:	d402      	bmi.n	80290cc <_vfiprintf_r+0x220>
 80290c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80290c8:	f7fe fed0 	bl	8027e6c <__retarget_lock_release_recursive>
 80290cc:	89ab      	ldrh	r3, [r5, #12]
 80290ce:	065b      	lsls	r3, r3, #25
 80290d0:	f53f af12 	bmi.w	8028ef8 <_vfiprintf_r+0x4c>
 80290d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80290d6:	e711      	b.n	8028efc <_vfiprintf_r+0x50>
 80290d8:	ab03      	add	r3, sp, #12
 80290da:	9300      	str	r3, [sp, #0]
 80290dc:	462a      	mov	r2, r5
 80290de:	4b09      	ldr	r3, [pc, #36]	; (8029104 <_vfiprintf_r+0x258>)
 80290e0:	a904      	add	r1, sp, #16
 80290e2:	4630      	mov	r0, r6
 80290e4:	f7fc f9e8 	bl	80254b8 <_printf_i>
 80290e8:	e7e4      	b.n	80290b4 <_vfiprintf_r+0x208>
 80290ea:	bf00      	nop
 80290ec:	0803796c 	.word	0x0803796c
 80290f0:	0803798c 	.word	0x0803798c
 80290f4:	0803794c 	.word	0x0803794c
 80290f8:	08037b84 	.word	0x08037b84
 80290fc:	08037b8e 	.word	0x08037b8e
 8029100:	08024f71 	.word	0x08024f71
 8029104:	08028e89 	.word	0x08028e89
 8029108:	08037b8a 	.word	0x08037b8a

0802910c <_read_r>:
 802910c:	b538      	push	{r3, r4, r5, lr}
 802910e:	4d07      	ldr	r5, [pc, #28]	; (802912c <_read_r+0x20>)
 8029110:	4604      	mov	r4, r0
 8029112:	4608      	mov	r0, r1
 8029114:	4611      	mov	r1, r2
 8029116:	2200      	movs	r2, #0
 8029118:	602a      	str	r2, [r5, #0]
 802911a:	461a      	mov	r2, r3
 802911c:	f7e9 fbfc 	bl	8012918 <_read>
 8029120:	1c43      	adds	r3, r0, #1
 8029122:	d102      	bne.n	802912a <_read_r+0x1e>
 8029124:	682b      	ldr	r3, [r5, #0]
 8029126:	b103      	cbz	r3, 802912a <_read_r+0x1e>
 8029128:	6023      	str	r3, [r4, #0]
 802912a:	bd38      	pop	{r3, r4, r5, pc}
 802912c:	2000b3b0 	.word	0x2000b3b0

08029130 <abort>:
 8029130:	b508      	push	{r3, lr}
 8029132:	2006      	movs	r0, #6
 8029134:	f000 f834 	bl	80291a0 <raise>
 8029138:	2001      	movs	r0, #1
 802913a:	f7e9 fbe3 	bl	8012904 <_exit>

0802913e <_malloc_usable_size_r>:
 802913e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029142:	1f18      	subs	r0, r3, #4
 8029144:	2b00      	cmp	r3, #0
 8029146:	bfbc      	itt	lt
 8029148:	580b      	ldrlt	r3, [r1, r0]
 802914a:	18c0      	addlt	r0, r0, r3
 802914c:	4770      	bx	lr

0802914e <_raise_r>:
 802914e:	291f      	cmp	r1, #31
 8029150:	b538      	push	{r3, r4, r5, lr}
 8029152:	4604      	mov	r4, r0
 8029154:	460d      	mov	r5, r1
 8029156:	d904      	bls.n	8029162 <_raise_r+0x14>
 8029158:	2316      	movs	r3, #22
 802915a:	6003      	str	r3, [r0, #0]
 802915c:	f04f 30ff 	mov.w	r0, #4294967295
 8029160:	bd38      	pop	{r3, r4, r5, pc}
 8029162:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029164:	b112      	cbz	r2, 802916c <_raise_r+0x1e>
 8029166:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802916a:	b94b      	cbnz	r3, 8029180 <_raise_r+0x32>
 802916c:	4620      	mov	r0, r4
 802916e:	f000 f831 	bl	80291d4 <_getpid_r>
 8029172:	462a      	mov	r2, r5
 8029174:	4601      	mov	r1, r0
 8029176:	4620      	mov	r0, r4
 8029178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802917c:	f000 b818 	b.w	80291b0 <_kill_r>
 8029180:	2b01      	cmp	r3, #1
 8029182:	d00a      	beq.n	802919a <_raise_r+0x4c>
 8029184:	1c59      	adds	r1, r3, #1
 8029186:	d103      	bne.n	8029190 <_raise_r+0x42>
 8029188:	2316      	movs	r3, #22
 802918a:	6003      	str	r3, [r0, #0]
 802918c:	2001      	movs	r0, #1
 802918e:	e7e7      	b.n	8029160 <_raise_r+0x12>
 8029190:	2400      	movs	r4, #0
 8029192:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029196:	4628      	mov	r0, r5
 8029198:	4798      	blx	r3
 802919a:	2000      	movs	r0, #0
 802919c:	e7e0      	b.n	8029160 <_raise_r+0x12>
	...

080291a0 <raise>:
 80291a0:	4b02      	ldr	r3, [pc, #8]	; (80291ac <raise+0xc>)
 80291a2:	4601      	mov	r1, r0
 80291a4:	6818      	ldr	r0, [r3, #0]
 80291a6:	f7ff bfd2 	b.w	802914e <_raise_r>
 80291aa:	bf00      	nop
 80291ac:	200000e0 	.word	0x200000e0

080291b0 <_kill_r>:
 80291b0:	b538      	push	{r3, r4, r5, lr}
 80291b2:	4d07      	ldr	r5, [pc, #28]	; (80291d0 <_kill_r+0x20>)
 80291b4:	2300      	movs	r3, #0
 80291b6:	4604      	mov	r4, r0
 80291b8:	4608      	mov	r0, r1
 80291ba:	4611      	mov	r1, r2
 80291bc:	602b      	str	r3, [r5, #0]
 80291be:	f7e9 fb91 	bl	80128e4 <_kill>
 80291c2:	1c43      	adds	r3, r0, #1
 80291c4:	d102      	bne.n	80291cc <_kill_r+0x1c>
 80291c6:	682b      	ldr	r3, [r5, #0]
 80291c8:	b103      	cbz	r3, 80291cc <_kill_r+0x1c>
 80291ca:	6023      	str	r3, [r4, #0]
 80291cc:	bd38      	pop	{r3, r4, r5, pc}
 80291ce:	bf00      	nop
 80291d0:	2000b3b0 	.word	0x2000b3b0

080291d4 <_getpid_r>:
 80291d4:	f7e9 bb7e 	b.w	80128d4 <_getpid>

080291d8 <_init>:
 80291d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291da:	bf00      	nop
 80291dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291de:	bc08      	pop	{r3}
 80291e0:	469e      	mov	lr, r3
 80291e2:	4770      	bx	lr

080291e4 <_fini>:
 80291e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291e6:	bf00      	nop
 80291e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80291ea:	bc08      	pop	{r3}
 80291ec:	469e      	mov	lr, r3
 80291ee:	4770      	bx	lr

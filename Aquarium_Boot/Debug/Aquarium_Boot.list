
Aquarium_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .version      000002a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000b8dc  08000440  08000440  00010440  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007dc  0800bd20  0800bd20  0001bd20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c4fc  0800c4fc  0002044c  2**0
                  CONTENTS
  5 .ARM          00000008  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c504  0800c504  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c504  0800c504  0001c504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c508  0800c508  0001c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000044c  20000000  0800c50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000f10  2000044c  0800c958  0002044c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000135c  0800c958  0002135c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2c8  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba7  00000000  00000000  0002f744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  00034288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfaf  00000000  00000000  00035008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aeac  00000000  00000000  00052fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f1e4  00000000  00000000  0006de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d047  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ac  00000000  00000000  0010d098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000440 <__do_global_dtors_aux>:
 8000440:	b510      	push	{r4, lr}
 8000442:	4c05      	ldr	r4, [pc, #20]	; (8000458 <__do_global_dtors_aux+0x18>)
 8000444:	7823      	ldrb	r3, [r4, #0]
 8000446:	b933      	cbnz	r3, 8000456 <__do_global_dtors_aux+0x16>
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <__do_global_dtors_aux+0x1c>)
 800044a:	b113      	cbz	r3, 8000452 <__do_global_dtors_aux+0x12>
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <__do_global_dtors_aux+0x20>)
 800044e:	f3af 8000 	nop.w
 8000452:	2301      	movs	r3, #1
 8000454:	7023      	strb	r3, [r4, #0]
 8000456:	bd10      	pop	{r4, pc}
 8000458:	2000044c 	.word	0x2000044c
 800045c:	00000000 	.word	0x00000000
 8000460:	0800bd04 	.word	0x0800bd04

08000464 <frame_dummy>:
 8000464:	b508      	push	{r3, lr}
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <frame_dummy+0x10>)
 8000468:	b11b      	cbz	r3, 8000472 <frame_dummy+0xe>
 800046a:	4903      	ldr	r1, [pc, #12]	; (8000478 <frame_dummy+0x14>)
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <frame_dummy+0x18>)
 800046e:	f3af 8000 	nop.w
 8000472:	bd08      	pop	{r3, pc}
 8000474:	00000000 	.word	0x00000000
 8000478:	20000450 	.word	0x20000450
 800047c:	0800bd04 	.word	0x0800bd04

08000480 <strcmp>:
 8000480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000488:	2a01      	cmp	r2, #1
 800048a:	bf28      	it	cs
 800048c:	429a      	cmpcs	r2, r3
 800048e:	d0f7      	beq.n	8000480 <strcmp>
 8000490:	1ad0      	subs	r0, r2, r3
 8000492:	4770      	bx	lr

08000494 <strlen>:
 8000494:	4603      	mov	r3, r0
 8000496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800049a:	2a00      	cmp	r2, #0
 800049c:	d1fb      	bne.n	8000496 <strlen+0x2>
 800049e:	1a18      	subs	r0, r3, r0
 80004a0:	3801      	subs	r0, #1
 80004a2:	4770      	bx	lr
	...

080004b0 <memchr>:
 80004b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004b4:	2a10      	cmp	r2, #16
 80004b6:	db2b      	blt.n	8000510 <memchr+0x60>
 80004b8:	f010 0f07 	tst.w	r0, #7
 80004bc:	d008      	beq.n	80004d0 <memchr+0x20>
 80004be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c2:	3a01      	subs	r2, #1
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d02d      	beq.n	8000524 <memchr+0x74>
 80004c8:	f010 0f07 	tst.w	r0, #7
 80004cc:	b342      	cbz	r2, 8000520 <memchr+0x70>
 80004ce:	d1f6      	bne.n	80004be <memchr+0xe>
 80004d0:	b4f0      	push	{r4, r5, r6, r7}
 80004d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004da:	f022 0407 	bic.w	r4, r2, #7
 80004de:	f07f 0700 	mvns.w	r7, #0
 80004e2:	2300      	movs	r3, #0
 80004e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004e8:	3c08      	subs	r4, #8
 80004ea:	ea85 0501 	eor.w	r5, r5, r1
 80004ee:	ea86 0601 	eor.w	r6, r6, r1
 80004f2:	fa85 f547 	uadd8	r5, r5, r7
 80004f6:	faa3 f587 	sel	r5, r3, r7
 80004fa:	fa86 f647 	uadd8	r6, r6, r7
 80004fe:	faa5 f687 	sel	r6, r5, r7
 8000502:	b98e      	cbnz	r6, 8000528 <memchr+0x78>
 8000504:	d1ee      	bne.n	80004e4 <memchr+0x34>
 8000506:	bcf0      	pop	{r4, r5, r6, r7}
 8000508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800050c:	f002 0207 	and.w	r2, r2, #7
 8000510:	b132      	cbz	r2, 8000520 <memchr+0x70>
 8000512:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000516:	3a01      	subs	r2, #1
 8000518:	ea83 0301 	eor.w	r3, r3, r1
 800051c:	b113      	cbz	r3, 8000524 <memchr+0x74>
 800051e:	d1f8      	bne.n	8000512 <memchr+0x62>
 8000520:	2000      	movs	r0, #0
 8000522:	4770      	bx	lr
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
 8000528:	2d00      	cmp	r5, #0
 800052a:	bf06      	itte	eq
 800052c:	4635      	moveq	r5, r6
 800052e:	3803      	subeq	r0, #3
 8000530:	3807      	subne	r0, #7
 8000532:	f015 0f01 	tst.w	r5, #1
 8000536:	d107      	bne.n	8000548 <memchr+0x98>
 8000538:	3001      	adds	r0, #1
 800053a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800053e:	bf02      	ittt	eq
 8000540:	3001      	addeq	r0, #1
 8000542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000546:	3001      	addeq	r0, #1
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	3801      	subs	r0, #1
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_drsub>:
 8000550:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e002      	b.n	800055c <__adddf3>
 8000556:	bf00      	nop

08000558 <__aeabi_dsub>:
 8000558:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800055c <__adddf3>:
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000562:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	bf1f      	itttt	ne
 8000572:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000576:	ea55 0c02 	orrsne.w	ip, r5, r2
 800057a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800057e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000582:	f000 80e2 	beq.w	800074a <__adddf3+0x1ee>
 8000586:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800058a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800058e:	bfb8      	it	lt
 8000590:	426d      	neglt	r5, r5
 8000592:	dd0c      	ble.n	80005ae <__adddf3+0x52>
 8000594:	442c      	add	r4, r5
 8000596:	ea80 0202 	eor.w	r2, r0, r2
 800059a:	ea81 0303 	eor.w	r3, r1, r3
 800059e:	ea82 0000 	eor.w	r0, r2, r0
 80005a2:	ea83 0101 	eor.w	r1, r3, r1
 80005a6:	ea80 0202 	eor.w	r2, r0, r2
 80005aa:	ea81 0303 	eor.w	r3, r1, r3
 80005ae:	2d36      	cmp	r5, #54	; 0x36
 80005b0:	bf88      	it	hi
 80005b2:	bd30      	pophi	{r4, r5, pc}
 80005b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005c4:	d002      	beq.n	80005cc <__adddf3+0x70>
 80005c6:	4240      	negs	r0, r0
 80005c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005d8:	d002      	beq.n	80005e0 <__adddf3+0x84>
 80005da:	4252      	negs	r2, r2
 80005dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005e0:	ea94 0f05 	teq	r4, r5
 80005e4:	f000 80a7 	beq.w	8000736 <__adddf3+0x1da>
 80005e8:	f1a4 0401 	sub.w	r4, r4, #1
 80005ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80005f0:	db0d      	blt.n	800060e <__adddf3+0xb2>
 80005f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005f6:	fa22 f205 	lsr.w	r2, r2, r5
 80005fa:	1880      	adds	r0, r0, r2
 80005fc:	f141 0100 	adc.w	r1, r1, #0
 8000600:	fa03 f20e 	lsl.w	r2, r3, lr
 8000604:	1880      	adds	r0, r0, r2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	4159      	adcs	r1, r3
 800060c:	e00e      	b.n	800062c <__adddf3+0xd0>
 800060e:	f1a5 0520 	sub.w	r5, r5, #32
 8000612:	f10e 0e20 	add.w	lr, lr, #32
 8000616:	2a01      	cmp	r2, #1
 8000618:	fa03 fc0e 	lsl.w	ip, r3, lr
 800061c:	bf28      	it	cs
 800061e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000622:	fa43 f305 	asr.w	r3, r3, r5
 8000626:	18c0      	adds	r0, r0, r3
 8000628:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000630:	d507      	bpl.n	8000642 <__adddf3+0xe6>
 8000632:	f04f 0e00 	mov.w	lr, #0
 8000636:	f1dc 0c00 	rsbs	ip, ip, #0
 800063a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800063e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000642:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000646:	d31b      	bcc.n	8000680 <__adddf3+0x124>
 8000648:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800064c:	d30c      	bcc.n	8000668 <__adddf3+0x10c>
 800064e:	0849      	lsrs	r1, r1, #1
 8000650:	ea5f 0030 	movs.w	r0, r0, rrx
 8000654:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000658:	f104 0401 	add.w	r4, r4, #1
 800065c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000660:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000664:	f080 809a 	bcs.w	800079c <__adddf3+0x240>
 8000668:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	ea41 0105 	orr.w	r1, r1, r5
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000684:	4140      	adcs	r0, r0
 8000686:	eb41 0101 	adc.w	r1, r1, r1
 800068a:	3c01      	subs	r4, #1
 800068c:	bf28      	it	cs
 800068e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000692:	d2e9      	bcs.n	8000668 <__adddf3+0x10c>
 8000694:	f091 0f00 	teq	r1, #0
 8000698:	bf04      	itt	eq
 800069a:	4601      	moveq	r1, r0
 800069c:	2000      	moveq	r0, #0
 800069e:	fab1 f381 	clz	r3, r1
 80006a2:	bf08      	it	eq
 80006a4:	3320      	addeq	r3, #32
 80006a6:	f1a3 030b 	sub.w	r3, r3, #11
 80006aa:	f1b3 0220 	subs.w	r2, r3, #32
 80006ae:	da0c      	bge.n	80006ca <__adddf3+0x16e>
 80006b0:	320c      	adds	r2, #12
 80006b2:	dd08      	ble.n	80006c6 <__adddf3+0x16a>
 80006b4:	f102 0c14 	add.w	ip, r2, #20
 80006b8:	f1c2 020c 	rsb	r2, r2, #12
 80006bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80006c0:	fa21 f102 	lsr.w	r1, r1, r2
 80006c4:	e00c      	b.n	80006e0 <__adddf3+0x184>
 80006c6:	f102 0214 	add.w	r2, r2, #20
 80006ca:	bfd8      	it	le
 80006cc:	f1c2 0c20 	rsble	ip, r2, #32
 80006d0:	fa01 f102 	lsl.w	r1, r1, r2
 80006d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006d8:	bfdc      	itt	le
 80006da:	ea41 010c 	orrle.w	r1, r1, ip
 80006de:	4090      	lslle	r0, r2
 80006e0:	1ae4      	subs	r4, r4, r3
 80006e2:	bfa2      	ittt	ge
 80006e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006e8:	4329      	orrge	r1, r5
 80006ea:	bd30      	popge	{r4, r5, pc}
 80006ec:	ea6f 0404 	mvn.w	r4, r4
 80006f0:	3c1f      	subs	r4, #31
 80006f2:	da1c      	bge.n	800072e <__adddf3+0x1d2>
 80006f4:	340c      	adds	r4, #12
 80006f6:	dc0e      	bgt.n	8000716 <__adddf3+0x1ba>
 80006f8:	f104 0414 	add.w	r4, r4, #20
 80006fc:	f1c4 0220 	rsb	r2, r4, #32
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f302 	lsl.w	r3, r1, r2
 8000708:	ea40 0003 	orr.w	r0, r0, r3
 800070c:	fa21 f304 	lsr.w	r3, r1, r4
 8000710:	ea45 0103 	orr.w	r1, r5, r3
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	f1c4 040c 	rsb	r4, r4, #12
 800071a:	f1c4 0220 	rsb	r2, r4, #32
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 f304 	lsl.w	r3, r1, r4
 8000726:	ea40 0003 	orr.w	r0, r0, r3
 800072a:	4629      	mov	r1, r5
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	fa21 f004 	lsr.w	r0, r1, r4
 8000732:	4629      	mov	r1, r5
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	f094 0f00 	teq	r4, #0
 800073a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800073e:	bf06      	itte	eq
 8000740:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000744:	3401      	addeq	r4, #1
 8000746:	3d01      	subne	r5, #1
 8000748:	e74e      	b.n	80005e8 <__adddf3+0x8c>
 800074a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074e:	bf18      	it	ne
 8000750:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000754:	d029      	beq.n	80007aa <__adddf3+0x24e>
 8000756:	ea94 0f05 	teq	r4, r5
 800075a:	bf08      	it	eq
 800075c:	ea90 0f02 	teqeq	r0, r2
 8000760:	d005      	beq.n	800076e <__adddf3+0x212>
 8000762:	ea54 0c00 	orrs.w	ip, r4, r0
 8000766:	bf04      	itt	eq
 8000768:	4619      	moveq	r1, r3
 800076a:	4610      	moveq	r0, r2
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea91 0f03 	teq	r1, r3
 8000772:	bf1e      	ittt	ne
 8000774:	2100      	movne	r1, #0
 8000776:	2000      	movne	r0, #0
 8000778:	bd30      	popne	{r4, r5, pc}
 800077a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800077e:	d105      	bne.n	800078c <__adddf3+0x230>
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	4149      	adcs	r1, r1
 8000784:	bf28      	it	cs
 8000786:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800078a:	bd30      	pop	{r4, r5, pc}
 800078c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000790:	bf3c      	itt	cc
 8000792:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000796:	bd30      	popcc	{r4, r5, pc}
 8000798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800079c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ae:	bf1a      	itte	ne
 80007b0:	4619      	movne	r1, r3
 80007b2:	4610      	movne	r0, r2
 80007b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007b8:	bf1c      	itt	ne
 80007ba:	460b      	movne	r3, r1
 80007bc:	4602      	movne	r2, r0
 80007be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007c2:	bf06      	itte	eq
 80007c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007c8:	ea91 0f03 	teqeq	r1, r3
 80007cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	bf00      	nop

080007d4 <__aeabi_ui2d>:
 80007d4:	f090 0f00 	teq	r0, #0
 80007d8:	bf04      	itt	eq
 80007da:	2100      	moveq	r1, #0
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e8:	f04f 0500 	mov.w	r5, #0
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	e750      	b.n	8000694 <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_i2d>:
 80007f4:	f090 0f00 	teq	r0, #0
 80007f8:	bf04      	itt	eq
 80007fa:	2100      	moveq	r1, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000804:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000808:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800080c:	bf48      	it	mi
 800080e:	4240      	negmi	r0, r0
 8000810:	f04f 0100 	mov.w	r1, #0
 8000814:	e73e      	b.n	8000694 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_f2d>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800081e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000822:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000826:	bf1f      	itttt	ne
 8000828:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800082c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000830:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000834:	4770      	bxne	lr
 8000836:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800083a:	bf08      	it	eq
 800083c:	4770      	bxeq	lr
 800083e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000842:	bf04      	itt	eq
 8000844:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000848:	4770      	bxeq	lr
 800084a:	b530      	push	{r4, r5, lr}
 800084c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000850:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000854:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000858:	e71c      	b.n	8000694 <__adddf3+0x138>
 800085a:	bf00      	nop

0800085c <__aeabi_ul2d>:
 800085c:	ea50 0201 	orrs.w	r2, r0, r1
 8000860:	bf08      	it	eq
 8000862:	4770      	bxeq	lr
 8000864:	b530      	push	{r4, r5, lr}
 8000866:	f04f 0500 	mov.w	r5, #0
 800086a:	e00a      	b.n	8000882 <__aeabi_l2d+0x16>

0800086c <__aeabi_l2d>:
 800086c:	ea50 0201 	orrs.w	r2, r0, r1
 8000870:	bf08      	it	eq
 8000872:	4770      	bxeq	lr
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800087a:	d502      	bpl.n	8000882 <__aeabi_l2d+0x16>
 800087c:	4240      	negs	r0, r0
 800087e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000882:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000886:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800088e:	f43f aed8 	beq.w	8000642 <__adddf3+0xe6>
 8000892:	f04f 0203 	mov.w	r2, #3
 8000896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800089a:	bf18      	it	ne
 800089c:	3203      	addne	r2, #3
 800089e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008a2:	bf18      	it	ne
 80008a4:	3203      	addne	r2, #3
 80008a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ba:	ea40 000e 	orr.w	r0, r0, lr
 80008be:	fa21 f102 	lsr.w	r1, r1, r2
 80008c2:	4414      	add	r4, r2
 80008c4:	e6bd      	b.n	8000642 <__adddf3+0xe6>
 80008c6:	bf00      	nop

080008c8 <__aeabi_dmul>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d6:	bf1d      	ittte	ne
 80008d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008dc:	ea94 0f0c 	teqne	r4, ip
 80008e0:	ea95 0f0c 	teqne	r5, ip
 80008e4:	f000 f8de 	bleq	8000aa4 <__aeabi_dmul+0x1dc>
 80008e8:	442c      	add	r4, r5
 80008ea:	ea81 0603 	eor.w	r6, r1, r3
 80008ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008fa:	bf18      	it	ne
 80008fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000908:	d038      	beq.n	800097c <__aeabi_dmul+0xb4>
 800090a:	fba0 ce02 	umull	ip, lr, r0, r2
 800090e:	f04f 0500 	mov.w	r5, #0
 8000912:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000916:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800091a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800091e:	f04f 0600 	mov.w	r6, #0
 8000922:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000926:	f09c 0f00 	teq	ip, #0
 800092a:	bf18      	it	ne
 800092c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000930:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000934:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000938:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800093c:	d204      	bcs.n	8000948 <__aeabi_dmul+0x80>
 800093e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000942:	416d      	adcs	r5, r5
 8000944:	eb46 0606 	adc.w	r6, r6, r6
 8000948:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800094c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000950:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000954:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000958:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800095c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000960:	bf88      	it	hi
 8000962:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000966:	d81e      	bhi.n	80009a6 <__aeabi_dmul+0xde>
 8000968:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800096c:	bf08      	it	eq
 800096e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000972:	f150 0000 	adcs.w	r0, r0, #0
 8000976:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000980:	ea46 0101 	orr.w	r1, r6, r1
 8000984:	ea40 0002 	orr.w	r0, r0, r2
 8000988:	ea81 0103 	eor.w	r1, r1, r3
 800098c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	f300 80ab 	bgt.w	8000b00 <__aeabi_dmul+0x238>
 80009aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009ae:	bfde      	ittt	le
 80009b0:	2000      	movle	r0, #0
 80009b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009b6:	bd70      	pople	{r4, r5, r6, pc}
 80009b8:	f1c4 0400 	rsb	r4, r4, #0
 80009bc:	3c20      	subs	r4, #32
 80009be:	da35      	bge.n	8000a2c <__aeabi_dmul+0x164>
 80009c0:	340c      	adds	r4, #12
 80009c2:	dc1b      	bgt.n	80009fc <__aeabi_dmul+0x134>
 80009c4:	f104 0414 	add.w	r4, r4, #20
 80009c8:	f1c4 0520 	rsb	r5, r4, #32
 80009cc:	fa00 f305 	lsl.w	r3, r0, r5
 80009d0:	fa20 f004 	lsr.w	r0, r0, r4
 80009d4:	fa01 f205 	lsl.w	r2, r1, r5
 80009d8:	ea40 0002 	orr.w	r0, r0, r2
 80009dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009e8:	fa21 f604 	lsr.w	r6, r1, r4
 80009ec:	eb42 0106 	adc.w	r1, r2, r6
 80009f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f1c4 040c 	rsb	r4, r4, #12
 8000a00:	f1c4 0520 	rsb	r5, r4, #32
 8000a04:	fa00 f304 	lsl.w	r3, r0, r4
 8000a08:	fa20 f005 	lsr.w	r0, r0, r5
 8000a0c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a10:	ea40 0002 	orr.w	r0, r0, r2
 8000a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a1c:	f141 0100 	adc.w	r1, r1, #0
 8000a20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a24:	bf08      	it	eq
 8000a26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f1c4 0520 	rsb	r5, r4, #32
 8000a30:	fa00 f205 	lsl.w	r2, r0, r5
 8000a34:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a38:	fa20 f304 	lsr.w	r3, r0, r4
 8000a3c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a40:	ea43 0302 	orr.w	r3, r3, r2
 8000a44:	fa21 f004 	lsr.w	r0, r1, r4
 8000a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a4c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a50:	ea20 0002 	bic.w	r0, r0, r2
 8000a54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a5c:	bf08      	it	eq
 8000a5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	f094 0f00 	teq	r4, #0
 8000a68:	d10f      	bne.n	8000a8a <__aeabi_dmul+0x1c2>
 8000a6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a6e:	0040      	lsls	r0, r0, #1
 8000a70:	eb41 0101 	adc.w	r1, r1, r1
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	bf08      	it	eq
 8000a7a:	3c01      	subeq	r4, #1
 8000a7c:	d0f7      	beq.n	8000a6e <__aeabi_dmul+0x1a6>
 8000a7e:	ea41 0106 	orr.w	r1, r1, r6
 8000a82:	f095 0f00 	teq	r5, #0
 8000a86:	bf18      	it	ne
 8000a88:	4770      	bxne	lr
 8000a8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	eb43 0303 	adc.w	r3, r3, r3
 8000a94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a98:	bf08      	it	eq
 8000a9a:	3d01      	subeq	r5, #1
 8000a9c:	d0f7      	beq.n	8000a8e <__aeabi_dmul+0x1c6>
 8000a9e:	ea43 0306 	orr.w	r3, r3, r6
 8000aa2:	4770      	bx	lr
 8000aa4:	ea94 0f0c 	teq	r4, ip
 8000aa8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aac:	bf18      	it	ne
 8000aae:	ea95 0f0c 	teqne	r5, ip
 8000ab2:	d00c      	beq.n	8000ace <__aeabi_dmul+0x206>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	d1d1      	bne.n	8000a64 <__aeabi_dmul+0x19c>
 8000ac0:	ea81 0103 	eor.w	r1, r1, r3
 8000ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad2:	bf06      	itte	eq
 8000ad4:	4610      	moveq	r0, r2
 8000ad6:	4619      	moveq	r1, r3
 8000ad8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000adc:	d019      	beq.n	8000b12 <__aeabi_dmul+0x24a>
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dmul+0x222>
 8000ae4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ae8:	d113      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	d105      	bne.n	8000afc <__aeabi_dmul+0x234>
 8000af0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000af4:	bf1c      	itt	ne
 8000af6:	4610      	movne	r0, r2
 8000af8:	4619      	movne	r1, r3
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000afc:	ea81 0103 	eor.w	r1, r1, r3
 8000b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}

08000b1c <__aeabi_ddiv>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b2a:	bf1d      	ittte	ne
 8000b2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b30:	ea94 0f0c 	teqne	r4, ip
 8000b34:	ea95 0f0c 	teqne	r5, ip
 8000b38:	f000 f8a7 	bleq	8000c8a <__aeabi_ddiv+0x16e>
 8000b3c:	eba4 0405 	sub.w	r4, r4, r5
 8000b40:	ea81 0e03 	eor.w	lr, r1, r3
 8000b44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b4c:	f000 8088 	beq.w	8000c60 <__aeabi_ddiv+0x144>
 8000b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b74:	429d      	cmp	r5, r3
 8000b76:	bf08      	it	eq
 8000b78:	4296      	cmpeq	r6, r2
 8000b7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b82:	d202      	bcs.n	8000b8a <__aeabi_ddiv+0x6e>
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8a:	1ab6      	subs	r6, r6, r2
 8000b8c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba6:	bf22      	ittt	cs
 8000ba8:	1ab6      	subcs	r6, r6, r2
 8000baa:	4675      	movcs	r5, lr
 8000bac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bbe:	bf22      	ittt	cs
 8000bc0:	1ab6      	subcs	r6, r6, r2
 8000bc2:	4675      	movcs	r5, lr
 8000bc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bc8:	085b      	lsrs	r3, r3, #1
 8000bca:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bce:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bd6:	bf22      	ittt	cs
 8000bd8:	1ab6      	subcs	r6, r6, r2
 8000bda:	4675      	movcs	r5, lr
 8000bdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bee:	bf22      	ittt	cs
 8000bf0:	1ab6      	subcs	r6, r6, r2
 8000bf2:	4675      	movcs	r5, lr
 8000bf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bf8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bfc:	d018      	beq.n	8000c30 <__aeabi_ddiv+0x114>
 8000bfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c1a:	d1c0      	bne.n	8000b9e <__aeabi_ddiv+0x82>
 8000c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c20:	d10b      	bne.n	8000c3a <__aeabi_ddiv+0x11e>
 8000c22:	ea41 0100 	orr.w	r1, r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c2e:	e7b6      	b.n	8000b9e <__aeabi_ddiv+0x82>
 8000c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c34:	bf04      	itt	eq
 8000c36:	4301      	orreq	r1, r0
 8000c38:	2000      	moveq	r0, #0
 8000c3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c3e:	bf88      	it	hi
 8000c40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c44:	f63f aeaf 	bhi.w	80009a6 <__aeabi_dmul+0xde>
 8000c48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c4c:	bf04      	itt	eq
 8000c4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c56:	f150 0000 	adcs.w	r0, r0, #0
 8000c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c6c:	bfc2      	ittt	gt
 8000c6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c76:	bd70      	popgt	{r4, r5, r6, pc}
 8000c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7c:	f04f 0e00 	mov.w	lr, #0
 8000c80:	3c01      	subs	r4, #1
 8000c82:	e690      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c84:	ea45 0e06 	orr.w	lr, r5, r6
 8000c88:	e68d      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c8e:	ea94 0f0c 	teq	r4, ip
 8000c92:	bf08      	it	eq
 8000c94:	ea95 0f0c 	teqeq	r5, ip
 8000c98:	f43f af3b 	beq.w	8000b12 <__aeabi_dmul+0x24a>
 8000c9c:	ea94 0f0c 	teq	r4, ip
 8000ca0:	d10a      	bne.n	8000cb8 <__aeabi_ddiv+0x19c>
 8000ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ca6:	f47f af34 	bne.w	8000b12 <__aeabi_dmul+0x24a>
 8000caa:	ea95 0f0c 	teq	r5, ip
 8000cae:	f47f af25 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	e72c      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000cb8:	ea95 0f0c 	teq	r5, ip
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_ddiv+0x1b0>
 8000cbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cc2:	f43f aefd 	beq.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	e722      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000ccc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cd0:	bf18      	it	ne
 8000cd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd6:	f47f aec5 	bne.w	8000a64 <__aeabi_dmul+0x19c>
 8000cda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000cde:	f47f af0d 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000ce2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ce6:	f47f aeeb 	bne.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cea:	e712      	b.n	8000b12 <__aeabi_dmul+0x24a>

08000cec <__gedf2>:
 8000cec:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf0:	e006      	b.n	8000d00 <__cmpdf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__ledf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	e002      	b.n	8000d00 <__cmpdf2+0x4>
 8000cfa:	bf00      	nop

08000cfc <__cmpdf2>:
 8000cfc:	f04f 0c01 	mov.w	ip, #1
 8000d00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d10:	bf18      	it	ne
 8000d12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d16:	d01b      	beq.n	8000d50 <__cmpdf2+0x54>
 8000d18:	b001      	add	sp, #4
 8000d1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d1e:	bf0c      	ite	eq
 8000d20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d24:	ea91 0f03 	teqne	r1, r3
 8000d28:	bf02      	ittt	eq
 8000d2a:	ea90 0f02 	teqeq	r0, r2
 8000d2e:	2000      	moveq	r0, #0
 8000d30:	4770      	bxeq	lr
 8000d32:	f110 0f00 	cmn.w	r0, #0
 8000d36:	ea91 0f03 	teq	r1, r3
 8000d3a:	bf58      	it	pl
 8000d3c:	4299      	cmppl	r1, r3
 8000d3e:	bf08      	it	eq
 8000d40:	4290      	cmpeq	r0, r2
 8000d42:	bf2c      	ite	cs
 8000d44:	17d8      	asrcs	r0, r3, #31
 8000d46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d4a:	f040 0001 	orr.w	r0, r0, #1
 8000d4e:	4770      	bx	lr
 8000d50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d58:	d102      	bne.n	8000d60 <__cmpdf2+0x64>
 8000d5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d5e:	d107      	bne.n	8000d70 <__cmpdf2+0x74>
 8000d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d68:	d1d6      	bne.n	8000d18 <__cmpdf2+0x1c>
 8000d6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d6e:	d0d3      	beq.n	8000d18 <__cmpdf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cdrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4662      	mov	r2, ip
 8000d7e:	468c      	mov	ip, r1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4663      	mov	r3, ip
 8000d84:	e000      	b.n	8000d88 <__aeabi_cdcmpeq>
 8000d86:	bf00      	nop

08000d88 <__aeabi_cdcmpeq>:
 8000d88:	b501      	push	{r0, lr}
 8000d8a:	f7ff ffb7 	bl	8000cfc <__cmpdf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	bf48      	it	mi
 8000d92:	f110 0f00 	cmnmi.w	r0, #0
 8000d96:	bd01      	pop	{r0, pc}

08000d98 <__aeabi_dcmpeq>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff fff4 	bl	8000d88 <__aeabi_cdcmpeq>
 8000da0:	bf0c      	ite	eq
 8000da2:	2001      	moveq	r0, #1
 8000da4:	2000      	movne	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmplt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffea 	bl	8000d88 <__aeabi_cdcmpeq>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_dcmple>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffe0 	bl	8000d88 <__aeabi_cdcmpeq>
 8000dc8:	bf94      	ite	ls
 8000dca:	2001      	movls	r0, #1
 8000dcc:	2000      	movhi	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_dcmpge>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffce 	bl	8000d78 <__aeabi_cdrcmple>
 8000ddc:	bf94      	ite	ls
 8000dde:	2001      	movls	r0, #1
 8000de0:	2000      	movhi	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_dcmpgt>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffc4 	bl	8000d78 <__aeabi_cdrcmple>
 8000df0:	bf34      	ite	cc
 8000df2:	2001      	movcc	r0, #1
 8000df4:	2000      	movcs	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmpun>:
 8000dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e04:	d102      	bne.n	8000e0c <__aeabi_dcmpun+0x10>
 8000e06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e0a:	d10a      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e14:	d102      	bne.n	8000e1c <__aeabi_dcmpun+0x20>
 8000e16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e1a:	d102      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4770      	bx	lr
 8000e22:	f04f 0001 	mov.w	r0, #1
 8000e26:	4770      	bx	lr

08000e28 <__aeabi_d2iz>:
 8000e28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e30:	d215      	bcs.n	8000e5e <__aeabi_d2iz+0x36>
 8000e32:	d511      	bpl.n	8000e58 <__aeabi_d2iz+0x30>
 8000e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e3c:	d912      	bls.n	8000e64 <__aeabi_d2iz+0x3c>
 8000e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e52:	bf18      	it	ne
 8000e54:	4240      	negne	r0, r0
 8000e56:	4770      	bx	lr
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	4770      	bx	lr
 8000e5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e62:	d105      	bne.n	8000e70 <__aeabi_d2iz+0x48>
 8000e64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e68:	bf08      	it	eq
 8000e6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_d2uiz>:
 8000e78:	004a      	lsls	r2, r1, #1
 8000e7a:	d211      	bcs.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e80:	d211      	bcs.n	8000ea6 <__aeabi_d2uiz+0x2e>
 8000e82:	d50d      	bpl.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e8c:	d40e      	bmi.n	8000eac <__aeabi_d2uiz+0x34>
 8000e8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eaa:	d102      	bne.n	8000eb2 <__aeabi_d2uiz+0x3a>
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	4770      	bx	lr
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	4770      	bx	lr

08000eb8 <__aeabi_d2f>:
 8000eb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ebc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ec0:	bf24      	itt	cs
 8000ec2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ec6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eca:	d90d      	bls.n	8000ee8 <__aeabi_d2f+0x30>
 8000ecc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ed4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ed8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000edc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ee0:	bf08      	it	eq
 8000ee2:	f020 0001 	biceq.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000eec:	d121      	bne.n	8000f32 <__aeabi_d2f+0x7a>
 8000eee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ef2:	bfbc      	itt	lt
 8000ef4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ef8:	4770      	bxlt	lr
 8000efa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000efe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f02:	f1c2 0218 	rsb	r2, r2, #24
 8000f06:	f1c2 0c20 	rsb	ip, r2, #32
 8000f0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000f12:	bf18      	it	ne
 8000f14:	f040 0001 	orrne.w	r0, r0, #1
 8000f18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f24:	ea40 000c 	orr.w	r0, r0, ip
 8000f28:	fa23 f302 	lsr.w	r3, r3, r2
 8000f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f30:	e7cc      	b.n	8000ecc <__aeabi_d2f+0x14>
 8000f32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f36:	d107      	bne.n	8000f48 <__aeabi_d2f+0x90>
 8000f38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bxne	lr
 8000f48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_uldivmod>:
 8000f58:	b953      	cbnz	r3, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5a:	b94a      	cbnz	r2, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2800      	cmpeq	r0, #0
 8000f62:	bf1c      	itt	ne
 8000f64:	f04f 31ff 	movne.w	r1, #4294967295
 8000f68:	f04f 30ff 	movne.w	r0, #4294967295
 8000f6c:	f000 b9aa 	b.w	80012c4 <__aeabi_idiv0>
 8000f70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f78:	f000 f83c 	bl	8000ff4 <__udivmoddi4>
 8000f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_d2lz>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	f7ff ff0b 	bl	8000dac <__aeabi_dcmplt>
 8000f96:	b928      	cbnz	r0, 8000fa4 <__aeabi_d2lz+0x1c>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa0:	f000 b80a 	b.w	8000fb8 <__aeabi_d2ulz>
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000faa:	f000 f805 	bl	8000fb8 <__aeabi_d2ulz>
 8000fae:	4240      	negs	r0, r0
 8000fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2ulz>:
 8000fb8:	b5d0      	push	{r4, r6, r7, lr}
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__aeabi_d2ulz+0x34>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4606      	mov	r6, r0
 8000fc0:	460f      	mov	r7, r1
 8000fc2:	f7ff fc81 	bl	80008c8 <__aeabi_dmul>
 8000fc6:	f7ff ff57 	bl	8000e78 <__aeabi_d2uiz>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	f7ff fc02 	bl	80007d4 <__aeabi_ui2d>
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <__aeabi_d2ulz+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f7ff fc78 	bl	80008c8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4630      	mov	r0, r6
 8000fde:	4639      	mov	r1, r7
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_dsub>
 8000fe4:	f7ff ff48 	bl	8000e78 <__aeabi_d2uiz>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	bdd0      	pop	{r4, r6, r7, pc}
 8000fec:	3df00000 	.word	0x3df00000
 8000ff0:	41f00000 	.word	0x41f00000

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	468e      	mov	lr, r1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d14d      	bne.n	800109e <__udivmoddi4+0xaa>
 8001002:	428a      	cmp	r2, r1
 8001004:	4694      	mov	ip, r2
 8001006:	d969      	bls.n	80010dc <__udivmoddi4+0xe8>
 8001008:	fab2 f282 	clz	r2, r2
 800100c:	b152      	cbz	r2, 8001024 <__udivmoddi4+0x30>
 800100e:	fa01 f302 	lsl.w	r3, r1, r2
 8001012:	f1c2 0120 	rsb	r1, r2, #32
 8001016:	fa20 f101 	lsr.w	r1, r0, r1
 800101a:	fa0c fc02 	lsl.w	ip, ip, r2
 800101e:	ea41 0e03 	orr.w	lr, r1, r3
 8001022:	4094      	lsls	r4, r2
 8001024:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001028:	0c21      	lsrs	r1, r4, #16
 800102a:	fbbe f6f8 	udiv	r6, lr, r8
 800102e:	fa1f f78c 	uxth.w	r7, ip
 8001032:	fb08 e316 	mls	r3, r8, r6, lr
 8001036:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800103a:	fb06 f107 	mul.w	r1, r6, r7
 800103e:	4299      	cmp	r1, r3
 8001040:	d90a      	bls.n	8001058 <__udivmoddi4+0x64>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f106 30ff 	add.w	r0, r6, #4294967295
 800104a:	f080 811f 	bcs.w	800128c <__udivmoddi4+0x298>
 800104e:	4299      	cmp	r1, r3
 8001050:	f240 811c 	bls.w	800128c <__udivmoddi4+0x298>
 8001054:	3e02      	subs	r6, #2
 8001056:	4463      	add	r3, ip
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	b2a4      	uxth	r4, r4
 800105c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001060:	fb08 3310 	mls	r3, r8, r0, r3
 8001064:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001068:	fb00 f707 	mul.w	r7, r0, r7
 800106c:	42a7      	cmp	r7, r4
 800106e:	d90a      	bls.n	8001086 <__udivmoddi4+0x92>
 8001070:	eb1c 0404 	adds.w	r4, ip, r4
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295
 8001078:	f080 810a 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107c:	42a7      	cmp	r7, r4
 800107e:	f240 8107 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001082:	4464      	add	r4, ip
 8001084:	3802      	subs	r0, #2
 8001086:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108a:	1be4      	subs	r4, r4, r7
 800108c:	2600      	movs	r6, #0
 800108e:	b11d      	cbz	r5, 8001098 <__udivmoddi4+0xa4>
 8001090:	40d4      	lsrs	r4, r2
 8001092:	2300      	movs	r3, #0
 8001094:	e9c5 4300 	strd	r4, r3, [r5]
 8001098:	4631      	mov	r1, r6
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	428b      	cmp	r3, r1
 80010a0:	d909      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	f000 80ef 	beq.w	8001286 <__udivmoddi4+0x292>
 80010a8:	2600      	movs	r6, #0
 80010aa:	e9c5 0100 	strd	r0, r1, [r5]
 80010ae:	4630      	mov	r0, r6
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f683 	clz	r6, r3
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	428b      	cmp	r3, r1
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80f9 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb61 0303 	sbc.w	r3, r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	469e      	mov	lr, r3
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	d0e0      	beq.n	8001098 <__udivmoddi4+0xa4>
 80010d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80010da:	e7dd      	b.n	8001098 <__udivmoddi4+0xa4>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8092 	bne.w	800120e <__udivmoddi4+0x21a>
 80010ea:	eba1 010c 	sub.w	r1, r1, ip
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	2601      	movs	r6, #1
 80010f8:	0c20      	lsrs	r0, r4, #16
 80010fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80010fe:	fb07 1113 	mls	r1, r7, r3, r1
 8001102:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	4288      	cmp	r0, r1
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0101 	adds.w	r1, ip, r1
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	4288      	cmp	r0, r1
 800111a:	f200 80cb 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 800111e:	4643      	mov	r3, r8
 8001120:	1a09      	subs	r1, r1, r0
 8001122:	b2a4      	uxth	r4, r4
 8001124:	fbb1 f0f7 	udiv	r0, r1, r7
 8001128:	fb07 1110 	mls	r1, r7, r0, r1
 800112c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001130:	fb0e fe00 	mul.w	lr, lr, r0
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80bb 	bhi.w	80012be <__udivmoddi4+0x2ca>
 8001148:	4608      	mov	r0, r1
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79c      	b.n	800108e <__udivmoddi4+0x9a>
 8001154:	f1c6 0720 	rsb	r7, r6, #32
 8001158:	40b3      	lsls	r3, r6
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa20 f407 	lsr.w	r4, r0, r7
 8001166:	fa01 f306 	lsl.w	r3, r1, r6
 800116a:	431c      	orrs	r4, r3
 800116c:	40f9      	lsrs	r1, r7
 800116e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001172:	fa00 f306 	lsl.w	r3, r0, r6
 8001176:	fbb1 f8f9 	udiv	r8, r1, r9
 800117a:	0c20      	lsrs	r0, r4, #16
 800117c:	fa1f fe8c 	uxth.w	lr, ip
 8001180:	fb09 1118 	mls	r1, r9, r8, r1
 8001184:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001188:	fb08 f00e 	mul.w	r0, r8, lr
 800118c:	4288      	cmp	r0, r1
 800118e:	fa02 f206 	lsl.w	r2, r2, r6
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0101 	adds.w	r1, ip, r1
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	4288      	cmp	r0, r1
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	1a09      	subs	r1, r1, r0
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb1 f0f9 	udiv	r0, r1, r9
 80011b4:	fb09 1110 	mls	r1, r9, r0, r1
 80011b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80011c0:	458e      	cmp	lr, r1
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0101 	adds.w	r1, ip, r1
 80011c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	458e      	cmp	lr, r1
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4461      	add	r1, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9402 	umull	r9, r4, r0, r2
 80011de:	eba1 010e 	sub.w	r1, r1, lr
 80011e2:	42a1      	cmp	r1, r4
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46a6      	mov	lr, r4
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	b15d      	cbz	r5, 8001206 <__udivmoddi4+0x212>
 80011ee:	ebb3 0208 	subs.w	r2, r3, r8
 80011f2:	eb61 010e 	sbc.w	r1, r1, lr
 80011f6:	fa01 f707 	lsl.w	r7, r1, r7
 80011fa:	fa22 f306 	lsr.w	r3, r2, r6
 80011fe:	40f1      	lsrs	r1, r6
 8001200:	431f      	orrs	r7, r3
 8001202:	e9c5 7100 	strd	r7, r1, [r5]
 8001206:	2600      	movs	r6, #0
 8001208:	4631      	mov	r1, r6
 800120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120e:	f1c2 0320 	rsb	r3, r2, #32
 8001212:	40d8      	lsrs	r0, r3
 8001214:	fa0c fc02 	lsl.w	ip, ip, r2
 8001218:	fa21 f303 	lsr.w	r3, r1, r3
 800121c:	4091      	lsls	r1, r2
 800121e:	4301      	orrs	r1, r0
 8001220:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001224:	fa1f fe8c 	uxth.w	lr, ip
 8001228:	fbb3 f0f7 	udiv	r0, r3, r7
 800122c:	fb07 3610 	mls	r6, r7, r0, r3
 8001230:	0c0b      	lsrs	r3, r1, #16
 8001232:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001236:	fb00 f60e 	mul.w	r6, r0, lr
 800123a:	429e      	cmp	r6, r3
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0303 	adds.w	r3, ip, r3
 8001246:	f100 38ff 	add.w	r8, r0, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	429e      	cmp	r6, r3
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3802      	subs	r0, #2
 8001252:	4463      	add	r3, ip
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	b289      	uxth	r1, r1
 8001258:	fbb3 f6f7 	udiv	r6, r3, r7
 800125c:	fb07 3316 	mls	r3, r7, r6, r3
 8001260:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001264:	fb06 f30e 	mul.w	r3, r6, lr
 8001268:	428b      	cmp	r3, r1
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0101 	adds.w	r1, ip, r1
 8001270:	f106 38ff 	add.w	r8, r6, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	428b      	cmp	r3, r1
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3e02      	subs	r6, #2
 800127c:	4461      	add	r1, ip
 800127e:	1ac9      	subs	r1, r1, r3
 8001280:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	462e      	mov	r6, r5
 8001288:	4628      	mov	r0, r5
 800128a:	e705      	b.n	8001098 <__udivmoddi4+0xa4>
 800128c:	4606      	mov	r6, r0
 800128e:	e6e3      	b.n	8001058 <__udivmoddi4+0x64>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f8      	b.n	8001086 <__udivmoddi4+0x92>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4646      	mov	r6, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4620      	mov	r0, r4
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4640      	mov	r0, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4461      	add	r1, ip
 80012b8:	e732      	b.n	8001120 <__udivmoddi4+0x12c>
 80012ba:	4630      	mov	r0, r6
 80012bc:	e709      	b.n	80010d2 <__udivmoddi4+0xde>
 80012be:	4464      	add	r4, ip
 80012c0:	3802      	subs	r0, #2
 80012c2:	e742      	b.n	800114a <__udivmoddi4+0x156>

080012c4 <__aeabi_idiv0>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <apInit>:

cmd_t cmd;


void apInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  bool run_boot = false;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;

  reg = rtcBackupRegRead(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 fec0 	bl	8003058 <rtcBackupRegRead>
 80012d8:	4603      	mov	r3, r0
 80012da:	71bb      	strb	r3, [r7, #6]

  if (reg & (1<<0))
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <apInit+0x34>
  {
	run_boot = true;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
	reg &= ~(1<<0);
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	71bb      	strb	r3, [r7, #6]
	rtcBackupRegWrite(0, reg);
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 febe 	bl	8003078 <rtcBackupRegWrite>
  }


  if (resetGetCount() == 2)
 80012fc:	f001 fe64 	bl	8002fc8 <resetGetCount>
 8001300:	4603      	mov	r3, r0
 8001302:	2b02      	cmp	r3, #2
 8001304:	d101      	bne.n	800130a <apInit+0x42>
  {
	run_boot = true;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  }


  if (run_boot == false)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <apInit+0x78>
  {
	if (buttonGetPressed(_DEF_BUTTON1) == false)
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fe60 	bl	8001fdc <buttonGetPressed>
 800131c:	4603      	mov	r3, r0
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <apInit+0x78>
	{
	  if (bootVerifyFw() == true && bootVerifyCrc() == true)
 8001328:	f000 f83a 	bl	80013a0 <bootVerifyFw>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <apInit+0x78>
 8001332:	f000 f853 	bl	80013dc <bootVerifyCrc>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <apInit+0x78>
	  {
		bootJumpToFw();
 800133c:	f000 f886 	bl	800144c <bootJumpToFw>
  }


  //cliOpen(_DEF_UART1, 57600);

  cmdInit(&cmd);
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <apInit+0x94>)
 8001342:	f001 f99d 	bl	8002680 <cmdInit>
  cmdOpen(&cmd, _DEF_UART1, 57600);
 8001346:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800134a:	2100      	movs	r1, #0
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <apInit+0x94>)
 800134e:	f001 f9b3 	bl	80026b8 <cmdOpen>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000468 	.word	0x20000468

08001360 <apMain>:

void apMain(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8001366:	f000 fb14 	bl	8001992 <millis>
 800136a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 100)
 800136c:	f000 fb11 	bl	8001992 <millis>
 8001370:	4602      	mov	r2, r0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b63      	cmp	r3, #99	; 0x63
 8001378:	d905      	bls.n	8001386 <apMain+0x26>
    {
      pre_time = millis();
 800137a:	f000 fb0a 	bl	8001992 <millis>
 800137e:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8001380:	2000      	movs	r0, #0
 8001382:	f001 fd89 	bl	8002e98 <ledToggle>
    }

    //cliMain();
    if (cmdReceivePacket(&cmd) == true)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <apMain+0x3c>)
 8001388:	f001 f9b8 	bl	80026fc <cmdReceivePacket>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ec      	beq.n	800136c <apMain+0xc>
    {
      bootProcessCmd(&cmd);
 8001392:	4802      	ldr	r0, [pc, #8]	; (800139c <apMain+0x3c>)
 8001394:	f000 f874 	bl	8001480 <bootProcessCmd>
    if (millis()-pre_time >= 100)
 8001398:	e7e8      	b.n	800136c <apMain+0xc>
 800139a:	bf00      	nop
 800139c:	20000468 	.word	0x20000468

080013a0 <bootVerifyFw>:
{

}

bool bootVerifyFw(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  uint32_t *jump_addr = (uint32_t *)(FLASH_ADDR_FW + 4);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <bootVerifyFw+0x30>)
 80013a8:	607b      	str	r3, [r7, #4]


  if ((*jump_addr) >= FLASH_ADDR_START && (*jump_addr) <  FLASH_ADDR_END)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <bootVerifyFw+0x34>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d906      	bls.n	80013c2 <bootVerifyFw+0x22>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <bootVerifyFw+0x38>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d801      	bhi.n	80013c2 <bootVerifyFw+0x22>
  {
    return true;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <bootVerifyFw+0x24>
  }
  else
  {
    return false;
 80013c2:	2300      	movs	r3, #0
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	08010404 	.word	0x08010404
 80013d4:	0800ffff 	.word	0x0800ffff
 80013d8:	0807ffff 	.word	0x0807ffff

080013dc <bootVerifyCrc>:

bool bootVerifyCrc(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
  uint8_t *p_data;
  uint16_t fw_crc;

  if (p_firm_tag->magic_number != FLASH_MAGIC_NUMBER)
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <bootVerifyCrc+0x68>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <bootVerifyCrc+0x6c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d001      	beq.n	80013f2 <bootVerifyCrc+0x16>
  {
    return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e024      	b.n	800143c <bootVerifyCrc+0x60>
  }

  p_data = (uint8_t *)p_firm_tag->tag_flash_start;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <bootVerifyCrc+0x68>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60bb      	str	r3, [r7, #8]
  fw_crc = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	80fb      	strh	r3, [r7, #6]

  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00b      	b.n	800141c <bootVerifyCrc+0x40>
  {
    utilUpdateCrc(&fw_crc, p_data[i]);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fd63 	bl	8001edc <utilUpdateCrc>
  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <bootVerifyCrc+0x68>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8ed      	bhi.n	8001404 <bootVerifyCrc+0x28>
  }

  if (fw_crc == p_firm_tag->tag_flash_crc)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	461a      	mov	r2, r3
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <bootVerifyCrc+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	429a      	cmp	r2, r3
 8001434:	d101      	bne.n	800143a <bootVerifyCrc+0x5e>
  {
    return true;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <bootVerifyCrc+0x60>
  }
  else
  {
    return false;
 800143a:	2300      	movs	r3, #0
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008
 8001448:	5555aaaa 	.word	0x5555aaaa

0800144c <bootJumpToFw>:

void bootJumpToFw(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  void (**jump_func)(void) = (void (**)(void))(FLASH_ADDR_FW + 4);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <bootJumpToFw+0x2c>)
 8001454:	607b      	str	r3, [r7, #4]

  bspDeInit();
 8001456:	f000 fa6b 	bl	8001930 <bspDeInit>
  __set_MSP(*(uint32_t*)FLASH_ADDR_FW);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <bootJumpToFw+0x30>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f383 8808 	msr	MSP, r3
}
 8001466:	bf00      	nop
  (*jump_func)();
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4798      	blx	r3
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	08010404 	.word	0x08010404
 800147c:	08010400 	.word	0x08010400

08001480 <bootProcessCmd>:

void bootProcessCmd(cmd_t *p_cmd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af02      	add	r7, sp, #8
 8001486:	6078      	str	r0, [r7, #4]
  switch(p_cmd->rx_packet.cmd)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e1b      	ldrb	r3, [r3, #24]
 800148c:	2b10      	cmp	r3, #16
 800148e:	d845      	bhi.n	800151c <bootProcessCmd+0x9c>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <bootProcessCmd+0x18>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014e5 	.word	0x080014e5
 800149c:	080014ed 	.word	0x080014ed
 80014a0:	080014f5 	.word	0x080014f5
 80014a4:	080014fd 	.word	0x080014fd
 80014a8:	08001505 	.word	0x08001505
 80014ac:	0800150d 	.word	0x0800150d
 80014b0:	0800151d 	.word	0x0800151d
 80014b4:	0800151d 	.word	0x0800151d
 80014b8:	08001515 	.word	0x08001515
 80014bc:	0800151d 	.word	0x0800151d
 80014c0:	0800151d 	.word	0x0800151d
 80014c4:	0800151d 	.word	0x0800151d
 80014c8:	0800151d 	.word	0x0800151d
 80014cc:	0800151d 	.word	0x0800151d
 80014d0:	0800151d 	.word	0x0800151d
 80014d4:	0800151d 	.word	0x0800151d
 80014d8:	080014dd 	.word	0x080014dd
  {
    case BOOT_CMD_LED_CONTROL:
      bootCmdLedControl(p_cmd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f999 	bl	8001814 <bootCmdLedControl>
      break;
 80014e2:	e025      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_VERSION:
      bootCmdReadBootVersion(p_cmd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f827 	bl	8001538 <bootCmdReadBootVersion>
      break;
 80014ea:	e021      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_NAME:
      bootCmdReadBootName(p_cmd);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f839 	bl	8001564 <bootCmdReadBootName>
      break;
 80014f2:	e01d      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_VERSION:
      bootCmdReadFirmVersion(p_cmd);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f849 	bl	800158c <bootCmdReadFirmVersion>
      break;
 80014fa:	e019      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_NAME:
      bootCmdReadFirmName(p_cmd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f85b 	bl	80015b8 <bootCmdReadFirmName>
      break;
 8001502:	e015      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_ERASE:
      bootCmdFlashErase(p_cmd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f86b 	bl	80015e0 <bootCmdFlashErase>
      break;
 800150a:	e011      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_WRITE:
      bootCmdFlashWrite(p_cmd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f8d9 	bl	80016c4 <bootCmdFlashWrite>
      break;
 8001512:	e00d      	b.n	8001530 <bootProcessCmd+0xb0>

    case BOOT_CMD_JUMP_TO_FW:
      bootCmdJumpToFw(p_cmd);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f94c 	bl	80017b2 <bootCmdJumpToFw>
      break;
 800151a:	e009      	b.n	8001530 <bootProcessCmd+0xb0>

    default:
      cmdSendResp(p_cmd, p_cmd->rx_packet.cmd, BOOT_ERR_WRONG_CMD, NULL, 0);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e19      	ldrb	r1, [r3, #24]
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	2201      	movs	r2, #1
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f001 f9cb 	bl	80028c4 <cmdSendResp>
      break;
 800152e:	bf00      	nop
  }
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <bootCmdReadBootVersion>:

void bootCmdReadBootVersion(cmd_t *p_cmd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af02      	add	r7, sp, #8
 800153e:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_VERSION, CMD_OK, (uint8_t *)p_boot_ver->version, 32);
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <bootCmdReadBootVersion+0x28>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	2320      	movs	r3, #32
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f001 f9b7 	bl	80028c4 <cmdSendResp>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000000 	.word	0x20000000

08001564 <bootCmdReadBootName>:

void bootCmdReadBootName(cmd_t *p_cmd)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_NAME, CMD_OK, (uint8_t *)p_boot_ver->name, 32);
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <bootCmdReadBootName+0x24>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3320      	adds	r3, #32
 8001572:	2220      	movs	r2, #32
 8001574:	9200      	str	r2, [sp, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	2101      	movs	r1, #1
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f001 f9a2 	bl	80028c4 <cmdSendResp>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000000 	.word	0x20000000

0800158c <bootCmdReadFirmVersion>:

void bootCmdReadFirmVersion(cmd_t *p_cmd)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_VERSION, CMD_OK, (uint8_t *)p_firm_ver->version, 32);
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <bootCmdReadFirmVersion+0x28>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	2320      	movs	r3, #32
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	2102      	movs	r1, #2
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f001 f98d 	bl	80028c4 <cmdSendResp>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000004 	.word	0x20000004

080015b8 <bootCmdReadFirmName>:

void bootCmdReadFirmName(cmd_t *p_cmd)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
 80015be:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_NAME, CMD_OK, (uint8_t *)p_firm_ver->name, 32);
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <bootCmdReadFirmName+0x24>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3320      	adds	r3, #32
 80015c6:	2220      	movs	r2, #32
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	2200      	movs	r2, #0
 80015cc:	2103      	movs	r1, #3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f001 f978 	bl	80028c4 <cmdSendResp>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000004 	.word	0x20000004

080015e0 <bootCmdFlashErase>:

void bootCmdFlashErase(cmd_t *p_cmd)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3318      	adds	r3, #24
 80015f0:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001602:	3301      	adds	r3, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001616:	3302      	adds	r3, #2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	041b      	lsls	r3, r3, #16
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800162a:	3303      	adds	r3, #3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	461a      	mov	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800163e:	3304      	adds	r3, #4
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4313      	orrs	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800165e:	3306      	adds	r3, #6
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	041b      	lsls	r3, r3, #16
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001672:	3307      	adds	r3, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	061b      	lsls	r3, r3, #24
 8001678:	461a      	mov	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	4313      	orrs	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f8fc 	bl	8001880 <bootIsFlashRange>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00c      	beq.n	80016a8 <bootCmdFlashErase+0xc8>
  {
    // 메모리를 지움.
    if (flashErase(addr, length) != true)
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f001 f9af 	bl	80029f4 <flashErase>
 8001696:	4603      	mov	r3, r0
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d004      	beq.n	80016ac <bootCmdFlashErase+0xcc>
    {
      err_code = BOOT_ERR_FLASH_ERASE;
 80016a2:	2303      	movs	r3, #3
 80016a4:	75fb      	strb	r3, [r7, #23]
 80016a6:	e001      	b.n	80016ac <bootCmdFlashErase+0xcc>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 80016a8:	2304      	movs	r3, #4
 80016aa:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_ERASE, err_code, NULL, 0);
 80016ac:	7dfa      	ldrb	r2, [r7, #23]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2104      	movs	r1, #4
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f001 f904 	bl	80028c4 <cmdSendResp>
}
 80016bc:	bf00      	nop
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <bootCmdFlashWrite>:

void bootCmdFlashWrite(cmd_t *p_cmd)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3318      	adds	r3, #24
 80016d4:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016e6:	3301      	adds	r3, #1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016fa:	3302      	adds	r3, #2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800170e:	3303      	adds	r3, #3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	061b      	lsls	r3, r3, #24
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001722:	3304      	adds	r3, #4
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800172e:	3305      	adds	r3, #5
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4313      	orrs	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001742:	3306      	adds	r3, #6
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4313      	orrs	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001756:	3307      	adds	r3, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	4313      	orrs	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f88a 	bl	8001880 <bootIsFlashRange>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d011      	beq.n	8001796 <bootCmdFlashWrite+0xd2>
  {
    // 데이터를 Write.
    if (flashWrite(addr, &p_packet->data[8], length) != true)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001778:	3308      	adds	r3, #8
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	4619      	mov	r1, r3
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 f98b 	bl	8002a9a <flashWrite>
 8001784:	4603      	mov	r3, r0
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <bootCmdFlashWrite+0xd6>
    {
      err_code = BOOT_ERR_FLASH_WRITE;
 8001790:	2305      	movs	r3, #5
 8001792:	75fb      	strb	r3, [r7, #23]
 8001794:	e001      	b.n	800179a <bootCmdFlashWrite+0xd6>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 8001796:	2304      	movs	r3, #4
 8001798:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_WRITE, err_code, NULL, 0);
 800179a:	7dfa      	ldrb	r2, [r7, #23]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 f88d 	bl	80028c4 <cmdSendResp>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <bootCmdJumpToFw>:

void bootCmdJumpToFw(cmd_t *p_cmd)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af02      	add	r7, sp, #8
 80017b8:	6078      	str	r0, [r7, #4]
  if (bootVerifyFw() == true)
 80017ba:	f7ff fdf1 	bl	80013a0 <bootVerifyFw>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01b      	beq.n	80017fc <bootCmdJumpToFw+0x4a>
  {
    if (bootVerifyCrc() == true)
 80017c4:	f7ff fe0a 	bl	80013dc <bootVerifyCrc>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <bootCmdJumpToFw+0x38>
    {
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, CMD_OK, NULL, 0);
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2200      	movs	r2, #0
 80017d6:	2108      	movs	r1, #8
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f001 f873 	bl	80028c4 <cmdSendResp>
      delay(100);
 80017de:	2064      	movs	r0, #100	; 0x64
 80017e0:	f000 f8cc 	bl	800197c <delay>
      bootJumpToFw();
 80017e4:	f7ff fe32 	bl	800144c <bootJumpToFw>
  }
  else
  {
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
  }
}
 80017e8:	e010      	b.n	800180c <bootCmdJumpToFw+0x5a>
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_FW_CRC, NULL, 0);
 80017ea:	2300      	movs	r3, #0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2208      	movs	r2, #8
 80017f2:	2108      	movs	r1, #8
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f001 f865 	bl	80028c4 <cmdSendResp>
}
 80017fa:	e007      	b.n	800180c <bootCmdJumpToFw+0x5a>
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
 80017fc:	2300      	movs	r3, #0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2300      	movs	r3, #0
 8001802:	2207      	movs	r2, #7
 8001804:	2108      	movs	r1, #8
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f001 f85c 	bl	80028c4 <cmdSendResp>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <bootCmdLedControl>:

void bootCmdLedControl(cmd_t *p_cmd)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af02      	add	r7, sp, #8
 800181a:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  cmd_packet_t *p_packet;


  p_packet = &p_cmd->rx_packet;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3318      	adds	r3, #24
 8001824:	60bb      	str	r3, [r7, #8]

  if (p_packet->data[0] == 0)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <bootCmdLedControl+0x26>
  {
    ledOff(_DEF_LED1);
 8001832:	2000      	movs	r0, #0
 8001834:	f001 fb10 	bl	8002e58 <ledOff>
 8001838:	e015      	b.n	8001866 <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 1)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d103      	bne.n	800184e <bootCmdLedControl+0x3a>
  {
    ledOn(_DEF_LED1);
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fae6 	bl	8002e18 <ledOn>
 800184c:	e00b      	b.n	8001866 <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 2)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d103      	bne.n	8001862 <bootCmdLedControl+0x4e>
  {
    ledToggle(_DEF_LED1);
 800185a:	2000      	movs	r0, #0
 800185c:	f001 fb1c 	bl	8002e98 <ledToggle>
 8001860:	e001      	b.n	8001866 <bootCmdLedControl+0x52>
  }
  else
  {
    err_code = BOOT_ERR_LED;
 8001862:	2302      	movs	r3, #2
 8001864:	73fb      	strb	r3, [r7, #15]
  }

  cmdSendResp(p_cmd, BOOT_CMD_LED_CONTROL, err_code, NULL, 0);
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	2110      	movs	r1, #16
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f001 f827 	bl	80028c4 <cmdSendResp>
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <bootIsFlashRange>:

bool bootIsFlashRange(uint32_t addr_begin, uint32_t length)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_end;
  uint32_t flash_start;
  uint32_t flash_end;


  addr_end = addr_begin + length - 1;
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	3b01      	subs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]

  flash_start = FLASH_ADDR_START;
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <bootIsFlashRange+0x54>)
 800189a:	60fb      	str	r3, [r7, #12]
  flash_end   = FLASH_ADDR_END;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <bootIsFlashRange+0x58>)
 800189e:	60bb      	str	r3, [r7, #8]

  if ((addr_begin >= flash_start) && (addr_begin < flash_end) &&
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d30d      	bcc.n	80018c4 <bootIsFlashRange+0x44>
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d209      	bcs.n	80018c4 <bootIsFlashRange+0x44>
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d305      	bcc.n	80018c4 <bootIsFlashRange+0x44>
      (addr_end   >= flash_start) && (addr_end   < flash_end))
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d201      	bcs.n	80018c4 <bootIsFlashRange+0x44>
  {
    ret = true;
 80018c0:	2301      	movs	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
  }


  return ret;
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08010000 	.word	0x08010000
 80018d8:	08080000 	.word	0x08080000

080018dc <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  HAL_Init();
 80018e2:	f002 faf5 	bl	8003ed0 <HAL_Init>
  SystemClock_Config();
 80018e6:	f000 f85b 	bl	80019a0 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <bspInit+0x50>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a0e      	ldr	r2, [pc, #56]	; (800192c <bspInit+0x50>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <bspInit+0x50>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <bspInit+0x50>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <bspInit+0x50>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <bspInit+0x50>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <bspDeInit>:

void bspDeInit(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
  HAL_RCC_DeInit();
 8001936:	f004 fb6f 	bl	8006018 <HAL_RCC_DeInit>

  // Disable Interrupts
  //
  for (int i=0; i<8; i++)
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	e00f      	b.n	8001960 <bspDeInit+0x30>
  {
    NVIC->ICER[i] = 0xFFFFFFFF;
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <bspDeInit+0x44>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3320      	adds	r3, #32
 8001946:	f04f 31ff 	mov.w	r1, #4294967295
 800194a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800194e:	f3bf 8f4f 	dsb	sy
}
 8001952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001954:	f3bf 8f6f 	isb	sy
}
 8001958:	bf00      	nop
  for (int i=0; i<8; i++)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3301      	adds	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b07      	cmp	r3, #7
 8001964:	ddec      	ble.n	8001940 <bspDeInit+0x10>
    __DSB();
    __ISB();
  }
  SysTick->CTRL = 0;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <bspDeInit+0x48>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000e010 	.word	0xe000e010

0800197c <delay>:

void delay(uint32_t ms)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f002 fb15 	bl	8003fb4 <HAL_Delay>
#endif
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <millis>:

uint32_t millis(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001996:	f002 fb01 	bl	8003f9c <HAL_GetTick>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b09a      	sub	sp, #104	; 0x68
 80019a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019aa:	2230      	movs	r2, #48	; 0x30
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f005 fede 	bl	8007770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <SystemClock_Config+0xfc>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <SystemClock_Config+0xfc>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b2d      	ldr	r3, [pc, #180]	; (8001a9c <SystemClock_Config+0xfc>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <SystemClock_Config+0x100>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a29      	ldr	r2, [pc, #164]	; (8001aa0 <SystemClock_Config+0x100>)
 80019fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <SystemClock_Config+0x100>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a0e:	2309      	movs	r3, #9
 8001a10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a26:	2319      	movs	r3, #25
 8001a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a32:	2304      	movs	r3, #4
 8001a34:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fdae 	bl	800559c <HAL_RCC_OscConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a46:	f000 f82d 	bl	8001aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a64:	2103      	movs	r1, #3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 f806 	bl	8005a78 <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a72:	f000 f817 	bl	8001aa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a76:	2302      	movs	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a7e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4618      	mov	r0, r3
 8001a86:	f004 f9d7 	bl	8005e38 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a90:	f000 f808 	bl	8001aa4 <Error_Handler>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3768      	adds	r7, #104	; 0x68
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40007000 	.word	0x40007000

08001aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa8:	b672      	cpsid	i
}
 8001aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aac:	e7fe      	b.n	8001aac <Error_Handler+0x8>
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_MspInit+0x4c>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f002 fa12 	bl	8003f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <USART1_IRQHandler+0x10>)
 8001b5a:	f004 fdd5 	bl	8006708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20001228 	.word	0x20001228

08001b68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <DMA2_Stream2_IRQHandler+0x10>)
 8001b6e:	f002 fd0f 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200012c8 	.word	0x200012c8

08001b7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <DMA2_Stream7_IRQHandler+0x10>)
 8001b82:	f002 fd05 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20001268 	.word	0x20001268

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
	return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:

int _kill(int pid, int sig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001baa:	f005 fda9 	bl	8007700 <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:

void _exit (int status)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bd2:	e7fe      	b.n	8001bd2 <_exit+0x12>

08001bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e00a      	b.n	8001bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4601      	mov	r1, r0
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	b2ca      	uxtb	r2, r1
 8001bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf0      	blt.n	8001be6 <_read+0x12>
	}

return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	e009      	b.n	8001c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	60ba      	str	r2, [r7, #8]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dbf1      	blt.n	8001c20 <_write+0x12>
	}
	return len;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_close>:

int _close(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_isatty>:

int _isatty(int file)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	return 1;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f005 fd0e 	bl	8007700 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20020000 	.word	0x20020000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20000ca8 	.word	0x20000ca8
 8001d18:	20001360 	.word	0x20001360

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <SystemInit+0x28>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <SystemInit+0x28>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SystemInit+0x28>)
 8001d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d36:	609a      	str	r2, [r3, #8]
#endif
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d4e:	e003      	b.n	8001d58 <LoopCopyDataInit>

08001d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d56:	3104      	adds	r1, #4

08001d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d60:	d3f6      	bcc.n	8001d50 <CopyDataInit>
  ldr  r2, =_sbss
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d64:	e002      	b.n	8001d6c <LoopFillZerobss>

08001d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d68:	f842 3b04 	str.w	r3, [r2], #4

08001d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d6c:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d70:	d3f9      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d72:	f7ff ffd3 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f005 fcc9 	bl	800770c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f005 fcb5 	bl	80076e8 <main>
  bx  lr    
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d84:	0800c50c 	.word	0x0800c50c
  ldr  r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d8c:	2000044c 	.word	0x2000044c
  ldr  r2, =_sbss
 8001d90:	2000044c 	.word	0x2000044c
  ldr  r3, = _ebss
 8001d94:	2000135c 	.word	0x2000135c

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>

08001d9a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001da6:	2301      	movs	r3, #1
 8001da8:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	60da      	str	r2, [r3, #12]

  return ret;
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e026      	b.n	8001e34 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	441a      	add	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d00c      	beq.n	8001e28 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	3301      	adds	r3, #1
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	6892      	ldr	r2, [r2, #8]
 8001e18:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e1c:	fb01 f202 	mul.w	r2, r1, r2
 8001e20:	1a9a      	subs	r2, r3, r2
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e002      	b.n	8001e2e <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e2c:	e006      	b.n	8001e3c <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	3301      	adds	r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8d4      	bhi.n	8001de6 <qbufferRead+0x16>
    }
  }

  return ret;
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6892      	ldr	r2, [r2, #8]
 8001e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e64:	fb01 f202 	mul.w	r2, r1, r2
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <DWT_Delay_Init+0x58>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <DWT_Delay_Init+0x58>)
 8001e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <DWT_Delay_Init+0x58>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <DWT_Delay_Init+0x58>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001eb6:	bf00      	nop
     __ASM volatile ("NOP");
 8001eb8:	bf00      	nop
     __ASM volatile ("NOP");
 8001eba:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <DWT_Delay_Init+0x5c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001ec8:	2301      	movs	r3, #1
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000edf0 	.word	0xe000edf0
 8001ed8:	e0001000 	.word	0xe0001000

08001edc <utilUpdateCrc>:
                                0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
                                0x820D, 0x8207, 0x0202 };

void utilUpdateCrc(uint16_t *p_crc_cur, uint8_t data_in)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
  uint16_t crc;
  uint16_t i;

  crc = *p_crc_cur;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	81fb      	strh	r3, [r7, #14]

  i = ((unsigned short)(crc >> 8) ^ data_in) & 0xFF;
 8001eee:	89fb      	ldrh	r3, [r7, #14]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	4053      	eors	r3, r2
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	81bb      	strh	r3, [r7, #12]
  *p_crc_cur = (crc << 8) ^ util_crc_table[i];
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	89bb      	ldrh	r3, [r7, #12]
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <utilUpdateCrc+0x4c>)
 8001f0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	4053      	eors	r3, r2
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	801a      	strh	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000010 	.word	0x20000010

08001f2c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
  bool ret = true;
 8001f32:	2301      	movs	r3, #1
 8001f34:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <buttonInit+0xa0>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <buttonInit+0xa0>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6313      	str	r3, [r2, #48]	; 0x30
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <buttonInit+0xa0>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e023      	b.n	8001fb2 <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001f6a:	4919      	ldr	r1, [pc, #100]	; (8001fd0 <buttonInit+0xa4>)
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	3304      	adds	r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 8001f7e:	4914      	ldr	r1, [pc, #80]	; (8001fd0 <buttonInit+0xa4>)
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001f92:	490f      	ldr	r1, [pc, #60]	; (8001fd0 <buttonInit+0xa4>)
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1d3a      	adds	r2, r7, #4
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f844 	bl	8005034 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	ddd8      	ble.n	8001f6a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001fb8:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <buttonInit+0xa8>)
 8001fba:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <buttonInit+0xac>)
 8001fbc:	f000 fa3c 	bl	8002438 <cliAdd>
#endif

  return ret;
 8001fc0:	7efb      	ldrb	r3, [r7, #27]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	20000210 	.word	0x20000210
 8001fd4:	080020bd 	.word	0x080020bd
 8001fd8:	0800bd20 	.word	0x0800bd20

08001fdc <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4a30      	ldr	r2, [pc, #192]	; (80020b8 <buttonGetPressed+0xdc>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <buttonGetPressed+0x28>
  {
    return false;
 8002000:	2300      	movs	r3, #0
 8002002:	e054      	b.n	80020ae <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	7b9b      	ldrb	r3, [r3, #14]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <buttonGetPressed+0x36>
 800200c:	2b01      	cmp	r3, #1
 800200e:	d018      	beq.n	8002042 <buttonGetPressed+0x66>
 8002010:	e04c      	b.n	80020ac <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f003 fa70 	bl	8005504 <HAL_GPIO_ReadPin>
 8002024:	4603      	mov	r3, r0
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
 800202c:	429a      	cmp	r2, r3
 800202e:	d13a      	bne.n	80020a6 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8002030:	f7ff fcaf 	bl	8001992 <millis>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2201      	movs	r2, #1
 800203e:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 8002040:	e031      	b.n	80020a6 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f003 fa58 	bl	8005504 <HAL_GPIO_ReadPin>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	7b1b      	ldrb	r3, [r3, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d114      	bne.n	800208a <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8002060:	f7ff fc97 	bl	8001992 <millis>
 8002064:	4602      	mov	r2, r0
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d91a      	bls.n	80020aa <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	7b5b      	ldrb	r3, [r3, #13]
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8002088:	e00f      	b.n	80020aa <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2200      	movs	r2, #0
 800208e:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2200      	movs	r2, #0
 8002094:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	7b5b      	ldrb	r3, [r3, #13]
 800209a:	2b00      	cmp	r3, #0
 800209c:	bf14      	ite	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	2300      	moveq	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
		  break;
 80020a4:	e001      	b.n	80020aa <buttonGetPressed+0xce>
  		  break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <buttonGetPressed+0xd0>
		  break;
 80020aa:	bf00      	nop
  }
  return ret;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000210 	.word	0x20000210

080020bc <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d128      	bne.n	8002122 <cliButton+0x66>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	4919      	ldr	r1, [pc, #100]	; (800213c <cliButton+0x80>)
 80020d6:	2000      	movs	r0, #0
 80020d8:	4798      	blx	r3
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <cliButton+0x66>
  {
    while(cliKeepLoop())
 80020e0:	e018      	b.n	8002114 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	e00c      	b.n	8002102 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff75 	bl	8001fdc <buttonGetPressed>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4812      	ldr	r0, [pc, #72]	; (8002140 <cliButton+0x84>)
 80020f8:	f000 f88e 	bl	8002218 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	ddef      	ble.n	80020e8 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8002108:	480e      	ldr	r0, [pc, #56]	; (8002144 <cliButton+0x88>)
 800210a:	f000 f885 	bl	8002218 <cliPrintf>

      delay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f7ff fc34 	bl	800197c <delay>
    while(cliKeepLoop())
 8002114:	f000 f97a 	bl	800240c <cliKeepLoop>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1e1      	bne.n	80020e2 <cliButton+0x26>
    }

    ret = true;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <cliButton+0x8c>)
 8002130:	f000 f872 	bl	8002218 <cliPrintf>
  }
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	0800bd28 	.word	0x0800bd28
 8002140:	0800bd30 	.word	0x0800bd30
 8002144:	0800bd34 	.word	0x0800bd34
 8002148:	0800bd38 	.word	0x0800bd38

0800214c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <cliInit+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <cliInit+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <cliInit+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <cliInit+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <cliInit+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <cliInit+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <cliInit+0x74>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <cliInit+0x74>)
 8002184:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <cliInit+0x78>)
 8002186:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <cliInit+0x74>)
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <cliInit+0x7c>)
 800218e:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <cliInit+0x74>)
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <cliInit+0x80>)
 8002196:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <cliInit+0x74>)
 800219c:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <cliInit+0x84>)
 800219e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <cliInit+0x74>)
 80021a4:	f000 f81e 	bl	80021e4 <cliLineClean>


  cliAdd("help", cliShowList);
 80021a8:	490a      	ldr	r1, [pc, #40]	; (80021d4 <cliInit+0x88>)
 80021aa:	480b      	ldr	r0, [pc, #44]	; (80021d8 <cliInit+0x8c>)
 80021ac:	f000 f944 	bl	8002438 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80021b0:	490a      	ldr	r1, [pc, #40]	; (80021dc <cliInit+0x90>)
 80021b2:	480b      	ldr	r0, [pc, #44]	; (80021e0 <cliInit+0x94>)
 80021b4:	f000 f940 	bl	8002438 <cliAdd>

  return true;
 80021b8:	2301      	movs	r3, #1
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000cac 	.word	0x20000cac
 80021c4:	080022c9 	.word	0x080022c9
 80021c8:	08002319 	.word	0x08002319
 80021cc:	08002371 	.word	0x08002371
 80021d0:	080023b9 	.word	0x080023b9
 80021d4:	080024cd 	.word	0x080024cd
 80021d8:	0800bd48 	.word	0x0800bd48
 80021dc:	0800253d 	.word	0x0800253d
 80021e0:	0800bd50 	.word	0x0800bd50

080021e4 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8002218:	b40f      	push	{r0, r1, r2, r3}
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <cliPrintf+0x44>)
 8002228:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f103 0011 	add.w	r0, r3, #17
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002238:	f006 fe3c 	bl	8008eb4 <vsniprintf>
 800223c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	7818      	ldrb	r0, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3311      	adds	r3, #17
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	4619      	mov	r1, r3
 800224a:	f001 f8cf 	bl	80033ec <uartWrite>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002258:	b004      	add	sp, #16
 800225a:	4770      	bx	lr
 800225c:	20000cac 	.word	0x20000cac

08002260 <cliToUpper>:

void cliToUpper(char *str)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	81fb      	strh	r3, [r7, #14]
 800226c:	e018      	b.n	80022a0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800226e:	89fb      	ldrh	r3, [r7, #14]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d014      	beq.n	80022a8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800227e:	7b7b      	ldrb	r3, [r7, #13]
 8002280:	2b60      	cmp	r3, #96	; 0x60
 8002282:	d905      	bls.n	8002290 <cliToUpper+0x30>
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	2b7a      	cmp	r3, #122	; 0x7a
 8002288:	d802      	bhi.n	8002290 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800228a:	7b7b      	ldrb	r3, [r7, #13]
 800228c:	3b20      	subs	r3, #32
 800228e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	7b7a      	ldrb	r2, [r7, #13]
 8002298:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	3301      	adds	r3, #1
 800229e:	81fb      	strh	r3, [r7, #14]
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	d9e3      	bls.n	800226e <cliToUpper+0xe>
 80022a6:	e000      	b.n	80022aa <cliToUpper+0x4a>
      break;
 80022a8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80022aa:	89fb      	ldrh	r3, [r7, #14]
 80022ac:	2b10      	cmp	r3, #16
 80022ae:	d105      	bne.n	80022bc <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
  }
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <cliArgsGetData+0x4c>)
 80022d8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d301      	bcc.n	80022ec <cliArgsGetData+0x24>
  {
    return 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e00e      	b.n	800230a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 fda2 	bl	8008e48 <strtoul>
 8002304:	4603      	mov	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]

  return ret;
 8002308:	68fb      	ldr	r3, [r7, #12]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000cac 	.word	0x20000cac

08002318 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <cliArgsGetFloat+0x54>)
 800232a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	b29a      	uxth	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <cliArgsGetFloat+0x28>
  {
    return 0;
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	e00d      	b.n	800235c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f006 fcab 	bl	8008cac <strtof>
 8002356:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	ee07 3a90 	vmov	s15, r3
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000cac 	.word	0x20000cac

08002370 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <cliArgsGetStr+0x44>)
 8002380:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	b29a      	uxth	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800238c:	429a      	cmp	r2, r3
 800238e:	d301      	bcc.n	8002394 <cliArgsGetStr+0x24>
  {
    return 0;
 8002390:	2300      	movs	r3, #0
 8002392:	e008      	b.n	80023a6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]

  return ret;
 80023a4:	68fb      	ldr	r3, [r7, #12]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000cac 	.word	0x20000cac

080023b8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <cliArgsIsStr+0x50>)
 80023ca:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d301      	bcc.n	80023de <cliArgsIsStr+0x26>
  {
    return 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	e010      	b.n	8002400 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	f7fe f846 	bl	8000480 <strcmp>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <cliArgsIsStr+0x46>
  {
    ret = true;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000cac 	.word	0x20000cac

0800240c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <cliKeepLoop+0x28>)
 8002414:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 ff7a 	bl	8003314 <uartAvailable>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <cliKeepLoop+0x1e>
  {
    return true;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800242a:	2300      	movs	r3, #0
  }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000cac 	.word	0x20000cac

08002438 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <cliAdd+0x90>)
 8002448:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d901      	bls.n	8002458 <cliAdd+0x20>
  {
    return false;
 8002454:	2300      	movs	r3, #0
 8002456:	e032      	b.n	80024be <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800245e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002460:	89fa      	ldrh	r2, [r7, #14]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	f005 fdec 	bl	8008054 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800247c:	89fa      	ldrh	r2, [r7, #14]
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002492:	89fa      	ldrh	r2, [r7, #14]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff feda 	bl	8002260 <cliToUpper>

  p_cli->cmd_count++;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024b2:	3301      	adds	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000cac 	.word	0x20000cac

080024cc <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <cliShowList+0x60>)
 80024d6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80024d8:	4815      	ldr	r0, [pc, #84]	; (8002530 <cliShowList+0x64>)
 80024da:	f7ff fe9d 	bl	8002218 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80024de:	4815      	ldr	r0, [pc, #84]	; (8002534 <cliShowList+0x68>)
 80024e0:	f7ff fe9a 	bl	8002218 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e012      	b.n	8002510 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe8a 	bl	8002218 <cliPrintf>
    cliPrintf("\r\n");
 8002504:	480a      	ldr	r0, [pc, #40]	; (8002530 <cliShowList+0x64>)
 8002506:	f7ff fe87 	bl	8002218 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4293      	cmp	r3, r2
 800251c:	dbe5      	blt.n	80024ea <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800251e:	4806      	ldr	r0, [pc, #24]	; (8002538 <cliShowList+0x6c>)
 8002520:	f7ff fe7a 	bl	8002218 <cliPrintf>
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000cac 	.word	0x20000cac
 8002530:	0800be18 	.word	0x0800be18
 8002534:	0800be1c 	.word	0x0800be1c
 8002538:	0800be3c 	.word	0x0800be3c

0800253c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002544:	2310      	movs	r3, #16
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800255c:	4840      	ldr	r0, [pc, #256]	; (8002660 <cliMemoryDump+0x124>)
 800255e:	f7ff fe5b 	bl	8002218 <cliPrintf>
 8002562:	e07a      	b.n	800265a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b01      	cmp	r3, #1
 8002568:	dd09      	ble.n	800257e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3304      	adds	r3, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f006 fc67 	bl	8008e48 <strtoul>
 800257a:	4603      	mov	r3, r0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f006 fc5e 	bl	8008e48 <strtoul>
 800258c:	4603      	mov	r3, r0
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002594:	4833      	ldr	r0, [pc, #204]	; (8002664 <cliMemoryDump+0x128>)
 8002596:	f7ff fe3f 	bl	8002218 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259e:	e058      	b.n	8002652 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d104      	bne.n	80025b4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	4619      	mov	r1, r3
 80025ae:	482e      	ldr	r0, [pc, #184]	; (8002668 <cliMemoryDump+0x12c>)
 80025b0:	f7ff fe32 	bl	8002218 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	482c      	ldr	r0, [pc, #176]	; (800266c <cliMemoryDump+0x130>)
 80025bc:	f7ff fe2c 	bl	8002218 <cliPrintf>

    if ((idx%4) == 3)
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	425a      	negs	r2, r3
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	bf58      	it	pl
 80025ce:	4253      	negpl	r3, r2
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d138      	bne.n	8002646 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80025d4:	4826      	ldr	r0, [pc, #152]	; (8002670 <cliMemoryDump+0x134>)
 80025d6:	f7ff fe1f 	bl	8002218 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	e02c      	b.n	800263a <cliMemoryDump+0xfe>
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80025e4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e01d      	b.n	8002628 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b1f      	cmp	r3, #31
 80025f8:	d910      	bls.n	800261c <cliMemoryDump+0xe0>
 80025fa:	f107 020c 	add.w	r2, r7, #12
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b7e      	cmp	r3, #126	; 0x7e
 8002606:	d809      	bhi.n	800261c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002608:	f107 020c 	add.w	r2, r7, #12
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4817      	ldr	r0, [pc, #92]	; (8002674 <cliMemoryDump+0x138>)
 8002616:	f7ff fdff 	bl	8002218 <cliPrintf>
 800261a:	e002      	b.n	8002622 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800261c:	4816      	ldr	r0, [pc, #88]	; (8002678 <cliMemoryDump+0x13c>)
 800261e:	f7ff fdfb 	bl	8002218 <cliPrintf>
        for (i=0;i<4;i++)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3301      	adds	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b03      	cmp	r3, #3
 800262c:	ddde      	ble.n	80025ec <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3304      	adds	r3, #4
 8002632:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	3301      	adds	r3, #1
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	2b03      	cmp	r3, #3
 800263e:	ddcf      	ble.n	80025e0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002640:	480e      	ldr	r0, [pc, #56]	; (800267c <cliMemoryDump+0x140>)
 8002642:	f7ff fde9 	bl	8002218 <cliPrintf>
    }
    addr++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3304      	adds	r3, #4
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	3301      	adds	r3, #1
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	429a      	cmp	r2, r3
 8002658:	dba2      	blt.n	80025a0 <cliMemoryDump+0x64>
  }
}
 800265a:	3730      	adds	r7, #48	; 0x30
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	0800be5c 	.word	0x0800be5c
 8002664:	0800be70 	.word	0x0800be70
 8002668:	0800be78 	.word	0x0800be78
 800266c:	0800be84 	.word	0x0800be84
 8002670:	0800be8c 	.word	0x0800be8c
 8002674:	0800be90 	.word	0x0800be90
 8002678:	0800be94 	.word	0x0800be94
 800267c:	0800be98 	.word	0x0800be98

08002680 <cmdInit>:




void cmdInit(cmd_t *p_cmd)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  p_cmd->is_init = false;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	721a      	strb	r2, [r3, #8]

  p_cmd->rx_packet.data = &p_cmd->rx_packet.buffer[CMD_STATE_WAIT_DATA];
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
  p_cmd->tx_packet.data = &p_cmd->tx_packet.buffer[CMD_STATE_WAIT_DATA];
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f203 423a 	addw	r2, r3, #1082	; 0x43a
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <cmdOpen>:

bool cmdOpen(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	460b      	mov	r3, r1
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch = ch;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	7afa      	ldrb	r2, [r7, #11]
 80026ca:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]
  p_cmd->is_init = true;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	721a      	strb	r2, [r3, #8]
  p_cmd->pre_time = millis();
 80026de:	f7ff f958 	bl	8001992 <millis>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 80026e8:	7afb      	ldrb	r3, [r7, #11]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd03 	bl	80030f8 <uartOpen>
 80026f2:	4603      	mov	r3, r0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <cmdReceivePacket>:
{
  return uartClose(p_cmd->ch);
}

bool cmdReceivePacket(cmd_t *p_cmd)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint8_t rx_data;


  if (uartAvailable(p_cmd->ch) > 0)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fe01 	bl	8003314 <uartAvailable>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00f      	beq.n	8002738 <cmdReceivePacket+0x3c>
  {
    rx_data = uartRead(p_cmd->ch);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fe3f 	bl	80033a0 <uartRead>
 8002722:	4603      	mov	r3, r0
 8002724:	73bb      	strb	r3, [r7, #14]
  else
  {
    return false;
  }

  if (millis()-p_cmd->pre_time >= 100)
 8002726:	f7ff f934 	bl	8001992 <millis>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b63      	cmp	r3, #99	; 0x63
 8002734:	d905      	bls.n	8002742 <cmdReceivePacket+0x46>
 8002736:	e001      	b.n	800273c <cmdReceivePacket+0x40>
    return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e0be      	b.n	80028ba <cmdReceivePacket+0x1be>
  {
    p_cmd->state = CMD_STATE_WAIT_STX;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	721a      	strb	r2, [r3, #8]
  }
  p_cmd->pre_time = millis();
 8002742:	f7ff f926 	bl	8001992 <millis>
 8002746:	4602      	mov	r2, r0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]

  switch(p_cmd->state)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	7a1b      	ldrb	r3, [r3, #8]
 8002750:	2b08      	cmp	r3, #8
 8002752:	f200 80b1 	bhi.w	80028b8 <cmdReceivePacket+0x1bc>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <cmdReceivePacket+0x60>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002781 	.word	0x08002781
 8002760:	08002797 	.word	0x08002797
 8002764:	080027b3 	.word	0x080027b3
 8002768:	080027cf 	.word	0x080027cf
 800276c:	080027eb 	.word	0x080027eb
 8002770:	08002809 	.word	0x08002809
 8002774:	0800284b 	.word	0x0800284b
 8002778:	08002887 	.word	0x08002887
 800277c:	08002895 	.word	0x08002895
  {
    case CMD_STATE_WAIT_STX:
      if (rx_data == CMD_STX)
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	2b02      	cmp	r3, #2
 8002784:	f040 8095 	bne.w	80028b2 <cmdReceivePacket+0x1b6>
      {
        p_cmd->state = CMD_STATE_WAIT_CMD;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	721a      	strb	r2, [r3, #8]
        p_cmd->rx_packet.check_sum = 0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	779a      	strb	r2, [r3, #30]
      }
      break;
 8002794:	e08d      	b.n	80028b2 <cmdReceivePacket+0x1b6>

    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd = rx_data;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	7bba      	ldrb	r2, [r7, #14]
 800279a:	761a      	strb	r2, [r3, #24]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7f9a      	ldrb	r2, [r3, #30]
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	4053      	eors	r3, r2
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_DIR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	721a      	strb	r2, [r3, #8]
      break;
 80027b0:	e082      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DIR:
      p_cmd->rx_packet.dir = rx_data;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7bba      	ldrb	r2, [r7, #14]
 80027b6:	765a      	strb	r2, [r3, #25]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7f9a      	ldrb	r2, [r3, #30]
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	4053      	eors	r3, r2
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	721a      	strb	r2, [r3, #8]
      break;
 80027cc:	e074      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ERROR:
      p_cmd->rx_packet.error = rx_data;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7bba      	ldrb	r2, [r7, #14]
 80027d2:	769a      	strb	r2, [r3, #26]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7f9a      	ldrb	r2, [r3, #30]
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	4053      	eors	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_L;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2204      	movs	r2, #4
 80027e6:	721a      	strb	r2, [r3, #8]
      break;
 80027e8:	e066      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length = rx_data;
 80027ea:	7bbb      	ldrb	r3, [r7, #14]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7f9a      	ldrb	r2, [r3, #30]
 80027f6:	7bbb      	ldrb	r3, [r7, #14]
 80027f8:	4053      	eors	r3, r2
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_H;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2205      	movs	r2, #5
 8002804:	721a      	strb	r2, [r3, #8]
      break;
 8002806:	e057      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length |= (rx_data << 8);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8b9b      	ldrh	r3, [r3, #28]
 800280c:	b21a      	sxth	r2, r3
 800280e:	7bbb      	ldrb	r3, [r7, #14]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21b      	sxth	r3, r3
 8002814:	4313      	orrs	r3, r2
 8002816:	b21b      	sxth	r3, r3
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7f9a      	ldrb	r2, [r3, #30]
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	4053      	eors	r3, r2
 8002826:	b2da      	uxtb	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	779a      	strb	r2, [r3, #30]

      if (p_cmd->rx_packet.length > 0)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	8b9b      	ldrh	r3, [r3, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <cmdReceivePacket+0x146>
      {
        p_cmd->index = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	611a      	str	r2, [r3, #16]
        p_cmd->state = CMD_STATE_WAIT_DATA;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2206      	movs	r2, #6
 800283e:	721a      	strb	r2, [r3, #8]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
      }
      break;
 8002840:	e03a      	b.n	80028b8 <cmdReceivePacket+0x1bc>
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2207      	movs	r2, #7
 8002846:	721a      	strb	r2, [r3, #8]
      break;
 8002848:	e036      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DATA:
      p_cmd->rx_packet.data[p_cmd->index] = rx_data;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4413      	add	r3, r2
 8002856:	7bba      	ldrb	r2, [r7, #14]
 8002858:	701a      	strb	r2, [r3, #0]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7f9a      	ldrb	r2, [r3, #30]
 800285e:	7bbb      	ldrb	r3, [r7, #14]
 8002860:	4053      	eors	r3, r2
 8002862:	b2da      	uxtb	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	779a      	strb	r2, [r3, #30]
      p_cmd->index++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	611a      	str	r2, [r3, #16]
      if (p_cmd->index == p_cmd->rx_packet.length)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	8b92      	ldrh	r2, [r2, #28]
 800287a:	4293      	cmp	r3, r2
 800287c:	d11b      	bne.n	80028b6 <cmdReceivePacket+0x1ba>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2207      	movs	r2, #7
 8002882:	721a      	strb	r2, [r3, #8]
      }
      break;
 8002884:	e017      	b.n	80028b6 <cmdReceivePacket+0x1ba>

    case CMD_STATE_WAIT_CHECKSUM:
      p_cmd->rx_packet.check_sum_recv = rx_data;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7bba      	ldrb	r2, [r7, #14]
 800288a:	77da      	strb	r2, [r3, #31]
      p_cmd->state = CMD_STATE_WAIT_ETX;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2208      	movs	r2, #8
 8002890:	721a      	strb	r2, [r3, #8]
      break;
 8002892:	e011      	b.n	80028b8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ETX:
      if (rx_data == CMD_ETX)
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <cmdReceivePacket+0x1ae>
      {
        if (p_cmd->rx_packet.check_sum == p_cmd->rx_packet.check_sum_recv)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7f9a      	ldrb	r2, [r3, #30]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7fdb      	ldrb	r3, [r3, #31]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d101      	bne.n	80028aa <cmdReceivePacket+0x1ae>
        {
          ret = true;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	721a      	strb	r2, [r3, #8]
      break;
 80028b0:	e002      	b.n	80028b8 <cmdReceivePacket+0x1bc>
      break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <cmdReceivePacket+0x1bc>
      break;
 80028b6:	bf00      	nop
  }

  return ret;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop

080028c4 <cmdSendResp>:

  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
}

void cmdSendResp(cmd_t *p_cmd, uint8_t cmd, uint8_t err_code, uint8_t *p_data, uint32_t length)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	460b      	mov	r3, r1
 80028d0:	72fb      	strb	r3, [r7, #11]
 80028d2:	4613      	mov	r3, r2
 80028d4:	72bb      	strb	r3, [r7, #10]
  uint32_t index;


  index = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]

  p_cmd->tx_packet.buffer[index++] = CMD_STX;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	61fa      	str	r2, [r7, #28]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = cmd;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	61fa      	str	r2, [r7, #28]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	7afa      	ldrb	r2, [r7, #11]
 80028f6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_DIR_S_TO_M;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = err_code;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	61fa      	str	r2, [r7, #28]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	7aba      	ldrb	r2, [r7, #10]
 8002916:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 0) & 0xFF;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	61fa      	str	r2, [r7, #28]
 8002920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002922:	b2d1      	uxtb	r1, r2
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 8) & 0xFF;
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	0a19      	lsrs	r1, r3, #8
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	61fa      	str	r2, [r7, #28]
 8002938:	b2c9      	uxtb	r1, r1
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4413      	add	r3, r2
 800293e:	460a      	mov	r2, r1
 8002940:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

  for (int i=0; i<length; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e00e      	b.n	8002968 <cmdSendResp+0xa4>
  {
    p_cmd->tx_packet.buffer[index++] = p_data[i];
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	441a      	add	r2, r3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	61f9      	str	r1, [r7, #28]
 8002956:	7811      	ldrb	r1, [r2, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	460a      	mov	r2, r1
 800295e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  for (int i=0; i<length; i++)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3301      	adds	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800296c:	429a      	cmp	r2, r3
 800296e:	d8ec      	bhi.n	800294a <cmdSendResp+0x86>
  }

  uint8_t check_sum = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length + 5; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e00b      	b.n	8002992 <cmdSendResp+0xce>
  {
    check_sum ^= p_cmd->tx_packet.buffer[i+1];
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	3301      	adds	r3, #1
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	4053      	eors	r3, r2
 800298a:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<length + 5; i++)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3301      	adds	r3, #1
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	1d5a      	adds	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8ee      	bhi.n	800297a <cmdSendResp+0xb6>
  }
  p_cmd->tx_packet.buffer[index++] = check_sum;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	7dfa      	ldrb	r2, [r7, #23]
 80029a8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_ETX;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	61fa      	str	r2, [r7, #28]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	2203      	movs	r2, #3
 80029b8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434


  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	7818      	ldrb	r0, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f203 4334 	addw	r3, r3, #1076	; 0x434
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f000 fd0f 	bl	80033ec <uartWrite>
}
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <flashInit+0x14>)
 80029de:	4804      	ldr	r0, [pc, #16]	; (80029f0 <flashInit+0x18>)
 80029e0:	f7ff fd2a 	bl	8002438 <cliAdd>
#endif

  return true;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08002bb5 	.word	0x08002bb5
 80029f0:	0800bea8 	.word	0x0800bea8

080029f4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8002a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a08:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	e015      	b.n	8002a40 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f871 	bl	8002b04 <flashInSector>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8002a28:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da01      	bge.n	8002a34 <flashErase+0x40>
      {
        start_sector_num = i;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	3301      	adds	r3, #1
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b07      	cmp	r3, #7
 8002a44:	dde6      	ble.n	8002a14 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d020      	beq.n	8002a8e <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 8002a4c:	f002 f85e 	bl	8004b0c <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8002a58:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a5c:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 8002a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a60:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002a62:	2302      	movs	r3, #2
 8002a64:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8002a66:	f107 0208 	add.w	r2, r7, #8
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 f9bd 	bl	8004df0 <HAL_FLASHEx_Erase>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8002a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <flashErase+0x96>
    {
      ret = true;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8002a8a:	f002 f861 	bl	8004b50 <HAL_FLASH_Lock>
  }

  return ret;
 8002a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3730      	adds	r7, #48	; 0x30
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8002a9a:	b5b0      	push	{r4, r5, r7, lr}
 8002a9c:	b088      	sub	sp, #32
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 8002aaa:	f002 f82f 	bl	8004b0c <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e01b      	b.n	8002aec <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	18d1      	adds	r1, r2, r3
 8002ac4:	8afb      	ldrh	r3, [r7, #22]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	461c      	mov	r4, r3
 8002aca:	4615      	mov	r5, r2
 8002acc:	4622      	mov	r2, r4
 8002ace:	462b      	mov	r3, r5
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 ffc7 	bl	8004a64 <HAL_FLASH_Program>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8002ada:	7d7b      	ldrb	r3, [r7, #21]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <flashWrite+0x4c>
    {
      ret = false;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	77fb      	strb	r3, [r7, #31]
      break;
 8002ae4:	e006      	b.n	8002af4 <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8df      	bhi.n	8002ab4 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8002af4:	f002 f82c 	bl	8004b50 <HAL_FLASH_Lock>

  return ret;
 8002af8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b04 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b08b      	sub	sp, #44	; 0x2c
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <flashInSector+0xac>)
 8002b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b20:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <flashInSector+0xac>)
 8002b26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	4920      	ldr	r1, [pc, #128]	; (8002bb0 <flashInSector+0xac>)
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	3b01      	subs	r3, #1
 8002b38:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	3b01      	subs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d306      	bcc.n	8002b5e <flashInSector+0x5a>
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d802      	bhi.n	8002b5e <flashInSector+0x5a>
  {
    ret = true;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d306      	bcc.n	8002b74 <flashInSector+0x70>
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d802      	bhi.n	8002b74 <flashInSector+0x70>
  {
    ret = true;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d306      	bcc.n	8002b8a <flashInSector+0x86>
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d802      	bhi.n	8002b8a <flashInSector+0x86>
  {
    ret = true;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d306      	bcc.n	8002ba0 <flashInSector+0x9c>
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d802      	bhi.n	8002ba0 <flashInSector+0x9c>
  {
    ret = true;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8002ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	372c      	adds	r7, #44	; 0x2c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	20000228 	.word	0x20000228

08002bb4 <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	; 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d121      	bne.n	8002c0e <cliFlash+0x5a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	495c      	ldr	r1, [pc, #368]	; (8002d40 <cliFlash+0x18c>)
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	4798      	blx	r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	e010      	b.n	8002c02 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002be0:	4a58      	ldr	r2, [pc, #352]	; (8002d44 <cliFlash+0x190>)
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <cliFlash+0x190>)
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0a9b      	lsrs	r3, r3, #10
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4854      	ldr	r0, [pc, #336]	; (8002d48 <cliFlash+0x194>)
 8002bf8:	f7ff fb0e 	bl	8002218 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	3301      	adds	r3, #1
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	ddeb      	ble.n	8002be0 <cliFlash+0x2c>
    }

    ret = true;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d12b      	bne.n	8002c6e <cliFlash+0xba>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	494c      	ldr	r1, [pc, #304]	; (8002d4c <cliFlash+0x198>)
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	4798      	blx	r3
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d023      	beq.n	8002c6e <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	4798      	blx	r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2002      	movs	r0, #2
 8002c38:	4798      	blx	r3
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e00d      	b.n	8002c60 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	18d1      	adds	r1, r2, r3
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	483e      	ldr	r0, [pc, #248]	; (8002d50 <cliFlash+0x19c>)
 8002c56:	f7ff fadf 	bl	8002218 <cliPrintf>
    for (int i=0; i<length; i++)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d8ed      	bhi.n	8002c44 <cliFlash+0x90>
    }

    ret = true;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d121      	bne.n	8002cba <cliFlash+0x106>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4936      	ldr	r1, [pc, #216]	; (8002d54 <cliFlash+0x1a0>)
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	4798      	blx	r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	4798      	blx	r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2002      	movs	r0, #2
 8002c98:	4798      	blx	r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	69b8      	ldr	r0, [r7, #24]
 8002ca2:	f7ff fea7 	bl	80029f4 <flashErase>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 8002cac:	482a      	ldr	r0, [pc, #168]	; (8002d58 <cliFlash+0x1a4>)
 8002cae:	f7ff fab3 	bl	8002218 <cliPrintf>
 8002cb2:	e002      	b.n	8002cba <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 8002cb4:	4829      	ldr	r0, [pc, #164]	; (8002d5c <cliFlash+0x1a8>)
 8002cb6:	f7ff faaf 	bl	8002218 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d127      	bne.n	8002d12 <cliFlash+0x15e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <cliFlash+0x1ac>)
 8002cc8:	2000      	movs	r0, #0
 8002cca:	4798      	blx	r3
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01f      	beq.n	8002d12 <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	4798      	blx	r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	4798      	blx	r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	2204      	movs	r2, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6938      	ldr	r0, [r7, #16]
 8002cf4:	f7ff fed1 	bl	8002a9a <flashWrite>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8002cfe:	4819      	ldr	r0, [pc, #100]	; (8002d64 <cliFlash+0x1b0>)
 8002d00:	f7ff fa8a 	bl	8002218 <cliPrintf>
 8002d04:	e002      	b.n	8002d0c <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 8002d06:	4818      	ldr	r0, [pc, #96]	; (8002d68 <cliFlash+0x1b4>)
 8002d08:	f7ff fa86 	bl	8002218 <cliPrintf>
    }

    ret = true;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 8002d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8002d20:	4812      	ldr	r0, [pc, #72]	; (8002d6c <cliFlash+0x1b8>)
 8002d22:	f7ff fa79 	bl	8002218 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 8002d26:	4812      	ldr	r0, [pc, #72]	; (8002d70 <cliFlash+0x1bc>)
 8002d28:	f7ff fa76 	bl	8002218 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8002d2c:	4811      	ldr	r0, [pc, #68]	; (8002d74 <cliFlash+0x1c0>)
 8002d2e:	f7ff fa73 	bl	8002218 <cliPrintf>
    cliPrintf("flash write addr data\n");
 8002d32:	4811      	ldr	r0, [pc, #68]	; (8002d78 <cliFlash+0x1c4>)
 8002d34:	f7ff fa70 	bl	8002218 <cliPrintf>
  }
}
 8002d38:	bf00      	nop
 8002d3a:	3730      	adds	r7, #48	; 0x30
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	0800beb0 	.word	0x0800beb0
 8002d44:	20000228 	.word	0x20000228
 8002d48:	0800beb8 	.word	0x0800beb8
 8002d4c:	0800bec8 	.word	0x0800bec8
 8002d50:	0800bed0 	.word	0x0800bed0
 8002d54:	0800bee0 	.word	0x0800bee0
 8002d58:	0800bee8 	.word	0x0800bee8
 8002d5c:	0800bef4 	.word	0x0800bef4
 8002d60:	0800bf00 	.word	0x0800bf00
 8002d64:	0800bf08 	.word	0x0800bf08
 8002d68:	0800bf14 	.word	0x0800bf14
 8002d6c:	0800bf20 	.word	0x0800bf20
 8002d70:	0800bf2c 	.word	0x0800bf2c
 8002d74:	0800bf48 	.word	0x0800bf48
 8002d78:	0800bf64 	.word	0x0800bf64

08002d7c <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
  bool ret = true;
 8002d82:	2301      	movs	r3, #1
 8002d84:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <ledInit+0x8c>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <ledInit+0x8c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6313      	str	r3, [r2, #48]	; 0x30
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <ledInit+0x8c>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	e016      	b.n	8002df0 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002dc2:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <ledInit+0x90>)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	889b      	ldrh	r3, [r3, #4]
 8002dcc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <ledInit+0x90>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dd6:	1d3a      	adds	r2, r7, #4
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f002 f92a 	bl	8005034 <HAL_GPIO_Init>

    ledOff(i);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f837 	bl	8002e58 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dde5      	ble.n	8002dc2 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002df6:	4906      	ldr	r1, [pc, #24]	; (8002e10 <ledInit+0x94>)
 8002df8:	4806      	ldr	r0, [pc, #24]	; (8002e14 <ledInit+0x98>)
 8002dfa:	f7ff fb1d 	bl	8002438 <cliAdd>
#endif

  return ret;
 8002dfe:	7efb      	ldrb	r3, [r7, #27]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	20000268 	.word	0x20000268
 8002e10:	08002ed1 	.word	0x08002ed1
 8002e14:	0800bf7c 	.word	0x0800bf7c

08002e18 <ledOn>:

void ledOn(uint8_t ch)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d111      	bne.n	8002e4c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <ledOn+0x3c>)
 8002e2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <ledOn+0x3c>)
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	8899      	ldrh	r1, [r3, #4]
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <ledOn+0x3c>)
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	799b      	ldrb	r3, [r3, #6]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f002 fb75 	bl	8005534 <HAL_GPIO_WritePin>
 8002e4a:	e000      	b.n	8002e4e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e4c:	bf00      	nop
}
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000268 	.word	0x20000268

08002e58 <ledOff>:

void ledOff(uint8_t ch)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <ledOff+0x3c>)
 8002e6c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <ledOff+0x3c>)
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	8899      	ldrh	r1, [r3, #4]
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <ledOff+0x3c>)
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	79db      	ldrb	r3, [r3, #7]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f002 fb55 	bl	8005534 <HAL_GPIO_WritePin>
 8002e8a:	e000      	b.n	8002e8e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e8c:	bf00      	nop
}
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000268 	.word	0x20000268

08002e98 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <ledToggle+0x34>)
 8002eac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4906      	ldr	r1, [pc, #24]	; (8002ecc <ledToggle+0x34>)
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	889b      	ldrh	r3, [r3, #4]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f002 fb52 	bl	8005566 <HAL_GPIO_TogglePin>
 8002ec2:	e000      	b.n	8002ec6 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002ec4:	bf00      	nop
}
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000268 	.word	0x20000268

08002ed0 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d133      	bne.n	8002f4c <cliLed+0x7c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	491f      	ldr	r1, [pc, #124]	; (8002f68 <cliLed+0x98>)
 8002eea:	2000      	movs	r0, #0
 8002eec:	4798      	blx	r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02b      	beq.n	8002f4c <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2001      	movs	r0, #1
 8002efa:	4798      	blx	r3
 8002efc:	4603      	mov	r3, r0
 8002efe:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2002      	movs	r0, #2
 8002f06:	4798      	blx	r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002f0c:	7dbb      	ldrb	r3, [r7, #22]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <cliLed+0x48>
    {
      led_ch--;
 8002f12:	7dbb      	ldrb	r3, [r7, #22]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002f18:	f7fe fd3b 	bl	8001992 <millis>
 8002f1c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002f1e:	e00e      	b.n	8002f3e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8002f20:	f7fe fd37 	bl	8001992 <millis>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d806      	bhi.n	8002f3e <cliLed+0x6e>
      {
        pre_time = millis();
 8002f30:	f7fe fd2f 	bl	8001992 <millis>
 8002f34:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002f36:	7dbb      	ldrb	r3, [r7, #22]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff ffad 	bl	8002e98 <ledToggle>
    while(cliKeepLoop())
 8002f3e:	f7ff fa65 	bl	800240c <cliKeepLoop>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1eb      	bne.n	8002f20 <cliLed+0x50>
      }
    }

    ret = true;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4804      	ldr	r0, [pc, #16]	; (8002f6c <cliLed+0x9c>)
 8002f5c:	f7ff f95c 	bl	8002218 <cliPrintf>
  }
}
 8002f60:	bf00      	nop
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	0800bf80 	.word	0x0800bf80
 8002f6c:	0800bf88 	.word	0x0800bf88

08002f70 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
  bool ret = true;
 8002f76:	2301      	movs	r3, #1
 8002f78:	71fb      	strb	r3, [r7, #7]

#if 1
  // 만약 Reset 핀이 눌렸다면
  //
  if (RCC->CSR & (1<<26))
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <resetInit+0x50>)
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d012      	beq.n	8002fac <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 f866 	bl	8003058 <rtcBackupRegRead>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	3301      	adds	r3, #1
 8002f90:	4619      	mov	r1, r3
 8002f92:	2001      	movs	r0, #1
 8002f94:	f000 f870 	bl	8003078 <rtcBackupRegWrite>
    delay(500);
 8002f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f9c:	f7fe fcee 	bl	800197c <delay>
    reset_count = rtcBackupRegRead(1);
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	f000 f859 	bl	8003058 <rtcBackupRegRead>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	4a06      	ldr	r2, [pc, #24]	; (8002fc4 <resetInit+0x54>)
 8002faa:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0);
 8002fac:	2100      	movs	r1, #0
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f000 f862 	bl	8003078 <rtcBackupRegWrite>
#endif

  return ret;
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	200010f0 	.word	0x200010f0

08002fc8 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return reset_count;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <resetGetCount+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	200010f0 	.word	0x200010f0

08002fe0 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
  bool ret = true;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	4b17      	ldr	r3, [pc, #92]	; (800304c <rtcInit+0x6c>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <rtcInit+0x6c>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b14      	ldr	r3, [pc, #80]	; (800304c <rtcInit+0x6c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 8003006:	4b12      	ldr	r3, [pc, #72]	; (8003050 <rtcInit+0x70>)
 8003008:	4a12      	ldr	r2, [pc, #72]	; (8003054 <rtcInit+0x74>)
 800300a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <rtcInit+0x70>)
 800300e:	2200      	movs	r2, #0
 8003010:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <rtcInit+0x70>)
 8003014:	227f      	movs	r2, #127	; 0x7f
 8003016:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <rtcInit+0x70>)
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <rtcInit+0x70>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <rtcInit+0x70>)
 8003026:	2200      	movs	r2, #0
 8003028:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <rtcInit+0x70>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003030:	4807      	ldr	r0, [pc, #28]	; (8003050 <rtcInit+0x70>)
 8003032:	f003 f8bf 	bl	80061b4 <HAL_RTC_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <rtcInit+0x60>
  {
    Error_Handler();
 800303c:	f7fe fd32 	bl	8001aa4 <Error_Handler>
  }

  return ret;
 8003040:	79fb      	ldrb	r3, [r7, #7]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	200010f4 	.word	0x200010f4
 8003054:	40002800 	.word	0x40002800

08003058 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4804      	ldr	r0, [pc, #16]	; (8003074 <rtcBackupRegRead+0x1c>)
 8003064:	f003 f9a5 	bl	80063b2 <HAL_RTCEx_BKUPRead>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200010f4 	.word	0x200010f4

08003078 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4803      	ldr	r0, [pc, #12]	; (8003094 <rtcBackupRegWrite+0x1c>)
 8003088:	f003 f979 	bl	800637e <HAL_RTCEx_BKUPWrite>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	200010f4 	.word	0x200010f4

08003098 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_RTC_MspInit+0x24>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RTC_MspInit+0x28>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40002800 	.word	0x40002800
 80030c0:	42470e3c 	.word	0x42470e3c

080030c4 <uartInit>:
#endif



bool uartInit(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	e007      	b.n	80030e0 <uartInit+0x1c>
  {
    is_open[i] = false;
 80030d0:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <uartInit+0x30>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3301      	adds	r3, #1
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	ddf4      	ble.n	80030d0 <uartInit+0xc>
  }


  return true;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20001114 	.word	0x20001114

080030f8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <uartOpen+0x1c>
 800310e:	2b01      	cmp	r3, #1
 8003110:	d075      	beq.n	80031fe <uartOpen+0x106>
 8003112:	e0ec      	b.n	80032ee <uartOpen+0x1f6>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8003114:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <uartOpen+0x200>)
 8003116:	4a79      	ldr	r2, [pc, #484]	; (80032fc <uartOpen+0x204>)
 8003118:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800311a:	4a77      	ldr	r2, [pc, #476]	; (80032f8 <uartOpen+0x200>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <uartOpen+0x200>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8003126:	4b74      	ldr	r3, [pc, #464]	; (80032f8 <uartOpen+0x200>)
 8003128:	2200      	movs	r2, #0
 800312a:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 800312c:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <uartOpen+0x200>)
 800312e:	2200      	movs	r2, #0
 8003130:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8003132:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <uartOpen+0x200>)
 8003134:	220c      	movs	r2, #12
 8003136:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8003138:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <uartOpen+0x200>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800313e:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <uartOpen+0x200>)
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]

        //HAL_UART_DeInit(&huart1);

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	4a6d      	ldr	r2, [pc, #436]	; (8003300 <uartOpen+0x208>)
 800314a:	4413      	add	r3, r2
 800314c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003150:	496c      	ldr	r1, [pc, #432]	; (8003304 <uartOpen+0x20c>)
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fe21 	bl	8001d9a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <uartOpen+0x210>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a69      	ldr	r2, [pc, #420]	; (8003308 <uartOpen+0x210>)
 8003162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b67      	ldr	r3, [pc, #412]	; (8003308 <uartOpen+0x210>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	2104      	movs	r1, #4
 8003178:	203a      	movs	r0, #58	; 0x3a
 800317a:	f001 f83e 	bl	80041fa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800317e:	203a      	movs	r0, #58	; 0x3a
 8003180:	f001 f857 	bl	8004232 <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	2046      	movs	r0, #70	; 0x46
 800318a:	f001 f836 	bl	80041fa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800318e:	2046      	movs	r0, #70	; 0x46
 8003190:	f001 f84f 	bl	8004232 <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8003194:	4858      	ldr	r0, [pc, #352]	; (80032f8 <uartOpen+0x200>)
 8003196:	f003 f924 	bl	80063e2 <HAL_UART_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <uartOpen+0xae>
        {
          ret = false;
 80031a0:	2300      	movs	r3, #0
 80031a2:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 80031a4:	e0a3      	b.n	80032ee <uartOpen+0x1f6>
          ret = true;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <uartOpen+0x214>)
 80031ae:	2101      	movs	r1, #1
 80031b0:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80031b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b6:	4953      	ldr	r1, [pc, #332]	; (8003304 <uartOpen+0x20c>)
 80031b8:	484f      	ldr	r0, [pc, #316]	; (80032f8 <uartOpen+0x200>)
 80031ba:	f003 fa25 	bl	8006608 <HAL_UART_Receive_DMA>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <uartOpen+0xd0>
            ret = false;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a4d      	ldr	r2, [pc, #308]	; (8003300 <uartOpen+0x208>)
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	3308      	adds	r3, #8
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <uartOpen+0x218>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	1a8a      	subs	r2, r1, r2
 80031de:	4948      	ldr	r1, [pc, #288]	; (8003300 <uartOpen+0x208>)
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	440b      	add	r3, r1
 80031e4:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80031e6:	79fa      	ldrb	r2, [r7, #7]
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	4945      	ldr	r1, [pc, #276]	; (8003300 <uartOpen+0x208>)
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	440a      	add	r2, r1
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4943      	ldr	r1, [pc, #268]	; (8003300 <uartOpen+0x208>)
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	440b      	add	r3, r1
 80031f8:	3304      	adds	r3, #4
 80031fa:	601a      	str	r2, [r3, #0]
      break;
 80031fc:	e077      	b.n	80032ee <uartOpen+0x1f6>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80031fe:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <uartOpen+0x200>)
 8003200:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <uartOpen+0x204>)
 8003202:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8003204:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <uartOpen+0x200>)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <uartOpen+0x200>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <uartOpen+0x200>)
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <uartOpen+0x200>)
 8003218:	2200      	movs	r2, #0
 800321a:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <uartOpen+0x200>)
 800321e:	220c      	movs	r2, #12
 8003220:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003222:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <uartOpen+0x200>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003228:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <uartOpen+0x200>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 800322e:	4832      	ldr	r0, [pc, #200]	; (80032f8 <uartOpen+0x200>)
 8003230:	f003 f924 	bl	800647c <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <uartOpen+0x208>)
 800323a:	4413      	add	r3, r2
 800323c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003240:	4930      	ldr	r1, [pc, #192]	; (8003304 <uartOpen+0x20c>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fda9 	bl	8001d9a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <uartOpen+0x210>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <uartOpen+0x210>)
 8003252:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <uartOpen+0x210>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2104      	movs	r1, #4
 8003268:	203a      	movs	r0, #58	; 0x3a
 800326a:	f000 ffc6 	bl	80041fa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800326e:	203a      	movs	r0, #58	; 0x3a
 8003270:	f000 ffdf 	bl	8004232 <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	2104      	movs	r1, #4
 8003278:	2046      	movs	r0, #70	; 0x46
 800327a:	f000 ffbe 	bl	80041fa <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800327e:	2046      	movs	r0, #70	; 0x46
 8003280:	f000 ffd7 	bl	8004232 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8003284:	481c      	ldr	r0, [pc, #112]	; (80032f8 <uartOpen+0x200>)
 8003286:	f003 f8ac 	bl	80063e2 <HAL_UART_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <uartOpen+0x19e>
      {
        ret = false;
 8003290:	2300      	movs	r3, #0
 8003292:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8003294:	e02a      	b.n	80032ec <uartOpen+0x1f4>
        ret = true;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <uartOpen+0x214>)
 800329e:	2101      	movs	r1, #1
 80032a0:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80032a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a6:	4917      	ldr	r1, [pc, #92]	; (8003304 <uartOpen+0x20c>)
 80032a8:	4813      	ldr	r0, [pc, #76]	; (80032f8 <uartOpen+0x200>)
 80032aa:	f003 f9ad 	bl	8006608 <HAL_UART_Receive_DMA>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <uartOpen+0x1c0>
          ret = false;
 80032b4:	2300      	movs	r3, #0
 80032b6:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <uartOpen+0x208>)
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	4413      	add	r3, r2
 80032c0:	3308      	adds	r3, #8
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <uartOpen+0x218>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	1a8a      	subs	r2, r1, r2
 80032ce:	490c      	ldr	r1, [pc, #48]	; (8003300 <uartOpen+0x208>)
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	440b      	add	r3, r1
 80032d4:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4909      	ldr	r1, [pc, #36]	; (8003300 <uartOpen+0x208>)
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	440a      	add	r2, r1
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4907      	ldr	r1, [pc, #28]	; (8003300 <uartOpen+0x208>)
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	440b      	add	r3, r1
 80032e8:	3304      	adds	r3, #4
 80032ea:	601a      	str	r2, [r3, #0]
      break;
 80032ec:	bf00      	nop
  }

  return ret;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20001228 	.word	0x20001228
 80032fc:	40011000 	.word	0x40011000
 8003300:	20001118 	.word	0x20001118
 8003304:	20001128 	.word	0x20001128
 8003308:	40023800 	.word	0x40023800
 800330c:	20001114 	.word	0x20001114
 8003310:	200012c8 	.word	0x200012c8

08003314 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <uartAvailable+0x1a>
 8003328:	2b01      	cmp	r3, #1
 800332a:	d018      	beq.n	800335e <uartAvailable+0x4a>
 800332c:	e02f      	b.n	800338e <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <uartAvailable+0x84>)
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4413      	add	r3, r2
 8003336:	3308      	adds	r3, #8
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <uartAvailable+0x88>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	1a8a      	subs	r2, r1, r2
 8003344:	4914      	ldr	r1, [pc, #80]	; (8003398 <uartAvailable+0x84>)
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	440b      	add	r3, r1
 800334a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <uartAvailable+0x84>)
 8003352:	4413      	add	r3, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fd78 	bl	8001e4a <qbufferAvailable>
 800335a:	60f8      	str	r0, [r7, #12]
      break;
 800335c:	e017      	b.n	800338e <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <uartAvailable+0x84>)
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	3308      	adds	r3, #8
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <uartAvailable+0x88>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	1a8a      	subs	r2, r1, r2
 8003374:	4908      	ldr	r1, [pc, #32]	; (8003398 <uartAvailable+0x84>)
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	440b      	add	r3, r1
 800337a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	4a05      	ldr	r2, [pc, #20]	; (8003398 <uartAvailable+0x84>)
 8003382:	4413      	add	r3, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fd60 	bl	8001e4a <qbufferAvailable>
 800338a:	60f8      	str	r0, [r7, #12]
      break;
 800338c:	bf00      	nop
  }

  return ret;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20001118 	.word	0x20001118
 800339c:	200012c8 	.word	0x200012c8

080033a0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <uartRead+0x1a>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d008      	beq.n	80033ca <uartRead+0x2a>
 80033b8:	e00f      	b.n	80033da <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80033ba:	f107 030f 	add.w	r3, r7, #15
 80033be:	2201      	movs	r2, #1
 80033c0:	4619      	mov	r1, r3
 80033c2:	4808      	ldr	r0, [pc, #32]	; (80033e4 <uartRead+0x44>)
 80033c4:	f7fe fd04 	bl	8001dd0 <qbufferRead>
      break;
 80033c8:	e007      	b.n	80033da <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80033ca:	f107 030f 	add.w	r3, r7, #15
 80033ce:	2201      	movs	r2, #1
 80033d0:	4619      	mov	r1, r3
 80033d2:	4805      	ldr	r0, [pc, #20]	; (80033e8 <uartRead+0x48>)
 80033d4:	f7fe fcfc 	bl	8001dd0 <qbufferRead>
      break;
 80033d8:	bf00      	nop
  }

  return ret;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20001118 	.word	0x20001118
 80033e8:	20001128 	.word	0x20001128

080033ec <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <uartWrite+0x1e>
 8003404:	2b01      	cmp	r3, #1
 8003406:	d00f      	beq.n	8003428 <uartWrite+0x3c>
 8003408:	e020      	b.n	800344c <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	b29a      	uxth	r2, r3
 800340e:	2364      	movs	r3, #100	; 0x64
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4811      	ldr	r0, [pc, #68]	; (8003458 <uartWrite+0x6c>)
 8003414:	f003 f85e 	bl	80064d4 <HAL_UART_Transmit>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d111      	bne.n	8003446 <uartWrite+0x5a>
        {
          ret = length;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	617b      	str	r3, [r7, #20]
        }
      break;
 8003426:	e00e      	b.n	8003446 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	b29a      	uxth	r2, r3
 800342c:	2364      	movs	r3, #100	; 0x64
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4809      	ldr	r0, [pc, #36]	; (8003458 <uartWrite+0x6c>)
 8003432:	f003 f84f 	bl	80064d4 <HAL_UART_Transmit>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <uartWrite+0x5e>
      {
        ret = length;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	617b      	str	r3, [r7, #20]
      }
      break;
 8003444:	e001      	b.n	800344a <uartWrite+0x5e>
      break;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <uartWrite+0x60>
      break;
 800344a:	bf00      	nop
  }

  return ret;
 800344c:	697b      	ldr	r3, [r7, #20]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20001228 	.word	0x20001228

0800345c <uartPrintf>:

  return ret;
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800345c:	b40e      	push	{r1, r2, r3}
 800345e:	b580      	push	{r7, lr}
 8003460:	b0c7      	sub	sp, #284	; 0x11c
 8003462:	af00      	add	r7, sp, #0
 8003464:	4602      	mov	r2, r0
 8003466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800346a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800346e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003470:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003474:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003478:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800347c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800347e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003486:	f107 0010 	add.w	r0, r7, #16
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003494:	f005 fd0e 	bl	8008eb4 <vsniprintf>
 8003498:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800349c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034a0:	f107 0110 	add.w	r1, r7, #16
 80034a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80034a8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff9c 	bl	80033ec <uartWrite>
 80034b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80034b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80034bc:	4618      	mov	r0, r3
 80034be:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80034c2:	46bd      	mov	sp, r7
 80034c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034c8:	b003      	add	sp, #12
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_UART_MspInit+0x18c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	f040 80b0 	bne.w	8003678 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b59      	ldr	r3, [pc, #356]	; (8003684 <HAL_UART_MspInit+0x190>)
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_UART_MspInit+0x190>)
 8003522:	f043 0310 	orr.w	r3, r3, #16
 8003526:	6453      	str	r3, [r2, #68]	; 0x44
 8003528:	4b56      	ldr	r3, [pc, #344]	; (8003684 <HAL_UART_MspInit+0x190>)
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_UART_MspInit+0x190>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_UART_MspInit+0x190>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6313      	str	r3, [r2, #48]	; 0x30
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_UART_MspInit+0x190>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	4b4b      	ldr	r3, [pc, #300]	; (8003684 <HAL_UART_MspInit+0x190>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_UART_MspInit+0x190>)
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	6313      	str	r3, [r2, #48]	; 0x30
 8003560:	4b48      	ldr	r3, [pc, #288]	; (8003684 <HAL_UART_MspInit+0x190>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357a:	2303      	movs	r3, #3
 800357c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800357e:	2307      	movs	r3, #7
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	4619      	mov	r1, r3
 8003588:	483f      	ldr	r0, [pc, #252]	; (8003688 <HAL_UART_MspInit+0x194>)
 800358a:	f001 fd53 	bl	8005034 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800359e:	2307      	movs	r3, #7
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4838      	ldr	r0, [pc, #224]	; (800368c <HAL_UART_MspInit+0x198>)
 80035aa:	f001 fd43 	bl	8005034 <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 80035ae:	4b38      	ldr	r3, [pc, #224]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035b0:	4a38      	ldr	r2, [pc, #224]	; (8003694 <HAL_UART_MspInit+0x1a0>)
 80035b2:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035b4:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ba:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035bc:	4b34      	ldr	r3, [pc, #208]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ce:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d0:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e8:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035ee:	4828      	ldr	r0, [pc, #160]	; (8003690 <HAL_UART_MspInit+0x19c>)
 80035f0:	f000 fe48 	bl	8004284 <HAL_DMA_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80035fa:	f7fe fa53 	bl	8001aa4 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_UART_MspInit+0x19c>)
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
 8003604:	4a22      	ldr	r2, [pc, #136]	; (8003690 <HAL_UART_MspInit+0x19c>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <HAL_UART_MspInit+0x1a8>)
 800360e:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003616:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800362a:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003638:	4b17      	ldr	r3, [pc, #92]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 800363a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363e:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003642:	2200      	movs	r2, #0
 8003644:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800364c:	4812      	ldr	r0, [pc, #72]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 800364e:	f000 fe19 	bl	8004284 <HAL_DMA_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8003658:	f7fe fa24 	bl	8001aa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
 8003662:	4a0d      	ldr	r2, [pc, #52]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	2025      	movs	r0, #37	; 0x25
 800366e:	f000 fdc4 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003672:	2025      	movs	r0, #37	; 0x25
 8003674:	f000 fddd 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003678:	bf00      	nop
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40011000 	.word	0x40011000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020400 	.word	0x40020400
 8003690:	20001268 	.word	0x20001268
 8003694:	400264b8 	.word	0x400264b8
 8003698:	200012c8 	.word	0x200012c8
 800369c:	40026440 	.word	0x40026440

080036a0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_UART_MspDeInit+0x54>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11b      	bne.n	80036ea <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_UART_MspDeInit+0x58>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_UART_MspDeInit+0x58>)
 80036b8:	f023 0310 	bic.w	r3, r3, #16
 80036bc:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80036be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c2:	480e      	ldr	r0, [pc, #56]	; (80036fc <HAL_UART_MspDeInit+0x5c>)
 80036c4:	f001 fe3a 	bl	800533c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	480d      	ldr	r0, [pc, #52]	; (8003700 <HAL_UART_MspDeInit+0x60>)
 80036cc:	f001 fe36 	bl	800533c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fe83 	bl	80043e0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fe7e 	bl	80043e0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80036e4:	2025      	movs	r0, #37	; 0x25
 80036e6:	f000 fdb2 	bl	800424e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40020000 	.word	0x40020000
 8003700:	40020400 	.word	0x40020400

08003704 <ymodemInit>:




bool ymodemInit(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <ymodemInit+0x14>)
 800370a:	4804      	ldr	r0, [pc, #16]	; (800371c <ymodemInit+0x18>)
 800370c:	f7fe fe94 	bl	8002438 <cliAdd>
#endif

  return true;
 8003710:	2301      	movs	r3, #1
}
 8003712:	4618      	mov	r0, r3
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	08003d21 	.word	0x08003d21
 800371c:	0800bfa8 	.word	0x0800bfa8

08003720 <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]

  p_modem->ch = ch;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	701a      	strb	r2, [r3, #0]
  p_modem->is_init = true;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	705a      	strb	r2, [r3, #1]

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	729a      	strb	r2, [r3, #10]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  p_modem->pre_time        = millis();
 800375e:	f7fe f918 	bl	8001992 <millis>
 8003762:	4602      	mov	r2, r0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]
  p_modem->start_time      = 3000;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800376e:	611a      	str	r2, [r3, #16]
  p_modem->ack_mode        = 0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	765a      	strb	r2, [r3, #25]

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  return ret;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]

  ret = uartWrite(p_modem->ch, &data, 1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	1cf9      	adds	r1, r7, #3
 80037a2:	2201      	movs	r2, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe21 	bl	80033ec <uartWrite>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]

  return ret;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  bool ret = true;
 80037c8:	2301      	movs	r3, #1
 80037ca:	72fb      	strb	r3, [r7, #11]
  bool valid;
  uint16_t size_i;

  valid = false;
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<128; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e01c      	b.n	8003810 <ymodemGetFileInfo+0x50>
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	7819      	ldrb	r1, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	331a      	adds	r3, #26
 80037ea:	460a      	mov	r2, r1
 80037ec:	701a      	strb	r2, [r3, #0]
    if (p_modem->file_name[i] == 0x00)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	331a      	adds	r3, #26
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <ymodemGetFileInfo+0x4a>
    {
      size_i = i + 1;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	82bb      	strh	r3, [r7, #20]
      valid = true;
 8003804:	2301      	movs	r3, #1
 8003806:	75fb      	strb	r3, [r7, #23]
      break;
 8003808:	e005      	b.n	8003816 <ymodemGetFileInfo+0x56>
  for (int i=0; i<128; i++)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3301      	adds	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b7f      	cmp	r3, #127	; 0x7f
 8003814:	dddf      	ble.n	80037d6 <ymodemGetFileInfo+0x16>
    }
  }

  if (valid == true)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d026      	beq.n	800386a <ymodemGetFileInfo+0xaa>
  {
    for (int i=size_i; i<128; i++)
 800381c:	8abb      	ldrh	r3, [r7, #20]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e012      	b.n	8003848 <ymodemGetFileInfo+0x88>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b20      	cmp	r3, #32
 8003830:	d107      	bne.n	8003842 <ymodemGetFileInfo+0x82>
      {
        p_modem->rx_packet.data[i] = 0x00;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
        break;
 8003840:	e005      	b.n	800384e <ymodemGetFileInfo+0x8e>
    for (int i=size_i; i<128; i++)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b7f      	cmp	r3, #127	; 0x7f
 800384c:	dde9      	ble.n	8003822 <ymodemGetFileInfo+0x62>
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003854:	8abb      	ldrh	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f005 faf3 	bl	8008e48 <strtoul>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }

  return ret;
 800386a:	7afb      	ldrb	r3, [r7, #11]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <ymodemReceive>:

  return true;
}

bool ymodemReceive(ymodem_t *p_modem)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
  bool update = false;
 8003880:	2300      	movs	r3, #0
 8003882:	73bb      	strb	r3, [r7, #14]
  uint32_t buf_length;


  if (p_modem->is_init != true)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	f083 0301 	eor.w	r3, r3, #1
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d004      	beq.n	800389c <ymodemReceive+0x28>
  {
    p_modem->type = YMODEM_TYPE_ERROR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2204      	movs	r2, #4
 8003896:	721a      	strb	r2, [r3, #8]
    return true;
 8003898:	2301      	movs	r3, #1
 800389a:	e130      	b.n	8003afe <ymodemReceive+0x28a>
  }

  if (uartAvailable(p_modem->ch) > 0)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fd37 	bl	8003314 <uartAvailable>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <ymodemReceive+0x4e>
  {
    p_modem->rx_data = uartRead(p_modem->ch);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fd75 	bl	80033a0 <uartRead>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	725a      	strb	r2, [r3, #9]
    update = true;
 80038be:	2301      	movs	r3, #1
 80038c0:	73bb      	strb	r3, [r7, #14]

    //uartPrintf(_DEF_UART1, "Rx 0x%X, %d\n", p_modem->rx_data, p_modem->rx_packet.state);
  }

  if (update == true && ymodemReceivePacket(&p_modem->rx_packet, p_modem->rx_data) == true)
 80038c2:	7bbb      	ldrb	r3, [r7, #14]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8101 	beq.w	8003acc <ymodemReceive+0x258>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7a5b      	ldrb	r3, [r3, #9]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 f916 	bl	8003b08 <ymodemReceivePacket>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80f4 	beq.w	8003acc <ymodemReceive+0x258>
  {
    //uartPrintf(_DEF_UART1, "RxPacket 0x%X\n", p_modem->rx_packet.stx);

    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7a9b      	ldrb	r3, [r3, #10]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <ymodemReceive+0x88>
    {
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80038f2:	2b18      	cmp	r3, #24
 80038f4:	d102      	bne.n	80038fc <ymodemReceive+0x88>
      {
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2205      	movs	r2, #5
 80038fa:	729a      	strb	r2, [r3, #10]
      }
    }

    switch(p_modem->state)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7a9b      	ldrb	r3, [r3, #10]
 8003900:	2b05      	cmp	r3, #5
 8003902:	f200 80fb 	bhi.w	8003afc <ymodemReceive+0x288>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <ymodemReceive+0x98>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003925 	.word	0x08003925
 8003910:	08003971 	.word	0x08003971
 8003914:	080039fd 	.word	0x080039fd
 8003918:	08003a79 	.word	0x08003a79
 800391c:	08003a91 	.word	0x08003a91
 8003920:	08003aab 	.word	0x08003aab
    {
      case YMODEM_STATE_WAIT_HEAD:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800392a:	2b04      	cmp	r3, #4
 800392c:	d107      	bne.n	800393e <ymodemReceive+0xca>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 800392e:	2115      	movs	r1, #21
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff2b 	bl	800378c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	729a      	strb	r2, [r3, #10]

          p_modem->state = YMODEM_STATE_WAIT_FIRST;
          p_modem->type = YMODEM_TYPE_START;
          ret = true;
        }
        break;
 800393c:	e0c2      	b.n	8003ac4 <ymodemReceive+0x250>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003944:	2b00      	cmp	r3, #0
 8003946:	f040 80bd 	bne.w	8003ac4 <ymodemReceive+0x250>
          p_modem->file_addr = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ff34 	bl	80037c0 <ymodemGetFileInfo>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	765a      	strb	r2, [r3, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_START;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	721a      	strb	r2, [r3, #8]
          ret = true;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
        break;
 800396e:	e0a9      	b.n	8003ac4 <ymodemReceive+0x250>

      case YMODEM_STATE_WAIT_FIRST:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d107      	bne.n	800398a <ymodemReceive+0x116>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 800397a:	2115      	movs	r1, #21
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff05 	bl	800378c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	729a      	strb	r2, [r3, #10]
          ymodemPutch(p_modem, YMODEM_ACK);

          p_modem->state = YMODEM_STATE_WAIT_DATA;
          p_modem->type = YMODEM_TYPE_DATA;
        }
        break;
 8003988:	e09e      	b.n	8003ac8 <ymodemReceive+0x254>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003990:	2b01      	cmp	r3, #1
 8003992:	f040 8099 	bne.w	8003ac8 <ymodemReceive+0x254>
          p_modem->file_addr = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received = 0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          buf_length = (p_modem->file_length - p_modem->file_addr);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d903      	bls.n	80039cc <ymodemReceive+0x158>
            buf_length = p_modem->rx_packet.length;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039ca:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_received += buf_length;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	441a      	add	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 80039e6:	2106      	movs	r1, #6
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fecf 	bl	800378c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2202      	movs	r2, #2
 80039f2:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	721a      	strb	r2, [r3, #8]
        break;
 80039fa:	e065      	b.n	8003ac8 <ymodemReceive+0x254>

      case YMODEM_STATE_WAIT_DATA:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d107      	bne.n	8003a16 <ymodemReceive+0x1a2>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 8003a06:	2115      	movs	r1, #21
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff febf 	bl	800378c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	729a      	strb	r2, [r3, #10]
          //ymodemPutch(p_modem, YMODEM_ACK);
          p_modem->ack_mode = YMODEM_RESP_ACK;
          p_modem->type = YMODEM_TYPE_DATA;
          ret = true;
        }
        break;
 8003a14:	e059      	b.n	8003aca <ymodemReceive+0x256>
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d903      	bls.n	8003a3c <ymodemReceive+0x1c8>
            buf_length = p_modem->rx_packet.length;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a3a:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	441a      	add	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	441a      	add	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	765a      	strb	r2, [r3, #25]
          p_modem->type = YMODEM_TYPE_DATA;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	721a      	strb	r2, [r3, #8]
          ret = true;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
        break;
 8003a76:	e028      	b.n	8003aca <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_LAST:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003a78:	2106      	movs	r1, #6
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe86 	bl	800378c <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C);
 8003a80:	2143      	movs	r1, #67	; 0x43
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe82 	bl	800378c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	729a      	strb	r2, [r3, #10]
        break;
 8003a8e:	e01c      	b.n	8003aca <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_END:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003a90:	2106      	movs	r1, #6
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fe7a 	bl	800378c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_END;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa8:	e00f      	b.n	8003aca <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_CANCEL:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003aaa:	2106      	movs	r1, #6
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fe6d 	bl	800378c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ac2:	e002      	b.n	8003aca <ymodemReceive+0x256>
        break;
 8003ac4:	bf00      	nop
 8003ac6:	e019      	b.n	8003afc <ymodemReceive+0x288>
        break;
 8003ac8:	bf00      	nop
    switch(p_modem->state)
 8003aca:	e017      	b.n	8003afc <ymodemReceive+0x288>
    }
  }
  else
  {
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d112      	bne.n	8003afc <ymodemReceive+0x288>
    {
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8003ad6:	f7fd ff5c 	bl	8001992 <millis>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	1ad2      	subs	r2, r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d308      	bcc.n	8003afc <ymodemReceive+0x288>
      {
        p_modem->pre_time = millis();
 8003aea:	f7fd ff52 	bl	8001992 <millis>
 8003aee:	4602      	mov	r2, r0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60da      	str	r2, [r3, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8003af4:	2143      	movs	r1, #67	; 0x43
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fe48 	bl	800378c <ymodemPutch>
      }
    }
  }

  return ret;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop

08003b08 <ymodemReceivePacket>:

bool ymodemReceivePacket(ymodem_packet_t *p_packet, uint8_t data_in)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]


  switch(p_packet->state)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	f200 809b 	bhi.w	8003c58 <ymodemReceivePacket+0x150>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <ymodemReceivePacket+0x20>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b41 	.word	0x08003b41
 8003b2c:	08003b95 	.word	0x08003b95
 8003b30:	08003ba3 	.word	0x08003ba3
 8003b34:	08003bcd 	.word	0x08003bcd
 8003b38:	08003bfb 	.word	0x08003bfb
 8003b3c:	08003c0f 	.word	0x08003c0f
  {
    case YMODEM_PACKET_WAIT_FIRST:
      if (data_in == YMODEM_SOH)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d108      	bne.n	8003b58 <ymodemReceivePacket+0x50>
      {
        p_packet->length = 128;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_STX)
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d109      	bne.n	8003b72 <ymodemReceivePacket+0x6a>
      {
        p_packet->length = 1024;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b64:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_EOT)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d104      	bne.n	8003b82 <ymodemReceivePacket+0x7a>
      {
        p_packet->stx = data_in;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      if (data_in == YMODEM_CAN)
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	2b18      	cmp	r3, #24
 8003b86:	d162      	bne.n	8003c4e <ymodemReceivePacket+0x146>
      {
        p_packet->stx = data_in;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e05c      	b.n	8003c4e <ymodemReceivePacket+0x146>

    case YMODEM_PACKET_WAIT_SEQ1:
      p_packet->seq[0] = data_in;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	715a      	strb	r2, [r3, #5]
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ba0:	e05a      	b.n	8003c58 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_SEQ2:
      p_packet->seq[1] = data_in;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	719a      	strb	r2, [r3, #6]
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	795a      	ldrb	r2, [r3, #5]
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d106      	bne.n	8003bc4 <ymodemReceivePacket+0xbc>
      {
        p_packet->index = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	805a      	strh	r2, [r3, #2]
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
      }
      break;
 8003bc2:	e049      	b.n	8003c58 <ymodemReceivePacket+0x150>
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	701a      	strb	r2, [r3, #0]
      break;
 8003bca:	e045      	b.n	8003c58 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_DATA:
      p_packet->data[p_packet->index] = data_in;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	8852      	ldrh	r2, [r2, #2]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	701a      	strb	r2, [r3, #0]
      p_packet->index++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	885b      	ldrh	r3, [r3, #2]
 8003bde:	3301      	adds	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	805a      	strh	r2, [r3, #2]
      if (p_packet->index >= p_packet->length)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	885a      	ldrh	r2, [r3, #2]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	899b      	ldrh	r3, [r3, #12]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d32f      	bcc.n	8003c52 <ymodemReceivePacket+0x14a>
      {
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003bf8:	e02b      	b.n	8003c52 <ymodemReceivePacket+0x14a>

    case YMODEM_PACKET_WAIT_CRCH:
      p_packet->crc_recv = (data_in<<8);
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2205      	movs	r2, #5
 8003c0a:	701a      	strb	r2, [r3, #0]
      break;
 8003c0c:	e024      	b.n	8003c58 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_CRCL:
      p_packet->crc_recv |= (data_in<<0);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8a1a      	ldrh	r2, [r3, #16]
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	4313      	orrs	r3, r2
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	701a      	strb	r2, [r3, #0]

      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	899b      	ldrh	r3, [r3, #12]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 f83a 	bl	8003ca8 <crc16>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	81da      	strh	r2, [r3, #14]

      if (p_packet->crc == p_packet->crc_recv)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	89da      	ldrh	r2, [r3, #14]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8a1b      	ldrh	r3, [r3, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d106      	bne.n	8003c56 <ymodemReceivePacket+0x14e>
      {
        ret = true;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      }
      //uartPrintf(_DEF_UART1, "crc %X %X\n", p_packet->crc, p_packet->crc_recv);
      break;
 8003c4c:	e003      	b.n	8003c56 <ymodemReceivePacket+0x14e>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <ymodemReceivePacket+0x150>
      break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <ymodemReceivePacket+0x150>
      break;
 8003c56:	bf00      	nop
  }

  return ret;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop

08003c64 <crc_update>:


#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	80fb      	strh	r3, [r7, #6]
  uint16_t xor = crc_in >> 15;
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	0bdb      	lsrs	r3, r3, #15
 8003c74:	81bb      	strh	r3, [r7, #12]
  uint16_t out = crc_in << 1;
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	81fb      	strh	r3, [r7, #14]

  if (incr)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <crc_update+0x24>
  {
    out++;
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	3301      	adds	r3, #1
 8003c86:	81fb      	strh	r3, [r7, #14]
  }

  if (xor)
 8003c88:	89bb      	ldrh	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <crc_update+0x36>
  {
    out ^= CRC_POLY;
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
 8003c90:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003c94:	f083 0301 	eor.w	r3, r3, #1
 8003c98:	81fb      	strh	r3, [r7, #14]
  }

  return out;
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <crc16>:

uint16_t crc16(uint8_t *data, uint16_t size)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	807b      	strh	r3, [r7, #2]
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	81fb      	strh	r3, [r7, #14]
 8003cb8:	e01a      	b.n	8003cf0 <crc16+0x48>
  {
    for (i = 0x80; i; i >>= 1)
 8003cba:	2380      	movs	r3, #128	; 0x80
 8003cbc:	81bb      	strh	r3, [r7, #12]
 8003cbe:	e00e      	b.n	8003cde <crc16+0x36>
    {
      crc = crc_update(crc, *data & i);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	89bb      	ldrh	r3, [r7, #12]
 8003cc8:	401a      	ands	r2, r3
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ffc8 	bl	8003c64 <crc_update>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	81fb      	strh	r3, [r7, #14]
    for (i = 0x80; i; i >>= 1)
 8003cd8:	89bb      	ldrh	r3, [r7, #12]
 8003cda:	085b      	lsrs	r3, r3, #1
 8003cdc:	81bb      	strh	r3, [r7, #12]
 8003cde:	89bb      	ldrh	r3, [r7, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ed      	bne.n	8003cc0 <crc16+0x18>
  for (crc = 0; size > 0; size--, data++)
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	807b      	strh	r3, [r7, #2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3301      	adds	r3, #1
 8003cee:	607b      	str	r3, [r7, #4]
 8003cf0:	887b      	ldrh	r3, [r7, #2]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e1      	bne.n	8003cba <crc16+0x12>
    }
  }

  for (i = 0; i < 16; i++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	e009      	b.n	8003d10 <crc16+0x68>
  {
    crc = crc_update(crc, 0);
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ffaf 	bl	8003c64 <crc_update>
 8003d06:	4603      	mov	r3, r0
 8003d08:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < 16; i++)
 8003d0a:	89bb      	ldrh	r3, [r7, #12]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	81bb      	strh	r3, [r7, #12]
 8003d10:	89bb      	ldrh	r3, [r7, #12]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	d9f2      	bls.n	8003cfc <crc16+0x54>
  }

  return crc;
 8003d16:	89fb      	ldrh	r3, [r7, #14]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <cliYmodem>:


#ifdef _USE_HW_CLI
void cliYmodem(cli_args_t *args)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d2c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d30:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  ymodem_t ymodem;
  bool keep_loop;
  uint8_t log_ch = _DEF_UART2;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 34d5 	strb.w	r3, [r7, #1237]	; 0x4d5


  if (args->argc == 1 && args->isStr(0, "down"))
 8003d3e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d42:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f040 808a 	bne.w	8003e64 <cliYmodem+0x144>
 8003d50:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d54:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	4949      	ldr	r1, [pc, #292]	; (8003e84 <cliYmodem+0x164>)
 8003d5e:	2000      	movs	r0, #0
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d07d      	beq.n	8003e64 <cliYmodem+0x144>
  {
    ymodemOpen(&ymodem, _DEF_UART1);
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fcd6 	bl	8003720 <ymodemOpen>

    keep_loop = true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6

    while(keep_loop)
 8003d7a:	bf00      	nop
 8003d7c:	e06b      	b.n	8003e56 <cliYmodem+0x136>
    {
      if (ymodemReceive(&ymodem) == true)
 8003d7e:	f107 030c 	add.w	r3, r7, #12
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fd76 	bl	8003874 <ymodemReceive>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d062      	beq.n	8003e54 <cliYmodem+0x134>
      {
        switch(ymodem.type)
 8003d8e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d92:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003d96:	7a1b      	ldrb	r3, [r3, #8]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d85c      	bhi.n	8003e56 <cliYmodem+0x136>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <cliYmodem+0x84>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003db9 	.word	0x08003db9
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e2d 	.word	0x08003e2d
 8003db4:	08003e41 	.word	0x08003e41
        {
          case YMODEM_TYPE_START:
            uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\n", ymodem.file_name, ymodem.file_length);
 8003db8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dbc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003dc0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	f103 021a 	add.w	r2, r3, #26
 8003dcc:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	492d      	ldr	r1, [pc, #180]	; (8003e88 <cliYmodem+0x168>)
 8003dd4:	f7ff fb42 	bl	800345c <uartPrintf>
            break;
 8003dd8:	e03d      	b.n	8003e56 <cliYmodem+0x136>

          case YMODEM_TYPE_DATA:
            uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8003dda:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dde:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003de2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003de6:	4619      	mov	r1, r3
 8003de8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dec:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003df0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003df4:	2264      	movs	r2, #100	; 0x64
 8003df6:	fb03 f202 	mul.w	r2, r3, r2
 8003dfa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dfe:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003e02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003e0e:	460a      	mov	r2, r1
 8003e10:	491e      	ldr	r1, [pc, #120]	; (8003e8c <cliYmodem+0x16c>)
 8003e12:	f7ff fb23 	bl	800345c <uartPrintf>
            break;
 8003e16:	e01e      	b.n	8003e56 <cliYmodem+0x136>

          case YMODEM_TYPE_END:
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8003e18:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e1c:	491c      	ldr	r1, [pc, #112]	; (8003e90 <cliYmodem+0x170>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fb1c 	bl	800345c <uartPrintf>
            keep_loop = false;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e2a:	e014      	b.n	8003e56 <cliYmodem+0x136>

          case YMODEM_TYPE_CANCEL:
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8003e2c:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e30:	4918      	ldr	r1, [pc, #96]	; (8003e94 <cliYmodem+0x174>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fb12 	bl	800345c <uartPrintf>
            keep_loop = false;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e3e:	e00a      	b.n	8003e56 <cliYmodem+0x136>

          case YMODEM_TYPE_ERROR:
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8003e40:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e44:	4914      	ldr	r1, [pc, #80]	; (8003e98 <cliYmodem+0x178>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fb08 	bl	800345c <uartPrintf>
            keep_loop = false;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e52:	e000      	b.n	8003e56 <cliYmodem+0x136>
        }
      }
 8003e54:	bf00      	nop
    while(keep_loop)
 8003e56:	f897 34d6 	ldrb.w	r3, [r7, #1238]	; 0x4d6
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d18f      	bne.n	8003d7e <cliYmodem+0x5e>
    }
    ret = true;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  }


  if (ret != true)
 8003e64:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <cliYmodem+0x158>
  {
    cliPrintf("ymodem down\n");
 8003e72:	480a      	ldr	r0, [pc, #40]	; (8003e9c <cliYmodem+0x17c>)
 8003e74:	f7fe f9d0 	bl	8002218 <cliPrintf>
  }
}
 8003e78:	bf00      	nop
 8003e7a:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	0800bfb0 	.word	0x0800bfb0
 8003e88:	0800bfb8 	.word	0x0800bfb8
 8003e8c:	0800bfd4 	.word	0x0800bfd4
 8003e90:	0800bff0 	.word	0x0800bff0
 8003e94:	0800c004 	.word	0x0800c004
 8003e98:	0800c01c 	.word	0x0800c01c
 8003e9c:	0800c030 	.word	0x0800c030

08003ea0 <hwInit>:
    };



void hwInit(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  bspInit();
 8003ea4:	f7fd fd1a 	bl	80018dc <bspInit>

  DWT_Delay_Init();
 8003ea8:	f7fd ffe8 	bl	8001e7c <DWT_Delay_Init>

  rtcInit();
 8003eac:	f7ff f898 	bl	8002fe0 <rtcInit>
  resetInit();
 8003eb0:	f7ff f85e 	bl	8002f70 <resetInit>
  cliInit();
 8003eb4:	f7fe f94a 	bl	800214c <cliInit>
  ledInit();
 8003eb8:	f7fe ff60 	bl	8002d7c <ledInit>
  uartInit();
 8003ebc:	f7ff f902 	bl	80030c4 <uartInit>
  buttonInit();
 8003ec0:	f7fe f834 	bl	8001f2c <buttonInit>
  flashInit();
 8003ec4:	f7fe fd88 	bl	80029d8 <flashInit>
  ymodemInit();
 8003ec8:	f7ff fc1c 	bl	8003704 <ymodemInit>
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_Init+0x40>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <HAL_Init+0x40>)
 8003eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_Init+0x40>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_Init+0x40>)
 8003ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <HAL_Init+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <HAL_Init+0x40>)
 8003ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef8:	2003      	movs	r0, #3
 8003efa:	f000 f973 	bl	80041e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f000 f808 	bl	8003f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f04:	f7fd fdd4 	bl	8001ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00

08003f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f1c:	4b12      	ldr	r3, [pc, #72]	; (8003f68 <HAL_InitTick+0x54>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_InitTick+0x58>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	4619      	mov	r1, r3
 8003f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 f999 	bl	800426a <HAL_SYSTICK_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00e      	b.n	8003f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b0f      	cmp	r3, #15
 8003f46:	d80a      	bhi.n	8003f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	f000 f953 	bl	80041fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f54:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <HAL_InitTick+0x5c>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	e000      	b.n	8003f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	2000000c 	.word	0x2000000c
 8003f6c:	20000274 	.word	0x20000274
 8003f70:	20000270 	.word	0x20000270

08003f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_IncTick+0x20>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_IncTick+0x24>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4413      	add	r3, r2
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_IncTick+0x24>)
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000274 	.word	0x20000274
 8003f98:	20001328 	.word	0x20001328

08003f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_GetTick+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20001328 	.word	0x20001328

08003fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff ffee 	bl	8003f9c <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d005      	beq.n	8003fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_Delay+0x44>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fda:	bf00      	nop
 8003fdc:	f7ff ffde 	bl	8003f9c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d8f7      	bhi.n	8003fdc <HAL_Delay+0x28>
  {
  }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000274 	.word	0x20000274

08003ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004018:	4013      	ands	r3, r2
 800401a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800402e:	4a04      	ldr	r2, [pc, #16]	; (8004040 <__NVIC_SetPriorityGrouping+0x44>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	60d3      	str	r3, [r2, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000ed00 	.word	0xe000ed00

08004044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004048:	4b04      	ldr	r3, [pc, #16]	; (800405c <__NVIC_GetPriorityGrouping+0x18>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f003 0307 	and.w	r3, r3, #7
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db0b      	blt.n	800408a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	f003 021f 	and.w	r2, r3, #31
 8004078:	4907      	ldr	r1, [pc, #28]	; (8004098 <__NVIC_EnableIRQ+0x38>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2001      	movs	r0, #1
 8004082:	fa00 f202 	lsl.w	r2, r0, r2
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	e000e100 	.word	0xe000e100

0800409c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	db12      	blt.n	80040d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	490a      	ldr	r1, [pc, #40]	; (80040e0 <__NVIC_DisableIRQ+0x44>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	2001      	movs	r0, #1
 80040be:	fa00 f202 	lsl.w	r2, r0, r2
 80040c2:	3320      	adds	r3, #32
 80040c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040c8:	f3bf 8f4f 	dsb	sy
}
 80040cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040ce:	f3bf 8f6f 	isb	sy
}
 80040d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000e100 	.word	0xe000e100

080040e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	6039      	str	r1, [r7, #0]
 80040ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db0a      	blt.n	800410e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	490c      	ldr	r1, [pc, #48]	; (8004130 <__NVIC_SetPriority+0x4c>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	440b      	add	r3, r1
 8004108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800410c:	e00a      	b.n	8004124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	b2da      	uxtb	r2, r3
 8004112:	4908      	ldr	r1, [pc, #32]	; (8004134 <__NVIC_SetPriority+0x50>)
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	3b04      	subs	r3, #4
 800411c:	0112      	lsls	r2, r2, #4
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	440b      	add	r3, r1
 8004122:	761a      	strb	r2, [r3, #24]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000e100 	.word	0xe000e100
 8004134:	e000ed00 	.word	0xe000ed00

08004138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b480      	push	{r7}
 800413a:	b089      	sub	sp, #36	; 0x24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	f1c3 0307 	rsb	r3, r3, #7
 8004152:	2b04      	cmp	r3, #4
 8004154:	bf28      	it	cs
 8004156:	2304      	movcs	r3, #4
 8004158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3304      	adds	r3, #4
 800415e:	2b06      	cmp	r3, #6
 8004160:	d902      	bls.n	8004168 <NVIC_EncodePriority+0x30>
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3b03      	subs	r3, #3
 8004166:	e000      	b.n	800416a <NVIC_EncodePriority+0x32>
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	401a      	ands	r2, r3
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004180:	f04f 31ff 	mov.w	r1, #4294967295
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	fa01 f303 	lsl.w	r3, r1, r3
 800418a:	43d9      	mvns	r1, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004190:	4313      	orrs	r3, r2
         );
}
 8004192:	4618      	mov	r0, r3
 8004194:	3724      	adds	r7, #36	; 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d301      	bcc.n	80041b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00f      	b.n	80041d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <SysTick_Config+0x40>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041be:	210f      	movs	r1, #15
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	f7ff ff8e 	bl	80040e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <SysTick_Config+0x40>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <SysTick_Config+0x40>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010

080041e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff05 	bl	8003ffc <__NVIC_SetPriorityGrouping>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800420c:	f7ff ff1a 	bl	8004044 <__NVIC_GetPriorityGrouping>
 8004210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff ff8e 	bl	8004138 <NVIC_EncodePriority>
 800421c:	4602      	mov	r2, r0
 800421e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff5d 	bl	80040e4 <__NVIC_SetPriority>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff0d 	bl	8004060 <__NVIC_EnableIRQ>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	4603      	mov	r3, r0
 8004256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff1d 	bl	800409c <__NVIC_DisableIRQ>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff94 	bl	80041a0 <SysTick_Config>
 8004278:	4603      	mov	r3, r0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7ff fe84 	bl	8003f9c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e099      	b.n	80043d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042c0:	e00f      	b.n	80042e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042c2:	f7ff fe6b 	bl	8003f9c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d908      	bls.n	80042e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2203      	movs	r2, #3
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e078      	b.n	80043d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e8      	bne.n	80042c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_DMA_Init+0x158>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800430e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	4313      	orrs	r3, r2
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	2b04      	cmp	r3, #4
 8004374:	d117      	bne.n	80043a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 faef 	bl	800496c <DMA_CheckFifoParam>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043a2:	2301      	movs	r3, #1
 80043a4:	e016      	b.n	80043d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faa6 	bl	8004900 <DMA_CalcBaseAndBitshift>
 80043b4:	4603      	mov	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	223f      	movs	r2, #63	; 0x3f
 80043be:	409a      	lsls	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	f010803f 	.word	0xf010803f

080043e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e050      	b.n	8004494 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
 8004400:	e048      	b.n	8004494 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2221      	movs	r2, #33	; 0x21
 8004440:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa5c 	bl	8004900 <DMA_CalcBaseAndBitshift>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	223f      	movs	r2, #63	; 0x3f
 8004476:	409a      	lsls	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_DMA_Start_IT+0x26>
 80044be:	2302      	movs	r3, #2
 80044c0:	e040      	b.n	8004544 <HAL_DMA_Start_IT+0xa8>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d12f      	bne.n	8004536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2202      	movs	r2, #2
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f9da 	bl	80048a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	223f      	movs	r2, #63	; 0x3f
 80044f6:	409a      	lsls	r2, r3
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0216 	orr.w	r2, r2, #22
 800450a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e005      	b.n	8004542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d004      	beq.n	800456a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e00c      	b.n	8004584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0201 	bic.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800459c:	4b8e      	ldr	r3, [pc, #568]	; (80047d8 <HAL_DMA_IRQHandler+0x248>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a8e      	ldr	r2, [pc, #568]	; (80047dc <HAL_DMA_IRQHandler+0x24c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0a9b      	lsrs	r3, r3, #10
 80045a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	2208      	movs	r2, #8
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01a      	beq.n	80045fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	2208      	movs	r2, #8
 80045ea:	409a      	lsls	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461e:	2201      	movs	r2, #1
 8004620:	409a      	lsls	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0202 	orr.w	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	2204      	movs	r2, #4
 8004638:	409a      	lsls	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004654:	2204      	movs	r2, #4
 8004656:	409a      	lsls	r2, r3
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	2210      	movs	r2, #16
 800466e:	409a      	lsls	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d043      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03c      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	2210      	movs	r2, #16
 800468c:	409a      	lsls	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d024      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	4798      	blx	r3
 80046be:	e01f      	b.n	8004700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4798      	blx	r3
 80046d0:	e016      	b.n	8004700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0208 	bic.w	r2, r2, #8
 80046ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2220      	movs	r2, #32
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 808f 	beq.w	8004830 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8087 	beq.w	8004830 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	2220      	movs	r2, #32
 8004728:	409a      	lsls	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b05      	cmp	r3, #5
 8004738:	d136      	bne.n	80047a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0216 	bic.w	r2, r2, #22
 8004748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_DMA_IRQHandler+0x1da>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0208 	bic.w	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	223f      	movs	r2, #63	; 0x3f
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479a:	2b00      	cmp	r3, #0
 800479c:	d07e      	beq.n	800489c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
        }
        return;
 80047a6:	e079      	b.n	800489c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01d      	beq.n	80047f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d031      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
 80047d4:	e02c      	b.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
 80047d6:	bf00      	nop
 80047d8:	2000000c 	.word	0x2000000c
 80047dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
 80047f0:	e01e      	b.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10f      	bne.n	8004820 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d022      	beq.n	800488a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2205      	movs	r2, #5
 8004848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3301      	adds	r3, #1
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	429a      	cmp	r2, r3
 8004866:	d307      	bcc.n	8004878 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f2      	bne.n	800485c <HAL_DMA_IRQHandler+0x2cc>
 8004876:	e000      	b.n	800487a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004878:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e000      	b.n	800489e <HAL_DMA_IRQHandler+0x30e>
        return;
 800489c:	bf00      	nop
    }
  }
}
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
 80048b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d108      	bne.n	80048e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048e2:	e007      	b.n	80048f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3b10      	subs	r3, #16
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <DMA_CalcBaseAndBitshift+0x64>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800491a:	4a13      	ldr	r2, [pc, #76]	; (8004968 <DMA_CalcBaseAndBitshift+0x68>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b03      	cmp	r3, #3
 800492c:	d909      	bls.n	8004942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	1d1a      	adds	r2, r3, #4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	659a      	str	r2, [r3, #88]	; 0x58
 8004940:	e007      	b.n	8004952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	aaaaaaab 	.word	0xaaaaaaab
 8004968:	0800c058 	.word	0x0800c058

0800496c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11f      	bne.n	80049c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b03      	cmp	r3, #3
 800498a:	d856      	bhi.n	8004a3a <DMA_CheckFifoParam+0xce>
 800498c:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <DMA_CheckFifoParam+0x28>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049b7 	.word	0x080049b7
 800499c:	080049a5 	.word	0x080049a5
 80049a0:	08004a3b 	.word	0x08004a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d046      	beq.n	8004a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b4:	e043      	b.n	8004a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049be:	d140      	bne.n	8004a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c4:	e03d      	b.n	8004a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	d121      	bne.n	8004a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d837      	bhi.n	8004a46 <DMA_CheckFifoParam+0xda>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <DMA_CheckFifoParam+0x70>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049f3 	.word	0x080049f3
 80049e4:	080049ed 	.word	0x080049ed
 80049e8:	08004a05 	.word	0x08004a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	73fb      	strb	r3, [r7, #15]
      break;
 80049f0:	e030      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d025      	beq.n	8004a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a02:	e022      	b.n	8004a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a0c:	d11f      	bne.n	8004a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a12:	e01c      	b.n	8004a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d903      	bls.n	8004a22 <DMA_CheckFifoParam+0xb6>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d003      	beq.n	8004a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a20:	e018      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      break;
 8004a26:	e015      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
      break;
 8004a38:	e00b      	b.n	8004a52 <DMA_CheckFifoParam+0xe6>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e00a      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a3e:	bf00      	nop
 8004a40:	e008      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a42:	bf00      	nop
 8004a44:	e006      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a46:	bf00      	nop
 8004a48:	e004      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
    }
  } 
  
  return status; 
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <HAL_FLASH_Program+0xa0>)
 8004a78:	7e1b      	ldrb	r3, [r3, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_FLASH_Program+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e03b      	b.n	8004afa <HAL_FLASH_Program+0x96>
 8004a82:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_FLASH_Program+0xa0>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a8c:	f000 f870 	bl	8004b70 <FLASH_WaitForLastOperation>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d12b      	bne.n	8004af2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004aa0:	783b      	ldrb	r3, [r7, #0]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	68b8      	ldr	r0, [r7, #8]
 8004aa6:	f000 f91b 	bl	8004ce0 <FLASH_Program_Byte>
 8004aaa:	e016      	b.n	8004ada <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004ab2:	883b      	ldrh	r3, [r7, #0]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	68b8      	ldr	r0, [r7, #8]
 8004ab8:	f000 f8ee 	bl	8004c98 <FLASH_Program_HalfWord>
 8004abc:	e00d      	b.n	8004ada <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d105      	bne.n	8004ad0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f000 f8c3 	bl	8004c54 <FLASH_Program_Word>
 8004ace:	e004      	b.n	8004ada <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004ad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ad4:	68b8      	ldr	r0, [r7, #8]
 8004ad6:	f000 f88b 	bl	8004bf0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ada:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ade:	f000 f847 	bl	8004b70 <FLASH_WaitForLastOperation>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <HAL_FLASH_Program+0xa4>)
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <HAL_FLASH_Program+0xa4>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <HAL_FLASH_Program+0xa0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	2000132c 	.word	0x2000132c
 8004b08:	40023c00 	.word	0x40023c00

08004b0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_FLASH_Unlock+0x38>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da0b      	bge.n	8004b36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <HAL_FLASH_Unlock+0x38>)
 8004b20:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <HAL_FLASH_Unlock+0x3c>)
 8004b22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <HAL_FLASH_Unlock+0x38>)
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_FLASH_Unlock+0x40>)
 8004b28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_FLASH_Unlock+0x38>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	da01      	bge.n	8004b36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b36:	79fb      	ldrb	r3, [r7, #7]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40023c00 	.word	0x40023c00
 8004b48:	45670123 	.word	0x45670123
 8004b4c:	cdef89ab 	.word	0xcdef89ab

08004b50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b54:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_FLASH_Lock+0x1c>)
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <HAL_FLASH_Lock+0x1c>)
 8004b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40023c00 	.word	0x40023c00

08004b70 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <FLASH_WaitForLastOperation+0x78>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b82:	f7ff fa0b 	bl	8003f9c <HAL_GetTick>
 8004b86:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004b88:	e010      	b.n	8004bac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d00c      	beq.n	8004bac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <FLASH_WaitForLastOperation+0x38>
 8004b98:	f7ff fa00 	bl	8003f9c <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d201      	bcs.n	8004bac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e019      	b.n	8004be0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bac:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <FLASH_WaitForLastOperation+0x7c>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e8      	bne.n	8004b8a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <FLASH_WaitForLastOperation+0x7c>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bc4:	4b09      	ldr	r3, [pc, #36]	; (8004bec <FLASH_WaitForLastOperation+0x7c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <FLASH_WaitForLastOperation+0x7c>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004bd6:	f000 f8a5 	bl	8004d24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
  
}  
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	2000132c 	.word	0x2000132c
 8004bec:	40023c00 	.word	0x40023c00

08004bf0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	4a10      	ldr	r2, [pc, #64]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004c0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c14:	4b0e      	ldr	r3, [pc, #56]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a0d      	ldr	r2, [pc, #52]	; (8004c50 <FLASH_Program_DoubleWord+0x60>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c26:	f3bf 8f6f 	isb	sy
}
 8004c2a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	000a      	movs	r2, r1
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	68f9      	ldr	r1, [r7, #12]
 8004c3e:	3104      	adds	r1, #4
 8004c40:	4613      	mov	r3, r2
 8004c42:	600b      	str	r3, [r1, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40023c00 	.word	0x40023c00

08004c54 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4a0c      	ldr	r2, [pc, #48]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c76:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4a06      	ldr	r2, [pc, #24]	; (8004c94 <FLASH_Program_Word+0x40>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	601a      	str	r2, [r3, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	40023c00 	.word	0x40023c00

08004c98 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	4a09      	ldr	r2, [pc, #36]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	4a06      	ldr	r2, [pc, #24]	; (8004cdc <FLASH_Program_HalfWord+0x44>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	887a      	ldrh	r2, [r7, #2]
 8004ccc:	801a      	strh	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40023c00 	.word	0x40023c00

08004ce0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004cfa:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <FLASH_Program_Byte+0x40>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	701a      	strb	r2, [r3, #0]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00

08004d24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d34:	4b2d      	ldr	r3, [pc, #180]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f043 0310 	orr.w	r3, r3, #16
 8004d3c:	4a2b      	ldr	r2, [pc, #172]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d3e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d40:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d42:	2210      	movs	r2, #16
 8004d44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d46:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f043 0308 	orr.w	r3, r3, #8
 8004d5a:	4a24      	ldr	r2, [pc, #144]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d5c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d60:	2220      	movs	r2, #32
 8004d62:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	f043 0304 	orr.w	r3, r3, #4
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f043 0302 	orr.w	r3, r3, #2
 8004d96:	4a15      	ldr	r2, [pc, #84]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004d98:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004d9a:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d009      	beq.n	8004dc0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004dac:	4b0f      	ldr	r3, [pc, #60]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	4a0d      	ldr	r2, [pc, #52]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004db6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dbe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004dc0:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004dcc:	4b07      	ldr	r3, [pc, #28]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f043 0320 	orr.w	r3, r3, #32
 8004dd4:	4a05      	ldr	r2, [pc, #20]	; (8004dec <FLASH_SetErrorCode+0xc8>)
 8004dd6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <FLASH_SetErrorCode+0xc4>)
 8004dda:	2202      	movs	r2, #2
 8004ddc:	60da      	str	r2, [r3, #12]
  }
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	40023c00 	.word	0x40023c00
 8004dec:	2000132c 	.word	0x2000132c

08004df0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <HAL_FLASHEx_Erase+0xd8>)
 8004e04:	7e1b      	ldrb	r3, [r3, #24]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_FLASHEx_Erase+0x1e>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e058      	b.n	8004ec0 <HAL_FLASHEx_Erase+0xd0>
 8004e0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ec8 <HAL_FLASHEx_Erase+0xd8>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e18:	f7ff feaa 	bl	8004b70 <FLASH_WaitForLastOperation>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d148      	bne.n	8004eb8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f04f 32ff 	mov.w	r2, #4294967295
 8004e2c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d115      	bne.n	8004e62 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f000 f844 	bl	8004ed0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e4c:	f7ff fe90 	bl	8004b70 <FLASH_WaitForLastOperation>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_FLASHEx_Erase+0xdc>)
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	; (8004ecc <HAL_FLASHEx_Erase+0xdc>)
 8004e5a:	f023 0304 	bic.w	r3, r3, #4
 8004e5e:	6113      	str	r3, [r2, #16]
 8004e60:	e028      	b.n	8004eb4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60bb      	str	r3, [r7, #8]
 8004e68:	e01c      	b.n	8004ea4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	f000 f850 	bl	8004f18 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e7c:	f7ff fe78 	bl	8004b70 <FLASH_WaitForLastOperation>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <HAL_FLASHEx_Erase+0xdc>)
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <HAL_FLASHEx_Erase+0xdc>)
 8004e8a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004e8e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	601a      	str	r2, [r3, #0]
          break;
 8004e9c:	e00a      	b.n	8004eb4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4413      	add	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3da      	bcc.n	8004e6a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004eb4:	f000 f878 	bl	8004fa8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <HAL_FLASHEx_Erase+0xd8>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	761a      	strb	r2, [r3, #24]

  return status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2000132c 	.word	0x2000132c
 8004ecc:	40023c00 	.word	0x40023c00

08004ed0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <FLASH_MassErase+0x44>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <FLASH_MassErase+0x44>)
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <FLASH_MassErase+0x44>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <FLASH_MassErase+0x44>)
 8004eee:	f043 0304 	orr.w	r3, r3, #4
 8004ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004ef4:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <FLASH_MassErase+0x44>)
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	4313      	orrs	r3, r2
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <FLASH_MassErase+0x44>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	6113      	str	r3, [r2, #16]
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40023c00 	.word	0x40023c00

08004f18 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e010      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d103      	bne.n	8004f42 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e009      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d103      	bne.n	8004f50 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	490f      	ldr	r1, [pc, #60]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <FLASH_Erase_Sector+0x8c>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	6113      	str	r3, [r2, #16]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d017      	beq.n	8004fe8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a19      	ldr	r2, [pc, #100]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a16      	ldr	r2, [pc, #88]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fda:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <FLASH_FlushCaches+0x88>)
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <FLASH_FlushCaches+0x88>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <FLASH_FlushCaches+0x88>)
 8005006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <FLASH_FlushCaches+0x88>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a07      	ldr	r2, [pc, #28]	; (8005030 <FLASH_FlushCaches+0x88>)
 8005012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005016:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <FLASH_FlushCaches+0x88>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <FLASH_FlushCaches+0x88>)
 800501e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005022:	6013      	str	r3, [r2, #0]
  }
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005034:	b480      	push	{r7}
 8005036:	b089      	sub	sp, #36	; 0x24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005042:	2300      	movs	r3, #0
 8005044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	e159      	b.n	8005304 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005050:	2201      	movs	r2, #1
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	fa02 f303 	lsl.w	r3, r2, r3
 8005058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	429a      	cmp	r2, r3
 800506a:	f040 8148 	bne.w	80052fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d00b      	beq.n	800508e <HAL_GPIO_Init+0x5a>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d007      	beq.n	800508e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005082:	2b11      	cmp	r3, #17
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b12      	cmp	r3, #18
 800508c:	d130      	bne.n	80050f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	2203      	movs	r2, #3
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4013      	ands	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050c4:	2201      	movs	r2, #1
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	091b      	lsrs	r3, r3, #4
 80050da:	f003 0201 	and.w	r2, r3, #1
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	2203      	movs	r2, #3
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0xfc>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b12      	cmp	r3, #18
 800512e:	d123      	bne.n	8005178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	08da      	lsrs	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3208      	adds	r2, #8
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	220f      	movs	r2, #15
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	691a      	ldr	r2, [r3, #16]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	08da      	lsrs	r2, r3, #3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3208      	adds	r2, #8
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	2203      	movs	r2, #3
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0203 	and.w	r2, r3, #3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80a2 	beq.w	80052fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b57      	ldr	r3, [pc, #348]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4a56      	ldr	r2, [pc, #344]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051c8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <HAL_GPIO_Init+0x2e8>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051d6:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_GPIO_Init+0x2ec>)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	3302      	adds	r3, #2
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	220f      	movs	r2, #15
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a49      	ldr	r2, [pc, #292]	; (8005324 <HAL_GPIO_Init+0x2f0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d019      	beq.n	8005236 <HAL_GPIO_Init+0x202>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a48      	ldr	r2, [pc, #288]	; (8005328 <HAL_GPIO_Init+0x2f4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_GPIO_Init+0x1fe>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a47      	ldr	r2, [pc, #284]	; (800532c <HAL_GPIO_Init+0x2f8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00d      	beq.n	800522e <HAL_GPIO_Init+0x1fa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a46      	ldr	r2, [pc, #280]	; (8005330 <HAL_GPIO_Init+0x2fc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <HAL_GPIO_Init+0x1f6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a45      	ldr	r2, [pc, #276]	; (8005334 <HAL_GPIO_Init+0x300>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_GPIO_Init+0x1f2>
 8005222:	2304      	movs	r3, #4
 8005224:	e008      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005226:	2307      	movs	r3, #7
 8005228:	e006      	b.n	8005238 <HAL_GPIO_Init+0x204>
 800522a:	2303      	movs	r3, #3
 800522c:	e004      	b.n	8005238 <HAL_GPIO_Init+0x204>
 800522e:	2302      	movs	r3, #2
 8005230:	e002      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_GPIO_Init+0x204>
 8005236:	2300      	movs	r3, #0
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	f002 0203 	and.w	r2, r2, #3
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	4093      	lsls	r3, r2
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005248:	4935      	ldr	r1, [pc, #212]	; (8005320 <HAL_GPIO_Init+0x2ec>)
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	089b      	lsrs	r3, r3, #2
 800524e:	3302      	adds	r3, #2
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005256:	4b38      	ldr	r3, [pc, #224]	; (8005338 <HAL_GPIO_Init+0x304>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800527a:	4a2f      	ldr	r2, [pc, #188]	; (8005338 <HAL_GPIO_Init+0x304>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_GPIO_Init+0x304>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052a4:	4a24      	ldr	r2, [pc, #144]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052aa:	4b23      	ldr	r3, [pc, #140]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	43db      	mvns	r3, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4013      	ands	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ce:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052f8:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <HAL_GPIO_Init+0x304>)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	f67f aea2 	bls.w	8005050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3724      	adds	r7, #36	; 0x24
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800
 8005320:	40013800 	.word	0x40013800
 8005324:	40020000 	.word	0x40020000
 8005328:	40020400 	.word	0x40020400
 800532c:	40020800 	.word	0x40020800
 8005330:	40020c00 	.word	0x40020c00
 8005334:	40021000 	.word	0x40021000
 8005338:	40013c00 	.word	0x40013c00

0800533c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e0bb      	b.n	80054d0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005358:	2201      	movs	r2, #1
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	f040 80ab 	bne.w	80054ca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005374:	4a5c      	ldr	r2, [pc, #368]	; (80054e8 <HAL_GPIO_DeInit+0x1ac>)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005380:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	220f      	movs	r2, #15
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a54      	ldr	r2, [pc, #336]	; (80054ec <HAL_GPIO_DeInit+0x1b0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d019      	beq.n	80053d2 <HAL_GPIO_DeInit+0x96>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a53      	ldr	r2, [pc, #332]	; (80054f0 <HAL_GPIO_DeInit+0x1b4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_GPIO_DeInit+0x92>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <HAL_GPIO_DeInit+0x1b8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00d      	beq.n	80053ca <HAL_GPIO_DeInit+0x8e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a51      	ldr	r2, [pc, #324]	; (80054f8 <HAL_GPIO_DeInit+0x1bc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <HAL_GPIO_DeInit+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a50      	ldr	r2, [pc, #320]	; (80054fc <HAL_GPIO_DeInit+0x1c0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <HAL_GPIO_DeInit+0x86>
 80053be:	2304      	movs	r3, #4
 80053c0:	e008      	b.n	80053d4 <HAL_GPIO_DeInit+0x98>
 80053c2:	2307      	movs	r3, #7
 80053c4:	e006      	b.n	80053d4 <HAL_GPIO_DeInit+0x98>
 80053c6:	2303      	movs	r3, #3
 80053c8:	e004      	b.n	80053d4 <HAL_GPIO_DeInit+0x98>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e002      	b.n	80053d4 <HAL_GPIO_DeInit+0x98>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_GPIO_DeInit+0x98>
 80053d2:	2300      	movs	r3, #0
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	f002 0203 	and.w	r2, r2, #3
 80053da:	0092      	lsls	r2, r2, #2
 80053dc:	4093      	lsls	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d132      	bne.n	800544a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053e4:	4b46      	ldr	r3, [pc, #280]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	4944      	ldr	r1, [pc, #272]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053f2:	4b43      	ldr	r3, [pc, #268]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	4941      	ldr	r1, [pc, #260]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005400:	4b3f      	ldr	r3, [pc, #252]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	43db      	mvns	r3, r3
 8005408:	493d      	ldr	r1, [pc, #244]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 800540a:	4013      	ands	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800540e:	4b3c      	ldr	r3, [pc, #240]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	43db      	mvns	r3, r3
 8005416:	493a      	ldr	r1, [pc, #232]	; (8005500 <HAL_GPIO_DeInit+0x1c4>)
 8005418:	4013      	ands	r3, r2
 800541a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	220f      	movs	r2, #15
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800542c:	4a2e      	ldr	r2, [pc, #184]	; (80054e8 <HAL_GPIO_DeInit+0x1ac>)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	3302      	adds	r3, #2
 8005434:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	43da      	mvns	r2, r3
 800543c:	482a      	ldr	r0, [pc, #168]	; (80054e8 <HAL_GPIO_DeInit+0x1ac>)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	400a      	ands	r2, r1
 8005444:	3302      	adds	r3, #2
 8005446:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	2103      	movs	r1, #3
 8005454:	fa01 f303 	lsl.w	r3, r1, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	401a      	ands	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	08da      	lsrs	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3208      	adds	r2, #8
 8005468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	220f      	movs	r2, #15
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	08d2      	lsrs	r2, r2, #3
 8005480:	4019      	ands	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	2103      	movs	r1, #3
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	43db      	mvns	r3, r3
 800549a:	401a      	ands	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	2101      	movs	r1, #1
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	2103      	movs	r1, #3
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	401a      	ands	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	3301      	adds	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	f67f af40 	bls.w	8005358 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40013800 	.word	0x40013800
 80054ec:	40020000 	.word	0x40020000
 80054f0:	40020400 	.word	0x40020400
 80054f4:	40020800 	.word	0x40020800
 80054f8:	40020c00 	.word	0x40020c00
 80054fc:	40021000 	.word	0x40021000
 8005500:	40013c00 	.word	0x40013c00

08005504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	887b      	ldrh	r3, [r7, #2]
 8005516:	4013      	ands	r3, r2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
 8005520:	e001      	b.n	8005526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
 8005540:	4613      	mov	r3, r2
 8005542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005544:	787b      	ldrb	r3, [r7, #1]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800554a:	887a      	ldrh	r2, [r7, #2]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005550:	e003      	b.n	800555a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	041a      	lsls	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	619a      	str	r2, [r3, #24]
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695a      	ldr	r2, [r3, #20]
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	401a      	ands	r2, r3
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	429a      	cmp	r2, r3
 800557e:	d104      	bne.n	800558a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005580:	887b      	ldrh	r3, [r7, #2]
 8005582:	041a      	lsls	r2, r3, #16
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005588:	e002      	b.n	8005590 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	619a      	str	r2, [r3, #24]
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e25e      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d075      	beq.n	80056a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ba:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00c      	beq.n	80055e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055c6:	4b85      	ldr	r3, [pc, #532]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d112      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055d2:	4b82      	ldr	r3, [pc, #520]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055de:	d10b      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	4b7e      	ldr	r3, [pc, #504]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d05b      	beq.n	80056a4 <HAL_RCC_OscConfig+0x108>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d157      	bne.n	80056a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e239      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d106      	bne.n	8005610 <HAL_RCC_OscConfig+0x74>
 8005602:	4b76      	ldr	r3, [pc, #472]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a75      	ldr	r2, [pc, #468]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e01d      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005618:	d10c      	bne.n	8005634 <HAL_RCC_OscConfig+0x98>
 800561a:	4b70      	ldr	r3, [pc, #448]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a6f      	ldr	r2, [pc, #444]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b6d      	ldr	r3, [pc, #436]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6c      	ldr	r2, [pc, #432]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 800562c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	e00b      	b.n	800564c <HAL_RCC_OscConfig+0xb0>
 8005634:	4b69      	ldr	r3, [pc, #420]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a68      	ldr	r2, [pc, #416]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 800563a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4b66      	ldr	r3, [pc, #408]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a65      	ldr	r2, [pc, #404]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe fca2 	bl	8003f9c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800565c:	f7fe fc9e 	bl	8003f9c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1fe      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566e:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCC_OscConfig+0xc0>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fe fc8e 	bl	8003f9c <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7fe fc8a 	bl	8003f9c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1ea      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005696:	4b51      	ldr	r3, [pc, #324]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0xe8>
 80056a2:	e000      	b.n	80056a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d063      	beq.n	800577a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056b2:	4b4a      	ldr	r3, [pc, #296]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056be:	4b47      	ldr	r3, [pc, #284]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d11c      	bne.n	8005704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b44      	ldr	r3, [pc, #272]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d6:	4b41      	ldr	r3, [pc, #260]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_RCC_OscConfig+0x152>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e1be      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ee:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4937      	ldr	r1, [pc, #220]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005702:	e03a      	b.n	800577a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d020      	beq.n	800574e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570c:	4b34      	ldr	r3, [pc, #208]	; (80057e0 <HAL_RCC_OscConfig+0x244>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fe fc43 	bl	8003f9c <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800571a:	f7fe fc3f 	bl	8003f9c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e19f      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005738:	4b28      	ldr	r3, [pc, #160]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4925      	ldr	r1, [pc, #148]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005748:	4313      	orrs	r3, r2
 800574a:	600b      	str	r3, [r1, #0]
 800574c:	e015      	b.n	800577a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_RCC_OscConfig+0x244>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fe fc22 	bl	8003f9c <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800575c:	f7fe fc1e 	bl	8003f9c <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e17e      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800576e:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d036      	beq.n	80057f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d016      	beq.n	80057bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_RCC_OscConfig+0x248>)
 8005790:	2201      	movs	r2, #1
 8005792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fe fc02 	bl	8003f9c <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800579c:	f7fe fbfe 	bl	8003f9c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e15e      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ae:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <HAL_RCC_OscConfig+0x240>)
 80057b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x200>
 80057ba:	e01b      	b.n	80057f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_OscConfig+0x248>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c2:	f7fe fbeb 	bl	8003f9c <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c8:	e00e      	b.n	80057e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ca:	f7fe fbe7 	bl	8003f9c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d907      	bls.n	80057e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e147      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
 80057dc:	40023800 	.word	0x40023800
 80057e0:	42470000 	.word	0x42470000
 80057e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e8:	4b88      	ldr	r3, [pc, #544]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ea      	bne.n	80057ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 8097 	beq.w	8005930 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2300      	movs	r3, #0
 8005804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005806:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10f      	bne.n	8005832 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	4b7d      	ldr	r3, [pc, #500]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a7c      	ldr	r2, [pc, #496]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800581c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b7a      	ldr	r3, [pc, #488]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582a:	60bb      	str	r3, [r7, #8]
 800582c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005832:	4b77      	ldr	r3, [pc, #476]	; (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	2b00      	cmp	r3, #0
 800583c:	d118      	bne.n	8005870 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800583e:	4b74      	ldr	r3, [pc, #464]	; (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a73      	ldr	r2, [pc, #460]	; (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800584a:	f7fe fba7 	bl	8003f9c <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005852:	f7fe fba3 	bl	8003f9c <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e103      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005864:	4b6a      	ldr	r3, [pc, #424]	; (8005a10 <HAL_RCC_OscConfig+0x474>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x2ea>
 8005878:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	4a63      	ldr	r2, [pc, #396]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6713      	str	r3, [r2, #112]	; 0x70
 8005884:	e01c      	b.n	80058c0 <HAL_RCC_OscConfig+0x324>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b05      	cmp	r3, #5
 800588c:	d10c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x30c>
 800588e:	4b5f      	ldr	r3, [pc, #380]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	4a5e      	ldr	r2, [pc, #376]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005894:	f043 0304 	orr.w	r3, r3, #4
 8005898:	6713      	str	r3, [r2, #112]	; 0x70
 800589a:	4b5c      	ldr	r3, [pc, #368]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	4a5b      	ldr	r2, [pc, #364]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
 80058a6:	e00b      	b.n	80058c0 <HAL_RCC_OscConfig+0x324>
 80058a8:	4b58      	ldr	r3, [pc, #352]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	4a57      	ldr	r2, [pc, #348]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	6713      	str	r3, [r2, #112]	; 0x70
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	4a54      	ldr	r2, [pc, #336]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058ba:	f023 0304 	bic.w	r3, r3, #4
 80058be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d015      	beq.n	80058f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fe fb68 	bl	8003f9c <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	e00a      	b.n	80058e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d0:	f7fe fb64 	bl	8003f9c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0c2      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0ee      	beq.n	80058d0 <HAL_RCC_OscConfig+0x334>
 80058f2:	e014      	b.n	800591e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f4:	f7fe fb52 	bl	8003f9c <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fe fb4e 	bl	8003f9c <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	; 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0ac      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005912:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1ee      	bne.n	80058fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d105      	bne.n	8005930 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	4a38      	ldr	r2, [pc, #224]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800592a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800592e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8098 	beq.w	8005a6a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800593a:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	2b08      	cmp	r3, #8
 8005944:	d05c      	beq.n	8005a00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d141      	bne.n	80059d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b31      	ldr	r3, [pc, #196]	; (8005a14 <HAL_RCC_OscConfig+0x478>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fe fb22 	bl	8003f9c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595c:	f7fe fb1e 	bl	8003f9c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e07e      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	019b      	lsls	r3, r3, #6
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	085b      	lsrs	r3, r3, #1
 8005992:	3b01      	subs	r3, #1
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	061b      	lsls	r3, r3, #24
 800599e:	491b      	ldr	r1, [pc, #108]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059a4:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCC_OscConfig+0x478>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fe faf7 	bl	8003f9c <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b2:	f7fe faf3 	bl	8003f9c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e053      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c4:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x416>
 80059d0:	e04b      	b.n	8005a6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <HAL_RCC_OscConfig+0x478>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fe fae0 	bl	8003f9c <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fe fadc 	bl	8003f9c <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e03c      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_RCC_OscConfig+0x470>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x444>
 80059fe:	e034      	b.n	8005a6a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e02f      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40007000 	.word	0x40007000
 8005a14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a18:	4b16      	ldr	r3, [pc, #88]	; (8005a74 <HAL_RCC_OscConfig+0x4d8>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d11c      	bne.n	8005a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d115      	bne.n	8005a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10d      	bne.n	8005a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d106      	bne.n	8005a66 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40023800 	.word	0x40023800

08005a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d101      	bne.n	8005a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e0cc      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a8c:	4b68      	ldr	r3, [pc, #416]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d90c      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a9a:	4b65      	ldr	r3, [pc, #404]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b63      	ldr	r3, [pc, #396]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0b8      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d020      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005acc:	4b59      	ldr	r3, [pc, #356]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	4a58      	ldr	r2, [pc, #352]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ae4:	4b53      	ldr	r3, [pc, #332]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4a52      	ldr	r2, [pc, #328]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005af0:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	494d      	ldr	r1, [pc, #308]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d044      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d107      	bne.n	8005b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b16:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d119      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07f      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d107      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b36:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e06f      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b46:	4b3b      	ldr	r3, [pc, #236]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e067      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b56:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f023 0203 	bic.w	r2, r3, #3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4934      	ldr	r1, [pc, #208]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b68:	f7fe fa18 	bl	8003f9c <HAL_GetTick>
 8005b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b70:	f7fe fa14 	bl	8003f9c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e04f      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b86:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 020c 	and.w	r2, r3, #12
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d1eb      	bne.n	8005b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d20c      	bcs.n	8005bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba6:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bae:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e032      	b.n	8005c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bcc:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4916      	ldr	r1, [pc, #88]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bea:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	490e      	ldr	r1, [pc, #56]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bfe:	f000 f821 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8005c02:	4602      	mov	r2, r0
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	490a      	ldr	r1, [pc, #40]	; (8005c38 <HAL_RCC_ClockConfig+0x1c0>)
 8005c10:	5ccb      	ldrb	r3, [r1, r3]
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <HAL_RCC_ClockConfig+0x1c4>)
 8005c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c1a:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <HAL_RCC_ClockConfig+0x1c8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe f978 	bl	8003f14 <HAL_InitTick>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023c00 	.word	0x40023c00
 8005c34:	40023800 	.word	0x40023800
 8005c38:	0800c040 	.word	0x0800c040
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	20000270 	.word	0x20000270

08005c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c48:	b090      	sub	sp, #64	; 0x40
 8005c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c50:	2300      	movs	r3, #0
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c54:	2300      	movs	r3, #0
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c5c:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 030c 	and.w	r3, r3, #12
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d00d      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0x40>
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	f200 80a1 	bhi.w	8005db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0x34>
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d003      	beq.n	8005c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c76:	e09b      	b.n	8005db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c78:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005c7c:	e09b      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c7e:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c82:	e098      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c84:	4b4f      	ldr	r3, [pc, #316]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c8e:	4b4d      	ldr	r3, [pc, #308]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d028      	beq.n	8005cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9a:	4b4a      	ldr	r3, [pc, #296]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	099b      	lsrs	r3, r3, #6
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	623b      	str	r3, [r7, #32]
 8005ca4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cac:	2100      	movs	r1, #0
 8005cae:	4b47      	ldr	r3, [pc, #284]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cb0:	fb03 f201 	mul.w	r2, r3, r1
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	fb00 f303 	mul.w	r3, r0, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	4a43      	ldr	r2, [pc, #268]	; (8005dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8005cc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cc4:	460a      	mov	r2, r1
 8005cc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	4413      	add	r3, r2
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	61fa      	str	r2, [r7, #28]
 8005cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005cde:	f7fb f93b 	bl	8000f58 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cea:	e053      	b.n	8005d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cec:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	617a      	str	r2, [r7, #20]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cfe:	f04f 0b00 	mov.w	fp, #0
 8005d02:	4652      	mov	r2, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	f04f 0000 	mov.w	r0, #0
 8005d0a:	f04f 0100 	mov.w	r1, #0
 8005d0e:	0159      	lsls	r1, r3, #5
 8005d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d14:	0150      	lsls	r0, r2, #5
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8005d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d36:	ebb2 0408 	subs.w	r4, r2, r8
 8005d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	00eb      	lsls	r3, r5, #3
 8005d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d4c:	00e2      	lsls	r2, r4, #3
 8005d4e:	4614      	mov	r4, r2
 8005d50:	461d      	mov	r5, r3
 8005d52:	eb14 030a 	adds.w	r3, r4, sl
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	eb45 030b 	adc.w	r3, r5, fp
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	028b      	lsls	r3, r1, #10
 8005d6e:	4621      	mov	r1, r4
 8005d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d74:	4621      	mov	r1, r4
 8005d76:	028a      	lsls	r2, r1, #10
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	60fa      	str	r2, [r7, #12]
 8005d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d88:	f7fb f8e6 	bl	8000f58 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4613      	mov	r3, r2
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005dae:	e002      	b.n	8005db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3740      	adds	r7, #64	; 0x40
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	00f42400 	.word	0x00f42400
 8005dcc:	017d7840 	.word	0x017d7840

08005dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	2000000c 	.word	0x2000000c

08005de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dec:	f7ff fff0 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	0a9b      	lsrs	r3, r3, #10
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	4903      	ldr	r1, [pc, #12]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfe:	5ccb      	ldrb	r3, [r1, r3]
 8005e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	0800c050 	.word	0x0800c050

08005e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e14:	f7ff ffdc 	bl	8005dd0 <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0b5b      	lsrs	r3, r3, #13
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	; (8005e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800c050 	.word	0x0800c050

08005e38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d038      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e60:	4b68      	ldr	r3, [pc, #416]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e66:	f7fe f899 	bl	8003f9c <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e6c:	e008      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e6e:	f7fe f895 	bl	8003f9c <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e0bd      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f0      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	071b      	lsls	r3, r3, #28
 8005e9e:	495a      	ldr	r1, [pc, #360]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ea6:	4b57      	ldr	r3, [pc, #348]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eac:	f7fe f876 	bl	8003f9c <HAL_GetTick>
 8005eb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005eb4:	f7fe f872 	bl	8003f9c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e09a      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ec6:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 8083 	beq.w	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	4b48      	ldr	r3, [pc, #288]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	4a47      	ldr	r2, [pc, #284]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eee:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef0:	4b45      	ldr	r3, [pc, #276]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005efc:	4b43      	ldr	r3, [pc, #268]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a42      	ldr	r2, [pc, #264]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f06:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f08:	f7fe f848 	bl	8003f9c <HAL_GetTick>
 8005f0c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f10:	f7fe f844 	bl	8003f9c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e06c      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f22:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f2e:	4b36      	ldr	r3, [pc, #216]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02f      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d028      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f4c:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f54:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f62:	4a29      	ldr	r2, [pc, #164]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f68:	4b27      	ldr	r3, [pc, #156]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d114      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fe f812 	bl	8003f9c <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7a:	e00a      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f7c:	f7fe f80e 	bl	8003f9c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e034      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0ee      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005faa:	d10d      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc0:	4911      	ldr	r1, [pc, #68]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	608b      	str	r3, [r1, #8]
 8005fc6:	e005      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005fd2:	6093      	str	r3, [r2, #8]
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe0:	4909      	ldr	r1, [pc, #36]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7d1a      	ldrb	r2, [r3, #20]
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005ff8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	42470068 	.word	0x42470068
 8006008:	40023800 	.word	0x40023800
 800600c:	40007000 	.word	0x40007000
 8006010:	42470e40 	.word	0x42470e40
 8006014:	424711e0 	.word	0x424711e0

08006018 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800601e:	f7fd ffbd 	bl	8003f9c <HAL_GetTick>
 8006022:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006024:	4b5d      	ldr	r3, [pc, #372]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5c      	ldr	r2, [pc, #368]	; (800619c <HAL_RCC_DeInit+0x184>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006030:	e008      	b.n	8006044 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006032:	f7fd ffb3 	bl	8003f9c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0a7      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006044:	4b55      	ldr	r3, [pc, #340]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8006050:	4b52      	ldr	r3, [pc, #328]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a51      	ldr	r2, [pc, #324]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800605c:	f7fd ff9e 	bl	8003f9c <HAL_GetTick>
 8006060:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8006062:	4b4e      	ldr	r3, [pc, #312]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006068:	e00a      	b.n	8006080 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800606a:	f7fd ff97 	bl	8003f9c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	; 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e089      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006080:	4b46      	ldr	r3, [pc, #280]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 030c 	and.w	r3, r3, #12
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1ee      	bne.n	800606a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800608c:	f7fd ff86 	bl	8003f9c <HAL_GetTick>
 8006090:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8006092:	4b42      	ldr	r3, [pc, #264]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a41      	ldr	r2, [pc, #260]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006098:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800609c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800609e:	e008      	b.n	80060b2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a0:	f7fd ff7c 	bl	8003f9c <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	2b64      	cmp	r3, #100	; 0x64
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e070      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80060b2:	4b3a      	ldr	r3, [pc, #232]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1f0      	bne.n	80060a0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060be:	f7fd ff6d 	bl	8003f9c <HAL_GetTick>
 80060c2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80060c4:	4b35      	ldr	r3, [pc, #212]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a34      	ldr	r2, [pc, #208]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ce:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d2:	f7fd ff63 	bl	8003f9c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e057      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80060e4:	4b2d      	ldr	r3, [pc, #180]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f0      	bne.n	80060d2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060f0:	f7fd ff54 	bl	8003f9c <HAL_GetTick>
 80060f4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80060f6:	4b29      	ldr	r3, [pc, #164]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a28      	ldr	r2, [pc, #160]	; (800619c <HAL_RCC_DeInit+0x184>)
 80060fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006100:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006104:	f7fd ff4a 	bl	8003f9c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e03e      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8006116:	4b21      	ldr	r3, [pc, #132]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8006122:	4b1e      	ldr	r3, [pc, #120]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006124:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <HAL_RCC_DeInit+0x188>)
 8006126:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8006128:	4b1c      	ldr	r3, [pc, #112]	; (800619c <HAL_RCC_DeInit+0x184>)
 800612a:	4a1e      	ldr	r2, [pc, #120]	; (80061a4 <HAL_RCC_DeInit+0x18c>)
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a19      	ldr	r2, [pc, #100]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006136:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800613a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800613c:	4b17      	ldr	r3, [pc, #92]	; (800619c <HAL_RCC_DeInit+0x184>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006146:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <HAL_RCC_DeInit+0x184>)
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	4a13      	ldr	r2, [pc, #76]	; (800619c <HAL_RCC_DeInit+0x184>)
 800614e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8006152:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8006154:	4b11      	ldr	r3, [pc, #68]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	4a10      	ldr	r2, [pc, #64]	; (800619c <HAL_RCC_DeInit+0x184>)
 800615a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800615e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006160:	4b0e      	ldr	r3, [pc, #56]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006164:	4a0d      	ldr	r2, [pc, #52]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_DeInit+0x184>)
 800616e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006170:	4a0a      	ldr	r2, [pc, #40]	; (800619c <HAL_RCC_DeInit+0x184>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006176:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_DeInit+0x190>)
 800617a:	4a0c      	ldr	r2, [pc, #48]	; (80061ac <HAL_RCC_DeInit+0x194>)
 800617c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800617e:	4b0c      	ldr	r3, [pc, #48]	; (80061b0 <HAL_RCC_DeInit+0x198>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fd fec6 	bl	8003f14 <HAL_InitTick>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8006192:	2300      	movs	r3, #0
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	04003010 	.word	0x04003010
 80061a4:	20003010 	.word	0x20003010
 80061a8:	2000000c 	.word	0x2000000c
 80061ac:	00f42400 	.word	0x00f42400
 80061b0:	20000270 	.word	0x20000270

080061b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e083      	b.n	80062ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7f5b      	ldrb	r3, [r3, #29]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fc ff5e 	bl	8003098 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	22ca      	movs	r2, #202	; 0xca
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2253      	movs	r2, #83	; 0x53
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f897 	bl	8006326 <RTC_EnterInitMode>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	22ff      	movs	r2, #255	; 0xff
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2204      	movs	r2, #4
 800620a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e05e      	b.n	80062ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800621e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006222:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6899      	ldr	r1, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68d2      	ldr	r2, [r2, #12]
 800624a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6919      	ldr	r1, [r3, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	041a      	lsls	r2, r3, #16
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800626e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0320 	and.w	r3, r3, #32
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10e      	bne.n	800629c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f829 	bl	80062d6 <HAL_RTC_WaitForSynchro>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	22ff      	movs	r2, #255	; 0xff
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2204      	movs	r2, #4
 8006296:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e018      	b.n	80062ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	22ff      	movs	r2, #255	; 0xff
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062cc:	2300      	movs	r3, #0
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f2:	f7fd fe53 	bl	8003f9c <HAL_GetTick>
 80062f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062f8:	e009      	b.n	800630e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062fa:	f7fd fe4f 	bl	8003f9c <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006308:	d901      	bls.n	800630e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e007      	b.n	800631e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0ee      	beq.n	80062fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d119      	bne.n	8006374 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800634a:	f7fd fe27 	bl	8003f9c <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006350:	e009      	b.n	8006366 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006352:	f7fd fe23 	bl	8003f9c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006360:	d901      	bls.n	8006366 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e007      	b.n	8006376 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ee      	beq.n	8006352 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3350      	adds	r3, #80	; 0x50
 8006394:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4413      	add	r3, r2
 800639e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3350      	adds	r3, #80	; 0x50
 80063c6:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e03f      	b.n	8006474 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fd f873 	bl	80034f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2224      	movs	r2, #36	; 0x24
 8006412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fc90 	bl	8006d4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800643a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800644a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800645a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e01e      	b.n	80064cc <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fd f8fa 	bl	80036a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	f040 8083 	bne.w	80065fc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <HAL_UART_Transmit+0x2e>
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07b      	b.n	80065fe <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_UART_Transmit+0x40>
 8006510:	2302      	movs	r3, #2
 8006512:	e074      	b.n	80065fe <HAL_UART_Transmit+0x12a>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2221      	movs	r2, #33	; 0x21
 8006526:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800652a:	f7fd fd37 	bl	8003f9c <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006544:	e042      	b.n	80065cc <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d122      	bne.n	80065a4 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa6d 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e042      	b.n	80065fe <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800658a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	3302      	adds	r3, #2
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	e017      	b.n	80065cc <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3301      	adds	r3, #1
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	e013      	b.n	80065cc <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2180      	movs	r1, #128	; 0x80
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fa4a 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e01f      	b.n	80065fe <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	60ba      	str	r2, [r7, #8]
 80065c4:	781a      	ldrb	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1b7      	bne.n	8006546 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	2140      	movs	r1, #64	; 0x40
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fa31 	bl	8006a48 <UART_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e006      	b.n	80065fe <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4613      	mov	r3, r2
 8006614:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b20      	cmp	r3, #32
 8006620:	d166      	bne.n	80066f0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <HAL_UART_Receive_DMA+0x26>
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e05f      	b.n	80066f2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_UART_Receive_DMA+0x38>
 800663c:	2302      	movs	r3, #2
 800663e:	e058      	b.n	80066f2 <HAL_UART_Receive_DMA+0xea>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2222      	movs	r2, #34	; 0x22
 800665e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	4a25      	ldr	r2, [pc, #148]	; (80066fc <HAL_UART_Receive_DMA+0xf4>)
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	4a24      	ldr	r2, [pc, #144]	; (8006700 <HAL_UART_Receive_DMA+0xf8>)
 8006670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4a23      	ldr	r2, [pc, #140]	; (8006704 <HAL_UART_Receive_DMA+0xfc>)
 8006678:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	2200      	movs	r2, #0
 8006680:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	f7fd feff 	bl	800449c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ea:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	08006931 	.word	0x08006931
 8006700:	08006999 	.word	0x08006999
 8006704:	080069b5 	.word	0x080069b5

08006708 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10d      	bne.n	800675a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_UART_IRQHandler+0x52>
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa78 	bl	8006c48 <UART_Receive_IT>
      return;
 8006758:	e0d0      	b.n	80068fc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80b0 	beq.w	80068c2 <HAL_UART_IRQHandler+0x1ba>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_UART_IRQHandler+0x70>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80a5 	beq.w	80068c2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <HAL_UART_IRQHandler+0x90>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <HAL_UART_IRQHandler+0xb0>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	f043 0202 	orr.w	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_UART_IRQHandler+0xd0>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	f043 0204 	orr.w	r2, r3, #4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00f      	beq.n	8006802 <HAL_UART_IRQHandler+0xfa>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_UART_IRQHandler+0xee>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fa:	f043 0208 	orr.w	r2, r3, #8
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d077      	beq.n	80068fa <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <HAL_UART_IRQHandler+0x11c>
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fa12 	bl	8006c48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	f003 0308 	and.w	r3, r3, #8
 8006842:	2b00      	cmp	r3, #0
 8006844:	d102      	bne.n	800684c <HAL_UART_IRQHandler+0x144>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d031      	beq.n	80068b0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f95b 	bl	8006b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d123      	bne.n	80068a8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	2b00      	cmp	r3, #0
 8006876:	d013      	beq.n	80068a0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	4a21      	ldr	r2, [pc, #132]	; (8006904 <HAL_UART_IRQHandler+0x1fc>)
 800687e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	4618      	mov	r0, r3
 8006886:	f7fd fe61 	bl	800454c <HAL_DMA_Abort_IT>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d016      	beq.n	80068be <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689e:	e00e      	b.n	80068be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7fc fe13 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a6:	e00a      	b.n	80068be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fc fe0f 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ae:	e006      	b.n	80068be <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fc fe0b 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068bc:	e01d      	b.n	80068fa <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068be:	bf00      	nop
    return;
 80068c0:	e01b      	b.n	80068fa <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d008      	beq.n	80068de <HAL_UART_IRQHandler+0x1d6>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f948 	bl	8006b6c <UART_Transmit_IT>
    return;
 80068dc:	e00e      	b.n	80068fc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <HAL_UART_IRQHandler+0x1f4>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f990 	bl	8006c18 <UART_EndTransmit_IT>
    return;
 80068f8:	e000      	b.n	80068fc <HAL_UART_IRQHandler+0x1f4>
    return;
 80068fa:	bf00      	nop
  }
}
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006b45 	.word	0x08006b45

08006908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d11e      	bne.n	800698a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006960:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695a      	ldr	r2, [r3, #20]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 0201 	bic.w	r2, r2, #1
 8006970:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695a      	ldr	r2, [r3, #20]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006980:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7fc fda8 	bl	80034e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff ffb8 	bl	800691c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b21      	cmp	r3, #33	; 0x21
 80069e6:	d108      	bne.n	80069fa <UART_DMAError+0x46>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d005      	beq.n	80069fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80069f4:	68b8      	ldr	r0, [r7, #8]
 80069f6:	f000 f871 	bl	8006adc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b22      	cmp	r3, #34	; 0x22
 8006a1a:	d108      	bne.n	8006a2e <UART_DMAError+0x7a>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a28:	68b8      	ldr	r0, [r7, #8]
 8006a2a:	f000 f86d 	bl	8006b08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	f043 0210 	orr.w	r2, r3, #16
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f7fc fd46 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	e02c      	b.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d028      	beq.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a68:	f7fd fa98 	bl	8003f9c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d21d      	bcs.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68da      	ldr	r2, [r3, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e00f      	b.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d0c3      	beq.n	8006a5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006af2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f7fc fcb4 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b21      	cmp	r3, #33	; 0x21
 8006b7e:	d144      	bne.n	8006c0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	d11a      	bne.n	8006bc0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	881b      	ldrh	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	621a      	str	r2, [r3, #32]
 8006bb2:	e00e      	b.n	8006bd2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]
 8006bbe:	e008      	b.n	8006bd2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6211      	str	r1, [r2, #32]
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	4619      	mov	r1, r3
 8006be0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10f      	bne.n	8006c06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e000      	b.n	8006c0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c0a:	2302      	movs	r3, #2
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fe65 	bl	8006908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b22      	cmp	r3, #34	; 0x22
 8006c5a:	d171      	bne.n	8006d40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d123      	bne.n	8006cae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10e      	bne.n	8006c92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c90:	e029      	b.n	8006ce6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28
 8006cac:	e01b      	b.n	8006ce6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6858      	ldr	r0, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6291      	str	r1, [r2, #40]	; 0x28
 8006cc6:	b2c2      	uxtb	r2, r0
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	e00c      	b.n	8006ce6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	1c58      	adds	r0, r3, #1
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	6288      	str	r0, [r1, #40]	; 0x28
 8006cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d120      	bne.n	8006d3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0220 	bic.w	r2, r2, #32
 8006d08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695a      	ldr	r2, [r3, #20]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0201 	bic.w	r2, r2, #1
 8006d28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fc fbd4 	bl	80034e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e002      	b.n	8006d42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d50:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d6a:	68d9      	ldr	r1, [r3, #12]
 8006d6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	ea40 0301 	orr.w	r3, r0, r1
 8006d76:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006d9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006da6:	f021 010c 	bic.w	r1, r1, #12
 8006daa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006db4:	430b      	orrs	r3, r1
 8006db6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006db8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dc8:	6999      	ldr	r1, [r3, #24]
 8006dca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	ea40 0301 	orr.w	r3, r0, r1
 8006dd4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de0:	f040 824a 	bne.w	8007278 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b96      	ldr	r3, [pc, #600]	; (8007044 <UART_SetConfig+0x2f8>)
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d006      	beq.n	8006dfe <UART_SetConfig+0xb2>
 8006df0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b94      	ldr	r3, [pc, #592]	; (8007048 <UART_SetConfig+0x2fc>)
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	f040 8129 	bne.w	8007050 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dfe:	f7ff f807 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8006e02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006e10:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006e14:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006e18:	4622      	mov	r2, r4
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006e22:	415b      	adcs	r3, r3
 8006e24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e28:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	1851      	adds	r1, r2, r1
 8006e30:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006e34:	4629      	mov	r1, r5
 8006e36:	414b      	adcs	r3, r1
 8006e38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006e48:	4649      	mov	r1, r9
 8006e4a:	00cb      	lsls	r3, r1, #3
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e52:	4641      	mov	r1, r8
 8006e54:	00ca      	lsls	r2, r1, #3
 8006e56:	4610      	mov	r0, r2
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4622      	mov	r2, r4
 8006e5e:	189b      	adds	r3, r3, r2
 8006e60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006e64:	462b      	mov	r3, r5
 8006e66:	460a      	mov	r2, r1
 8006e68:	eb42 0303 	adc.w	r3, r2, r3
 8006e6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006e70:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006e7c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006e80:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006e84:	460b      	mov	r3, r1
 8006e86:	18db      	adds	r3, r3, r3
 8006e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	eb42 0303 	adc.w	r3, r2, r3
 8006e92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e96:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006e9a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006e9e:	f7fa f85b 	bl	8000f58 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b69      	ldr	r3, [pc, #420]	; (800704c <UART_SetConfig+0x300>)
 8006ea8:	fba3 2302 	umull	r2, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	011c      	lsls	r4, r3, #4
 8006eb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006eba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006ebe:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	464b      	mov	r3, r9
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006ecc:	415b      	adcs	r3, r3
 8006ece:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ed2:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	1851      	adds	r1, r2, r1
 8006eda:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006ede:	4649      	mov	r1, r9
 8006ee0:	414b      	adcs	r3, r1
 8006ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ee6:	f04f 0200 	mov.w	r2, #0
 8006eea:	f04f 0300 	mov.w	r3, #0
 8006eee:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006ef2:	4659      	mov	r1, fp
 8006ef4:	00cb      	lsls	r3, r1, #3
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006efc:	4651      	mov	r1, sl
 8006efe:	00ca      	lsls	r2, r1, #3
 8006f00:	4610      	mov	r0, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	4642      	mov	r2, r8
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006f0e:	464b      	mov	r3, r9
 8006f10:	460a      	mov	r2, r1
 8006f12:	eb42 0303 	adc.w	r3, r2, r3
 8006f16:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006f1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006f26:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006f2a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006f2e:	460b      	mov	r3, r1
 8006f30:	18db      	adds	r3, r3, r3
 8006f32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f36:	4613      	mov	r3, r2
 8006f38:	eb42 0303 	adc.w	r3, r2, r3
 8006f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f40:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f44:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006f48:	f7fa f806 	bl	8000f58 <__aeabi_uldivmod>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4611      	mov	r1, r2
 8006f52:	4b3e      	ldr	r3, [pc, #248]	; (800704c <UART_SetConfig+0x300>)
 8006f54:	fba3 2301 	umull	r2, r3, r3, r1
 8006f58:	095b      	lsrs	r3, r3, #5
 8006f5a:	2264      	movs	r2, #100	; 0x64
 8006f5c:	fb02 f303 	mul.w	r3, r2, r3
 8006f60:	1acb      	subs	r3, r1, r3
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f68:	4b38      	ldr	r3, [pc, #224]	; (800704c <UART_SetConfig+0x300>)
 8006f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f76:	441c      	add	r4, r3
 8006f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006f82:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006f86:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006f8a:	4642      	mov	r2, r8
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	1891      	adds	r1, r2, r2
 8006f90:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006f94:	415b      	adcs	r3, r3
 8006f96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f9a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	1851      	adds	r1, r2, r1
 8006fa2:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	414b      	adcs	r3, r1
 8006faa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006fba:	4659      	mov	r1, fp
 8006fbc:	00cb      	lsls	r3, r1, #3
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	00ca      	lsls	r2, r1, #3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4642      	mov	r2, r8
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	460a      	mov	r2, r1
 8006fda:	eb42 0303 	adc.w	r3, r2, r3
 8006fde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006fe2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8006fee:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8006ff2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	18db      	adds	r3, r3, r3
 8006ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ffe:	4613      	mov	r3, r2
 8007000:	eb42 0303 	adc.w	r3, r2, r3
 8007004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007008:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800700c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8007010:	f7f9 ffa2 	bl	8000f58 <__aeabi_uldivmod>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <UART_SetConfig+0x300>)
 800701a:	fba3 1302 	umull	r1, r3, r3, r2
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	2164      	movs	r1, #100	; 0x64
 8007022:	fb01 f303 	mul.w	r3, r1, r3
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	3332      	adds	r3, #50	; 0x32
 800702c:	4a07      	ldr	r2, [pc, #28]	; (800704c <UART_SetConfig+0x300>)
 800702e:	fba2 2303 	umull	r2, r3, r2, r3
 8007032:	095b      	lsrs	r3, r3, #5
 8007034:	f003 0207 	and.w	r2, r3, #7
 8007038:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4422      	add	r2, r4
 8007040:	609a      	str	r2, [r3, #8]
 8007042:	e349      	b.n	80076d8 <UART_SetConfig+0x98c>
 8007044:	40011000 	.word	0x40011000
 8007048:	40011400 	.word	0x40011400
 800704c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007050:	f7fe feca 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 8007054:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8007062:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8007066:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800706a:	4622      	mov	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	1891      	adds	r1, r2, r2
 8007070:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007074:	415b      	adcs	r3, r3
 8007076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800707a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800707e:	4621      	mov	r1, r4
 8007080:	eb12 0a01 	adds.w	sl, r2, r1
 8007084:	4629      	mov	r1, r5
 8007086:	eb43 0b01 	adc.w	fp, r3, r1
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007096:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800709a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800709e:	4692      	mov	sl, r2
 80070a0:	469b      	mov	fp, r3
 80070a2:	4623      	mov	r3, r4
 80070a4:	eb1a 0303 	adds.w	r3, sl, r3
 80070a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80070ac:	462b      	mov	r3, r5
 80070ae:	eb4b 0303 	adc.w	r3, fp, r3
 80070b2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80070b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80070c2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80070c6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80070ca:	460b      	mov	r3, r1
 80070cc:	18db      	adds	r3, r3, r3
 80070ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070d2:	4613      	mov	r3, r2
 80070d4:	eb42 0303 	adc.w	r3, r2, r3
 80070d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80070e0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80070e4:	f7f9 ff38 	bl	8000f58 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4b61      	ldr	r3, [pc, #388]	; (8007274 <UART_SetConfig+0x528>)
 80070ee:	fba3 2302 	umull	r2, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	011c      	lsls	r4, r3, #4
 80070f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8007100:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8007104:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	1891      	adds	r1, r2, r2
 800710e:	67b9      	str	r1, [r7, #120]	; 0x78
 8007110:	415b      	adcs	r3, r3
 8007112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007114:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007118:	4641      	mov	r1, r8
 800711a:	1851      	adds	r1, r2, r1
 800711c:	6739      	str	r1, [r7, #112]	; 0x70
 800711e:	4649      	mov	r1, r9
 8007120:	414b      	adcs	r3, r1
 8007122:	677b      	str	r3, [r7, #116]	; 0x74
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8007130:	4659      	mov	r1, fp
 8007132:	00cb      	lsls	r3, r1, #3
 8007134:	4651      	mov	r1, sl
 8007136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800713a:	4651      	mov	r1, sl
 800713c:	00ca      	lsls	r2, r1, #3
 800713e:	4610      	mov	r0, r2
 8007140:	4619      	mov	r1, r3
 8007142:	4603      	mov	r3, r0
 8007144:	4642      	mov	r2, r8
 8007146:	189b      	adds	r3, r3, r2
 8007148:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800714c:	464b      	mov	r3, r9
 800714e:	460a      	mov	r2, r1
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8007158:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007164:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8007168:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800716c:	460b      	mov	r3, r1
 800716e:	18db      	adds	r3, r3, r3
 8007170:	66bb      	str	r3, [r7, #104]	; 0x68
 8007172:	4613      	mov	r3, r2
 8007174:	eb42 0303 	adc.w	r3, r2, r3
 8007178:	66fb      	str	r3, [r7, #108]	; 0x6c
 800717a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800717e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8007182:	f7f9 fee9 	bl	8000f58 <__aeabi_uldivmod>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4611      	mov	r1, r2
 800718c:	4b39      	ldr	r3, [pc, #228]	; (8007274 <UART_SetConfig+0x528>)
 800718e:	fba3 2301 	umull	r2, r3, r3, r1
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	2264      	movs	r2, #100	; 0x64
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	1acb      	subs	r3, r1, r3
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071a2:	4b34      	ldr	r3, [pc, #208]	; (8007274 <UART_SetConfig+0x528>)
 80071a4:	fba3 2302 	umull	r2, r3, r3, r2
 80071a8:	095b      	lsrs	r3, r3, #5
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071b0:	441c      	add	r4, r3
 80071b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80071bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80071c0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	1891      	adds	r1, r2, r2
 80071ca:	6639      	str	r1, [r7, #96]	; 0x60
 80071cc:	415b      	adcs	r3, r3
 80071ce:	667b      	str	r3, [r7, #100]	; 0x64
 80071d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80071d4:	4641      	mov	r1, r8
 80071d6:	1851      	adds	r1, r2, r1
 80071d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071da:	4649      	mov	r1, r9
 80071dc:	414b      	adcs	r3, r1
 80071de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80071ec:	4659      	mov	r1, fp
 80071ee:	00cb      	lsls	r3, r1, #3
 80071f0:	4651      	mov	r1, sl
 80071f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071f6:	4651      	mov	r1, sl
 80071f8:	00ca      	lsls	r2, r1, #3
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	4603      	mov	r3, r0
 8007200:	4642      	mov	r2, r8
 8007202:	189b      	adds	r3, r3, r2
 8007204:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8007208:	464b      	mov	r3, r9
 800720a:	460a      	mov	r2, r1
 800720c:	eb42 0303 	adc.w	r3, r2, r3
 8007210:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8007214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007220:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8007224:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8007228:	460b      	mov	r3, r1
 800722a:	18db      	adds	r3, r3, r3
 800722c:	653b      	str	r3, [r7, #80]	; 0x50
 800722e:	4613      	mov	r3, r2
 8007230:	eb42 0303 	adc.w	r3, r2, r3
 8007234:	657b      	str	r3, [r7, #84]	; 0x54
 8007236:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800723a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800723e:	f7f9 fe8b 	bl	8000f58 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4b0b      	ldr	r3, [pc, #44]	; (8007274 <UART_SetConfig+0x528>)
 8007248:	fba3 1302 	umull	r1, r3, r3, r2
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2164      	movs	r1, #100	; 0x64
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	3332      	adds	r3, #50	; 0x32
 800725a:	4a06      	ldr	r2, [pc, #24]	; (8007274 <UART_SetConfig+0x528>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 0207 	and.w	r2, r3, #7
 8007266:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4422      	add	r2, r4
 800726e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007270:	e232      	b.n	80076d8 <UART_SetConfig+0x98c>
 8007272:	bf00      	nop
 8007274:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b8d      	ldr	r3, [pc, #564]	; (80074b4 <UART_SetConfig+0x768>)
 8007280:	429a      	cmp	r2, r3
 8007282:	d006      	beq.n	8007292 <UART_SetConfig+0x546>
 8007284:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b8b      	ldr	r3, [pc, #556]	; (80074b8 <UART_SetConfig+0x76c>)
 800728c:	429a      	cmp	r2, r3
 800728e:	f040 8117 	bne.w	80074c0 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007292:	f7fe fdbd 	bl	8005e10 <HAL_RCC_GetPCLK2Freq>
 8007296:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800729a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80072a4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80072a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80072ac:	4622      	mov	r2, r4
 80072ae:	462b      	mov	r3, r5
 80072b0:	1891      	adds	r1, r2, r2
 80072b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80072b4:	415b      	adcs	r3, r3
 80072b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072bc:	4621      	mov	r1, r4
 80072be:	eb12 0801 	adds.w	r8, r2, r1
 80072c2:	4629      	mov	r1, r5
 80072c4:	eb43 0901 	adc.w	r9, r3, r1
 80072c8:	f04f 0200 	mov.w	r2, #0
 80072cc:	f04f 0300 	mov.w	r3, #0
 80072d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072dc:	4690      	mov	r8, r2
 80072de:	4699      	mov	r9, r3
 80072e0:	4623      	mov	r3, r4
 80072e2:	eb18 0303 	adds.w	r3, r8, r3
 80072e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80072ea:	462b      	mov	r3, r5
 80072ec:	eb49 0303 	adc.w	r3, r9, r3
 80072f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80072f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007300:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007310:	4629      	mov	r1, r5
 8007312:	008b      	lsls	r3, r1, #2
 8007314:	4621      	mov	r1, r4
 8007316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800731a:	4621      	mov	r1, r4
 800731c:	008a      	lsls	r2, r1, #2
 800731e:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8007322:	f7f9 fe19 	bl	8000f58 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4b64      	ldr	r3, [pc, #400]	; (80074bc <UART_SetConfig+0x770>)
 800732c:	fba3 2302 	umull	r2, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	011c      	lsls	r4, r3, #4
 8007334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007338:	2200      	movs	r2, #0
 800733a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800733e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8007342:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8007346:	4642      	mov	r2, r8
 8007348:	464b      	mov	r3, r9
 800734a:	1891      	adds	r1, r2, r2
 800734c:	6439      	str	r1, [r7, #64]	; 0x40
 800734e:	415b      	adcs	r3, r3
 8007350:	647b      	str	r3, [r7, #68]	; 0x44
 8007352:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007356:	4641      	mov	r1, r8
 8007358:	1851      	adds	r1, r2, r1
 800735a:	63b9      	str	r1, [r7, #56]	; 0x38
 800735c:	4649      	mov	r1, r9
 800735e:	414b      	adcs	r3, r1
 8007360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800736e:	4659      	mov	r1, fp
 8007370:	00cb      	lsls	r3, r1, #3
 8007372:	4651      	mov	r1, sl
 8007374:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007378:	4651      	mov	r1, sl
 800737a:	00ca      	lsls	r2, r1, #3
 800737c:	4610      	mov	r0, r2
 800737e:	4619      	mov	r1, r3
 8007380:	4603      	mov	r3, r0
 8007382:	4642      	mov	r2, r8
 8007384:	189b      	adds	r3, r3, r2
 8007386:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800738a:	464b      	mov	r3, r9
 800738c:	460a      	mov	r2, r1
 800738e:	eb42 0303 	adc.w	r3, r2, r3
 8007392:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8007396:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80073a2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80073b2:	4649      	mov	r1, r9
 80073b4:	008b      	lsls	r3, r1, #2
 80073b6:	4641      	mov	r1, r8
 80073b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073bc:	4641      	mov	r1, r8
 80073be:	008a      	lsls	r2, r1, #2
 80073c0:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80073c4:	f7f9 fdc8 	bl	8000f58 <__aeabi_uldivmod>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4b3b      	ldr	r3, [pc, #236]	; (80074bc <UART_SetConfig+0x770>)
 80073ce:	fba3 1302 	umull	r1, r3, r3, r2
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	2164      	movs	r1, #100	; 0x64
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	3332      	adds	r3, #50	; 0x32
 80073e0:	4a36      	ldr	r2, [pc, #216]	; (80074bc <UART_SetConfig+0x770>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ec:	441c      	add	r4, r3
 80073ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80073f8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80073fc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007400:	4642      	mov	r2, r8
 8007402:	464b      	mov	r3, r9
 8007404:	1891      	adds	r1, r2, r2
 8007406:	6339      	str	r1, [r7, #48]	; 0x30
 8007408:	415b      	adcs	r3, r3
 800740a:	637b      	str	r3, [r7, #52]	; 0x34
 800740c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007410:	4641      	mov	r1, r8
 8007412:	1851      	adds	r1, r2, r1
 8007414:	62b9      	str	r1, [r7, #40]	; 0x28
 8007416:	4649      	mov	r1, r9
 8007418:	414b      	adcs	r3, r1
 800741a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	f04f 0300 	mov.w	r3, #0
 8007424:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8007428:	4659      	mov	r1, fp
 800742a:	00cb      	lsls	r3, r1, #3
 800742c:	4651      	mov	r1, sl
 800742e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007432:	4651      	mov	r1, sl
 8007434:	00ca      	lsls	r2, r1, #3
 8007436:	4610      	mov	r0, r2
 8007438:	4619      	mov	r1, r3
 800743a:	4603      	mov	r3, r0
 800743c:	4642      	mov	r2, r8
 800743e:	189b      	adds	r3, r3, r2
 8007440:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007444:	464b      	mov	r3, r9
 8007446:	460a      	mov	r2, r1
 8007448:	eb42 0303 	adc.w	r3, r2, r3
 800744c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007450:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800745c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800746c:	4649      	mov	r1, r9
 800746e:	008b      	lsls	r3, r1, #2
 8007470:	4641      	mov	r1, r8
 8007472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007476:	4641      	mov	r1, r8
 8007478:	008a      	lsls	r2, r1, #2
 800747a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800747e:	f7f9 fd6b 	bl	8000f58 <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <UART_SetConfig+0x770>)
 8007488:	fba3 1302 	umull	r1, r3, r3, r2
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	2164      	movs	r1, #100	; 0x64
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	3332      	adds	r3, #50	; 0x32
 800749a:	4a08      	ldr	r2, [pc, #32]	; (80074bc <UART_SetConfig+0x770>)
 800749c:	fba2 2303 	umull	r2, r3, r2, r3
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	f003 020f 	and.w	r2, r3, #15
 80074a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4422      	add	r2, r4
 80074ae:	609a      	str	r2, [r3, #8]
 80074b0:	e112      	b.n	80076d8 <UART_SetConfig+0x98c>
 80074b2:	bf00      	nop
 80074b4:	40011000 	.word	0x40011000
 80074b8:	40011400 	.word	0x40011400
 80074bc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80074c0:	f7fe fc92 	bl	8005de8 <HAL_RCC_GetPCLK1Freq>
 80074c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80074d6:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 80074da:	4642      	mov	r2, r8
 80074dc:	464b      	mov	r3, r9
 80074de:	1891      	adds	r1, r2, r2
 80074e0:	6239      	str	r1, [r7, #32]
 80074e2:	415b      	adcs	r3, r3
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
 80074e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074ea:	4641      	mov	r1, r8
 80074ec:	1854      	adds	r4, r2, r1
 80074ee:	4649      	mov	r1, r9
 80074f0:	eb43 0501 	adc.w	r5, r3, r1
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	00eb      	lsls	r3, r5, #3
 80074fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007502:	00e2      	lsls	r2, r4, #3
 8007504:	4614      	mov	r4, r2
 8007506:	461d      	mov	r5, r3
 8007508:	4643      	mov	r3, r8
 800750a:	18e3      	adds	r3, r4, r3
 800750c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007510:	464b      	mov	r3, r9
 8007512:	eb45 0303 	adc.w	r3, r5, r3
 8007516:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800751a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007526:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8007536:	4629      	mov	r1, r5
 8007538:	008b      	lsls	r3, r1, #2
 800753a:	4621      	mov	r1, r4
 800753c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007540:	4621      	mov	r1, r4
 8007542:	008a      	lsls	r2, r1, #2
 8007544:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8007548:	f7f9 fd06 	bl	8000f58 <__aeabi_uldivmod>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <UART_SetConfig+0x998>)
 8007552:	fba3 2302 	umull	r2, r3, r3, r2
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	011c      	lsls	r4, r3, #4
 800755a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800755e:	2200      	movs	r2, #0
 8007560:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007564:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007568:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	1891      	adds	r1, r2, r2
 8007572:	61b9      	str	r1, [r7, #24]
 8007574:	415b      	adcs	r3, r3
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800757c:	4641      	mov	r1, r8
 800757e:	1851      	adds	r1, r2, r1
 8007580:	6139      	str	r1, [r7, #16]
 8007582:	4649      	mov	r1, r9
 8007584:	414b      	adcs	r3, r1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007594:	4659      	mov	r1, fp
 8007596:	00cb      	lsls	r3, r1, #3
 8007598:	4651      	mov	r1, sl
 800759a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800759e:	4651      	mov	r1, sl
 80075a0:	00ca      	lsls	r2, r1, #3
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	4642      	mov	r2, r8
 80075aa:	189b      	adds	r3, r3, r2
 80075ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075b0:	464b      	mov	r3, r9
 80075b2:	460a      	mov	r2, r1
 80075b4:	eb42 0303 	adc.w	r3, r2, r3
 80075b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	f04f 0300 	mov.w	r3, #0
 80075d4:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80075d8:	4649      	mov	r1, r9
 80075da:	008b      	lsls	r3, r1, #2
 80075dc:	4641      	mov	r1, r8
 80075de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e2:	4641      	mov	r1, r8
 80075e4:	008a      	lsls	r2, r1, #2
 80075e6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80075ea:	f7f9 fcb5 	bl	8000f58 <__aeabi_uldivmod>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4b3c      	ldr	r3, [pc, #240]	; (80076e4 <UART_SetConfig+0x998>)
 80075f4:	fba3 1302 	umull	r1, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	2164      	movs	r1, #100	; 0x64
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	3332      	adds	r3, #50	; 0x32
 8007606:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <UART_SetConfig+0x998>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095b      	lsrs	r3, r3, #5
 800760e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007612:	441c      	add	r4, r3
 8007614:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007618:	2200      	movs	r2, #0
 800761a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800761e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007622:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8007626:	4642      	mov	r2, r8
 8007628:	464b      	mov	r3, r9
 800762a:	1891      	adds	r1, r2, r2
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	415b      	adcs	r3, r3
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007636:	4641      	mov	r1, r8
 8007638:	1851      	adds	r1, r2, r1
 800763a:	6039      	str	r1, [r7, #0]
 800763c:	4649      	mov	r1, r9
 800763e:	414b      	adcs	r3, r1
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800764e:	4659      	mov	r1, fp
 8007650:	00cb      	lsls	r3, r1, #3
 8007652:	4651      	mov	r1, sl
 8007654:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007658:	4651      	mov	r1, sl
 800765a:	00ca      	lsls	r2, r1, #3
 800765c:	4610      	mov	r0, r2
 800765e:	4619      	mov	r1, r3
 8007660:	4603      	mov	r3, r0
 8007662:	4642      	mov	r2, r8
 8007664:	189b      	adds	r3, r3, r2
 8007666:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800766a:	464b      	mov	r3, r9
 800766c:	460a      	mov	r2, r1
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007676:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007686:	f04f 0200 	mov.w	r2, #0
 800768a:	f04f 0300 	mov.w	r3, #0
 800768e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007692:	4649      	mov	r1, r9
 8007694:	008b      	lsls	r3, r1, #2
 8007696:	4641      	mov	r1, r8
 8007698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769c:	4641      	mov	r1, r8
 800769e:	008a      	lsls	r2, r1, #2
 80076a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076a4:	f7f9 fc58 	bl	8000f58 <__aeabi_uldivmod>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <UART_SetConfig+0x998>)
 80076ae:	fba3 1302 	umull	r1, r3, r3, r2
 80076b2:	095b      	lsrs	r3, r3, #5
 80076b4:	2164      	movs	r1, #100	; 0x64
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	3332      	adds	r3, #50	; 0x32
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <UART_SetConfig+0x998>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	f003 020f 	and.w	r2, r3, #15
 80076cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4422      	add	r2, r4
 80076d4:	609a      	str	r2, [r3, #8]
}
 80076d6:	e7ff      	b.n	80076d8 <UART_SetConfig+0x98c>
 80076d8:	bf00      	nop
 80076da:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80076de:	46bd      	mov	sp, r7
 80076e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e4:	51eb851f 	.word	0x51eb851f

080076e8 <main>:




int main(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  hwInit();
 80076ec:	f7fc fbd8 	bl	8003ea0 <hwInit>

  apInit();
 80076f0:	f7f9 fdea 	bl	80012c8 <apInit>

  apMain();
 80076f4:	f7f9 fe34 	bl	8001360 <apMain>

  return 0;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <__errno>:
 8007700:	4b01      	ldr	r3, [pc, #4]	; (8007708 <__errno+0x8>)
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000278 	.word	0x20000278

0800770c <__libc_init_array>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4d0d      	ldr	r5, [pc, #52]	; (8007744 <__libc_init_array+0x38>)
 8007710:	4c0d      	ldr	r4, [pc, #52]	; (8007748 <__libc_init_array+0x3c>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	2600      	movs	r6, #0
 8007718:	42a6      	cmp	r6, r4
 800771a:	d109      	bne.n	8007730 <__libc_init_array+0x24>
 800771c:	4d0b      	ldr	r5, [pc, #44]	; (800774c <__libc_init_array+0x40>)
 800771e:	4c0c      	ldr	r4, [pc, #48]	; (8007750 <__libc_init_array+0x44>)
 8007720:	f004 faf0 	bl	800bd04 <_init>
 8007724:	1b64      	subs	r4, r4, r5
 8007726:	10a4      	asrs	r4, r4, #2
 8007728:	2600      	movs	r6, #0
 800772a:	42a6      	cmp	r6, r4
 800772c:	d105      	bne.n	800773a <__libc_init_array+0x2e>
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	f855 3b04 	ldr.w	r3, [r5], #4
 8007734:	4798      	blx	r3
 8007736:	3601      	adds	r6, #1
 8007738:	e7ee      	b.n	8007718 <__libc_init_array+0xc>
 800773a:	f855 3b04 	ldr.w	r3, [r5], #4
 800773e:	4798      	blx	r3
 8007740:	3601      	adds	r6, #1
 8007742:	e7f2      	b.n	800772a <__libc_init_array+0x1e>
 8007744:	0800c504 	.word	0x0800c504
 8007748:	0800c504 	.word	0x0800c504
 800774c:	0800c504 	.word	0x0800c504
 8007750:	0800c508 	.word	0x0800c508

08007754 <memcpy>:
 8007754:	440a      	add	r2, r1
 8007756:	4291      	cmp	r1, r2
 8007758:	f100 33ff 	add.w	r3, r0, #4294967295
 800775c:	d100      	bne.n	8007760 <memcpy+0xc>
 800775e:	4770      	bx	lr
 8007760:	b510      	push	{r4, lr}
 8007762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800776a:	4291      	cmp	r1, r2
 800776c:	d1f9      	bne.n	8007762 <memcpy+0xe>
 800776e:	bd10      	pop	{r4, pc}

08007770 <memset>:
 8007770:	4402      	add	r2, r0
 8007772:	4603      	mov	r3, r0
 8007774:	4293      	cmp	r3, r2
 8007776:	d100      	bne.n	800777a <memset+0xa>
 8007778:	4770      	bx	lr
 800777a:	f803 1b01 	strb.w	r1, [r3], #1
 800777e:	e7f9      	b.n	8007774 <memset+0x4>

08007780 <__cvt>:
 8007780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	ec55 4b10 	vmov	r4, r5, d0
 8007788:	2d00      	cmp	r5, #0
 800778a:	460e      	mov	r6, r1
 800778c:	4619      	mov	r1, r3
 800778e:	462b      	mov	r3, r5
 8007790:	bfbb      	ittet	lt
 8007792:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007796:	461d      	movlt	r5, r3
 8007798:	2300      	movge	r3, #0
 800779a:	232d      	movlt	r3, #45	; 0x2d
 800779c:	700b      	strb	r3, [r1, #0]
 800779e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077a4:	4691      	mov	r9, r2
 80077a6:	f023 0820 	bic.w	r8, r3, #32
 80077aa:	bfbc      	itt	lt
 80077ac:	4622      	movlt	r2, r4
 80077ae:	4614      	movlt	r4, r2
 80077b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077b4:	d005      	beq.n	80077c2 <__cvt+0x42>
 80077b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077ba:	d100      	bne.n	80077be <__cvt+0x3e>
 80077bc:	3601      	adds	r6, #1
 80077be:	2102      	movs	r1, #2
 80077c0:	e000      	b.n	80077c4 <__cvt+0x44>
 80077c2:	2103      	movs	r1, #3
 80077c4:	ab03      	add	r3, sp, #12
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	ab02      	add	r3, sp, #8
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	ec45 4b10 	vmov	d0, r4, r5
 80077d0:	4653      	mov	r3, sl
 80077d2:	4632      	mov	r2, r6
 80077d4:	f001 fc08 	bl	8008fe8 <_dtoa_r>
 80077d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077dc:	4607      	mov	r7, r0
 80077de:	d102      	bne.n	80077e6 <__cvt+0x66>
 80077e0:	f019 0f01 	tst.w	r9, #1
 80077e4:	d022      	beq.n	800782c <__cvt+0xac>
 80077e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077ea:	eb07 0906 	add.w	r9, r7, r6
 80077ee:	d110      	bne.n	8007812 <__cvt+0x92>
 80077f0:	783b      	ldrb	r3, [r7, #0]
 80077f2:	2b30      	cmp	r3, #48	; 0x30
 80077f4:	d10a      	bne.n	800780c <__cvt+0x8c>
 80077f6:	2200      	movs	r2, #0
 80077f8:	2300      	movs	r3, #0
 80077fa:	4620      	mov	r0, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	f7f9 facb 	bl	8000d98 <__aeabi_dcmpeq>
 8007802:	b918      	cbnz	r0, 800780c <__cvt+0x8c>
 8007804:	f1c6 0601 	rsb	r6, r6, #1
 8007808:	f8ca 6000 	str.w	r6, [sl]
 800780c:	f8da 3000 	ldr.w	r3, [sl]
 8007810:	4499      	add	r9, r3
 8007812:	2200      	movs	r2, #0
 8007814:	2300      	movs	r3, #0
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	f7f9 fabd 	bl	8000d98 <__aeabi_dcmpeq>
 800781e:	b108      	cbz	r0, 8007824 <__cvt+0xa4>
 8007820:	f8cd 900c 	str.w	r9, [sp, #12]
 8007824:	2230      	movs	r2, #48	; 0x30
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	454b      	cmp	r3, r9
 800782a:	d307      	bcc.n	800783c <__cvt+0xbc>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007830:	1bdb      	subs	r3, r3, r7
 8007832:	4638      	mov	r0, r7
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	b004      	add	sp, #16
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	1c59      	adds	r1, r3, #1
 800783e:	9103      	str	r1, [sp, #12]
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e7f0      	b.n	8007826 <__cvt+0xa6>

08007844 <__exponent>:
 8007844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007846:	4603      	mov	r3, r0
 8007848:	2900      	cmp	r1, #0
 800784a:	bfb8      	it	lt
 800784c:	4249      	neglt	r1, r1
 800784e:	f803 2b02 	strb.w	r2, [r3], #2
 8007852:	bfb4      	ite	lt
 8007854:	222d      	movlt	r2, #45	; 0x2d
 8007856:	222b      	movge	r2, #43	; 0x2b
 8007858:	2909      	cmp	r1, #9
 800785a:	7042      	strb	r2, [r0, #1]
 800785c:	dd2a      	ble.n	80078b4 <__exponent+0x70>
 800785e:	f10d 0407 	add.w	r4, sp, #7
 8007862:	46a4      	mov	ip, r4
 8007864:	270a      	movs	r7, #10
 8007866:	46a6      	mov	lr, r4
 8007868:	460a      	mov	r2, r1
 800786a:	fb91 f6f7 	sdiv	r6, r1, r7
 800786e:	fb07 1516 	mls	r5, r7, r6, r1
 8007872:	3530      	adds	r5, #48	; 0x30
 8007874:	2a63      	cmp	r2, #99	; 0x63
 8007876:	f104 34ff 	add.w	r4, r4, #4294967295
 800787a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800787e:	4631      	mov	r1, r6
 8007880:	dcf1      	bgt.n	8007866 <__exponent+0x22>
 8007882:	3130      	adds	r1, #48	; 0x30
 8007884:	f1ae 0502 	sub.w	r5, lr, #2
 8007888:	f804 1c01 	strb.w	r1, [r4, #-1]
 800788c:	1c44      	adds	r4, r0, #1
 800788e:	4629      	mov	r1, r5
 8007890:	4561      	cmp	r1, ip
 8007892:	d30a      	bcc.n	80078aa <__exponent+0x66>
 8007894:	f10d 0209 	add.w	r2, sp, #9
 8007898:	eba2 020e 	sub.w	r2, r2, lr
 800789c:	4565      	cmp	r5, ip
 800789e:	bf88      	it	hi
 80078a0:	2200      	movhi	r2, #0
 80078a2:	4413      	add	r3, r2
 80078a4:	1a18      	subs	r0, r3, r0
 80078a6:	b003      	add	sp, #12
 80078a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078b2:	e7ed      	b.n	8007890 <__exponent+0x4c>
 80078b4:	2330      	movs	r3, #48	; 0x30
 80078b6:	3130      	adds	r1, #48	; 0x30
 80078b8:	7083      	strb	r3, [r0, #2]
 80078ba:	70c1      	strb	r1, [r0, #3]
 80078bc:	1d03      	adds	r3, r0, #4
 80078be:	e7f1      	b.n	80078a4 <__exponent+0x60>

080078c0 <_printf_float>:
 80078c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ed2d 8b02 	vpush	{d8}
 80078c8:	b08d      	sub	sp, #52	; 0x34
 80078ca:	460c      	mov	r4, r1
 80078cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078d0:	4616      	mov	r6, r2
 80078d2:	461f      	mov	r7, r3
 80078d4:	4605      	mov	r5, r0
 80078d6:	f002 fce5 	bl	800a2a4 <_localeconv_r>
 80078da:	f8d0 a000 	ldr.w	sl, [r0]
 80078de:	4650      	mov	r0, sl
 80078e0:	f7f8 fdd8 	bl	8000494 <strlen>
 80078e4:	2300      	movs	r3, #0
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	9305      	str	r3, [sp, #20]
 80078ec:	f8d8 3000 	ldr.w	r3, [r8]
 80078f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078f4:	3307      	adds	r3, #7
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	f103 0208 	add.w	r2, r3, #8
 80078fe:	f8c8 2000 	str.w	r2, [r8]
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800790a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800790e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007912:	9307      	str	r3, [sp, #28]
 8007914:	f8cd 8018 	str.w	r8, [sp, #24]
 8007918:	ee08 0a10 	vmov	s16, r0
 800791c:	4b9f      	ldr	r3, [pc, #636]	; (8007b9c <_printf_float+0x2dc>)
 800791e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	f7f9 fa69 	bl	8000dfc <__aeabi_dcmpun>
 800792a:	bb88      	cbnz	r0, 8007990 <_printf_float+0xd0>
 800792c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007930:	4b9a      	ldr	r3, [pc, #616]	; (8007b9c <_printf_float+0x2dc>)
 8007932:	f04f 32ff 	mov.w	r2, #4294967295
 8007936:	f7f9 fa43 	bl	8000dc0 <__aeabi_dcmple>
 800793a:	bb48      	cbnz	r0, 8007990 <_printf_float+0xd0>
 800793c:	2200      	movs	r2, #0
 800793e:	2300      	movs	r3, #0
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	f7f9 fa32 	bl	8000dac <__aeabi_dcmplt>
 8007948:	b110      	cbz	r0, 8007950 <_printf_float+0x90>
 800794a:	232d      	movs	r3, #45	; 0x2d
 800794c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007950:	4b93      	ldr	r3, [pc, #588]	; (8007ba0 <_printf_float+0x2e0>)
 8007952:	4894      	ldr	r0, [pc, #592]	; (8007ba4 <_printf_float+0x2e4>)
 8007954:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007958:	bf94      	ite	ls
 800795a:	4698      	movls	r8, r3
 800795c:	4680      	movhi	r8, r0
 800795e:	2303      	movs	r3, #3
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	f023 0204 	bic.w	r2, r3, #4
 8007968:	6022      	str	r2, [r4, #0]
 800796a:	f04f 0900 	mov.w	r9, #0
 800796e:	9700      	str	r7, [sp, #0]
 8007970:	4633      	mov	r3, r6
 8007972:	aa0b      	add	r2, sp, #44	; 0x2c
 8007974:	4621      	mov	r1, r4
 8007976:	4628      	mov	r0, r5
 8007978:	f000 f9d8 	bl	8007d2c <_printf_common>
 800797c:	3001      	adds	r0, #1
 800797e:	f040 8090 	bne.w	8007aa2 <_printf_float+0x1e2>
 8007982:	f04f 30ff 	mov.w	r0, #4294967295
 8007986:	b00d      	add	sp, #52	; 0x34
 8007988:	ecbd 8b02 	vpop	{d8}
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	4642      	mov	r2, r8
 8007992:	464b      	mov	r3, r9
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f9 fa30 	bl	8000dfc <__aeabi_dcmpun>
 800799c:	b140      	cbz	r0, 80079b0 <_printf_float+0xf0>
 800799e:	464b      	mov	r3, r9
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	bfbc      	itt	lt
 80079a4:	232d      	movlt	r3, #45	; 0x2d
 80079a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079aa:	487f      	ldr	r0, [pc, #508]	; (8007ba8 <_printf_float+0x2e8>)
 80079ac:	4b7f      	ldr	r3, [pc, #508]	; (8007bac <_printf_float+0x2ec>)
 80079ae:	e7d1      	b.n	8007954 <_printf_float+0x94>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079b6:	9206      	str	r2, [sp, #24]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	d13f      	bne.n	8007a3c <_printf_float+0x17c>
 80079bc:	2306      	movs	r3, #6
 80079be:	6063      	str	r3, [r4, #4]
 80079c0:	9b05      	ldr	r3, [sp, #20]
 80079c2:	6861      	ldr	r1, [r4, #4]
 80079c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079c8:	2300      	movs	r3, #0
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	ab0a      	add	r3, sp, #40	; 0x28
 80079ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079d2:	ab09      	add	r3, sp, #36	; 0x24
 80079d4:	ec49 8b10 	vmov	d0, r8, r9
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	6022      	str	r2, [r4, #0]
 80079dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079e0:	4628      	mov	r0, r5
 80079e2:	f7ff fecd 	bl	8007780 <__cvt>
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ea:	2b47      	cmp	r3, #71	; 0x47
 80079ec:	4680      	mov	r8, r0
 80079ee:	d108      	bne.n	8007a02 <_printf_float+0x142>
 80079f0:	1cc8      	adds	r0, r1, #3
 80079f2:	db02      	blt.n	80079fa <_printf_float+0x13a>
 80079f4:	6863      	ldr	r3, [r4, #4]
 80079f6:	4299      	cmp	r1, r3
 80079f8:	dd41      	ble.n	8007a7e <_printf_float+0x1be>
 80079fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80079fe:	fa5f fb8b 	uxtb.w	fp, fp
 8007a02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a06:	d820      	bhi.n	8007a4a <_printf_float+0x18a>
 8007a08:	3901      	subs	r1, #1
 8007a0a:	465a      	mov	r2, fp
 8007a0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a10:	9109      	str	r1, [sp, #36]	; 0x24
 8007a12:	f7ff ff17 	bl	8007844 <__exponent>
 8007a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a18:	1813      	adds	r3, r2, r0
 8007a1a:	2a01      	cmp	r2, #1
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	dc02      	bgt.n	8007a28 <_printf_float+0x168>
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	07d2      	lsls	r2, r2, #31
 8007a26:	d501      	bpl.n	8007a2c <_printf_float+0x16c>
 8007a28:	3301      	adds	r3, #1
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d09c      	beq.n	800796e <_printf_float+0xae>
 8007a34:	232d      	movs	r3, #45	; 0x2d
 8007a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a3a:	e798      	b.n	800796e <_printf_float+0xae>
 8007a3c:	9a06      	ldr	r2, [sp, #24]
 8007a3e:	2a47      	cmp	r2, #71	; 0x47
 8007a40:	d1be      	bne.n	80079c0 <_printf_float+0x100>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1bc      	bne.n	80079c0 <_printf_float+0x100>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e7b9      	b.n	80079be <_printf_float+0xfe>
 8007a4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a4e:	d118      	bne.n	8007a82 <_printf_float+0x1c2>
 8007a50:	2900      	cmp	r1, #0
 8007a52:	6863      	ldr	r3, [r4, #4]
 8007a54:	dd0b      	ble.n	8007a6e <_printf_float+0x1ae>
 8007a56:	6121      	str	r1, [r4, #16]
 8007a58:	b913      	cbnz	r3, 8007a60 <_printf_float+0x1a0>
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	07d0      	lsls	r0, r2, #31
 8007a5e:	d502      	bpl.n	8007a66 <_printf_float+0x1a6>
 8007a60:	3301      	adds	r3, #1
 8007a62:	440b      	add	r3, r1
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a68:	f04f 0900 	mov.w	r9, #0
 8007a6c:	e7de      	b.n	8007a2c <_printf_float+0x16c>
 8007a6e:	b913      	cbnz	r3, 8007a76 <_printf_float+0x1b6>
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	07d2      	lsls	r2, r2, #31
 8007a74:	d501      	bpl.n	8007a7a <_printf_float+0x1ba>
 8007a76:	3302      	adds	r3, #2
 8007a78:	e7f4      	b.n	8007a64 <_printf_float+0x1a4>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e7f2      	b.n	8007a64 <_printf_float+0x1a4>
 8007a7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a84:	4299      	cmp	r1, r3
 8007a86:	db05      	blt.n	8007a94 <_printf_float+0x1d4>
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	6121      	str	r1, [r4, #16]
 8007a8c:	07d8      	lsls	r0, r3, #31
 8007a8e:	d5ea      	bpl.n	8007a66 <_printf_float+0x1a6>
 8007a90:	1c4b      	adds	r3, r1, #1
 8007a92:	e7e7      	b.n	8007a64 <_printf_float+0x1a4>
 8007a94:	2900      	cmp	r1, #0
 8007a96:	bfd4      	ite	le
 8007a98:	f1c1 0202 	rsble	r2, r1, #2
 8007a9c:	2201      	movgt	r2, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	e7e0      	b.n	8007a64 <_printf_float+0x1a4>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	055a      	lsls	r2, r3, #21
 8007aa6:	d407      	bmi.n	8007ab8 <_printf_float+0x1f8>
 8007aa8:	6923      	ldr	r3, [r4, #16]
 8007aaa:	4642      	mov	r2, r8
 8007aac:	4631      	mov	r1, r6
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b8      	blx	r7
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d12c      	bne.n	8007b10 <_printf_float+0x250>
 8007ab6:	e764      	b.n	8007982 <_printf_float+0xc2>
 8007ab8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007abc:	f240 80e0 	bls.w	8007c80 <_printf_float+0x3c0>
 8007ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f7f9 f966 	bl	8000d98 <__aeabi_dcmpeq>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d034      	beq.n	8007b3a <_printf_float+0x27a>
 8007ad0:	4a37      	ldr	r2, [pc, #220]	; (8007bb0 <_printf_float+0x2f0>)
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f af51 	beq.w	8007982 <_printf_float+0xc2>
 8007ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	db02      	blt.n	8007aee <_printf_float+0x22e>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	07d8      	lsls	r0, r3, #31
 8007aec:	d510      	bpl.n	8007b10 <_printf_float+0x250>
 8007aee:	ee18 3a10 	vmov	r3, s16
 8007af2:	4652      	mov	r2, sl
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af41 	beq.w	8007982 <_printf_float+0xc2>
 8007b00:	f04f 0800 	mov.w	r8, #0
 8007b04:	f104 091a 	add.w	r9, r4, #26
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	4543      	cmp	r3, r8
 8007b0e:	dc09      	bgt.n	8007b24 <_printf_float+0x264>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	079b      	lsls	r3, r3, #30
 8007b14:	f100 8105 	bmi.w	8007d22 <_printf_float+0x462>
 8007b18:	68e0      	ldr	r0, [r4, #12]
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1c:	4298      	cmp	r0, r3
 8007b1e:	bfb8      	it	lt
 8007b20:	4618      	movlt	r0, r3
 8007b22:	e730      	b.n	8007986 <_printf_float+0xc6>
 8007b24:	2301      	movs	r3, #1
 8007b26:	464a      	mov	r2, r9
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af27 	beq.w	8007982 <_printf_float+0xc2>
 8007b34:	f108 0801 	add.w	r8, r8, #1
 8007b38:	e7e6      	b.n	8007b08 <_printf_float+0x248>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dc39      	bgt.n	8007bb4 <_printf_float+0x2f4>
 8007b40:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <_printf_float+0x2f0>)
 8007b42:	2301      	movs	r3, #1
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f af19 	beq.w	8007982 <_printf_float+0xc2>
 8007b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d102      	bne.n	8007b5e <_printf_float+0x29e>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	07d9      	lsls	r1, r3, #31
 8007b5c:	d5d8      	bpl.n	8007b10 <_printf_float+0x250>
 8007b5e:	ee18 3a10 	vmov	r3, s16
 8007b62:	4652      	mov	r2, sl
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af09 	beq.w	8007982 <_printf_float+0xc2>
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	f104 0a1a 	add.w	sl, r4, #26
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	425b      	negs	r3, r3
 8007b7c:	454b      	cmp	r3, r9
 8007b7e:	dc01      	bgt.n	8007b84 <_printf_float+0x2c4>
 8007b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b82:	e792      	b.n	8007aaa <_printf_float+0x1ea>
 8007b84:	2301      	movs	r3, #1
 8007b86:	4652      	mov	r2, sl
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f43f aef7 	beq.w	8007982 <_printf_float+0xc2>
 8007b94:	f109 0901 	add.w	r9, r9, #1
 8007b98:	e7ee      	b.n	8007b78 <_printf_float+0x2b8>
 8007b9a:	bf00      	nop
 8007b9c:	7fefffff 	.word	0x7fefffff
 8007ba0:	0800c064 	.word	0x0800c064
 8007ba4:	0800c068 	.word	0x0800c068
 8007ba8:	0800c070 	.word	0x0800c070
 8007bac:	0800c06c 	.word	0x0800c06c
 8007bb0:	0800c074 	.word	0x0800c074
 8007bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	bfa8      	it	ge
 8007bbc:	461a      	movge	r2, r3
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	4691      	mov	r9, r2
 8007bc2:	dc37      	bgt.n	8007c34 <_printf_float+0x374>
 8007bc4:	f04f 0b00 	mov.w	fp, #0
 8007bc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bcc:	f104 021a 	add.w	r2, r4, #26
 8007bd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bd2:	9305      	str	r3, [sp, #20]
 8007bd4:	eba3 0309 	sub.w	r3, r3, r9
 8007bd8:	455b      	cmp	r3, fp
 8007bda:	dc33      	bgt.n	8007c44 <_printf_float+0x384>
 8007bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007be0:	429a      	cmp	r2, r3
 8007be2:	db3b      	blt.n	8007c5c <_printf_float+0x39c>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	07da      	lsls	r2, r3, #31
 8007be8:	d438      	bmi.n	8007c5c <_printf_float+0x39c>
 8007bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bf0:	1a9a      	subs	r2, r3, r2
 8007bf2:	eba3 0901 	sub.w	r9, r3, r1
 8007bf6:	4591      	cmp	r9, r2
 8007bf8:	bfa8      	it	ge
 8007bfa:	4691      	movge	r9, r2
 8007bfc:	f1b9 0f00 	cmp.w	r9, #0
 8007c00:	dc35      	bgt.n	8007c6e <_printf_float+0x3ae>
 8007c02:	f04f 0800 	mov.w	r8, #0
 8007c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c0a:	f104 0a1a 	add.w	sl, r4, #26
 8007c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	eba3 0309 	sub.w	r3, r3, r9
 8007c18:	4543      	cmp	r3, r8
 8007c1a:	f77f af79 	ble.w	8007b10 <_printf_float+0x250>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4652      	mov	r2, sl
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f aeaa 	beq.w	8007982 <_printf_float+0xc2>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	e7ec      	b.n	8007c0e <_printf_float+0x34e>
 8007c34:	4613      	mov	r3, r2
 8007c36:	4631      	mov	r1, r6
 8007c38:	4642      	mov	r2, r8
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	d1c0      	bne.n	8007bc4 <_printf_float+0x304>
 8007c42:	e69e      	b.n	8007982 <_printf_float+0xc2>
 8007c44:	2301      	movs	r3, #1
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	9205      	str	r2, [sp, #20]
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f ae97 	beq.w	8007982 <_printf_float+0xc2>
 8007c54:	9a05      	ldr	r2, [sp, #20]
 8007c56:	f10b 0b01 	add.w	fp, fp, #1
 8007c5a:	e7b9      	b.n	8007bd0 <_printf_float+0x310>
 8007c5c:	ee18 3a10 	vmov	r3, s16
 8007c60:	4652      	mov	r2, sl
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	d1be      	bne.n	8007bea <_printf_float+0x32a>
 8007c6c:	e689      	b.n	8007982 <_printf_float+0xc2>
 8007c6e:	9a05      	ldr	r2, [sp, #20]
 8007c70:	464b      	mov	r3, r9
 8007c72:	4442      	add	r2, r8
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d1c1      	bne.n	8007c02 <_printf_float+0x342>
 8007c7e:	e680      	b.n	8007982 <_printf_float+0xc2>
 8007c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c82:	2a01      	cmp	r2, #1
 8007c84:	dc01      	bgt.n	8007c8a <_printf_float+0x3ca>
 8007c86:	07db      	lsls	r3, r3, #31
 8007c88:	d538      	bpl.n	8007cfc <_printf_float+0x43c>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae74 	beq.w	8007982 <_printf_float+0xc2>
 8007c9a:	ee18 3a10 	vmov	r3, s16
 8007c9e:	4652      	mov	r2, sl
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f ae6b 	beq.w	8007982 <_printf_float+0xc2>
 8007cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f7f9 f870 	bl	8000d98 <__aeabi_dcmpeq>
 8007cb8:	b9d8      	cbnz	r0, 8007cf2 <_printf_float+0x432>
 8007cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cbc:	f108 0201 	add.w	r2, r8, #1
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d10e      	bne.n	8007cea <_printf_float+0x42a>
 8007ccc:	e659      	b.n	8007982 <_printf_float+0xc2>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	4652      	mov	r2, sl
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	f43f ae52 	beq.w	8007982 <_printf_float+0xc2>
 8007cde:	f108 0801 	add.w	r8, r8, #1
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4543      	cmp	r3, r8
 8007ce8:	dcf1      	bgt.n	8007cce <_printf_float+0x40e>
 8007cea:	464b      	mov	r3, r9
 8007cec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cf0:	e6dc      	b.n	8007aac <_printf_float+0x1ec>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	f104 0a1a 	add.w	sl, r4, #26
 8007cfa:	e7f2      	b.n	8007ce2 <_printf_float+0x422>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4642      	mov	r2, r8
 8007d00:	e7df      	b.n	8007cc2 <_printf_float+0x402>
 8007d02:	2301      	movs	r3, #1
 8007d04:	464a      	mov	r2, r9
 8007d06:	4631      	mov	r1, r6
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b8      	blx	r7
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	f43f ae38 	beq.w	8007982 <_printf_float+0xc2>
 8007d12:	f108 0801 	add.w	r8, r8, #1
 8007d16:	68e3      	ldr	r3, [r4, #12]
 8007d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d1a:	1a5b      	subs	r3, r3, r1
 8007d1c:	4543      	cmp	r3, r8
 8007d1e:	dcf0      	bgt.n	8007d02 <_printf_float+0x442>
 8007d20:	e6fa      	b.n	8007b18 <_printf_float+0x258>
 8007d22:	f04f 0800 	mov.w	r8, #0
 8007d26:	f104 0919 	add.w	r9, r4, #25
 8007d2a:	e7f4      	b.n	8007d16 <_printf_float+0x456>

08007d2c <_printf_common>:
 8007d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d30:	4616      	mov	r6, r2
 8007d32:	4699      	mov	r9, r3
 8007d34:	688a      	ldr	r2, [r1, #8]
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bfb8      	it	lt
 8007d40:	4613      	movlt	r3, r2
 8007d42:	6033      	str	r3, [r6, #0]
 8007d44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d48:	4607      	mov	r7, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	b10a      	cbz	r2, 8007d52 <_printf_common+0x26>
 8007d4e:	3301      	adds	r3, #1
 8007d50:	6033      	str	r3, [r6, #0]
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	0699      	lsls	r1, r3, #26
 8007d56:	bf42      	ittt	mi
 8007d58:	6833      	ldrmi	r3, [r6, #0]
 8007d5a:	3302      	addmi	r3, #2
 8007d5c:	6033      	strmi	r3, [r6, #0]
 8007d5e:	6825      	ldr	r5, [r4, #0]
 8007d60:	f015 0506 	ands.w	r5, r5, #6
 8007d64:	d106      	bne.n	8007d74 <_printf_common+0x48>
 8007d66:	f104 0a19 	add.w	sl, r4, #25
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	6832      	ldr	r2, [r6, #0]
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dc26      	bgt.n	8007dc2 <_printf_common+0x96>
 8007d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d78:	1e13      	subs	r3, r2, #0
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	bf18      	it	ne
 8007d7e:	2301      	movne	r3, #1
 8007d80:	0692      	lsls	r2, r2, #26
 8007d82:	d42b      	bmi.n	8007ddc <_printf_common+0xb0>
 8007d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d88:	4649      	mov	r1, r9
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c0      	blx	r8
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d01e      	beq.n	8007dd0 <_printf_common+0xa4>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	68e5      	ldr	r5, [r4, #12]
 8007d96:	6832      	ldr	r2, [r6, #0]
 8007d98:	f003 0306 	and.w	r3, r3, #6
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	bf08      	it	eq
 8007da0:	1aad      	subeq	r5, r5, r2
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	bf0c      	ite	eq
 8007da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dac:	2500      	movne	r5, #0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	bfc4      	itt	gt
 8007db2:	1a9b      	subgt	r3, r3, r2
 8007db4:	18ed      	addgt	r5, r5, r3
 8007db6:	2600      	movs	r6, #0
 8007db8:	341a      	adds	r4, #26
 8007dba:	42b5      	cmp	r5, r6
 8007dbc:	d11a      	bne.n	8007df4 <_printf_common+0xc8>
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e008      	b.n	8007dd4 <_printf_common+0xa8>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	4652      	mov	r2, sl
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4638      	mov	r0, r7
 8007dca:	47c0      	blx	r8
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d103      	bne.n	8007dd8 <_printf_common+0xac>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd8:	3501      	adds	r5, #1
 8007dda:	e7c6      	b.n	8007d6a <_printf_common+0x3e>
 8007ddc:	18e1      	adds	r1, r4, r3
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	2030      	movs	r0, #48	; 0x30
 8007de2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007de6:	4422      	add	r2, r4
 8007de8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007df0:	3302      	adds	r3, #2
 8007df2:	e7c7      	b.n	8007d84 <_printf_common+0x58>
 8007df4:	2301      	movs	r3, #1
 8007df6:	4622      	mov	r2, r4
 8007df8:	4649      	mov	r1, r9
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	47c0      	blx	r8
 8007dfe:	3001      	adds	r0, #1
 8007e00:	d0e6      	beq.n	8007dd0 <_printf_common+0xa4>
 8007e02:	3601      	adds	r6, #1
 8007e04:	e7d9      	b.n	8007dba <_printf_common+0x8e>
	...

08007e08 <_printf_i>:
 8007e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e0c:	7e0f      	ldrb	r7, [r1, #24]
 8007e0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e10:	2f78      	cmp	r7, #120	; 0x78
 8007e12:	4691      	mov	r9, r2
 8007e14:	4680      	mov	r8, r0
 8007e16:	460c      	mov	r4, r1
 8007e18:	469a      	mov	sl, r3
 8007e1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e1e:	d807      	bhi.n	8007e30 <_printf_i+0x28>
 8007e20:	2f62      	cmp	r7, #98	; 0x62
 8007e22:	d80a      	bhi.n	8007e3a <_printf_i+0x32>
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	f000 80d8 	beq.w	8007fda <_printf_i+0x1d2>
 8007e2a:	2f58      	cmp	r7, #88	; 0x58
 8007e2c:	f000 80a3 	beq.w	8007f76 <_printf_i+0x16e>
 8007e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e38:	e03a      	b.n	8007eb0 <_printf_i+0xa8>
 8007e3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e3e:	2b15      	cmp	r3, #21
 8007e40:	d8f6      	bhi.n	8007e30 <_printf_i+0x28>
 8007e42:	a101      	add	r1, pc, #4	; (adr r1, 8007e48 <_printf_i+0x40>)
 8007e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e48:	08007ea1 	.word	0x08007ea1
 8007e4c:	08007eb5 	.word	0x08007eb5
 8007e50:	08007e31 	.word	0x08007e31
 8007e54:	08007e31 	.word	0x08007e31
 8007e58:	08007e31 	.word	0x08007e31
 8007e5c:	08007e31 	.word	0x08007e31
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007e31 	.word	0x08007e31
 8007e68:	08007e31 	.word	0x08007e31
 8007e6c:	08007e31 	.word	0x08007e31
 8007e70:	08007e31 	.word	0x08007e31
 8007e74:	08007fc1 	.word	0x08007fc1
 8007e78:	08007ee5 	.word	0x08007ee5
 8007e7c:	08007fa3 	.word	0x08007fa3
 8007e80:	08007e31 	.word	0x08007e31
 8007e84:	08007e31 	.word	0x08007e31
 8007e88:	08007fe3 	.word	0x08007fe3
 8007e8c:	08007e31 	.word	0x08007e31
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007e31 	.word	0x08007e31
 8007e98:	08007e31 	.word	0x08007e31
 8007e9c:	08007fab 	.word	0x08007fab
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	1d1a      	adds	r2, r3, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	602a      	str	r2, [r5, #0]
 8007ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e0a3      	b.n	8007ffc <_printf_i+0x1f4>
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	6829      	ldr	r1, [r5, #0]
 8007eb8:	0606      	lsls	r6, r0, #24
 8007eba:	f101 0304 	add.w	r3, r1, #4
 8007ebe:	d50a      	bpl.n	8007ed6 <_printf_i+0xce>
 8007ec0:	680e      	ldr	r6, [r1, #0]
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	2e00      	cmp	r6, #0
 8007ec6:	da03      	bge.n	8007ed0 <_printf_i+0xc8>
 8007ec8:	232d      	movs	r3, #45	; 0x2d
 8007eca:	4276      	negs	r6, r6
 8007ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed0:	485e      	ldr	r0, [pc, #376]	; (800804c <_printf_i+0x244>)
 8007ed2:	230a      	movs	r3, #10
 8007ed4:	e019      	b.n	8007f0a <_printf_i+0x102>
 8007ed6:	680e      	ldr	r6, [r1, #0]
 8007ed8:	602b      	str	r3, [r5, #0]
 8007eda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ede:	bf18      	it	ne
 8007ee0:	b236      	sxthne	r6, r6
 8007ee2:	e7ef      	b.n	8007ec4 <_printf_i+0xbc>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	6820      	ldr	r0, [r4, #0]
 8007ee8:	1d19      	adds	r1, r3, #4
 8007eea:	6029      	str	r1, [r5, #0]
 8007eec:	0601      	lsls	r1, r0, #24
 8007eee:	d501      	bpl.n	8007ef4 <_printf_i+0xec>
 8007ef0:	681e      	ldr	r6, [r3, #0]
 8007ef2:	e002      	b.n	8007efa <_printf_i+0xf2>
 8007ef4:	0646      	lsls	r6, r0, #25
 8007ef6:	d5fb      	bpl.n	8007ef0 <_printf_i+0xe8>
 8007ef8:	881e      	ldrh	r6, [r3, #0]
 8007efa:	4854      	ldr	r0, [pc, #336]	; (800804c <_printf_i+0x244>)
 8007efc:	2f6f      	cmp	r7, #111	; 0x6f
 8007efe:	bf0c      	ite	eq
 8007f00:	2308      	moveq	r3, #8
 8007f02:	230a      	movne	r3, #10
 8007f04:	2100      	movs	r1, #0
 8007f06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f0a:	6865      	ldr	r5, [r4, #4]
 8007f0c:	60a5      	str	r5, [r4, #8]
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	bfa2      	ittt	ge
 8007f12:	6821      	ldrge	r1, [r4, #0]
 8007f14:	f021 0104 	bicge.w	r1, r1, #4
 8007f18:	6021      	strge	r1, [r4, #0]
 8007f1a:	b90e      	cbnz	r6, 8007f20 <_printf_i+0x118>
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	d04d      	beq.n	8007fbc <_printf_i+0x1b4>
 8007f20:	4615      	mov	r5, r2
 8007f22:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f26:	fb03 6711 	mls	r7, r3, r1, r6
 8007f2a:	5dc7      	ldrb	r7, [r0, r7]
 8007f2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f30:	4637      	mov	r7, r6
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	460e      	mov	r6, r1
 8007f36:	d9f4      	bls.n	8007f22 <_printf_i+0x11a>
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d10b      	bne.n	8007f54 <_printf_i+0x14c>
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	07de      	lsls	r6, r3, #31
 8007f40:	d508      	bpl.n	8007f54 <_printf_i+0x14c>
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4299      	cmp	r1, r3
 8007f48:	bfde      	ittt	le
 8007f4a:	2330      	movle	r3, #48	; 0x30
 8007f4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f54:	1b52      	subs	r2, r2, r5
 8007f56:	6122      	str	r2, [r4, #16]
 8007f58:	f8cd a000 	str.w	sl, [sp]
 8007f5c:	464b      	mov	r3, r9
 8007f5e:	aa03      	add	r2, sp, #12
 8007f60:	4621      	mov	r1, r4
 8007f62:	4640      	mov	r0, r8
 8007f64:	f7ff fee2 	bl	8007d2c <_printf_common>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d14c      	bne.n	8008006 <_printf_i+0x1fe>
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	b004      	add	sp, #16
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	4835      	ldr	r0, [pc, #212]	; (800804c <_printf_i+0x244>)
 8007f78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f7c:	6829      	ldr	r1, [r5, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f84:	6029      	str	r1, [r5, #0]
 8007f86:	061d      	lsls	r5, r3, #24
 8007f88:	d514      	bpl.n	8007fb4 <_printf_i+0x1ac>
 8007f8a:	07df      	lsls	r7, r3, #31
 8007f8c:	bf44      	itt	mi
 8007f8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f92:	6023      	strmi	r3, [r4, #0]
 8007f94:	b91e      	cbnz	r6, 8007f9e <_printf_i+0x196>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	f023 0320 	bic.w	r3, r3, #32
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	e7b0      	b.n	8007f04 <_printf_i+0xfc>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	f043 0320 	orr.w	r3, r3, #32
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	2378      	movs	r3, #120	; 0x78
 8007fac:	4828      	ldr	r0, [pc, #160]	; (8008050 <_printf_i+0x248>)
 8007fae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fb2:	e7e3      	b.n	8007f7c <_printf_i+0x174>
 8007fb4:	0659      	lsls	r1, r3, #25
 8007fb6:	bf48      	it	mi
 8007fb8:	b2b6      	uxthmi	r6, r6
 8007fba:	e7e6      	b.n	8007f8a <_printf_i+0x182>
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	e7bb      	b.n	8007f38 <_printf_i+0x130>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	6826      	ldr	r6, [r4, #0]
 8007fc4:	6961      	ldr	r1, [r4, #20]
 8007fc6:	1d18      	adds	r0, r3, #4
 8007fc8:	6028      	str	r0, [r5, #0]
 8007fca:	0635      	lsls	r5, r6, #24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	d501      	bpl.n	8007fd4 <_printf_i+0x1cc>
 8007fd0:	6019      	str	r1, [r3, #0]
 8007fd2:	e002      	b.n	8007fda <_printf_i+0x1d2>
 8007fd4:	0670      	lsls	r0, r6, #25
 8007fd6:	d5fb      	bpl.n	8007fd0 <_printf_i+0x1c8>
 8007fd8:	8019      	strh	r1, [r3, #0]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	4615      	mov	r5, r2
 8007fe0:	e7ba      	b.n	8007f58 <_printf_i+0x150>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	1d1a      	adds	r2, r3, #4
 8007fe6:	602a      	str	r2, [r5, #0]
 8007fe8:	681d      	ldr	r5, [r3, #0]
 8007fea:	6862      	ldr	r2, [r4, #4]
 8007fec:	2100      	movs	r1, #0
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7f8 fa5e 	bl	80004b0 <memchr>
 8007ff4:	b108      	cbz	r0, 8007ffa <_printf_i+0x1f2>
 8007ff6:	1b40      	subs	r0, r0, r5
 8007ff8:	6060      	str	r0, [r4, #4]
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	2300      	movs	r3, #0
 8008000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008004:	e7a8      	b.n	8007f58 <_printf_i+0x150>
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	462a      	mov	r2, r5
 800800a:	4649      	mov	r1, r9
 800800c:	4640      	mov	r0, r8
 800800e:	47d0      	blx	sl
 8008010:	3001      	adds	r0, #1
 8008012:	d0ab      	beq.n	8007f6c <_printf_i+0x164>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	079b      	lsls	r3, r3, #30
 8008018:	d413      	bmi.n	8008042 <_printf_i+0x23a>
 800801a:	68e0      	ldr	r0, [r4, #12]
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	4298      	cmp	r0, r3
 8008020:	bfb8      	it	lt
 8008022:	4618      	movlt	r0, r3
 8008024:	e7a4      	b.n	8007f70 <_printf_i+0x168>
 8008026:	2301      	movs	r3, #1
 8008028:	4632      	mov	r2, r6
 800802a:	4649      	mov	r1, r9
 800802c:	4640      	mov	r0, r8
 800802e:	47d0      	blx	sl
 8008030:	3001      	adds	r0, #1
 8008032:	d09b      	beq.n	8007f6c <_printf_i+0x164>
 8008034:	3501      	adds	r5, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	9903      	ldr	r1, [sp, #12]
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	42ab      	cmp	r3, r5
 800803e:	dcf2      	bgt.n	8008026 <_printf_i+0x21e>
 8008040:	e7eb      	b.n	800801a <_printf_i+0x212>
 8008042:	2500      	movs	r5, #0
 8008044:	f104 0619 	add.w	r6, r4, #25
 8008048:	e7f5      	b.n	8008036 <_printf_i+0x22e>
 800804a:	bf00      	nop
 800804c:	0800c076 	.word	0x0800c076
 8008050:	0800c087 	.word	0x0800c087

08008054 <strcpy>:
 8008054:	4603      	mov	r3, r0
 8008056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805a:	f803 2b01 	strb.w	r2, [r3], #1
 800805e:	2a00      	cmp	r2, #0
 8008060:	d1f9      	bne.n	8008056 <strcpy+0x2>
 8008062:	4770      	bx	lr

08008064 <sulp>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	460d      	mov	r5, r1
 800806a:	ec45 4b10 	vmov	d0, r4, r5
 800806e:	4616      	mov	r6, r2
 8008070:	f002 fca8 	bl	800a9c4 <__ulp>
 8008074:	ec51 0b10 	vmov	r0, r1, d0
 8008078:	b17e      	cbz	r6, 800809a <sulp+0x36>
 800807a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800807e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008082:	2b00      	cmp	r3, #0
 8008084:	dd09      	ble.n	800809a <sulp+0x36>
 8008086:	051b      	lsls	r3, r3, #20
 8008088:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800808c:	2400      	movs	r4, #0
 800808e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	f7f8 fc17 	bl	80008c8 <__aeabi_dmul>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	0000      	movs	r0, r0
	...

080080a0 <_strtod_l>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	ed2d 8b02 	vpush	{d8}
 80080a8:	b09d      	sub	sp, #116	; 0x74
 80080aa:	461f      	mov	r7, r3
 80080ac:	2300      	movs	r3, #0
 80080ae:	9318      	str	r3, [sp, #96]	; 0x60
 80080b0:	4ba2      	ldr	r3, [pc, #648]	; (800833c <_strtod_l+0x29c>)
 80080b2:	9213      	str	r2, [sp, #76]	; 0x4c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	9305      	str	r3, [sp, #20]
 80080b8:	4604      	mov	r4, r0
 80080ba:	4618      	mov	r0, r3
 80080bc:	4688      	mov	r8, r1
 80080be:	f7f8 f9e9 	bl	8000494 <strlen>
 80080c2:	f04f 0a00 	mov.w	sl, #0
 80080c6:	4605      	mov	r5, r0
 80080c8:	f04f 0b00 	mov.w	fp, #0
 80080cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80080d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080d2:	781a      	ldrb	r2, [r3, #0]
 80080d4:	2a2b      	cmp	r2, #43	; 0x2b
 80080d6:	d04e      	beq.n	8008176 <_strtod_l+0xd6>
 80080d8:	d83b      	bhi.n	8008152 <_strtod_l+0xb2>
 80080da:	2a0d      	cmp	r2, #13
 80080dc:	d834      	bhi.n	8008148 <_strtod_l+0xa8>
 80080de:	2a08      	cmp	r2, #8
 80080e0:	d834      	bhi.n	800814c <_strtod_l+0xac>
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d03e      	beq.n	8008164 <_strtod_l+0xc4>
 80080e6:	2300      	movs	r3, #0
 80080e8:	930a      	str	r3, [sp, #40]	; 0x28
 80080ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80080ec:	7833      	ldrb	r3, [r6, #0]
 80080ee:	2b30      	cmp	r3, #48	; 0x30
 80080f0:	f040 80b0 	bne.w	8008254 <_strtod_l+0x1b4>
 80080f4:	7873      	ldrb	r3, [r6, #1]
 80080f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080fa:	2b58      	cmp	r3, #88	; 0x58
 80080fc:	d168      	bne.n	80081d0 <_strtod_l+0x130>
 80080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	ab18      	add	r3, sp, #96	; 0x60
 8008104:	9702      	str	r7, [sp, #8]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4a8d      	ldr	r2, [pc, #564]	; (8008340 <_strtod_l+0x2a0>)
 800810a:	ab19      	add	r3, sp, #100	; 0x64
 800810c:	a917      	add	r1, sp, #92	; 0x5c
 800810e:	4620      	mov	r0, r4
 8008110:	f001 fdc0 	bl	8009c94 <__gethex>
 8008114:	f010 0707 	ands.w	r7, r0, #7
 8008118:	4605      	mov	r5, r0
 800811a:	d005      	beq.n	8008128 <_strtod_l+0x88>
 800811c:	2f06      	cmp	r7, #6
 800811e:	d12c      	bne.n	800817a <_strtod_l+0xda>
 8008120:	3601      	adds	r6, #1
 8008122:	2300      	movs	r3, #0
 8008124:	9617      	str	r6, [sp, #92]	; 0x5c
 8008126:	930a      	str	r3, [sp, #40]	; 0x28
 8008128:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 8590 	bne.w	8008c50 <_strtod_l+0xbb0>
 8008130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008132:	b1eb      	cbz	r3, 8008170 <_strtod_l+0xd0>
 8008134:	4652      	mov	r2, sl
 8008136:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800813a:	ec43 2b10 	vmov	d0, r2, r3
 800813e:	b01d      	add	sp, #116	; 0x74
 8008140:	ecbd 8b02 	vpop	{d8}
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	2a20      	cmp	r2, #32
 800814a:	d1cc      	bne.n	80080e6 <_strtod_l+0x46>
 800814c:	3301      	adds	r3, #1
 800814e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008150:	e7be      	b.n	80080d0 <_strtod_l+0x30>
 8008152:	2a2d      	cmp	r2, #45	; 0x2d
 8008154:	d1c7      	bne.n	80080e6 <_strtod_l+0x46>
 8008156:	2201      	movs	r2, #1
 8008158:	920a      	str	r2, [sp, #40]	; 0x28
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	9217      	str	r2, [sp, #92]	; 0x5c
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1c2      	bne.n	80080ea <_strtod_l+0x4a>
 8008164:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008166:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800816a:	2b00      	cmp	r3, #0
 800816c:	f040 856e 	bne.w	8008c4c <_strtod_l+0xbac>
 8008170:	4652      	mov	r2, sl
 8008172:	465b      	mov	r3, fp
 8008174:	e7e1      	b.n	800813a <_strtod_l+0x9a>
 8008176:	2200      	movs	r2, #0
 8008178:	e7ee      	b.n	8008158 <_strtod_l+0xb8>
 800817a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800817c:	b13a      	cbz	r2, 800818e <_strtod_l+0xee>
 800817e:	2135      	movs	r1, #53	; 0x35
 8008180:	a81a      	add	r0, sp, #104	; 0x68
 8008182:	f002 fd2a 	bl	800abda <__copybits>
 8008186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008188:	4620      	mov	r0, r4
 800818a:	f002 f8e9 	bl	800a360 <_Bfree>
 800818e:	3f01      	subs	r7, #1
 8008190:	2f04      	cmp	r7, #4
 8008192:	d806      	bhi.n	80081a2 <_strtod_l+0x102>
 8008194:	e8df f007 	tbb	[pc, r7]
 8008198:	1714030a 	.word	0x1714030a
 800819c:	0a          	.byte	0x0a
 800819d:	00          	.byte	0x00
 800819e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80081a2:	0728      	lsls	r0, r5, #28
 80081a4:	d5c0      	bpl.n	8008128 <_strtod_l+0x88>
 80081a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081aa:	e7bd      	b.n	8008128 <_strtod_l+0x88>
 80081ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80081b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081be:	e7f0      	b.n	80081a2 <_strtod_l+0x102>
 80081c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008344 <_strtod_l+0x2a4>
 80081c4:	e7ed      	b.n	80081a2 <_strtod_l+0x102>
 80081c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80081ca:	f04f 3aff 	mov.w	sl, #4294967295
 80081ce:	e7e8      	b.n	80081a2 <_strtod_l+0x102>
 80081d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	2b30      	cmp	r3, #48	; 0x30
 80081da:	d0f9      	beq.n	80081d0 <_strtod_l+0x130>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0a3      	beq.n	8008128 <_strtod_l+0x88>
 80081e0:	2301      	movs	r3, #1
 80081e2:	f04f 0900 	mov.w	r9, #0
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	f8cd 901c 	str.w	r9, [sp, #28]
 80081f0:	464f      	mov	r7, r9
 80081f2:	220a      	movs	r2, #10
 80081f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80081f6:	7806      	ldrb	r6, [r0, #0]
 80081f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80081fc:	b2d9      	uxtb	r1, r3
 80081fe:	2909      	cmp	r1, #9
 8008200:	d92a      	bls.n	8008258 <_strtod_l+0x1b8>
 8008202:	9905      	ldr	r1, [sp, #20]
 8008204:	462a      	mov	r2, r5
 8008206:	f002 ff9d 	bl	800b144 <strncmp>
 800820a:	b398      	cbz	r0, 8008274 <_strtod_l+0x1d4>
 800820c:	2000      	movs	r0, #0
 800820e:	4632      	mov	r2, r6
 8008210:	463d      	mov	r5, r7
 8008212:	9005      	str	r0, [sp, #20]
 8008214:	4603      	mov	r3, r0
 8008216:	2a65      	cmp	r2, #101	; 0x65
 8008218:	d001      	beq.n	800821e <_strtod_l+0x17e>
 800821a:	2a45      	cmp	r2, #69	; 0x45
 800821c:	d118      	bne.n	8008250 <_strtod_l+0x1b0>
 800821e:	b91d      	cbnz	r5, 8008228 <_strtod_l+0x188>
 8008220:	9a04      	ldr	r2, [sp, #16]
 8008222:	4302      	orrs	r2, r0
 8008224:	d09e      	beq.n	8008164 <_strtod_l+0xc4>
 8008226:	2500      	movs	r5, #0
 8008228:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800822c:	f108 0201 	add.w	r2, r8, #1
 8008230:	9217      	str	r2, [sp, #92]	; 0x5c
 8008232:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008236:	2a2b      	cmp	r2, #43	; 0x2b
 8008238:	d075      	beq.n	8008326 <_strtod_l+0x286>
 800823a:	2a2d      	cmp	r2, #45	; 0x2d
 800823c:	d07b      	beq.n	8008336 <_strtod_l+0x296>
 800823e:	f04f 0c00 	mov.w	ip, #0
 8008242:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008246:	2909      	cmp	r1, #9
 8008248:	f240 8082 	bls.w	8008350 <_strtod_l+0x2b0>
 800824c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008250:	2600      	movs	r6, #0
 8008252:	e09d      	b.n	8008390 <_strtod_l+0x2f0>
 8008254:	2300      	movs	r3, #0
 8008256:	e7c4      	b.n	80081e2 <_strtod_l+0x142>
 8008258:	2f08      	cmp	r7, #8
 800825a:	bfd8      	it	le
 800825c:	9907      	ldrle	r1, [sp, #28]
 800825e:	f100 0001 	add.w	r0, r0, #1
 8008262:	bfda      	itte	le
 8008264:	fb02 3301 	mlale	r3, r2, r1, r3
 8008268:	9307      	strle	r3, [sp, #28]
 800826a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800826e:	3701      	adds	r7, #1
 8008270:	9017      	str	r0, [sp, #92]	; 0x5c
 8008272:	e7bf      	b.n	80081f4 <_strtod_l+0x154>
 8008274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008276:	195a      	adds	r2, r3, r5
 8008278:	9217      	str	r2, [sp, #92]	; 0x5c
 800827a:	5d5a      	ldrb	r2, [r3, r5]
 800827c:	2f00      	cmp	r7, #0
 800827e:	d037      	beq.n	80082f0 <_strtod_l+0x250>
 8008280:	9005      	str	r0, [sp, #20]
 8008282:	463d      	mov	r5, r7
 8008284:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008288:	2b09      	cmp	r3, #9
 800828a:	d912      	bls.n	80082b2 <_strtod_l+0x212>
 800828c:	2301      	movs	r3, #1
 800828e:	e7c2      	b.n	8008216 <_strtod_l+0x176>
 8008290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	9217      	str	r2, [sp, #92]	; 0x5c
 8008296:	785a      	ldrb	r2, [r3, #1]
 8008298:	3001      	adds	r0, #1
 800829a:	2a30      	cmp	r2, #48	; 0x30
 800829c:	d0f8      	beq.n	8008290 <_strtod_l+0x1f0>
 800829e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082a2:	2b08      	cmp	r3, #8
 80082a4:	f200 84d9 	bhi.w	8008c5a <_strtod_l+0xbba>
 80082a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082aa:	9005      	str	r0, [sp, #20]
 80082ac:	2000      	movs	r0, #0
 80082ae:	9308      	str	r3, [sp, #32]
 80082b0:	4605      	mov	r5, r0
 80082b2:	3a30      	subs	r2, #48	; 0x30
 80082b4:	f100 0301 	add.w	r3, r0, #1
 80082b8:	d014      	beq.n	80082e4 <_strtod_l+0x244>
 80082ba:	9905      	ldr	r1, [sp, #20]
 80082bc:	4419      	add	r1, r3
 80082be:	9105      	str	r1, [sp, #20]
 80082c0:	462b      	mov	r3, r5
 80082c2:	eb00 0e05 	add.w	lr, r0, r5
 80082c6:	210a      	movs	r1, #10
 80082c8:	4573      	cmp	r3, lr
 80082ca:	d113      	bne.n	80082f4 <_strtod_l+0x254>
 80082cc:	182b      	adds	r3, r5, r0
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	f105 0501 	add.w	r5, r5, #1
 80082d4:	4405      	add	r5, r0
 80082d6:	dc1c      	bgt.n	8008312 <_strtod_l+0x272>
 80082d8:	9907      	ldr	r1, [sp, #28]
 80082da:	230a      	movs	r3, #10
 80082dc:	fb03 2301 	mla	r3, r3, r1, r2
 80082e0:	9307      	str	r3, [sp, #28]
 80082e2:	2300      	movs	r3, #0
 80082e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082e6:	1c51      	adds	r1, r2, #1
 80082e8:	9117      	str	r1, [sp, #92]	; 0x5c
 80082ea:	7852      	ldrb	r2, [r2, #1]
 80082ec:	4618      	mov	r0, r3
 80082ee:	e7c9      	b.n	8008284 <_strtod_l+0x1e4>
 80082f0:	4638      	mov	r0, r7
 80082f2:	e7d2      	b.n	800829a <_strtod_l+0x1fa>
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	dc04      	bgt.n	8008302 <_strtod_l+0x262>
 80082f8:	9e07      	ldr	r6, [sp, #28]
 80082fa:	434e      	muls	r6, r1
 80082fc:	9607      	str	r6, [sp, #28]
 80082fe:	3301      	adds	r3, #1
 8008300:	e7e2      	b.n	80082c8 <_strtod_l+0x228>
 8008302:	f103 0c01 	add.w	ip, r3, #1
 8008306:	f1bc 0f10 	cmp.w	ip, #16
 800830a:	bfd8      	it	le
 800830c:	fb01 f909 	mulle.w	r9, r1, r9
 8008310:	e7f5      	b.n	80082fe <_strtod_l+0x25e>
 8008312:	2d10      	cmp	r5, #16
 8008314:	bfdc      	itt	le
 8008316:	230a      	movle	r3, #10
 8008318:	fb03 2909 	mlale	r9, r3, r9, r2
 800831c:	e7e1      	b.n	80082e2 <_strtod_l+0x242>
 800831e:	2300      	movs	r3, #0
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	2301      	movs	r3, #1
 8008324:	e77c      	b.n	8008220 <_strtod_l+0x180>
 8008326:	f04f 0c00 	mov.w	ip, #0
 800832a:	f108 0202 	add.w	r2, r8, #2
 800832e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008330:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008334:	e785      	b.n	8008242 <_strtod_l+0x1a2>
 8008336:	f04f 0c01 	mov.w	ip, #1
 800833a:	e7f6      	b.n	800832a <_strtod_l+0x28a>
 800833c:	0800c2e0 	.word	0x0800c2e0
 8008340:	0800c098 	.word	0x0800c098
 8008344:	7ff00000 	.word	0x7ff00000
 8008348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800834a:	1c51      	adds	r1, r2, #1
 800834c:	9117      	str	r1, [sp, #92]	; 0x5c
 800834e:	7852      	ldrb	r2, [r2, #1]
 8008350:	2a30      	cmp	r2, #48	; 0x30
 8008352:	d0f9      	beq.n	8008348 <_strtod_l+0x2a8>
 8008354:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008358:	2908      	cmp	r1, #8
 800835a:	f63f af79 	bhi.w	8008250 <_strtod_l+0x1b0>
 800835e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008364:	9206      	str	r2, [sp, #24]
 8008366:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008368:	1c51      	adds	r1, r2, #1
 800836a:	9117      	str	r1, [sp, #92]	; 0x5c
 800836c:	7852      	ldrb	r2, [r2, #1]
 800836e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008372:	2e09      	cmp	r6, #9
 8008374:	d937      	bls.n	80083e6 <_strtod_l+0x346>
 8008376:	9e06      	ldr	r6, [sp, #24]
 8008378:	1b89      	subs	r1, r1, r6
 800837a:	2908      	cmp	r1, #8
 800837c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008380:	dc02      	bgt.n	8008388 <_strtod_l+0x2e8>
 8008382:	4576      	cmp	r6, lr
 8008384:	bfa8      	it	ge
 8008386:	4676      	movge	r6, lr
 8008388:	f1bc 0f00 	cmp.w	ip, #0
 800838c:	d000      	beq.n	8008390 <_strtod_l+0x2f0>
 800838e:	4276      	negs	r6, r6
 8008390:	2d00      	cmp	r5, #0
 8008392:	d14d      	bne.n	8008430 <_strtod_l+0x390>
 8008394:	9904      	ldr	r1, [sp, #16]
 8008396:	4301      	orrs	r1, r0
 8008398:	f47f aec6 	bne.w	8008128 <_strtod_l+0x88>
 800839c:	2b00      	cmp	r3, #0
 800839e:	f47f aee1 	bne.w	8008164 <_strtod_l+0xc4>
 80083a2:	2a69      	cmp	r2, #105	; 0x69
 80083a4:	d027      	beq.n	80083f6 <_strtod_l+0x356>
 80083a6:	dc24      	bgt.n	80083f2 <_strtod_l+0x352>
 80083a8:	2a49      	cmp	r2, #73	; 0x49
 80083aa:	d024      	beq.n	80083f6 <_strtod_l+0x356>
 80083ac:	2a4e      	cmp	r2, #78	; 0x4e
 80083ae:	f47f aed9 	bne.w	8008164 <_strtod_l+0xc4>
 80083b2:	499f      	ldr	r1, [pc, #636]	; (8008630 <_strtod_l+0x590>)
 80083b4:	a817      	add	r0, sp, #92	; 0x5c
 80083b6:	f001 fec5 	bl	800a144 <__match>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	f43f aed2 	beq.w	8008164 <_strtod_l+0xc4>
 80083c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b28      	cmp	r3, #40	; 0x28
 80083c6:	d12d      	bne.n	8008424 <_strtod_l+0x384>
 80083c8:	499a      	ldr	r1, [pc, #616]	; (8008634 <_strtod_l+0x594>)
 80083ca:	aa1a      	add	r2, sp, #104	; 0x68
 80083cc:	a817      	add	r0, sp, #92	; 0x5c
 80083ce:	f001 fecd 	bl	800a16c <__hexnan>
 80083d2:	2805      	cmp	r0, #5
 80083d4:	d126      	bne.n	8008424 <_strtod_l+0x384>
 80083d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80083dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80083e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80083e4:	e6a0      	b.n	8008128 <_strtod_l+0x88>
 80083e6:	210a      	movs	r1, #10
 80083e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80083ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80083f0:	e7b9      	b.n	8008366 <_strtod_l+0x2c6>
 80083f2:	2a6e      	cmp	r2, #110	; 0x6e
 80083f4:	e7db      	b.n	80083ae <_strtod_l+0x30e>
 80083f6:	4990      	ldr	r1, [pc, #576]	; (8008638 <_strtod_l+0x598>)
 80083f8:	a817      	add	r0, sp, #92	; 0x5c
 80083fa:	f001 fea3 	bl	800a144 <__match>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f43f aeb0 	beq.w	8008164 <_strtod_l+0xc4>
 8008404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008406:	498d      	ldr	r1, [pc, #564]	; (800863c <_strtod_l+0x59c>)
 8008408:	3b01      	subs	r3, #1
 800840a:	a817      	add	r0, sp, #92	; 0x5c
 800840c:	9317      	str	r3, [sp, #92]	; 0x5c
 800840e:	f001 fe99 	bl	800a144 <__match>
 8008412:	b910      	cbnz	r0, 800841a <_strtod_l+0x37a>
 8008414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008416:	3301      	adds	r3, #1
 8008418:	9317      	str	r3, [sp, #92]	; 0x5c
 800841a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800864c <_strtod_l+0x5ac>
 800841e:	f04f 0a00 	mov.w	sl, #0
 8008422:	e681      	b.n	8008128 <_strtod_l+0x88>
 8008424:	4886      	ldr	r0, [pc, #536]	; (8008640 <_strtod_l+0x5a0>)
 8008426:	f002 fe6f 	bl	800b108 <nan>
 800842a:	ec5b ab10 	vmov	sl, fp, d0
 800842e:	e67b      	b.n	8008128 <_strtod_l+0x88>
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	9807      	ldr	r0, [sp, #28]
 8008434:	1af3      	subs	r3, r6, r3
 8008436:	2f00      	cmp	r7, #0
 8008438:	bf08      	it	eq
 800843a:	462f      	moveq	r7, r5
 800843c:	2d10      	cmp	r5, #16
 800843e:	9306      	str	r3, [sp, #24]
 8008440:	46a8      	mov	r8, r5
 8008442:	bfa8      	it	ge
 8008444:	f04f 0810 	movge.w	r8, #16
 8008448:	f7f8 f9c4 	bl	80007d4 <__aeabi_ui2d>
 800844c:	2d09      	cmp	r5, #9
 800844e:	4682      	mov	sl, r0
 8008450:	468b      	mov	fp, r1
 8008452:	dd13      	ble.n	800847c <_strtod_l+0x3dc>
 8008454:	4b7b      	ldr	r3, [pc, #492]	; (8008644 <_strtod_l+0x5a4>)
 8008456:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800845a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800845e:	f7f8 fa33 	bl	80008c8 <__aeabi_dmul>
 8008462:	4682      	mov	sl, r0
 8008464:	4648      	mov	r0, r9
 8008466:	468b      	mov	fp, r1
 8008468:	f7f8 f9b4 	bl	80007d4 <__aeabi_ui2d>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4650      	mov	r0, sl
 8008472:	4659      	mov	r1, fp
 8008474:	f7f8 f872 	bl	800055c <__adddf3>
 8008478:	4682      	mov	sl, r0
 800847a:	468b      	mov	fp, r1
 800847c:	2d0f      	cmp	r5, #15
 800847e:	dc38      	bgt.n	80084f2 <_strtod_l+0x452>
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f43f ae50 	beq.w	8008128 <_strtod_l+0x88>
 8008488:	dd24      	ble.n	80084d4 <_strtod_l+0x434>
 800848a:	2b16      	cmp	r3, #22
 800848c:	dc0b      	bgt.n	80084a6 <_strtod_l+0x406>
 800848e:	496d      	ldr	r1, [pc, #436]	; (8008644 <_strtod_l+0x5a4>)
 8008490:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008498:	4652      	mov	r2, sl
 800849a:	465b      	mov	r3, fp
 800849c:	f7f8 fa14 	bl	80008c8 <__aeabi_dmul>
 80084a0:	4682      	mov	sl, r0
 80084a2:	468b      	mov	fp, r1
 80084a4:	e640      	b.n	8008128 <_strtod_l+0x88>
 80084a6:	9a06      	ldr	r2, [sp, #24]
 80084a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80084ac:	4293      	cmp	r3, r2
 80084ae:	db20      	blt.n	80084f2 <_strtod_l+0x452>
 80084b0:	4c64      	ldr	r4, [pc, #400]	; (8008644 <_strtod_l+0x5a4>)
 80084b2:	f1c5 050f 	rsb	r5, r5, #15
 80084b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084ba:	4652      	mov	r2, sl
 80084bc:	465b      	mov	r3, fp
 80084be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c2:	f7f8 fa01 	bl	80008c8 <__aeabi_dmul>
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	1b5d      	subs	r5, r3, r5
 80084ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084d2:	e7e3      	b.n	800849c <_strtod_l+0x3fc>
 80084d4:	9b06      	ldr	r3, [sp, #24]
 80084d6:	3316      	adds	r3, #22
 80084d8:	db0b      	blt.n	80084f2 <_strtod_l+0x452>
 80084da:	9b05      	ldr	r3, [sp, #20]
 80084dc:	1b9e      	subs	r6, r3, r6
 80084de:	4b59      	ldr	r3, [pc, #356]	; (8008644 <_strtod_l+0x5a4>)
 80084e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80084e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084e8:	4650      	mov	r0, sl
 80084ea:	4659      	mov	r1, fp
 80084ec:	f7f8 fb16 	bl	8000b1c <__aeabi_ddiv>
 80084f0:	e7d6      	b.n	80084a0 <_strtod_l+0x400>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	eba5 0808 	sub.w	r8, r5, r8
 80084f8:	4498      	add	r8, r3
 80084fa:	f1b8 0f00 	cmp.w	r8, #0
 80084fe:	dd74      	ble.n	80085ea <_strtod_l+0x54a>
 8008500:	f018 030f 	ands.w	r3, r8, #15
 8008504:	d00a      	beq.n	800851c <_strtod_l+0x47c>
 8008506:	494f      	ldr	r1, [pc, #316]	; (8008644 <_strtod_l+0x5a4>)
 8008508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800850c:	4652      	mov	r2, sl
 800850e:	465b      	mov	r3, fp
 8008510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008514:	f7f8 f9d8 	bl	80008c8 <__aeabi_dmul>
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	f038 080f 	bics.w	r8, r8, #15
 8008520:	d04f      	beq.n	80085c2 <_strtod_l+0x522>
 8008522:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008526:	dd22      	ble.n	800856e <_strtod_l+0x4ce>
 8008528:	2500      	movs	r5, #0
 800852a:	462e      	mov	r6, r5
 800852c:	9507      	str	r5, [sp, #28]
 800852e:	9505      	str	r5, [sp, #20]
 8008530:	2322      	movs	r3, #34	; 0x22
 8008532:	f8df b118 	ldr.w	fp, [pc, #280]	; 800864c <_strtod_l+0x5ac>
 8008536:	6023      	str	r3, [r4, #0]
 8008538:	f04f 0a00 	mov.w	sl, #0
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f43f adf2 	beq.w	8008128 <_strtod_l+0x88>
 8008544:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008546:	4620      	mov	r0, r4
 8008548:	f001 ff0a 	bl	800a360 <_Bfree>
 800854c:	9905      	ldr	r1, [sp, #20]
 800854e:	4620      	mov	r0, r4
 8008550:	f001 ff06 	bl	800a360 <_Bfree>
 8008554:	4631      	mov	r1, r6
 8008556:	4620      	mov	r0, r4
 8008558:	f001 ff02 	bl	800a360 <_Bfree>
 800855c:	9907      	ldr	r1, [sp, #28]
 800855e:	4620      	mov	r0, r4
 8008560:	f001 fefe 	bl	800a360 <_Bfree>
 8008564:	4629      	mov	r1, r5
 8008566:	4620      	mov	r0, r4
 8008568:	f001 fefa 	bl	800a360 <_Bfree>
 800856c:	e5dc      	b.n	8008128 <_strtod_l+0x88>
 800856e:	4b36      	ldr	r3, [pc, #216]	; (8008648 <_strtod_l+0x5a8>)
 8008570:	9304      	str	r3, [sp, #16]
 8008572:	2300      	movs	r3, #0
 8008574:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008578:	4650      	mov	r0, sl
 800857a:	4659      	mov	r1, fp
 800857c:	4699      	mov	r9, r3
 800857e:	f1b8 0f01 	cmp.w	r8, #1
 8008582:	dc21      	bgt.n	80085c8 <_strtod_l+0x528>
 8008584:	b10b      	cbz	r3, 800858a <_strtod_l+0x4ea>
 8008586:	4682      	mov	sl, r0
 8008588:	468b      	mov	fp, r1
 800858a:	4b2f      	ldr	r3, [pc, #188]	; (8008648 <_strtod_l+0x5a8>)
 800858c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008590:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	e9d9 0100 	ldrd	r0, r1, [r9]
 800859c:	f7f8 f994 	bl	80008c8 <__aeabi_dmul>
 80085a0:	4b2a      	ldr	r3, [pc, #168]	; (800864c <_strtod_l+0x5ac>)
 80085a2:	460a      	mov	r2, r1
 80085a4:	400b      	ands	r3, r1
 80085a6:	492a      	ldr	r1, [pc, #168]	; (8008650 <_strtod_l+0x5b0>)
 80085a8:	428b      	cmp	r3, r1
 80085aa:	4682      	mov	sl, r0
 80085ac:	d8bc      	bhi.n	8008528 <_strtod_l+0x488>
 80085ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085b2:	428b      	cmp	r3, r1
 80085b4:	bf86      	itte	hi
 80085b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008654 <_strtod_l+0x5b4>
 80085ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80085be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80085c2:	2300      	movs	r3, #0
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	e084      	b.n	80086d2 <_strtod_l+0x632>
 80085c8:	f018 0f01 	tst.w	r8, #1
 80085cc:	d005      	beq.n	80085da <_strtod_l+0x53a>
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f8 f978 	bl	80008c8 <__aeabi_dmul>
 80085d8:	2301      	movs	r3, #1
 80085da:	9a04      	ldr	r2, [sp, #16]
 80085dc:	3208      	adds	r2, #8
 80085de:	f109 0901 	add.w	r9, r9, #1
 80085e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80085e6:	9204      	str	r2, [sp, #16]
 80085e8:	e7c9      	b.n	800857e <_strtod_l+0x4de>
 80085ea:	d0ea      	beq.n	80085c2 <_strtod_l+0x522>
 80085ec:	f1c8 0800 	rsb	r8, r8, #0
 80085f0:	f018 020f 	ands.w	r2, r8, #15
 80085f4:	d00a      	beq.n	800860c <_strtod_l+0x56c>
 80085f6:	4b13      	ldr	r3, [pc, #76]	; (8008644 <_strtod_l+0x5a4>)
 80085f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085fc:	4650      	mov	r0, sl
 80085fe:	4659      	mov	r1, fp
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f8 fa8a 	bl	8000b1c <__aeabi_ddiv>
 8008608:	4682      	mov	sl, r0
 800860a:	468b      	mov	fp, r1
 800860c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008610:	d0d7      	beq.n	80085c2 <_strtod_l+0x522>
 8008612:	f1b8 0f1f 	cmp.w	r8, #31
 8008616:	dd1f      	ble.n	8008658 <_strtod_l+0x5b8>
 8008618:	2500      	movs	r5, #0
 800861a:	462e      	mov	r6, r5
 800861c:	9507      	str	r5, [sp, #28]
 800861e:	9505      	str	r5, [sp, #20]
 8008620:	2322      	movs	r3, #34	; 0x22
 8008622:	f04f 0a00 	mov.w	sl, #0
 8008626:	f04f 0b00 	mov.w	fp, #0
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	e786      	b.n	800853c <_strtod_l+0x49c>
 800862e:	bf00      	nop
 8008630:	0800c071 	.word	0x0800c071
 8008634:	0800c0ac 	.word	0x0800c0ac
 8008638:	0800c069 	.word	0x0800c069
 800863c:	0800c1ec 	.word	0x0800c1ec
 8008640:	0800c498 	.word	0x0800c498
 8008644:	0800c378 	.word	0x0800c378
 8008648:	0800c350 	.word	0x0800c350
 800864c:	7ff00000 	.word	0x7ff00000
 8008650:	7ca00000 	.word	0x7ca00000
 8008654:	7fefffff 	.word	0x7fefffff
 8008658:	f018 0310 	ands.w	r3, r8, #16
 800865c:	bf18      	it	ne
 800865e:	236a      	movne	r3, #106	; 0x6a
 8008660:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008a10 <_strtod_l+0x970>
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	4650      	mov	r0, sl
 8008668:	4659      	mov	r1, fp
 800866a:	2300      	movs	r3, #0
 800866c:	f018 0f01 	tst.w	r8, #1
 8008670:	d004      	beq.n	800867c <_strtod_l+0x5dc>
 8008672:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008676:	f7f8 f927 	bl	80008c8 <__aeabi_dmul>
 800867a:	2301      	movs	r3, #1
 800867c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008680:	f109 0908 	add.w	r9, r9, #8
 8008684:	d1f2      	bne.n	800866c <_strtod_l+0x5cc>
 8008686:	b10b      	cbz	r3, 800868c <_strtod_l+0x5ec>
 8008688:	4682      	mov	sl, r0
 800868a:	468b      	mov	fp, r1
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	b1c3      	cbz	r3, 80086c2 <_strtod_l+0x622>
 8008690:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008694:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008698:	2b00      	cmp	r3, #0
 800869a:	4659      	mov	r1, fp
 800869c:	dd11      	ble.n	80086c2 <_strtod_l+0x622>
 800869e:	2b1f      	cmp	r3, #31
 80086a0:	f340 8124 	ble.w	80088ec <_strtod_l+0x84c>
 80086a4:	2b34      	cmp	r3, #52	; 0x34
 80086a6:	bfde      	ittt	le
 80086a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80086ac:	f04f 33ff 	movle.w	r3, #4294967295
 80086b0:	fa03 f202 	lslle.w	r2, r3, r2
 80086b4:	f04f 0a00 	mov.w	sl, #0
 80086b8:	bfcc      	ite	gt
 80086ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086be:	ea02 0b01 	andle.w	fp, r2, r1
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	4650      	mov	r0, sl
 80086c8:	4659      	mov	r1, fp
 80086ca:	f7f8 fb65 	bl	8000d98 <__aeabi_dcmpeq>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d1a2      	bne.n	8008618 <_strtod_l+0x578>
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	9908      	ldr	r1, [sp, #32]
 80086d8:	462b      	mov	r3, r5
 80086da:	463a      	mov	r2, r7
 80086dc:	4620      	mov	r0, r4
 80086de:	f001 fea7 	bl	800a430 <__s2b>
 80086e2:	9007      	str	r0, [sp, #28]
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f43f af1f 	beq.w	8008528 <_strtod_l+0x488>
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	1b9e      	subs	r6, r3, r6
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfb4      	ite	lt
 80086f4:	4633      	movlt	r3, r6
 80086f6:	2300      	movge	r3, #0
 80086f8:	930c      	str	r3, [sp, #48]	; 0x30
 80086fa:	9b06      	ldr	r3, [sp, #24]
 80086fc:	2500      	movs	r5, #0
 80086fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008702:	9312      	str	r3, [sp, #72]	; 0x48
 8008704:	462e      	mov	r6, r5
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	4620      	mov	r0, r4
 800870a:	6859      	ldr	r1, [r3, #4]
 800870c:	f001 fde8 	bl	800a2e0 <_Balloc>
 8008710:	9005      	str	r0, [sp, #20]
 8008712:	2800      	cmp	r0, #0
 8008714:	f43f af0c 	beq.w	8008530 <_strtod_l+0x490>
 8008718:	9b07      	ldr	r3, [sp, #28]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	3202      	adds	r2, #2
 800871e:	f103 010c 	add.w	r1, r3, #12
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	300c      	adds	r0, #12
 8008726:	f7ff f815 	bl	8007754 <memcpy>
 800872a:	ec4b ab10 	vmov	d0, sl, fp
 800872e:	aa1a      	add	r2, sp, #104	; 0x68
 8008730:	a919      	add	r1, sp, #100	; 0x64
 8008732:	4620      	mov	r0, r4
 8008734:	f002 f9c2 	bl	800aabc <__d2b>
 8008738:	ec4b ab18 	vmov	d8, sl, fp
 800873c:	9018      	str	r0, [sp, #96]	; 0x60
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f aef6 	beq.w	8008530 <_strtod_l+0x490>
 8008744:	2101      	movs	r1, #1
 8008746:	4620      	mov	r0, r4
 8008748:	f001 ff0c 	bl	800a564 <__i2b>
 800874c:	4606      	mov	r6, r0
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f aeee 	beq.w	8008530 <_strtod_l+0x490>
 8008754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008756:	9904      	ldr	r1, [sp, #16]
 8008758:	2b00      	cmp	r3, #0
 800875a:	bfab      	itete	ge
 800875c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800875e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008760:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008762:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008766:	bfac      	ite	ge
 8008768:	eb03 0902 	addge.w	r9, r3, r2
 800876c:	1ad7      	sublt	r7, r2, r3
 800876e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008770:	eba3 0801 	sub.w	r8, r3, r1
 8008774:	4490      	add	r8, r2
 8008776:	4ba1      	ldr	r3, [pc, #644]	; (80089fc <_strtod_l+0x95c>)
 8008778:	f108 38ff 	add.w	r8, r8, #4294967295
 800877c:	4598      	cmp	r8, r3
 800877e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008782:	f280 80c7 	bge.w	8008914 <_strtod_l+0x874>
 8008786:	eba3 0308 	sub.w	r3, r3, r8
 800878a:	2b1f      	cmp	r3, #31
 800878c:	eba2 0203 	sub.w	r2, r2, r3
 8008790:	f04f 0101 	mov.w	r1, #1
 8008794:	f300 80b1 	bgt.w	80088fa <_strtod_l+0x85a>
 8008798:	fa01 f303 	lsl.w	r3, r1, r3
 800879c:	930d      	str	r3, [sp, #52]	; 0x34
 800879e:	2300      	movs	r3, #0
 80087a0:	9308      	str	r3, [sp, #32]
 80087a2:	eb09 0802 	add.w	r8, r9, r2
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	45c1      	cmp	r9, r8
 80087aa:	4417      	add	r7, r2
 80087ac:	441f      	add	r7, r3
 80087ae:	464b      	mov	r3, r9
 80087b0:	bfa8      	it	ge
 80087b2:	4643      	movge	r3, r8
 80087b4:	42bb      	cmp	r3, r7
 80087b6:	bfa8      	it	ge
 80087b8:	463b      	movge	r3, r7
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfc2      	ittt	gt
 80087be:	eba8 0803 	subgt.w	r8, r8, r3
 80087c2:	1aff      	subgt	r7, r7, r3
 80087c4:	eba9 0903 	subgt.w	r9, r9, r3
 80087c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	dd17      	ble.n	80087fe <_strtod_l+0x75e>
 80087ce:	4631      	mov	r1, r6
 80087d0:	461a      	mov	r2, r3
 80087d2:	4620      	mov	r0, r4
 80087d4:	f001 ff86 	bl	800a6e4 <__pow5mult>
 80087d8:	4606      	mov	r6, r0
 80087da:	2800      	cmp	r0, #0
 80087dc:	f43f aea8 	beq.w	8008530 <_strtod_l+0x490>
 80087e0:	4601      	mov	r1, r0
 80087e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80087e4:	4620      	mov	r0, r4
 80087e6:	f001 fed3 	bl	800a590 <__multiply>
 80087ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80087ec:	2800      	cmp	r0, #0
 80087ee:	f43f ae9f 	beq.w	8008530 <_strtod_l+0x490>
 80087f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087f4:	4620      	mov	r0, r4
 80087f6:	f001 fdb3 	bl	800a360 <_Bfree>
 80087fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087fc:	9318      	str	r3, [sp, #96]	; 0x60
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	f300 808c 	bgt.w	800891e <_strtod_l+0x87e>
 8008806:	9b06      	ldr	r3, [sp, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	dd08      	ble.n	800881e <_strtod_l+0x77e>
 800880c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800880e:	9905      	ldr	r1, [sp, #20]
 8008810:	4620      	mov	r0, r4
 8008812:	f001 ff67 	bl	800a6e4 <__pow5mult>
 8008816:	9005      	str	r0, [sp, #20]
 8008818:	2800      	cmp	r0, #0
 800881a:	f43f ae89 	beq.w	8008530 <_strtod_l+0x490>
 800881e:	2f00      	cmp	r7, #0
 8008820:	dd08      	ble.n	8008834 <_strtod_l+0x794>
 8008822:	9905      	ldr	r1, [sp, #20]
 8008824:	463a      	mov	r2, r7
 8008826:	4620      	mov	r0, r4
 8008828:	f001 ffb6 	bl	800a798 <__lshift>
 800882c:	9005      	str	r0, [sp, #20]
 800882e:	2800      	cmp	r0, #0
 8008830:	f43f ae7e 	beq.w	8008530 <_strtod_l+0x490>
 8008834:	f1b9 0f00 	cmp.w	r9, #0
 8008838:	dd08      	ble.n	800884c <_strtod_l+0x7ac>
 800883a:	4631      	mov	r1, r6
 800883c:	464a      	mov	r2, r9
 800883e:	4620      	mov	r0, r4
 8008840:	f001 ffaa 	bl	800a798 <__lshift>
 8008844:	4606      	mov	r6, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	f43f ae72 	beq.w	8008530 <_strtod_l+0x490>
 800884c:	9a05      	ldr	r2, [sp, #20]
 800884e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008850:	4620      	mov	r0, r4
 8008852:	f002 f82d 	bl	800a8b0 <__mdiff>
 8008856:	4605      	mov	r5, r0
 8008858:	2800      	cmp	r0, #0
 800885a:	f43f ae69 	beq.w	8008530 <_strtod_l+0x490>
 800885e:	68c3      	ldr	r3, [r0, #12]
 8008860:	930b      	str	r3, [sp, #44]	; 0x2c
 8008862:	2300      	movs	r3, #0
 8008864:	60c3      	str	r3, [r0, #12]
 8008866:	4631      	mov	r1, r6
 8008868:	f002 f806 	bl	800a878 <__mcmp>
 800886c:	2800      	cmp	r0, #0
 800886e:	da60      	bge.n	8008932 <_strtod_l+0x892>
 8008870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008872:	ea53 030a 	orrs.w	r3, r3, sl
 8008876:	f040 8082 	bne.w	800897e <_strtod_l+0x8de>
 800887a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800887e:	2b00      	cmp	r3, #0
 8008880:	d17d      	bne.n	800897e <_strtod_l+0x8de>
 8008882:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008886:	0d1b      	lsrs	r3, r3, #20
 8008888:	051b      	lsls	r3, r3, #20
 800888a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800888e:	d976      	bls.n	800897e <_strtod_l+0x8de>
 8008890:	696b      	ldr	r3, [r5, #20]
 8008892:	b913      	cbnz	r3, 800889a <_strtod_l+0x7fa>
 8008894:	692b      	ldr	r3, [r5, #16]
 8008896:	2b01      	cmp	r3, #1
 8008898:	dd71      	ble.n	800897e <_strtod_l+0x8de>
 800889a:	4629      	mov	r1, r5
 800889c:	2201      	movs	r2, #1
 800889e:	4620      	mov	r0, r4
 80088a0:	f001 ff7a 	bl	800a798 <__lshift>
 80088a4:	4631      	mov	r1, r6
 80088a6:	4605      	mov	r5, r0
 80088a8:	f001 ffe6 	bl	800a878 <__mcmp>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	dd66      	ble.n	800897e <_strtod_l+0x8de>
 80088b0:	9904      	ldr	r1, [sp, #16]
 80088b2:	4a53      	ldr	r2, [pc, #332]	; (8008a00 <_strtod_l+0x960>)
 80088b4:	465b      	mov	r3, fp
 80088b6:	2900      	cmp	r1, #0
 80088b8:	f000 8081 	beq.w	80089be <_strtod_l+0x91e>
 80088bc:	ea02 010b 	and.w	r1, r2, fp
 80088c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088c4:	dc7b      	bgt.n	80089be <_strtod_l+0x91e>
 80088c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088ca:	f77f aea9 	ble.w	8008620 <_strtod_l+0x580>
 80088ce:	4b4d      	ldr	r3, [pc, #308]	; (8008a04 <_strtod_l+0x964>)
 80088d0:	4650      	mov	r0, sl
 80088d2:	4659      	mov	r1, fp
 80088d4:	2200      	movs	r2, #0
 80088d6:	f7f7 fff7 	bl	80008c8 <__aeabi_dmul>
 80088da:	460b      	mov	r3, r1
 80088dc:	4303      	orrs	r3, r0
 80088de:	bf08      	it	eq
 80088e0:	2322      	moveq	r3, #34	; 0x22
 80088e2:	4682      	mov	sl, r0
 80088e4:	468b      	mov	fp, r1
 80088e6:	bf08      	it	eq
 80088e8:	6023      	streq	r3, [r4, #0]
 80088ea:	e62b      	b.n	8008544 <_strtod_l+0x4a4>
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	ea03 0a0a 	and.w	sl, r3, sl
 80088f8:	e6e3      	b.n	80086c2 <_strtod_l+0x622>
 80088fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80088fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008902:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008906:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800890a:	fa01 f308 	lsl.w	r3, r1, r8
 800890e:	9308      	str	r3, [sp, #32]
 8008910:	910d      	str	r1, [sp, #52]	; 0x34
 8008912:	e746      	b.n	80087a2 <_strtod_l+0x702>
 8008914:	2300      	movs	r3, #0
 8008916:	9308      	str	r3, [sp, #32]
 8008918:	2301      	movs	r3, #1
 800891a:	930d      	str	r3, [sp, #52]	; 0x34
 800891c:	e741      	b.n	80087a2 <_strtod_l+0x702>
 800891e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008920:	4642      	mov	r2, r8
 8008922:	4620      	mov	r0, r4
 8008924:	f001 ff38 	bl	800a798 <__lshift>
 8008928:	9018      	str	r0, [sp, #96]	; 0x60
 800892a:	2800      	cmp	r0, #0
 800892c:	f47f af6b 	bne.w	8008806 <_strtod_l+0x766>
 8008930:	e5fe      	b.n	8008530 <_strtod_l+0x490>
 8008932:	465f      	mov	r7, fp
 8008934:	d16e      	bne.n	8008a14 <_strtod_l+0x974>
 8008936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800893c:	b342      	cbz	r2, 8008990 <_strtod_l+0x8f0>
 800893e:	4a32      	ldr	r2, [pc, #200]	; (8008a08 <_strtod_l+0x968>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d128      	bne.n	8008996 <_strtod_l+0x8f6>
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	4651      	mov	r1, sl
 8008948:	b1eb      	cbz	r3, 8008986 <_strtod_l+0x8e6>
 800894a:	4b2d      	ldr	r3, [pc, #180]	; (8008a00 <_strtod_l+0x960>)
 800894c:	403b      	ands	r3, r7
 800894e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	d819      	bhi.n	800898c <_strtod_l+0x8ec>
 8008958:	0d1b      	lsrs	r3, r3, #20
 800895a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800895e:	fa02 f303 	lsl.w	r3, r2, r3
 8008962:	4299      	cmp	r1, r3
 8008964:	d117      	bne.n	8008996 <_strtod_l+0x8f6>
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <_strtod_l+0x96c>)
 8008968:	429f      	cmp	r7, r3
 800896a:	d102      	bne.n	8008972 <_strtod_l+0x8d2>
 800896c:	3101      	adds	r1, #1
 800896e:	f43f addf 	beq.w	8008530 <_strtod_l+0x490>
 8008972:	4b23      	ldr	r3, [pc, #140]	; (8008a00 <_strtod_l+0x960>)
 8008974:	403b      	ands	r3, r7
 8008976:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800897a:	f04f 0a00 	mov.w	sl, #0
 800897e:	9b04      	ldr	r3, [sp, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1a4      	bne.n	80088ce <_strtod_l+0x82e>
 8008984:	e5de      	b.n	8008544 <_strtod_l+0x4a4>
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e7ea      	b.n	8008962 <_strtod_l+0x8c2>
 800898c:	4613      	mov	r3, r2
 800898e:	e7e8      	b.n	8008962 <_strtod_l+0x8c2>
 8008990:	ea53 030a 	orrs.w	r3, r3, sl
 8008994:	d08c      	beq.n	80088b0 <_strtod_l+0x810>
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	b1db      	cbz	r3, 80089d2 <_strtod_l+0x932>
 800899a:	423b      	tst	r3, r7
 800899c:	d0ef      	beq.n	800897e <_strtod_l+0x8de>
 800899e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a0:	9a04      	ldr	r2, [sp, #16]
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	b1c3      	cbz	r3, 80089da <_strtod_l+0x93a>
 80089a8:	f7ff fb5c 	bl	8008064 <sulp>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	ec51 0b18 	vmov	r0, r1, d8
 80089b4:	f7f7 fdd2 	bl	800055c <__adddf3>
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	e7df      	b.n	800897e <_strtod_l+0x8de>
 80089be:	4013      	ands	r3, r2
 80089c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089cc:	f04f 3aff 	mov.w	sl, #4294967295
 80089d0:	e7d5      	b.n	800897e <_strtod_l+0x8de>
 80089d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d4:	ea13 0f0a 	tst.w	r3, sl
 80089d8:	e7e0      	b.n	800899c <_strtod_l+0x8fc>
 80089da:	f7ff fb43 	bl	8008064 <sulp>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	ec51 0b18 	vmov	r0, r1, d8
 80089e6:	f7f7 fdb7 	bl	8000558 <__aeabi_dsub>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	4682      	mov	sl, r0
 80089f0:	468b      	mov	fp, r1
 80089f2:	f7f8 f9d1 	bl	8000d98 <__aeabi_dcmpeq>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d0c1      	beq.n	800897e <_strtod_l+0x8de>
 80089fa:	e611      	b.n	8008620 <_strtod_l+0x580>
 80089fc:	fffffc02 	.word	0xfffffc02
 8008a00:	7ff00000 	.word	0x7ff00000
 8008a04:	39500000 	.word	0x39500000
 8008a08:	000fffff 	.word	0x000fffff
 8008a0c:	7fefffff 	.word	0x7fefffff
 8008a10:	0800c0c0 	.word	0x0800c0c0
 8008a14:	4631      	mov	r1, r6
 8008a16:	4628      	mov	r0, r5
 8008a18:	f002 f8ac 	bl	800ab74 <__ratio>
 8008a1c:	ec59 8b10 	vmov	r8, r9, d0
 8008a20:	ee10 0a10 	vmov	r0, s0
 8008a24:	2200      	movs	r2, #0
 8008a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a2a:	4649      	mov	r1, r9
 8008a2c:	f7f8 f9c8 	bl	8000dc0 <__aeabi_dcmple>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d07a      	beq.n	8008b2a <_strtod_l+0xa8a>
 8008a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d04a      	beq.n	8008ad0 <_strtod_l+0xa30>
 8008a3a:	4b95      	ldr	r3, [pc, #596]	; (8008c90 <_strtod_l+0xbf0>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008c90 <_strtod_l+0xbf0>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	4b92      	ldr	r3, [pc, #584]	; (8008c94 <_strtod_l+0xbf4>)
 8008a4c:	403b      	ands	r3, r7
 8008a4e:	930d      	str	r3, [sp, #52]	; 0x34
 8008a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a52:	4b91      	ldr	r3, [pc, #580]	; (8008c98 <_strtod_l+0xbf8>)
 8008a54:	429a      	cmp	r2, r3
 8008a56:	f040 80b0 	bne.w	8008bba <_strtod_l+0xb1a>
 8008a5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008a62:	ec4b ab10 	vmov	d0, sl, fp
 8008a66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a6a:	f001 ffab 	bl	800a9c4 <__ulp>
 8008a6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a72:	ec53 2b10 	vmov	r2, r3, d0
 8008a76:	f7f7 ff27 	bl	80008c8 <__aeabi_dmul>
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	465b      	mov	r3, fp
 8008a7e:	f7f7 fd6d 	bl	800055c <__adddf3>
 8008a82:	460b      	mov	r3, r1
 8008a84:	4983      	ldr	r1, [pc, #524]	; (8008c94 <_strtod_l+0xbf4>)
 8008a86:	4a85      	ldr	r2, [pc, #532]	; (8008c9c <_strtod_l+0xbfc>)
 8008a88:	4019      	ands	r1, r3
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	d960      	bls.n	8008b52 <_strtod_l+0xab2>
 8008a90:	ee18 3a90 	vmov	r3, s17
 8008a94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d104      	bne.n	8008aa6 <_strtod_l+0xa06>
 8008a9c:	ee18 3a10 	vmov	r3, s16
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	f43f ad45 	beq.w	8008530 <_strtod_l+0x490>
 8008aa6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008ca8 <_strtod_l+0xc08>
 8008aaa:	f04f 3aff 	mov.w	sl, #4294967295
 8008aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 fc55 	bl	800a360 <_Bfree>
 8008ab6:	9905      	ldr	r1, [sp, #20]
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f001 fc51 	bl	800a360 <_Bfree>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f001 fc4d 	bl	800a360 <_Bfree>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f001 fc49 	bl	800a360 <_Bfree>
 8008ace:	e61a      	b.n	8008706 <_strtod_l+0x666>
 8008ad0:	f1ba 0f00 	cmp.w	sl, #0
 8008ad4:	d11b      	bne.n	8008b0e <_strtod_l+0xa6e>
 8008ad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ada:	b9f3      	cbnz	r3, 8008b1a <_strtod_l+0xa7a>
 8008adc:	4b6c      	ldr	r3, [pc, #432]	; (8008c90 <_strtod_l+0xbf0>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	f7f8 f962 	bl	8000dac <__aeabi_dcmplt>
 8008ae8:	b9d0      	cbnz	r0, 8008b20 <_strtod_l+0xa80>
 8008aea:	4640      	mov	r0, r8
 8008aec:	4649      	mov	r1, r9
 8008aee:	4b6c      	ldr	r3, [pc, #432]	; (8008ca0 <_strtod_l+0xc00>)
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7f7 fee9 	bl	80008c8 <__aeabi_dmul>
 8008af6:	4680      	mov	r8, r0
 8008af8:	4689      	mov	r9, r1
 8008afa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008afe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008b02:	9315      	str	r3, [sp, #84]	; 0x54
 8008b04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b0c:	e79d      	b.n	8008a4a <_strtod_l+0x9aa>
 8008b0e:	f1ba 0f01 	cmp.w	sl, #1
 8008b12:	d102      	bne.n	8008b1a <_strtod_l+0xa7a>
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f43f ad83 	beq.w	8008620 <_strtod_l+0x580>
 8008b1a:	4b62      	ldr	r3, [pc, #392]	; (8008ca4 <_strtod_l+0xc04>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	e78e      	b.n	8008a3e <_strtod_l+0x99e>
 8008b20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008ca0 <_strtod_l+0xc00>
 8008b24:	f04f 0800 	mov.w	r8, #0
 8008b28:	e7e7      	b.n	8008afa <_strtod_l+0xa5a>
 8008b2a:	4b5d      	ldr	r3, [pc, #372]	; (8008ca0 <_strtod_l+0xc00>)
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	2200      	movs	r2, #0
 8008b32:	f7f7 fec9 	bl	80008c8 <__aeabi_dmul>
 8008b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b38:	4680      	mov	r8, r0
 8008b3a:	4689      	mov	r9, r1
 8008b3c:	b933      	cbnz	r3, 8008b4c <_strtod_l+0xaac>
 8008b3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b42:	900e      	str	r0, [sp, #56]	; 0x38
 8008b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008b4a:	e7dd      	b.n	8008b08 <_strtod_l+0xa68>
 8008b4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008b50:	e7f9      	b.n	8008b46 <_strtod_l+0xaa6>
 8008b52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1a8      	bne.n	8008aae <_strtod_l+0xa0e>
 8008b5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b62:	0d1b      	lsrs	r3, r3, #20
 8008b64:	051b      	lsls	r3, r3, #20
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d1a1      	bne.n	8008aae <_strtod_l+0xa0e>
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	4649      	mov	r1, r9
 8008b6e:	f7f8 fa0b 	bl	8000f88 <__aeabi_d2lz>
 8008b72:	f7f7 fe7b 	bl	800086c <__aeabi_l2d>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fceb 	bl	8000558 <__aeabi_dsub>
 8008b82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b88:	ea43 030a 	orr.w	r3, r3, sl
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	4680      	mov	r8, r0
 8008b90:	4689      	mov	r9, r1
 8008b92:	d055      	beq.n	8008c40 <_strtod_l+0xba0>
 8008b94:	a336      	add	r3, pc, #216	; (adr r3, 8008c70 <_strtod_l+0xbd0>)
 8008b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9a:	f7f8 f907 	bl	8000dac <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f47f acd0 	bne.w	8008544 <_strtod_l+0x4a4>
 8008ba4:	a334      	add	r3, pc, #208	; (adr r3, 8008c78 <_strtod_l+0xbd8>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f8 f91b 	bl	8000de8 <__aeabi_dcmpgt>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f43f af7b 	beq.w	8008aae <_strtod_l+0xa0e>
 8008bb8:	e4c4      	b.n	8008544 <_strtod_l+0x4a4>
 8008bba:	9b04      	ldr	r3, [sp, #16]
 8008bbc:	b333      	cbz	r3, 8008c0c <_strtod_l+0xb6c>
 8008bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bc4:	d822      	bhi.n	8008c0c <_strtod_l+0xb6c>
 8008bc6:	a32e      	add	r3, pc, #184	; (adr r3, 8008c80 <_strtod_l+0xbe0>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	4640      	mov	r0, r8
 8008bce:	4649      	mov	r1, r9
 8008bd0:	f7f8 f8f6 	bl	8000dc0 <__aeabi_dcmple>
 8008bd4:	b1a0      	cbz	r0, 8008c00 <_strtod_l+0xb60>
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	4640      	mov	r0, r8
 8008bda:	f7f8 f94d 	bl	8000e78 <__aeabi_d2uiz>
 8008bde:	2801      	cmp	r0, #1
 8008be0:	bf38      	it	cc
 8008be2:	2001      	movcc	r0, #1
 8008be4:	f7f7 fdf6 	bl	80007d4 <__aeabi_ui2d>
 8008be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bea:	4680      	mov	r8, r0
 8008bec:	4689      	mov	r9, r1
 8008bee:	bb23      	cbnz	r3, 8008c3a <_strtod_l+0xb9a>
 8008bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf4:	9010      	str	r0, [sp, #64]	; 0x40
 8008bf6:	9311      	str	r3, [sp, #68]	; 0x44
 8008bf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008bfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c10:	eeb0 0a48 	vmov.f32	s0, s16
 8008c14:	eef0 0a68 	vmov.f32	s1, s17
 8008c18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c1c:	f001 fed2 	bl	800a9c4 <__ulp>
 8008c20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c24:	ec53 2b10 	vmov	r2, r3, d0
 8008c28:	f7f7 fe4e 	bl	80008c8 <__aeabi_dmul>
 8008c2c:	ec53 2b18 	vmov	r2, r3, d8
 8008c30:	f7f7 fc94 	bl	800055c <__adddf3>
 8008c34:	4682      	mov	sl, r0
 8008c36:	468b      	mov	fp, r1
 8008c38:	e78d      	b.n	8008b56 <_strtod_l+0xab6>
 8008c3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008c3e:	e7db      	b.n	8008bf8 <_strtod_l+0xb58>
 8008c40:	a311      	add	r3, pc, #68	; (adr r3, 8008c88 <_strtod_l+0xbe8>)
 8008c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c46:	f7f8 f8b1 	bl	8000dac <__aeabi_dcmplt>
 8008c4a:	e7b2      	b.n	8008bb2 <_strtod_l+0xb12>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	f7ff ba6b 	b.w	8008130 <_strtod_l+0x90>
 8008c5a:	2a65      	cmp	r2, #101	; 0x65
 8008c5c:	f43f ab5f 	beq.w	800831e <_strtod_l+0x27e>
 8008c60:	2a45      	cmp	r2, #69	; 0x45
 8008c62:	f43f ab5c 	beq.w	800831e <_strtod_l+0x27e>
 8008c66:	2301      	movs	r3, #1
 8008c68:	f7ff bb94 	b.w	8008394 <_strtod_l+0x2f4>
 8008c6c:	f3af 8000 	nop.w
 8008c70:	94a03595 	.word	0x94a03595
 8008c74:	3fdfffff 	.word	0x3fdfffff
 8008c78:	35afe535 	.word	0x35afe535
 8008c7c:	3fe00000 	.word	0x3fe00000
 8008c80:	ffc00000 	.word	0xffc00000
 8008c84:	41dfffff 	.word	0x41dfffff
 8008c88:	94a03595 	.word	0x94a03595
 8008c8c:	3fcfffff 	.word	0x3fcfffff
 8008c90:	3ff00000 	.word	0x3ff00000
 8008c94:	7ff00000 	.word	0x7ff00000
 8008c98:	7fe00000 	.word	0x7fe00000
 8008c9c:	7c9fffff 	.word	0x7c9fffff
 8008ca0:	3fe00000 	.word	0x3fe00000
 8008ca4:	bff00000 	.word	0xbff00000
 8008ca8:	7fefffff 	.word	0x7fefffff

08008cac <strtof>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008d60 <strtof+0xb4>
 8008cb4:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <strtof+0xa4>)
 8008cb6:	460a      	mov	r2, r1
 8008cb8:	ed2d 8b02 	vpush	{d8}
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	f8d8 0000 	ldr.w	r0, [r8]
 8008cc2:	f7ff f9ed 	bl	80080a0 <_strtod_l>
 8008cc6:	ec55 4b10 	vmov	r4, r5, d0
 8008cca:	ee10 2a10 	vmov	r2, s0
 8008cce:	ee10 0a10 	vmov	r0, s0
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f8 f891 	bl	8000dfc <__aeabi_dcmpun>
 8008cda:	b190      	cbz	r0, 8008d02 <strtof+0x56>
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	481d      	ldr	r0, [pc, #116]	; (8008d54 <strtof+0xa8>)
 8008ce0:	da09      	bge.n	8008cf6 <strtof+0x4a>
 8008ce2:	f002 fa29 	bl	800b138 <nanf>
 8008ce6:	eeb1 8a40 	vneg.f32	s16, s0
 8008cea:	eeb0 0a48 	vmov.f32	s0, s16
 8008cee:	ecbd 8b02 	vpop	{d8}
 8008cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf6:	ecbd 8b02 	vpop	{d8}
 8008cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfe:	f002 ba1b 	b.w	800b138 <nanf>
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f8 f8d7 	bl	8000eb8 <__aeabi_d2f>
 8008d0a:	ee08 0a10 	vmov	s16, r0
 8008d0e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008d58 <strtof+0xac>
 8008d12:	eeb0 7ac8 	vabs.f32	s14, s16
 8008d16:	eeb4 7a67 	vcmp.f32	s14, s15
 8008d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1e:	dde4      	ble.n	8008cea <strtof+0x3e>
 8008d20:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008d24:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <strtof+0xb0>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	f7f8 f865 	bl	8000dfc <__aeabi_dcmpun>
 8008d32:	b940      	cbnz	r0, 8008d46 <strtof+0x9a>
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <strtof+0xb0>)
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	f7f8 f83f 	bl	8000dc0 <__aeabi_dcmple>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	d0d1      	beq.n	8008cea <strtof+0x3e>
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	2222      	movs	r2, #34	; 0x22
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e7cc      	b.n	8008cea <strtof+0x3e>
 8008d50:	200002e0 	.word	0x200002e0
 8008d54:	0800c498 	.word	0x0800c498
 8008d58:	7f7fffff 	.word	0x7f7fffff
 8008d5c:	7fefffff 	.word	0x7fefffff
 8008d60:	20000278 	.word	0x20000278

08008d64 <_strtoul_l.constprop.0>:
 8008d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d68:	4f36      	ldr	r7, [pc, #216]	; (8008e44 <_strtoul_l.constprop.0+0xe0>)
 8008d6a:	4686      	mov	lr, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d74:	5de6      	ldrb	r6, [r4, r7]
 8008d76:	f016 0608 	ands.w	r6, r6, #8
 8008d7a:	d1f8      	bne.n	8008d6e <_strtoul_l.constprop.0+0xa>
 8008d7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d7e:	d12f      	bne.n	8008de0 <_strtoul_l.constprop.0+0x7c>
 8008d80:	782c      	ldrb	r4, [r5, #0]
 8008d82:	2601      	movs	r6, #1
 8008d84:	1c85      	adds	r5, r0, #2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d057      	beq.n	8008e3a <_strtoul_l.constprop.0+0xd6>
 8008d8a:	2b10      	cmp	r3, #16
 8008d8c:	d109      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008d8e:	2c30      	cmp	r4, #48	; 0x30
 8008d90:	d107      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008d92:	7828      	ldrb	r0, [r5, #0]
 8008d94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008d98:	2858      	cmp	r0, #88	; 0x58
 8008d9a:	d149      	bne.n	8008e30 <_strtoul_l.constprop.0+0xcc>
 8008d9c:	786c      	ldrb	r4, [r5, #1]
 8008d9e:	2310      	movs	r3, #16
 8008da0:	3502      	adds	r5, #2
 8008da2:	f04f 38ff 	mov.w	r8, #4294967295
 8008da6:	2700      	movs	r7, #0
 8008da8:	fbb8 f8f3 	udiv	r8, r8, r3
 8008dac:	fb03 f908 	mul.w	r9, r3, r8
 8008db0:	ea6f 0909 	mvn.w	r9, r9
 8008db4:	4638      	mov	r0, r7
 8008db6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008dba:	f1bc 0f09 	cmp.w	ip, #9
 8008dbe:	d814      	bhi.n	8008dea <_strtoul_l.constprop.0+0x86>
 8008dc0:	4664      	mov	r4, ip
 8008dc2:	42a3      	cmp	r3, r4
 8008dc4:	dd22      	ble.n	8008e0c <_strtoul_l.constprop.0+0xa8>
 8008dc6:	2f00      	cmp	r7, #0
 8008dc8:	db1d      	blt.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dca:	4580      	cmp	r8, r0
 8008dcc:	d31b      	bcc.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dce:	d101      	bne.n	8008dd4 <_strtoul_l.constprop.0+0x70>
 8008dd0:	45a1      	cmp	r9, r4
 8008dd2:	db18      	blt.n	8008e06 <_strtoul_l.constprop.0+0xa2>
 8008dd4:	fb00 4003 	mla	r0, r0, r3, r4
 8008dd8:	2701      	movs	r7, #1
 8008dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dde:	e7ea      	b.n	8008db6 <_strtoul_l.constprop.0+0x52>
 8008de0:	2c2b      	cmp	r4, #43	; 0x2b
 8008de2:	bf04      	itt	eq
 8008de4:	782c      	ldrbeq	r4, [r5, #0]
 8008de6:	1c85      	addeq	r5, r0, #2
 8008de8:	e7cd      	b.n	8008d86 <_strtoul_l.constprop.0+0x22>
 8008dea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008dee:	f1bc 0f19 	cmp.w	ip, #25
 8008df2:	d801      	bhi.n	8008df8 <_strtoul_l.constprop.0+0x94>
 8008df4:	3c37      	subs	r4, #55	; 0x37
 8008df6:	e7e4      	b.n	8008dc2 <_strtoul_l.constprop.0+0x5e>
 8008df8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008dfc:	f1bc 0f19 	cmp.w	ip, #25
 8008e00:	d804      	bhi.n	8008e0c <_strtoul_l.constprop.0+0xa8>
 8008e02:	3c57      	subs	r4, #87	; 0x57
 8008e04:	e7dd      	b.n	8008dc2 <_strtoul_l.constprop.0+0x5e>
 8008e06:	f04f 37ff 	mov.w	r7, #4294967295
 8008e0a:	e7e6      	b.n	8008dda <_strtoul_l.constprop.0+0x76>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	da07      	bge.n	8008e20 <_strtoul_l.constprop.0+0xbc>
 8008e10:	2322      	movs	r3, #34	; 0x22
 8008e12:	f8ce 3000 	str.w	r3, [lr]
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	b932      	cbnz	r2, 8008e2a <_strtoul_l.constprop.0+0xc6>
 8008e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e20:	b106      	cbz	r6, 8008e24 <_strtoul_l.constprop.0+0xc0>
 8008e22:	4240      	negs	r0, r0
 8008e24:	2a00      	cmp	r2, #0
 8008e26:	d0f9      	beq.n	8008e1c <_strtoul_l.constprop.0+0xb8>
 8008e28:	b107      	cbz	r7, 8008e2c <_strtoul_l.constprop.0+0xc8>
 8008e2a:	1e69      	subs	r1, r5, #1
 8008e2c:	6011      	str	r1, [r2, #0]
 8008e2e:	e7f5      	b.n	8008e1c <_strtoul_l.constprop.0+0xb8>
 8008e30:	2430      	movs	r4, #48	; 0x30
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1b5      	bne.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e36:	2308      	movs	r3, #8
 8008e38:	e7b3      	b.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e3a:	2c30      	cmp	r4, #48	; 0x30
 8008e3c:	d0a9      	beq.n	8008d92 <_strtoul_l.constprop.0+0x2e>
 8008e3e:	230a      	movs	r3, #10
 8008e40:	e7af      	b.n	8008da2 <_strtoul_l.constprop.0+0x3e>
 8008e42:	bf00      	nop
 8008e44:	0800c0e9 	.word	0x0800c0e9

08008e48 <strtoul>:
 8008e48:	4613      	mov	r3, r2
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4802      	ldr	r0, [pc, #8]	; (8008e58 <strtoul+0x10>)
 8008e50:	6800      	ldr	r0, [r0, #0]
 8008e52:	f7ff bf87 	b.w	8008d64 <_strtoul_l.constprop.0>
 8008e56:	bf00      	nop
 8008e58:	20000278 	.word	0x20000278

08008e5c <_vsniprintf_r>:
 8008e5c:	b530      	push	{r4, r5, lr}
 8008e5e:	4614      	mov	r4, r2
 8008e60:	2c00      	cmp	r4, #0
 8008e62:	b09b      	sub	sp, #108	; 0x6c
 8008e64:	4605      	mov	r5, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	da05      	bge.n	8008e76 <_vsniprintf_r+0x1a>
 8008e6a:	238b      	movs	r3, #139	; 0x8b
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	b01b      	add	sp, #108	; 0x6c
 8008e74:	bd30      	pop	{r4, r5, pc}
 8008e76:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008e7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008e7e:	bf14      	ite	ne
 8008e80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e84:	4623      	moveq	r3, r4
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e8e:	9100      	str	r1, [sp, #0]
 8008e90:	9104      	str	r1, [sp, #16]
 8008e92:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008e96:	4669      	mov	r1, sp
 8008e98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008e9a:	f002 f835 	bl	800af08 <_svfiprintf_r>
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	bfbc      	itt	lt
 8008ea2:	238b      	movlt	r3, #139	; 0x8b
 8008ea4:	602b      	strlt	r3, [r5, #0]
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d0e3      	beq.n	8008e72 <_vsniprintf_r+0x16>
 8008eaa:	9b00      	ldr	r3, [sp, #0]
 8008eac:	2200      	movs	r2, #0
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e7df      	b.n	8008e72 <_vsniprintf_r+0x16>
	...

08008eb4 <vsniprintf>:
 8008eb4:	b507      	push	{r0, r1, r2, lr}
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	460a      	mov	r2, r1
 8008ebc:	4601      	mov	r1, r0
 8008ebe:	4803      	ldr	r0, [pc, #12]	; (8008ecc <vsniprintf+0x18>)
 8008ec0:	6800      	ldr	r0, [r0, #0]
 8008ec2:	f7ff ffcb 	bl	8008e5c <_vsniprintf_r>
 8008ec6:	b003      	add	sp, #12
 8008ec8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ecc:	20000278 	.word	0x20000278

08008ed0 <quorem>:
 8008ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	6903      	ldr	r3, [r0, #16]
 8008ed6:	690c      	ldr	r4, [r1, #16]
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	4607      	mov	r7, r0
 8008edc:	f2c0 8081 	blt.w	8008fe2 <quorem+0x112>
 8008ee0:	3c01      	subs	r4, #1
 8008ee2:	f101 0814 	add.w	r8, r1, #20
 8008ee6:	f100 0514 	add.w	r5, r0, #20
 8008eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	429a      	cmp	r2, r3
 8008efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f08:	d331      	bcc.n	8008f6e <quorem+0x9e>
 8008f0a:	f04f 0e00 	mov.w	lr, #0
 8008f0e:	4640      	mov	r0, r8
 8008f10:	46ac      	mov	ip, r5
 8008f12:	46f2      	mov	sl, lr
 8008f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f18:	b293      	uxth	r3, r2
 8008f1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008f1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ebaa 0303 	sub.w	r3, sl, r3
 8008f28:	f8dc a000 	ldr.w	sl, [ip]
 8008f2c:	0c12      	lsrs	r2, r2, #16
 8008f2e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f32:	fb06 e202 	mla	r2, r6, r2, lr
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f3e:	b292      	uxth	r2, r2
 8008f40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f48:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f4c:	4581      	cmp	r9, r0
 8008f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f52:	f84c 3b04 	str.w	r3, [ip], #4
 8008f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f5a:	d2db      	bcs.n	8008f14 <quorem+0x44>
 8008f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f60:	b92b      	cbnz	r3, 8008f6e <quorem+0x9e>
 8008f62:	9b01      	ldr	r3, [sp, #4]
 8008f64:	3b04      	subs	r3, #4
 8008f66:	429d      	cmp	r5, r3
 8008f68:	461a      	mov	r2, r3
 8008f6a:	d32e      	bcc.n	8008fca <quorem+0xfa>
 8008f6c:	613c      	str	r4, [r7, #16]
 8008f6e:	4638      	mov	r0, r7
 8008f70:	f001 fc82 	bl	800a878 <__mcmp>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	db24      	blt.n	8008fc2 <quorem+0xf2>
 8008f78:	3601      	adds	r6, #1
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f04f 0c00 	mov.w	ip, #0
 8008f80:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f84:	f8d0 e000 	ldr.w	lr, [r0]
 8008f88:	b293      	uxth	r3, r2
 8008f8a:	ebac 0303 	sub.w	r3, ip, r3
 8008f8e:	0c12      	lsrs	r2, r2, #16
 8008f90:	fa13 f38e 	uxtah	r3, r3, lr
 8008f94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fa2:	45c1      	cmp	r9, r8
 8008fa4:	f840 3b04 	str.w	r3, [r0], #4
 8008fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fac:	d2e8      	bcs.n	8008f80 <quorem+0xb0>
 8008fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb6:	b922      	cbnz	r2, 8008fc2 <quorem+0xf2>
 8008fb8:	3b04      	subs	r3, #4
 8008fba:	429d      	cmp	r5, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	d30a      	bcc.n	8008fd6 <quorem+0x106>
 8008fc0:	613c      	str	r4, [r7, #16]
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	3b04      	subs	r3, #4
 8008fce:	2a00      	cmp	r2, #0
 8008fd0:	d1cc      	bne.n	8008f6c <quorem+0x9c>
 8008fd2:	3c01      	subs	r4, #1
 8008fd4:	e7c7      	b.n	8008f66 <quorem+0x96>
 8008fd6:	6812      	ldr	r2, [r2, #0]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d1f0      	bne.n	8008fc0 <quorem+0xf0>
 8008fde:	3c01      	subs	r4, #1
 8008fe0:	e7eb      	b.n	8008fba <quorem+0xea>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	e7ee      	b.n	8008fc4 <quorem+0xf4>
	...

08008fe8 <_dtoa_r>:
 8008fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	ed2d 8b04 	vpush	{d8-d9}
 8008ff0:	ec57 6b10 	vmov	r6, r7, d0
 8008ff4:	b093      	sub	sp, #76	; 0x4c
 8008ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ff8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ffc:	9106      	str	r1, [sp, #24]
 8008ffe:	ee10 aa10 	vmov	sl, s0
 8009002:	4604      	mov	r4, r0
 8009004:	9209      	str	r2, [sp, #36]	; 0x24
 8009006:	930c      	str	r3, [sp, #48]	; 0x30
 8009008:	46bb      	mov	fp, r7
 800900a:	b975      	cbnz	r5, 800902a <_dtoa_r+0x42>
 800900c:	2010      	movs	r0, #16
 800900e:	f001 f94d 	bl	800a2ac <malloc>
 8009012:	4602      	mov	r2, r0
 8009014:	6260      	str	r0, [r4, #36]	; 0x24
 8009016:	b920      	cbnz	r0, 8009022 <_dtoa_r+0x3a>
 8009018:	4ba7      	ldr	r3, [pc, #668]	; (80092b8 <_dtoa_r+0x2d0>)
 800901a:	21ea      	movs	r1, #234	; 0xea
 800901c:	48a7      	ldr	r0, [pc, #668]	; (80092bc <_dtoa_r+0x2d4>)
 800901e:	f002 f8b3 	bl	800b188 <__assert_func>
 8009022:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009026:	6005      	str	r5, [r0, #0]
 8009028:	60c5      	str	r5, [r0, #12]
 800902a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800902c:	6819      	ldr	r1, [r3, #0]
 800902e:	b151      	cbz	r1, 8009046 <_dtoa_r+0x5e>
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	604a      	str	r2, [r1, #4]
 8009034:	2301      	movs	r3, #1
 8009036:	4093      	lsls	r3, r2
 8009038:	608b      	str	r3, [r1, #8]
 800903a:	4620      	mov	r0, r4
 800903c:	f001 f990 	bl	800a360 <_Bfree>
 8009040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009042:	2200      	movs	r2, #0
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	1e3b      	subs	r3, r7, #0
 8009048:	bfaa      	itet	ge
 800904a:	2300      	movge	r3, #0
 800904c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009050:	f8c8 3000 	strge.w	r3, [r8]
 8009054:	4b9a      	ldr	r3, [pc, #616]	; (80092c0 <_dtoa_r+0x2d8>)
 8009056:	bfbc      	itt	lt
 8009058:	2201      	movlt	r2, #1
 800905a:	f8c8 2000 	strlt.w	r2, [r8]
 800905e:	ea33 030b 	bics.w	r3, r3, fp
 8009062:	d11b      	bne.n	800909c <_dtoa_r+0xb4>
 8009064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009066:	f242 730f 	movw	r3, #9999	; 0x270f
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009070:	4333      	orrs	r3, r6
 8009072:	f000 8592 	beq.w	8009b9a <_dtoa_r+0xbb2>
 8009076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009078:	b963      	cbnz	r3, 8009094 <_dtoa_r+0xac>
 800907a:	4b92      	ldr	r3, [pc, #584]	; (80092c4 <_dtoa_r+0x2dc>)
 800907c:	e022      	b.n	80090c4 <_dtoa_r+0xdc>
 800907e:	4b92      	ldr	r3, [pc, #584]	; (80092c8 <_dtoa_r+0x2e0>)
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	3308      	adds	r3, #8
 8009084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	9801      	ldr	r0, [sp, #4]
 800908a:	b013      	add	sp, #76	; 0x4c
 800908c:	ecbd 8b04 	vpop	{d8-d9}
 8009090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009094:	4b8b      	ldr	r3, [pc, #556]	; (80092c4 <_dtoa_r+0x2dc>)
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	3303      	adds	r3, #3
 800909a:	e7f3      	b.n	8009084 <_dtoa_r+0x9c>
 800909c:	2200      	movs	r2, #0
 800909e:	2300      	movs	r3, #0
 80090a0:	4650      	mov	r0, sl
 80090a2:	4659      	mov	r1, fp
 80090a4:	f7f7 fe78 	bl	8000d98 <__aeabi_dcmpeq>
 80090a8:	ec4b ab19 	vmov	d9, sl, fp
 80090ac:	4680      	mov	r8, r0
 80090ae:	b158      	cbz	r0, 80090c8 <_dtoa_r+0xe0>
 80090b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090b2:	2301      	movs	r3, #1
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 856b 	beq.w	8009b94 <_dtoa_r+0xbac>
 80090be:	4883      	ldr	r0, [pc, #524]	; (80092cc <_dtoa_r+0x2e4>)
 80090c0:	6018      	str	r0, [r3, #0]
 80090c2:	1e43      	subs	r3, r0, #1
 80090c4:	9301      	str	r3, [sp, #4]
 80090c6:	e7df      	b.n	8009088 <_dtoa_r+0xa0>
 80090c8:	ec4b ab10 	vmov	d0, sl, fp
 80090cc:	aa10      	add	r2, sp, #64	; 0x40
 80090ce:	a911      	add	r1, sp, #68	; 0x44
 80090d0:	4620      	mov	r0, r4
 80090d2:	f001 fcf3 	bl	800aabc <__d2b>
 80090d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80090da:	ee08 0a10 	vmov	s16, r0
 80090de:	2d00      	cmp	r5, #0
 80090e0:	f000 8084 	beq.w	80091ec <_dtoa_r+0x204>
 80090e4:	ee19 3a90 	vmov	r3, s19
 80090e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090f0:	4656      	mov	r6, sl
 80090f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80090fe:	4b74      	ldr	r3, [pc, #464]	; (80092d0 <_dtoa_r+0x2e8>)
 8009100:	2200      	movs	r2, #0
 8009102:	4630      	mov	r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 fa27 	bl	8000558 <__aeabi_dsub>
 800910a:	a365      	add	r3, pc, #404	; (adr r3, 80092a0 <_dtoa_r+0x2b8>)
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 fbda 	bl	80008c8 <__aeabi_dmul>
 8009114:	a364      	add	r3, pc, #400	; (adr r3, 80092a8 <_dtoa_r+0x2c0>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	f7f7 fa1f 	bl	800055c <__adddf3>
 800911e:	4606      	mov	r6, r0
 8009120:	4628      	mov	r0, r5
 8009122:	460f      	mov	r7, r1
 8009124:	f7f7 fb66 	bl	80007f4 <__aeabi_i2d>
 8009128:	a361      	add	r3, pc, #388	; (adr r3, 80092b0 <_dtoa_r+0x2c8>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 fbcb 	bl	80008c8 <__aeabi_dmul>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4630      	mov	r0, r6
 8009138:	4639      	mov	r1, r7
 800913a:	f7f7 fa0f 	bl	800055c <__adddf3>
 800913e:	4606      	mov	r6, r0
 8009140:	460f      	mov	r7, r1
 8009142:	f7f7 fe71 	bl	8000e28 <__aeabi_d2iz>
 8009146:	2200      	movs	r2, #0
 8009148:	9000      	str	r0, [sp, #0]
 800914a:	2300      	movs	r3, #0
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 fe2c 	bl	8000dac <__aeabi_dcmplt>
 8009154:	b150      	cbz	r0, 800916c <_dtoa_r+0x184>
 8009156:	9800      	ldr	r0, [sp, #0]
 8009158:	f7f7 fb4c 	bl	80007f4 <__aeabi_i2d>
 800915c:	4632      	mov	r2, r6
 800915e:	463b      	mov	r3, r7
 8009160:	f7f7 fe1a 	bl	8000d98 <__aeabi_dcmpeq>
 8009164:	b910      	cbnz	r0, 800916c <_dtoa_r+0x184>
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	3b01      	subs	r3, #1
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	2b16      	cmp	r3, #22
 8009170:	d85a      	bhi.n	8009228 <_dtoa_r+0x240>
 8009172:	9a00      	ldr	r2, [sp, #0]
 8009174:	4b57      	ldr	r3, [pc, #348]	; (80092d4 <_dtoa_r+0x2ec>)
 8009176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	ec51 0b19 	vmov	r0, r1, d9
 8009182:	f7f7 fe13 	bl	8000dac <__aeabi_dcmplt>
 8009186:	2800      	cmp	r0, #0
 8009188:	d050      	beq.n	800922c <_dtoa_r+0x244>
 800918a:	9b00      	ldr	r3, [sp, #0]
 800918c:	3b01      	subs	r3, #1
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	2300      	movs	r3, #0
 8009192:	930b      	str	r3, [sp, #44]	; 0x2c
 8009194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009196:	1b5d      	subs	r5, r3, r5
 8009198:	1e6b      	subs	r3, r5, #1
 800919a:	9305      	str	r3, [sp, #20]
 800919c:	bf45      	ittet	mi
 800919e:	f1c5 0301 	rsbmi	r3, r5, #1
 80091a2:	9304      	strmi	r3, [sp, #16]
 80091a4:	2300      	movpl	r3, #0
 80091a6:	2300      	movmi	r3, #0
 80091a8:	bf4c      	ite	mi
 80091aa:	9305      	strmi	r3, [sp, #20]
 80091ac:	9304      	strpl	r3, [sp, #16]
 80091ae:	9b00      	ldr	r3, [sp, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	db3d      	blt.n	8009230 <_dtoa_r+0x248>
 80091b4:	9b05      	ldr	r3, [sp, #20]
 80091b6:	9a00      	ldr	r2, [sp, #0]
 80091b8:	920a      	str	r2, [sp, #40]	; 0x28
 80091ba:	4413      	add	r3, r2
 80091bc:	9305      	str	r3, [sp, #20]
 80091be:	2300      	movs	r3, #0
 80091c0:	9307      	str	r3, [sp, #28]
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	f200 8089 	bhi.w	80092dc <_dtoa_r+0x2f4>
 80091ca:	2b05      	cmp	r3, #5
 80091cc:	bfc4      	itt	gt
 80091ce:	3b04      	subgt	r3, #4
 80091d0:	9306      	strgt	r3, [sp, #24]
 80091d2:	9b06      	ldr	r3, [sp, #24]
 80091d4:	f1a3 0302 	sub.w	r3, r3, #2
 80091d8:	bfcc      	ite	gt
 80091da:	2500      	movgt	r5, #0
 80091dc:	2501      	movle	r5, #1
 80091de:	2b03      	cmp	r3, #3
 80091e0:	f200 8087 	bhi.w	80092f2 <_dtoa_r+0x30a>
 80091e4:	e8df f003 	tbb	[pc, r3]
 80091e8:	59383a2d 	.word	0x59383a2d
 80091ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091f0:	441d      	add	r5, r3
 80091f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091f6:	2b20      	cmp	r3, #32
 80091f8:	bfc1      	itttt	gt
 80091fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009202:	fa0b f303 	lslgt.w	r3, fp, r3
 8009206:	fa26 f000 	lsrgt.w	r0, r6, r0
 800920a:	bfda      	itte	le
 800920c:	f1c3 0320 	rsble	r3, r3, #32
 8009210:	fa06 f003 	lslle.w	r0, r6, r3
 8009214:	4318      	orrgt	r0, r3
 8009216:	f7f7 fadd 	bl	80007d4 <__aeabi_ui2d>
 800921a:	2301      	movs	r3, #1
 800921c:	4606      	mov	r6, r0
 800921e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009222:	3d01      	subs	r5, #1
 8009224:	930e      	str	r3, [sp, #56]	; 0x38
 8009226:	e76a      	b.n	80090fe <_dtoa_r+0x116>
 8009228:	2301      	movs	r3, #1
 800922a:	e7b2      	b.n	8009192 <_dtoa_r+0x1aa>
 800922c:	900b      	str	r0, [sp, #44]	; 0x2c
 800922e:	e7b1      	b.n	8009194 <_dtoa_r+0x1ac>
 8009230:	9b04      	ldr	r3, [sp, #16]
 8009232:	9a00      	ldr	r2, [sp, #0]
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	4253      	negs	r3, r2
 800923a:	9307      	str	r3, [sp, #28]
 800923c:	2300      	movs	r3, #0
 800923e:	930a      	str	r3, [sp, #40]	; 0x28
 8009240:	e7bf      	b.n	80091c2 <_dtoa_r+0x1da>
 8009242:	2300      	movs	r3, #0
 8009244:	9308      	str	r3, [sp, #32]
 8009246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009248:	2b00      	cmp	r3, #0
 800924a:	dc55      	bgt.n	80092f8 <_dtoa_r+0x310>
 800924c:	2301      	movs	r3, #1
 800924e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009252:	461a      	mov	r2, r3
 8009254:	9209      	str	r2, [sp, #36]	; 0x24
 8009256:	e00c      	b.n	8009272 <_dtoa_r+0x28a>
 8009258:	2301      	movs	r3, #1
 800925a:	e7f3      	b.n	8009244 <_dtoa_r+0x25c>
 800925c:	2300      	movs	r3, #0
 800925e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	9b00      	ldr	r3, [sp, #0]
 8009264:	4413      	add	r3, r2
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	3301      	adds	r3, #1
 800926a:	2b01      	cmp	r3, #1
 800926c:	9303      	str	r3, [sp, #12]
 800926e:	bfb8      	it	lt
 8009270:	2301      	movlt	r3, #1
 8009272:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009274:	2200      	movs	r2, #0
 8009276:	6042      	str	r2, [r0, #4]
 8009278:	2204      	movs	r2, #4
 800927a:	f102 0614 	add.w	r6, r2, #20
 800927e:	429e      	cmp	r6, r3
 8009280:	6841      	ldr	r1, [r0, #4]
 8009282:	d93d      	bls.n	8009300 <_dtoa_r+0x318>
 8009284:	4620      	mov	r0, r4
 8009286:	f001 f82b 	bl	800a2e0 <_Balloc>
 800928a:	9001      	str	r0, [sp, #4]
 800928c:	2800      	cmp	r0, #0
 800928e:	d13b      	bne.n	8009308 <_dtoa_r+0x320>
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <_dtoa_r+0x2f0>)
 8009292:	4602      	mov	r2, r0
 8009294:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009298:	e6c0      	b.n	800901c <_dtoa_r+0x34>
 800929a:	2301      	movs	r3, #1
 800929c:	e7df      	b.n	800925e <_dtoa_r+0x276>
 800929e:	bf00      	nop
 80092a0:	636f4361 	.word	0x636f4361
 80092a4:	3fd287a7 	.word	0x3fd287a7
 80092a8:	8b60c8b3 	.word	0x8b60c8b3
 80092ac:	3fc68a28 	.word	0x3fc68a28
 80092b0:	509f79fb 	.word	0x509f79fb
 80092b4:	3fd34413 	.word	0x3fd34413
 80092b8:	0800c1f6 	.word	0x0800c1f6
 80092bc:	0800c20d 	.word	0x0800c20d
 80092c0:	7ff00000 	.word	0x7ff00000
 80092c4:	0800c1f2 	.word	0x0800c1f2
 80092c8:	0800c1e9 	.word	0x0800c1e9
 80092cc:	0800c075 	.word	0x0800c075
 80092d0:	3ff80000 	.word	0x3ff80000
 80092d4:	0800c378 	.word	0x0800c378
 80092d8:	0800c268 	.word	0x0800c268
 80092dc:	2501      	movs	r5, #1
 80092de:	2300      	movs	r3, #0
 80092e0:	9306      	str	r3, [sp, #24]
 80092e2:	9508      	str	r5, [sp, #32]
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092ec:	2200      	movs	r2, #0
 80092ee:	2312      	movs	r3, #18
 80092f0:	e7b0      	b.n	8009254 <_dtoa_r+0x26c>
 80092f2:	2301      	movs	r3, #1
 80092f4:	9308      	str	r3, [sp, #32]
 80092f6:	e7f5      	b.n	80092e4 <_dtoa_r+0x2fc>
 80092f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092fe:	e7b8      	b.n	8009272 <_dtoa_r+0x28a>
 8009300:	3101      	adds	r1, #1
 8009302:	6041      	str	r1, [r0, #4]
 8009304:	0052      	lsls	r2, r2, #1
 8009306:	e7b8      	b.n	800927a <_dtoa_r+0x292>
 8009308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	2b0e      	cmp	r3, #14
 8009312:	f200 809d 	bhi.w	8009450 <_dtoa_r+0x468>
 8009316:	2d00      	cmp	r5, #0
 8009318:	f000 809a 	beq.w	8009450 <_dtoa_r+0x468>
 800931c:	9b00      	ldr	r3, [sp, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd32      	ble.n	8009388 <_dtoa_r+0x3a0>
 8009322:	4ab7      	ldr	r2, [pc, #732]	; (8009600 <_dtoa_r+0x618>)
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800932c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009330:	9b00      	ldr	r3, [sp, #0]
 8009332:	05d8      	lsls	r0, r3, #23
 8009334:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009338:	d516      	bpl.n	8009368 <_dtoa_r+0x380>
 800933a:	4bb2      	ldr	r3, [pc, #712]	; (8009604 <_dtoa_r+0x61c>)
 800933c:	ec51 0b19 	vmov	r0, r1, d9
 8009340:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009344:	f7f7 fbea 	bl	8000b1c <__aeabi_ddiv>
 8009348:	f007 070f 	and.w	r7, r7, #15
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	2503      	movs	r5, #3
 8009352:	4eac      	ldr	r6, [pc, #688]	; (8009604 <_dtoa_r+0x61c>)
 8009354:	b957      	cbnz	r7, 800936c <_dtoa_r+0x384>
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	4650      	mov	r0, sl
 800935c:	4659      	mov	r1, fp
 800935e:	f7f7 fbdd 	bl	8000b1c <__aeabi_ddiv>
 8009362:	4682      	mov	sl, r0
 8009364:	468b      	mov	fp, r1
 8009366:	e028      	b.n	80093ba <_dtoa_r+0x3d2>
 8009368:	2502      	movs	r5, #2
 800936a:	e7f2      	b.n	8009352 <_dtoa_r+0x36a>
 800936c:	07f9      	lsls	r1, r7, #31
 800936e:	d508      	bpl.n	8009382 <_dtoa_r+0x39a>
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009378:	f7f7 faa6 	bl	80008c8 <__aeabi_dmul>
 800937c:	3501      	adds	r5, #1
 800937e:	4680      	mov	r8, r0
 8009380:	4689      	mov	r9, r1
 8009382:	107f      	asrs	r7, r7, #1
 8009384:	3608      	adds	r6, #8
 8009386:	e7e5      	b.n	8009354 <_dtoa_r+0x36c>
 8009388:	f000 809b 	beq.w	80094c2 <_dtoa_r+0x4da>
 800938c:	9b00      	ldr	r3, [sp, #0]
 800938e:	4f9d      	ldr	r7, [pc, #628]	; (8009604 <_dtoa_r+0x61c>)
 8009390:	425e      	negs	r6, r3
 8009392:	4b9b      	ldr	r3, [pc, #620]	; (8009600 <_dtoa_r+0x618>)
 8009394:	f006 020f 	and.w	r2, r6, #15
 8009398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	ec51 0b19 	vmov	r0, r1, d9
 80093a4:	f7f7 fa90 	bl	80008c8 <__aeabi_dmul>
 80093a8:	1136      	asrs	r6, r6, #4
 80093aa:	4682      	mov	sl, r0
 80093ac:	468b      	mov	fp, r1
 80093ae:	2300      	movs	r3, #0
 80093b0:	2502      	movs	r5, #2
 80093b2:	2e00      	cmp	r6, #0
 80093b4:	d17a      	bne.n	80094ac <_dtoa_r+0x4c4>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1d3      	bne.n	8009362 <_dtoa_r+0x37a>
 80093ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8082 	beq.w	80094c6 <_dtoa_r+0x4de>
 80093c2:	4b91      	ldr	r3, [pc, #580]	; (8009608 <_dtoa_r+0x620>)
 80093c4:	2200      	movs	r2, #0
 80093c6:	4650      	mov	r0, sl
 80093c8:	4659      	mov	r1, fp
 80093ca:	f7f7 fcef 	bl	8000dac <__aeabi_dcmplt>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d079      	beq.n	80094c6 <_dtoa_r+0x4de>
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d076      	beq.n	80094c6 <_dtoa_r+0x4de>
 80093d8:	9b02      	ldr	r3, [sp, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	dd36      	ble.n	800944c <_dtoa_r+0x464>
 80093de:	9b00      	ldr	r3, [sp, #0]
 80093e0:	4650      	mov	r0, sl
 80093e2:	4659      	mov	r1, fp
 80093e4:	1e5f      	subs	r7, r3, #1
 80093e6:	2200      	movs	r2, #0
 80093e8:	4b88      	ldr	r3, [pc, #544]	; (800960c <_dtoa_r+0x624>)
 80093ea:	f7f7 fa6d 	bl	80008c8 <__aeabi_dmul>
 80093ee:	9e02      	ldr	r6, [sp, #8]
 80093f0:	4682      	mov	sl, r0
 80093f2:	468b      	mov	fp, r1
 80093f4:	3501      	adds	r5, #1
 80093f6:	4628      	mov	r0, r5
 80093f8:	f7f7 f9fc 	bl	80007f4 <__aeabi_i2d>
 80093fc:	4652      	mov	r2, sl
 80093fe:	465b      	mov	r3, fp
 8009400:	f7f7 fa62 	bl	80008c8 <__aeabi_dmul>
 8009404:	4b82      	ldr	r3, [pc, #520]	; (8009610 <_dtoa_r+0x628>)
 8009406:	2200      	movs	r2, #0
 8009408:	f7f7 f8a8 	bl	800055c <__adddf3>
 800940c:	46d0      	mov	r8, sl
 800940e:	46d9      	mov	r9, fp
 8009410:	4682      	mov	sl, r0
 8009412:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009416:	2e00      	cmp	r6, #0
 8009418:	d158      	bne.n	80094cc <_dtoa_r+0x4e4>
 800941a:	4b7e      	ldr	r3, [pc, #504]	; (8009614 <_dtoa_r+0x62c>)
 800941c:	2200      	movs	r2, #0
 800941e:	4640      	mov	r0, r8
 8009420:	4649      	mov	r1, r9
 8009422:	f7f7 f899 	bl	8000558 <__aeabi_dsub>
 8009426:	4652      	mov	r2, sl
 8009428:	465b      	mov	r3, fp
 800942a:	4680      	mov	r8, r0
 800942c:	4689      	mov	r9, r1
 800942e:	f7f7 fcdb 	bl	8000de8 <__aeabi_dcmpgt>
 8009432:	2800      	cmp	r0, #0
 8009434:	f040 8295 	bne.w	8009962 <_dtoa_r+0x97a>
 8009438:	4652      	mov	r2, sl
 800943a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800943e:	4640      	mov	r0, r8
 8009440:	4649      	mov	r1, r9
 8009442:	f7f7 fcb3 	bl	8000dac <__aeabi_dcmplt>
 8009446:	2800      	cmp	r0, #0
 8009448:	f040 8289 	bne.w	800995e <_dtoa_r+0x976>
 800944c:	ec5b ab19 	vmov	sl, fp, d9
 8009450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009452:	2b00      	cmp	r3, #0
 8009454:	f2c0 8148 	blt.w	80096e8 <_dtoa_r+0x700>
 8009458:	9a00      	ldr	r2, [sp, #0]
 800945a:	2a0e      	cmp	r2, #14
 800945c:	f300 8144 	bgt.w	80096e8 <_dtoa_r+0x700>
 8009460:	4b67      	ldr	r3, [pc, #412]	; (8009600 <_dtoa_r+0x618>)
 8009462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009466:	e9d3 8900 	ldrd	r8, r9, [r3]
 800946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800946c:	2b00      	cmp	r3, #0
 800946e:	f280 80d5 	bge.w	800961c <_dtoa_r+0x634>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f300 80d1 	bgt.w	800961c <_dtoa_r+0x634>
 800947a:	f040 826f 	bne.w	800995c <_dtoa_r+0x974>
 800947e:	4b65      	ldr	r3, [pc, #404]	; (8009614 <_dtoa_r+0x62c>)
 8009480:	2200      	movs	r2, #0
 8009482:	4640      	mov	r0, r8
 8009484:	4649      	mov	r1, r9
 8009486:	f7f7 fa1f 	bl	80008c8 <__aeabi_dmul>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	f7f7 fca1 	bl	8000dd4 <__aeabi_dcmpge>
 8009492:	9e03      	ldr	r6, [sp, #12]
 8009494:	4637      	mov	r7, r6
 8009496:	2800      	cmp	r0, #0
 8009498:	f040 8245 	bne.w	8009926 <_dtoa_r+0x93e>
 800949c:	9d01      	ldr	r5, [sp, #4]
 800949e:	2331      	movs	r3, #49	; 0x31
 80094a0:	f805 3b01 	strb.w	r3, [r5], #1
 80094a4:	9b00      	ldr	r3, [sp, #0]
 80094a6:	3301      	adds	r3, #1
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	e240      	b.n	800992e <_dtoa_r+0x946>
 80094ac:	07f2      	lsls	r2, r6, #31
 80094ae:	d505      	bpl.n	80094bc <_dtoa_r+0x4d4>
 80094b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094b4:	f7f7 fa08 	bl	80008c8 <__aeabi_dmul>
 80094b8:	3501      	adds	r5, #1
 80094ba:	2301      	movs	r3, #1
 80094bc:	1076      	asrs	r6, r6, #1
 80094be:	3708      	adds	r7, #8
 80094c0:	e777      	b.n	80093b2 <_dtoa_r+0x3ca>
 80094c2:	2502      	movs	r5, #2
 80094c4:	e779      	b.n	80093ba <_dtoa_r+0x3d2>
 80094c6:	9f00      	ldr	r7, [sp, #0]
 80094c8:	9e03      	ldr	r6, [sp, #12]
 80094ca:	e794      	b.n	80093f6 <_dtoa_r+0x40e>
 80094cc:	9901      	ldr	r1, [sp, #4]
 80094ce:	4b4c      	ldr	r3, [pc, #304]	; (8009600 <_dtoa_r+0x618>)
 80094d0:	4431      	add	r1, r6
 80094d2:	910d      	str	r1, [sp, #52]	; 0x34
 80094d4:	9908      	ldr	r1, [sp, #32]
 80094d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094de:	2900      	cmp	r1, #0
 80094e0:	d043      	beq.n	800956a <_dtoa_r+0x582>
 80094e2:	494d      	ldr	r1, [pc, #308]	; (8009618 <_dtoa_r+0x630>)
 80094e4:	2000      	movs	r0, #0
 80094e6:	f7f7 fb19 	bl	8000b1c <__aeabi_ddiv>
 80094ea:	4652      	mov	r2, sl
 80094ec:	465b      	mov	r3, fp
 80094ee:	f7f7 f833 	bl	8000558 <__aeabi_dsub>
 80094f2:	9d01      	ldr	r5, [sp, #4]
 80094f4:	4682      	mov	sl, r0
 80094f6:	468b      	mov	fp, r1
 80094f8:	4649      	mov	r1, r9
 80094fa:	4640      	mov	r0, r8
 80094fc:	f7f7 fc94 	bl	8000e28 <__aeabi_d2iz>
 8009500:	4606      	mov	r6, r0
 8009502:	f7f7 f977 	bl	80007f4 <__aeabi_i2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4640      	mov	r0, r8
 800950c:	4649      	mov	r1, r9
 800950e:	f7f7 f823 	bl	8000558 <__aeabi_dsub>
 8009512:	3630      	adds	r6, #48	; 0x30
 8009514:	f805 6b01 	strb.w	r6, [r5], #1
 8009518:	4652      	mov	r2, sl
 800951a:	465b      	mov	r3, fp
 800951c:	4680      	mov	r8, r0
 800951e:	4689      	mov	r9, r1
 8009520:	f7f7 fc44 	bl	8000dac <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	d163      	bne.n	80095f0 <_dtoa_r+0x608>
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	4936      	ldr	r1, [pc, #216]	; (8009608 <_dtoa_r+0x620>)
 800952e:	2000      	movs	r0, #0
 8009530:	f7f7 f812 	bl	8000558 <__aeabi_dsub>
 8009534:	4652      	mov	r2, sl
 8009536:	465b      	mov	r3, fp
 8009538:	f7f7 fc38 	bl	8000dac <__aeabi_dcmplt>
 800953c:	2800      	cmp	r0, #0
 800953e:	f040 80b5 	bne.w	80096ac <_dtoa_r+0x6c4>
 8009542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009544:	429d      	cmp	r5, r3
 8009546:	d081      	beq.n	800944c <_dtoa_r+0x464>
 8009548:	4b30      	ldr	r3, [pc, #192]	; (800960c <_dtoa_r+0x624>)
 800954a:	2200      	movs	r2, #0
 800954c:	4650      	mov	r0, sl
 800954e:	4659      	mov	r1, fp
 8009550:	f7f7 f9ba 	bl	80008c8 <__aeabi_dmul>
 8009554:	4b2d      	ldr	r3, [pc, #180]	; (800960c <_dtoa_r+0x624>)
 8009556:	4682      	mov	sl, r0
 8009558:	468b      	mov	fp, r1
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	2200      	movs	r2, #0
 8009560:	f7f7 f9b2 	bl	80008c8 <__aeabi_dmul>
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	e7c6      	b.n	80094f8 <_dtoa_r+0x510>
 800956a:	4650      	mov	r0, sl
 800956c:	4659      	mov	r1, fp
 800956e:	f7f7 f9ab 	bl	80008c8 <__aeabi_dmul>
 8009572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009574:	9d01      	ldr	r5, [sp, #4]
 8009576:	930f      	str	r3, [sp, #60]	; 0x3c
 8009578:	4682      	mov	sl, r0
 800957a:	468b      	mov	fp, r1
 800957c:	4649      	mov	r1, r9
 800957e:	4640      	mov	r0, r8
 8009580:	f7f7 fc52 	bl	8000e28 <__aeabi_d2iz>
 8009584:	4606      	mov	r6, r0
 8009586:	f7f7 f935 	bl	80007f4 <__aeabi_i2d>
 800958a:	3630      	adds	r6, #48	; 0x30
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4640      	mov	r0, r8
 8009592:	4649      	mov	r1, r9
 8009594:	f7f6 ffe0 	bl	8000558 <__aeabi_dsub>
 8009598:	f805 6b01 	strb.w	r6, [r5], #1
 800959c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959e:	429d      	cmp	r5, r3
 80095a0:	4680      	mov	r8, r0
 80095a2:	4689      	mov	r9, r1
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	d124      	bne.n	80095f4 <_dtoa_r+0x60c>
 80095aa:	4b1b      	ldr	r3, [pc, #108]	; (8009618 <_dtoa_r+0x630>)
 80095ac:	4650      	mov	r0, sl
 80095ae:	4659      	mov	r1, fp
 80095b0:	f7f6 ffd4 	bl	800055c <__adddf3>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4640      	mov	r0, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f7f7 fc14 	bl	8000de8 <__aeabi_dcmpgt>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d173      	bne.n	80096ac <_dtoa_r+0x6c4>
 80095c4:	4652      	mov	r2, sl
 80095c6:	465b      	mov	r3, fp
 80095c8:	4913      	ldr	r1, [pc, #76]	; (8009618 <_dtoa_r+0x630>)
 80095ca:	2000      	movs	r0, #0
 80095cc:	f7f6 ffc4 	bl	8000558 <__aeabi_dsub>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4640      	mov	r0, r8
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f7 fbe8 	bl	8000dac <__aeabi_dcmplt>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f43f af35 	beq.w	800944c <_dtoa_r+0x464>
 80095e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095e4:	1e6b      	subs	r3, r5, #1
 80095e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095ec:	2b30      	cmp	r3, #48	; 0x30
 80095ee:	d0f8      	beq.n	80095e2 <_dtoa_r+0x5fa>
 80095f0:	9700      	str	r7, [sp, #0]
 80095f2:	e049      	b.n	8009688 <_dtoa_r+0x6a0>
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <_dtoa_r+0x624>)
 80095f6:	f7f7 f967 	bl	80008c8 <__aeabi_dmul>
 80095fa:	4680      	mov	r8, r0
 80095fc:	4689      	mov	r9, r1
 80095fe:	e7bd      	b.n	800957c <_dtoa_r+0x594>
 8009600:	0800c378 	.word	0x0800c378
 8009604:	0800c350 	.word	0x0800c350
 8009608:	3ff00000 	.word	0x3ff00000
 800960c:	40240000 	.word	0x40240000
 8009610:	401c0000 	.word	0x401c0000
 8009614:	40140000 	.word	0x40140000
 8009618:	3fe00000 	.word	0x3fe00000
 800961c:	9d01      	ldr	r5, [sp, #4]
 800961e:	4656      	mov	r6, sl
 8009620:	465f      	mov	r7, fp
 8009622:	4642      	mov	r2, r8
 8009624:	464b      	mov	r3, r9
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f7 fa77 	bl	8000b1c <__aeabi_ddiv>
 800962e:	f7f7 fbfb 	bl	8000e28 <__aeabi_d2iz>
 8009632:	4682      	mov	sl, r0
 8009634:	f7f7 f8de 	bl	80007f4 <__aeabi_i2d>
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	f7f7 f944 	bl	80008c8 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800964c:	f7f6 ff84 	bl	8000558 <__aeabi_dsub>
 8009650:	f805 6b01 	strb.w	r6, [r5], #1
 8009654:	9e01      	ldr	r6, [sp, #4]
 8009656:	9f03      	ldr	r7, [sp, #12]
 8009658:	1bae      	subs	r6, r5, r6
 800965a:	42b7      	cmp	r7, r6
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	d135      	bne.n	80096ce <_dtoa_r+0x6e6>
 8009662:	f7f6 ff7b 	bl	800055c <__adddf3>
 8009666:	4642      	mov	r2, r8
 8009668:	464b      	mov	r3, r9
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	f7f7 fbbb 	bl	8000de8 <__aeabi_dcmpgt>
 8009672:	b9d0      	cbnz	r0, 80096aa <_dtoa_r+0x6c2>
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fb8c 	bl	8000d98 <__aeabi_dcmpeq>
 8009680:	b110      	cbz	r0, 8009688 <_dtoa_r+0x6a0>
 8009682:	f01a 0f01 	tst.w	sl, #1
 8009686:	d110      	bne.n	80096aa <_dtoa_r+0x6c2>
 8009688:	4620      	mov	r0, r4
 800968a:	ee18 1a10 	vmov	r1, s16
 800968e:	f000 fe67 	bl	800a360 <_Bfree>
 8009692:	2300      	movs	r3, #0
 8009694:	9800      	ldr	r0, [sp, #0]
 8009696:	702b      	strb	r3, [r5, #0]
 8009698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969a:	3001      	adds	r0, #1
 800969c:	6018      	str	r0, [r3, #0]
 800969e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f43f acf1 	beq.w	8009088 <_dtoa_r+0xa0>
 80096a6:	601d      	str	r5, [r3, #0]
 80096a8:	e4ee      	b.n	8009088 <_dtoa_r+0xa0>
 80096aa:	9f00      	ldr	r7, [sp, #0]
 80096ac:	462b      	mov	r3, r5
 80096ae:	461d      	mov	r5, r3
 80096b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096b4:	2a39      	cmp	r2, #57	; 0x39
 80096b6:	d106      	bne.n	80096c6 <_dtoa_r+0x6de>
 80096b8:	9a01      	ldr	r2, [sp, #4]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d1f7      	bne.n	80096ae <_dtoa_r+0x6c6>
 80096be:	9901      	ldr	r1, [sp, #4]
 80096c0:	2230      	movs	r2, #48	; 0x30
 80096c2:	3701      	adds	r7, #1
 80096c4:	700a      	strb	r2, [r1, #0]
 80096c6:	781a      	ldrb	r2, [r3, #0]
 80096c8:	3201      	adds	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]
 80096cc:	e790      	b.n	80095f0 <_dtoa_r+0x608>
 80096ce:	4ba6      	ldr	r3, [pc, #664]	; (8009968 <_dtoa_r+0x980>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	f7f7 f8f9 	bl	80008c8 <__aeabi_dmul>
 80096d6:	2200      	movs	r2, #0
 80096d8:	2300      	movs	r3, #0
 80096da:	4606      	mov	r6, r0
 80096dc:	460f      	mov	r7, r1
 80096de:	f7f7 fb5b 	bl	8000d98 <__aeabi_dcmpeq>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d09d      	beq.n	8009622 <_dtoa_r+0x63a>
 80096e6:	e7cf      	b.n	8009688 <_dtoa_r+0x6a0>
 80096e8:	9a08      	ldr	r2, [sp, #32]
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	f000 80d7 	beq.w	800989e <_dtoa_r+0x8b6>
 80096f0:	9a06      	ldr	r2, [sp, #24]
 80096f2:	2a01      	cmp	r2, #1
 80096f4:	f300 80ba 	bgt.w	800986c <_dtoa_r+0x884>
 80096f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096fa:	2a00      	cmp	r2, #0
 80096fc:	f000 80b2 	beq.w	8009864 <_dtoa_r+0x87c>
 8009700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009704:	9e07      	ldr	r6, [sp, #28]
 8009706:	9d04      	ldr	r5, [sp, #16]
 8009708:	9a04      	ldr	r2, [sp, #16]
 800970a:	441a      	add	r2, r3
 800970c:	9204      	str	r2, [sp, #16]
 800970e:	9a05      	ldr	r2, [sp, #20]
 8009710:	2101      	movs	r1, #1
 8009712:	441a      	add	r2, r3
 8009714:	4620      	mov	r0, r4
 8009716:	9205      	str	r2, [sp, #20]
 8009718:	f000 ff24 	bl	800a564 <__i2b>
 800971c:	4607      	mov	r7, r0
 800971e:	2d00      	cmp	r5, #0
 8009720:	dd0c      	ble.n	800973c <_dtoa_r+0x754>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd09      	ble.n	800973c <_dtoa_r+0x754>
 8009728:	42ab      	cmp	r3, r5
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	bfa8      	it	ge
 800972e:	462b      	movge	r3, r5
 8009730:	1ad2      	subs	r2, r2, r3
 8009732:	9204      	str	r2, [sp, #16]
 8009734:	9a05      	ldr	r2, [sp, #20]
 8009736:	1aed      	subs	r5, r5, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	9305      	str	r3, [sp, #20]
 800973c:	9b07      	ldr	r3, [sp, #28]
 800973e:	b31b      	cbz	r3, 8009788 <_dtoa_r+0x7a0>
 8009740:	9b08      	ldr	r3, [sp, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 80af 	beq.w	80098a6 <_dtoa_r+0x8be>
 8009748:	2e00      	cmp	r6, #0
 800974a:	dd13      	ble.n	8009774 <_dtoa_r+0x78c>
 800974c:	4639      	mov	r1, r7
 800974e:	4632      	mov	r2, r6
 8009750:	4620      	mov	r0, r4
 8009752:	f000 ffc7 	bl	800a6e4 <__pow5mult>
 8009756:	ee18 2a10 	vmov	r2, s16
 800975a:	4601      	mov	r1, r0
 800975c:	4607      	mov	r7, r0
 800975e:	4620      	mov	r0, r4
 8009760:	f000 ff16 	bl	800a590 <__multiply>
 8009764:	ee18 1a10 	vmov	r1, s16
 8009768:	4680      	mov	r8, r0
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fdf8 	bl	800a360 <_Bfree>
 8009770:	ee08 8a10 	vmov	s16, r8
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	1b9a      	subs	r2, r3, r6
 8009778:	d006      	beq.n	8009788 <_dtoa_r+0x7a0>
 800977a:	ee18 1a10 	vmov	r1, s16
 800977e:	4620      	mov	r0, r4
 8009780:	f000 ffb0 	bl	800a6e4 <__pow5mult>
 8009784:	ee08 0a10 	vmov	s16, r0
 8009788:	2101      	movs	r1, #1
 800978a:	4620      	mov	r0, r4
 800978c:	f000 feea 	bl	800a564 <__i2b>
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	2b00      	cmp	r3, #0
 8009794:	4606      	mov	r6, r0
 8009796:	f340 8088 	ble.w	80098aa <_dtoa_r+0x8c2>
 800979a:	461a      	mov	r2, r3
 800979c:	4601      	mov	r1, r0
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 ffa0 	bl	800a6e4 <__pow5mult>
 80097a4:	9b06      	ldr	r3, [sp, #24]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	4606      	mov	r6, r0
 80097aa:	f340 8081 	ble.w	80098b0 <_dtoa_r+0x8c8>
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	6933      	ldr	r3, [r6, #16]
 80097b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097b8:	6918      	ldr	r0, [r3, #16]
 80097ba:	f000 fe83 	bl	800a4c4 <__hi0bits>
 80097be:	f1c0 0020 	rsb	r0, r0, #32
 80097c2:	9b05      	ldr	r3, [sp, #20]
 80097c4:	4418      	add	r0, r3
 80097c6:	f010 001f 	ands.w	r0, r0, #31
 80097ca:	f000 8092 	beq.w	80098f2 <_dtoa_r+0x90a>
 80097ce:	f1c0 0320 	rsb	r3, r0, #32
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	f340 808a 	ble.w	80098ec <_dtoa_r+0x904>
 80097d8:	f1c0 001c 	rsb	r0, r0, #28
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	4403      	add	r3, r0
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	9b05      	ldr	r3, [sp, #20]
 80097e4:	4403      	add	r3, r0
 80097e6:	4405      	add	r5, r0
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	9b04      	ldr	r3, [sp, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dd07      	ble.n	8009800 <_dtoa_r+0x818>
 80097f0:	ee18 1a10 	vmov	r1, s16
 80097f4:	461a      	mov	r2, r3
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 ffce 	bl	800a798 <__lshift>
 80097fc:	ee08 0a10 	vmov	s16, r0
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x82a>
 8009806:	4631      	mov	r1, r6
 8009808:	461a      	mov	r2, r3
 800980a:	4620      	mov	r0, r4
 800980c:	f000 ffc4 	bl	800a798 <__lshift>
 8009810:	4606      	mov	r6, r0
 8009812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d06e      	beq.n	80098f6 <_dtoa_r+0x90e>
 8009818:	ee18 0a10 	vmov	r0, s16
 800981c:	4631      	mov	r1, r6
 800981e:	f001 f82b 	bl	800a878 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	da67      	bge.n	80098f6 <_dtoa_r+0x90e>
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	3b01      	subs	r3, #1
 800982a:	ee18 1a10 	vmov	r1, s16
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	220a      	movs	r2, #10
 8009832:	2300      	movs	r3, #0
 8009834:	4620      	mov	r0, r4
 8009836:	f000 fdb5 	bl	800a3a4 <__multadd>
 800983a:	9b08      	ldr	r3, [sp, #32]
 800983c:	ee08 0a10 	vmov	s16, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 81b1 	beq.w	8009ba8 <_dtoa_r+0xbc0>
 8009846:	2300      	movs	r3, #0
 8009848:	4639      	mov	r1, r7
 800984a:	220a      	movs	r2, #10
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fda9 	bl	800a3a4 <__multadd>
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	4607      	mov	r7, r0
 8009858:	f300 808e 	bgt.w	8009978 <_dtoa_r+0x990>
 800985c:	9b06      	ldr	r3, [sp, #24]
 800985e:	2b02      	cmp	r3, #2
 8009860:	dc51      	bgt.n	8009906 <_dtoa_r+0x91e>
 8009862:	e089      	b.n	8009978 <_dtoa_r+0x990>
 8009864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800986a:	e74b      	b.n	8009704 <_dtoa_r+0x71c>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	1e5e      	subs	r6, r3, #1
 8009870:	9b07      	ldr	r3, [sp, #28]
 8009872:	42b3      	cmp	r3, r6
 8009874:	bfbf      	itttt	lt
 8009876:	9b07      	ldrlt	r3, [sp, #28]
 8009878:	9607      	strlt	r6, [sp, #28]
 800987a:	1af2      	sublt	r2, r6, r3
 800987c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800987e:	bfb6      	itet	lt
 8009880:	189b      	addlt	r3, r3, r2
 8009882:	1b9e      	subge	r6, r3, r6
 8009884:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	bfb8      	it	lt
 800988a:	2600      	movlt	r6, #0
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfb7      	itett	lt
 8009890:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009894:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009898:	1a9d      	sublt	r5, r3, r2
 800989a:	2300      	movlt	r3, #0
 800989c:	e734      	b.n	8009708 <_dtoa_r+0x720>
 800989e:	9e07      	ldr	r6, [sp, #28]
 80098a0:	9d04      	ldr	r5, [sp, #16]
 80098a2:	9f08      	ldr	r7, [sp, #32]
 80098a4:	e73b      	b.n	800971e <_dtoa_r+0x736>
 80098a6:	9a07      	ldr	r2, [sp, #28]
 80098a8:	e767      	b.n	800977a <_dtoa_r+0x792>
 80098aa:	9b06      	ldr	r3, [sp, #24]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	dc18      	bgt.n	80098e2 <_dtoa_r+0x8fa>
 80098b0:	f1ba 0f00 	cmp.w	sl, #0
 80098b4:	d115      	bne.n	80098e2 <_dtoa_r+0x8fa>
 80098b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098ba:	b993      	cbnz	r3, 80098e2 <_dtoa_r+0x8fa>
 80098bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098c0:	0d1b      	lsrs	r3, r3, #20
 80098c2:	051b      	lsls	r3, r3, #20
 80098c4:	b183      	cbz	r3, 80098e8 <_dtoa_r+0x900>
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	3301      	adds	r3, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	9b05      	ldr	r3, [sp, #20]
 80098ce:	3301      	adds	r3, #1
 80098d0:	9305      	str	r3, [sp, #20]
 80098d2:	f04f 0801 	mov.w	r8, #1
 80098d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f47f af6a 	bne.w	80097b2 <_dtoa_r+0x7ca>
 80098de:	2001      	movs	r0, #1
 80098e0:	e76f      	b.n	80097c2 <_dtoa_r+0x7da>
 80098e2:	f04f 0800 	mov.w	r8, #0
 80098e6:	e7f6      	b.n	80098d6 <_dtoa_r+0x8ee>
 80098e8:	4698      	mov	r8, r3
 80098ea:	e7f4      	b.n	80098d6 <_dtoa_r+0x8ee>
 80098ec:	f43f af7d 	beq.w	80097ea <_dtoa_r+0x802>
 80098f0:	4618      	mov	r0, r3
 80098f2:	301c      	adds	r0, #28
 80098f4:	e772      	b.n	80097dc <_dtoa_r+0x7f4>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	dc37      	bgt.n	800996c <_dtoa_r+0x984>
 80098fc:	9b06      	ldr	r3, [sp, #24]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	dd34      	ble.n	800996c <_dtoa_r+0x984>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	9302      	str	r3, [sp, #8]
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	b96b      	cbnz	r3, 8009926 <_dtoa_r+0x93e>
 800990a:	4631      	mov	r1, r6
 800990c:	2205      	movs	r2, #5
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fd48 	bl	800a3a4 <__multadd>
 8009914:	4601      	mov	r1, r0
 8009916:	4606      	mov	r6, r0
 8009918:	ee18 0a10 	vmov	r0, s16
 800991c:	f000 ffac 	bl	800a878 <__mcmp>
 8009920:	2800      	cmp	r0, #0
 8009922:	f73f adbb 	bgt.w	800949c <_dtoa_r+0x4b4>
 8009926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009928:	9d01      	ldr	r5, [sp, #4]
 800992a:	43db      	mvns	r3, r3
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	4631      	mov	r1, r6
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fd13 	bl	800a360 <_Bfree>
 800993a:	2f00      	cmp	r7, #0
 800993c:	f43f aea4 	beq.w	8009688 <_dtoa_r+0x6a0>
 8009940:	f1b8 0f00 	cmp.w	r8, #0
 8009944:	d005      	beq.n	8009952 <_dtoa_r+0x96a>
 8009946:	45b8      	cmp	r8, r7
 8009948:	d003      	beq.n	8009952 <_dtoa_r+0x96a>
 800994a:	4641      	mov	r1, r8
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fd07 	bl	800a360 <_Bfree>
 8009952:	4639      	mov	r1, r7
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fd03 	bl	800a360 <_Bfree>
 800995a:	e695      	b.n	8009688 <_dtoa_r+0x6a0>
 800995c:	2600      	movs	r6, #0
 800995e:	4637      	mov	r7, r6
 8009960:	e7e1      	b.n	8009926 <_dtoa_r+0x93e>
 8009962:	9700      	str	r7, [sp, #0]
 8009964:	4637      	mov	r7, r6
 8009966:	e599      	b.n	800949c <_dtoa_r+0x4b4>
 8009968:	40240000 	.word	0x40240000
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80ca 	beq.w	8009b08 <_dtoa_r+0xb20>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	9302      	str	r3, [sp, #8]
 8009978:	2d00      	cmp	r5, #0
 800997a:	dd05      	ble.n	8009988 <_dtoa_r+0x9a0>
 800997c:	4639      	mov	r1, r7
 800997e:	462a      	mov	r2, r5
 8009980:	4620      	mov	r0, r4
 8009982:	f000 ff09 	bl	800a798 <__lshift>
 8009986:	4607      	mov	r7, r0
 8009988:	f1b8 0f00 	cmp.w	r8, #0
 800998c:	d05b      	beq.n	8009a46 <_dtoa_r+0xa5e>
 800998e:	6879      	ldr	r1, [r7, #4]
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fca5 	bl	800a2e0 <_Balloc>
 8009996:	4605      	mov	r5, r0
 8009998:	b928      	cbnz	r0, 80099a6 <_dtoa_r+0x9be>
 800999a:	4b87      	ldr	r3, [pc, #540]	; (8009bb8 <_dtoa_r+0xbd0>)
 800999c:	4602      	mov	r2, r0
 800999e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099a2:	f7ff bb3b 	b.w	800901c <_dtoa_r+0x34>
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	3202      	adds	r2, #2
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	f107 010c 	add.w	r1, r7, #12
 80099b0:	300c      	adds	r0, #12
 80099b2:	f7fd fecf 	bl	8007754 <memcpy>
 80099b6:	2201      	movs	r2, #1
 80099b8:	4629      	mov	r1, r5
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 feec 	bl	800a798 <__lshift>
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	f103 0901 	add.w	r9, r3, #1
 80099c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80099ca:	4413      	add	r3, r2
 80099cc:	9305      	str	r3, [sp, #20]
 80099ce:	f00a 0301 	and.w	r3, sl, #1
 80099d2:	46b8      	mov	r8, r7
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	4607      	mov	r7, r0
 80099d8:	4631      	mov	r1, r6
 80099da:	ee18 0a10 	vmov	r0, s16
 80099de:	f7ff fa77 	bl	8008ed0 <quorem>
 80099e2:	4641      	mov	r1, r8
 80099e4:	9002      	str	r0, [sp, #8]
 80099e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099ea:	ee18 0a10 	vmov	r0, s16
 80099ee:	f000 ff43 	bl	800a878 <__mcmp>
 80099f2:	463a      	mov	r2, r7
 80099f4:	9003      	str	r0, [sp, #12]
 80099f6:	4631      	mov	r1, r6
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 ff59 	bl	800a8b0 <__mdiff>
 80099fe:	68c2      	ldr	r2, [r0, #12]
 8009a00:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a04:	4605      	mov	r5, r0
 8009a06:	bb02      	cbnz	r2, 8009a4a <_dtoa_r+0xa62>
 8009a08:	4601      	mov	r1, r0
 8009a0a:	ee18 0a10 	vmov	r0, s16
 8009a0e:	f000 ff33 	bl	800a878 <__mcmp>
 8009a12:	4602      	mov	r2, r0
 8009a14:	4629      	mov	r1, r5
 8009a16:	4620      	mov	r0, r4
 8009a18:	9207      	str	r2, [sp, #28]
 8009a1a:	f000 fca1 	bl	800a360 <_Bfree>
 8009a1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a22:	ea43 0102 	orr.w	r1, r3, r2
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	464d      	mov	r5, r9
 8009a2c:	d10f      	bne.n	8009a4e <_dtoa_r+0xa66>
 8009a2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a32:	d02a      	beq.n	8009a8a <_dtoa_r+0xaa2>
 8009a34:	9b03      	ldr	r3, [sp, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	dd02      	ble.n	8009a40 <_dtoa_r+0xa58>
 8009a3a:	9b02      	ldr	r3, [sp, #8]
 8009a3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a40:	f88b a000 	strb.w	sl, [fp]
 8009a44:	e775      	b.n	8009932 <_dtoa_r+0x94a>
 8009a46:	4638      	mov	r0, r7
 8009a48:	e7ba      	b.n	80099c0 <_dtoa_r+0x9d8>
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	e7e2      	b.n	8009a14 <_dtoa_r+0xa2c>
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	db04      	blt.n	8009a5e <_dtoa_r+0xa76>
 8009a54:	9906      	ldr	r1, [sp, #24]
 8009a56:	430b      	orrs	r3, r1
 8009a58:	9904      	ldr	r1, [sp, #16]
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	d122      	bne.n	8009aa4 <_dtoa_r+0xabc>
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	ddee      	ble.n	8009a40 <_dtoa_r+0xa58>
 8009a62:	ee18 1a10 	vmov	r1, s16
 8009a66:	2201      	movs	r2, #1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fe95 	bl	800a798 <__lshift>
 8009a6e:	4631      	mov	r1, r6
 8009a70:	ee08 0a10 	vmov	s16, r0
 8009a74:	f000 ff00 	bl	800a878 <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	dc03      	bgt.n	8009a84 <_dtoa_r+0xa9c>
 8009a7c:	d1e0      	bne.n	8009a40 <_dtoa_r+0xa58>
 8009a7e:	f01a 0f01 	tst.w	sl, #1
 8009a82:	d0dd      	beq.n	8009a40 <_dtoa_r+0xa58>
 8009a84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a88:	d1d7      	bne.n	8009a3a <_dtoa_r+0xa52>
 8009a8a:	2339      	movs	r3, #57	; 0x39
 8009a8c:	f88b 3000 	strb.w	r3, [fp]
 8009a90:	462b      	mov	r3, r5
 8009a92:	461d      	mov	r5, r3
 8009a94:	3b01      	subs	r3, #1
 8009a96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a9a:	2a39      	cmp	r2, #57	; 0x39
 8009a9c:	d071      	beq.n	8009b82 <_dtoa_r+0xb9a>
 8009a9e:	3201      	adds	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	e746      	b.n	8009932 <_dtoa_r+0x94a>
 8009aa4:	2a00      	cmp	r2, #0
 8009aa6:	dd07      	ble.n	8009ab8 <_dtoa_r+0xad0>
 8009aa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009aac:	d0ed      	beq.n	8009a8a <_dtoa_r+0xaa2>
 8009aae:	f10a 0301 	add.w	r3, sl, #1
 8009ab2:	f88b 3000 	strb.w	r3, [fp]
 8009ab6:	e73c      	b.n	8009932 <_dtoa_r+0x94a>
 8009ab8:	9b05      	ldr	r3, [sp, #20]
 8009aba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009abe:	4599      	cmp	r9, r3
 8009ac0:	d047      	beq.n	8009b52 <_dtoa_r+0xb6a>
 8009ac2:	ee18 1a10 	vmov	r1, s16
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	220a      	movs	r2, #10
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fc6a 	bl	800a3a4 <__multadd>
 8009ad0:	45b8      	cmp	r8, r7
 8009ad2:	ee08 0a10 	vmov	s16, r0
 8009ad6:	f04f 0300 	mov.w	r3, #0
 8009ada:	f04f 020a 	mov.w	r2, #10
 8009ade:	4641      	mov	r1, r8
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	d106      	bne.n	8009af2 <_dtoa_r+0xb0a>
 8009ae4:	f000 fc5e 	bl	800a3a4 <__multadd>
 8009ae8:	4680      	mov	r8, r0
 8009aea:	4607      	mov	r7, r0
 8009aec:	f109 0901 	add.w	r9, r9, #1
 8009af0:	e772      	b.n	80099d8 <_dtoa_r+0x9f0>
 8009af2:	f000 fc57 	bl	800a3a4 <__multadd>
 8009af6:	4639      	mov	r1, r7
 8009af8:	4680      	mov	r8, r0
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 fc50 	bl	800a3a4 <__multadd>
 8009b04:	4607      	mov	r7, r0
 8009b06:	e7f1      	b.n	8009aec <_dtoa_r+0xb04>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	9302      	str	r3, [sp, #8]
 8009b0c:	9d01      	ldr	r5, [sp, #4]
 8009b0e:	ee18 0a10 	vmov	r0, s16
 8009b12:	4631      	mov	r1, r6
 8009b14:	f7ff f9dc 	bl	8008ed0 <quorem>
 8009b18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	f805 ab01 	strb.w	sl, [r5], #1
 8009b22:	1aea      	subs	r2, r5, r3
 8009b24:	9b02      	ldr	r3, [sp, #8]
 8009b26:	4293      	cmp	r3, r2
 8009b28:	dd09      	ble.n	8009b3e <_dtoa_r+0xb56>
 8009b2a:	ee18 1a10 	vmov	r1, s16
 8009b2e:	2300      	movs	r3, #0
 8009b30:	220a      	movs	r2, #10
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fc36 	bl	800a3a4 <__multadd>
 8009b38:	ee08 0a10 	vmov	s16, r0
 8009b3c:	e7e7      	b.n	8009b0e <_dtoa_r+0xb26>
 8009b3e:	9b02      	ldr	r3, [sp, #8]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfc8      	it	gt
 8009b44:	461d      	movgt	r5, r3
 8009b46:	9b01      	ldr	r3, [sp, #4]
 8009b48:	bfd8      	it	le
 8009b4a:	2501      	movle	r5, #1
 8009b4c:	441d      	add	r5, r3
 8009b4e:	f04f 0800 	mov.w	r8, #0
 8009b52:	ee18 1a10 	vmov	r1, s16
 8009b56:	2201      	movs	r2, #1
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fe1d 	bl	800a798 <__lshift>
 8009b5e:	4631      	mov	r1, r6
 8009b60:	ee08 0a10 	vmov	s16, r0
 8009b64:	f000 fe88 	bl	800a878 <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	dc91      	bgt.n	8009a90 <_dtoa_r+0xaa8>
 8009b6c:	d102      	bne.n	8009b74 <_dtoa_r+0xb8c>
 8009b6e:	f01a 0f01 	tst.w	sl, #1
 8009b72:	d18d      	bne.n	8009a90 <_dtoa_r+0xaa8>
 8009b74:	462b      	mov	r3, r5
 8009b76:	461d      	mov	r5, r3
 8009b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b7c:	2a30      	cmp	r2, #48	; 0x30
 8009b7e:	d0fa      	beq.n	8009b76 <_dtoa_r+0xb8e>
 8009b80:	e6d7      	b.n	8009932 <_dtoa_r+0x94a>
 8009b82:	9a01      	ldr	r2, [sp, #4]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d184      	bne.n	8009a92 <_dtoa_r+0xaaa>
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2331      	movs	r3, #49	; 0x31
 8009b90:	7013      	strb	r3, [r2, #0]
 8009b92:	e6ce      	b.n	8009932 <_dtoa_r+0x94a>
 8009b94:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <_dtoa_r+0xbd4>)
 8009b96:	f7ff ba95 	b.w	80090c4 <_dtoa_r+0xdc>
 8009b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f47f aa6e 	bne.w	800907e <_dtoa_r+0x96>
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <_dtoa_r+0xbd8>)
 8009ba4:	f7ff ba8e 	b.w	80090c4 <_dtoa_r+0xdc>
 8009ba8:	9b02      	ldr	r3, [sp, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dcae      	bgt.n	8009b0c <_dtoa_r+0xb24>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	f73f aea8 	bgt.w	8009906 <_dtoa_r+0x91e>
 8009bb6:	e7a9      	b.n	8009b0c <_dtoa_r+0xb24>
 8009bb8:	0800c268 	.word	0x0800c268
 8009bbc:	0800c074 	.word	0x0800c074
 8009bc0:	0800c1e9 	.word	0x0800c1e9

08009bc4 <rshift>:
 8009bc4:	6903      	ldr	r3, [r0, #16]
 8009bc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bd2:	f100 0414 	add.w	r4, r0, #20
 8009bd6:	dd45      	ble.n	8009c64 <rshift+0xa0>
 8009bd8:	f011 011f 	ands.w	r1, r1, #31
 8009bdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009be0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009be4:	d10c      	bne.n	8009c00 <rshift+0x3c>
 8009be6:	f100 0710 	add.w	r7, r0, #16
 8009bea:	4629      	mov	r1, r5
 8009bec:	42b1      	cmp	r1, r6
 8009bee:	d334      	bcc.n	8009c5a <rshift+0x96>
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	1eea      	subs	r2, r5, #3
 8009bf6:	4296      	cmp	r6, r2
 8009bf8:	bf38      	it	cc
 8009bfa:	2300      	movcc	r3, #0
 8009bfc:	4423      	add	r3, r4
 8009bfe:	e015      	b.n	8009c2c <rshift+0x68>
 8009c00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c04:	f1c1 0820 	rsb	r8, r1, #32
 8009c08:	40cf      	lsrs	r7, r1
 8009c0a:	f105 0e04 	add.w	lr, r5, #4
 8009c0e:	46a1      	mov	r9, r4
 8009c10:	4576      	cmp	r6, lr
 8009c12:	46f4      	mov	ip, lr
 8009c14:	d815      	bhi.n	8009c42 <rshift+0x7e>
 8009c16:	1a9a      	subs	r2, r3, r2
 8009c18:	0092      	lsls	r2, r2, #2
 8009c1a:	3a04      	subs	r2, #4
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	42ae      	cmp	r6, r5
 8009c20:	bf38      	it	cc
 8009c22:	2200      	movcc	r2, #0
 8009c24:	18a3      	adds	r3, r4, r2
 8009c26:	50a7      	str	r7, [r4, r2]
 8009c28:	b107      	cbz	r7, 8009c2c <rshift+0x68>
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	1b1a      	subs	r2, r3, r4
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c34:	bf08      	it	eq
 8009c36:	2300      	moveq	r3, #0
 8009c38:	6102      	str	r2, [r0, #16]
 8009c3a:	bf08      	it	eq
 8009c3c:	6143      	streq	r3, [r0, #20]
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c42:	f8dc c000 	ldr.w	ip, [ip]
 8009c46:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c4a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c4e:	f849 7b04 	str.w	r7, [r9], #4
 8009c52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c56:	40cf      	lsrs	r7, r1
 8009c58:	e7da      	b.n	8009c10 <rshift+0x4c>
 8009c5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c62:	e7c3      	b.n	8009bec <rshift+0x28>
 8009c64:	4623      	mov	r3, r4
 8009c66:	e7e1      	b.n	8009c2c <rshift+0x68>

08009c68 <__hexdig_fun>:
 8009c68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d802      	bhi.n	8009c76 <__hexdig_fun+0xe>
 8009c70:	3820      	subs	r0, #32
 8009c72:	b2c0      	uxtb	r0, r0
 8009c74:	4770      	bx	lr
 8009c76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d801      	bhi.n	8009c82 <__hexdig_fun+0x1a>
 8009c7e:	3847      	subs	r0, #71	; 0x47
 8009c80:	e7f7      	b.n	8009c72 <__hexdig_fun+0xa>
 8009c82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d801      	bhi.n	8009c8e <__hexdig_fun+0x26>
 8009c8a:	3827      	subs	r0, #39	; 0x27
 8009c8c:	e7f1      	b.n	8009c72 <__hexdig_fun+0xa>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	4770      	bx	lr
	...

08009c94 <__gethex>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	ed2d 8b02 	vpush	{d8}
 8009c9c:	b089      	sub	sp, #36	; 0x24
 8009c9e:	ee08 0a10 	vmov	s16, r0
 8009ca2:	9304      	str	r3, [sp, #16]
 8009ca4:	4bb4      	ldr	r3, [pc, #720]	; (8009f78 <__gethex+0x2e4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	4618      	mov	r0, r3
 8009cac:	468b      	mov	fp, r1
 8009cae:	4690      	mov	r8, r2
 8009cb0:	f7f6 fbf0 	bl	8000494 <strlen>
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	f8db 2000 	ldr.w	r2, [fp]
 8009cba:	4403      	add	r3, r0
 8009cbc:	4682      	mov	sl, r0
 8009cbe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cc2:	9305      	str	r3, [sp, #20]
 8009cc4:	1c93      	adds	r3, r2, #2
 8009cc6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cce:	32fe      	adds	r2, #254	; 0xfe
 8009cd0:	18d1      	adds	r1, r2, r3
 8009cd2:	461f      	mov	r7, r3
 8009cd4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cd8:	9100      	str	r1, [sp, #0]
 8009cda:	2830      	cmp	r0, #48	; 0x30
 8009cdc:	d0f8      	beq.n	8009cd0 <__gethex+0x3c>
 8009cde:	f7ff ffc3 	bl	8009c68 <__hexdig_fun>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d13a      	bne.n	8009d5e <__gethex+0xca>
 8009ce8:	9901      	ldr	r1, [sp, #4]
 8009cea:	4652      	mov	r2, sl
 8009cec:	4638      	mov	r0, r7
 8009cee:	f001 fa29 	bl	800b144 <strncmp>
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d168      	bne.n	8009dca <__gethex+0x136>
 8009cf8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cfc:	eb07 060a 	add.w	r6, r7, sl
 8009d00:	f7ff ffb2 	bl	8009c68 <__hexdig_fun>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d062      	beq.n	8009dce <__gethex+0x13a>
 8009d08:	4633      	mov	r3, r6
 8009d0a:	7818      	ldrb	r0, [r3, #0]
 8009d0c:	2830      	cmp	r0, #48	; 0x30
 8009d0e:	461f      	mov	r7, r3
 8009d10:	f103 0301 	add.w	r3, r3, #1
 8009d14:	d0f9      	beq.n	8009d0a <__gethex+0x76>
 8009d16:	f7ff ffa7 	bl	8009c68 <__hexdig_fun>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	fab0 f480 	clz	r4, r0
 8009d20:	0964      	lsrs	r4, r4, #5
 8009d22:	4635      	mov	r5, r6
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	463a      	mov	r2, r7
 8009d28:	4616      	mov	r6, r2
 8009d2a:	3201      	adds	r2, #1
 8009d2c:	7830      	ldrb	r0, [r6, #0]
 8009d2e:	f7ff ff9b 	bl	8009c68 <__hexdig_fun>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1f8      	bne.n	8009d28 <__gethex+0x94>
 8009d36:	9901      	ldr	r1, [sp, #4]
 8009d38:	4652      	mov	r2, sl
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f001 fa02 	bl	800b144 <strncmp>
 8009d40:	b980      	cbnz	r0, 8009d64 <__gethex+0xd0>
 8009d42:	b94d      	cbnz	r5, 8009d58 <__gethex+0xc4>
 8009d44:	eb06 050a 	add.w	r5, r6, sl
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4616      	mov	r6, r2
 8009d4c:	3201      	adds	r2, #1
 8009d4e:	7830      	ldrb	r0, [r6, #0]
 8009d50:	f7ff ff8a 	bl	8009c68 <__hexdig_fun>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1f8      	bne.n	8009d4a <__gethex+0xb6>
 8009d58:	1bad      	subs	r5, r5, r6
 8009d5a:	00ad      	lsls	r5, r5, #2
 8009d5c:	e004      	b.n	8009d68 <__gethex+0xd4>
 8009d5e:	2400      	movs	r4, #0
 8009d60:	4625      	mov	r5, r4
 8009d62:	e7e0      	b.n	8009d26 <__gethex+0x92>
 8009d64:	2d00      	cmp	r5, #0
 8009d66:	d1f7      	bne.n	8009d58 <__gethex+0xc4>
 8009d68:	7833      	ldrb	r3, [r6, #0]
 8009d6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d6e:	2b50      	cmp	r3, #80	; 0x50
 8009d70:	d13b      	bne.n	8009dea <__gethex+0x156>
 8009d72:	7873      	ldrb	r3, [r6, #1]
 8009d74:	2b2b      	cmp	r3, #43	; 0x2b
 8009d76:	d02c      	beq.n	8009dd2 <__gethex+0x13e>
 8009d78:	2b2d      	cmp	r3, #45	; 0x2d
 8009d7a:	d02e      	beq.n	8009dda <__gethex+0x146>
 8009d7c:	1c71      	adds	r1, r6, #1
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	7808      	ldrb	r0, [r1, #0]
 8009d84:	f7ff ff70 	bl	8009c68 <__hexdig_fun>
 8009d88:	1e43      	subs	r3, r0, #1
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b18      	cmp	r3, #24
 8009d8e:	d82c      	bhi.n	8009dea <__gethex+0x156>
 8009d90:	f1a0 0210 	sub.w	r2, r0, #16
 8009d94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d98:	f7ff ff66 	bl	8009c68 <__hexdig_fun>
 8009d9c:	1e43      	subs	r3, r0, #1
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b18      	cmp	r3, #24
 8009da2:	d91d      	bls.n	8009de0 <__gethex+0x14c>
 8009da4:	f1b9 0f00 	cmp.w	r9, #0
 8009da8:	d000      	beq.n	8009dac <__gethex+0x118>
 8009daa:	4252      	negs	r2, r2
 8009dac:	4415      	add	r5, r2
 8009dae:	f8cb 1000 	str.w	r1, [fp]
 8009db2:	b1e4      	cbz	r4, 8009dee <__gethex+0x15a>
 8009db4:	9b00      	ldr	r3, [sp, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bf14      	ite	ne
 8009dba:	2700      	movne	r7, #0
 8009dbc:	2706      	moveq	r7, #6
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	b009      	add	sp, #36	; 0x24
 8009dc2:	ecbd 8b02 	vpop	{d8}
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	463e      	mov	r6, r7
 8009dcc:	4625      	mov	r5, r4
 8009dce:	2401      	movs	r4, #1
 8009dd0:	e7ca      	b.n	8009d68 <__gethex+0xd4>
 8009dd2:	f04f 0900 	mov.w	r9, #0
 8009dd6:	1cb1      	adds	r1, r6, #2
 8009dd8:	e7d3      	b.n	8009d82 <__gethex+0xee>
 8009dda:	f04f 0901 	mov.w	r9, #1
 8009dde:	e7fa      	b.n	8009dd6 <__gethex+0x142>
 8009de0:	230a      	movs	r3, #10
 8009de2:	fb03 0202 	mla	r2, r3, r2, r0
 8009de6:	3a10      	subs	r2, #16
 8009de8:	e7d4      	b.n	8009d94 <__gethex+0x100>
 8009dea:	4631      	mov	r1, r6
 8009dec:	e7df      	b.n	8009dae <__gethex+0x11a>
 8009dee:	1bf3      	subs	r3, r6, r7
 8009df0:	3b01      	subs	r3, #1
 8009df2:	4621      	mov	r1, r4
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	dc0b      	bgt.n	8009e10 <__gethex+0x17c>
 8009df8:	ee18 0a10 	vmov	r0, s16
 8009dfc:	f000 fa70 	bl	800a2e0 <_Balloc>
 8009e00:	4604      	mov	r4, r0
 8009e02:	b940      	cbnz	r0, 8009e16 <__gethex+0x182>
 8009e04:	4b5d      	ldr	r3, [pc, #372]	; (8009f7c <__gethex+0x2e8>)
 8009e06:	4602      	mov	r2, r0
 8009e08:	21de      	movs	r1, #222	; 0xde
 8009e0a:	485d      	ldr	r0, [pc, #372]	; (8009f80 <__gethex+0x2ec>)
 8009e0c:	f001 f9bc 	bl	800b188 <__assert_func>
 8009e10:	3101      	adds	r1, #1
 8009e12:	105b      	asrs	r3, r3, #1
 8009e14:	e7ee      	b.n	8009df4 <__gethex+0x160>
 8009e16:	f100 0914 	add.w	r9, r0, #20
 8009e1a:	f04f 0b00 	mov.w	fp, #0
 8009e1e:	f1ca 0301 	rsb	r3, sl, #1
 8009e22:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e26:	f8cd b000 	str.w	fp, [sp]
 8009e2a:	9306      	str	r3, [sp, #24]
 8009e2c:	42b7      	cmp	r7, r6
 8009e2e:	d340      	bcc.n	8009eb2 <__gethex+0x21e>
 8009e30:	9802      	ldr	r0, [sp, #8]
 8009e32:	9b00      	ldr	r3, [sp, #0]
 8009e34:	f840 3b04 	str.w	r3, [r0], #4
 8009e38:	eba0 0009 	sub.w	r0, r0, r9
 8009e3c:	1080      	asrs	r0, r0, #2
 8009e3e:	0146      	lsls	r6, r0, #5
 8009e40:	6120      	str	r0, [r4, #16]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fb3e 	bl	800a4c4 <__hi0bits>
 8009e48:	1a30      	subs	r0, r6, r0
 8009e4a:	f8d8 6000 	ldr.w	r6, [r8]
 8009e4e:	42b0      	cmp	r0, r6
 8009e50:	dd63      	ble.n	8009f1a <__gethex+0x286>
 8009e52:	1b87      	subs	r7, r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	4620      	mov	r0, r4
 8009e58:	f000 fee2 	bl	800ac20 <__any_on>
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	b1a8      	cbz	r0, 8009e8c <__gethex+0x1f8>
 8009e60:	1e7b      	subs	r3, r7, #1
 8009e62:	1159      	asrs	r1, r3, #5
 8009e64:	f003 021f 	and.w	r2, r3, #31
 8009e68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e6c:	f04f 0a01 	mov.w	sl, #1
 8009e70:	fa0a f202 	lsl.w	r2, sl, r2
 8009e74:	420a      	tst	r2, r1
 8009e76:	d009      	beq.n	8009e8c <__gethex+0x1f8>
 8009e78:	4553      	cmp	r3, sl
 8009e7a:	dd05      	ble.n	8009e88 <__gethex+0x1f4>
 8009e7c:	1eb9      	subs	r1, r7, #2
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fece 	bl	800ac20 <__any_on>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d145      	bne.n	8009f14 <__gethex+0x280>
 8009e88:	f04f 0a02 	mov.w	sl, #2
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7ff fe98 	bl	8009bc4 <rshift>
 8009e94:	443d      	add	r5, r7
 8009e96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e9a:	42ab      	cmp	r3, r5
 8009e9c:	da4c      	bge.n	8009f38 <__gethex+0x2a4>
 8009e9e:	ee18 0a10 	vmov	r0, s16
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f000 fa5c 	bl	800a360 <_Bfree>
 8009ea8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009eaa:	2300      	movs	r3, #0
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	27a3      	movs	r7, #163	; 0xa3
 8009eb0:	e785      	b.n	8009dbe <__gethex+0x12a>
 8009eb2:	1e73      	subs	r3, r6, #1
 8009eb4:	9a05      	ldr	r2, [sp, #20]
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d019      	beq.n	8009ef4 <__gethex+0x260>
 8009ec0:	f1bb 0f20 	cmp.w	fp, #32
 8009ec4:	d107      	bne.n	8009ed6 <__gethex+0x242>
 8009ec6:	9b02      	ldr	r3, [sp, #8]
 8009ec8:	9a00      	ldr	r2, [sp, #0]
 8009eca:	f843 2b04 	str.w	r2, [r3], #4
 8009ece:	9302      	str	r3, [sp, #8]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	469b      	mov	fp, r3
 8009ed6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009eda:	f7ff fec5 	bl	8009c68 <__hexdig_fun>
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	f000 000f 	and.w	r0, r0, #15
 8009ee4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ee8:	4303      	orrs	r3, r0
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	f10b 0b04 	add.w	fp, fp, #4
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	e00d      	b.n	8009f10 <__gethex+0x27c>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	9a06      	ldr	r2, [sp, #24]
 8009ef8:	4413      	add	r3, r2
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	d3e0      	bcc.n	8009ec0 <__gethex+0x22c>
 8009efe:	4618      	mov	r0, r3
 8009f00:	9901      	ldr	r1, [sp, #4]
 8009f02:	9307      	str	r3, [sp, #28]
 8009f04:	4652      	mov	r2, sl
 8009f06:	f001 f91d 	bl	800b144 <strncmp>
 8009f0a:	9b07      	ldr	r3, [sp, #28]
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1d7      	bne.n	8009ec0 <__gethex+0x22c>
 8009f10:	461e      	mov	r6, r3
 8009f12:	e78b      	b.n	8009e2c <__gethex+0x198>
 8009f14:	f04f 0a03 	mov.w	sl, #3
 8009f18:	e7b8      	b.n	8009e8c <__gethex+0x1f8>
 8009f1a:	da0a      	bge.n	8009f32 <__gethex+0x29e>
 8009f1c:	1a37      	subs	r7, r6, r0
 8009f1e:	4621      	mov	r1, r4
 8009f20:	ee18 0a10 	vmov	r0, s16
 8009f24:	463a      	mov	r2, r7
 8009f26:	f000 fc37 	bl	800a798 <__lshift>
 8009f2a:	1bed      	subs	r5, r5, r7
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	f100 0914 	add.w	r9, r0, #20
 8009f32:	f04f 0a00 	mov.w	sl, #0
 8009f36:	e7ae      	b.n	8009e96 <__gethex+0x202>
 8009f38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f3c:	42a8      	cmp	r0, r5
 8009f3e:	dd72      	ble.n	800a026 <__gethex+0x392>
 8009f40:	1b45      	subs	r5, r0, r5
 8009f42:	42ae      	cmp	r6, r5
 8009f44:	dc36      	bgt.n	8009fb4 <__gethex+0x320>
 8009f46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d02a      	beq.n	8009fa4 <__gethex+0x310>
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d02c      	beq.n	8009fac <__gethex+0x318>
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d11c      	bne.n	8009f90 <__gethex+0x2fc>
 8009f56:	42ae      	cmp	r6, r5
 8009f58:	d11a      	bne.n	8009f90 <__gethex+0x2fc>
 8009f5a:	2e01      	cmp	r6, #1
 8009f5c:	d112      	bne.n	8009f84 <__gethex+0x2f0>
 8009f5e:	9a04      	ldr	r2, [sp, #16]
 8009f60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	2301      	movs	r3, #1
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	f8c9 3000 	str.w	r3, [r9]
 8009f6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f70:	2762      	movs	r7, #98	; 0x62
 8009f72:	601c      	str	r4, [r3, #0]
 8009f74:	e723      	b.n	8009dbe <__gethex+0x12a>
 8009f76:	bf00      	nop
 8009f78:	0800c2e0 	.word	0x0800c2e0
 8009f7c:	0800c268 	.word	0x0800c268
 8009f80:	0800c279 	.word	0x0800c279
 8009f84:	1e71      	subs	r1, r6, #1
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fe4a 	bl	800ac20 <__any_on>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1e6      	bne.n	8009f5e <__gethex+0x2ca>
 8009f90:	ee18 0a10 	vmov	r0, s16
 8009f94:	4621      	mov	r1, r4
 8009f96:	f000 f9e3 	bl	800a360 <_Bfree>
 8009f9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	2750      	movs	r7, #80	; 0x50
 8009fa2:	e70c      	b.n	8009dbe <__gethex+0x12a>
 8009fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f2      	bne.n	8009f90 <__gethex+0x2fc>
 8009faa:	e7d8      	b.n	8009f5e <__gethex+0x2ca>
 8009fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1d5      	bne.n	8009f5e <__gethex+0x2ca>
 8009fb2:	e7ed      	b.n	8009f90 <__gethex+0x2fc>
 8009fb4:	1e6f      	subs	r7, r5, #1
 8009fb6:	f1ba 0f00 	cmp.w	sl, #0
 8009fba:	d131      	bne.n	800a020 <__gethex+0x38c>
 8009fbc:	b127      	cbz	r7, 8009fc8 <__gethex+0x334>
 8009fbe:	4639      	mov	r1, r7
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fe2d 	bl	800ac20 <__any_on>
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	117b      	asrs	r3, r7, #5
 8009fca:	2101      	movs	r1, #1
 8009fcc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fd0:	f007 071f 	and.w	r7, r7, #31
 8009fd4:	fa01 f707 	lsl.w	r7, r1, r7
 8009fd8:	421f      	tst	r7, r3
 8009fda:	4629      	mov	r1, r5
 8009fdc:	4620      	mov	r0, r4
 8009fde:	bf18      	it	ne
 8009fe0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fe4:	1b76      	subs	r6, r6, r5
 8009fe6:	f7ff fded 	bl	8009bc4 <rshift>
 8009fea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fee:	2702      	movs	r7, #2
 8009ff0:	f1ba 0f00 	cmp.w	sl, #0
 8009ff4:	d048      	beq.n	800a088 <__gethex+0x3f4>
 8009ff6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d015      	beq.n	800a02a <__gethex+0x396>
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d017      	beq.n	800a032 <__gethex+0x39e>
 800a002:	2b01      	cmp	r3, #1
 800a004:	d109      	bne.n	800a01a <__gethex+0x386>
 800a006:	f01a 0f02 	tst.w	sl, #2
 800a00a:	d006      	beq.n	800a01a <__gethex+0x386>
 800a00c:	f8d9 0000 	ldr.w	r0, [r9]
 800a010:	ea4a 0a00 	orr.w	sl, sl, r0
 800a014:	f01a 0f01 	tst.w	sl, #1
 800a018:	d10e      	bne.n	800a038 <__gethex+0x3a4>
 800a01a:	f047 0710 	orr.w	r7, r7, #16
 800a01e:	e033      	b.n	800a088 <__gethex+0x3f4>
 800a020:	f04f 0a01 	mov.w	sl, #1
 800a024:	e7d0      	b.n	8009fc8 <__gethex+0x334>
 800a026:	2701      	movs	r7, #1
 800a028:	e7e2      	b.n	8009ff0 <__gethex+0x35c>
 800a02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a02c:	f1c3 0301 	rsb	r3, r3, #1
 800a030:	9315      	str	r3, [sp, #84]	; 0x54
 800a032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0f0      	beq.n	800a01a <__gethex+0x386>
 800a038:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a03c:	f104 0314 	add.w	r3, r4, #20
 800a040:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a044:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a048:	f04f 0c00 	mov.w	ip, #0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a052:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a056:	d01c      	beq.n	800a092 <__gethex+0x3fe>
 800a058:	3201      	adds	r2, #1
 800a05a:	6002      	str	r2, [r0, #0]
 800a05c:	2f02      	cmp	r7, #2
 800a05e:	f104 0314 	add.w	r3, r4, #20
 800a062:	d13f      	bne.n	800a0e4 <__gethex+0x450>
 800a064:	f8d8 2000 	ldr.w	r2, [r8]
 800a068:	3a01      	subs	r2, #1
 800a06a:	42b2      	cmp	r2, r6
 800a06c:	d10a      	bne.n	800a084 <__gethex+0x3f0>
 800a06e:	1171      	asrs	r1, r6, #5
 800a070:	2201      	movs	r2, #1
 800a072:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a076:	f006 061f 	and.w	r6, r6, #31
 800a07a:	fa02 f606 	lsl.w	r6, r2, r6
 800a07e:	421e      	tst	r6, r3
 800a080:	bf18      	it	ne
 800a082:	4617      	movne	r7, r2
 800a084:	f047 0720 	orr.w	r7, r7, #32
 800a088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a08a:	601c      	str	r4, [r3, #0]
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	601d      	str	r5, [r3, #0]
 800a090:	e695      	b.n	8009dbe <__gethex+0x12a>
 800a092:	4299      	cmp	r1, r3
 800a094:	f843 cc04 	str.w	ip, [r3, #-4]
 800a098:	d8d8      	bhi.n	800a04c <__gethex+0x3b8>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	459b      	cmp	fp, r3
 800a09e:	db19      	blt.n	800a0d4 <__gethex+0x440>
 800a0a0:	6861      	ldr	r1, [r4, #4]
 800a0a2:	ee18 0a10 	vmov	r0, s16
 800a0a6:	3101      	adds	r1, #1
 800a0a8:	f000 f91a 	bl	800a2e0 <_Balloc>
 800a0ac:	4681      	mov	r9, r0
 800a0ae:	b918      	cbnz	r0, 800a0b8 <__gethex+0x424>
 800a0b0:	4b1a      	ldr	r3, [pc, #104]	; (800a11c <__gethex+0x488>)
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	2184      	movs	r1, #132	; 0x84
 800a0b6:	e6a8      	b.n	8009e0a <__gethex+0x176>
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	3202      	adds	r2, #2
 800a0bc:	f104 010c 	add.w	r1, r4, #12
 800a0c0:	0092      	lsls	r2, r2, #2
 800a0c2:	300c      	adds	r0, #12
 800a0c4:	f7fd fb46 	bl	8007754 <memcpy>
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	ee18 0a10 	vmov	r0, s16
 800a0ce:	f000 f947 	bl	800a360 <_Bfree>
 800a0d2:	464c      	mov	r4, r9
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0dc:	6122      	str	r2, [r4, #16]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	615a      	str	r2, [r3, #20]
 800a0e2:	e7bb      	b.n	800a05c <__gethex+0x3c8>
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	455a      	cmp	r2, fp
 800a0e8:	dd0b      	ble.n	800a102 <__gethex+0x46e>
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f7ff fd69 	bl	8009bc4 <rshift>
 800a0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0f6:	3501      	adds	r5, #1
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	f6ff aed0 	blt.w	8009e9e <__gethex+0x20a>
 800a0fe:	2701      	movs	r7, #1
 800a100:	e7c0      	b.n	800a084 <__gethex+0x3f0>
 800a102:	f016 061f 	ands.w	r6, r6, #31
 800a106:	d0fa      	beq.n	800a0fe <__gethex+0x46a>
 800a108:	4453      	add	r3, sl
 800a10a:	f1c6 0620 	rsb	r6, r6, #32
 800a10e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a112:	f000 f9d7 	bl	800a4c4 <__hi0bits>
 800a116:	42b0      	cmp	r0, r6
 800a118:	dbe7      	blt.n	800a0ea <__gethex+0x456>
 800a11a:	e7f0      	b.n	800a0fe <__gethex+0x46a>
 800a11c:	0800c268 	.word	0x0800c268

0800a120 <L_shift>:
 800a120:	f1c2 0208 	rsb	r2, r2, #8
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	f1c2 0620 	rsb	r6, r2, #32
 800a12c:	6843      	ldr	r3, [r0, #4]
 800a12e:	6804      	ldr	r4, [r0, #0]
 800a130:	fa03 f506 	lsl.w	r5, r3, r6
 800a134:	432c      	orrs	r4, r5
 800a136:	40d3      	lsrs	r3, r2
 800a138:	6004      	str	r4, [r0, #0]
 800a13a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a13e:	4288      	cmp	r0, r1
 800a140:	d3f4      	bcc.n	800a12c <L_shift+0xc>
 800a142:	bd70      	pop	{r4, r5, r6, pc}

0800a144 <__match>:
 800a144:	b530      	push	{r4, r5, lr}
 800a146:	6803      	ldr	r3, [r0, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a14e:	b914      	cbnz	r4, 800a156 <__match+0x12>
 800a150:	6003      	str	r3, [r0, #0]
 800a152:	2001      	movs	r0, #1
 800a154:	bd30      	pop	{r4, r5, pc}
 800a156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a15e:	2d19      	cmp	r5, #25
 800a160:	bf98      	it	ls
 800a162:	3220      	addls	r2, #32
 800a164:	42a2      	cmp	r2, r4
 800a166:	d0f0      	beq.n	800a14a <__match+0x6>
 800a168:	2000      	movs	r0, #0
 800a16a:	e7f3      	b.n	800a154 <__match+0x10>

0800a16c <__hexnan>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	680b      	ldr	r3, [r1, #0]
 800a172:	115e      	asrs	r6, r3, #5
 800a174:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a178:	f013 031f 	ands.w	r3, r3, #31
 800a17c:	b087      	sub	sp, #28
 800a17e:	bf18      	it	ne
 800a180:	3604      	addne	r6, #4
 800a182:	2500      	movs	r5, #0
 800a184:	1f37      	subs	r7, r6, #4
 800a186:	4690      	mov	r8, r2
 800a188:	6802      	ldr	r2, [r0, #0]
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	4682      	mov	sl, r0
 800a18e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a192:	46b9      	mov	r9, r7
 800a194:	463c      	mov	r4, r7
 800a196:	9502      	str	r5, [sp, #8]
 800a198:	46ab      	mov	fp, r5
 800a19a:	7851      	ldrb	r1, [r2, #1]
 800a19c:	1c53      	adds	r3, r2, #1
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	b341      	cbz	r1, 800a1f4 <__hexnan+0x88>
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	9205      	str	r2, [sp, #20]
 800a1a6:	9104      	str	r1, [sp, #16]
 800a1a8:	f7ff fd5e 	bl	8009c68 <__hexdig_fun>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d14f      	bne.n	800a250 <__hexnan+0xe4>
 800a1b0:	9904      	ldr	r1, [sp, #16]
 800a1b2:	9a05      	ldr	r2, [sp, #20]
 800a1b4:	2920      	cmp	r1, #32
 800a1b6:	d818      	bhi.n	800a1ea <__hexnan+0x7e>
 800a1b8:	9b02      	ldr	r3, [sp, #8]
 800a1ba:	459b      	cmp	fp, r3
 800a1bc:	dd13      	ble.n	800a1e6 <__hexnan+0x7a>
 800a1be:	454c      	cmp	r4, r9
 800a1c0:	d206      	bcs.n	800a1d0 <__hexnan+0x64>
 800a1c2:	2d07      	cmp	r5, #7
 800a1c4:	dc04      	bgt.n	800a1d0 <__hexnan+0x64>
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f7ff ffa8 	bl	800a120 <L_shift>
 800a1d0:	4544      	cmp	r4, r8
 800a1d2:	d950      	bls.n	800a276 <__hexnan+0x10a>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a1da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1de:	f8cd b008 	str.w	fp, [sp, #8]
 800a1e2:	464c      	mov	r4, r9
 800a1e4:	461d      	mov	r5, r3
 800a1e6:	9a03      	ldr	r2, [sp, #12]
 800a1e8:	e7d7      	b.n	800a19a <__hexnan+0x2e>
 800a1ea:	2929      	cmp	r1, #41	; 0x29
 800a1ec:	d156      	bne.n	800a29c <__hexnan+0x130>
 800a1ee:	3202      	adds	r2, #2
 800a1f0:	f8ca 2000 	str.w	r2, [sl]
 800a1f4:	f1bb 0f00 	cmp.w	fp, #0
 800a1f8:	d050      	beq.n	800a29c <__hexnan+0x130>
 800a1fa:	454c      	cmp	r4, r9
 800a1fc:	d206      	bcs.n	800a20c <__hexnan+0xa0>
 800a1fe:	2d07      	cmp	r5, #7
 800a200:	dc04      	bgt.n	800a20c <__hexnan+0xa0>
 800a202:	462a      	mov	r2, r5
 800a204:	4649      	mov	r1, r9
 800a206:	4620      	mov	r0, r4
 800a208:	f7ff ff8a 	bl	800a120 <L_shift>
 800a20c:	4544      	cmp	r4, r8
 800a20e:	d934      	bls.n	800a27a <__hexnan+0x10e>
 800a210:	f1a8 0204 	sub.w	r2, r8, #4
 800a214:	4623      	mov	r3, r4
 800a216:	f853 1b04 	ldr.w	r1, [r3], #4
 800a21a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a21e:	429f      	cmp	r7, r3
 800a220:	d2f9      	bcs.n	800a216 <__hexnan+0xaa>
 800a222:	1b3b      	subs	r3, r7, r4
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	3304      	adds	r3, #4
 800a22a:	3401      	adds	r4, #1
 800a22c:	3e03      	subs	r6, #3
 800a22e:	42b4      	cmp	r4, r6
 800a230:	bf88      	it	hi
 800a232:	2304      	movhi	r3, #4
 800a234:	4443      	add	r3, r8
 800a236:	2200      	movs	r2, #0
 800a238:	f843 2b04 	str.w	r2, [r3], #4
 800a23c:	429f      	cmp	r7, r3
 800a23e:	d2fb      	bcs.n	800a238 <__hexnan+0xcc>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	b91b      	cbnz	r3, 800a24c <__hexnan+0xe0>
 800a244:	4547      	cmp	r7, r8
 800a246:	d127      	bne.n	800a298 <__hexnan+0x12c>
 800a248:	2301      	movs	r3, #1
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	2005      	movs	r0, #5
 800a24e:	e026      	b.n	800a29e <__hexnan+0x132>
 800a250:	3501      	adds	r5, #1
 800a252:	2d08      	cmp	r5, #8
 800a254:	f10b 0b01 	add.w	fp, fp, #1
 800a258:	dd06      	ble.n	800a268 <__hexnan+0xfc>
 800a25a:	4544      	cmp	r4, r8
 800a25c:	d9c3      	bls.n	800a1e6 <__hexnan+0x7a>
 800a25e:	2300      	movs	r3, #0
 800a260:	f844 3c04 	str.w	r3, [r4, #-4]
 800a264:	2501      	movs	r5, #1
 800a266:	3c04      	subs	r4, #4
 800a268:	6822      	ldr	r2, [r4, #0]
 800a26a:	f000 000f 	and.w	r0, r0, #15
 800a26e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a272:	6022      	str	r2, [r4, #0]
 800a274:	e7b7      	b.n	800a1e6 <__hexnan+0x7a>
 800a276:	2508      	movs	r5, #8
 800a278:	e7b5      	b.n	800a1e6 <__hexnan+0x7a>
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0df      	beq.n	800a240 <__hexnan+0xd4>
 800a280:	f04f 32ff 	mov.w	r2, #4294967295
 800a284:	f1c3 0320 	rsb	r3, r3, #32
 800a288:	fa22 f303 	lsr.w	r3, r2, r3
 800a28c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a290:	401a      	ands	r2, r3
 800a292:	f846 2c04 	str.w	r2, [r6, #-4]
 800a296:	e7d3      	b.n	800a240 <__hexnan+0xd4>
 800a298:	3f04      	subs	r7, #4
 800a29a:	e7d1      	b.n	800a240 <__hexnan+0xd4>
 800a29c:	2004      	movs	r0, #4
 800a29e:	b007      	add	sp, #28
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2a4 <_localeconv_r>:
 800a2a4:	4800      	ldr	r0, [pc, #0]	; (800a2a8 <_localeconv_r+0x4>)
 800a2a6:	4770      	bx	lr
 800a2a8:	200003d0 	.word	0x200003d0

0800a2ac <malloc>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <malloc+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f000 bd59 	b.w	800ad68 <_malloc_r>
 800a2b6:	bf00      	nop
 800a2b8:	20000278 	.word	0x20000278

0800a2bc <__ascii_mbtowc>:
 800a2bc:	b082      	sub	sp, #8
 800a2be:	b901      	cbnz	r1, 800a2c2 <__ascii_mbtowc+0x6>
 800a2c0:	a901      	add	r1, sp, #4
 800a2c2:	b142      	cbz	r2, 800a2d6 <__ascii_mbtowc+0x1a>
 800a2c4:	b14b      	cbz	r3, 800a2da <__ascii_mbtowc+0x1e>
 800a2c6:	7813      	ldrb	r3, [r2, #0]
 800a2c8:	600b      	str	r3, [r1, #0]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	1e10      	subs	r0, r2, #0
 800a2ce:	bf18      	it	ne
 800a2d0:	2001      	movne	r0, #1
 800a2d2:	b002      	add	sp, #8
 800a2d4:	4770      	bx	lr
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	e7fb      	b.n	800a2d2 <__ascii_mbtowc+0x16>
 800a2da:	f06f 0001 	mvn.w	r0, #1
 800a2de:	e7f8      	b.n	800a2d2 <__ascii_mbtowc+0x16>

0800a2e0 <_Balloc>:
 800a2e0:	b570      	push	{r4, r5, r6, lr}
 800a2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	b976      	cbnz	r6, 800a308 <_Balloc+0x28>
 800a2ea:	2010      	movs	r0, #16
 800a2ec:	f7ff ffde 	bl	800a2ac <malloc>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	6260      	str	r0, [r4, #36]	; 0x24
 800a2f4:	b920      	cbnz	r0, 800a300 <_Balloc+0x20>
 800a2f6:	4b18      	ldr	r3, [pc, #96]	; (800a358 <_Balloc+0x78>)
 800a2f8:	4818      	ldr	r0, [pc, #96]	; (800a35c <_Balloc+0x7c>)
 800a2fa:	2166      	movs	r1, #102	; 0x66
 800a2fc:	f000 ff44 	bl	800b188 <__assert_func>
 800a300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a304:	6006      	str	r6, [r0, #0]
 800a306:	60c6      	str	r6, [r0, #12]
 800a308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a30a:	68f3      	ldr	r3, [r6, #12]
 800a30c:	b183      	cbz	r3, 800a330 <_Balloc+0x50>
 800a30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a316:	b9b8      	cbnz	r0, 800a348 <_Balloc+0x68>
 800a318:	2101      	movs	r1, #1
 800a31a:	fa01 f605 	lsl.w	r6, r1, r5
 800a31e:	1d72      	adds	r2, r6, #5
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	4620      	mov	r0, r4
 800a324:	f000 fc9d 	bl	800ac62 <_calloc_r>
 800a328:	b160      	cbz	r0, 800a344 <_Balloc+0x64>
 800a32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a32e:	e00e      	b.n	800a34e <_Balloc+0x6e>
 800a330:	2221      	movs	r2, #33	; 0x21
 800a332:	2104      	movs	r1, #4
 800a334:	4620      	mov	r0, r4
 800a336:	f000 fc94 	bl	800ac62 <_calloc_r>
 800a33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a33c:	60f0      	str	r0, [r6, #12]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e4      	bne.n	800a30e <_Balloc+0x2e>
 800a344:	2000      	movs	r0, #0
 800a346:	bd70      	pop	{r4, r5, r6, pc}
 800a348:	6802      	ldr	r2, [r0, #0]
 800a34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a34e:	2300      	movs	r3, #0
 800a350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a354:	e7f7      	b.n	800a346 <_Balloc+0x66>
 800a356:	bf00      	nop
 800a358:	0800c1f6 	.word	0x0800c1f6
 800a35c:	0800c2f4 	.word	0x0800c2f4

0800a360 <_Bfree>:
 800a360:	b570      	push	{r4, r5, r6, lr}
 800a362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a364:	4605      	mov	r5, r0
 800a366:	460c      	mov	r4, r1
 800a368:	b976      	cbnz	r6, 800a388 <_Bfree+0x28>
 800a36a:	2010      	movs	r0, #16
 800a36c:	f7ff ff9e 	bl	800a2ac <malloc>
 800a370:	4602      	mov	r2, r0
 800a372:	6268      	str	r0, [r5, #36]	; 0x24
 800a374:	b920      	cbnz	r0, 800a380 <_Bfree+0x20>
 800a376:	4b09      	ldr	r3, [pc, #36]	; (800a39c <_Bfree+0x3c>)
 800a378:	4809      	ldr	r0, [pc, #36]	; (800a3a0 <_Bfree+0x40>)
 800a37a:	218a      	movs	r1, #138	; 0x8a
 800a37c:	f000 ff04 	bl	800b188 <__assert_func>
 800a380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a384:	6006      	str	r6, [r0, #0]
 800a386:	60c6      	str	r6, [r0, #12]
 800a388:	b13c      	cbz	r4, 800a39a <_Bfree+0x3a>
 800a38a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a38c:	6862      	ldr	r2, [r4, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a394:	6021      	str	r1, [r4, #0]
 800a396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	0800c1f6 	.word	0x0800c1f6
 800a3a0:	0800c2f4 	.word	0x0800c2f4

0800a3a4 <__multadd>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	690d      	ldr	r5, [r1, #16]
 800a3aa:	4607      	mov	r7, r0
 800a3ac:	460c      	mov	r4, r1
 800a3ae:	461e      	mov	r6, r3
 800a3b0:	f101 0c14 	add.w	ip, r1, #20
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a3ba:	b299      	uxth	r1, r3
 800a3bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a3c0:	0c1e      	lsrs	r6, r3, #16
 800a3c2:	0c0b      	lsrs	r3, r1, #16
 800a3c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a3c8:	b289      	uxth	r1, r1
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3d0:	4285      	cmp	r5, r0
 800a3d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3da:	dcec      	bgt.n	800a3b6 <__multadd+0x12>
 800a3dc:	b30e      	cbz	r6, 800a422 <__multadd+0x7e>
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	42ab      	cmp	r3, r5
 800a3e2:	dc19      	bgt.n	800a418 <__multadd+0x74>
 800a3e4:	6861      	ldr	r1, [r4, #4]
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	3101      	adds	r1, #1
 800a3ea:	f7ff ff79 	bl	800a2e0 <_Balloc>
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	b928      	cbnz	r0, 800a3fe <__multadd+0x5a>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <__multadd+0x84>)
 800a3f6:	480d      	ldr	r0, [pc, #52]	; (800a42c <__multadd+0x88>)
 800a3f8:	21b5      	movs	r1, #181	; 0xb5
 800a3fa:	f000 fec5 	bl	800b188 <__assert_func>
 800a3fe:	6922      	ldr	r2, [r4, #16]
 800a400:	3202      	adds	r2, #2
 800a402:	f104 010c 	add.w	r1, r4, #12
 800a406:	0092      	lsls	r2, r2, #2
 800a408:	300c      	adds	r0, #12
 800a40a:	f7fd f9a3 	bl	8007754 <memcpy>
 800a40e:	4621      	mov	r1, r4
 800a410:	4638      	mov	r0, r7
 800a412:	f7ff ffa5 	bl	800a360 <_Bfree>
 800a416:	4644      	mov	r4, r8
 800a418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a41c:	3501      	adds	r5, #1
 800a41e:	615e      	str	r6, [r3, #20]
 800a420:	6125      	str	r5, [r4, #16]
 800a422:	4620      	mov	r0, r4
 800a424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a428:	0800c268 	.word	0x0800c268
 800a42c:	0800c2f4 	.word	0x0800c2f4

0800a430 <__s2b>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	460c      	mov	r4, r1
 800a436:	4615      	mov	r5, r2
 800a438:	461f      	mov	r7, r3
 800a43a:	2209      	movs	r2, #9
 800a43c:	3308      	adds	r3, #8
 800a43e:	4606      	mov	r6, r0
 800a440:	fb93 f3f2 	sdiv	r3, r3, r2
 800a444:	2100      	movs	r1, #0
 800a446:	2201      	movs	r2, #1
 800a448:	429a      	cmp	r2, r3
 800a44a:	db09      	blt.n	800a460 <__s2b+0x30>
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff ff47 	bl	800a2e0 <_Balloc>
 800a452:	b940      	cbnz	r0, 800a466 <__s2b+0x36>
 800a454:	4602      	mov	r2, r0
 800a456:	4b19      	ldr	r3, [pc, #100]	; (800a4bc <__s2b+0x8c>)
 800a458:	4819      	ldr	r0, [pc, #100]	; (800a4c0 <__s2b+0x90>)
 800a45a:	21ce      	movs	r1, #206	; 0xce
 800a45c:	f000 fe94 	bl	800b188 <__assert_func>
 800a460:	0052      	lsls	r2, r2, #1
 800a462:	3101      	adds	r1, #1
 800a464:	e7f0      	b.n	800a448 <__s2b+0x18>
 800a466:	9b08      	ldr	r3, [sp, #32]
 800a468:	6143      	str	r3, [r0, #20]
 800a46a:	2d09      	cmp	r5, #9
 800a46c:	f04f 0301 	mov.w	r3, #1
 800a470:	6103      	str	r3, [r0, #16]
 800a472:	dd16      	ble.n	800a4a2 <__s2b+0x72>
 800a474:	f104 0909 	add.w	r9, r4, #9
 800a478:	46c8      	mov	r8, r9
 800a47a:	442c      	add	r4, r5
 800a47c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a480:	4601      	mov	r1, r0
 800a482:	3b30      	subs	r3, #48	; 0x30
 800a484:	220a      	movs	r2, #10
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff8c 	bl	800a3a4 <__multadd>
 800a48c:	45a0      	cmp	r8, r4
 800a48e:	d1f5      	bne.n	800a47c <__s2b+0x4c>
 800a490:	f1a5 0408 	sub.w	r4, r5, #8
 800a494:	444c      	add	r4, r9
 800a496:	1b2d      	subs	r5, r5, r4
 800a498:	1963      	adds	r3, r4, r5
 800a49a:	42bb      	cmp	r3, r7
 800a49c:	db04      	blt.n	800a4a8 <__s2b+0x78>
 800a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a2:	340a      	adds	r4, #10
 800a4a4:	2509      	movs	r5, #9
 800a4a6:	e7f6      	b.n	800a496 <__s2b+0x66>
 800a4a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	3b30      	subs	r3, #48	; 0x30
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7ff ff76 	bl	800a3a4 <__multadd>
 800a4b8:	e7ee      	b.n	800a498 <__s2b+0x68>
 800a4ba:	bf00      	nop
 800a4bc:	0800c268 	.word	0x0800c268
 800a4c0:	0800c2f4 	.word	0x0800c2f4

0800a4c4 <__hi0bits>:
 800a4c4:	0c03      	lsrs	r3, r0, #16
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	b9d3      	cbnz	r3, 800a500 <__hi0bits+0x3c>
 800a4ca:	0400      	lsls	r0, r0, #16
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4d2:	bf04      	itt	eq
 800a4d4:	0200      	lsleq	r0, r0, #8
 800a4d6:	3308      	addeq	r3, #8
 800a4d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4dc:	bf04      	itt	eq
 800a4de:	0100      	lsleq	r0, r0, #4
 800a4e0:	3304      	addeq	r3, #4
 800a4e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4e6:	bf04      	itt	eq
 800a4e8:	0080      	lsleq	r0, r0, #2
 800a4ea:	3302      	addeq	r3, #2
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	db05      	blt.n	800a4fc <__hi0bits+0x38>
 800a4f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4f4:	f103 0301 	add.w	r3, r3, #1
 800a4f8:	bf08      	it	eq
 800a4fa:	2320      	moveq	r3, #32
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	4770      	bx	lr
 800a500:	2300      	movs	r3, #0
 800a502:	e7e4      	b.n	800a4ce <__hi0bits+0xa>

0800a504 <__lo0bits>:
 800a504:	6803      	ldr	r3, [r0, #0]
 800a506:	f013 0207 	ands.w	r2, r3, #7
 800a50a:	4601      	mov	r1, r0
 800a50c:	d00b      	beq.n	800a526 <__lo0bits+0x22>
 800a50e:	07da      	lsls	r2, r3, #31
 800a510:	d423      	bmi.n	800a55a <__lo0bits+0x56>
 800a512:	0798      	lsls	r0, r3, #30
 800a514:	bf49      	itett	mi
 800a516:	085b      	lsrmi	r3, r3, #1
 800a518:	089b      	lsrpl	r3, r3, #2
 800a51a:	2001      	movmi	r0, #1
 800a51c:	600b      	strmi	r3, [r1, #0]
 800a51e:	bf5c      	itt	pl
 800a520:	600b      	strpl	r3, [r1, #0]
 800a522:	2002      	movpl	r0, #2
 800a524:	4770      	bx	lr
 800a526:	b298      	uxth	r0, r3
 800a528:	b9a8      	cbnz	r0, 800a556 <__lo0bits+0x52>
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	2010      	movs	r0, #16
 800a52e:	b2da      	uxtb	r2, r3
 800a530:	b90a      	cbnz	r2, 800a536 <__lo0bits+0x32>
 800a532:	3008      	adds	r0, #8
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	071a      	lsls	r2, r3, #28
 800a538:	bf04      	itt	eq
 800a53a:	091b      	lsreq	r3, r3, #4
 800a53c:	3004      	addeq	r0, #4
 800a53e:	079a      	lsls	r2, r3, #30
 800a540:	bf04      	itt	eq
 800a542:	089b      	lsreq	r3, r3, #2
 800a544:	3002      	addeq	r0, #2
 800a546:	07da      	lsls	r2, r3, #31
 800a548:	d403      	bmi.n	800a552 <__lo0bits+0x4e>
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	f100 0001 	add.w	r0, r0, #1
 800a550:	d005      	beq.n	800a55e <__lo0bits+0x5a>
 800a552:	600b      	str	r3, [r1, #0]
 800a554:	4770      	bx	lr
 800a556:	4610      	mov	r0, r2
 800a558:	e7e9      	b.n	800a52e <__lo0bits+0x2a>
 800a55a:	2000      	movs	r0, #0
 800a55c:	4770      	bx	lr
 800a55e:	2020      	movs	r0, #32
 800a560:	4770      	bx	lr
	...

0800a564 <__i2b>:
 800a564:	b510      	push	{r4, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	2101      	movs	r1, #1
 800a56a:	f7ff feb9 	bl	800a2e0 <_Balloc>
 800a56e:	4602      	mov	r2, r0
 800a570:	b928      	cbnz	r0, 800a57e <__i2b+0x1a>
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <__i2b+0x24>)
 800a574:	4805      	ldr	r0, [pc, #20]	; (800a58c <__i2b+0x28>)
 800a576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a57a:	f000 fe05 	bl	800b188 <__assert_func>
 800a57e:	2301      	movs	r3, #1
 800a580:	6144      	str	r4, [r0, #20]
 800a582:	6103      	str	r3, [r0, #16]
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop
 800a588:	0800c268 	.word	0x0800c268
 800a58c:	0800c2f4 	.word	0x0800c2f4

0800a590 <__multiply>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	4691      	mov	r9, r2
 800a596:	690a      	ldr	r2, [r1, #16]
 800a598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	bfb8      	it	lt
 800a5a0:	460b      	movlt	r3, r1
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	bfbc      	itt	lt
 800a5a6:	464c      	movlt	r4, r9
 800a5a8:	4699      	movlt	r9, r3
 800a5aa:	6927      	ldr	r7, [r4, #16]
 800a5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	6861      	ldr	r1, [r4, #4]
 800a5b4:	eb07 060a 	add.w	r6, r7, sl
 800a5b8:	42b3      	cmp	r3, r6
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	bfb8      	it	lt
 800a5be:	3101      	addlt	r1, #1
 800a5c0:	f7ff fe8e 	bl	800a2e0 <_Balloc>
 800a5c4:	b930      	cbnz	r0, 800a5d4 <__multiply+0x44>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4b44      	ldr	r3, [pc, #272]	; (800a6dc <__multiply+0x14c>)
 800a5ca:	4845      	ldr	r0, [pc, #276]	; (800a6e0 <__multiply+0x150>)
 800a5cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a5d0:	f000 fdda 	bl	800b188 <__assert_func>
 800a5d4:	f100 0514 	add.w	r5, r0, #20
 800a5d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5dc:	462b      	mov	r3, r5
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4543      	cmp	r3, r8
 800a5e2:	d321      	bcc.n	800a628 <__multiply+0x98>
 800a5e4:	f104 0314 	add.w	r3, r4, #20
 800a5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ec:	f109 0314 	add.w	r3, r9, #20
 800a5f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	1b3a      	subs	r2, r7, r4
 800a5f8:	3a15      	subs	r2, #21
 800a5fa:	f022 0203 	bic.w	r2, r2, #3
 800a5fe:	3204      	adds	r2, #4
 800a600:	f104 0115 	add.w	r1, r4, #21
 800a604:	428f      	cmp	r7, r1
 800a606:	bf38      	it	cc
 800a608:	2204      	movcc	r2, #4
 800a60a:	9201      	str	r2, [sp, #4]
 800a60c:	9a02      	ldr	r2, [sp, #8]
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	429a      	cmp	r2, r3
 800a612:	d80c      	bhi.n	800a62e <__multiply+0x9e>
 800a614:	2e00      	cmp	r6, #0
 800a616:	dd03      	ble.n	800a620 <__multiply+0x90>
 800a618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d05a      	beq.n	800a6d6 <__multiply+0x146>
 800a620:	6106      	str	r6, [r0, #16]
 800a622:	b005      	add	sp, #20
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	f843 2b04 	str.w	r2, [r3], #4
 800a62c:	e7d8      	b.n	800a5e0 <__multiply+0x50>
 800a62e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a632:	f1ba 0f00 	cmp.w	sl, #0
 800a636:	d024      	beq.n	800a682 <__multiply+0xf2>
 800a638:	f104 0e14 	add.w	lr, r4, #20
 800a63c:	46a9      	mov	r9, r5
 800a63e:	f04f 0c00 	mov.w	ip, #0
 800a642:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a646:	f8d9 1000 	ldr.w	r1, [r9]
 800a64a:	fa1f fb82 	uxth.w	fp, r2
 800a64e:	b289      	uxth	r1, r1
 800a650:	fb0a 110b 	mla	r1, sl, fp, r1
 800a654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a658:	f8d9 2000 	ldr.w	r2, [r9]
 800a65c:	4461      	add	r1, ip
 800a65e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a662:	fb0a c20b 	mla	r2, sl, fp, ip
 800a666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a66a:	b289      	uxth	r1, r1
 800a66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a670:	4577      	cmp	r7, lr
 800a672:	f849 1b04 	str.w	r1, [r9], #4
 800a676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a67a:	d8e2      	bhi.n	800a642 <__multiply+0xb2>
 800a67c:	9a01      	ldr	r2, [sp, #4]
 800a67e:	f845 c002 	str.w	ip, [r5, r2]
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a688:	3304      	adds	r3, #4
 800a68a:	f1b9 0f00 	cmp.w	r9, #0
 800a68e:	d020      	beq.n	800a6d2 <__multiply+0x142>
 800a690:	6829      	ldr	r1, [r5, #0]
 800a692:	f104 0c14 	add.w	ip, r4, #20
 800a696:	46ae      	mov	lr, r5
 800a698:	f04f 0a00 	mov.w	sl, #0
 800a69c:	f8bc b000 	ldrh.w	fp, [ip]
 800a6a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a6a8:	4492      	add	sl, r2
 800a6aa:	b289      	uxth	r1, r1
 800a6ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a6b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a6bc:	0c12      	lsrs	r2, r2, #16
 800a6be:	fb09 1102 	mla	r1, r9, r2, r1
 800a6c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6c6:	4567      	cmp	r7, ip
 800a6c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6cc:	d8e6      	bhi.n	800a69c <__multiply+0x10c>
 800a6ce:	9a01      	ldr	r2, [sp, #4]
 800a6d0:	50a9      	str	r1, [r5, r2]
 800a6d2:	3504      	adds	r5, #4
 800a6d4:	e79a      	b.n	800a60c <__multiply+0x7c>
 800a6d6:	3e01      	subs	r6, #1
 800a6d8:	e79c      	b.n	800a614 <__multiply+0x84>
 800a6da:	bf00      	nop
 800a6dc:	0800c268 	.word	0x0800c268
 800a6e0:	0800c2f4 	.word	0x0800c2f4

0800a6e4 <__pow5mult>:
 800a6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	f012 0203 	ands.w	r2, r2, #3
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	d007      	beq.n	800a704 <__pow5mult+0x20>
 800a6f4:	4c25      	ldr	r4, [pc, #148]	; (800a78c <__pow5mult+0xa8>)
 800a6f6:	3a01      	subs	r2, #1
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6fe:	f7ff fe51 	bl	800a3a4 <__multadd>
 800a702:	4607      	mov	r7, r0
 800a704:	10ad      	asrs	r5, r5, #2
 800a706:	d03d      	beq.n	800a784 <__pow5mult+0xa0>
 800a708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a70a:	b97c      	cbnz	r4, 800a72c <__pow5mult+0x48>
 800a70c:	2010      	movs	r0, #16
 800a70e:	f7ff fdcd 	bl	800a2ac <malloc>
 800a712:	4602      	mov	r2, r0
 800a714:	6270      	str	r0, [r6, #36]	; 0x24
 800a716:	b928      	cbnz	r0, 800a724 <__pow5mult+0x40>
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <__pow5mult+0xac>)
 800a71a:	481e      	ldr	r0, [pc, #120]	; (800a794 <__pow5mult+0xb0>)
 800a71c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a720:	f000 fd32 	bl	800b188 <__assert_func>
 800a724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a728:	6004      	str	r4, [r0, #0]
 800a72a:	60c4      	str	r4, [r0, #12]
 800a72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a734:	b94c      	cbnz	r4, 800a74a <__pow5mult+0x66>
 800a736:	f240 2171 	movw	r1, #625	; 0x271
 800a73a:	4630      	mov	r0, r6
 800a73c:	f7ff ff12 	bl	800a564 <__i2b>
 800a740:	2300      	movs	r3, #0
 800a742:	f8c8 0008 	str.w	r0, [r8, #8]
 800a746:	4604      	mov	r4, r0
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	07eb      	lsls	r3, r5, #31
 800a750:	d50a      	bpl.n	800a768 <__pow5mult+0x84>
 800a752:	4639      	mov	r1, r7
 800a754:	4622      	mov	r2, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ff1a 	bl	800a590 <__multiply>
 800a75c:	4639      	mov	r1, r7
 800a75e:	4680      	mov	r8, r0
 800a760:	4630      	mov	r0, r6
 800a762:	f7ff fdfd 	bl	800a360 <_Bfree>
 800a766:	4647      	mov	r7, r8
 800a768:	106d      	asrs	r5, r5, #1
 800a76a:	d00b      	beq.n	800a784 <__pow5mult+0xa0>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	b938      	cbnz	r0, 800a780 <__pow5mult+0x9c>
 800a770:	4622      	mov	r2, r4
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f7ff ff0b 	bl	800a590 <__multiply>
 800a77a:	6020      	str	r0, [r4, #0]
 800a77c:	f8c0 9000 	str.w	r9, [r0]
 800a780:	4604      	mov	r4, r0
 800a782:	e7e4      	b.n	800a74e <__pow5mult+0x6a>
 800a784:	4638      	mov	r0, r7
 800a786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78a:	bf00      	nop
 800a78c:	0800c440 	.word	0x0800c440
 800a790:	0800c1f6 	.word	0x0800c1f6
 800a794:	0800c2f4 	.word	0x0800c2f4

0800a798 <__lshift>:
 800a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	6849      	ldr	r1, [r1, #4]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4691      	mov	r9, r2
 800a7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7b0:	f108 0601 	add.w	r6, r8, #1
 800a7b4:	42b3      	cmp	r3, r6
 800a7b6:	db0b      	blt.n	800a7d0 <__lshift+0x38>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f7ff fd91 	bl	800a2e0 <_Balloc>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b948      	cbnz	r0, 800a7d6 <__lshift+0x3e>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4b2a      	ldr	r3, [pc, #168]	; (800a870 <__lshift+0xd8>)
 800a7c6:	482b      	ldr	r0, [pc, #172]	; (800a874 <__lshift+0xdc>)
 800a7c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7cc:	f000 fcdc 	bl	800b188 <__assert_func>
 800a7d0:	3101      	adds	r1, #1
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__lshift+0x1c>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f100 0114 	add.w	r1, r0, #20
 800a7dc:	f100 0210 	add.w	r2, r0, #16
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	4553      	cmp	r3, sl
 800a7e4:	db37      	blt.n	800a856 <__lshift+0xbe>
 800a7e6:	6920      	ldr	r0, [r4, #16]
 800a7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ec:	f104 0314 	add.w	r3, r4, #20
 800a7f0:	f019 091f 	ands.w	r9, r9, #31
 800a7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7fc:	d02f      	beq.n	800a85e <__lshift+0xc6>
 800a7fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a802:	468a      	mov	sl, r1
 800a804:	f04f 0c00 	mov.w	ip, #0
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	fa02 f209 	lsl.w	r2, r2, r9
 800a80e:	ea42 020c 	orr.w	r2, r2, ip
 800a812:	f84a 2b04 	str.w	r2, [sl], #4
 800a816:	f853 2b04 	ldr.w	r2, [r3], #4
 800a81a:	4298      	cmp	r0, r3
 800a81c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a820:	d8f2      	bhi.n	800a808 <__lshift+0x70>
 800a822:	1b03      	subs	r3, r0, r4
 800a824:	3b15      	subs	r3, #21
 800a826:	f023 0303 	bic.w	r3, r3, #3
 800a82a:	3304      	adds	r3, #4
 800a82c:	f104 0215 	add.w	r2, r4, #21
 800a830:	4290      	cmp	r0, r2
 800a832:	bf38      	it	cc
 800a834:	2304      	movcc	r3, #4
 800a836:	f841 c003 	str.w	ip, [r1, r3]
 800a83a:	f1bc 0f00 	cmp.w	ip, #0
 800a83e:	d001      	beq.n	800a844 <__lshift+0xac>
 800a840:	f108 0602 	add.w	r6, r8, #2
 800a844:	3e01      	subs	r6, #1
 800a846:	4638      	mov	r0, r7
 800a848:	612e      	str	r6, [r5, #16]
 800a84a:	4621      	mov	r1, r4
 800a84c:	f7ff fd88 	bl	800a360 <_Bfree>
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a856:	f842 0f04 	str.w	r0, [r2, #4]!
 800a85a:	3301      	adds	r3, #1
 800a85c:	e7c1      	b.n	800a7e2 <__lshift+0x4a>
 800a85e:	3904      	subs	r1, #4
 800a860:	f853 2b04 	ldr.w	r2, [r3], #4
 800a864:	f841 2f04 	str.w	r2, [r1, #4]!
 800a868:	4298      	cmp	r0, r3
 800a86a:	d8f9      	bhi.n	800a860 <__lshift+0xc8>
 800a86c:	e7ea      	b.n	800a844 <__lshift+0xac>
 800a86e:	bf00      	nop
 800a870:	0800c268 	.word	0x0800c268
 800a874:	0800c2f4 	.word	0x0800c2f4

0800a878 <__mcmp>:
 800a878:	b530      	push	{r4, r5, lr}
 800a87a:	6902      	ldr	r2, [r0, #16]
 800a87c:	690c      	ldr	r4, [r1, #16]
 800a87e:	1b12      	subs	r2, r2, r4
 800a880:	d10e      	bne.n	800a8a0 <__mcmp+0x28>
 800a882:	f100 0314 	add.w	r3, r0, #20
 800a886:	3114      	adds	r1, #20
 800a888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a88c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a898:	42a5      	cmp	r5, r4
 800a89a:	d003      	beq.n	800a8a4 <__mcmp+0x2c>
 800a89c:	d305      	bcc.n	800a8aa <__mcmp+0x32>
 800a89e:	2201      	movs	r2, #1
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	bd30      	pop	{r4, r5, pc}
 800a8a4:	4283      	cmp	r3, r0
 800a8a6:	d3f3      	bcc.n	800a890 <__mcmp+0x18>
 800a8a8:	e7fa      	b.n	800a8a0 <__mcmp+0x28>
 800a8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ae:	e7f7      	b.n	800a8a0 <__mcmp+0x28>

0800a8b0 <__mdiff>:
 800a8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	4690      	mov	r8, r2
 800a8be:	f7ff ffdb 	bl	800a878 <__mcmp>
 800a8c2:	1e05      	subs	r5, r0, #0
 800a8c4:	d110      	bne.n	800a8e8 <__mdiff+0x38>
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7ff fd09 	bl	800a2e0 <_Balloc>
 800a8ce:	b930      	cbnz	r0, 800a8de <__mdiff+0x2e>
 800a8d0:	4b3a      	ldr	r3, [pc, #232]	; (800a9bc <__mdiff+0x10c>)
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	f240 2132 	movw	r1, #562	; 0x232
 800a8d8:	4839      	ldr	r0, [pc, #228]	; (800a9c0 <__mdiff+0x110>)
 800a8da:	f000 fc55 	bl	800b188 <__assert_func>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e8:	bfa4      	itt	ge
 800a8ea:	4643      	movge	r3, r8
 800a8ec:	46a0      	movge	r8, r4
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8f4:	bfa6      	itte	ge
 800a8f6:	461c      	movge	r4, r3
 800a8f8:	2500      	movge	r5, #0
 800a8fa:	2501      	movlt	r5, #1
 800a8fc:	f7ff fcf0 	bl	800a2e0 <_Balloc>
 800a900:	b920      	cbnz	r0, 800a90c <__mdiff+0x5c>
 800a902:	4b2e      	ldr	r3, [pc, #184]	; (800a9bc <__mdiff+0x10c>)
 800a904:	4602      	mov	r2, r0
 800a906:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a90a:	e7e5      	b.n	800a8d8 <__mdiff+0x28>
 800a90c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a910:	6926      	ldr	r6, [r4, #16]
 800a912:	60c5      	str	r5, [r0, #12]
 800a914:	f104 0914 	add.w	r9, r4, #20
 800a918:	f108 0514 	add.w	r5, r8, #20
 800a91c:	f100 0e14 	add.w	lr, r0, #20
 800a920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a928:	f108 0210 	add.w	r2, r8, #16
 800a92c:	46f2      	mov	sl, lr
 800a92e:	2100      	movs	r1, #0
 800a930:	f859 3b04 	ldr.w	r3, [r9], #4
 800a934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a938:	fa1f f883 	uxth.w	r8, r3
 800a93c:	fa11 f18b 	uxtah	r1, r1, fp
 800a940:	0c1b      	lsrs	r3, r3, #16
 800a942:	eba1 0808 	sub.w	r8, r1, r8
 800a946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a94a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a94e:	fa1f f888 	uxth.w	r8, r8
 800a952:	1419      	asrs	r1, r3, #16
 800a954:	454e      	cmp	r6, r9
 800a956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a95a:	f84a 3b04 	str.w	r3, [sl], #4
 800a95e:	d8e7      	bhi.n	800a930 <__mdiff+0x80>
 800a960:	1b33      	subs	r3, r6, r4
 800a962:	3b15      	subs	r3, #21
 800a964:	f023 0303 	bic.w	r3, r3, #3
 800a968:	3304      	adds	r3, #4
 800a96a:	3415      	adds	r4, #21
 800a96c:	42a6      	cmp	r6, r4
 800a96e:	bf38      	it	cc
 800a970:	2304      	movcc	r3, #4
 800a972:	441d      	add	r5, r3
 800a974:	4473      	add	r3, lr
 800a976:	469e      	mov	lr, r3
 800a978:	462e      	mov	r6, r5
 800a97a:	4566      	cmp	r6, ip
 800a97c:	d30e      	bcc.n	800a99c <__mdiff+0xec>
 800a97e:	f10c 0203 	add.w	r2, ip, #3
 800a982:	1b52      	subs	r2, r2, r5
 800a984:	f022 0203 	bic.w	r2, r2, #3
 800a988:	3d03      	subs	r5, #3
 800a98a:	45ac      	cmp	ip, r5
 800a98c:	bf38      	it	cc
 800a98e:	2200      	movcc	r2, #0
 800a990:	441a      	add	r2, r3
 800a992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a996:	b17b      	cbz	r3, 800a9b8 <__mdiff+0x108>
 800a998:	6107      	str	r7, [r0, #16]
 800a99a:	e7a3      	b.n	800a8e4 <__mdiff+0x34>
 800a99c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9a0:	fa11 f288 	uxtah	r2, r1, r8
 800a9a4:	1414      	asrs	r4, r2, #16
 800a9a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9aa:	b292      	uxth	r2, r2
 800a9ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9b0:	f84e 2b04 	str.w	r2, [lr], #4
 800a9b4:	1421      	asrs	r1, r4, #16
 800a9b6:	e7e0      	b.n	800a97a <__mdiff+0xca>
 800a9b8:	3f01      	subs	r7, #1
 800a9ba:	e7ea      	b.n	800a992 <__mdiff+0xe2>
 800a9bc:	0800c268 	.word	0x0800c268
 800a9c0:	0800c2f4 	.word	0x0800c2f4

0800a9c4 <__ulp>:
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	ed8d 0b00 	vstr	d0, [sp]
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	4912      	ldr	r1, [pc, #72]	; (800aa18 <__ulp+0x54>)
 800a9ce:	4019      	ands	r1, r3
 800a9d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a9d4:	2900      	cmp	r1, #0
 800a9d6:	dd05      	ble.n	800a9e4 <__ulp+0x20>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	ec43 2b10 	vmov	d0, r2, r3
 800a9e0:	b002      	add	sp, #8
 800a9e2:	4770      	bx	lr
 800a9e4:	4249      	negs	r1, r1
 800a9e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a9ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a9ee:	f04f 0200 	mov.w	r2, #0
 800a9f2:	f04f 0300 	mov.w	r3, #0
 800a9f6:	da04      	bge.n	800aa02 <__ulp+0x3e>
 800a9f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a9fc:	fa41 f300 	asr.w	r3, r1, r0
 800aa00:	e7ec      	b.n	800a9dc <__ulp+0x18>
 800aa02:	f1a0 0114 	sub.w	r1, r0, #20
 800aa06:	291e      	cmp	r1, #30
 800aa08:	bfda      	itte	le
 800aa0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa12:	2101      	movgt	r1, #1
 800aa14:	460a      	mov	r2, r1
 800aa16:	e7e1      	b.n	800a9dc <__ulp+0x18>
 800aa18:	7ff00000 	.word	0x7ff00000

0800aa1c <__b2d>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	6905      	ldr	r5, [r0, #16]
 800aa20:	f100 0714 	add.w	r7, r0, #20
 800aa24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa28:	1f2e      	subs	r6, r5, #4
 800aa2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff fd48 	bl	800a4c4 <__hi0bits>
 800aa34:	f1c0 0320 	rsb	r3, r0, #32
 800aa38:	280a      	cmp	r0, #10
 800aa3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aab8 <__b2d+0x9c>
 800aa3e:	600b      	str	r3, [r1, #0]
 800aa40:	dc14      	bgt.n	800aa6c <__b2d+0x50>
 800aa42:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa46:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa4a:	42b7      	cmp	r7, r6
 800aa4c:	ea41 030c 	orr.w	r3, r1, ip
 800aa50:	bf34      	ite	cc
 800aa52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa56:	2100      	movcs	r1, #0
 800aa58:	3015      	adds	r0, #21
 800aa5a:	fa04 f000 	lsl.w	r0, r4, r0
 800aa5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa62:	ea40 0201 	orr.w	r2, r0, r1
 800aa66:	ec43 2b10 	vmov	d0, r2, r3
 800aa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6c:	42b7      	cmp	r7, r6
 800aa6e:	bf3a      	itte	cc
 800aa70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa74:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa78:	2100      	movcs	r1, #0
 800aa7a:	380b      	subs	r0, #11
 800aa7c:	d017      	beq.n	800aaae <__b2d+0x92>
 800aa7e:	f1c0 0c20 	rsb	ip, r0, #32
 800aa82:	fa04 f500 	lsl.w	r5, r4, r0
 800aa86:	42be      	cmp	r6, r7
 800aa88:	fa21 f40c 	lsr.w	r4, r1, ip
 800aa8c:	ea45 0504 	orr.w	r5, r5, r4
 800aa90:	bf8c      	ite	hi
 800aa92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aa96:	2400      	movls	r4, #0
 800aa98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aa9c:	fa01 f000 	lsl.w	r0, r1, r0
 800aaa0:	fa24 f40c 	lsr.w	r4, r4, ip
 800aaa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aaa8:	ea40 0204 	orr.w	r2, r0, r4
 800aaac:	e7db      	b.n	800aa66 <__b2d+0x4a>
 800aaae:	ea44 030c 	orr.w	r3, r4, ip
 800aab2:	460a      	mov	r2, r1
 800aab4:	e7d7      	b.n	800aa66 <__b2d+0x4a>
 800aab6:	bf00      	nop
 800aab8:	3ff00000 	.word	0x3ff00000

0800aabc <__d2b>:
 800aabc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aac0:	4689      	mov	r9, r1
 800aac2:	2101      	movs	r1, #1
 800aac4:	ec57 6b10 	vmov	r6, r7, d0
 800aac8:	4690      	mov	r8, r2
 800aaca:	f7ff fc09 	bl	800a2e0 <_Balloc>
 800aace:	4604      	mov	r4, r0
 800aad0:	b930      	cbnz	r0, 800aae0 <__d2b+0x24>
 800aad2:	4602      	mov	r2, r0
 800aad4:	4b25      	ldr	r3, [pc, #148]	; (800ab6c <__d2b+0xb0>)
 800aad6:	4826      	ldr	r0, [pc, #152]	; (800ab70 <__d2b+0xb4>)
 800aad8:	f240 310a 	movw	r1, #778	; 0x30a
 800aadc:	f000 fb54 	bl	800b188 <__assert_func>
 800aae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aae8:	bb35      	cbnz	r5, 800ab38 <__d2b+0x7c>
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	d028      	beq.n	800ab42 <__d2b+0x86>
 800aaf0:	4668      	mov	r0, sp
 800aaf2:	9600      	str	r6, [sp, #0]
 800aaf4:	f7ff fd06 	bl	800a504 <__lo0bits>
 800aaf8:	9900      	ldr	r1, [sp, #0]
 800aafa:	b300      	cbz	r0, 800ab3e <__d2b+0x82>
 800aafc:	9a01      	ldr	r2, [sp, #4]
 800aafe:	f1c0 0320 	rsb	r3, r0, #32
 800ab02:	fa02 f303 	lsl.w	r3, r2, r3
 800ab06:	430b      	orrs	r3, r1
 800ab08:	40c2      	lsrs	r2, r0
 800ab0a:	6163      	str	r3, [r4, #20]
 800ab0c:	9201      	str	r2, [sp, #4]
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	61a3      	str	r3, [r4, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	bf14      	ite	ne
 800ab16:	2202      	movne	r2, #2
 800ab18:	2201      	moveq	r2, #1
 800ab1a:	6122      	str	r2, [r4, #16]
 800ab1c:	b1d5      	cbz	r5, 800ab54 <__d2b+0x98>
 800ab1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab22:	4405      	add	r5, r0
 800ab24:	f8c9 5000 	str.w	r5, [r9]
 800ab28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab2c:	f8c8 0000 	str.w	r0, [r8]
 800ab30:	4620      	mov	r0, r4
 800ab32:	b003      	add	sp, #12
 800ab34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab3c:	e7d5      	b.n	800aaea <__d2b+0x2e>
 800ab3e:	6161      	str	r1, [r4, #20]
 800ab40:	e7e5      	b.n	800ab0e <__d2b+0x52>
 800ab42:	a801      	add	r0, sp, #4
 800ab44:	f7ff fcde 	bl	800a504 <__lo0bits>
 800ab48:	9b01      	ldr	r3, [sp, #4]
 800ab4a:	6163      	str	r3, [r4, #20]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	6122      	str	r2, [r4, #16]
 800ab50:	3020      	adds	r0, #32
 800ab52:	e7e3      	b.n	800ab1c <__d2b+0x60>
 800ab54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab5c:	f8c9 0000 	str.w	r0, [r9]
 800ab60:	6918      	ldr	r0, [r3, #16]
 800ab62:	f7ff fcaf 	bl	800a4c4 <__hi0bits>
 800ab66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab6a:	e7df      	b.n	800ab2c <__d2b+0x70>
 800ab6c:	0800c268 	.word	0x0800c268
 800ab70:	0800c2f4 	.word	0x0800c2f4

0800ab74 <__ratio>:
 800ab74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab78:	4688      	mov	r8, r1
 800ab7a:	4669      	mov	r1, sp
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	f7ff ff4d 	bl	800aa1c <__b2d>
 800ab82:	a901      	add	r1, sp, #4
 800ab84:	4640      	mov	r0, r8
 800ab86:	ec55 4b10 	vmov	r4, r5, d0
 800ab8a:	f7ff ff47 	bl	800aa1c <__b2d>
 800ab8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab96:	eba3 0c02 	sub.w	ip, r3, r2
 800ab9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab9e:	1a9b      	subs	r3, r3, r2
 800aba0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aba4:	ec51 0b10 	vmov	r0, r1, d0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfd6      	itet	le
 800abac:	460a      	movle	r2, r1
 800abae:	462a      	movgt	r2, r5
 800abb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abb4:	468b      	mov	fp, r1
 800abb6:	462f      	mov	r7, r5
 800abb8:	bfd4      	ite	le
 800abba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abc2:	4620      	mov	r0, r4
 800abc4:	ee10 2a10 	vmov	r2, s0
 800abc8:	465b      	mov	r3, fp
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f5 ffa6 	bl	8000b1c <__aeabi_ddiv>
 800abd0:	ec41 0b10 	vmov	d0, r0, r1
 800abd4:	b003      	add	sp, #12
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abda <__copybits>:
 800abda:	3901      	subs	r1, #1
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	1149      	asrs	r1, r1, #5
 800abe0:	6914      	ldr	r4, [r2, #16]
 800abe2:	3101      	adds	r1, #1
 800abe4:	f102 0314 	add.w	r3, r2, #20
 800abe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abf0:	1f05      	subs	r5, r0, #4
 800abf2:	42a3      	cmp	r3, r4
 800abf4:	d30c      	bcc.n	800ac10 <__copybits+0x36>
 800abf6:	1aa3      	subs	r3, r4, r2
 800abf8:	3b11      	subs	r3, #17
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	3211      	adds	r2, #17
 800ac00:	42a2      	cmp	r2, r4
 800ac02:	bf88      	it	hi
 800ac04:	2300      	movhi	r3, #0
 800ac06:	4418      	add	r0, r3
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4288      	cmp	r0, r1
 800ac0c:	d305      	bcc.n	800ac1a <__copybits+0x40>
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac14:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac18:	e7eb      	b.n	800abf2 <__copybits+0x18>
 800ac1a:	f840 3b04 	str.w	r3, [r0], #4
 800ac1e:	e7f4      	b.n	800ac0a <__copybits+0x30>

0800ac20 <__any_on>:
 800ac20:	f100 0214 	add.w	r2, r0, #20
 800ac24:	6900      	ldr	r0, [r0, #16]
 800ac26:	114b      	asrs	r3, r1, #5
 800ac28:	4298      	cmp	r0, r3
 800ac2a:	b510      	push	{r4, lr}
 800ac2c:	db11      	blt.n	800ac52 <__any_on+0x32>
 800ac2e:	dd0a      	ble.n	800ac46 <__any_on+0x26>
 800ac30:	f011 011f 	ands.w	r1, r1, #31
 800ac34:	d007      	beq.n	800ac46 <__any_on+0x26>
 800ac36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac3a:	fa24 f001 	lsr.w	r0, r4, r1
 800ac3e:	fa00 f101 	lsl.w	r1, r0, r1
 800ac42:	428c      	cmp	r4, r1
 800ac44:	d10b      	bne.n	800ac5e <__any_on+0x3e>
 800ac46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d803      	bhi.n	800ac56 <__any_on+0x36>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	4603      	mov	r3, r0
 800ac54:	e7f7      	b.n	800ac46 <__any_on+0x26>
 800ac56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac5a:	2900      	cmp	r1, #0
 800ac5c:	d0f5      	beq.n	800ac4a <__any_on+0x2a>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7f6      	b.n	800ac50 <__any_on+0x30>

0800ac62 <_calloc_r>:
 800ac62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac64:	fba1 2402 	umull	r2, r4, r1, r2
 800ac68:	b94c      	cbnz	r4, 800ac7e <_calloc_r+0x1c>
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	9201      	str	r2, [sp, #4]
 800ac6e:	f000 f87b 	bl	800ad68 <_malloc_r>
 800ac72:	9a01      	ldr	r2, [sp, #4]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b930      	cbnz	r0, 800ac86 <_calloc_r+0x24>
 800ac78:	4628      	mov	r0, r5
 800ac7a:	b003      	add	sp, #12
 800ac7c:	bd30      	pop	{r4, r5, pc}
 800ac7e:	220c      	movs	r2, #12
 800ac80:	6002      	str	r2, [r0, #0]
 800ac82:	2500      	movs	r5, #0
 800ac84:	e7f8      	b.n	800ac78 <_calloc_r+0x16>
 800ac86:	4621      	mov	r1, r4
 800ac88:	f7fc fd72 	bl	8007770 <memset>
 800ac8c:	e7f4      	b.n	800ac78 <_calloc_r+0x16>
	...

0800ac90 <_free_r>:
 800ac90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac92:	2900      	cmp	r1, #0
 800ac94:	d044      	beq.n	800ad20 <_free_r+0x90>
 800ac96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac9a:	9001      	str	r0, [sp, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f1a1 0404 	sub.w	r4, r1, #4
 800aca2:	bfb8      	it	lt
 800aca4:	18e4      	addlt	r4, r4, r3
 800aca6:	f000 fab9 	bl	800b21c <__malloc_lock>
 800acaa:	4a1e      	ldr	r2, [pc, #120]	; (800ad24 <_free_r+0x94>)
 800acac:	9801      	ldr	r0, [sp, #4]
 800acae:	6813      	ldr	r3, [r2, #0]
 800acb0:	b933      	cbnz	r3, 800acc0 <_free_r+0x30>
 800acb2:	6063      	str	r3, [r4, #4]
 800acb4:	6014      	str	r4, [r2, #0]
 800acb6:	b003      	add	sp, #12
 800acb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acbc:	f000 bab4 	b.w	800b228 <__malloc_unlock>
 800acc0:	42a3      	cmp	r3, r4
 800acc2:	d908      	bls.n	800acd6 <_free_r+0x46>
 800acc4:	6825      	ldr	r5, [r4, #0]
 800acc6:	1961      	adds	r1, r4, r5
 800acc8:	428b      	cmp	r3, r1
 800acca:	bf01      	itttt	eq
 800accc:	6819      	ldreq	r1, [r3, #0]
 800acce:	685b      	ldreq	r3, [r3, #4]
 800acd0:	1949      	addeq	r1, r1, r5
 800acd2:	6021      	streq	r1, [r4, #0]
 800acd4:	e7ed      	b.n	800acb2 <_free_r+0x22>
 800acd6:	461a      	mov	r2, r3
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	b10b      	cbz	r3, 800ace0 <_free_r+0x50>
 800acdc:	42a3      	cmp	r3, r4
 800acde:	d9fa      	bls.n	800acd6 <_free_r+0x46>
 800ace0:	6811      	ldr	r1, [r2, #0]
 800ace2:	1855      	adds	r5, r2, r1
 800ace4:	42a5      	cmp	r5, r4
 800ace6:	d10b      	bne.n	800ad00 <_free_r+0x70>
 800ace8:	6824      	ldr	r4, [r4, #0]
 800acea:	4421      	add	r1, r4
 800acec:	1854      	adds	r4, r2, r1
 800acee:	42a3      	cmp	r3, r4
 800acf0:	6011      	str	r1, [r2, #0]
 800acf2:	d1e0      	bne.n	800acb6 <_free_r+0x26>
 800acf4:	681c      	ldr	r4, [r3, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	6053      	str	r3, [r2, #4]
 800acfa:	4421      	add	r1, r4
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	e7da      	b.n	800acb6 <_free_r+0x26>
 800ad00:	d902      	bls.n	800ad08 <_free_r+0x78>
 800ad02:	230c      	movs	r3, #12
 800ad04:	6003      	str	r3, [r0, #0]
 800ad06:	e7d6      	b.n	800acb6 <_free_r+0x26>
 800ad08:	6825      	ldr	r5, [r4, #0]
 800ad0a:	1961      	adds	r1, r4, r5
 800ad0c:	428b      	cmp	r3, r1
 800ad0e:	bf04      	itt	eq
 800ad10:	6819      	ldreq	r1, [r3, #0]
 800ad12:	685b      	ldreq	r3, [r3, #4]
 800ad14:	6063      	str	r3, [r4, #4]
 800ad16:	bf04      	itt	eq
 800ad18:	1949      	addeq	r1, r1, r5
 800ad1a:	6021      	streq	r1, [r4, #0]
 800ad1c:	6054      	str	r4, [r2, #4]
 800ad1e:	e7ca      	b.n	800acb6 <_free_r+0x26>
 800ad20:	b003      	add	sp, #12
 800ad22:	bd30      	pop	{r4, r5, pc}
 800ad24:	2000134c 	.word	0x2000134c

0800ad28 <sbrk_aligned>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	4e0e      	ldr	r6, [pc, #56]	; (800ad64 <sbrk_aligned+0x3c>)
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	6831      	ldr	r1, [r6, #0]
 800ad30:	4605      	mov	r5, r0
 800ad32:	b911      	cbnz	r1, 800ad3a <sbrk_aligned+0x12>
 800ad34:	f000 f9f0 	bl	800b118 <_sbrk_r>
 800ad38:	6030      	str	r0, [r6, #0]
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f000 f9eb 	bl	800b118 <_sbrk_r>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	d00a      	beq.n	800ad5c <sbrk_aligned+0x34>
 800ad46:	1cc4      	adds	r4, r0, #3
 800ad48:	f024 0403 	bic.w	r4, r4, #3
 800ad4c:	42a0      	cmp	r0, r4
 800ad4e:	d007      	beq.n	800ad60 <sbrk_aligned+0x38>
 800ad50:	1a21      	subs	r1, r4, r0
 800ad52:	4628      	mov	r0, r5
 800ad54:	f000 f9e0 	bl	800b118 <_sbrk_r>
 800ad58:	3001      	adds	r0, #1
 800ad5a:	d101      	bne.n	800ad60 <sbrk_aligned+0x38>
 800ad5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ad60:	4620      	mov	r0, r4
 800ad62:	bd70      	pop	{r4, r5, r6, pc}
 800ad64:	20001350 	.word	0x20001350

0800ad68 <_malloc_r>:
 800ad68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6c:	1ccd      	adds	r5, r1, #3
 800ad6e:	f025 0503 	bic.w	r5, r5, #3
 800ad72:	3508      	adds	r5, #8
 800ad74:	2d0c      	cmp	r5, #12
 800ad76:	bf38      	it	cc
 800ad78:	250c      	movcc	r5, #12
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	db01      	blt.n	800ad84 <_malloc_r+0x1c>
 800ad80:	42a9      	cmp	r1, r5
 800ad82:	d905      	bls.n	800ad90 <_malloc_r+0x28>
 800ad84:	230c      	movs	r3, #12
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	2600      	movs	r6, #0
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad90:	4e2e      	ldr	r6, [pc, #184]	; (800ae4c <_malloc_r+0xe4>)
 800ad92:	f000 fa43 	bl	800b21c <__malloc_lock>
 800ad96:	6833      	ldr	r3, [r6, #0]
 800ad98:	461c      	mov	r4, r3
 800ad9a:	bb34      	cbnz	r4, 800adea <_malloc_r+0x82>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f7ff ffc2 	bl	800ad28 <sbrk_aligned>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	4604      	mov	r4, r0
 800ada8:	d14d      	bne.n	800ae46 <_malloc_r+0xde>
 800adaa:	6834      	ldr	r4, [r6, #0]
 800adac:	4626      	mov	r6, r4
 800adae:	2e00      	cmp	r6, #0
 800adb0:	d140      	bne.n	800ae34 <_malloc_r+0xcc>
 800adb2:	6823      	ldr	r3, [r4, #0]
 800adb4:	4631      	mov	r1, r6
 800adb6:	4638      	mov	r0, r7
 800adb8:	eb04 0803 	add.w	r8, r4, r3
 800adbc:	f000 f9ac 	bl	800b118 <_sbrk_r>
 800adc0:	4580      	cmp	r8, r0
 800adc2:	d13a      	bne.n	800ae3a <_malloc_r+0xd2>
 800adc4:	6821      	ldr	r1, [r4, #0]
 800adc6:	3503      	adds	r5, #3
 800adc8:	1a6d      	subs	r5, r5, r1
 800adca:	f025 0503 	bic.w	r5, r5, #3
 800adce:	3508      	adds	r5, #8
 800add0:	2d0c      	cmp	r5, #12
 800add2:	bf38      	it	cc
 800add4:	250c      	movcc	r5, #12
 800add6:	4629      	mov	r1, r5
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff ffa5 	bl	800ad28 <sbrk_aligned>
 800adde:	3001      	adds	r0, #1
 800ade0:	d02b      	beq.n	800ae3a <_malloc_r+0xd2>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	442b      	add	r3, r5
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	e00e      	b.n	800ae08 <_malloc_r+0xa0>
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	1b52      	subs	r2, r2, r5
 800adee:	d41e      	bmi.n	800ae2e <_malloc_r+0xc6>
 800adf0:	2a0b      	cmp	r2, #11
 800adf2:	d916      	bls.n	800ae22 <_malloc_r+0xba>
 800adf4:	1961      	adds	r1, r4, r5
 800adf6:	42a3      	cmp	r3, r4
 800adf8:	6025      	str	r5, [r4, #0]
 800adfa:	bf18      	it	ne
 800adfc:	6059      	strne	r1, [r3, #4]
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	bf08      	it	eq
 800ae02:	6031      	streq	r1, [r6, #0]
 800ae04:	5162      	str	r2, [r4, r5]
 800ae06:	604b      	str	r3, [r1, #4]
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f104 060b 	add.w	r6, r4, #11
 800ae0e:	f000 fa0b 	bl	800b228 <__malloc_unlock>
 800ae12:	f026 0607 	bic.w	r6, r6, #7
 800ae16:	1d23      	adds	r3, r4, #4
 800ae18:	1af2      	subs	r2, r6, r3
 800ae1a:	d0b6      	beq.n	800ad8a <_malloc_r+0x22>
 800ae1c:	1b9b      	subs	r3, r3, r6
 800ae1e:	50a3      	str	r3, [r4, r2]
 800ae20:	e7b3      	b.n	800ad8a <_malloc_r+0x22>
 800ae22:	6862      	ldr	r2, [r4, #4]
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	bf0c      	ite	eq
 800ae28:	6032      	streq	r2, [r6, #0]
 800ae2a:	605a      	strne	r2, [r3, #4]
 800ae2c:	e7ec      	b.n	800ae08 <_malloc_r+0xa0>
 800ae2e:	4623      	mov	r3, r4
 800ae30:	6864      	ldr	r4, [r4, #4]
 800ae32:	e7b2      	b.n	800ad9a <_malloc_r+0x32>
 800ae34:	4634      	mov	r4, r6
 800ae36:	6876      	ldr	r6, [r6, #4]
 800ae38:	e7b9      	b.n	800adae <_malloc_r+0x46>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	603b      	str	r3, [r7, #0]
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f000 f9f2 	bl	800b228 <__malloc_unlock>
 800ae44:	e7a1      	b.n	800ad8a <_malloc_r+0x22>
 800ae46:	6025      	str	r5, [r4, #0]
 800ae48:	e7de      	b.n	800ae08 <_malloc_r+0xa0>
 800ae4a:	bf00      	nop
 800ae4c:	2000134c 	.word	0x2000134c

0800ae50 <__ssputs_r>:
 800ae50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae54:	688e      	ldr	r6, [r1, #8]
 800ae56:	429e      	cmp	r6, r3
 800ae58:	4682      	mov	sl, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	4690      	mov	r8, r2
 800ae5e:	461f      	mov	r7, r3
 800ae60:	d838      	bhi.n	800aed4 <__ssputs_r+0x84>
 800ae62:	898a      	ldrh	r2, [r1, #12]
 800ae64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae68:	d032      	beq.n	800aed0 <__ssputs_r+0x80>
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	6909      	ldr	r1, [r1, #16]
 800ae6e:	eba5 0901 	sub.w	r9, r5, r1
 800ae72:	6965      	ldr	r5, [r4, #20]
 800ae74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	444b      	add	r3, r9
 800ae80:	106d      	asrs	r5, r5, #1
 800ae82:	429d      	cmp	r5, r3
 800ae84:	bf38      	it	cc
 800ae86:	461d      	movcc	r5, r3
 800ae88:	0553      	lsls	r3, r2, #21
 800ae8a:	d531      	bpl.n	800aef0 <__ssputs_r+0xa0>
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f7ff ff6b 	bl	800ad68 <_malloc_r>
 800ae92:	4606      	mov	r6, r0
 800ae94:	b950      	cbnz	r0, 800aeac <__ssputs_r+0x5c>
 800ae96:	230c      	movs	r3, #12
 800ae98:	f8ca 3000 	str.w	r3, [sl]
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea2:	81a3      	strh	r3, [r4, #12]
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeac:	6921      	ldr	r1, [r4, #16]
 800aeae:	464a      	mov	r2, r9
 800aeb0:	f7fc fc50 	bl	8007754 <memcpy>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	6126      	str	r6, [r4, #16]
 800aec2:	6165      	str	r5, [r4, #20]
 800aec4:	444e      	add	r6, r9
 800aec6:	eba5 0509 	sub.w	r5, r5, r9
 800aeca:	6026      	str	r6, [r4, #0]
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	463e      	mov	r6, r7
 800aed0:	42be      	cmp	r6, r7
 800aed2:	d900      	bls.n	800aed6 <__ssputs_r+0x86>
 800aed4:	463e      	mov	r6, r7
 800aed6:	6820      	ldr	r0, [r4, #0]
 800aed8:	4632      	mov	r2, r6
 800aeda:	4641      	mov	r1, r8
 800aedc:	f000 f984 	bl	800b1e8 <memmove>
 800aee0:	68a3      	ldr	r3, [r4, #8]
 800aee2:	1b9b      	subs	r3, r3, r6
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	4433      	add	r3, r6
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	2000      	movs	r0, #0
 800aeee:	e7db      	b.n	800aea8 <__ssputs_r+0x58>
 800aef0:	462a      	mov	r2, r5
 800aef2:	f000 f99f 	bl	800b234 <_realloc_r>
 800aef6:	4606      	mov	r6, r0
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1e1      	bne.n	800aec0 <__ssputs_r+0x70>
 800aefc:	6921      	ldr	r1, [r4, #16]
 800aefe:	4650      	mov	r0, sl
 800af00:	f7ff fec6 	bl	800ac90 <_free_r>
 800af04:	e7c7      	b.n	800ae96 <__ssputs_r+0x46>
	...

0800af08 <_svfiprintf_r>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	4698      	mov	r8, r3
 800af0e:	898b      	ldrh	r3, [r1, #12]
 800af10:	061b      	lsls	r3, r3, #24
 800af12:	b09d      	sub	sp, #116	; 0x74
 800af14:	4607      	mov	r7, r0
 800af16:	460d      	mov	r5, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	d50e      	bpl.n	800af3a <_svfiprintf_r+0x32>
 800af1c:	690b      	ldr	r3, [r1, #16]
 800af1e:	b963      	cbnz	r3, 800af3a <_svfiprintf_r+0x32>
 800af20:	2140      	movs	r1, #64	; 0x40
 800af22:	f7ff ff21 	bl	800ad68 <_malloc_r>
 800af26:	6028      	str	r0, [r5, #0]
 800af28:	6128      	str	r0, [r5, #16]
 800af2a:	b920      	cbnz	r0, 800af36 <_svfiprintf_r+0x2e>
 800af2c:	230c      	movs	r3, #12
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	e0d1      	b.n	800b0da <_svfiprintf_r+0x1d2>
 800af36:	2340      	movs	r3, #64	; 0x40
 800af38:	616b      	str	r3, [r5, #20]
 800af3a:	2300      	movs	r3, #0
 800af3c:	9309      	str	r3, [sp, #36]	; 0x24
 800af3e:	2320      	movs	r3, #32
 800af40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af44:	f8cd 800c 	str.w	r8, [sp, #12]
 800af48:	2330      	movs	r3, #48	; 0x30
 800af4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0f4 <_svfiprintf_r+0x1ec>
 800af4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af52:	f04f 0901 	mov.w	r9, #1
 800af56:	4623      	mov	r3, r4
 800af58:	469a      	mov	sl, r3
 800af5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5e:	b10a      	cbz	r2, 800af64 <_svfiprintf_r+0x5c>
 800af60:	2a25      	cmp	r2, #37	; 0x25
 800af62:	d1f9      	bne.n	800af58 <_svfiprintf_r+0x50>
 800af64:	ebba 0b04 	subs.w	fp, sl, r4
 800af68:	d00b      	beq.n	800af82 <_svfiprintf_r+0x7a>
 800af6a:	465b      	mov	r3, fp
 800af6c:	4622      	mov	r2, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	4638      	mov	r0, r7
 800af72:	f7ff ff6d 	bl	800ae50 <__ssputs_r>
 800af76:	3001      	adds	r0, #1
 800af78:	f000 80aa 	beq.w	800b0d0 <_svfiprintf_r+0x1c8>
 800af7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af7e:	445a      	add	r2, fp
 800af80:	9209      	str	r2, [sp, #36]	; 0x24
 800af82:	f89a 3000 	ldrb.w	r3, [sl]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 80a2 	beq.w	800b0d0 <_svfiprintf_r+0x1c8>
 800af8c:	2300      	movs	r3, #0
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295
 800af92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af96:	f10a 0a01 	add.w	sl, sl, #1
 800af9a:	9304      	str	r3, [sp, #16]
 800af9c:	9307      	str	r3, [sp, #28]
 800af9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afa2:	931a      	str	r3, [sp, #104]	; 0x68
 800afa4:	4654      	mov	r4, sl
 800afa6:	2205      	movs	r2, #5
 800afa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afac:	4851      	ldr	r0, [pc, #324]	; (800b0f4 <_svfiprintf_r+0x1ec>)
 800afae:	f7f5 fa7f 	bl	80004b0 <memchr>
 800afb2:	9a04      	ldr	r2, [sp, #16]
 800afb4:	b9d8      	cbnz	r0, 800afee <_svfiprintf_r+0xe6>
 800afb6:	06d0      	lsls	r0, r2, #27
 800afb8:	bf44      	itt	mi
 800afba:	2320      	movmi	r3, #32
 800afbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc0:	0711      	lsls	r1, r2, #28
 800afc2:	bf44      	itt	mi
 800afc4:	232b      	movmi	r3, #43	; 0x2b
 800afc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afca:	f89a 3000 	ldrb.w	r3, [sl]
 800afce:	2b2a      	cmp	r3, #42	; 0x2a
 800afd0:	d015      	beq.n	800affe <_svfiprintf_r+0xf6>
 800afd2:	9a07      	ldr	r2, [sp, #28]
 800afd4:	4654      	mov	r4, sl
 800afd6:	2000      	movs	r0, #0
 800afd8:	f04f 0c0a 	mov.w	ip, #10
 800afdc:	4621      	mov	r1, r4
 800afde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe2:	3b30      	subs	r3, #48	; 0x30
 800afe4:	2b09      	cmp	r3, #9
 800afe6:	d94e      	bls.n	800b086 <_svfiprintf_r+0x17e>
 800afe8:	b1b0      	cbz	r0, 800b018 <_svfiprintf_r+0x110>
 800afea:	9207      	str	r2, [sp, #28]
 800afec:	e014      	b.n	800b018 <_svfiprintf_r+0x110>
 800afee:	eba0 0308 	sub.w	r3, r0, r8
 800aff2:	fa09 f303 	lsl.w	r3, r9, r3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	9304      	str	r3, [sp, #16]
 800affa:	46a2      	mov	sl, r4
 800affc:	e7d2      	b.n	800afa4 <_svfiprintf_r+0x9c>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	1d19      	adds	r1, r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	9103      	str	r1, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfbb      	ittet	lt
 800b00a:	425b      	neglt	r3, r3
 800b00c:	f042 0202 	orrlt.w	r2, r2, #2
 800b010:	9307      	strge	r3, [sp, #28]
 800b012:	9307      	strlt	r3, [sp, #28]
 800b014:	bfb8      	it	lt
 800b016:	9204      	strlt	r2, [sp, #16]
 800b018:	7823      	ldrb	r3, [r4, #0]
 800b01a:	2b2e      	cmp	r3, #46	; 0x2e
 800b01c:	d10c      	bne.n	800b038 <_svfiprintf_r+0x130>
 800b01e:	7863      	ldrb	r3, [r4, #1]
 800b020:	2b2a      	cmp	r3, #42	; 0x2a
 800b022:	d135      	bne.n	800b090 <_svfiprintf_r+0x188>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	1d1a      	adds	r2, r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	9203      	str	r2, [sp, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bfb8      	it	lt
 800b030:	f04f 33ff 	movlt.w	r3, #4294967295
 800b034:	3402      	adds	r4, #2
 800b036:	9305      	str	r3, [sp, #20]
 800b038:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b104 <_svfiprintf_r+0x1fc>
 800b03c:	7821      	ldrb	r1, [r4, #0]
 800b03e:	2203      	movs	r2, #3
 800b040:	4650      	mov	r0, sl
 800b042:	f7f5 fa35 	bl	80004b0 <memchr>
 800b046:	b140      	cbz	r0, 800b05a <_svfiprintf_r+0x152>
 800b048:	2340      	movs	r3, #64	; 0x40
 800b04a:	eba0 000a 	sub.w	r0, r0, sl
 800b04e:	fa03 f000 	lsl.w	r0, r3, r0
 800b052:	9b04      	ldr	r3, [sp, #16]
 800b054:	4303      	orrs	r3, r0
 800b056:	3401      	adds	r4, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b05e:	4826      	ldr	r0, [pc, #152]	; (800b0f8 <_svfiprintf_r+0x1f0>)
 800b060:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b064:	2206      	movs	r2, #6
 800b066:	f7f5 fa23 	bl	80004b0 <memchr>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d038      	beq.n	800b0e0 <_svfiprintf_r+0x1d8>
 800b06e:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <_svfiprintf_r+0x1f4>)
 800b070:	bb1b      	cbnz	r3, 800b0ba <_svfiprintf_r+0x1b2>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	3307      	adds	r3, #7
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	3308      	adds	r3, #8
 800b07c:	9303      	str	r3, [sp, #12]
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	4433      	add	r3, r6
 800b082:	9309      	str	r3, [sp, #36]	; 0x24
 800b084:	e767      	b.n	800af56 <_svfiprintf_r+0x4e>
 800b086:	fb0c 3202 	mla	r2, ip, r2, r3
 800b08a:	460c      	mov	r4, r1
 800b08c:	2001      	movs	r0, #1
 800b08e:	e7a5      	b.n	800afdc <_svfiprintf_r+0xd4>
 800b090:	2300      	movs	r3, #0
 800b092:	3401      	adds	r4, #1
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	4619      	mov	r1, r3
 800b098:	f04f 0c0a 	mov.w	ip, #10
 800b09c:	4620      	mov	r0, r4
 800b09e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0a2:	3a30      	subs	r2, #48	; 0x30
 800b0a4:	2a09      	cmp	r2, #9
 800b0a6:	d903      	bls.n	800b0b0 <_svfiprintf_r+0x1a8>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0c5      	beq.n	800b038 <_svfiprintf_r+0x130>
 800b0ac:	9105      	str	r1, [sp, #20]
 800b0ae:	e7c3      	b.n	800b038 <_svfiprintf_r+0x130>
 800b0b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e7f0      	b.n	800b09c <_svfiprintf_r+0x194>
 800b0ba:	ab03      	add	r3, sp, #12
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <_svfiprintf_r+0x1f8>)
 800b0c2:	a904      	add	r1, sp, #16
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7fc fbfb 	bl	80078c0 <_printf_float>
 800b0ca:	1c42      	adds	r2, r0, #1
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	d1d6      	bne.n	800b07e <_svfiprintf_r+0x176>
 800b0d0:	89ab      	ldrh	r3, [r5, #12]
 800b0d2:	065b      	lsls	r3, r3, #25
 800b0d4:	f53f af2c 	bmi.w	800af30 <_svfiprintf_r+0x28>
 800b0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0da:	b01d      	add	sp, #116	; 0x74
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	ab03      	add	r3, sp, #12
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <_svfiprintf_r+0x1f8>)
 800b0e8:	a904      	add	r1, sp, #16
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	f7fc fe8c 	bl	8007e08 <_printf_i>
 800b0f0:	e7eb      	b.n	800b0ca <_svfiprintf_r+0x1c2>
 800b0f2:	bf00      	nop
 800b0f4:	0800c44c 	.word	0x0800c44c
 800b0f8:	0800c456 	.word	0x0800c456
 800b0fc:	080078c1 	.word	0x080078c1
 800b100:	0800ae51 	.word	0x0800ae51
 800b104:	0800c452 	.word	0x0800c452

0800b108 <nan>:
 800b108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b110 <nan+0x8>
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	00000000 	.word	0x00000000
 800b114:	7ff80000 	.word	0x7ff80000

0800b118 <_sbrk_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d06      	ldr	r5, [pc, #24]	; (800b134 <_sbrk_r+0x1c>)
 800b11c:	2300      	movs	r3, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	f7f6 fdc4 	bl	8001cb0 <_sbrk>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_sbrk_r+0x1a>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_sbrk_r+0x1a>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	20001354 	.word	0x20001354

0800b138 <nanf>:
 800b138:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b140 <nanf+0x8>
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	7fc00000 	.word	0x7fc00000

0800b144 <strncmp>:
 800b144:	b510      	push	{r4, lr}
 800b146:	b17a      	cbz	r2, 800b168 <strncmp+0x24>
 800b148:	4603      	mov	r3, r0
 800b14a:	3901      	subs	r1, #1
 800b14c:	1884      	adds	r4, r0, r2
 800b14e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b152:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b156:	4290      	cmp	r0, r2
 800b158:	d101      	bne.n	800b15e <strncmp+0x1a>
 800b15a:	42a3      	cmp	r3, r4
 800b15c:	d101      	bne.n	800b162 <strncmp+0x1e>
 800b15e:	1a80      	subs	r0, r0, r2
 800b160:	bd10      	pop	{r4, pc}
 800b162:	2800      	cmp	r0, #0
 800b164:	d1f3      	bne.n	800b14e <strncmp+0xa>
 800b166:	e7fa      	b.n	800b15e <strncmp+0x1a>
 800b168:	4610      	mov	r0, r2
 800b16a:	e7f9      	b.n	800b160 <strncmp+0x1c>

0800b16c <__ascii_wctomb>:
 800b16c:	b149      	cbz	r1, 800b182 <__ascii_wctomb+0x16>
 800b16e:	2aff      	cmp	r2, #255	; 0xff
 800b170:	bf85      	ittet	hi
 800b172:	238a      	movhi	r3, #138	; 0x8a
 800b174:	6003      	strhi	r3, [r0, #0]
 800b176:	700a      	strbls	r2, [r1, #0]
 800b178:	f04f 30ff 	movhi.w	r0, #4294967295
 800b17c:	bf98      	it	ls
 800b17e:	2001      	movls	r0, #1
 800b180:	4770      	bx	lr
 800b182:	4608      	mov	r0, r1
 800b184:	4770      	bx	lr
	...

0800b188 <__assert_func>:
 800b188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b18a:	4614      	mov	r4, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <__assert_func+0x2c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4605      	mov	r5, r0
 800b194:	68d8      	ldr	r0, [r3, #12]
 800b196:	b14c      	cbz	r4, 800b1ac <__assert_func+0x24>
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <__assert_func+0x30>)
 800b19a:	9100      	str	r1, [sp, #0]
 800b19c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1a0:	4906      	ldr	r1, [pc, #24]	; (800b1bc <__assert_func+0x34>)
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f000 f80e 	bl	800b1c4 <fiprintf>
 800b1a8:	f000 fa8c 	bl	800b6c4 <abort>
 800b1ac:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <__assert_func+0x38>)
 800b1ae:	461c      	mov	r4, r3
 800b1b0:	e7f3      	b.n	800b19a <__assert_func+0x12>
 800b1b2:	bf00      	nop
 800b1b4:	20000278 	.word	0x20000278
 800b1b8:	0800c45d 	.word	0x0800c45d
 800b1bc:	0800c46a 	.word	0x0800c46a
 800b1c0:	0800c498 	.word	0x0800c498

0800b1c4 <fiprintf>:
 800b1c4:	b40e      	push	{r1, r2, r3}
 800b1c6:	b503      	push	{r0, r1, lr}
 800b1c8:	4601      	mov	r1, r0
 800b1ca:	ab03      	add	r3, sp, #12
 800b1cc:	4805      	ldr	r0, [pc, #20]	; (800b1e4 <fiprintf+0x20>)
 800b1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d2:	6800      	ldr	r0, [r0, #0]
 800b1d4:	9301      	str	r3, [sp, #4]
 800b1d6:	f000 f885 	bl	800b2e4 <_vfiprintf_r>
 800b1da:	b002      	add	sp, #8
 800b1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1e0:	b003      	add	sp, #12
 800b1e2:	4770      	bx	lr
 800b1e4:	20000278 	.word	0x20000278

0800b1e8 <memmove>:
 800b1e8:	4288      	cmp	r0, r1
 800b1ea:	b510      	push	{r4, lr}
 800b1ec:	eb01 0402 	add.w	r4, r1, r2
 800b1f0:	d902      	bls.n	800b1f8 <memmove+0x10>
 800b1f2:	4284      	cmp	r4, r0
 800b1f4:	4623      	mov	r3, r4
 800b1f6:	d807      	bhi.n	800b208 <memmove+0x20>
 800b1f8:	1e43      	subs	r3, r0, #1
 800b1fa:	42a1      	cmp	r1, r4
 800b1fc:	d008      	beq.n	800b210 <memmove+0x28>
 800b1fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b202:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b206:	e7f8      	b.n	800b1fa <memmove+0x12>
 800b208:	4402      	add	r2, r0
 800b20a:	4601      	mov	r1, r0
 800b20c:	428a      	cmp	r2, r1
 800b20e:	d100      	bne.n	800b212 <memmove+0x2a>
 800b210:	bd10      	pop	{r4, pc}
 800b212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b21a:	e7f7      	b.n	800b20c <memmove+0x24>

0800b21c <__malloc_lock>:
 800b21c:	4801      	ldr	r0, [pc, #4]	; (800b224 <__malloc_lock+0x8>)
 800b21e:	f000 bc11 	b.w	800ba44 <__retarget_lock_acquire_recursive>
 800b222:	bf00      	nop
 800b224:	20001358 	.word	0x20001358

0800b228 <__malloc_unlock>:
 800b228:	4801      	ldr	r0, [pc, #4]	; (800b230 <__malloc_unlock+0x8>)
 800b22a:	f000 bc0c 	b.w	800ba46 <__retarget_lock_release_recursive>
 800b22e:	bf00      	nop
 800b230:	20001358 	.word	0x20001358

0800b234 <_realloc_r>:
 800b234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b238:	4680      	mov	r8, r0
 800b23a:	4614      	mov	r4, r2
 800b23c:	460e      	mov	r6, r1
 800b23e:	b921      	cbnz	r1, 800b24a <_realloc_r+0x16>
 800b240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	4611      	mov	r1, r2
 800b246:	f7ff bd8f 	b.w	800ad68 <_malloc_r>
 800b24a:	b92a      	cbnz	r2, 800b258 <_realloc_r+0x24>
 800b24c:	f7ff fd20 	bl	800ac90 <_free_r>
 800b250:	4625      	mov	r5, r4
 800b252:	4628      	mov	r0, r5
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	f000 fc5c 	bl	800bb14 <_malloc_usable_size_r>
 800b25c:	4284      	cmp	r4, r0
 800b25e:	4607      	mov	r7, r0
 800b260:	d802      	bhi.n	800b268 <_realloc_r+0x34>
 800b262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b266:	d812      	bhi.n	800b28e <_realloc_r+0x5a>
 800b268:	4621      	mov	r1, r4
 800b26a:	4640      	mov	r0, r8
 800b26c:	f7ff fd7c 	bl	800ad68 <_malloc_r>
 800b270:	4605      	mov	r5, r0
 800b272:	2800      	cmp	r0, #0
 800b274:	d0ed      	beq.n	800b252 <_realloc_r+0x1e>
 800b276:	42bc      	cmp	r4, r7
 800b278:	4622      	mov	r2, r4
 800b27a:	4631      	mov	r1, r6
 800b27c:	bf28      	it	cs
 800b27e:	463a      	movcs	r2, r7
 800b280:	f7fc fa68 	bl	8007754 <memcpy>
 800b284:	4631      	mov	r1, r6
 800b286:	4640      	mov	r0, r8
 800b288:	f7ff fd02 	bl	800ac90 <_free_r>
 800b28c:	e7e1      	b.n	800b252 <_realloc_r+0x1e>
 800b28e:	4635      	mov	r5, r6
 800b290:	e7df      	b.n	800b252 <_realloc_r+0x1e>

0800b292 <__sfputc_r>:
 800b292:	6893      	ldr	r3, [r2, #8]
 800b294:	3b01      	subs	r3, #1
 800b296:	2b00      	cmp	r3, #0
 800b298:	b410      	push	{r4}
 800b29a:	6093      	str	r3, [r2, #8]
 800b29c:	da08      	bge.n	800b2b0 <__sfputc_r+0x1e>
 800b29e:	6994      	ldr	r4, [r2, #24]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	db01      	blt.n	800b2a8 <__sfputc_r+0x16>
 800b2a4:	290a      	cmp	r1, #10
 800b2a6:	d103      	bne.n	800b2b0 <__sfputc_r+0x1e>
 800b2a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2ac:	f000 b94a 	b.w	800b544 <__swbuf_r>
 800b2b0:	6813      	ldr	r3, [r2, #0]
 800b2b2:	1c58      	adds	r0, r3, #1
 800b2b4:	6010      	str	r0, [r2, #0]
 800b2b6:	7019      	strb	r1, [r3, #0]
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <__sfputs_r>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	460f      	mov	r7, r1
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	18d5      	adds	r5, r2, r3
 800b2ca:	42ac      	cmp	r4, r5
 800b2cc:	d101      	bne.n	800b2d2 <__sfputs_r+0x12>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	e007      	b.n	800b2e2 <__sfputs_r+0x22>
 800b2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7ff ffda 	bl	800b292 <__sfputc_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d1f3      	bne.n	800b2ca <__sfputs_r+0xa>
 800b2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2e4 <_vfiprintf_r>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	b09d      	sub	sp, #116	; 0x74
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	4698      	mov	r8, r3
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	b118      	cbz	r0, 800b2fc <_vfiprintf_r+0x18>
 800b2f4:	6983      	ldr	r3, [r0, #24]
 800b2f6:	b90b      	cbnz	r3, 800b2fc <_vfiprintf_r+0x18>
 800b2f8:	f000 fb06 	bl	800b908 <__sinit>
 800b2fc:	4b89      	ldr	r3, [pc, #548]	; (800b524 <_vfiprintf_r+0x240>)
 800b2fe:	429d      	cmp	r5, r3
 800b300:	d11b      	bne.n	800b33a <_vfiprintf_r+0x56>
 800b302:	6875      	ldr	r5, [r6, #4]
 800b304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b306:	07d9      	lsls	r1, r3, #31
 800b308:	d405      	bmi.n	800b316 <_vfiprintf_r+0x32>
 800b30a:	89ab      	ldrh	r3, [r5, #12]
 800b30c:	059a      	lsls	r2, r3, #22
 800b30e:	d402      	bmi.n	800b316 <_vfiprintf_r+0x32>
 800b310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b312:	f000 fb97 	bl	800ba44 <__retarget_lock_acquire_recursive>
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	071b      	lsls	r3, r3, #28
 800b31a:	d501      	bpl.n	800b320 <_vfiprintf_r+0x3c>
 800b31c:	692b      	ldr	r3, [r5, #16]
 800b31e:	b9eb      	cbnz	r3, 800b35c <_vfiprintf_r+0x78>
 800b320:	4629      	mov	r1, r5
 800b322:	4630      	mov	r0, r6
 800b324:	f000 f960 	bl	800b5e8 <__swsetup_r>
 800b328:	b1c0      	cbz	r0, 800b35c <_vfiprintf_r+0x78>
 800b32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b32c:	07dc      	lsls	r4, r3, #31
 800b32e:	d50e      	bpl.n	800b34e <_vfiprintf_r+0x6a>
 800b330:	f04f 30ff 	mov.w	r0, #4294967295
 800b334:	b01d      	add	sp, #116	; 0x74
 800b336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33a:	4b7b      	ldr	r3, [pc, #492]	; (800b528 <_vfiprintf_r+0x244>)
 800b33c:	429d      	cmp	r5, r3
 800b33e:	d101      	bne.n	800b344 <_vfiprintf_r+0x60>
 800b340:	68b5      	ldr	r5, [r6, #8]
 800b342:	e7df      	b.n	800b304 <_vfiprintf_r+0x20>
 800b344:	4b79      	ldr	r3, [pc, #484]	; (800b52c <_vfiprintf_r+0x248>)
 800b346:	429d      	cmp	r5, r3
 800b348:	bf08      	it	eq
 800b34a:	68f5      	ldreq	r5, [r6, #12]
 800b34c:	e7da      	b.n	800b304 <_vfiprintf_r+0x20>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	0598      	lsls	r0, r3, #22
 800b352:	d4ed      	bmi.n	800b330 <_vfiprintf_r+0x4c>
 800b354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b356:	f000 fb76 	bl	800ba46 <__retarget_lock_release_recursive>
 800b35a:	e7e9      	b.n	800b330 <_vfiprintf_r+0x4c>
 800b35c:	2300      	movs	r3, #0
 800b35e:	9309      	str	r3, [sp, #36]	; 0x24
 800b360:	2320      	movs	r3, #32
 800b362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b366:	f8cd 800c 	str.w	r8, [sp, #12]
 800b36a:	2330      	movs	r3, #48	; 0x30
 800b36c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b530 <_vfiprintf_r+0x24c>
 800b370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b374:	f04f 0901 	mov.w	r9, #1
 800b378:	4623      	mov	r3, r4
 800b37a:	469a      	mov	sl, r3
 800b37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b380:	b10a      	cbz	r2, 800b386 <_vfiprintf_r+0xa2>
 800b382:	2a25      	cmp	r2, #37	; 0x25
 800b384:	d1f9      	bne.n	800b37a <_vfiprintf_r+0x96>
 800b386:	ebba 0b04 	subs.w	fp, sl, r4
 800b38a:	d00b      	beq.n	800b3a4 <_vfiprintf_r+0xc0>
 800b38c:	465b      	mov	r3, fp
 800b38e:	4622      	mov	r2, r4
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ff94 	bl	800b2c0 <__sfputs_r>
 800b398:	3001      	adds	r0, #1
 800b39a:	f000 80aa 	beq.w	800b4f2 <_vfiprintf_r+0x20e>
 800b39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a0:	445a      	add	r2, fp
 800b3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f000 80a2 	beq.w	800b4f2 <_vfiprintf_r+0x20e>
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b8:	f10a 0a01 	add.w	sl, sl, #1
 800b3bc:	9304      	str	r3, [sp, #16]
 800b3be:	9307      	str	r3, [sp, #28]
 800b3c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c6:	4654      	mov	r4, sl
 800b3c8:	2205      	movs	r2, #5
 800b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ce:	4858      	ldr	r0, [pc, #352]	; (800b530 <_vfiprintf_r+0x24c>)
 800b3d0:	f7f5 f86e 	bl	80004b0 <memchr>
 800b3d4:	9a04      	ldr	r2, [sp, #16]
 800b3d6:	b9d8      	cbnz	r0, 800b410 <_vfiprintf_r+0x12c>
 800b3d8:	06d1      	lsls	r1, r2, #27
 800b3da:	bf44      	itt	mi
 800b3dc:	2320      	movmi	r3, #32
 800b3de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e2:	0713      	lsls	r3, r2, #28
 800b3e4:	bf44      	itt	mi
 800b3e6:	232b      	movmi	r3, #43	; 0x2b
 800b3e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3f2:	d015      	beq.n	800b420 <_vfiprintf_r+0x13c>
 800b3f4:	9a07      	ldr	r2, [sp, #28]
 800b3f6:	4654      	mov	r4, sl
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	f04f 0c0a 	mov.w	ip, #10
 800b3fe:	4621      	mov	r1, r4
 800b400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b404:	3b30      	subs	r3, #48	; 0x30
 800b406:	2b09      	cmp	r3, #9
 800b408:	d94e      	bls.n	800b4a8 <_vfiprintf_r+0x1c4>
 800b40a:	b1b0      	cbz	r0, 800b43a <_vfiprintf_r+0x156>
 800b40c:	9207      	str	r2, [sp, #28]
 800b40e:	e014      	b.n	800b43a <_vfiprintf_r+0x156>
 800b410:	eba0 0308 	sub.w	r3, r0, r8
 800b414:	fa09 f303 	lsl.w	r3, r9, r3
 800b418:	4313      	orrs	r3, r2
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	46a2      	mov	sl, r4
 800b41e:	e7d2      	b.n	800b3c6 <_vfiprintf_r+0xe2>
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	1d19      	adds	r1, r3, #4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	9103      	str	r1, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	bfbb      	ittet	lt
 800b42c:	425b      	neglt	r3, r3
 800b42e:	f042 0202 	orrlt.w	r2, r2, #2
 800b432:	9307      	strge	r3, [sp, #28]
 800b434:	9307      	strlt	r3, [sp, #28]
 800b436:	bfb8      	it	lt
 800b438:	9204      	strlt	r2, [sp, #16]
 800b43a:	7823      	ldrb	r3, [r4, #0]
 800b43c:	2b2e      	cmp	r3, #46	; 0x2e
 800b43e:	d10c      	bne.n	800b45a <_vfiprintf_r+0x176>
 800b440:	7863      	ldrb	r3, [r4, #1]
 800b442:	2b2a      	cmp	r3, #42	; 0x2a
 800b444:	d135      	bne.n	800b4b2 <_vfiprintf_r+0x1ce>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	1d1a      	adds	r2, r3, #4
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	9203      	str	r2, [sp, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfb8      	it	lt
 800b452:	f04f 33ff 	movlt.w	r3, #4294967295
 800b456:	3402      	adds	r4, #2
 800b458:	9305      	str	r3, [sp, #20]
 800b45a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b540 <_vfiprintf_r+0x25c>
 800b45e:	7821      	ldrb	r1, [r4, #0]
 800b460:	2203      	movs	r2, #3
 800b462:	4650      	mov	r0, sl
 800b464:	f7f5 f824 	bl	80004b0 <memchr>
 800b468:	b140      	cbz	r0, 800b47c <_vfiprintf_r+0x198>
 800b46a:	2340      	movs	r3, #64	; 0x40
 800b46c:	eba0 000a 	sub.w	r0, r0, sl
 800b470:	fa03 f000 	lsl.w	r0, r3, r0
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	4303      	orrs	r3, r0
 800b478:	3401      	adds	r4, #1
 800b47a:	9304      	str	r3, [sp, #16]
 800b47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b480:	482c      	ldr	r0, [pc, #176]	; (800b534 <_vfiprintf_r+0x250>)
 800b482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b486:	2206      	movs	r2, #6
 800b488:	f7f5 f812 	bl	80004b0 <memchr>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d03f      	beq.n	800b510 <_vfiprintf_r+0x22c>
 800b490:	4b29      	ldr	r3, [pc, #164]	; (800b538 <_vfiprintf_r+0x254>)
 800b492:	bb1b      	cbnz	r3, 800b4dc <_vfiprintf_r+0x1f8>
 800b494:	9b03      	ldr	r3, [sp, #12]
 800b496:	3307      	adds	r3, #7
 800b498:	f023 0307 	bic.w	r3, r3, #7
 800b49c:	3308      	adds	r3, #8
 800b49e:	9303      	str	r3, [sp, #12]
 800b4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a2:	443b      	add	r3, r7
 800b4a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a6:	e767      	b.n	800b378 <_vfiprintf_r+0x94>
 800b4a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	e7a5      	b.n	800b3fe <_vfiprintf_r+0x11a>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	3401      	adds	r4, #1
 800b4b6:	9305      	str	r3, [sp, #20]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	f04f 0c0a 	mov.w	ip, #10
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c4:	3a30      	subs	r2, #48	; 0x30
 800b4c6:	2a09      	cmp	r2, #9
 800b4c8:	d903      	bls.n	800b4d2 <_vfiprintf_r+0x1ee>
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0c5      	beq.n	800b45a <_vfiprintf_r+0x176>
 800b4ce:	9105      	str	r1, [sp, #20]
 800b4d0:	e7c3      	b.n	800b45a <_vfiprintf_r+0x176>
 800b4d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e7f0      	b.n	800b4be <_vfiprintf_r+0x1da>
 800b4dc:	ab03      	add	r3, sp, #12
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	462a      	mov	r2, r5
 800b4e2:	4b16      	ldr	r3, [pc, #88]	; (800b53c <_vfiprintf_r+0x258>)
 800b4e4:	a904      	add	r1, sp, #16
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f7fc f9ea 	bl	80078c0 <_printf_float>
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	1c78      	adds	r0, r7, #1
 800b4f0:	d1d6      	bne.n	800b4a0 <_vfiprintf_r+0x1bc>
 800b4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4f4:	07d9      	lsls	r1, r3, #31
 800b4f6:	d405      	bmi.n	800b504 <_vfiprintf_r+0x220>
 800b4f8:	89ab      	ldrh	r3, [r5, #12]
 800b4fa:	059a      	lsls	r2, r3, #22
 800b4fc:	d402      	bmi.n	800b504 <_vfiprintf_r+0x220>
 800b4fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b500:	f000 faa1 	bl	800ba46 <__retarget_lock_release_recursive>
 800b504:	89ab      	ldrh	r3, [r5, #12]
 800b506:	065b      	lsls	r3, r3, #25
 800b508:	f53f af12 	bmi.w	800b330 <_vfiprintf_r+0x4c>
 800b50c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b50e:	e711      	b.n	800b334 <_vfiprintf_r+0x50>
 800b510:	ab03      	add	r3, sp, #12
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	462a      	mov	r2, r5
 800b516:	4b09      	ldr	r3, [pc, #36]	; (800b53c <_vfiprintf_r+0x258>)
 800b518:	a904      	add	r1, sp, #16
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7fc fc74 	bl	8007e08 <_printf_i>
 800b520:	e7e4      	b.n	800b4ec <_vfiprintf_r+0x208>
 800b522:	bf00      	nop
 800b524:	0800c4bc 	.word	0x0800c4bc
 800b528:	0800c4dc 	.word	0x0800c4dc
 800b52c:	0800c49c 	.word	0x0800c49c
 800b530:	0800c44c 	.word	0x0800c44c
 800b534:	0800c456 	.word	0x0800c456
 800b538:	080078c1 	.word	0x080078c1
 800b53c:	0800b2c1 	.word	0x0800b2c1
 800b540:	0800c452 	.word	0x0800c452

0800b544 <__swbuf_r>:
 800b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b546:	460e      	mov	r6, r1
 800b548:	4614      	mov	r4, r2
 800b54a:	4605      	mov	r5, r0
 800b54c:	b118      	cbz	r0, 800b556 <__swbuf_r+0x12>
 800b54e:	6983      	ldr	r3, [r0, #24]
 800b550:	b90b      	cbnz	r3, 800b556 <__swbuf_r+0x12>
 800b552:	f000 f9d9 	bl	800b908 <__sinit>
 800b556:	4b21      	ldr	r3, [pc, #132]	; (800b5dc <__swbuf_r+0x98>)
 800b558:	429c      	cmp	r4, r3
 800b55a:	d12b      	bne.n	800b5b4 <__swbuf_r+0x70>
 800b55c:	686c      	ldr	r4, [r5, #4]
 800b55e:	69a3      	ldr	r3, [r4, #24]
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	071a      	lsls	r2, r3, #28
 800b566:	d52f      	bpl.n	800b5c8 <__swbuf_r+0x84>
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b36b      	cbz	r3, 800b5c8 <__swbuf_r+0x84>
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	6820      	ldr	r0, [r4, #0]
 800b570:	1ac0      	subs	r0, r0, r3
 800b572:	6963      	ldr	r3, [r4, #20]
 800b574:	b2f6      	uxtb	r6, r6
 800b576:	4283      	cmp	r3, r0
 800b578:	4637      	mov	r7, r6
 800b57a:	dc04      	bgt.n	800b586 <__swbuf_r+0x42>
 800b57c:	4621      	mov	r1, r4
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 f92e 	bl	800b7e0 <_fflush_r>
 800b584:	bb30      	cbnz	r0, 800b5d4 <__swbuf_r+0x90>
 800b586:	68a3      	ldr	r3, [r4, #8]
 800b588:	3b01      	subs	r3, #1
 800b58a:	60a3      	str	r3, [r4, #8]
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	6022      	str	r2, [r4, #0]
 800b592:	701e      	strb	r6, [r3, #0]
 800b594:	6963      	ldr	r3, [r4, #20]
 800b596:	3001      	adds	r0, #1
 800b598:	4283      	cmp	r3, r0
 800b59a:	d004      	beq.n	800b5a6 <__swbuf_r+0x62>
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	07db      	lsls	r3, r3, #31
 800b5a0:	d506      	bpl.n	800b5b0 <__swbuf_r+0x6c>
 800b5a2:	2e0a      	cmp	r6, #10
 800b5a4:	d104      	bne.n	800b5b0 <__swbuf_r+0x6c>
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f000 f919 	bl	800b7e0 <_fflush_r>
 800b5ae:	b988      	cbnz	r0, 800b5d4 <__swbuf_r+0x90>
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5b4:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <__swbuf_r+0x9c>)
 800b5b6:	429c      	cmp	r4, r3
 800b5b8:	d101      	bne.n	800b5be <__swbuf_r+0x7a>
 800b5ba:	68ac      	ldr	r4, [r5, #8]
 800b5bc:	e7cf      	b.n	800b55e <__swbuf_r+0x1a>
 800b5be:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <__swbuf_r+0xa0>)
 800b5c0:	429c      	cmp	r4, r3
 800b5c2:	bf08      	it	eq
 800b5c4:	68ec      	ldreq	r4, [r5, #12]
 800b5c6:	e7ca      	b.n	800b55e <__swbuf_r+0x1a>
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f000 f80c 	bl	800b5e8 <__swsetup_r>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d0cb      	beq.n	800b56c <__swbuf_r+0x28>
 800b5d4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5d8:	e7ea      	b.n	800b5b0 <__swbuf_r+0x6c>
 800b5da:	bf00      	nop
 800b5dc:	0800c4bc 	.word	0x0800c4bc
 800b5e0:	0800c4dc 	.word	0x0800c4dc
 800b5e4:	0800c49c 	.word	0x0800c49c

0800b5e8 <__swsetup_r>:
 800b5e8:	4b32      	ldr	r3, [pc, #200]	; (800b6b4 <__swsetup_r+0xcc>)
 800b5ea:	b570      	push	{r4, r5, r6, lr}
 800b5ec:	681d      	ldr	r5, [r3, #0]
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	b125      	cbz	r5, 800b5fe <__swsetup_r+0x16>
 800b5f4:	69ab      	ldr	r3, [r5, #24]
 800b5f6:	b913      	cbnz	r3, 800b5fe <__swsetup_r+0x16>
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	f000 f985 	bl	800b908 <__sinit>
 800b5fe:	4b2e      	ldr	r3, [pc, #184]	; (800b6b8 <__swsetup_r+0xd0>)
 800b600:	429c      	cmp	r4, r3
 800b602:	d10f      	bne.n	800b624 <__swsetup_r+0x3c>
 800b604:	686c      	ldr	r4, [r5, #4]
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b60c:	0719      	lsls	r1, r3, #28
 800b60e:	d42c      	bmi.n	800b66a <__swsetup_r+0x82>
 800b610:	06dd      	lsls	r5, r3, #27
 800b612:	d411      	bmi.n	800b638 <__swsetup_r+0x50>
 800b614:	2309      	movs	r3, #9
 800b616:	6033      	str	r3, [r6, #0]
 800b618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	f04f 30ff 	mov.w	r0, #4294967295
 800b622:	e03e      	b.n	800b6a2 <__swsetup_r+0xba>
 800b624:	4b25      	ldr	r3, [pc, #148]	; (800b6bc <__swsetup_r+0xd4>)
 800b626:	429c      	cmp	r4, r3
 800b628:	d101      	bne.n	800b62e <__swsetup_r+0x46>
 800b62a:	68ac      	ldr	r4, [r5, #8]
 800b62c:	e7eb      	b.n	800b606 <__swsetup_r+0x1e>
 800b62e:	4b24      	ldr	r3, [pc, #144]	; (800b6c0 <__swsetup_r+0xd8>)
 800b630:	429c      	cmp	r4, r3
 800b632:	bf08      	it	eq
 800b634:	68ec      	ldreq	r4, [r5, #12]
 800b636:	e7e6      	b.n	800b606 <__swsetup_r+0x1e>
 800b638:	0758      	lsls	r0, r3, #29
 800b63a:	d512      	bpl.n	800b662 <__swsetup_r+0x7a>
 800b63c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b63e:	b141      	cbz	r1, 800b652 <__swsetup_r+0x6a>
 800b640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b644:	4299      	cmp	r1, r3
 800b646:	d002      	beq.n	800b64e <__swsetup_r+0x66>
 800b648:	4630      	mov	r0, r6
 800b64a:	f7ff fb21 	bl	800ac90 <_free_r>
 800b64e:	2300      	movs	r3, #0
 800b650:	6363      	str	r3, [r4, #52]	; 0x34
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	2300      	movs	r3, #0
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f043 0308 	orr.w	r3, r3, #8
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	b94b      	cbnz	r3, 800b682 <__swsetup_r+0x9a>
 800b66e:	89a3      	ldrh	r3, [r4, #12]
 800b670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b678:	d003      	beq.n	800b682 <__swsetup_r+0x9a>
 800b67a:	4621      	mov	r1, r4
 800b67c:	4630      	mov	r0, r6
 800b67e:	f000 fa09 	bl	800ba94 <__smakebuf_r>
 800b682:	89a0      	ldrh	r0, [r4, #12]
 800b684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b688:	f010 0301 	ands.w	r3, r0, #1
 800b68c:	d00a      	beq.n	800b6a4 <__swsetup_r+0xbc>
 800b68e:	2300      	movs	r3, #0
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	6963      	ldr	r3, [r4, #20]
 800b694:	425b      	negs	r3, r3
 800b696:	61a3      	str	r3, [r4, #24]
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	b943      	cbnz	r3, 800b6ae <__swsetup_r+0xc6>
 800b69c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6a0:	d1ba      	bne.n	800b618 <__swsetup_r+0x30>
 800b6a2:	bd70      	pop	{r4, r5, r6, pc}
 800b6a4:	0781      	lsls	r1, r0, #30
 800b6a6:	bf58      	it	pl
 800b6a8:	6963      	ldrpl	r3, [r4, #20]
 800b6aa:	60a3      	str	r3, [r4, #8]
 800b6ac:	e7f4      	b.n	800b698 <__swsetup_r+0xb0>
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	e7f7      	b.n	800b6a2 <__swsetup_r+0xba>
 800b6b2:	bf00      	nop
 800b6b4:	20000278 	.word	0x20000278
 800b6b8:	0800c4bc 	.word	0x0800c4bc
 800b6bc:	0800c4dc 	.word	0x0800c4dc
 800b6c0:	0800c49c 	.word	0x0800c49c

0800b6c4 <abort>:
 800b6c4:	b508      	push	{r3, lr}
 800b6c6:	2006      	movs	r0, #6
 800b6c8:	f000 fa54 	bl	800bb74 <raise>
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	f7f6 fa77 	bl	8001bc0 <_exit>
	...

0800b6d4 <__sflush_r>:
 800b6d4:	898a      	ldrh	r2, [r1, #12]
 800b6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6da:	4605      	mov	r5, r0
 800b6dc:	0710      	lsls	r0, r2, #28
 800b6de:	460c      	mov	r4, r1
 800b6e0:	d458      	bmi.n	800b794 <__sflush_r+0xc0>
 800b6e2:	684b      	ldr	r3, [r1, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dc05      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dc02      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d0f9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b700:	682f      	ldr	r7, [r5, #0]
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	d032      	beq.n	800b76c <__sflush_r+0x98>
 800b706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	075a      	lsls	r2, r3, #29
 800b70c:	d505      	bpl.n	800b71a <__sflush_r+0x46>
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b714:	b10b      	cbz	r3, 800b71a <__sflush_r+0x46>
 800b716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b718:	1ac0      	subs	r0, r0, r3
 800b71a:	2300      	movs	r3, #0
 800b71c:	4602      	mov	r2, r0
 800b71e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	d106      	bne.n	800b73a <__sflush_r+0x66>
 800b72c:	6829      	ldr	r1, [r5, #0]
 800b72e:	291d      	cmp	r1, #29
 800b730:	d82c      	bhi.n	800b78c <__sflush_r+0xb8>
 800b732:	4a2a      	ldr	r2, [pc, #168]	; (800b7dc <__sflush_r+0x108>)
 800b734:	40ca      	lsrs	r2, r1
 800b736:	07d6      	lsls	r6, r2, #31
 800b738:	d528      	bpl.n	800b78c <__sflush_r+0xb8>
 800b73a:	2200      	movs	r2, #0
 800b73c:	6062      	str	r2, [r4, #4]
 800b73e:	04d9      	lsls	r1, r3, #19
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	d504      	bpl.n	800b750 <__sflush_r+0x7c>
 800b746:	1c42      	adds	r2, r0, #1
 800b748:	d101      	bne.n	800b74e <__sflush_r+0x7a>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b903      	cbnz	r3, 800b750 <__sflush_r+0x7c>
 800b74e:	6560      	str	r0, [r4, #84]	; 0x54
 800b750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b752:	602f      	str	r7, [r5, #0]
 800b754:	2900      	cmp	r1, #0
 800b756:	d0ca      	beq.n	800b6ee <__sflush_r+0x1a>
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__sflush_r+0x92>
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff fa95 	bl	800ac90 <_free_r>
 800b766:	2000      	movs	r0, #0
 800b768:	6360      	str	r0, [r4, #52]	; 0x34
 800b76a:	e7c1      	b.n	800b6f0 <__sflush_r+0x1c>
 800b76c:	6a21      	ldr	r1, [r4, #32]
 800b76e:	2301      	movs	r3, #1
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	1c41      	adds	r1, r0, #1
 800b776:	d1c7      	bne.n	800b708 <__sflush_r+0x34>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0c4      	beq.n	800b708 <__sflush_r+0x34>
 800b77e:	2b1d      	cmp	r3, #29
 800b780:	d001      	beq.n	800b786 <__sflush_r+0xb2>
 800b782:	2b16      	cmp	r3, #22
 800b784:	d101      	bne.n	800b78a <__sflush_r+0xb6>
 800b786:	602f      	str	r7, [r5, #0]
 800b788:	e7b1      	b.n	800b6ee <__sflush_r+0x1a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	e7ad      	b.n	800b6f0 <__sflush_r+0x1c>
 800b794:	690f      	ldr	r7, [r1, #16]
 800b796:	2f00      	cmp	r7, #0
 800b798:	d0a9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b79a:	0793      	lsls	r3, r2, #30
 800b79c:	680e      	ldr	r6, [r1, #0]
 800b79e:	bf08      	it	eq
 800b7a0:	694b      	ldreq	r3, [r1, #20]
 800b7a2:	600f      	str	r7, [r1, #0]
 800b7a4:	bf18      	it	ne
 800b7a6:	2300      	movne	r3, #0
 800b7a8:	eba6 0807 	sub.w	r8, r6, r7
 800b7ac:	608b      	str	r3, [r1, #8]
 800b7ae:	f1b8 0f00 	cmp.w	r8, #0
 800b7b2:	dd9c      	ble.n	800b6ee <__sflush_r+0x1a>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b8:	4643      	mov	r3, r8
 800b7ba:	463a      	mov	r2, r7
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b0      	blx	r6
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	dc06      	bgt.n	800b7d2 <__sflush_r+0xfe>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e78e      	b.n	800b6f0 <__sflush_r+0x1c>
 800b7d2:	4407      	add	r7, r0
 800b7d4:	eba8 0800 	sub.w	r8, r8, r0
 800b7d8:	e7e9      	b.n	800b7ae <__sflush_r+0xda>
 800b7da:	bf00      	nop
 800b7dc:	20400001 	.word	0x20400001

0800b7e0 <_fflush_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b913      	cbnz	r3, 800b7f0 <_fflush_r+0x10>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	b118      	cbz	r0, 800b7fa <_fflush_r+0x1a>
 800b7f2:	6983      	ldr	r3, [r0, #24]
 800b7f4:	b90b      	cbnz	r3, 800b7fa <_fflush_r+0x1a>
 800b7f6:	f000 f887 	bl	800b908 <__sinit>
 800b7fa:	4b14      	ldr	r3, [pc, #80]	; (800b84c <_fflush_r+0x6c>)
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	d11b      	bne.n	800b838 <_fflush_r+0x58>
 800b800:	686c      	ldr	r4, [r5, #4]
 800b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ef      	beq.n	800b7ea <_fflush_r+0xa>
 800b80a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d404      	bmi.n	800b81a <_fflush_r+0x3a>
 800b810:	0599      	lsls	r1, r3, #22
 800b812:	d402      	bmi.n	800b81a <_fflush_r+0x3a>
 800b814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b816:	f000 f915 	bl	800ba44 <__retarget_lock_acquire_recursive>
 800b81a:	4628      	mov	r0, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	f7ff ff59 	bl	800b6d4 <__sflush_r>
 800b822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b824:	07da      	lsls	r2, r3, #31
 800b826:	4605      	mov	r5, r0
 800b828:	d4e0      	bmi.n	800b7ec <_fflush_r+0xc>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	059b      	lsls	r3, r3, #22
 800b82e:	d4dd      	bmi.n	800b7ec <_fflush_r+0xc>
 800b830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b832:	f000 f908 	bl	800ba46 <__retarget_lock_release_recursive>
 800b836:	e7d9      	b.n	800b7ec <_fflush_r+0xc>
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <_fflush_r+0x70>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d101      	bne.n	800b842 <_fflush_r+0x62>
 800b83e:	68ac      	ldr	r4, [r5, #8]
 800b840:	e7df      	b.n	800b802 <_fflush_r+0x22>
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <_fflush_r+0x74>)
 800b844:	429c      	cmp	r4, r3
 800b846:	bf08      	it	eq
 800b848:	68ec      	ldreq	r4, [r5, #12]
 800b84a:	e7da      	b.n	800b802 <_fflush_r+0x22>
 800b84c:	0800c4bc 	.word	0x0800c4bc
 800b850:	0800c4dc 	.word	0x0800c4dc
 800b854:	0800c49c 	.word	0x0800c49c

0800b858 <std>:
 800b858:	2300      	movs	r3, #0
 800b85a:	b510      	push	{r4, lr}
 800b85c:	4604      	mov	r4, r0
 800b85e:	e9c0 3300 	strd	r3, r3, [r0]
 800b862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b866:	6083      	str	r3, [r0, #8]
 800b868:	8181      	strh	r1, [r0, #12]
 800b86a:	6643      	str	r3, [r0, #100]	; 0x64
 800b86c:	81c2      	strh	r2, [r0, #14]
 800b86e:	6183      	str	r3, [r0, #24]
 800b870:	4619      	mov	r1, r3
 800b872:	2208      	movs	r2, #8
 800b874:	305c      	adds	r0, #92	; 0x5c
 800b876:	f7fb ff7b 	bl	8007770 <memset>
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <std+0x38>)
 800b87c:	6263      	str	r3, [r4, #36]	; 0x24
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <std+0x3c>)
 800b880:	62a3      	str	r3, [r4, #40]	; 0x28
 800b882:	4b05      	ldr	r3, [pc, #20]	; (800b898 <std+0x40>)
 800b884:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <std+0x44>)
 800b888:	6224      	str	r4, [r4, #32]
 800b88a:	6323      	str	r3, [r4, #48]	; 0x30
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	0800bbad 	.word	0x0800bbad
 800b894:	0800bbcf 	.word	0x0800bbcf
 800b898:	0800bc07 	.word	0x0800bc07
 800b89c:	0800bc2b 	.word	0x0800bc2b

0800b8a0 <_cleanup_r>:
 800b8a0:	4901      	ldr	r1, [pc, #4]	; (800b8a8 <_cleanup_r+0x8>)
 800b8a2:	f000 b8af 	b.w	800ba04 <_fwalk_reent>
 800b8a6:	bf00      	nop
 800b8a8:	0800b7e1 	.word	0x0800b7e1

0800b8ac <__sfmoreglue>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	2268      	movs	r2, #104	; 0x68
 800b8b0:	1e4d      	subs	r5, r1, #1
 800b8b2:	4355      	muls	r5, r2
 800b8b4:	460e      	mov	r6, r1
 800b8b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ba:	f7ff fa55 	bl	800ad68 <_malloc_r>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	b140      	cbz	r0, 800b8d4 <__sfmoreglue+0x28>
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8c8:	300c      	adds	r0, #12
 800b8ca:	60a0      	str	r0, [r4, #8]
 800b8cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8d0:	f7fb ff4e 	bl	8007770 <memset>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}

0800b8d8 <__sfp_lock_acquire>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sfp_lock_acquire+0x8>)
 800b8da:	f000 b8b3 	b.w	800ba44 <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20001359 	.word	0x20001359

0800b8e4 <__sfp_lock_release>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__sfp_lock_release+0x8>)
 800b8e6:	f000 b8ae 	b.w	800ba46 <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20001359 	.word	0x20001359

0800b8f0 <__sinit_lock_acquire>:
 800b8f0:	4801      	ldr	r0, [pc, #4]	; (800b8f8 <__sinit_lock_acquire+0x8>)
 800b8f2:	f000 b8a7 	b.w	800ba44 <__retarget_lock_acquire_recursive>
 800b8f6:	bf00      	nop
 800b8f8:	2000135a 	.word	0x2000135a

0800b8fc <__sinit_lock_release>:
 800b8fc:	4801      	ldr	r0, [pc, #4]	; (800b904 <__sinit_lock_release+0x8>)
 800b8fe:	f000 b8a2 	b.w	800ba46 <__retarget_lock_release_recursive>
 800b902:	bf00      	nop
 800b904:	2000135a 	.word	0x2000135a

0800b908 <__sinit>:
 800b908:	b510      	push	{r4, lr}
 800b90a:	4604      	mov	r4, r0
 800b90c:	f7ff fff0 	bl	800b8f0 <__sinit_lock_acquire>
 800b910:	69a3      	ldr	r3, [r4, #24]
 800b912:	b11b      	cbz	r3, 800b91c <__sinit+0x14>
 800b914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b918:	f7ff bff0 	b.w	800b8fc <__sinit_lock_release>
 800b91c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b920:	6523      	str	r3, [r4, #80]	; 0x50
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <__sinit+0x68>)
 800b924:	4a13      	ldr	r2, [pc, #76]	; (800b974 <__sinit+0x6c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	62a2      	str	r2, [r4, #40]	; 0x28
 800b92a:	42a3      	cmp	r3, r4
 800b92c:	bf04      	itt	eq
 800b92e:	2301      	moveq	r3, #1
 800b930:	61a3      	streq	r3, [r4, #24]
 800b932:	4620      	mov	r0, r4
 800b934:	f000 f820 	bl	800b978 <__sfp>
 800b938:	6060      	str	r0, [r4, #4]
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f81c 	bl	800b978 <__sfp>
 800b940:	60a0      	str	r0, [r4, #8]
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f818 	bl	800b978 <__sfp>
 800b948:	2200      	movs	r2, #0
 800b94a:	60e0      	str	r0, [r4, #12]
 800b94c:	2104      	movs	r1, #4
 800b94e:	6860      	ldr	r0, [r4, #4]
 800b950:	f7ff ff82 	bl	800b858 <std>
 800b954:	68a0      	ldr	r0, [r4, #8]
 800b956:	2201      	movs	r2, #1
 800b958:	2109      	movs	r1, #9
 800b95a:	f7ff ff7d 	bl	800b858 <std>
 800b95e:	68e0      	ldr	r0, [r4, #12]
 800b960:	2202      	movs	r2, #2
 800b962:	2112      	movs	r1, #18
 800b964:	f7ff ff78 	bl	800b858 <std>
 800b968:	2301      	movs	r3, #1
 800b96a:	61a3      	str	r3, [r4, #24]
 800b96c:	e7d2      	b.n	800b914 <__sinit+0xc>
 800b96e:	bf00      	nop
 800b970:	0800c060 	.word	0x0800c060
 800b974:	0800b8a1 	.word	0x0800b8a1

0800b978 <__sfp>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	4607      	mov	r7, r0
 800b97c:	f7ff ffac 	bl	800b8d8 <__sfp_lock_acquire>
 800b980:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <__sfp+0x84>)
 800b982:	681e      	ldr	r6, [r3, #0]
 800b984:	69b3      	ldr	r3, [r6, #24]
 800b986:	b913      	cbnz	r3, 800b98e <__sfp+0x16>
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff ffbd 	bl	800b908 <__sinit>
 800b98e:	3648      	adds	r6, #72	; 0x48
 800b990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	d503      	bpl.n	800b9a0 <__sfp+0x28>
 800b998:	6833      	ldr	r3, [r6, #0]
 800b99a:	b30b      	cbz	r3, 800b9e0 <__sfp+0x68>
 800b99c:	6836      	ldr	r6, [r6, #0]
 800b99e:	e7f7      	b.n	800b990 <__sfp+0x18>
 800b9a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9a4:	b9d5      	cbnz	r5, 800b9dc <__sfp+0x64>
 800b9a6:	4b16      	ldr	r3, [pc, #88]	; (800ba00 <__sfp+0x88>)
 800b9a8:	60e3      	str	r3, [r4, #12]
 800b9aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b9b0:	f000 f847 	bl	800ba42 <__retarget_lock_init_recursive>
 800b9b4:	f7ff ff96 	bl	800b8e4 <__sfp_lock_release>
 800b9b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9c0:	6025      	str	r5, [r4, #0]
 800b9c2:	61a5      	str	r5, [r4, #24]
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9cc:	f7fb fed0 	bl	8007770 <memset>
 800b9d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9d8:	4620      	mov	r0, r4
 800b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9dc:	3468      	adds	r4, #104	; 0x68
 800b9de:	e7d9      	b.n	800b994 <__sfp+0x1c>
 800b9e0:	2104      	movs	r1, #4
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f7ff ff62 	bl	800b8ac <__sfmoreglue>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	6030      	str	r0, [r6, #0]
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1d5      	bne.n	800b99c <__sfp+0x24>
 800b9f0:	f7ff ff78 	bl	800b8e4 <__sfp_lock_release>
 800b9f4:	230c      	movs	r3, #12
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	e7ee      	b.n	800b9d8 <__sfp+0x60>
 800b9fa:	bf00      	nop
 800b9fc:	0800c060 	.word	0x0800c060
 800ba00:	ffff0001 	.word	0xffff0001

0800ba04 <_fwalk_reent>:
 800ba04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba08:	4606      	mov	r6, r0
 800ba0a:	4688      	mov	r8, r1
 800ba0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba10:	2700      	movs	r7, #0
 800ba12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba16:	f1b9 0901 	subs.w	r9, r9, #1
 800ba1a:	d505      	bpl.n	800ba28 <_fwalk_reent+0x24>
 800ba1c:	6824      	ldr	r4, [r4, #0]
 800ba1e:	2c00      	cmp	r4, #0
 800ba20:	d1f7      	bne.n	800ba12 <_fwalk_reent+0xe>
 800ba22:	4638      	mov	r0, r7
 800ba24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba28:	89ab      	ldrh	r3, [r5, #12]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d907      	bls.n	800ba3e <_fwalk_reent+0x3a>
 800ba2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba32:	3301      	adds	r3, #1
 800ba34:	d003      	beq.n	800ba3e <_fwalk_reent+0x3a>
 800ba36:	4629      	mov	r1, r5
 800ba38:	4630      	mov	r0, r6
 800ba3a:	47c0      	blx	r8
 800ba3c:	4307      	orrs	r7, r0
 800ba3e:	3568      	adds	r5, #104	; 0x68
 800ba40:	e7e9      	b.n	800ba16 <_fwalk_reent+0x12>

0800ba42 <__retarget_lock_init_recursive>:
 800ba42:	4770      	bx	lr

0800ba44 <__retarget_lock_acquire_recursive>:
 800ba44:	4770      	bx	lr

0800ba46 <__retarget_lock_release_recursive>:
 800ba46:	4770      	bx	lr

0800ba48 <__swhatbuf_r>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	460e      	mov	r6, r1
 800ba4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba50:	2900      	cmp	r1, #0
 800ba52:	b096      	sub	sp, #88	; 0x58
 800ba54:	4614      	mov	r4, r2
 800ba56:	461d      	mov	r5, r3
 800ba58:	da08      	bge.n	800ba6c <__swhatbuf_r+0x24>
 800ba5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	602a      	str	r2, [r5, #0]
 800ba62:	061a      	lsls	r2, r3, #24
 800ba64:	d410      	bmi.n	800ba88 <__swhatbuf_r+0x40>
 800ba66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba6a:	e00e      	b.n	800ba8a <__swhatbuf_r+0x42>
 800ba6c:	466a      	mov	r2, sp
 800ba6e:	f000 f903 	bl	800bc78 <_fstat_r>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	dbf1      	blt.n	800ba5a <__swhatbuf_r+0x12>
 800ba76:	9a01      	ldr	r2, [sp, #4]
 800ba78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba80:	425a      	negs	r2, r3
 800ba82:	415a      	adcs	r2, r3
 800ba84:	602a      	str	r2, [r5, #0]
 800ba86:	e7ee      	b.n	800ba66 <__swhatbuf_r+0x1e>
 800ba88:	2340      	movs	r3, #64	; 0x40
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	b016      	add	sp, #88	; 0x58
 800ba90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba94 <__smakebuf_r>:
 800ba94:	898b      	ldrh	r3, [r1, #12]
 800ba96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba98:	079d      	lsls	r5, r3, #30
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	d507      	bpl.n	800bab0 <__smakebuf_r+0x1c>
 800baa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	6123      	str	r3, [r4, #16]
 800baa8:	2301      	movs	r3, #1
 800baaa:	6163      	str	r3, [r4, #20]
 800baac:	b002      	add	sp, #8
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	ab01      	add	r3, sp, #4
 800bab2:	466a      	mov	r2, sp
 800bab4:	f7ff ffc8 	bl	800ba48 <__swhatbuf_r>
 800bab8:	9900      	ldr	r1, [sp, #0]
 800baba:	4605      	mov	r5, r0
 800babc:	4630      	mov	r0, r6
 800babe:	f7ff f953 	bl	800ad68 <_malloc_r>
 800bac2:	b948      	cbnz	r0, 800bad8 <__smakebuf_r+0x44>
 800bac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d4ef      	bmi.n	800baac <__smakebuf_r+0x18>
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	f043 0302 	orr.w	r3, r3, #2
 800bad4:	81a3      	strh	r3, [r4, #12]
 800bad6:	e7e3      	b.n	800baa0 <__smakebuf_r+0xc>
 800bad8:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <__smakebuf_r+0x7c>)
 800bada:	62b3      	str	r3, [r6, #40]	; 0x28
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	6020      	str	r0, [r4, #0]
 800bae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae4:	81a3      	strh	r3, [r4, #12]
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	6163      	str	r3, [r4, #20]
 800baea:	9b01      	ldr	r3, [sp, #4]
 800baec:	6120      	str	r0, [r4, #16]
 800baee:	b15b      	cbz	r3, 800bb08 <__smakebuf_r+0x74>
 800baf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf4:	4630      	mov	r0, r6
 800baf6:	f000 f8d1 	bl	800bc9c <_isatty_r>
 800bafa:	b128      	cbz	r0, 800bb08 <__smakebuf_r+0x74>
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	f023 0303 	bic.w	r3, r3, #3
 800bb02:	f043 0301 	orr.w	r3, r3, #1
 800bb06:	81a3      	strh	r3, [r4, #12]
 800bb08:	89a0      	ldrh	r0, [r4, #12]
 800bb0a:	4305      	orrs	r5, r0
 800bb0c:	81a5      	strh	r5, [r4, #12]
 800bb0e:	e7cd      	b.n	800baac <__smakebuf_r+0x18>
 800bb10:	0800b8a1 	.word	0x0800b8a1

0800bb14 <_malloc_usable_size_r>:
 800bb14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb18:	1f18      	subs	r0, r3, #4
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	bfbc      	itt	lt
 800bb1e:	580b      	ldrlt	r3, [r1, r0]
 800bb20:	18c0      	addlt	r0, r0, r3
 800bb22:	4770      	bx	lr

0800bb24 <_raise_r>:
 800bb24:	291f      	cmp	r1, #31
 800bb26:	b538      	push	{r3, r4, r5, lr}
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	d904      	bls.n	800bb38 <_raise_r+0x14>
 800bb2e:	2316      	movs	r3, #22
 800bb30:	6003      	str	r3, [r0, #0]
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295
 800bb36:	bd38      	pop	{r3, r4, r5, pc}
 800bb38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb3a:	b112      	cbz	r2, 800bb42 <_raise_r+0x1e>
 800bb3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb40:	b94b      	cbnz	r3, 800bb56 <_raise_r+0x32>
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 f830 	bl	800bba8 <_getpid_r>
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb52:	f000 b817 	b.w	800bb84 <_kill_r>
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d00a      	beq.n	800bb70 <_raise_r+0x4c>
 800bb5a:	1c59      	adds	r1, r3, #1
 800bb5c:	d103      	bne.n	800bb66 <_raise_r+0x42>
 800bb5e:	2316      	movs	r3, #22
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	2001      	movs	r0, #1
 800bb64:	e7e7      	b.n	800bb36 <_raise_r+0x12>
 800bb66:	2400      	movs	r4, #0
 800bb68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	4798      	blx	r3
 800bb70:	2000      	movs	r0, #0
 800bb72:	e7e0      	b.n	800bb36 <_raise_r+0x12>

0800bb74 <raise>:
 800bb74:	4b02      	ldr	r3, [pc, #8]	; (800bb80 <raise+0xc>)
 800bb76:	4601      	mov	r1, r0
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f7ff bfd3 	b.w	800bb24 <_raise_r>
 800bb7e:	bf00      	nop
 800bb80:	20000278 	.word	0x20000278

0800bb84 <_kill_r>:
 800bb84:	b538      	push	{r3, r4, r5, lr}
 800bb86:	4d07      	ldr	r5, [pc, #28]	; (800bba4 <_kill_r+0x20>)
 800bb88:	2300      	movs	r3, #0
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	4608      	mov	r0, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	602b      	str	r3, [r5, #0]
 800bb92:	f7f6 f805 	bl	8001ba0 <_kill>
 800bb96:	1c43      	adds	r3, r0, #1
 800bb98:	d102      	bne.n	800bba0 <_kill_r+0x1c>
 800bb9a:	682b      	ldr	r3, [r5, #0]
 800bb9c:	b103      	cbz	r3, 800bba0 <_kill_r+0x1c>
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	bd38      	pop	{r3, r4, r5, pc}
 800bba2:	bf00      	nop
 800bba4:	20001354 	.word	0x20001354

0800bba8 <_getpid_r>:
 800bba8:	f7f5 bff2 	b.w	8001b90 <_getpid>

0800bbac <__sread>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	460c      	mov	r4, r1
 800bbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbb4:	f000 f894 	bl	800bce0 <_read_r>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	bfab      	itete	ge
 800bbbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbbe:	89a3      	ldrhlt	r3, [r4, #12]
 800bbc0:	181b      	addge	r3, r3, r0
 800bbc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbc6:	bfac      	ite	ge
 800bbc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbca:	81a3      	strhlt	r3, [r4, #12]
 800bbcc:	bd10      	pop	{r4, pc}

0800bbce <__swrite>:
 800bbce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd2:	461f      	mov	r7, r3
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	05db      	lsls	r3, r3, #23
 800bbd8:	4605      	mov	r5, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	4616      	mov	r6, r2
 800bbde:	d505      	bpl.n	800bbec <__swrite+0x1e>
 800bbe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f000 f868 	bl	800bcbc <_lseek_r>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbf6:	81a3      	strh	r3, [r4, #12]
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	463b      	mov	r3, r7
 800bbfc:	4628      	mov	r0, r5
 800bbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc02:	f000 b817 	b.w	800bc34 <_write_r>

0800bc06 <__sseek>:
 800bc06:	b510      	push	{r4, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0e:	f000 f855 	bl	800bcbc <_lseek_r>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	bf15      	itete	ne
 800bc18:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc22:	81a3      	strheq	r3, [r4, #12]
 800bc24:	bf18      	it	ne
 800bc26:	81a3      	strhne	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__sclose>:
 800bc2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2e:	f000 b813 	b.w	800bc58 <_close_r>
	...

0800bc34 <_write_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d07      	ldr	r5, [pc, #28]	; (800bc54 <_write_r+0x20>)
 800bc38:	4604      	mov	r4, r0
 800bc3a:	4608      	mov	r0, r1
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	602a      	str	r2, [r5, #0]
 800bc42:	461a      	mov	r2, r3
 800bc44:	f7f5 ffe3 	bl	8001c0e <_write>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_write_r+0x1e>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_write_r+0x1e>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	20001354 	.word	0x20001354

0800bc58 <_close_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d06      	ldr	r5, [pc, #24]	; (800bc74 <_close_r+0x1c>)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	f7f5 ffef 	bl	8001c46 <_close>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_close_r+0x1a>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_close_r+0x1a>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	20001354 	.word	0x20001354

0800bc78 <_fstat_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d07      	ldr	r5, [pc, #28]	; (800bc98 <_fstat_r+0x20>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	4611      	mov	r1, r2
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f7f5 ffea 	bl	8001c5e <_fstat>
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	d102      	bne.n	800bc94 <_fstat_r+0x1c>
 800bc8e:	682b      	ldr	r3, [r5, #0]
 800bc90:	b103      	cbz	r3, 800bc94 <_fstat_r+0x1c>
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	20001354 	.word	0x20001354

0800bc9c <_isatty_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d06      	ldr	r5, [pc, #24]	; (800bcb8 <_isatty_r+0x1c>)
 800bca0:	2300      	movs	r3, #0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7f5 ffe9 	bl	8001c7e <_isatty>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_isatty_r+0x1a>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_isatty_r+0x1a>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	20001354 	.word	0x20001354

0800bcbc <_lseek_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	; (800bcdc <_lseek_r+0x20>)
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	602a      	str	r2, [r5, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	f7f5 ffe2 	bl	8001c94 <_lseek>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_lseek_r+0x1e>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_lseek_r+0x1e>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20001354 	.word	0x20001354

0800bce0 <_read_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4d07      	ldr	r5, [pc, #28]	; (800bd00 <_read_r+0x20>)
 800bce4:	4604      	mov	r4, r0
 800bce6:	4608      	mov	r0, r1
 800bce8:	4611      	mov	r1, r2
 800bcea:	2200      	movs	r2, #0
 800bcec:	602a      	str	r2, [r5, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	f7f5 ff70 	bl	8001bd4 <_read>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_read_r+0x1e>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_read_r+0x1e>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	20001354 	.word	0x20001354

0800bd04 <_init>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	bf00      	nop
 800bd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd0a:	bc08      	pop	{r3}
 800bd0c:	469e      	mov	lr, r3
 800bd0e:	4770      	bx	lr

0800bd10 <_fini>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr

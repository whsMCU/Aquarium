
Aquarium_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .version      000002a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000b904  08000440  08000440  00010440  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007dc  0800bd48  0800bd48  0001bd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c524  0800c524  0002044c  2**0
                  CONTENTS
  5 .ARM          00000008  0800c524  0800c524  0001c524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c52c  0800c52c  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000044c  20000000  0800c534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000f10  2000044c  0800c980  0002044c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000135c  0800c980  0002135c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f383  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf1  00000000  00000000  0002f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000333f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001deb5  00000000  00000000  00035108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b665  00000000  00000000  00052fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f1d6  00000000  00000000  0006e622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010d7f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ac  00000000  00000000  0010d848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000440 <__do_global_dtors_aux>:
 8000440:	b510      	push	{r4, lr}
 8000442:	4c05      	ldr	r4, [pc, #20]	; (8000458 <__do_global_dtors_aux+0x18>)
 8000444:	7823      	ldrb	r3, [r4, #0]
 8000446:	b933      	cbnz	r3, 8000456 <__do_global_dtors_aux+0x16>
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <__do_global_dtors_aux+0x1c>)
 800044a:	b113      	cbz	r3, 8000452 <__do_global_dtors_aux+0x12>
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <__do_global_dtors_aux+0x20>)
 800044e:	f3af 8000 	nop.w
 8000452:	2301      	movs	r3, #1
 8000454:	7023      	strb	r3, [r4, #0]
 8000456:	bd10      	pop	{r4, pc}
 8000458:	2000044c 	.word	0x2000044c
 800045c:	00000000 	.word	0x00000000
 8000460:	0800bd2c 	.word	0x0800bd2c

08000464 <frame_dummy>:
 8000464:	b508      	push	{r3, lr}
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <frame_dummy+0x10>)
 8000468:	b11b      	cbz	r3, 8000472 <frame_dummy+0xe>
 800046a:	4903      	ldr	r1, [pc, #12]	; (8000478 <frame_dummy+0x14>)
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <frame_dummy+0x18>)
 800046e:	f3af 8000 	nop.w
 8000472:	bd08      	pop	{r3, pc}
 8000474:	00000000 	.word	0x00000000
 8000478:	20000450 	.word	0x20000450
 800047c:	0800bd2c 	.word	0x0800bd2c

08000480 <strcmp>:
 8000480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000488:	2a01      	cmp	r2, #1
 800048a:	bf28      	it	cs
 800048c:	429a      	cmpcs	r2, r3
 800048e:	d0f7      	beq.n	8000480 <strcmp>
 8000490:	1ad0      	subs	r0, r2, r3
 8000492:	4770      	bx	lr

08000494 <strlen>:
 8000494:	4603      	mov	r3, r0
 8000496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800049a:	2a00      	cmp	r2, #0
 800049c:	d1fb      	bne.n	8000496 <strlen+0x2>
 800049e:	1a18      	subs	r0, r3, r0
 80004a0:	3801      	subs	r0, #1
 80004a2:	4770      	bx	lr
	...

080004b0 <memchr>:
 80004b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004b4:	2a10      	cmp	r2, #16
 80004b6:	db2b      	blt.n	8000510 <memchr+0x60>
 80004b8:	f010 0f07 	tst.w	r0, #7
 80004bc:	d008      	beq.n	80004d0 <memchr+0x20>
 80004be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c2:	3a01      	subs	r2, #1
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d02d      	beq.n	8000524 <memchr+0x74>
 80004c8:	f010 0f07 	tst.w	r0, #7
 80004cc:	b342      	cbz	r2, 8000520 <memchr+0x70>
 80004ce:	d1f6      	bne.n	80004be <memchr+0xe>
 80004d0:	b4f0      	push	{r4, r5, r6, r7}
 80004d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004da:	f022 0407 	bic.w	r4, r2, #7
 80004de:	f07f 0700 	mvns.w	r7, #0
 80004e2:	2300      	movs	r3, #0
 80004e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004e8:	3c08      	subs	r4, #8
 80004ea:	ea85 0501 	eor.w	r5, r5, r1
 80004ee:	ea86 0601 	eor.w	r6, r6, r1
 80004f2:	fa85 f547 	uadd8	r5, r5, r7
 80004f6:	faa3 f587 	sel	r5, r3, r7
 80004fa:	fa86 f647 	uadd8	r6, r6, r7
 80004fe:	faa5 f687 	sel	r6, r5, r7
 8000502:	b98e      	cbnz	r6, 8000528 <memchr+0x78>
 8000504:	d1ee      	bne.n	80004e4 <memchr+0x34>
 8000506:	bcf0      	pop	{r4, r5, r6, r7}
 8000508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800050c:	f002 0207 	and.w	r2, r2, #7
 8000510:	b132      	cbz	r2, 8000520 <memchr+0x70>
 8000512:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000516:	3a01      	subs	r2, #1
 8000518:	ea83 0301 	eor.w	r3, r3, r1
 800051c:	b113      	cbz	r3, 8000524 <memchr+0x74>
 800051e:	d1f8      	bne.n	8000512 <memchr+0x62>
 8000520:	2000      	movs	r0, #0
 8000522:	4770      	bx	lr
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
 8000528:	2d00      	cmp	r5, #0
 800052a:	bf06      	itte	eq
 800052c:	4635      	moveq	r5, r6
 800052e:	3803      	subeq	r0, #3
 8000530:	3807      	subne	r0, #7
 8000532:	f015 0f01 	tst.w	r5, #1
 8000536:	d107      	bne.n	8000548 <memchr+0x98>
 8000538:	3001      	adds	r0, #1
 800053a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800053e:	bf02      	ittt	eq
 8000540:	3001      	addeq	r0, #1
 8000542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000546:	3001      	addeq	r0, #1
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	3801      	subs	r0, #1
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_drsub>:
 8000550:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e002      	b.n	800055c <__adddf3>
 8000556:	bf00      	nop

08000558 <__aeabi_dsub>:
 8000558:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800055c <__adddf3>:
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000562:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	bf1f      	itttt	ne
 8000572:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000576:	ea55 0c02 	orrsne.w	ip, r5, r2
 800057a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800057e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000582:	f000 80e2 	beq.w	800074a <__adddf3+0x1ee>
 8000586:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800058a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800058e:	bfb8      	it	lt
 8000590:	426d      	neglt	r5, r5
 8000592:	dd0c      	ble.n	80005ae <__adddf3+0x52>
 8000594:	442c      	add	r4, r5
 8000596:	ea80 0202 	eor.w	r2, r0, r2
 800059a:	ea81 0303 	eor.w	r3, r1, r3
 800059e:	ea82 0000 	eor.w	r0, r2, r0
 80005a2:	ea83 0101 	eor.w	r1, r3, r1
 80005a6:	ea80 0202 	eor.w	r2, r0, r2
 80005aa:	ea81 0303 	eor.w	r3, r1, r3
 80005ae:	2d36      	cmp	r5, #54	; 0x36
 80005b0:	bf88      	it	hi
 80005b2:	bd30      	pophi	{r4, r5, pc}
 80005b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005c4:	d002      	beq.n	80005cc <__adddf3+0x70>
 80005c6:	4240      	negs	r0, r0
 80005c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005d8:	d002      	beq.n	80005e0 <__adddf3+0x84>
 80005da:	4252      	negs	r2, r2
 80005dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005e0:	ea94 0f05 	teq	r4, r5
 80005e4:	f000 80a7 	beq.w	8000736 <__adddf3+0x1da>
 80005e8:	f1a4 0401 	sub.w	r4, r4, #1
 80005ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80005f0:	db0d      	blt.n	800060e <__adddf3+0xb2>
 80005f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005f6:	fa22 f205 	lsr.w	r2, r2, r5
 80005fa:	1880      	adds	r0, r0, r2
 80005fc:	f141 0100 	adc.w	r1, r1, #0
 8000600:	fa03 f20e 	lsl.w	r2, r3, lr
 8000604:	1880      	adds	r0, r0, r2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	4159      	adcs	r1, r3
 800060c:	e00e      	b.n	800062c <__adddf3+0xd0>
 800060e:	f1a5 0520 	sub.w	r5, r5, #32
 8000612:	f10e 0e20 	add.w	lr, lr, #32
 8000616:	2a01      	cmp	r2, #1
 8000618:	fa03 fc0e 	lsl.w	ip, r3, lr
 800061c:	bf28      	it	cs
 800061e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000622:	fa43 f305 	asr.w	r3, r3, r5
 8000626:	18c0      	adds	r0, r0, r3
 8000628:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000630:	d507      	bpl.n	8000642 <__adddf3+0xe6>
 8000632:	f04f 0e00 	mov.w	lr, #0
 8000636:	f1dc 0c00 	rsbs	ip, ip, #0
 800063a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800063e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000642:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000646:	d31b      	bcc.n	8000680 <__adddf3+0x124>
 8000648:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800064c:	d30c      	bcc.n	8000668 <__adddf3+0x10c>
 800064e:	0849      	lsrs	r1, r1, #1
 8000650:	ea5f 0030 	movs.w	r0, r0, rrx
 8000654:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000658:	f104 0401 	add.w	r4, r4, #1
 800065c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000660:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000664:	f080 809a 	bcs.w	800079c <__adddf3+0x240>
 8000668:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	ea41 0105 	orr.w	r1, r1, r5
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000684:	4140      	adcs	r0, r0
 8000686:	eb41 0101 	adc.w	r1, r1, r1
 800068a:	3c01      	subs	r4, #1
 800068c:	bf28      	it	cs
 800068e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000692:	d2e9      	bcs.n	8000668 <__adddf3+0x10c>
 8000694:	f091 0f00 	teq	r1, #0
 8000698:	bf04      	itt	eq
 800069a:	4601      	moveq	r1, r0
 800069c:	2000      	moveq	r0, #0
 800069e:	fab1 f381 	clz	r3, r1
 80006a2:	bf08      	it	eq
 80006a4:	3320      	addeq	r3, #32
 80006a6:	f1a3 030b 	sub.w	r3, r3, #11
 80006aa:	f1b3 0220 	subs.w	r2, r3, #32
 80006ae:	da0c      	bge.n	80006ca <__adddf3+0x16e>
 80006b0:	320c      	adds	r2, #12
 80006b2:	dd08      	ble.n	80006c6 <__adddf3+0x16a>
 80006b4:	f102 0c14 	add.w	ip, r2, #20
 80006b8:	f1c2 020c 	rsb	r2, r2, #12
 80006bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80006c0:	fa21 f102 	lsr.w	r1, r1, r2
 80006c4:	e00c      	b.n	80006e0 <__adddf3+0x184>
 80006c6:	f102 0214 	add.w	r2, r2, #20
 80006ca:	bfd8      	it	le
 80006cc:	f1c2 0c20 	rsble	ip, r2, #32
 80006d0:	fa01 f102 	lsl.w	r1, r1, r2
 80006d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006d8:	bfdc      	itt	le
 80006da:	ea41 010c 	orrle.w	r1, r1, ip
 80006de:	4090      	lslle	r0, r2
 80006e0:	1ae4      	subs	r4, r4, r3
 80006e2:	bfa2      	ittt	ge
 80006e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006e8:	4329      	orrge	r1, r5
 80006ea:	bd30      	popge	{r4, r5, pc}
 80006ec:	ea6f 0404 	mvn.w	r4, r4
 80006f0:	3c1f      	subs	r4, #31
 80006f2:	da1c      	bge.n	800072e <__adddf3+0x1d2>
 80006f4:	340c      	adds	r4, #12
 80006f6:	dc0e      	bgt.n	8000716 <__adddf3+0x1ba>
 80006f8:	f104 0414 	add.w	r4, r4, #20
 80006fc:	f1c4 0220 	rsb	r2, r4, #32
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f302 	lsl.w	r3, r1, r2
 8000708:	ea40 0003 	orr.w	r0, r0, r3
 800070c:	fa21 f304 	lsr.w	r3, r1, r4
 8000710:	ea45 0103 	orr.w	r1, r5, r3
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	f1c4 040c 	rsb	r4, r4, #12
 800071a:	f1c4 0220 	rsb	r2, r4, #32
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 f304 	lsl.w	r3, r1, r4
 8000726:	ea40 0003 	orr.w	r0, r0, r3
 800072a:	4629      	mov	r1, r5
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	fa21 f004 	lsr.w	r0, r1, r4
 8000732:	4629      	mov	r1, r5
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	f094 0f00 	teq	r4, #0
 800073a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800073e:	bf06      	itte	eq
 8000740:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000744:	3401      	addeq	r4, #1
 8000746:	3d01      	subne	r5, #1
 8000748:	e74e      	b.n	80005e8 <__adddf3+0x8c>
 800074a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074e:	bf18      	it	ne
 8000750:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000754:	d029      	beq.n	80007aa <__adddf3+0x24e>
 8000756:	ea94 0f05 	teq	r4, r5
 800075a:	bf08      	it	eq
 800075c:	ea90 0f02 	teqeq	r0, r2
 8000760:	d005      	beq.n	800076e <__adddf3+0x212>
 8000762:	ea54 0c00 	orrs.w	ip, r4, r0
 8000766:	bf04      	itt	eq
 8000768:	4619      	moveq	r1, r3
 800076a:	4610      	moveq	r0, r2
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea91 0f03 	teq	r1, r3
 8000772:	bf1e      	ittt	ne
 8000774:	2100      	movne	r1, #0
 8000776:	2000      	movne	r0, #0
 8000778:	bd30      	popne	{r4, r5, pc}
 800077a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800077e:	d105      	bne.n	800078c <__adddf3+0x230>
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	4149      	adcs	r1, r1
 8000784:	bf28      	it	cs
 8000786:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800078a:	bd30      	pop	{r4, r5, pc}
 800078c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000790:	bf3c      	itt	cc
 8000792:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000796:	bd30      	popcc	{r4, r5, pc}
 8000798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800079c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ae:	bf1a      	itte	ne
 80007b0:	4619      	movne	r1, r3
 80007b2:	4610      	movne	r0, r2
 80007b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007b8:	bf1c      	itt	ne
 80007ba:	460b      	movne	r3, r1
 80007bc:	4602      	movne	r2, r0
 80007be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007c2:	bf06      	itte	eq
 80007c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007c8:	ea91 0f03 	teqeq	r1, r3
 80007cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	bf00      	nop

080007d4 <__aeabi_ui2d>:
 80007d4:	f090 0f00 	teq	r0, #0
 80007d8:	bf04      	itt	eq
 80007da:	2100      	moveq	r1, #0
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e8:	f04f 0500 	mov.w	r5, #0
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	e750      	b.n	8000694 <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_i2d>:
 80007f4:	f090 0f00 	teq	r0, #0
 80007f8:	bf04      	itt	eq
 80007fa:	2100      	moveq	r1, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000804:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000808:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800080c:	bf48      	it	mi
 800080e:	4240      	negmi	r0, r0
 8000810:	f04f 0100 	mov.w	r1, #0
 8000814:	e73e      	b.n	8000694 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_f2d>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800081e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000822:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000826:	bf1f      	itttt	ne
 8000828:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800082c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000830:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000834:	4770      	bxne	lr
 8000836:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800083a:	bf08      	it	eq
 800083c:	4770      	bxeq	lr
 800083e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000842:	bf04      	itt	eq
 8000844:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000848:	4770      	bxeq	lr
 800084a:	b530      	push	{r4, r5, lr}
 800084c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000850:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000854:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000858:	e71c      	b.n	8000694 <__adddf3+0x138>
 800085a:	bf00      	nop

0800085c <__aeabi_ul2d>:
 800085c:	ea50 0201 	orrs.w	r2, r0, r1
 8000860:	bf08      	it	eq
 8000862:	4770      	bxeq	lr
 8000864:	b530      	push	{r4, r5, lr}
 8000866:	f04f 0500 	mov.w	r5, #0
 800086a:	e00a      	b.n	8000882 <__aeabi_l2d+0x16>

0800086c <__aeabi_l2d>:
 800086c:	ea50 0201 	orrs.w	r2, r0, r1
 8000870:	bf08      	it	eq
 8000872:	4770      	bxeq	lr
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800087a:	d502      	bpl.n	8000882 <__aeabi_l2d+0x16>
 800087c:	4240      	negs	r0, r0
 800087e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000882:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000886:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800088e:	f43f aed8 	beq.w	8000642 <__adddf3+0xe6>
 8000892:	f04f 0203 	mov.w	r2, #3
 8000896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800089a:	bf18      	it	ne
 800089c:	3203      	addne	r2, #3
 800089e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008a2:	bf18      	it	ne
 80008a4:	3203      	addne	r2, #3
 80008a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ba:	ea40 000e 	orr.w	r0, r0, lr
 80008be:	fa21 f102 	lsr.w	r1, r1, r2
 80008c2:	4414      	add	r4, r2
 80008c4:	e6bd      	b.n	8000642 <__adddf3+0xe6>
 80008c6:	bf00      	nop

080008c8 <__aeabi_dmul>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d6:	bf1d      	ittte	ne
 80008d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008dc:	ea94 0f0c 	teqne	r4, ip
 80008e0:	ea95 0f0c 	teqne	r5, ip
 80008e4:	f000 f8de 	bleq	8000aa4 <__aeabi_dmul+0x1dc>
 80008e8:	442c      	add	r4, r5
 80008ea:	ea81 0603 	eor.w	r6, r1, r3
 80008ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008fa:	bf18      	it	ne
 80008fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000908:	d038      	beq.n	800097c <__aeabi_dmul+0xb4>
 800090a:	fba0 ce02 	umull	ip, lr, r0, r2
 800090e:	f04f 0500 	mov.w	r5, #0
 8000912:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000916:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800091a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800091e:	f04f 0600 	mov.w	r6, #0
 8000922:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000926:	f09c 0f00 	teq	ip, #0
 800092a:	bf18      	it	ne
 800092c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000930:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000934:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000938:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800093c:	d204      	bcs.n	8000948 <__aeabi_dmul+0x80>
 800093e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000942:	416d      	adcs	r5, r5
 8000944:	eb46 0606 	adc.w	r6, r6, r6
 8000948:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800094c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000950:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000954:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000958:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800095c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000960:	bf88      	it	hi
 8000962:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000966:	d81e      	bhi.n	80009a6 <__aeabi_dmul+0xde>
 8000968:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800096c:	bf08      	it	eq
 800096e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000972:	f150 0000 	adcs.w	r0, r0, #0
 8000976:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000980:	ea46 0101 	orr.w	r1, r6, r1
 8000984:	ea40 0002 	orr.w	r0, r0, r2
 8000988:	ea81 0103 	eor.w	r1, r1, r3
 800098c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	f300 80ab 	bgt.w	8000b00 <__aeabi_dmul+0x238>
 80009aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009ae:	bfde      	ittt	le
 80009b0:	2000      	movle	r0, #0
 80009b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009b6:	bd70      	pople	{r4, r5, r6, pc}
 80009b8:	f1c4 0400 	rsb	r4, r4, #0
 80009bc:	3c20      	subs	r4, #32
 80009be:	da35      	bge.n	8000a2c <__aeabi_dmul+0x164>
 80009c0:	340c      	adds	r4, #12
 80009c2:	dc1b      	bgt.n	80009fc <__aeabi_dmul+0x134>
 80009c4:	f104 0414 	add.w	r4, r4, #20
 80009c8:	f1c4 0520 	rsb	r5, r4, #32
 80009cc:	fa00 f305 	lsl.w	r3, r0, r5
 80009d0:	fa20 f004 	lsr.w	r0, r0, r4
 80009d4:	fa01 f205 	lsl.w	r2, r1, r5
 80009d8:	ea40 0002 	orr.w	r0, r0, r2
 80009dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009e8:	fa21 f604 	lsr.w	r6, r1, r4
 80009ec:	eb42 0106 	adc.w	r1, r2, r6
 80009f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f1c4 040c 	rsb	r4, r4, #12
 8000a00:	f1c4 0520 	rsb	r5, r4, #32
 8000a04:	fa00 f304 	lsl.w	r3, r0, r4
 8000a08:	fa20 f005 	lsr.w	r0, r0, r5
 8000a0c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a10:	ea40 0002 	orr.w	r0, r0, r2
 8000a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a1c:	f141 0100 	adc.w	r1, r1, #0
 8000a20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a24:	bf08      	it	eq
 8000a26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f1c4 0520 	rsb	r5, r4, #32
 8000a30:	fa00 f205 	lsl.w	r2, r0, r5
 8000a34:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a38:	fa20 f304 	lsr.w	r3, r0, r4
 8000a3c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a40:	ea43 0302 	orr.w	r3, r3, r2
 8000a44:	fa21 f004 	lsr.w	r0, r1, r4
 8000a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a4c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a50:	ea20 0002 	bic.w	r0, r0, r2
 8000a54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a5c:	bf08      	it	eq
 8000a5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	f094 0f00 	teq	r4, #0
 8000a68:	d10f      	bne.n	8000a8a <__aeabi_dmul+0x1c2>
 8000a6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a6e:	0040      	lsls	r0, r0, #1
 8000a70:	eb41 0101 	adc.w	r1, r1, r1
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	bf08      	it	eq
 8000a7a:	3c01      	subeq	r4, #1
 8000a7c:	d0f7      	beq.n	8000a6e <__aeabi_dmul+0x1a6>
 8000a7e:	ea41 0106 	orr.w	r1, r1, r6
 8000a82:	f095 0f00 	teq	r5, #0
 8000a86:	bf18      	it	ne
 8000a88:	4770      	bxne	lr
 8000a8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	eb43 0303 	adc.w	r3, r3, r3
 8000a94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a98:	bf08      	it	eq
 8000a9a:	3d01      	subeq	r5, #1
 8000a9c:	d0f7      	beq.n	8000a8e <__aeabi_dmul+0x1c6>
 8000a9e:	ea43 0306 	orr.w	r3, r3, r6
 8000aa2:	4770      	bx	lr
 8000aa4:	ea94 0f0c 	teq	r4, ip
 8000aa8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aac:	bf18      	it	ne
 8000aae:	ea95 0f0c 	teqne	r5, ip
 8000ab2:	d00c      	beq.n	8000ace <__aeabi_dmul+0x206>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	d1d1      	bne.n	8000a64 <__aeabi_dmul+0x19c>
 8000ac0:	ea81 0103 	eor.w	r1, r1, r3
 8000ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad2:	bf06      	itte	eq
 8000ad4:	4610      	moveq	r0, r2
 8000ad6:	4619      	moveq	r1, r3
 8000ad8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000adc:	d019      	beq.n	8000b12 <__aeabi_dmul+0x24a>
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dmul+0x222>
 8000ae4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ae8:	d113      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	d105      	bne.n	8000afc <__aeabi_dmul+0x234>
 8000af0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000af4:	bf1c      	itt	ne
 8000af6:	4610      	movne	r0, r2
 8000af8:	4619      	movne	r1, r3
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000afc:	ea81 0103 	eor.w	r1, r1, r3
 8000b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}

08000b1c <__aeabi_ddiv>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b2a:	bf1d      	ittte	ne
 8000b2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b30:	ea94 0f0c 	teqne	r4, ip
 8000b34:	ea95 0f0c 	teqne	r5, ip
 8000b38:	f000 f8a7 	bleq	8000c8a <__aeabi_ddiv+0x16e>
 8000b3c:	eba4 0405 	sub.w	r4, r4, r5
 8000b40:	ea81 0e03 	eor.w	lr, r1, r3
 8000b44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b4c:	f000 8088 	beq.w	8000c60 <__aeabi_ddiv+0x144>
 8000b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b74:	429d      	cmp	r5, r3
 8000b76:	bf08      	it	eq
 8000b78:	4296      	cmpeq	r6, r2
 8000b7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b82:	d202      	bcs.n	8000b8a <__aeabi_ddiv+0x6e>
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8a:	1ab6      	subs	r6, r6, r2
 8000b8c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba6:	bf22      	ittt	cs
 8000ba8:	1ab6      	subcs	r6, r6, r2
 8000baa:	4675      	movcs	r5, lr
 8000bac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bbe:	bf22      	ittt	cs
 8000bc0:	1ab6      	subcs	r6, r6, r2
 8000bc2:	4675      	movcs	r5, lr
 8000bc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bc8:	085b      	lsrs	r3, r3, #1
 8000bca:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bce:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bd6:	bf22      	ittt	cs
 8000bd8:	1ab6      	subcs	r6, r6, r2
 8000bda:	4675      	movcs	r5, lr
 8000bdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bee:	bf22      	ittt	cs
 8000bf0:	1ab6      	subcs	r6, r6, r2
 8000bf2:	4675      	movcs	r5, lr
 8000bf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bf8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bfc:	d018      	beq.n	8000c30 <__aeabi_ddiv+0x114>
 8000bfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c1a:	d1c0      	bne.n	8000b9e <__aeabi_ddiv+0x82>
 8000c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c20:	d10b      	bne.n	8000c3a <__aeabi_ddiv+0x11e>
 8000c22:	ea41 0100 	orr.w	r1, r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c2e:	e7b6      	b.n	8000b9e <__aeabi_ddiv+0x82>
 8000c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c34:	bf04      	itt	eq
 8000c36:	4301      	orreq	r1, r0
 8000c38:	2000      	moveq	r0, #0
 8000c3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c3e:	bf88      	it	hi
 8000c40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c44:	f63f aeaf 	bhi.w	80009a6 <__aeabi_dmul+0xde>
 8000c48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c4c:	bf04      	itt	eq
 8000c4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c56:	f150 0000 	adcs.w	r0, r0, #0
 8000c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c6c:	bfc2      	ittt	gt
 8000c6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c76:	bd70      	popgt	{r4, r5, r6, pc}
 8000c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7c:	f04f 0e00 	mov.w	lr, #0
 8000c80:	3c01      	subs	r4, #1
 8000c82:	e690      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c84:	ea45 0e06 	orr.w	lr, r5, r6
 8000c88:	e68d      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c8e:	ea94 0f0c 	teq	r4, ip
 8000c92:	bf08      	it	eq
 8000c94:	ea95 0f0c 	teqeq	r5, ip
 8000c98:	f43f af3b 	beq.w	8000b12 <__aeabi_dmul+0x24a>
 8000c9c:	ea94 0f0c 	teq	r4, ip
 8000ca0:	d10a      	bne.n	8000cb8 <__aeabi_ddiv+0x19c>
 8000ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ca6:	f47f af34 	bne.w	8000b12 <__aeabi_dmul+0x24a>
 8000caa:	ea95 0f0c 	teq	r5, ip
 8000cae:	f47f af25 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	e72c      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000cb8:	ea95 0f0c 	teq	r5, ip
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_ddiv+0x1b0>
 8000cbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cc2:	f43f aefd 	beq.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	e722      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000ccc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cd0:	bf18      	it	ne
 8000cd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd6:	f47f aec5 	bne.w	8000a64 <__aeabi_dmul+0x19c>
 8000cda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000cde:	f47f af0d 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000ce2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ce6:	f47f aeeb 	bne.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cea:	e712      	b.n	8000b12 <__aeabi_dmul+0x24a>

08000cec <__gedf2>:
 8000cec:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf0:	e006      	b.n	8000d00 <__cmpdf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__ledf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	e002      	b.n	8000d00 <__cmpdf2+0x4>
 8000cfa:	bf00      	nop

08000cfc <__cmpdf2>:
 8000cfc:	f04f 0c01 	mov.w	ip, #1
 8000d00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d10:	bf18      	it	ne
 8000d12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d16:	d01b      	beq.n	8000d50 <__cmpdf2+0x54>
 8000d18:	b001      	add	sp, #4
 8000d1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d1e:	bf0c      	ite	eq
 8000d20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d24:	ea91 0f03 	teqne	r1, r3
 8000d28:	bf02      	ittt	eq
 8000d2a:	ea90 0f02 	teqeq	r0, r2
 8000d2e:	2000      	moveq	r0, #0
 8000d30:	4770      	bxeq	lr
 8000d32:	f110 0f00 	cmn.w	r0, #0
 8000d36:	ea91 0f03 	teq	r1, r3
 8000d3a:	bf58      	it	pl
 8000d3c:	4299      	cmppl	r1, r3
 8000d3e:	bf08      	it	eq
 8000d40:	4290      	cmpeq	r0, r2
 8000d42:	bf2c      	ite	cs
 8000d44:	17d8      	asrcs	r0, r3, #31
 8000d46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d4a:	f040 0001 	orr.w	r0, r0, #1
 8000d4e:	4770      	bx	lr
 8000d50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d58:	d102      	bne.n	8000d60 <__cmpdf2+0x64>
 8000d5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d5e:	d107      	bne.n	8000d70 <__cmpdf2+0x74>
 8000d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d68:	d1d6      	bne.n	8000d18 <__cmpdf2+0x1c>
 8000d6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d6e:	d0d3      	beq.n	8000d18 <__cmpdf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cdrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4662      	mov	r2, ip
 8000d7e:	468c      	mov	ip, r1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4663      	mov	r3, ip
 8000d84:	e000      	b.n	8000d88 <__aeabi_cdcmpeq>
 8000d86:	bf00      	nop

08000d88 <__aeabi_cdcmpeq>:
 8000d88:	b501      	push	{r0, lr}
 8000d8a:	f7ff ffb7 	bl	8000cfc <__cmpdf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	bf48      	it	mi
 8000d92:	f110 0f00 	cmnmi.w	r0, #0
 8000d96:	bd01      	pop	{r0, pc}

08000d98 <__aeabi_dcmpeq>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff fff4 	bl	8000d88 <__aeabi_cdcmpeq>
 8000da0:	bf0c      	ite	eq
 8000da2:	2001      	moveq	r0, #1
 8000da4:	2000      	movne	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmplt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffea 	bl	8000d88 <__aeabi_cdcmpeq>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_dcmple>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffe0 	bl	8000d88 <__aeabi_cdcmpeq>
 8000dc8:	bf94      	ite	ls
 8000dca:	2001      	movls	r0, #1
 8000dcc:	2000      	movhi	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_dcmpge>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffce 	bl	8000d78 <__aeabi_cdrcmple>
 8000ddc:	bf94      	ite	ls
 8000dde:	2001      	movls	r0, #1
 8000de0:	2000      	movhi	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_dcmpgt>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffc4 	bl	8000d78 <__aeabi_cdrcmple>
 8000df0:	bf34      	ite	cc
 8000df2:	2001      	movcc	r0, #1
 8000df4:	2000      	movcs	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmpun>:
 8000dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e04:	d102      	bne.n	8000e0c <__aeabi_dcmpun+0x10>
 8000e06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e0a:	d10a      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e14:	d102      	bne.n	8000e1c <__aeabi_dcmpun+0x20>
 8000e16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e1a:	d102      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4770      	bx	lr
 8000e22:	f04f 0001 	mov.w	r0, #1
 8000e26:	4770      	bx	lr

08000e28 <__aeabi_d2iz>:
 8000e28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e30:	d215      	bcs.n	8000e5e <__aeabi_d2iz+0x36>
 8000e32:	d511      	bpl.n	8000e58 <__aeabi_d2iz+0x30>
 8000e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e3c:	d912      	bls.n	8000e64 <__aeabi_d2iz+0x3c>
 8000e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e52:	bf18      	it	ne
 8000e54:	4240      	negne	r0, r0
 8000e56:	4770      	bx	lr
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	4770      	bx	lr
 8000e5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e62:	d105      	bne.n	8000e70 <__aeabi_d2iz+0x48>
 8000e64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e68:	bf08      	it	eq
 8000e6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_d2uiz>:
 8000e78:	004a      	lsls	r2, r1, #1
 8000e7a:	d211      	bcs.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e80:	d211      	bcs.n	8000ea6 <__aeabi_d2uiz+0x2e>
 8000e82:	d50d      	bpl.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e8c:	d40e      	bmi.n	8000eac <__aeabi_d2uiz+0x34>
 8000e8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eaa:	d102      	bne.n	8000eb2 <__aeabi_d2uiz+0x3a>
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	4770      	bx	lr
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	4770      	bx	lr

08000eb8 <__aeabi_d2f>:
 8000eb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ebc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ec0:	bf24      	itt	cs
 8000ec2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ec6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eca:	d90d      	bls.n	8000ee8 <__aeabi_d2f+0x30>
 8000ecc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ed4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ed8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000edc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ee0:	bf08      	it	eq
 8000ee2:	f020 0001 	biceq.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000eec:	d121      	bne.n	8000f32 <__aeabi_d2f+0x7a>
 8000eee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ef2:	bfbc      	itt	lt
 8000ef4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ef8:	4770      	bxlt	lr
 8000efa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000efe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f02:	f1c2 0218 	rsb	r2, r2, #24
 8000f06:	f1c2 0c20 	rsb	ip, r2, #32
 8000f0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000f12:	bf18      	it	ne
 8000f14:	f040 0001 	orrne.w	r0, r0, #1
 8000f18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f24:	ea40 000c 	orr.w	r0, r0, ip
 8000f28:	fa23 f302 	lsr.w	r3, r3, r2
 8000f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f30:	e7cc      	b.n	8000ecc <__aeabi_d2f+0x14>
 8000f32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f36:	d107      	bne.n	8000f48 <__aeabi_d2f+0x90>
 8000f38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bxne	lr
 8000f48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_uldivmod>:
 8000f58:	b953      	cbnz	r3, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5a:	b94a      	cbnz	r2, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2800      	cmpeq	r0, #0
 8000f62:	bf1c      	itt	ne
 8000f64:	f04f 31ff 	movne.w	r1, #4294967295
 8000f68:	f04f 30ff 	movne.w	r0, #4294967295
 8000f6c:	f000 b9aa 	b.w	80012c4 <__aeabi_idiv0>
 8000f70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f78:	f000 f83c 	bl	8000ff4 <__udivmoddi4>
 8000f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_d2lz>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	f7ff ff0b 	bl	8000dac <__aeabi_dcmplt>
 8000f96:	b928      	cbnz	r0, 8000fa4 <__aeabi_d2lz+0x1c>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa0:	f000 b80a 	b.w	8000fb8 <__aeabi_d2ulz>
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000faa:	f000 f805 	bl	8000fb8 <__aeabi_d2ulz>
 8000fae:	4240      	negs	r0, r0
 8000fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2ulz>:
 8000fb8:	b5d0      	push	{r4, r6, r7, lr}
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__aeabi_d2ulz+0x34>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4606      	mov	r6, r0
 8000fc0:	460f      	mov	r7, r1
 8000fc2:	f7ff fc81 	bl	80008c8 <__aeabi_dmul>
 8000fc6:	f7ff ff57 	bl	8000e78 <__aeabi_d2uiz>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	f7ff fc02 	bl	80007d4 <__aeabi_ui2d>
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <__aeabi_d2ulz+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f7ff fc78 	bl	80008c8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4630      	mov	r0, r6
 8000fde:	4639      	mov	r1, r7
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_dsub>
 8000fe4:	f7ff ff48 	bl	8000e78 <__aeabi_d2uiz>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	bdd0      	pop	{r4, r6, r7, pc}
 8000fec:	3df00000 	.word	0x3df00000
 8000ff0:	41f00000 	.word	0x41f00000

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	468e      	mov	lr, r1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d14d      	bne.n	800109e <__udivmoddi4+0xaa>
 8001002:	428a      	cmp	r2, r1
 8001004:	4694      	mov	ip, r2
 8001006:	d969      	bls.n	80010dc <__udivmoddi4+0xe8>
 8001008:	fab2 f282 	clz	r2, r2
 800100c:	b152      	cbz	r2, 8001024 <__udivmoddi4+0x30>
 800100e:	fa01 f302 	lsl.w	r3, r1, r2
 8001012:	f1c2 0120 	rsb	r1, r2, #32
 8001016:	fa20 f101 	lsr.w	r1, r0, r1
 800101a:	fa0c fc02 	lsl.w	ip, ip, r2
 800101e:	ea41 0e03 	orr.w	lr, r1, r3
 8001022:	4094      	lsls	r4, r2
 8001024:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001028:	0c21      	lsrs	r1, r4, #16
 800102a:	fbbe f6f8 	udiv	r6, lr, r8
 800102e:	fa1f f78c 	uxth.w	r7, ip
 8001032:	fb08 e316 	mls	r3, r8, r6, lr
 8001036:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800103a:	fb06 f107 	mul.w	r1, r6, r7
 800103e:	4299      	cmp	r1, r3
 8001040:	d90a      	bls.n	8001058 <__udivmoddi4+0x64>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f106 30ff 	add.w	r0, r6, #4294967295
 800104a:	f080 811f 	bcs.w	800128c <__udivmoddi4+0x298>
 800104e:	4299      	cmp	r1, r3
 8001050:	f240 811c 	bls.w	800128c <__udivmoddi4+0x298>
 8001054:	3e02      	subs	r6, #2
 8001056:	4463      	add	r3, ip
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	b2a4      	uxth	r4, r4
 800105c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001060:	fb08 3310 	mls	r3, r8, r0, r3
 8001064:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001068:	fb00 f707 	mul.w	r7, r0, r7
 800106c:	42a7      	cmp	r7, r4
 800106e:	d90a      	bls.n	8001086 <__udivmoddi4+0x92>
 8001070:	eb1c 0404 	adds.w	r4, ip, r4
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295
 8001078:	f080 810a 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107c:	42a7      	cmp	r7, r4
 800107e:	f240 8107 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001082:	4464      	add	r4, ip
 8001084:	3802      	subs	r0, #2
 8001086:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108a:	1be4      	subs	r4, r4, r7
 800108c:	2600      	movs	r6, #0
 800108e:	b11d      	cbz	r5, 8001098 <__udivmoddi4+0xa4>
 8001090:	40d4      	lsrs	r4, r2
 8001092:	2300      	movs	r3, #0
 8001094:	e9c5 4300 	strd	r4, r3, [r5]
 8001098:	4631      	mov	r1, r6
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	428b      	cmp	r3, r1
 80010a0:	d909      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	f000 80ef 	beq.w	8001286 <__udivmoddi4+0x292>
 80010a8:	2600      	movs	r6, #0
 80010aa:	e9c5 0100 	strd	r0, r1, [r5]
 80010ae:	4630      	mov	r0, r6
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f683 	clz	r6, r3
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	428b      	cmp	r3, r1
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80f9 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb61 0303 	sbc.w	r3, r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	469e      	mov	lr, r3
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	d0e0      	beq.n	8001098 <__udivmoddi4+0xa4>
 80010d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80010da:	e7dd      	b.n	8001098 <__udivmoddi4+0xa4>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8092 	bne.w	800120e <__udivmoddi4+0x21a>
 80010ea:	eba1 010c 	sub.w	r1, r1, ip
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	2601      	movs	r6, #1
 80010f8:	0c20      	lsrs	r0, r4, #16
 80010fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80010fe:	fb07 1113 	mls	r1, r7, r3, r1
 8001102:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	4288      	cmp	r0, r1
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0101 	adds.w	r1, ip, r1
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	4288      	cmp	r0, r1
 800111a:	f200 80cb 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 800111e:	4643      	mov	r3, r8
 8001120:	1a09      	subs	r1, r1, r0
 8001122:	b2a4      	uxth	r4, r4
 8001124:	fbb1 f0f7 	udiv	r0, r1, r7
 8001128:	fb07 1110 	mls	r1, r7, r0, r1
 800112c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001130:	fb0e fe00 	mul.w	lr, lr, r0
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80bb 	bhi.w	80012be <__udivmoddi4+0x2ca>
 8001148:	4608      	mov	r0, r1
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79c      	b.n	800108e <__udivmoddi4+0x9a>
 8001154:	f1c6 0720 	rsb	r7, r6, #32
 8001158:	40b3      	lsls	r3, r6
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa20 f407 	lsr.w	r4, r0, r7
 8001166:	fa01 f306 	lsl.w	r3, r1, r6
 800116a:	431c      	orrs	r4, r3
 800116c:	40f9      	lsrs	r1, r7
 800116e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001172:	fa00 f306 	lsl.w	r3, r0, r6
 8001176:	fbb1 f8f9 	udiv	r8, r1, r9
 800117a:	0c20      	lsrs	r0, r4, #16
 800117c:	fa1f fe8c 	uxth.w	lr, ip
 8001180:	fb09 1118 	mls	r1, r9, r8, r1
 8001184:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001188:	fb08 f00e 	mul.w	r0, r8, lr
 800118c:	4288      	cmp	r0, r1
 800118e:	fa02 f206 	lsl.w	r2, r2, r6
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0101 	adds.w	r1, ip, r1
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	4288      	cmp	r0, r1
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	1a09      	subs	r1, r1, r0
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb1 f0f9 	udiv	r0, r1, r9
 80011b4:	fb09 1110 	mls	r1, r9, r0, r1
 80011b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80011c0:	458e      	cmp	lr, r1
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0101 	adds.w	r1, ip, r1
 80011c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	458e      	cmp	lr, r1
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4461      	add	r1, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9402 	umull	r9, r4, r0, r2
 80011de:	eba1 010e 	sub.w	r1, r1, lr
 80011e2:	42a1      	cmp	r1, r4
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46a6      	mov	lr, r4
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	b15d      	cbz	r5, 8001206 <__udivmoddi4+0x212>
 80011ee:	ebb3 0208 	subs.w	r2, r3, r8
 80011f2:	eb61 010e 	sbc.w	r1, r1, lr
 80011f6:	fa01 f707 	lsl.w	r7, r1, r7
 80011fa:	fa22 f306 	lsr.w	r3, r2, r6
 80011fe:	40f1      	lsrs	r1, r6
 8001200:	431f      	orrs	r7, r3
 8001202:	e9c5 7100 	strd	r7, r1, [r5]
 8001206:	2600      	movs	r6, #0
 8001208:	4631      	mov	r1, r6
 800120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120e:	f1c2 0320 	rsb	r3, r2, #32
 8001212:	40d8      	lsrs	r0, r3
 8001214:	fa0c fc02 	lsl.w	ip, ip, r2
 8001218:	fa21 f303 	lsr.w	r3, r1, r3
 800121c:	4091      	lsls	r1, r2
 800121e:	4301      	orrs	r1, r0
 8001220:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001224:	fa1f fe8c 	uxth.w	lr, ip
 8001228:	fbb3 f0f7 	udiv	r0, r3, r7
 800122c:	fb07 3610 	mls	r6, r7, r0, r3
 8001230:	0c0b      	lsrs	r3, r1, #16
 8001232:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001236:	fb00 f60e 	mul.w	r6, r0, lr
 800123a:	429e      	cmp	r6, r3
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0303 	adds.w	r3, ip, r3
 8001246:	f100 38ff 	add.w	r8, r0, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	429e      	cmp	r6, r3
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3802      	subs	r0, #2
 8001252:	4463      	add	r3, ip
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	b289      	uxth	r1, r1
 8001258:	fbb3 f6f7 	udiv	r6, r3, r7
 800125c:	fb07 3316 	mls	r3, r7, r6, r3
 8001260:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001264:	fb06 f30e 	mul.w	r3, r6, lr
 8001268:	428b      	cmp	r3, r1
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0101 	adds.w	r1, ip, r1
 8001270:	f106 38ff 	add.w	r8, r6, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	428b      	cmp	r3, r1
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3e02      	subs	r6, #2
 800127c:	4461      	add	r1, ip
 800127e:	1ac9      	subs	r1, r1, r3
 8001280:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	462e      	mov	r6, r5
 8001288:	4628      	mov	r0, r5
 800128a:	e705      	b.n	8001098 <__udivmoddi4+0xa4>
 800128c:	4606      	mov	r6, r0
 800128e:	e6e3      	b.n	8001058 <__udivmoddi4+0x64>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f8      	b.n	8001086 <__udivmoddi4+0x92>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4646      	mov	r6, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4620      	mov	r0, r4
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4640      	mov	r0, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4461      	add	r1, ip
 80012b8:	e732      	b.n	8001120 <__udivmoddi4+0x12c>
 80012ba:	4630      	mov	r0, r6
 80012bc:	e709      	b.n	80010d2 <__udivmoddi4+0xde>
 80012be:	4464      	add	r4, ip
 80012c0:	3802      	subs	r0, #2
 80012c2:	e742      	b.n	800114a <__udivmoddi4+0x156>

080012c4 <__aeabi_idiv0>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <apInit>:

cmd_t cmd;


void apInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  bool run_boot = false;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;

  reg = rtcBackupRegRead(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 fed0 	bl	8003078 <rtcBackupRegRead>
 80012d8:	4603      	mov	r3, r0
 80012da:	71bb      	strb	r3, [r7, #6]

  if (reg & (1<<0))
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <apInit+0x34>
  {
	run_boot = true;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
	reg &= ~(1<<0);
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	71bb      	strb	r3, [r7, #6]
	rtcBackupRegWrite(0, reg);
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 fece 	bl	8003098 <rtcBackupRegWrite>
  }


  if (resetGetCount() == 2)
 80012fc:	f001 fe74 	bl	8002fe8 <resetGetCount>
 8001300:	4603      	mov	r3, r0
 8001302:	2b02      	cmp	r3, #2
 8001304:	d101      	bne.n	800130a <apInit+0x42>
  {
	run_boot = true;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  }


  if (run_boot == false)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d011      	beq.n	800133a <apInit+0x72>
  {
	if (buttonGetPressed(_DEF_BUTTON1) == false)
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fe52 	bl	8001fc0 <buttonGetPressed>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10b      	bne.n	800133a <apInit+0x72>
	{
	  if (bootVerifyFw() == true && bootVerifyCrc() == true)
 8001322:	f000 f83f 	bl	80013a4 <bootVerifyFw>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <apInit+0x72>
 800132c:	f000 f858 	bl	80013e0 <bootVerifyCrc>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <apInit+0x72>
	  {
		bootJumpToFw();
 8001336:	f000 f88b 	bl	8001450 <bootJumpToFw>
	  }
	}
  }


  cliOpen(_DEF_UART1, 57600);
 800133a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800133e:	2000      	movs	r0, #0
 8001340:	f000 ff42 	bl	80021c8 <cliOpen>

  cmdInit(&cmd);
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <apInit+0x98>)
 8001346:	f001 f9ab 	bl	80026a0 <cmdInit>
  cmdOpen(&cmd, _DEF_UART1, 57600);
 800134a:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800134e:	2100      	movs	r1, #0
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <apInit+0x98>)
 8001352:	f001 f9c1 	bl	80026d8 <cmdOpen>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000468 	.word	0x20000468

08001364 <apMain>:

void apMain(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 800136a:	f000 fb04 	bl	8001976 <millis>
 800136e:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 100)
 8001370:	f000 fb01 	bl	8001976 <millis>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b63      	cmp	r3, #99	; 0x63
 800137c:	d905      	bls.n	800138a <apMain+0x26>
    {
      pre_time = millis();
 800137e:	f000 fafa 	bl	8001976 <millis>
 8001382:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8001384:	2000      	movs	r0, #0
 8001386:	f001 fd97 	bl	8002eb8 <ledToggle>
    }

    //cliMain();
    if (cmdReceivePacket(&cmd) == true)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <apMain+0x3c>)
 800138c:	f001 f9c6 	bl	800271c <cmdReceivePacket>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0ec      	beq.n	8001370 <apMain+0xc>
    {
      bootProcessCmd(&cmd);
 8001396:	4802      	ldr	r0, [pc, #8]	; (80013a0 <apMain+0x3c>)
 8001398:	f000 f86a 	bl	8001470 <bootProcessCmd>
    if (millis()-pre_time >= 100)
 800139c:	e7e8      	b.n	8001370 <apMain+0xc>
 800139e:	bf00      	nop
 80013a0:	20000468 	.word	0x20000468

080013a4 <bootVerifyFw>:
{

}

bool bootVerifyFw(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  uint32_t *jump_addr = (uint32_t *)(FLASH_ADDR_FW + 4);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <bootVerifyFw+0x30>)
 80013ac:	607b      	str	r3, [r7, #4]


  if ((*jump_addr) >= FLASH_ADDR_START && (*jump_addr) <  FLASH_ADDR_END)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <bootVerifyFw+0x34>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d906      	bls.n	80013c6 <bootVerifyFw+0x22>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <bootVerifyFw+0x38>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d801      	bhi.n	80013c6 <bootVerifyFw+0x22>
  {
    return true;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <bootVerifyFw+0x24>
  }
  else
  {
    return false;
 80013c6:	2300      	movs	r3, #0
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	08010404 	.word	0x08010404
 80013d8:	0800ffff 	.word	0x0800ffff
 80013dc:	0807ffff 	.word	0x0807ffff

080013e0 <bootVerifyCrc>:

bool bootVerifyCrc(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
  uint8_t *p_data;
  uint16_t fw_crc;

  if (p_firm_tag->magic_number != FLASH_MAGIC_NUMBER)
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <bootVerifyCrc+0x68>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <bootVerifyCrc+0x6c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d001      	beq.n	80013f6 <bootVerifyCrc+0x16>
  {
    return false;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e024      	b.n	8001440 <bootVerifyCrc+0x60>
  }

  p_data = (uint8_t *)p_firm_tag->tag_flash_start;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <bootVerifyCrc+0x68>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	60bb      	str	r3, [r7, #8]
  fw_crc = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	80fb      	strh	r3, [r7, #6]

  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e00b      	b.n	8001420 <bootVerifyCrc+0x40>
  {
    utilUpdateCrc(&fw_crc, p_data[i]);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd53 	bl	8001ec0 <utilUpdateCrc>
  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <bootVerifyCrc+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8ed      	bhi.n	8001408 <bootVerifyCrc+0x28>
  }

  if (fw_crc == p_firm_tag->tag_flash_crc)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	461a      	mov	r2, r3
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <bootVerifyCrc+0x68>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	429a      	cmp	r2, r3
 8001438:	d101      	bne.n	800143e <bootVerifyCrc+0x5e>
  {
    return true;
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <bootVerifyCrc+0x60>
  }
  else
  {
    return false;
 800143e:	2300      	movs	r3, #0
  }
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000008 	.word	0x20000008
 800144c:	5555aaaa 	.word	0x5555aaaa

08001450 <bootJumpToFw>:

void bootJumpToFw(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  void (**jump_func)(void) = (void (**)(void))(FLASH_ADDR_FW + 4);
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <bootJumpToFw+0x1c>)
 8001458:	607b      	str	r3, [r7, #4]

  bspDeInit();
 800145a:	f000 fa5b 	bl	8001914 <bspDeInit>
  (*jump_func)();
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4798      	blx	r3
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	08010404 	.word	0x08010404

08001470 <bootProcessCmd>:

void bootProcessCmd(cmd_t *p_cmd)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
 8001476:	6078      	str	r0, [r7, #4]
  switch(p_cmd->rx_packet.cmd)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
 800147c:	2b10      	cmp	r3, #16
 800147e:	d845      	bhi.n	800150c <bootProcessCmd+0x9c>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <bootProcessCmd+0x18>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	080014d5 	.word	0x080014d5
 800148c:	080014dd 	.word	0x080014dd
 8001490:	080014e5 	.word	0x080014e5
 8001494:	080014ed 	.word	0x080014ed
 8001498:	080014f5 	.word	0x080014f5
 800149c:	080014fd 	.word	0x080014fd
 80014a0:	0800150d 	.word	0x0800150d
 80014a4:	0800150d 	.word	0x0800150d
 80014a8:	08001505 	.word	0x08001505
 80014ac:	0800150d 	.word	0x0800150d
 80014b0:	0800150d 	.word	0x0800150d
 80014b4:	0800150d 	.word	0x0800150d
 80014b8:	0800150d 	.word	0x0800150d
 80014bc:	0800150d 	.word	0x0800150d
 80014c0:	0800150d 	.word	0x0800150d
 80014c4:	0800150d 	.word	0x0800150d
 80014c8:	080014cd 	.word	0x080014cd
  {
    case BOOT_CMD_LED_CONTROL:
      bootCmdLedControl(p_cmd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f993 	bl	80017f8 <bootCmdLedControl>
      break;
 80014d2:	e025      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_VERSION:
      bootCmdReadBootVersion(p_cmd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f827 	bl	8001528 <bootCmdReadBootVersion>
      break;
 80014da:	e021      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_NAME:
      bootCmdReadBootName(p_cmd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f839 	bl	8001554 <bootCmdReadBootName>
      break;
 80014e2:	e01d      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_VERSION:
      bootCmdReadFirmVersion(p_cmd);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f849 	bl	800157c <bootCmdReadFirmVersion>
      break;
 80014ea:	e019      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_NAME:
      bootCmdReadFirmName(p_cmd);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f85b 	bl	80015a8 <bootCmdReadFirmName>
      break;
 80014f2:	e015      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_ERASE:
      bootCmdFlashErase(p_cmd);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f86b 	bl	80015d0 <bootCmdFlashErase>
      break;
 80014fa:	e011      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_WRITE:
      bootCmdFlashWrite(p_cmd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8d6 	bl	80016ae <bootCmdFlashWrite>
      break;
 8001502:	e00d      	b.n	8001520 <bootProcessCmd+0xb0>

    case BOOT_CMD_JUMP_TO_FW:
      bootCmdJumpToFw(p_cmd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f946 	bl	8001796 <bootCmdJumpToFw>
      break;
 800150a:	e009      	b.n	8001520 <bootProcessCmd+0xb0>

    default:
      cmdSendResp(p_cmd, p_cmd->rx_packet.cmd, BOOT_ERR_WRONG_CMD, NULL, 0);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e19      	ldrb	r1, [r3, #24]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	2201      	movs	r2, #1
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f001 f9e3 	bl	80028e4 <cmdSendResp>
      break;
 800151e:	bf00      	nop
  }
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <bootCmdReadBootVersion>:

void bootCmdReadBootVersion(cmd_t *p_cmd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_VERSION, CMD_OK, (uint8_t *)p_boot_ver->version, 32);
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <bootCmdReadBootVersion+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	2320      	movs	r3, #32
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	4613      	mov	r3, r2
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f001 f9cf 	bl	80028e4 <cmdSendResp>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <bootCmdReadBootName>:

void bootCmdReadBootName(cmd_t *p_cmd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_NAME, CMD_OK, (uint8_t *)p_boot_ver->name, 32);
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <bootCmdReadBootName+0x24>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3320      	adds	r3, #32
 8001562:	2220      	movs	r2, #32
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	2101      	movs	r1, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f001 f9ba 	bl	80028e4 <cmdSendResp>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000

0800157c <bootCmdReadFirmVersion>:

void bootCmdReadFirmVersion(cmd_t *p_cmd)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_VERSION, CMD_OK, (uint8_t *)p_firm_ver->version, 32);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <bootCmdReadFirmVersion+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	2320      	movs	r3, #32
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	2200      	movs	r2, #0
 8001592:	2102      	movs	r1, #2
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 f9a5 	bl	80028e4 <cmdSendResp>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000004 	.word	0x20000004

080015a8 <bootCmdReadFirmName>:

void bootCmdReadFirmName(cmd_t *p_cmd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_NAME, CMD_OK, (uint8_t *)p_firm_ver->name, 32);
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <bootCmdReadFirmName+0x24>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3320      	adds	r3, #32
 80015b6:	2220      	movs	r2, #32
 80015b8:	9200      	str	r2, [sp, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	2103      	movs	r1, #3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f001 f990 	bl	80028e4 <cmdSendResp>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000004 	.word	0x20000004

080015d0 <bootCmdFlashErase>:

void bootCmdFlashErase(cmd_t *p_cmd)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3318      	adds	r3, #24
 80015e0:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80015f2:	3301      	adds	r3, #1
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001606:	3302      	adds	r3, #2
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	461a      	mov	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800161a:	3303      	adds	r3, #3
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	061b      	lsls	r3, r3, #24
 8001620:	461a      	mov	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800162e:	3304      	adds	r3, #4
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800163a:	3305      	adds	r3, #5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4313      	orrs	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800164e:	3306      	adds	r3, #6
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	041b      	lsls	r3, r3, #16
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4313      	orrs	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001662:	3307      	adds	r3, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	461a      	mov	r2, r3
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f8f6 	bl	8001864 <bootIsFlashRange>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <bootCmdFlashErase+0xc2>
  {
    // 메모리를 지움.
    if (flashErase(addr, length) != true)
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f001 f9c7 	bl	8002a14 <flashErase>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d004      	beq.n	8001696 <bootCmdFlashErase+0xc6>
    {
      err_code = BOOT_ERR_FLASH_ERASE;
 800168c:	2303      	movs	r3, #3
 800168e:	75fb      	strb	r3, [r7, #23]
 8001690:	e001      	b.n	8001696 <bootCmdFlashErase+0xc6>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 8001692:	2304      	movs	r3, #4
 8001694:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_ERASE, err_code, NULL, 0);
 8001696:	7dfa      	ldrb	r2, [r7, #23]
 8001698:	2300      	movs	r3, #0
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2104      	movs	r1, #4
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 f91f 	bl	80028e4 <cmdSendResp>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <bootCmdFlashWrite>:

void bootCmdFlashWrite(cmd_t *p_cmd)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b088      	sub	sp, #32
 80016b2:	af02      	add	r7, sp, #8
 80016b4:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3318      	adds	r3, #24
 80016be:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016d0:	3301      	adds	r3, #1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	021b      	lsls	r3, r3, #8
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4313      	orrs	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016e4:	3302      	adds	r3, #2
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016f8:	3303      	adds	r3, #3
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800170c:	3304      	adds	r3, #4
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001718:	3305      	adds	r3, #5
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
 8001724:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800172c:	3306      	adds	r3, #6
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	461a      	mov	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
 8001738:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001740:	3307      	adds	r3, #7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	461a      	mov	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4313      	orrs	r3, r2
 800174c:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f887 	bl	8001864 <bootIsFlashRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00e      	beq.n	800177a <bootCmdFlashWrite+0xcc>
  {
    // 데이터를 Write.
    if (flashWrite(addr, &p_packet->data[8], length) != true)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001762:	3308      	adds	r3, #8
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	4619      	mov	r1, r3
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f001 f9a6 	bl	8002aba <flashWrite>
 800176e:	4603      	mov	r3, r0
 8001770:	2b01      	cmp	r3, #1
 8001772:	d004      	beq.n	800177e <bootCmdFlashWrite+0xd0>
    {
      err_code = BOOT_ERR_FLASH_WRITE;
 8001774:	2305      	movs	r3, #5
 8001776:	75fb      	strb	r3, [r7, #23]
 8001778:	e001      	b.n	800177e <bootCmdFlashWrite+0xd0>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 800177a:	2304      	movs	r3, #4
 800177c:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_WRITE, err_code, NULL, 0);
 800177e:	7dfa      	ldrb	r2, [r7, #23]
 8001780:	2300      	movs	r3, #0
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	2105      	movs	r1, #5
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f001 f8ab 	bl	80028e4 <cmdSendResp>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <bootCmdJumpToFw>:

void bootCmdJumpToFw(cmd_t *p_cmd)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af02      	add	r7, sp, #8
 800179c:	6078      	str	r0, [r7, #4]
  if (bootVerifyFw() == true)
 800179e:	f7ff fe01 	bl	80013a4 <bootVerifyFw>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01b      	beq.n	80017e0 <bootCmdJumpToFw+0x4a>
  {
    if (bootVerifyCrc() == true)
 80017a8:	f7ff fe1a 	bl	80013e0 <bootVerifyCrc>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <bootCmdJumpToFw+0x38>
    {
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, CMD_OK, NULL, 0);
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2108      	movs	r1, #8
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f001 f891 	bl	80028e4 <cmdSendResp>
      delay(100);
 80017c2:	2064      	movs	r0, #100	; 0x64
 80017c4:	f000 f8cc 	bl	8001960 <delay>
      bootJumpToFw();
 80017c8:	f7ff fe42 	bl	8001450 <bootJumpToFw>
  }
  else
  {
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
  }
}
 80017cc:	e010      	b.n	80017f0 <bootCmdJumpToFw+0x5a>
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_FW_CRC, NULL, 0);
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2208      	movs	r2, #8
 80017d6:	2108      	movs	r1, #8
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f001 f883 	bl	80028e4 <cmdSendResp>
}
 80017de:	e007      	b.n	80017f0 <bootCmdJumpToFw+0x5a>
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2207      	movs	r2, #7
 80017e8:	2108      	movs	r1, #8
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f001 f87a 	bl	80028e4 <cmdSendResp>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <bootCmdLedControl>:

void bootCmdLedControl(cmd_t *p_cmd)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  cmd_packet_t *p_packet;


  p_packet = &p_cmd->rx_packet;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3318      	adds	r3, #24
 8001808:	60bb      	str	r3, [r7, #8]

  if (p_packet->data[0] == 0)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d103      	bne.n	800181e <bootCmdLedControl+0x26>
  {
    ledOff(_DEF_LED1);
 8001816:	2000      	movs	r0, #0
 8001818:	f001 fb2e 	bl	8002e78 <ledOff>
 800181c:	e015      	b.n	800184a <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 1)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d103      	bne.n	8001832 <bootCmdLedControl+0x3a>
  {
    ledOn(_DEF_LED1);
 800182a:	2000      	movs	r0, #0
 800182c:	f001 fb04 	bl	8002e38 <ledOn>
 8001830:	e00b      	b.n	800184a <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 2)
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d103      	bne.n	8001846 <bootCmdLedControl+0x4e>
  {
    ledToggle(_DEF_LED1);
 800183e:	2000      	movs	r0, #0
 8001840:	f001 fb3a 	bl	8002eb8 <ledToggle>
 8001844:	e001      	b.n	800184a <bootCmdLedControl+0x52>
  }
  else
  {
    err_code = BOOT_ERR_LED;
 8001846:	2302      	movs	r3, #2
 8001848:	73fb      	strb	r3, [r7, #15]
  }

  cmdSendResp(p_cmd, BOOT_CMD_LED_CONTROL, err_code, NULL, 0);
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	2110      	movs	r1, #16
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 f845 	bl	80028e4 <cmdSendResp>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <bootIsFlashRange>:

bool bootIsFlashRange(uint32_t addr_begin, uint32_t length)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800186e:	2300      	movs	r3, #0
 8001870:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_end;
  uint32_t flash_start;
  uint32_t flash_end;


  addr_end = addr_begin + length - 1;
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	3b01      	subs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]

  flash_start = FLASH_ADDR_START;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <bootIsFlashRange+0x54>)
 800187e:	60fb      	str	r3, [r7, #12]
  flash_end   = FLASH_ADDR_END;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <bootIsFlashRange+0x58>)
 8001882:	60bb      	str	r3, [r7, #8]

  if ((addr_begin >= flash_start) && (addr_begin < flash_end) &&
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d30d      	bcc.n	80018a8 <bootIsFlashRange+0x44>
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d209      	bcs.n	80018a8 <bootIsFlashRange+0x44>
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d305      	bcc.n	80018a8 <bootIsFlashRange+0x44>
      (addr_end   >= flash_start) && (addr_end   < flash_end))
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d201      	bcs.n	80018a8 <bootIsFlashRange+0x44>
  {
    ret = true;
 80018a4:	2301      	movs	r3, #1
 80018a6:	75fb      	strb	r3, [r7, #23]
  }


  return ret;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	08010000 	.word	0x08010000
 80018bc:	08080000 	.word	0x08080000

080018c0 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
  HAL_Init();
 80018c6:	f002 fb17 	bl	8003ef8 <HAL_Init>
  SystemClock_Config();
 80018ca:	f000 f85b 	bl	8001984 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <bspInit+0x50>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <bspInit+0x50>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <bspInit+0x50>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <bspInit+0x50>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <bspInit+0x50>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <bspInit+0x50>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <bspDeInit>:

void bspDeInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  HAL_RCC_DeInit();
 800191a:	f004 fb91 	bl	8006040 <HAL_RCC_DeInit>

  // Disable Interrupts
  //
  for (int i=0; i<8; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e00f      	b.n	8001944 <bspDeInit+0x30>
  {
    NVIC->ICER[i] = 0xFFFFFFFF;
 8001924:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <bspDeInit+0x44>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3320      	adds	r3, #32
 800192a:	f04f 31ff 	mov.w	r1, #4294967295
 800192e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001932:	f3bf 8f4f 	dsb	sy
}
 8001936:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001938:	f3bf 8f6f 	isb	sy
}
 800193c:	bf00      	nop
  for (int i=0; i<8; i++)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b07      	cmp	r3, #7
 8001948:	ddec      	ble.n	8001924 <bspDeInit+0x10>
    __DSB();
    __ISB();
  }
  SysTick->CTRL = 0;
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <bspDeInit+0x48>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000e010 	.word	0xe000e010

08001960 <delay>:

void delay(uint32_t ms)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f002 fb37 	bl	8003fdc <HAL_Delay>
#endif
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <millis>:

uint32_t millis(void)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800197a:	f002 fb23 	bl	8003fc4 <HAL_GetTick>
 800197e:	4603      	mov	r3, r0
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09a      	sub	sp, #104	; 0x68
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f005 ff00 	bl	8007798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <SystemClock_Config+0xfc>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a2f      	ldr	r2, [pc, #188]	; (8001a80 <SystemClock_Config+0xfc>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <SystemClock_Config+0xfc>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <SystemClock_Config+0x100>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <SystemClock_Config+0x100>)
 80019e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SystemClock_Config+0x100>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019f2:	2309      	movs	r3, #9
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019fc:	2301      	movs	r3, #1
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a00:	2302      	movs	r3, #2
 8001a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a0a:	2319      	movs	r3, #25
 8001a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a0e:	23c0      	movs	r3, #192	; 0xc0
 8001a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a16:	2304      	movs	r3, #4
 8001a18:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fdd0 	bl	80055c4 <HAL_RCC_OscConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a2a:	f000 f82d 	bl	8001a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2e:	230f      	movs	r3, #15
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	2103      	movs	r1, #3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 f828 	bl	8005aa0 <HAL_RCC_ClockConfig>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a56:	f000 f817 	bl	8001a88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a62:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f004 f9f9 	bl	8005e60 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a74:	f000 f808 	bl	8001a88 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3768      	adds	r7, #104	; 0x68
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0x4>

08001aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <HardFault_Handler+0x4>

08001af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <MemManage_Handler+0x4>

08001af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <BusFault_Handler+0x4>

08001afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <UsageFault_Handler+0x4>

08001b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f002 fa34 	bl	8003f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <USART1_IRQHandler+0x10>)
 8001b3e:	f004 fdf7 	bl	8006730 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001228 	.word	0x20001228

08001b4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <DMA2_Stream2_IRQHandler+0x10>)
 8001b52:	f002 fd31 	bl	80045b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200012c8 	.word	0x200012c8

08001b60 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA2_Stream7_IRQHandler+0x10>)
 8001b66:	f002 fd27 	bl	80045b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20001268 	.word	0x20001268

08001b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_kill>:

int _kill(int pid, int sig)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b8e:	f005 fdcb 	bl	8007728 <__errno>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2216      	movs	r2, #22
 8001b96:	601a      	str	r2, [r3, #0]
	return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_exit>:

void _exit (int status)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bb6:	e7fe      	b.n	8001bb6 <_exit+0x12>

08001bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00a      	b.n	8001be0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bca:	f3af 8000 	nop.w
 8001bce:	4601      	mov	r1, r0
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf0      	blt.n	8001bca <_read+0x12>
	}

return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e009      	b.n	8001c18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbf1      	blt.n	8001c04 <_write+0x12>
	}
	return len;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_close>:

int _close(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c52:	605a      	str	r2, [r3, #4]
	return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_isatty>:

int _isatty(int file)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	return 1;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f005 fd30 	bl	8007728 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20020000 	.word	0x20020000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	20000ca8 	.word	0x20000ca8
 8001cfc:	20001360 	.word	0x20001360

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <SystemInit+0x28>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <SystemInit+0x28>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SystemInit+0x28>)
 8001d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
  ldr  r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d4c:	f842 3b04 	str.w	r3, [r2], #4

08001d50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd3 	bl	8001d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f005 fceb 	bl	8007734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f005 fcd7 	bl	8007710 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d68:	0800c534 	.word	0x0800c534
  ldr  r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d70:	2000044c 	.word	0x2000044c
  ldr  r2, =_sbss
 8001d74:	2000044c 	.word	0x2000044c
  ldr  r3, = _ebss
 8001d78:	2000135c 	.word	0x2000135c

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>

08001d7e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b087      	sub	sp, #28
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]

  return ret;
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	e026      	b.n	8001e18 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d009      	beq.n	8001de6 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	441a      	add	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	440b      	add	r3, r1
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00c      	beq.n	8001e0c <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6892      	ldr	r2, [r2, #8]
 8001dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e00:	fb01 f202 	mul.w	r2, r1, r2
 8001e04:	1a9a      	subs	r2, r3, r2
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e002      	b.n	8001e12 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001e10:	e006      	b.n	8001e20 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3301      	adds	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8d4      	bhi.n	8001dca <qbufferRead+0x16>
    }
  }

  return ret;
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6892      	ldr	r2, [r2, #8]
 8001e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e48:	fb01 f202 	mul.w	r2, r1, r2
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e50:	68fb      	ldr	r3, [r7, #12]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001e64:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <DWT_Delay_Init+0x58>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <DWT_Delay_Init+0x58>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <DWT_Delay_Init+0x58>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <DWT_Delay_Init+0x58>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001e9a:	bf00      	nop
     __ASM volatile ("NOP");
 8001e9c:	bf00      	nop
     __ASM volatile ("NOP");
 8001e9e:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <DWT_Delay_Init+0x5c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001eac:	2301      	movs	r3, #1
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000edf0 	.word	0xe000edf0
 8001ebc:	e0001000 	.word	0xe0001000

08001ec0 <utilUpdateCrc>:
                                0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
                                0x820D, 0x8207, 0x0202 };

void utilUpdateCrc(uint16_t *p_crc_cur, uint8_t data_in)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  uint16_t crc;
  uint16_t i;

  crc = *p_crc_cur;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	81fb      	strh	r3, [r7, #14]

  i = ((unsigned short)(crc >> 8) ^ data_in) & 0xFF;
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4053      	eors	r3, r2
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	81bb      	strh	r3, [r7, #12]
  *p_crc_cur = (crc << 8) ^ util_crc_table[i];
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <utilUpdateCrc+0x4c>)
 8001eee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4053      	eors	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	801a      	strh	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20000010 	.word	0x20000010

08001f10 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
  bool ret = true;
 8001f16:	2301      	movs	r3, #1
 8001f18:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <buttonInit+0xa0>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	4a1f      	ldr	r2, [pc, #124]	; (8001fb0 <buttonInit+0xa0>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6313      	str	r3, [r2, #48]	; 0x30
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <buttonInit+0xa0>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e023      	b.n	8001f96 <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001f4e:	4919      	ldr	r1, [pc, #100]	; (8001fb4 <buttonInit+0xa4>)
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 8001f62:	4914      	ldr	r1, [pc, #80]	; (8001fb4 <buttonInit+0xa4>)
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3308      	adds	r3, #8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001f76:	490f      	ldr	r1, [pc, #60]	; (8001fb4 <buttonInit+0xa4>)
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	1d3a      	adds	r2, r7, #4
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f866 	bl	800505c <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	ddd8      	ble.n	8001f4e <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001f9c:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <buttonInit+0xa8>)
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <buttonInit+0xac>)
 8001fa0:	f000 fa5a 	bl	8002458 <cliAdd>
#endif

  return ret;
 8001fa4:	7efb      	ldrb	r3, [r7, #27]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	20000210 	.word	0x20000210
 8001fb8:	080020a1 	.word	0x080020a1
 8001fbc:	0800bd48 	.word	0x0800bd48

08001fc0 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4a30      	ldr	r2, [pc, #192]	; (800209c <buttonGetPressed+0xdc>)
 8001fda:	4413      	add	r3, r2
 8001fdc:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <buttonGetPressed+0x28>
  {
    return false;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e054      	b.n	8002092 <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	7b9b      	ldrb	r3, [r3, #14]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <buttonGetPressed+0x36>
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <buttonGetPressed+0x66>
 8001ff4:	e04c      	b.n	8002090 <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f003 fa92 	bl	800552c <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	7b1b      	ldrb	r3, [r3, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d13a      	bne.n	800208a <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8002014:	f7ff fcaf 	bl	8001976 <millis>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2201      	movs	r2, #1
 8002022:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 8002024:	e031      	b.n	800208a <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f003 fa7a 	bl	800552c <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	461a      	mov	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	7b1b      	ldrb	r3, [r3, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d114      	bne.n	800206e <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8002044:	f7ff fc97 	bl	8001976 <millis>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d91a      	bls.n	800208e <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2201      	movs	r2, #1
 800205c:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	7b5b      	ldrb	r3, [r3, #13]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 800206c:	e00f      	b.n	800208e <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	7b5b      	ldrb	r3, [r3, #13]
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
		  break;
 8002088:	e001      	b.n	800208e <buttonGetPressed+0xce>
  		  break;
 800208a:	bf00      	nop
 800208c:	e000      	b.n	8002090 <buttonGetPressed+0xd0>
		  break;
 800208e:	bf00      	nop
  }
  return ret;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000210 	.word	0x20000210

080020a0 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d128      	bne.n	8002106 <cliButton+0x66>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	4919      	ldr	r1, [pc, #100]	; (8002120 <cliButton+0x80>)
 80020ba:	2000      	movs	r0, #0
 80020bc:	4798      	blx	r3
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <cliButton+0x66>
  {
    while(cliKeepLoop())
 80020c4:	e018      	b.n	80020f8 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	e00c      	b.n	80020e6 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff75 	bl	8001fc0 <buttonGetPressed>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4619      	mov	r1, r3
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <cliButton+0x84>)
 80020dc:	f000 f8ac 	bl	8002238 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	ddef      	ble.n	80020cc <cliButton+0x2c>
      }
      cliPrintf("\n");
 80020ec:	480e      	ldr	r0, [pc, #56]	; (8002128 <cliButton+0x88>)
 80020ee:	f000 f8a3 	bl	8002238 <cliPrintf>

      delay(100);
 80020f2:	2064      	movs	r0, #100	; 0x64
 80020f4:	f7ff fc34 	bl	8001960 <delay>
    while(cliKeepLoop())
 80020f8:	f000 f998 	bl	800242c <cliKeepLoop>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e1      	bne.n	80020c6 <cliButton+0x26>
    }

    ret = true;
 8002102:	2301      	movs	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <cliButton+0x8c>)
 8002114:	f000 f890 	bl	8002238 <cliPrintf>
  }
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	0800bd50 	.word	0x0800bd50
 8002124:	0800bd58 	.word	0x0800bd58
 8002128:	0800bd5c 	.word	0x0800bd5c
 800212c:	0800bd60 	.word	0x0800bd60

08002130 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <cliInit+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <cliInit+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <cliInit+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <cliInit+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <cliInit+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <cliInit+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <cliInit+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <cliInit+0x74>)
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <cliInit+0x78>)
 800216a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <cliInit+0x74>)
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <cliInit+0x7c>)
 8002172:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <cliInit+0x74>)
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <cliInit+0x80>)
 800217a:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <cliInit+0x74>)
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <cliInit+0x84>)
 8002182:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <cliInit+0x74>)
 8002188:	f000 f83c 	bl	8002204 <cliLineClean>


  cliAdd("help", cliShowList);
 800218c:	490a      	ldr	r1, [pc, #40]	; (80021b8 <cliInit+0x88>)
 800218e:	480b      	ldr	r0, [pc, #44]	; (80021bc <cliInit+0x8c>)
 8002190:	f000 f962 	bl	8002458 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8002194:	490a      	ldr	r1, [pc, #40]	; (80021c0 <cliInit+0x90>)
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <cliInit+0x94>)
 8002198:	f000 f95e 	bl	8002458 <cliAdd>

  return true;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000cac 	.word	0x20000cac
 80021a8:	080022e9 	.word	0x080022e9
 80021ac:	08002339 	.word	0x08002339
 80021b0:	08002391 	.word	0x08002391
 80021b4:	080023d9 	.word	0x080023d9
 80021b8:	080024ed 	.word	0x080024ed
 80021bc:	0800bd70 	.word	0x0800bd70
 80021c0:	0800255d 	.word	0x0800255d
 80021c4:	0800bd78 	.word	0x0800bd78

080021c8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <cliOpen+0x38>)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <cliOpen+0x38>)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 ff97 	bl	8003118 <uartOpen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <cliOpen+0x38>)
 80021f0:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 80021f2:	4b03      	ldr	r3, [pc, #12]	; (8002200 <cliOpen+0x38>)
 80021f4:	7a1b      	ldrb	r3, [r3, #8]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000cac 	.word	0x20000cac

08002204 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8002238:	b40f      	push	{r0, r1, r2, r3}
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <cliPrintf+0x44>)
 8002248:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f103 0011 	add.w	r0, r3, #17
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002258:	f006 fe40 	bl	8008edc <vsniprintf>
 800225c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	7818      	ldrb	r0, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3311      	adds	r3, #17
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4619      	mov	r1, r3
 800226a:	f001 f8d3 	bl	8003414 <uartWrite>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002278:	b004      	add	sp, #16
 800227a:	4770      	bx	lr
 800227c:	20000cac 	.word	0x20000cac

08002280 <cliToUpper>:

void cliToUpper(char *str)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002288:	2300      	movs	r3, #0
 800228a:	81fb      	strh	r3, [r7, #14]
 800228c:	e018      	b.n	80022c0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002298:	7b7b      	ldrb	r3, [r7, #13]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d014      	beq.n	80022c8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800229e:	7b7b      	ldrb	r3, [r7, #13]
 80022a0:	2b60      	cmp	r3, #96	; 0x60
 80022a2:	d905      	bls.n	80022b0 <cliToUpper+0x30>
 80022a4:	7b7b      	ldrb	r3, [r7, #13]
 80022a6:	2b7a      	cmp	r3, #122	; 0x7a
 80022a8:	d802      	bhi.n	80022b0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80022aa:	7b7b      	ldrb	r3, [r7, #13]
 80022ac:	3b20      	subs	r3, #32
 80022ae:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	7b7a      	ldrb	r2, [r7, #13]
 80022b8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80022ba:	89fb      	ldrh	r3, [r7, #14]
 80022bc:	3301      	adds	r3, #1
 80022be:	81fb      	strh	r3, [r7, #14]
 80022c0:	89fb      	ldrh	r3, [r7, #14]
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	d9e3      	bls.n	800228e <cliToUpper+0xe>
 80022c6:	e000      	b.n	80022ca <cliToUpper+0x4a>
      break;
 80022c8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d105      	bne.n	80022dc <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80022d0:	89fb      	ldrh	r3, [r7, #14]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
  }
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <cliArgsGetData+0x4c>)
 80022f8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002304:	429a      	cmp	r2, r3
 8002306:	d301      	bcc.n	800230c <cliArgsGetData+0x24>
  {
    return 0;
 8002308:	2300      	movs	r3, #0
 800230a:	e00e      	b.n	800232a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f006 fda6 	bl	8008e70 <strtoul>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

  return ret;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000cac 	.word	0x20000cac

08002338 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <cliArgsGetFloat+0x54>)
 800234a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	b29a      	uxth	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <cliArgsGetFloat+0x28>
  {
    return 0;
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e00d      	b.n	800237c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f006 fcaf 	bl	8008cd4 <strtof>
 8002376:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eeb0 0a67 	vmov.f32	s0, s15
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000cac 	.word	0x20000cac

08002390 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <cliArgsGetStr+0x44>)
 80023a0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d301      	bcc.n	80023b4 <cliArgsGetStr+0x24>
  {
    return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e008      	b.n	80023c6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000cac 	.word	0x20000cac

080023d8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <cliArgsIsStr+0x50>)
 80023ea:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d301      	bcc.n	80023fe <cliArgsIsStr+0x26>
  {
    return 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e010      	b.n	8002420 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f7fe f836 	bl	8000480 <strcmp>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <cliArgsIsStr+0x46>
  {
    ret = true;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000cac 	.word	0x20000cac

0800242c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <cliKeepLoop+0x28>)
 8002434:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 ff7e 	bl	800333c <uartAvailable>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <cliKeepLoop+0x1e>
  {
    return true;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800244a:	2300      	movs	r3, #0
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000cac 	.word	0x20000cac

08002458 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002462:	2301      	movs	r3, #1
 8002464:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <cliAdd+0x90>)
 8002468:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d901      	bls.n	8002478 <cliAdd+0x20>
  {
    return false;
 8002474:	2300      	movs	r3, #0
 8002476:	e032      	b.n	80024de <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800247e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002480:	89fa      	ldrh	r2, [r7, #14]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f005 fdf0 	bl	800807c <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800249c:	89fa      	ldrh	r2, [r7, #14]
 800249e:	6939      	ldr	r1, [r7, #16]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80024b2:	89fa      	ldrh	r2, [r7, #14]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff feda 	bl	8002280 <cliToUpper>

  p_cli->cmd_count++;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024d2:	3301      	adds	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000cac 	.word	0x20000cac

080024ec <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <cliShowList+0x60>)
 80024f6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80024f8:	4815      	ldr	r0, [pc, #84]	; (8002550 <cliShowList+0x64>)
 80024fa:	f7ff fe9d 	bl	8002238 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80024fe:	4815      	ldr	r0, [pc, #84]	; (8002554 <cliShowList+0x68>)
 8002500:	f7ff fe9a 	bl	8002238 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e012      	b.n	8002530 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fe8a 	bl	8002238 <cliPrintf>
    cliPrintf("\r\n");
 8002524:	480a      	ldr	r0, [pc, #40]	; (8002550 <cliShowList+0x64>)
 8002526:	f7ff fe87 	bl	8002238 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4293      	cmp	r3, r2
 800253c:	dbe5      	blt.n	800250a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <cliShowList+0x6c>)
 8002540:	f7ff fe7a 	bl	8002238 <cliPrintf>
}
 8002544:	bf00      	nop
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000cac 	.word	0x20000cac
 8002550:	0800be40 	.word	0x0800be40
 8002554:	0800be44 	.word	0x0800be44
 8002558:	0800be64 	.word	0x0800be64

0800255c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002564:	2310      	movs	r3, #16
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800257c:	4840      	ldr	r0, [pc, #256]	; (8002680 <cliMemoryDump+0x124>)
 800257e:	f7ff fe5b 	bl	8002238 <cliPrintf>
 8002582:	e07a      	b.n	800267a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b01      	cmp	r3, #1
 8002588:	dd09      	ble.n	800259e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2200      	movs	r2, #0
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f006 fc6b 	bl	8008e70 <strtoul>
 800259a:	4603      	mov	r3, r0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 fc62 	bl	8008e70 <strtoul>
 80025ac:	4603      	mov	r3, r0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80025b4:	4833      	ldr	r0, [pc, #204]	; (8002684 <cliMemoryDump+0x128>)
 80025b6:	f7ff fe3f 	bl	8002238 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	e058      	b.n	8002672 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	4619      	mov	r1, r3
 80025ce:	482e      	ldr	r0, [pc, #184]	; (8002688 <cliMemoryDump+0x12c>)
 80025d0:	f7ff fe32 	bl	8002238 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	482c      	ldr	r0, [pc, #176]	; (800268c <cliMemoryDump+0x130>)
 80025dc:	f7ff fe2c 	bl	8002238 <cliPrintf>

    if ((idx%4) == 3)
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	425a      	negs	r2, r3
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	f002 0203 	and.w	r2, r2, #3
 80025ec:	bf58      	it	pl
 80025ee:	4253      	negpl	r3, r2
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d138      	bne.n	8002666 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80025f4:	4826      	ldr	r0, [pc, #152]	; (8002690 <cliMemoryDump+0x134>)
 80025f6:	f7ff fe1f 	bl	8002238 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	623b      	str	r3, [r7, #32]
 80025fe:	e02c      	b.n	800265a <cliMemoryDump+0xfe>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002604:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e01d      	b.n	8002648 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b1f      	cmp	r3, #31
 8002618:	d910      	bls.n	800263c <cliMemoryDump+0xe0>
 800261a:	f107 020c 	add.w	r2, r7, #12
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b7e      	cmp	r3, #126	; 0x7e
 8002626:	d809      	bhi.n	800263c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002628:	f107 020c 	add.w	r2, r7, #12
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	4817      	ldr	r0, [pc, #92]	; (8002694 <cliMemoryDump+0x138>)
 8002636:	f7ff fdff 	bl	8002238 <cliPrintf>
 800263a:	e002      	b.n	8002642 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800263c:	4816      	ldr	r0, [pc, #88]	; (8002698 <cliMemoryDump+0x13c>)
 800263e:	f7ff fdfb 	bl	8002238 <cliPrintf>
        for (i=0;i<4;i++)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	2b03      	cmp	r3, #3
 800264c:	ddde      	ble.n	800260c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3304      	adds	r3, #4
 8002652:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	3301      	adds	r3, #1
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	2b03      	cmp	r3, #3
 800265e:	ddcf      	ble.n	8002600 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002660:	480e      	ldr	r0, [pc, #56]	; (800269c <cliMemoryDump+0x140>)
 8002662:	f7ff fde9 	bl	8002238 <cliPrintf>
    }
    addr++;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	3304      	adds	r3, #4
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	3301      	adds	r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	429a      	cmp	r2, r3
 8002678:	dba2      	blt.n	80025c0 <cliMemoryDump+0x64>
  }
}
 800267a:	3730      	adds	r7, #48	; 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	0800be84 	.word	0x0800be84
 8002684:	0800be98 	.word	0x0800be98
 8002688:	0800bea0 	.word	0x0800bea0
 800268c:	0800beac 	.word	0x0800beac
 8002690:	0800beb4 	.word	0x0800beb4
 8002694:	0800beb8 	.word	0x0800beb8
 8002698:	0800bebc 	.word	0x0800bebc
 800269c:	0800bec0 	.word	0x0800bec0

080026a0 <cmdInit>:




void cmdInit(cmd_t *p_cmd)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  p_cmd->is_init = false;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	721a      	strb	r2, [r3, #8]

  p_cmd->rx_packet.data = &p_cmd->rx_packet.buffer[CMD_STATE_WAIT_DATA];
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
  p_cmd->tx_packet.data = &p_cmd->tx_packet.buffer[CMD_STATE_WAIT_DATA];
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f203 423a 	addw	r2, r3, #1082	; 0x43a
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <cmdOpen>:

bool cmdOpen(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	460b      	mov	r3, r1
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch = ch;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	7afa      	ldrb	r2, [r7, #11]
 80026ea:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	605a      	str	r2, [r3, #4]
  p_cmd->is_init = true;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	721a      	strb	r2, [r3, #8]
  p_cmd->pre_time = millis();
 80026fe:	f7ff f93a 	bl	8001976 <millis>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd03 	bl	8003118 <uartOpen>
 8002712:	4603      	mov	r3, r0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <cmdReceivePacket>:
{
  return uartClose(p_cmd->ch);
}

bool cmdReceivePacket(cmd_t *p_cmd)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  uint8_t rx_data;


  if (uartAvailable(p_cmd->ch) > 0)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fe05 	bl	800333c <uartAvailable>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00f      	beq.n	8002758 <cmdReceivePacket+0x3c>
  {
    rx_data = uartRead(p_cmd->ch);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fe43 	bl	80033c8 <uartRead>
 8002742:	4603      	mov	r3, r0
 8002744:	73bb      	strb	r3, [r7, #14]
  else
  {
    return false;
  }

  if (millis()-p_cmd->pre_time >= 100)
 8002746:	f7ff f916 	bl	8001976 <millis>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b63      	cmp	r3, #99	; 0x63
 8002754:	d905      	bls.n	8002762 <cmdReceivePacket+0x46>
 8002756:	e001      	b.n	800275c <cmdReceivePacket+0x40>
    return false;
 8002758:	2300      	movs	r3, #0
 800275a:	e0be      	b.n	80028da <cmdReceivePacket+0x1be>
  {
    p_cmd->state = CMD_STATE_WAIT_STX;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	721a      	strb	r2, [r3, #8]
  }
  p_cmd->pre_time = millis();
 8002762:	f7ff f908 	bl	8001976 <millis>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]

  switch(p_cmd->state)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7a1b      	ldrb	r3, [r3, #8]
 8002770:	2b08      	cmp	r3, #8
 8002772:	f200 80b1 	bhi.w	80028d8 <cmdReceivePacket+0x1bc>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <cmdReceivePacket+0x60>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	080027a1 	.word	0x080027a1
 8002780:	080027b7 	.word	0x080027b7
 8002784:	080027d3 	.word	0x080027d3
 8002788:	080027ef 	.word	0x080027ef
 800278c:	0800280b 	.word	0x0800280b
 8002790:	08002829 	.word	0x08002829
 8002794:	0800286b 	.word	0x0800286b
 8002798:	080028a7 	.word	0x080028a7
 800279c:	080028b5 	.word	0x080028b5
  {
    case CMD_STATE_WAIT_STX:
      if (rx_data == CMD_STX)
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	f040 8095 	bne.w	80028d2 <cmdReceivePacket+0x1b6>
      {
        p_cmd->state = CMD_STATE_WAIT_CMD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	721a      	strb	r2, [r3, #8]
        p_cmd->rx_packet.check_sum = 0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	779a      	strb	r2, [r3, #30]
      }
      break;
 80027b4:	e08d      	b.n	80028d2 <cmdReceivePacket+0x1b6>

    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd = rx_data;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7bba      	ldrb	r2, [r7, #14]
 80027ba:	761a      	strb	r2, [r3, #24]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7f9a      	ldrb	r2, [r3, #30]
 80027c0:	7bbb      	ldrb	r3, [r7, #14]
 80027c2:	4053      	eors	r3, r2
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_DIR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	721a      	strb	r2, [r3, #8]
      break;
 80027d0:	e082      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DIR:
      p_cmd->rx_packet.dir = rx_data;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7bba      	ldrb	r2, [r7, #14]
 80027d6:	765a      	strb	r2, [r3, #25]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7f9a      	ldrb	r2, [r3, #30]
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	4053      	eors	r3, r2
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2203      	movs	r2, #3
 80027ea:	721a      	strb	r2, [r3, #8]
      break;
 80027ec:	e074      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ERROR:
      p_cmd->rx_packet.error = rx_data;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7bba      	ldrb	r2, [r7, #14]
 80027f2:	769a      	strb	r2, [r3, #26]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7f9a      	ldrb	r2, [r3, #30]
 80027f8:	7bbb      	ldrb	r3, [r7, #14]
 80027fa:	4053      	eors	r3, r2
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_L;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	721a      	strb	r2, [r3, #8]
      break;
 8002808:	e066      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length = rx_data;
 800280a:	7bbb      	ldrb	r3, [r7, #14]
 800280c:	b29a      	uxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7f9a      	ldrb	r2, [r3, #30]
 8002816:	7bbb      	ldrb	r3, [r7, #14]
 8002818:	4053      	eors	r3, r2
 800281a:	b2da      	uxtb	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_H;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2205      	movs	r2, #5
 8002824:	721a      	strb	r2, [r3, #8]
      break;
 8002826:	e057      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length |= (rx_data << 8);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8b9b      	ldrh	r3, [r3, #28]
 800282c:	b21a      	sxth	r2, r3
 800282e:	7bbb      	ldrb	r3, [r7, #14]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b21b      	sxth	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b21b      	sxth	r3, r3
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7f9a      	ldrb	r2, [r3, #30]
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	4053      	eors	r3, r2
 8002846:	b2da      	uxtb	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	779a      	strb	r2, [r3, #30]

      if (p_cmd->rx_packet.length > 0)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8b9b      	ldrh	r3, [r3, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <cmdReceivePacket+0x146>
      {
        p_cmd->index = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
        p_cmd->state = CMD_STATE_WAIT_DATA;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2206      	movs	r2, #6
 800285e:	721a      	strb	r2, [r3, #8]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
      }
      break;
 8002860:	e03a      	b.n	80028d8 <cmdReceivePacket+0x1bc>
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2207      	movs	r2, #7
 8002866:	721a      	strb	r2, [r3, #8]
      break;
 8002868:	e036      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DATA:
      p_cmd->rx_packet.data[p_cmd->index] = rx_data;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4413      	add	r3, r2
 8002876:	7bba      	ldrb	r2, [r7, #14]
 8002878:	701a      	strb	r2, [r3, #0]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7f9a      	ldrb	r2, [r3, #30]
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	4053      	eors	r3, r2
 8002882:	b2da      	uxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	779a      	strb	r2, [r3, #30]
      p_cmd->index++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]
      if (p_cmd->index == p_cmd->rx_packet.length)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	8b92      	ldrh	r2, [r2, #28]
 800289a:	4293      	cmp	r3, r2
 800289c:	d11b      	bne.n	80028d6 <cmdReceivePacket+0x1ba>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2207      	movs	r2, #7
 80028a2:	721a      	strb	r2, [r3, #8]
      }
      break;
 80028a4:	e017      	b.n	80028d6 <cmdReceivePacket+0x1ba>

    case CMD_STATE_WAIT_CHECKSUM:
      p_cmd->rx_packet.check_sum_recv = rx_data;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7bba      	ldrb	r2, [r7, #14]
 80028aa:	77da      	strb	r2, [r3, #31]
      p_cmd->state = CMD_STATE_WAIT_ETX;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2208      	movs	r2, #8
 80028b0:	721a      	strb	r2, [r3, #8]
      break;
 80028b2:	e011      	b.n	80028d8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ETX:
      if (rx_data == CMD_ETX)
 80028b4:	7bbb      	ldrb	r3, [r7, #14]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d107      	bne.n	80028ca <cmdReceivePacket+0x1ae>
      {
        if (p_cmd->rx_packet.check_sum == p_cmd->rx_packet.check_sum_recv)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	7f9a      	ldrb	r2, [r3, #30]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7fdb      	ldrb	r3, [r3, #31]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d101      	bne.n	80028ca <cmdReceivePacket+0x1ae>
        {
          ret = true;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	721a      	strb	r2, [r3, #8]
      break;
 80028d0:	e002      	b.n	80028d8 <cmdReceivePacket+0x1bc>
      break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <cmdReceivePacket+0x1bc>
      break;
 80028d6:	bf00      	nop
  }

  return ret;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop

080028e4 <cmdSendResp>:

  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
}

void cmdSendResp(cmd_t *p_cmd, uint8_t cmd, uint8_t err_code, uint8_t *p_data, uint32_t length)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	72fb      	strb	r3, [r7, #11]
 80028f2:	4613      	mov	r3, r2
 80028f4:	72bb      	strb	r3, [r7, #10]
  uint32_t index;


  index = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]

  p_cmd->tx_packet.buffer[index++] = CMD_STX;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	2202      	movs	r2, #2
 8002906:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = cmd;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	61fa      	str	r2, [r7, #28]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	7afa      	ldrb	r2, [r7, #11]
 8002916:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_DIR_S_TO_M;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	61fa      	str	r2, [r7, #28]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = err_code;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	61fa      	str	r2, [r7, #28]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	7aba      	ldrb	r2, [r7, #10]
 8002936:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 0) & 0xFF;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	61fa      	str	r2, [r7, #28]
 8002940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002942:	b2d1      	uxtb	r1, r2
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	460a      	mov	r2, r1
 800294a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 8) & 0xFF;
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	0a19      	lsrs	r1, r3, #8
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	61fa      	str	r2, [r7, #28]
 8002958:	b2c9      	uxtb	r1, r1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	460a      	mov	r2, r1
 8002960:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

  for (int i=0; i<length; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e00e      	b.n	8002988 <cmdSendResp+0xa4>
  {
    p_cmd->tx_packet.buffer[index++] = p_data[i];
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	441a      	add	r2, r3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	1c59      	adds	r1, r3, #1
 8002974:	61f9      	str	r1, [r7, #28]
 8002976:	7811      	ldrb	r1, [r2, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	460a      	mov	r2, r1
 800297e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  for (int i=0; i<length; i++)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	3301      	adds	r3, #1
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298c:	429a      	cmp	r2, r3
 800298e:	d8ec      	bhi.n	800296a <cmdSendResp+0x86>
  }

  uint8_t check_sum = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length + 5; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e00b      	b.n	80029b2 <cmdSendResp+0xce>
  {
    check_sum ^= p_cmd->tx_packet.buffer[i+1];
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	3301      	adds	r3, #1
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	4053      	eors	r3, r2
 80029aa:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<length + 5; i++)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3301      	adds	r3, #1
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b4:	1d5a      	adds	r2, r3, #5
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d8ee      	bhi.n	800299a <cmdSendResp+0xb6>
  }
  p_cmd->tx_packet.buffer[index++] = check_sum;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	61fa      	str	r2, [r7, #28]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	7dfa      	ldrb	r2, [r7, #23]
 80029c8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_ETX;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	61fa      	str	r2, [r7, #28]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	2203      	movs	r2, #3
 80029d8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434


  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	7818      	ldrb	r0, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f203 4334 	addw	r3, r3, #1076	; 0x434
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f000 fd13 	bl	8003414 <uartWrite>
}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <flashInit+0x14>)
 80029fe:	4804      	ldr	r0, [pc, #16]	; (8002a10 <flashInit+0x18>)
 8002a00:	f7ff fd2a 	bl	8002458 <cliAdd>
#endif

  return true;
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08002bd5 	.word	0x08002bd5
 8002a10:	0800bed0 	.word	0x0800bed0

08002a14 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	; 0x30
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8002a24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a28:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
 8002a32:	e015      	b.n	8002a60 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f871 	bl	8002b24 <flashInSector>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8002a48:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	da01      	bge.n	8002a54 <flashErase+0x40>
      {
        start_sector_num = i;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	3301      	adds	r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	dde6      	ble.n	8002a34 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8002a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 8002a6c:	f002 f862 	bl	8004b34 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8002a78:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a7c:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002a82:	2302      	movs	r3, #2
 8002a84:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8002a86:	f107 0208 	add.w	r2, r7, #8
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 f9c1 	bl	8004e18 <HAL_FLASHEx_Erase>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8002a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <flashErase+0x96>
    {
      ret = true;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8002aaa:	f002 f865 	bl	8004b78 <HAL_FLASH_Lock>
  }

  return ret;
 8002aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3730      	adds	r7, #48	; 0x30
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8002aba:	b5b0      	push	{r4, r5, r7, lr}
 8002abc:	b088      	sub	sp, #32
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 8002aca:	f002 f833 	bl	8004b34 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e01b      	b.n	8002b0c <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	18d1      	adds	r1, r2, r3
 8002ae4:	8afb      	ldrh	r3, [r7, #22]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	461c      	mov	r4, r3
 8002aea:	4615      	mov	r5, r2
 8002aec:	4622      	mov	r2, r4
 8002aee:	462b      	mov	r3, r5
 8002af0:	2000      	movs	r0, #0
 8002af2:	f001 ffcb 	bl	8004a8c <HAL_FLASH_Program>
 8002af6:	4603      	mov	r3, r0
 8002af8:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8002afa:	7d7b      	ldrb	r3, [r7, #21]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <flashWrite+0x4c>
    {
      ret = false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
      break;
 8002b04:	e006      	b.n	8002b14 <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8df      	bhi.n	8002ad4 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8002b14:	f002 f830 	bl	8004b78 <HAL_FLASH_Lock>

  return ret;
 8002b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b24 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b08b      	sub	sp, #44	; 0x2c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 8002b38:	89fb      	ldrh	r3, [r7, #14]
 8002b3a:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <flashInSector+0xac>)
 8002b3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b40:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <flashInSector+0xac>)
 8002b46:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	4920      	ldr	r1, [pc, #128]	; (8002bd0 <flashInSector+0xac>)
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3b01      	subs	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3b01      	subs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d306      	bcc.n	8002b7e <flashInSector+0x5a>
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d802      	bhi.n	8002b7e <flashInSector+0x5a>
  {
    ret = true;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8002b7e:	69fa      	ldr	r2, [r7, #28]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d306      	bcc.n	8002b94 <flashInSector+0x70>
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d802      	bhi.n	8002b94 <flashInSector+0x70>
  {
    ret = true;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d306      	bcc.n	8002baa <flashInSector+0x86>
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d802      	bhi.n	8002baa <flashInSector+0x86>
  {
    ret = true;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d306      	bcc.n	8002bc0 <flashInSector+0x9c>
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d802      	bhi.n	8002bc0 <flashInSector+0x9c>
  {
    ret = true;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8002bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	372c      	adds	r7, #44	; 0x2c
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	20000228 	.word	0x20000228

08002bd4 <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	; 0x30
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d121      	bne.n	8002c2e <cliFlash+0x5a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	495c      	ldr	r1, [pc, #368]	; (8002d60 <cliFlash+0x18c>)
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4798      	blx	r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d019      	beq.n	8002c2e <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfe:	e010      	b.n	8002c22 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <cliFlash+0x190>)
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002c08:	4a56      	ldr	r2, [pc, #344]	; (8002d64 <cliFlash+0x190>)
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	461a      	mov	r2, r3
 8002c16:	4854      	ldr	r0, [pc, #336]	; (8002d68 <cliFlash+0x194>)
 8002c18:	f7ff fb0e 	bl	8002238 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	3301      	adds	r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	2b07      	cmp	r3, #7
 8002c26:	ddeb      	ble.n	8002c00 <cliFlash+0x2c>
    }

    ret = true;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d12b      	bne.n	8002c8e <cliFlash+0xba>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	494c      	ldr	r1, [pc, #304]	; (8002d6c <cliFlash+0x198>)
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	4798      	blx	r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	4798      	blx	r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2002      	movs	r0, #2
 8002c58:	4798      	blx	r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	e00d      	b.n	8002c80 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 8002c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	18d1      	adds	r1, r2, r3
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	483e      	ldr	r0, [pc, #248]	; (8002d70 <cliFlash+0x19c>)
 8002c76:	f7ff fadf 	bl	8002238 <cliPrintf>
    for (int i=0; i<length; i++)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8ed      	bhi.n	8002c64 <cliFlash+0x90>
    }

    ret = true;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d121      	bne.n	8002cda <cliFlash+0x106>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4936      	ldr	r1, [pc, #216]	; (8002d74 <cliFlash+0x1a0>)
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	4798      	blx	r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d019      	beq.n	8002cda <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2001      	movs	r0, #1
 8002cac:	4798      	blx	r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	4798      	blx	r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	69b8      	ldr	r0, [r7, #24]
 8002cc2:	f7ff fea7 	bl	8002a14 <flashErase>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 8002ccc:	482a      	ldr	r0, [pc, #168]	; (8002d78 <cliFlash+0x1a4>)
 8002cce:	f7ff fab3 	bl	8002238 <cliPrintf>
 8002cd2:	e002      	b.n	8002cda <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 8002cd4:	4829      	ldr	r0, [pc, #164]	; (8002d7c <cliFlash+0x1a8>)
 8002cd6:	f7ff faaf 	bl	8002238 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d127      	bne.n	8002d32 <cliFlash+0x15e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4926      	ldr	r1, [pc, #152]	; (8002d80 <cliFlash+0x1ac>)
 8002ce8:	2000      	movs	r0, #0
 8002cea:	4798      	blx	r3
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01f      	beq.n	8002d32 <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	4798      	blx	r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	2002      	movs	r0, #2
 8002d04:	4798      	blx	r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	6938      	ldr	r0, [r7, #16]
 8002d14:	f7ff fed1 	bl	8002aba <flashWrite>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8002d1e:	4819      	ldr	r0, [pc, #100]	; (8002d84 <cliFlash+0x1b0>)
 8002d20:	f7ff fa8a 	bl	8002238 <cliPrintf>
 8002d24:	e002      	b.n	8002d2c <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 8002d26:	4818      	ldr	r0, [pc, #96]	; (8002d88 <cliFlash+0x1b4>)
 8002d28:	f7ff fa86 	bl	8002238 <cliPrintf>
    }

    ret = true;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 8002d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8002d40:	4812      	ldr	r0, [pc, #72]	; (8002d8c <cliFlash+0x1b8>)
 8002d42:	f7ff fa79 	bl	8002238 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 8002d46:	4812      	ldr	r0, [pc, #72]	; (8002d90 <cliFlash+0x1bc>)
 8002d48:	f7ff fa76 	bl	8002238 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8002d4c:	4811      	ldr	r0, [pc, #68]	; (8002d94 <cliFlash+0x1c0>)
 8002d4e:	f7ff fa73 	bl	8002238 <cliPrintf>
    cliPrintf("flash write addr data\n");
 8002d52:	4811      	ldr	r0, [pc, #68]	; (8002d98 <cliFlash+0x1c4>)
 8002d54:	f7ff fa70 	bl	8002238 <cliPrintf>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3730      	adds	r7, #48	; 0x30
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	0800bed8 	.word	0x0800bed8
 8002d64:	20000228 	.word	0x20000228
 8002d68:	0800bee0 	.word	0x0800bee0
 8002d6c:	0800bef0 	.word	0x0800bef0
 8002d70:	0800bef8 	.word	0x0800bef8
 8002d74:	0800bf08 	.word	0x0800bf08
 8002d78:	0800bf10 	.word	0x0800bf10
 8002d7c:	0800bf1c 	.word	0x0800bf1c
 8002d80:	0800bf28 	.word	0x0800bf28
 8002d84:	0800bf30 	.word	0x0800bf30
 8002d88:	0800bf3c 	.word	0x0800bf3c
 8002d8c:	0800bf48 	.word	0x0800bf48
 8002d90:	0800bf54 	.word	0x0800bf54
 8002d94:	0800bf70 	.word	0x0800bf70
 8002d98:	0800bf8c 	.word	0x0800bf8c

08002d9c <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
  bool ret = true;
 8002da2:	2301      	movs	r3, #1
 8002da4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <ledInit+0x8c>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <ledInit+0x8c>)
 8002dbe:	f043 0304 	orr.w	r3, r3, #4
 8002dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <ledInit+0x8c>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e016      	b.n	8002e10 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <ledInit+0x90>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	889b      	ldrh	r3, [r3, #4]
 8002dec:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002dee:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <ledInit+0x90>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002df6:	1d3a      	adds	r2, r7, #4
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 f92e 	bl	800505c <HAL_GPIO_Init>

    ledOff(i);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f837 	bl	8002e78 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dde5      	ble.n	8002de2 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002e16:	4906      	ldr	r1, [pc, #24]	; (8002e30 <ledInit+0x94>)
 8002e18:	4806      	ldr	r0, [pc, #24]	; (8002e34 <ledInit+0x98>)
 8002e1a:	f7ff fb1d 	bl	8002458 <cliAdd>
#endif

  return ret;
 8002e1e:	7efb      	ldrb	r3, [r7, #27]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	20000268 	.word	0x20000268
 8002e30:	08002ef1 	.word	0x08002ef1
 8002e34:	0800bfa4 	.word	0x0800bfa4

08002e38 <ledOn>:

void ledOn(uint8_t ch)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d111      	bne.n	8002e6c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <ledOn+0x3c>)
 8002e4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <ledOn+0x3c>)
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	8899      	ldrh	r1, [r3, #4]
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <ledOn+0x3c>)
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	799b      	ldrb	r3, [r3, #6]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f002 fb79 	bl	800555c <HAL_GPIO_WritePin>
 8002e6a:	e000      	b.n	8002e6e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e6c:	bf00      	nop
}
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000268 	.word	0x20000268

08002e78 <ledOff>:

void ledOff(uint8_t ch)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d111      	bne.n	8002eac <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <ledOff+0x3c>)
 8002e8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <ledOff+0x3c>)
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	8899      	ldrh	r1, [r3, #4]
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <ledOff+0x3c>)
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	79db      	ldrb	r3, [r3, #7]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f002 fb59 	bl	800555c <HAL_GPIO_WritePin>
 8002eaa:	e000      	b.n	8002eae <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002eac:	bf00      	nop
}
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000268 	.word	0x20000268

08002eb8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10d      	bne.n	8002ee4 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4a08      	ldr	r2, [pc, #32]	; (8002eec <ledToggle+0x34>)
 8002ecc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	4906      	ldr	r1, [pc, #24]	; (8002eec <ledToggle+0x34>)
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f002 fb56 	bl	800558e <HAL_GPIO_TogglePin>
 8002ee2:	e000      	b.n	8002ee6 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002ee4:	bf00      	nop
}
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000268 	.word	0x20000268

08002ef0 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d133      	bne.n	8002f6c <cliLed+0x7c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	491f      	ldr	r1, [pc, #124]	; (8002f88 <cliLed+0x98>)
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4798      	blx	r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02b      	beq.n	8002f6c <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2001      	movs	r0, #1
 8002f1a:	4798      	blx	r3
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2002      	movs	r0, #2
 8002f26:	4798      	blx	r3
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002f2c:	7dbb      	ldrb	r3, [r7, #22]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <cliLed+0x48>
    {
      led_ch--;
 8002f32:	7dbb      	ldrb	r3, [r7, #22]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002f38:	f7fe fd1d 	bl	8001976 <millis>
 8002f3c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002f3e:	e00e      	b.n	8002f5e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8002f40:	f7fe fd19 	bl	8001976 <millis>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d806      	bhi.n	8002f5e <cliLed+0x6e>
      {
        pre_time = millis();
 8002f50:	f7fe fd11 	bl	8001976 <millis>
 8002f54:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002f56:	7dbb      	ldrb	r3, [r7, #22]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ffad 	bl	8002eb8 <ledToggle>
    while(cliKeepLoop())
 8002f5e:	f7ff fa65 	bl	800242c <cliKeepLoop>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1eb      	bne.n	8002f40 <cliLed+0x50>
      }
    }

    ret = true;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4804      	ldr	r0, [pc, #16]	; (8002f8c <cliLed+0x9c>)
 8002f7c:	f7ff f95c 	bl	8002238 <cliPrintf>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800bfa8 	.word	0x0800bfa8
 8002f8c:	0800bfb0 	.word	0x0800bfb0

08002f90 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  bool ret = true;
 8002f96:	2301      	movs	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]

#if 1
  // 만약 Reset 핀이 눌렸다면
  //
  if (RCC->CSR & (1<<26))
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <resetInit+0x50>)
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f000 f866 	bl	8003078 <rtcBackupRegRead>
 8002fac:	4603      	mov	r3, r0
 8002fae:	3301      	adds	r3, #1
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	f000 f870 	bl	8003098 <rtcBackupRegWrite>
    delay(500);
 8002fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fbc:	f7fe fcd0 	bl	8001960 <delay>
    reset_count = rtcBackupRegRead(1);
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 f859 	bl	8003078 <rtcBackupRegRead>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <resetInit+0x54>)
 8002fca:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f000 f862 	bl	8003098 <rtcBackupRegWrite>
#endif

  return ret;
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	200010f0 	.word	0x200010f0

08002fe8 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return reset_count;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <resetGetCount+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	200010f0 	.word	0x200010f0

08003000 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  bool ret = true;
 8003006:	2301      	movs	r3, #1
 8003008:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <rtcInit+0x6c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <rtcInit+0x6c>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <rtcInit+0x6c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <rtcInit+0x70>)
 8003028:	4a12      	ldr	r2, [pc, #72]	; (8003074 <rtcInit+0x74>)
 800302a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <rtcInit+0x70>)
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <rtcInit+0x70>)
 8003034:	227f      	movs	r2, #127	; 0x7f
 8003036:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <rtcInit+0x70>)
 800303a:	22ff      	movs	r2, #255	; 0xff
 800303c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800303e:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <rtcInit+0x70>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <rtcInit+0x70>)
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <rtcInit+0x70>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <rtcInit+0x70>)
 8003052:	f003 f8c3 	bl	80061dc <HAL_RTC_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <rtcInit+0x60>
  {
    Error_Handler();
 800305c:	f7fe fd14 	bl	8001a88 <Error_Handler>
  }

  return ret;
 8003060:	79fb      	ldrb	r3, [r7, #7]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	200010f4 	.word	0x200010f4
 8003074:	40002800 	.word	0x40002800

08003078 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4804      	ldr	r0, [pc, #16]	; (8003094 <rtcBackupRegRead+0x1c>)
 8003084:	f003 f9a9 	bl	80063da <HAL_RTCEx_BKUPRead>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200010f4 	.word	0x200010f4

08003098 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4803      	ldr	r0, [pc, #12]	; (80030b4 <rtcBackupRegWrite+0x1c>)
 80030a8:	f003 f97d 	bl	80063a6 <HAL_RTCEx_BKUPWrite>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200010f4 	.word	0x200010f4

080030b8 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <HAL_RTC_MspInit+0x24>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d102      	bne.n	80030d0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RTC_MspInit+0x28>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40002800 	.word	0x40002800
 80030e0:	42470e3c 	.word	0x42470e3c

080030e4 <uartInit>:
#endif



bool uartInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e007      	b.n	8003100 <uartInit+0x1c>
  {
    is_open[i] = false;
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <uartInit+0x30>)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3301      	adds	r3, #1
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	ddf4      	ble.n	80030f0 <uartInit+0xc>
  }


  return true;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	20001114 	.word	0x20001114

08003118 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <uartOpen+0x1c>
 800312e:	2b01      	cmp	r3, #1
 8003130:	d078      	beq.n	8003224 <uartOpen+0x10c>
 8003132:	e0ef      	b.n	8003314 <uartOpen+0x1fc>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8003134:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <uartOpen+0x208>)
 8003136:	4a7b      	ldr	r2, [pc, #492]	; (8003324 <uartOpen+0x20c>)
 8003138:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <uartOpen+0x208>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8003140:	4b77      	ldr	r3, [pc, #476]	; (8003320 <uartOpen+0x208>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8003146:	4b76      	ldr	r3, [pc, #472]	; (8003320 <uartOpen+0x208>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 800314c:	4b74      	ldr	r3, [pc, #464]	; (8003320 <uartOpen+0x208>)
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8003152:	4b73      	ldr	r3, [pc, #460]	; (8003320 <uartOpen+0x208>)
 8003154:	220c      	movs	r2, #12
 8003156:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8003158:	4b71      	ldr	r3, [pc, #452]	; (8003320 <uartOpen+0x208>)
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800315e:	4b70      	ldr	r3, [pc, #448]	; (8003320 <uartOpen+0x208>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]

        HAL_UART_DeInit(&huart1);
 8003164:	486e      	ldr	r0, [pc, #440]	; (8003320 <uartOpen+0x208>)
 8003166:	f003 f99d 	bl	80064a4 <HAL_UART_DeInit>

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <uartOpen+0x210>)
 8003170:	4413      	add	r3, r2
 8003172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003176:	496d      	ldr	r1, [pc, #436]	; (800332c <uartOpen+0x214>)
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fe00 	bl	8001d7e <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <uartOpen+0x218>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a6a      	ldr	r2, [pc, #424]	; (8003330 <uartOpen+0x218>)
 8003188:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b68      	ldr	r3, [pc, #416]	; (8003330 <uartOpen+0x218>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2104      	movs	r1, #4
 800319e:	203a      	movs	r0, #58	; 0x3a
 80031a0:	f001 f83f 	bl	8004222 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031a4:	203a      	movs	r0, #58	; 0x3a
 80031a6:	f001 f858 	bl	800425a <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2104      	movs	r1, #4
 80031ae:	2046      	movs	r0, #70	; 0x46
 80031b0:	f001 f837 	bl	8004222 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80031b4:	2046      	movs	r0, #70	; 0x46
 80031b6:	f001 f850 	bl	800425a <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ba:	4859      	ldr	r0, [pc, #356]	; (8003320 <uartOpen+0x208>)
 80031bc:	f003 f925 	bl	800640a <HAL_UART_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <uartOpen+0xb4>
        {
          ret = false;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 80031ca:	e0a3      	b.n	8003314 <uartOpen+0x1fc>
          ret = true;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <uartOpen+0x21c>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80031d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031dc:	4953      	ldr	r1, [pc, #332]	; (800332c <uartOpen+0x214>)
 80031de:	4850      	ldr	r0, [pc, #320]	; (8003320 <uartOpen+0x208>)
 80031e0:	f003 fa26 	bl	8006630 <HAL_UART_Receive_DMA>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <uartOpen+0xd6>
            ret = false;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	4a4d      	ldr	r2, [pc, #308]	; (8003328 <uartOpen+0x210>)
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4413      	add	r3, r2
 80031f6:	3308      	adds	r3, #8
 80031f8:	6819      	ldr	r1, [r3, #0]
 80031fa:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <uartOpen+0x220>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	1a8a      	subs	r2, r1, r2
 8003204:	4948      	ldr	r1, [pc, #288]	; (8003328 <uartOpen+0x210>)
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	440b      	add	r3, r1
 800320a:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 800320c:	79fa      	ldrb	r2, [r7, #7]
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	4945      	ldr	r1, [pc, #276]	; (8003328 <uartOpen+0x210>)
 8003212:	0112      	lsls	r2, r2, #4
 8003214:	440a      	add	r2, r1
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	4943      	ldr	r1, [pc, #268]	; (8003328 <uartOpen+0x210>)
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	440b      	add	r3, r1
 800321e:	3304      	adds	r3, #4
 8003220:	601a      	str	r2, [r3, #0]
      break;
 8003222:	e077      	b.n	8003314 <uartOpen+0x1fc>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 8003224:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <uartOpen+0x208>)
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <uartOpen+0x20c>)
 8003228:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 800322a:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <uartOpen+0x208>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <uartOpen+0x208>)
 8003232:	2200      	movs	r2, #0
 8003234:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <uartOpen+0x208>)
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <uartOpen+0x208>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 8003242:	4b37      	ldr	r3, [pc, #220]	; (8003320 <uartOpen+0x208>)
 8003244:	220c      	movs	r2, #12
 8003246:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003248:	4b35      	ldr	r3, [pc, #212]	; (8003320 <uartOpen+0x208>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800324e:	4b34      	ldr	r3, [pc, #208]	; (8003320 <uartOpen+0x208>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8003254:	4832      	ldr	r0, [pc, #200]	; (8003320 <uartOpen+0x208>)
 8003256:	f003 f925 	bl	80064a4 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	4a32      	ldr	r2, [pc, #200]	; (8003328 <uartOpen+0x210>)
 8003260:	4413      	add	r3, r2
 8003262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003266:	4931      	ldr	r1, [pc, #196]	; (800332c <uartOpen+0x214>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7fe fd88 	bl	8001d7e <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b2f      	ldr	r3, [pc, #188]	; (8003330 <uartOpen+0x218>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a2e      	ldr	r2, [pc, #184]	; (8003330 <uartOpen+0x218>)
 8003278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <uartOpen+0x218>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2104      	movs	r1, #4
 800328e:	203a      	movs	r0, #58	; 0x3a
 8003290:	f000 ffc7 	bl	8004222 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003294:	203a      	movs	r0, #58	; 0x3a
 8003296:	f000 ffe0 	bl	800425a <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2104      	movs	r1, #4
 800329e:	2046      	movs	r0, #70	; 0x46
 80032a0:	f000 ffbf 	bl	8004222 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80032a4:	2046      	movs	r0, #70	; 0x46
 80032a6:	f000 ffd8 	bl	800425a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 80032aa:	481d      	ldr	r0, [pc, #116]	; (8003320 <uartOpen+0x208>)
 80032ac:	f003 f8ad 	bl	800640a <HAL_UART_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <uartOpen+0x1a4>
      {
        ret = false;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 80032ba:	e02a      	b.n	8003312 <uartOpen+0x1fa>
        ret = true;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <uartOpen+0x21c>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80032c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032cc:	4917      	ldr	r1, [pc, #92]	; (800332c <uartOpen+0x214>)
 80032ce:	4814      	ldr	r0, [pc, #80]	; (8003320 <uartOpen+0x208>)
 80032d0:	f003 f9ae 	bl	8006630 <HAL_UART_Receive_DMA>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <uartOpen+0x1c6>
          ret = false;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4a11      	ldr	r2, [pc, #68]	; (8003328 <uartOpen+0x210>)
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	3308      	adds	r3, #8
 80032e8:	6819      	ldr	r1, [r3, #0]
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <uartOpen+0x220>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	1a8a      	subs	r2, r1, r2
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <uartOpen+0x210>)
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	440b      	add	r3, r1
 80032fa:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80032fc:	79fa      	ldrb	r2, [r7, #7]
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	4909      	ldr	r1, [pc, #36]	; (8003328 <uartOpen+0x210>)
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	440a      	add	r2, r1
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	4907      	ldr	r1, [pc, #28]	; (8003328 <uartOpen+0x210>)
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	440b      	add	r3, r1
 800330e:	3304      	adds	r3, #4
 8003310:	601a      	str	r2, [r3, #0]
      break;
 8003312:	bf00      	nop
  }

  return ret;
 8003314:	7dfb      	ldrb	r3, [r7, #23]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20001228 	.word	0x20001228
 8003324:	40011000 	.word	0x40011000
 8003328:	20001118 	.word	0x20001118
 800332c:	20001128 	.word	0x20001128
 8003330:	40023800 	.word	0x40023800
 8003334:	20001114 	.word	0x20001114
 8003338:	200012c8 	.word	0x200012c8

0800333c <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <uartAvailable+0x1a>
 8003350:	2b01      	cmp	r3, #1
 8003352:	d018      	beq.n	8003386 <uartAvailable+0x4a>
 8003354:	e02f      	b.n	80033b6 <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	4a19      	ldr	r2, [pc, #100]	; (80033c0 <uartAvailable+0x84>)
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	4413      	add	r3, r2
 800335e:	3308      	adds	r3, #8
 8003360:	6819      	ldr	r1, [r3, #0]
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <uartAvailable+0x88>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	1a8a      	subs	r2, r1, r2
 800336c:	4914      	ldr	r1, [pc, #80]	; (80033c0 <uartAvailable+0x84>)
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	440b      	add	r3, r1
 8003372:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <uartAvailable+0x84>)
 800337a:	4413      	add	r3, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fd56 	bl	8001e2e <qbufferAvailable>
 8003382:	60f8      	str	r0, [r7, #12]
      break;
 8003384:	e017      	b.n	80033b6 <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <uartAvailable+0x84>)
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	4413      	add	r3, r2
 800338e:	3308      	adds	r3, #8
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <uartAvailable+0x88>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	1a8a      	subs	r2, r1, r2
 800339c:	4908      	ldr	r1, [pc, #32]	; (80033c0 <uartAvailable+0x84>)
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	440b      	add	r3, r1
 80033a2:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	4a05      	ldr	r2, [pc, #20]	; (80033c0 <uartAvailable+0x84>)
 80033aa:	4413      	add	r3, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fd3e 	bl	8001e2e <qbufferAvailable>
 80033b2:	60f8      	str	r0, [r7, #12]
      break;
 80033b4:	bf00      	nop
  }

  return ret;
 80033b6:	68fb      	ldr	r3, [r7, #12]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20001118 	.word	0x20001118
 80033c4:	200012c8 	.word	0x200012c8

080033c8 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d002      	beq.n	80033e2 <uartRead+0x1a>
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d008      	beq.n	80033f2 <uartRead+0x2a>
 80033e0:	e00f      	b.n	8003402 <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80033e2:	f107 030f 	add.w	r3, r7, #15
 80033e6:	2201      	movs	r2, #1
 80033e8:	4619      	mov	r1, r3
 80033ea:	4808      	ldr	r0, [pc, #32]	; (800340c <uartRead+0x44>)
 80033ec:	f7fe fce2 	bl	8001db4 <qbufferRead>
      break;
 80033f0:	e007      	b.n	8003402 <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80033f2:	f107 030f 	add.w	r3, r7, #15
 80033f6:	2201      	movs	r2, #1
 80033f8:	4619      	mov	r1, r3
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <uartRead+0x48>)
 80033fc:	f7fe fcda 	bl	8001db4 <qbufferRead>
      break;
 8003400:	bf00      	nop
  }

  return ret;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20001118 	.word	0x20001118
 8003410:	20001128 	.word	0x20001128

08003414 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <uartWrite+0x1e>
 800342c:	2b01      	cmp	r3, #1
 800342e:	d00f      	beq.n	8003450 <uartWrite+0x3c>
 8003430:	e020      	b.n	8003474 <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	b29a      	uxth	r2, r3
 8003436:	2364      	movs	r3, #100	; 0x64
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4811      	ldr	r0, [pc, #68]	; (8003480 <uartWrite+0x6c>)
 800343c:	f003 f85e 	bl	80064fc <HAL_UART_Transmit>
 8003440:	4603      	mov	r3, r0
 8003442:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d111      	bne.n	800346e <uartWrite+0x5a>
        {
          ret = length;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	617b      	str	r3, [r7, #20]
        }
      break;
 800344e:	e00e      	b.n	800346e <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	b29a      	uxth	r2, r3
 8003454:	2364      	movs	r3, #100	; 0x64
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	4809      	ldr	r0, [pc, #36]	; (8003480 <uartWrite+0x6c>)
 800345a:	f003 f84f 	bl	80064fc <HAL_UART_Transmit>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <uartWrite+0x5e>
      {
        ret = length;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	617b      	str	r3, [r7, #20]
      }
      break;
 800346c:	e001      	b.n	8003472 <uartWrite+0x5e>
      break;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <uartWrite+0x60>
      break;
 8003472:	bf00      	nop
  }

  return ret;
 8003474:	697b      	ldr	r3, [r7, #20]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20001228 	.word	0x20001228

08003484 <uartPrintf>:

  return ret;
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8003484:	b40e      	push	{r1, r2, r3}
 8003486:	b580      	push	{r7, lr}
 8003488:	b0c7      	sub	sp, #284	; 0x11c
 800348a:	af00      	add	r7, sp, #0
 800348c:	4602      	mov	r2, r0
 800348e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003492:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003496:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003498:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800349c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80034a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034a4:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80034a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80034aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034ae:	f107 0010 	add.w	r0, r7, #16
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80034b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034bc:	f005 fd0e 	bl	8008edc <vsniprintf>
 80034c0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80034c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034c8:	f107 0110 	add.w	r1, r7, #16
 80034cc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80034d0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff ff9c 	bl	8003414 <uartWrite>
 80034dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80034e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f0:	b003      	add	sp, #12
 80034f2:	4770      	bx	lr

080034f4 <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5b      	ldr	r2, [pc, #364]	; (80036a8 <HAL_UART_MspInit+0x18c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	f040 80b0 	bne.w	80036a0 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_UART_MspInit+0x190>)
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_UART_MspInit+0x190>)
 800354a:	f043 0310 	orr.w	r3, r3, #16
 800354e:	6453      	str	r3, [r2, #68]	; 0x44
 8003550:	4b56      	ldr	r3, [pc, #344]	; (80036ac <HAL_UART_MspInit+0x190>)
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f003 0310 	and.w	r3, r3, #16
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	4b52      	ldr	r3, [pc, #328]	; (80036ac <HAL_UART_MspInit+0x190>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_UART_MspInit+0x190>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6313      	str	r3, [r2, #48]	; 0x30
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_UART_MspInit+0x190>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_UART_MspInit+0x190>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_UART_MspInit+0x190>)
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_UART_MspInit+0x190>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003598:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	2303      	movs	r3, #3
 80035a4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035a6:	2307      	movs	r3, #7
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	483f      	ldr	r0, [pc, #252]	; (80036b0 <HAL_UART_MspInit+0x194>)
 80035b2:	f001 fd53 	bl	800505c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	2302      	movs	r3, #2
 80035bc:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c2:	2303      	movs	r3, #3
 80035c4:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035c6:	2307      	movs	r3, #7
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4619      	mov	r1, r3
 80035d0:	4838      	ldr	r0, [pc, #224]	; (80036b4 <HAL_UART_MspInit+0x198>)
 80035d2:	f001 fd43 	bl	800505c <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035d8:	4a38      	ldr	r2, [pc, #224]	; (80036bc <HAL_UART_MspInit+0x1a0>)
 80035da:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e2:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035e4:	4b34      	ldr	r3, [pc, #208]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ea:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f0:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f6:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f8:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 8003600:	2200      	movs	r2, #0
 8003602:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 8003606:	2200      	movs	r2, #0
 8003608:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 800360c:	2200      	movs	r2, #0
 800360e:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 8003612:	2200      	movs	r2, #0
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003616:	4828      	ldr	r0, [pc, #160]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 8003618:	f000 fe48 	bl	80042ac <HAL_DMA_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 8003622:	f7fe fa31 	bl	8001a88 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a23      	ldr	r2, [pc, #140]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_UART_MspInit+0x19c>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003632:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_UART_MspInit+0x1a8>)
 8003636:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 800363a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363e:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003640:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003646:	4b1e      	ldr	r3, [pc, #120]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003648:	2200      	movs	r2, #0
 800364a:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800364c:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 800364e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003652:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 800365c:	2200      	movs	r2, #0
 800365e:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003666:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003668:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 800366a:	2200      	movs	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366e:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003676:	f000 fe19 	bl	80042ac <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8003680:	f7fe fa02 	bl	8001a88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 8003688:	635a      	str	r2, [r3, #52]	; 0x34
 800368a:	4a0d      	ldr	r2, [pc, #52]	; (80036c0 <HAL_UART_MspInit+0x1a4>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2025      	movs	r0, #37	; 0x25
 8003696:	f000 fdc4 	bl	8004222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800369a:	2025      	movs	r0, #37	; 0x25
 800369c:	f000 fddd 	bl	800425a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80036a0:	bf00      	nop
 80036a2:	3728      	adds	r7, #40	; 0x28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40023800 	.word	0x40023800
 80036b0:	40020000 	.word	0x40020000
 80036b4:	40020400 	.word	0x40020400
 80036b8:	20001268 	.word	0x20001268
 80036bc:	400264b8 	.word	0x400264b8
 80036c0:	200012c8 	.word	0x200012c8
 80036c4:	40026440 	.word	0x40026440

080036c8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a11      	ldr	r2, [pc, #68]	; (800371c <HAL_UART_MspDeInit+0x54>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d11b      	bne.n	8003712 <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_UART_MspDeInit+0x58>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_UART_MspDeInit+0x58>)
 80036e0:	f023 0310 	bic.w	r3, r3, #16
 80036e4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80036e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036ea:	480e      	ldr	r0, [pc, #56]	; (8003724 <HAL_UART_MspDeInit+0x5c>)
 80036ec:	f001 fe3a 	bl	8005364 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80036f0:	2140      	movs	r1, #64	; 0x40
 80036f2:	480d      	ldr	r0, [pc, #52]	; (8003728 <HAL_UART_MspDeInit+0x60>)
 80036f4:	f001 fe36 	bl	8005364 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fe83 	bl	8004408 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fe7e 	bl	8004408 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800370c:	2025      	movs	r0, #37	; 0x25
 800370e:	f000 fdb2 	bl	8004276 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40011000 	.word	0x40011000
 8003720:	40023800 	.word	0x40023800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400

0800372c <ymodemInit>:




bool ymodemInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <ymodemInit+0x14>)
 8003732:	4804      	ldr	r0, [pc, #16]	; (8003744 <ymodemInit+0x18>)
 8003734:	f7fe fe90 	bl	8002458 <cliAdd>
#endif

  return true;
 8003738:	2301      	movs	r3, #1
}
 800373a:	4618      	mov	r0, r3
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	08003d49 	.word	0x08003d49
 8003744:	0800bfd0 	.word	0x0800bfd0

08003748 <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]

  p_modem->ch = ch;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	701a      	strb	r2, [r3, #0]
  p_modem->is_init = true;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	705a      	strb	r2, [r3, #1]

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	729a      	strb	r2, [r3, #10]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  p_modem->pre_time        = millis();
 8003786:	f7fe f8f6 	bl	8001976 <millis>
 800378a:	4602      	mov	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
  p_modem->start_time      = 3000;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003796:	611a      	str	r2, [r3, #16]
  p_modem->ack_mode        = 0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	765a      	strb	r2, [r3, #25]

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  return ret;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]

  ret = uartWrite(p_modem->ch, &data, 1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	1cf9      	adds	r1, r7, #3
 80037ca:	2201      	movs	r2, #1
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fe21 	bl	8003414 <uartWrite>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]

  return ret;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  bool ret = true;
 80037f0:	2301      	movs	r3, #1
 80037f2:	72fb      	strb	r3, [r7, #11]
  bool valid;
  uint16_t size_i;

  valid = false;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<128; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e01c      	b.n	8003838 <ymodemGetFileInfo+0x50>
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4413      	add	r3, r2
 8003808:	7819      	ldrb	r1, [r3, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	331a      	adds	r3, #26
 8003812:	460a      	mov	r2, r1
 8003814:	701a      	strb	r2, [r3, #0]
    if (p_modem->file_name[i] == 0x00)
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	331a      	adds	r3, #26
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <ymodemGetFileInfo+0x4a>
    {
      size_i = i + 1;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	b29b      	uxth	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	82bb      	strh	r3, [r7, #20]
      valid = true;
 800382c:	2301      	movs	r3, #1
 800382e:	75fb      	strb	r3, [r7, #23]
      break;
 8003830:	e005      	b.n	800383e <ymodemGetFileInfo+0x56>
  for (int i=0; i<128; i++)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	3301      	adds	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b7f      	cmp	r3, #127	; 0x7f
 800383c:	dddf      	ble.n	80037fe <ymodemGetFileInfo+0x16>
    }
  }

  if (valid == true)
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d026      	beq.n	8003892 <ymodemGetFileInfo+0xaa>
  {
    for (int i=size_i; i<128; i++)
 8003844:	8abb      	ldrh	r3, [r7, #20]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e012      	b.n	8003870 <ymodemGetFileInfo+0x88>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b20      	cmp	r3, #32
 8003858:	d107      	bne.n	800386a <ymodemGetFileInfo+0x82>
      {
        p_modem->rx_packet.data[i] = 0x00;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
        break;
 8003868:	e005      	b.n	8003876 <ymodemGetFileInfo+0x8e>
    for (int i=size_i; i<128; i++)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3301      	adds	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b7f      	cmp	r3, #127	; 0x7f
 8003874:	dde9      	ble.n	800384a <ymodemGetFileInfo+0x62>
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800387c:	8abb      	ldrh	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	2200      	movs	r2, #0
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f005 faf3 	bl	8008e70 <strtoul>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }

  return ret;
 8003892:	7afb      	ldrb	r3, [r7, #11]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <ymodemReceive>:

  return true;
}

bool ymodemReceive(ymodem_t *p_modem)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80038a4:	2300      	movs	r3, #0
 80038a6:	73fb      	strb	r3, [r7, #15]
  bool update = false;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73bb      	strb	r3, [r7, #14]
  uint32_t buf_length;


  if (p_modem->is_init != true)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <ymodemReceive+0x28>
  {
    p_modem->type = YMODEM_TYPE_ERROR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2204      	movs	r2, #4
 80038be:	721a      	strb	r2, [r3, #8]
    return true;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e130      	b.n	8003b26 <ymodemReceive+0x28a>
  }

  if (uartAvailable(p_modem->ch) > 0)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fd37 	bl	800333c <uartAvailable>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <ymodemReceive+0x4e>
  {
    p_modem->rx_data = uartRead(p_modem->ch);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fd75 	bl	80033c8 <uartRead>
 80038de:	4603      	mov	r3, r0
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	725a      	strb	r2, [r3, #9]
    update = true;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73bb      	strb	r3, [r7, #14]

    //uartPrintf(_DEF_UART1, "Rx 0x%X, %d\n", p_modem->rx_data, p_modem->rx_packet.state);
  }

  if (update == true && ymodemReceivePacket(&p_modem->rx_packet, p_modem->rx_data) == true)
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8101 	beq.w	8003af4 <ymodemReceive+0x258>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7a5b      	ldrb	r3, [r3, #9]
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 f916 	bl	8003b30 <ymodemReceivePacket>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80f4 	beq.w	8003af4 <ymodemReceive+0x258>
  {
    //uartPrintf(_DEF_UART1, "RxPacket 0x%X\n", p_modem->rx_packet.stx);

    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7a9b      	ldrb	r3, [r3, #10]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <ymodemReceive+0x88>
    {
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800391a:	2b18      	cmp	r3, #24
 800391c:	d102      	bne.n	8003924 <ymodemReceive+0x88>
      {
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2205      	movs	r2, #5
 8003922:	729a      	strb	r2, [r3, #10]
      }
    }

    switch(p_modem->state)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	7a9b      	ldrb	r3, [r3, #10]
 8003928:	2b05      	cmp	r3, #5
 800392a:	f200 80fb 	bhi.w	8003b24 <ymodemReceive+0x288>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <ymodemReceive+0x98>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	0800394d 	.word	0x0800394d
 8003938:	08003999 	.word	0x08003999
 800393c:	08003a25 	.word	0x08003a25
 8003940:	08003aa1 	.word	0x08003aa1
 8003944:	08003ab9 	.word	0x08003ab9
 8003948:	08003ad3 	.word	0x08003ad3
    {
      case YMODEM_STATE_WAIT_HEAD:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <ymodemReceive+0xca>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 8003956:	2115      	movs	r1, #21
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff2b 	bl	80037b4 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	729a      	strb	r2, [r3, #10]

          p_modem->state = YMODEM_STATE_WAIT_FIRST;
          p_modem->type = YMODEM_TYPE_START;
          ret = true;
        }
        break;
 8003964:	e0c2      	b.n	8003aec <ymodemReceive+0x250>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 80bd 	bne.w	8003aec <ymodemReceive+0x250>
          p_modem->file_addr = 0;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff34 	bl	80037e8 <ymodemGetFileInfo>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	765a      	strb	r2, [r3, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_START;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	721a      	strb	r2, [r3, #8]
          ret = true;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
        break;
 8003996:	e0a9      	b.n	8003aec <ymodemReceive+0x250>

      case YMODEM_STATE_WAIT_FIRST:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d107      	bne.n	80039b2 <ymodemReceive+0x116>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 80039a2:	2115      	movs	r1, #21
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff05 	bl	80037b4 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2203      	movs	r2, #3
 80039ae:	729a      	strb	r2, [r3, #10]
          ymodemPutch(p_modem, YMODEM_ACK);

          p_modem->state = YMODEM_STATE_WAIT_DATA;
          p_modem->type = YMODEM_TYPE_DATA;
        }
        break;
 80039b0:	e09e      	b.n	8003af0 <ymodemReceive+0x254>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f040 8099 	bne.w	8003af0 <ymodemReceive+0x254>
          p_modem->file_addr = 0;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received = 0;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          buf_length = (p_modem->file_length - p_modem->file_addr);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d903      	bls.n	80039f4 <ymodemReceive+0x158>
            buf_length = p_modem->rx_packet.length;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039f2:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_received += buf_length;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8003a0e:	2106      	movs	r1, #6
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fecf 	bl	80037b4 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	721a      	strb	r2, [r3, #8]
        break;
 8003a22:	e065      	b.n	8003af0 <ymodemReceive+0x254>

      case YMODEM_STATE_WAIT_DATA:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d107      	bne.n	8003a3e <ymodemReceive+0x1a2>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 8003a2e:	2115      	movs	r1, #21
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff febf 	bl	80037b4 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	729a      	strb	r2, [r3, #10]
          //ymodemPutch(p_modem, YMODEM_ACK);
          p_modem->ack_mode = YMODEM_RESP_ACK;
          p_modem->type = YMODEM_TYPE_DATA;
          ret = true;
        }
        break;
 8003a3c:	e059      	b.n	8003af2 <ymodemReceive+0x256>
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d903      	bls.n	8003a64 <ymodemReceive+0x1c8>
            buf_length = p_modem->rx_packet.length;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a62:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	441a      	add	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	765a      	strb	r2, [r3, #25]
          p_modem->type = YMODEM_TYPE_DATA;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	721a      	strb	r2, [r3, #8]
          ret = true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9e:	e028      	b.n	8003af2 <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_LAST:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003aa0:	2106      	movs	r1, #6
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe86 	bl	80037b4 <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C);
 8003aa8:	2143      	movs	r1, #67	; 0x43
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fe82 	bl	80037b4 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	729a      	strb	r2, [r3, #10]
        break;
 8003ab6:	e01c      	b.n	8003af2 <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_END:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003ab8:	2106      	movs	r1, #6
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe7a 	bl	80037b4 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_END;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003acc:	2301      	movs	r3, #1
 8003ace:	73fb      	strb	r3, [r7, #15]
        break;
 8003ad0:	e00f      	b.n	8003af2 <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_CANCEL:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003ad2:	2106      	movs	r1, #6
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7ff fe6d 	bl	80037b4 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aea:	e002      	b.n	8003af2 <ymodemReceive+0x256>
        break;
 8003aec:	bf00      	nop
 8003aee:	e019      	b.n	8003b24 <ymodemReceive+0x288>
        break;
 8003af0:	bf00      	nop
    switch(p_modem->state)
 8003af2:	e017      	b.n	8003b24 <ymodemReceive+0x288>
    }
  }
  else
  {
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d112      	bne.n	8003b24 <ymodemReceive+0x288>
    {
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8003afe:	f7fd ff3a 	bl	8001976 <millis>
 8003b02:	4602      	mov	r2, r0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	1ad2      	subs	r2, r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d308      	bcc.n	8003b24 <ymodemReceive+0x288>
      {
        p_modem->pre_time = millis();
 8003b12:	f7fd ff30 	bl	8001976 <millis>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8003b1c:	2143      	movs	r1, #67	; 0x43
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fe48 	bl	80037b4 <ymodemPutch>
      }
    }
  }

  return ret;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop

08003b30 <ymodemReceivePacket>:

bool ymodemReceivePacket(ymodem_packet_t *p_packet, uint8_t data_in)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]


  switch(p_packet->state)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	f200 809b 	bhi.w	8003c80 <ymodemReceivePacket+0x150>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <ymodemReceivePacket+0x20>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b69 	.word	0x08003b69
 8003b54:	08003bbd 	.word	0x08003bbd
 8003b58:	08003bcb 	.word	0x08003bcb
 8003b5c:	08003bf5 	.word	0x08003bf5
 8003b60:	08003c23 	.word	0x08003c23
 8003b64:	08003c37 	.word	0x08003c37
  {
    case YMODEM_PACKET_WAIT_FIRST:
      if (data_in == YMODEM_SOH)
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d108      	bne.n	8003b80 <ymodemReceivePacket+0x50>
      {
        p_packet->length = 128;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_STX)
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d109      	bne.n	8003b9a <ymodemReceivePacket+0x6a>
      {
        p_packet->length = 1024;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b8c:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_EOT)
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d104      	bne.n	8003baa <ymodemReceivePacket+0x7a>
      {
        p_packet->stx = data_in;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      if (data_in == YMODEM_CAN)
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	2b18      	cmp	r3, #24
 8003bae:	d162      	bne.n	8003c76 <ymodemReceivePacket+0x146>
      {
        p_packet->stx = data_in;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e05c      	b.n	8003c76 <ymodemReceivePacket+0x146>

    case YMODEM_PACKET_WAIT_SEQ1:
      p_packet->seq[0] = data_in;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	715a      	strb	r2, [r3, #5]
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	701a      	strb	r2, [r3, #0]
      break;
 8003bc8:	e05a      	b.n	8003c80 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_SEQ2:
      p_packet->seq[1] = data_in;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	719a      	strb	r2, [r3, #6]
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	795a      	ldrb	r2, [r3, #5]
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d106      	bne.n	8003bec <ymodemReceivePacket+0xbc>
      {
        p_packet->index = 0;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	805a      	strh	r2, [r3, #2]
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2203      	movs	r2, #3
 8003be8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
      }
      break;
 8003bea:	e049      	b.n	8003c80 <ymodemReceivePacket+0x150>
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
      break;
 8003bf2:	e045      	b.n	8003c80 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_DATA:
      p_packet->data[p_packet->index] = data_in;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	8852      	ldrh	r2, [r2, #2]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	701a      	strb	r2, [r3, #0]
      p_packet->index++;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	885b      	ldrh	r3, [r3, #2]
 8003c06:	3301      	adds	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	805a      	strh	r2, [r3, #2]
      if (p_packet->index >= p_packet->length)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	885a      	ldrh	r2, [r3, #2]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	899b      	ldrh	r3, [r3, #12]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d32f      	bcc.n	8003c7a <ymodemReceivePacket+0x14a>
      {
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003c20:	e02b      	b.n	8003c7a <ymodemReceivePacket+0x14a>

    case YMODEM_PACKET_WAIT_CRCH:
      p_packet->crc_recv = (data_in<<8);
 8003c22:	78fb      	ldrb	r3, [r7, #3]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2205      	movs	r2, #5
 8003c32:	701a      	strb	r2, [r3, #0]
      break;
 8003c34:	e024      	b.n	8003c80 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_CRCL:
      p_packet->crc_recv |= (data_in<<0);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8a1a      	ldrh	r2, [r3, #16]
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]

      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	899b      	ldrh	r3, [r3, #12]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f000 f83a 	bl	8003cd0 <crc16>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	81da      	strh	r2, [r3, #14]

      if (p_packet->crc == p_packet->crc_recv)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	89da      	ldrh	r2, [r3, #14]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8a1b      	ldrh	r3, [r3, #16]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d106      	bne.n	8003c7e <ymodemReceivePacket+0x14e>
      {
        ret = true;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      //uartPrintf(_DEF_UART1, "crc %X %X\n", p_packet->crc, p_packet->crc_recv);
      break;
 8003c74:	e003      	b.n	8003c7e <ymodemReceivePacket+0x14e>
      break;
 8003c76:	bf00      	nop
 8003c78:	e002      	b.n	8003c80 <ymodemReceivePacket+0x150>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e000      	b.n	8003c80 <ymodemReceivePacket+0x150>
      break;
 8003c7e:	bf00      	nop
  }

  return ret;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop

08003c8c <crc_update>:


#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	80fb      	strh	r3, [r7, #6]
  uint16_t xor = crc_in >> 15;
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	0bdb      	lsrs	r3, r3, #15
 8003c9c:	81bb      	strh	r3, [r7, #12]
  uint16_t out = crc_in << 1;
 8003c9e:	88fb      	ldrh	r3, [r7, #6]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	81fb      	strh	r3, [r7, #14]

  if (incr)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <crc_update+0x24>
  {
    out++;
 8003caa:	89fb      	ldrh	r3, [r7, #14]
 8003cac:	3301      	adds	r3, #1
 8003cae:	81fb      	strh	r3, [r7, #14]
  }

  if (xor)
 8003cb0:	89bb      	ldrh	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <crc_update+0x36>
  {
    out ^= CRC_POLY;
 8003cb6:	89fb      	ldrh	r3, [r7, #14]
 8003cb8:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003cbc:	f083 0301 	eor.w	r3, r3, #1
 8003cc0:	81fb      	strh	r3, [r7, #14]
  }

  return out;
 8003cc2:	89fb      	ldrh	r3, [r7, #14]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <crc16>:

uint16_t crc16(uint8_t *data, uint16_t size)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	81fb      	strh	r3, [r7, #14]
 8003ce0:	e01a      	b.n	8003d18 <crc16+0x48>
  {
    for (i = 0x80; i; i >>= 1)
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	81bb      	strh	r3, [r7, #12]
 8003ce6:	e00e      	b.n	8003d06 <crc16+0x36>
    {
      crc = crc_update(crc, *data & i);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	89bb      	ldrh	r3, [r7, #12]
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ffc8 	bl	8003c8c <crc_update>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	81fb      	strh	r3, [r7, #14]
    for (i = 0x80; i; i >>= 1)
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	085b      	lsrs	r3, r3, #1
 8003d04:	81bb      	strh	r3, [r7, #12]
 8003d06:	89bb      	ldrh	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ed      	bne.n	8003ce8 <crc16+0x18>
  for (crc = 0; size > 0; size--, data++)
 8003d0c:	887b      	ldrh	r3, [r7, #2]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	807b      	strh	r3, [r7, #2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3301      	adds	r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e1      	bne.n	8003ce2 <crc16+0x12>
    }
  }

  for (i = 0; i < 16; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	81bb      	strh	r3, [r7, #12]
 8003d22:	e009      	b.n	8003d38 <crc16+0x68>
  {
    crc = crc_update(crc, 0);
 8003d24:	89fb      	ldrh	r3, [r7, #14]
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ffaf 	bl	8003c8c <crc_update>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < 16; i++)
 8003d32:	89bb      	ldrh	r3, [r7, #12]
 8003d34:	3301      	adds	r3, #1
 8003d36:	81bb      	strh	r3, [r7, #12]
 8003d38:	89bb      	ldrh	r3, [r7, #12]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	d9f2      	bls.n	8003d24 <crc16+0x54>
  }

  return crc;
 8003d3e:	89fb      	ldrh	r3, [r7, #14]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <cliYmodem>:


#ifdef _USE_HW_CLI
void cliYmodem(cli_args_t *args)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d54:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d58:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  ymodem_t ymodem;
  bool keep_loop;
  uint8_t log_ch = _DEF_UART2;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 34d5 	strb.w	r3, [r7, #1237]	; 0x4d5


  if (args->argc == 1 && args->isStr(0, "down"))
 8003d66:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d6a:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	f040 808a 	bne.w	8003e8c <cliYmodem+0x144>
 8003d78:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d7c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4949      	ldr	r1, [pc, #292]	; (8003eac <cliYmodem+0x164>)
 8003d86:	2000      	movs	r0, #0
 8003d88:	4798      	blx	r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d07d      	beq.n	8003e8c <cliYmodem+0x144>
  {
    ymodemOpen(&ymodem, _DEF_UART1);
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fcd6 	bl	8003748 <ymodemOpen>

    keep_loop = true;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6

    while(keep_loop)
 8003da2:	bf00      	nop
 8003da4:	e06b      	b.n	8003e7e <cliYmodem+0x136>
    {
      if (ymodemReceive(&ymodem) == true)
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fd76 	bl	800389c <ymodemReceive>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d062      	beq.n	8003e7c <cliYmodem+0x134>
      {
        switch(ymodem.type)
 8003db6:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dba:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003dbe:	7a1b      	ldrb	r3, [r3, #8]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d85c      	bhi.n	8003e7e <cliYmodem+0x136>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <cliYmodem+0x84>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e41 	.word	0x08003e41
 8003dd8:	08003e55 	.word	0x08003e55
 8003ddc:	08003e69 	.word	0x08003e69
        {
          case YMODEM_TYPE_START:
            uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\n", ymodem.file_name, ymodem.file_length);
 8003de0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003de4:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003de8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	f103 021a 	add.w	r2, r3, #26
 8003df4:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003df8:	460b      	mov	r3, r1
 8003dfa:	492d      	ldr	r1, [pc, #180]	; (8003eb0 <cliYmodem+0x168>)
 8003dfc:	f7ff fb42 	bl	8003484 <uartPrintf>
            break;
 8003e00:	e03d      	b.n	8003e7e <cliYmodem+0x136>

          case YMODEM_TYPE_DATA:
            uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8003e02:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003e06:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003e0a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003e14:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003e18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e1c:	2264      	movs	r2, #100	; 0x64
 8003e1e:	fb03 f202 	mul.w	r2, r3, r2
 8003e22:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003e26:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e32:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003e36:	460a      	mov	r2, r1
 8003e38:	491e      	ldr	r1, [pc, #120]	; (8003eb4 <cliYmodem+0x16c>)
 8003e3a:	f7ff fb23 	bl	8003484 <uartPrintf>
            break;
 8003e3e:	e01e      	b.n	8003e7e <cliYmodem+0x136>

          case YMODEM_TYPE_END:
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8003e40:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e44:	491c      	ldr	r1, [pc, #112]	; (8003eb8 <cliYmodem+0x170>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fb1c 	bl	8003484 <uartPrintf>
            keep_loop = false;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e52:	e014      	b.n	8003e7e <cliYmodem+0x136>

          case YMODEM_TYPE_CANCEL:
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8003e54:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e58:	4918      	ldr	r1, [pc, #96]	; (8003ebc <cliYmodem+0x174>)
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fb12 	bl	8003484 <uartPrintf>
            keep_loop = false;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e66:	e00a      	b.n	8003e7e <cliYmodem+0x136>

          case YMODEM_TYPE_ERROR:
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8003e68:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e6c:	4914      	ldr	r1, [pc, #80]	; (8003ec0 <cliYmodem+0x178>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fb08 	bl	8003484 <uartPrintf>
            keep_loop = false;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e7a:	e000      	b.n	8003e7e <cliYmodem+0x136>
        }
      }
 8003e7c:	bf00      	nop
    while(keep_loop)
 8003e7e:	f897 34d6 	ldrb.w	r3, [r7, #1238]	; 0x4d6
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d18f      	bne.n	8003da6 <cliYmodem+0x5e>
    }
    ret = true;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  }


  if (ret != true)
 8003e8c:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <cliYmodem+0x158>
  {
    cliPrintf("ymodem down\n");
 8003e9a:	480a      	ldr	r0, [pc, #40]	; (8003ec4 <cliYmodem+0x17c>)
 8003e9c:	f7fe f9cc 	bl	8002238 <cliPrintf>
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	0800bfd8 	.word	0x0800bfd8
 8003eb0:	0800bfe0 	.word	0x0800bfe0
 8003eb4:	0800bffc 	.word	0x0800bffc
 8003eb8:	0800c018 	.word	0x0800c018
 8003ebc:	0800c02c 	.word	0x0800c02c
 8003ec0:	0800c044 	.word	0x0800c044
 8003ec4:	0800c058 	.word	0x0800c058

08003ec8 <hwInit>:
    };



void hwInit(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  bspInit();
 8003ecc:	f7fd fcf8 	bl	80018c0 <bspInit>


  DWT_Delay_Init();
 8003ed0:	f7fd ffc6 	bl	8001e60 <DWT_Delay_Init>

  rtcInit();
 8003ed4:	f7ff f894 	bl	8003000 <rtcInit>
  resetInit();
 8003ed8:	f7ff f85a 	bl	8002f90 <resetInit>
  cliInit();
 8003edc:	f7fe f928 	bl	8002130 <cliInit>
  ledInit();
 8003ee0:	f7fe ff5c 	bl	8002d9c <ledInit>
  uartInit();
 8003ee4:	f7ff f8fe 	bl	80030e4 <uartInit>
  buttonInit();
 8003ee8:	f7fe f812 	bl	8001f10 <buttonInit>
  flashInit();
 8003eec:	f7fe fd84 	bl	80029f8 <flashInit>
  ymodemInit();
 8003ef0:	f7ff fc1c 	bl	800372c <ymodemInit>
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003efc:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <HAL_Init+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <HAL_Init+0x40>)
 8003f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_Init+0x40>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	; (8003f38 <HAL_Init+0x40>)
 8003f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_Init+0x40>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a07      	ldr	r2, [pc, #28]	; (8003f38 <HAL_Init+0x40>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f20:	2003      	movs	r0, #3
 8003f22:	f000 f973 	bl	800420c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f26:	2000      	movs	r0, #0
 8003f28:	f000 f808 	bl	8003f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f2c:	f7fd fdb2 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00

08003f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_InitTick+0x54>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_InitTick+0x58>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f999 	bl	8004292 <HAL_SYSTICK_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00e      	b.n	8003f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b0f      	cmp	r3, #15
 8003f6e:	d80a      	bhi.n	8003f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f70:	2200      	movs	r2, #0
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	f000 f953 	bl	8004222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f7c:	4a06      	ldr	r2, [pc, #24]	; (8003f98 <HAL_InitTick+0x5c>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000000c 	.word	0x2000000c
 8003f94:	20000274 	.word	0x20000274
 8003f98:	20000270 	.word	0x20000270

08003f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_IncTick+0x20>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <HAL_IncTick+0x24>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_IncTick+0x24>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000274 	.word	0x20000274
 8003fc0:	20001328 	.word	0x20001328

08003fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <HAL_GetTick+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20001328 	.word	0x20001328

08003fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff ffee 	bl	8003fc4 <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d005      	beq.n	8004002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	; (8004020 <HAL_Delay+0x44>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004002:	bf00      	nop
 8004004:	f7ff ffde 	bl	8003fc4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d8f7      	bhi.n	8004004 <HAL_Delay+0x28>
  {
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000274 	.word	0x20000274

08004024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004034:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <__NVIC_SetPriorityGrouping+0x44>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004040:	4013      	ands	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800404c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <__NVIC_SetPriorityGrouping+0x44>)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	60d3      	str	r3, [r2, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <__NVIC_GetPriorityGrouping+0x18>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	f003 0307 	and.w	r3, r3, #7
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	2b00      	cmp	r3, #0
 8004098:	db0b      	blt.n	80040b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800409a:	79fb      	ldrb	r3, [r7, #7]
 800409c:	f003 021f 	and.w	r2, r3, #31
 80040a0:	4907      	ldr	r1, [pc, #28]	; (80040c0 <__NVIC_EnableIRQ+0x38>)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2001      	movs	r0, #1
 80040aa:	fa00 f202 	lsl.w	r2, r0, r2
 80040ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000e100 	.word	0xe000e100

080040c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db12      	blt.n	80040fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	f003 021f 	and.w	r2, r3, #31
 80040dc:	490a      	ldr	r1, [pc, #40]	; (8004108 <__NVIC_DisableIRQ+0x44>)
 80040de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	2001      	movs	r0, #1
 80040e6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ea:	3320      	adds	r3, #32
 80040ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80040f0:	f3bf 8f4f 	dsb	sy
}
 80040f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040f6:	f3bf 8f6f 	isb	sy
}
 80040fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000e100 	.word	0xe000e100

0800410c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	6039      	str	r1, [r7, #0]
 8004116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411c:	2b00      	cmp	r3, #0
 800411e:	db0a      	blt.n	8004136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	490c      	ldr	r1, [pc, #48]	; (8004158 <__NVIC_SetPriority+0x4c>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	0112      	lsls	r2, r2, #4
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	440b      	add	r3, r1
 8004130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004134:	e00a      	b.n	800414c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4908      	ldr	r1, [pc, #32]	; (800415c <__NVIC_SetPriority+0x50>)
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	3b04      	subs	r3, #4
 8004144:	0112      	lsls	r2, r2, #4
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	440b      	add	r3, r1
 800414a:	761a      	strb	r2, [r3, #24]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000e100 	.word	0xe000e100
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	; 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f1c3 0307 	rsb	r3, r3, #7
 800417a:	2b04      	cmp	r3, #4
 800417c:	bf28      	it	cs
 800417e:	2304      	movcs	r3, #4
 8004180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3304      	adds	r3, #4
 8004186:	2b06      	cmp	r3, #6
 8004188:	d902      	bls.n	8004190 <NVIC_EncodePriority+0x30>
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3b03      	subs	r3, #3
 800418e:	e000      	b.n	8004192 <NVIC_EncodePriority+0x32>
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	f04f 32ff 	mov.w	r2, #4294967295
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43da      	mvns	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	401a      	ands	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041a8:	f04f 31ff 	mov.w	r1, #4294967295
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	43d9      	mvns	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	4313      	orrs	r3, r2
         );
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d8:	d301      	bcc.n	80041de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041da:	2301      	movs	r3, #1
 80041dc:	e00f      	b.n	80041fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <SysTick_Config+0x40>)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041e6:	210f      	movs	r1, #15
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	f7ff ff8e 	bl	800410c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <SysTick_Config+0x40>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <SysTick_Config+0x40>)
 80041f8:	2207      	movs	r2, #7
 80041fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	e000e010 	.word	0xe000e010

0800420c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff05 	bl	8004024 <__NVIC_SetPriorityGrouping>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	4603      	mov	r3, r0
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004234:	f7ff ff1a 	bl	800406c <__NVIC_GetPriorityGrouping>
 8004238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	6978      	ldr	r0, [r7, #20]
 8004240:	f7ff ff8e 	bl	8004160 <NVIC_EncodePriority>
 8004244:	4602      	mov	r2, r0
 8004246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff ff5d 	bl	800410c <__NVIC_SetPriority>
}
 8004252:	bf00      	nop
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff0d 	bl	8004088 <__NVIC_EnableIRQ>
}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	4603      	mov	r3, r0
 800427e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff1d 	bl	80040c4 <__NVIC_DisableIRQ>
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff ff94 	bl	80041c8 <SysTick_Config>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042b8:	f7ff fe84 	bl	8003fc4 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e099      	b.n	80043fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e8:	e00f      	b.n	800430a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ea:	f7ff fe6b 	bl	8003fc4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d908      	bls.n	800430a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2220      	movs	r2, #32
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2203      	movs	r2, #3
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e078      	b.n	80043fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e8      	bne.n	80042ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4b38      	ldr	r3, [pc, #224]	; (8004404 <HAL_DMA_Init+0x158>)
 8004324:	4013      	ands	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	2b04      	cmp	r3, #4
 8004362:	d107      	bne.n	8004374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	4313      	orrs	r3, r2
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0307 	bic.w	r3, r3, #7
 800438a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b04      	cmp	r3, #4
 800439c:	d117      	bne.n	80043ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00e      	beq.n	80043ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 faef 	bl	8004994 <DMA_CheckFifoParam>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2240      	movs	r2, #64	; 0x40
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043ca:	2301      	movs	r3, #1
 80043cc:	e016      	b.n	80043fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 faa6 	bl	8004928 <DMA_CalcBaseAndBitshift>
 80043dc:	4603      	mov	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	223f      	movs	r2, #63	; 0x3f
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	f010803f 	.word	0xf010803f

08004408 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e050      	b.n	80044bc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d101      	bne.n	800442a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
 8004428:	e048      	b.n	80044bc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2200      	movs	r2, #0
 8004448:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2200      	movs	r2, #0
 8004458:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2221      	movs	r2, #33	; 0x21
 8004468:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa5c 	bl	8004928 <DMA_CalcBaseAndBitshift>
 8004470:	4603      	mov	r3, r0
 8004472:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	223f      	movs	r2, #63	; 0x3f
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Start_IT+0x26>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e040      	b.n	800456c <HAL_DMA_Start_IT+0xa8>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d12f      	bne.n	800455e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f9da 	bl	80048cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	223f      	movs	r2, #63	; 0x3f
 800451e:	409a      	lsls	r2, r3
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0216 	orr.w	r2, r2, #22
 8004532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0208 	orr.w	r2, r2, #8
 800454a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e005      	b.n	800456a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004566:	2302      	movs	r3, #2
 8004568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800456a:	7dfb      	ldrb	r3, [r7, #23]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d004      	beq.n	8004592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e00c      	b.n	80045ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2205      	movs	r2, #5
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0201 	bic.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045c4:	4b8e      	ldr	r3, [pc, #568]	; (8004800 <HAL_DMA_IRQHandler+0x248>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a8e      	ldr	r2, [pc, #568]	; (8004804 <HAL_DMA_IRQHandler+0x24c>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a9b      	lsrs	r3, r3, #10
 80045d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	2208      	movs	r2, #8
 80045e4:	409a      	lsls	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01a      	beq.n	8004624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d013      	beq.n	8004624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	2208      	movs	r2, #8
 8004612:	409a      	lsls	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f043 0201 	orr.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	2201      	movs	r2, #1
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2201      	movs	r2, #1
 8004648:	409a      	lsls	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2204      	movs	r2, #4
 8004660:	409a      	lsls	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	2204      	movs	r2, #4
 800467e:	409a      	lsls	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	f043 0204 	orr.w	r2, r3, #4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2210      	movs	r2, #16
 8004696:	409a      	lsls	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d043      	beq.n	8004728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d03c      	beq.n	8004728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	2210      	movs	r2, #16
 80046b4:	409a      	lsls	r2, r3
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d018      	beq.n	80046fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d024      	beq.n	8004728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4798      	blx	r3
 80046e6:	e01f      	b.n	8004728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
 80046f8:	e016      	b.n	8004728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d107      	bne.n	8004718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0208 	bic.w	r2, r2, #8
 8004716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	2220      	movs	r2, #32
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4013      	ands	r3, r2
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 808f 	beq.w	8004858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8087 	beq.w	8004858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	2220      	movs	r2, #32
 8004750:	409a      	lsls	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b05      	cmp	r3, #5
 8004760:	d136      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0216 	bic.w	r2, r2, #22
 8004770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d103      	bne.n	8004792 <HAL_DMA_IRQHandler+0x1da>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0208 	bic.w	r2, r2, #8
 80047a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	223f      	movs	r2, #63	; 0x3f
 80047a8:	409a      	lsls	r2, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d07e      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
        }
        return;
 80047ce:	e079      	b.n	80048c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10d      	bne.n	8004808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d031      	beq.n	8004858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
 80047fc:	e02c      	b.n	8004858 <HAL_DMA_IRQHandler+0x2a0>
 80047fe:	bf00      	nop
 8004800:	2000000c 	.word	0x2000000c
 8004804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d023      	beq.n	8004858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
 8004818:	e01e      	b.n	8004858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10f      	bne.n	8004848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0210 	bic.w	r2, r2, #16
 8004836:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	2b00      	cmp	r3, #0
 800485e:	d032      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d022      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2205      	movs	r2, #5
 8004870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3301      	adds	r3, #1
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	d307      	bcc.n	80048a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <HAL_DMA_IRQHandler+0x2cc>
 800489e:	e000      	b.n	80048a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048a0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
 80048c2:	e000      	b.n	80048c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048c4:	bf00      	nop
    }
  }
}
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d108      	bne.n	800490c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800490a:	e007      	b.n	800491c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	3b10      	subs	r3, #16
 8004938:	4a14      	ldr	r2, [pc, #80]	; (800498c <DMA_CalcBaseAndBitshift+0x64>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004942:	4a13      	ldr	r2, [pc, #76]	; (8004990 <DMA_CalcBaseAndBitshift+0x68>)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d909      	bls.n	800496a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	1d1a      	adds	r2, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	659a      	str	r2, [r3, #88]	; 0x58
 8004968:	e007      	b.n	800497a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	aaaaaaab 	.word	0xaaaaaaab
 8004990:	0800c080 	.word	0x0800c080

08004994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d11f      	bne.n	80049ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d856      	bhi.n	8004a62 <DMA_CheckFifoParam+0xce>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <DMA_CheckFifoParam+0x28>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049cd 	.word	0x080049cd
 80049c0:	080049df 	.word	0x080049df
 80049c4:	080049cd 	.word	0x080049cd
 80049c8:	08004a63 	.word	0x08004a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d046      	beq.n	8004a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049dc:	e043      	b.n	8004a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049e6:	d140      	bne.n	8004a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ec:	e03d      	b.n	8004a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f6:	d121      	bne.n	8004a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d837      	bhi.n	8004a6e <DMA_CheckFifoParam+0xda>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <DMA_CheckFifoParam+0x70>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a1b 	.word	0x08004a1b
 8004a0c:	08004a15 	.word	0x08004a15
 8004a10:	08004a2d 	.word	0x08004a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      break;
 8004a18:	e030      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d025      	beq.n	8004a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2a:	e022      	b.n	8004a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a34:	d11f      	bne.n	8004a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a3a:	e01c      	b.n	8004a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d903      	bls.n	8004a4a <DMA_CheckFifoParam+0xb6>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d003      	beq.n	8004a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a48:	e018      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4e:	e015      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e00b      	b.n	8004a7a <DMA_CheckFifoParam+0xe6>
      break;
 8004a62:	bf00      	nop
 8004a64:	e00a      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
 8004a68:	e008      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;
 8004a6a:	bf00      	nop
 8004a6c:	e006      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e004      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;
 8004a72:	bf00      	nop
 8004a74:	e002      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004a76:	bf00      	nop
 8004a78:	e000      	b.n	8004a7c <DMA_CheckFifoParam+0xe8>
      break;
 8004a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop

08004a8c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a9e:	4b23      	ldr	r3, [pc, #140]	; (8004b2c <HAL_FLASH_Program+0xa0>)
 8004aa0:	7e1b      	ldrb	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_FLASH_Program+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e03b      	b.n	8004b22 <HAL_FLASH_Program+0x96>
 8004aaa:	4b20      	ldr	r3, [pc, #128]	; (8004b2c <HAL_FLASH_Program+0xa0>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ab4:	f000 f870 	bl	8004b98 <FLASH_WaitForLastOperation>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d12b      	bne.n	8004b1a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004ac8:	783b      	ldrb	r3, [r7, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f000 f91b 	bl	8004d08 <FLASH_Program_Byte>
 8004ad2:	e016      	b.n	8004b02 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004ada:	883b      	ldrh	r3, [r7, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	68b8      	ldr	r0, [r7, #8]
 8004ae0:	f000 f8ee 	bl	8004cc0 <FLASH_Program_HalfWord>
 8004ae4:	e00d      	b.n	8004b02 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d105      	bne.n	8004af8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f000 f8c3 	bl	8004c7c <FLASH_Program_Word>
 8004af6:	e004      	b.n	8004b02 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f000 f88b 	bl	8004c18 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b06:	f000 f847 	bl	8004b98 <FLASH_WaitForLastOperation>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_FLASH_Program+0xa4>)
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <HAL_FLASH_Program+0xa4>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_FLASH_Program+0xa0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000132c 	.word	0x2000132c
 8004b30:	40023c00 	.word	0x40023c00

08004b34 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_FLASH_Unlock+0x38>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da0b      	bge.n	8004b5e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_FLASH_Unlock+0x38>)
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <HAL_FLASH_Unlock+0x3c>)
 8004b4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <HAL_FLASH_Unlock+0x38>)
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <HAL_FLASH_Unlock+0x40>)
 8004b50:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_FLASH_Unlock+0x38>)
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da01      	bge.n	8004b5e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40023c00 	.word	0x40023c00
 8004b70:	45670123 	.word	0x45670123
 8004b74:	cdef89ab 	.word	0xcdef89ab

08004b78 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_FLASH_Lock+0x1c>)
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_FLASH_Lock+0x1c>)
 8004b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b86:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40023c00 	.word	0x40023c00

08004b98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <FLASH_WaitForLastOperation+0x78>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004baa:	f7ff fa0b 	bl	8003fc4 <HAL_GetTick>
 8004bae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bb0:	e010      	b.n	8004bd4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d00c      	beq.n	8004bd4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d007      	beq.n	8004bd0 <FLASH_WaitForLastOperation+0x38>
 8004bc0:	f7ff fa00 	bl	8003fc4 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d201      	bcs.n	8004bd4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e019      	b.n	8004c08 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <FLASH_WaitForLastOperation+0x7c>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e8      	bne.n	8004bb2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004be0:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <FLASH_WaitForLastOperation+0x7c>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <FLASH_WaitForLastOperation+0x7c>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <FLASH_WaitForLastOperation+0x7c>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004bfe:	f000 f8a5 	bl	8004d4c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
  
}  
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	2000132c 	.word	0x2000132c
 8004c14:	40023c00 	.word	0x40023c00

08004c18 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c36:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <FLASH_Program_DoubleWord+0x60>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c4e:	f3bf 8f6f 	isb	sy
}
 8004c52:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	000a      	movs	r2, r1
 8004c62:	2300      	movs	r3, #0
 8004c64:	68f9      	ldr	r1, [r7, #12]
 8004c66:	3104      	adds	r1, #4
 8004c68:	4613      	mov	r3, r2
 8004c6a:	600b      	str	r3, [r1, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40023c00 	.word	0x40023c00

08004c7c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004c98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a06      	ldr	r2, [pc, #24]	; (8004cbc <FLASH_Program_Word+0x40>)
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	601a      	str	r2, [r3, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40023c00 	.word	0x40023c00

08004cc0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <FLASH_Program_HalfWord+0x44>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	801a      	strh	r2, [r3, #0]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4a0b      	ldr	r2, [pc, #44]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <FLASH_Program_Byte+0x40>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	701a      	strb	r2, [r3, #0]
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00

08004d4c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d50:	4b2f      	ldr	r3, [pc, #188]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	f043 0310 	orr.w	r3, r3, #16
 8004d64:	4a2b      	ldr	r2, [pc, #172]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004d66:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d68:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004d7a:	4b26      	ldr	r3, [pc, #152]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f043 0308 	orr.w	r3, r3, #8
 8004d82:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004d84:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004d88:	2220      	movs	r2, #32
 8004d8a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f043 0304 	orr.w	r3, r3, #4
 8004da0:	4a1c      	ldr	r2, [pc, #112]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004da2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004da4:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004da6:	2240      	movs	r2, #64	; 0x40
 8004da8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004daa:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004db6:	4b17      	ldr	r3, [pc, #92]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004dc0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004dc8:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	4a0d      	ldr	r2, [pc, #52]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004dde:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004de6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f043 0320 	orr.w	r3, r3, #32
 8004dfc:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <FLASH_SetErrorCode+0xc8>)
 8004dfe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <FLASH_SetErrorCode+0xc4>)
 8004e02:	2202      	movs	r2, #2
 8004e04:	60da      	str	r2, [r3, #12]
  }
}
 8004e06:	bf00      	nop
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40023c00 	.word	0x40023c00
 8004e14:	2000132c 	.word	0x2000132c

08004e18 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e2a:	4b31      	ldr	r3, [pc, #196]	; (8004ef0 <HAL_FLASHEx_Erase+0xd8>)
 8004e2c:	7e1b      	ldrb	r3, [r3, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_FLASHEx_Erase+0x1e>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e058      	b.n	8004ee8 <HAL_FLASHEx_Erase+0xd0>
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_FLASHEx_Erase+0xd8>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e40:	f7ff feaa 	bl	8004b98 <FLASH_WaitForLastOperation>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d148      	bne.n	8004ee0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d115      	bne.n	8004e8a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f000 f844 	bl	8004ef8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e74:	f7ff fe90 	bl	8004b98 <FLASH_WaitForLastOperation>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_FLASHEx_Erase+0xdc>)
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <HAL_FLASHEx_Erase+0xdc>)
 8004e82:	f023 0304 	bic.w	r3, r3, #4
 8004e86:	6113      	str	r3, [r2, #16]
 8004e88:	e028      	b.n	8004edc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	e01c      	b.n	8004ecc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	4619      	mov	r1, r3
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f000 f850 	bl	8004f40 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ea0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ea4:	f7ff fe78 	bl	8004b98 <FLASH_WaitForLastOperation>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_FLASHEx_Erase+0xdc>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4a10      	ldr	r2, [pc, #64]	; (8004ef4 <HAL_FLASHEx_Erase+0xdc>)
 8004eb2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004eb6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	601a      	str	r2, [r3, #0]
          break;
 8004ec4:	e00a      	b.n	8004edc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d3da      	bcc.n	8004e92 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004edc:	f000 f878 	bl	8004fd0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ee0:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <HAL_FLASHEx_Erase+0xd8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	761a      	strb	r2, [r3, #24]

  return status;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	2000132c 	.word	0x2000132c
 8004ef4:	40023c00 	.word	0x40023c00

08004ef8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f04:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004f1c:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	4313      	orrs	r3, r2
 8004f26:	4a05      	ldr	r2, [pc, #20]	; (8004f3c <FLASH_MassErase+0x44>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6113      	str	r3, [r2, #16]
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023c00 	.word	0x40023c00

08004f40 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	e010      	b.n	8004f7e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d103      	bne.n	8004f6a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e009      	b.n	8004f7e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d103      	bne.n	8004f78 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e002      	b.n	8004f7e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	490f      	ldr	r1, [pc, #60]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004f96:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004f9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	4313      	orrs	r3, r2
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004fae:	f043 0302 	orr.w	r3, r3, #2
 8004fb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	4a04      	ldr	r2, [pc, #16]	; (8004fcc <FLASH_Erase_Sector+0x8c>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	6113      	str	r3, [r2, #16]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40023c00 	.word	0x40023c00

08004fd0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004fd4:	4b20      	ldr	r3, [pc, #128]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d017      	beq.n	8005010 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004fe6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004ff2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <FLASH_FlushCaches+0x88>)
 8004ffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005002:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005004:	4b14      	ldr	r3, [pc, #80]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a13      	ldr	r2, [pc, #76]	; (8005058 <FLASH_FlushCaches+0x88>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800500e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <FLASH_FlushCaches+0x88>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005026:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <FLASH_FlushCaches+0x88>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <FLASH_FlushCaches+0x88>)
 800502e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005032:	6013      	str	r3, [r2, #0]
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <FLASH_FlushCaches+0x88>)
 800503a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800503e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <FLASH_FlushCaches+0x88>)
 8005046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800504a:	6013      	str	r3, [r2, #0]
  }
}
 800504c:	bf00      	nop
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40023c00 	.word	0x40023c00

0800505c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005066:	2300      	movs	r3, #0
 8005068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800506a:	2300      	movs	r3, #0
 800506c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e159      	b.n	800532c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005078:	2201      	movs	r2, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	f040 8148 	bne.w	8005326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d00b      	beq.n	80050b6 <HAL_GPIO_Init+0x5a>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d007      	beq.n	80050b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050aa:	2b11      	cmp	r3, #17
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b12      	cmp	r3, #18
 80050b4:	d130      	bne.n	8005118 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2203      	movs	r2, #3
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4313      	orrs	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050ec:	2201      	movs	r2, #1
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 0201 	and.w	r2, r3, #1
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d003      	beq.n	8005158 <HAL_GPIO_Init+0xfc>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b12      	cmp	r3, #18
 8005156:	d123      	bne.n	80051a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	08da      	lsrs	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3208      	adds	r2, #8
 8005160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0307 	and.w	r3, r3, #7
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3208      	adds	r2, #8
 800519a:	69b9      	ldr	r1, [r7, #24]
 800519c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	2203      	movs	r2, #3
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	43db      	mvns	r3, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 0203 	and.w	r2, r3, #3
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80a2 	beq.w	8005326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	4b57      	ldr	r3, [pc, #348]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	4a56      	ldr	r2, [pc, #344]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051f0:	6453      	str	r3, [r2, #68]	; 0x44
 80051f2:	4b54      	ldr	r3, [pc, #336]	; (8005344 <HAL_GPIO_Init+0x2e8>)
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051fe:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_GPIO_Init+0x2ec>)
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	089b      	lsrs	r3, r3, #2
 8005204:	3302      	adds	r3, #2
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	220f      	movs	r2, #15
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a49      	ldr	r2, [pc, #292]	; (800534c <HAL_GPIO_Init+0x2f0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d019      	beq.n	800525e <HAL_GPIO_Init+0x202>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_GPIO_Init+0x2f4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d013      	beq.n	800525a <HAL_GPIO_Init+0x1fe>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a47      	ldr	r2, [pc, #284]	; (8005354 <HAL_GPIO_Init+0x2f8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00d      	beq.n	8005256 <HAL_GPIO_Init+0x1fa>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a46      	ldr	r2, [pc, #280]	; (8005358 <HAL_GPIO_Init+0x2fc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <HAL_GPIO_Init+0x1f6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_GPIO_Init+0x300>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_GPIO_Init+0x1f2>
 800524a:	2304      	movs	r3, #4
 800524c:	e008      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800524e:	2307      	movs	r3, #7
 8005250:	e006      	b.n	8005260 <HAL_GPIO_Init+0x204>
 8005252:	2303      	movs	r3, #3
 8005254:	e004      	b.n	8005260 <HAL_GPIO_Init+0x204>
 8005256:	2302      	movs	r3, #2
 8005258:	e002      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800525a:	2301      	movs	r3, #1
 800525c:	e000      	b.n	8005260 <HAL_GPIO_Init+0x204>
 800525e:	2300      	movs	r3, #0
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	f002 0203 	and.w	r2, r2, #3
 8005266:	0092      	lsls	r2, r2, #2
 8005268:	4093      	lsls	r3, r2
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	4313      	orrs	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005270:	4935      	ldr	r1, [pc, #212]	; (8005348 <HAL_GPIO_Init+0x2ec>)
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	089b      	lsrs	r3, r3, #2
 8005276:	3302      	adds	r3, #2
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800527e:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_GPIO_Init+0x304>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	43db      	mvns	r3, r3
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4013      	ands	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052a2:	4a2f      	ldr	r2, [pc, #188]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052a8:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	43db      	mvns	r3, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4013      	ands	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052cc:	4a24      	ldr	r2, [pc, #144]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052d2:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	43db      	mvns	r3, r3
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	4013      	ands	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <HAL_GPIO_Init+0x304>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	43db      	mvns	r3, r3
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	4013      	ands	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005320:	4a0f      	ldr	r2, [pc, #60]	; (8005360 <HAL_GPIO_Init+0x304>)
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	f67f aea2 	bls.w	8005078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3724      	adds	r7, #36	; 0x24
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	40013800 	.word	0x40013800
 800534c:	40020000 	.word	0x40020000
 8005350:	40020400 	.word	0x40020400
 8005354:	40020800 	.word	0x40020800
 8005358:	40020c00 	.word	0x40020c00
 800535c:	40021000 	.word	0x40021000
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e0bb      	b.n	80054f8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005380:	2201      	movs	r2, #1
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	429a      	cmp	r2, r3
 8005398:	f040 80ab 	bne.w	80054f2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800539c:	4a5c      	ldr	r2, [pc, #368]	; (8005510 <HAL_GPIO_DeInit+0x1ac>)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	089b      	lsrs	r3, r3, #2
 80053a2:	3302      	adds	r3, #2
 80053a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	220f      	movs	r2, #15
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a54      	ldr	r2, [pc, #336]	; (8005514 <HAL_GPIO_DeInit+0x1b0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d019      	beq.n	80053fa <HAL_GPIO_DeInit+0x96>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a53      	ldr	r2, [pc, #332]	; (8005518 <HAL_GPIO_DeInit+0x1b4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_GPIO_DeInit+0x92>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a52      	ldr	r2, [pc, #328]	; (800551c <HAL_GPIO_DeInit+0x1b8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00d      	beq.n	80053f2 <HAL_GPIO_DeInit+0x8e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a51      	ldr	r2, [pc, #324]	; (8005520 <HAL_GPIO_DeInit+0x1bc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <HAL_GPIO_DeInit+0x8a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a50      	ldr	r2, [pc, #320]	; (8005524 <HAL_GPIO_DeInit+0x1c0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_GPIO_DeInit+0x86>
 80053e6:	2304      	movs	r3, #4
 80053e8:	e008      	b.n	80053fc <HAL_GPIO_DeInit+0x98>
 80053ea:	2307      	movs	r3, #7
 80053ec:	e006      	b.n	80053fc <HAL_GPIO_DeInit+0x98>
 80053ee:	2303      	movs	r3, #3
 80053f0:	e004      	b.n	80053fc <HAL_GPIO_DeInit+0x98>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e002      	b.n	80053fc <HAL_GPIO_DeInit+0x98>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <HAL_GPIO_DeInit+0x98>
 80053fa:	2300      	movs	r3, #0
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	f002 0203 	and.w	r2, r2, #3
 8005402:	0092      	lsls	r2, r2, #2
 8005404:	4093      	lsls	r3, r2
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	429a      	cmp	r2, r3
 800540a:	d132      	bne.n	8005472 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800540c:	4b46      	ldr	r3, [pc, #280]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	4944      	ldr	r1, [pc, #272]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 8005416:	4013      	ands	r3, r2
 8005418:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	43db      	mvns	r3, r3
 8005422:	4941      	ldr	r1, [pc, #260]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 8005424:	4013      	ands	r3, r2
 8005426:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005428:	4b3f      	ldr	r3, [pc, #252]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	43db      	mvns	r3, r3
 8005430:	493d      	ldr	r1, [pc, #244]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 8005432:	4013      	ands	r3, r2
 8005434:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005436:	4b3c      	ldr	r3, [pc, #240]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	493a      	ldr	r1, [pc, #232]	; (8005528 <HAL_GPIO_DeInit+0x1c4>)
 8005440:	4013      	ands	r3, r2
 8005442:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	220f      	movs	r2, #15
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005454:	4a2e      	ldr	r2, [pc, #184]	; (8005510 <HAL_GPIO_DeInit+0x1ac>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3302      	adds	r3, #2
 800545c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	43da      	mvns	r2, r3
 8005464:	482a      	ldr	r0, [pc, #168]	; (8005510 <HAL_GPIO_DeInit+0x1ac>)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	089b      	lsrs	r3, r3, #2
 800546a:	400a      	ands	r2, r1
 800546c:	3302      	adds	r3, #2
 800546e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2103      	movs	r1, #3
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	08da      	lsrs	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3208      	adds	r2, #8
 8005490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	220f      	movs	r2, #15
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	08d2      	lsrs	r2, r2, #3
 80054a8:	4019      	ands	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3208      	adds	r2, #8
 80054ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	2103      	movs	r1, #3
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	401a      	ands	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	2101      	movs	r1, #1
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	2103      	movs	r1, #3
 80054e6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	3301      	adds	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b0f      	cmp	r3, #15
 80054fc:	f67f af40 	bls.w	8005380 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40013800 	.word	0x40013800
 8005514:	40020000 	.word	0x40020000
 8005518:	40020400 	.word	0x40020400
 800551c:	40020800 	.word	0x40020800
 8005520:	40020c00 	.word	0x40020c00
 8005524:	40021000 	.word	0x40021000
 8005528:	40013c00 	.word	0x40013c00

0800552c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	887b      	ldrh	r3, [r7, #2]
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e001      	b.n	800554e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
 8005568:	4613      	mov	r3, r2
 800556a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800556c:	787b      	ldrb	r3, [r7, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005572:	887a      	ldrh	r2, [r7, #2]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005578:	e003      	b.n	8005582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	041a      	lsls	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	619a      	str	r2, [r3, #24]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	401a      	ands	r2, r3
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d104      	bne.n	80055b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055a8:	887b      	ldrh	r3, [r7, #2]
 80055aa:	041a      	lsls	r2, r3, #16
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80055b0:	e002      	b.n	80055b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e25e      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d075      	beq.n	80056ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055e2:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d00c      	beq.n	8005608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ee:	4b85      	ldr	r3, [pc, #532]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d112      	bne.n	8005620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055fa:	4b82      	ldr	r3, [pc, #520]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005606:	d10b      	bne.n	8005620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005608:	4b7e      	ldr	r3, [pc, #504]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d05b      	beq.n	80056cc <HAL_RCC_OscConfig+0x108>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d157      	bne.n	80056cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e239      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005628:	d106      	bne.n	8005638 <HAL_RCC_OscConfig+0x74>
 800562a:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	e01d      	b.n	8005674 <HAL_RCC_OscConfig+0xb0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x98>
 8005642:	4b70      	ldr	r3, [pc, #448]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a6f      	ldr	r2, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4b6d      	ldr	r3, [pc, #436]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a6c      	ldr	r2, [pc, #432]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0xb0>
 800565c:	4b69      	ldr	r3, [pc, #420]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a68      	ldr	r2, [pc, #416]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b66      	ldr	r3, [pc, #408]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a65      	ldr	r2, [pc, #404]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 800566e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d013      	beq.n	80056a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567c:	f7fe fca2 	bl	8003fc4 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005684:	f7fe fc9e 	bl	8003fc4 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b64      	cmp	r3, #100	; 0x64
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e1fe      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005696:	4b5b      	ldr	r3, [pc, #364]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0xc0>
 80056a2:	e014      	b.n	80056ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fe fc8e 	bl	8003fc4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056ac:	f7fe fc8a 	bl	8003fc4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b64      	cmp	r3, #100	; 0x64
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e1ea      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056be:	4b51      	ldr	r3, [pc, #324]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0xe8>
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d063      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056da:	4b4a      	ldr	r3, [pc, #296]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e6:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d11c      	bne.n	800572c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f2:	4b44      	ldr	r3, [pc, #272]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d116      	bne.n	800572c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fe:	4b41      	ldr	r3, [pc, #260]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_RCC_OscConfig+0x152>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e1be      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005716:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4937      	ldr	r1, [pc, #220]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	e03a      	b.n	80057a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d020      	beq.n	8005776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x244>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573a:	f7fe fc43 	bl	8003fc4 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005742:	f7fe fc3f 	bl	8003fc4 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e19f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005754:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4925      	ldr	r1, [pc, #148]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <HAL_RCC_OscConfig+0x244>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fe fc22 	bl	8003fc4 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fe fc1e 	bl	8003fc4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e17e      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d036      	beq.n	800581c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <HAL_RCC_OscConfig+0x248>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fe fc02 	bl	8003fc4 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fe fbfe 	bl	8003fc4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e15e      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_OscConfig+0x240>)
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x200>
 80057e2:	e01b      	b.n	800581c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e4:	4b09      	ldr	r3, [pc, #36]	; (800580c <HAL_RCC_OscConfig+0x248>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ea:	f7fe fbeb 	bl	8003fc4 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f0:	e00e      	b.n	8005810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f2:	f7fe fbe7 	bl	8003fc4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d907      	bls.n	8005810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e147      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
 8005804:	40023800 	.word	0x40023800
 8005808:	42470000 	.word	0x42470000
 800580c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	4b88      	ldr	r3, [pc, #544]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ea      	bne.n	80057f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8097 	beq.w	8005958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582e:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10f      	bne.n	800585a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	4b7d      	ldr	r3, [pc, #500]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a7c      	ldr	r2, [pc, #496]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585a:	4b77      	ldr	r3, [pc, #476]	; (8005a38 <HAL_RCC_OscConfig+0x474>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d118      	bne.n	8005898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005866:	4b74      	ldr	r3, [pc, #464]	; (8005a38 <HAL_RCC_OscConfig+0x474>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a73      	ldr	r2, [pc, #460]	; (8005a38 <HAL_RCC_OscConfig+0x474>)
 800586c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005872:	f7fe fba7 	bl	8003fc4 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587a:	f7fe fba3 	bl	8003fc4 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e103      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	4b6a      	ldr	r3, [pc, #424]	; (8005a38 <HAL_RCC_OscConfig+0x474>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0x2ea>
 80058a0:	4b64      	ldr	r3, [pc, #400]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	4a63      	ldr	r2, [pc, #396]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6713      	str	r3, [r2, #112]	; 0x70
 80058ac:	e01c      	b.n	80058e8 <HAL_RCC_OscConfig+0x324>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b05      	cmp	r3, #5
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x30c>
 80058b6:	4b5f      	ldr	r3, [pc, #380]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a5e      	ldr	r2, [pc, #376]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	4b5c      	ldr	r3, [pc, #368]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a5b      	ldr	r2, [pc, #364]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0x324>
 80058d0:	4b58      	ldr	r3, [pc, #352]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a57      	ldr	r2, [pc, #348]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	4b55      	ldr	r3, [pc, #340]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a54      	ldr	r2, [pc, #336]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80058e2:	f023 0304 	bic.w	r3, r3, #4
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fe fb68 	bl	8003fc4 <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fe fb64 	bl	8003fc4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0c2      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590e:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0ee      	beq.n	80058f8 <HAL_RCC_OscConfig+0x334>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591c:	f7fe fb52 	bl	8003fc4 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fe fb4e 	bl	8003fc4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0ac      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593a:	4b3e      	ldr	r3, [pc, #248]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1ee      	bne.n	8005924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d105      	bne.n	8005958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594c:	4b39      	ldr	r3, [pc, #228]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	4a38      	ldr	r2, [pc, #224]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8098 	beq.w	8005a92 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005962:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b08      	cmp	r3, #8
 800596c:	d05c      	beq.n	8005a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d141      	bne.n	80059fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005976:	4b31      	ldr	r3, [pc, #196]	; (8005a3c <HAL_RCC_OscConfig+0x478>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fe fb22 	bl	8003fc4 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fe fb1e 	bl	8003fc4 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e07e      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	3b01      	subs	r3, #1
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	491b      	ldr	r1, [pc, #108]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059cc:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <HAL_RCC_OscConfig+0x478>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d2:	f7fe faf7 	bl	8003fc4 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059da:	f7fe faf3 	bl	8003fc4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e053      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x416>
 80059f8:	e04b      	b.n	8005a92 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0x478>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fe fae0 	bl	8003fc4 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fe fadc 	bl	8003fc4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e03c      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x444>
 8005a26:	e034      	b.n	8005a92 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e02f      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_RCC_OscConfig+0x4d8>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d11c      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d115      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d10d      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d001      	beq.n	8005a92 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3718      	adds	r7, #24
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40023800 	.word	0x40023800

08005aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0cc      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b68      	ldr	r3, [pc, #416]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 030f 	and.w	r3, r3, #15
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d90c      	bls.n	8005adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b65      	ldr	r3, [pc, #404]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0b8      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b0c:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	494d      	ldr	r1, [pc, #308]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d044      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d119      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b5e:	4b3f      	ldr	r3, [pc, #252]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e06f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6e:	4b3b      	ldr	r3, [pc, #236]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e067      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f023 0203 	bic.w	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4934      	ldr	r1, [pc, #208]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b90:	f7fe fa18 	bl	8003fc4 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	e00a      	b.n	8005bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b98:	f7fe fa14 	bl	8003fc4 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e04f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bae:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 020c 	and.w	r2, r3, #12
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1eb      	bne.n	8005b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 030f 	and.w	r3, r3, #15
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d20c      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e032      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4916      	ldr	r1, [pc, #88]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	490e      	ldr	r1, [pc, #56]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c26:	f000 f821 	bl	8005c6c <HAL_RCC_GetSysClockFreq>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	490a      	ldr	r1, [pc, #40]	; (8005c60 <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	5ccb      	ldrb	r3, [r1, r3]
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1c8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fe f978 	bl	8003f3c <HAL_InitTick>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40023c00 	.word	0x40023c00
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	0800c068 	.word	0x0800c068
 8005c64:	2000000c 	.word	0x2000000c
 8005c68:	20000270 	.word	0x20000270

08005c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c70:	b090      	sub	sp, #64	; 0x40
 8005c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
 8005c78:	2300      	movs	r3, #0
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c84:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d00d      	beq.n	8005cac <HAL_RCC_GetSysClockFreq+0x40>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	f200 80a1 	bhi.w	8005dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d003      	beq.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c9e:	e09b      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca0:	4b53      	ldr	r3, [pc, #332]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ca4:	e09b      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ca6:	4b53      	ldr	r3, [pc, #332]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005caa:	e098      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cac:	4b4f      	ldr	r3, [pc, #316]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cb6:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d028      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	099b      	lsrs	r3, r3, #6
 8005cc8:	2200      	movs	r2, #0
 8005cca:	623b      	str	r3, [r7, #32]
 8005ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4b47      	ldr	r3, [pc, #284]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cd8:	fb03 f201 	mul.w	r2, r3, r1
 8005cdc:	2300      	movs	r3, #0
 8005cde:	fb00 f303 	mul.w	r3, r0, r3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a43      	ldr	r2, [pc, #268]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8005cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cec:	460a      	mov	r2, r1
 8005cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8005cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf2:	4413      	add	r3, r2
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	61fa      	str	r2, [r7, #28]
 8005cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d06:	f7fb f927 	bl	8000f58 <__aeabi_uldivmod>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4613      	mov	r3, r2
 8005d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d12:	e053      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d14:	4b35      	ldr	r3, [pc, #212]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	099b      	lsrs	r3, r3, #6
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	617a      	str	r2, [r7, #20]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d26:	f04f 0b00 	mov.w	fp, #0
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	465b      	mov	r3, fp
 8005d2e:	f04f 0000 	mov.w	r0, #0
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	0159      	lsls	r1, r3, #5
 8005d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d3c:	0150      	lsls	r0, r2, #5
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	ebb2 080a 	subs.w	r8, r2, sl
 8005d46:	eb63 090b 	sbc.w	r9, r3, fp
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8005d62:	eb63 0509 	sbc.w	r5, r3, r9
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	00eb      	lsls	r3, r5, #3
 8005d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d74:	00e2      	lsls	r2, r4, #3
 8005d76:	4614      	mov	r4, r2
 8005d78:	461d      	mov	r5, r3
 8005d7a:	eb14 030a 	adds.w	r3, r4, sl
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	eb45 030b 	adc.w	r3, r5, fp
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d92:	4629      	mov	r1, r5
 8005d94:	028b      	lsls	r3, r1, #10
 8005d96:	4621      	mov	r1, r4
 8005d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	028a      	lsls	r2, r1, #10
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	2200      	movs	r2, #0
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	60fa      	str	r2, [r7, #12]
 8005dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db0:	f7fb f8d2 	bl	8000f58 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_GetSysClockFreq+0x180>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3740      	adds	r7, #64	; 0x40
 8005de4:	46bd      	mov	sp, r7
 8005de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00f42400 	.word	0x00f42400
 8005df4:	017d7840 	.word	0x017d7840

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000000c 	.word	0x2000000c

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0a9b      	lsrs	r3, r3, #10
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800c078 	.word	0x0800c078

08005e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e3c:	f7ff ffdc 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	0b5b      	lsrs	r3, r3, #13
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4903      	ldr	r1, [pc, #12]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	0800c078 	.word	0x0800c078

08005e60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d038      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e88:	4b68      	ldr	r3, [pc, #416]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8e:	f7fe f899 	bl	8003fc4 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e96:	f7fe f895 	bl	8003fc4 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e0bd      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ea8:	4b61      	ldr	r3, [pc, #388]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f0      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	019b      	lsls	r3, r3, #6
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	071b      	lsls	r3, r3, #28
 8005ec6:	495a      	ldr	r1, [pc, #360]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ece:	4b57      	ldr	r3, [pc, #348]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed4:	f7fe f876 	bl	8003fc4 <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005edc:	f7fe f872 	bl	8003fc4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e09a      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eee:	4b50      	ldr	r3, [pc, #320]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8083 	beq.w	800600e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	4b48      	ldr	r3, [pc, #288]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	4a47      	ldr	r2, [pc, #284]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6413      	str	r3, [r2, #64]	; 0x40
 8005f18:	4b45      	ldr	r3, [pc, #276]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a42      	ldr	r2, [pc, #264]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f30:	f7fe f848 	bl	8003fc4 <HAL_GetTick>
 8005f34:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f38:	f7fe f844 	bl	8003fc4 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e06c      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f4a:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f56:	4b36      	ldr	r3, [pc, #216]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d02f      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d028      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f74:	4b2e      	ldr	r3, [pc, #184]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f84:	4b2c      	ldr	r3, [pc, #176]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f8a:	4a29      	ldr	r2, [pc, #164]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f90:	4b27      	ldr	r3, [pc, #156]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d114      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f9c:	f7fe f812 	bl	8003fc4 <HAL_GetTick>
 8005fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa2:	e00a      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa4:	f7fe f80e 	bl	8003fc4 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e034      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ee      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005fd4:	4b16      	ldr	r3, [pc, #88]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe8:	4911      	ldr	r1, [pc, #68]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
 8005fee:	e005      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4a0e      	ldr	r2, [pc, #56]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ffa:	6093      	str	r3, [r2, #8]
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006008:	4909      	ldr	r1, [pc, #36]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7d1a      	ldrb	r2, [r3, #20]
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006020:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	42470068 	.word	0x42470068
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000
 8006038:	42470e40 	.word	0x42470e40
 800603c:	424711e0 	.word	0x424711e0

08006040 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006046:	f7fd ffbd 	bl	8003fc4 <HAL_GetTick>
 800604a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800604c:	4b5d      	ldr	r3, [pc, #372]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5c      	ldr	r2, [pc, #368]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006052:	f043 0301 	orr.w	r3, r3, #1
 8006056:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605a:	f7fd ffb3 	bl	8003fc4 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e0a7      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800606c:	4b55      	ldr	r3, [pc, #340]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8006078:	4b52      	ldr	r3, [pc, #328]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a51      	ldr	r2, [pc, #324]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006084:	f7fd ff9e 	bl	8003fc4 <HAL_GetTick>
 8006088:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800608a:	4b4e      	ldr	r3, [pc, #312]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006090:	e00a      	b.n	80060a8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006092:	f7fd ff97 	bl	8003fc4 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e089      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80060a8:	4b46      	ldr	r3, [pc, #280]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1ee      	bne.n	8006092 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060b4:	f7fd ff86 	bl	8003fc4 <HAL_GetTick>
 80060b8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80060ba:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a41      	ldr	r2, [pc, #260]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060c0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80060c4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c8:	f7fd ff7c 	bl	8003fc4 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b64      	cmp	r3, #100	; 0x64
 80060d4:	d901      	bls.n	80060da <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e070      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80060da:	4b3a      	ldr	r3, [pc, #232]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060e6:	f7fd ff6d 	bl	8003fc4 <HAL_GetTick>
 80060ea:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80060ec:	4b35      	ldr	r3, [pc, #212]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 80060f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060f6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fd ff63 	bl	8003fc4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e057      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006118:	f7fd ff54 	bl	8003fc4 <HAL_GetTick>
 800611c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800611e:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006124:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006128:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800612c:	f7fd ff4a 	bl	8003fc4 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e03e      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <HAL_RCC_DeInit+0x188>)
 800614e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8006150:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006152:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_RCC_DeInit+0x18c>)
 8006154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800615e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006162:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8006164:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800616a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800616e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8006170:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006176:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800617a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4a10      	ldr	r2, [pc, #64]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006182:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006186:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006188:	4b0e      	ldr	r3, [pc, #56]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800618a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618c:	4a0d      	ldr	r2, [pc, #52]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 8006196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006198:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <HAL_RCC_DeInit+0x184>)
 800619a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800619e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_DeInit+0x190>)
 80061a2:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <HAL_RCC_DeInit+0x194>)
 80061a4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <HAL_RCC_DeInit+0x198>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd fec6 	bl	8003f3c <HAL_InitTick>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
  }
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800
 80061c8:	04003010 	.word	0x04003010
 80061cc:	20003010 	.word	0x20003010
 80061d0:	2000000c 	.word	0x2000000c
 80061d4:	00f42400 	.word	0x00f42400
 80061d8:	20000270 	.word	0x20000270

080061dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e083      	b.n	80062f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7f5b      	ldrb	r3, [r3, #29]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fc ff5a 	bl	80030b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	22ca      	movs	r2, #202	; 0xca
 8006210:	625a      	str	r2, [r3, #36]	; 0x24
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2253      	movs	r2, #83	; 0x53
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f897 	bl	800634e <RTC_EnterInitMode>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ff      	movs	r2, #255	; 0xff
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e05e      	b.n	80062f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	68d2      	ldr	r2, [r2, #12]
 8006272:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6919      	ldr	r1, [r3, #16]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	041a      	lsls	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006296:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10e      	bne.n	80062c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f829 	bl	80062fe <HAL_RTC_WaitForSynchro>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e018      	b.n	80062f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	22ff      	movs	r2, #255	; 0xff
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006318:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800631a:	f7fd fe53 	bl	8003fc4 <HAL_GetTick>
 800631e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006320:	e009      	b.n	8006336 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006322:	f7fd fe4f 	bl	8003fc4 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006330:	d901      	bls.n	8006336 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e007      	b.n	8006346 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0ee      	beq.n	8006322 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b00      	cmp	r3, #0
 8006366:	d119      	bne.n	800639c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006372:	f7fd fe27 	bl	8003fc4 <HAL_GetTick>
 8006376:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006378:	e009      	b.n	800638e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800637a:	f7fd fe23 	bl	8003fc4 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006388:	d901      	bls.n	800638e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e007      	b.n	800639e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0ee      	beq.n	800637a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3350      	adds	r3, #80	; 0x50
 80063bc:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80063da:	b480      	push	{r7}
 80063dc:	b085      	sub	sp, #20
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3350      	adds	r3, #80	; 0x50
 80063ee:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e03f      	b.n	800649c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fd f873 	bl	800351c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2224      	movs	r2, #36	; 0x24
 800643a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800644c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fc90 	bl	8006d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006462:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006472:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006482:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e01e      	b.n	80064f4 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2224      	movs	r2, #36	; 0x24
 80064ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064cc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fd f8fa 	bl	80036c8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b20      	cmp	r3, #32
 800651a:	f040 8083 	bne.w	8006624 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_UART_Transmit+0x2e>
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e07b      	b.n	8006626 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_UART_Transmit+0x40>
 8006538:	2302      	movs	r3, #2
 800653a:	e074      	b.n	8006626 <HAL_UART_Transmit+0x12a>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2221      	movs	r2, #33	; 0x21
 800654e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006552:	f7fd fd37 	bl	8003fc4 <HAL_GetTick>
 8006556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	88fa      	ldrh	r2, [r7, #6]
 800655c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	88fa      	ldrh	r2, [r7, #6]
 8006562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800656c:	e042      	b.n	80065f4 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d122      	bne.n	80065cc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2200      	movs	r2, #0
 800658e:	2180      	movs	r1, #128	; 0x80
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fa6d 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e042      	b.n	8006626 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3302      	adds	r3, #2
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	e017      	b.n	80065f4 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	e013      	b.n	80065f4 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	2180      	movs	r1, #128	; 0x80
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 fa4a 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e01f      	b.n	8006626 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	60ba      	str	r2, [r7, #8]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1b7      	bne.n	800656e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	2140      	movs	r1, #64	; 0x40
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fa31 	bl	8006a70 <UART_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e006      	b.n	8006626 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b20      	cmp	r3, #32
 8006648:	d166      	bne.n	8006718 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <HAL_UART_Receive_DMA+0x26>
 8006650:	88fb      	ldrh	r3, [r7, #6]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e05f      	b.n	800671a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_UART_Receive_DMA+0x38>
 8006664:	2302      	movs	r3, #2
 8006666:	e058      	b.n	800671a <HAL_UART_Receive_DMA+0xea>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2222      	movs	r2, #34	; 0x22
 8006686:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	4a25      	ldr	r2, [pc, #148]	; (8006724 <HAL_UART_Receive_DMA+0xf4>)
 8006690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	4a24      	ldr	r2, [pc, #144]	; (8006728 <HAL_UART_Receive_DMA+0xf8>)
 8006698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	4a23      	ldr	r2, [pc, #140]	; (800672c <HAL_UART_Receive_DMA+0xfc>)
 80066a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	2200      	movs	r2, #0
 80066a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80066aa:	f107 0308 	add.w	r3, r7, #8
 80066ae:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	f7fd feff 	bl	80044c4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80066c6:	2300      	movs	r3, #0
 80066c8:	613b      	str	r3, [r7, #16]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695a      	ldr	r2, [r3, #20]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006712:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	08006959 	.word	0x08006959
 8006728:	080069c1 	.word	0x080069c1
 800672c:	080069dd 	.word	0x080069dd

08006730 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006750:	2300      	movs	r3, #0
 8006752:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x52>
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fa78 	bl	8006c70 <UART_Receive_IT>
      return;
 8006780:	e0d0      	b.n	8006924 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80b0 	beq.w	80068ea <HAL_UART_IRQHandler+0x1ba>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <HAL_UART_IRQHandler+0x70>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 80a5 	beq.w	80068ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_UART_IRQHandler+0x90>
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	f043 0201 	orr.w	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_UART_IRQHandler+0xb0>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d8:	f043 0202 	orr.w	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_UART_IRQHandler+0xd0>
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	f043 0204 	orr.w	r2, r3, #4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00f      	beq.n	800682a <HAL_UART_IRQHandler+0xfa>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d104      	bne.n	800681e <HAL_UART_IRQHandler+0xee>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	f043 0208 	orr.w	r2, r3, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d077      	beq.n	8006922 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_UART_IRQHandler+0x11c>
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fa12 	bl	8006c70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	bf0c      	ite	eq
 800685a:	2301      	moveq	r3, #1
 800685c:	2300      	movne	r3, #0
 800685e:	b2db      	uxtb	r3, r3
 8006860:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <HAL_UART_IRQHandler+0x144>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d031      	beq.n	80068d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f95b 	bl	8006b30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d123      	bne.n	80068d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006896:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689c:	2b00      	cmp	r3, #0
 800689e:	d013      	beq.n	80068c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	4a21      	ldr	r2, [pc, #132]	; (800692c <HAL_UART_IRQHandler+0x1fc>)
 80068a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd fe61 	bl	8004574 <HAL_DMA_Abort_IT>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d016      	beq.n	80068e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068c2:	4610      	mov	r0, r2
 80068c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	e00e      	b.n	80068e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fc fe13 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	e00a      	b.n	80068e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7fc fe0f 	bl	80034f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d6:	e006      	b.n	80068e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fc fe0b 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068e4:	e01d      	b.n	8006922 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e6:	bf00      	nop
    return;
 80068e8:	e01b      	b.n	8006922 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <HAL_UART_IRQHandler+0x1d6>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f948 	bl	8006b94 <UART_Transmit_IT>
    return;
 8006904:	e00e      	b.n	8006924 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <HAL_UART_IRQHandler+0x1f4>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d004      	beq.n	8006924 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f990 	bl	8006c40 <UART_EndTransmit_IT>
    return;
 8006920:	e000      	b.n	8006924 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006922:	bf00      	nop
  }
}
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	08006b6d 	.word	0x08006b6d

08006930 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11e      	bne.n	80069b2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006988:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069a8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fc fda8 	bl	8003508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff ffb8 	bl	8006944 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f8:	2b80      	cmp	r3, #128	; 0x80
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b21      	cmp	r3, #33	; 0x21
 8006a0e:	d108      	bne.n	8006a22 <UART_DMAError+0x46>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a1c:	68b8      	ldr	r0, [r7, #8]
 8006a1e:	f000 f871 	bl	8006b04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b40      	cmp	r3, #64	; 0x40
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b22      	cmp	r3, #34	; 0x22
 8006a42:	d108      	bne.n	8006a56 <UART_DMAError+0x7a>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a50:	68b8      	ldr	r0, [r7, #8]
 8006a52:	f000 f86d 	bl	8006b30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5a:	f043 0210 	orr.w	r2, r3, #16
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f7fc fd46 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a68:	bf00      	nop
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a80:	e02c      	b.n	8006adc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d028      	beq.n	8006adc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a90:	f7fd fa98 	bl	8003fc4 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d21d      	bcs.n	8006adc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006aae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e00f      	b.n	8006afc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	bf0c      	ite	eq
 8006aec:	2301      	moveq	r3, #1
 8006aee:	2300      	movne	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d0c3      	beq.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b1a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b46:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7fc fcb4 	bl	80034f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b21      	cmp	r3, #33	; 0x21
 8006ba6:	d144      	bne.n	8006c32 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb0:	d11a      	bne.n	8006be8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	1c9a      	adds	r2, r3, #2
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	621a      	str	r2, [r3, #32]
 8006bda:	e00e      	b.n	8006bfa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]
 8006be6:	e008      	b.n	8006bfa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	1c59      	adds	r1, r3, #1
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6211      	str	r1, [r2, #32]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4619      	mov	r1, r3
 8006c08:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68da      	ldr	r2, [r3, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e000      	b.n	8006c34 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
  }
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff fe65 	bl	8006930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b22      	cmp	r3, #34	; 0x22
 8006c82:	d171      	bne.n	8006d68 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d123      	bne.n	8006cd6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10e      	bne.n	8006cba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb2:	1c9a      	adds	r2, r3, #2
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb8:	e029      	b.n	8006d0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006cd4:	e01b      	b.n	8006d0e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6858      	ldr	r0, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	1c59      	adds	r1, r3, #1
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6291      	str	r1, [r2, #40]	; 0x28
 8006cee:	b2c2      	uxtb	r2, r0
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e00c      	b.n	8006d0e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d00:	1c58      	adds	r0, r3, #1
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	6288      	str	r0, [r1, #40]	; 0x28
 8006d06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d120      	bne.n	8006d64 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0220 	bic.w	r2, r2, #32
 8006d30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc fbd4 	bl	8003508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e002      	b.n	8006d6a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d82:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d92:	68d9      	ldr	r1, [r3, #12]
 8006d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	ea40 0301 	orr.w	r3, r0, r1
 8006d9e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006da4:	689a      	ldr	r2, [r3, #8]
 8006da6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	431a      	orrs	r2, r3
 8006db6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006dc2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dce:	f021 010c 	bic.w	r1, r1, #12
 8006dd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006df0:	6999      	ldr	r1, [r3, #24]
 8006df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	ea40 0301 	orr.w	r3, r0, r1
 8006dfc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e08:	f040 824a 	bne.w	80072a0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b96      	ldr	r3, [pc, #600]	; (800706c <UART_SetConfig+0x2f8>)
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d006      	beq.n	8006e26 <UART_SetConfig+0xb2>
 8006e18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b94      	ldr	r3, [pc, #592]	; (8007070 <UART_SetConfig+0x2fc>)
 8006e20:	429a      	cmp	r2, r3
 8006e22:	f040 8129 	bne.w	8007078 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e26:	f7ff f807 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006e2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006e38:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006e3c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006e40:	4622      	mov	r2, r4
 8006e42:	462b      	mov	r3, r5
 8006e44:	1891      	adds	r1, r2, r2
 8006e46:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006e4a:	415b      	adcs	r3, r3
 8006e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e50:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006e54:	4621      	mov	r1, r4
 8006e56:	1851      	adds	r1, r2, r1
 8006e58:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	414b      	adcs	r3, r1
 8006e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006e70:	4649      	mov	r1, r9
 8006e72:	00cb      	lsls	r3, r1, #3
 8006e74:	4641      	mov	r1, r8
 8006e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e7a:	4641      	mov	r1, r8
 8006e7c:	00ca      	lsls	r2, r1, #3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	4619      	mov	r1, r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	4622      	mov	r2, r4
 8006e86:	189b      	adds	r3, r3, r2
 8006e88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	460a      	mov	r2, r1
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006e98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006ea4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006ea8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006eac:	460b      	mov	r3, r1
 8006eae:	18db      	adds	r3, r3, r3
 8006eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	eb42 0303 	adc.w	r3, r2, r3
 8006eba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ebe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006ec2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006ec6:	f7fa f847 	bl	8000f58 <__aeabi_uldivmod>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4b69      	ldr	r3, [pc, #420]	; (8007074 <UART_SetConfig+0x300>)
 8006ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed4:	095b      	lsrs	r3, r3, #5
 8006ed6:	011c      	lsls	r4, r3, #4
 8006ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006ee2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006ee6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006eea:	4642      	mov	r2, r8
 8006eec:	464b      	mov	r3, r9
 8006eee:	1891      	adds	r1, r2, r2
 8006ef0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006efa:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006efe:	4641      	mov	r1, r8
 8006f00:	1851      	adds	r1, r2, r1
 8006f02:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006f06:	4649      	mov	r1, r9
 8006f08:	414b      	adcs	r3, r1
 8006f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006f1a:	4659      	mov	r1, fp
 8006f1c:	00cb      	lsls	r3, r1, #3
 8006f1e:	4651      	mov	r1, sl
 8006f20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f24:	4651      	mov	r1, sl
 8006f26:	00ca      	lsls	r2, r1, #3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	4642      	mov	r2, r8
 8006f30:	189b      	adds	r3, r3, r2
 8006f32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006f36:	464b      	mov	r3, r9
 8006f38:	460a      	mov	r2, r1
 8006f3a:	eb42 0303 	adc.w	r3, r2, r3
 8006f3e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006f42:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006f4e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006f52:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006f56:	460b      	mov	r3, r1
 8006f58:	18db      	adds	r3, r3, r3
 8006f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f5e:	4613      	mov	r3, r2
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f68:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f6c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006f70:	f7f9 fff2 	bl	8000f58 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <UART_SetConfig+0x300>)
 8006f7c:	fba3 2301 	umull	r2, r3, r3, r1
 8006f80:	095b      	lsrs	r3, r3, #5
 8006f82:	2264      	movs	r2, #100	; 0x64
 8006f84:	fb02 f303 	mul.w	r3, r2, r3
 8006f88:	1acb      	subs	r3, r1, r3
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f90:	4b38      	ldr	r3, [pc, #224]	; (8007074 <UART_SetConfig+0x300>)
 8006f92:	fba3 2302 	umull	r2, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f9e:	441c      	add	r4, r3
 8006fa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006faa:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006fae:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	1891      	adds	r1, r2, r2
 8006fb8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006fbc:	415b      	adcs	r3, r3
 8006fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fc2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	1851      	adds	r1, r2, r1
 8006fca:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006fce:	4649      	mov	r1, r9
 8006fd0:	414b      	adcs	r3, r1
 8006fd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	00cb      	lsls	r3, r1, #3
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fec:	4651      	mov	r1, sl
 8006fee:	00ca      	lsls	r2, r1, #3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	189b      	adds	r3, r3, r2
 8006ffa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8006ffe:	464b      	mov	r3, r9
 8007000:	460a      	mov	r2, r1
 8007002:	eb42 0303 	adc.w	r3, r2, r3
 8007006:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800700a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007016:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800701a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800701e:	460b      	mov	r3, r1
 8007020:	18db      	adds	r3, r3, r3
 8007022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007026:	4613      	mov	r3, r2
 8007028:	eb42 0303 	adc.w	r3, r2, r3
 800702c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007030:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007034:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8007038:	f7f9 ff8e 	bl	8000f58 <__aeabi_uldivmod>
 800703c:	4602      	mov	r2, r0
 800703e:	460b      	mov	r3, r1
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <UART_SetConfig+0x300>)
 8007042:	fba3 1302 	umull	r1, r3, r3, r2
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	2164      	movs	r1, #100	; 0x64
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	3332      	adds	r3, #50	; 0x32
 8007054:	4a07      	ldr	r2, [pc, #28]	; (8007074 <UART_SetConfig+0x300>)
 8007056:	fba2 2303 	umull	r2, r3, r2, r3
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	f003 0207 	and.w	r2, r3, #7
 8007060:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4422      	add	r2, r4
 8007068:	609a      	str	r2, [r3, #8]
 800706a:	e349      	b.n	8007700 <UART_SetConfig+0x98c>
 800706c:	40011000 	.word	0x40011000
 8007070:	40011400 	.word	0x40011400
 8007074:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fe feca 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 800707c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007080:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007084:	2200      	movs	r2, #0
 8007086:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800708a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800708e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8007092:	4622      	mov	r2, r4
 8007094:	462b      	mov	r3, r5
 8007096:	1891      	adds	r1, r2, r2
 8007098:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800709c:	415b      	adcs	r3, r3
 800709e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80070a6:	4621      	mov	r1, r4
 80070a8:	eb12 0a01 	adds.w	sl, r2, r1
 80070ac:	4629      	mov	r1, r5
 80070ae:	eb43 0b01 	adc.w	fp, r3, r1
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070c6:	4692      	mov	sl, r2
 80070c8:	469b      	mov	fp, r3
 80070ca:	4623      	mov	r3, r4
 80070cc:	eb1a 0303 	adds.w	r3, sl, r3
 80070d0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80070d4:	462b      	mov	r3, r5
 80070d6:	eb4b 0303 	adc.w	r3, fp, r3
 80070da:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80070de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80070ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80070ee:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 80070f2:	460b      	mov	r3, r1
 80070f4:	18db      	adds	r3, r3, r3
 80070f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070fa:	4613      	mov	r3, r2
 80070fc:	eb42 0303 	adc.w	r3, r2, r3
 8007100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007104:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007108:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800710c:	f7f9 ff24 	bl	8000f58 <__aeabi_uldivmod>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4b61      	ldr	r3, [pc, #388]	; (800729c <UART_SetConfig+0x528>)
 8007116:	fba3 2302 	umull	r2, r3, r3, r2
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	011c      	lsls	r4, r3, #4
 800711e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007122:	2200      	movs	r2, #0
 8007124:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8007128:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800712c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	1891      	adds	r1, r2, r2
 8007136:	67b9      	str	r1, [r7, #120]	; 0x78
 8007138:	415b      	adcs	r3, r3
 800713a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800713c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007140:	4641      	mov	r1, r8
 8007142:	1851      	adds	r1, r2, r1
 8007144:	6739      	str	r1, [r7, #112]	; 0x70
 8007146:	4649      	mov	r1, r9
 8007148:	414b      	adcs	r3, r1
 800714a:	677b      	str	r3, [r7, #116]	; 0x74
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8007158:	4659      	mov	r1, fp
 800715a:	00cb      	lsls	r3, r1, #3
 800715c:	4651      	mov	r1, sl
 800715e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007162:	4651      	mov	r1, sl
 8007164:	00ca      	lsls	r2, r1, #3
 8007166:	4610      	mov	r0, r2
 8007168:	4619      	mov	r1, r3
 800716a:	4603      	mov	r3, r0
 800716c:	4642      	mov	r2, r8
 800716e:	189b      	adds	r3, r3, r2
 8007170:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8007180:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800718c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8007190:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8007194:	460b      	mov	r3, r1
 8007196:	18db      	adds	r3, r3, r3
 8007198:	66bb      	str	r3, [r7, #104]	; 0x68
 800719a:	4613      	mov	r3, r2
 800719c:	eb42 0303 	adc.w	r3, r2, r3
 80071a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80071a6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80071aa:	f7f9 fed5 	bl	8000f58 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4611      	mov	r1, r2
 80071b4:	4b39      	ldr	r3, [pc, #228]	; (800729c <UART_SetConfig+0x528>)
 80071b6:	fba3 2301 	umull	r2, r3, r3, r1
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2264      	movs	r2, #100	; 0x64
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	1acb      	subs	r3, r1, r3
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071ca:	4b34      	ldr	r3, [pc, #208]	; (800729c <UART_SetConfig+0x528>)
 80071cc:	fba3 2302 	umull	r2, r3, r3, r2
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071d8:	441c      	add	r4, r3
 80071da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071de:	2200      	movs	r2, #0
 80071e0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80071e4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80071e8:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 80071ec:	4642      	mov	r2, r8
 80071ee:	464b      	mov	r3, r9
 80071f0:	1891      	adds	r1, r2, r2
 80071f2:	6639      	str	r1, [r7, #96]	; 0x60
 80071f4:	415b      	adcs	r3, r3
 80071f6:	667b      	str	r3, [r7, #100]	; 0x64
 80071f8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80071fc:	4641      	mov	r1, r8
 80071fe:	1851      	adds	r1, r2, r1
 8007200:	65b9      	str	r1, [r7, #88]	; 0x58
 8007202:	4649      	mov	r1, r9
 8007204:	414b      	adcs	r3, r1
 8007206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007214:	4659      	mov	r1, fp
 8007216:	00cb      	lsls	r3, r1, #3
 8007218:	4651      	mov	r1, sl
 800721a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800721e:	4651      	mov	r1, sl
 8007220:	00ca      	lsls	r2, r1, #3
 8007222:	4610      	mov	r0, r2
 8007224:	4619      	mov	r1, r3
 8007226:	4603      	mov	r3, r0
 8007228:	4642      	mov	r2, r8
 800722a:	189b      	adds	r3, r3, r2
 800722c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8007230:	464b      	mov	r3, r9
 8007232:	460a      	mov	r2, r1
 8007234:	eb42 0303 	adc.w	r3, r2, r3
 8007238:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800723c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007248:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800724c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8007250:	460b      	mov	r3, r1
 8007252:	18db      	adds	r3, r3, r3
 8007254:	653b      	str	r3, [r7, #80]	; 0x50
 8007256:	4613      	mov	r3, r2
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	657b      	str	r3, [r7, #84]	; 0x54
 800725e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007262:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8007266:	f7f9 fe77 	bl	8000f58 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4b0b      	ldr	r3, [pc, #44]	; (800729c <UART_SetConfig+0x528>)
 8007270:	fba3 1302 	umull	r1, r3, r3, r2
 8007274:	095b      	lsrs	r3, r3, #5
 8007276:	2164      	movs	r1, #100	; 0x64
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	3332      	adds	r3, #50	; 0x32
 8007282:	4a06      	ldr	r2, [pc, #24]	; (800729c <UART_SetConfig+0x528>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	095b      	lsrs	r3, r3, #5
 800728a:	f003 0207 	and.w	r2, r3, #7
 800728e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4422      	add	r2, r4
 8007296:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007298:	e232      	b.n	8007700 <UART_SetConfig+0x98c>
 800729a:	bf00      	nop
 800729c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4b8d      	ldr	r3, [pc, #564]	; (80074dc <UART_SetConfig+0x768>)
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d006      	beq.n	80072ba <UART_SetConfig+0x546>
 80072ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b8b      	ldr	r3, [pc, #556]	; (80074e0 <UART_SetConfig+0x76c>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f040 8117 	bne.w	80074e8 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ba:	f7fe fdbd 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 80072be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80072cc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80072d0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80072d4:	4622      	mov	r2, r4
 80072d6:	462b      	mov	r3, r5
 80072d8:	1891      	adds	r1, r2, r2
 80072da:	64b9      	str	r1, [r7, #72]	; 0x48
 80072dc:	415b      	adcs	r3, r3
 80072de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072e4:	4621      	mov	r1, r4
 80072e6:	eb12 0801 	adds.w	r8, r2, r1
 80072ea:	4629      	mov	r1, r5
 80072ec:	eb43 0901 	adc.w	r9, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007300:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007304:	4690      	mov	r8, r2
 8007306:	4699      	mov	r9, r3
 8007308:	4623      	mov	r3, r4
 800730a:	eb18 0303 	adds.w	r3, r8, r3
 800730e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007312:	462b      	mov	r3, r5
 8007314:	eb49 0303 	adc.w	r3, r9, r3
 8007318:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800731c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007328:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007338:	4629      	mov	r1, r5
 800733a:	008b      	lsls	r3, r1, #2
 800733c:	4621      	mov	r1, r4
 800733e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007342:	4621      	mov	r1, r4
 8007344:	008a      	lsls	r2, r1, #2
 8007346:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800734a:	f7f9 fe05 	bl	8000f58 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4b64      	ldr	r3, [pc, #400]	; (80074e4 <UART_SetConfig+0x770>)
 8007354:	fba3 2302 	umull	r2, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	011c      	lsls	r4, r3, #4
 800735c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007360:	2200      	movs	r2, #0
 8007362:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8007366:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800736a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800736e:	4642      	mov	r2, r8
 8007370:	464b      	mov	r3, r9
 8007372:	1891      	adds	r1, r2, r2
 8007374:	6439      	str	r1, [r7, #64]	; 0x40
 8007376:	415b      	adcs	r3, r3
 8007378:	647b      	str	r3, [r7, #68]	; 0x44
 800737a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800737e:	4641      	mov	r1, r8
 8007380:	1851      	adds	r1, r2, r1
 8007382:	63b9      	str	r1, [r7, #56]	; 0x38
 8007384:	4649      	mov	r1, r9
 8007386:	414b      	adcs	r3, r1
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8007396:	4659      	mov	r1, fp
 8007398:	00cb      	lsls	r3, r1, #3
 800739a:	4651      	mov	r1, sl
 800739c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073a0:	4651      	mov	r1, sl
 80073a2:	00ca      	lsls	r2, r1, #3
 80073a4:	4610      	mov	r0, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	4603      	mov	r3, r0
 80073aa:	4642      	mov	r2, r8
 80073ac:	189b      	adds	r3, r3, r2
 80073ae:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80073b2:	464b      	mov	r3, r9
 80073b4:	460a      	mov	r2, r1
 80073b6:	eb42 0303 	adc.w	r3, r2, r3
 80073ba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80073be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80073ca:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 80073da:	4649      	mov	r1, r9
 80073dc:	008b      	lsls	r3, r1, #2
 80073de:	4641      	mov	r1, r8
 80073e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e4:	4641      	mov	r1, r8
 80073e6:	008a      	lsls	r2, r1, #2
 80073e8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80073ec:	f7f9 fdb4 	bl	8000f58 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4b3b      	ldr	r3, [pc, #236]	; (80074e4 <UART_SetConfig+0x770>)
 80073f6:	fba3 1302 	umull	r1, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	2164      	movs	r1, #100	; 0x64
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	3332      	adds	r3, #50	; 0x32
 8007408:	4a36      	ldr	r2, [pc, #216]	; (80074e4 <UART_SetConfig+0x770>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007414:	441c      	add	r4, r3
 8007416:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800741a:	2200      	movs	r2, #0
 800741c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007420:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007424:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	1891      	adds	r1, r2, r2
 800742e:	6339      	str	r1, [r7, #48]	; 0x30
 8007430:	415b      	adcs	r3, r3
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
 8007434:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007438:	4641      	mov	r1, r8
 800743a:	1851      	adds	r1, r2, r1
 800743c:	62b9      	str	r1, [r7, #40]	; 0x28
 800743e:	4649      	mov	r1, r9
 8007440:	414b      	adcs	r3, r1
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8007450:	4659      	mov	r1, fp
 8007452:	00cb      	lsls	r3, r1, #3
 8007454:	4651      	mov	r1, sl
 8007456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800745a:	4651      	mov	r1, sl
 800745c:	00ca      	lsls	r2, r1, #3
 800745e:	4610      	mov	r0, r2
 8007460:	4619      	mov	r1, r3
 8007462:	4603      	mov	r3, r0
 8007464:	4642      	mov	r2, r8
 8007466:	189b      	adds	r3, r3, r2
 8007468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800746c:	464b      	mov	r3, r9
 800746e:	460a      	mov	r2, r1
 8007470:	eb42 0303 	adc.w	r3, r2, r3
 8007474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007478:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007484:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8007494:	4649      	mov	r1, r9
 8007496:	008b      	lsls	r3, r1, #2
 8007498:	4641      	mov	r1, r8
 800749a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800749e:	4641      	mov	r1, r8
 80074a0:	008a      	lsls	r2, r1, #2
 80074a2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80074a6:	f7f9 fd57 	bl	8000f58 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <UART_SetConfig+0x770>)
 80074b0:	fba3 1302 	umull	r1, r3, r3, r2
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	2164      	movs	r1, #100	; 0x64
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	3332      	adds	r3, #50	; 0x32
 80074c2:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <UART_SetConfig+0x770>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	f003 020f 	and.w	r2, r3, #15
 80074ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4422      	add	r2, r4
 80074d6:	609a      	str	r2, [r3, #8]
 80074d8:	e112      	b.n	8007700 <UART_SetConfig+0x98c>
 80074da:	bf00      	nop
 80074dc:	40011000 	.word	0x40011000
 80074e0:	40011400 	.word	0x40011400
 80074e4:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 80074e8:	f7fe fc92 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 80074ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80074fe:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	1891      	adds	r1, r2, r2
 8007508:	6239      	str	r1, [r7, #32]
 800750a:	415b      	adcs	r3, r3
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
 800750e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007512:	4641      	mov	r1, r8
 8007514:	1854      	adds	r4, r2, r1
 8007516:	4649      	mov	r1, r9
 8007518:	eb43 0501 	adc.w	r5, r3, r1
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	00eb      	lsls	r3, r5, #3
 8007526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752a:	00e2      	lsls	r2, r4, #3
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	4643      	mov	r3, r8
 8007532:	18e3      	adds	r3, r4, r3
 8007534:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007538:	464b      	mov	r3, r9
 800753a:	eb45 0303 	adc.w	r3, r5, r3
 800753e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007542:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800754e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800755e:	4629      	mov	r1, r5
 8007560:	008b      	lsls	r3, r1, #2
 8007562:	4621      	mov	r1, r4
 8007564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007568:	4621      	mov	r1, r4
 800756a:	008a      	lsls	r2, r1, #2
 800756c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8007570:	f7f9 fcf2 	bl	8000f58 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4b64      	ldr	r3, [pc, #400]	; (800770c <UART_SetConfig+0x998>)
 800757a:	fba3 2302 	umull	r2, r3, r3, r2
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	011c      	lsls	r4, r3, #4
 8007582:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007586:	2200      	movs	r2, #0
 8007588:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800758c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007590:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	1891      	adds	r1, r2, r2
 800759a:	61b9      	str	r1, [r7, #24]
 800759c:	415b      	adcs	r3, r3
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a4:	4641      	mov	r1, r8
 80075a6:	1851      	adds	r1, r2, r1
 80075a8:	6139      	str	r1, [r7, #16]
 80075aa:	4649      	mov	r1, r9
 80075ac:	414b      	adcs	r3, r1
 80075ae:	617b      	str	r3, [r7, #20]
 80075b0:	f04f 0200 	mov.w	r2, #0
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075bc:	4659      	mov	r1, fp
 80075be:	00cb      	lsls	r3, r1, #3
 80075c0:	4651      	mov	r1, sl
 80075c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c6:	4651      	mov	r1, sl
 80075c8:	00ca      	lsls	r2, r1, #3
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	4603      	mov	r3, r0
 80075d0:	4642      	mov	r2, r8
 80075d2:	189b      	adds	r3, r3, r2
 80075d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075d8:	464b      	mov	r3, r9
 80075da:	460a      	mov	r2, r1
 80075dc:	eb42 0303 	adc.w	r3, r2, r3
 80075e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80075f0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8007600:	4649      	mov	r1, r9
 8007602:	008b      	lsls	r3, r1, #2
 8007604:	4641      	mov	r1, r8
 8007606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760a:	4641      	mov	r1, r8
 800760c:	008a      	lsls	r2, r1, #2
 800760e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007612:	f7f9 fca1 	bl	8000f58 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b3c      	ldr	r3, [pc, #240]	; (800770c <UART_SetConfig+0x998>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	3332      	adds	r3, #50	; 0x32
 800762e:	4a37      	ldr	r2, [pc, #220]	; (800770c <UART_SetConfig+0x998>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800763a:	441c      	add	r4, r3
 800763c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007640:	2200      	movs	r2, #0
 8007642:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007646:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800764a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800764e:	4642      	mov	r2, r8
 8007650:	464b      	mov	r3, r9
 8007652:	1891      	adds	r1, r2, r2
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	415b      	adcs	r3, r3
 8007658:	60fb      	str	r3, [r7, #12]
 800765a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800765e:	4641      	mov	r1, r8
 8007660:	1851      	adds	r1, r2, r1
 8007662:	6039      	str	r1, [r7, #0]
 8007664:	4649      	mov	r1, r9
 8007666:	414b      	adcs	r3, r1
 8007668:	607b      	str	r3, [r7, #4]
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007676:	4659      	mov	r1, fp
 8007678:	00cb      	lsls	r3, r1, #3
 800767a:	4651      	mov	r1, sl
 800767c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007680:	4651      	mov	r1, sl
 8007682:	00ca      	lsls	r2, r1, #3
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	4603      	mov	r3, r0
 800768a:	4642      	mov	r2, r8
 800768c:	189b      	adds	r3, r3, r2
 800768e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007692:	464b      	mov	r3, r9
 8007694:	460a      	mov	r2, r1
 8007696:	eb42 0303 	adc.w	r3, r2, r3
 800769a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800769e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80076ba:	4649      	mov	r1, r9
 80076bc:	008b      	lsls	r3, r1, #2
 80076be:	4641      	mov	r1, r8
 80076c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c4:	4641      	mov	r1, r8
 80076c6:	008a      	lsls	r2, r1, #2
 80076c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076cc:	f7f9 fc44 	bl	8000f58 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4b0d      	ldr	r3, [pc, #52]	; (800770c <UART_SetConfig+0x998>)
 80076d6:	fba3 1302 	umull	r1, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2164      	movs	r1, #100	; 0x64
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	3332      	adds	r3, #50	; 0x32
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <UART_SetConfig+0x998>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4422      	add	r2, r4
 80076fc:	609a      	str	r2, [r3, #8]
}
 80076fe:	e7ff      	b.n	8007700 <UART_SetConfig+0x98c>
 8007700:	bf00      	nop
 8007702:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007706:	46bd      	mov	sp, r7
 8007708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770c:	51eb851f 	.word	0x51eb851f

08007710 <main>:




int main(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  hwInit();
 8007714:	f7fc fbd8 	bl	8003ec8 <hwInit>
  apInit();
 8007718:	f7f9 fdd6 	bl	80012c8 <apInit>

  apMain();
 800771c:	f7f9 fe22 	bl	8001364 <apMain>

  return 0;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <__errno>:
 8007728:	4b01      	ldr	r3, [pc, #4]	; (8007730 <__errno+0x8>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000278 	.word	0x20000278

08007734 <__libc_init_array>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4d0d      	ldr	r5, [pc, #52]	; (800776c <__libc_init_array+0x38>)
 8007738:	4c0d      	ldr	r4, [pc, #52]	; (8007770 <__libc_init_array+0x3c>)
 800773a:	1b64      	subs	r4, r4, r5
 800773c:	10a4      	asrs	r4, r4, #2
 800773e:	2600      	movs	r6, #0
 8007740:	42a6      	cmp	r6, r4
 8007742:	d109      	bne.n	8007758 <__libc_init_array+0x24>
 8007744:	4d0b      	ldr	r5, [pc, #44]	; (8007774 <__libc_init_array+0x40>)
 8007746:	4c0c      	ldr	r4, [pc, #48]	; (8007778 <__libc_init_array+0x44>)
 8007748:	f004 faf0 	bl	800bd2c <_init>
 800774c:	1b64      	subs	r4, r4, r5
 800774e:	10a4      	asrs	r4, r4, #2
 8007750:	2600      	movs	r6, #0
 8007752:	42a6      	cmp	r6, r4
 8007754:	d105      	bne.n	8007762 <__libc_init_array+0x2e>
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	f855 3b04 	ldr.w	r3, [r5], #4
 800775c:	4798      	blx	r3
 800775e:	3601      	adds	r6, #1
 8007760:	e7ee      	b.n	8007740 <__libc_init_array+0xc>
 8007762:	f855 3b04 	ldr.w	r3, [r5], #4
 8007766:	4798      	blx	r3
 8007768:	3601      	adds	r6, #1
 800776a:	e7f2      	b.n	8007752 <__libc_init_array+0x1e>
 800776c:	0800c52c 	.word	0x0800c52c
 8007770:	0800c52c 	.word	0x0800c52c
 8007774:	0800c52c 	.word	0x0800c52c
 8007778:	0800c530 	.word	0x0800c530

0800777c <memcpy>:
 800777c:	440a      	add	r2, r1
 800777e:	4291      	cmp	r1, r2
 8007780:	f100 33ff 	add.w	r3, r0, #4294967295
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	4770      	bx	lr
 8007788:	b510      	push	{r4, lr}
 800778a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007792:	4291      	cmp	r1, r2
 8007794:	d1f9      	bne.n	800778a <memcpy+0xe>
 8007796:	bd10      	pop	{r4, pc}

08007798 <memset>:
 8007798:	4402      	add	r2, r0
 800779a:	4603      	mov	r3, r0
 800779c:	4293      	cmp	r3, r2
 800779e:	d100      	bne.n	80077a2 <memset+0xa>
 80077a0:	4770      	bx	lr
 80077a2:	f803 1b01 	strb.w	r1, [r3], #1
 80077a6:	e7f9      	b.n	800779c <memset+0x4>

080077a8 <__cvt>:
 80077a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	ec55 4b10 	vmov	r4, r5, d0
 80077b0:	2d00      	cmp	r5, #0
 80077b2:	460e      	mov	r6, r1
 80077b4:	4619      	mov	r1, r3
 80077b6:	462b      	mov	r3, r5
 80077b8:	bfbb      	ittet	lt
 80077ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077be:	461d      	movlt	r5, r3
 80077c0:	2300      	movge	r3, #0
 80077c2:	232d      	movlt	r3, #45	; 0x2d
 80077c4:	700b      	strb	r3, [r1, #0]
 80077c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077cc:	4691      	mov	r9, r2
 80077ce:	f023 0820 	bic.w	r8, r3, #32
 80077d2:	bfbc      	itt	lt
 80077d4:	4622      	movlt	r2, r4
 80077d6:	4614      	movlt	r4, r2
 80077d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077dc:	d005      	beq.n	80077ea <__cvt+0x42>
 80077de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077e2:	d100      	bne.n	80077e6 <__cvt+0x3e>
 80077e4:	3601      	adds	r6, #1
 80077e6:	2102      	movs	r1, #2
 80077e8:	e000      	b.n	80077ec <__cvt+0x44>
 80077ea:	2103      	movs	r1, #3
 80077ec:	ab03      	add	r3, sp, #12
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	ab02      	add	r3, sp, #8
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	ec45 4b10 	vmov	d0, r4, r5
 80077f8:	4653      	mov	r3, sl
 80077fa:	4632      	mov	r2, r6
 80077fc:	f001 fc08 	bl	8009010 <_dtoa_r>
 8007800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007804:	4607      	mov	r7, r0
 8007806:	d102      	bne.n	800780e <__cvt+0x66>
 8007808:	f019 0f01 	tst.w	r9, #1
 800780c:	d022      	beq.n	8007854 <__cvt+0xac>
 800780e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007812:	eb07 0906 	add.w	r9, r7, r6
 8007816:	d110      	bne.n	800783a <__cvt+0x92>
 8007818:	783b      	ldrb	r3, [r7, #0]
 800781a:	2b30      	cmp	r3, #48	; 0x30
 800781c:	d10a      	bne.n	8007834 <__cvt+0x8c>
 800781e:	2200      	movs	r2, #0
 8007820:	2300      	movs	r3, #0
 8007822:	4620      	mov	r0, r4
 8007824:	4629      	mov	r1, r5
 8007826:	f7f9 fab7 	bl	8000d98 <__aeabi_dcmpeq>
 800782a:	b918      	cbnz	r0, 8007834 <__cvt+0x8c>
 800782c:	f1c6 0601 	rsb	r6, r6, #1
 8007830:	f8ca 6000 	str.w	r6, [sl]
 8007834:	f8da 3000 	ldr.w	r3, [sl]
 8007838:	4499      	add	r9, r3
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 faa9 	bl	8000d98 <__aeabi_dcmpeq>
 8007846:	b108      	cbz	r0, 800784c <__cvt+0xa4>
 8007848:	f8cd 900c 	str.w	r9, [sp, #12]
 800784c:	2230      	movs	r2, #48	; 0x30
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	454b      	cmp	r3, r9
 8007852:	d307      	bcc.n	8007864 <__cvt+0xbc>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007858:	1bdb      	subs	r3, r3, r7
 800785a:	4638      	mov	r0, r7
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	b004      	add	sp, #16
 8007860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007864:	1c59      	adds	r1, r3, #1
 8007866:	9103      	str	r1, [sp, #12]
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e7f0      	b.n	800784e <__cvt+0xa6>

0800786c <__exponent>:
 800786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800786e:	4603      	mov	r3, r0
 8007870:	2900      	cmp	r1, #0
 8007872:	bfb8      	it	lt
 8007874:	4249      	neglt	r1, r1
 8007876:	f803 2b02 	strb.w	r2, [r3], #2
 800787a:	bfb4      	ite	lt
 800787c:	222d      	movlt	r2, #45	; 0x2d
 800787e:	222b      	movge	r2, #43	; 0x2b
 8007880:	2909      	cmp	r1, #9
 8007882:	7042      	strb	r2, [r0, #1]
 8007884:	dd2a      	ble.n	80078dc <__exponent+0x70>
 8007886:	f10d 0407 	add.w	r4, sp, #7
 800788a:	46a4      	mov	ip, r4
 800788c:	270a      	movs	r7, #10
 800788e:	46a6      	mov	lr, r4
 8007890:	460a      	mov	r2, r1
 8007892:	fb91 f6f7 	sdiv	r6, r1, r7
 8007896:	fb07 1516 	mls	r5, r7, r6, r1
 800789a:	3530      	adds	r5, #48	; 0x30
 800789c:	2a63      	cmp	r2, #99	; 0x63
 800789e:	f104 34ff 	add.w	r4, r4, #4294967295
 80078a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078a6:	4631      	mov	r1, r6
 80078a8:	dcf1      	bgt.n	800788e <__exponent+0x22>
 80078aa:	3130      	adds	r1, #48	; 0x30
 80078ac:	f1ae 0502 	sub.w	r5, lr, #2
 80078b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078b4:	1c44      	adds	r4, r0, #1
 80078b6:	4629      	mov	r1, r5
 80078b8:	4561      	cmp	r1, ip
 80078ba:	d30a      	bcc.n	80078d2 <__exponent+0x66>
 80078bc:	f10d 0209 	add.w	r2, sp, #9
 80078c0:	eba2 020e 	sub.w	r2, r2, lr
 80078c4:	4565      	cmp	r5, ip
 80078c6:	bf88      	it	hi
 80078c8:	2200      	movhi	r2, #0
 80078ca:	4413      	add	r3, r2
 80078cc:	1a18      	subs	r0, r3, r0
 80078ce:	b003      	add	sp, #12
 80078d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078da:	e7ed      	b.n	80078b8 <__exponent+0x4c>
 80078dc:	2330      	movs	r3, #48	; 0x30
 80078de:	3130      	adds	r1, #48	; 0x30
 80078e0:	7083      	strb	r3, [r0, #2]
 80078e2:	70c1      	strb	r1, [r0, #3]
 80078e4:	1d03      	adds	r3, r0, #4
 80078e6:	e7f1      	b.n	80078cc <__exponent+0x60>

080078e8 <_printf_float>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ed2d 8b02 	vpush	{d8}
 80078f0:	b08d      	sub	sp, #52	; 0x34
 80078f2:	460c      	mov	r4, r1
 80078f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078f8:	4616      	mov	r6, r2
 80078fa:	461f      	mov	r7, r3
 80078fc:	4605      	mov	r5, r0
 80078fe:	f002 fce5 	bl	800a2cc <_localeconv_r>
 8007902:	f8d0 a000 	ldr.w	sl, [r0]
 8007906:	4650      	mov	r0, sl
 8007908:	f7f8 fdc4 	bl	8000494 <strlen>
 800790c:	2300      	movs	r3, #0
 800790e:	930a      	str	r3, [sp, #40]	; 0x28
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	9305      	str	r3, [sp, #20]
 8007914:	f8d8 3000 	ldr.w	r3, [r8]
 8007918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800791c:	3307      	adds	r3, #7
 800791e:	f023 0307 	bic.w	r3, r3, #7
 8007922:	f103 0208 	add.w	r2, r3, #8
 8007926:	f8c8 2000 	str.w	r2, [r8]
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007940:	ee08 0a10 	vmov	s16, r0
 8007944:	4b9f      	ldr	r3, [pc, #636]	; (8007bc4 <_printf_float+0x2dc>)
 8007946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	f7f9 fa55 	bl	8000dfc <__aeabi_dcmpun>
 8007952:	bb88      	cbnz	r0, 80079b8 <_printf_float+0xd0>
 8007954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007958:	4b9a      	ldr	r3, [pc, #616]	; (8007bc4 <_printf_float+0x2dc>)
 800795a:	f04f 32ff 	mov.w	r2, #4294967295
 800795e:	f7f9 fa2f 	bl	8000dc0 <__aeabi_dcmple>
 8007962:	bb48      	cbnz	r0, 80079b8 <_printf_float+0xd0>
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4640      	mov	r0, r8
 800796a:	4649      	mov	r1, r9
 800796c:	f7f9 fa1e 	bl	8000dac <__aeabi_dcmplt>
 8007970:	b110      	cbz	r0, 8007978 <_printf_float+0x90>
 8007972:	232d      	movs	r3, #45	; 0x2d
 8007974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007978:	4b93      	ldr	r3, [pc, #588]	; (8007bc8 <_printf_float+0x2e0>)
 800797a:	4894      	ldr	r0, [pc, #592]	; (8007bcc <_printf_float+0x2e4>)
 800797c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007980:	bf94      	ite	ls
 8007982:	4698      	movls	r8, r3
 8007984:	4680      	movhi	r8, r0
 8007986:	2303      	movs	r3, #3
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	9b05      	ldr	r3, [sp, #20]
 800798c:	f023 0204 	bic.w	r2, r3, #4
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	f04f 0900 	mov.w	r9, #0
 8007996:	9700      	str	r7, [sp, #0]
 8007998:	4633      	mov	r3, r6
 800799a:	aa0b      	add	r2, sp, #44	; 0x2c
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 f9d8 	bl	8007d54 <_printf_common>
 80079a4:	3001      	adds	r0, #1
 80079a6:	f040 8090 	bne.w	8007aca <_printf_float+0x1e2>
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	b00d      	add	sp, #52	; 0x34
 80079b0:	ecbd 8b02 	vpop	{d8}
 80079b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b8:	4642      	mov	r2, r8
 80079ba:	464b      	mov	r3, r9
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f9 fa1c 	bl	8000dfc <__aeabi_dcmpun>
 80079c4:	b140      	cbz	r0, 80079d8 <_printf_float+0xf0>
 80079c6:	464b      	mov	r3, r9
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfbc      	itt	lt
 80079cc:	232d      	movlt	r3, #45	; 0x2d
 80079ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079d2:	487f      	ldr	r0, [pc, #508]	; (8007bd0 <_printf_float+0x2e8>)
 80079d4:	4b7f      	ldr	r3, [pc, #508]	; (8007bd4 <_printf_float+0x2ec>)
 80079d6:	e7d1      	b.n	800797c <_printf_float+0x94>
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079de:	9206      	str	r2, [sp, #24]
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	d13f      	bne.n	8007a64 <_printf_float+0x17c>
 80079e4:	2306      	movs	r3, #6
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	6861      	ldr	r1, [r4, #4]
 80079ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079f0:	2300      	movs	r3, #0
 80079f2:	9303      	str	r3, [sp, #12]
 80079f4:	ab0a      	add	r3, sp, #40	; 0x28
 80079f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079fa:	ab09      	add	r3, sp, #36	; 0x24
 80079fc:	ec49 8b10 	vmov	d0, r8, r9
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7ff fecd 	bl	80077a8 <__cvt>
 8007a0e:	9b06      	ldr	r3, [sp, #24]
 8007a10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a12:	2b47      	cmp	r3, #71	; 0x47
 8007a14:	4680      	mov	r8, r0
 8007a16:	d108      	bne.n	8007a2a <_printf_float+0x142>
 8007a18:	1cc8      	adds	r0, r1, #3
 8007a1a:	db02      	blt.n	8007a22 <_printf_float+0x13a>
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	4299      	cmp	r1, r3
 8007a20:	dd41      	ble.n	8007aa6 <_printf_float+0x1be>
 8007a22:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a26:	fa5f fb8b 	uxtb.w	fp, fp
 8007a2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a2e:	d820      	bhi.n	8007a72 <_printf_float+0x18a>
 8007a30:	3901      	subs	r1, #1
 8007a32:	465a      	mov	r2, fp
 8007a34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a38:	9109      	str	r1, [sp, #36]	; 0x24
 8007a3a:	f7ff ff17 	bl	800786c <__exponent>
 8007a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a40:	1813      	adds	r3, r2, r0
 8007a42:	2a01      	cmp	r2, #1
 8007a44:	4681      	mov	r9, r0
 8007a46:	6123      	str	r3, [r4, #16]
 8007a48:	dc02      	bgt.n	8007a50 <_printf_float+0x168>
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	07d2      	lsls	r2, r2, #31
 8007a4e:	d501      	bpl.n	8007a54 <_printf_float+0x16c>
 8007a50:	3301      	adds	r3, #1
 8007a52:	6123      	str	r3, [r4, #16]
 8007a54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d09c      	beq.n	8007996 <_printf_float+0xae>
 8007a5c:	232d      	movs	r3, #45	; 0x2d
 8007a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a62:	e798      	b.n	8007996 <_printf_float+0xae>
 8007a64:	9a06      	ldr	r2, [sp, #24]
 8007a66:	2a47      	cmp	r2, #71	; 0x47
 8007a68:	d1be      	bne.n	80079e8 <_printf_float+0x100>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1bc      	bne.n	80079e8 <_printf_float+0x100>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e7b9      	b.n	80079e6 <_printf_float+0xfe>
 8007a72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a76:	d118      	bne.n	8007aaa <_printf_float+0x1c2>
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	6863      	ldr	r3, [r4, #4]
 8007a7c:	dd0b      	ble.n	8007a96 <_printf_float+0x1ae>
 8007a7e:	6121      	str	r1, [r4, #16]
 8007a80:	b913      	cbnz	r3, 8007a88 <_printf_float+0x1a0>
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	07d0      	lsls	r0, r2, #31
 8007a86:	d502      	bpl.n	8007a8e <_printf_float+0x1a6>
 8007a88:	3301      	adds	r3, #1
 8007a8a:	440b      	add	r3, r1
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a90:	f04f 0900 	mov.w	r9, #0
 8007a94:	e7de      	b.n	8007a54 <_printf_float+0x16c>
 8007a96:	b913      	cbnz	r3, 8007a9e <_printf_float+0x1b6>
 8007a98:	6822      	ldr	r2, [r4, #0]
 8007a9a:	07d2      	lsls	r2, r2, #31
 8007a9c:	d501      	bpl.n	8007aa2 <_printf_float+0x1ba>
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	e7f4      	b.n	8007a8c <_printf_float+0x1a4>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e7f2      	b.n	8007a8c <_printf_float+0x1a4>
 8007aa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aac:	4299      	cmp	r1, r3
 8007aae:	db05      	blt.n	8007abc <_printf_float+0x1d4>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	6121      	str	r1, [r4, #16]
 8007ab4:	07d8      	lsls	r0, r3, #31
 8007ab6:	d5ea      	bpl.n	8007a8e <_printf_float+0x1a6>
 8007ab8:	1c4b      	adds	r3, r1, #1
 8007aba:	e7e7      	b.n	8007a8c <_printf_float+0x1a4>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	bfd4      	ite	le
 8007ac0:	f1c1 0202 	rsble	r2, r1, #2
 8007ac4:	2201      	movgt	r2, #1
 8007ac6:	4413      	add	r3, r2
 8007ac8:	e7e0      	b.n	8007a8c <_printf_float+0x1a4>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	055a      	lsls	r2, r3, #21
 8007ace:	d407      	bmi.n	8007ae0 <_printf_float+0x1f8>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	4642      	mov	r2, r8
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	d12c      	bne.n	8007b38 <_printf_float+0x250>
 8007ade:	e764      	b.n	80079aa <_printf_float+0xc2>
 8007ae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ae4:	f240 80e0 	bls.w	8007ca8 <_printf_float+0x3c0>
 8007ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007aec:	2200      	movs	r2, #0
 8007aee:	2300      	movs	r3, #0
 8007af0:	f7f9 f952 	bl	8000d98 <__aeabi_dcmpeq>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d034      	beq.n	8007b62 <_printf_float+0x27a>
 8007af8:	4a37      	ldr	r2, [pc, #220]	; (8007bd8 <_printf_float+0x2f0>)
 8007afa:	2301      	movs	r3, #1
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f af51 	beq.w	80079aa <_printf_float+0xc2>
 8007b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	db02      	blt.n	8007b16 <_printf_float+0x22e>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	07d8      	lsls	r0, r3, #31
 8007b14:	d510      	bpl.n	8007b38 <_printf_float+0x250>
 8007b16:	ee18 3a10 	vmov	r3, s16
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f af41 	beq.w	80079aa <_printf_float+0xc2>
 8007b28:	f04f 0800 	mov.w	r8, #0
 8007b2c:	f104 091a 	add.w	r9, r4, #26
 8007b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b32:	3b01      	subs	r3, #1
 8007b34:	4543      	cmp	r3, r8
 8007b36:	dc09      	bgt.n	8007b4c <_printf_float+0x264>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	079b      	lsls	r3, r3, #30
 8007b3c:	f100 8105 	bmi.w	8007d4a <_printf_float+0x462>
 8007b40:	68e0      	ldr	r0, [r4, #12]
 8007b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b44:	4298      	cmp	r0, r3
 8007b46:	bfb8      	it	lt
 8007b48:	4618      	movlt	r0, r3
 8007b4a:	e730      	b.n	80079ae <_printf_float+0xc6>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	464a      	mov	r2, r9
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af27 	beq.w	80079aa <_printf_float+0xc2>
 8007b5c:	f108 0801 	add.w	r8, r8, #1
 8007b60:	e7e6      	b.n	8007b30 <_printf_float+0x248>
 8007b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dc39      	bgt.n	8007bdc <_printf_float+0x2f4>
 8007b68:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <_printf_float+0x2f0>)
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f af19 	beq.w	80079aa <_printf_float+0xc2>
 8007b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	d102      	bne.n	8007b86 <_printf_float+0x29e>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d5d8      	bpl.n	8007b38 <_printf_float+0x250>
 8007b86:	ee18 3a10 	vmov	r3, s16
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f af09 	beq.w	80079aa <_printf_float+0xc2>
 8007b98:	f04f 0900 	mov.w	r9, #0
 8007b9c:	f104 0a1a 	add.w	sl, r4, #26
 8007ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba2:	425b      	negs	r3, r3
 8007ba4:	454b      	cmp	r3, r9
 8007ba6:	dc01      	bgt.n	8007bac <_printf_float+0x2c4>
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007baa:	e792      	b.n	8007ad2 <_printf_float+0x1ea>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4652      	mov	r2, sl
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f aef7 	beq.w	80079aa <_printf_float+0xc2>
 8007bbc:	f109 0901 	add.w	r9, r9, #1
 8007bc0:	e7ee      	b.n	8007ba0 <_printf_float+0x2b8>
 8007bc2:	bf00      	nop
 8007bc4:	7fefffff 	.word	0x7fefffff
 8007bc8:	0800c08c 	.word	0x0800c08c
 8007bcc:	0800c090 	.word	0x0800c090
 8007bd0:	0800c098 	.word	0x0800c098
 8007bd4:	0800c094 	.word	0x0800c094
 8007bd8:	0800c09c 	.word	0x0800c09c
 8007bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007be0:	429a      	cmp	r2, r3
 8007be2:	bfa8      	it	ge
 8007be4:	461a      	movge	r2, r3
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	4691      	mov	r9, r2
 8007bea:	dc37      	bgt.n	8007c5c <_printf_float+0x374>
 8007bec:	f04f 0b00 	mov.w	fp, #0
 8007bf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bf4:	f104 021a 	add.w	r2, r4, #26
 8007bf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	eba3 0309 	sub.w	r3, r3, r9
 8007c00:	455b      	cmp	r3, fp
 8007c02:	dc33      	bgt.n	8007c6c <_printf_float+0x384>
 8007c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	db3b      	blt.n	8007c84 <_printf_float+0x39c>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	07da      	lsls	r2, r3, #31
 8007c10:	d438      	bmi.n	8007c84 <_printf_float+0x39c>
 8007c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c14:	9a05      	ldr	r2, [sp, #20]
 8007c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c18:	1a9a      	subs	r2, r3, r2
 8007c1a:	eba3 0901 	sub.w	r9, r3, r1
 8007c1e:	4591      	cmp	r9, r2
 8007c20:	bfa8      	it	ge
 8007c22:	4691      	movge	r9, r2
 8007c24:	f1b9 0f00 	cmp.w	r9, #0
 8007c28:	dc35      	bgt.n	8007c96 <_printf_float+0x3ae>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c32:	f104 0a1a 	add.w	sl, r4, #26
 8007c36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c3a:	1a9b      	subs	r3, r3, r2
 8007c3c:	eba3 0309 	sub.w	r3, r3, r9
 8007c40:	4543      	cmp	r3, r8
 8007c42:	f77f af79 	ble.w	8007b38 <_printf_float+0x250>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4652      	mov	r2, sl
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f aeaa 	beq.w	80079aa <_printf_float+0xc2>
 8007c56:	f108 0801 	add.w	r8, r8, #1
 8007c5a:	e7ec      	b.n	8007c36 <_printf_float+0x34e>
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4642      	mov	r2, r8
 8007c62:	4628      	mov	r0, r5
 8007c64:	47b8      	blx	r7
 8007c66:	3001      	adds	r0, #1
 8007c68:	d1c0      	bne.n	8007bec <_printf_float+0x304>
 8007c6a:	e69e      	b.n	80079aa <_printf_float+0xc2>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	9205      	str	r2, [sp, #20]
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f ae97 	beq.w	80079aa <_printf_float+0xc2>
 8007c7c:	9a05      	ldr	r2, [sp, #20]
 8007c7e:	f10b 0b01 	add.w	fp, fp, #1
 8007c82:	e7b9      	b.n	8007bf8 <_printf_float+0x310>
 8007c84:	ee18 3a10 	vmov	r3, s16
 8007c88:	4652      	mov	r2, sl
 8007c8a:	4631      	mov	r1, r6
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	47b8      	blx	r7
 8007c90:	3001      	adds	r0, #1
 8007c92:	d1be      	bne.n	8007c12 <_printf_float+0x32a>
 8007c94:	e689      	b.n	80079aa <_printf_float+0xc2>
 8007c96:	9a05      	ldr	r2, [sp, #20]
 8007c98:	464b      	mov	r3, r9
 8007c9a:	4442      	add	r2, r8
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d1c1      	bne.n	8007c2a <_printf_float+0x342>
 8007ca6:	e680      	b.n	80079aa <_printf_float+0xc2>
 8007ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007caa:	2a01      	cmp	r2, #1
 8007cac:	dc01      	bgt.n	8007cb2 <_printf_float+0x3ca>
 8007cae:	07db      	lsls	r3, r3, #31
 8007cb0:	d538      	bpl.n	8007d24 <_printf_float+0x43c>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae74 	beq.w	80079aa <_printf_float+0xc2>
 8007cc2:	ee18 3a10 	vmov	r3, s16
 8007cc6:	4652      	mov	r2, sl
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f ae6b 	beq.w	80079aa <_printf_float+0xc2>
 8007cd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f7f9 f85c 	bl	8000d98 <__aeabi_dcmpeq>
 8007ce0:	b9d8      	cbnz	r0, 8007d1a <_printf_float+0x432>
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	f108 0201 	add.w	r2, r8, #1
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d10e      	bne.n	8007d12 <_printf_float+0x42a>
 8007cf4:	e659      	b.n	80079aa <_printf_float+0xc2>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae52 	beq.w	80079aa <_printf_float+0xc2>
 8007d06:	f108 0801 	add.w	r8, r8, #1
 8007d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4543      	cmp	r3, r8
 8007d10:	dcf1      	bgt.n	8007cf6 <_printf_float+0x40e>
 8007d12:	464b      	mov	r3, r9
 8007d14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d18:	e6dc      	b.n	8007ad4 <_printf_float+0x1ec>
 8007d1a:	f04f 0800 	mov.w	r8, #0
 8007d1e:	f104 0a1a 	add.w	sl, r4, #26
 8007d22:	e7f2      	b.n	8007d0a <_printf_float+0x422>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4642      	mov	r2, r8
 8007d28:	e7df      	b.n	8007cea <_printf_float+0x402>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	464a      	mov	r2, r9
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	f43f ae38 	beq.w	80079aa <_printf_float+0xc2>
 8007d3a:	f108 0801 	add.w	r8, r8, #1
 8007d3e:	68e3      	ldr	r3, [r4, #12]
 8007d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d42:	1a5b      	subs	r3, r3, r1
 8007d44:	4543      	cmp	r3, r8
 8007d46:	dcf0      	bgt.n	8007d2a <_printf_float+0x442>
 8007d48:	e6fa      	b.n	8007b40 <_printf_float+0x258>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	f104 0919 	add.w	r9, r4, #25
 8007d52:	e7f4      	b.n	8007d3e <_printf_float+0x456>

08007d54 <_printf_common>:
 8007d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	4616      	mov	r6, r2
 8007d5a:	4699      	mov	r9, r3
 8007d5c:	688a      	ldr	r2, [r1, #8]
 8007d5e:	690b      	ldr	r3, [r1, #16]
 8007d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d64:	4293      	cmp	r3, r2
 8007d66:	bfb8      	it	lt
 8007d68:	4613      	movlt	r3, r2
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d70:	4607      	mov	r7, r0
 8007d72:	460c      	mov	r4, r1
 8007d74:	b10a      	cbz	r2, 8007d7a <_printf_common+0x26>
 8007d76:	3301      	adds	r3, #1
 8007d78:	6033      	str	r3, [r6, #0]
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	0699      	lsls	r1, r3, #26
 8007d7e:	bf42      	ittt	mi
 8007d80:	6833      	ldrmi	r3, [r6, #0]
 8007d82:	3302      	addmi	r3, #2
 8007d84:	6033      	strmi	r3, [r6, #0]
 8007d86:	6825      	ldr	r5, [r4, #0]
 8007d88:	f015 0506 	ands.w	r5, r5, #6
 8007d8c:	d106      	bne.n	8007d9c <_printf_common+0x48>
 8007d8e:	f104 0a19 	add.w	sl, r4, #25
 8007d92:	68e3      	ldr	r3, [r4, #12]
 8007d94:	6832      	ldr	r2, [r6, #0]
 8007d96:	1a9b      	subs	r3, r3, r2
 8007d98:	42ab      	cmp	r3, r5
 8007d9a:	dc26      	bgt.n	8007dea <_printf_common+0x96>
 8007d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007da0:	1e13      	subs	r3, r2, #0
 8007da2:	6822      	ldr	r2, [r4, #0]
 8007da4:	bf18      	it	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	0692      	lsls	r2, r2, #26
 8007daa:	d42b      	bmi.n	8007e04 <_printf_common+0xb0>
 8007dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db0:	4649      	mov	r1, r9
 8007db2:	4638      	mov	r0, r7
 8007db4:	47c0      	blx	r8
 8007db6:	3001      	adds	r0, #1
 8007db8:	d01e      	beq.n	8007df8 <_printf_common+0xa4>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	68e5      	ldr	r5, [r4, #12]
 8007dbe:	6832      	ldr	r2, [r6, #0]
 8007dc0:	f003 0306 	and.w	r3, r3, #6
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	bf08      	it	eq
 8007dc8:	1aad      	subeq	r5, r5, r2
 8007dca:	68a3      	ldr	r3, [r4, #8]
 8007dcc:	6922      	ldr	r2, [r4, #16]
 8007dce:	bf0c      	ite	eq
 8007dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dd4:	2500      	movne	r5, #0
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	bfc4      	itt	gt
 8007dda:	1a9b      	subgt	r3, r3, r2
 8007ddc:	18ed      	addgt	r5, r5, r3
 8007dde:	2600      	movs	r6, #0
 8007de0:	341a      	adds	r4, #26
 8007de2:	42b5      	cmp	r5, r6
 8007de4:	d11a      	bne.n	8007e1c <_printf_common+0xc8>
 8007de6:	2000      	movs	r0, #0
 8007de8:	e008      	b.n	8007dfc <_printf_common+0xa8>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4652      	mov	r2, sl
 8007dee:	4649      	mov	r1, r9
 8007df0:	4638      	mov	r0, r7
 8007df2:	47c0      	blx	r8
 8007df4:	3001      	adds	r0, #1
 8007df6:	d103      	bne.n	8007e00 <_printf_common+0xac>
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e00:	3501      	adds	r5, #1
 8007e02:	e7c6      	b.n	8007d92 <_printf_common+0x3e>
 8007e04:	18e1      	adds	r1, r4, r3
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	2030      	movs	r0, #48	; 0x30
 8007e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e0e:	4422      	add	r2, r4
 8007e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e18:	3302      	adds	r3, #2
 8007e1a:	e7c7      	b.n	8007dac <_printf_common+0x58>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4649      	mov	r1, r9
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	3001      	adds	r0, #1
 8007e28:	d0e6      	beq.n	8007df8 <_printf_common+0xa4>
 8007e2a:	3601      	adds	r6, #1
 8007e2c:	e7d9      	b.n	8007de2 <_printf_common+0x8e>
	...

08007e30 <_printf_i>:
 8007e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	7e0f      	ldrb	r7, [r1, #24]
 8007e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e38:	2f78      	cmp	r7, #120	; 0x78
 8007e3a:	4691      	mov	r9, r2
 8007e3c:	4680      	mov	r8, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	469a      	mov	sl, r3
 8007e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e46:	d807      	bhi.n	8007e58 <_printf_i+0x28>
 8007e48:	2f62      	cmp	r7, #98	; 0x62
 8007e4a:	d80a      	bhi.n	8007e62 <_printf_i+0x32>
 8007e4c:	2f00      	cmp	r7, #0
 8007e4e:	f000 80d8 	beq.w	8008002 <_printf_i+0x1d2>
 8007e52:	2f58      	cmp	r7, #88	; 0x58
 8007e54:	f000 80a3 	beq.w	8007f9e <_printf_i+0x16e>
 8007e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e60:	e03a      	b.n	8007ed8 <_printf_i+0xa8>
 8007e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e66:	2b15      	cmp	r3, #21
 8007e68:	d8f6      	bhi.n	8007e58 <_printf_i+0x28>
 8007e6a:	a101      	add	r1, pc, #4	; (adr r1, 8007e70 <_printf_i+0x40>)
 8007e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e70:	08007ec9 	.word	0x08007ec9
 8007e74:	08007edd 	.word	0x08007edd
 8007e78:	08007e59 	.word	0x08007e59
 8007e7c:	08007e59 	.word	0x08007e59
 8007e80:	08007e59 	.word	0x08007e59
 8007e84:	08007e59 	.word	0x08007e59
 8007e88:	08007edd 	.word	0x08007edd
 8007e8c:	08007e59 	.word	0x08007e59
 8007e90:	08007e59 	.word	0x08007e59
 8007e94:	08007e59 	.word	0x08007e59
 8007e98:	08007e59 	.word	0x08007e59
 8007e9c:	08007fe9 	.word	0x08007fe9
 8007ea0:	08007f0d 	.word	0x08007f0d
 8007ea4:	08007fcb 	.word	0x08007fcb
 8007ea8:	08007e59 	.word	0x08007e59
 8007eac:	08007e59 	.word	0x08007e59
 8007eb0:	0800800b 	.word	0x0800800b
 8007eb4:	08007e59 	.word	0x08007e59
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007e59 	.word	0x08007e59
 8007ec0:	08007e59 	.word	0x08007e59
 8007ec4:	08007fd3 	.word	0x08007fd3
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	1d1a      	adds	r2, r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	602a      	str	r2, [r5, #0]
 8007ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0a3      	b.n	8008024 <_printf_i+0x1f4>
 8007edc:	6820      	ldr	r0, [r4, #0]
 8007ede:	6829      	ldr	r1, [r5, #0]
 8007ee0:	0606      	lsls	r6, r0, #24
 8007ee2:	f101 0304 	add.w	r3, r1, #4
 8007ee6:	d50a      	bpl.n	8007efe <_printf_i+0xce>
 8007ee8:	680e      	ldr	r6, [r1, #0]
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	da03      	bge.n	8007ef8 <_printf_i+0xc8>
 8007ef0:	232d      	movs	r3, #45	; 0x2d
 8007ef2:	4276      	negs	r6, r6
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ef8:	485e      	ldr	r0, [pc, #376]	; (8008074 <_printf_i+0x244>)
 8007efa:	230a      	movs	r3, #10
 8007efc:	e019      	b.n	8007f32 <_printf_i+0x102>
 8007efe:	680e      	ldr	r6, [r1, #0]
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f06:	bf18      	it	ne
 8007f08:	b236      	sxthne	r6, r6
 8007f0a:	e7ef      	b.n	8007eec <_printf_i+0xbc>
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	1d19      	adds	r1, r3, #4
 8007f12:	6029      	str	r1, [r5, #0]
 8007f14:	0601      	lsls	r1, r0, #24
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0xec>
 8007f18:	681e      	ldr	r6, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0xf2>
 8007f1c:	0646      	lsls	r6, r0, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0xe8>
 8007f20:	881e      	ldrh	r6, [r3, #0]
 8007f22:	4854      	ldr	r0, [pc, #336]	; (8008074 <_printf_i+0x244>)
 8007f24:	2f6f      	cmp	r7, #111	; 0x6f
 8007f26:	bf0c      	ite	eq
 8007f28:	2308      	moveq	r3, #8
 8007f2a:	230a      	movne	r3, #10
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f32:	6865      	ldr	r5, [r4, #4]
 8007f34:	60a5      	str	r5, [r4, #8]
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	bfa2      	ittt	ge
 8007f3a:	6821      	ldrge	r1, [r4, #0]
 8007f3c:	f021 0104 	bicge.w	r1, r1, #4
 8007f40:	6021      	strge	r1, [r4, #0]
 8007f42:	b90e      	cbnz	r6, 8007f48 <_printf_i+0x118>
 8007f44:	2d00      	cmp	r5, #0
 8007f46:	d04d      	beq.n	8007fe4 <_printf_i+0x1b4>
 8007f48:	4615      	mov	r5, r2
 8007f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007f52:	5dc7      	ldrb	r7, [r0, r7]
 8007f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f58:	4637      	mov	r7, r6
 8007f5a:	42bb      	cmp	r3, r7
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	d9f4      	bls.n	8007f4a <_printf_i+0x11a>
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d10b      	bne.n	8007f7c <_printf_i+0x14c>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	07de      	lsls	r6, r3, #31
 8007f68:	d508      	bpl.n	8007f7c <_printf_i+0x14c>
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	4299      	cmp	r1, r3
 8007f70:	bfde      	ittt	le
 8007f72:	2330      	movle	r3, #48	; 0x30
 8007f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f7c:	1b52      	subs	r2, r2, r5
 8007f7e:	6122      	str	r2, [r4, #16]
 8007f80:	f8cd a000 	str.w	sl, [sp]
 8007f84:	464b      	mov	r3, r9
 8007f86:	aa03      	add	r2, sp, #12
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4640      	mov	r0, r8
 8007f8c:	f7ff fee2 	bl	8007d54 <_printf_common>
 8007f90:	3001      	adds	r0, #1
 8007f92:	d14c      	bne.n	800802e <_printf_i+0x1fe>
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	b004      	add	sp, #16
 8007f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9e:	4835      	ldr	r0, [pc, #212]	; (8008074 <_printf_i+0x244>)
 8007fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fa4:	6829      	ldr	r1, [r5, #0]
 8007fa6:	6823      	ldr	r3, [r4, #0]
 8007fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fac:	6029      	str	r1, [r5, #0]
 8007fae:	061d      	lsls	r5, r3, #24
 8007fb0:	d514      	bpl.n	8007fdc <_printf_i+0x1ac>
 8007fb2:	07df      	lsls	r7, r3, #31
 8007fb4:	bf44      	itt	mi
 8007fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fba:	6023      	strmi	r3, [r4, #0]
 8007fbc:	b91e      	cbnz	r6, 8007fc6 <_printf_i+0x196>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	f023 0320 	bic.w	r3, r3, #32
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	e7b0      	b.n	8007f2c <_printf_i+0xfc>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f043 0320 	orr.w	r3, r3, #32
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	2378      	movs	r3, #120	; 0x78
 8007fd4:	4828      	ldr	r0, [pc, #160]	; (8008078 <_printf_i+0x248>)
 8007fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fda:	e7e3      	b.n	8007fa4 <_printf_i+0x174>
 8007fdc:	0659      	lsls	r1, r3, #25
 8007fde:	bf48      	it	mi
 8007fe0:	b2b6      	uxthmi	r6, r6
 8007fe2:	e7e6      	b.n	8007fb2 <_printf_i+0x182>
 8007fe4:	4615      	mov	r5, r2
 8007fe6:	e7bb      	b.n	8007f60 <_printf_i+0x130>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	6826      	ldr	r6, [r4, #0]
 8007fec:	6961      	ldr	r1, [r4, #20]
 8007fee:	1d18      	adds	r0, r3, #4
 8007ff0:	6028      	str	r0, [r5, #0]
 8007ff2:	0635      	lsls	r5, r6, #24
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	d501      	bpl.n	8007ffc <_printf_i+0x1cc>
 8007ff8:	6019      	str	r1, [r3, #0]
 8007ffa:	e002      	b.n	8008002 <_printf_i+0x1d2>
 8007ffc:	0670      	lsls	r0, r6, #25
 8007ffe:	d5fb      	bpl.n	8007ff8 <_printf_i+0x1c8>
 8008000:	8019      	strh	r1, [r3, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	6123      	str	r3, [r4, #16]
 8008006:	4615      	mov	r5, r2
 8008008:	e7ba      	b.n	8007f80 <_printf_i+0x150>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	1d1a      	adds	r2, r3, #4
 800800e:	602a      	str	r2, [r5, #0]
 8008010:	681d      	ldr	r5, [r3, #0]
 8008012:	6862      	ldr	r2, [r4, #4]
 8008014:	2100      	movs	r1, #0
 8008016:	4628      	mov	r0, r5
 8008018:	f7f8 fa4a 	bl	80004b0 <memchr>
 800801c:	b108      	cbz	r0, 8008022 <_printf_i+0x1f2>
 800801e:	1b40      	subs	r0, r0, r5
 8008020:	6060      	str	r0, [r4, #4]
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	2300      	movs	r3, #0
 8008028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800802c:	e7a8      	b.n	8007f80 <_printf_i+0x150>
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	462a      	mov	r2, r5
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	47d0      	blx	sl
 8008038:	3001      	adds	r0, #1
 800803a:	d0ab      	beq.n	8007f94 <_printf_i+0x164>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	079b      	lsls	r3, r3, #30
 8008040:	d413      	bmi.n	800806a <_printf_i+0x23a>
 8008042:	68e0      	ldr	r0, [r4, #12]
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	4298      	cmp	r0, r3
 8008048:	bfb8      	it	lt
 800804a:	4618      	movlt	r0, r3
 800804c:	e7a4      	b.n	8007f98 <_printf_i+0x168>
 800804e:	2301      	movs	r3, #1
 8008050:	4632      	mov	r2, r6
 8008052:	4649      	mov	r1, r9
 8008054:	4640      	mov	r0, r8
 8008056:	47d0      	blx	sl
 8008058:	3001      	adds	r0, #1
 800805a:	d09b      	beq.n	8007f94 <_printf_i+0x164>
 800805c:	3501      	adds	r5, #1
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	9903      	ldr	r1, [sp, #12]
 8008062:	1a5b      	subs	r3, r3, r1
 8008064:	42ab      	cmp	r3, r5
 8008066:	dcf2      	bgt.n	800804e <_printf_i+0x21e>
 8008068:	e7eb      	b.n	8008042 <_printf_i+0x212>
 800806a:	2500      	movs	r5, #0
 800806c:	f104 0619 	add.w	r6, r4, #25
 8008070:	e7f5      	b.n	800805e <_printf_i+0x22e>
 8008072:	bf00      	nop
 8008074:	0800c09e 	.word	0x0800c09e
 8008078:	0800c0af 	.word	0x0800c0af

0800807c <strcpy>:
 800807c:	4603      	mov	r3, r0
 800807e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008082:	f803 2b01 	strb.w	r2, [r3], #1
 8008086:	2a00      	cmp	r2, #0
 8008088:	d1f9      	bne.n	800807e <strcpy+0x2>
 800808a:	4770      	bx	lr

0800808c <sulp>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	ec45 4b10 	vmov	d0, r4, r5
 8008096:	4616      	mov	r6, r2
 8008098:	f002 fca8 	bl	800a9ec <__ulp>
 800809c:	ec51 0b10 	vmov	r0, r1, d0
 80080a0:	b17e      	cbz	r6, 80080c2 <sulp+0x36>
 80080a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	dd09      	ble.n	80080c2 <sulp+0x36>
 80080ae:	051b      	lsls	r3, r3, #20
 80080b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080b4:	2400      	movs	r4, #0
 80080b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	f7f8 fc03 	bl	80008c8 <__aeabi_dmul>
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	0000      	movs	r0, r0
	...

080080c8 <_strtod_l>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	ed2d 8b02 	vpush	{d8}
 80080d0:	b09d      	sub	sp, #116	; 0x74
 80080d2:	461f      	mov	r7, r3
 80080d4:	2300      	movs	r3, #0
 80080d6:	9318      	str	r3, [sp, #96]	; 0x60
 80080d8:	4ba2      	ldr	r3, [pc, #648]	; (8008364 <_strtod_l+0x29c>)
 80080da:	9213      	str	r2, [sp, #76]	; 0x4c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9305      	str	r3, [sp, #20]
 80080e0:	4604      	mov	r4, r0
 80080e2:	4618      	mov	r0, r3
 80080e4:	4688      	mov	r8, r1
 80080e6:	f7f8 f9d5 	bl	8000494 <strlen>
 80080ea:	f04f 0a00 	mov.w	sl, #0
 80080ee:	4605      	mov	r5, r0
 80080f0:	f04f 0b00 	mov.w	fp, #0
 80080f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80080f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	2a2b      	cmp	r2, #43	; 0x2b
 80080fe:	d04e      	beq.n	800819e <_strtod_l+0xd6>
 8008100:	d83b      	bhi.n	800817a <_strtod_l+0xb2>
 8008102:	2a0d      	cmp	r2, #13
 8008104:	d834      	bhi.n	8008170 <_strtod_l+0xa8>
 8008106:	2a08      	cmp	r2, #8
 8008108:	d834      	bhi.n	8008174 <_strtod_l+0xac>
 800810a:	2a00      	cmp	r2, #0
 800810c:	d03e      	beq.n	800818c <_strtod_l+0xc4>
 800810e:	2300      	movs	r3, #0
 8008110:	930a      	str	r3, [sp, #40]	; 0x28
 8008112:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008114:	7833      	ldrb	r3, [r6, #0]
 8008116:	2b30      	cmp	r3, #48	; 0x30
 8008118:	f040 80b0 	bne.w	800827c <_strtod_l+0x1b4>
 800811c:	7873      	ldrb	r3, [r6, #1]
 800811e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008122:	2b58      	cmp	r3, #88	; 0x58
 8008124:	d168      	bne.n	80081f8 <_strtod_l+0x130>
 8008126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	ab18      	add	r3, sp, #96	; 0x60
 800812c:	9702      	str	r7, [sp, #8]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4a8d      	ldr	r2, [pc, #564]	; (8008368 <_strtod_l+0x2a0>)
 8008132:	ab19      	add	r3, sp, #100	; 0x64
 8008134:	a917      	add	r1, sp, #92	; 0x5c
 8008136:	4620      	mov	r0, r4
 8008138:	f001 fdc0 	bl	8009cbc <__gethex>
 800813c:	f010 0707 	ands.w	r7, r0, #7
 8008140:	4605      	mov	r5, r0
 8008142:	d005      	beq.n	8008150 <_strtod_l+0x88>
 8008144:	2f06      	cmp	r7, #6
 8008146:	d12c      	bne.n	80081a2 <_strtod_l+0xda>
 8008148:	3601      	adds	r6, #1
 800814a:	2300      	movs	r3, #0
 800814c:	9617      	str	r6, [sp, #92]	; 0x5c
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008152:	2b00      	cmp	r3, #0
 8008154:	f040 8590 	bne.w	8008c78 <_strtod_l+0xbb0>
 8008158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800815a:	b1eb      	cbz	r3, 8008198 <_strtod_l+0xd0>
 800815c:	4652      	mov	r2, sl
 800815e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008162:	ec43 2b10 	vmov	d0, r2, r3
 8008166:	b01d      	add	sp, #116	; 0x74
 8008168:	ecbd 8b02 	vpop	{d8}
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	2a20      	cmp	r2, #32
 8008172:	d1cc      	bne.n	800810e <_strtod_l+0x46>
 8008174:	3301      	adds	r3, #1
 8008176:	9317      	str	r3, [sp, #92]	; 0x5c
 8008178:	e7be      	b.n	80080f8 <_strtod_l+0x30>
 800817a:	2a2d      	cmp	r2, #45	; 0x2d
 800817c:	d1c7      	bne.n	800810e <_strtod_l+0x46>
 800817e:	2201      	movs	r2, #1
 8008180:	920a      	str	r2, [sp, #40]	; 0x28
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	9217      	str	r2, [sp, #92]	; 0x5c
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1c2      	bne.n	8008112 <_strtod_l+0x4a>
 800818c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800818e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008192:	2b00      	cmp	r3, #0
 8008194:	f040 856e 	bne.w	8008c74 <_strtod_l+0xbac>
 8008198:	4652      	mov	r2, sl
 800819a:	465b      	mov	r3, fp
 800819c:	e7e1      	b.n	8008162 <_strtod_l+0x9a>
 800819e:	2200      	movs	r2, #0
 80081a0:	e7ee      	b.n	8008180 <_strtod_l+0xb8>
 80081a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081a4:	b13a      	cbz	r2, 80081b6 <_strtod_l+0xee>
 80081a6:	2135      	movs	r1, #53	; 0x35
 80081a8:	a81a      	add	r0, sp, #104	; 0x68
 80081aa:	f002 fd2a 	bl	800ac02 <__copybits>
 80081ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081b0:	4620      	mov	r0, r4
 80081b2:	f002 f8e9 	bl	800a388 <_Bfree>
 80081b6:	3f01      	subs	r7, #1
 80081b8:	2f04      	cmp	r7, #4
 80081ba:	d806      	bhi.n	80081ca <_strtod_l+0x102>
 80081bc:	e8df f007 	tbb	[pc, r7]
 80081c0:	1714030a 	.word	0x1714030a
 80081c4:	0a          	.byte	0x0a
 80081c5:	00          	.byte	0x00
 80081c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80081ca:	0728      	lsls	r0, r5, #28
 80081cc:	d5c0      	bpl.n	8008150 <_strtod_l+0x88>
 80081ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081d2:	e7bd      	b.n	8008150 <_strtod_l+0x88>
 80081d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80081d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80081da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80081de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80081e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081e6:	e7f0      	b.n	80081ca <_strtod_l+0x102>
 80081e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800836c <_strtod_l+0x2a4>
 80081ec:	e7ed      	b.n	80081ca <_strtod_l+0x102>
 80081ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80081f2:	f04f 3aff 	mov.w	sl, #4294967295
 80081f6:	e7e8      	b.n	80081ca <_strtod_l+0x102>
 80081f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b30      	cmp	r3, #48	; 0x30
 8008202:	d0f9      	beq.n	80081f8 <_strtod_l+0x130>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0a3      	beq.n	8008150 <_strtod_l+0x88>
 8008208:	2301      	movs	r3, #1
 800820a:	f04f 0900 	mov.w	r9, #0
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008212:	9308      	str	r3, [sp, #32]
 8008214:	f8cd 901c 	str.w	r9, [sp, #28]
 8008218:	464f      	mov	r7, r9
 800821a:	220a      	movs	r2, #10
 800821c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800821e:	7806      	ldrb	r6, [r0, #0]
 8008220:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008224:	b2d9      	uxtb	r1, r3
 8008226:	2909      	cmp	r1, #9
 8008228:	d92a      	bls.n	8008280 <_strtod_l+0x1b8>
 800822a:	9905      	ldr	r1, [sp, #20]
 800822c:	462a      	mov	r2, r5
 800822e:	f002 ff9d 	bl	800b16c <strncmp>
 8008232:	b398      	cbz	r0, 800829c <_strtod_l+0x1d4>
 8008234:	2000      	movs	r0, #0
 8008236:	4632      	mov	r2, r6
 8008238:	463d      	mov	r5, r7
 800823a:	9005      	str	r0, [sp, #20]
 800823c:	4603      	mov	r3, r0
 800823e:	2a65      	cmp	r2, #101	; 0x65
 8008240:	d001      	beq.n	8008246 <_strtod_l+0x17e>
 8008242:	2a45      	cmp	r2, #69	; 0x45
 8008244:	d118      	bne.n	8008278 <_strtod_l+0x1b0>
 8008246:	b91d      	cbnz	r5, 8008250 <_strtod_l+0x188>
 8008248:	9a04      	ldr	r2, [sp, #16]
 800824a:	4302      	orrs	r2, r0
 800824c:	d09e      	beq.n	800818c <_strtod_l+0xc4>
 800824e:	2500      	movs	r5, #0
 8008250:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008254:	f108 0201 	add.w	r2, r8, #1
 8008258:	9217      	str	r2, [sp, #92]	; 0x5c
 800825a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800825e:	2a2b      	cmp	r2, #43	; 0x2b
 8008260:	d075      	beq.n	800834e <_strtod_l+0x286>
 8008262:	2a2d      	cmp	r2, #45	; 0x2d
 8008264:	d07b      	beq.n	800835e <_strtod_l+0x296>
 8008266:	f04f 0c00 	mov.w	ip, #0
 800826a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800826e:	2909      	cmp	r1, #9
 8008270:	f240 8082 	bls.w	8008378 <_strtod_l+0x2b0>
 8008274:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008278:	2600      	movs	r6, #0
 800827a:	e09d      	b.n	80083b8 <_strtod_l+0x2f0>
 800827c:	2300      	movs	r3, #0
 800827e:	e7c4      	b.n	800820a <_strtod_l+0x142>
 8008280:	2f08      	cmp	r7, #8
 8008282:	bfd8      	it	le
 8008284:	9907      	ldrle	r1, [sp, #28]
 8008286:	f100 0001 	add.w	r0, r0, #1
 800828a:	bfda      	itte	le
 800828c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008290:	9307      	strle	r3, [sp, #28]
 8008292:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008296:	3701      	adds	r7, #1
 8008298:	9017      	str	r0, [sp, #92]	; 0x5c
 800829a:	e7bf      	b.n	800821c <_strtod_l+0x154>
 800829c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800829e:	195a      	adds	r2, r3, r5
 80082a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80082a2:	5d5a      	ldrb	r2, [r3, r5]
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	d037      	beq.n	8008318 <_strtod_l+0x250>
 80082a8:	9005      	str	r0, [sp, #20]
 80082aa:	463d      	mov	r5, r7
 80082ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80082b0:	2b09      	cmp	r3, #9
 80082b2:	d912      	bls.n	80082da <_strtod_l+0x212>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e7c2      	b.n	800823e <_strtod_l+0x176>
 80082b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80082be:	785a      	ldrb	r2, [r3, #1]
 80082c0:	3001      	adds	r0, #1
 80082c2:	2a30      	cmp	r2, #48	; 0x30
 80082c4:	d0f8      	beq.n	80082b8 <_strtod_l+0x1f0>
 80082c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	f200 84d9 	bhi.w	8008c82 <_strtod_l+0xbba>
 80082d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082d2:	9005      	str	r0, [sp, #20]
 80082d4:	2000      	movs	r0, #0
 80082d6:	9308      	str	r3, [sp, #32]
 80082d8:	4605      	mov	r5, r0
 80082da:	3a30      	subs	r2, #48	; 0x30
 80082dc:	f100 0301 	add.w	r3, r0, #1
 80082e0:	d014      	beq.n	800830c <_strtod_l+0x244>
 80082e2:	9905      	ldr	r1, [sp, #20]
 80082e4:	4419      	add	r1, r3
 80082e6:	9105      	str	r1, [sp, #20]
 80082e8:	462b      	mov	r3, r5
 80082ea:	eb00 0e05 	add.w	lr, r0, r5
 80082ee:	210a      	movs	r1, #10
 80082f0:	4573      	cmp	r3, lr
 80082f2:	d113      	bne.n	800831c <_strtod_l+0x254>
 80082f4:	182b      	adds	r3, r5, r0
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	f105 0501 	add.w	r5, r5, #1
 80082fc:	4405      	add	r5, r0
 80082fe:	dc1c      	bgt.n	800833a <_strtod_l+0x272>
 8008300:	9907      	ldr	r1, [sp, #28]
 8008302:	230a      	movs	r3, #10
 8008304:	fb03 2301 	mla	r3, r3, r1, r2
 8008308:	9307      	str	r3, [sp, #28]
 800830a:	2300      	movs	r3, #0
 800830c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800830e:	1c51      	adds	r1, r2, #1
 8008310:	9117      	str	r1, [sp, #92]	; 0x5c
 8008312:	7852      	ldrb	r2, [r2, #1]
 8008314:	4618      	mov	r0, r3
 8008316:	e7c9      	b.n	80082ac <_strtod_l+0x1e4>
 8008318:	4638      	mov	r0, r7
 800831a:	e7d2      	b.n	80082c2 <_strtod_l+0x1fa>
 800831c:	2b08      	cmp	r3, #8
 800831e:	dc04      	bgt.n	800832a <_strtod_l+0x262>
 8008320:	9e07      	ldr	r6, [sp, #28]
 8008322:	434e      	muls	r6, r1
 8008324:	9607      	str	r6, [sp, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	e7e2      	b.n	80082f0 <_strtod_l+0x228>
 800832a:	f103 0c01 	add.w	ip, r3, #1
 800832e:	f1bc 0f10 	cmp.w	ip, #16
 8008332:	bfd8      	it	le
 8008334:	fb01 f909 	mulle.w	r9, r1, r9
 8008338:	e7f5      	b.n	8008326 <_strtod_l+0x25e>
 800833a:	2d10      	cmp	r5, #16
 800833c:	bfdc      	itt	le
 800833e:	230a      	movle	r3, #10
 8008340:	fb03 2909 	mlale	r9, r3, r9, r2
 8008344:	e7e1      	b.n	800830a <_strtod_l+0x242>
 8008346:	2300      	movs	r3, #0
 8008348:	9305      	str	r3, [sp, #20]
 800834a:	2301      	movs	r3, #1
 800834c:	e77c      	b.n	8008248 <_strtod_l+0x180>
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	f108 0202 	add.w	r2, r8, #2
 8008356:	9217      	str	r2, [sp, #92]	; 0x5c
 8008358:	f898 2002 	ldrb.w	r2, [r8, #2]
 800835c:	e785      	b.n	800826a <_strtod_l+0x1a2>
 800835e:	f04f 0c01 	mov.w	ip, #1
 8008362:	e7f6      	b.n	8008352 <_strtod_l+0x28a>
 8008364:	0800c308 	.word	0x0800c308
 8008368:	0800c0c0 	.word	0x0800c0c0
 800836c:	7ff00000 	.word	0x7ff00000
 8008370:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008372:	1c51      	adds	r1, r2, #1
 8008374:	9117      	str	r1, [sp, #92]	; 0x5c
 8008376:	7852      	ldrb	r2, [r2, #1]
 8008378:	2a30      	cmp	r2, #48	; 0x30
 800837a:	d0f9      	beq.n	8008370 <_strtod_l+0x2a8>
 800837c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008380:	2908      	cmp	r1, #8
 8008382:	f63f af79 	bhi.w	8008278 <_strtod_l+0x1b0>
 8008386:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800838a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800838c:	9206      	str	r2, [sp, #24]
 800838e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008390:	1c51      	adds	r1, r2, #1
 8008392:	9117      	str	r1, [sp, #92]	; 0x5c
 8008394:	7852      	ldrb	r2, [r2, #1]
 8008396:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800839a:	2e09      	cmp	r6, #9
 800839c:	d937      	bls.n	800840e <_strtod_l+0x346>
 800839e:	9e06      	ldr	r6, [sp, #24]
 80083a0:	1b89      	subs	r1, r1, r6
 80083a2:	2908      	cmp	r1, #8
 80083a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80083a8:	dc02      	bgt.n	80083b0 <_strtod_l+0x2e8>
 80083aa:	4576      	cmp	r6, lr
 80083ac:	bfa8      	it	ge
 80083ae:	4676      	movge	r6, lr
 80083b0:	f1bc 0f00 	cmp.w	ip, #0
 80083b4:	d000      	beq.n	80083b8 <_strtod_l+0x2f0>
 80083b6:	4276      	negs	r6, r6
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	d14d      	bne.n	8008458 <_strtod_l+0x390>
 80083bc:	9904      	ldr	r1, [sp, #16]
 80083be:	4301      	orrs	r1, r0
 80083c0:	f47f aec6 	bne.w	8008150 <_strtod_l+0x88>
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f47f aee1 	bne.w	800818c <_strtod_l+0xc4>
 80083ca:	2a69      	cmp	r2, #105	; 0x69
 80083cc:	d027      	beq.n	800841e <_strtod_l+0x356>
 80083ce:	dc24      	bgt.n	800841a <_strtod_l+0x352>
 80083d0:	2a49      	cmp	r2, #73	; 0x49
 80083d2:	d024      	beq.n	800841e <_strtod_l+0x356>
 80083d4:	2a4e      	cmp	r2, #78	; 0x4e
 80083d6:	f47f aed9 	bne.w	800818c <_strtod_l+0xc4>
 80083da:	499f      	ldr	r1, [pc, #636]	; (8008658 <_strtod_l+0x590>)
 80083dc:	a817      	add	r0, sp, #92	; 0x5c
 80083de:	f001 fec5 	bl	800a16c <__match>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f43f aed2 	beq.w	800818c <_strtod_l+0xc4>
 80083e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b28      	cmp	r3, #40	; 0x28
 80083ee:	d12d      	bne.n	800844c <_strtod_l+0x384>
 80083f0:	499a      	ldr	r1, [pc, #616]	; (800865c <_strtod_l+0x594>)
 80083f2:	aa1a      	add	r2, sp, #104	; 0x68
 80083f4:	a817      	add	r0, sp, #92	; 0x5c
 80083f6:	f001 fecd 	bl	800a194 <__hexnan>
 80083fa:	2805      	cmp	r0, #5
 80083fc:	d126      	bne.n	800844c <_strtod_l+0x384>
 80083fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008400:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008404:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008408:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800840c:	e6a0      	b.n	8008150 <_strtod_l+0x88>
 800840e:	210a      	movs	r1, #10
 8008410:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008414:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008418:	e7b9      	b.n	800838e <_strtod_l+0x2c6>
 800841a:	2a6e      	cmp	r2, #110	; 0x6e
 800841c:	e7db      	b.n	80083d6 <_strtod_l+0x30e>
 800841e:	4990      	ldr	r1, [pc, #576]	; (8008660 <_strtod_l+0x598>)
 8008420:	a817      	add	r0, sp, #92	; 0x5c
 8008422:	f001 fea3 	bl	800a16c <__match>
 8008426:	2800      	cmp	r0, #0
 8008428:	f43f aeb0 	beq.w	800818c <_strtod_l+0xc4>
 800842c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800842e:	498d      	ldr	r1, [pc, #564]	; (8008664 <_strtod_l+0x59c>)
 8008430:	3b01      	subs	r3, #1
 8008432:	a817      	add	r0, sp, #92	; 0x5c
 8008434:	9317      	str	r3, [sp, #92]	; 0x5c
 8008436:	f001 fe99 	bl	800a16c <__match>
 800843a:	b910      	cbnz	r0, 8008442 <_strtod_l+0x37a>
 800843c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800843e:	3301      	adds	r3, #1
 8008440:	9317      	str	r3, [sp, #92]	; 0x5c
 8008442:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008674 <_strtod_l+0x5ac>
 8008446:	f04f 0a00 	mov.w	sl, #0
 800844a:	e681      	b.n	8008150 <_strtod_l+0x88>
 800844c:	4886      	ldr	r0, [pc, #536]	; (8008668 <_strtod_l+0x5a0>)
 800844e:	f002 fe6f 	bl	800b130 <nan>
 8008452:	ec5b ab10 	vmov	sl, fp, d0
 8008456:	e67b      	b.n	8008150 <_strtod_l+0x88>
 8008458:	9b05      	ldr	r3, [sp, #20]
 800845a:	9807      	ldr	r0, [sp, #28]
 800845c:	1af3      	subs	r3, r6, r3
 800845e:	2f00      	cmp	r7, #0
 8008460:	bf08      	it	eq
 8008462:	462f      	moveq	r7, r5
 8008464:	2d10      	cmp	r5, #16
 8008466:	9306      	str	r3, [sp, #24]
 8008468:	46a8      	mov	r8, r5
 800846a:	bfa8      	it	ge
 800846c:	f04f 0810 	movge.w	r8, #16
 8008470:	f7f8 f9b0 	bl	80007d4 <__aeabi_ui2d>
 8008474:	2d09      	cmp	r5, #9
 8008476:	4682      	mov	sl, r0
 8008478:	468b      	mov	fp, r1
 800847a:	dd13      	ble.n	80084a4 <_strtod_l+0x3dc>
 800847c:	4b7b      	ldr	r3, [pc, #492]	; (800866c <_strtod_l+0x5a4>)
 800847e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008482:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008486:	f7f8 fa1f 	bl	80008c8 <__aeabi_dmul>
 800848a:	4682      	mov	sl, r0
 800848c:	4648      	mov	r0, r9
 800848e:	468b      	mov	fp, r1
 8008490:	f7f8 f9a0 	bl	80007d4 <__aeabi_ui2d>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4650      	mov	r0, sl
 800849a:	4659      	mov	r1, fp
 800849c:	f7f8 f85e 	bl	800055c <__adddf3>
 80084a0:	4682      	mov	sl, r0
 80084a2:	468b      	mov	fp, r1
 80084a4:	2d0f      	cmp	r5, #15
 80084a6:	dc38      	bgt.n	800851a <_strtod_l+0x452>
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f43f ae50 	beq.w	8008150 <_strtod_l+0x88>
 80084b0:	dd24      	ble.n	80084fc <_strtod_l+0x434>
 80084b2:	2b16      	cmp	r3, #22
 80084b4:	dc0b      	bgt.n	80084ce <_strtod_l+0x406>
 80084b6:	496d      	ldr	r1, [pc, #436]	; (800866c <_strtod_l+0x5a4>)
 80084b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c0:	4652      	mov	r2, sl
 80084c2:	465b      	mov	r3, fp
 80084c4:	f7f8 fa00 	bl	80008c8 <__aeabi_dmul>
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	e640      	b.n	8008150 <_strtod_l+0x88>
 80084ce:	9a06      	ldr	r2, [sp, #24]
 80084d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80084d4:	4293      	cmp	r3, r2
 80084d6:	db20      	blt.n	800851a <_strtod_l+0x452>
 80084d8:	4c64      	ldr	r4, [pc, #400]	; (800866c <_strtod_l+0x5a4>)
 80084da:	f1c5 050f 	rsb	r5, r5, #15
 80084de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80084e2:	4652      	mov	r2, sl
 80084e4:	465b      	mov	r3, fp
 80084e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ea:	f7f8 f9ed 	bl	80008c8 <__aeabi_dmul>
 80084ee:	9b06      	ldr	r3, [sp, #24]
 80084f0:	1b5d      	subs	r5, r3, r5
 80084f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80084f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80084fa:	e7e3      	b.n	80084c4 <_strtod_l+0x3fc>
 80084fc:	9b06      	ldr	r3, [sp, #24]
 80084fe:	3316      	adds	r3, #22
 8008500:	db0b      	blt.n	800851a <_strtod_l+0x452>
 8008502:	9b05      	ldr	r3, [sp, #20]
 8008504:	1b9e      	subs	r6, r3, r6
 8008506:	4b59      	ldr	r3, [pc, #356]	; (800866c <_strtod_l+0x5a4>)
 8008508:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800850c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	f7f8 fb02 	bl	8000b1c <__aeabi_ddiv>
 8008518:	e7d6      	b.n	80084c8 <_strtod_l+0x400>
 800851a:	9b06      	ldr	r3, [sp, #24]
 800851c:	eba5 0808 	sub.w	r8, r5, r8
 8008520:	4498      	add	r8, r3
 8008522:	f1b8 0f00 	cmp.w	r8, #0
 8008526:	dd74      	ble.n	8008612 <_strtod_l+0x54a>
 8008528:	f018 030f 	ands.w	r3, r8, #15
 800852c:	d00a      	beq.n	8008544 <_strtod_l+0x47c>
 800852e:	494f      	ldr	r1, [pc, #316]	; (800866c <_strtod_l+0x5a4>)
 8008530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008534:	4652      	mov	r2, sl
 8008536:	465b      	mov	r3, fp
 8008538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800853c:	f7f8 f9c4 	bl	80008c8 <__aeabi_dmul>
 8008540:	4682      	mov	sl, r0
 8008542:	468b      	mov	fp, r1
 8008544:	f038 080f 	bics.w	r8, r8, #15
 8008548:	d04f      	beq.n	80085ea <_strtod_l+0x522>
 800854a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800854e:	dd22      	ble.n	8008596 <_strtod_l+0x4ce>
 8008550:	2500      	movs	r5, #0
 8008552:	462e      	mov	r6, r5
 8008554:	9507      	str	r5, [sp, #28]
 8008556:	9505      	str	r5, [sp, #20]
 8008558:	2322      	movs	r3, #34	; 0x22
 800855a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008674 <_strtod_l+0x5ac>
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	f04f 0a00 	mov.w	sl, #0
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f43f adf2 	beq.w	8008150 <_strtod_l+0x88>
 800856c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800856e:	4620      	mov	r0, r4
 8008570:	f001 ff0a 	bl	800a388 <_Bfree>
 8008574:	9905      	ldr	r1, [sp, #20]
 8008576:	4620      	mov	r0, r4
 8008578:	f001 ff06 	bl	800a388 <_Bfree>
 800857c:	4631      	mov	r1, r6
 800857e:	4620      	mov	r0, r4
 8008580:	f001 ff02 	bl	800a388 <_Bfree>
 8008584:	9907      	ldr	r1, [sp, #28]
 8008586:	4620      	mov	r0, r4
 8008588:	f001 fefe 	bl	800a388 <_Bfree>
 800858c:	4629      	mov	r1, r5
 800858e:	4620      	mov	r0, r4
 8008590:	f001 fefa 	bl	800a388 <_Bfree>
 8008594:	e5dc      	b.n	8008150 <_strtod_l+0x88>
 8008596:	4b36      	ldr	r3, [pc, #216]	; (8008670 <_strtod_l+0x5a8>)
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	2300      	movs	r3, #0
 800859c:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085a0:	4650      	mov	r0, sl
 80085a2:	4659      	mov	r1, fp
 80085a4:	4699      	mov	r9, r3
 80085a6:	f1b8 0f01 	cmp.w	r8, #1
 80085aa:	dc21      	bgt.n	80085f0 <_strtod_l+0x528>
 80085ac:	b10b      	cbz	r3, 80085b2 <_strtod_l+0x4ea>
 80085ae:	4682      	mov	sl, r0
 80085b0:	468b      	mov	fp, r1
 80085b2:	4b2f      	ldr	r3, [pc, #188]	; (8008670 <_strtod_l+0x5a8>)
 80085b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80085bc:	4652      	mov	r2, sl
 80085be:	465b      	mov	r3, fp
 80085c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80085c4:	f7f8 f980 	bl	80008c8 <__aeabi_dmul>
 80085c8:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <_strtod_l+0x5ac>)
 80085ca:	460a      	mov	r2, r1
 80085cc:	400b      	ands	r3, r1
 80085ce:	492a      	ldr	r1, [pc, #168]	; (8008678 <_strtod_l+0x5b0>)
 80085d0:	428b      	cmp	r3, r1
 80085d2:	4682      	mov	sl, r0
 80085d4:	d8bc      	bhi.n	8008550 <_strtod_l+0x488>
 80085d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80085da:	428b      	cmp	r3, r1
 80085dc:	bf86      	itte	hi
 80085de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800867c <_strtod_l+0x5b4>
 80085e2:	f04f 3aff 	movhi.w	sl, #4294967295
 80085e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80085ea:	2300      	movs	r3, #0
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	e084      	b.n	80086fa <_strtod_l+0x632>
 80085f0:	f018 0f01 	tst.w	r8, #1
 80085f4:	d005      	beq.n	8008602 <_strtod_l+0x53a>
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f8 f964 	bl	80008c8 <__aeabi_dmul>
 8008600:	2301      	movs	r3, #1
 8008602:	9a04      	ldr	r2, [sp, #16]
 8008604:	3208      	adds	r2, #8
 8008606:	f109 0901 	add.w	r9, r9, #1
 800860a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800860e:	9204      	str	r2, [sp, #16]
 8008610:	e7c9      	b.n	80085a6 <_strtod_l+0x4de>
 8008612:	d0ea      	beq.n	80085ea <_strtod_l+0x522>
 8008614:	f1c8 0800 	rsb	r8, r8, #0
 8008618:	f018 020f 	ands.w	r2, r8, #15
 800861c:	d00a      	beq.n	8008634 <_strtod_l+0x56c>
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <_strtod_l+0x5a4>)
 8008620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f8 fa76 	bl	8000b1c <__aeabi_ddiv>
 8008630:	4682      	mov	sl, r0
 8008632:	468b      	mov	fp, r1
 8008634:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008638:	d0d7      	beq.n	80085ea <_strtod_l+0x522>
 800863a:	f1b8 0f1f 	cmp.w	r8, #31
 800863e:	dd1f      	ble.n	8008680 <_strtod_l+0x5b8>
 8008640:	2500      	movs	r5, #0
 8008642:	462e      	mov	r6, r5
 8008644:	9507      	str	r5, [sp, #28]
 8008646:	9505      	str	r5, [sp, #20]
 8008648:	2322      	movs	r3, #34	; 0x22
 800864a:	f04f 0a00 	mov.w	sl, #0
 800864e:	f04f 0b00 	mov.w	fp, #0
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	e786      	b.n	8008564 <_strtod_l+0x49c>
 8008656:	bf00      	nop
 8008658:	0800c099 	.word	0x0800c099
 800865c:	0800c0d4 	.word	0x0800c0d4
 8008660:	0800c091 	.word	0x0800c091
 8008664:	0800c214 	.word	0x0800c214
 8008668:	0800c4c0 	.word	0x0800c4c0
 800866c:	0800c3a0 	.word	0x0800c3a0
 8008670:	0800c378 	.word	0x0800c378
 8008674:	7ff00000 	.word	0x7ff00000
 8008678:	7ca00000 	.word	0x7ca00000
 800867c:	7fefffff 	.word	0x7fefffff
 8008680:	f018 0310 	ands.w	r3, r8, #16
 8008684:	bf18      	it	ne
 8008686:	236a      	movne	r3, #106	; 0x6a
 8008688:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008a38 <_strtod_l+0x970>
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	4650      	mov	r0, sl
 8008690:	4659      	mov	r1, fp
 8008692:	2300      	movs	r3, #0
 8008694:	f018 0f01 	tst.w	r8, #1
 8008698:	d004      	beq.n	80086a4 <_strtod_l+0x5dc>
 800869a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800869e:	f7f8 f913 	bl	80008c8 <__aeabi_dmul>
 80086a2:	2301      	movs	r3, #1
 80086a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80086a8:	f109 0908 	add.w	r9, r9, #8
 80086ac:	d1f2      	bne.n	8008694 <_strtod_l+0x5cc>
 80086ae:	b10b      	cbz	r3, 80086b4 <_strtod_l+0x5ec>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	b1c3      	cbz	r3, 80086ea <_strtod_l+0x622>
 80086b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	4659      	mov	r1, fp
 80086c4:	dd11      	ble.n	80086ea <_strtod_l+0x622>
 80086c6:	2b1f      	cmp	r3, #31
 80086c8:	f340 8124 	ble.w	8008914 <_strtod_l+0x84c>
 80086cc:	2b34      	cmp	r3, #52	; 0x34
 80086ce:	bfde      	ittt	le
 80086d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80086d4:	f04f 33ff 	movle.w	r3, #4294967295
 80086d8:	fa03 f202 	lslle.w	r2, r3, r2
 80086dc:	f04f 0a00 	mov.w	sl, #0
 80086e0:	bfcc      	ite	gt
 80086e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086e6:	ea02 0b01 	andle.w	fp, r2, r1
 80086ea:	2200      	movs	r2, #0
 80086ec:	2300      	movs	r3, #0
 80086ee:	4650      	mov	r0, sl
 80086f0:	4659      	mov	r1, fp
 80086f2:	f7f8 fb51 	bl	8000d98 <__aeabi_dcmpeq>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d1a2      	bne.n	8008640 <_strtod_l+0x578>
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	9908      	ldr	r1, [sp, #32]
 8008700:	462b      	mov	r3, r5
 8008702:	463a      	mov	r2, r7
 8008704:	4620      	mov	r0, r4
 8008706:	f001 fea7 	bl	800a458 <__s2b>
 800870a:	9007      	str	r0, [sp, #28]
 800870c:	2800      	cmp	r0, #0
 800870e:	f43f af1f 	beq.w	8008550 <_strtod_l+0x488>
 8008712:	9b05      	ldr	r3, [sp, #20]
 8008714:	1b9e      	subs	r6, r3, r6
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	2b00      	cmp	r3, #0
 800871a:	bfb4      	ite	lt
 800871c:	4633      	movlt	r3, r6
 800871e:	2300      	movge	r3, #0
 8008720:	930c      	str	r3, [sp, #48]	; 0x30
 8008722:	9b06      	ldr	r3, [sp, #24]
 8008724:	2500      	movs	r5, #0
 8008726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800872a:	9312      	str	r3, [sp, #72]	; 0x48
 800872c:	462e      	mov	r6, r5
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	4620      	mov	r0, r4
 8008732:	6859      	ldr	r1, [r3, #4]
 8008734:	f001 fde8 	bl	800a308 <_Balloc>
 8008738:	9005      	str	r0, [sp, #20]
 800873a:	2800      	cmp	r0, #0
 800873c:	f43f af0c 	beq.w	8008558 <_strtod_l+0x490>
 8008740:	9b07      	ldr	r3, [sp, #28]
 8008742:	691a      	ldr	r2, [r3, #16]
 8008744:	3202      	adds	r2, #2
 8008746:	f103 010c 	add.w	r1, r3, #12
 800874a:	0092      	lsls	r2, r2, #2
 800874c:	300c      	adds	r0, #12
 800874e:	f7ff f815 	bl	800777c <memcpy>
 8008752:	ec4b ab10 	vmov	d0, sl, fp
 8008756:	aa1a      	add	r2, sp, #104	; 0x68
 8008758:	a919      	add	r1, sp, #100	; 0x64
 800875a:	4620      	mov	r0, r4
 800875c:	f002 f9c2 	bl	800aae4 <__d2b>
 8008760:	ec4b ab18 	vmov	d8, sl, fp
 8008764:	9018      	str	r0, [sp, #96]	; 0x60
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f aef6 	beq.w	8008558 <_strtod_l+0x490>
 800876c:	2101      	movs	r1, #1
 800876e:	4620      	mov	r0, r4
 8008770:	f001 ff0c 	bl	800a58c <__i2b>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f aeee 	beq.w	8008558 <_strtod_l+0x490>
 800877c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800877e:	9904      	ldr	r1, [sp, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	bfab      	itete	ge
 8008784:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008786:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008788:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800878a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800878e:	bfac      	ite	ge
 8008790:	eb03 0902 	addge.w	r9, r3, r2
 8008794:	1ad7      	sublt	r7, r2, r3
 8008796:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008798:	eba3 0801 	sub.w	r8, r3, r1
 800879c:	4490      	add	r8, r2
 800879e:	4ba1      	ldr	r3, [pc, #644]	; (8008a24 <_strtod_l+0x95c>)
 80087a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087a4:	4598      	cmp	r8, r3
 80087a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087aa:	f280 80c7 	bge.w	800893c <_strtod_l+0x874>
 80087ae:	eba3 0308 	sub.w	r3, r3, r8
 80087b2:	2b1f      	cmp	r3, #31
 80087b4:	eba2 0203 	sub.w	r2, r2, r3
 80087b8:	f04f 0101 	mov.w	r1, #1
 80087bc:	f300 80b1 	bgt.w	8008922 <_strtod_l+0x85a>
 80087c0:	fa01 f303 	lsl.w	r3, r1, r3
 80087c4:	930d      	str	r3, [sp, #52]	; 0x34
 80087c6:	2300      	movs	r3, #0
 80087c8:	9308      	str	r3, [sp, #32]
 80087ca:	eb09 0802 	add.w	r8, r9, r2
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	45c1      	cmp	r9, r8
 80087d2:	4417      	add	r7, r2
 80087d4:	441f      	add	r7, r3
 80087d6:	464b      	mov	r3, r9
 80087d8:	bfa8      	it	ge
 80087da:	4643      	movge	r3, r8
 80087dc:	42bb      	cmp	r3, r7
 80087de:	bfa8      	it	ge
 80087e0:	463b      	movge	r3, r7
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfc2      	ittt	gt
 80087e6:	eba8 0803 	subgt.w	r8, r8, r3
 80087ea:	1aff      	subgt	r7, r7, r3
 80087ec:	eba9 0903 	subgt.w	r9, r9, r3
 80087f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dd17      	ble.n	8008826 <_strtod_l+0x75e>
 80087f6:	4631      	mov	r1, r6
 80087f8:	461a      	mov	r2, r3
 80087fa:	4620      	mov	r0, r4
 80087fc:	f001 ff86 	bl	800a70c <__pow5mult>
 8008800:	4606      	mov	r6, r0
 8008802:	2800      	cmp	r0, #0
 8008804:	f43f aea8 	beq.w	8008558 <_strtod_l+0x490>
 8008808:	4601      	mov	r1, r0
 800880a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800880c:	4620      	mov	r0, r4
 800880e:	f001 fed3 	bl	800a5b8 <__multiply>
 8008812:	900b      	str	r0, [sp, #44]	; 0x2c
 8008814:	2800      	cmp	r0, #0
 8008816:	f43f ae9f 	beq.w	8008558 <_strtod_l+0x490>
 800881a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800881c:	4620      	mov	r0, r4
 800881e:	f001 fdb3 	bl	800a388 <_Bfree>
 8008822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008824:	9318      	str	r3, [sp, #96]	; 0x60
 8008826:	f1b8 0f00 	cmp.w	r8, #0
 800882a:	f300 808c 	bgt.w	8008946 <_strtod_l+0x87e>
 800882e:	9b06      	ldr	r3, [sp, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	dd08      	ble.n	8008846 <_strtod_l+0x77e>
 8008834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008836:	9905      	ldr	r1, [sp, #20]
 8008838:	4620      	mov	r0, r4
 800883a:	f001 ff67 	bl	800a70c <__pow5mult>
 800883e:	9005      	str	r0, [sp, #20]
 8008840:	2800      	cmp	r0, #0
 8008842:	f43f ae89 	beq.w	8008558 <_strtod_l+0x490>
 8008846:	2f00      	cmp	r7, #0
 8008848:	dd08      	ble.n	800885c <_strtod_l+0x794>
 800884a:	9905      	ldr	r1, [sp, #20]
 800884c:	463a      	mov	r2, r7
 800884e:	4620      	mov	r0, r4
 8008850:	f001 ffb6 	bl	800a7c0 <__lshift>
 8008854:	9005      	str	r0, [sp, #20]
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f ae7e 	beq.w	8008558 <_strtod_l+0x490>
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	dd08      	ble.n	8008874 <_strtod_l+0x7ac>
 8008862:	4631      	mov	r1, r6
 8008864:	464a      	mov	r2, r9
 8008866:	4620      	mov	r0, r4
 8008868:	f001 ffaa 	bl	800a7c0 <__lshift>
 800886c:	4606      	mov	r6, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	f43f ae72 	beq.w	8008558 <_strtod_l+0x490>
 8008874:	9a05      	ldr	r2, [sp, #20]
 8008876:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008878:	4620      	mov	r0, r4
 800887a:	f002 f82d 	bl	800a8d8 <__mdiff>
 800887e:	4605      	mov	r5, r0
 8008880:	2800      	cmp	r0, #0
 8008882:	f43f ae69 	beq.w	8008558 <_strtod_l+0x490>
 8008886:	68c3      	ldr	r3, [r0, #12]
 8008888:	930b      	str	r3, [sp, #44]	; 0x2c
 800888a:	2300      	movs	r3, #0
 800888c:	60c3      	str	r3, [r0, #12]
 800888e:	4631      	mov	r1, r6
 8008890:	f002 f806 	bl	800a8a0 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	da60      	bge.n	800895a <_strtod_l+0x892>
 8008898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889a:	ea53 030a 	orrs.w	r3, r3, sl
 800889e:	f040 8082 	bne.w	80089a6 <_strtod_l+0x8de>
 80088a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d17d      	bne.n	80089a6 <_strtod_l+0x8de>
 80088aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088ae:	0d1b      	lsrs	r3, r3, #20
 80088b0:	051b      	lsls	r3, r3, #20
 80088b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088b6:	d976      	bls.n	80089a6 <_strtod_l+0x8de>
 80088b8:	696b      	ldr	r3, [r5, #20]
 80088ba:	b913      	cbnz	r3, 80088c2 <_strtod_l+0x7fa>
 80088bc:	692b      	ldr	r3, [r5, #16]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	dd71      	ble.n	80089a6 <_strtod_l+0x8de>
 80088c2:	4629      	mov	r1, r5
 80088c4:	2201      	movs	r2, #1
 80088c6:	4620      	mov	r0, r4
 80088c8:	f001 ff7a 	bl	800a7c0 <__lshift>
 80088cc:	4631      	mov	r1, r6
 80088ce:	4605      	mov	r5, r0
 80088d0:	f001 ffe6 	bl	800a8a0 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	dd66      	ble.n	80089a6 <_strtod_l+0x8de>
 80088d8:	9904      	ldr	r1, [sp, #16]
 80088da:	4a53      	ldr	r2, [pc, #332]	; (8008a28 <_strtod_l+0x960>)
 80088dc:	465b      	mov	r3, fp
 80088de:	2900      	cmp	r1, #0
 80088e0:	f000 8081 	beq.w	80089e6 <_strtod_l+0x91e>
 80088e4:	ea02 010b 	and.w	r1, r2, fp
 80088e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80088ec:	dc7b      	bgt.n	80089e6 <_strtod_l+0x91e>
 80088ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80088f2:	f77f aea9 	ble.w	8008648 <_strtod_l+0x580>
 80088f6:	4b4d      	ldr	r3, [pc, #308]	; (8008a2c <_strtod_l+0x964>)
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	2200      	movs	r2, #0
 80088fe:	f7f7 ffe3 	bl	80008c8 <__aeabi_dmul>
 8008902:	460b      	mov	r3, r1
 8008904:	4303      	orrs	r3, r0
 8008906:	bf08      	it	eq
 8008908:	2322      	moveq	r3, #34	; 0x22
 800890a:	4682      	mov	sl, r0
 800890c:	468b      	mov	fp, r1
 800890e:	bf08      	it	eq
 8008910:	6023      	streq	r3, [r4, #0]
 8008912:	e62b      	b.n	800856c <_strtod_l+0x4a4>
 8008914:	f04f 32ff 	mov.w	r2, #4294967295
 8008918:	fa02 f303 	lsl.w	r3, r2, r3
 800891c:	ea03 0a0a 	and.w	sl, r3, sl
 8008920:	e6e3      	b.n	80086ea <_strtod_l+0x622>
 8008922:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008926:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800892a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800892e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008932:	fa01 f308 	lsl.w	r3, r1, r8
 8008936:	9308      	str	r3, [sp, #32]
 8008938:	910d      	str	r1, [sp, #52]	; 0x34
 800893a:	e746      	b.n	80087ca <_strtod_l+0x702>
 800893c:	2300      	movs	r3, #0
 800893e:	9308      	str	r3, [sp, #32]
 8008940:	2301      	movs	r3, #1
 8008942:	930d      	str	r3, [sp, #52]	; 0x34
 8008944:	e741      	b.n	80087ca <_strtod_l+0x702>
 8008946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008948:	4642      	mov	r2, r8
 800894a:	4620      	mov	r0, r4
 800894c:	f001 ff38 	bl	800a7c0 <__lshift>
 8008950:	9018      	str	r0, [sp, #96]	; 0x60
 8008952:	2800      	cmp	r0, #0
 8008954:	f47f af6b 	bne.w	800882e <_strtod_l+0x766>
 8008958:	e5fe      	b.n	8008558 <_strtod_l+0x490>
 800895a:	465f      	mov	r7, fp
 800895c:	d16e      	bne.n	8008a3c <_strtod_l+0x974>
 800895e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008964:	b342      	cbz	r2, 80089b8 <_strtod_l+0x8f0>
 8008966:	4a32      	ldr	r2, [pc, #200]	; (8008a30 <_strtod_l+0x968>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d128      	bne.n	80089be <_strtod_l+0x8f6>
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	4651      	mov	r1, sl
 8008970:	b1eb      	cbz	r3, 80089ae <_strtod_l+0x8e6>
 8008972:	4b2d      	ldr	r3, [pc, #180]	; (8008a28 <_strtod_l+0x960>)
 8008974:	403b      	ands	r3, r7
 8008976:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800897a:	f04f 32ff 	mov.w	r2, #4294967295
 800897e:	d819      	bhi.n	80089b4 <_strtod_l+0x8ec>
 8008980:	0d1b      	lsrs	r3, r3, #20
 8008982:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008986:	fa02 f303 	lsl.w	r3, r2, r3
 800898a:	4299      	cmp	r1, r3
 800898c:	d117      	bne.n	80089be <_strtod_l+0x8f6>
 800898e:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <_strtod_l+0x96c>)
 8008990:	429f      	cmp	r7, r3
 8008992:	d102      	bne.n	800899a <_strtod_l+0x8d2>
 8008994:	3101      	adds	r1, #1
 8008996:	f43f addf 	beq.w	8008558 <_strtod_l+0x490>
 800899a:	4b23      	ldr	r3, [pc, #140]	; (8008a28 <_strtod_l+0x960>)
 800899c:	403b      	ands	r3, r7
 800899e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80089a2:	f04f 0a00 	mov.w	sl, #0
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1a4      	bne.n	80088f6 <_strtod_l+0x82e>
 80089ac:	e5de      	b.n	800856c <_strtod_l+0x4a4>
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	e7ea      	b.n	800898a <_strtod_l+0x8c2>
 80089b4:	4613      	mov	r3, r2
 80089b6:	e7e8      	b.n	800898a <_strtod_l+0x8c2>
 80089b8:	ea53 030a 	orrs.w	r3, r3, sl
 80089bc:	d08c      	beq.n	80088d8 <_strtod_l+0x810>
 80089be:	9b08      	ldr	r3, [sp, #32]
 80089c0:	b1db      	cbz	r3, 80089fa <_strtod_l+0x932>
 80089c2:	423b      	tst	r3, r7
 80089c4:	d0ef      	beq.n	80089a6 <_strtod_l+0x8de>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	9a04      	ldr	r2, [sp, #16]
 80089ca:	4650      	mov	r0, sl
 80089cc:	4659      	mov	r1, fp
 80089ce:	b1c3      	cbz	r3, 8008a02 <_strtod_l+0x93a>
 80089d0:	f7ff fb5c 	bl	800808c <sulp>
 80089d4:	4602      	mov	r2, r0
 80089d6:	460b      	mov	r3, r1
 80089d8:	ec51 0b18 	vmov	r0, r1, d8
 80089dc:	f7f7 fdbe 	bl	800055c <__adddf3>
 80089e0:	4682      	mov	sl, r0
 80089e2:	468b      	mov	fp, r1
 80089e4:	e7df      	b.n	80089a6 <_strtod_l+0x8de>
 80089e6:	4013      	ands	r3, r2
 80089e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089f4:	f04f 3aff 	mov.w	sl, #4294967295
 80089f8:	e7d5      	b.n	80089a6 <_strtod_l+0x8de>
 80089fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fc:	ea13 0f0a 	tst.w	r3, sl
 8008a00:	e7e0      	b.n	80089c4 <_strtod_l+0x8fc>
 8008a02:	f7ff fb43 	bl	800808c <sulp>
 8008a06:	4602      	mov	r2, r0
 8008a08:	460b      	mov	r3, r1
 8008a0a:	ec51 0b18 	vmov	r0, r1, d8
 8008a0e:	f7f7 fda3 	bl	8000558 <__aeabi_dsub>
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	4682      	mov	sl, r0
 8008a18:	468b      	mov	fp, r1
 8008a1a:	f7f8 f9bd 	bl	8000d98 <__aeabi_dcmpeq>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d0c1      	beq.n	80089a6 <_strtod_l+0x8de>
 8008a22:	e611      	b.n	8008648 <_strtod_l+0x580>
 8008a24:	fffffc02 	.word	0xfffffc02
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	39500000 	.word	0x39500000
 8008a30:	000fffff 	.word	0x000fffff
 8008a34:	7fefffff 	.word	0x7fefffff
 8008a38:	0800c0e8 	.word	0x0800c0e8
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f002 f8ac 	bl	800ab9c <__ratio>
 8008a44:	ec59 8b10 	vmov	r8, r9, d0
 8008a48:	ee10 0a10 	vmov	r0, s0
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f8 f9b4 	bl	8000dc0 <__aeabi_dcmple>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d07a      	beq.n	8008b52 <_strtod_l+0xa8a>
 8008a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d04a      	beq.n	8008af8 <_strtod_l+0xa30>
 8008a62:	4b95      	ldr	r3, [pc, #596]	; (8008cb8 <_strtod_l+0xbf0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008cb8 <_strtod_l+0xbf0>
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	4b92      	ldr	r3, [pc, #584]	; (8008cbc <_strtod_l+0xbf4>)
 8008a74:	403b      	ands	r3, r7
 8008a76:	930d      	str	r3, [sp, #52]	; 0x34
 8008a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a7a:	4b91      	ldr	r3, [pc, #580]	; (8008cc0 <_strtod_l+0xbf8>)
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	f040 80b0 	bne.w	8008be2 <_strtod_l+0xb1a>
 8008a82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008a8a:	ec4b ab10 	vmov	d0, sl, fp
 8008a8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a92:	f001 ffab 	bl	800a9ec <__ulp>
 8008a96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a9a:	ec53 2b10 	vmov	r2, r3, d0
 8008a9e:	f7f7 ff13 	bl	80008c8 <__aeabi_dmul>
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	f7f7 fd59 	bl	800055c <__adddf3>
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4983      	ldr	r1, [pc, #524]	; (8008cbc <_strtod_l+0xbf4>)
 8008aae:	4a85      	ldr	r2, [pc, #532]	; (8008cc4 <_strtod_l+0xbfc>)
 8008ab0:	4019      	ands	r1, r3
 8008ab2:	4291      	cmp	r1, r2
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	d960      	bls.n	8008b7a <_strtod_l+0xab2>
 8008ab8:	ee18 3a90 	vmov	r3, s17
 8008abc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d104      	bne.n	8008ace <_strtod_l+0xa06>
 8008ac4:	ee18 3a10 	vmov	r3, s16
 8008ac8:	3301      	adds	r3, #1
 8008aca:	f43f ad45 	beq.w	8008558 <_strtod_l+0x490>
 8008ace:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008cd0 <_strtod_l+0xc08>
 8008ad2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ad6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f001 fc55 	bl	800a388 <_Bfree>
 8008ade:	9905      	ldr	r1, [sp, #20]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f001 fc51 	bl	800a388 <_Bfree>
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f001 fc4d 	bl	800a388 <_Bfree>
 8008aee:	4629      	mov	r1, r5
 8008af0:	4620      	mov	r0, r4
 8008af2:	f001 fc49 	bl	800a388 <_Bfree>
 8008af6:	e61a      	b.n	800872e <_strtod_l+0x666>
 8008af8:	f1ba 0f00 	cmp.w	sl, #0
 8008afc:	d11b      	bne.n	8008b36 <_strtod_l+0xa6e>
 8008afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b02:	b9f3      	cbnz	r3, 8008b42 <_strtod_l+0xa7a>
 8008b04:	4b6c      	ldr	r3, [pc, #432]	; (8008cb8 <_strtod_l+0xbf0>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f8 f94e 	bl	8000dac <__aeabi_dcmplt>
 8008b10:	b9d0      	cbnz	r0, 8008b48 <_strtod_l+0xa80>
 8008b12:	4640      	mov	r0, r8
 8008b14:	4649      	mov	r1, r9
 8008b16:	4b6c      	ldr	r3, [pc, #432]	; (8008cc8 <_strtod_l+0xc00>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fed5 	bl	80008c8 <__aeabi_dmul>
 8008b1e:	4680      	mov	r8, r0
 8008b20:	4689      	mov	r9, r1
 8008b22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008b2a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b34:	e79d      	b.n	8008a72 <_strtod_l+0x9aa>
 8008b36:	f1ba 0f01 	cmp.w	sl, #1
 8008b3a:	d102      	bne.n	8008b42 <_strtod_l+0xa7a>
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	f43f ad83 	beq.w	8008648 <_strtod_l+0x580>
 8008b42:	4b62      	ldr	r3, [pc, #392]	; (8008ccc <_strtod_l+0xc04>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	e78e      	b.n	8008a66 <_strtod_l+0x99e>
 8008b48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008cc8 <_strtod_l+0xc00>
 8008b4c:	f04f 0800 	mov.w	r8, #0
 8008b50:	e7e7      	b.n	8008b22 <_strtod_l+0xa5a>
 8008b52:	4b5d      	ldr	r3, [pc, #372]	; (8008cc8 <_strtod_l+0xc00>)
 8008b54:	4640      	mov	r0, r8
 8008b56:	4649      	mov	r1, r9
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f7f7 feb5 	bl	80008c8 <__aeabi_dmul>
 8008b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b60:	4680      	mov	r8, r0
 8008b62:	4689      	mov	r9, r1
 8008b64:	b933      	cbnz	r3, 8008b74 <_strtod_l+0xaac>
 8008b66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b6a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008b72:	e7dd      	b.n	8008b30 <_strtod_l+0xa68>
 8008b74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008b78:	e7f9      	b.n	8008b6e <_strtod_l+0xaa6>
 8008b7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1a8      	bne.n	8008ad6 <_strtod_l+0xa0e>
 8008b84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b8a:	0d1b      	lsrs	r3, r3, #20
 8008b8c:	051b      	lsls	r3, r3, #20
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d1a1      	bne.n	8008ad6 <_strtod_l+0xa0e>
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f8 f9f7 	bl	8000f88 <__aeabi_d2lz>
 8008b9a:	f7f7 fe67 	bl	800086c <__aeabi_l2d>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	f7f7 fcd7 	bl	8000558 <__aeabi_dsub>
 8008baa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bb0:	ea43 030a 	orr.w	r3, r3, sl
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	4680      	mov	r8, r0
 8008bb8:	4689      	mov	r9, r1
 8008bba:	d055      	beq.n	8008c68 <_strtod_l+0xba0>
 8008bbc:	a336      	add	r3, pc, #216	; (adr r3, 8008c98 <_strtod_l+0xbd0>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	f7f8 f8f3 	bl	8000dac <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f47f acd0 	bne.w	800856c <_strtod_l+0x4a4>
 8008bcc:	a334      	add	r3, pc, #208	; (adr r3, 8008ca0 <_strtod_l+0xbd8>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f8 f907 	bl	8000de8 <__aeabi_dcmpgt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f43f af7b 	beq.w	8008ad6 <_strtod_l+0xa0e>
 8008be0:	e4c4      	b.n	800856c <_strtod_l+0x4a4>
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	b333      	cbz	r3, 8008c34 <_strtod_l+0xb6c>
 8008be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008be8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008bec:	d822      	bhi.n	8008c34 <_strtod_l+0xb6c>
 8008bee:	a32e      	add	r3, pc, #184	; (adr r3, 8008ca8 <_strtod_l+0xbe0>)
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f8 f8e2 	bl	8000dc0 <__aeabi_dcmple>
 8008bfc:	b1a0      	cbz	r0, 8008c28 <_strtod_l+0xb60>
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4640      	mov	r0, r8
 8008c02:	f7f8 f939 	bl	8000e78 <__aeabi_d2uiz>
 8008c06:	2801      	cmp	r0, #1
 8008c08:	bf38      	it	cc
 8008c0a:	2001      	movcc	r0, #1
 8008c0c:	f7f7 fde2 	bl	80007d4 <__aeabi_ui2d>
 8008c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c12:	4680      	mov	r8, r0
 8008c14:	4689      	mov	r9, r1
 8008c16:	bb23      	cbnz	r3, 8008c62 <_strtod_l+0xb9a>
 8008c18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c1c:	9010      	str	r0, [sp, #64]	; 0x40
 8008c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8008c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c24:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c2c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c38:	eeb0 0a48 	vmov.f32	s0, s16
 8008c3c:	eef0 0a68 	vmov.f32	s1, s17
 8008c40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c44:	f001 fed2 	bl	800a9ec <__ulp>
 8008c48:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c4c:	ec53 2b10 	vmov	r2, r3, d0
 8008c50:	f7f7 fe3a 	bl	80008c8 <__aeabi_dmul>
 8008c54:	ec53 2b18 	vmov	r2, r3, d8
 8008c58:	f7f7 fc80 	bl	800055c <__adddf3>
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	468b      	mov	fp, r1
 8008c60:	e78d      	b.n	8008b7e <_strtod_l+0xab6>
 8008c62:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008c66:	e7db      	b.n	8008c20 <_strtod_l+0xb58>
 8008c68:	a311      	add	r3, pc, #68	; (adr r3, 8008cb0 <_strtod_l+0xbe8>)
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	f7f8 f89d 	bl	8000dac <__aeabi_dcmplt>
 8008c72:	e7b2      	b.n	8008bda <_strtod_l+0xb12>
 8008c74:	2300      	movs	r3, #0
 8008c76:	930a      	str	r3, [sp, #40]	; 0x28
 8008c78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	f7ff ba6b 	b.w	8008158 <_strtod_l+0x90>
 8008c82:	2a65      	cmp	r2, #101	; 0x65
 8008c84:	f43f ab5f 	beq.w	8008346 <_strtod_l+0x27e>
 8008c88:	2a45      	cmp	r2, #69	; 0x45
 8008c8a:	f43f ab5c 	beq.w	8008346 <_strtod_l+0x27e>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	f7ff bb94 	b.w	80083bc <_strtod_l+0x2f4>
 8008c94:	f3af 8000 	nop.w
 8008c98:	94a03595 	.word	0x94a03595
 8008c9c:	3fdfffff 	.word	0x3fdfffff
 8008ca0:	35afe535 	.word	0x35afe535
 8008ca4:	3fe00000 	.word	0x3fe00000
 8008ca8:	ffc00000 	.word	0xffc00000
 8008cac:	41dfffff 	.word	0x41dfffff
 8008cb0:	94a03595 	.word	0x94a03595
 8008cb4:	3fcfffff 	.word	0x3fcfffff
 8008cb8:	3ff00000 	.word	0x3ff00000
 8008cbc:	7ff00000 	.word	0x7ff00000
 8008cc0:	7fe00000 	.word	0x7fe00000
 8008cc4:	7c9fffff 	.word	0x7c9fffff
 8008cc8:	3fe00000 	.word	0x3fe00000
 8008ccc:	bff00000 	.word	0xbff00000
 8008cd0:	7fefffff 	.word	0x7fefffff

08008cd4 <strtof>:
 8008cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008d88 <strtof+0xb4>
 8008cdc:	4b26      	ldr	r3, [pc, #152]	; (8008d78 <strtof+0xa4>)
 8008cde:	460a      	mov	r2, r1
 8008ce0:	ed2d 8b02 	vpush	{d8}
 8008ce4:	4601      	mov	r1, r0
 8008ce6:	f8d8 0000 	ldr.w	r0, [r8]
 8008cea:	f7ff f9ed 	bl	80080c8 <_strtod_l>
 8008cee:	ec55 4b10 	vmov	r4, r5, d0
 8008cf2:	ee10 2a10 	vmov	r2, s0
 8008cf6:	ee10 0a10 	vmov	r0, s0
 8008cfa:	462b      	mov	r3, r5
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f7f8 f87d 	bl	8000dfc <__aeabi_dcmpun>
 8008d02:	b190      	cbz	r0, 8008d2a <strtof+0x56>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	481d      	ldr	r0, [pc, #116]	; (8008d7c <strtof+0xa8>)
 8008d08:	da09      	bge.n	8008d1e <strtof+0x4a>
 8008d0a:	f002 fa29 	bl	800b160 <nanf>
 8008d0e:	eeb1 8a40 	vneg.f32	s16, s0
 8008d12:	eeb0 0a48 	vmov.f32	s0, s16
 8008d16:	ecbd 8b02 	vpop	{d8}
 8008d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d1e:	ecbd 8b02 	vpop	{d8}
 8008d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	f002 ba1b 	b.w	800b160 <nanf>
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f8 f8c3 	bl	8000eb8 <__aeabi_d2f>
 8008d32:	ee08 0a10 	vmov	s16, r0
 8008d36:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008d80 <strtof+0xac>
 8008d3a:	eeb0 7ac8 	vabs.f32	s14, s16
 8008d3e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	dde4      	ble.n	8008d12 <strtof+0x3e>
 8008d48:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <strtof+0xb0>)
 8008d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d52:	4620      	mov	r0, r4
 8008d54:	4639      	mov	r1, r7
 8008d56:	f7f8 f851 	bl	8000dfc <__aeabi_dcmpun>
 8008d5a:	b940      	cbnz	r0, 8008d6e <strtof+0x9a>
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <strtof+0xb0>)
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	4620      	mov	r0, r4
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f8 f82b 	bl	8000dc0 <__aeabi_dcmple>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0d1      	beq.n	8008d12 <strtof+0x3e>
 8008d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d72:	2222      	movs	r2, #34	; 0x22
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	e7cc      	b.n	8008d12 <strtof+0x3e>
 8008d78:	200002e0 	.word	0x200002e0
 8008d7c:	0800c4c0 	.word	0x0800c4c0
 8008d80:	7f7fffff 	.word	0x7f7fffff
 8008d84:	7fefffff 	.word	0x7fefffff
 8008d88:	20000278 	.word	0x20000278

08008d8c <_strtoul_l.constprop.0>:
 8008d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d90:	4f36      	ldr	r7, [pc, #216]	; (8008e6c <_strtoul_l.constprop.0+0xe0>)
 8008d92:	4686      	mov	lr, r0
 8008d94:	460d      	mov	r5, r1
 8008d96:	4628      	mov	r0, r5
 8008d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d9c:	5de6      	ldrb	r6, [r4, r7]
 8008d9e:	f016 0608 	ands.w	r6, r6, #8
 8008da2:	d1f8      	bne.n	8008d96 <_strtoul_l.constprop.0+0xa>
 8008da4:	2c2d      	cmp	r4, #45	; 0x2d
 8008da6:	d12f      	bne.n	8008e08 <_strtoul_l.constprop.0+0x7c>
 8008da8:	782c      	ldrb	r4, [r5, #0]
 8008daa:	2601      	movs	r6, #1
 8008dac:	1c85      	adds	r5, r0, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d057      	beq.n	8008e62 <_strtoul_l.constprop.0+0xd6>
 8008db2:	2b10      	cmp	r3, #16
 8008db4:	d109      	bne.n	8008dca <_strtoul_l.constprop.0+0x3e>
 8008db6:	2c30      	cmp	r4, #48	; 0x30
 8008db8:	d107      	bne.n	8008dca <_strtoul_l.constprop.0+0x3e>
 8008dba:	7828      	ldrb	r0, [r5, #0]
 8008dbc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008dc0:	2858      	cmp	r0, #88	; 0x58
 8008dc2:	d149      	bne.n	8008e58 <_strtoul_l.constprop.0+0xcc>
 8008dc4:	786c      	ldrb	r4, [r5, #1]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	3502      	adds	r5, #2
 8008dca:	f04f 38ff 	mov.w	r8, #4294967295
 8008dce:	2700      	movs	r7, #0
 8008dd0:	fbb8 f8f3 	udiv	r8, r8, r3
 8008dd4:	fb03 f908 	mul.w	r9, r3, r8
 8008dd8:	ea6f 0909 	mvn.w	r9, r9
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008de2:	f1bc 0f09 	cmp.w	ip, #9
 8008de6:	d814      	bhi.n	8008e12 <_strtoul_l.constprop.0+0x86>
 8008de8:	4664      	mov	r4, ip
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	dd22      	ble.n	8008e34 <_strtoul_l.constprop.0+0xa8>
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	db1d      	blt.n	8008e2e <_strtoul_l.constprop.0+0xa2>
 8008df2:	4580      	cmp	r8, r0
 8008df4:	d31b      	bcc.n	8008e2e <_strtoul_l.constprop.0+0xa2>
 8008df6:	d101      	bne.n	8008dfc <_strtoul_l.constprop.0+0x70>
 8008df8:	45a1      	cmp	r9, r4
 8008dfa:	db18      	blt.n	8008e2e <_strtoul_l.constprop.0+0xa2>
 8008dfc:	fb00 4003 	mla	r0, r0, r3, r4
 8008e00:	2701      	movs	r7, #1
 8008e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e06:	e7ea      	b.n	8008dde <_strtoul_l.constprop.0+0x52>
 8008e08:	2c2b      	cmp	r4, #43	; 0x2b
 8008e0a:	bf04      	itt	eq
 8008e0c:	782c      	ldrbeq	r4, [r5, #0]
 8008e0e:	1c85      	addeq	r5, r0, #2
 8008e10:	e7cd      	b.n	8008dae <_strtoul_l.constprop.0+0x22>
 8008e12:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e16:	f1bc 0f19 	cmp.w	ip, #25
 8008e1a:	d801      	bhi.n	8008e20 <_strtoul_l.constprop.0+0x94>
 8008e1c:	3c37      	subs	r4, #55	; 0x37
 8008e1e:	e7e4      	b.n	8008dea <_strtoul_l.constprop.0+0x5e>
 8008e20:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e24:	f1bc 0f19 	cmp.w	ip, #25
 8008e28:	d804      	bhi.n	8008e34 <_strtoul_l.constprop.0+0xa8>
 8008e2a:	3c57      	subs	r4, #87	; 0x57
 8008e2c:	e7dd      	b.n	8008dea <_strtoul_l.constprop.0+0x5e>
 8008e2e:	f04f 37ff 	mov.w	r7, #4294967295
 8008e32:	e7e6      	b.n	8008e02 <_strtoul_l.constprop.0+0x76>
 8008e34:	2f00      	cmp	r7, #0
 8008e36:	da07      	bge.n	8008e48 <_strtoul_l.constprop.0+0xbc>
 8008e38:	2322      	movs	r3, #34	; 0x22
 8008e3a:	f8ce 3000 	str.w	r3, [lr]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b932      	cbnz	r2, 8008e52 <_strtoul_l.constprop.0+0xc6>
 8008e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e48:	b106      	cbz	r6, 8008e4c <_strtoul_l.constprop.0+0xc0>
 8008e4a:	4240      	negs	r0, r0
 8008e4c:	2a00      	cmp	r2, #0
 8008e4e:	d0f9      	beq.n	8008e44 <_strtoul_l.constprop.0+0xb8>
 8008e50:	b107      	cbz	r7, 8008e54 <_strtoul_l.constprop.0+0xc8>
 8008e52:	1e69      	subs	r1, r5, #1
 8008e54:	6011      	str	r1, [r2, #0]
 8008e56:	e7f5      	b.n	8008e44 <_strtoul_l.constprop.0+0xb8>
 8008e58:	2430      	movs	r4, #48	; 0x30
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1b5      	bne.n	8008dca <_strtoul_l.constprop.0+0x3e>
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e7b3      	b.n	8008dca <_strtoul_l.constprop.0+0x3e>
 8008e62:	2c30      	cmp	r4, #48	; 0x30
 8008e64:	d0a9      	beq.n	8008dba <_strtoul_l.constprop.0+0x2e>
 8008e66:	230a      	movs	r3, #10
 8008e68:	e7af      	b.n	8008dca <_strtoul_l.constprop.0+0x3e>
 8008e6a:	bf00      	nop
 8008e6c:	0800c111 	.word	0x0800c111

08008e70 <strtoul>:
 8008e70:	4613      	mov	r3, r2
 8008e72:	460a      	mov	r2, r1
 8008e74:	4601      	mov	r1, r0
 8008e76:	4802      	ldr	r0, [pc, #8]	; (8008e80 <strtoul+0x10>)
 8008e78:	6800      	ldr	r0, [r0, #0]
 8008e7a:	f7ff bf87 	b.w	8008d8c <_strtoul_l.constprop.0>
 8008e7e:	bf00      	nop
 8008e80:	20000278 	.word	0x20000278

08008e84 <_vsniprintf_r>:
 8008e84:	b530      	push	{r4, r5, lr}
 8008e86:	4614      	mov	r4, r2
 8008e88:	2c00      	cmp	r4, #0
 8008e8a:	b09b      	sub	sp, #108	; 0x6c
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	461a      	mov	r2, r3
 8008e90:	da05      	bge.n	8008e9e <_vsniprintf_r+0x1a>
 8008e92:	238b      	movs	r3, #139	; 0x8b
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9a:	b01b      	add	sp, #108	; 0x6c
 8008e9c:	bd30      	pop	{r4, r5, pc}
 8008e9e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ea2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ea6:	bf14      	ite	ne
 8008ea8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008eac:	4623      	moveq	r3, r4
 8008eae:	9302      	str	r3, [sp, #8]
 8008eb0:	9305      	str	r3, [sp, #20]
 8008eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008eb6:	9100      	str	r1, [sp, #0]
 8008eb8:	9104      	str	r1, [sp, #16]
 8008eba:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008ebe:	4669      	mov	r1, sp
 8008ec0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ec2:	f002 f835 	bl	800af30 <_svfiprintf_r>
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	bfbc      	itt	lt
 8008eca:	238b      	movlt	r3, #139	; 0x8b
 8008ecc:	602b      	strlt	r3, [r5, #0]
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	d0e3      	beq.n	8008e9a <_vsniprintf_r+0x16>
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	701a      	strb	r2, [r3, #0]
 8008ed8:	e7df      	b.n	8008e9a <_vsniprintf_r+0x16>
	...

08008edc <vsniprintf>:
 8008edc:	b507      	push	{r0, r1, r2, lr}
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	4803      	ldr	r0, [pc, #12]	; (8008ef4 <vsniprintf+0x18>)
 8008ee8:	6800      	ldr	r0, [r0, #0]
 8008eea:	f7ff ffcb 	bl	8008e84 <_vsniprintf_r>
 8008eee:	b003      	add	sp, #12
 8008ef0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ef4:	20000278 	.word	0x20000278

08008ef8 <quorem>:
 8008ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	6903      	ldr	r3, [r0, #16]
 8008efe:	690c      	ldr	r4, [r1, #16]
 8008f00:	42a3      	cmp	r3, r4
 8008f02:	4607      	mov	r7, r0
 8008f04:	f2c0 8081 	blt.w	800900a <quorem+0x112>
 8008f08:	3c01      	subs	r4, #1
 8008f0a:	f101 0814 	add.w	r8, r1, #20
 8008f0e:	f100 0514 	add.w	r5, r0, #20
 8008f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f20:	3301      	adds	r3, #1
 8008f22:	429a      	cmp	r2, r3
 8008f24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f30:	d331      	bcc.n	8008f96 <quorem+0x9e>
 8008f32:	f04f 0e00 	mov.w	lr, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	46ac      	mov	ip, r5
 8008f3a:	46f2      	mov	sl, lr
 8008f3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f40:	b293      	uxth	r3, r2
 8008f42:	fb06 e303 	mla	r3, r6, r3, lr
 8008f46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f50:	f8dc a000 	ldr.w	sl, [ip]
 8008f54:	0c12      	lsrs	r2, r2, #16
 8008f56:	fa13 f38a 	uxtah	r3, r3, sl
 8008f5a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	9b00      	ldr	r3, [sp, #0]
 8008f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f66:	b292      	uxth	r2, r2
 8008f68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f70:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f74:	4581      	cmp	r9, r0
 8008f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f7a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f82:	d2db      	bcs.n	8008f3c <quorem+0x44>
 8008f84:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f88:	b92b      	cbnz	r3, 8008f96 <quorem+0x9e>
 8008f8a:	9b01      	ldr	r3, [sp, #4]
 8008f8c:	3b04      	subs	r3, #4
 8008f8e:	429d      	cmp	r5, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	d32e      	bcc.n	8008ff2 <quorem+0xfa>
 8008f94:	613c      	str	r4, [r7, #16]
 8008f96:	4638      	mov	r0, r7
 8008f98:	f001 fc82 	bl	800a8a0 <__mcmp>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	db24      	blt.n	8008fea <quorem+0xf2>
 8008fa0:	3601      	adds	r6, #1
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f04f 0c00 	mov.w	ip, #0
 8008fa8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fac:	f8d0 e000 	ldr.w	lr, [r0]
 8008fb0:	b293      	uxth	r3, r2
 8008fb2:	ebac 0303 	sub.w	r3, ip, r3
 8008fb6:	0c12      	lsrs	r2, r2, #16
 8008fb8:	fa13 f38e 	uxtah	r3, r3, lr
 8008fbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fca:	45c1      	cmp	r9, r8
 8008fcc:	f840 3b04 	str.w	r3, [r0], #4
 8008fd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fd4:	d2e8      	bcs.n	8008fa8 <quorem+0xb0>
 8008fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fde:	b922      	cbnz	r2, 8008fea <quorem+0xf2>
 8008fe0:	3b04      	subs	r3, #4
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	d30a      	bcc.n	8008ffe <quorem+0x106>
 8008fe8:	613c      	str	r4, [r7, #16]
 8008fea:	4630      	mov	r0, r6
 8008fec:	b003      	add	sp, #12
 8008fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff2:	6812      	ldr	r2, [r2, #0]
 8008ff4:	3b04      	subs	r3, #4
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	d1cc      	bne.n	8008f94 <quorem+0x9c>
 8008ffa:	3c01      	subs	r4, #1
 8008ffc:	e7c7      	b.n	8008f8e <quorem+0x96>
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	3b04      	subs	r3, #4
 8009002:	2a00      	cmp	r2, #0
 8009004:	d1f0      	bne.n	8008fe8 <quorem+0xf0>
 8009006:	3c01      	subs	r4, #1
 8009008:	e7eb      	b.n	8008fe2 <quorem+0xea>
 800900a:	2000      	movs	r0, #0
 800900c:	e7ee      	b.n	8008fec <quorem+0xf4>
	...

08009010 <_dtoa_r>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	ed2d 8b04 	vpush	{d8-d9}
 8009018:	ec57 6b10 	vmov	r6, r7, d0
 800901c:	b093      	sub	sp, #76	; 0x4c
 800901e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009020:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009024:	9106      	str	r1, [sp, #24]
 8009026:	ee10 aa10 	vmov	sl, s0
 800902a:	4604      	mov	r4, r0
 800902c:	9209      	str	r2, [sp, #36]	; 0x24
 800902e:	930c      	str	r3, [sp, #48]	; 0x30
 8009030:	46bb      	mov	fp, r7
 8009032:	b975      	cbnz	r5, 8009052 <_dtoa_r+0x42>
 8009034:	2010      	movs	r0, #16
 8009036:	f001 f94d 	bl	800a2d4 <malloc>
 800903a:	4602      	mov	r2, r0
 800903c:	6260      	str	r0, [r4, #36]	; 0x24
 800903e:	b920      	cbnz	r0, 800904a <_dtoa_r+0x3a>
 8009040:	4ba7      	ldr	r3, [pc, #668]	; (80092e0 <_dtoa_r+0x2d0>)
 8009042:	21ea      	movs	r1, #234	; 0xea
 8009044:	48a7      	ldr	r0, [pc, #668]	; (80092e4 <_dtoa_r+0x2d4>)
 8009046:	f002 f8b3 	bl	800b1b0 <__assert_func>
 800904a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800904e:	6005      	str	r5, [r0, #0]
 8009050:	60c5      	str	r5, [r0, #12]
 8009052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009054:	6819      	ldr	r1, [r3, #0]
 8009056:	b151      	cbz	r1, 800906e <_dtoa_r+0x5e>
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	604a      	str	r2, [r1, #4]
 800905c:	2301      	movs	r3, #1
 800905e:	4093      	lsls	r3, r2
 8009060:	608b      	str	r3, [r1, #8]
 8009062:	4620      	mov	r0, r4
 8009064:	f001 f990 	bl	800a388 <_Bfree>
 8009068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	1e3b      	subs	r3, r7, #0
 8009070:	bfaa      	itet	ge
 8009072:	2300      	movge	r3, #0
 8009074:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009078:	f8c8 3000 	strge.w	r3, [r8]
 800907c:	4b9a      	ldr	r3, [pc, #616]	; (80092e8 <_dtoa_r+0x2d8>)
 800907e:	bfbc      	itt	lt
 8009080:	2201      	movlt	r2, #1
 8009082:	f8c8 2000 	strlt.w	r2, [r8]
 8009086:	ea33 030b 	bics.w	r3, r3, fp
 800908a:	d11b      	bne.n	80090c4 <_dtoa_r+0xb4>
 800908c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800908e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009098:	4333      	orrs	r3, r6
 800909a:	f000 8592 	beq.w	8009bc2 <_dtoa_r+0xbb2>
 800909e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a0:	b963      	cbnz	r3, 80090bc <_dtoa_r+0xac>
 80090a2:	4b92      	ldr	r3, [pc, #584]	; (80092ec <_dtoa_r+0x2dc>)
 80090a4:	e022      	b.n	80090ec <_dtoa_r+0xdc>
 80090a6:	4b92      	ldr	r3, [pc, #584]	; (80092f0 <_dtoa_r+0x2e0>)
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	3308      	adds	r3, #8
 80090ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	9801      	ldr	r0, [sp, #4]
 80090b2:	b013      	add	sp, #76	; 0x4c
 80090b4:	ecbd 8b04 	vpop	{d8-d9}
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090bc:	4b8b      	ldr	r3, [pc, #556]	; (80092ec <_dtoa_r+0x2dc>)
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	3303      	adds	r3, #3
 80090c2:	e7f3      	b.n	80090ac <_dtoa_r+0x9c>
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	4650      	mov	r0, sl
 80090ca:	4659      	mov	r1, fp
 80090cc:	f7f7 fe64 	bl	8000d98 <__aeabi_dcmpeq>
 80090d0:	ec4b ab19 	vmov	d9, sl, fp
 80090d4:	4680      	mov	r8, r0
 80090d6:	b158      	cbz	r0, 80090f0 <_dtoa_r+0xe0>
 80090d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090da:	2301      	movs	r3, #1
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 856b 	beq.w	8009bbc <_dtoa_r+0xbac>
 80090e6:	4883      	ldr	r0, [pc, #524]	; (80092f4 <_dtoa_r+0x2e4>)
 80090e8:	6018      	str	r0, [r3, #0]
 80090ea:	1e43      	subs	r3, r0, #1
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	e7df      	b.n	80090b0 <_dtoa_r+0xa0>
 80090f0:	ec4b ab10 	vmov	d0, sl, fp
 80090f4:	aa10      	add	r2, sp, #64	; 0x40
 80090f6:	a911      	add	r1, sp, #68	; 0x44
 80090f8:	4620      	mov	r0, r4
 80090fa:	f001 fcf3 	bl	800aae4 <__d2b>
 80090fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009102:	ee08 0a10 	vmov	s16, r0
 8009106:	2d00      	cmp	r5, #0
 8009108:	f000 8084 	beq.w	8009214 <_dtoa_r+0x204>
 800910c:	ee19 3a90 	vmov	r3, s19
 8009110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009114:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009118:	4656      	mov	r6, sl
 800911a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800911e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009122:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009126:	4b74      	ldr	r3, [pc, #464]	; (80092f8 <_dtoa_r+0x2e8>)
 8009128:	2200      	movs	r2, #0
 800912a:	4630      	mov	r0, r6
 800912c:	4639      	mov	r1, r7
 800912e:	f7f7 fa13 	bl	8000558 <__aeabi_dsub>
 8009132:	a365      	add	r3, pc, #404	; (adr r3, 80092c8 <_dtoa_r+0x2b8>)
 8009134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009138:	f7f7 fbc6 	bl	80008c8 <__aeabi_dmul>
 800913c:	a364      	add	r3, pc, #400	; (adr r3, 80092d0 <_dtoa_r+0x2c0>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 fa0b 	bl	800055c <__adddf3>
 8009146:	4606      	mov	r6, r0
 8009148:	4628      	mov	r0, r5
 800914a:	460f      	mov	r7, r1
 800914c:	f7f7 fb52 	bl	80007f4 <__aeabi_i2d>
 8009150:	a361      	add	r3, pc, #388	; (adr r3, 80092d8 <_dtoa_r+0x2c8>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 fbb7 	bl	80008c8 <__aeabi_dmul>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4630      	mov	r0, r6
 8009160:	4639      	mov	r1, r7
 8009162:	f7f7 f9fb 	bl	800055c <__adddf3>
 8009166:	4606      	mov	r6, r0
 8009168:	460f      	mov	r7, r1
 800916a:	f7f7 fe5d 	bl	8000e28 <__aeabi_d2iz>
 800916e:	2200      	movs	r2, #0
 8009170:	9000      	str	r0, [sp, #0]
 8009172:	2300      	movs	r3, #0
 8009174:	4630      	mov	r0, r6
 8009176:	4639      	mov	r1, r7
 8009178:	f7f7 fe18 	bl	8000dac <__aeabi_dcmplt>
 800917c:	b150      	cbz	r0, 8009194 <_dtoa_r+0x184>
 800917e:	9800      	ldr	r0, [sp, #0]
 8009180:	f7f7 fb38 	bl	80007f4 <__aeabi_i2d>
 8009184:	4632      	mov	r2, r6
 8009186:	463b      	mov	r3, r7
 8009188:	f7f7 fe06 	bl	8000d98 <__aeabi_dcmpeq>
 800918c:	b910      	cbnz	r0, 8009194 <_dtoa_r+0x184>
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	3b01      	subs	r3, #1
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	2b16      	cmp	r3, #22
 8009198:	d85a      	bhi.n	8009250 <_dtoa_r+0x240>
 800919a:	9a00      	ldr	r2, [sp, #0]
 800919c:	4b57      	ldr	r3, [pc, #348]	; (80092fc <_dtoa_r+0x2ec>)
 800919e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	ec51 0b19 	vmov	r0, r1, d9
 80091aa:	f7f7 fdff 	bl	8000dac <__aeabi_dcmplt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d050      	beq.n	8009254 <_dtoa_r+0x244>
 80091b2:	9b00      	ldr	r3, [sp, #0]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	2300      	movs	r3, #0
 80091ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80091bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091be:	1b5d      	subs	r5, r3, r5
 80091c0:	1e6b      	subs	r3, r5, #1
 80091c2:	9305      	str	r3, [sp, #20]
 80091c4:	bf45      	ittet	mi
 80091c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80091ca:	9304      	strmi	r3, [sp, #16]
 80091cc:	2300      	movpl	r3, #0
 80091ce:	2300      	movmi	r3, #0
 80091d0:	bf4c      	ite	mi
 80091d2:	9305      	strmi	r3, [sp, #20]
 80091d4:	9304      	strpl	r3, [sp, #16]
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	db3d      	blt.n	8009258 <_dtoa_r+0x248>
 80091dc:	9b05      	ldr	r3, [sp, #20]
 80091de:	9a00      	ldr	r2, [sp, #0]
 80091e0:	920a      	str	r2, [sp, #40]	; 0x28
 80091e2:	4413      	add	r3, r2
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	2300      	movs	r3, #0
 80091e8:	9307      	str	r3, [sp, #28]
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	2b09      	cmp	r3, #9
 80091ee:	f200 8089 	bhi.w	8009304 <_dtoa_r+0x2f4>
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	bfc4      	itt	gt
 80091f6:	3b04      	subgt	r3, #4
 80091f8:	9306      	strgt	r3, [sp, #24]
 80091fa:	9b06      	ldr	r3, [sp, #24]
 80091fc:	f1a3 0302 	sub.w	r3, r3, #2
 8009200:	bfcc      	ite	gt
 8009202:	2500      	movgt	r5, #0
 8009204:	2501      	movle	r5, #1
 8009206:	2b03      	cmp	r3, #3
 8009208:	f200 8087 	bhi.w	800931a <_dtoa_r+0x30a>
 800920c:	e8df f003 	tbb	[pc, r3]
 8009210:	59383a2d 	.word	0x59383a2d
 8009214:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009218:	441d      	add	r5, r3
 800921a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800921e:	2b20      	cmp	r3, #32
 8009220:	bfc1      	itttt	gt
 8009222:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009226:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800922a:	fa0b f303 	lslgt.w	r3, fp, r3
 800922e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009232:	bfda      	itte	le
 8009234:	f1c3 0320 	rsble	r3, r3, #32
 8009238:	fa06 f003 	lslle.w	r0, r6, r3
 800923c:	4318      	orrgt	r0, r3
 800923e:	f7f7 fac9 	bl	80007d4 <__aeabi_ui2d>
 8009242:	2301      	movs	r3, #1
 8009244:	4606      	mov	r6, r0
 8009246:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800924a:	3d01      	subs	r5, #1
 800924c:	930e      	str	r3, [sp, #56]	; 0x38
 800924e:	e76a      	b.n	8009126 <_dtoa_r+0x116>
 8009250:	2301      	movs	r3, #1
 8009252:	e7b2      	b.n	80091ba <_dtoa_r+0x1aa>
 8009254:	900b      	str	r0, [sp, #44]	; 0x2c
 8009256:	e7b1      	b.n	80091bc <_dtoa_r+0x1ac>
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	9a00      	ldr	r2, [sp, #0]
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	4253      	negs	r3, r2
 8009262:	9307      	str	r3, [sp, #28]
 8009264:	2300      	movs	r3, #0
 8009266:	930a      	str	r3, [sp, #40]	; 0x28
 8009268:	e7bf      	b.n	80091ea <_dtoa_r+0x1da>
 800926a:	2300      	movs	r3, #0
 800926c:	9308      	str	r3, [sp, #32]
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	dc55      	bgt.n	8009320 <_dtoa_r+0x310>
 8009274:	2301      	movs	r3, #1
 8009276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800927a:	461a      	mov	r2, r3
 800927c:	9209      	str	r2, [sp, #36]	; 0x24
 800927e:	e00c      	b.n	800929a <_dtoa_r+0x28a>
 8009280:	2301      	movs	r3, #1
 8009282:	e7f3      	b.n	800926c <_dtoa_r+0x25c>
 8009284:	2300      	movs	r3, #0
 8009286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	9b00      	ldr	r3, [sp, #0]
 800928c:	4413      	add	r3, r2
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	3301      	adds	r3, #1
 8009292:	2b01      	cmp	r3, #1
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	bfb8      	it	lt
 8009298:	2301      	movlt	r3, #1
 800929a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800929c:	2200      	movs	r2, #0
 800929e:	6042      	str	r2, [r0, #4]
 80092a0:	2204      	movs	r2, #4
 80092a2:	f102 0614 	add.w	r6, r2, #20
 80092a6:	429e      	cmp	r6, r3
 80092a8:	6841      	ldr	r1, [r0, #4]
 80092aa:	d93d      	bls.n	8009328 <_dtoa_r+0x318>
 80092ac:	4620      	mov	r0, r4
 80092ae:	f001 f82b 	bl	800a308 <_Balloc>
 80092b2:	9001      	str	r0, [sp, #4]
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d13b      	bne.n	8009330 <_dtoa_r+0x320>
 80092b8:	4b11      	ldr	r3, [pc, #68]	; (8009300 <_dtoa_r+0x2f0>)
 80092ba:	4602      	mov	r2, r0
 80092bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092c0:	e6c0      	b.n	8009044 <_dtoa_r+0x34>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e7df      	b.n	8009286 <_dtoa_r+0x276>
 80092c6:	bf00      	nop
 80092c8:	636f4361 	.word	0x636f4361
 80092cc:	3fd287a7 	.word	0x3fd287a7
 80092d0:	8b60c8b3 	.word	0x8b60c8b3
 80092d4:	3fc68a28 	.word	0x3fc68a28
 80092d8:	509f79fb 	.word	0x509f79fb
 80092dc:	3fd34413 	.word	0x3fd34413
 80092e0:	0800c21e 	.word	0x0800c21e
 80092e4:	0800c235 	.word	0x0800c235
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	0800c21a 	.word	0x0800c21a
 80092f0:	0800c211 	.word	0x0800c211
 80092f4:	0800c09d 	.word	0x0800c09d
 80092f8:	3ff80000 	.word	0x3ff80000
 80092fc:	0800c3a0 	.word	0x0800c3a0
 8009300:	0800c290 	.word	0x0800c290
 8009304:	2501      	movs	r5, #1
 8009306:	2300      	movs	r3, #0
 8009308:	9306      	str	r3, [sp, #24]
 800930a:	9508      	str	r5, [sp, #32]
 800930c:	f04f 33ff 	mov.w	r3, #4294967295
 8009310:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009314:	2200      	movs	r2, #0
 8009316:	2312      	movs	r3, #18
 8009318:	e7b0      	b.n	800927c <_dtoa_r+0x26c>
 800931a:	2301      	movs	r3, #1
 800931c:	9308      	str	r3, [sp, #32]
 800931e:	e7f5      	b.n	800930c <_dtoa_r+0x2fc>
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009326:	e7b8      	b.n	800929a <_dtoa_r+0x28a>
 8009328:	3101      	adds	r1, #1
 800932a:	6041      	str	r1, [r0, #4]
 800932c:	0052      	lsls	r2, r2, #1
 800932e:	e7b8      	b.n	80092a2 <_dtoa_r+0x292>
 8009330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009332:	9a01      	ldr	r2, [sp, #4]
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	9b03      	ldr	r3, [sp, #12]
 8009338:	2b0e      	cmp	r3, #14
 800933a:	f200 809d 	bhi.w	8009478 <_dtoa_r+0x468>
 800933e:	2d00      	cmp	r5, #0
 8009340:	f000 809a 	beq.w	8009478 <_dtoa_r+0x468>
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	dd32      	ble.n	80093b0 <_dtoa_r+0x3a0>
 800934a:	4ab7      	ldr	r2, [pc, #732]	; (8009628 <_dtoa_r+0x618>)
 800934c:	f003 030f 	and.w	r3, r3, #15
 8009350:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	05d8      	lsls	r0, r3, #23
 800935c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009360:	d516      	bpl.n	8009390 <_dtoa_r+0x380>
 8009362:	4bb2      	ldr	r3, [pc, #712]	; (800962c <_dtoa_r+0x61c>)
 8009364:	ec51 0b19 	vmov	r0, r1, d9
 8009368:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800936c:	f7f7 fbd6 	bl	8000b1c <__aeabi_ddiv>
 8009370:	f007 070f 	and.w	r7, r7, #15
 8009374:	4682      	mov	sl, r0
 8009376:	468b      	mov	fp, r1
 8009378:	2503      	movs	r5, #3
 800937a:	4eac      	ldr	r6, [pc, #688]	; (800962c <_dtoa_r+0x61c>)
 800937c:	b957      	cbnz	r7, 8009394 <_dtoa_r+0x384>
 800937e:	4642      	mov	r2, r8
 8009380:	464b      	mov	r3, r9
 8009382:	4650      	mov	r0, sl
 8009384:	4659      	mov	r1, fp
 8009386:	f7f7 fbc9 	bl	8000b1c <__aeabi_ddiv>
 800938a:	4682      	mov	sl, r0
 800938c:	468b      	mov	fp, r1
 800938e:	e028      	b.n	80093e2 <_dtoa_r+0x3d2>
 8009390:	2502      	movs	r5, #2
 8009392:	e7f2      	b.n	800937a <_dtoa_r+0x36a>
 8009394:	07f9      	lsls	r1, r7, #31
 8009396:	d508      	bpl.n	80093aa <_dtoa_r+0x39a>
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093a0:	f7f7 fa92 	bl	80008c8 <__aeabi_dmul>
 80093a4:	3501      	adds	r5, #1
 80093a6:	4680      	mov	r8, r0
 80093a8:	4689      	mov	r9, r1
 80093aa:	107f      	asrs	r7, r7, #1
 80093ac:	3608      	adds	r6, #8
 80093ae:	e7e5      	b.n	800937c <_dtoa_r+0x36c>
 80093b0:	f000 809b 	beq.w	80094ea <_dtoa_r+0x4da>
 80093b4:	9b00      	ldr	r3, [sp, #0]
 80093b6:	4f9d      	ldr	r7, [pc, #628]	; (800962c <_dtoa_r+0x61c>)
 80093b8:	425e      	negs	r6, r3
 80093ba:	4b9b      	ldr	r3, [pc, #620]	; (8009628 <_dtoa_r+0x618>)
 80093bc:	f006 020f 	and.w	r2, r6, #15
 80093c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	ec51 0b19 	vmov	r0, r1, d9
 80093cc:	f7f7 fa7c 	bl	80008c8 <__aeabi_dmul>
 80093d0:	1136      	asrs	r6, r6, #4
 80093d2:	4682      	mov	sl, r0
 80093d4:	468b      	mov	fp, r1
 80093d6:	2300      	movs	r3, #0
 80093d8:	2502      	movs	r5, #2
 80093da:	2e00      	cmp	r6, #0
 80093dc:	d17a      	bne.n	80094d4 <_dtoa_r+0x4c4>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1d3      	bne.n	800938a <_dtoa_r+0x37a>
 80093e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8082 	beq.w	80094ee <_dtoa_r+0x4de>
 80093ea:	4b91      	ldr	r3, [pc, #580]	; (8009630 <_dtoa_r+0x620>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	4650      	mov	r0, sl
 80093f0:	4659      	mov	r1, fp
 80093f2:	f7f7 fcdb 	bl	8000dac <__aeabi_dcmplt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d079      	beq.n	80094ee <_dtoa_r+0x4de>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d076      	beq.n	80094ee <_dtoa_r+0x4de>
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	dd36      	ble.n	8009474 <_dtoa_r+0x464>
 8009406:	9b00      	ldr	r3, [sp, #0]
 8009408:	4650      	mov	r0, sl
 800940a:	4659      	mov	r1, fp
 800940c:	1e5f      	subs	r7, r3, #1
 800940e:	2200      	movs	r2, #0
 8009410:	4b88      	ldr	r3, [pc, #544]	; (8009634 <_dtoa_r+0x624>)
 8009412:	f7f7 fa59 	bl	80008c8 <__aeabi_dmul>
 8009416:	9e02      	ldr	r6, [sp, #8]
 8009418:	4682      	mov	sl, r0
 800941a:	468b      	mov	fp, r1
 800941c:	3501      	adds	r5, #1
 800941e:	4628      	mov	r0, r5
 8009420:	f7f7 f9e8 	bl	80007f4 <__aeabi_i2d>
 8009424:	4652      	mov	r2, sl
 8009426:	465b      	mov	r3, fp
 8009428:	f7f7 fa4e 	bl	80008c8 <__aeabi_dmul>
 800942c:	4b82      	ldr	r3, [pc, #520]	; (8009638 <_dtoa_r+0x628>)
 800942e:	2200      	movs	r2, #0
 8009430:	f7f7 f894 	bl	800055c <__adddf3>
 8009434:	46d0      	mov	r8, sl
 8009436:	46d9      	mov	r9, fp
 8009438:	4682      	mov	sl, r0
 800943a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800943e:	2e00      	cmp	r6, #0
 8009440:	d158      	bne.n	80094f4 <_dtoa_r+0x4e4>
 8009442:	4b7e      	ldr	r3, [pc, #504]	; (800963c <_dtoa_r+0x62c>)
 8009444:	2200      	movs	r2, #0
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f7 f885 	bl	8000558 <__aeabi_dsub>
 800944e:	4652      	mov	r2, sl
 8009450:	465b      	mov	r3, fp
 8009452:	4680      	mov	r8, r0
 8009454:	4689      	mov	r9, r1
 8009456:	f7f7 fcc7 	bl	8000de8 <__aeabi_dcmpgt>
 800945a:	2800      	cmp	r0, #0
 800945c:	f040 8295 	bne.w	800998a <_dtoa_r+0x97a>
 8009460:	4652      	mov	r2, sl
 8009462:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f7 fc9f 	bl	8000dac <__aeabi_dcmplt>
 800946e:	2800      	cmp	r0, #0
 8009470:	f040 8289 	bne.w	8009986 <_dtoa_r+0x976>
 8009474:	ec5b ab19 	vmov	sl, fp, d9
 8009478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800947a:	2b00      	cmp	r3, #0
 800947c:	f2c0 8148 	blt.w	8009710 <_dtoa_r+0x700>
 8009480:	9a00      	ldr	r2, [sp, #0]
 8009482:	2a0e      	cmp	r2, #14
 8009484:	f300 8144 	bgt.w	8009710 <_dtoa_r+0x700>
 8009488:	4b67      	ldr	r3, [pc, #412]	; (8009628 <_dtoa_r+0x618>)
 800948a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800948e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	f280 80d5 	bge.w	8009644 <_dtoa_r+0x634>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f300 80d1 	bgt.w	8009644 <_dtoa_r+0x634>
 80094a2:	f040 826f 	bne.w	8009984 <_dtoa_r+0x974>
 80094a6:	4b65      	ldr	r3, [pc, #404]	; (800963c <_dtoa_r+0x62c>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f7 fa0b 	bl	80008c8 <__aeabi_dmul>
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	f7f7 fc8d 	bl	8000dd4 <__aeabi_dcmpge>
 80094ba:	9e03      	ldr	r6, [sp, #12]
 80094bc:	4637      	mov	r7, r6
 80094be:	2800      	cmp	r0, #0
 80094c0:	f040 8245 	bne.w	800994e <_dtoa_r+0x93e>
 80094c4:	9d01      	ldr	r5, [sp, #4]
 80094c6:	2331      	movs	r3, #49	; 0x31
 80094c8:	f805 3b01 	strb.w	r3, [r5], #1
 80094cc:	9b00      	ldr	r3, [sp, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	e240      	b.n	8009956 <_dtoa_r+0x946>
 80094d4:	07f2      	lsls	r2, r6, #31
 80094d6:	d505      	bpl.n	80094e4 <_dtoa_r+0x4d4>
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	f7f7 f9f4 	bl	80008c8 <__aeabi_dmul>
 80094e0:	3501      	adds	r5, #1
 80094e2:	2301      	movs	r3, #1
 80094e4:	1076      	asrs	r6, r6, #1
 80094e6:	3708      	adds	r7, #8
 80094e8:	e777      	b.n	80093da <_dtoa_r+0x3ca>
 80094ea:	2502      	movs	r5, #2
 80094ec:	e779      	b.n	80093e2 <_dtoa_r+0x3d2>
 80094ee:	9f00      	ldr	r7, [sp, #0]
 80094f0:	9e03      	ldr	r6, [sp, #12]
 80094f2:	e794      	b.n	800941e <_dtoa_r+0x40e>
 80094f4:	9901      	ldr	r1, [sp, #4]
 80094f6:	4b4c      	ldr	r3, [pc, #304]	; (8009628 <_dtoa_r+0x618>)
 80094f8:	4431      	add	r1, r6
 80094fa:	910d      	str	r1, [sp, #52]	; 0x34
 80094fc:	9908      	ldr	r1, [sp, #32]
 80094fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009506:	2900      	cmp	r1, #0
 8009508:	d043      	beq.n	8009592 <_dtoa_r+0x582>
 800950a:	494d      	ldr	r1, [pc, #308]	; (8009640 <_dtoa_r+0x630>)
 800950c:	2000      	movs	r0, #0
 800950e:	f7f7 fb05 	bl	8000b1c <__aeabi_ddiv>
 8009512:	4652      	mov	r2, sl
 8009514:	465b      	mov	r3, fp
 8009516:	f7f7 f81f 	bl	8000558 <__aeabi_dsub>
 800951a:	9d01      	ldr	r5, [sp, #4]
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	4649      	mov	r1, r9
 8009522:	4640      	mov	r0, r8
 8009524:	f7f7 fc80 	bl	8000e28 <__aeabi_d2iz>
 8009528:	4606      	mov	r6, r0
 800952a:	f7f7 f963 	bl	80007f4 <__aeabi_i2d>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4640      	mov	r0, r8
 8009534:	4649      	mov	r1, r9
 8009536:	f7f7 f80f 	bl	8000558 <__aeabi_dsub>
 800953a:	3630      	adds	r6, #48	; 0x30
 800953c:	f805 6b01 	strb.w	r6, [r5], #1
 8009540:	4652      	mov	r2, sl
 8009542:	465b      	mov	r3, fp
 8009544:	4680      	mov	r8, r0
 8009546:	4689      	mov	r9, r1
 8009548:	f7f7 fc30 	bl	8000dac <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	d163      	bne.n	8009618 <_dtoa_r+0x608>
 8009550:	4642      	mov	r2, r8
 8009552:	464b      	mov	r3, r9
 8009554:	4936      	ldr	r1, [pc, #216]	; (8009630 <_dtoa_r+0x620>)
 8009556:	2000      	movs	r0, #0
 8009558:	f7f6 fffe 	bl	8000558 <__aeabi_dsub>
 800955c:	4652      	mov	r2, sl
 800955e:	465b      	mov	r3, fp
 8009560:	f7f7 fc24 	bl	8000dac <__aeabi_dcmplt>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 80b5 	bne.w	80096d4 <_dtoa_r+0x6c4>
 800956a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800956c:	429d      	cmp	r5, r3
 800956e:	d081      	beq.n	8009474 <_dtoa_r+0x464>
 8009570:	4b30      	ldr	r3, [pc, #192]	; (8009634 <_dtoa_r+0x624>)
 8009572:	2200      	movs	r2, #0
 8009574:	4650      	mov	r0, sl
 8009576:	4659      	mov	r1, fp
 8009578:	f7f7 f9a6 	bl	80008c8 <__aeabi_dmul>
 800957c:	4b2d      	ldr	r3, [pc, #180]	; (8009634 <_dtoa_r+0x624>)
 800957e:	4682      	mov	sl, r0
 8009580:	468b      	mov	fp, r1
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	2200      	movs	r2, #0
 8009588:	f7f7 f99e 	bl	80008c8 <__aeabi_dmul>
 800958c:	4680      	mov	r8, r0
 800958e:	4689      	mov	r9, r1
 8009590:	e7c6      	b.n	8009520 <_dtoa_r+0x510>
 8009592:	4650      	mov	r0, sl
 8009594:	4659      	mov	r1, fp
 8009596:	f7f7 f997 	bl	80008c8 <__aeabi_dmul>
 800959a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959c:	9d01      	ldr	r5, [sp, #4]
 800959e:	930f      	str	r3, [sp, #60]	; 0x3c
 80095a0:	4682      	mov	sl, r0
 80095a2:	468b      	mov	fp, r1
 80095a4:	4649      	mov	r1, r9
 80095a6:	4640      	mov	r0, r8
 80095a8:	f7f7 fc3e 	bl	8000e28 <__aeabi_d2iz>
 80095ac:	4606      	mov	r6, r0
 80095ae:	f7f7 f921 	bl	80007f4 <__aeabi_i2d>
 80095b2:	3630      	adds	r6, #48	; 0x30
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4640      	mov	r0, r8
 80095ba:	4649      	mov	r1, r9
 80095bc:	f7f6 ffcc 	bl	8000558 <__aeabi_dsub>
 80095c0:	f805 6b01 	strb.w	r6, [r5], #1
 80095c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095c6:	429d      	cmp	r5, r3
 80095c8:	4680      	mov	r8, r0
 80095ca:	4689      	mov	r9, r1
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	d124      	bne.n	800961c <_dtoa_r+0x60c>
 80095d2:	4b1b      	ldr	r3, [pc, #108]	; (8009640 <_dtoa_r+0x630>)
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	f7f6 ffc0 	bl	800055c <__adddf3>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	4640      	mov	r0, r8
 80095e2:	4649      	mov	r1, r9
 80095e4:	f7f7 fc00 	bl	8000de8 <__aeabi_dcmpgt>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d173      	bne.n	80096d4 <_dtoa_r+0x6c4>
 80095ec:	4652      	mov	r2, sl
 80095ee:	465b      	mov	r3, fp
 80095f0:	4913      	ldr	r1, [pc, #76]	; (8009640 <_dtoa_r+0x630>)
 80095f2:	2000      	movs	r0, #0
 80095f4:	f7f6 ffb0 	bl	8000558 <__aeabi_dsub>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4640      	mov	r0, r8
 80095fe:	4649      	mov	r1, r9
 8009600:	f7f7 fbd4 	bl	8000dac <__aeabi_dcmplt>
 8009604:	2800      	cmp	r0, #0
 8009606:	f43f af35 	beq.w	8009474 <_dtoa_r+0x464>
 800960a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800960c:	1e6b      	subs	r3, r5, #1
 800960e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009610:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d0f8      	beq.n	800960a <_dtoa_r+0x5fa>
 8009618:	9700      	str	r7, [sp, #0]
 800961a:	e049      	b.n	80096b0 <_dtoa_r+0x6a0>
 800961c:	4b05      	ldr	r3, [pc, #20]	; (8009634 <_dtoa_r+0x624>)
 800961e:	f7f7 f953 	bl	80008c8 <__aeabi_dmul>
 8009622:	4680      	mov	r8, r0
 8009624:	4689      	mov	r9, r1
 8009626:	e7bd      	b.n	80095a4 <_dtoa_r+0x594>
 8009628:	0800c3a0 	.word	0x0800c3a0
 800962c:	0800c378 	.word	0x0800c378
 8009630:	3ff00000 	.word	0x3ff00000
 8009634:	40240000 	.word	0x40240000
 8009638:	401c0000 	.word	0x401c0000
 800963c:	40140000 	.word	0x40140000
 8009640:	3fe00000 	.word	0x3fe00000
 8009644:	9d01      	ldr	r5, [sp, #4]
 8009646:	4656      	mov	r6, sl
 8009648:	465f      	mov	r7, fp
 800964a:	4642      	mov	r2, r8
 800964c:	464b      	mov	r3, r9
 800964e:	4630      	mov	r0, r6
 8009650:	4639      	mov	r1, r7
 8009652:	f7f7 fa63 	bl	8000b1c <__aeabi_ddiv>
 8009656:	f7f7 fbe7 	bl	8000e28 <__aeabi_d2iz>
 800965a:	4682      	mov	sl, r0
 800965c:	f7f7 f8ca 	bl	80007f4 <__aeabi_i2d>
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	f7f7 f930 	bl	80008c8 <__aeabi_dmul>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4630      	mov	r0, r6
 800966e:	4639      	mov	r1, r7
 8009670:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009674:	f7f6 ff70 	bl	8000558 <__aeabi_dsub>
 8009678:	f805 6b01 	strb.w	r6, [r5], #1
 800967c:	9e01      	ldr	r6, [sp, #4]
 800967e:	9f03      	ldr	r7, [sp, #12]
 8009680:	1bae      	subs	r6, r5, r6
 8009682:	42b7      	cmp	r7, r6
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	d135      	bne.n	80096f6 <_dtoa_r+0x6e6>
 800968a:	f7f6 ff67 	bl	800055c <__adddf3>
 800968e:	4642      	mov	r2, r8
 8009690:	464b      	mov	r3, r9
 8009692:	4606      	mov	r6, r0
 8009694:	460f      	mov	r7, r1
 8009696:	f7f7 fba7 	bl	8000de8 <__aeabi_dcmpgt>
 800969a:	b9d0      	cbnz	r0, 80096d2 <_dtoa_r+0x6c2>
 800969c:	4642      	mov	r2, r8
 800969e:	464b      	mov	r3, r9
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f7 fb78 	bl	8000d98 <__aeabi_dcmpeq>
 80096a8:	b110      	cbz	r0, 80096b0 <_dtoa_r+0x6a0>
 80096aa:	f01a 0f01 	tst.w	sl, #1
 80096ae:	d110      	bne.n	80096d2 <_dtoa_r+0x6c2>
 80096b0:	4620      	mov	r0, r4
 80096b2:	ee18 1a10 	vmov	r1, s16
 80096b6:	f000 fe67 	bl	800a388 <_Bfree>
 80096ba:	2300      	movs	r3, #0
 80096bc:	9800      	ldr	r0, [sp, #0]
 80096be:	702b      	strb	r3, [r5, #0]
 80096c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c2:	3001      	adds	r0, #1
 80096c4:	6018      	str	r0, [r3, #0]
 80096c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f43f acf1 	beq.w	80090b0 <_dtoa_r+0xa0>
 80096ce:	601d      	str	r5, [r3, #0]
 80096d0:	e4ee      	b.n	80090b0 <_dtoa_r+0xa0>
 80096d2:	9f00      	ldr	r7, [sp, #0]
 80096d4:	462b      	mov	r3, r5
 80096d6:	461d      	mov	r5, r3
 80096d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096dc:	2a39      	cmp	r2, #57	; 0x39
 80096de:	d106      	bne.n	80096ee <_dtoa_r+0x6de>
 80096e0:	9a01      	ldr	r2, [sp, #4]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d1f7      	bne.n	80096d6 <_dtoa_r+0x6c6>
 80096e6:	9901      	ldr	r1, [sp, #4]
 80096e8:	2230      	movs	r2, #48	; 0x30
 80096ea:	3701      	adds	r7, #1
 80096ec:	700a      	strb	r2, [r1, #0]
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	3201      	adds	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	e790      	b.n	8009618 <_dtoa_r+0x608>
 80096f6:	4ba6      	ldr	r3, [pc, #664]	; (8009990 <_dtoa_r+0x980>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	f7f7 f8e5 	bl	80008c8 <__aeabi_dmul>
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4606      	mov	r6, r0
 8009704:	460f      	mov	r7, r1
 8009706:	f7f7 fb47 	bl	8000d98 <__aeabi_dcmpeq>
 800970a:	2800      	cmp	r0, #0
 800970c:	d09d      	beq.n	800964a <_dtoa_r+0x63a>
 800970e:	e7cf      	b.n	80096b0 <_dtoa_r+0x6a0>
 8009710:	9a08      	ldr	r2, [sp, #32]
 8009712:	2a00      	cmp	r2, #0
 8009714:	f000 80d7 	beq.w	80098c6 <_dtoa_r+0x8b6>
 8009718:	9a06      	ldr	r2, [sp, #24]
 800971a:	2a01      	cmp	r2, #1
 800971c:	f300 80ba 	bgt.w	8009894 <_dtoa_r+0x884>
 8009720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009722:	2a00      	cmp	r2, #0
 8009724:	f000 80b2 	beq.w	800988c <_dtoa_r+0x87c>
 8009728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800972c:	9e07      	ldr	r6, [sp, #28]
 800972e:	9d04      	ldr	r5, [sp, #16]
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	441a      	add	r2, r3
 8009734:	9204      	str	r2, [sp, #16]
 8009736:	9a05      	ldr	r2, [sp, #20]
 8009738:	2101      	movs	r1, #1
 800973a:	441a      	add	r2, r3
 800973c:	4620      	mov	r0, r4
 800973e:	9205      	str	r2, [sp, #20]
 8009740:	f000 ff24 	bl	800a58c <__i2b>
 8009744:	4607      	mov	r7, r0
 8009746:	2d00      	cmp	r5, #0
 8009748:	dd0c      	ble.n	8009764 <_dtoa_r+0x754>
 800974a:	9b05      	ldr	r3, [sp, #20]
 800974c:	2b00      	cmp	r3, #0
 800974e:	dd09      	ble.n	8009764 <_dtoa_r+0x754>
 8009750:	42ab      	cmp	r3, r5
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	bfa8      	it	ge
 8009756:	462b      	movge	r3, r5
 8009758:	1ad2      	subs	r2, r2, r3
 800975a:	9204      	str	r2, [sp, #16]
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	1aed      	subs	r5, r5, r3
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	9305      	str	r3, [sp, #20]
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	b31b      	cbz	r3, 80097b0 <_dtoa_r+0x7a0>
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80af 	beq.w	80098ce <_dtoa_r+0x8be>
 8009770:	2e00      	cmp	r6, #0
 8009772:	dd13      	ble.n	800979c <_dtoa_r+0x78c>
 8009774:	4639      	mov	r1, r7
 8009776:	4632      	mov	r2, r6
 8009778:	4620      	mov	r0, r4
 800977a:	f000 ffc7 	bl	800a70c <__pow5mult>
 800977e:	ee18 2a10 	vmov	r2, s16
 8009782:	4601      	mov	r1, r0
 8009784:	4607      	mov	r7, r0
 8009786:	4620      	mov	r0, r4
 8009788:	f000 ff16 	bl	800a5b8 <__multiply>
 800978c:	ee18 1a10 	vmov	r1, s16
 8009790:	4680      	mov	r8, r0
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fdf8 	bl	800a388 <_Bfree>
 8009798:	ee08 8a10 	vmov	s16, r8
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	1b9a      	subs	r2, r3, r6
 80097a0:	d006      	beq.n	80097b0 <_dtoa_r+0x7a0>
 80097a2:	ee18 1a10 	vmov	r1, s16
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 ffb0 	bl	800a70c <__pow5mult>
 80097ac:	ee08 0a10 	vmov	s16, r0
 80097b0:	2101      	movs	r1, #1
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 feea 	bl	800a58c <__i2b>
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	4606      	mov	r6, r0
 80097be:	f340 8088 	ble.w	80098d2 <_dtoa_r+0x8c2>
 80097c2:	461a      	mov	r2, r3
 80097c4:	4601      	mov	r1, r0
 80097c6:	4620      	mov	r0, r4
 80097c8:	f000 ffa0 	bl	800a70c <__pow5mult>
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	4606      	mov	r6, r0
 80097d2:	f340 8081 	ble.w	80098d8 <_dtoa_r+0x8c8>
 80097d6:	f04f 0800 	mov.w	r8, #0
 80097da:	6933      	ldr	r3, [r6, #16]
 80097dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097e0:	6918      	ldr	r0, [r3, #16]
 80097e2:	f000 fe83 	bl	800a4ec <__hi0bits>
 80097e6:	f1c0 0020 	rsb	r0, r0, #32
 80097ea:	9b05      	ldr	r3, [sp, #20]
 80097ec:	4418      	add	r0, r3
 80097ee:	f010 001f 	ands.w	r0, r0, #31
 80097f2:	f000 8092 	beq.w	800991a <_dtoa_r+0x90a>
 80097f6:	f1c0 0320 	rsb	r3, r0, #32
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	f340 808a 	ble.w	8009914 <_dtoa_r+0x904>
 8009800:	f1c0 001c 	rsb	r0, r0, #28
 8009804:	9b04      	ldr	r3, [sp, #16]
 8009806:	4403      	add	r3, r0
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	4403      	add	r3, r0
 800980e:	4405      	add	r5, r0
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	dd07      	ble.n	8009828 <_dtoa_r+0x818>
 8009818:	ee18 1a10 	vmov	r1, s16
 800981c:	461a      	mov	r2, r3
 800981e:	4620      	mov	r0, r4
 8009820:	f000 ffce 	bl	800a7c0 <__lshift>
 8009824:	ee08 0a10 	vmov	s16, r0
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	2b00      	cmp	r3, #0
 800982c:	dd05      	ble.n	800983a <_dtoa_r+0x82a>
 800982e:	4631      	mov	r1, r6
 8009830:	461a      	mov	r2, r3
 8009832:	4620      	mov	r0, r4
 8009834:	f000 ffc4 	bl	800a7c0 <__lshift>
 8009838:	4606      	mov	r6, r0
 800983a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d06e      	beq.n	800991e <_dtoa_r+0x90e>
 8009840:	ee18 0a10 	vmov	r0, s16
 8009844:	4631      	mov	r1, r6
 8009846:	f001 f82b 	bl	800a8a0 <__mcmp>
 800984a:	2800      	cmp	r0, #0
 800984c:	da67      	bge.n	800991e <_dtoa_r+0x90e>
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	3b01      	subs	r3, #1
 8009852:	ee18 1a10 	vmov	r1, s16
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	220a      	movs	r2, #10
 800985a:	2300      	movs	r3, #0
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fdb5 	bl	800a3cc <__multadd>
 8009862:	9b08      	ldr	r3, [sp, #32]
 8009864:	ee08 0a10 	vmov	s16, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 81b1 	beq.w	8009bd0 <_dtoa_r+0xbc0>
 800986e:	2300      	movs	r3, #0
 8009870:	4639      	mov	r1, r7
 8009872:	220a      	movs	r2, #10
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fda9 	bl	800a3cc <__multadd>
 800987a:	9b02      	ldr	r3, [sp, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	4607      	mov	r7, r0
 8009880:	f300 808e 	bgt.w	80099a0 <_dtoa_r+0x990>
 8009884:	9b06      	ldr	r3, [sp, #24]
 8009886:	2b02      	cmp	r3, #2
 8009888:	dc51      	bgt.n	800992e <_dtoa_r+0x91e>
 800988a:	e089      	b.n	80099a0 <_dtoa_r+0x990>
 800988c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800988e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009892:	e74b      	b.n	800972c <_dtoa_r+0x71c>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	1e5e      	subs	r6, r3, #1
 8009898:	9b07      	ldr	r3, [sp, #28]
 800989a:	42b3      	cmp	r3, r6
 800989c:	bfbf      	itttt	lt
 800989e:	9b07      	ldrlt	r3, [sp, #28]
 80098a0:	9607      	strlt	r6, [sp, #28]
 80098a2:	1af2      	sublt	r2, r6, r3
 80098a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098a6:	bfb6      	itet	lt
 80098a8:	189b      	addlt	r3, r3, r2
 80098aa:	1b9e      	subge	r6, r3, r6
 80098ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	bfb8      	it	lt
 80098b2:	2600      	movlt	r6, #0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bfb7      	itett	lt
 80098b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098c0:	1a9d      	sublt	r5, r3, r2
 80098c2:	2300      	movlt	r3, #0
 80098c4:	e734      	b.n	8009730 <_dtoa_r+0x720>
 80098c6:	9e07      	ldr	r6, [sp, #28]
 80098c8:	9d04      	ldr	r5, [sp, #16]
 80098ca:	9f08      	ldr	r7, [sp, #32]
 80098cc:	e73b      	b.n	8009746 <_dtoa_r+0x736>
 80098ce:	9a07      	ldr	r2, [sp, #28]
 80098d0:	e767      	b.n	80097a2 <_dtoa_r+0x792>
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	dc18      	bgt.n	800990a <_dtoa_r+0x8fa>
 80098d8:	f1ba 0f00 	cmp.w	sl, #0
 80098dc:	d115      	bne.n	800990a <_dtoa_r+0x8fa>
 80098de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098e2:	b993      	cbnz	r3, 800990a <_dtoa_r+0x8fa>
 80098e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098e8:	0d1b      	lsrs	r3, r3, #20
 80098ea:	051b      	lsls	r3, r3, #20
 80098ec:	b183      	cbz	r3, 8009910 <_dtoa_r+0x900>
 80098ee:	9b04      	ldr	r3, [sp, #16]
 80098f0:	3301      	adds	r3, #1
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	9b05      	ldr	r3, [sp, #20]
 80098f6:	3301      	adds	r3, #1
 80098f8:	9305      	str	r3, [sp, #20]
 80098fa:	f04f 0801 	mov.w	r8, #1
 80098fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009900:	2b00      	cmp	r3, #0
 8009902:	f47f af6a 	bne.w	80097da <_dtoa_r+0x7ca>
 8009906:	2001      	movs	r0, #1
 8009908:	e76f      	b.n	80097ea <_dtoa_r+0x7da>
 800990a:	f04f 0800 	mov.w	r8, #0
 800990e:	e7f6      	b.n	80098fe <_dtoa_r+0x8ee>
 8009910:	4698      	mov	r8, r3
 8009912:	e7f4      	b.n	80098fe <_dtoa_r+0x8ee>
 8009914:	f43f af7d 	beq.w	8009812 <_dtoa_r+0x802>
 8009918:	4618      	mov	r0, r3
 800991a:	301c      	adds	r0, #28
 800991c:	e772      	b.n	8009804 <_dtoa_r+0x7f4>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	dc37      	bgt.n	8009994 <_dtoa_r+0x984>
 8009924:	9b06      	ldr	r3, [sp, #24]
 8009926:	2b02      	cmp	r3, #2
 8009928:	dd34      	ble.n	8009994 <_dtoa_r+0x984>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	9302      	str	r3, [sp, #8]
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	b96b      	cbnz	r3, 800994e <_dtoa_r+0x93e>
 8009932:	4631      	mov	r1, r6
 8009934:	2205      	movs	r2, #5
 8009936:	4620      	mov	r0, r4
 8009938:	f000 fd48 	bl	800a3cc <__multadd>
 800993c:	4601      	mov	r1, r0
 800993e:	4606      	mov	r6, r0
 8009940:	ee18 0a10 	vmov	r0, s16
 8009944:	f000 ffac 	bl	800a8a0 <__mcmp>
 8009948:	2800      	cmp	r0, #0
 800994a:	f73f adbb 	bgt.w	80094c4 <_dtoa_r+0x4b4>
 800994e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009950:	9d01      	ldr	r5, [sp, #4]
 8009952:	43db      	mvns	r3, r3
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	f04f 0800 	mov.w	r8, #0
 800995a:	4631      	mov	r1, r6
 800995c:	4620      	mov	r0, r4
 800995e:	f000 fd13 	bl	800a388 <_Bfree>
 8009962:	2f00      	cmp	r7, #0
 8009964:	f43f aea4 	beq.w	80096b0 <_dtoa_r+0x6a0>
 8009968:	f1b8 0f00 	cmp.w	r8, #0
 800996c:	d005      	beq.n	800997a <_dtoa_r+0x96a>
 800996e:	45b8      	cmp	r8, r7
 8009970:	d003      	beq.n	800997a <_dtoa_r+0x96a>
 8009972:	4641      	mov	r1, r8
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fd07 	bl	800a388 <_Bfree>
 800997a:	4639      	mov	r1, r7
 800997c:	4620      	mov	r0, r4
 800997e:	f000 fd03 	bl	800a388 <_Bfree>
 8009982:	e695      	b.n	80096b0 <_dtoa_r+0x6a0>
 8009984:	2600      	movs	r6, #0
 8009986:	4637      	mov	r7, r6
 8009988:	e7e1      	b.n	800994e <_dtoa_r+0x93e>
 800998a:	9700      	str	r7, [sp, #0]
 800998c:	4637      	mov	r7, r6
 800998e:	e599      	b.n	80094c4 <_dtoa_r+0x4b4>
 8009990:	40240000 	.word	0x40240000
 8009994:	9b08      	ldr	r3, [sp, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 80ca 	beq.w	8009b30 <_dtoa_r+0xb20>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	9302      	str	r3, [sp, #8]
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	dd05      	ble.n	80099b0 <_dtoa_r+0x9a0>
 80099a4:	4639      	mov	r1, r7
 80099a6:	462a      	mov	r2, r5
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 ff09 	bl	800a7c0 <__lshift>
 80099ae:	4607      	mov	r7, r0
 80099b0:	f1b8 0f00 	cmp.w	r8, #0
 80099b4:	d05b      	beq.n	8009a6e <_dtoa_r+0xa5e>
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	4620      	mov	r0, r4
 80099ba:	f000 fca5 	bl	800a308 <_Balloc>
 80099be:	4605      	mov	r5, r0
 80099c0:	b928      	cbnz	r0, 80099ce <_dtoa_r+0x9be>
 80099c2:	4b87      	ldr	r3, [pc, #540]	; (8009be0 <_dtoa_r+0xbd0>)
 80099c4:	4602      	mov	r2, r0
 80099c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099ca:	f7ff bb3b 	b.w	8009044 <_dtoa_r+0x34>
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	3202      	adds	r2, #2
 80099d2:	0092      	lsls	r2, r2, #2
 80099d4:	f107 010c 	add.w	r1, r7, #12
 80099d8:	300c      	adds	r0, #12
 80099da:	f7fd fecf 	bl	800777c <memcpy>
 80099de:	2201      	movs	r2, #1
 80099e0:	4629      	mov	r1, r5
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 feec 	bl	800a7c0 <__lshift>
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	f103 0901 	add.w	r9, r3, #1
 80099ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80099f2:	4413      	add	r3, r2
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	f00a 0301 	and.w	r3, sl, #1
 80099fa:	46b8      	mov	r8, r7
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	4607      	mov	r7, r0
 8009a00:	4631      	mov	r1, r6
 8009a02:	ee18 0a10 	vmov	r0, s16
 8009a06:	f7ff fa77 	bl	8008ef8 <quorem>
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	9002      	str	r0, [sp, #8]
 8009a0e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a12:	ee18 0a10 	vmov	r0, s16
 8009a16:	f000 ff43 	bl	800a8a0 <__mcmp>
 8009a1a:	463a      	mov	r2, r7
 8009a1c:	9003      	str	r0, [sp, #12]
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 ff59 	bl	800a8d8 <__mdiff>
 8009a26:	68c2      	ldr	r2, [r0, #12]
 8009a28:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	bb02      	cbnz	r2, 8009a72 <_dtoa_r+0xa62>
 8009a30:	4601      	mov	r1, r0
 8009a32:	ee18 0a10 	vmov	r0, s16
 8009a36:	f000 ff33 	bl	800a8a0 <__mcmp>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4620      	mov	r0, r4
 8009a40:	9207      	str	r2, [sp, #28]
 8009a42:	f000 fca1 	bl	800a388 <_Bfree>
 8009a46:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a4a:	ea43 0102 	orr.w	r1, r3, r2
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	430b      	orrs	r3, r1
 8009a52:	464d      	mov	r5, r9
 8009a54:	d10f      	bne.n	8009a76 <_dtoa_r+0xa66>
 8009a56:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a5a:	d02a      	beq.n	8009ab2 <_dtoa_r+0xaa2>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd02      	ble.n	8009a68 <_dtoa_r+0xa58>
 8009a62:	9b02      	ldr	r3, [sp, #8]
 8009a64:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a68:	f88b a000 	strb.w	sl, [fp]
 8009a6c:	e775      	b.n	800995a <_dtoa_r+0x94a>
 8009a6e:	4638      	mov	r0, r7
 8009a70:	e7ba      	b.n	80099e8 <_dtoa_r+0x9d8>
 8009a72:	2201      	movs	r2, #1
 8009a74:	e7e2      	b.n	8009a3c <_dtoa_r+0xa2c>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db04      	blt.n	8009a86 <_dtoa_r+0xa76>
 8009a7c:	9906      	ldr	r1, [sp, #24]
 8009a7e:	430b      	orrs	r3, r1
 8009a80:	9904      	ldr	r1, [sp, #16]
 8009a82:	430b      	orrs	r3, r1
 8009a84:	d122      	bne.n	8009acc <_dtoa_r+0xabc>
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	ddee      	ble.n	8009a68 <_dtoa_r+0xa58>
 8009a8a:	ee18 1a10 	vmov	r1, s16
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fe95 	bl	800a7c0 <__lshift>
 8009a96:	4631      	mov	r1, r6
 8009a98:	ee08 0a10 	vmov	s16, r0
 8009a9c:	f000 ff00 	bl	800a8a0 <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	dc03      	bgt.n	8009aac <_dtoa_r+0xa9c>
 8009aa4:	d1e0      	bne.n	8009a68 <_dtoa_r+0xa58>
 8009aa6:	f01a 0f01 	tst.w	sl, #1
 8009aaa:	d0dd      	beq.n	8009a68 <_dtoa_r+0xa58>
 8009aac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ab0:	d1d7      	bne.n	8009a62 <_dtoa_r+0xa52>
 8009ab2:	2339      	movs	r3, #57	; 0x39
 8009ab4:	f88b 3000 	strb.w	r3, [fp]
 8009ab8:	462b      	mov	r3, r5
 8009aba:	461d      	mov	r5, r3
 8009abc:	3b01      	subs	r3, #1
 8009abe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ac2:	2a39      	cmp	r2, #57	; 0x39
 8009ac4:	d071      	beq.n	8009baa <_dtoa_r+0xb9a>
 8009ac6:	3201      	adds	r2, #1
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	e746      	b.n	800995a <_dtoa_r+0x94a>
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	dd07      	ble.n	8009ae0 <_dtoa_r+0xad0>
 8009ad0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ad4:	d0ed      	beq.n	8009ab2 <_dtoa_r+0xaa2>
 8009ad6:	f10a 0301 	add.w	r3, sl, #1
 8009ada:	f88b 3000 	strb.w	r3, [fp]
 8009ade:	e73c      	b.n	800995a <_dtoa_r+0x94a>
 8009ae0:	9b05      	ldr	r3, [sp, #20]
 8009ae2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009ae6:	4599      	cmp	r9, r3
 8009ae8:	d047      	beq.n	8009b7a <_dtoa_r+0xb6a>
 8009aea:	ee18 1a10 	vmov	r1, s16
 8009aee:	2300      	movs	r3, #0
 8009af0:	220a      	movs	r2, #10
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 fc6a 	bl	800a3cc <__multadd>
 8009af8:	45b8      	cmp	r8, r7
 8009afa:	ee08 0a10 	vmov	s16, r0
 8009afe:	f04f 0300 	mov.w	r3, #0
 8009b02:	f04f 020a 	mov.w	r2, #10
 8009b06:	4641      	mov	r1, r8
 8009b08:	4620      	mov	r0, r4
 8009b0a:	d106      	bne.n	8009b1a <_dtoa_r+0xb0a>
 8009b0c:	f000 fc5e 	bl	800a3cc <__multadd>
 8009b10:	4680      	mov	r8, r0
 8009b12:	4607      	mov	r7, r0
 8009b14:	f109 0901 	add.w	r9, r9, #1
 8009b18:	e772      	b.n	8009a00 <_dtoa_r+0x9f0>
 8009b1a:	f000 fc57 	bl	800a3cc <__multadd>
 8009b1e:	4639      	mov	r1, r7
 8009b20:	4680      	mov	r8, r0
 8009b22:	2300      	movs	r3, #0
 8009b24:	220a      	movs	r2, #10
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 fc50 	bl	800a3cc <__multadd>
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	e7f1      	b.n	8009b14 <_dtoa_r+0xb04>
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	9302      	str	r3, [sp, #8]
 8009b34:	9d01      	ldr	r5, [sp, #4]
 8009b36:	ee18 0a10 	vmov	r0, s16
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	f7ff f9dc 	bl	8008ef8 <quorem>
 8009b40:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	f805 ab01 	strb.w	sl, [r5], #1
 8009b4a:	1aea      	subs	r2, r5, r3
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	dd09      	ble.n	8009b66 <_dtoa_r+0xb56>
 8009b52:	ee18 1a10 	vmov	r1, s16
 8009b56:	2300      	movs	r3, #0
 8009b58:	220a      	movs	r2, #10
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f000 fc36 	bl	800a3cc <__multadd>
 8009b60:	ee08 0a10 	vmov	s16, r0
 8009b64:	e7e7      	b.n	8009b36 <_dtoa_r+0xb26>
 8009b66:	9b02      	ldr	r3, [sp, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfc8      	it	gt
 8009b6c:	461d      	movgt	r5, r3
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	bfd8      	it	le
 8009b72:	2501      	movle	r5, #1
 8009b74:	441d      	add	r5, r3
 8009b76:	f04f 0800 	mov.w	r8, #0
 8009b7a:	ee18 1a10 	vmov	r1, s16
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fe1d 	bl	800a7c0 <__lshift>
 8009b86:	4631      	mov	r1, r6
 8009b88:	ee08 0a10 	vmov	s16, r0
 8009b8c:	f000 fe88 	bl	800a8a0 <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dc91      	bgt.n	8009ab8 <_dtoa_r+0xaa8>
 8009b94:	d102      	bne.n	8009b9c <_dtoa_r+0xb8c>
 8009b96:	f01a 0f01 	tst.w	sl, #1
 8009b9a:	d18d      	bne.n	8009ab8 <_dtoa_r+0xaa8>
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	461d      	mov	r5, r3
 8009ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ba4:	2a30      	cmp	r2, #48	; 0x30
 8009ba6:	d0fa      	beq.n	8009b9e <_dtoa_r+0xb8e>
 8009ba8:	e6d7      	b.n	800995a <_dtoa_r+0x94a>
 8009baa:	9a01      	ldr	r2, [sp, #4]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d184      	bne.n	8009aba <_dtoa_r+0xaaa>
 8009bb0:	9b00      	ldr	r3, [sp, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	2331      	movs	r3, #49	; 0x31
 8009bb8:	7013      	strb	r3, [r2, #0]
 8009bba:	e6ce      	b.n	800995a <_dtoa_r+0x94a>
 8009bbc:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <_dtoa_r+0xbd4>)
 8009bbe:	f7ff ba95 	b.w	80090ec <_dtoa_r+0xdc>
 8009bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f47f aa6e 	bne.w	80090a6 <_dtoa_r+0x96>
 8009bca:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <_dtoa_r+0xbd8>)
 8009bcc:	f7ff ba8e 	b.w	80090ec <_dtoa_r+0xdc>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dcae      	bgt.n	8009b34 <_dtoa_r+0xb24>
 8009bd6:	9b06      	ldr	r3, [sp, #24]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	f73f aea8 	bgt.w	800992e <_dtoa_r+0x91e>
 8009bde:	e7a9      	b.n	8009b34 <_dtoa_r+0xb24>
 8009be0:	0800c290 	.word	0x0800c290
 8009be4:	0800c09c 	.word	0x0800c09c
 8009be8:	0800c211 	.word	0x0800c211

08009bec <rshift>:
 8009bec:	6903      	ldr	r3, [r0, #16]
 8009bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bfa:	f100 0414 	add.w	r4, r0, #20
 8009bfe:	dd45      	ble.n	8009c8c <rshift+0xa0>
 8009c00:	f011 011f 	ands.w	r1, r1, #31
 8009c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c0c:	d10c      	bne.n	8009c28 <rshift+0x3c>
 8009c0e:	f100 0710 	add.w	r7, r0, #16
 8009c12:	4629      	mov	r1, r5
 8009c14:	42b1      	cmp	r1, r6
 8009c16:	d334      	bcc.n	8009c82 <rshift+0x96>
 8009c18:	1a9b      	subs	r3, r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	1eea      	subs	r2, r5, #3
 8009c1e:	4296      	cmp	r6, r2
 8009c20:	bf38      	it	cc
 8009c22:	2300      	movcc	r3, #0
 8009c24:	4423      	add	r3, r4
 8009c26:	e015      	b.n	8009c54 <rshift+0x68>
 8009c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c2c:	f1c1 0820 	rsb	r8, r1, #32
 8009c30:	40cf      	lsrs	r7, r1
 8009c32:	f105 0e04 	add.w	lr, r5, #4
 8009c36:	46a1      	mov	r9, r4
 8009c38:	4576      	cmp	r6, lr
 8009c3a:	46f4      	mov	ip, lr
 8009c3c:	d815      	bhi.n	8009c6a <rshift+0x7e>
 8009c3e:	1a9a      	subs	r2, r3, r2
 8009c40:	0092      	lsls	r2, r2, #2
 8009c42:	3a04      	subs	r2, #4
 8009c44:	3501      	adds	r5, #1
 8009c46:	42ae      	cmp	r6, r5
 8009c48:	bf38      	it	cc
 8009c4a:	2200      	movcc	r2, #0
 8009c4c:	18a3      	adds	r3, r4, r2
 8009c4e:	50a7      	str	r7, [r4, r2]
 8009c50:	b107      	cbz	r7, 8009c54 <rshift+0x68>
 8009c52:	3304      	adds	r3, #4
 8009c54:	1b1a      	subs	r2, r3, r4
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c5c:	bf08      	it	eq
 8009c5e:	2300      	moveq	r3, #0
 8009c60:	6102      	str	r2, [r0, #16]
 8009c62:	bf08      	it	eq
 8009c64:	6143      	streq	r3, [r0, #20]
 8009c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	f8dc c000 	ldr.w	ip, [ip]
 8009c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c72:	ea4c 0707 	orr.w	r7, ip, r7
 8009c76:	f849 7b04 	str.w	r7, [r9], #4
 8009c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c7e:	40cf      	lsrs	r7, r1
 8009c80:	e7da      	b.n	8009c38 <rshift+0x4c>
 8009c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c8a:	e7c3      	b.n	8009c14 <rshift+0x28>
 8009c8c:	4623      	mov	r3, r4
 8009c8e:	e7e1      	b.n	8009c54 <rshift+0x68>

08009c90 <__hexdig_fun>:
 8009c90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d802      	bhi.n	8009c9e <__hexdig_fun+0xe>
 8009c98:	3820      	subs	r0, #32
 8009c9a:	b2c0      	uxtb	r0, r0
 8009c9c:	4770      	bx	lr
 8009c9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ca2:	2b05      	cmp	r3, #5
 8009ca4:	d801      	bhi.n	8009caa <__hexdig_fun+0x1a>
 8009ca6:	3847      	subs	r0, #71	; 0x47
 8009ca8:	e7f7      	b.n	8009c9a <__hexdig_fun+0xa>
 8009caa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009cae:	2b05      	cmp	r3, #5
 8009cb0:	d801      	bhi.n	8009cb6 <__hexdig_fun+0x26>
 8009cb2:	3827      	subs	r0, #39	; 0x27
 8009cb4:	e7f1      	b.n	8009c9a <__hexdig_fun+0xa>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	4770      	bx	lr
	...

08009cbc <__gethex>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	ed2d 8b02 	vpush	{d8}
 8009cc4:	b089      	sub	sp, #36	; 0x24
 8009cc6:	ee08 0a10 	vmov	s16, r0
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	4bb4      	ldr	r3, [pc, #720]	; (8009fa0 <__gethex+0x2e4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	468b      	mov	fp, r1
 8009cd6:	4690      	mov	r8, r2
 8009cd8:	f7f6 fbdc 	bl	8000494 <strlen>
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	f8db 2000 	ldr.w	r2, [fp]
 8009ce2:	4403      	add	r3, r0
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	1c93      	adds	r3, r2, #2
 8009cee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cf6:	32fe      	adds	r2, #254	; 0xfe
 8009cf8:	18d1      	adds	r1, r2, r3
 8009cfa:	461f      	mov	r7, r3
 8009cfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d00:	9100      	str	r1, [sp, #0]
 8009d02:	2830      	cmp	r0, #48	; 0x30
 8009d04:	d0f8      	beq.n	8009cf8 <__gethex+0x3c>
 8009d06:	f7ff ffc3 	bl	8009c90 <__hexdig_fun>
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d13a      	bne.n	8009d86 <__gethex+0xca>
 8009d10:	9901      	ldr	r1, [sp, #4]
 8009d12:	4652      	mov	r2, sl
 8009d14:	4638      	mov	r0, r7
 8009d16:	f001 fa29 	bl	800b16c <strncmp>
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d168      	bne.n	8009df2 <__gethex+0x136>
 8009d20:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009d24:	eb07 060a 	add.w	r6, r7, sl
 8009d28:	f7ff ffb2 	bl	8009c90 <__hexdig_fun>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d062      	beq.n	8009df6 <__gethex+0x13a>
 8009d30:	4633      	mov	r3, r6
 8009d32:	7818      	ldrb	r0, [r3, #0]
 8009d34:	2830      	cmp	r0, #48	; 0x30
 8009d36:	461f      	mov	r7, r3
 8009d38:	f103 0301 	add.w	r3, r3, #1
 8009d3c:	d0f9      	beq.n	8009d32 <__gethex+0x76>
 8009d3e:	f7ff ffa7 	bl	8009c90 <__hexdig_fun>
 8009d42:	2301      	movs	r3, #1
 8009d44:	fab0 f480 	clz	r4, r0
 8009d48:	0964      	lsrs	r4, r4, #5
 8009d4a:	4635      	mov	r5, r6
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	463a      	mov	r2, r7
 8009d50:	4616      	mov	r6, r2
 8009d52:	3201      	adds	r2, #1
 8009d54:	7830      	ldrb	r0, [r6, #0]
 8009d56:	f7ff ff9b 	bl	8009c90 <__hexdig_fun>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d1f8      	bne.n	8009d50 <__gethex+0x94>
 8009d5e:	9901      	ldr	r1, [sp, #4]
 8009d60:	4652      	mov	r2, sl
 8009d62:	4630      	mov	r0, r6
 8009d64:	f001 fa02 	bl	800b16c <strncmp>
 8009d68:	b980      	cbnz	r0, 8009d8c <__gethex+0xd0>
 8009d6a:	b94d      	cbnz	r5, 8009d80 <__gethex+0xc4>
 8009d6c:	eb06 050a 	add.w	r5, r6, sl
 8009d70:	462a      	mov	r2, r5
 8009d72:	4616      	mov	r6, r2
 8009d74:	3201      	adds	r2, #1
 8009d76:	7830      	ldrb	r0, [r6, #0]
 8009d78:	f7ff ff8a 	bl	8009c90 <__hexdig_fun>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d1f8      	bne.n	8009d72 <__gethex+0xb6>
 8009d80:	1bad      	subs	r5, r5, r6
 8009d82:	00ad      	lsls	r5, r5, #2
 8009d84:	e004      	b.n	8009d90 <__gethex+0xd4>
 8009d86:	2400      	movs	r4, #0
 8009d88:	4625      	mov	r5, r4
 8009d8a:	e7e0      	b.n	8009d4e <__gethex+0x92>
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	d1f7      	bne.n	8009d80 <__gethex+0xc4>
 8009d90:	7833      	ldrb	r3, [r6, #0]
 8009d92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d96:	2b50      	cmp	r3, #80	; 0x50
 8009d98:	d13b      	bne.n	8009e12 <__gethex+0x156>
 8009d9a:	7873      	ldrb	r3, [r6, #1]
 8009d9c:	2b2b      	cmp	r3, #43	; 0x2b
 8009d9e:	d02c      	beq.n	8009dfa <__gethex+0x13e>
 8009da0:	2b2d      	cmp	r3, #45	; 0x2d
 8009da2:	d02e      	beq.n	8009e02 <__gethex+0x146>
 8009da4:	1c71      	adds	r1, r6, #1
 8009da6:	f04f 0900 	mov.w	r9, #0
 8009daa:	7808      	ldrb	r0, [r1, #0]
 8009dac:	f7ff ff70 	bl	8009c90 <__hexdig_fun>
 8009db0:	1e43      	subs	r3, r0, #1
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b18      	cmp	r3, #24
 8009db6:	d82c      	bhi.n	8009e12 <__gethex+0x156>
 8009db8:	f1a0 0210 	sub.w	r2, r0, #16
 8009dbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009dc0:	f7ff ff66 	bl	8009c90 <__hexdig_fun>
 8009dc4:	1e43      	subs	r3, r0, #1
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b18      	cmp	r3, #24
 8009dca:	d91d      	bls.n	8009e08 <__gethex+0x14c>
 8009dcc:	f1b9 0f00 	cmp.w	r9, #0
 8009dd0:	d000      	beq.n	8009dd4 <__gethex+0x118>
 8009dd2:	4252      	negs	r2, r2
 8009dd4:	4415      	add	r5, r2
 8009dd6:	f8cb 1000 	str.w	r1, [fp]
 8009dda:	b1e4      	cbz	r4, 8009e16 <__gethex+0x15a>
 8009ddc:	9b00      	ldr	r3, [sp, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bf14      	ite	ne
 8009de2:	2700      	movne	r7, #0
 8009de4:	2706      	moveq	r7, #6
 8009de6:	4638      	mov	r0, r7
 8009de8:	b009      	add	sp, #36	; 0x24
 8009dea:	ecbd 8b02 	vpop	{d8}
 8009dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df2:	463e      	mov	r6, r7
 8009df4:	4625      	mov	r5, r4
 8009df6:	2401      	movs	r4, #1
 8009df8:	e7ca      	b.n	8009d90 <__gethex+0xd4>
 8009dfa:	f04f 0900 	mov.w	r9, #0
 8009dfe:	1cb1      	adds	r1, r6, #2
 8009e00:	e7d3      	b.n	8009daa <__gethex+0xee>
 8009e02:	f04f 0901 	mov.w	r9, #1
 8009e06:	e7fa      	b.n	8009dfe <__gethex+0x142>
 8009e08:	230a      	movs	r3, #10
 8009e0a:	fb03 0202 	mla	r2, r3, r2, r0
 8009e0e:	3a10      	subs	r2, #16
 8009e10:	e7d4      	b.n	8009dbc <__gethex+0x100>
 8009e12:	4631      	mov	r1, r6
 8009e14:	e7df      	b.n	8009dd6 <__gethex+0x11a>
 8009e16:	1bf3      	subs	r3, r6, r7
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	2b07      	cmp	r3, #7
 8009e1e:	dc0b      	bgt.n	8009e38 <__gethex+0x17c>
 8009e20:	ee18 0a10 	vmov	r0, s16
 8009e24:	f000 fa70 	bl	800a308 <_Balloc>
 8009e28:	4604      	mov	r4, r0
 8009e2a:	b940      	cbnz	r0, 8009e3e <__gethex+0x182>
 8009e2c:	4b5d      	ldr	r3, [pc, #372]	; (8009fa4 <__gethex+0x2e8>)
 8009e2e:	4602      	mov	r2, r0
 8009e30:	21de      	movs	r1, #222	; 0xde
 8009e32:	485d      	ldr	r0, [pc, #372]	; (8009fa8 <__gethex+0x2ec>)
 8009e34:	f001 f9bc 	bl	800b1b0 <__assert_func>
 8009e38:	3101      	adds	r1, #1
 8009e3a:	105b      	asrs	r3, r3, #1
 8009e3c:	e7ee      	b.n	8009e1c <__gethex+0x160>
 8009e3e:	f100 0914 	add.w	r9, r0, #20
 8009e42:	f04f 0b00 	mov.w	fp, #0
 8009e46:	f1ca 0301 	rsb	r3, sl, #1
 8009e4a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e4e:	f8cd b000 	str.w	fp, [sp]
 8009e52:	9306      	str	r3, [sp, #24]
 8009e54:	42b7      	cmp	r7, r6
 8009e56:	d340      	bcc.n	8009eda <__gethex+0x21e>
 8009e58:	9802      	ldr	r0, [sp, #8]
 8009e5a:	9b00      	ldr	r3, [sp, #0]
 8009e5c:	f840 3b04 	str.w	r3, [r0], #4
 8009e60:	eba0 0009 	sub.w	r0, r0, r9
 8009e64:	1080      	asrs	r0, r0, #2
 8009e66:	0146      	lsls	r6, r0, #5
 8009e68:	6120      	str	r0, [r4, #16]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 fb3e 	bl	800a4ec <__hi0bits>
 8009e70:	1a30      	subs	r0, r6, r0
 8009e72:	f8d8 6000 	ldr.w	r6, [r8]
 8009e76:	42b0      	cmp	r0, r6
 8009e78:	dd63      	ble.n	8009f42 <__gethex+0x286>
 8009e7a:	1b87      	subs	r7, r0, r6
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fee2 	bl	800ac48 <__any_on>
 8009e84:	4682      	mov	sl, r0
 8009e86:	b1a8      	cbz	r0, 8009eb4 <__gethex+0x1f8>
 8009e88:	1e7b      	subs	r3, r7, #1
 8009e8a:	1159      	asrs	r1, r3, #5
 8009e8c:	f003 021f 	and.w	r2, r3, #31
 8009e90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e94:	f04f 0a01 	mov.w	sl, #1
 8009e98:	fa0a f202 	lsl.w	r2, sl, r2
 8009e9c:	420a      	tst	r2, r1
 8009e9e:	d009      	beq.n	8009eb4 <__gethex+0x1f8>
 8009ea0:	4553      	cmp	r3, sl
 8009ea2:	dd05      	ble.n	8009eb0 <__gethex+0x1f4>
 8009ea4:	1eb9      	subs	r1, r7, #2
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fece 	bl	800ac48 <__any_on>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d145      	bne.n	8009f3c <__gethex+0x280>
 8009eb0:	f04f 0a02 	mov.w	sl, #2
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f7ff fe98 	bl	8009bec <rshift>
 8009ebc:	443d      	add	r5, r7
 8009ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ec2:	42ab      	cmp	r3, r5
 8009ec4:	da4c      	bge.n	8009f60 <__gethex+0x2a4>
 8009ec6:	ee18 0a10 	vmov	r0, s16
 8009eca:	4621      	mov	r1, r4
 8009ecc:	f000 fa5c 	bl	800a388 <_Bfree>
 8009ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	27a3      	movs	r7, #163	; 0xa3
 8009ed8:	e785      	b.n	8009de6 <__gethex+0x12a>
 8009eda:	1e73      	subs	r3, r6, #1
 8009edc:	9a05      	ldr	r2, [sp, #20]
 8009ede:	9303      	str	r3, [sp, #12]
 8009ee0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d019      	beq.n	8009f1c <__gethex+0x260>
 8009ee8:	f1bb 0f20 	cmp.w	fp, #32
 8009eec:	d107      	bne.n	8009efe <__gethex+0x242>
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	9a00      	ldr	r2, [sp, #0]
 8009ef2:	f843 2b04 	str.w	r2, [r3], #4
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	469b      	mov	fp, r3
 8009efe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009f02:	f7ff fec5 	bl	8009c90 <__hexdig_fun>
 8009f06:	9b00      	ldr	r3, [sp, #0]
 8009f08:	f000 000f 	and.w	r0, r0, #15
 8009f0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009f10:	4303      	orrs	r3, r0
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	f10b 0b04 	add.w	fp, fp, #4
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	e00d      	b.n	8009f38 <__gethex+0x27c>
 8009f1c:	9b03      	ldr	r3, [sp, #12]
 8009f1e:	9a06      	ldr	r2, [sp, #24]
 8009f20:	4413      	add	r3, r2
 8009f22:	42bb      	cmp	r3, r7
 8009f24:	d3e0      	bcc.n	8009ee8 <__gethex+0x22c>
 8009f26:	4618      	mov	r0, r3
 8009f28:	9901      	ldr	r1, [sp, #4]
 8009f2a:	9307      	str	r3, [sp, #28]
 8009f2c:	4652      	mov	r2, sl
 8009f2e:	f001 f91d 	bl	800b16c <strncmp>
 8009f32:	9b07      	ldr	r3, [sp, #28]
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d1d7      	bne.n	8009ee8 <__gethex+0x22c>
 8009f38:	461e      	mov	r6, r3
 8009f3a:	e78b      	b.n	8009e54 <__gethex+0x198>
 8009f3c:	f04f 0a03 	mov.w	sl, #3
 8009f40:	e7b8      	b.n	8009eb4 <__gethex+0x1f8>
 8009f42:	da0a      	bge.n	8009f5a <__gethex+0x29e>
 8009f44:	1a37      	subs	r7, r6, r0
 8009f46:	4621      	mov	r1, r4
 8009f48:	ee18 0a10 	vmov	r0, s16
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	f000 fc37 	bl	800a7c0 <__lshift>
 8009f52:	1bed      	subs	r5, r5, r7
 8009f54:	4604      	mov	r4, r0
 8009f56:	f100 0914 	add.w	r9, r0, #20
 8009f5a:	f04f 0a00 	mov.w	sl, #0
 8009f5e:	e7ae      	b.n	8009ebe <__gethex+0x202>
 8009f60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f64:	42a8      	cmp	r0, r5
 8009f66:	dd72      	ble.n	800a04e <__gethex+0x392>
 8009f68:	1b45      	subs	r5, r0, r5
 8009f6a:	42ae      	cmp	r6, r5
 8009f6c:	dc36      	bgt.n	8009fdc <__gethex+0x320>
 8009f6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d02a      	beq.n	8009fcc <__gethex+0x310>
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	d02c      	beq.n	8009fd4 <__gethex+0x318>
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d11c      	bne.n	8009fb8 <__gethex+0x2fc>
 8009f7e:	42ae      	cmp	r6, r5
 8009f80:	d11a      	bne.n	8009fb8 <__gethex+0x2fc>
 8009f82:	2e01      	cmp	r6, #1
 8009f84:	d112      	bne.n	8009fac <__gethex+0x2f0>
 8009f86:	9a04      	ldr	r2, [sp, #16]
 8009f88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	2301      	movs	r3, #1
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	f8c9 3000 	str.w	r3, [r9]
 8009f96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f98:	2762      	movs	r7, #98	; 0x62
 8009f9a:	601c      	str	r4, [r3, #0]
 8009f9c:	e723      	b.n	8009de6 <__gethex+0x12a>
 8009f9e:	bf00      	nop
 8009fa0:	0800c308 	.word	0x0800c308
 8009fa4:	0800c290 	.word	0x0800c290
 8009fa8:	0800c2a1 	.word	0x0800c2a1
 8009fac:	1e71      	subs	r1, r6, #1
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 fe4a 	bl	800ac48 <__any_on>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d1e6      	bne.n	8009f86 <__gethex+0x2ca>
 8009fb8:	ee18 0a10 	vmov	r0, s16
 8009fbc:	4621      	mov	r1, r4
 8009fbe:	f000 f9e3 	bl	800a388 <_Bfree>
 8009fc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6013      	str	r3, [r2, #0]
 8009fc8:	2750      	movs	r7, #80	; 0x50
 8009fca:	e70c      	b.n	8009de6 <__gethex+0x12a>
 8009fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f2      	bne.n	8009fb8 <__gethex+0x2fc>
 8009fd2:	e7d8      	b.n	8009f86 <__gethex+0x2ca>
 8009fd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1d5      	bne.n	8009f86 <__gethex+0x2ca>
 8009fda:	e7ed      	b.n	8009fb8 <__gethex+0x2fc>
 8009fdc:	1e6f      	subs	r7, r5, #1
 8009fde:	f1ba 0f00 	cmp.w	sl, #0
 8009fe2:	d131      	bne.n	800a048 <__gethex+0x38c>
 8009fe4:	b127      	cbz	r7, 8009ff0 <__gethex+0x334>
 8009fe6:	4639      	mov	r1, r7
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fe2d 	bl	800ac48 <__any_on>
 8009fee:	4682      	mov	sl, r0
 8009ff0:	117b      	asrs	r3, r7, #5
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ff8:	f007 071f 	and.w	r7, r7, #31
 8009ffc:	fa01 f707 	lsl.w	r7, r1, r7
 800a000:	421f      	tst	r7, r3
 800a002:	4629      	mov	r1, r5
 800a004:	4620      	mov	r0, r4
 800a006:	bf18      	it	ne
 800a008:	f04a 0a02 	orrne.w	sl, sl, #2
 800a00c:	1b76      	subs	r6, r6, r5
 800a00e:	f7ff fded 	bl	8009bec <rshift>
 800a012:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a016:	2702      	movs	r7, #2
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	d048      	beq.n	800a0b0 <__gethex+0x3f4>
 800a01e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a022:	2b02      	cmp	r3, #2
 800a024:	d015      	beq.n	800a052 <__gethex+0x396>
 800a026:	2b03      	cmp	r3, #3
 800a028:	d017      	beq.n	800a05a <__gethex+0x39e>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d109      	bne.n	800a042 <__gethex+0x386>
 800a02e:	f01a 0f02 	tst.w	sl, #2
 800a032:	d006      	beq.n	800a042 <__gethex+0x386>
 800a034:	f8d9 0000 	ldr.w	r0, [r9]
 800a038:	ea4a 0a00 	orr.w	sl, sl, r0
 800a03c:	f01a 0f01 	tst.w	sl, #1
 800a040:	d10e      	bne.n	800a060 <__gethex+0x3a4>
 800a042:	f047 0710 	orr.w	r7, r7, #16
 800a046:	e033      	b.n	800a0b0 <__gethex+0x3f4>
 800a048:	f04f 0a01 	mov.w	sl, #1
 800a04c:	e7d0      	b.n	8009ff0 <__gethex+0x334>
 800a04e:	2701      	movs	r7, #1
 800a050:	e7e2      	b.n	800a018 <__gethex+0x35c>
 800a052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a054:	f1c3 0301 	rsb	r3, r3, #1
 800a058:	9315      	str	r3, [sp, #84]	; 0x54
 800a05a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0f0      	beq.n	800a042 <__gethex+0x386>
 800a060:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a064:	f104 0314 	add.w	r3, r4, #20
 800a068:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a06c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a070:	f04f 0c00 	mov.w	ip, #0
 800a074:	4618      	mov	r0, r3
 800a076:	f853 2b04 	ldr.w	r2, [r3], #4
 800a07a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a07e:	d01c      	beq.n	800a0ba <__gethex+0x3fe>
 800a080:	3201      	adds	r2, #1
 800a082:	6002      	str	r2, [r0, #0]
 800a084:	2f02      	cmp	r7, #2
 800a086:	f104 0314 	add.w	r3, r4, #20
 800a08a:	d13f      	bne.n	800a10c <__gethex+0x450>
 800a08c:	f8d8 2000 	ldr.w	r2, [r8]
 800a090:	3a01      	subs	r2, #1
 800a092:	42b2      	cmp	r2, r6
 800a094:	d10a      	bne.n	800a0ac <__gethex+0x3f0>
 800a096:	1171      	asrs	r1, r6, #5
 800a098:	2201      	movs	r2, #1
 800a09a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a09e:	f006 061f 	and.w	r6, r6, #31
 800a0a2:	fa02 f606 	lsl.w	r6, r2, r6
 800a0a6:	421e      	tst	r6, r3
 800a0a8:	bf18      	it	ne
 800a0aa:	4617      	movne	r7, r2
 800a0ac:	f047 0720 	orr.w	r7, r7, #32
 800a0b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0b2:	601c      	str	r4, [r3, #0]
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	601d      	str	r5, [r3, #0]
 800a0b8:	e695      	b.n	8009de6 <__gethex+0x12a>
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0c0:	d8d8      	bhi.n	800a074 <__gethex+0x3b8>
 800a0c2:	68a3      	ldr	r3, [r4, #8]
 800a0c4:	459b      	cmp	fp, r3
 800a0c6:	db19      	blt.n	800a0fc <__gethex+0x440>
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	ee18 0a10 	vmov	r0, s16
 800a0ce:	3101      	adds	r1, #1
 800a0d0:	f000 f91a 	bl	800a308 <_Balloc>
 800a0d4:	4681      	mov	r9, r0
 800a0d6:	b918      	cbnz	r0, 800a0e0 <__gethex+0x424>
 800a0d8:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <__gethex+0x488>)
 800a0da:	4602      	mov	r2, r0
 800a0dc:	2184      	movs	r1, #132	; 0x84
 800a0de:	e6a8      	b.n	8009e32 <__gethex+0x176>
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	3202      	adds	r2, #2
 800a0e4:	f104 010c 	add.w	r1, r4, #12
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	300c      	adds	r0, #12
 800a0ec:	f7fd fb46 	bl	800777c <memcpy>
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	ee18 0a10 	vmov	r0, s16
 800a0f6:	f000 f947 	bl	800a388 <_Bfree>
 800a0fa:	464c      	mov	r4, r9
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a104:	6122      	str	r2, [r4, #16]
 800a106:	2201      	movs	r2, #1
 800a108:	615a      	str	r2, [r3, #20]
 800a10a:	e7bb      	b.n	800a084 <__gethex+0x3c8>
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	455a      	cmp	r2, fp
 800a110:	dd0b      	ble.n	800a12a <__gethex+0x46e>
 800a112:	2101      	movs	r1, #1
 800a114:	4620      	mov	r0, r4
 800a116:	f7ff fd69 	bl	8009bec <rshift>
 800a11a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a11e:	3501      	adds	r5, #1
 800a120:	42ab      	cmp	r3, r5
 800a122:	f6ff aed0 	blt.w	8009ec6 <__gethex+0x20a>
 800a126:	2701      	movs	r7, #1
 800a128:	e7c0      	b.n	800a0ac <__gethex+0x3f0>
 800a12a:	f016 061f 	ands.w	r6, r6, #31
 800a12e:	d0fa      	beq.n	800a126 <__gethex+0x46a>
 800a130:	4453      	add	r3, sl
 800a132:	f1c6 0620 	rsb	r6, r6, #32
 800a136:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a13a:	f000 f9d7 	bl	800a4ec <__hi0bits>
 800a13e:	42b0      	cmp	r0, r6
 800a140:	dbe7      	blt.n	800a112 <__gethex+0x456>
 800a142:	e7f0      	b.n	800a126 <__gethex+0x46a>
 800a144:	0800c290 	.word	0x0800c290

0800a148 <L_shift>:
 800a148:	f1c2 0208 	rsb	r2, r2, #8
 800a14c:	0092      	lsls	r2, r2, #2
 800a14e:	b570      	push	{r4, r5, r6, lr}
 800a150:	f1c2 0620 	rsb	r6, r2, #32
 800a154:	6843      	ldr	r3, [r0, #4]
 800a156:	6804      	ldr	r4, [r0, #0]
 800a158:	fa03 f506 	lsl.w	r5, r3, r6
 800a15c:	432c      	orrs	r4, r5
 800a15e:	40d3      	lsrs	r3, r2
 800a160:	6004      	str	r4, [r0, #0]
 800a162:	f840 3f04 	str.w	r3, [r0, #4]!
 800a166:	4288      	cmp	r0, r1
 800a168:	d3f4      	bcc.n	800a154 <L_shift+0xc>
 800a16a:	bd70      	pop	{r4, r5, r6, pc}

0800a16c <__match>:
 800a16c:	b530      	push	{r4, r5, lr}
 800a16e:	6803      	ldr	r3, [r0, #0]
 800a170:	3301      	adds	r3, #1
 800a172:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a176:	b914      	cbnz	r4, 800a17e <__match+0x12>
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	2001      	movs	r0, #1
 800a17c:	bd30      	pop	{r4, r5, pc}
 800a17e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a182:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a186:	2d19      	cmp	r5, #25
 800a188:	bf98      	it	ls
 800a18a:	3220      	addls	r2, #32
 800a18c:	42a2      	cmp	r2, r4
 800a18e:	d0f0      	beq.n	800a172 <__match+0x6>
 800a190:	2000      	movs	r0, #0
 800a192:	e7f3      	b.n	800a17c <__match+0x10>

0800a194 <__hexnan>:
 800a194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a198:	680b      	ldr	r3, [r1, #0]
 800a19a:	115e      	asrs	r6, r3, #5
 800a19c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1a0:	f013 031f 	ands.w	r3, r3, #31
 800a1a4:	b087      	sub	sp, #28
 800a1a6:	bf18      	it	ne
 800a1a8:	3604      	addne	r6, #4
 800a1aa:	2500      	movs	r5, #0
 800a1ac:	1f37      	subs	r7, r6, #4
 800a1ae:	4690      	mov	r8, r2
 800a1b0:	6802      	ldr	r2, [r0, #0]
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1ba:	46b9      	mov	r9, r7
 800a1bc:	463c      	mov	r4, r7
 800a1be:	9502      	str	r5, [sp, #8]
 800a1c0:	46ab      	mov	fp, r5
 800a1c2:	7851      	ldrb	r1, [r2, #1]
 800a1c4:	1c53      	adds	r3, r2, #1
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	b341      	cbz	r1, 800a21c <__hexnan+0x88>
 800a1ca:	4608      	mov	r0, r1
 800a1cc:	9205      	str	r2, [sp, #20]
 800a1ce:	9104      	str	r1, [sp, #16]
 800a1d0:	f7ff fd5e 	bl	8009c90 <__hexdig_fun>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d14f      	bne.n	800a278 <__hexnan+0xe4>
 800a1d8:	9904      	ldr	r1, [sp, #16]
 800a1da:	9a05      	ldr	r2, [sp, #20]
 800a1dc:	2920      	cmp	r1, #32
 800a1de:	d818      	bhi.n	800a212 <__hexnan+0x7e>
 800a1e0:	9b02      	ldr	r3, [sp, #8]
 800a1e2:	459b      	cmp	fp, r3
 800a1e4:	dd13      	ble.n	800a20e <__hexnan+0x7a>
 800a1e6:	454c      	cmp	r4, r9
 800a1e8:	d206      	bcs.n	800a1f8 <__hexnan+0x64>
 800a1ea:	2d07      	cmp	r5, #7
 800a1ec:	dc04      	bgt.n	800a1f8 <__hexnan+0x64>
 800a1ee:	462a      	mov	r2, r5
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f7ff ffa8 	bl	800a148 <L_shift>
 800a1f8:	4544      	cmp	r4, r8
 800a1fa:	d950      	bls.n	800a29e <__hexnan+0x10a>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f1a4 0904 	sub.w	r9, r4, #4
 800a202:	f844 3c04 	str.w	r3, [r4, #-4]
 800a206:	f8cd b008 	str.w	fp, [sp, #8]
 800a20a:	464c      	mov	r4, r9
 800a20c:	461d      	mov	r5, r3
 800a20e:	9a03      	ldr	r2, [sp, #12]
 800a210:	e7d7      	b.n	800a1c2 <__hexnan+0x2e>
 800a212:	2929      	cmp	r1, #41	; 0x29
 800a214:	d156      	bne.n	800a2c4 <__hexnan+0x130>
 800a216:	3202      	adds	r2, #2
 800a218:	f8ca 2000 	str.w	r2, [sl]
 800a21c:	f1bb 0f00 	cmp.w	fp, #0
 800a220:	d050      	beq.n	800a2c4 <__hexnan+0x130>
 800a222:	454c      	cmp	r4, r9
 800a224:	d206      	bcs.n	800a234 <__hexnan+0xa0>
 800a226:	2d07      	cmp	r5, #7
 800a228:	dc04      	bgt.n	800a234 <__hexnan+0xa0>
 800a22a:	462a      	mov	r2, r5
 800a22c:	4649      	mov	r1, r9
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff ff8a 	bl	800a148 <L_shift>
 800a234:	4544      	cmp	r4, r8
 800a236:	d934      	bls.n	800a2a2 <__hexnan+0x10e>
 800a238:	f1a8 0204 	sub.w	r2, r8, #4
 800a23c:	4623      	mov	r3, r4
 800a23e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a242:	f842 1f04 	str.w	r1, [r2, #4]!
 800a246:	429f      	cmp	r7, r3
 800a248:	d2f9      	bcs.n	800a23e <__hexnan+0xaa>
 800a24a:	1b3b      	subs	r3, r7, r4
 800a24c:	f023 0303 	bic.w	r3, r3, #3
 800a250:	3304      	adds	r3, #4
 800a252:	3401      	adds	r4, #1
 800a254:	3e03      	subs	r6, #3
 800a256:	42b4      	cmp	r4, r6
 800a258:	bf88      	it	hi
 800a25a:	2304      	movhi	r3, #4
 800a25c:	4443      	add	r3, r8
 800a25e:	2200      	movs	r2, #0
 800a260:	f843 2b04 	str.w	r2, [r3], #4
 800a264:	429f      	cmp	r7, r3
 800a266:	d2fb      	bcs.n	800a260 <__hexnan+0xcc>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	b91b      	cbnz	r3, 800a274 <__hexnan+0xe0>
 800a26c:	4547      	cmp	r7, r8
 800a26e:	d127      	bne.n	800a2c0 <__hexnan+0x12c>
 800a270:	2301      	movs	r3, #1
 800a272:	603b      	str	r3, [r7, #0]
 800a274:	2005      	movs	r0, #5
 800a276:	e026      	b.n	800a2c6 <__hexnan+0x132>
 800a278:	3501      	adds	r5, #1
 800a27a:	2d08      	cmp	r5, #8
 800a27c:	f10b 0b01 	add.w	fp, fp, #1
 800a280:	dd06      	ble.n	800a290 <__hexnan+0xfc>
 800a282:	4544      	cmp	r4, r8
 800a284:	d9c3      	bls.n	800a20e <__hexnan+0x7a>
 800a286:	2300      	movs	r3, #0
 800a288:	f844 3c04 	str.w	r3, [r4, #-4]
 800a28c:	2501      	movs	r5, #1
 800a28e:	3c04      	subs	r4, #4
 800a290:	6822      	ldr	r2, [r4, #0]
 800a292:	f000 000f 	and.w	r0, r0, #15
 800a296:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	e7b7      	b.n	800a20e <__hexnan+0x7a>
 800a29e:	2508      	movs	r5, #8
 800a2a0:	e7b5      	b.n	800a20e <__hexnan+0x7a>
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d0df      	beq.n	800a268 <__hexnan+0xd4>
 800a2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ac:	f1c3 0320 	rsb	r3, r3, #32
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a2b8:	401a      	ands	r2, r3
 800a2ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800a2be:	e7d3      	b.n	800a268 <__hexnan+0xd4>
 800a2c0:	3f04      	subs	r7, #4
 800a2c2:	e7d1      	b.n	800a268 <__hexnan+0xd4>
 800a2c4:	2004      	movs	r0, #4
 800a2c6:	b007      	add	sp, #28
 800a2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2cc <_localeconv_r>:
 800a2cc:	4800      	ldr	r0, [pc, #0]	; (800a2d0 <_localeconv_r+0x4>)
 800a2ce:	4770      	bx	lr
 800a2d0:	200003d0 	.word	0x200003d0

0800a2d4 <malloc>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <malloc+0xc>)
 800a2d6:	4601      	mov	r1, r0
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	f000 bd59 	b.w	800ad90 <_malloc_r>
 800a2de:	bf00      	nop
 800a2e0:	20000278 	.word	0x20000278

0800a2e4 <__ascii_mbtowc>:
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	b901      	cbnz	r1, 800a2ea <__ascii_mbtowc+0x6>
 800a2e8:	a901      	add	r1, sp, #4
 800a2ea:	b142      	cbz	r2, 800a2fe <__ascii_mbtowc+0x1a>
 800a2ec:	b14b      	cbz	r3, 800a302 <__ascii_mbtowc+0x1e>
 800a2ee:	7813      	ldrb	r3, [r2, #0]
 800a2f0:	600b      	str	r3, [r1, #0]
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	1e10      	subs	r0, r2, #0
 800a2f6:	bf18      	it	ne
 800a2f8:	2001      	movne	r0, #1
 800a2fa:	b002      	add	sp, #8
 800a2fc:	4770      	bx	lr
 800a2fe:	4610      	mov	r0, r2
 800a300:	e7fb      	b.n	800a2fa <__ascii_mbtowc+0x16>
 800a302:	f06f 0001 	mvn.w	r0, #1
 800a306:	e7f8      	b.n	800a2fa <__ascii_mbtowc+0x16>

0800a308 <_Balloc>:
 800a308:	b570      	push	{r4, r5, r6, lr}
 800a30a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a30c:	4604      	mov	r4, r0
 800a30e:	460d      	mov	r5, r1
 800a310:	b976      	cbnz	r6, 800a330 <_Balloc+0x28>
 800a312:	2010      	movs	r0, #16
 800a314:	f7ff ffde 	bl	800a2d4 <malloc>
 800a318:	4602      	mov	r2, r0
 800a31a:	6260      	str	r0, [r4, #36]	; 0x24
 800a31c:	b920      	cbnz	r0, 800a328 <_Balloc+0x20>
 800a31e:	4b18      	ldr	r3, [pc, #96]	; (800a380 <_Balloc+0x78>)
 800a320:	4818      	ldr	r0, [pc, #96]	; (800a384 <_Balloc+0x7c>)
 800a322:	2166      	movs	r1, #102	; 0x66
 800a324:	f000 ff44 	bl	800b1b0 <__assert_func>
 800a328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a32c:	6006      	str	r6, [r0, #0]
 800a32e:	60c6      	str	r6, [r0, #12]
 800a330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a332:	68f3      	ldr	r3, [r6, #12]
 800a334:	b183      	cbz	r3, 800a358 <_Balloc+0x50>
 800a336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a33e:	b9b8      	cbnz	r0, 800a370 <_Balloc+0x68>
 800a340:	2101      	movs	r1, #1
 800a342:	fa01 f605 	lsl.w	r6, r1, r5
 800a346:	1d72      	adds	r2, r6, #5
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 fc9d 	bl	800ac8a <_calloc_r>
 800a350:	b160      	cbz	r0, 800a36c <_Balloc+0x64>
 800a352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a356:	e00e      	b.n	800a376 <_Balloc+0x6e>
 800a358:	2221      	movs	r2, #33	; 0x21
 800a35a:	2104      	movs	r1, #4
 800a35c:	4620      	mov	r0, r4
 800a35e:	f000 fc94 	bl	800ac8a <_calloc_r>
 800a362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a364:	60f0      	str	r0, [r6, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e4      	bne.n	800a336 <_Balloc+0x2e>
 800a36c:	2000      	movs	r0, #0
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	6802      	ldr	r2, [r0, #0]
 800a372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a376:	2300      	movs	r3, #0
 800a378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a37c:	e7f7      	b.n	800a36e <_Balloc+0x66>
 800a37e:	bf00      	nop
 800a380:	0800c21e 	.word	0x0800c21e
 800a384:	0800c31c 	.word	0x0800c31c

0800a388 <_Bfree>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b976      	cbnz	r6, 800a3b0 <_Bfree+0x28>
 800a392:	2010      	movs	r0, #16
 800a394:	f7ff ff9e 	bl	800a2d4 <malloc>
 800a398:	4602      	mov	r2, r0
 800a39a:	6268      	str	r0, [r5, #36]	; 0x24
 800a39c:	b920      	cbnz	r0, 800a3a8 <_Bfree+0x20>
 800a39e:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <_Bfree+0x3c>)
 800a3a0:	4809      	ldr	r0, [pc, #36]	; (800a3c8 <_Bfree+0x40>)
 800a3a2:	218a      	movs	r1, #138	; 0x8a
 800a3a4:	f000 ff04 	bl	800b1b0 <__assert_func>
 800a3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ac:	6006      	str	r6, [r0, #0]
 800a3ae:	60c6      	str	r6, [r0, #12]
 800a3b0:	b13c      	cbz	r4, 800a3c2 <_Bfree+0x3a>
 800a3b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3b4:	6862      	ldr	r2, [r4, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3bc:	6021      	str	r1, [r4, #0]
 800a3be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	0800c21e 	.word	0x0800c21e
 800a3c8:	0800c31c 	.word	0x0800c31c

0800a3cc <__multadd>:
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	690d      	ldr	r5, [r1, #16]
 800a3d2:	4607      	mov	r7, r0
 800a3d4:	460c      	mov	r4, r1
 800a3d6:	461e      	mov	r6, r3
 800a3d8:	f101 0c14 	add.w	ip, r1, #20
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f8dc 3000 	ldr.w	r3, [ip]
 800a3e2:	b299      	uxth	r1, r3
 800a3e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a3e8:	0c1e      	lsrs	r6, r3, #16
 800a3ea:	0c0b      	lsrs	r3, r1, #16
 800a3ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a3f0:	b289      	uxth	r1, r1
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3f8:	4285      	cmp	r5, r0
 800a3fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a3fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a402:	dcec      	bgt.n	800a3de <__multadd+0x12>
 800a404:	b30e      	cbz	r6, 800a44a <__multadd+0x7e>
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	42ab      	cmp	r3, r5
 800a40a:	dc19      	bgt.n	800a440 <__multadd+0x74>
 800a40c:	6861      	ldr	r1, [r4, #4]
 800a40e:	4638      	mov	r0, r7
 800a410:	3101      	adds	r1, #1
 800a412:	f7ff ff79 	bl	800a308 <_Balloc>
 800a416:	4680      	mov	r8, r0
 800a418:	b928      	cbnz	r0, 800a426 <__multadd+0x5a>
 800a41a:	4602      	mov	r2, r0
 800a41c:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <__multadd+0x84>)
 800a41e:	480d      	ldr	r0, [pc, #52]	; (800a454 <__multadd+0x88>)
 800a420:	21b5      	movs	r1, #181	; 0xb5
 800a422:	f000 fec5 	bl	800b1b0 <__assert_func>
 800a426:	6922      	ldr	r2, [r4, #16]
 800a428:	3202      	adds	r2, #2
 800a42a:	f104 010c 	add.w	r1, r4, #12
 800a42e:	0092      	lsls	r2, r2, #2
 800a430:	300c      	adds	r0, #12
 800a432:	f7fd f9a3 	bl	800777c <memcpy>
 800a436:	4621      	mov	r1, r4
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff ffa5 	bl	800a388 <_Bfree>
 800a43e:	4644      	mov	r4, r8
 800a440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a444:	3501      	adds	r5, #1
 800a446:	615e      	str	r6, [r3, #20]
 800a448:	6125      	str	r5, [r4, #16]
 800a44a:	4620      	mov	r0, r4
 800a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a450:	0800c290 	.word	0x0800c290
 800a454:	0800c31c 	.word	0x0800c31c

0800a458 <__s2b>:
 800a458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	4615      	mov	r5, r2
 800a460:	461f      	mov	r7, r3
 800a462:	2209      	movs	r2, #9
 800a464:	3308      	adds	r3, #8
 800a466:	4606      	mov	r6, r0
 800a468:	fb93 f3f2 	sdiv	r3, r3, r2
 800a46c:	2100      	movs	r1, #0
 800a46e:	2201      	movs	r2, #1
 800a470:	429a      	cmp	r2, r3
 800a472:	db09      	blt.n	800a488 <__s2b+0x30>
 800a474:	4630      	mov	r0, r6
 800a476:	f7ff ff47 	bl	800a308 <_Balloc>
 800a47a:	b940      	cbnz	r0, 800a48e <__s2b+0x36>
 800a47c:	4602      	mov	r2, r0
 800a47e:	4b19      	ldr	r3, [pc, #100]	; (800a4e4 <__s2b+0x8c>)
 800a480:	4819      	ldr	r0, [pc, #100]	; (800a4e8 <__s2b+0x90>)
 800a482:	21ce      	movs	r1, #206	; 0xce
 800a484:	f000 fe94 	bl	800b1b0 <__assert_func>
 800a488:	0052      	lsls	r2, r2, #1
 800a48a:	3101      	adds	r1, #1
 800a48c:	e7f0      	b.n	800a470 <__s2b+0x18>
 800a48e:	9b08      	ldr	r3, [sp, #32]
 800a490:	6143      	str	r3, [r0, #20]
 800a492:	2d09      	cmp	r5, #9
 800a494:	f04f 0301 	mov.w	r3, #1
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	dd16      	ble.n	800a4ca <__s2b+0x72>
 800a49c:	f104 0909 	add.w	r9, r4, #9
 800a4a0:	46c8      	mov	r8, r9
 800a4a2:	442c      	add	r4, r5
 800a4a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	3b30      	subs	r3, #48	; 0x30
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7ff ff8c 	bl	800a3cc <__multadd>
 800a4b4:	45a0      	cmp	r8, r4
 800a4b6:	d1f5      	bne.n	800a4a4 <__s2b+0x4c>
 800a4b8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4bc:	444c      	add	r4, r9
 800a4be:	1b2d      	subs	r5, r5, r4
 800a4c0:	1963      	adds	r3, r4, r5
 800a4c2:	42bb      	cmp	r3, r7
 800a4c4:	db04      	blt.n	800a4d0 <__s2b+0x78>
 800a4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ca:	340a      	adds	r4, #10
 800a4cc:	2509      	movs	r5, #9
 800a4ce:	e7f6      	b.n	800a4be <__s2b+0x66>
 800a4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	3b30      	subs	r3, #48	; 0x30
 800a4d8:	220a      	movs	r2, #10
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7ff ff76 	bl	800a3cc <__multadd>
 800a4e0:	e7ee      	b.n	800a4c0 <__s2b+0x68>
 800a4e2:	bf00      	nop
 800a4e4:	0800c290 	.word	0x0800c290
 800a4e8:	0800c31c 	.word	0x0800c31c

0800a4ec <__hi0bits>:
 800a4ec:	0c03      	lsrs	r3, r0, #16
 800a4ee:	041b      	lsls	r3, r3, #16
 800a4f0:	b9d3      	cbnz	r3, 800a528 <__hi0bits+0x3c>
 800a4f2:	0400      	lsls	r0, r0, #16
 800a4f4:	2310      	movs	r3, #16
 800a4f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4fa:	bf04      	itt	eq
 800a4fc:	0200      	lsleq	r0, r0, #8
 800a4fe:	3308      	addeq	r3, #8
 800a500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a504:	bf04      	itt	eq
 800a506:	0100      	lsleq	r0, r0, #4
 800a508:	3304      	addeq	r3, #4
 800a50a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a50e:	bf04      	itt	eq
 800a510:	0080      	lsleq	r0, r0, #2
 800a512:	3302      	addeq	r3, #2
 800a514:	2800      	cmp	r0, #0
 800a516:	db05      	blt.n	800a524 <__hi0bits+0x38>
 800a518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a51c:	f103 0301 	add.w	r3, r3, #1
 800a520:	bf08      	it	eq
 800a522:	2320      	moveq	r3, #32
 800a524:	4618      	mov	r0, r3
 800a526:	4770      	bx	lr
 800a528:	2300      	movs	r3, #0
 800a52a:	e7e4      	b.n	800a4f6 <__hi0bits+0xa>

0800a52c <__lo0bits>:
 800a52c:	6803      	ldr	r3, [r0, #0]
 800a52e:	f013 0207 	ands.w	r2, r3, #7
 800a532:	4601      	mov	r1, r0
 800a534:	d00b      	beq.n	800a54e <__lo0bits+0x22>
 800a536:	07da      	lsls	r2, r3, #31
 800a538:	d423      	bmi.n	800a582 <__lo0bits+0x56>
 800a53a:	0798      	lsls	r0, r3, #30
 800a53c:	bf49      	itett	mi
 800a53e:	085b      	lsrmi	r3, r3, #1
 800a540:	089b      	lsrpl	r3, r3, #2
 800a542:	2001      	movmi	r0, #1
 800a544:	600b      	strmi	r3, [r1, #0]
 800a546:	bf5c      	itt	pl
 800a548:	600b      	strpl	r3, [r1, #0]
 800a54a:	2002      	movpl	r0, #2
 800a54c:	4770      	bx	lr
 800a54e:	b298      	uxth	r0, r3
 800a550:	b9a8      	cbnz	r0, 800a57e <__lo0bits+0x52>
 800a552:	0c1b      	lsrs	r3, r3, #16
 800a554:	2010      	movs	r0, #16
 800a556:	b2da      	uxtb	r2, r3
 800a558:	b90a      	cbnz	r2, 800a55e <__lo0bits+0x32>
 800a55a:	3008      	adds	r0, #8
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	071a      	lsls	r2, r3, #28
 800a560:	bf04      	itt	eq
 800a562:	091b      	lsreq	r3, r3, #4
 800a564:	3004      	addeq	r0, #4
 800a566:	079a      	lsls	r2, r3, #30
 800a568:	bf04      	itt	eq
 800a56a:	089b      	lsreq	r3, r3, #2
 800a56c:	3002      	addeq	r0, #2
 800a56e:	07da      	lsls	r2, r3, #31
 800a570:	d403      	bmi.n	800a57a <__lo0bits+0x4e>
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	f100 0001 	add.w	r0, r0, #1
 800a578:	d005      	beq.n	800a586 <__lo0bits+0x5a>
 800a57a:	600b      	str	r3, [r1, #0]
 800a57c:	4770      	bx	lr
 800a57e:	4610      	mov	r0, r2
 800a580:	e7e9      	b.n	800a556 <__lo0bits+0x2a>
 800a582:	2000      	movs	r0, #0
 800a584:	4770      	bx	lr
 800a586:	2020      	movs	r0, #32
 800a588:	4770      	bx	lr
	...

0800a58c <__i2b>:
 800a58c:	b510      	push	{r4, lr}
 800a58e:	460c      	mov	r4, r1
 800a590:	2101      	movs	r1, #1
 800a592:	f7ff feb9 	bl	800a308 <_Balloc>
 800a596:	4602      	mov	r2, r0
 800a598:	b928      	cbnz	r0, 800a5a6 <__i2b+0x1a>
 800a59a:	4b05      	ldr	r3, [pc, #20]	; (800a5b0 <__i2b+0x24>)
 800a59c:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <__i2b+0x28>)
 800a59e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5a2:	f000 fe05 	bl	800b1b0 <__assert_func>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	6144      	str	r4, [r0, #20]
 800a5aa:	6103      	str	r3, [r0, #16]
 800a5ac:	bd10      	pop	{r4, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800c290 	.word	0x0800c290
 800a5b4:	0800c31c 	.word	0x0800c31c

0800a5b8 <__multiply>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	4691      	mov	r9, r2
 800a5be:	690a      	ldr	r2, [r1, #16]
 800a5c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	bfb8      	it	lt
 800a5c8:	460b      	movlt	r3, r1
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	bfbc      	itt	lt
 800a5ce:	464c      	movlt	r4, r9
 800a5d0:	4699      	movlt	r9, r3
 800a5d2:	6927      	ldr	r7, [r4, #16]
 800a5d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5d8:	68a3      	ldr	r3, [r4, #8]
 800a5da:	6861      	ldr	r1, [r4, #4]
 800a5dc:	eb07 060a 	add.w	r6, r7, sl
 800a5e0:	42b3      	cmp	r3, r6
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	bfb8      	it	lt
 800a5e6:	3101      	addlt	r1, #1
 800a5e8:	f7ff fe8e 	bl	800a308 <_Balloc>
 800a5ec:	b930      	cbnz	r0, 800a5fc <__multiply+0x44>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b44      	ldr	r3, [pc, #272]	; (800a704 <__multiply+0x14c>)
 800a5f2:	4845      	ldr	r0, [pc, #276]	; (800a708 <__multiply+0x150>)
 800a5f4:	f240 115d 	movw	r1, #349	; 0x15d
 800a5f8:	f000 fdda 	bl	800b1b0 <__assert_func>
 800a5fc:	f100 0514 	add.w	r5, r0, #20
 800a600:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a604:	462b      	mov	r3, r5
 800a606:	2200      	movs	r2, #0
 800a608:	4543      	cmp	r3, r8
 800a60a:	d321      	bcc.n	800a650 <__multiply+0x98>
 800a60c:	f104 0314 	add.w	r3, r4, #20
 800a610:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a614:	f109 0314 	add.w	r3, r9, #20
 800a618:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a61c:	9202      	str	r2, [sp, #8]
 800a61e:	1b3a      	subs	r2, r7, r4
 800a620:	3a15      	subs	r2, #21
 800a622:	f022 0203 	bic.w	r2, r2, #3
 800a626:	3204      	adds	r2, #4
 800a628:	f104 0115 	add.w	r1, r4, #21
 800a62c:	428f      	cmp	r7, r1
 800a62e:	bf38      	it	cc
 800a630:	2204      	movcc	r2, #4
 800a632:	9201      	str	r2, [sp, #4]
 800a634:	9a02      	ldr	r2, [sp, #8]
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d80c      	bhi.n	800a656 <__multiply+0x9e>
 800a63c:	2e00      	cmp	r6, #0
 800a63e:	dd03      	ble.n	800a648 <__multiply+0x90>
 800a640:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a644:	2b00      	cmp	r3, #0
 800a646:	d05a      	beq.n	800a6fe <__multiply+0x146>
 800a648:	6106      	str	r6, [r0, #16]
 800a64a:	b005      	add	sp, #20
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	f843 2b04 	str.w	r2, [r3], #4
 800a654:	e7d8      	b.n	800a608 <__multiply+0x50>
 800a656:	f8b3 a000 	ldrh.w	sl, [r3]
 800a65a:	f1ba 0f00 	cmp.w	sl, #0
 800a65e:	d024      	beq.n	800a6aa <__multiply+0xf2>
 800a660:	f104 0e14 	add.w	lr, r4, #20
 800a664:	46a9      	mov	r9, r5
 800a666:	f04f 0c00 	mov.w	ip, #0
 800a66a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a66e:	f8d9 1000 	ldr.w	r1, [r9]
 800a672:	fa1f fb82 	uxth.w	fp, r2
 800a676:	b289      	uxth	r1, r1
 800a678:	fb0a 110b 	mla	r1, sl, fp, r1
 800a67c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a680:	f8d9 2000 	ldr.w	r2, [r9]
 800a684:	4461      	add	r1, ip
 800a686:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a68a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a68e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a692:	b289      	uxth	r1, r1
 800a694:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a698:	4577      	cmp	r7, lr
 800a69a:	f849 1b04 	str.w	r1, [r9], #4
 800a69e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6a2:	d8e2      	bhi.n	800a66a <__multiply+0xb2>
 800a6a4:	9a01      	ldr	r2, [sp, #4]
 800a6a6:	f845 c002 	str.w	ip, [r5, r2]
 800a6aa:	9a03      	ldr	r2, [sp, #12]
 800a6ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	f1b9 0f00 	cmp.w	r9, #0
 800a6b6:	d020      	beq.n	800a6fa <__multiply+0x142>
 800a6b8:	6829      	ldr	r1, [r5, #0]
 800a6ba:	f104 0c14 	add.w	ip, r4, #20
 800a6be:	46ae      	mov	lr, r5
 800a6c0:	f04f 0a00 	mov.w	sl, #0
 800a6c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a6c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a6d0:	4492      	add	sl, r2
 800a6d2:	b289      	uxth	r1, r1
 800a6d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a6dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6e0:	f8be 1000 	ldrh.w	r1, [lr]
 800a6e4:	0c12      	lsrs	r2, r2, #16
 800a6e6:	fb09 1102 	mla	r1, r9, r2, r1
 800a6ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6ee:	4567      	cmp	r7, ip
 800a6f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6f4:	d8e6      	bhi.n	800a6c4 <__multiply+0x10c>
 800a6f6:	9a01      	ldr	r2, [sp, #4]
 800a6f8:	50a9      	str	r1, [r5, r2]
 800a6fa:	3504      	adds	r5, #4
 800a6fc:	e79a      	b.n	800a634 <__multiply+0x7c>
 800a6fe:	3e01      	subs	r6, #1
 800a700:	e79c      	b.n	800a63c <__multiply+0x84>
 800a702:	bf00      	nop
 800a704:	0800c290 	.word	0x0800c290
 800a708:	0800c31c 	.word	0x0800c31c

0800a70c <__pow5mult>:
 800a70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a710:	4615      	mov	r5, r2
 800a712:	f012 0203 	ands.w	r2, r2, #3
 800a716:	4606      	mov	r6, r0
 800a718:	460f      	mov	r7, r1
 800a71a:	d007      	beq.n	800a72c <__pow5mult+0x20>
 800a71c:	4c25      	ldr	r4, [pc, #148]	; (800a7b4 <__pow5mult+0xa8>)
 800a71e:	3a01      	subs	r2, #1
 800a720:	2300      	movs	r3, #0
 800a722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a726:	f7ff fe51 	bl	800a3cc <__multadd>
 800a72a:	4607      	mov	r7, r0
 800a72c:	10ad      	asrs	r5, r5, #2
 800a72e:	d03d      	beq.n	800a7ac <__pow5mult+0xa0>
 800a730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a732:	b97c      	cbnz	r4, 800a754 <__pow5mult+0x48>
 800a734:	2010      	movs	r0, #16
 800a736:	f7ff fdcd 	bl	800a2d4 <malloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	6270      	str	r0, [r6, #36]	; 0x24
 800a73e:	b928      	cbnz	r0, 800a74c <__pow5mult+0x40>
 800a740:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <__pow5mult+0xac>)
 800a742:	481e      	ldr	r0, [pc, #120]	; (800a7bc <__pow5mult+0xb0>)
 800a744:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a748:	f000 fd32 	bl	800b1b0 <__assert_func>
 800a74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a750:	6004      	str	r4, [r0, #0]
 800a752:	60c4      	str	r4, [r0, #12]
 800a754:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a75c:	b94c      	cbnz	r4, 800a772 <__pow5mult+0x66>
 800a75e:	f240 2171 	movw	r1, #625	; 0x271
 800a762:	4630      	mov	r0, r6
 800a764:	f7ff ff12 	bl	800a58c <__i2b>
 800a768:	2300      	movs	r3, #0
 800a76a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a76e:	4604      	mov	r4, r0
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	f04f 0900 	mov.w	r9, #0
 800a776:	07eb      	lsls	r3, r5, #31
 800a778:	d50a      	bpl.n	800a790 <__pow5mult+0x84>
 800a77a:	4639      	mov	r1, r7
 800a77c:	4622      	mov	r2, r4
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ff1a 	bl	800a5b8 <__multiply>
 800a784:	4639      	mov	r1, r7
 800a786:	4680      	mov	r8, r0
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff fdfd 	bl	800a388 <_Bfree>
 800a78e:	4647      	mov	r7, r8
 800a790:	106d      	asrs	r5, r5, #1
 800a792:	d00b      	beq.n	800a7ac <__pow5mult+0xa0>
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	b938      	cbnz	r0, 800a7a8 <__pow5mult+0x9c>
 800a798:	4622      	mov	r2, r4
 800a79a:	4621      	mov	r1, r4
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7ff ff0b 	bl	800a5b8 <__multiply>
 800a7a2:	6020      	str	r0, [r4, #0]
 800a7a4:	f8c0 9000 	str.w	r9, [r0]
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	e7e4      	b.n	800a776 <__pow5mult+0x6a>
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800c468 	.word	0x0800c468
 800a7b8:	0800c21e 	.word	0x0800c21e
 800a7bc:	0800c31c 	.word	0x0800c31c

0800a7c0 <__lshift>:
 800a7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	6849      	ldr	r1, [r1, #4]
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ce:	68a3      	ldr	r3, [r4, #8]
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4691      	mov	r9, r2
 800a7d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7d8:	f108 0601 	add.w	r6, r8, #1
 800a7dc:	42b3      	cmp	r3, r6
 800a7de:	db0b      	blt.n	800a7f8 <__lshift+0x38>
 800a7e0:	4638      	mov	r0, r7
 800a7e2:	f7ff fd91 	bl	800a308 <_Balloc>
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	b948      	cbnz	r0, 800a7fe <__lshift+0x3e>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4b2a      	ldr	r3, [pc, #168]	; (800a898 <__lshift+0xd8>)
 800a7ee:	482b      	ldr	r0, [pc, #172]	; (800a89c <__lshift+0xdc>)
 800a7f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7f4:	f000 fcdc 	bl	800b1b0 <__assert_func>
 800a7f8:	3101      	adds	r1, #1
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	e7ee      	b.n	800a7dc <__lshift+0x1c>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f100 0114 	add.w	r1, r0, #20
 800a804:	f100 0210 	add.w	r2, r0, #16
 800a808:	4618      	mov	r0, r3
 800a80a:	4553      	cmp	r3, sl
 800a80c:	db37      	blt.n	800a87e <__lshift+0xbe>
 800a80e:	6920      	ldr	r0, [r4, #16]
 800a810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a814:	f104 0314 	add.w	r3, r4, #20
 800a818:	f019 091f 	ands.w	r9, r9, #31
 800a81c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a820:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a824:	d02f      	beq.n	800a886 <__lshift+0xc6>
 800a826:	f1c9 0e20 	rsb	lr, r9, #32
 800a82a:	468a      	mov	sl, r1
 800a82c:	f04f 0c00 	mov.w	ip, #0
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	fa02 f209 	lsl.w	r2, r2, r9
 800a836:	ea42 020c 	orr.w	r2, r2, ip
 800a83a:	f84a 2b04 	str.w	r2, [sl], #4
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	4298      	cmp	r0, r3
 800a844:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a848:	d8f2      	bhi.n	800a830 <__lshift+0x70>
 800a84a:	1b03      	subs	r3, r0, r4
 800a84c:	3b15      	subs	r3, #21
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	3304      	adds	r3, #4
 800a854:	f104 0215 	add.w	r2, r4, #21
 800a858:	4290      	cmp	r0, r2
 800a85a:	bf38      	it	cc
 800a85c:	2304      	movcc	r3, #4
 800a85e:	f841 c003 	str.w	ip, [r1, r3]
 800a862:	f1bc 0f00 	cmp.w	ip, #0
 800a866:	d001      	beq.n	800a86c <__lshift+0xac>
 800a868:	f108 0602 	add.w	r6, r8, #2
 800a86c:	3e01      	subs	r6, #1
 800a86e:	4638      	mov	r0, r7
 800a870:	612e      	str	r6, [r5, #16]
 800a872:	4621      	mov	r1, r4
 800a874:	f7ff fd88 	bl	800a388 <_Bfree>
 800a878:	4628      	mov	r0, r5
 800a87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a882:	3301      	adds	r3, #1
 800a884:	e7c1      	b.n	800a80a <__lshift+0x4a>
 800a886:	3904      	subs	r1, #4
 800a888:	f853 2b04 	ldr.w	r2, [r3], #4
 800a88c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a890:	4298      	cmp	r0, r3
 800a892:	d8f9      	bhi.n	800a888 <__lshift+0xc8>
 800a894:	e7ea      	b.n	800a86c <__lshift+0xac>
 800a896:	bf00      	nop
 800a898:	0800c290 	.word	0x0800c290
 800a89c:	0800c31c 	.word	0x0800c31c

0800a8a0 <__mcmp>:
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	6902      	ldr	r2, [r0, #16]
 800a8a4:	690c      	ldr	r4, [r1, #16]
 800a8a6:	1b12      	subs	r2, r2, r4
 800a8a8:	d10e      	bne.n	800a8c8 <__mcmp+0x28>
 800a8aa:	f100 0314 	add.w	r3, r0, #20
 800a8ae:	3114      	adds	r1, #20
 800a8b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8c0:	42a5      	cmp	r5, r4
 800a8c2:	d003      	beq.n	800a8cc <__mcmp+0x2c>
 800a8c4:	d305      	bcc.n	800a8d2 <__mcmp+0x32>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	bd30      	pop	{r4, r5, pc}
 800a8cc:	4283      	cmp	r3, r0
 800a8ce:	d3f3      	bcc.n	800a8b8 <__mcmp+0x18>
 800a8d0:	e7fa      	b.n	800a8c8 <__mcmp+0x28>
 800a8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d6:	e7f7      	b.n	800a8c8 <__mcmp+0x28>

0800a8d8 <__mdiff>:
 800a8d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	4606      	mov	r6, r0
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4690      	mov	r8, r2
 800a8e6:	f7ff ffdb 	bl	800a8a0 <__mcmp>
 800a8ea:	1e05      	subs	r5, r0, #0
 800a8ec:	d110      	bne.n	800a910 <__mdiff+0x38>
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f7ff fd09 	bl	800a308 <_Balloc>
 800a8f6:	b930      	cbnz	r0, 800a906 <__mdiff+0x2e>
 800a8f8:	4b3a      	ldr	r3, [pc, #232]	; (800a9e4 <__mdiff+0x10c>)
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	f240 2132 	movw	r1, #562	; 0x232
 800a900:	4839      	ldr	r0, [pc, #228]	; (800a9e8 <__mdiff+0x110>)
 800a902:	f000 fc55 	bl	800b1b0 <__assert_func>
 800a906:	2301      	movs	r3, #1
 800a908:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a90c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a910:	bfa4      	itt	ge
 800a912:	4643      	movge	r3, r8
 800a914:	46a0      	movge	r8, r4
 800a916:	4630      	mov	r0, r6
 800a918:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a91c:	bfa6      	itte	ge
 800a91e:	461c      	movge	r4, r3
 800a920:	2500      	movge	r5, #0
 800a922:	2501      	movlt	r5, #1
 800a924:	f7ff fcf0 	bl	800a308 <_Balloc>
 800a928:	b920      	cbnz	r0, 800a934 <__mdiff+0x5c>
 800a92a:	4b2e      	ldr	r3, [pc, #184]	; (800a9e4 <__mdiff+0x10c>)
 800a92c:	4602      	mov	r2, r0
 800a92e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a932:	e7e5      	b.n	800a900 <__mdiff+0x28>
 800a934:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a938:	6926      	ldr	r6, [r4, #16]
 800a93a:	60c5      	str	r5, [r0, #12]
 800a93c:	f104 0914 	add.w	r9, r4, #20
 800a940:	f108 0514 	add.w	r5, r8, #20
 800a944:	f100 0e14 	add.w	lr, r0, #20
 800a948:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a94c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a950:	f108 0210 	add.w	r2, r8, #16
 800a954:	46f2      	mov	sl, lr
 800a956:	2100      	movs	r1, #0
 800a958:	f859 3b04 	ldr.w	r3, [r9], #4
 800a95c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a960:	fa1f f883 	uxth.w	r8, r3
 800a964:	fa11 f18b 	uxtah	r1, r1, fp
 800a968:	0c1b      	lsrs	r3, r3, #16
 800a96a:	eba1 0808 	sub.w	r8, r1, r8
 800a96e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a972:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a976:	fa1f f888 	uxth.w	r8, r8
 800a97a:	1419      	asrs	r1, r3, #16
 800a97c:	454e      	cmp	r6, r9
 800a97e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a982:	f84a 3b04 	str.w	r3, [sl], #4
 800a986:	d8e7      	bhi.n	800a958 <__mdiff+0x80>
 800a988:	1b33      	subs	r3, r6, r4
 800a98a:	3b15      	subs	r3, #21
 800a98c:	f023 0303 	bic.w	r3, r3, #3
 800a990:	3304      	adds	r3, #4
 800a992:	3415      	adds	r4, #21
 800a994:	42a6      	cmp	r6, r4
 800a996:	bf38      	it	cc
 800a998:	2304      	movcc	r3, #4
 800a99a:	441d      	add	r5, r3
 800a99c:	4473      	add	r3, lr
 800a99e:	469e      	mov	lr, r3
 800a9a0:	462e      	mov	r6, r5
 800a9a2:	4566      	cmp	r6, ip
 800a9a4:	d30e      	bcc.n	800a9c4 <__mdiff+0xec>
 800a9a6:	f10c 0203 	add.w	r2, ip, #3
 800a9aa:	1b52      	subs	r2, r2, r5
 800a9ac:	f022 0203 	bic.w	r2, r2, #3
 800a9b0:	3d03      	subs	r5, #3
 800a9b2:	45ac      	cmp	ip, r5
 800a9b4:	bf38      	it	cc
 800a9b6:	2200      	movcc	r2, #0
 800a9b8:	441a      	add	r2, r3
 800a9ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9be:	b17b      	cbz	r3, 800a9e0 <__mdiff+0x108>
 800a9c0:	6107      	str	r7, [r0, #16]
 800a9c2:	e7a3      	b.n	800a90c <__mdiff+0x34>
 800a9c4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9c8:	fa11 f288 	uxtah	r2, r1, r8
 800a9cc:	1414      	asrs	r4, r2, #16
 800a9ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9d2:	b292      	uxth	r2, r2
 800a9d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9d8:	f84e 2b04 	str.w	r2, [lr], #4
 800a9dc:	1421      	asrs	r1, r4, #16
 800a9de:	e7e0      	b.n	800a9a2 <__mdiff+0xca>
 800a9e0:	3f01      	subs	r7, #1
 800a9e2:	e7ea      	b.n	800a9ba <__mdiff+0xe2>
 800a9e4:	0800c290 	.word	0x0800c290
 800a9e8:	0800c31c 	.word	0x0800c31c

0800a9ec <__ulp>:
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	ed8d 0b00 	vstr	d0, [sp]
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	4912      	ldr	r1, [pc, #72]	; (800aa40 <__ulp+0x54>)
 800a9f6:	4019      	ands	r1, r3
 800a9f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	dd05      	ble.n	800aa0c <__ulp+0x20>
 800aa00:	2200      	movs	r2, #0
 800aa02:	460b      	mov	r3, r1
 800aa04:	ec43 2b10 	vmov	d0, r2, r3
 800aa08:	b002      	add	sp, #8
 800aa0a:	4770      	bx	lr
 800aa0c:	4249      	negs	r1, r1
 800aa0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	f04f 0300 	mov.w	r3, #0
 800aa1e:	da04      	bge.n	800aa2a <__ulp+0x3e>
 800aa20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa24:	fa41 f300 	asr.w	r3, r1, r0
 800aa28:	e7ec      	b.n	800aa04 <__ulp+0x18>
 800aa2a:	f1a0 0114 	sub.w	r1, r0, #20
 800aa2e:	291e      	cmp	r1, #30
 800aa30:	bfda      	itte	le
 800aa32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa36:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa3a:	2101      	movgt	r1, #1
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	e7e1      	b.n	800aa04 <__ulp+0x18>
 800aa40:	7ff00000 	.word	0x7ff00000

0800aa44 <__b2d>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	6905      	ldr	r5, [r0, #16]
 800aa48:	f100 0714 	add.w	r7, r0, #20
 800aa4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa50:	1f2e      	subs	r6, r5, #4
 800aa52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff fd48 	bl	800a4ec <__hi0bits>
 800aa5c:	f1c0 0320 	rsb	r3, r0, #32
 800aa60:	280a      	cmp	r0, #10
 800aa62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aae0 <__b2d+0x9c>
 800aa66:	600b      	str	r3, [r1, #0]
 800aa68:	dc14      	bgt.n	800aa94 <__b2d+0x50>
 800aa6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa72:	42b7      	cmp	r7, r6
 800aa74:	ea41 030c 	orr.w	r3, r1, ip
 800aa78:	bf34      	ite	cc
 800aa7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa7e:	2100      	movcs	r1, #0
 800aa80:	3015      	adds	r0, #21
 800aa82:	fa04 f000 	lsl.w	r0, r4, r0
 800aa86:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa8a:	ea40 0201 	orr.w	r2, r0, r1
 800aa8e:	ec43 2b10 	vmov	d0, r2, r3
 800aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa94:	42b7      	cmp	r7, r6
 800aa96:	bf3a      	itte	cc
 800aa98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800aaa0:	2100      	movcs	r1, #0
 800aaa2:	380b      	subs	r0, #11
 800aaa4:	d017      	beq.n	800aad6 <__b2d+0x92>
 800aaa6:	f1c0 0c20 	rsb	ip, r0, #32
 800aaaa:	fa04 f500 	lsl.w	r5, r4, r0
 800aaae:	42be      	cmp	r6, r7
 800aab0:	fa21 f40c 	lsr.w	r4, r1, ip
 800aab4:	ea45 0504 	orr.w	r5, r5, r4
 800aab8:	bf8c      	ite	hi
 800aaba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aabe:	2400      	movls	r4, #0
 800aac0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aac4:	fa01 f000 	lsl.w	r0, r1, r0
 800aac8:	fa24 f40c 	lsr.w	r4, r4, ip
 800aacc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aad0:	ea40 0204 	orr.w	r2, r0, r4
 800aad4:	e7db      	b.n	800aa8e <__b2d+0x4a>
 800aad6:	ea44 030c 	orr.w	r3, r4, ip
 800aada:	460a      	mov	r2, r1
 800aadc:	e7d7      	b.n	800aa8e <__b2d+0x4a>
 800aade:	bf00      	nop
 800aae0:	3ff00000 	.word	0x3ff00000

0800aae4 <__d2b>:
 800aae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4689      	mov	r9, r1
 800aaea:	2101      	movs	r1, #1
 800aaec:	ec57 6b10 	vmov	r6, r7, d0
 800aaf0:	4690      	mov	r8, r2
 800aaf2:	f7ff fc09 	bl	800a308 <_Balloc>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	b930      	cbnz	r0, 800ab08 <__d2b+0x24>
 800aafa:	4602      	mov	r2, r0
 800aafc:	4b25      	ldr	r3, [pc, #148]	; (800ab94 <__d2b+0xb0>)
 800aafe:	4826      	ldr	r0, [pc, #152]	; (800ab98 <__d2b+0xb4>)
 800ab00:	f240 310a 	movw	r1, #778	; 0x30a
 800ab04:	f000 fb54 	bl	800b1b0 <__assert_func>
 800ab08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab10:	bb35      	cbnz	r5, 800ab60 <__d2b+0x7c>
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	d028      	beq.n	800ab6a <__d2b+0x86>
 800ab18:	4668      	mov	r0, sp
 800ab1a:	9600      	str	r6, [sp, #0]
 800ab1c:	f7ff fd06 	bl	800a52c <__lo0bits>
 800ab20:	9900      	ldr	r1, [sp, #0]
 800ab22:	b300      	cbz	r0, 800ab66 <__d2b+0x82>
 800ab24:	9a01      	ldr	r2, [sp, #4]
 800ab26:	f1c0 0320 	rsb	r3, r0, #32
 800ab2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	40c2      	lsrs	r2, r0
 800ab32:	6163      	str	r3, [r4, #20]
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	9b01      	ldr	r3, [sp, #4]
 800ab38:	61a3      	str	r3, [r4, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf14      	ite	ne
 800ab3e:	2202      	movne	r2, #2
 800ab40:	2201      	moveq	r2, #1
 800ab42:	6122      	str	r2, [r4, #16]
 800ab44:	b1d5      	cbz	r5, 800ab7c <__d2b+0x98>
 800ab46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab4a:	4405      	add	r5, r0
 800ab4c:	f8c9 5000 	str.w	r5, [r9]
 800ab50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab54:	f8c8 0000 	str.w	r0, [r8]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	b003      	add	sp, #12
 800ab5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab64:	e7d5      	b.n	800ab12 <__d2b+0x2e>
 800ab66:	6161      	str	r1, [r4, #20]
 800ab68:	e7e5      	b.n	800ab36 <__d2b+0x52>
 800ab6a:	a801      	add	r0, sp, #4
 800ab6c:	f7ff fcde 	bl	800a52c <__lo0bits>
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	6163      	str	r3, [r4, #20]
 800ab74:	2201      	movs	r2, #1
 800ab76:	6122      	str	r2, [r4, #16]
 800ab78:	3020      	adds	r0, #32
 800ab7a:	e7e3      	b.n	800ab44 <__d2b+0x60>
 800ab7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab84:	f8c9 0000 	str.w	r0, [r9]
 800ab88:	6918      	ldr	r0, [r3, #16]
 800ab8a:	f7ff fcaf 	bl	800a4ec <__hi0bits>
 800ab8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab92:	e7df      	b.n	800ab54 <__d2b+0x70>
 800ab94:	0800c290 	.word	0x0800c290
 800ab98:	0800c31c 	.word	0x0800c31c

0800ab9c <__ratio>:
 800ab9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4688      	mov	r8, r1
 800aba2:	4669      	mov	r1, sp
 800aba4:	4681      	mov	r9, r0
 800aba6:	f7ff ff4d 	bl	800aa44 <__b2d>
 800abaa:	a901      	add	r1, sp, #4
 800abac:	4640      	mov	r0, r8
 800abae:	ec55 4b10 	vmov	r4, r5, d0
 800abb2:	f7ff ff47 	bl	800aa44 <__b2d>
 800abb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abbe:	eba3 0c02 	sub.w	ip, r3, r2
 800abc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abc6:	1a9b      	subs	r3, r3, r2
 800abc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abcc:	ec51 0b10 	vmov	r0, r1, d0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	bfd6      	itet	le
 800abd4:	460a      	movle	r2, r1
 800abd6:	462a      	movgt	r2, r5
 800abd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abdc:	468b      	mov	fp, r1
 800abde:	462f      	mov	r7, r5
 800abe0:	bfd4      	ite	le
 800abe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abea:	4620      	mov	r0, r4
 800abec:	ee10 2a10 	vmov	r2, s0
 800abf0:	465b      	mov	r3, fp
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff92 	bl	8000b1c <__aeabi_ddiv>
 800abf8:	ec41 0b10 	vmov	d0, r0, r1
 800abfc:	b003      	add	sp, #12
 800abfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac02 <__copybits>:
 800ac02:	3901      	subs	r1, #1
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	1149      	asrs	r1, r1, #5
 800ac08:	6914      	ldr	r4, [r2, #16]
 800ac0a:	3101      	adds	r1, #1
 800ac0c:	f102 0314 	add.w	r3, r2, #20
 800ac10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac18:	1f05      	subs	r5, r0, #4
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	d30c      	bcc.n	800ac38 <__copybits+0x36>
 800ac1e:	1aa3      	subs	r3, r4, r2
 800ac20:	3b11      	subs	r3, #17
 800ac22:	f023 0303 	bic.w	r3, r3, #3
 800ac26:	3211      	adds	r2, #17
 800ac28:	42a2      	cmp	r2, r4
 800ac2a:	bf88      	it	hi
 800ac2c:	2300      	movhi	r3, #0
 800ac2e:	4418      	add	r0, r3
 800ac30:	2300      	movs	r3, #0
 800ac32:	4288      	cmp	r0, r1
 800ac34:	d305      	bcc.n	800ac42 <__copybits+0x40>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac40:	e7eb      	b.n	800ac1a <__copybits+0x18>
 800ac42:	f840 3b04 	str.w	r3, [r0], #4
 800ac46:	e7f4      	b.n	800ac32 <__copybits+0x30>

0800ac48 <__any_on>:
 800ac48:	f100 0214 	add.w	r2, r0, #20
 800ac4c:	6900      	ldr	r0, [r0, #16]
 800ac4e:	114b      	asrs	r3, r1, #5
 800ac50:	4298      	cmp	r0, r3
 800ac52:	b510      	push	{r4, lr}
 800ac54:	db11      	blt.n	800ac7a <__any_on+0x32>
 800ac56:	dd0a      	ble.n	800ac6e <__any_on+0x26>
 800ac58:	f011 011f 	ands.w	r1, r1, #31
 800ac5c:	d007      	beq.n	800ac6e <__any_on+0x26>
 800ac5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac62:	fa24 f001 	lsr.w	r0, r4, r1
 800ac66:	fa00 f101 	lsl.w	r1, r0, r1
 800ac6a:	428c      	cmp	r4, r1
 800ac6c:	d10b      	bne.n	800ac86 <__any_on+0x3e>
 800ac6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d803      	bhi.n	800ac7e <__any_on+0x36>
 800ac76:	2000      	movs	r0, #0
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	e7f7      	b.n	800ac6e <__any_on+0x26>
 800ac7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac82:	2900      	cmp	r1, #0
 800ac84:	d0f5      	beq.n	800ac72 <__any_on+0x2a>
 800ac86:	2001      	movs	r0, #1
 800ac88:	e7f6      	b.n	800ac78 <__any_on+0x30>

0800ac8a <_calloc_r>:
 800ac8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8c:	fba1 2402 	umull	r2, r4, r1, r2
 800ac90:	b94c      	cbnz	r4, 800aca6 <_calloc_r+0x1c>
 800ac92:	4611      	mov	r1, r2
 800ac94:	9201      	str	r2, [sp, #4]
 800ac96:	f000 f87b 	bl	800ad90 <_malloc_r>
 800ac9a:	9a01      	ldr	r2, [sp, #4]
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	b930      	cbnz	r0, 800acae <_calloc_r+0x24>
 800aca0:	4628      	mov	r0, r5
 800aca2:	b003      	add	sp, #12
 800aca4:	bd30      	pop	{r4, r5, pc}
 800aca6:	220c      	movs	r2, #12
 800aca8:	6002      	str	r2, [r0, #0]
 800acaa:	2500      	movs	r5, #0
 800acac:	e7f8      	b.n	800aca0 <_calloc_r+0x16>
 800acae:	4621      	mov	r1, r4
 800acb0:	f7fc fd72 	bl	8007798 <memset>
 800acb4:	e7f4      	b.n	800aca0 <_calloc_r+0x16>
	...

0800acb8 <_free_r>:
 800acb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acba:	2900      	cmp	r1, #0
 800acbc:	d044      	beq.n	800ad48 <_free_r+0x90>
 800acbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc2:	9001      	str	r0, [sp, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f1a1 0404 	sub.w	r4, r1, #4
 800acca:	bfb8      	it	lt
 800accc:	18e4      	addlt	r4, r4, r3
 800acce:	f000 fab9 	bl	800b244 <__malloc_lock>
 800acd2:	4a1e      	ldr	r2, [pc, #120]	; (800ad4c <_free_r+0x94>)
 800acd4:	9801      	ldr	r0, [sp, #4]
 800acd6:	6813      	ldr	r3, [r2, #0]
 800acd8:	b933      	cbnz	r3, 800ace8 <_free_r+0x30>
 800acda:	6063      	str	r3, [r4, #4]
 800acdc:	6014      	str	r4, [r2, #0]
 800acde:	b003      	add	sp, #12
 800ace0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace4:	f000 bab4 	b.w	800b250 <__malloc_unlock>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d908      	bls.n	800acfe <_free_r+0x46>
 800acec:	6825      	ldr	r5, [r4, #0]
 800acee:	1961      	adds	r1, r4, r5
 800acf0:	428b      	cmp	r3, r1
 800acf2:	bf01      	itttt	eq
 800acf4:	6819      	ldreq	r1, [r3, #0]
 800acf6:	685b      	ldreq	r3, [r3, #4]
 800acf8:	1949      	addeq	r1, r1, r5
 800acfa:	6021      	streq	r1, [r4, #0]
 800acfc:	e7ed      	b.n	800acda <_free_r+0x22>
 800acfe:	461a      	mov	r2, r3
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	b10b      	cbz	r3, 800ad08 <_free_r+0x50>
 800ad04:	42a3      	cmp	r3, r4
 800ad06:	d9fa      	bls.n	800acfe <_free_r+0x46>
 800ad08:	6811      	ldr	r1, [r2, #0]
 800ad0a:	1855      	adds	r5, r2, r1
 800ad0c:	42a5      	cmp	r5, r4
 800ad0e:	d10b      	bne.n	800ad28 <_free_r+0x70>
 800ad10:	6824      	ldr	r4, [r4, #0]
 800ad12:	4421      	add	r1, r4
 800ad14:	1854      	adds	r4, r2, r1
 800ad16:	42a3      	cmp	r3, r4
 800ad18:	6011      	str	r1, [r2, #0]
 800ad1a:	d1e0      	bne.n	800acde <_free_r+0x26>
 800ad1c:	681c      	ldr	r4, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	6053      	str	r3, [r2, #4]
 800ad22:	4421      	add	r1, r4
 800ad24:	6011      	str	r1, [r2, #0]
 800ad26:	e7da      	b.n	800acde <_free_r+0x26>
 800ad28:	d902      	bls.n	800ad30 <_free_r+0x78>
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	6003      	str	r3, [r0, #0]
 800ad2e:	e7d6      	b.n	800acde <_free_r+0x26>
 800ad30:	6825      	ldr	r5, [r4, #0]
 800ad32:	1961      	adds	r1, r4, r5
 800ad34:	428b      	cmp	r3, r1
 800ad36:	bf04      	itt	eq
 800ad38:	6819      	ldreq	r1, [r3, #0]
 800ad3a:	685b      	ldreq	r3, [r3, #4]
 800ad3c:	6063      	str	r3, [r4, #4]
 800ad3e:	bf04      	itt	eq
 800ad40:	1949      	addeq	r1, r1, r5
 800ad42:	6021      	streq	r1, [r4, #0]
 800ad44:	6054      	str	r4, [r2, #4]
 800ad46:	e7ca      	b.n	800acde <_free_r+0x26>
 800ad48:	b003      	add	sp, #12
 800ad4a:	bd30      	pop	{r4, r5, pc}
 800ad4c:	2000134c 	.word	0x2000134c

0800ad50 <sbrk_aligned>:
 800ad50:	b570      	push	{r4, r5, r6, lr}
 800ad52:	4e0e      	ldr	r6, [pc, #56]	; (800ad8c <sbrk_aligned+0x3c>)
 800ad54:	460c      	mov	r4, r1
 800ad56:	6831      	ldr	r1, [r6, #0]
 800ad58:	4605      	mov	r5, r0
 800ad5a:	b911      	cbnz	r1, 800ad62 <sbrk_aligned+0x12>
 800ad5c:	f000 f9f0 	bl	800b140 <_sbrk_r>
 800ad60:	6030      	str	r0, [r6, #0]
 800ad62:	4621      	mov	r1, r4
 800ad64:	4628      	mov	r0, r5
 800ad66:	f000 f9eb 	bl	800b140 <_sbrk_r>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d00a      	beq.n	800ad84 <sbrk_aligned+0x34>
 800ad6e:	1cc4      	adds	r4, r0, #3
 800ad70:	f024 0403 	bic.w	r4, r4, #3
 800ad74:	42a0      	cmp	r0, r4
 800ad76:	d007      	beq.n	800ad88 <sbrk_aligned+0x38>
 800ad78:	1a21      	subs	r1, r4, r0
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	f000 f9e0 	bl	800b140 <_sbrk_r>
 800ad80:	3001      	adds	r0, #1
 800ad82:	d101      	bne.n	800ad88 <sbrk_aligned+0x38>
 800ad84:	f04f 34ff 	mov.w	r4, #4294967295
 800ad88:	4620      	mov	r0, r4
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	20001350 	.word	0x20001350

0800ad90 <_malloc_r>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	1ccd      	adds	r5, r1, #3
 800ad96:	f025 0503 	bic.w	r5, r5, #3
 800ad9a:	3508      	adds	r5, #8
 800ad9c:	2d0c      	cmp	r5, #12
 800ad9e:	bf38      	it	cc
 800ada0:	250c      	movcc	r5, #12
 800ada2:	2d00      	cmp	r5, #0
 800ada4:	4607      	mov	r7, r0
 800ada6:	db01      	blt.n	800adac <_malloc_r+0x1c>
 800ada8:	42a9      	cmp	r1, r5
 800adaa:	d905      	bls.n	800adb8 <_malloc_r+0x28>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	2600      	movs	r6, #0
 800adb2:	4630      	mov	r0, r6
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	4e2e      	ldr	r6, [pc, #184]	; (800ae74 <_malloc_r+0xe4>)
 800adba:	f000 fa43 	bl	800b244 <__malloc_lock>
 800adbe:	6833      	ldr	r3, [r6, #0]
 800adc0:	461c      	mov	r4, r3
 800adc2:	bb34      	cbnz	r4, 800ae12 <_malloc_r+0x82>
 800adc4:	4629      	mov	r1, r5
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7ff ffc2 	bl	800ad50 <sbrk_aligned>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	4604      	mov	r4, r0
 800add0:	d14d      	bne.n	800ae6e <_malloc_r+0xde>
 800add2:	6834      	ldr	r4, [r6, #0]
 800add4:	4626      	mov	r6, r4
 800add6:	2e00      	cmp	r6, #0
 800add8:	d140      	bne.n	800ae5c <_malloc_r+0xcc>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	4631      	mov	r1, r6
 800adde:	4638      	mov	r0, r7
 800ade0:	eb04 0803 	add.w	r8, r4, r3
 800ade4:	f000 f9ac 	bl	800b140 <_sbrk_r>
 800ade8:	4580      	cmp	r8, r0
 800adea:	d13a      	bne.n	800ae62 <_malloc_r+0xd2>
 800adec:	6821      	ldr	r1, [r4, #0]
 800adee:	3503      	adds	r5, #3
 800adf0:	1a6d      	subs	r5, r5, r1
 800adf2:	f025 0503 	bic.w	r5, r5, #3
 800adf6:	3508      	adds	r5, #8
 800adf8:	2d0c      	cmp	r5, #12
 800adfa:	bf38      	it	cc
 800adfc:	250c      	movcc	r5, #12
 800adfe:	4629      	mov	r1, r5
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7ff ffa5 	bl	800ad50 <sbrk_aligned>
 800ae06:	3001      	adds	r0, #1
 800ae08:	d02b      	beq.n	800ae62 <_malloc_r+0xd2>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	442b      	add	r3, r5
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	e00e      	b.n	800ae30 <_malloc_r+0xa0>
 800ae12:	6822      	ldr	r2, [r4, #0]
 800ae14:	1b52      	subs	r2, r2, r5
 800ae16:	d41e      	bmi.n	800ae56 <_malloc_r+0xc6>
 800ae18:	2a0b      	cmp	r2, #11
 800ae1a:	d916      	bls.n	800ae4a <_malloc_r+0xba>
 800ae1c:	1961      	adds	r1, r4, r5
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	6025      	str	r5, [r4, #0]
 800ae22:	bf18      	it	ne
 800ae24:	6059      	strne	r1, [r3, #4]
 800ae26:	6863      	ldr	r3, [r4, #4]
 800ae28:	bf08      	it	eq
 800ae2a:	6031      	streq	r1, [r6, #0]
 800ae2c:	5162      	str	r2, [r4, r5]
 800ae2e:	604b      	str	r3, [r1, #4]
 800ae30:	4638      	mov	r0, r7
 800ae32:	f104 060b 	add.w	r6, r4, #11
 800ae36:	f000 fa0b 	bl	800b250 <__malloc_unlock>
 800ae3a:	f026 0607 	bic.w	r6, r6, #7
 800ae3e:	1d23      	adds	r3, r4, #4
 800ae40:	1af2      	subs	r2, r6, r3
 800ae42:	d0b6      	beq.n	800adb2 <_malloc_r+0x22>
 800ae44:	1b9b      	subs	r3, r3, r6
 800ae46:	50a3      	str	r3, [r4, r2]
 800ae48:	e7b3      	b.n	800adb2 <_malloc_r+0x22>
 800ae4a:	6862      	ldr	r2, [r4, #4]
 800ae4c:	42a3      	cmp	r3, r4
 800ae4e:	bf0c      	ite	eq
 800ae50:	6032      	streq	r2, [r6, #0]
 800ae52:	605a      	strne	r2, [r3, #4]
 800ae54:	e7ec      	b.n	800ae30 <_malloc_r+0xa0>
 800ae56:	4623      	mov	r3, r4
 800ae58:	6864      	ldr	r4, [r4, #4]
 800ae5a:	e7b2      	b.n	800adc2 <_malloc_r+0x32>
 800ae5c:	4634      	mov	r4, r6
 800ae5e:	6876      	ldr	r6, [r6, #4]
 800ae60:	e7b9      	b.n	800add6 <_malloc_r+0x46>
 800ae62:	230c      	movs	r3, #12
 800ae64:	603b      	str	r3, [r7, #0]
 800ae66:	4638      	mov	r0, r7
 800ae68:	f000 f9f2 	bl	800b250 <__malloc_unlock>
 800ae6c:	e7a1      	b.n	800adb2 <_malloc_r+0x22>
 800ae6e:	6025      	str	r5, [r4, #0]
 800ae70:	e7de      	b.n	800ae30 <_malloc_r+0xa0>
 800ae72:	bf00      	nop
 800ae74:	2000134c 	.word	0x2000134c

0800ae78 <__ssputs_r>:
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	688e      	ldr	r6, [r1, #8]
 800ae7e:	429e      	cmp	r6, r3
 800ae80:	4682      	mov	sl, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4690      	mov	r8, r2
 800ae86:	461f      	mov	r7, r3
 800ae88:	d838      	bhi.n	800aefc <__ssputs_r+0x84>
 800ae8a:	898a      	ldrh	r2, [r1, #12]
 800ae8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae90:	d032      	beq.n	800aef8 <__ssputs_r+0x80>
 800ae92:	6825      	ldr	r5, [r4, #0]
 800ae94:	6909      	ldr	r1, [r1, #16]
 800ae96:	eba5 0901 	sub.w	r9, r5, r1
 800ae9a:	6965      	ldr	r5, [r4, #20]
 800ae9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aea4:	3301      	adds	r3, #1
 800aea6:	444b      	add	r3, r9
 800aea8:	106d      	asrs	r5, r5, #1
 800aeaa:	429d      	cmp	r5, r3
 800aeac:	bf38      	it	cc
 800aeae:	461d      	movcc	r5, r3
 800aeb0:	0553      	lsls	r3, r2, #21
 800aeb2:	d531      	bpl.n	800af18 <__ssputs_r+0xa0>
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7ff ff6b 	bl	800ad90 <_malloc_r>
 800aeba:	4606      	mov	r6, r0
 800aebc:	b950      	cbnz	r0, 800aed4 <__ssputs_r+0x5c>
 800aebe:	230c      	movs	r3, #12
 800aec0:	f8ca 3000 	str.w	r3, [sl]
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed4:	6921      	ldr	r1, [r4, #16]
 800aed6:	464a      	mov	r2, r9
 800aed8:	f7fc fc50 	bl	800777c <memcpy>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	6126      	str	r6, [r4, #16]
 800aeea:	6165      	str	r5, [r4, #20]
 800aeec:	444e      	add	r6, r9
 800aeee:	eba5 0509 	sub.w	r5, r5, r9
 800aef2:	6026      	str	r6, [r4, #0]
 800aef4:	60a5      	str	r5, [r4, #8]
 800aef6:	463e      	mov	r6, r7
 800aef8:	42be      	cmp	r6, r7
 800aefa:	d900      	bls.n	800aefe <__ssputs_r+0x86>
 800aefc:	463e      	mov	r6, r7
 800aefe:	6820      	ldr	r0, [r4, #0]
 800af00:	4632      	mov	r2, r6
 800af02:	4641      	mov	r1, r8
 800af04:	f000 f984 	bl	800b210 <memmove>
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	1b9b      	subs	r3, r3, r6
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	4433      	add	r3, r6
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	2000      	movs	r0, #0
 800af16:	e7db      	b.n	800aed0 <__ssputs_r+0x58>
 800af18:	462a      	mov	r2, r5
 800af1a:	f000 f99f 	bl	800b25c <_realloc_r>
 800af1e:	4606      	mov	r6, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d1e1      	bne.n	800aee8 <__ssputs_r+0x70>
 800af24:	6921      	ldr	r1, [r4, #16]
 800af26:	4650      	mov	r0, sl
 800af28:	f7ff fec6 	bl	800acb8 <_free_r>
 800af2c:	e7c7      	b.n	800aebe <__ssputs_r+0x46>
	...

0800af30 <_svfiprintf_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	4698      	mov	r8, r3
 800af36:	898b      	ldrh	r3, [r1, #12]
 800af38:	061b      	lsls	r3, r3, #24
 800af3a:	b09d      	sub	sp, #116	; 0x74
 800af3c:	4607      	mov	r7, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	4614      	mov	r4, r2
 800af42:	d50e      	bpl.n	800af62 <_svfiprintf_r+0x32>
 800af44:	690b      	ldr	r3, [r1, #16]
 800af46:	b963      	cbnz	r3, 800af62 <_svfiprintf_r+0x32>
 800af48:	2140      	movs	r1, #64	; 0x40
 800af4a:	f7ff ff21 	bl	800ad90 <_malloc_r>
 800af4e:	6028      	str	r0, [r5, #0]
 800af50:	6128      	str	r0, [r5, #16]
 800af52:	b920      	cbnz	r0, 800af5e <_svfiprintf_r+0x2e>
 800af54:	230c      	movs	r3, #12
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	e0d1      	b.n	800b102 <_svfiprintf_r+0x1d2>
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	616b      	str	r3, [r5, #20]
 800af62:	2300      	movs	r3, #0
 800af64:	9309      	str	r3, [sp, #36]	; 0x24
 800af66:	2320      	movs	r3, #32
 800af68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af70:	2330      	movs	r3, #48	; 0x30
 800af72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b11c <_svfiprintf_r+0x1ec>
 800af76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af7a:	f04f 0901 	mov.w	r9, #1
 800af7e:	4623      	mov	r3, r4
 800af80:	469a      	mov	sl, r3
 800af82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af86:	b10a      	cbz	r2, 800af8c <_svfiprintf_r+0x5c>
 800af88:	2a25      	cmp	r2, #37	; 0x25
 800af8a:	d1f9      	bne.n	800af80 <_svfiprintf_r+0x50>
 800af8c:	ebba 0b04 	subs.w	fp, sl, r4
 800af90:	d00b      	beq.n	800afaa <_svfiprintf_r+0x7a>
 800af92:	465b      	mov	r3, fp
 800af94:	4622      	mov	r2, r4
 800af96:	4629      	mov	r1, r5
 800af98:	4638      	mov	r0, r7
 800af9a:	f7ff ff6d 	bl	800ae78 <__ssputs_r>
 800af9e:	3001      	adds	r0, #1
 800afa0:	f000 80aa 	beq.w	800b0f8 <_svfiprintf_r+0x1c8>
 800afa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa6:	445a      	add	r2, fp
 800afa8:	9209      	str	r2, [sp, #36]	; 0x24
 800afaa:	f89a 3000 	ldrb.w	r3, [sl]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 80a2 	beq.w	800b0f8 <_svfiprintf_r+0x1c8>
 800afb4:	2300      	movs	r3, #0
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afbe:	f10a 0a01 	add.w	sl, sl, #1
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	9307      	str	r3, [sp, #28]
 800afc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afca:	931a      	str	r3, [sp, #104]	; 0x68
 800afcc:	4654      	mov	r4, sl
 800afce:	2205      	movs	r2, #5
 800afd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd4:	4851      	ldr	r0, [pc, #324]	; (800b11c <_svfiprintf_r+0x1ec>)
 800afd6:	f7f5 fa6b 	bl	80004b0 <memchr>
 800afda:	9a04      	ldr	r2, [sp, #16]
 800afdc:	b9d8      	cbnz	r0, 800b016 <_svfiprintf_r+0xe6>
 800afde:	06d0      	lsls	r0, r2, #27
 800afe0:	bf44      	itt	mi
 800afe2:	2320      	movmi	r3, #32
 800afe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe8:	0711      	lsls	r1, r2, #28
 800afea:	bf44      	itt	mi
 800afec:	232b      	movmi	r3, #43	; 0x2b
 800afee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff2:	f89a 3000 	ldrb.w	r3, [sl]
 800aff6:	2b2a      	cmp	r3, #42	; 0x2a
 800aff8:	d015      	beq.n	800b026 <_svfiprintf_r+0xf6>
 800affa:	9a07      	ldr	r2, [sp, #28]
 800affc:	4654      	mov	r4, sl
 800affe:	2000      	movs	r0, #0
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	4621      	mov	r1, r4
 800b006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00a:	3b30      	subs	r3, #48	; 0x30
 800b00c:	2b09      	cmp	r3, #9
 800b00e:	d94e      	bls.n	800b0ae <_svfiprintf_r+0x17e>
 800b010:	b1b0      	cbz	r0, 800b040 <_svfiprintf_r+0x110>
 800b012:	9207      	str	r2, [sp, #28]
 800b014:	e014      	b.n	800b040 <_svfiprintf_r+0x110>
 800b016:	eba0 0308 	sub.w	r3, r0, r8
 800b01a:	fa09 f303 	lsl.w	r3, r9, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	9304      	str	r3, [sp, #16]
 800b022:	46a2      	mov	sl, r4
 800b024:	e7d2      	b.n	800afcc <_svfiprintf_r+0x9c>
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	1d19      	adds	r1, r3, #4
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	9103      	str	r1, [sp, #12]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	bfbb      	ittet	lt
 800b032:	425b      	neglt	r3, r3
 800b034:	f042 0202 	orrlt.w	r2, r2, #2
 800b038:	9307      	strge	r3, [sp, #28]
 800b03a:	9307      	strlt	r3, [sp, #28]
 800b03c:	bfb8      	it	lt
 800b03e:	9204      	strlt	r2, [sp, #16]
 800b040:	7823      	ldrb	r3, [r4, #0]
 800b042:	2b2e      	cmp	r3, #46	; 0x2e
 800b044:	d10c      	bne.n	800b060 <_svfiprintf_r+0x130>
 800b046:	7863      	ldrb	r3, [r4, #1]
 800b048:	2b2a      	cmp	r3, #42	; 0x2a
 800b04a:	d135      	bne.n	800b0b8 <_svfiprintf_r+0x188>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	1d1a      	adds	r2, r3, #4
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	9203      	str	r2, [sp, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	bfb8      	it	lt
 800b058:	f04f 33ff 	movlt.w	r3, #4294967295
 800b05c:	3402      	adds	r4, #2
 800b05e:	9305      	str	r3, [sp, #20]
 800b060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b12c <_svfiprintf_r+0x1fc>
 800b064:	7821      	ldrb	r1, [r4, #0]
 800b066:	2203      	movs	r2, #3
 800b068:	4650      	mov	r0, sl
 800b06a:	f7f5 fa21 	bl	80004b0 <memchr>
 800b06e:	b140      	cbz	r0, 800b082 <_svfiprintf_r+0x152>
 800b070:	2340      	movs	r3, #64	; 0x40
 800b072:	eba0 000a 	sub.w	r0, r0, sl
 800b076:	fa03 f000 	lsl.w	r0, r3, r0
 800b07a:	9b04      	ldr	r3, [sp, #16]
 800b07c:	4303      	orrs	r3, r0
 800b07e:	3401      	adds	r4, #1
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b086:	4826      	ldr	r0, [pc, #152]	; (800b120 <_svfiprintf_r+0x1f0>)
 800b088:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b08c:	2206      	movs	r2, #6
 800b08e:	f7f5 fa0f 	bl	80004b0 <memchr>
 800b092:	2800      	cmp	r0, #0
 800b094:	d038      	beq.n	800b108 <_svfiprintf_r+0x1d8>
 800b096:	4b23      	ldr	r3, [pc, #140]	; (800b124 <_svfiprintf_r+0x1f4>)
 800b098:	bb1b      	cbnz	r3, 800b0e2 <_svfiprintf_r+0x1b2>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	3307      	adds	r3, #7
 800b09e:	f023 0307 	bic.w	r3, r3, #7
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	4433      	add	r3, r6
 800b0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ac:	e767      	b.n	800af7e <_svfiprintf_r+0x4e>
 800b0ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	e7a5      	b.n	800b004 <_svfiprintf_r+0xd4>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	3401      	adds	r4, #1
 800b0bc:	9305      	str	r3, [sp, #20]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	f04f 0c0a 	mov.w	ip, #10
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ca:	3a30      	subs	r2, #48	; 0x30
 800b0cc:	2a09      	cmp	r2, #9
 800b0ce:	d903      	bls.n	800b0d8 <_svfiprintf_r+0x1a8>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0c5      	beq.n	800b060 <_svfiprintf_r+0x130>
 800b0d4:	9105      	str	r1, [sp, #20]
 800b0d6:	e7c3      	b.n	800b060 <_svfiprintf_r+0x130>
 800b0d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0dc:	4604      	mov	r4, r0
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e7f0      	b.n	800b0c4 <_svfiprintf_r+0x194>
 800b0e2:	ab03      	add	r3, sp, #12
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	462a      	mov	r2, r5
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <_svfiprintf_r+0x1f8>)
 800b0ea:	a904      	add	r1, sp, #16
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7fc fbfb 	bl	80078e8 <_printf_float>
 800b0f2:	1c42      	adds	r2, r0, #1
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	d1d6      	bne.n	800b0a6 <_svfiprintf_r+0x176>
 800b0f8:	89ab      	ldrh	r3, [r5, #12]
 800b0fa:	065b      	lsls	r3, r3, #25
 800b0fc:	f53f af2c 	bmi.w	800af58 <_svfiprintf_r+0x28>
 800b100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b102:	b01d      	add	sp, #116	; 0x74
 800b104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b108:	ab03      	add	r3, sp, #12
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	462a      	mov	r2, r5
 800b10e:	4b06      	ldr	r3, [pc, #24]	; (800b128 <_svfiprintf_r+0x1f8>)
 800b110:	a904      	add	r1, sp, #16
 800b112:	4638      	mov	r0, r7
 800b114:	f7fc fe8c 	bl	8007e30 <_printf_i>
 800b118:	e7eb      	b.n	800b0f2 <_svfiprintf_r+0x1c2>
 800b11a:	bf00      	nop
 800b11c:	0800c474 	.word	0x0800c474
 800b120:	0800c47e 	.word	0x0800c47e
 800b124:	080078e9 	.word	0x080078e9
 800b128:	0800ae79 	.word	0x0800ae79
 800b12c:	0800c47a 	.word	0x0800c47a

0800b130 <nan>:
 800b130:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b138 <nan+0x8>
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	00000000 	.word	0x00000000
 800b13c:	7ff80000 	.word	0x7ff80000

0800b140 <_sbrk_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	4d06      	ldr	r5, [pc, #24]	; (800b15c <_sbrk_r+0x1c>)
 800b144:	2300      	movs	r3, #0
 800b146:	4604      	mov	r4, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	602b      	str	r3, [r5, #0]
 800b14c:	f7f6 fda2 	bl	8001c94 <_sbrk>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	d102      	bne.n	800b15a <_sbrk_r+0x1a>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	b103      	cbz	r3, 800b15a <_sbrk_r+0x1a>
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	20001354 	.word	0x20001354

0800b160 <nanf>:
 800b160:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b168 <nanf+0x8>
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	7fc00000 	.word	0x7fc00000

0800b16c <strncmp>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	b17a      	cbz	r2, 800b190 <strncmp+0x24>
 800b170:	4603      	mov	r3, r0
 800b172:	3901      	subs	r1, #1
 800b174:	1884      	adds	r4, r0, r2
 800b176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b17a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b17e:	4290      	cmp	r0, r2
 800b180:	d101      	bne.n	800b186 <strncmp+0x1a>
 800b182:	42a3      	cmp	r3, r4
 800b184:	d101      	bne.n	800b18a <strncmp+0x1e>
 800b186:	1a80      	subs	r0, r0, r2
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d1f3      	bne.n	800b176 <strncmp+0xa>
 800b18e:	e7fa      	b.n	800b186 <strncmp+0x1a>
 800b190:	4610      	mov	r0, r2
 800b192:	e7f9      	b.n	800b188 <strncmp+0x1c>

0800b194 <__ascii_wctomb>:
 800b194:	b149      	cbz	r1, 800b1aa <__ascii_wctomb+0x16>
 800b196:	2aff      	cmp	r2, #255	; 0xff
 800b198:	bf85      	ittet	hi
 800b19a:	238a      	movhi	r3, #138	; 0x8a
 800b19c:	6003      	strhi	r3, [r0, #0]
 800b19e:	700a      	strbls	r2, [r1, #0]
 800b1a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1a4:	bf98      	it	ls
 800b1a6:	2001      	movls	r0, #1
 800b1a8:	4770      	bx	lr
 800b1aa:	4608      	mov	r0, r1
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <__assert_func>:
 800b1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1b2:	4614      	mov	r4, r2
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	4b09      	ldr	r3, [pc, #36]	; (800b1dc <__assert_func+0x2c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	68d8      	ldr	r0, [r3, #12]
 800b1be:	b14c      	cbz	r4, 800b1d4 <__assert_func+0x24>
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <__assert_func+0x30>)
 800b1c2:	9100      	str	r1, [sp, #0]
 800b1c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1c8:	4906      	ldr	r1, [pc, #24]	; (800b1e4 <__assert_func+0x34>)
 800b1ca:	462b      	mov	r3, r5
 800b1cc:	f000 f80e 	bl	800b1ec <fiprintf>
 800b1d0:	f000 fa8c 	bl	800b6ec <abort>
 800b1d4:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <__assert_func+0x38>)
 800b1d6:	461c      	mov	r4, r3
 800b1d8:	e7f3      	b.n	800b1c2 <__assert_func+0x12>
 800b1da:	bf00      	nop
 800b1dc:	20000278 	.word	0x20000278
 800b1e0:	0800c485 	.word	0x0800c485
 800b1e4:	0800c492 	.word	0x0800c492
 800b1e8:	0800c4c0 	.word	0x0800c4c0

0800b1ec <fiprintf>:
 800b1ec:	b40e      	push	{r1, r2, r3}
 800b1ee:	b503      	push	{r0, r1, lr}
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	ab03      	add	r3, sp, #12
 800b1f4:	4805      	ldr	r0, [pc, #20]	; (800b20c <fiprintf+0x20>)
 800b1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1fa:	6800      	ldr	r0, [r0, #0]
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	f000 f885 	bl	800b30c <_vfiprintf_r>
 800b202:	b002      	add	sp, #8
 800b204:	f85d eb04 	ldr.w	lr, [sp], #4
 800b208:	b003      	add	sp, #12
 800b20a:	4770      	bx	lr
 800b20c:	20000278 	.word	0x20000278

0800b210 <memmove>:
 800b210:	4288      	cmp	r0, r1
 800b212:	b510      	push	{r4, lr}
 800b214:	eb01 0402 	add.w	r4, r1, r2
 800b218:	d902      	bls.n	800b220 <memmove+0x10>
 800b21a:	4284      	cmp	r4, r0
 800b21c:	4623      	mov	r3, r4
 800b21e:	d807      	bhi.n	800b230 <memmove+0x20>
 800b220:	1e43      	subs	r3, r0, #1
 800b222:	42a1      	cmp	r1, r4
 800b224:	d008      	beq.n	800b238 <memmove+0x28>
 800b226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b22e:	e7f8      	b.n	800b222 <memmove+0x12>
 800b230:	4402      	add	r2, r0
 800b232:	4601      	mov	r1, r0
 800b234:	428a      	cmp	r2, r1
 800b236:	d100      	bne.n	800b23a <memmove+0x2a>
 800b238:	bd10      	pop	{r4, pc}
 800b23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b242:	e7f7      	b.n	800b234 <memmove+0x24>

0800b244 <__malloc_lock>:
 800b244:	4801      	ldr	r0, [pc, #4]	; (800b24c <__malloc_lock+0x8>)
 800b246:	f000 bc11 	b.w	800ba6c <__retarget_lock_acquire_recursive>
 800b24a:	bf00      	nop
 800b24c:	20001358 	.word	0x20001358

0800b250 <__malloc_unlock>:
 800b250:	4801      	ldr	r0, [pc, #4]	; (800b258 <__malloc_unlock+0x8>)
 800b252:	f000 bc0c 	b.w	800ba6e <__retarget_lock_release_recursive>
 800b256:	bf00      	nop
 800b258:	20001358 	.word	0x20001358

0800b25c <_realloc_r>:
 800b25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b260:	4680      	mov	r8, r0
 800b262:	4614      	mov	r4, r2
 800b264:	460e      	mov	r6, r1
 800b266:	b921      	cbnz	r1, 800b272 <_realloc_r+0x16>
 800b268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b26c:	4611      	mov	r1, r2
 800b26e:	f7ff bd8f 	b.w	800ad90 <_malloc_r>
 800b272:	b92a      	cbnz	r2, 800b280 <_realloc_r+0x24>
 800b274:	f7ff fd20 	bl	800acb8 <_free_r>
 800b278:	4625      	mov	r5, r4
 800b27a:	4628      	mov	r0, r5
 800b27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b280:	f000 fc5c 	bl	800bb3c <_malloc_usable_size_r>
 800b284:	4284      	cmp	r4, r0
 800b286:	4607      	mov	r7, r0
 800b288:	d802      	bhi.n	800b290 <_realloc_r+0x34>
 800b28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b28e:	d812      	bhi.n	800b2b6 <_realloc_r+0x5a>
 800b290:	4621      	mov	r1, r4
 800b292:	4640      	mov	r0, r8
 800b294:	f7ff fd7c 	bl	800ad90 <_malloc_r>
 800b298:	4605      	mov	r5, r0
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d0ed      	beq.n	800b27a <_realloc_r+0x1e>
 800b29e:	42bc      	cmp	r4, r7
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	bf28      	it	cs
 800b2a6:	463a      	movcs	r2, r7
 800b2a8:	f7fc fa68 	bl	800777c <memcpy>
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4640      	mov	r0, r8
 800b2b0:	f7ff fd02 	bl	800acb8 <_free_r>
 800b2b4:	e7e1      	b.n	800b27a <_realloc_r+0x1e>
 800b2b6:	4635      	mov	r5, r6
 800b2b8:	e7df      	b.n	800b27a <_realloc_r+0x1e>

0800b2ba <__sfputc_r>:
 800b2ba:	6893      	ldr	r3, [r2, #8]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	b410      	push	{r4}
 800b2c2:	6093      	str	r3, [r2, #8]
 800b2c4:	da08      	bge.n	800b2d8 <__sfputc_r+0x1e>
 800b2c6:	6994      	ldr	r4, [r2, #24]
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	db01      	blt.n	800b2d0 <__sfputc_r+0x16>
 800b2cc:	290a      	cmp	r1, #10
 800b2ce:	d103      	bne.n	800b2d8 <__sfputc_r+0x1e>
 800b2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2d4:	f000 b94a 	b.w	800b56c <__swbuf_r>
 800b2d8:	6813      	ldr	r3, [r2, #0]
 800b2da:	1c58      	adds	r0, r3, #1
 800b2dc:	6010      	str	r0, [r2, #0]
 800b2de:	7019      	strb	r1, [r3, #0]
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <__sfputs_r>:
 800b2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	460f      	mov	r7, r1
 800b2ee:	4614      	mov	r4, r2
 800b2f0:	18d5      	adds	r5, r2, r3
 800b2f2:	42ac      	cmp	r4, r5
 800b2f4:	d101      	bne.n	800b2fa <__sfputs_r+0x12>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e007      	b.n	800b30a <__sfputs_r+0x22>
 800b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fe:	463a      	mov	r2, r7
 800b300:	4630      	mov	r0, r6
 800b302:	f7ff ffda 	bl	800b2ba <__sfputc_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d1f3      	bne.n	800b2f2 <__sfputs_r+0xa>
 800b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b30c <_vfiprintf_r>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	460d      	mov	r5, r1
 800b312:	b09d      	sub	sp, #116	; 0x74
 800b314:	4614      	mov	r4, r2
 800b316:	4698      	mov	r8, r3
 800b318:	4606      	mov	r6, r0
 800b31a:	b118      	cbz	r0, 800b324 <_vfiprintf_r+0x18>
 800b31c:	6983      	ldr	r3, [r0, #24]
 800b31e:	b90b      	cbnz	r3, 800b324 <_vfiprintf_r+0x18>
 800b320:	f000 fb06 	bl	800b930 <__sinit>
 800b324:	4b89      	ldr	r3, [pc, #548]	; (800b54c <_vfiprintf_r+0x240>)
 800b326:	429d      	cmp	r5, r3
 800b328:	d11b      	bne.n	800b362 <_vfiprintf_r+0x56>
 800b32a:	6875      	ldr	r5, [r6, #4]
 800b32c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b32e:	07d9      	lsls	r1, r3, #31
 800b330:	d405      	bmi.n	800b33e <_vfiprintf_r+0x32>
 800b332:	89ab      	ldrh	r3, [r5, #12]
 800b334:	059a      	lsls	r2, r3, #22
 800b336:	d402      	bmi.n	800b33e <_vfiprintf_r+0x32>
 800b338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b33a:	f000 fb97 	bl	800ba6c <__retarget_lock_acquire_recursive>
 800b33e:	89ab      	ldrh	r3, [r5, #12]
 800b340:	071b      	lsls	r3, r3, #28
 800b342:	d501      	bpl.n	800b348 <_vfiprintf_r+0x3c>
 800b344:	692b      	ldr	r3, [r5, #16]
 800b346:	b9eb      	cbnz	r3, 800b384 <_vfiprintf_r+0x78>
 800b348:	4629      	mov	r1, r5
 800b34a:	4630      	mov	r0, r6
 800b34c:	f000 f960 	bl	800b610 <__swsetup_r>
 800b350:	b1c0      	cbz	r0, 800b384 <_vfiprintf_r+0x78>
 800b352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b354:	07dc      	lsls	r4, r3, #31
 800b356:	d50e      	bpl.n	800b376 <_vfiprintf_r+0x6a>
 800b358:	f04f 30ff 	mov.w	r0, #4294967295
 800b35c:	b01d      	add	sp, #116	; 0x74
 800b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b362:	4b7b      	ldr	r3, [pc, #492]	; (800b550 <_vfiprintf_r+0x244>)
 800b364:	429d      	cmp	r5, r3
 800b366:	d101      	bne.n	800b36c <_vfiprintf_r+0x60>
 800b368:	68b5      	ldr	r5, [r6, #8]
 800b36a:	e7df      	b.n	800b32c <_vfiprintf_r+0x20>
 800b36c:	4b79      	ldr	r3, [pc, #484]	; (800b554 <_vfiprintf_r+0x248>)
 800b36e:	429d      	cmp	r5, r3
 800b370:	bf08      	it	eq
 800b372:	68f5      	ldreq	r5, [r6, #12]
 800b374:	e7da      	b.n	800b32c <_vfiprintf_r+0x20>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	0598      	lsls	r0, r3, #22
 800b37a:	d4ed      	bmi.n	800b358 <_vfiprintf_r+0x4c>
 800b37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37e:	f000 fb76 	bl	800ba6e <__retarget_lock_release_recursive>
 800b382:	e7e9      	b.n	800b358 <_vfiprintf_r+0x4c>
 800b384:	2300      	movs	r3, #0
 800b386:	9309      	str	r3, [sp, #36]	; 0x24
 800b388:	2320      	movs	r3, #32
 800b38a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b38e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b392:	2330      	movs	r3, #48	; 0x30
 800b394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b558 <_vfiprintf_r+0x24c>
 800b398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39c:	f04f 0901 	mov.w	r9, #1
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	469a      	mov	sl, r3
 800b3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a8:	b10a      	cbz	r2, 800b3ae <_vfiprintf_r+0xa2>
 800b3aa:	2a25      	cmp	r2, #37	; 0x25
 800b3ac:	d1f9      	bne.n	800b3a2 <_vfiprintf_r+0x96>
 800b3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b3b2:	d00b      	beq.n	800b3cc <_vfiprintf_r+0xc0>
 800b3b4:	465b      	mov	r3, fp
 800b3b6:	4622      	mov	r2, r4
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	4630      	mov	r0, r6
 800b3bc:	f7ff ff94 	bl	800b2e8 <__sfputs_r>
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	f000 80aa 	beq.w	800b51a <_vfiprintf_r+0x20e>
 800b3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c8:	445a      	add	r2, fp
 800b3ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 80a2 	beq.w	800b51a <_vfiprintf_r+0x20e>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e0:	f10a 0a01 	add.w	sl, sl, #1
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ee:	4654      	mov	r4, sl
 800b3f0:	2205      	movs	r2, #5
 800b3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f6:	4858      	ldr	r0, [pc, #352]	; (800b558 <_vfiprintf_r+0x24c>)
 800b3f8:	f7f5 f85a 	bl	80004b0 <memchr>
 800b3fc:	9a04      	ldr	r2, [sp, #16]
 800b3fe:	b9d8      	cbnz	r0, 800b438 <_vfiprintf_r+0x12c>
 800b400:	06d1      	lsls	r1, r2, #27
 800b402:	bf44      	itt	mi
 800b404:	2320      	movmi	r3, #32
 800b406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b40a:	0713      	lsls	r3, r2, #28
 800b40c:	bf44      	itt	mi
 800b40e:	232b      	movmi	r3, #43	; 0x2b
 800b410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b414:	f89a 3000 	ldrb.w	r3, [sl]
 800b418:	2b2a      	cmp	r3, #42	; 0x2a
 800b41a:	d015      	beq.n	800b448 <_vfiprintf_r+0x13c>
 800b41c:	9a07      	ldr	r2, [sp, #28]
 800b41e:	4654      	mov	r4, sl
 800b420:	2000      	movs	r0, #0
 800b422:	f04f 0c0a 	mov.w	ip, #10
 800b426:	4621      	mov	r1, r4
 800b428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b42c:	3b30      	subs	r3, #48	; 0x30
 800b42e:	2b09      	cmp	r3, #9
 800b430:	d94e      	bls.n	800b4d0 <_vfiprintf_r+0x1c4>
 800b432:	b1b0      	cbz	r0, 800b462 <_vfiprintf_r+0x156>
 800b434:	9207      	str	r2, [sp, #28]
 800b436:	e014      	b.n	800b462 <_vfiprintf_r+0x156>
 800b438:	eba0 0308 	sub.w	r3, r0, r8
 800b43c:	fa09 f303 	lsl.w	r3, r9, r3
 800b440:	4313      	orrs	r3, r2
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	46a2      	mov	sl, r4
 800b446:	e7d2      	b.n	800b3ee <_vfiprintf_r+0xe2>
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	1d19      	adds	r1, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	9103      	str	r1, [sp, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	bfbb      	ittet	lt
 800b454:	425b      	neglt	r3, r3
 800b456:	f042 0202 	orrlt.w	r2, r2, #2
 800b45a:	9307      	strge	r3, [sp, #28]
 800b45c:	9307      	strlt	r3, [sp, #28]
 800b45e:	bfb8      	it	lt
 800b460:	9204      	strlt	r2, [sp, #16]
 800b462:	7823      	ldrb	r3, [r4, #0]
 800b464:	2b2e      	cmp	r3, #46	; 0x2e
 800b466:	d10c      	bne.n	800b482 <_vfiprintf_r+0x176>
 800b468:	7863      	ldrb	r3, [r4, #1]
 800b46a:	2b2a      	cmp	r3, #42	; 0x2a
 800b46c:	d135      	bne.n	800b4da <_vfiprintf_r+0x1ce>
 800b46e:	9b03      	ldr	r3, [sp, #12]
 800b470:	1d1a      	adds	r2, r3, #4
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	9203      	str	r2, [sp, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	bfb8      	it	lt
 800b47a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b47e:	3402      	adds	r4, #2
 800b480:	9305      	str	r3, [sp, #20]
 800b482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b568 <_vfiprintf_r+0x25c>
 800b486:	7821      	ldrb	r1, [r4, #0]
 800b488:	2203      	movs	r2, #3
 800b48a:	4650      	mov	r0, sl
 800b48c:	f7f5 f810 	bl	80004b0 <memchr>
 800b490:	b140      	cbz	r0, 800b4a4 <_vfiprintf_r+0x198>
 800b492:	2340      	movs	r3, #64	; 0x40
 800b494:	eba0 000a 	sub.w	r0, r0, sl
 800b498:	fa03 f000 	lsl.w	r0, r3, r0
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	4303      	orrs	r3, r0
 800b4a0:	3401      	adds	r4, #1
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a8:	482c      	ldr	r0, [pc, #176]	; (800b55c <_vfiprintf_r+0x250>)
 800b4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ae:	2206      	movs	r2, #6
 800b4b0:	f7f4 fffe 	bl	80004b0 <memchr>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d03f      	beq.n	800b538 <_vfiprintf_r+0x22c>
 800b4b8:	4b29      	ldr	r3, [pc, #164]	; (800b560 <_vfiprintf_r+0x254>)
 800b4ba:	bb1b      	cbnz	r3, 800b504 <_vfiprintf_r+0x1f8>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	3307      	adds	r3, #7
 800b4c0:	f023 0307 	bic.w	r3, r3, #7
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	9303      	str	r3, [sp, #12]
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	443b      	add	r3, r7
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	e767      	b.n	800b3a0 <_vfiprintf_r+0x94>
 800b4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	e7a5      	b.n	800b426 <_vfiprintf_r+0x11a>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	3401      	adds	r4, #1
 800b4de:	9305      	str	r3, [sp, #20]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ec:	3a30      	subs	r2, #48	; 0x30
 800b4ee:	2a09      	cmp	r2, #9
 800b4f0:	d903      	bls.n	800b4fa <_vfiprintf_r+0x1ee>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0c5      	beq.n	800b482 <_vfiprintf_r+0x176>
 800b4f6:	9105      	str	r1, [sp, #20]
 800b4f8:	e7c3      	b.n	800b482 <_vfiprintf_r+0x176>
 800b4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4fe:	4604      	mov	r4, r0
 800b500:	2301      	movs	r3, #1
 800b502:	e7f0      	b.n	800b4e6 <_vfiprintf_r+0x1da>
 800b504:	ab03      	add	r3, sp, #12
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	462a      	mov	r2, r5
 800b50a:	4b16      	ldr	r3, [pc, #88]	; (800b564 <_vfiprintf_r+0x258>)
 800b50c:	a904      	add	r1, sp, #16
 800b50e:	4630      	mov	r0, r6
 800b510:	f7fc f9ea 	bl	80078e8 <_printf_float>
 800b514:	4607      	mov	r7, r0
 800b516:	1c78      	adds	r0, r7, #1
 800b518:	d1d6      	bne.n	800b4c8 <_vfiprintf_r+0x1bc>
 800b51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b51c:	07d9      	lsls	r1, r3, #31
 800b51e:	d405      	bmi.n	800b52c <_vfiprintf_r+0x220>
 800b520:	89ab      	ldrh	r3, [r5, #12]
 800b522:	059a      	lsls	r2, r3, #22
 800b524:	d402      	bmi.n	800b52c <_vfiprintf_r+0x220>
 800b526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b528:	f000 faa1 	bl	800ba6e <__retarget_lock_release_recursive>
 800b52c:	89ab      	ldrh	r3, [r5, #12]
 800b52e:	065b      	lsls	r3, r3, #25
 800b530:	f53f af12 	bmi.w	800b358 <_vfiprintf_r+0x4c>
 800b534:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b536:	e711      	b.n	800b35c <_vfiprintf_r+0x50>
 800b538:	ab03      	add	r3, sp, #12
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	462a      	mov	r2, r5
 800b53e:	4b09      	ldr	r3, [pc, #36]	; (800b564 <_vfiprintf_r+0x258>)
 800b540:	a904      	add	r1, sp, #16
 800b542:	4630      	mov	r0, r6
 800b544:	f7fc fc74 	bl	8007e30 <_printf_i>
 800b548:	e7e4      	b.n	800b514 <_vfiprintf_r+0x208>
 800b54a:	bf00      	nop
 800b54c:	0800c4e4 	.word	0x0800c4e4
 800b550:	0800c504 	.word	0x0800c504
 800b554:	0800c4c4 	.word	0x0800c4c4
 800b558:	0800c474 	.word	0x0800c474
 800b55c:	0800c47e 	.word	0x0800c47e
 800b560:	080078e9 	.word	0x080078e9
 800b564:	0800b2e9 	.word	0x0800b2e9
 800b568:	0800c47a 	.word	0x0800c47a

0800b56c <__swbuf_r>:
 800b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b56e:	460e      	mov	r6, r1
 800b570:	4614      	mov	r4, r2
 800b572:	4605      	mov	r5, r0
 800b574:	b118      	cbz	r0, 800b57e <__swbuf_r+0x12>
 800b576:	6983      	ldr	r3, [r0, #24]
 800b578:	b90b      	cbnz	r3, 800b57e <__swbuf_r+0x12>
 800b57a:	f000 f9d9 	bl	800b930 <__sinit>
 800b57e:	4b21      	ldr	r3, [pc, #132]	; (800b604 <__swbuf_r+0x98>)
 800b580:	429c      	cmp	r4, r3
 800b582:	d12b      	bne.n	800b5dc <__swbuf_r+0x70>
 800b584:	686c      	ldr	r4, [r5, #4]
 800b586:	69a3      	ldr	r3, [r4, #24]
 800b588:	60a3      	str	r3, [r4, #8]
 800b58a:	89a3      	ldrh	r3, [r4, #12]
 800b58c:	071a      	lsls	r2, r3, #28
 800b58e:	d52f      	bpl.n	800b5f0 <__swbuf_r+0x84>
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	b36b      	cbz	r3, 800b5f0 <__swbuf_r+0x84>
 800b594:	6923      	ldr	r3, [r4, #16]
 800b596:	6820      	ldr	r0, [r4, #0]
 800b598:	1ac0      	subs	r0, r0, r3
 800b59a:	6963      	ldr	r3, [r4, #20]
 800b59c:	b2f6      	uxtb	r6, r6
 800b59e:	4283      	cmp	r3, r0
 800b5a0:	4637      	mov	r7, r6
 800b5a2:	dc04      	bgt.n	800b5ae <__swbuf_r+0x42>
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f000 f92e 	bl	800b808 <_fflush_r>
 800b5ac:	bb30      	cbnz	r0, 800b5fc <__swbuf_r+0x90>
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	60a3      	str	r3, [r4, #8]
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	6022      	str	r2, [r4, #0]
 800b5ba:	701e      	strb	r6, [r3, #0]
 800b5bc:	6963      	ldr	r3, [r4, #20]
 800b5be:	3001      	adds	r0, #1
 800b5c0:	4283      	cmp	r3, r0
 800b5c2:	d004      	beq.n	800b5ce <__swbuf_r+0x62>
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	07db      	lsls	r3, r3, #31
 800b5c8:	d506      	bpl.n	800b5d8 <__swbuf_r+0x6c>
 800b5ca:	2e0a      	cmp	r6, #10
 800b5cc:	d104      	bne.n	800b5d8 <__swbuf_r+0x6c>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	f000 f919 	bl	800b808 <_fflush_r>
 800b5d6:	b988      	cbnz	r0, 800b5fc <__swbuf_r+0x90>
 800b5d8:	4638      	mov	r0, r7
 800b5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <__swbuf_r+0x9c>)
 800b5de:	429c      	cmp	r4, r3
 800b5e0:	d101      	bne.n	800b5e6 <__swbuf_r+0x7a>
 800b5e2:	68ac      	ldr	r4, [r5, #8]
 800b5e4:	e7cf      	b.n	800b586 <__swbuf_r+0x1a>
 800b5e6:	4b09      	ldr	r3, [pc, #36]	; (800b60c <__swbuf_r+0xa0>)
 800b5e8:	429c      	cmp	r4, r3
 800b5ea:	bf08      	it	eq
 800b5ec:	68ec      	ldreq	r4, [r5, #12]
 800b5ee:	e7ca      	b.n	800b586 <__swbuf_r+0x1a>
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f000 f80c 	bl	800b610 <__swsetup_r>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0cb      	beq.n	800b594 <__swbuf_r+0x28>
 800b5fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b600:	e7ea      	b.n	800b5d8 <__swbuf_r+0x6c>
 800b602:	bf00      	nop
 800b604:	0800c4e4 	.word	0x0800c4e4
 800b608:	0800c504 	.word	0x0800c504
 800b60c:	0800c4c4 	.word	0x0800c4c4

0800b610 <__swsetup_r>:
 800b610:	4b32      	ldr	r3, [pc, #200]	; (800b6dc <__swsetup_r+0xcc>)
 800b612:	b570      	push	{r4, r5, r6, lr}
 800b614:	681d      	ldr	r5, [r3, #0]
 800b616:	4606      	mov	r6, r0
 800b618:	460c      	mov	r4, r1
 800b61a:	b125      	cbz	r5, 800b626 <__swsetup_r+0x16>
 800b61c:	69ab      	ldr	r3, [r5, #24]
 800b61e:	b913      	cbnz	r3, 800b626 <__swsetup_r+0x16>
 800b620:	4628      	mov	r0, r5
 800b622:	f000 f985 	bl	800b930 <__sinit>
 800b626:	4b2e      	ldr	r3, [pc, #184]	; (800b6e0 <__swsetup_r+0xd0>)
 800b628:	429c      	cmp	r4, r3
 800b62a:	d10f      	bne.n	800b64c <__swsetup_r+0x3c>
 800b62c:	686c      	ldr	r4, [r5, #4]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b634:	0719      	lsls	r1, r3, #28
 800b636:	d42c      	bmi.n	800b692 <__swsetup_r+0x82>
 800b638:	06dd      	lsls	r5, r3, #27
 800b63a:	d411      	bmi.n	800b660 <__swsetup_r+0x50>
 800b63c:	2309      	movs	r3, #9
 800b63e:	6033      	str	r3, [r6, #0]
 800b640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	f04f 30ff 	mov.w	r0, #4294967295
 800b64a:	e03e      	b.n	800b6ca <__swsetup_r+0xba>
 800b64c:	4b25      	ldr	r3, [pc, #148]	; (800b6e4 <__swsetup_r+0xd4>)
 800b64e:	429c      	cmp	r4, r3
 800b650:	d101      	bne.n	800b656 <__swsetup_r+0x46>
 800b652:	68ac      	ldr	r4, [r5, #8]
 800b654:	e7eb      	b.n	800b62e <__swsetup_r+0x1e>
 800b656:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <__swsetup_r+0xd8>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	bf08      	it	eq
 800b65c:	68ec      	ldreq	r4, [r5, #12]
 800b65e:	e7e6      	b.n	800b62e <__swsetup_r+0x1e>
 800b660:	0758      	lsls	r0, r3, #29
 800b662:	d512      	bpl.n	800b68a <__swsetup_r+0x7a>
 800b664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b666:	b141      	cbz	r1, 800b67a <__swsetup_r+0x6a>
 800b668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b66c:	4299      	cmp	r1, r3
 800b66e:	d002      	beq.n	800b676 <__swsetup_r+0x66>
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff fb21 	bl	800acb8 <_free_r>
 800b676:	2300      	movs	r3, #0
 800b678:	6363      	str	r3, [r4, #52]	; 0x34
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	2300      	movs	r3, #0
 800b684:	6063      	str	r3, [r4, #4]
 800b686:	6923      	ldr	r3, [r4, #16]
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f043 0308 	orr.w	r3, r3, #8
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	b94b      	cbnz	r3, 800b6aa <__swsetup_r+0x9a>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6a0:	d003      	beq.n	800b6aa <__swsetup_r+0x9a>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f000 fa09 	bl	800babc <__smakebuf_r>
 800b6aa:	89a0      	ldrh	r0, [r4, #12]
 800b6ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6b0:	f010 0301 	ands.w	r3, r0, #1
 800b6b4:	d00a      	beq.n	800b6cc <__swsetup_r+0xbc>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	6963      	ldr	r3, [r4, #20]
 800b6bc:	425b      	negs	r3, r3
 800b6be:	61a3      	str	r3, [r4, #24]
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	b943      	cbnz	r3, 800b6d6 <__swsetup_r+0xc6>
 800b6c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6c8:	d1ba      	bne.n	800b640 <__swsetup_r+0x30>
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	0781      	lsls	r1, r0, #30
 800b6ce:	bf58      	it	pl
 800b6d0:	6963      	ldrpl	r3, [r4, #20]
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	e7f4      	b.n	800b6c0 <__swsetup_r+0xb0>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	e7f7      	b.n	800b6ca <__swsetup_r+0xba>
 800b6da:	bf00      	nop
 800b6dc:	20000278 	.word	0x20000278
 800b6e0:	0800c4e4 	.word	0x0800c4e4
 800b6e4:	0800c504 	.word	0x0800c504
 800b6e8:	0800c4c4 	.word	0x0800c4c4

0800b6ec <abort>:
 800b6ec:	b508      	push	{r3, lr}
 800b6ee:	2006      	movs	r0, #6
 800b6f0:	f000 fa54 	bl	800bb9c <raise>
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	f7f6 fa55 	bl	8001ba4 <_exit>
	...

0800b6fc <__sflush_r>:
 800b6fc:	898a      	ldrh	r2, [r1, #12]
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	0710      	lsls	r0, r2, #28
 800b706:	460c      	mov	r4, r1
 800b708:	d458      	bmi.n	800b7bc <__sflush_r+0xc0>
 800b70a:	684b      	ldr	r3, [r1, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dc05      	bgt.n	800b71c <__sflush_r+0x20>
 800b710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b712:	2b00      	cmp	r3, #0
 800b714:	dc02      	bgt.n	800b71c <__sflush_r+0x20>
 800b716:	2000      	movs	r0, #0
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b71e:	2e00      	cmp	r6, #0
 800b720:	d0f9      	beq.n	800b716 <__sflush_r+0x1a>
 800b722:	2300      	movs	r3, #0
 800b724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b728:	682f      	ldr	r7, [r5, #0]
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	d032      	beq.n	800b794 <__sflush_r+0x98>
 800b72e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	075a      	lsls	r2, r3, #29
 800b734:	d505      	bpl.n	800b742 <__sflush_r+0x46>
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	1ac0      	subs	r0, r0, r3
 800b73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b73c:	b10b      	cbz	r3, 800b742 <__sflush_r+0x46>
 800b73e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	2300      	movs	r3, #0
 800b744:	4602      	mov	r2, r0
 800b746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b748:	6a21      	ldr	r1, [r4, #32]
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b0      	blx	r6
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	d106      	bne.n	800b762 <__sflush_r+0x66>
 800b754:	6829      	ldr	r1, [r5, #0]
 800b756:	291d      	cmp	r1, #29
 800b758:	d82c      	bhi.n	800b7b4 <__sflush_r+0xb8>
 800b75a:	4a2a      	ldr	r2, [pc, #168]	; (800b804 <__sflush_r+0x108>)
 800b75c:	40ca      	lsrs	r2, r1
 800b75e:	07d6      	lsls	r6, r2, #31
 800b760:	d528      	bpl.n	800b7b4 <__sflush_r+0xb8>
 800b762:	2200      	movs	r2, #0
 800b764:	6062      	str	r2, [r4, #4]
 800b766:	04d9      	lsls	r1, r3, #19
 800b768:	6922      	ldr	r2, [r4, #16]
 800b76a:	6022      	str	r2, [r4, #0]
 800b76c:	d504      	bpl.n	800b778 <__sflush_r+0x7c>
 800b76e:	1c42      	adds	r2, r0, #1
 800b770:	d101      	bne.n	800b776 <__sflush_r+0x7a>
 800b772:	682b      	ldr	r3, [r5, #0]
 800b774:	b903      	cbnz	r3, 800b778 <__sflush_r+0x7c>
 800b776:	6560      	str	r0, [r4, #84]	; 0x54
 800b778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b77a:	602f      	str	r7, [r5, #0]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d0ca      	beq.n	800b716 <__sflush_r+0x1a>
 800b780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__sflush_r+0x92>
 800b788:	4628      	mov	r0, r5
 800b78a:	f7ff fa95 	bl	800acb8 <_free_r>
 800b78e:	2000      	movs	r0, #0
 800b790:	6360      	str	r0, [r4, #52]	; 0x34
 800b792:	e7c1      	b.n	800b718 <__sflush_r+0x1c>
 800b794:	6a21      	ldr	r1, [r4, #32]
 800b796:	2301      	movs	r3, #1
 800b798:	4628      	mov	r0, r5
 800b79a:	47b0      	blx	r6
 800b79c:	1c41      	adds	r1, r0, #1
 800b79e:	d1c7      	bne.n	800b730 <__sflush_r+0x34>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0c4      	beq.n	800b730 <__sflush_r+0x34>
 800b7a6:	2b1d      	cmp	r3, #29
 800b7a8:	d001      	beq.n	800b7ae <__sflush_r+0xb2>
 800b7aa:	2b16      	cmp	r3, #22
 800b7ac:	d101      	bne.n	800b7b2 <__sflush_r+0xb6>
 800b7ae:	602f      	str	r7, [r5, #0]
 800b7b0:	e7b1      	b.n	800b716 <__sflush_r+0x1a>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	e7ad      	b.n	800b718 <__sflush_r+0x1c>
 800b7bc:	690f      	ldr	r7, [r1, #16]
 800b7be:	2f00      	cmp	r7, #0
 800b7c0:	d0a9      	beq.n	800b716 <__sflush_r+0x1a>
 800b7c2:	0793      	lsls	r3, r2, #30
 800b7c4:	680e      	ldr	r6, [r1, #0]
 800b7c6:	bf08      	it	eq
 800b7c8:	694b      	ldreq	r3, [r1, #20]
 800b7ca:	600f      	str	r7, [r1, #0]
 800b7cc:	bf18      	it	ne
 800b7ce:	2300      	movne	r3, #0
 800b7d0:	eba6 0807 	sub.w	r8, r6, r7
 800b7d4:	608b      	str	r3, [r1, #8]
 800b7d6:	f1b8 0f00 	cmp.w	r8, #0
 800b7da:	dd9c      	ble.n	800b716 <__sflush_r+0x1a>
 800b7dc:	6a21      	ldr	r1, [r4, #32]
 800b7de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e0:	4643      	mov	r3, r8
 800b7e2:	463a      	mov	r2, r7
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	47b0      	blx	r6
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	dc06      	bgt.n	800b7fa <__sflush_r+0xfe>
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	e78e      	b.n	800b718 <__sflush_r+0x1c>
 800b7fa:	4407      	add	r7, r0
 800b7fc:	eba8 0800 	sub.w	r8, r8, r0
 800b800:	e7e9      	b.n	800b7d6 <__sflush_r+0xda>
 800b802:	bf00      	nop
 800b804:	20400001 	.word	0x20400001

0800b808 <_fflush_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	690b      	ldr	r3, [r1, #16]
 800b80c:	4605      	mov	r5, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	b913      	cbnz	r3, 800b818 <_fflush_r+0x10>
 800b812:	2500      	movs	r5, #0
 800b814:	4628      	mov	r0, r5
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	b118      	cbz	r0, 800b822 <_fflush_r+0x1a>
 800b81a:	6983      	ldr	r3, [r0, #24]
 800b81c:	b90b      	cbnz	r3, 800b822 <_fflush_r+0x1a>
 800b81e:	f000 f887 	bl	800b930 <__sinit>
 800b822:	4b14      	ldr	r3, [pc, #80]	; (800b874 <_fflush_r+0x6c>)
 800b824:	429c      	cmp	r4, r3
 800b826:	d11b      	bne.n	800b860 <_fflush_r+0x58>
 800b828:	686c      	ldr	r4, [r5, #4]
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d0ef      	beq.n	800b812 <_fflush_r+0xa>
 800b832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b834:	07d0      	lsls	r0, r2, #31
 800b836:	d404      	bmi.n	800b842 <_fflush_r+0x3a>
 800b838:	0599      	lsls	r1, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_fflush_r+0x3a>
 800b83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b83e:	f000 f915 	bl	800ba6c <__retarget_lock_acquire_recursive>
 800b842:	4628      	mov	r0, r5
 800b844:	4621      	mov	r1, r4
 800b846:	f7ff ff59 	bl	800b6fc <__sflush_r>
 800b84a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b84c:	07da      	lsls	r2, r3, #31
 800b84e:	4605      	mov	r5, r0
 800b850:	d4e0      	bmi.n	800b814 <_fflush_r+0xc>
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	059b      	lsls	r3, r3, #22
 800b856:	d4dd      	bmi.n	800b814 <_fflush_r+0xc>
 800b858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b85a:	f000 f908 	bl	800ba6e <__retarget_lock_release_recursive>
 800b85e:	e7d9      	b.n	800b814 <_fflush_r+0xc>
 800b860:	4b05      	ldr	r3, [pc, #20]	; (800b878 <_fflush_r+0x70>)
 800b862:	429c      	cmp	r4, r3
 800b864:	d101      	bne.n	800b86a <_fflush_r+0x62>
 800b866:	68ac      	ldr	r4, [r5, #8]
 800b868:	e7df      	b.n	800b82a <_fflush_r+0x22>
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <_fflush_r+0x74>)
 800b86c:	429c      	cmp	r4, r3
 800b86e:	bf08      	it	eq
 800b870:	68ec      	ldreq	r4, [r5, #12]
 800b872:	e7da      	b.n	800b82a <_fflush_r+0x22>
 800b874:	0800c4e4 	.word	0x0800c4e4
 800b878:	0800c504 	.word	0x0800c504
 800b87c:	0800c4c4 	.word	0x0800c4c4

0800b880 <std>:
 800b880:	2300      	movs	r3, #0
 800b882:	b510      	push	{r4, lr}
 800b884:	4604      	mov	r4, r0
 800b886:	e9c0 3300 	strd	r3, r3, [r0]
 800b88a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b88e:	6083      	str	r3, [r0, #8]
 800b890:	8181      	strh	r1, [r0, #12]
 800b892:	6643      	str	r3, [r0, #100]	; 0x64
 800b894:	81c2      	strh	r2, [r0, #14]
 800b896:	6183      	str	r3, [r0, #24]
 800b898:	4619      	mov	r1, r3
 800b89a:	2208      	movs	r2, #8
 800b89c:	305c      	adds	r0, #92	; 0x5c
 800b89e:	f7fb ff7b 	bl	8007798 <memset>
 800b8a2:	4b05      	ldr	r3, [pc, #20]	; (800b8b8 <std+0x38>)
 800b8a4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8a6:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <std+0x3c>)
 800b8a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <std+0x40>)
 800b8ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x44>)
 800b8b0:	6224      	str	r4, [r4, #32]
 800b8b2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8b4:	bd10      	pop	{r4, pc}
 800b8b6:	bf00      	nop
 800b8b8:	0800bbd5 	.word	0x0800bbd5
 800b8bc:	0800bbf7 	.word	0x0800bbf7
 800b8c0:	0800bc2f 	.word	0x0800bc2f
 800b8c4:	0800bc53 	.word	0x0800bc53

0800b8c8 <_cleanup_r>:
 800b8c8:	4901      	ldr	r1, [pc, #4]	; (800b8d0 <_cleanup_r+0x8>)
 800b8ca:	f000 b8af 	b.w	800ba2c <_fwalk_reent>
 800b8ce:	bf00      	nop
 800b8d0:	0800b809 	.word	0x0800b809

0800b8d4 <__sfmoreglue>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	2268      	movs	r2, #104	; 0x68
 800b8d8:	1e4d      	subs	r5, r1, #1
 800b8da:	4355      	muls	r5, r2
 800b8dc:	460e      	mov	r6, r1
 800b8de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8e2:	f7ff fa55 	bl	800ad90 <_malloc_r>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	b140      	cbz	r0, 800b8fc <__sfmoreglue+0x28>
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	60a0      	str	r0, [r4, #8]
 800b8f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8f8:	f7fb ff4e 	bl	8007798 <memset>
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}

0800b900 <__sfp_lock_acquire>:
 800b900:	4801      	ldr	r0, [pc, #4]	; (800b908 <__sfp_lock_acquire+0x8>)
 800b902:	f000 b8b3 	b.w	800ba6c <__retarget_lock_acquire_recursive>
 800b906:	bf00      	nop
 800b908:	20001359 	.word	0x20001359

0800b90c <__sfp_lock_release>:
 800b90c:	4801      	ldr	r0, [pc, #4]	; (800b914 <__sfp_lock_release+0x8>)
 800b90e:	f000 b8ae 	b.w	800ba6e <__retarget_lock_release_recursive>
 800b912:	bf00      	nop
 800b914:	20001359 	.word	0x20001359

0800b918 <__sinit_lock_acquire>:
 800b918:	4801      	ldr	r0, [pc, #4]	; (800b920 <__sinit_lock_acquire+0x8>)
 800b91a:	f000 b8a7 	b.w	800ba6c <__retarget_lock_acquire_recursive>
 800b91e:	bf00      	nop
 800b920:	2000135a 	.word	0x2000135a

0800b924 <__sinit_lock_release>:
 800b924:	4801      	ldr	r0, [pc, #4]	; (800b92c <__sinit_lock_release+0x8>)
 800b926:	f000 b8a2 	b.w	800ba6e <__retarget_lock_release_recursive>
 800b92a:	bf00      	nop
 800b92c:	2000135a 	.word	0x2000135a

0800b930 <__sinit>:
 800b930:	b510      	push	{r4, lr}
 800b932:	4604      	mov	r4, r0
 800b934:	f7ff fff0 	bl	800b918 <__sinit_lock_acquire>
 800b938:	69a3      	ldr	r3, [r4, #24]
 800b93a:	b11b      	cbz	r3, 800b944 <__sinit+0x14>
 800b93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b940:	f7ff bff0 	b.w	800b924 <__sinit_lock_release>
 800b944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b948:	6523      	str	r3, [r4, #80]	; 0x50
 800b94a:	4b13      	ldr	r3, [pc, #76]	; (800b998 <__sinit+0x68>)
 800b94c:	4a13      	ldr	r2, [pc, #76]	; (800b99c <__sinit+0x6c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	62a2      	str	r2, [r4, #40]	; 0x28
 800b952:	42a3      	cmp	r3, r4
 800b954:	bf04      	itt	eq
 800b956:	2301      	moveq	r3, #1
 800b958:	61a3      	streq	r3, [r4, #24]
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 f820 	bl	800b9a0 <__sfp>
 800b960:	6060      	str	r0, [r4, #4]
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f81c 	bl	800b9a0 <__sfp>
 800b968:	60a0      	str	r0, [r4, #8]
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 f818 	bl	800b9a0 <__sfp>
 800b970:	2200      	movs	r2, #0
 800b972:	60e0      	str	r0, [r4, #12]
 800b974:	2104      	movs	r1, #4
 800b976:	6860      	ldr	r0, [r4, #4]
 800b978:	f7ff ff82 	bl	800b880 <std>
 800b97c:	68a0      	ldr	r0, [r4, #8]
 800b97e:	2201      	movs	r2, #1
 800b980:	2109      	movs	r1, #9
 800b982:	f7ff ff7d 	bl	800b880 <std>
 800b986:	68e0      	ldr	r0, [r4, #12]
 800b988:	2202      	movs	r2, #2
 800b98a:	2112      	movs	r1, #18
 800b98c:	f7ff ff78 	bl	800b880 <std>
 800b990:	2301      	movs	r3, #1
 800b992:	61a3      	str	r3, [r4, #24]
 800b994:	e7d2      	b.n	800b93c <__sinit+0xc>
 800b996:	bf00      	nop
 800b998:	0800c088 	.word	0x0800c088
 800b99c:	0800b8c9 	.word	0x0800b8c9

0800b9a0 <__sfp>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	4607      	mov	r7, r0
 800b9a4:	f7ff ffac 	bl	800b900 <__sfp_lock_acquire>
 800b9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <__sfp+0x84>)
 800b9aa:	681e      	ldr	r6, [r3, #0]
 800b9ac:	69b3      	ldr	r3, [r6, #24]
 800b9ae:	b913      	cbnz	r3, 800b9b6 <__sfp+0x16>
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	f7ff ffbd 	bl	800b930 <__sinit>
 800b9b6:	3648      	adds	r6, #72	; 0x48
 800b9b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	d503      	bpl.n	800b9c8 <__sfp+0x28>
 800b9c0:	6833      	ldr	r3, [r6, #0]
 800b9c2:	b30b      	cbz	r3, 800ba08 <__sfp+0x68>
 800b9c4:	6836      	ldr	r6, [r6, #0]
 800b9c6:	e7f7      	b.n	800b9b8 <__sfp+0x18>
 800b9c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9cc:	b9d5      	cbnz	r5, 800ba04 <__sfp+0x64>
 800b9ce:	4b16      	ldr	r3, [pc, #88]	; (800ba28 <__sfp+0x88>)
 800b9d0:	60e3      	str	r3, [r4, #12]
 800b9d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9d6:	6665      	str	r5, [r4, #100]	; 0x64
 800b9d8:	f000 f847 	bl	800ba6a <__retarget_lock_init_recursive>
 800b9dc:	f7ff ff96 	bl	800b90c <__sfp_lock_release>
 800b9e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9e8:	6025      	str	r5, [r4, #0]
 800b9ea:	61a5      	str	r5, [r4, #24]
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	4629      	mov	r1, r5
 800b9f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9f4:	f7fb fed0 	bl	8007798 <memset>
 800b9f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba00:	4620      	mov	r0, r4
 800ba02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba04:	3468      	adds	r4, #104	; 0x68
 800ba06:	e7d9      	b.n	800b9bc <__sfp+0x1c>
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f7ff ff62 	bl	800b8d4 <__sfmoreglue>
 800ba10:	4604      	mov	r4, r0
 800ba12:	6030      	str	r0, [r6, #0]
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1d5      	bne.n	800b9c4 <__sfp+0x24>
 800ba18:	f7ff ff78 	bl	800b90c <__sfp_lock_release>
 800ba1c:	230c      	movs	r3, #12
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	e7ee      	b.n	800ba00 <__sfp+0x60>
 800ba22:	bf00      	nop
 800ba24:	0800c088 	.word	0x0800c088
 800ba28:	ffff0001 	.word	0xffff0001

0800ba2c <_fwalk_reent>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	4606      	mov	r6, r0
 800ba32:	4688      	mov	r8, r1
 800ba34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba38:	2700      	movs	r7, #0
 800ba3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba3e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba42:	d505      	bpl.n	800ba50 <_fwalk_reent+0x24>
 800ba44:	6824      	ldr	r4, [r4, #0]
 800ba46:	2c00      	cmp	r4, #0
 800ba48:	d1f7      	bne.n	800ba3a <_fwalk_reent+0xe>
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba50:	89ab      	ldrh	r3, [r5, #12]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d907      	bls.n	800ba66 <_fwalk_reent+0x3a>
 800ba56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	d003      	beq.n	800ba66 <_fwalk_reent+0x3a>
 800ba5e:	4629      	mov	r1, r5
 800ba60:	4630      	mov	r0, r6
 800ba62:	47c0      	blx	r8
 800ba64:	4307      	orrs	r7, r0
 800ba66:	3568      	adds	r5, #104	; 0x68
 800ba68:	e7e9      	b.n	800ba3e <_fwalk_reent+0x12>

0800ba6a <__retarget_lock_init_recursive>:
 800ba6a:	4770      	bx	lr

0800ba6c <__retarget_lock_acquire_recursive>:
 800ba6c:	4770      	bx	lr

0800ba6e <__retarget_lock_release_recursive>:
 800ba6e:	4770      	bx	lr

0800ba70 <__swhatbuf_r>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	460e      	mov	r6, r1
 800ba74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba78:	2900      	cmp	r1, #0
 800ba7a:	b096      	sub	sp, #88	; 0x58
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	461d      	mov	r5, r3
 800ba80:	da08      	bge.n	800ba94 <__swhatbuf_r+0x24>
 800ba82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba86:	2200      	movs	r2, #0
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	061a      	lsls	r2, r3, #24
 800ba8c:	d410      	bmi.n	800bab0 <__swhatbuf_r+0x40>
 800ba8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba92:	e00e      	b.n	800bab2 <__swhatbuf_r+0x42>
 800ba94:	466a      	mov	r2, sp
 800ba96:	f000 f903 	bl	800bca0 <_fstat_r>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	dbf1      	blt.n	800ba82 <__swhatbuf_r+0x12>
 800ba9e:	9a01      	ldr	r2, [sp, #4]
 800baa0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baa4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800baa8:	425a      	negs	r2, r3
 800baaa:	415a      	adcs	r2, r3
 800baac:	602a      	str	r2, [r5, #0]
 800baae:	e7ee      	b.n	800ba8e <__swhatbuf_r+0x1e>
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	2000      	movs	r0, #0
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	b016      	add	sp, #88	; 0x58
 800bab8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800babc <__smakebuf_r>:
 800babc:	898b      	ldrh	r3, [r1, #12]
 800babe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bac0:	079d      	lsls	r5, r3, #30
 800bac2:	4606      	mov	r6, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	d507      	bpl.n	800bad8 <__smakebuf_r+0x1c>
 800bac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	6123      	str	r3, [r4, #16]
 800bad0:	2301      	movs	r3, #1
 800bad2:	6163      	str	r3, [r4, #20]
 800bad4:	b002      	add	sp, #8
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
 800bad8:	ab01      	add	r3, sp, #4
 800bada:	466a      	mov	r2, sp
 800badc:	f7ff ffc8 	bl	800ba70 <__swhatbuf_r>
 800bae0:	9900      	ldr	r1, [sp, #0]
 800bae2:	4605      	mov	r5, r0
 800bae4:	4630      	mov	r0, r6
 800bae6:	f7ff f953 	bl	800ad90 <_malloc_r>
 800baea:	b948      	cbnz	r0, 800bb00 <__smakebuf_r+0x44>
 800baec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf0:	059a      	lsls	r2, r3, #22
 800baf2:	d4ef      	bmi.n	800bad4 <__smakebuf_r+0x18>
 800baf4:	f023 0303 	bic.w	r3, r3, #3
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	81a3      	strh	r3, [r4, #12]
 800bafe:	e7e3      	b.n	800bac8 <__smakebuf_r+0xc>
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <__smakebuf_r+0x7c>)
 800bb02:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	6020      	str	r0, [r4, #0]
 800bb08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	9b00      	ldr	r3, [sp, #0]
 800bb10:	6163      	str	r3, [r4, #20]
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	6120      	str	r0, [r4, #16]
 800bb16:	b15b      	cbz	r3, 800bb30 <__smakebuf_r+0x74>
 800bb18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f000 f8d1 	bl	800bcc4 <_isatty_r>
 800bb22:	b128      	cbz	r0, 800bb30 <__smakebuf_r+0x74>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f023 0303 	bic.w	r3, r3, #3
 800bb2a:	f043 0301 	orr.w	r3, r3, #1
 800bb2e:	81a3      	strh	r3, [r4, #12]
 800bb30:	89a0      	ldrh	r0, [r4, #12]
 800bb32:	4305      	orrs	r5, r0
 800bb34:	81a5      	strh	r5, [r4, #12]
 800bb36:	e7cd      	b.n	800bad4 <__smakebuf_r+0x18>
 800bb38:	0800b8c9 	.word	0x0800b8c9

0800bb3c <_malloc_usable_size_r>:
 800bb3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb40:	1f18      	subs	r0, r3, #4
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	bfbc      	itt	lt
 800bb46:	580b      	ldrlt	r3, [r1, r0]
 800bb48:	18c0      	addlt	r0, r0, r3
 800bb4a:	4770      	bx	lr

0800bb4c <_raise_r>:
 800bb4c:	291f      	cmp	r1, #31
 800bb4e:	b538      	push	{r3, r4, r5, lr}
 800bb50:	4604      	mov	r4, r0
 800bb52:	460d      	mov	r5, r1
 800bb54:	d904      	bls.n	800bb60 <_raise_r+0x14>
 800bb56:	2316      	movs	r3, #22
 800bb58:	6003      	str	r3, [r0, #0]
 800bb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb62:	b112      	cbz	r2, 800bb6a <_raise_r+0x1e>
 800bb64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb68:	b94b      	cbnz	r3, 800bb7e <_raise_r+0x32>
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f000 f830 	bl	800bbd0 <_getpid_r>
 800bb70:	462a      	mov	r2, r5
 800bb72:	4601      	mov	r1, r0
 800bb74:	4620      	mov	r0, r4
 800bb76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb7a:	f000 b817 	b.w	800bbac <_kill_r>
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d00a      	beq.n	800bb98 <_raise_r+0x4c>
 800bb82:	1c59      	adds	r1, r3, #1
 800bb84:	d103      	bne.n	800bb8e <_raise_r+0x42>
 800bb86:	2316      	movs	r3, #22
 800bb88:	6003      	str	r3, [r0, #0]
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	e7e7      	b.n	800bb5e <_raise_r+0x12>
 800bb8e:	2400      	movs	r4, #0
 800bb90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb94:	4628      	mov	r0, r5
 800bb96:	4798      	blx	r3
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7e0      	b.n	800bb5e <_raise_r+0x12>

0800bb9c <raise>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <raise+0xc>)
 800bb9e:	4601      	mov	r1, r0
 800bba0:	6818      	ldr	r0, [r3, #0]
 800bba2:	f7ff bfd3 	b.w	800bb4c <_raise_r>
 800bba6:	bf00      	nop
 800bba8:	20000278 	.word	0x20000278

0800bbac <_kill_r>:
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4d07      	ldr	r5, [pc, #28]	; (800bbcc <_kill_r+0x20>)
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	4608      	mov	r0, r1
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	602b      	str	r3, [r5, #0]
 800bbba:	f7f5 ffe3 	bl	8001b84 <_kill>
 800bbbe:	1c43      	adds	r3, r0, #1
 800bbc0:	d102      	bne.n	800bbc8 <_kill_r+0x1c>
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	b103      	cbz	r3, 800bbc8 <_kill_r+0x1c>
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	bd38      	pop	{r3, r4, r5, pc}
 800bbca:	bf00      	nop
 800bbcc:	20001354 	.word	0x20001354

0800bbd0 <_getpid_r>:
 800bbd0:	f7f5 bfd0 	b.w	8001b74 <_getpid>

0800bbd4 <__sread>:
 800bbd4:	b510      	push	{r4, lr}
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbdc:	f000 f894 	bl	800bd08 <_read_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	bfab      	itete	ge
 800bbe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbe6:	89a3      	ldrhlt	r3, [r4, #12]
 800bbe8:	181b      	addge	r3, r3, r0
 800bbea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbee:	bfac      	ite	ge
 800bbf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbf2:	81a3      	strhlt	r3, [r4, #12]
 800bbf4:	bd10      	pop	{r4, pc}

0800bbf6 <__swrite>:
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	461f      	mov	r7, r3
 800bbfc:	898b      	ldrh	r3, [r1, #12]
 800bbfe:	05db      	lsls	r3, r3, #23
 800bc00:	4605      	mov	r5, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4616      	mov	r6, r2
 800bc06:	d505      	bpl.n	800bc14 <__swrite+0x1e>
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f000 f868 	bl	800bce4 <_lseek_r>
 800bc14:	89a3      	ldrh	r3, [r4, #12]
 800bc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc1e:	81a3      	strh	r3, [r4, #12]
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4628      	mov	r0, r5
 800bc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	f000 b817 	b.w	800bc5c <_write_r>

0800bc2e <__sseek>:
 800bc2e:	b510      	push	{r4, lr}
 800bc30:	460c      	mov	r4, r1
 800bc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc36:	f000 f855 	bl	800bce4 <_lseek_r>
 800bc3a:	1c43      	adds	r3, r0, #1
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	bf15      	itete	ne
 800bc40:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc4a:	81a3      	strheq	r3, [r4, #12]
 800bc4c:	bf18      	it	ne
 800bc4e:	81a3      	strhne	r3, [r4, #12]
 800bc50:	bd10      	pop	{r4, pc}

0800bc52 <__sclose>:
 800bc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc56:	f000 b813 	b.w	800bc80 <_close_r>
	...

0800bc5c <_write_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d07      	ldr	r5, [pc, #28]	; (800bc7c <_write_r+0x20>)
 800bc60:	4604      	mov	r4, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	4611      	mov	r1, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	602a      	str	r2, [r5, #0]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f7f5 ffc1 	bl	8001bf2 <_write>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_write_r+0x1e>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_write_r+0x1e>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	20001354 	.word	0x20001354

0800bc80 <_close_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4d06      	ldr	r5, [pc, #24]	; (800bc9c <_close_r+0x1c>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	602b      	str	r3, [r5, #0]
 800bc8c:	f7f5 ffcd 	bl	8001c2a <_close>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d102      	bne.n	800bc9a <_close_r+0x1a>
 800bc94:	682b      	ldr	r3, [r5, #0]
 800bc96:	b103      	cbz	r3, 800bc9a <_close_r+0x1a>
 800bc98:	6023      	str	r3, [r4, #0]
 800bc9a:	bd38      	pop	{r3, r4, r5, pc}
 800bc9c:	20001354 	.word	0x20001354

0800bca0 <_fstat_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4d07      	ldr	r5, [pc, #28]	; (800bcc0 <_fstat_r+0x20>)
 800bca4:	2300      	movs	r3, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	4608      	mov	r0, r1
 800bcaa:	4611      	mov	r1, r2
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	f7f5 ffc8 	bl	8001c42 <_fstat>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	d102      	bne.n	800bcbc <_fstat_r+0x1c>
 800bcb6:	682b      	ldr	r3, [r5, #0]
 800bcb8:	b103      	cbz	r3, 800bcbc <_fstat_r+0x1c>
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20001354 	.word	0x20001354

0800bcc4 <_isatty_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	4d06      	ldr	r5, [pc, #24]	; (800bce0 <_isatty_r+0x1c>)
 800bcc8:	2300      	movs	r3, #0
 800bcca:	4604      	mov	r4, r0
 800bccc:	4608      	mov	r0, r1
 800bcce:	602b      	str	r3, [r5, #0]
 800bcd0:	f7f5 ffc7 	bl	8001c62 <_isatty>
 800bcd4:	1c43      	adds	r3, r0, #1
 800bcd6:	d102      	bne.n	800bcde <_isatty_r+0x1a>
 800bcd8:	682b      	ldr	r3, [r5, #0]
 800bcda:	b103      	cbz	r3, 800bcde <_isatty_r+0x1a>
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	20001354 	.word	0x20001354

0800bce4 <_lseek_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d07      	ldr	r5, [pc, #28]	; (800bd04 <_lseek_r+0x20>)
 800bce8:	4604      	mov	r4, r0
 800bcea:	4608      	mov	r0, r1
 800bcec:	4611      	mov	r1, r2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	602a      	str	r2, [r5, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f7f5 ffc0 	bl	8001c78 <_lseek>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_lseek_r+0x1e>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_lseek_r+0x1e>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20001354 	.word	0x20001354

0800bd08 <_read_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	; (800bd28 <_read_r+0x20>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f5 ff4e 	bl	8001bb8 <_read>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_read_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_read_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20001354 	.word	0x20001354

0800bd2c <_init>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

0800bd38 <_fini>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr


Aquarium_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .version      000002a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000b934  08000440  08000440  00010440  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007dc  0800bd78  0800bd78  0001bd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800c554  0800c554  0002044c  2**0
                  CONTENTS
  5 .ARM          00000008  0800c554  0800c554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800c55c  0800c55c  0002044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c55c  0800c55c  0001c55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800c560  0800c560  0001c560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000044c  20000000  0800c564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000f10  2000044c  0800c9b0  0002044c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000135c  0800c9b0  0002135c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2a3  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6d  00000000  00000000  0002f71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00033290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d80  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfaf  00000000  00000000  00034fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae9e  00000000  00000000  00052f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f1cb  00000000  00000000  0006ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010cfc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050ac  00000000  00000000  0010d010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000440 <__do_global_dtors_aux>:
 8000440:	b510      	push	{r4, lr}
 8000442:	4c05      	ldr	r4, [pc, #20]	; (8000458 <__do_global_dtors_aux+0x18>)
 8000444:	7823      	ldrb	r3, [r4, #0]
 8000446:	b933      	cbnz	r3, 8000456 <__do_global_dtors_aux+0x16>
 8000448:	4b04      	ldr	r3, [pc, #16]	; (800045c <__do_global_dtors_aux+0x1c>)
 800044a:	b113      	cbz	r3, 8000452 <__do_global_dtors_aux+0x12>
 800044c:	4804      	ldr	r0, [pc, #16]	; (8000460 <__do_global_dtors_aux+0x20>)
 800044e:	f3af 8000 	nop.w
 8000452:	2301      	movs	r3, #1
 8000454:	7023      	strb	r3, [r4, #0]
 8000456:	bd10      	pop	{r4, pc}
 8000458:	2000044c 	.word	0x2000044c
 800045c:	00000000 	.word	0x00000000
 8000460:	0800bd5c 	.word	0x0800bd5c

08000464 <frame_dummy>:
 8000464:	b508      	push	{r3, lr}
 8000466:	4b03      	ldr	r3, [pc, #12]	; (8000474 <frame_dummy+0x10>)
 8000468:	b11b      	cbz	r3, 8000472 <frame_dummy+0xe>
 800046a:	4903      	ldr	r1, [pc, #12]	; (8000478 <frame_dummy+0x14>)
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <frame_dummy+0x18>)
 800046e:	f3af 8000 	nop.w
 8000472:	bd08      	pop	{r3, pc}
 8000474:	00000000 	.word	0x00000000
 8000478:	20000450 	.word	0x20000450
 800047c:	0800bd5c 	.word	0x0800bd5c

08000480 <strcmp>:
 8000480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000488:	2a01      	cmp	r2, #1
 800048a:	bf28      	it	cs
 800048c:	429a      	cmpcs	r2, r3
 800048e:	d0f7      	beq.n	8000480 <strcmp>
 8000490:	1ad0      	subs	r0, r2, r3
 8000492:	4770      	bx	lr

08000494 <strlen>:
 8000494:	4603      	mov	r3, r0
 8000496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800049a:	2a00      	cmp	r2, #0
 800049c:	d1fb      	bne.n	8000496 <strlen+0x2>
 800049e:	1a18      	subs	r0, r3, r0
 80004a0:	3801      	subs	r0, #1
 80004a2:	4770      	bx	lr
	...

080004b0 <memchr>:
 80004b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004b4:	2a10      	cmp	r2, #16
 80004b6:	db2b      	blt.n	8000510 <memchr+0x60>
 80004b8:	f010 0f07 	tst.w	r0, #7
 80004bc:	d008      	beq.n	80004d0 <memchr+0x20>
 80004be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c2:	3a01      	subs	r2, #1
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d02d      	beq.n	8000524 <memchr+0x74>
 80004c8:	f010 0f07 	tst.w	r0, #7
 80004cc:	b342      	cbz	r2, 8000520 <memchr+0x70>
 80004ce:	d1f6      	bne.n	80004be <memchr+0xe>
 80004d0:	b4f0      	push	{r4, r5, r6, r7}
 80004d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80004d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80004da:	f022 0407 	bic.w	r4, r2, #7
 80004de:	f07f 0700 	mvns.w	r7, #0
 80004e2:	2300      	movs	r3, #0
 80004e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80004e8:	3c08      	subs	r4, #8
 80004ea:	ea85 0501 	eor.w	r5, r5, r1
 80004ee:	ea86 0601 	eor.w	r6, r6, r1
 80004f2:	fa85 f547 	uadd8	r5, r5, r7
 80004f6:	faa3 f587 	sel	r5, r3, r7
 80004fa:	fa86 f647 	uadd8	r6, r6, r7
 80004fe:	faa5 f687 	sel	r6, r5, r7
 8000502:	b98e      	cbnz	r6, 8000528 <memchr+0x78>
 8000504:	d1ee      	bne.n	80004e4 <memchr+0x34>
 8000506:	bcf0      	pop	{r4, r5, r6, r7}
 8000508:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800050c:	f002 0207 	and.w	r2, r2, #7
 8000510:	b132      	cbz	r2, 8000520 <memchr+0x70>
 8000512:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000516:	3a01      	subs	r2, #1
 8000518:	ea83 0301 	eor.w	r3, r3, r1
 800051c:	b113      	cbz	r3, 8000524 <memchr+0x74>
 800051e:	d1f8      	bne.n	8000512 <memchr+0x62>
 8000520:	2000      	movs	r0, #0
 8000522:	4770      	bx	lr
 8000524:	3801      	subs	r0, #1
 8000526:	4770      	bx	lr
 8000528:	2d00      	cmp	r5, #0
 800052a:	bf06      	itte	eq
 800052c:	4635      	moveq	r5, r6
 800052e:	3803      	subeq	r0, #3
 8000530:	3807      	subne	r0, #7
 8000532:	f015 0f01 	tst.w	r5, #1
 8000536:	d107      	bne.n	8000548 <memchr+0x98>
 8000538:	3001      	adds	r0, #1
 800053a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800053e:	bf02      	ittt	eq
 8000540:	3001      	addeq	r0, #1
 8000542:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000546:	3001      	addeq	r0, #1
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	3801      	subs	r0, #1
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_drsub>:
 8000550:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e002      	b.n	800055c <__adddf3>
 8000556:	bf00      	nop

08000558 <__aeabi_dsub>:
 8000558:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800055c <__adddf3>:
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000562:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	bf1f      	itttt	ne
 8000572:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000576:	ea55 0c02 	orrsne.w	ip, r5, r2
 800057a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800057e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000582:	f000 80e2 	beq.w	800074a <__adddf3+0x1ee>
 8000586:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800058a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800058e:	bfb8      	it	lt
 8000590:	426d      	neglt	r5, r5
 8000592:	dd0c      	ble.n	80005ae <__adddf3+0x52>
 8000594:	442c      	add	r4, r5
 8000596:	ea80 0202 	eor.w	r2, r0, r2
 800059a:	ea81 0303 	eor.w	r3, r1, r3
 800059e:	ea82 0000 	eor.w	r0, r2, r0
 80005a2:	ea83 0101 	eor.w	r1, r3, r1
 80005a6:	ea80 0202 	eor.w	r2, r0, r2
 80005aa:	ea81 0303 	eor.w	r3, r1, r3
 80005ae:	2d36      	cmp	r5, #54	; 0x36
 80005b0:	bf88      	it	hi
 80005b2:	bd30      	pophi	{r4, r5, pc}
 80005b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005c4:	d002      	beq.n	80005cc <__adddf3+0x70>
 80005c6:	4240      	negs	r0, r0
 80005c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005d8:	d002      	beq.n	80005e0 <__adddf3+0x84>
 80005da:	4252      	negs	r2, r2
 80005dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005e0:	ea94 0f05 	teq	r4, r5
 80005e4:	f000 80a7 	beq.w	8000736 <__adddf3+0x1da>
 80005e8:	f1a4 0401 	sub.w	r4, r4, #1
 80005ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80005f0:	db0d      	blt.n	800060e <__adddf3+0xb2>
 80005f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005f6:	fa22 f205 	lsr.w	r2, r2, r5
 80005fa:	1880      	adds	r0, r0, r2
 80005fc:	f141 0100 	adc.w	r1, r1, #0
 8000600:	fa03 f20e 	lsl.w	r2, r3, lr
 8000604:	1880      	adds	r0, r0, r2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	4159      	adcs	r1, r3
 800060c:	e00e      	b.n	800062c <__adddf3+0xd0>
 800060e:	f1a5 0520 	sub.w	r5, r5, #32
 8000612:	f10e 0e20 	add.w	lr, lr, #32
 8000616:	2a01      	cmp	r2, #1
 8000618:	fa03 fc0e 	lsl.w	ip, r3, lr
 800061c:	bf28      	it	cs
 800061e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000622:	fa43 f305 	asr.w	r3, r3, r5
 8000626:	18c0      	adds	r0, r0, r3
 8000628:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000630:	d507      	bpl.n	8000642 <__adddf3+0xe6>
 8000632:	f04f 0e00 	mov.w	lr, #0
 8000636:	f1dc 0c00 	rsbs	ip, ip, #0
 800063a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800063e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000642:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000646:	d31b      	bcc.n	8000680 <__adddf3+0x124>
 8000648:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800064c:	d30c      	bcc.n	8000668 <__adddf3+0x10c>
 800064e:	0849      	lsrs	r1, r1, #1
 8000650:	ea5f 0030 	movs.w	r0, r0, rrx
 8000654:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000658:	f104 0401 	add.w	r4, r4, #1
 800065c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000660:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000664:	f080 809a 	bcs.w	800079c <__adddf3+0x240>
 8000668:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	ea41 0105 	orr.w	r1, r1, r5
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000684:	4140      	adcs	r0, r0
 8000686:	eb41 0101 	adc.w	r1, r1, r1
 800068a:	3c01      	subs	r4, #1
 800068c:	bf28      	it	cs
 800068e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000692:	d2e9      	bcs.n	8000668 <__adddf3+0x10c>
 8000694:	f091 0f00 	teq	r1, #0
 8000698:	bf04      	itt	eq
 800069a:	4601      	moveq	r1, r0
 800069c:	2000      	moveq	r0, #0
 800069e:	fab1 f381 	clz	r3, r1
 80006a2:	bf08      	it	eq
 80006a4:	3320      	addeq	r3, #32
 80006a6:	f1a3 030b 	sub.w	r3, r3, #11
 80006aa:	f1b3 0220 	subs.w	r2, r3, #32
 80006ae:	da0c      	bge.n	80006ca <__adddf3+0x16e>
 80006b0:	320c      	adds	r2, #12
 80006b2:	dd08      	ble.n	80006c6 <__adddf3+0x16a>
 80006b4:	f102 0c14 	add.w	ip, r2, #20
 80006b8:	f1c2 020c 	rsb	r2, r2, #12
 80006bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80006c0:	fa21 f102 	lsr.w	r1, r1, r2
 80006c4:	e00c      	b.n	80006e0 <__adddf3+0x184>
 80006c6:	f102 0214 	add.w	r2, r2, #20
 80006ca:	bfd8      	it	le
 80006cc:	f1c2 0c20 	rsble	ip, r2, #32
 80006d0:	fa01 f102 	lsl.w	r1, r1, r2
 80006d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006d8:	bfdc      	itt	le
 80006da:	ea41 010c 	orrle.w	r1, r1, ip
 80006de:	4090      	lslle	r0, r2
 80006e0:	1ae4      	subs	r4, r4, r3
 80006e2:	bfa2      	ittt	ge
 80006e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006e8:	4329      	orrge	r1, r5
 80006ea:	bd30      	popge	{r4, r5, pc}
 80006ec:	ea6f 0404 	mvn.w	r4, r4
 80006f0:	3c1f      	subs	r4, #31
 80006f2:	da1c      	bge.n	800072e <__adddf3+0x1d2>
 80006f4:	340c      	adds	r4, #12
 80006f6:	dc0e      	bgt.n	8000716 <__adddf3+0x1ba>
 80006f8:	f104 0414 	add.w	r4, r4, #20
 80006fc:	f1c4 0220 	rsb	r2, r4, #32
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f302 	lsl.w	r3, r1, r2
 8000708:	ea40 0003 	orr.w	r0, r0, r3
 800070c:	fa21 f304 	lsr.w	r3, r1, r4
 8000710:	ea45 0103 	orr.w	r1, r5, r3
 8000714:	bd30      	pop	{r4, r5, pc}
 8000716:	f1c4 040c 	rsb	r4, r4, #12
 800071a:	f1c4 0220 	rsb	r2, r4, #32
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 f304 	lsl.w	r3, r1, r4
 8000726:	ea40 0003 	orr.w	r0, r0, r3
 800072a:	4629      	mov	r1, r5
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	fa21 f004 	lsr.w	r0, r1, r4
 8000732:	4629      	mov	r1, r5
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	f094 0f00 	teq	r4, #0
 800073a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800073e:	bf06      	itte	eq
 8000740:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000744:	3401      	addeq	r4, #1
 8000746:	3d01      	subne	r5, #1
 8000748:	e74e      	b.n	80005e8 <__adddf3+0x8c>
 800074a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074e:	bf18      	it	ne
 8000750:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000754:	d029      	beq.n	80007aa <__adddf3+0x24e>
 8000756:	ea94 0f05 	teq	r4, r5
 800075a:	bf08      	it	eq
 800075c:	ea90 0f02 	teqeq	r0, r2
 8000760:	d005      	beq.n	800076e <__adddf3+0x212>
 8000762:	ea54 0c00 	orrs.w	ip, r4, r0
 8000766:	bf04      	itt	eq
 8000768:	4619      	moveq	r1, r3
 800076a:	4610      	moveq	r0, r2
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea91 0f03 	teq	r1, r3
 8000772:	bf1e      	ittt	ne
 8000774:	2100      	movne	r1, #0
 8000776:	2000      	movne	r0, #0
 8000778:	bd30      	popne	{r4, r5, pc}
 800077a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800077e:	d105      	bne.n	800078c <__adddf3+0x230>
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	4149      	adcs	r1, r1
 8000784:	bf28      	it	cs
 8000786:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800078a:	bd30      	pop	{r4, r5, pc}
 800078c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000790:	bf3c      	itt	cc
 8000792:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000796:	bd30      	popcc	{r4, r5, pc}
 8000798:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800079c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ae:	bf1a      	itte	ne
 80007b0:	4619      	movne	r1, r3
 80007b2:	4610      	movne	r0, r2
 80007b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007b8:	bf1c      	itt	ne
 80007ba:	460b      	movne	r3, r1
 80007bc:	4602      	movne	r2, r0
 80007be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007c2:	bf06      	itte	eq
 80007c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007c8:	ea91 0f03 	teqeq	r1, r3
 80007cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	bf00      	nop

080007d4 <__aeabi_ui2d>:
 80007d4:	f090 0f00 	teq	r0, #0
 80007d8:	bf04      	itt	eq
 80007da:	2100      	moveq	r1, #0
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e8:	f04f 0500 	mov.w	r5, #0
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	e750      	b.n	8000694 <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_i2d>:
 80007f4:	f090 0f00 	teq	r0, #0
 80007f8:	bf04      	itt	eq
 80007fa:	2100      	moveq	r1, #0
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000804:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000808:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800080c:	bf48      	it	mi
 800080e:	4240      	negmi	r0, r0
 8000810:	f04f 0100 	mov.w	r1, #0
 8000814:	e73e      	b.n	8000694 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_f2d>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800081e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000822:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000826:	bf1f      	itttt	ne
 8000828:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800082c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000830:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000834:	4770      	bxne	lr
 8000836:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800083a:	bf08      	it	eq
 800083c:	4770      	bxeq	lr
 800083e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000842:	bf04      	itt	eq
 8000844:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000848:	4770      	bxeq	lr
 800084a:	b530      	push	{r4, r5, lr}
 800084c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000850:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000854:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000858:	e71c      	b.n	8000694 <__adddf3+0x138>
 800085a:	bf00      	nop

0800085c <__aeabi_ul2d>:
 800085c:	ea50 0201 	orrs.w	r2, r0, r1
 8000860:	bf08      	it	eq
 8000862:	4770      	bxeq	lr
 8000864:	b530      	push	{r4, r5, lr}
 8000866:	f04f 0500 	mov.w	r5, #0
 800086a:	e00a      	b.n	8000882 <__aeabi_l2d+0x16>

0800086c <__aeabi_l2d>:
 800086c:	ea50 0201 	orrs.w	r2, r0, r1
 8000870:	bf08      	it	eq
 8000872:	4770      	bxeq	lr
 8000874:	b530      	push	{r4, r5, lr}
 8000876:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800087a:	d502      	bpl.n	8000882 <__aeabi_l2d+0x16>
 800087c:	4240      	negs	r0, r0
 800087e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000882:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000886:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800088e:	f43f aed8 	beq.w	8000642 <__adddf3+0xe6>
 8000892:	f04f 0203 	mov.w	r2, #3
 8000896:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800089a:	bf18      	it	ne
 800089c:	3203      	addne	r2, #3
 800089e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008a2:	bf18      	it	ne
 80008a4:	3203      	addne	r2, #3
 80008a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80008ba:	ea40 000e 	orr.w	r0, r0, lr
 80008be:	fa21 f102 	lsr.w	r1, r1, r2
 80008c2:	4414      	add	r4, r2
 80008c4:	e6bd      	b.n	8000642 <__adddf3+0xe6>
 80008c6:	bf00      	nop

080008c8 <__aeabi_dmul>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d6:	bf1d      	ittte	ne
 80008d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008dc:	ea94 0f0c 	teqne	r4, ip
 80008e0:	ea95 0f0c 	teqne	r5, ip
 80008e4:	f000 f8de 	bleq	8000aa4 <__aeabi_dmul+0x1dc>
 80008e8:	442c      	add	r4, r5
 80008ea:	ea81 0603 	eor.w	r6, r1, r3
 80008ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008fa:	bf18      	it	ne
 80008fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000908:	d038      	beq.n	800097c <__aeabi_dmul+0xb4>
 800090a:	fba0 ce02 	umull	ip, lr, r0, r2
 800090e:	f04f 0500 	mov.w	r5, #0
 8000912:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000916:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800091a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800091e:	f04f 0600 	mov.w	r6, #0
 8000922:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000926:	f09c 0f00 	teq	ip, #0
 800092a:	bf18      	it	ne
 800092c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000930:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000934:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000938:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800093c:	d204      	bcs.n	8000948 <__aeabi_dmul+0x80>
 800093e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000942:	416d      	adcs	r5, r5
 8000944:	eb46 0606 	adc.w	r6, r6, r6
 8000948:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800094c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000950:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000954:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000958:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800095c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000960:	bf88      	it	hi
 8000962:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000966:	d81e      	bhi.n	80009a6 <__aeabi_dmul+0xde>
 8000968:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800096c:	bf08      	it	eq
 800096e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000972:	f150 0000 	adcs.w	r0, r0, #0
 8000976:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000980:	ea46 0101 	orr.w	r1, r6, r1
 8000984:	ea40 0002 	orr.w	r0, r0, r2
 8000988:	ea81 0103 	eor.w	r1, r1, r3
 800098c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000990:	bfc2      	ittt	gt
 8000992:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099a:	bd70      	popgt	{r4, r5, r6, pc}
 800099c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a0:	f04f 0e00 	mov.w	lr, #0
 80009a4:	3c01      	subs	r4, #1
 80009a6:	f300 80ab 	bgt.w	8000b00 <__aeabi_dmul+0x238>
 80009aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009ae:	bfde      	ittt	le
 80009b0:	2000      	movle	r0, #0
 80009b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009b6:	bd70      	pople	{r4, r5, r6, pc}
 80009b8:	f1c4 0400 	rsb	r4, r4, #0
 80009bc:	3c20      	subs	r4, #32
 80009be:	da35      	bge.n	8000a2c <__aeabi_dmul+0x164>
 80009c0:	340c      	adds	r4, #12
 80009c2:	dc1b      	bgt.n	80009fc <__aeabi_dmul+0x134>
 80009c4:	f104 0414 	add.w	r4, r4, #20
 80009c8:	f1c4 0520 	rsb	r5, r4, #32
 80009cc:	fa00 f305 	lsl.w	r3, r0, r5
 80009d0:	fa20 f004 	lsr.w	r0, r0, r4
 80009d4:	fa01 f205 	lsl.w	r2, r1, r5
 80009d8:	ea40 0002 	orr.w	r0, r0, r2
 80009dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009e8:	fa21 f604 	lsr.w	r6, r1, r4
 80009ec:	eb42 0106 	adc.w	r1, r2, r6
 80009f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f1c4 040c 	rsb	r4, r4, #12
 8000a00:	f1c4 0520 	rsb	r5, r4, #32
 8000a04:	fa00 f304 	lsl.w	r3, r0, r4
 8000a08:	fa20 f005 	lsr.w	r0, r0, r5
 8000a0c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a10:	ea40 0002 	orr.w	r0, r0, r2
 8000a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a1c:	f141 0100 	adc.w	r1, r1, #0
 8000a20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a24:	bf08      	it	eq
 8000a26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	f1c4 0520 	rsb	r5, r4, #32
 8000a30:	fa00 f205 	lsl.w	r2, r0, r5
 8000a34:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a38:	fa20 f304 	lsr.w	r3, r0, r4
 8000a3c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a40:	ea43 0302 	orr.w	r3, r3, r2
 8000a44:	fa21 f004 	lsr.w	r0, r1, r4
 8000a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a4c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a50:	ea20 0002 	bic.w	r0, r0, r2
 8000a54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a5c:	bf08      	it	eq
 8000a5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	f094 0f00 	teq	r4, #0
 8000a68:	d10f      	bne.n	8000a8a <__aeabi_dmul+0x1c2>
 8000a6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a6e:	0040      	lsls	r0, r0, #1
 8000a70:	eb41 0101 	adc.w	r1, r1, r1
 8000a74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a78:	bf08      	it	eq
 8000a7a:	3c01      	subeq	r4, #1
 8000a7c:	d0f7      	beq.n	8000a6e <__aeabi_dmul+0x1a6>
 8000a7e:	ea41 0106 	orr.w	r1, r1, r6
 8000a82:	f095 0f00 	teq	r5, #0
 8000a86:	bf18      	it	ne
 8000a88:	4770      	bxne	lr
 8000a8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	eb43 0303 	adc.w	r3, r3, r3
 8000a94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a98:	bf08      	it	eq
 8000a9a:	3d01      	subeq	r5, #1
 8000a9c:	d0f7      	beq.n	8000a8e <__aeabi_dmul+0x1c6>
 8000a9e:	ea43 0306 	orr.w	r3, r3, r6
 8000aa2:	4770      	bx	lr
 8000aa4:	ea94 0f0c 	teq	r4, ip
 8000aa8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aac:	bf18      	it	ne
 8000aae:	ea95 0f0c 	teqne	r5, ip
 8000ab2:	d00c      	beq.n	8000ace <__aeabi_dmul+0x206>
 8000ab4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab8:	bf18      	it	ne
 8000aba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000abe:	d1d1      	bne.n	8000a64 <__aeabi_dmul+0x19c>
 8000ac0:	ea81 0103 	eor.w	r1, r1, r3
 8000ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad2:	bf06      	itte	eq
 8000ad4:	4610      	moveq	r0, r2
 8000ad6:	4619      	moveq	r1, r3
 8000ad8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000adc:	d019      	beq.n	8000b12 <__aeabi_dmul+0x24a>
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dmul+0x222>
 8000ae4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000ae8:	d113      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	d105      	bne.n	8000afc <__aeabi_dmul+0x234>
 8000af0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000af4:	bf1c      	itt	ne
 8000af6:	4610      	movne	r0, r2
 8000af8:	4619      	movne	r1, r3
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dmul+0x24a>
 8000afc:	ea81 0103 	eor.w	r1, r1, r3
 8000b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	bd70      	pop	{r4, r5, r6, pc}
 8000b12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b1a:	bd70      	pop	{r4, r5, r6, pc}

08000b1c <__aeabi_ddiv>:
 8000b1c:	b570      	push	{r4, r5, r6, lr}
 8000b1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b2a:	bf1d      	ittte	ne
 8000b2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b30:	ea94 0f0c 	teqne	r4, ip
 8000b34:	ea95 0f0c 	teqne	r5, ip
 8000b38:	f000 f8a7 	bleq	8000c8a <__aeabi_ddiv+0x16e>
 8000b3c:	eba4 0405 	sub.w	r4, r4, r5
 8000b40:	ea81 0e03 	eor.w	lr, r1, r3
 8000b44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b4c:	f000 8088 	beq.w	8000c60 <__aeabi_ddiv+0x144>
 8000b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b74:	429d      	cmp	r5, r3
 8000b76:	bf08      	it	eq
 8000b78:	4296      	cmpeq	r6, r2
 8000b7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b82:	d202      	bcs.n	8000b8a <__aeabi_ddiv+0x6e>
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8a:	1ab6      	subs	r6, r6, r2
 8000b8c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b90:	085b      	lsrs	r3, r3, #1
 8000b92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ba6:	bf22      	ittt	cs
 8000ba8:	1ab6      	subcs	r6, r6, r2
 8000baa:	4675      	movcs	r5, lr
 8000bac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb0:	085b      	lsrs	r3, r3, #1
 8000bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bbe:	bf22      	ittt	cs
 8000bc0:	1ab6      	subcs	r6, r6, r2
 8000bc2:	4675      	movcs	r5, lr
 8000bc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bc8:	085b      	lsrs	r3, r3, #1
 8000bca:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bce:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bd6:	bf22      	ittt	cs
 8000bd8:	1ab6      	subcs	r6, r6, r2
 8000bda:	4675      	movcs	r5, lr
 8000bdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bee:	bf22      	ittt	cs
 8000bf0:	1ab6      	subcs	r6, r6, r2
 8000bf2:	4675      	movcs	r5, lr
 8000bf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bf8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bfc:	d018      	beq.n	8000c30 <__aeabi_ddiv+0x114>
 8000bfe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c1a:	d1c0      	bne.n	8000b9e <__aeabi_ddiv+0x82>
 8000c1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c20:	d10b      	bne.n	8000c3a <__aeabi_ddiv+0x11e>
 8000c22:	ea41 0100 	orr.w	r1, r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c2e:	e7b6      	b.n	8000b9e <__aeabi_ddiv+0x82>
 8000c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c34:	bf04      	itt	eq
 8000c36:	4301      	orreq	r1, r0
 8000c38:	2000      	moveq	r0, #0
 8000c3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c3e:	bf88      	it	hi
 8000c40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c44:	f63f aeaf 	bhi.w	80009a6 <__aeabi_dmul+0xde>
 8000c48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c4c:	bf04      	itt	eq
 8000c4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c56:	f150 0000 	adcs.w	r0, r0, #0
 8000c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c6c:	bfc2      	ittt	gt
 8000c6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c76:	bd70      	popgt	{r4, r5, r6, pc}
 8000c78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7c:	f04f 0e00 	mov.w	lr, #0
 8000c80:	3c01      	subs	r4, #1
 8000c82:	e690      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c84:	ea45 0e06 	orr.w	lr, r5, r6
 8000c88:	e68d      	b.n	80009a6 <__aeabi_dmul+0xde>
 8000c8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c8e:	ea94 0f0c 	teq	r4, ip
 8000c92:	bf08      	it	eq
 8000c94:	ea95 0f0c 	teqeq	r5, ip
 8000c98:	f43f af3b 	beq.w	8000b12 <__aeabi_dmul+0x24a>
 8000c9c:	ea94 0f0c 	teq	r4, ip
 8000ca0:	d10a      	bne.n	8000cb8 <__aeabi_ddiv+0x19c>
 8000ca2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ca6:	f47f af34 	bne.w	8000b12 <__aeabi_dmul+0x24a>
 8000caa:	ea95 0f0c 	teq	r5, ip
 8000cae:	f47f af25 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000cb2:	4610      	mov	r0, r2
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	e72c      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000cb8:	ea95 0f0c 	teq	r5, ip
 8000cbc:	d106      	bne.n	8000ccc <__aeabi_ddiv+0x1b0>
 8000cbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cc2:	f43f aefd 	beq.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	e722      	b.n	8000b12 <__aeabi_dmul+0x24a>
 8000ccc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cd0:	bf18      	it	ne
 8000cd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cd6:	f47f aec5 	bne.w	8000a64 <__aeabi_dmul+0x19c>
 8000cda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000cde:	f47f af0d 	bne.w	8000afc <__aeabi_dmul+0x234>
 8000ce2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ce6:	f47f aeeb 	bne.w	8000ac0 <__aeabi_dmul+0x1f8>
 8000cea:	e712      	b.n	8000b12 <__aeabi_dmul+0x24a>

08000cec <__gedf2>:
 8000cec:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf0:	e006      	b.n	8000d00 <__cmpdf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__ledf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	e002      	b.n	8000d00 <__cmpdf2+0x4>
 8000cfa:	bf00      	nop

08000cfc <__cmpdf2>:
 8000cfc:	f04f 0c01 	mov.w	ip, #1
 8000d00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d10:	bf18      	it	ne
 8000d12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d16:	d01b      	beq.n	8000d50 <__cmpdf2+0x54>
 8000d18:	b001      	add	sp, #4
 8000d1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d1e:	bf0c      	ite	eq
 8000d20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d24:	ea91 0f03 	teqne	r1, r3
 8000d28:	bf02      	ittt	eq
 8000d2a:	ea90 0f02 	teqeq	r0, r2
 8000d2e:	2000      	moveq	r0, #0
 8000d30:	4770      	bxeq	lr
 8000d32:	f110 0f00 	cmn.w	r0, #0
 8000d36:	ea91 0f03 	teq	r1, r3
 8000d3a:	bf58      	it	pl
 8000d3c:	4299      	cmppl	r1, r3
 8000d3e:	bf08      	it	eq
 8000d40:	4290      	cmpeq	r0, r2
 8000d42:	bf2c      	ite	cs
 8000d44:	17d8      	asrcs	r0, r3, #31
 8000d46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d4a:	f040 0001 	orr.w	r0, r0, #1
 8000d4e:	4770      	bx	lr
 8000d50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d58:	d102      	bne.n	8000d60 <__cmpdf2+0x64>
 8000d5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d5e:	d107      	bne.n	8000d70 <__cmpdf2+0x74>
 8000d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d68:	d1d6      	bne.n	8000d18 <__cmpdf2+0x1c>
 8000d6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d6e:	d0d3      	beq.n	8000d18 <__cmpdf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cdrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4662      	mov	r2, ip
 8000d7e:	468c      	mov	ip, r1
 8000d80:	4619      	mov	r1, r3
 8000d82:	4663      	mov	r3, ip
 8000d84:	e000      	b.n	8000d88 <__aeabi_cdcmpeq>
 8000d86:	bf00      	nop

08000d88 <__aeabi_cdcmpeq>:
 8000d88:	b501      	push	{r0, lr}
 8000d8a:	f7ff ffb7 	bl	8000cfc <__cmpdf2>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	bf48      	it	mi
 8000d92:	f110 0f00 	cmnmi.w	r0, #0
 8000d96:	bd01      	pop	{r0, pc}

08000d98 <__aeabi_dcmpeq>:
 8000d98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d9c:	f7ff fff4 	bl	8000d88 <__aeabi_cdcmpeq>
 8000da0:	bf0c      	ite	eq
 8000da2:	2001      	moveq	r0, #1
 8000da4:	2000      	movne	r0, #0
 8000da6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000daa:	bf00      	nop

08000dac <__aeabi_dcmplt>:
 8000dac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db0:	f7ff ffea 	bl	8000d88 <__aeabi_cdcmpeq>
 8000db4:	bf34      	ite	cc
 8000db6:	2001      	movcc	r0, #1
 8000db8:	2000      	movcs	r0, #0
 8000dba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dbe:	bf00      	nop

08000dc0 <__aeabi_dcmple>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff ffe0 	bl	8000d88 <__aeabi_cdcmpeq>
 8000dc8:	bf94      	ite	ls
 8000dca:	2001      	movls	r0, #1
 8000dcc:	2000      	movhi	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_dcmpge>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffce 	bl	8000d78 <__aeabi_cdrcmple>
 8000ddc:	bf94      	ite	ls
 8000dde:	2001      	movls	r0, #1
 8000de0:	2000      	movhi	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_dcmpgt>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffc4 	bl	8000d78 <__aeabi_cdrcmple>
 8000df0:	bf34      	ite	cc
 8000df2:	2001      	movcc	r0, #1
 8000df4:	2000      	movcs	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmpun>:
 8000dfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e04:	d102      	bne.n	8000e0c <__aeabi_dcmpun+0x10>
 8000e06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e0a:	d10a      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e14:	d102      	bne.n	8000e1c <__aeabi_dcmpun+0x20>
 8000e16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e1a:	d102      	bne.n	8000e22 <__aeabi_dcmpun+0x26>
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4770      	bx	lr
 8000e22:	f04f 0001 	mov.w	r0, #1
 8000e26:	4770      	bx	lr

08000e28 <__aeabi_d2iz>:
 8000e28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e30:	d215      	bcs.n	8000e5e <__aeabi_d2iz+0x36>
 8000e32:	d511      	bpl.n	8000e58 <__aeabi_d2iz+0x30>
 8000e34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e3c:	d912      	bls.n	8000e64 <__aeabi_d2iz+0x3c>
 8000e3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e52:	bf18      	it	ne
 8000e54:	4240      	negne	r0, r0
 8000e56:	4770      	bx	lr
 8000e58:	f04f 0000 	mov.w	r0, #0
 8000e5c:	4770      	bx	lr
 8000e5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e62:	d105      	bne.n	8000e70 <__aeabi_d2iz+0x48>
 8000e64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e68:	bf08      	it	eq
 8000e6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_d2uiz>:
 8000e78:	004a      	lsls	r2, r1, #1
 8000e7a:	d211      	bcs.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e80:	d211      	bcs.n	8000ea6 <__aeabi_d2uiz+0x2e>
 8000e82:	d50d      	bpl.n	8000ea0 <__aeabi_d2uiz+0x28>
 8000e84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e8c:	d40e      	bmi.n	8000eac <__aeabi_d2uiz+0x34>
 8000e8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e9e:	4770      	bx	lr
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	4770      	bx	lr
 8000ea6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eaa:	d102      	bne.n	8000eb2 <__aeabi_d2uiz+0x3a>
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	4770      	bx	lr
 8000eb2:	f04f 0000 	mov.w	r0, #0
 8000eb6:	4770      	bx	lr

08000eb8 <__aeabi_d2f>:
 8000eb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ebc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ec0:	bf24      	itt	cs
 8000ec2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ec6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eca:	d90d      	bls.n	8000ee8 <__aeabi_d2f+0x30>
 8000ecc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ed0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ed4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ed8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000edc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ee0:	bf08      	it	eq
 8000ee2:	f020 0001 	biceq.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000eec:	d121      	bne.n	8000f32 <__aeabi_d2f+0x7a>
 8000eee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ef2:	bfbc      	itt	lt
 8000ef4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ef8:	4770      	bxlt	lr
 8000efa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000efe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f02:	f1c2 0218 	rsb	r2, r2, #24
 8000f06:	f1c2 0c20 	rsb	ip, r2, #32
 8000f0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000f12:	bf18      	it	ne
 8000f14:	f040 0001 	orrne.w	r0, r0, #1
 8000f18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f24:	ea40 000c 	orr.w	r0, r0, ip
 8000f28:	fa23 f302 	lsr.w	r3, r3, r2
 8000f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f30:	e7cc      	b.n	8000ecc <__aeabi_d2f+0x14>
 8000f32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f36:	d107      	bne.n	8000f48 <__aeabi_d2f+0x90>
 8000f38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f3c:	bf1e      	ittt	ne
 8000f3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bxne	lr
 8000f48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <__aeabi_uldivmod>:
 8000f58:	b953      	cbnz	r3, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5a:	b94a      	cbnz	r2, 8000f70 <__aeabi_uldivmod+0x18>
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	bf08      	it	eq
 8000f60:	2800      	cmpeq	r0, #0
 8000f62:	bf1c      	itt	ne
 8000f64:	f04f 31ff 	movne.w	r1, #4294967295
 8000f68:	f04f 30ff 	movne.w	r0, #4294967295
 8000f6c:	f000 b9aa 	b.w	80012c4 <__aeabi_idiv0>
 8000f70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f78:	f000 f83c 	bl	8000ff4 <__udivmoddi4>
 8000f7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f84:	b004      	add	sp, #16
 8000f86:	4770      	bx	lr

08000f88 <__aeabi_d2lz>:
 8000f88:	b538      	push	{r3, r4, r5, lr}
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	460d      	mov	r5, r1
 8000f92:	f7ff ff0b 	bl	8000dac <__aeabi_dcmplt>
 8000f96:	b928      	cbnz	r0, 8000fa4 <__aeabi_d2lz+0x1c>
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fa0:	f000 b80a 	b.w	8000fb8 <__aeabi_d2ulz>
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000faa:	f000 f805 	bl	8000fb8 <__aeabi_d2ulz>
 8000fae:	4240      	negs	r0, r0
 8000fb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2ulz>:
 8000fb8:	b5d0      	push	{r4, r6, r7, lr}
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <__aeabi_d2ulz+0x34>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4606      	mov	r6, r0
 8000fc0:	460f      	mov	r7, r1
 8000fc2:	f7ff fc81 	bl	80008c8 <__aeabi_dmul>
 8000fc6:	f7ff ff57 	bl	8000e78 <__aeabi_d2uiz>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	f7ff fc02 	bl	80007d4 <__aeabi_ui2d>
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <__aeabi_d2ulz+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f7ff fc78 	bl	80008c8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4630      	mov	r0, r6
 8000fde:	4639      	mov	r1, r7
 8000fe0:	f7ff faba 	bl	8000558 <__aeabi_dsub>
 8000fe4:	f7ff ff48 	bl	8000e78 <__aeabi_d2uiz>
 8000fe8:	4621      	mov	r1, r4
 8000fea:	bdd0      	pop	{r4, r6, r7, pc}
 8000fec:	3df00000 	.word	0x3df00000
 8000ff0:	41f00000 	.word	0x41f00000

08000ff4 <__udivmoddi4>:
 8000ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff8:	9d08      	ldr	r5, [sp, #32]
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	468e      	mov	lr, r1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d14d      	bne.n	800109e <__udivmoddi4+0xaa>
 8001002:	428a      	cmp	r2, r1
 8001004:	4694      	mov	ip, r2
 8001006:	d969      	bls.n	80010dc <__udivmoddi4+0xe8>
 8001008:	fab2 f282 	clz	r2, r2
 800100c:	b152      	cbz	r2, 8001024 <__udivmoddi4+0x30>
 800100e:	fa01 f302 	lsl.w	r3, r1, r2
 8001012:	f1c2 0120 	rsb	r1, r2, #32
 8001016:	fa20 f101 	lsr.w	r1, r0, r1
 800101a:	fa0c fc02 	lsl.w	ip, ip, r2
 800101e:	ea41 0e03 	orr.w	lr, r1, r3
 8001022:	4094      	lsls	r4, r2
 8001024:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001028:	0c21      	lsrs	r1, r4, #16
 800102a:	fbbe f6f8 	udiv	r6, lr, r8
 800102e:	fa1f f78c 	uxth.w	r7, ip
 8001032:	fb08 e316 	mls	r3, r8, r6, lr
 8001036:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800103a:	fb06 f107 	mul.w	r1, r6, r7
 800103e:	4299      	cmp	r1, r3
 8001040:	d90a      	bls.n	8001058 <__udivmoddi4+0x64>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f106 30ff 	add.w	r0, r6, #4294967295
 800104a:	f080 811f 	bcs.w	800128c <__udivmoddi4+0x298>
 800104e:	4299      	cmp	r1, r3
 8001050:	f240 811c 	bls.w	800128c <__udivmoddi4+0x298>
 8001054:	3e02      	subs	r6, #2
 8001056:	4463      	add	r3, ip
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	b2a4      	uxth	r4, r4
 800105c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001060:	fb08 3310 	mls	r3, r8, r0, r3
 8001064:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001068:	fb00 f707 	mul.w	r7, r0, r7
 800106c:	42a7      	cmp	r7, r4
 800106e:	d90a      	bls.n	8001086 <__udivmoddi4+0x92>
 8001070:	eb1c 0404 	adds.w	r4, ip, r4
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295
 8001078:	f080 810a 	bcs.w	8001290 <__udivmoddi4+0x29c>
 800107c:	42a7      	cmp	r7, r4
 800107e:	f240 8107 	bls.w	8001290 <__udivmoddi4+0x29c>
 8001082:	4464      	add	r4, ip
 8001084:	3802      	subs	r0, #2
 8001086:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800108a:	1be4      	subs	r4, r4, r7
 800108c:	2600      	movs	r6, #0
 800108e:	b11d      	cbz	r5, 8001098 <__udivmoddi4+0xa4>
 8001090:	40d4      	lsrs	r4, r2
 8001092:	2300      	movs	r3, #0
 8001094:	e9c5 4300 	strd	r4, r3, [r5]
 8001098:	4631      	mov	r1, r6
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	428b      	cmp	r3, r1
 80010a0:	d909      	bls.n	80010b6 <__udivmoddi4+0xc2>
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	f000 80ef 	beq.w	8001286 <__udivmoddi4+0x292>
 80010a8:	2600      	movs	r6, #0
 80010aa:	e9c5 0100 	strd	r0, r1, [r5]
 80010ae:	4630      	mov	r0, r6
 80010b0:	4631      	mov	r1, r6
 80010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b6:	fab3 f683 	clz	r6, r3
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d14a      	bne.n	8001154 <__udivmoddi4+0x160>
 80010be:	428b      	cmp	r3, r1
 80010c0:	d302      	bcc.n	80010c8 <__udivmoddi4+0xd4>
 80010c2:	4282      	cmp	r2, r0
 80010c4:	f200 80f9 	bhi.w	80012ba <__udivmoddi4+0x2c6>
 80010c8:	1a84      	subs	r4, r0, r2
 80010ca:	eb61 0303 	sbc.w	r3, r1, r3
 80010ce:	2001      	movs	r0, #1
 80010d0:	469e      	mov	lr, r3
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	d0e0      	beq.n	8001098 <__udivmoddi4+0xa4>
 80010d6:	e9c5 4e00 	strd	r4, lr, [r5]
 80010da:	e7dd      	b.n	8001098 <__udivmoddi4+0xa4>
 80010dc:	b902      	cbnz	r2, 80010e0 <__udivmoddi4+0xec>
 80010de:	deff      	udf	#255	; 0xff
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	f040 8092 	bne.w	800120e <__udivmoddi4+0x21a>
 80010ea:	eba1 010c 	sub.w	r1, r1, ip
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	2601      	movs	r6, #1
 80010f8:	0c20      	lsrs	r0, r4, #16
 80010fa:	fbb1 f3f7 	udiv	r3, r1, r7
 80010fe:	fb07 1113 	mls	r1, r7, r3, r1
 8001102:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001106:	fb0e f003 	mul.w	r0, lr, r3
 800110a:	4288      	cmp	r0, r1
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x12c>
 800110e:	eb1c 0101 	adds.w	r1, ip, r1
 8001112:	f103 38ff 	add.w	r8, r3, #4294967295
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x12a>
 8001118:	4288      	cmp	r0, r1
 800111a:	f200 80cb 	bhi.w	80012b4 <__udivmoddi4+0x2c0>
 800111e:	4643      	mov	r3, r8
 8001120:	1a09      	subs	r1, r1, r0
 8001122:	b2a4      	uxth	r4, r4
 8001124:	fbb1 f0f7 	udiv	r0, r1, r7
 8001128:	fb07 1110 	mls	r1, r7, r0, r1
 800112c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001130:	fb0e fe00 	mul.w	lr, lr, r0
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x156>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x154>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80bb 	bhi.w	80012be <__udivmoddi4+0x2ca>
 8001148:	4608      	mov	r0, r1
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001152:	e79c      	b.n	800108e <__udivmoddi4+0x9a>
 8001154:	f1c6 0720 	rsb	r7, r6, #32
 8001158:	40b3      	lsls	r3, r6
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa20 f407 	lsr.w	r4, r0, r7
 8001166:	fa01 f306 	lsl.w	r3, r1, r6
 800116a:	431c      	orrs	r4, r3
 800116c:	40f9      	lsrs	r1, r7
 800116e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001172:	fa00 f306 	lsl.w	r3, r0, r6
 8001176:	fbb1 f8f9 	udiv	r8, r1, r9
 800117a:	0c20      	lsrs	r0, r4, #16
 800117c:	fa1f fe8c 	uxth.w	lr, ip
 8001180:	fb09 1118 	mls	r1, r9, r8, r1
 8001184:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001188:	fb08 f00e 	mul.w	r0, r8, lr
 800118c:	4288      	cmp	r0, r1
 800118e:	fa02 f206 	lsl.w	r2, r2, r6
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b8>
 8001194:	eb1c 0101 	adds.w	r1, ip, r1
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295
 800119c:	f080 8088 	bcs.w	80012b0 <__udivmoddi4+0x2bc>
 80011a0:	4288      	cmp	r0, r1
 80011a2:	f240 8085 	bls.w	80012b0 <__udivmoddi4+0x2bc>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4461      	add	r1, ip
 80011ac:	1a09      	subs	r1, r1, r0
 80011ae:	b2a4      	uxth	r4, r4
 80011b0:	fbb1 f0f9 	udiv	r0, r1, r9
 80011b4:	fb09 1110 	mls	r1, r9, r0, r1
 80011b8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80011c0:	458e      	cmp	lr, r1
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1e2>
 80011c4:	eb1c 0101 	adds.w	r1, ip, r1
 80011c8:	f100 34ff 	add.w	r4, r0, #4294967295
 80011cc:	d26c      	bcs.n	80012a8 <__udivmoddi4+0x2b4>
 80011ce:	458e      	cmp	lr, r1
 80011d0:	d96a      	bls.n	80012a8 <__udivmoddi4+0x2b4>
 80011d2:	3802      	subs	r0, #2
 80011d4:	4461      	add	r1, ip
 80011d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011da:	fba0 9402 	umull	r9, r4, r0, r2
 80011de:	eba1 010e 	sub.w	r1, r1, lr
 80011e2:	42a1      	cmp	r1, r4
 80011e4:	46c8      	mov	r8, r9
 80011e6:	46a6      	mov	lr, r4
 80011e8:	d356      	bcc.n	8001298 <__udivmoddi4+0x2a4>
 80011ea:	d053      	beq.n	8001294 <__udivmoddi4+0x2a0>
 80011ec:	b15d      	cbz	r5, 8001206 <__udivmoddi4+0x212>
 80011ee:	ebb3 0208 	subs.w	r2, r3, r8
 80011f2:	eb61 010e 	sbc.w	r1, r1, lr
 80011f6:	fa01 f707 	lsl.w	r7, r1, r7
 80011fa:	fa22 f306 	lsr.w	r3, r2, r6
 80011fe:	40f1      	lsrs	r1, r6
 8001200:	431f      	orrs	r7, r3
 8001202:	e9c5 7100 	strd	r7, r1, [r5]
 8001206:	2600      	movs	r6, #0
 8001208:	4631      	mov	r1, r6
 800120a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120e:	f1c2 0320 	rsb	r3, r2, #32
 8001212:	40d8      	lsrs	r0, r3
 8001214:	fa0c fc02 	lsl.w	ip, ip, r2
 8001218:	fa21 f303 	lsr.w	r3, r1, r3
 800121c:	4091      	lsls	r1, r2
 800121e:	4301      	orrs	r1, r0
 8001220:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001224:	fa1f fe8c 	uxth.w	lr, ip
 8001228:	fbb3 f0f7 	udiv	r0, r3, r7
 800122c:	fb07 3610 	mls	r6, r7, r0, r3
 8001230:	0c0b      	lsrs	r3, r1, #16
 8001232:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001236:	fb00 f60e 	mul.w	r6, r0, lr
 800123a:	429e      	cmp	r6, r3
 800123c:	fa04 f402 	lsl.w	r4, r4, r2
 8001240:	d908      	bls.n	8001254 <__udivmoddi4+0x260>
 8001242:	eb1c 0303 	adds.w	r3, ip, r3
 8001246:	f100 38ff 	add.w	r8, r0, #4294967295
 800124a:	d22f      	bcs.n	80012ac <__udivmoddi4+0x2b8>
 800124c:	429e      	cmp	r6, r3
 800124e:	d92d      	bls.n	80012ac <__udivmoddi4+0x2b8>
 8001250:	3802      	subs	r0, #2
 8001252:	4463      	add	r3, ip
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	b289      	uxth	r1, r1
 8001258:	fbb3 f6f7 	udiv	r6, r3, r7
 800125c:	fb07 3316 	mls	r3, r7, r6, r3
 8001260:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001264:	fb06 f30e 	mul.w	r3, r6, lr
 8001268:	428b      	cmp	r3, r1
 800126a:	d908      	bls.n	800127e <__udivmoddi4+0x28a>
 800126c:	eb1c 0101 	adds.w	r1, ip, r1
 8001270:	f106 38ff 	add.w	r8, r6, #4294967295
 8001274:	d216      	bcs.n	80012a4 <__udivmoddi4+0x2b0>
 8001276:	428b      	cmp	r3, r1
 8001278:	d914      	bls.n	80012a4 <__udivmoddi4+0x2b0>
 800127a:	3e02      	subs	r6, #2
 800127c:	4461      	add	r1, ip
 800127e:	1ac9      	subs	r1, r1, r3
 8001280:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001284:	e738      	b.n	80010f8 <__udivmoddi4+0x104>
 8001286:	462e      	mov	r6, r5
 8001288:	4628      	mov	r0, r5
 800128a:	e705      	b.n	8001098 <__udivmoddi4+0xa4>
 800128c:	4606      	mov	r6, r0
 800128e:	e6e3      	b.n	8001058 <__udivmoddi4+0x64>
 8001290:	4618      	mov	r0, r3
 8001292:	e6f8      	b.n	8001086 <__udivmoddi4+0x92>
 8001294:	454b      	cmp	r3, r9
 8001296:	d2a9      	bcs.n	80011ec <__udivmoddi4+0x1f8>
 8001298:	ebb9 0802 	subs.w	r8, r9, r2
 800129c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80012a0:	3801      	subs	r0, #1
 80012a2:	e7a3      	b.n	80011ec <__udivmoddi4+0x1f8>
 80012a4:	4646      	mov	r6, r8
 80012a6:	e7ea      	b.n	800127e <__udivmoddi4+0x28a>
 80012a8:	4620      	mov	r0, r4
 80012aa:	e794      	b.n	80011d6 <__udivmoddi4+0x1e2>
 80012ac:	4640      	mov	r0, r8
 80012ae:	e7d1      	b.n	8001254 <__udivmoddi4+0x260>
 80012b0:	46d0      	mov	r8, sl
 80012b2:	e77b      	b.n	80011ac <__udivmoddi4+0x1b8>
 80012b4:	3b02      	subs	r3, #2
 80012b6:	4461      	add	r1, ip
 80012b8:	e732      	b.n	8001120 <__udivmoddi4+0x12c>
 80012ba:	4630      	mov	r0, r6
 80012bc:	e709      	b.n	80010d2 <__udivmoddi4+0xde>
 80012be:	4464      	add	r4, ip
 80012c0:	3802      	subs	r0, #2
 80012c2:	e742      	b.n	800114a <__udivmoddi4+0x156>

080012c4 <__aeabi_idiv0>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <apInit>:

cmd_t cmd;


void apInit(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  bool run_boot = false;
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;

  reg = rtcBackupRegRead(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 feb8 	bl	8003048 <rtcBackupRegRead>
 80012d8:	4603      	mov	r3, r0
 80012da:	71bb      	strb	r3, [r7, #6]

  if (reg & (1<<0))
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00a      	beq.n	80012fc <apInit+0x34>
  {
	run_boot = true;
 80012e6:	2301      	movs	r3, #1
 80012e8:	71fb      	strb	r3, [r7, #7]
	reg &= ~(1<<0);
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	71bb      	strb	r3, [r7, #6]
	rtcBackupRegWrite(0, reg);
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	4619      	mov	r1, r3
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 feb6 	bl	8003068 <rtcBackupRegWrite>
  }


  if (resetGetCount() == 2)
 80012fc:	f001 fe5c 	bl	8002fb8 <resetGetCount>
 8001300:	4603      	mov	r3, r0
 8001302:	2b02      	cmp	r3, #2
 8001304:	d101      	bne.n	800130a <apInit+0x42>
  {
	run_boot = true;
 8001306:	2301      	movs	r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  }


  if (run_boot == false)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <apInit+0x78>
  {
	if (buttonGetPressed(_DEF_BUTTON1) == false)
 8001316:	2000      	movs	r0, #0
 8001318:	f000 fe58 	bl	8001fcc <buttonGetPressed>
 800131c:	4603      	mov	r3, r0
 800131e:	f083 0301 	eor.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <apInit+0x78>
	{
	  if (bootVerifyFw() == true && bootVerifyCrc() == true)
 8001328:	f000 f83a 	bl	80013a0 <bootVerifyFw>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <apInit+0x78>
 8001332:	f000 f853 	bl	80013dc <bootVerifyCrc>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <apInit+0x78>
	  {
		bootJumpToFw();
 800133c:	f000 f886 	bl	800144c <bootJumpToFw>
  }


  //cliOpen(_DEF_UART1, 57600);

  cmdInit(&cmd);
 8001340:	4806      	ldr	r0, [pc, #24]	; (800135c <apInit+0x94>)
 8001342:	f001 f995 	bl	8002670 <cmdInit>
  cmdOpen(&cmd, _DEF_UART1, 57600);
 8001346:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800134a:	2100      	movs	r1, #0
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <apInit+0x94>)
 800134e:	f001 f9ab 	bl	80026a8 <cmdOpen>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000468 	.word	0x20000468

08001360 <apMain>:

void apMain(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8001366:	f000 fb0c 	bl	8001982 <millis>
 800136a:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 100)
 800136c:	f000 fb09 	bl	8001982 <millis>
 8001370:	4602      	mov	r2, r0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b63      	cmp	r3, #99	; 0x63
 8001378:	d905      	bls.n	8001386 <apMain+0x26>
    {
      pre_time = millis();
 800137a:	f000 fb02 	bl	8001982 <millis>
 800137e:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8001380:	2000      	movs	r0, #0
 8001382:	f001 fd81 	bl	8002e88 <ledToggle>
    }

    //cliMain();
    if (cmdReceivePacket(&cmd) == true)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <apMain+0x3c>)
 8001388:	f001 f9b0 	bl	80026ec <cmdReceivePacket>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0ec      	beq.n	800136c <apMain+0xc>
    {
      bootProcessCmd(&cmd);
 8001392:	4802      	ldr	r0, [pc, #8]	; (800139c <apMain+0x3c>)
 8001394:	f000 f86a 	bl	800146c <bootProcessCmd>
    if (millis()-pre_time >= 100)
 8001398:	e7e8      	b.n	800136c <apMain+0xc>
 800139a:	bf00      	nop
 800139c:	20000468 	.word	0x20000468

080013a0 <bootVerifyFw>:
{

}

bool bootVerifyFw(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  uint32_t *jump_addr = (uint32_t *)(FLASH_ADDR_FW + 4);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <bootVerifyFw+0x30>)
 80013a8:	607b      	str	r3, [r7, #4]


  if ((*jump_addr) >= FLASH_ADDR_START && (*jump_addr) <  FLASH_ADDR_END)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <bootVerifyFw+0x34>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d906      	bls.n	80013c2 <bootVerifyFw+0x22>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <bootVerifyFw+0x38>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d801      	bhi.n	80013c2 <bootVerifyFw+0x22>
  {
    return true;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <bootVerifyFw+0x24>
  }
  else
  {
    return false;
 80013c2:	2300      	movs	r3, #0
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	08010404 	.word	0x08010404
 80013d4:	0800ffff 	.word	0x0800ffff
 80013d8:	0807ffff 	.word	0x0807ffff

080013dc <bootVerifyCrc>:

bool bootVerifyCrc(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
  uint8_t *p_data;
  uint16_t fw_crc;

  if (p_firm_tag->magic_number != FLASH_MAGIC_NUMBER)
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <bootVerifyCrc+0x68>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <bootVerifyCrc+0x6c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d001      	beq.n	80013f2 <bootVerifyCrc+0x16>
  {
    return false;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e024      	b.n	800143c <bootVerifyCrc+0x60>
  }

  p_data = (uint8_t *)p_firm_tag->tag_flash_start;
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <bootVerifyCrc+0x68>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60bb      	str	r3, [r7, #8]
  fw_crc = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	80fb      	strh	r3, [r7, #6]

  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e00b      	b.n	800141c <bootVerifyCrc+0x40>
  {
    utilUpdateCrc(&fw_crc, p_data[i]);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	1dbb      	adds	r3, r7, #6
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fd5b 	bl	8001ecc <utilUpdateCrc>
  for (int i=0; i<p_firm_tag->tag_flash_length; i++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <bootVerifyCrc+0x68>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8ed      	bhi.n	8001404 <bootVerifyCrc+0x28>
  }

  if (fw_crc == p_firm_tag->tag_flash_crc)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	461a      	mov	r2, r3
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <bootVerifyCrc+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	429a      	cmp	r2, r3
 8001434:	d101      	bne.n	800143a <bootVerifyCrc+0x5e>
  {
    return true;
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <bootVerifyCrc+0x60>
  }
  else
  {
    return false;
 800143a:	2300      	movs	r3, #0
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008
 8001448:	5555aaaa 	.word	0x5555aaaa

0800144c <bootJumpToFw>:

void bootJumpToFw(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  void (**jump_func)(void) = (void (**)(void))(FLASH_ADDR_FW + 4);
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <bootJumpToFw+0x1c>)
 8001454:	607b      	str	r3, [r7, #4]

  bspDeInit();
 8001456:	f000 fa61 	bl	800191c <bspDeInit>

  (*jump_func)();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4798      	blx	r3
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	08010404 	.word	0x08010404

0800146c <bootProcessCmd>:

void bootProcessCmd(cmd_t *p_cmd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af02      	add	r7, sp, #8
 8001472:	6078      	str	r0, [r7, #4]
  switch(p_cmd->rx_packet.cmd)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7e1b      	ldrb	r3, [r3, #24]
 8001478:	2b10      	cmp	r3, #16
 800147a:	d845      	bhi.n	8001508 <bootProcessCmd+0x9c>
 800147c:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <bootProcessCmd+0x18>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	080014d1 	.word	0x080014d1
 8001488:	080014d9 	.word	0x080014d9
 800148c:	080014e1 	.word	0x080014e1
 8001490:	080014e9 	.word	0x080014e9
 8001494:	080014f1 	.word	0x080014f1
 8001498:	080014f9 	.word	0x080014f9
 800149c:	08001509 	.word	0x08001509
 80014a0:	08001509 	.word	0x08001509
 80014a4:	08001501 	.word	0x08001501
 80014a8:	08001509 	.word	0x08001509
 80014ac:	08001509 	.word	0x08001509
 80014b0:	08001509 	.word	0x08001509
 80014b4:	08001509 	.word	0x08001509
 80014b8:	08001509 	.word	0x08001509
 80014bc:	08001509 	.word	0x08001509
 80014c0:	08001509 	.word	0x08001509
 80014c4:	080014c9 	.word	0x080014c9
  {
    case BOOT_CMD_LED_CONTROL:
      bootCmdLedControl(p_cmd);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f999 	bl	8001800 <bootCmdLedControl>
      break;
 80014ce:	e025      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_VERSION:
      bootCmdReadBootVersion(p_cmd);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f827 	bl	8001524 <bootCmdReadBootVersion>
      break;
 80014d6:	e021      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_BOOT_NAME:
      bootCmdReadBootName(p_cmd);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f839 	bl	8001550 <bootCmdReadBootName>
      break;
 80014de:	e01d      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_VERSION:
      bootCmdReadFirmVersion(p_cmd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f849 	bl	8001578 <bootCmdReadFirmVersion>
      break;
 80014e6:	e019      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_READ_FIRM_NAME:
      bootCmdReadFirmName(p_cmd);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f85b 	bl	80015a4 <bootCmdReadFirmName>
      break;
 80014ee:	e015      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_ERASE:
      bootCmdFlashErase(p_cmd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f86b 	bl	80015cc <bootCmdFlashErase>
      break;
 80014f6:	e011      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_FLASH_WRITE:
      bootCmdFlashWrite(p_cmd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8d9 	bl	80016b0 <bootCmdFlashWrite>
      break;
 80014fe:	e00d      	b.n	800151c <bootProcessCmd+0xb0>

    case BOOT_CMD_JUMP_TO_FW:
      bootCmdJumpToFw(p_cmd);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f94c 	bl	800179e <bootCmdJumpToFw>
      break;
 8001506:	e009      	b.n	800151c <bootProcessCmd+0xb0>

    default:
      cmdSendResp(p_cmd, p_cmd->rx_packet.cmd, BOOT_ERR_WRONG_CMD, NULL, 0);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7e19      	ldrb	r1, [r3, #24]
 800150c:	2300      	movs	r3, #0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	2201      	movs	r2, #1
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f001 f9cd 	bl	80028b4 <cmdSendResp>
      break;
 800151a:	bf00      	nop
  }
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <bootCmdReadBootVersion>:

void bootCmdReadBootVersion(cmd_t *p_cmd)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af02      	add	r7, sp, #8
 800152a:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_VERSION, CMD_OK, (uint8_t *)p_boot_ver->version, 32);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <bootCmdReadBootVersion+0x28>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	2320      	movs	r3, #32
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4613      	mov	r3, r2
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f001 f9b9 	bl	80028b4 <cmdSendResp>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <bootCmdReadBootName>:

void bootCmdReadBootName(cmd_t *p_cmd)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af02      	add	r7, sp, #8
 8001556:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_BOOT_NAME, CMD_OK, (uint8_t *)p_boot_ver->name, 32);
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <bootCmdReadBootName+0x24>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3320      	adds	r3, #32
 800155e:	2220      	movs	r2, #32
 8001560:	9200      	str	r2, [sp, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	2101      	movs	r1, #1
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f001 f9a4 	bl	80028b4 <cmdSendResp>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000

08001578 <bootCmdReadFirmVersion>:

void bootCmdReadFirmVersion(cmd_t *p_cmd)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_VERSION, CMD_OK, (uint8_t *)p_firm_ver->version, 32);
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <bootCmdReadFirmVersion+0x28>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	2320      	movs	r3, #32
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	4613      	mov	r3, r2
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f001 f98f 	bl	80028b4 <cmdSendResp>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000004 	.word	0x20000004

080015a4 <bootCmdReadFirmName>:

void bootCmdReadFirmName(cmd_t *p_cmd)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	6078      	str	r0, [r7, #4]
  cmdSendResp(p_cmd, BOOT_CMD_READ_FIRM_NAME, CMD_OK, (uint8_t *)p_firm_ver->name, 32);
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <bootCmdReadFirmName+0x24>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3320      	adds	r3, #32
 80015b2:	2220      	movs	r2, #32
 80015b4:	9200      	str	r2, [sp, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	2103      	movs	r1, #3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f001 f97a 	bl	80028b4 <cmdSendResp>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000004 	.word	0x20000004

080015cc <bootCmdFlashErase>:

void bootCmdFlashErase(cmd_t *p_cmd)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3318      	adds	r3, #24
 80015dc:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80015ee:	3301      	adds	r3, #1
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	461a      	mov	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001602:	3302      	adds	r3, #2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	041b      	lsls	r3, r3, #16
 8001608:	461a      	mov	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001616:	3303      	adds	r3, #3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	061b      	lsls	r3, r3, #24
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800162a:	3304      	adds	r3, #4
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001636:	3305      	adds	r3, #5
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	461a      	mov	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800164a:	3306      	adds	r3, #6
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4313      	orrs	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800165e:	3307      	adds	r3, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	061b      	lsls	r3, r3, #24
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 f8fc 	bl	800186c <bootIsFlashRange>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00c      	beq.n	8001694 <bootCmdFlashErase+0xc8>
  {
    // 메모리를 지움.
    if (flashErase(addr, length) != true)
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f001 f9b1 	bl	80029e4 <flashErase>
 8001682:	4603      	mov	r3, r0
 8001684:	f083 0301 	eor.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <bootCmdFlashErase+0xcc>
    {
      err_code = BOOT_ERR_FLASH_ERASE;
 800168e:	2303      	movs	r3, #3
 8001690:	75fb      	strb	r3, [r7, #23]
 8001692:	e001      	b.n	8001698 <bootCmdFlashErase+0xcc>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 8001694:	2304      	movs	r3, #4
 8001696:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_ERASE, err_code, NULL, 0);
 8001698:	7dfa      	ldrb	r2, [r7, #23]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2104      	movs	r1, #4
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f001 f906 	bl	80028b4 <cmdSendResp>
}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <bootCmdFlashWrite>:

void bootCmdFlashWrite(cmd_t *p_cmd)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	75fb      	strb	r3, [r7, #23]
  uint32_t addr;
  uint32_t length;
  cmd_packet_t *p_packet;

  p_packet = &p_cmd->rx_packet;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3318      	adds	r3, #24
 80016c0:	613b      	str	r3, [r7, #16]


  addr  = (uint32_t)(p_packet->data[0] <<  0);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[1] <<  8);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016d2:	3301      	adds	r3, #1
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	461a      	mov	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[2] << 16);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016e6:	3302      	adds	r3, #2
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  addr |= (uint32_t)(p_packet->data[3] << 24);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80016fa:	3303      	adds	r3, #3
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	061b      	lsls	r3, r3, #24
 8001700:	461a      	mov	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

  length  = (uint32_t)(p_packet->data[4] <<  0);
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800170e:	3304      	adds	r3, #4
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[5] <<  8);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800171a:	3305      	adds	r3, #5
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	4313      	orrs	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[6] << 16);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800172e:	3306      	adds	r3, #6
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4313      	orrs	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  length |= (uint32_t)(p_packet->data[7] << 24);
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001742:	3307      	adds	r3, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	461a      	mov	r2, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	4313      	orrs	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]


  // 유효한 메모리 영역인지 확인.
  if (bootIsFlashRange(addr, length) == true)
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f000 f88a 	bl	800186c <bootIsFlashRange>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d011      	beq.n	8001782 <bootCmdFlashWrite+0xd2>
  {
    // 데이터를 Write.
    if (flashWrite(addr, &p_packet->data[8], length) != true)
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001764:	3308      	adds	r3, #8
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f001 f98d 	bl	8002a8a <flashWrite>
 8001770:	4603      	mov	r3, r0
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <bootCmdFlashWrite+0xd6>
    {
      err_code = BOOT_ERR_FLASH_WRITE;
 800177c:	2305      	movs	r3, #5
 800177e:	75fb      	strb	r3, [r7, #23]
 8001780:	e001      	b.n	8001786 <bootCmdFlashWrite+0xd6>
    }
  }
  else
  {
    err_code = BOOT_ERR_WRONG_RANGE;
 8001782:	2304      	movs	r3, #4
 8001784:	75fb      	strb	r3, [r7, #23]
  }

  cmdSendResp(p_cmd, BOOT_CMD_FLASH_WRITE, err_code, NULL, 0);
 8001786:	7dfa      	ldrb	r2, [r7, #23]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2300      	movs	r3, #0
 800178e:	2105      	movs	r1, #5
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f001 f88f 	bl	80028b4 <cmdSendResp>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <bootCmdJumpToFw>:

void bootCmdJumpToFw(cmd_t *p_cmd)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af02      	add	r7, sp, #8
 80017a4:	6078      	str	r0, [r7, #4]
  if (bootVerifyFw() == true)
 80017a6:	f7ff fdfb 	bl	80013a0 <bootVerifyFw>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01b      	beq.n	80017e8 <bootCmdJumpToFw+0x4a>
  {
    if (bootVerifyCrc() == true)
 80017b0:	f7ff fe14 	bl	80013dc <bootVerifyCrc>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <bootCmdJumpToFw+0x38>
    {
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, CMD_OK, NULL, 0);
 80017ba:	2300      	movs	r3, #0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	2200      	movs	r2, #0
 80017c2:	2108      	movs	r1, #8
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f001 f875 	bl	80028b4 <cmdSendResp>
      delay(100);
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f000 f8ce 	bl	800196c <delay>
      bootJumpToFw();
 80017d0:	f7ff fe3c 	bl	800144c <bootJumpToFw>
  }
  else
  {
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
  }
}
 80017d4:	e010      	b.n	80017f8 <bootCmdJumpToFw+0x5a>
      cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_FW_CRC, NULL, 0);
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2208      	movs	r2, #8
 80017de:	2108      	movs	r1, #8
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f001 f867 	bl	80028b4 <cmdSendResp>
}
 80017e6:	e007      	b.n	80017f8 <bootCmdJumpToFw+0x5a>
    cmdSendResp(p_cmd, BOOT_CMD_JUMP_TO_FW, BOOT_ERR_INVALID_FW, NULL, 0);
 80017e8:	2300      	movs	r3, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	2207      	movs	r2, #7
 80017f0:	2108      	movs	r1, #8
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 f85e 	bl	80028b4 <cmdSendResp>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <bootCmdLedControl>:

void bootCmdLedControl(cmd_t *p_cmd)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]
  uint8_t err_code = CMD_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  cmd_packet_t *p_packet;


  p_packet = &p_cmd->rx_packet;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3318      	adds	r3, #24
 8001810:	60bb      	str	r3, [r7, #8]

  if (p_packet->data[0] == 0)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <bootCmdLedControl+0x26>
  {
    ledOff(_DEF_LED1);
 800181e:	2000      	movs	r0, #0
 8001820:	f001 fb12 	bl	8002e48 <ledOff>
 8001824:	e015      	b.n	8001852 <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 1)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d103      	bne.n	800183a <bootCmdLedControl+0x3a>
  {
    ledOn(_DEF_LED1);
 8001832:	2000      	movs	r0, #0
 8001834:	f001 fae8 	bl	8002e08 <ledOn>
 8001838:	e00b      	b.n	8001852 <bootCmdLedControl+0x52>
  }
  else if (p_packet->data[0] == 2)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d103      	bne.n	800184e <bootCmdLedControl+0x4e>
  {
    ledToggle(_DEF_LED1);
 8001846:	2000      	movs	r0, #0
 8001848:	f001 fb1e 	bl	8002e88 <ledToggle>
 800184c:	e001      	b.n	8001852 <bootCmdLedControl+0x52>
  }
  else
  {
    err_code = BOOT_ERR_LED;
 800184e:	2302      	movs	r3, #2
 8001850:	73fb      	strb	r3, [r7, #15]
  }

  cmdSendResp(p_cmd, BOOT_CMD_LED_CONTROL, err_code, NULL, 0);
 8001852:	7bfa      	ldrb	r2, [r7, #15]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	2110      	movs	r1, #16
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 f829 	bl	80028b4 <cmdSendResp>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <bootIsFlashRange>:

bool bootIsFlashRange(uint32_t addr_begin, uint32_t length)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_end;
  uint32_t flash_start;
  uint32_t flash_end;


  addr_end = addr_begin + length - 1;
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	3b01      	subs	r3, #1
 8001882:	613b      	str	r3, [r7, #16]

  flash_start = FLASH_ADDR_START;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <bootIsFlashRange+0x54>)
 8001886:	60fb      	str	r3, [r7, #12]
  flash_end   = FLASH_ADDR_END;
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <bootIsFlashRange+0x58>)
 800188a:	60bb      	str	r3, [r7, #8]

  if ((addr_begin >= flash_start) && (addr_begin < flash_end) &&
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d30d      	bcc.n	80018b0 <bootIsFlashRange+0x44>
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	d209      	bcs.n	80018b0 <bootIsFlashRange+0x44>
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d305      	bcc.n	80018b0 <bootIsFlashRange+0x44>
      (addr_end   >= flash_start) && (addr_end   < flash_end))
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d201      	bcs.n	80018b0 <bootIsFlashRange+0x44>
  {
    ret = true;
 80018ac:	2301      	movs	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
  }


  return ret;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	08010000 	.word	0x08010000
 80018c4:	08080000 	.word	0x08080000

080018c8 <bspInit>:


void SystemClock_Config(void);

void bspInit(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
  HAL_Init();
 80018ce:	f002 faf7 	bl	8003ec0 <HAL_Init>
  SystemClock_Config();
 80018d2:	f000 f85d 	bl	8001990 <SystemClock_Config>

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <bspInit+0x50>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <bspInit+0x50>)
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <bspInit+0x50>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0304 	and.w	r3, r3, #4
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <bspInit+0x50>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <bspInit+0x50>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <bspInit+0x50>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <bspDeInit>:

void bspDeInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  HAL_RCC_DeInit();
 8001922:	f004 fba5 	bl	8006070 <HAL_RCC_DeInit>
  HAL_DeInit();
 8001926:	f002 faed 	bl	8003f04 <HAL_DeInit>

  // Disable Interrupts
  //
  for (int i=0; i<8; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	e00f      	b.n	8001950 <bspDeInit+0x34>
  {
    NVIC->ICER[i] = 0xFFFFFFFF;
 8001930:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <bspDeInit+0x48>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3320      	adds	r3, #32
 8001936:	f04f 31ff 	mov.w	r1, #4294967295
 800193a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800193e:	f3bf 8f4f 	dsb	sy
}
 8001942:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001944:	f3bf 8f6f 	isb	sy
}
 8001948:	bf00      	nop
  for (int i=0; i<8; i++)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3301      	adds	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b07      	cmp	r3, #7
 8001954:	ddec      	ble.n	8001930 <bspDeInit+0x14>
    __DSB();
    __ISB();
  }
  SysTick->CTRL = 0;
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <bspDeInit+0x4c>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000e010 	.word	0xe000e010

0800196c <delay>:

void delay(uint32_t ms)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f002 fb49 	bl	800400c <HAL_Delay>
#endif
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <millis>:

uint32_t millis(void)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001986:	f002 fb35 	bl	8003ff4 <HAL_GetTick>
 800198a:	4603      	mov	r3, r0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09a      	sub	sp, #104	; 0x68
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199a:	2230      	movs	r2, #48	; 0x30
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 ff12 	bl	80077c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <SystemClock_Config+0xfc>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a2f      	ldr	r2, [pc, #188]	; (8001a8c <SystemClock_Config+0xfc>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <SystemClock_Config+0xfc>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <SystemClock_Config+0x100>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <SystemClock_Config+0x100>)
 80019ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <SystemClock_Config+0x100>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019fe:	2309      	movs	r3, #9
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a16:	2319      	movs	r3, #25
 8001a18:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a22:	2304      	movs	r3, #4
 8001a24:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 fde2 	bl	80055f4 <HAL_RCC_OscConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001a36:	f000 f82d 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3a:	230f      	movs	r3, #15
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2103      	movs	r1, #3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 f83a 	bl	8005ad0 <HAL_RCC_ClockConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001a62:	f000 f817 	bl	8001a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a66:	2302      	movs	r3, #2
 8001a68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fa0b 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a80:	f000 f808 	bl	8001a94 <Error_Handler>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3768      	adds	r7, #104	; 0x68
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <NMI_Handler+0x4>

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3c:	f002 fa46 	bl	8003fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART1_IRQHandler+0x10>)
 8001b4a:	f004 fe09 	bl	8006760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20001228 	.word	0x20001228

08001b58 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <DMA2_Stream2_IRQHandler+0x10>)
 8001b5e:	f002 fd43 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200012c8 	.word	0x200012c8

08001b6c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <DMA2_Stream7_IRQHandler+0x10>)
 8001b72:	f002 fd39 	bl	80045e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20001268 	.word	0x20001268

08001b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_kill>:

int _kill(int pid, int sig)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b9a:	f005 fddd 	bl	8007758 <__errno>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2216      	movs	r2, #22
 8001ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_exit>:

void _exit (int status)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ffe7 	bl	8001b90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bc2:	e7fe      	b.n	8001bc2 <_exit+0x12>

08001bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e00a      	b.n	8001bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bd6:	f3af 8000 	nop.w
 8001bda:	4601      	mov	r1, r0
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf0      	blt.n	8001bd6 <_read+0x12>
	}

return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e009      	b.n	8001c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf1      	blt.n	8001c10 <_write+0x12>
	}
	return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_close>:

int _close(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_isatty>:

int _isatty(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f005 fd42 	bl	8007758 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	20000ca8 	.word	0x20000ca8
 8001d08:	20001360 	.word	0x20001360

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <SystemInit+0x28>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <SystemInit+0x28>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <SystemInit+0x28>)
 8001d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d26:	609a      	str	r2, [r3, #8]
#endif
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d3e:	e003      	b.n	8001d48 <LoopCopyDataInit>

08001d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d46:	3104      	adds	r1, #4

08001d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	; (8001d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d50:	d3f6      	bcc.n	8001d40 <CopyDataInit>
  ldr  r2, =_sbss
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d54:	e002      	b.n	8001d5c <LoopFillZerobss>

08001d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d58:	f842 3b04 	str.w	r3, [r2], #4

08001d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d60:	d3f9      	bcc.n	8001d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d62:	f7ff ffd3 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d66:	f005 fcfd 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6a:	f005 fce9 	bl	8007740 <main>
  bx  lr    
 8001d6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d74:	0800c564 	.word	0x0800c564
  ldr  r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d7c:	2000044c 	.word	0x2000044c
  ldr  r2, =_sbss
 8001d80:	2000044c 	.word	0x2000044c
  ldr  r3, = _ebss
 8001d84:	2000135c 	.word	0x2000135c

08001d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d88:	e7fe      	b.n	8001d88 <ADC_IRQHandler>

08001d8a <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b087      	sub	sp, #28
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	60da      	str	r2, [r3, #12]

  return ret;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e026      	b.n	8001e24 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	441a      	add	r2, r3
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	440b      	add	r3, r1
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d00c      	beq.n	8001e18 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	3301      	adds	r3, #1
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	6892      	ldr	r2, [r2, #8]
 8001e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e0c:	fb01 f202 	mul.w	r2, r1, r2
 8001e10:	1a9a      	subs	r2, r3, r2
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	e002      	b.n	8001e1e <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e1c:	e006      	b.n	8001e2c <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	3301      	adds	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8d4      	bhi.n	8001dd6 <qbufferRead+0x16>
    }
  }

  return ret;
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6892      	ldr	r2, [r2, #8]
 8001e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e54:	fb01 f202 	mul.w	r2, r1, r2
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <DWT_Delay_Init>:
 *  Created on: 2021. 8. 16.
 *      Author: WANG
 */
#include "user_delay.h"

uint32_t DWT_Delay_Init(void) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <DWT_Delay_Init+0x58>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <DWT_Delay_Init+0x58>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <DWT_Delay_Init+0x58>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <DWT_Delay_Init+0x58>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001ea6:	bf00      	nop
     __ASM volatile ("NOP");
 8001ea8:	bf00      	nop
     __ASM volatile ("NOP");
 8001eaa:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <DWT_Delay_Init+0x5c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e000      	b.n	8001eba <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001eb8:	2301      	movs	r3, #1
  }
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000edf0 	.word	0xe000edf0
 8001ec8:	e0001000 	.word	0xe0001000

08001ecc <utilUpdateCrc>:
                                0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208,
                                0x820D, 0x8207, 0x0202 };

void utilUpdateCrc(uint16_t *p_crc_cur, uint8_t data_in)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  uint16_t crc;
  uint16_t i;

  crc = *p_crc_cur;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	81fb      	strh	r3, [r7, #14]

  i = ((unsigned short)(crc >> 8) ^ data_in) & 0xFF;
 8001ede:	89fb      	ldrh	r3, [r7, #14]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4053      	eors	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	81bb      	strh	r3, [r7, #12]
  *p_crc_cur = (crc << 8) ^ util_crc_table[i];
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	89bb      	ldrh	r3, [r7, #12]
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <utilUpdateCrc+0x4c>)
 8001efa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4053      	eors	r3, r2
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	801a      	strh	r2, [r3, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	20000010 	.word	0x20000010

08001f1c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
  bool ret = true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <buttonInit+0xa0>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <buttonInit+0xa0>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6313      	str	r3, [r2, #48]	; 0x30
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <buttonInit+0xa0>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
 8001f58:	e023      	b.n	8001fa2 <buttonInit+0x86>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001f5a:	4919      	ldr	r1, [pc, #100]	; (8001fc0 <buttonInit+0xa4>)
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = button_tbl[i].pull;
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <buttonInit+0xa4>)
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001f82:	490f      	ldr	r1, [pc, #60]	; (8001fc0 <buttonInit+0xa4>)
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	1d3a      	adds	r2, r7, #4
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 f878 	bl	800508c <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	ddd8      	ble.n	8001f5a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001fa8:	4906      	ldr	r1, [pc, #24]	; (8001fc4 <buttonInit+0xa8>)
 8001faa:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <buttonInit+0xac>)
 8001fac:	f000 fa3c 	bl	8002428 <cliAdd>
#endif

  return ret;
 8001fb0:	7efb      	ldrb	r3, [r7, #27]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	20000210 	.word	0x20000210
 8001fc4:	080020ad 	.word	0x080020ad
 8001fc8:	0800bd78 	.word	0x0800bd78

08001fcc <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
  button_tbl_t *button;
  button = &button_tbl[ch];
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4a30      	ldr	r2, [pc, #192]	; (80020a8 <buttonGetPressed+0xdc>)
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]

  if (ch >= BUTTON_MAX_CH)
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <buttonGetPressed+0x28>
  {
    return false;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e054      	b.n	800209e <buttonGetPressed+0xd2>
  }

  switch(button->State)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	7b9b      	ldrb	r3, [r3, #14]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <buttonGetPressed+0x36>
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d018      	beq.n	8002032 <buttonGetPressed+0x66>
 8002000:	e04c      	b.n	800209c <buttonGetPressed+0xd0>
  {
  	  case BUTTON_IDLE:
  		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	b29b      	uxth	r3, r3
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f003 faa4 	bl	800555c <HAL_GPIO_ReadPin>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	7b1b      	ldrb	r3, [r3, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d13a      	bne.n	8002096 <buttonGetPressed+0xca>
  		  {
  			  button->lastDebounceTime = millis();
 8002020:	f7ff fcaf 	bl	8001982 <millis>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	615a      	str	r2, [r3, #20]
  			  button->State = BUTTON_Pressed;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2201      	movs	r2, #1
 800202e:	739a      	strb	r2, [r3, #14]
  		  }
  		  break;
 8002030:	e031      	b.n	8002096 <buttonGetPressed+0xca>

  	  case BUTTON_Pressed:
		  if(HAL_GPIO_ReadPin(button->port, button->pin) == button->on_state)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f003 fa8c 	bl	800555c <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	7b1b      	ldrb	r3, [r3, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d114      	bne.n	800207a <buttonGetPressed+0xae>
		  {
			  if ((millis() - button->lastDebounceTime) > button->debounceDelay)
 8002050:	f7ff fc97 	bl	8001982 <millis>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d91a      	bls.n	800209a <buttonGetPressed+0xce>
	  		  {
				  button->PinState = GPIO_PIN_SET;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2201      	movs	r2, #1
 8002068:	735a      	strb	r2, [r3, #13]
				  ret = button->PinState;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	7b5b      	ldrb	r3, [r3, #13]
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
		  {
			  button->State = BUTTON_IDLE;
			  button->PinState = GPIO_PIN_RESET;
			  ret = button->PinState;
		  }
		  break;
 8002078:	e00f      	b.n	800209a <buttonGetPressed+0xce>
			  button->State = BUTTON_IDLE;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	739a      	strb	r2, [r3, #14]
			  button->PinState = GPIO_PIN_RESET;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2200      	movs	r2, #0
 8002084:	735a      	strb	r2, [r3, #13]
			  ret = button->PinState;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	7b5b      	ldrb	r3, [r3, #13]
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
		  break;
 8002094:	e001      	b.n	800209a <buttonGetPressed+0xce>
  		  break;
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <buttonGetPressed+0xd0>
		  break;
 800209a:	bf00      	nop
  }
  return ret;
 800209c:	7bfb      	ldrb	r3, [r7, #15]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000210 	.word	0x20000210

080020ac <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d128      	bne.n	8002112 <cliButton+0x66>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	4919      	ldr	r1, [pc, #100]	; (800212c <cliButton+0x80>)
 80020c6:	2000      	movs	r0, #0
 80020c8:	4798      	blx	r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <cliButton+0x66>
  {
    while(cliKeepLoop())
 80020d0:	e018      	b.n	8002104 <cliButton+0x58>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	e00c      	b.n	80020f2 <cliButton+0x46>
      {
        cliPrintf("%d", buttonGetPressed(i));
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff75 	bl	8001fcc <buttonGetPressed>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4619      	mov	r1, r3
 80020e6:	4812      	ldr	r0, [pc, #72]	; (8002130 <cliButton+0x84>)
 80020e8:	f000 f88e 	bl	8002208 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	ddef      	ble.n	80020d8 <cliButton+0x2c>
      }
      cliPrintf("\n");
 80020f8:	480e      	ldr	r0, [pc, #56]	; (8002134 <cliButton+0x88>)
 80020fa:	f000 f885 	bl	8002208 <cliPrintf>

      delay(100);
 80020fe:	2064      	movs	r0, #100	; 0x64
 8002100:	f7ff fc34 	bl	800196c <delay>
    while(cliKeepLoop())
 8002104:	f000 f97a 	bl	80023fc <cliKeepLoop>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e1      	bne.n	80020d2 <cliButton+0x26>
    }

    ret = true;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <cliButton+0x78>
  {
    cliPrintf("button show\n");
 800211e:	4806      	ldr	r0, [pc, #24]	; (8002138 <cliButton+0x8c>)
 8002120:	f000 f872 	bl	8002208 <cliPrintf>
  }
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	0800bd80 	.word	0x0800bd80
 8002130:	0800bd88 	.word	0x0800bd88
 8002134:	0800bd8c 	.word	0x0800bd8c
 8002138:	0800bd90 	.word	0x0800bd90

0800213c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <cliInit+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <cliInit+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <cliInit+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <cliInit+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <cliInit+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <cliInit+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <cliInit+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <cliInit+0x74>)
 8002174:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <cliInit+0x78>)
 8002176:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <cliInit+0x74>)
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <cliInit+0x7c>)
 800217e:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <cliInit+0x74>)
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <cliInit+0x80>)
 8002186:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <cliInit+0x74>)
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <cliInit+0x84>)
 800218e:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8002192:	4807      	ldr	r0, [pc, #28]	; (80021b0 <cliInit+0x74>)
 8002194:	f000 f81e 	bl	80021d4 <cliLineClean>


  cliAdd("help", cliShowList);
 8002198:	490a      	ldr	r1, [pc, #40]	; (80021c4 <cliInit+0x88>)
 800219a:	480b      	ldr	r0, [pc, #44]	; (80021c8 <cliInit+0x8c>)
 800219c:	f000 f944 	bl	8002428 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80021a0:	490a      	ldr	r1, [pc, #40]	; (80021cc <cliInit+0x90>)
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <cliInit+0x94>)
 80021a4:	f000 f940 	bl	8002428 <cliAdd>

  return true;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000cac 	.word	0x20000cac
 80021b4:	080022b9 	.word	0x080022b9
 80021b8:	08002309 	.word	0x08002309
 80021bc:	08002361 	.word	0x08002361
 80021c0:	080023a9 	.word	0x080023a9
 80021c4:	080024bd 	.word	0x080024bd
 80021c8:	0800bda0 	.word	0x0800bda0
 80021cc:	0800252d 	.word	0x0800252d
 80021d0:	0800bda8 	.word	0x0800bda8

080021d4 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223f      	movs	r2, #63	; 0x3f
 80021f0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8002208:	b40f      	push	{r0, r1, r2, r3}
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <cliPrintf+0x44>)
 8002218:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f103 0011 	add.w	r0, r3, #17
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	f006 fe70 	bl	8008f0c <vsniprintf>
 800222c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	7818      	ldrb	r0, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3311      	adds	r3, #17
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4619      	mov	r1, r3
 800223a:	f001 f8cf 	bl	80033dc <uartWrite>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002248:	b004      	add	sp, #16
 800224a:	4770      	bx	lr
 800224c:	20000cac 	.word	0x20000cac

08002250 <cliToUpper>:

void cliToUpper(char *str)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	81fb      	strh	r3, [r7, #14]
 800225c:	e018      	b.n	8002290 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002268:	7b7b      	ldrb	r3, [r7, #13]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d014      	beq.n	8002298 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800226e:	7b7b      	ldrb	r3, [r7, #13]
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d905      	bls.n	8002280 <cliToUpper+0x30>
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	2b7a      	cmp	r3, #122	; 0x7a
 8002278:	d802      	bhi.n	8002280 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	3b20      	subs	r3, #32
 800227e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8002280:	89fb      	ldrh	r3, [r7, #14]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	7b7a      	ldrb	r2, [r7, #13]
 8002288:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	3301      	adds	r3, #1
 800228e:	81fb      	strh	r3, [r7, #14]
 8002290:	89fb      	ldrh	r3, [r7, #14]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d9e3      	bls.n	800225e <cliToUpper+0xe>
 8002296:	e000      	b.n	800229a <cliToUpper+0x4a>
      break;
 8002298:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800229a:	89fb      	ldrh	r3, [r7, #14]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d105      	bne.n	80022ac <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
  }
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <cliArgsGetData+0x4c>)
 80022c8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d301      	bcc.n	80022dc <cliArgsGetData+0x24>
  {
    return 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	e00e      	b.n	80022fa <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f006 fdd6 	bl	8008ea0 <strtoul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]

  return ret;
 80022f8:	68fb      	ldr	r3, [r7, #12]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000cac 	.word	0x20000cac

08002308 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <cliArgsGetFloat+0x54>)
 800231a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	b29a      	uxth	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <cliArgsGetFloat+0x28>
  {
    return 0;
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e00d      	b.n	800234c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f006 fcdf 	bl	8008d04 <strtof>
 8002346:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb0 0a67 	vmov.f32	s0, s15
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000cac 	.word	0x20000cac

08002360 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <cliArgsGetStr+0x44>)
 8002370:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	b29a      	uxth	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800237c:	429a      	cmp	r2, r3
 800237e:	d301      	bcc.n	8002384 <cliArgsGetStr+0x24>
  {
    return 0;
 8002380:	2300      	movs	r3, #0
 8002382:	e008      	b.n	8002396 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  return ret;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000cac 	.word	0x20000cac

080023a8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <cliArgsIsStr+0x50>)
 80023ba:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d301      	bcc.n	80023ce <cliArgsIsStr+0x26>
  {
    return 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e010      	b.n	80023f0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	f7fe f84e 	bl	8000480 <strcmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <cliArgsIsStr+0x46>
  {
    ret = true;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000cac 	.word	0x20000cac

080023fc <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <cliKeepLoop+0x28>)
 8002404:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 ff7a 	bl	8003304 <uartAvailable>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <cliKeepLoop+0x1e>
  {
    return true;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800241a:	2300      	movs	r3, #0
  }
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000cac 	.word	0x20000cac

08002428 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <cliAdd+0x90>)
 8002438:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d901      	bls.n	8002448 <cliAdd+0x20>
  {
    return false;
 8002444:	2300      	movs	r3, #0
 8002446:	e032      	b.n	80024ae <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800244e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002450:	89fa      	ldrh	r2, [r7, #14]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4413      	add	r3, r2
 8002462:	3304      	adds	r3, #4
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	f005 fe20 	bl	80080ac <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800246c:	89fa      	ldrh	r2, [r7, #14]
 800246e:	6939      	ldr	r1, [r7, #16]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8002482:	89fa      	ldrh	r2, [r7, #14]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	3304      	adds	r3, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff feda 	bl	8002250 <cliToUpper>

  p_cli->cmd_count++;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80024a2:	3301      	adds	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000cac 	.word	0x20000cac

080024bc <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <cliShowList+0x60>)
 80024c6:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80024c8:	4815      	ldr	r0, [pc, #84]	; (8002520 <cliShowList+0x64>)
 80024ca:	f7ff fe9d 	bl	8002208 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 80024ce:	4815      	ldr	r0, [pc, #84]	; (8002524 <cliShowList+0x68>)
 80024d0:	f7ff fe9a 	bl	8002208 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e012      	b.n	8002500 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	4413      	add	r3, r2
 80024ec:	3304      	adds	r3, #4
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fe8a 	bl	8002208 <cliPrintf>
    cliPrintf("\r\n");
 80024f4:	480a      	ldr	r0, [pc, #40]	; (8002520 <cliShowList+0x64>)
 80024f6:	f7ff fe87 	bl	8002208 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4293      	cmp	r3, r2
 800250c:	dbe5      	blt.n	80024da <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <cliShowList+0x6c>)
 8002510:	f7ff fe7a 	bl	8002208 <cliPrintf>
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000cac 	.word	0x20000cac
 8002520:	0800be70 	.word	0x0800be70
 8002524:	0800be74 	.word	0x0800be74
 8002528:	0800be94 	.word	0x0800be94

0800252c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002534:	2310      	movs	r3, #16
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800254c:	4840      	ldr	r0, [pc, #256]	; (8002650 <cliMemoryDump+0x124>)
 800254e:	f7ff fe5b 	bl	8002208 <cliPrintf>
 8002552:	e07a      	b.n	800264a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b01      	cmp	r3, #1
 8002558:	dd09      	ble.n	800256e <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	3304      	adds	r3, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f006 fc9b 	bl	8008ea0 <strtoul>
 800256a:	4603      	mov	r3, r0
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f006 fc92 	bl	8008ea0 <strtoul>
 800257c:	4603      	mov	r3, r0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002584:	4833      	ldr	r0, [pc, #204]	; (8002654 <cliMemoryDump+0x128>)
 8002586:	f7ff fe3f 	bl	8002208 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	e058      	b.n	8002642 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	482e      	ldr	r0, [pc, #184]	; (8002658 <cliMemoryDump+0x12c>)
 80025a0:	f7ff fe32 	bl	8002208 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	482c      	ldr	r0, [pc, #176]	; (800265c <cliMemoryDump+0x130>)
 80025ac:	f7ff fe2c 	bl	8002208 <cliPrintf>

    if ((idx%4) == 3)
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	425a      	negs	r2, r3
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	f002 0203 	and.w	r2, r2, #3
 80025bc:	bf58      	it	pl
 80025be:	4253      	negpl	r3, r2
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d138      	bne.n	8002636 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80025c4:	4826      	ldr	r0, [pc, #152]	; (8002660 <cliMemoryDump+0x134>)
 80025c6:	f7ff fe1f 	bl	8002208 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	e02c      	b.n	800262a <cliMemoryDump+0xfe>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 80025d4:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e01d      	b.n	8002618 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 80025dc:	f107 020c 	add.w	r2, r7, #12
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b1f      	cmp	r3, #31
 80025e8:	d910      	bls.n	800260c <cliMemoryDump+0xe0>
 80025ea:	f107 020c 	add.w	r2, r7, #12
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b7e      	cmp	r3, #126	; 0x7e
 80025f6:	d809      	bhi.n	800260c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 80025f8:	f107 020c 	add.w	r2, r7, #12
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4817      	ldr	r0, [pc, #92]	; (8002664 <cliMemoryDump+0x138>)
 8002606:	f7ff fdff 	bl	8002208 <cliPrintf>
 800260a:	e002      	b.n	8002612 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800260c:	4816      	ldr	r0, [pc, #88]	; (8002668 <cliMemoryDump+0x13c>)
 800260e:	f7ff fdfb 	bl	8002208 <cliPrintf>
        for (i=0;i<4;i++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b03      	cmp	r3, #3
 800261c:	ddde      	ble.n	80025dc <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3304      	adds	r3, #4
 8002622:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	3301      	adds	r3, #1
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	2b03      	cmp	r3, #3
 800262e:	ddcf      	ble.n	80025d0 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002630:	480e      	ldr	r0, [pc, #56]	; (800266c <cliMemoryDump+0x140>)
 8002632:	f7ff fde9 	bl	8002208 <cliPrintf>
    }
    addr++;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3304      	adds	r3, #4
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263e:	3301      	adds	r3, #1
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002646:	429a      	cmp	r2, r3
 8002648:	dba2      	blt.n	8002590 <cliMemoryDump+0x64>
  }
}
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	0800beb4 	.word	0x0800beb4
 8002654:	0800bec8 	.word	0x0800bec8
 8002658:	0800bed0 	.word	0x0800bed0
 800265c:	0800bedc 	.word	0x0800bedc
 8002660:	0800bee4 	.word	0x0800bee4
 8002664:	0800bee8 	.word	0x0800bee8
 8002668:	0800beec 	.word	0x0800beec
 800266c:	0800bef0 	.word	0x0800bef0

08002670 <cmdInit>:




void cmdInit(cmd_t *p_cmd)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  p_cmd->is_init = false;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	721a      	strb	r2, [r3, #8]

  p_cmd->rx_packet.data = &p_cmd->rx_packet.buffer[CMD_STATE_WAIT_DATA];
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
  p_cmd->tx_packet.data = &p_cmd->tx_packet.buffer[CMD_STATE_WAIT_DATA];
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f203 423a 	addw	r2, r3, #1082	; 0x43a
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <cmdOpen>:

bool cmdOpen(cmd_t *p_cmd, uint8_t ch, uint32_t baud)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	460b      	mov	r3, r1
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	72fb      	strb	r3, [r7, #11]
  p_cmd->ch = ch;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	7afa      	ldrb	r2, [r7, #11]
 80026ba:	701a      	strb	r2, [r3, #0]
  p_cmd->baud = baud;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	605a      	str	r2, [r3, #4]
  p_cmd->is_init = true;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	705a      	strb	r2, [r3, #1]
  p_cmd->state = CMD_STATE_WAIT_STX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	721a      	strb	r2, [r3, #8]
  p_cmd->pre_time = millis();
 80026ce:	f7ff f958 	bl	8001982 <millis>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	60da      	str	r2, [r3, #12]

  return uartOpen(ch, baud);
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fd03 	bl	80030e8 <uartOpen>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <cmdReceivePacket>:
{
  return uartClose(p_cmd->ch);
}

bool cmdReceivePacket(cmd_t *p_cmd)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint8_t rx_data;


  if (uartAvailable(p_cmd->ch) > 0)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fe01 	bl	8003304 <uartAvailable>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00f      	beq.n	8002728 <cmdReceivePacket+0x3c>
  {
    rx_data = uartRead(p_cmd->ch);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fe3f 	bl	8003390 <uartRead>
 8002712:	4603      	mov	r3, r0
 8002714:	73bb      	strb	r3, [r7, #14]
  else
  {
    return false;
  }

  if (millis()-p_cmd->pre_time >= 100)
 8002716:	f7ff f934 	bl	8001982 <millis>
 800271a:	4602      	mov	r2, r0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b63      	cmp	r3, #99	; 0x63
 8002724:	d905      	bls.n	8002732 <cmdReceivePacket+0x46>
 8002726:	e001      	b.n	800272c <cmdReceivePacket+0x40>
    return false;
 8002728:	2300      	movs	r3, #0
 800272a:	e0be      	b.n	80028aa <cmdReceivePacket+0x1be>
  {
    p_cmd->state = CMD_STATE_WAIT_STX;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	721a      	strb	r2, [r3, #8]
  }
  p_cmd->pre_time = millis();
 8002732:	f7ff f926 	bl	8001982 <millis>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]

  switch(p_cmd->state)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7a1b      	ldrb	r3, [r3, #8]
 8002740:	2b08      	cmp	r3, #8
 8002742:	f200 80b1 	bhi.w	80028a8 <cmdReceivePacket+0x1bc>
 8002746:	a201      	add	r2, pc, #4	; (adr r2, 800274c <cmdReceivePacket+0x60>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	08002771 	.word	0x08002771
 8002750:	08002787 	.word	0x08002787
 8002754:	080027a3 	.word	0x080027a3
 8002758:	080027bf 	.word	0x080027bf
 800275c:	080027db 	.word	0x080027db
 8002760:	080027f9 	.word	0x080027f9
 8002764:	0800283b 	.word	0x0800283b
 8002768:	08002877 	.word	0x08002877
 800276c:	08002885 	.word	0x08002885
  {
    case CMD_STATE_WAIT_STX:
      if (rx_data == CMD_STX)
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	2b02      	cmp	r3, #2
 8002774:	f040 8095 	bne.w	80028a2 <cmdReceivePacket+0x1b6>
      {
        p_cmd->state = CMD_STATE_WAIT_CMD;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	721a      	strb	r2, [r3, #8]
        p_cmd->rx_packet.check_sum = 0;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	779a      	strb	r2, [r3, #30]
      }
      break;
 8002784:	e08d      	b.n	80028a2 <cmdReceivePacket+0x1b6>

    case CMD_STATE_WAIT_CMD:
      p_cmd->rx_packet.cmd = rx_data;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7bba      	ldrb	r2, [r7, #14]
 800278a:	761a      	strb	r2, [r3, #24]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7f9a      	ldrb	r2, [r3, #30]
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	4053      	eors	r3, r2
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_DIR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	721a      	strb	r2, [r3, #8]
      break;
 80027a0:	e082      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DIR:
      p_cmd->rx_packet.dir = rx_data;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7bba      	ldrb	r2, [r7, #14]
 80027a6:	765a      	strb	r2, [r3, #25]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7f9a      	ldrb	r2, [r3, #30]
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	4053      	eors	r3, r2
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_ERROR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2203      	movs	r2, #3
 80027ba:	721a      	strb	r2, [r3, #8]
      break;
 80027bc:	e074      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ERROR:
      p_cmd->rx_packet.error = rx_data;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7bba      	ldrb	r2, [r7, #14]
 80027c2:	769a      	strb	r2, [r3, #26]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7f9a      	ldrb	r2, [r3, #30]
 80027c8:	7bbb      	ldrb	r3, [r7, #14]
 80027ca:	4053      	eors	r3, r2
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_L;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	721a      	strb	r2, [r3, #8]
      break;
 80027d8:	e066      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_L:
      p_cmd->rx_packet.length = rx_data;
 80027da:	7bbb      	ldrb	r3, [r7, #14]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7f9a      	ldrb	r2, [r3, #30]
 80027e6:	7bbb      	ldrb	r3, [r7, #14]
 80027e8:	4053      	eors	r3, r2
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	779a      	strb	r2, [r3, #30]
      p_cmd->state = CMD_STATE_WAIT_LENGTH_H;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2205      	movs	r2, #5
 80027f4:	721a      	strb	r2, [r3, #8]
      break;
 80027f6:	e057      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_LENGTH_H:
      p_cmd->rx_packet.length |= (rx_data << 8);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8b9b      	ldrh	r3, [r3, #28]
 80027fc:	b21a      	sxth	r2, r3
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b21b      	sxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b21b      	sxth	r3, r3
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	839a      	strh	r2, [r3, #28]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7f9a      	ldrb	r2, [r3, #30]
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	4053      	eors	r3, r2
 8002816:	b2da      	uxtb	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	779a      	strb	r2, [r3, #30]

      if (p_cmd->rx_packet.length > 0)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8b9b      	ldrh	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <cmdReceivePacket+0x146>
      {
        p_cmd->index = 0;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
        p_cmd->state = CMD_STATE_WAIT_DATA;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2206      	movs	r2, #6
 800282e:	721a      	strb	r2, [r3, #8]
      }
      else
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
      }
      break;
 8002830:	e03a      	b.n	80028a8 <cmdReceivePacket+0x1bc>
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2207      	movs	r2, #7
 8002836:	721a      	strb	r2, [r3, #8]
      break;
 8002838:	e036      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_DATA:
      p_cmd->rx_packet.data[p_cmd->index] = rx_data;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	4413      	add	r3, r2
 8002846:	7bba      	ldrb	r2, [r7, #14]
 8002848:	701a      	strb	r2, [r3, #0]
      p_cmd->rx_packet.check_sum ^= rx_data;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7f9a      	ldrb	r2, [r3, #30]
 800284e:	7bbb      	ldrb	r3, [r7, #14]
 8002850:	4053      	eors	r3, r2
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	779a      	strb	r2, [r3, #30]
      p_cmd->index++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	611a      	str	r2, [r3, #16]
      if (p_cmd->index == p_cmd->rx_packet.length)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	8b92      	ldrh	r2, [r2, #28]
 800286a:	4293      	cmp	r3, r2
 800286c:	d11b      	bne.n	80028a6 <cmdReceivePacket+0x1ba>
      {
        p_cmd->state = CMD_STATE_WAIT_CHECKSUM;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2207      	movs	r2, #7
 8002872:	721a      	strb	r2, [r3, #8]
      }
      break;
 8002874:	e017      	b.n	80028a6 <cmdReceivePacket+0x1ba>

    case CMD_STATE_WAIT_CHECKSUM:
      p_cmd->rx_packet.check_sum_recv = rx_data;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7bba      	ldrb	r2, [r7, #14]
 800287a:	77da      	strb	r2, [r3, #31]
      p_cmd->state = CMD_STATE_WAIT_ETX;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2208      	movs	r2, #8
 8002880:	721a      	strb	r2, [r3, #8]
      break;
 8002882:	e011      	b.n	80028a8 <cmdReceivePacket+0x1bc>

    case CMD_STATE_WAIT_ETX:
      if (rx_data == CMD_ETX)
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d107      	bne.n	800289a <cmdReceivePacket+0x1ae>
      {
        if (p_cmd->rx_packet.check_sum == p_cmd->rx_packet.check_sum_recv)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7f9a      	ldrb	r2, [r3, #30]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7fdb      	ldrb	r3, [r3, #31]
 8002892:	429a      	cmp	r2, r3
 8002894:	d101      	bne.n	800289a <cmdReceivePacket+0x1ae>
        {
          ret = true;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
        }
      }
      p_cmd->state = CMD_STATE_WAIT_STX;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	721a      	strb	r2, [r3, #8]
      break;
 80028a0:	e002      	b.n	80028a8 <cmdReceivePacket+0x1bc>
      break;
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <cmdReceivePacket+0x1bc>
      break;
 80028a6:	bf00      	nop
  }

  return ret;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop

080028b4 <cmdSendResp>:

  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
}

void cmdSendResp(cmd_t *p_cmd, uint8_t cmd, uint8_t err_code, uint8_t *p_data, uint32_t length)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	72fb      	strb	r3, [r7, #11]
 80028c2:	4613      	mov	r3, r2
 80028c4:	72bb      	strb	r3, [r7, #10]
  uint32_t index;


  index = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]

  p_cmd->tx_packet.buffer[index++] = CMD_STX;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	2202      	movs	r2, #2
 80028d6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = cmd;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	61fa      	str	r2, [r7, #28]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4413      	add	r3, r2
 80028e4:	7afa      	ldrb	r2, [r7, #11]
 80028e6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_DIR_S_TO_M;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	61fa      	str	r2, [r7, #28]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = err_code;
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	61fa      	str	r2, [r7, #28]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	7aba      	ldrb	r2, [r7, #10]
 8002906:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 0) & 0xFF;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	61fa      	str	r2, [r7, #28]
 8002910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002912:	b2d1      	uxtb	r1, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	460a      	mov	r2, r1
 800291a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = (length >> 8) & 0xFF;
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	0a19      	lsrs	r1, r3, #8
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	b2c9      	uxtb	r1, r1
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	460a      	mov	r2, r1
 8002930:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

  for (int i=0; i<length; i++)
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
 8002938:	e00e      	b.n	8002958 <cmdSendResp+0xa4>
  {
    p_cmd->tx_packet.buffer[index++] = p_data[i];
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	441a      	add	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	61f9      	str	r1, [r7, #28]
 8002946:	7811      	ldrb	r1, [r2, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	460a      	mov	r2, r1
 800294e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  for (int i=0; i<length; i++)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3301      	adds	r3, #1
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295c:	429a      	cmp	r2, r3
 800295e:	d8ec      	bhi.n	800293a <cmdSendResp+0x86>
  }

  uint8_t check_sum = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length + 5; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	e00b      	b.n	8002982 <cmdSendResp+0xce>
  {
    check_sum ^= p_cmd->tx_packet.buffer[i+1];
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	f893 2434 	ldrb.w	r2, [r3, #1076]	; 0x434
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	4053      	eors	r3, r2
 800297a:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<length + 5; i++)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	3301      	adds	r3, #1
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	1d5a      	adds	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d8ee      	bhi.n	800296a <cmdSendResp+0xb6>
  }
  p_cmd->tx_packet.buffer[index++] = check_sum;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	61fa      	str	r2, [r7, #28]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	7dfa      	ldrb	r2, [r7, #23]
 8002998:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
  p_cmd->tx_packet.buffer[index++] = CMD_ETX;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	61fa      	str	r2, [r7, #28]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434


  uartWrite(p_cmd->ch, p_cmd->tx_packet.buffer, index);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	7818      	ldrb	r0, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f203 4334 	addw	r3, r3, #1076	; 0x434
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f000 fd0f 	bl	80033dc <uartWrite>
}
 80029be:	bf00      	nop
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <flashInit>:
static void cliFlash(cli_args_t *args);
#endif


bool flashInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0

#ifdef _USE_HW_CLI
  cliAdd("flash", cliFlash);
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <flashInit+0x14>)
 80029ce:	4804      	ldr	r0, [pc, #16]	; (80029e0 <flashInit+0x18>)
 80029d0:	f7ff fd2a 	bl	8002428 <cliAdd>
#endif

  return true;
 80029d4:	2301      	movs	r3, #1
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	08002ba5 	.word	0x08002ba5
 80029e0:	0800bf00 	.word	0x0800bf00

080029e4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 80029f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	e015      	b.n	8002a30 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f871 	bl	8002af4 <flashInSector>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8002a18:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da01      	bge.n	8002a24 <flashErase+0x40>
      {
        start_sector_num = i;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	3301      	adds	r3, #1
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	2b07      	cmp	r3, #7
 8002a34:	dde6      	ble.n	8002a04 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 8002a3c:	f002 f892 	bl	8004b64 <HAL_FLASH_Unlock>

    init.TypeErase   = FLASH_TYPEERASE_SECTORS;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
    init.Banks       = FLASH_BANK_1;
 8002a44:	2301      	movs	r3, #1
 8002a46:	613b      	str	r3, [r7, #16]
    init.Sector      = start_sector_num;
 8002a48:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002a4c:	617b      	str	r3, [r7, #20]
    init.NbSectors   = sector_count;
 8002a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a50:	61bb      	str	r3, [r7, #24]
    init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8002a56:	f107 0208 	add.w	r2, r7, #8
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 f9f1 	bl	8004e48 <HAL_FLASHEx_Erase>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8002a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d102      	bne.n	8002a7a <flashErase+0x96>
    {
      ret = true;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8002a7a:	f002 f895 	bl	8004ba8 <HAL_FLASH_Lock>
  }

  return ret;
 8002a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3730      	adds	r7, #48	; 0x30
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8002a8a:	b5b0      	push	{r4, r5, r7, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002a96:	2301      	movs	r3, #1
 8002a98:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  HAL_FLASH_Unlock();
 8002a9a:	f002 f863 	bl	8004b64 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	e01b      	b.n	8002adc <flashWrite+0x52>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	18d1      	adds	r1, r2, r3
 8002ab4:	8afb      	ldrh	r3, [r7, #22]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	461c      	mov	r4, r3
 8002aba:	4615      	mov	r5, r2
 8002abc:	4622      	mov	r2, r4
 8002abe:	462b      	mov	r3, r5
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f001 fffb 	bl	8004abc <HAL_FLASH_Program>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8002aca:	7d7b      	ldrb	r3, [r7, #21]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <flashWrite+0x4c>
    {
      ret = false;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
      break;
 8002ad4:	e006      	b.n	8002ae4 <flashWrite+0x5a>
  for (int i=0; i<length; i+=1)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8df      	bhi.n	8002aa4 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8002ae4:	f002 f860 	bl	8004ba8 <HAL_FLASH_Lock>

  return ret;
 8002ae8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002af4 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <flashInSector+0xac>)
 8002b0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b10:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <flashInSector+0xac>)
 8002b16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b1a:	89fb      	ldrh	r3, [r7, #14]
 8002b1c:	4920      	ldr	r1, [pc, #128]	; (8002ba0 <flashInSector+0xac>)
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	3b01      	subs	r3, #1
 8002b28:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	3b01      	subs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002b38:	6a3a      	ldr	r2, [r7, #32]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d306      	bcc.n	8002b4e <flashInSector+0x5a>
 8002b40:	6a3a      	ldr	r2, [r7, #32]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d802      	bhi.n	8002b4e <flashInSector+0x5a>
  {
    ret = true;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d306      	bcc.n	8002b64 <flashInSector+0x70>
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d802      	bhi.n	8002b64 <flashInSector+0x70>
  {
    ret = true;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d306      	bcc.n	8002b7a <flashInSector+0x86>
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d802      	bhi.n	8002b7a <flashInSector+0x86>
  {
    ret = true;
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d306      	bcc.n	8002b90 <flashInSector+0x9c>
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d802      	bhi.n	8002b90 <flashInSector+0x9c>
  {
    ret = true;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8002b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	372c      	adds	r7, #44	; 0x2c
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000228 	.word	0x20000228

08002ba4 <cliFlash>:



#ifdef _USE_HW_CLI
void cliFlash(cli_args_t *args)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08c      	sub	sp, #48	; 0x30
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d121      	bne.n	8002bfe <cliFlash+0x5a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	495c      	ldr	r1, [pc, #368]	; (8002d30 <cliFlash+0x18c>)
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4798      	blx	r3
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d019      	beq.n	8002bfe <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bce:	e010      	b.n	8002bf2 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <cliFlash+0x190>)
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <cliFlash+0x190>)
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4413      	add	r3, r2
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a9b      	lsrs	r3, r3, #10
 8002be4:	461a      	mov	r2, r3
 8002be6:	4854      	ldr	r0, [pc, #336]	; (8002d38 <cliFlash+0x194>)
 8002be8:	f7ff fb0e 	bl	8002208 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	3301      	adds	r3, #1
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2b07      	cmp	r3, #7
 8002bf6:	ddeb      	ble.n	8002bd0 <cliFlash+0x2c>
    }

    ret = true;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d12b      	bne.n	8002c5e <cliFlash+0xba>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	494c      	ldr	r1, [pc, #304]	; (8002d3c <cliFlash+0x198>)
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	4798      	blx	r3
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d023      	beq.n	8002c5e <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	4798      	blx	r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2002      	movs	r0, #2
 8002c28:	4798      	blx	r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
 8002c32:	e00d      	b.n	8002c50 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	18d1      	adds	r1, r2, r3
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	4413      	add	r3, r2
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	483e      	ldr	r0, [pc, #248]	; (8002d40 <cliFlash+0x19c>)
 8002c46:	f7ff fadf 	bl	8002208 <cliPrintf>
    for (int i=0; i<length; i++)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d8ed      	bhi.n	8002c34 <cliFlash+0x90>
    }

    ret = true;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d121      	bne.n	8002caa <cliFlash+0x106>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4936      	ldr	r1, [pc, #216]	; (8002d44 <cliFlash+0x1a0>)
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	4798      	blx	r3
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d019      	beq.n	8002caa <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	4798      	blx	r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2002      	movs	r0, #2
 8002c88:	4798      	blx	r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8002c8e:	6979      	ldr	r1, [r7, #20]
 8002c90:	69b8      	ldr	r0, [r7, #24]
 8002c92:	f7ff fea7 	bl	80029e4 <flashErase>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <cliFlash+0x100>
    {
      cliPrintf("Erase OK\n");
 8002c9c:	482a      	ldr	r0, [pc, #168]	; (8002d48 <cliFlash+0x1a4>)
 8002c9e:	f7ff fab3 	bl	8002208 <cliPrintf>
 8002ca2:	e002      	b.n	8002caa <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\n");
 8002ca4:	4829      	ldr	r0, [pc, #164]	; (8002d4c <cliFlash+0x1a8>)
 8002ca6:	f7ff faaf 	bl	8002208 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d127      	bne.n	8002d02 <cliFlash+0x15e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4926      	ldr	r1, [pc, #152]	; (8002d50 <cliFlash+0x1ac>)
 8002cb8:	2000      	movs	r0, #0
 8002cba:	4798      	blx	r3
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01f      	beq.n	8002d02 <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	4798      	blx	r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	4798      	blx	r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	6938      	ldr	r0, [r7, #16]
 8002ce4:	f7ff fed1 	bl	8002a8a <flashWrite>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <cliFlash+0x152>
    {
      cliPrintf("Write OK\n");
 8002cee:	4819      	ldr	r0, [pc, #100]	; (8002d54 <cliFlash+0x1b0>)
 8002cf0:	f7ff fa8a 	bl	8002208 <cliPrintf>
 8002cf4:	e002      	b.n	8002cfc <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\n");
 8002cf6:	4818      	ldr	r0, [pc, #96]	; (8002d58 <cliFlash+0x1b4>)
 8002cf8:	f7ff fa86 	bl	8002208 <cliPrintf>
    }

    ret = true;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 8002d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <cliFlash+0x184>
  {
    cliPrintf("flash info\n");
 8002d10:	4812      	ldr	r0, [pc, #72]	; (8002d5c <cliFlash+0x1b8>)
 8002d12:	f7ff fa79 	bl	8002208 <cliPrintf>
    cliPrintf("flash read  addr length\n");
 8002d16:	4812      	ldr	r0, [pc, #72]	; (8002d60 <cliFlash+0x1bc>)
 8002d18:	f7ff fa76 	bl	8002208 <cliPrintf>
    cliPrintf("flash erase addr length\n");
 8002d1c:	4811      	ldr	r0, [pc, #68]	; (8002d64 <cliFlash+0x1c0>)
 8002d1e:	f7ff fa73 	bl	8002208 <cliPrintf>
    cliPrintf("flash write addr data\n");
 8002d22:	4811      	ldr	r0, [pc, #68]	; (8002d68 <cliFlash+0x1c4>)
 8002d24:	f7ff fa70 	bl	8002208 <cliPrintf>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3730      	adds	r7, #48	; 0x30
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	0800bf08 	.word	0x0800bf08
 8002d34:	20000228 	.word	0x20000228
 8002d38:	0800bf10 	.word	0x0800bf10
 8002d3c:	0800bf20 	.word	0x0800bf20
 8002d40:	0800bf28 	.word	0x0800bf28
 8002d44:	0800bf38 	.word	0x0800bf38
 8002d48:	0800bf40 	.word	0x0800bf40
 8002d4c:	0800bf4c 	.word	0x0800bf4c
 8002d50:	0800bf58 	.word	0x0800bf58
 8002d54:	0800bf60 	.word	0x0800bf60
 8002d58:	0800bf6c 	.word	0x0800bf6c
 8002d5c:	0800bf78 	.word	0x0800bf78
 8002d60:	0800bf84 	.word	0x0800bf84
 8002d64:	0800bfa0 	.word	0x0800bfa0
 8002d68:	0800bfbc 	.word	0x0800bfbc

08002d6c <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
  bool ret = true;
 8002d72:	2301      	movs	r3, #1
 8002d74:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <ledInit+0x8c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <ledInit+0x8c>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <ledInit+0x8c>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da0:	2301      	movs	r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e016      	b.n	8002de0 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <ledInit+0x90>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	889b      	ldrh	r3, [r3, #4]
 8002dbc:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <ledInit+0x90>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dc6:	1d3a      	adds	r2, r7, #4
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 f95e 	bl	800508c <HAL_GPIO_Init>

    ledOff(i);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f837 	bl	8002e48 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	dde5      	ble.n	8002db2 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002de6:	4906      	ldr	r1, [pc, #24]	; (8002e00 <ledInit+0x94>)
 8002de8:	4806      	ldr	r0, [pc, #24]	; (8002e04 <ledInit+0x98>)
 8002dea:	f7ff fb1d 	bl	8002428 <cliAdd>
#endif

  return ret;
 8002dee:	7efb      	ldrb	r3, [r7, #27]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	20000268 	.word	0x20000268
 8002e00:	08002ec1 	.word	0x08002ec1
 8002e04:	0800bfd4 	.word	0x0800bfd4

08002e08 <ledOn>:

void ledOn(uint8_t ch)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d111      	bne.n	8002e3c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <ledOn+0x3c>)
 8002e1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <ledOn+0x3c>)
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	8899      	ldrh	r1, [r3, #4]
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <ledOn+0x3c>)
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	799b      	ldrb	r3, [r3, #6]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f002 fba9 	bl	800558c <HAL_GPIO_WritePin>
 8002e3a:	e000      	b.n	8002e3e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e3c:	bf00      	nop
}
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000268 	.word	0x20000268

08002e48 <ledOff>:

void ledOff(uint8_t ch)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d111      	bne.n	8002e7c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <ledOff+0x3c>)
 8002e5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <ledOff+0x3c>)
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	8899      	ldrh	r1, [r3, #4]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <ledOff+0x3c>)
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	79db      	ldrb	r3, [r3, #7]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f002 fb89 	bl	800558c <HAL_GPIO_WritePin>
 8002e7a:	e000      	b.n	8002e7e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002e7c:	bf00      	nop
}
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000268 	.word	0x20000268

08002e88 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10d      	bne.n	8002eb4 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <ledToggle+0x34>)
 8002e9c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	4906      	ldr	r1, [pc, #24]	; (8002ebc <ledToggle+0x34>)
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	889b      	ldrh	r3, [r3, #4]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f002 fb86 	bl	80055be <HAL_GPIO_TogglePin>
 8002eb2:	e000      	b.n	8002eb6 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002eb4:	bf00      	nop
}
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20000268 	.word	0x20000268

08002ec0 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2b03      	cmp	r3, #3
 8002ed2:	d133      	bne.n	8002f3c <cliLed+0x7c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	491f      	ldr	r1, [pc, #124]	; (8002f58 <cliLed+0x98>)
 8002eda:	2000      	movs	r0, #0
 8002edc:	4798      	blx	r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02b      	beq.n	8002f3c <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2001      	movs	r0, #1
 8002eea:	4798      	blx	r3
 8002eec:	4603      	mov	r3, r0
 8002eee:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	4798      	blx	r3
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002efc:	7dbb      	ldrb	r3, [r7, #22]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <cliLed+0x48>
    {
      led_ch--;
 8002f02:	7dbb      	ldrb	r3, [r7, #22]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002f08:	f7fe fd3b 	bl	8001982 <millis>
 8002f0c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002f0e:	e00e      	b.n	8002f2e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8002f10:	f7fe fd37 	bl	8001982 <millis>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d806      	bhi.n	8002f2e <cliLed+0x6e>
      {
        pre_time = millis();
 8002f20:	f7fe fd2f 	bl	8001982 <millis>
 8002f24:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002f26:	7dbb      	ldrb	r3, [r7, #22]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ffad 	bl	8002e88 <ledToggle>
    while(cliKeepLoop())
 8002f2e:	f7ff fa65 	bl	80023fc <cliKeepLoop>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1eb      	bne.n	8002f10 <cliLed+0x50>
      }
    }

    ret = true;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4804      	ldr	r0, [pc, #16]	; (8002f5c <cliLed+0x9c>)
 8002f4c:	f7ff f95c 	bl	8002208 <cliPrintf>
  }
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	0800bfd8 	.word	0x0800bfd8
 8002f5c:	0800bfe0 	.word	0x0800bfe0

08002f60 <resetInit>:
static uint32_t reset_count = 0;



bool resetInit(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  bool ret = true;
 8002f66:	2301      	movs	r3, #1
 8002f68:	71fb      	strb	r3, [r7, #7]

#if 1
  // 만약 Reset 핀이 눌렸다면
  //
  if (RCC->CSR & (1<<26))
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <resetInit+0x50>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d012      	beq.n	8002f9c <resetInit+0x3c>
  {
    rtcBackupRegWrite(1, rtcBackupRegRead(1) + 1);
 8002f76:	2001      	movs	r0, #1
 8002f78:	f000 f866 	bl	8003048 <rtcBackupRegRead>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4619      	mov	r1, r3
 8002f82:	2001      	movs	r0, #1
 8002f84:	f000 f870 	bl	8003068 <rtcBackupRegWrite>
    delay(500);
 8002f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f8c:	f7fe fcee 	bl	800196c <delay>
    reset_count = rtcBackupRegRead(1);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f000 f859 	bl	8003048 <rtcBackupRegRead>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <resetInit+0x54>)
 8002f9a:	6013      	str	r3, [r2, #0]
  }

  rtcBackupRegWrite(1, 0);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f000 f862 	bl	8003068 <rtcBackupRegWrite>
#endif

  return ret;
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	200010f0 	.word	0x200010f0

08002fb8 <resetGetCount>:

uint32_t resetGetCount(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return reset_count;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <resetGetCount+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	200010f0 	.word	0x200010f0

08002fd0 <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  bool ret = true;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	71fb      	strb	r3, [r7, #7]


  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <rtcInit+0x6c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a16      	ldr	r2, [pc, #88]	; (800303c <rtcInit+0x6c>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <rtcInit+0x6c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]


  hrtc.Instance = RTC;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <rtcInit+0x70>)
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <rtcInit+0x74>)
 8002ffa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <rtcInit+0x70>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <rtcInit+0x70>)
 8003004:	227f      	movs	r2, #127	; 0x7f
 8003006:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <rtcInit+0x70>)
 800300a:	22ff      	movs	r2, #255	; 0xff
 800300c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <rtcInit+0x70>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003014:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <rtcInit+0x70>)
 8003016:	2200      	movs	r2, #0
 8003018:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <rtcInit+0x70>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <rtcInit+0x70>)
 8003022:	f003 f8f3 	bl	800620c <HAL_RTC_Init>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <rtcInit+0x60>
  {
    Error_Handler();
 800302c:	f7fe fd32 	bl	8001a94 <Error_Handler>
  }

  return ret;
 8003030:	79fb      	ldrb	r3, [r7, #7]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800
 8003040:	200010f4 	.word	0x200010f4
 8003044:	40002800 	.word	0x40002800

08003048 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4804      	ldr	r0, [pc, #16]	; (8003064 <rtcBackupRegRead+0x1c>)
 8003054:	f003 f9d9 	bl	800640a <HAL_RTCEx_BKUPRead>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200010f4 	.word	0x200010f4

08003068 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <rtcBackupRegWrite+0x1c>)
 8003078:	f003 f9ad 	bl	80063d6 <HAL_RTCEx_BKUPWrite>
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200010f4 	.word	0x200010f4

08003088 <HAL_RTC_MspInit>:




void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a05      	ldr	r2, [pc, #20]	; (80030ac <HAL_RTC_MspInit+0x24>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d102      	bne.n	80030a0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RTC_MspInit+0x28>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr
 80030ac:	40002800 	.word	0x40002800
 80030b0:	42470e3c 	.word	0x42470e3c

080030b4 <uartInit>:
#endif



bool uartInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	e007      	b.n	80030d0 <uartInit+0x1c>
  {
    is_open[i] = false;
 80030c0:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <uartInit+0x30>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3301      	adds	r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	ddf4      	ble.n	80030c0 <uartInit+0xc>
  }


  return true;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	20001114 	.word	0x20001114

080030e8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <uartOpen+0x1c>
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d075      	beq.n	80031ee <uartOpen+0x106>
 8003102:	e0ec      	b.n	80032de <uartOpen+0x1f6>
  {
    case _DEF_UART1:
        huart1.Instance         = USART1;
 8003104:	4b78      	ldr	r3, [pc, #480]	; (80032e8 <uartOpen+0x200>)
 8003106:	4a79      	ldr	r2, [pc, #484]	; (80032ec <uartOpen+0x204>)
 8003108:	601a      	str	r2, [r3, #0]
        huart1.Init.BaudRate    = baud;
 800310a:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <uartOpen+0x200>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6053      	str	r3, [r2, #4]
        huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8003110:	4b75      	ldr	r3, [pc, #468]	; (80032e8 <uartOpen+0x200>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
        huart1.Init.StopBits    = UART_STOPBITS_1;
 8003116:	4b74      	ldr	r3, [pc, #464]	; (80032e8 <uartOpen+0x200>)
 8003118:	2200      	movs	r2, #0
 800311a:	60da      	str	r2, [r3, #12]
        huart1.Init.Parity      = UART_PARITY_NONE;
 800311c:	4b72      	ldr	r3, [pc, #456]	; (80032e8 <uartOpen+0x200>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
        huart1.Init.Mode        = UART_MODE_TX_RX;
 8003122:	4b71      	ldr	r3, [pc, #452]	; (80032e8 <uartOpen+0x200>)
 8003124:	220c      	movs	r2, #12
 8003126:	615a      	str	r2, [r3, #20]
        huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8003128:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <uartOpen+0x200>)
 800312a:	2200      	movs	r2, #0
 800312c:	619a      	str	r2, [r3, #24]
        huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800312e:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <uartOpen+0x200>)
 8003130:	2200      	movs	r2, #0
 8003132:	61da      	str	r2, [r3, #28]

        //HAL_UART_DeInit(&huart1);

        qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4a6d      	ldr	r2, [pc, #436]	; (80032f0 <uartOpen+0x208>)
 800313a:	4413      	add	r3, r2
 800313c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003140:	496c      	ldr	r1, [pc, #432]	; (80032f4 <uartOpen+0x20c>)
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fe21 	bl	8001d8a <qbufferCreate>

        /* DMA controller clock enable */
        __HAL_RCC_DMA2_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <uartOpen+0x210>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <uartOpen+0x210>)
 8003152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <uartOpen+0x210>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]

        /* DMA interrupt init */
        /* DMA2_Stream2_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8003164:	2200      	movs	r2, #0
 8003166:	2104      	movs	r1, #4
 8003168:	203a      	movs	r0, #58	; 0x3a
 800316a:	f001 f872 	bl	8004252 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800316e:	203a      	movs	r0, #58	; 0x3a
 8003170:	f001 f88b 	bl	800428a <HAL_NVIC_EnableIRQ>
        /* DMA2_Stream7_IRQn interrupt configuration */
        HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8003174:	2200      	movs	r2, #0
 8003176:	2104      	movs	r1, #4
 8003178:	2046      	movs	r0, #70	; 0x46
 800317a:	f001 f86a 	bl	8004252 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800317e:	2046      	movs	r0, #70	; 0x46
 8003180:	f001 f883 	bl	800428a <HAL_NVIC_EnableIRQ>

        if (HAL_UART_Init(&huart1) != HAL_OK)
 8003184:	4858      	ldr	r0, [pc, #352]	; (80032e8 <uartOpen+0x200>)
 8003186:	f003 f958 	bl	800643a <HAL_UART_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <uartOpen+0xae>
        {
          ret = false;
 8003190:	2300      	movs	r3, #0
 8003192:	75fb      	strb	r3, [r7, #23]
          }

          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
          qbuffer[ch].out = qbuffer[ch].in;
        }
      break;
 8003194:	e0a3      	b.n	80032de <uartOpen+0x1f6>
          ret = true;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
          is_open[ch] = true;
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	4a57      	ldr	r2, [pc, #348]	; (80032fc <uartOpen+0x214>)
 800319e:	2101      	movs	r1, #1
 80031a0:	54d1      	strb	r1, [r2, r3]
          if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80031a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031a6:	4953      	ldr	r1, [pc, #332]	; (80032f4 <uartOpen+0x20c>)
 80031a8:	484f      	ldr	r0, [pc, #316]	; (80032e8 <uartOpen+0x200>)
 80031aa:	f003 fa59 	bl	8006660 <HAL_UART_Receive_DMA>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <uartOpen+0xd0>
            ret = false;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
          qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	4a4d      	ldr	r2, [pc, #308]	; (80032f0 <uartOpen+0x208>)
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	4413      	add	r3, r2
 80031c0:	3308      	adds	r3, #8
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	4b4e      	ldr	r3, [pc, #312]	; (8003300 <uartOpen+0x218>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	1a8a      	subs	r2, r1, r2
 80031ce:	4948      	ldr	r1, [pc, #288]	; (80032f0 <uartOpen+0x208>)
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	440b      	add	r3, r1
 80031d4:	601a      	str	r2, [r3, #0]
          qbuffer[ch].out = qbuffer[ch].in;
 80031d6:	79fa      	ldrb	r2, [r7, #7]
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	4945      	ldr	r1, [pc, #276]	; (80032f0 <uartOpen+0x208>)
 80031dc:	0112      	lsls	r2, r2, #4
 80031de:	440a      	add	r2, r1
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	4943      	ldr	r1, [pc, #268]	; (80032f0 <uartOpen+0x208>)
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	440b      	add	r3, r1
 80031e8:	3304      	adds	r3, #4
 80031ea:	601a      	str	r2, [r3, #0]
      break;
 80031ec:	e077      	b.n	80032de <uartOpen+0x1f6>

    case _DEF_UART2:
      huart1.Instance         = USART1;
 80031ee:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <uartOpen+0x200>)
 80031f0:	4a3e      	ldr	r2, [pc, #248]	; (80032ec <uartOpen+0x204>)
 80031f2:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80031f4:	4a3c      	ldr	r2, [pc, #240]	; (80032e8 <uartOpen+0x200>)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <uartOpen+0x200>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <uartOpen+0x200>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity = UART_PARITY_NONE;
 8003206:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <uartOpen+0x200>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b36      	ldr	r3, [pc, #216]	; (80032e8 <uartOpen+0x200>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <uartOpen+0x200>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b33      	ldr	r3, [pc, #204]	; (80032e8 <uartOpen+0x200>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 800321e:	4832      	ldr	r0, [pc, #200]	; (80032e8 <uartOpen+0x200>)
 8003220:	f003 f958 	bl	80064d4 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <uartOpen+0x208>)
 800322a:	4413      	add	r3, r2
 800322c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003230:	4930      	ldr	r1, [pc, #192]	; (80032f4 <uartOpen+0x20c>)
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fda9 	bl	8001d8a <qbufferCreate>

      /* DMA controller clock enable */
      __HAL_RCC_DMA2_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <uartOpen+0x210>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	4a2d      	ldr	r2, [pc, #180]	; (80032f8 <uartOpen+0x210>)
 8003242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003246:	6313      	str	r3, [r2, #48]	; 0x30
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <uartOpen+0x210>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]

      /* DMA interrupt init */
      /* DMA2_Stream2_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 4, 0);
 8003254:	2200      	movs	r2, #0
 8003256:	2104      	movs	r1, #4
 8003258:	203a      	movs	r0, #58	; 0x3a
 800325a:	f000 fffa 	bl	8004252 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800325e:	203a      	movs	r0, #58	; 0x3a
 8003260:	f001 f813 	bl	800428a <HAL_NVIC_EnableIRQ>
      /* DMA2_Stream7_IRQn interrupt configuration */
      HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 4, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2104      	movs	r1, #4
 8003268:	2046      	movs	r0, #70	; 0x46
 800326a:	f000 fff2 	bl	8004252 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800326e:	2046      	movs	r0, #70	; 0x46
 8003270:	f001 f80b 	bl	800428a <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8003274:	481c      	ldr	r0, [pc, #112]	; (80032e8 <uartOpen+0x200>)
 8003276:	f003 f8e0 	bl	800643a <HAL_UART_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <uartOpen+0x19e>
      {
        ret = false;
 8003280:	2300      	movs	r3, #0
 8003282:	75fb      	strb	r3, [r7, #23]
        }

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      break;
 8003284:	e02a      	b.n	80032dc <uartOpen+0x1f4>
        ret = true;
 8003286:	2301      	movs	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <uartOpen+0x214>)
 800328e:	2101      	movs	r1, #1
 8003290:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8003292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003296:	4917      	ldr	r1, [pc, #92]	; (80032f4 <uartOpen+0x20c>)
 8003298:	4813      	ldr	r0, [pc, #76]	; (80032e8 <uartOpen+0x200>)
 800329a:	f003 f9e1 	bl	8006660 <HAL_UART_Receive_DMA>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <uartOpen+0x1c0>
          ret = false;
 80032a4:	2300      	movs	r3, #0
 80032a6:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR;
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <uartOpen+0x208>)
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	3308      	adds	r3, #8
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <uartOpen+0x218>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	1a8a      	subs	r2, r1, r2
 80032be:	490c      	ldr	r1, [pc, #48]	; (80032f0 <uartOpen+0x208>)
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	440b      	add	r3, r1
 80032c4:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80032c6:	79fa      	ldrb	r2, [r7, #7]
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4909      	ldr	r1, [pc, #36]	; (80032f0 <uartOpen+0x208>)
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	440a      	add	r2, r1
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	4907      	ldr	r1, [pc, #28]	; (80032f0 <uartOpen+0x208>)
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	440b      	add	r3, r1
 80032d8:	3304      	adds	r3, #4
 80032da:	601a      	str	r2, [r3, #0]
      break;
 80032dc:	bf00      	nop
  }

  return ret;
 80032de:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20001228 	.word	0x20001228
 80032ec:	40011000 	.word	0x40011000
 80032f0:	20001118 	.word	0x20001118
 80032f4:	20001128 	.word	0x20001128
 80032f8:	40023800 	.word	0x40023800
 80032fc:	20001114 	.word	0x20001114
 8003300:	200012c8 	.word	0x200012c8

08003304 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003312:	79fb      	ldrb	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <uartAvailable+0x1a>
 8003318:	2b01      	cmp	r3, #1
 800331a:	d018      	beq.n	800334e <uartAvailable+0x4a>
 800331c:	e02f      	b.n	800337e <uartAvailable+0x7a>
  {
    case _DEF_UART1:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <uartAvailable+0x84>)
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	3308      	adds	r3, #8
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <uartAvailable+0x88>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	1a8a      	subs	r2, r1, r2
 8003334:	4914      	ldr	r1, [pc, #80]	; (8003388 <uartAvailable+0x84>)
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	440b      	add	r3, r1
 800333a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4a11      	ldr	r2, [pc, #68]	; (8003388 <uartAvailable+0x84>)
 8003342:	4413      	add	r3, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fd78 	bl	8001e3a <qbufferAvailable>
 800334a:	60f8      	str	r0, [r7, #12]
      break;
 800334c:	e017      	b.n	800337e <uartAvailable+0x7a>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <uartAvailable+0x84>)
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	3308      	adds	r3, #8
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <uartAvailable+0x88>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	1a8a      	subs	r2, r1, r2
 8003364:	4908      	ldr	r1, [pc, #32]	; (8003388 <uartAvailable+0x84>)
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	440b      	add	r3, r1
 800336a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <uartAvailable+0x84>)
 8003372:	4413      	add	r3, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fd60 	bl	8001e3a <qbufferAvailable>
 800337a:	60f8      	str	r0, [r7, #12]
      break;
 800337c:	bf00      	nop
  }

  return ret;
 800337e:	68fb      	ldr	r3, [r7, #12]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20001118 	.word	0x20001118
 800338c:	200012c8 	.word	0x200012c8

08003390 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <uartRead+0x1a>
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d008      	beq.n	80033ba <uartRead+0x2a>
 80033a8:	e00f      	b.n	80033ca <uartRead+0x3a>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[_DEF_UART1], &ret, 1);
 80033aa:	f107 030f 	add.w	r3, r7, #15
 80033ae:	2201      	movs	r2, #1
 80033b0:	4619      	mov	r1, r3
 80033b2:	4808      	ldr	r0, [pc, #32]	; (80033d4 <uartRead+0x44>)
 80033b4:	f7fe fd04 	bl	8001dc0 <qbufferRead>
      break;
 80033b8:	e007      	b.n	80033ca <uartRead+0x3a>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80033ba:	f107 030f 	add.w	r3, r7, #15
 80033be:	2201      	movs	r2, #1
 80033c0:	4619      	mov	r1, r3
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <uartRead+0x48>)
 80033c4:	f7fe fcfc 	bl	8001dc0 <qbufferRead>
      break;
 80033c8:	bf00      	nop
  }

  return ret;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20001118 	.word	0x20001118
 80033d8:	20001128 	.word	0x20001128

080033dc <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;  /* DMA controller clock enable */

  switch(ch)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <uartWrite+0x1e>
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d00f      	beq.n	8003418 <uartWrite+0x3c>
 80033f8:	e020      	b.n	800343c <uartWrite+0x60>
  {
    case _DEF_UART1:
        status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	2364      	movs	r3, #100	; 0x64
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	4811      	ldr	r0, [pc, #68]	; (8003448 <uartWrite+0x6c>)
 8003404:	f003 f892 	bl	800652c <HAL_UART_Transmit>
 8003408:	4603      	mov	r3, r0
 800340a:	74fb      	strb	r3, [r7, #19]
        if (status == HAL_OK)
 800340c:	7cfb      	ldrb	r3, [r7, #19]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d111      	bne.n	8003436 <uartWrite+0x5a>
        {
          ret = length;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	617b      	str	r3, [r7, #20]
        }
      break;
 8003416:	e00e      	b.n	8003436 <uartWrite+0x5a>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	b29a      	uxth	r2, r3
 800341c:	2364      	movs	r3, #100	; 0x64
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4809      	ldr	r0, [pc, #36]	; (8003448 <uartWrite+0x6c>)
 8003422:	f003 f883 	bl	800652c <HAL_UART_Transmit>
 8003426:	4603      	mov	r3, r0
 8003428:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800342a:	7cfb      	ldrb	r3, [r7, #19]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <uartWrite+0x5e>
      {
        ret = length;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	617b      	str	r3, [r7, #20]
      }
      break;
 8003434:	e001      	b.n	800343a <uartWrite+0x5e>
      break;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <uartWrite+0x60>
      break;
 800343a:	bf00      	nop
  }

  return ret;
 800343c:	697b      	ldr	r3, [r7, #20]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20001228 	.word	0x20001228

0800344c <uartPrintf>:

  return ret;
}

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800344c:	b40e      	push	{r1, r2, r3}
 800344e:	b580      	push	{r7, lr}
 8003450:	b0c7      	sub	sp, #284	; 0x11c
 8003452:	af00      	add	r7, sp, #0
 8003454:	4602      	mov	r2, r0
 8003456:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800345a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800345e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003460:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003464:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003468:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800346c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800346e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003472:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003476:	f107 0010 	add.w	r0, r7, #16
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003484:	f005 fd42 	bl	8008f0c <vsniprintf>
 8003488:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800348c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003490:	f107 0110 	add.w	r1, r7, #16
 8003494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003498:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff9c 	bl	80033dc <uartWrite>
 80034a4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80034a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80034b2:	46bd      	mov	sp, r7
 80034b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034b8:	b003      	add	sp, #12
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
//    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);
//    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <HAL_UART_MspInit+0x18c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	f040 80b0 	bne.w	8003668 <HAL_UART_MspInit+0x184>
  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* USART1 clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_UART_MspInit+0x190>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_UART_MspInit+0x190>)
 8003512:	f043 0310 	orr.w	r3, r3, #16
 8003516:	6453      	str	r3, [r2, #68]	; 0x44
 8003518:	4b56      	ldr	r3, [pc, #344]	; (8003674 <HAL_UART_MspInit+0x190>)
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4b52      	ldr	r3, [pc, #328]	; (8003674 <HAL_UART_MspInit+0x190>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	4a51      	ldr	r2, [pc, #324]	; (8003674 <HAL_UART_MspInit+0x190>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6313      	str	r3, [r2, #48]	; 0x30
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_UART_MspInit+0x190>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_UART_MspInit+0x190>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4a4a      	ldr	r2, [pc, #296]	; (8003674 <HAL_UART_MspInit+0x190>)
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	6313      	str	r3, [r2, #48]	; 0x30
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <HAL_UART_MspInit+0x190>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	68bb      	ldr	r3, [r7, #8]
	    /**USART1 GPIO Configuration
	    PB6     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003560:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800356e:	2307      	movs	r3, #7
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	483f      	ldr	r0, [pc, #252]	; (8003678 <HAL_UART_MspInit+0x194>)
 800357a:	f001 fd87 	bl	800508c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800357e:	2340      	movs	r3, #64	; 0x40
 8003580:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003582:	2302      	movs	r3, #2
 8003584:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800358e:	2307      	movs	r3, #7
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	4838      	ldr	r0, [pc, #224]	; (800367c <HAL_UART_MspInit+0x198>)
 800359a:	f001 fd77 	bl	800508c <HAL_GPIO_Init>

	    /* USART1 DMA Init */
	    /* USART1_TX Init */
	    hdma_usart1_tx.Instance = DMA2_Stream7;
 800359e:	4b38      	ldr	r3, [pc, #224]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035a0:	4a38      	ldr	r2, [pc, #224]	; (8003684 <HAL_UART_MspInit+0x1a0>)
 80035a2:	601a      	str	r2, [r3, #0]
	    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80035a4:	4b36      	ldr	r3, [pc, #216]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035aa:	605a      	str	r2, [r3, #4]
	    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ac:	4b34      	ldr	r3, [pc, #208]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	609a      	str	r2, [r3, #8]
	    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b2:	4b33      	ldr	r3, [pc, #204]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	60da      	str	r2, [r3, #12]
	    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035be:	611a      	str	r2, [r3, #16]
	    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035c0:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	615a      	str	r2, [r3, #20]
	    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c6:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
	    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
	    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035d2:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	621a      	str	r2, [r3, #32]
	    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d8:	4b29      	ldr	r3, [pc, #164]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24
	    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035de:	4828      	ldr	r0, [pc, #160]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035e0:	f000 fe7c 	bl	80042dc <HAL_DMA_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_UART_MspInit+0x10a>
	    {
	      Error_Handler();
 80035ea:	f7fe fa53 	bl	8001a94 <Error_Handler>
	    }

	    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_UART_MspInit+0x19c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6393      	str	r3, [r2, #56]	; 0x38

	    /* USART1_RX Init */
	    hdma_usart1_rx.Instance = DMA2_Stream2;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 80035fc:	4a23      	ldr	r2, [pc, #140]	; (800368c <HAL_UART_MspInit+0x1a8>)
 80035fe:	601a      	str	r2, [r3, #0]
	    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003602:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003606:	605a      	str	r2, [r3, #4]
	    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003608:	4b1f      	ldr	r3, [pc, #124]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
	    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003610:	2200      	movs	r2, #0
 8003612:	60da      	str	r2, [r3, #12]
	    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361a:	611a      	str	r2, [r3, #16]
	    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361c:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 800361e:	2200      	movs	r2, #0
 8003620:	615a      	str	r2, [r3, #20]
	    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003624:	2200      	movs	r2, #0
 8003626:	619a      	str	r2, [r3, #24]
	    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 800362a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800362e:	61da      	str	r2, [r3, #28]
	    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
	    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003638:	2200      	movs	r2, #0
 800363a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800363c:	4812      	ldr	r0, [pc, #72]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 800363e:	f000 fe4d 	bl	80042dc <HAL_DMA_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8003648:	f7fe fa24 	bl	8001a94 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0e      	ldr	r2, [pc, #56]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003650:	635a      	str	r2, [r3, #52]	; 0x34
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <HAL_UART_MspInit+0x1a4>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2100      	movs	r1, #0
 800365c:	2025      	movs	r0, #37	; 0x25
 800365e:	f000 fdf8 	bl	8004252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003662:	2025      	movs	r0, #37	; 0x25
 8003664:	f000 fe11 	bl	800428a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40011000 	.word	0x40011000
 8003674:	40023800 	.word	0x40023800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	20001268 	.word	0x20001268
 8003684:	400264b8 	.word	0x400264b8
 8003688:	200012c8 	.word	0x200012c8
 800368c:	40026440 	.word	0x40026440

08003690 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_UART_MspDeInit+0x54>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d11b      	bne.n	80036da <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_UART_MspDeInit+0x58>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_UART_MspDeInit+0x58>)
 80036a8:	f023 0310 	bic.w	r3, r3, #16
 80036ac:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80036ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036b2:	480e      	ldr	r0, [pc, #56]	; (80036ec <HAL_UART_MspDeInit+0x5c>)
 80036b4:	f001 fe6e 	bl	8005394 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80036b8:	2140      	movs	r1, #64	; 0x40
 80036ba:	480d      	ldr	r0, [pc, #52]	; (80036f0 <HAL_UART_MspDeInit+0x60>)
 80036bc:	f001 fe6a 	bl	8005394 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 feb7 	bl	8004438 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 feb2 	bl	8004438 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80036d4:	2025      	movs	r0, #37	; 0x25
 80036d6:	f000 fde6 	bl	80042a6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40011000 	.word	0x40011000
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40020000 	.word	0x40020000
 80036f0:	40020400 	.word	0x40020400

080036f4 <ymodemInit>:




bool ymodemInit(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <ymodemInit+0x14>)
 80036fa:	4804      	ldr	r0, [pc, #16]	; (800370c <ymodemInit+0x18>)
 80036fc:	f7fe fe94 	bl	8002428 <cliAdd>
#endif

  return true;
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08003d11 	.word	0x08003d11
 800370c:	0800c000 	.word	0x0800c000

08003710 <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]

  p_modem->ch = ch;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	701a      	strb	r2, [r3, #0]
  p_modem->is_init = true;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	705a      	strb	r2, [r3, #1]

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	729a      	strb	r2, [r3, #10]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  p_modem->pre_time        = millis();
 800374e:	f7fe f918 	bl	8001982 <millis>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
  p_modem->start_time      = 3000;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800375e:	611a      	str	r2, [r3, #16]
  p_modem->ack_mode        = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	765a      	strb	r2, [r3, #25]

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  return ret;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]

  ret = uartWrite(p_modem->ch, &data, 1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	1cf9      	adds	r1, r7, #3
 8003792:	2201      	movs	r2, #1
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fe21 	bl	80033dc <uartWrite>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]

  return ret;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  bool ret = true;
 80037b8:	2301      	movs	r3, #1
 80037ba:	72fb      	strb	r3, [r7, #11]
  bool valid;
  uint16_t size_i;

  valid = false;
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<128; i++)
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e01c      	b.n	8003800 <ymodemGetFileInfo+0x50>
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	7819      	ldrb	r1, [r3, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	331a      	adds	r3, #26
 80037da:	460a      	mov	r2, r1
 80037dc:	701a      	strb	r2, [r3, #0]
    if (p_modem->file_name[i] == 0x00)
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4413      	add	r3, r2
 80037e4:	331a      	adds	r3, #26
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d106      	bne.n	80037fa <ymodemGetFileInfo+0x4a>
    {
      size_i = i + 1;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	82bb      	strh	r3, [r7, #20]
      valid = true;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
      break;
 80037f8:	e005      	b.n	8003806 <ymodemGetFileInfo+0x56>
  for (int i=0; i<128; i++)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3301      	adds	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b7f      	cmp	r3, #127	; 0x7f
 8003804:	dddf      	ble.n	80037c6 <ymodemGetFileInfo+0x16>
    }
  }

  if (valid == true)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d026      	beq.n	800385a <ymodemGetFileInfo+0xaa>
  {
    for (int i=size_i; i<128; i++)
 800380c:	8abb      	ldrh	r3, [r7, #20]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e012      	b.n	8003838 <ymodemGetFileInfo+0x88>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b20      	cmp	r3, #32
 8003820:	d107      	bne.n	8003832 <ymodemGetFileInfo+0x82>
      {
        p_modem->rx_packet.data[i] = 0x00;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
        break;
 8003830:	e005      	b.n	800383e <ymodemGetFileInfo+0x8e>
    for (int i=size_i; i<128; i++)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3301      	adds	r3, #1
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b7f      	cmp	r3, #127	; 0x7f
 800383c:	dde9      	ble.n	8003812 <ymodemGetFileInfo+0x62>
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003844:	8abb      	ldrh	r3, [r7, #20]
 8003846:	4413      	add	r3, r2
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f005 fb27 	bl	8008ea0 <strtoul>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }

  return ret;
 800385a:	7afb      	ldrb	r3, [r7, #11]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <ymodemReceive>:

  return true;
}

bool ymodemReceive(ymodem_t *p_modem)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  bool update = false;
 8003870:	2300      	movs	r3, #0
 8003872:	73bb      	strb	r3, [r7, #14]
  uint32_t buf_length;


  if (p_modem->is_init != true)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	785b      	ldrb	r3, [r3, #1]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <ymodemReceive+0x28>
  {
    p_modem->type = YMODEM_TYPE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	721a      	strb	r2, [r3, #8]
    return true;
 8003888:	2301      	movs	r3, #1
 800388a:	e130      	b.n	8003aee <ymodemReceive+0x28a>
  }

  if (uartAvailable(p_modem->ch) > 0)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fd37 	bl	8003304 <uartAvailable>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <ymodemReceive+0x4e>
  {
    p_modem->rx_data = uartRead(p_modem->ch);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fd75 	bl	8003390 <uartRead>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461a      	mov	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	725a      	strb	r2, [r3, #9]
    update = true;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73bb      	strb	r3, [r7, #14]

    //uartPrintf(_DEF_UART1, "Rx 0x%X, %d\n", p_modem->rx_data, p_modem->rx_packet.state);
  }

  if (update == true && ymodemReceivePacket(&p_modem->rx_packet, p_modem->rx_data) == true)
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8101 	beq.w	8003abc <ymodemReceive+0x258>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7a5b      	ldrb	r3, [r3, #9]
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 f916 	bl	8003af8 <ymodemReceivePacket>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80f4 	beq.w	8003abc <ymodemReceive+0x258>
  {
    //uartPrintf(_DEF_UART1, "RxPacket 0x%X\n", p_modem->rx_packet.stx);

    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7a9b      	ldrb	r3, [r3, #10]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <ymodemReceive+0x88>
    {
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80038e2:	2b18      	cmp	r3, #24
 80038e4:	d102      	bne.n	80038ec <ymodemReceive+0x88>
      {
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2205      	movs	r2, #5
 80038ea:	729a      	strb	r2, [r3, #10]
      }
    }

    switch(p_modem->state)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7a9b      	ldrb	r3, [r3, #10]
 80038f0:	2b05      	cmp	r3, #5
 80038f2:	f200 80fb 	bhi.w	8003aec <ymodemReceive+0x288>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <ymodemReceive+0x98>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003915 	.word	0x08003915
 8003900:	08003961 	.word	0x08003961
 8003904:	080039ed 	.word	0x080039ed
 8003908:	08003a69 	.word	0x08003a69
 800390c:	08003a81 	.word	0x08003a81
 8003910:	08003a9b 	.word	0x08003a9b
    {
      case YMODEM_STATE_WAIT_HEAD:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d107      	bne.n	800392e <ymodemReceive+0xca>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 800391e:	2115      	movs	r1, #21
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff2b 	bl	800377c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	729a      	strb	r2, [r3, #10]

          p_modem->state = YMODEM_STATE_WAIT_FIRST;
          p_modem->type = YMODEM_TYPE_START;
          ret = true;
        }
        break;
 800392c:	e0c2      	b.n	8003ab4 <ymodemReceive+0x250>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 80bd 	bne.w	8003ab4 <ymodemReceive+0x250>
          p_modem->file_addr = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff34 	bl	80037b0 <ymodemGetFileInfo>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	765a      	strb	r2, [r3, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_START;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	721a      	strb	r2, [r3, #8]
          ret = true;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
        break;
 800395e:	e0a9      	b.n	8003ab4 <ymodemReceive+0x250>

      case YMODEM_STATE_WAIT_FIRST:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d107      	bne.n	800397a <ymodemReceive+0x116>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 800396a:	2115      	movs	r1, #21
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff05 	bl	800377c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	729a      	strb	r2, [r3, #10]
          ymodemPutch(p_modem, YMODEM_ACK);

          p_modem->state = YMODEM_STATE_WAIT_DATA;
          p_modem->type = YMODEM_TYPE_DATA;
        }
        break;
 8003978:	e09e      	b.n	8003ab8 <ymodemReceive+0x254>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8099 	bne.w	8003ab8 <ymodemReceive+0x254>
          p_modem->file_addr = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received = 0;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d903      	bls.n	80039bc <ymodemReceive+0x158>
            buf_length = p_modem->rx_packet.length;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80039ba:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_received += buf_length;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 80039d6:	2106      	movs	r1, #6
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff fecf 	bl	800377c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	721a      	strb	r2, [r3, #8]
        break;
 80039ea:	e065      	b.n	8003ab8 <ymodemReceive+0x254>

      case YMODEM_STATE_WAIT_DATA:
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d107      	bne.n	8003a06 <ymodemReceive+0x1a2>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 80039f6:	2115      	movs	r1, #21
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff febf 	bl	800377c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2203      	movs	r2, #3
 8003a02:	729a      	strb	r2, [r3, #10]
          //ymodemPutch(p_modem, YMODEM_ACK);
          p_modem->ack_mode = YMODEM_RESP_ACK;
          p_modem->type = YMODEM_TYPE_DATA;
          ret = true;
        }
        break;
 8003a04:	e059      	b.n	8003aba <ymodemReceive+0x256>
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d903      	bls.n	8003a2c <ymodemReceive+0x1c8>
            buf_length = p_modem->rx_packet.length;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003a2a:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	441a      	add	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	441a      	add	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	765a      	strb	r2, [r3, #25]
          p_modem->type = YMODEM_TYPE_DATA;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	721a      	strb	r2, [r3, #8]
          ret = true;
 8003a62:	2301      	movs	r3, #1
 8003a64:	73fb      	strb	r3, [r7, #15]
        break;
 8003a66:	e028      	b.n	8003aba <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_LAST:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003a68:	2106      	movs	r1, #6
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fe86 	bl	800377c <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C);
 8003a70:	2143      	movs	r1, #67	; 0x43
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe82 	bl	800377c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	729a      	strb	r2, [r3, #10]
        break;
 8003a7e:	e01c      	b.n	8003aba <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_END:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003a80:	2106      	movs	r1, #6
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe7a 	bl	800377c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_END;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
        break;
 8003a98:	e00f      	b.n	8003aba <ymodemReceive+0x256>

      case YMODEM_STATE_WAIT_CANCEL:
        ymodemPutch(p_modem, YMODEM_ACK);
 8003a9a:	2106      	movs	r1, #6
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff fe6d 	bl	800377c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2203      	movs	r2, #3
 8003aac:	721a      	strb	r2, [r3, #8]
        ret = true;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ab2:	e002      	b.n	8003aba <ymodemReceive+0x256>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e019      	b.n	8003aec <ymodemReceive+0x288>
        break;
 8003ab8:	bf00      	nop
    switch(p_modem->state)
 8003aba:	e017      	b.n	8003aec <ymodemReceive+0x288>
    }
  }
  else
  {
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d112      	bne.n	8003aec <ymodemReceive+0x288>
    {
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8003ac6:	f7fd ff5c 	bl	8001982 <millis>
 8003aca:	4602      	mov	r2, r0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	1ad2      	subs	r2, r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d308      	bcc.n	8003aec <ymodemReceive+0x288>
      {
        p_modem->pre_time = millis();
 8003ada:	f7fd ff52 	bl	8001982 <millis>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60da      	str	r2, [r3, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8003ae4:	2143      	movs	r1, #67	; 0x43
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fe48 	bl	800377c <ymodemPutch>
      }
    }
  }

  return ret;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <ymodemReceivePacket>:

bool ymodemReceivePacket(ymodem_packet_t *p_packet, uint8_t data_in)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]


  switch(p_packet->state)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	f200 809b 	bhi.w	8003c48 <ymodemReceivePacket+0x150>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <ymodemReceivePacket+0x20>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b31 	.word	0x08003b31
 8003b1c:	08003b85 	.word	0x08003b85
 8003b20:	08003b93 	.word	0x08003b93
 8003b24:	08003bbd 	.word	0x08003bbd
 8003b28:	08003beb 	.word	0x08003beb
 8003b2c:	08003bff 	.word	0x08003bff
  {
    case YMODEM_PACKET_WAIT_FIRST:
      if (data_in == YMODEM_SOH)
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d108      	bne.n	8003b48 <ymodemReceivePacket+0x50>
      {
        p_packet->length = 128;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_STX)
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d109      	bne.n	8003b62 <ymodemReceivePacket+0x6a>
      {
        p_packet->length = 1024;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b54:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_EOT)
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d104      	bne.n	8003b72 <ymodemReceivePacket+0x7a>
      {
        p_packet->stx = data_in;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      if (data_in == YMODEM_CAN)
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	2b18      	cmp	r3, #24
 8003b76:	d162      	bne.n	8003c3e <ymodemReceivePacket+0x146>
      {
        p_packet->stx = data_in;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	711a      	strb	r2, [r3, #4]
        ret = true;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e05c      	b.n	8003c3e <ymodemReceivePacket+0x146>

    case YMODEM_PACKET_WAIT_SEQ1:
      p_packet->seq[0] = data_in;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	715a      	strb	r2, [r3, #5]
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
      break;
 8003b90:	e05a      	b.n	8003c48 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_SEQ2:
      p_packet->seq[1] = data_in;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	719a      	strb	r2, [r3, #6]
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	795a      	ldrb	r2, [r3, #5]
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d106      	bne.n	8003bb4 <ymodemReceivePacket+0xbc>
      {
        p_packet->index = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	805a      	strh	r2, [r3, #2]
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
      }
      break;
 8003bb2:	e049      	b.n	8003c48 <ymodemReceivePacket+0x150>
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      break;
 8003bba:	e045      	b.n	8003c48 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_DATA:
      p_packet->data[p_packet->index] = data_in;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	8852      	ldrh	r2, [r2, #2]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	701a      	strb	r2, [r3, #0]
      p_packet->index++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	885b      	ldrh	r3, [r3, #2]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	805a      	strh	r2, [r3, #2]
      if (p_packet->index >= p_packet->length)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	885a      	ldrh	r2, [r3, #2]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	899b      	ldrh	r3, [r3, #12]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d32f      	bcc.n	8003c42 <ymodemReceivePacket+0x14a>
      {
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2204      	movs	r2, #4
 8003be6:	701a      	strb	r2, [r3, #0]
      }
      break;
 8003be8:	e02b      	b.n	8003c42 <ymodemReceivePacket+0x14a>

    case YMODEM_PACKET_WAIT_CRCH:
      p_packet->crc_recv = (data_in<<8);
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	021b      	lsls	r3, r3, #8
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2205      	movs	r2, #5
 8003bfa:	701a      	strb	r2, [r3, #0]
      break;
 8003bfc:	e024      	b.n	8003c48 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_CRCL:
      p_packet->crc_recv |= (data_in<<0);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8a1a      	ldrh	r2, [r3, #16]
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]

      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	899b      	ldrh	r3, [r3, #12]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 f83a 	bl	8003c98 <crc16>
 8003c24:	4603      	mov	r3, r0
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	81da      	strh	r2, [r3, #14]

      if (p_packet->crc == p_packet->crc_recv)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	89da      	ldrh	r2, [r3, #14]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8a1b      	ldrh	r3, [r3, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d106      	bne.n	8003c46 <ymodemReceivePacket+0x14e>
      {
        ret = true;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      //uartPrintf(_DEF_UART1, "crc %X %X\n", p_packet->crc, p_packet->crc_recv);
      break;
 8003c3c:	e003      	b.n	8003c46 <ymodemReceivePacket+0x14e>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <ymodemReceivePacket+0x150>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <ymodemReceivePacket+0x150>
      break;
 8003c46:	bf00      	nop
  }

  return ret;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop

08003c54 <crc_update>:


#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	80fb      	strh	r3, [r7, #6]
  uint16_t xor = crc_in >> 15;
 8003c60:	88fb      	ldrh	r3, [r7, #6]
 8003c62:	0bdb      	lsrs	r3, r3, #15
 8003c64:	81bb      	strh	r3, [r7, #12]
  uint16_t out = crc_in << 1;
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	81fb      	strh	r3, [r7, #14]

  if (incr)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <crc_update+0x24>
  {
    out++;
 8003c72:	89fb      	ldrh	r3, [r7, #14]
 8003c74:	3301      	adds	r3, #1
 8003c76:	81fb      	strh	r3, [r7, #14]
  }

  if (xor)
 8003c78:	89bb      	ldrh	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <crc_update+0x36>
  {
    out ^= CRC_POLY;
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	81fb      	strh	r3, [r7, #14]
  }

  return out;
 8003c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <crc16>:

uint16_t crc16(uint8_t *data, uint16_t size)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	81fb      	strh	r3, [r7, #14]
 8003ca8:	e01a      	b.n	8003ce0 <crc16+0x48>
  {
    for (i = 0x80; i; i >>= 1)
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	81bb      	strh	r3, [r7, #12]
 8003cae:	e00e      	b.n	8003cce <crc16+0x36>
    {
      crc = crc_update(crc, *data & i);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	89bb      	ldrh	r3, [r7, #12]
 8003cb8:	401a      	ands	r2, r3
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ffc8 	bl	8003c54 <crc_update>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	81fb      	strh	r3, [r7, #14]
    for (i = 0x80; i; i >>= 1)
 8003cc8:	89bb      	ldrh	r3, [r7, #12]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	81bb      	strh	r3, [r7, #12]
 8003cce:	89bb      	ldrh	r3, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ed      	bne.n	8003cb0 <crc16+0x18>
  for (crc = 0; size > 0; size--, data++)
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	807b      	strh	r3, [r7, #2]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e1      	bne.n	8003caa <crc16+0x12>
    }
  }

  for (i = 0; i < 16; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	81bb      	strh	r3, [r7, #12]
 8003cea:	e009      	b.n	8003d00 <crc16+0x68>
  {
    crc = crc_update(crc, 0);
 8003cec:	89fb      	ldrh	r3, [r7, #14]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ffaf 	bl	8003c54 <crc_update>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < 16; i++)
 8003cfa:	89bb      	ldrh	r3, [r7, #12]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	81bb      	strh	r3, [r7, #12]
 8003d00:	89bb      	ldrh	r3, [r7, #12]
 8003d02:	2b0f      	cmp	r3, #15
 8003d04:	d9f2      	bls.n	8003cec <crc16+0x54>
  }

  return crc;
 8003d06:	89fb      	ldrh	r3, [r7, #14]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <cliYmodem>:


#ifdef _USE_HW_CLI
void cliYmodem(cli_args_t *args)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d1c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d20:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  ymodem_t ymodem;
  bool keep_loop;
  uint8_t log_ch = _DEF_UART2;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 34d5 	strb.w	r3, [r7, #1237]	; 0x4d5


  if (args->argc == 1 && args->isStr(0, "down"))
 8003d2e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d32:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f040 808a 	bne.w	8003e54 <cliYmodem+0x144>
 8003d40:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d44:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4949      	ldr	r1, [pc, #292]	; (8003e74 <cliYmodem+0x164>)
 8003d4e:	2000      	movs	r0, #0
 8003d50:	4798      	blx	r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d07d      	beq.n	8003e54 <cliYmodem+0x144>
  {
    ymodemOpen(&ymodem, _DEF_UART1);
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fcd6 	bl	8003710 <ymodemOpen>

    keep_loop = true;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6

    while(keep_loop)
 8003d6a:	bf00      	nop
 8003d6c:	e06b      	b.n	8003e46 <cliYmodem+0x136>
    {
      if (ymodemReceive(&ymodem) == true)
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fd76 	bl	8003864 <ymodemReceive>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d062      	beq.n	8003e44 <cliYmodem+0x134>
      {
        switch(ymodem.type)
 8003d7e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003d82:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003d86:	7a1b      	ldrb	r3, [r3, #8]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d85c      	bhi.n	8003e46 <cliYmodem+0x136>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <cliYmodem+0x84>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da9 	.word	0x08003da9
 8003d98:	08003dcb 	.word	0x08003dcb
 8003d9c:	08003e09 	.word	0x08003e09
 8003da0:	08003e1d 	.word	0x08003e1d
 8003da4:	08003e31 	.word	0x08003e31
        {
          case YMODEM_TYPE_START:
            uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\n", ymodem.file_name, ymodem.file_length);
 8003da8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dac:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003db0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	f103 021a 	add.w	r2, r3, #26
 8003dbc:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	492d      	ldr	r1, [pc, #180]	; (8003e78 <cliYmodem+0x168>)
 8003dc4:	f7ff fb42 	bl	800344c <uartPrintf>
            break;
 8003dc8:	e03d      	b.n	8003e46 <cliYmodem+0x136>

          case YMODEM_TYPE_DATA:
            uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8003dca:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dce:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003dd2:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003ddc:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003de0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003de4:	2264      	movs	r2, #100	; 0x64
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003dee:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8003df2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	f897 04d5 	ldrb.w	r0, [r7, #1237]	; 0x4d5
 8003dfe:	460a      	mov	r2, r1
 8003e00:	491e      	ldr	r1, [pc, #120]	; (8003e7c <cliYmodem+0x16c>)
 8003e02:	f7ff fb23 	bl	800344c <uartPrintf>
            break;
 8003e06:	e01e      	b.n	8003e46 <cliYmodem+0x136>

          case YMODEM_TYPE_END:
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8003e08:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e0c:	491c      	ldr	r1, [pc, #112]	; (8003e80 <cliYmodem+0x170>)
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fb1c 	bl	800344c <uartPrintf>
            keep_loop = false;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e1a:	e014      	b.n	8003e46 <cliYmodem+0x136>

          case YMODEM_TYPE_CANCEL:
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8003e1c:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e20:	4918      	ldr	r1, [pc, #96]	; (8003e84 <cliYmodem+0x174>)
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fb12 	bl	800344c <uartPrintf>
            keep_loop = false;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e2e:	e00a      	b.n	8003e46 <cliYmodem+0x136>

          case YMODEM_TYPE_ERROR:
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8003e30:	f897 34d5 	ldrb.w	r3, [r7, #1237]	; 0x4d5
 8003e34:	4914      	ldr	r1, [pc, #80]	; (8003e88 <cliYmodem+0x178>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fb08 	bl	800344c <uartPrintf>
            keep_loop = false;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 34d6 	strb.w	r3, [r7, #1238]	; 0x4d6
            break;
 8003e42:	e000      	b.n	8003e46 <cliYmodem+0x136>
        }
      }
 8003e44:	bf00      	nop
    while(keep_loop)
 8003e46:	f897 34d6 	ldrb.w	r3, [r7, #1238]	; 0x4d6
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d18f      	bne.n	8003d6e <cliYmodem+0x5e>
    }
    ret = true;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
  }


  if (ret != true)
 8003e54:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8003e58:	f083 0301 	eor.w	r3, r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <cliYmodem+0x158>
  {
    cliPrintf("ymodem down\n");
 8003e62:	480a      	ldr	r0, [pc, #40]	; (8003e8c <cliYmodem+0x17c>)
 8003e64:	f7fe f9d0 	bl	8002208 <cliPrintf>
  }
}
 8003e68:	bf00      	nop
 8003e6a:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	0800c008 	.word	0x0800c008
 8003e78:	0800c010 	.word	0x0800c010
 8003e7c:	0800c02c 	.word	0x0800c02c
 8003e80:	0800c048 	.word	0x0800c048
 8003e84:	0800c05c 	.word	0x0800c05c
 8003e88:	0800c074 	.word	0x0800c074
 8003e8c:	0800c088 	.word	0x0800c088

08003e90 <hwInit>:
    };



void hwInit(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  bspInit();
 8003e94:	f7fd fd18 	bl	80018c8 <bspInit>

  DWT_Delay_Init();
 8003e98:	f7fd ffe8 	bl	8001e6c <DWT_Delay_Init>

  rtcInit();
 8003e9c:	f7ff f898 	bl	8002fd0 <rtcInit>
  resetInit();
 8003ea0:	f7ff f85e 	bl	8002f60 <resetInit>
  cliInit();
 8003ea4:	f7fe f94a 	bl	800213c <cliInit>
  ledInit();
 8003ea8:	f7fe ff60 	bl	8002d6c <ledInit>
  uartInit();
 8003eac:	f7ff f902 	bl	80030b4 <uartInit>
  buttonInit();
 8003eb0:	f7fe f834 	bl	8001f1c <buttonInit>
  flashInit();
 8003eb4:	f7fe fd88 	bl	80029c8 <flashInit>
  ymodemInit();
 8003eb8:	f7ff fc1c 	bl	80036f4 <ymodemInit>
}
 8003ebc:	bf00      	nop
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_Init+0x40>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_Init+0x40>)
 8003eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ed0:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_Init+0x40>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <HAL_Init+0x40>)
 8003ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_Init+0x40>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_Init+0x40>)
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f000 f9a7 	bl	800423c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f000 f83c 	bl	8003f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ef4:	f7fd fdd4 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40023c00 	.word	0x40023c00

08003f04 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <HAL_DeInit+0x54>)
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_DeInit+0x54>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <HAL_DeInit+0x54>)
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_DeInit+0x54>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_DeInit+0x54>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_DeInit+0x54>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_DeInit+0x54>)
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_DeInit+0x54>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <HAL_DeInit+0x54>)
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_DeInit+0x54>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8003f4e:	f000 f805 	bl	8003f5c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40023800 	.word	0x40023800

08003f5c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8003f60:	bf00      	nop
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_InitTick+0x54>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_InitTick+0x58>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f999 	bl	80042c2 <HAL_SYSTICK_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00e      	b.n	8003fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	d80a      	bhi.n	8003fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	f000 f953 	bl	8004252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <HAL_InitTick+0x5c>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000000c 	.word	0x2000000c
 8003fc4:	20000274 	.word	0x20000274
 8003fc8:	20000270 	.word	0x20000270

08003fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_IncTick+0x20>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_IncTick+0x24>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	4a04      	ldr	r2, [pc, #16]	; (8003ff0 <HAL_IncTick+0x24>)
 8003fde:	6013      	str	r3, [r2, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000274 	.word	0x20000274
 8003ff0:	20001328 	.word	0x20001328

08003ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_GetTick+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20001328 	.word	0x20001328

0800400c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7ff ffee 	bl	8003ff4 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d005      	beq.n	8004032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004026:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <HAL_Delay+0x44>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004032:	bf00      	nop
 8004034:	f7ff ffde 	bl	8003ff4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d8f7      	bhi.n	8004034 <HAL_Delay+0x28>
  {
  }
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000274 	.word	0x20000274

08004054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <__NVIC_SetPriorityGrouping+0x44>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004070:	4013      	ands	r3, r2
 8004072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800407c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004086:	4a04      	ldr	r2, [pc, #16]	; (8004098 <__NVIC_SetPriorityGrouping+0x44>)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	60d3      	str	r3, [r2, #12]
}
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040a0:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <__NVIC_GetPriorityGrouping+0x18>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	f003 0307 	and.w	r3, r3, #7
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	db0b      	blt.n	80040e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ca:	79fb      	ldrb	r3, [r7, #7]
 80040cc:	f003 021f 	and.w	r2, r3, #31
 80040d0:	4907      	ldr	r1, [pc, #28]	; (80040f0 <__NVIC_EnableIRQ+0x38>)
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d6:	095b      	lsrs	r3, r3, #5
 80040d8:	2001      	movs	r0, #1
 80040da:	fa00 f202 	lsl.w	r2, r0, r2
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e100 	.word	0xe000e100

080040f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db12      	blt.n	800412c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	490a      	ldr	r1, [pc, #40]	; (8004138 <__NVIC_DisableIRQ+0x44>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	3320      	adds	r3, #32
 800411c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004120:	f3bf 8f4f 	dsb	sy
}
 8004124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004126:	f3bf 8f6f 	isb	sy
}
 800412a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100

0800413c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	2b00      	cmp	r3, #0
 800414e:	db0a      	blt.n	8004166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2da      	uxtb	r2, r3
 8004154:	490c      	ldr	r1, [pc, #48]	; (8004188 <__NVIC_SetPriority+0x4c>)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	0112      	lsls	r2, r2, #4
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	440b      	add	r3, r1
 8004160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004164:	e00a      	b.n	800417c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4908      	ldr	r1, [pc, #32]	; (800418c <__NVIC_SetPriority+0x50>)
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	3b04      	subs	r3, #4
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	440b      	add	r3, r1
 800417a:	761a      	strb	r2, [r3, #24]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000e100 	.word	0xe000e100
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f1c3 0307 	rsb	r3, r3, #7
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf28      	it	cs
 80041ae:	2304      	movcs	r3, #4
 80041b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d902      	bls.n	80041c0 <NVIC_EncodePriority+0x30>
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3b03      	subs	r3, #3
 80041be:	e000      	b.n	80041c2 <NVIC_EncodePriority+0x32>
 80041c0:	2300      	movs	r3, #0
 80041c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041c4:	f04f 32ff 	mov.w	r2, #4294967295
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	401a      	ands	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041d8:	f04f 31ff 	mov.w	r1, #4294967295
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e8:	4313      	orrs	r3, r2
         );
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3724      	adds	r7, #36	; 0x24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3b01      	subs	r3, #1
 8004204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004208:	d301      	bcc.n	800420e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800420a:	2301      	movs	r3, #1
 800420c:	e00f      	b.n	800422e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800420e:	4a0a      	ldr	r2, [pc, #40]	; (8004238 <SysTick_Config+0x40>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004216:	210f      	movs	r1, #15
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f7ff ff8e 	bl	800413c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <SysTick_Config+0x40>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SysTick_Config+0x40>)
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff05 	bl	8004054 <__NVIC_SetPriorityGrouping>
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	4603      	mov	r3, r0
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004264:	f7ff ff1a 	bl	800409c <__NVIC_GetPriorityGrouping>
 8004268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ff8e 	bl	8004190 <NVIC_EncodePriority>
 8004274:	4602      	mov	r2, r0
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff ff5d 	bl	800413c <__NVIC_SetPriority>
}
 8004282:	bf00      	nop
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	4603      	mov	r3, r0
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff0d 	bl	80040b8 <__NVIC_EnableIRQ>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	4603      	mov	r3, r0
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff1d 	bl	80040f4 <__NVIC_DisableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b082      	sub	sp, #8
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff94 	bl	80041f8 <SysTick_Config>
 80042d0:	4603      	mov	r3, r0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042e8:	f7ff fe84 	bl	8003ff4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e099      	b.n	800442c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004318:	e00f      	b.n	800433a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800431a:	f7ff fe6b 	bl	8003ff4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b05      	cmp	r3, #5
 8004326:	d908      	bls.n	800433a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2203      	movs	r2, #3
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e078      	b.n	800442c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e8      	bne.n	800431a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4b38      	ldr	r3, [pc, #224]	; (8004434 <HAL_DMA_Init+0x158>)
 8004354:	4013      	ands	r3, r2
 8004356:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004366:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b04      	cmp	r3, #4
 8004392:	d107      	bne.n	80043a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	4313      	orrs	r3, r2
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0307 	bic.w	r3, r3, #7
 80043ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d117      	bne.n	80043fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 faef 	bl	80049c4 <DMA_CheckFifoParam>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2240      	movs	r2, #64	; 0x40
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043fa:	2301      	movs	r3, #1
 80043fc:	e016      	b.n	800442c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 faa6 	bl	8004958 <DMA_CalcBaseAndBitshift>
 800440c:	4603      	mov	r3, r0
 800440e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	223f      	movs	r2, #63	; 0x3f
 8004416:	409a      	lsls	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	f010803f 	.word	0xf010803f

08004438 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e050      	b.n	80044ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d101      	bne.n	800445a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e048      	b.n	80044ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2200      	movs	r2, #0
 8004488:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2221      	movs	r2, #33	; 0x21
 8004498:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa5c 	bl	8004958 <DMA_CalcBaseAndBitshift>
 80044a0:	4603      	mov	r3, r0
 80044a2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	223f      	movs	r2, #63	; 0x3f
 80044ce:	409a      	lsls	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_DMA_Start_IT+0x26>
 8004516:	2302      	movs	r3, #2
 8004518:	e040      	b.n	800459c <HAL_DMA_Start_IT+0xa8>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d12f      	bne.n	800458e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2202      	movs	r2, #2
 8004532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9da 	bl	80048fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	223f      	movs	r2, #63	; 0x3f
 800454e:	409a      	lsls	r2, r3
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0216 	orr.w	r2, r2, #22
 8004562:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e005      	b.n	800459a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d004      	beq.n	80045c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2280      	movs	r2, #128	; 0x80
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e00c      	b.n	80045dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2205      	movs	r2, #5
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045f4:	4b8e      	ldr	r3, [pc, #568]	; (8004830 <HAL_DMA_IRQHandler+0x248>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a8e      	ldr	r2, [pc, #568]	; (8004834 <HAL_DMA_IRQHandler+0x24c>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a9b      	lsrs	r3, r3, #10
 8004600:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	2208      	movs	r2, #8
 8004614:	409a      	lsls	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01a      	beq.n	8004654 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0204 	bic.w	r2, r2, #4
 800463a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	2208      	movs	r2, #8
 8004642:	409a      	lsls	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f043 0201 	orr.w	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004658:	2201      	movs	r2, #1
 800465a:	409a      	lsls	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	2201      	movs	r2, #1
 8004678:	409a      	lsls	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f043 0202 	orr.w	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	2204      	movs	r2, #4
 8004690:	409a      	lsls	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ac:	2204      	movs	r2, #4
 80046ae:	409a      	lsls	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	f043 0204 	orr.w	r2, r3, #4
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c4:	2210      	movs	r2, #16
 80046c6:	409a      	lsls	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d043      	beq.n	8004758 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d03c      	beq.n	8004758 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	2210      	movs	r2, #16
 80046e4:	409a      	lsls	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d024      	beq.n	8004758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
 8004716:	e01f      	b.n	8004758 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
 8004728:	e016      	b.n	8004758 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0208 	bic.w	r2, r2, #8
 8004746:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	2220      	movs	r2, #32
 800475e:	409a      	lsls	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4013      	ands	r3, r2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 808f 	beq.w	8004888 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8087 	beq.w	8004888 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477e:	2220      	movs	r2, #32
 8004780:	409a      	lsls	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b05      	cmp	r3, #5
 8004790:	d136      	bne.n	8004800 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0216 	bic.w	r2, r2, #22
 80047a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_DMA_IRQHandler+0x1da>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0208 	bic.w	r2, r2, #8
 80047d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	223f      	movs	r2, #63	; 0x3f
 80047d8:	409a      	lsls	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d07e      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
        }
        return;
 80047fe:	e079      	b.n	80048f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10d      	bne.n	8004838 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	2b00      	cmp	r3, #0
 8004822:	d031      	beq.n	8004888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
 800482c:	e02c      	b.n	8004888 <HAL_DMA_IRQHandler+0x2a0>
 800482e:	bf00      	nop
 8004830:	2000000c 	.word	0x2000000c
 8004834:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d023      	beq.n	8004888 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
 8004848:	e01e      	b.n	8004888 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10f      	bne.n	8004878 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0210 	bic.w	r2, r2, #16
 8004866:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	2b00      	cmp	r3, #0
 800488e:	d032      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d022      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2205      	movs	r2, #5
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d307      	bcc.n	80048d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f2      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x2cc>
 80048ce:	e000      	b.n	80048d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048d0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d005      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
 80048f2:	e000      	b.n	80048f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048f4:	bf00      	nop
    }
  }
}
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004918:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d108      	bne.n	800493c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800493a:	e007      	b.n	800494c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	3b10      	subs	r3, #16
 8004968:	4a14      	ldr	r2, [pc, #80]	; (80049bc <DMA_CalcBaseAndBitshift+0x64>)
 800496a:	fba2 2303 	umull	r2, r3, r2, r3
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004972:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b03      	cmp	r3, #3
 8004984:	d909      	bls.n	800499a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	1d1a      	adds	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	659a      	str	r2, [r3, #88]	; 0x58
 8004998:	e007      	b.n	80049aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	aaaaaaab 	.word	0xaaaaaaab
 80049c0:	0800c0b0 	.word	0x0800c0b0

080049c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11f      	bne.n	8004a1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d856      	bhi.n	8004a92 <DMA_CheckFifoParam+0xce>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <DMA_CheckFifoParam+0x28>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a0f 	.word	0x08004a0f
 80049f4:	080049fd 	.word	0x080049fd
 80049f8:	08004a93 	.word	0x08004a93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d046      	beq.n	8004a96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0c:	e043      	b.n	8004a96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a16:	d140      	bne.n	8004a9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1c:	e03d      	b.n	8004a9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a26:	d121      	bne.n	8004a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d837      	bhi.n	8004a9e <DMA_CheckFifoParam+0xda>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <DMA_CheckFifoParam+0x70>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a4b 	.word	0x08004a4b
 8004a3c:	08004a45 	.word	0x08004a45
 8004a40:	08004a5d 	.word	0x08004a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e030      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d025      	beq.n	8004aa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5a:	e022      	b.n	8004aa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a64:	d11f      	bne.n	8004aa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a6a:	e01c      	b.n	8004aa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d903      	bls.n	8004a7a <DMA_CheckFifoParam+0xb6>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d003      	beq.n	8004a80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a78:	e018      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7e:	e015      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00e      	beq.n	8004aaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a90:	e00b      	b.n	8004aaa <DMA_CheckFifoParam+0xe6>
      break;
 8004a92:	bf00      	nop
 8004a94:	e00a      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;
 8004a96:	bf00      	nop
 8004a98:	e008      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e006      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e004      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;   
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <DMA_CheckFifoParam+0xe8>
      break;
 8004aaa:	bf00      	nop
    }
  } 
  
  return status; 
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop

08004abc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ace:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <HAL_FLASH_Program+0xa0>)
 8004ad0:	7e1b      	ldrb	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_FLASH_Program+0x1e>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e03b      	b.n	8004b52 <HAL_FLASH_Program+0x96>
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_FLASH_Program+0xa0>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ae4:	f000 f870 	bl	8004bc8 <FLASH_WaitForLastOperation>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d12b      	bne.n	8004b4a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004af8:	783b      	ldrb	r3, [r7, #0]
 8004afa:	4619      	mov	r1, r3
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f000 f91b 	bl	8004d38 <FLASH_Program_Byte>
 8004b02:	e016      	b.n	8004b32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d105      	bne.n	8004b16 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004b0a:	883b      	ldrh	r3, [r7, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	68b8      	ldr	r0, [r7, #8]
 8004b10:	f000 f8ee 	bl	8004cf0 <FLASH_Program_HalfWord>
 8004b14:	e00d      	b.n	8004b32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d105      	bne.n	8004b28 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68b8      	ldr	r0, [r7, #8]
 8004b22:	f000 f8c3 	bl	8004cac <FLASH_Program_Word>
 8004b26:	e004      	b.n	8004b32 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	f000 f88b 	bl	8004c48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004b32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b36:	f000 f847 	bl	8004bc8 <FLASH_WaitForLastOperation>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <HAL_FLASH_Program+0xa4>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <HAL_FLASH_Program+0xa4>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b4a:	4b04      	ldr	r3, [pc, #16]	; (8004b5c <HAL_FLASH_Program+0xa0>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	2000132c 	.word	0x2000132c
 8004b60:	40023c00 	.word	0x40023c00

08004b64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_FLASH_Unlock+0x38>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da0b      	bge.n	8004b8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b76:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <HAL_FLASH_Unlock+0x38>)
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <HAL_FLASH_Unlock+0x3c>)
 8004b7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_FLASH_Unlock+0x38>)
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_FLASH_Unlock+0x40>)
 8004b80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_FLASH_Unlock+0x38>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da01      	bge.n	8004b8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40023c00 	.word	0x40023c00
 8004ba0:	45670123 	.word	0x45670123
 8004ba4:	cdef89ab 	.word	0xcdef89ab

08004ba8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_FLASH_Lock+0x1c>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <HAL_FLASH_Lock+0x1c>)
 8004bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bb6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40023c00 	.word	0x40023c00

08004bc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <FLASH_WaitForLastOperation+0x78>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004bda:	f7ff fa0b 	bl	8003ff4 <HAL_GetTick>
 8004bde:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004be0:	e010      	b.n	8004c04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d00c      	beq.n	8004c04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <FLASH_WaitForLastOperation+0x38>
 8004bf0:	f7ff fa00 	bl	8003ff4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d201      	bcs.n	8004c04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e019      	b.n	8004c38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <FLASH_WaitForLastOperation+0x7c>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e8      	bne.n	8004be2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <FLASH_WaitForLastOperation+0x7c>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <FLASH_WaitForLastOperation+0x7c>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <FLASH_WaitForLastOperation+0x7c>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c2e:	f000 f8a5 	bl	8004d7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
  
}  
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	2000132c 	.word	0x2000132c
 8004c44:	40023c00 	.word	0x40023c00

08004c48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004c54:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a10      	ldr	r2, [pc, #64]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <FLASH_Program_DoubleWord+0x60>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004c7e:	f3bf 8f6f 	isb	sy
}
 8004c82:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	000a      	movs	r2, r1
 8004c92:	2300      	movs	r3, #0
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	3104      	adds	r1, #4
 8004c98:	4613      	mov	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40023c00 	.word	0x40023c00

08004cac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	4a0c      	ldr	r2, [pc, #48]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a06      	ldr	r2, [pc, #24]	; (8004cec <FLASH_Program_Word+0x40>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	601a      	str	r2, [r3, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40023c00 	.word	0x40023c00

08004cf0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d14:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4a06      	ldr	r2, [pc, #24]	; (8004d34 <FLASH_Program_HalfWord+0x44>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	887a      	ldrh	r2, [r7, #2]
 8004d24:	801a      	strh	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40023c00 	.word	0x40023c00

08004d38 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	4a0b      	ldr	r2, [pc, #44]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <FLASH_Program_Byte+0x40>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	701a      	strb	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40023c00 	.word	0x40023c00

08004d7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004d80:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f043 0310 	orr.w	r3, r3, #16
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004d96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004d98:	4b29      	ldr	r3, [pc, #164]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004d9e:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004daa:	4b26      	ldr	r3, [pc, #152]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f043 0308 	orr.w	r3, r3, #8
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004db4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004db8:	2220      	movs	r2, #32
 8004dba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f043 0304 	orr.w	r3, r3, #4
 8004dd0:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004dd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004dda:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f043 0302 	orr.w	r3, r3, #2
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004df0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004df8:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004e0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e16:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	4a05      	ldr	r2, [pc, #20]	; (8004e44 <FLASH_SetErrorCode+0xc8>)
 8004e2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <FLASH_SetErrorCode+0xc4>)
 8004e32:	2202      	movs	r2, #2
 8004e34:	60da      	str	r2, [r3, #12]
  }
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40023c00 	.word	0x40023c00
 8004e44:	2000132c 	.word	0x2000132c

08004e48 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004e5a:	4b31      	ldr	r3, [pc, #196]	; (8004f20 <HAL_FLASHEx_Erase+0xd8>)
 8004e5c:	7e1b      	ldrb	r3, [r3, #24]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_FLASHEx_Erase+0x1e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e058      	b.n	8004f18 <HAL_FLASHEx_Erase+0xd0>
 8004e66:	4b2e      	ldr	r3, [pc, #184]	; (8004f20 <HAL_FLASHEx_Erase+0xd8>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004e6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e70:	f7ff feaa 	bl	8004bc8 <FLASH_WaitForLastOperation>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d148      	bne.n	8004f10 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d115      	bne.n	8004eba <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f000 f844 	bl	8004f28 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ea0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ea4:	f7ff fe90 	bl	8004bc8 <FLASH_WaitForLastOperation>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004eac:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_FLASHEx_Erase+0xdc>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_FLASHEx_Erase+0xdc>)
 8004eb2:	f023 0304 	bic.w	r3, r3, #4
 8004eb6:	6113      	str	r3, [r2, #16]
 8004eb8:	e028      	b.n	8004f0c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	e01c      	b.n	8004efc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68b8      	ldr	r0, [r7, #8]
 8004ecc:	f000 f850 	bl	8004f70 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ed0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ed4:	f7ff fe78 	bl	8004bc8 <FLASH_WaitForLastOperation>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <HAL_FLASHEx_Erase+0xdc>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <HAL_FLASHEx_Erase+0xdc>)
 8004ee2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004ee6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	601a      	str	r2, [r3, #0]
          break;
 8004ef4:	e00a      	b.n	8004f0c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3da      	bcc.n	8004ec2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8004f0c:	f000 f878 	bl	8005000 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_FLASHEx_Erase+0xd8>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	761a      	strb	r2, [r3, #24]

  return status;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2000132c 	.word	0x2000132c
 8004f24:	40023c00 	.word	0x40023c00

08004f28 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	6039      	str	r1, [r7, #0]
 8004f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	4a09      	ldr	r2, [pc, #36]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	79fb      	ldrb	r3, [r7, #7]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4313      	orrs	r3, r2
 8004f56:	4a05      	ldr	r2, [pc, #20]	; (8004f6c <FLASH_MassErase+0x44>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f5c:	6113      	str	r3, [r2, #16]
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023c00 	.word	0x40023c00

08004f70 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e010      	b.n	8004fae <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d103      	bne.n	8004f9a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e009      	b.n	8004fae <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d103      	bne.n	8004fa8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e002      	b.n	8004fae <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004fa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	490f      	ldr	r1, [pc, #60]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fcc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	4a07      	ldr	r2, [pc, #28]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <FLASH_Erase_Sector+0x8c>)
 8004fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fee:	6113      	str	r3, [r2, #16]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40023c00 	.word	0x40023c00

08005000 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500c:	2b00      	cmp	r3, #0
 800500e:	d017      	beq.n	8005040 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1c      	ldr	r2, [pc, #112]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005016:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800501a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <FLASH_FlushCaches+0x88>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a19      	ldr	r2, [pc, #100]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005022:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	4b17      	ldr	r3, [pc, #92]	; (8005088 <FLASH_FlushCaches+0x88>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <FLASH_FlushCaches+0x88>)
 800502e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005032:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005034:	4b14      	ldr	r3, [pc, #80]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a13      	ldr	r2, [pc, #76]	; (8005088 <FLASH_FlushCaches+0x88>)
 800503a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800503e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800504c:	4b0e      	ldr	r3, [pc, #56]	; (8005088 <FLASH_FlushCaches+0x88>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005056:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005058:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <FLASH_FlushCaches+0x88>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <FLASH_FlushCaches+0x88>)
 800505e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4b08      	ldr	r3, [pc, #32]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a07      	ldr	r2, [pc, #28]	; (8005088 <FLASH_FlushCaches+0x88>)
 800506a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800506e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a04      	ldr	r2, [pc, #16]	; (8005088 <FLASH_FlushCaches+0x88>)
 8005076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800507a:	6013      	str	r3, [r2, #0]
  }
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40023c00 	.word	0x40023c00

0800508c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800508c:	b480      	push	{r7}
 800508e:	b089      	sub	sp, #36	; 0x24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e159      	b.n	800535c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050a8:	2201      	movs	r2, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	f040 8148 	bne.w	8005356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d00b      	beq.n	80050e6 <HAL_GPIO_Init+0x5a>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d007      	beq.n	80050e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050da:	2b11      	cmp	r3, #17
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b12      	cmp	r3, #18
 80050e4:	d130      	bne.n	8005148 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 0201 	and.w	r2, r3, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	2203      	movs	r2, #3
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0xfc>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b12      	cmp	r3, #18
 8005186:	d123      	bne.n	80051d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	08da      	lsrs	r2, r3, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3208      	adds	r2, #8
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	220f      	movs	r2, #15
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4313      	orrs	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	08da      	lsrs	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3208      	adds	r2, #8
 80051ca:	69b9      	ldr	r1, [r7, #24]
 80051cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	2203      	movs	r2, #3
 80051dc:	fa02 f303 	lsl.w	r3, r2, r3
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 0203 	and.w	r2, r3, #3
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a2 	beq.w	8005356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4b57      	ldr	r3, [pc, #348]	; (8005374 <HAL_GPIO_Init+0x2e8>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	4a56      	ldr	r2, [pc, #344]	; (8005374 <HAL_GPIO_Init+0x2e8>)
 800521c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005220:	6453      	str	r3, [r2, #68]	; 0x44
 8005222:	4b54      	ldr	r3, [pc, #336]	; (8005374 <HAL_GPIO_Init+0x2e8>)
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800522e:	4a52      	ldr	r2, [pc, #328]	; (8005378 <HAL_GPIO_Init+0x2ec>)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	3302      	adds	r3, #2
 8005236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	220f      	movs	r2, #15
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a49      	ldr	r2, [pc, #292]	; (800537c <HAL_GPIO_Init+0x2f0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d019      	beq.n	800528e <HAL_GPIO_Init+0x202>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a48      	ldr	r2, [pc, #288]	; (8005380 <HAL_GPIO_Init+0x2f4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <HAL_GPIO_Init+0x1fe>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a47      	ldr	r2, [pc, #284]	; (8005384 <HAL_GPIO_Init+0x2f8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00d      	beq.n	8005286 <HAL_GPIO_Init+0x1fa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a46      	ldr	r2, [pc, #280]	; (8005388 <HAL_GPIO_Init+0x2fc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <HAL_GPIO_Init+0x1f6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a45      	ldr	r2, [pc, #276]	; (800538c <HAL_GPIO_Init+0x300>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <HAL_GPIO_Init+0x1f2>
 800527a:	2304      	movs	r3, #4
 800527c:	e008      	b.n	8005290 <HAL_GPIO_Init+0x204>
 800527e:	2307      	movs	r3, #7
 8005280:	e006      	b.n	8005290 <HAL_GPIO_Init+0x204>
 8005282:	2303      	movs	r3, #3
 8005284:	e004      	b.n	8005290 <HAL_GPIO_Init+0x204>
 8005286:	2302      	movs	r3, #2
 8005288:	e002      	b.n	8005290 <HAL_GPIO_Init+0x204>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <HAL_GPIO_Init+0x204>
 800528e:	2300      	movs	r3, #0
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	f002 0203 	and.w	r2, r2, #3
 8005296:	0092      	lsls	r2, r2, #2
 8005298:	4093      	lsls	r3, r2
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a0:	4935      	ldr	r1, [pc, #212]	; (8005378 <HAL_GPIO_Init+0x2ec>)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	3302      	adds	r3, #2
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ae:	4b38      	ldr	r3, [pc, #224]	; (8005390 <HAL_GPIO_Init+0x304>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052d2:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <HAL_GPIO_Init+0x304>)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052d8:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <HAL_GPIO_Init+0x304>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052fc:	4a24      	ldr	r2, [pc, #144]	; (8005390 <HAL_GPIO_Init+0x304>)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005302:	4b23      	ldr	r3, [pc, #140]	; (8005390 <HAL_GPIO_Init+0x304>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005326:	4a1a      	ldr	r2, [pc, #104]	; (8005390 <HAL_GPIO_Init+0x304>)
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_GPIO_Init+0x304>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	43db      	mvns	r3, r3
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005350:	4a0f      	ldr	r2, [pc, #60]	; (8005390 <HAL_GPIO_Init+0x304>)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3301      	adds	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b0f      	cmp	r3, #15
 8005360:	f67f aea2 	bls.w	80050a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	40013800 	.word	0x40013800
 800537c:	40020000 	.word	0x40020000
 8005380:	40020400 	.word	0x40020400
 8005384:	40020800 	.word	0x40020800
 8005388:	40020c00 	.word	0x40020c00
 800538c:	40021000 	.word	0x40021000
 8005390:	40013c00 	.word	0x40013c00

08005394 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e0bb      	b.n	8005528 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053b0:	2201      	movs	r2, #1
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4013      	ands	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f040 80ab 	bne.w	8005522 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80053cc:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_GPIO_DeInit+0x1ac>)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	089b      	lsrs	r3, r3, #2
 80053d2:	3302      	adds	r3, #2
 80053d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	220f      	movs	r2, #15
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	4013      	ands	r3, r2
 80053ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a54      	ldr	r2, [pc, #336]	; (8005544 <HAL_GPIO_DeInit+0x1b0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d019      	beq.n	800542a <HAL_GPIO_DeInit+0x96>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a53      	ldr	r2, [pc, #332]	; (8005548 <HAL_GPIO_DeInit+0x1b4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_GPIO_DeInit+0x92>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a52      	ldr	r2, [pc, #328]	; (800554c <HAL_GPIO_DeInit+0x1b8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00d      	beq.n	8005422 <HAL_GPIO_DeInit+0x8e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a51      	ldr	r2, [pc, #324]	; (8005550 <HAL_GPIO_DeInit+0x1bc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <HAL_GPIO_DeInit+0x8a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a50      	ldr	r2, [pc, #320]	; (8005554 <HAL_GPIO_DeInit+0x1c0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_GPIO_DeInit+0x86>
 8005416:	2304      	movs	r3, #4
 8005418:	e008      	b.n	800542c <HAL_GPIO_DeInit+0x98>
 800541a:	2307      	movs	r3, #7
 800541c:	e006      	b.n	800542c <HAL_GPIO_DeInit+0x98>
 800541e:	2303      	movs	r3, #3
 8005420:	e004      	b.n	800542c <HAL_GPIO_DeInit+0x98>
 8005422:	2302      	movs	r3, #2
 8005424:	e002      	b.n	800542c <HAL_GPIO_DeInit+0x98>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_GPIO_DeInit+0x98>
 800542a:	2300      	movs	r3, #0
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	f002 0203 	and.w	r2, r2, #3
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	4093      	lsls	r3, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	429a      	cmp	r2, r3
 800543a:	d132      	bne.n	80054a2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800543c:	4b46      	ldr	r3, [pc, #280]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	43db      	mvns	r3, r3
 8005444:	4944      	ldr	r1, [pc, #272]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 8005446:	4013      	ands	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	43db      	mvns	r3, r3
 8005452:	4941      	ldr	r1, [pc, #260]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 8005454:	4013      	ands	r3, r2
 8005456:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005458:	4b3f      	ldr	r3, [pc, #252]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	43db      	mvns	r3, r3
 8005460:	493d      	ldr	r1, [pc, #244]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 8005462:	4013      	ands	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005466:	4b3c      	ldr	r3, [pc, #240]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	43db      	mvns	r3, r3
 800546e:	493a      	ldr	r1, [pc, #232]	; (8005558 <HAL_GPIO_DeInit+0x1c4>)
 8005470:	4013      	ands	r3, r2
 8005472:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	220f      	movs	r2, #15
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005484:	4a2e      	ldr	r2, [pc, #184]	; (8005540 <HAL_GPIO_DeInit+0x1ac>)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	43da      	mvns	r2, r3
 8005494:	482a      	ldr	r0, [pc, #168]	; (8005540 <HAL_GPIO_DeInit+0x1ac>)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	400a      	ands	r2, r1
 800549c:	3302      	adds	r3, #2
 800549e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	2103      	movs	r1, #3
 80054ac:	fa01 f303 	lsl.w	r3, r1, r3
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	08da      	lsrs	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3208      	adds	r2, #8
 80054c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	220f      	movs	r2, #15
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	08d2      	lsrs	r2, r2, #3
 80054d8:	4019      	ands	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	2103      	movs	r1, #3
 80054ec:	fa01 f303 	lsl.w	r3, r1, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	2101      	movs	r1, #1
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	fa01 f303 	lsl.w	r3, r1, r3
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2103      	movs	r1, #3
 8005516:	fa01 f303 	lsl.w	r3, r1, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	401a      	ands	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3301      	adds	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b0f      	cmp	r3, #15
 800552c:	f67f af40 	bls.w	80053b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40013800 	.word	0x40013800
 8005544:	40020000 	.word	0x40020000
 8005548:	40020400 	.word	0x40020400
 800554c:	40020800 	.word	0x40020800
 8005550:	40020c00 	.word	0x40020c00
 8005554:	40021000 	.word	0x40021000
 8005558:	40013c00 	.word	0x40013c00

0800555c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	4013      	ands	r3, r2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
 8005578:	e001      	b.n	800557e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800557e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
 8005598:	4613      	mov	r3, r2
 800559a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800559c:	787b      	ldrb	r3, [r7, #1]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055a8:	e003      	b.n	80055b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055aa:	887b      	ldrh	r3, [r7, #2]
 80055ac:	041a      	lsls	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	619a      	str	r2, [r3, #24]
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	887b      	ldrh	r3, [r7, #2]
 80055d0:	401a      	ands	r2, r3
 80055d2:	887b      	ldrh	r3, [r7, #2]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d104      	bne.n	80055e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055d8:	887b      	ldrh	r3, [r7, #2]
 80055da:	041a      	lsls	r2, r3, #16
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80055e0:	e002      	b.n	80055e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e25e      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d075      	beq.n	80056fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005612:	4b88      	ldr	r3, [pc, #544]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 030c 	and.w	r3, r3, #12
 800561a:	2b04      	cmp	r3, #4
 800561c:	d00c      	beq.n	8005638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561e:	4b85      	ldr	r3, [pc, #532]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005626:	2b08      	cmp	r3, #8
 8005628:	d112      	bne.n	8005650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800562a:	4b82      	ldr	r3, [pc, #520]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005636:	d10b      	bne.n	8005650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	4b7e      	ldr	r3, [pc, #504]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05b      	beq.n	80056fc <HAL_RCC_OscConfig+0x108>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d157      	bne.n	80056fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e239      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005658:	d106      	bne.n	8005668 <HAL_RCC_OscConfig+0x74>
 800565a:	4b76      	ldr	r3, [pc, #472]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a75      	ldr	r2, [pc, #468]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e01d      	b.n	80056a4 <HAL_RCC_OscConfig+0xb0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x98>
 8005672:	4b70      	ldr	r3, [pc, #448]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6f      	ldr	r2, [pc, #444]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	4b6d      	ldr	r3, [pc, #436]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a6c      	ldr	r2, [pc, #432]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0xb0>
 800568c:	4b69      	ldr	r3, [pc, #420]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a68      	ldr	r2, [pc, #416]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4b66      	ldr	r3, [pc, #408]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a65      	ldr	r2, [pc, #404]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800569e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe fca2 	bl	8003ff4 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b4:	f7fe fc9e 	bl	8003ff4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b64      	cmp	r3, #100	; 0x64
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e1fe      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	4b5b      	ldr	r3, [pc, #364]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0f0      	beq.n	80056b4 <HAL_RCC_OscConfig+0xc0>
 80056d2:	e014      	b.n	80056fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fe fc8e 	bl	8003ff4 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056dc:	f7fe fc8a 	bl	8003ff4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b64      	cmp	r3, #100	; 0x64
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1ea      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	4b51      	ldr	r3, [pc, #324]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0xe8>
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d063      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800570a:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00b      	beq.n	800572e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005716:	4b47      	ldr	r3, [pc, #284]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800571e:	2b08      	cmp	r3, #8
 8005720:	d11c      	bne.n	800575c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005722:	4b44      	ldr	r3, [pc, #272]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d116      	bne.n	800575c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572e:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <HAL_RCC_OscConfig+0x152>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d001      	beq.n	8005746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e1be      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005746:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4937      	ldr	r1, [pc, #220]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005756:	4313      	orrs	r3, r2
 8005758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	e03a      	b.n	80057d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d020      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005764:	4b34      	ldr	r3, [pc, #208]	; (8005838 <HAL_RCC_OscConfig+0x244>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fe fc43 	bl	8003ff4 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005772:	f7fe fc3f 	bl	8003ff4 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e19f      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	4b2b      	ldr	r3, [pc, #172]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4925      	ldr	r1, [pc, #148]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]
 80057a4:	e015      	b.n	80057d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a6:	4b24      	ldr	r3, [pc, #144]	; (8005838 <HAL_RCC_OscConfig+0x244>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe fc22 	bl	8003ff4 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057b4:	f7fe fc1e 	bl	8003ff4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e17e      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d036      	beq.n	800584c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d016      	beq.n	8005814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e6:	4b15      	ldr	r3, [pc, #84]	; (800583c <HAL_RCC_OscConfig+0x248>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fe fc02 	bl	8003ff4 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fe fbfe 	bl	8003ff4 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e15e      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <HAL_RCC_OscConfig+0x240>)
 8005808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x200>
 8005812:	e01b      	b.n	800584c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_OscConfig+0x248>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581a:	f7fe fbeb 	bl	8003ff4 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005820:	e00e      	b.n	8005840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005822:	f7fe fbe7 	bl	8003ff4 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d907      	bls.n	8005840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e147      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
 8005834:	40023800 	.word	0x40023800
 8005838:	42470000 	.word	0x42470000
 800583c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005840:	4b88      	ldr	r3, [pc, #544]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1ea      	bne.n	8005822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8097 	beq.w	8005988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585e:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	4b7d      	ldr	r3, [pc, #500]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	4a7c      	ldr	r2, [pc, #496]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005878:	6413      	str	r3, [r2, #64]	; 0x40
 800587a:	4b7a      	ldr	r3, [pc, #488]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005886:	2301      	movs	r3, #1
 8005888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588a:	4b77      	ldr	r3, [pc, #476]	; (8005a68 <HAL_RCC_OscConfig+0x474>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005892:	2b00      	cmp	r3, #0
 8005894:	d118      	bne.n	80058c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <HAL_RCC_OscConfig+0x474>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a73      	ldr	r2, [pc, #460]	; (8005a68 <HAL_RCC_OscConfig+0x474>)
 800589c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a2:	f7fe fba7 	bl	8003ff4 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058aa:	f7fe fba3 	bl	8003ff4 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e103      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <HAL_RCC_OscConfig+0x474>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0f0      	beq.n	80058aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d106      	bne.n	80058de <HAL_RCC_OscConfig+0x2ea>
 80058d0:	4b64      	ldr	r3, [pc, #400]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a63      	ldr	r2, [pc, #396]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	e01c      	b.n	8005918 <HAL_RCC_OscConfig+0x324>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d10c      	bne.n	8005900 <HAL_RCC_OscConfig+0x30c>
 80058e6:	4b5f      	ldr	r3, [pc, #380]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ea:	4a5e      	ldr	r2, [pc, #376]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058ec:	f043 0304 	orr.w	r3, r3, #4
 80058f0:	6713      	str	r3, [r2, #112]	; 0x70
 80058f2:	4b5c      	ldr	r3, [pc, #368]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	4a5b      	ldr	r2, [pc, #364]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6713      	str	r3, [r2, #112]	; 0x70
 80058fe:	e00b      	b.n	8005918 <HAL_RCC_OscConfig+0x324>
 8005900:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
 800590c:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005910:	4a54      	ldr	r2, [pc, #336]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005912:	f023 0304 	bic.w	r3, r3, #4
 8005916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d015      	beq.n	800594c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fe fb68 	bl	8003ff4 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005926:	e00a      	b.n	800593e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fe fb64 	bl	8003ff4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0c2      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593e:	4b49      	ldr	r3, [pc, #292]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ee      	beq.n	8005928 <HAL_RCC_OscConfig+0x334>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594c:	f7fe fb52 	bl	8003ff4 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fe fb4e 	bl	8003ff4 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0ac      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800596a:	4b3e      	ldr	r3, [pc, #248]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ee      	bne.n	8005954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d105      	bne.n	8005988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597c:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	4a38      	ldr	r2, [pc, #224]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8098 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005992:	4b34      	ldr	r3, [pc, #208]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 030c 	and.w	r3, r3, #12
 800599a:	2b08      	cmp	r3, #8
 800599c:	d05c      	beq.n	8005a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d141      	bne.n	8005a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <HAL_RCC_OscConfig+0x478>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ac:	f7fe fb22 	bl	8003ff4 <HAL_GetTick>
 80059b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059b2:	e008      	b.n	80059c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe fb1e 	bl	8003ff4 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e07e      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f0      	bne.n	80059b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	019b      	lsls	r3, r3, #6
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	3b01      	subs	r3, #1
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	061b      	lsls	r3, r3, #24
 80059f6:	491b      	ldr	r1, [pc, #108]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059fc:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <HAL_RCC_OscConfig+0x478>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a02:	f7fe faf7 	bl	8003ff4 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a0a:	f7fe faf3 	bl	8003ff4 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e053      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1c:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x416>
 8005a28:	e04b      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <HAL_RCC_OscConfig+0x478>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a30:	f7fe fae0 	bl	8003ff4 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fe fadc 	bl	8003ff4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e03c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x444>
 8005a56:	e034      	b.n	8005ac2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e02f      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <HAL_RCC_OscConfig+0x4d8>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d11c      	bne.n	8005abe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d115      	bne.n	8005abe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a98:	4013      	ands	r3, r2
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10d      	bne.n	8005abe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d106      	bne.n	8005abe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d001      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	40023800 	.word	0x40023800

08005ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0cc      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b68      	ldr	r3, [pc, #416]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d90c      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b65      	ldr	r3, [pc, #404]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0b8      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b24:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4a58      	ldr	r2, [pc, #352]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b3c:	4b53      	ldr	r3, [pc, #332]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a52      	ldr	r2, [pc, #328]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b50      	ldr	r3, [pc, #320]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	494d      	ldr	r1, [pc, #308]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d044      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	4b47      	ldr	r3, [pc, #284]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d119      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07f      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d003      	beq.n	8005b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e06f      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e067      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bae:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 0203 	bic.w	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4934      	ldr	r1, [pc, #208]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fe fa18 	bl	8003ff4 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7fe fa14 	bl	8003ff4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e04f      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 020c 	and.w	r2, r3, #12
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1eb      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d20c      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b22      	ldr	r3, [pc, #136]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e032      	b.n	8005c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c24:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4916      	ldr	r1, [pc, #88]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	490e      	ldr	r1, [pc, #56]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c56:	f000 f821 	bl	8005c9c <HAL_RCC_GetSysClockFreq>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	490a      	ldr	r1, [pc, #40]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c68:	5ccb      	ldrb	r3, [r1, r3]
 8005c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <HAL_RCC_ClockConfig+0x1c8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe f978 	bl	8003f6c <HAL_InitTick>

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	40023c00 	.word	0x40023c00
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	0800c098 	.word	0x0800c098
 8005c94:	2000000c 	.word	0x2000000c
 8005c98:	20000270 	.word	0x20000270

08005c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca0:	b090      	sub	sp, #64	; 0x40
 8005ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca8:	2300      	movs	r3, #0
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cac:	2300      	movs	r3, #0
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cb4:	4b59      	ldr	r3, [pc, #356]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 030c 	and.w	r3, r3, #12
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d00d      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x40>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	f200 80a1 	bhi.w	8005e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cce:	e09b      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cd0:	4b53      	ldr	r3, [pc, #332]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005cd4:	e09b      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cd6:	4b53      	ldr	r3, [pc, #332]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cda:	e098      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cdc:	4b4f      	ldr	r3, [pc, #316]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ce6:	4b4d      	ldr	r3, [pc, #308]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d028      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cf2:	4b4a      	ldr	r3, [pc, #296]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005d04:	2100      	movs	r1, #0
 8005d06:	4b47      	ldr	r3, [pc, #284]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d08:	fb03 f201 	mul.w	r2, r3, r1
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	fb00 f303 	mul.w	r3, r0, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	4a43      	ldr	r2, [pc, #268]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8005d16:	fba0 1202 	umull	r1, r2, r0, r2
 8005d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d22:	4413      	add	r3, r2
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d28:	2200      	movs	r2, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	61fa      	str	r2, [r7, #28]
 8005d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d36:	f7fb f90f 	bl	8000f58 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4613      	mov	r3, r2
 8005d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d42:	e053      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d44:	4b35      	ldr	r3, [pc, #212]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	617a      	str	r2, [r7, #20]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d56:	f04f 0b00 	mov.w	fp, #0
 8005d5a:	4652      	mov	r2, sl
 8005d5c:	465b      	mov	r3, fp
 8005d5e:	f04f 0000 	mov.w	r0, #0
 8005d62:	f04f 0100 	mov.w	r1, #0
 8005d66:	0159      	lsls	r1, r3, #5
 8005d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6c:	0150      	lsls	r0, r2, #5
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	ebb2 080a 	subs.w	r8, r2, sl
 8005d76:	eb63 090b 	sbc.w	r9, r3, fp
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	f04f 0300 	mov.w	r3, #0
 8005d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8005d92:	eb63 0509 	sbc.w	r5, r3, r9
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	00eb      	lsls	r3, r5, #3
 8005da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da4:	00e2      	lsls	r2, r4, #3
 8005da6:	4614      	mov	r4, r2
 8005da8:	461d      	mov	r5, r3
 8005daa:	eb14 030a 	adds.w	r3, r4, sl
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	eb45 030b 	adc.w	r3, r5, fp
 8005db4:	607b      	str	r3, [r7, #4]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	028b      	lsls	r3, r1, #10
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dcc:	4621      	mov	r1, r4
 8005dce:	028a      	lsls	r2, r1, #10
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	60fa      	str	r2, [r7, #12]
 8005ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de0:	f7fb f8ba 	bl	8000f58 <__aeabi_uldivmod>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4613      	mov	r3, r2
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	0c1b      	lsrs	r3, r3, #16
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	3301      	adds	r3, #1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e06:	e002      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e08:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3740      	adds	r7, #64	; 0x40
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	00f42400 	.word	0x00f42400
 8005e24:	017d7840 	.word	0x017d7840

08005e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e2c:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	2000000c 	.word	0x2000000c

08005e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e44:	f7ff fff0 	bl	8005e28 <HAL_RCC_GetHCLKFreq>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	0a9b      	lsrs	r3, r3, #10
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	4903      	ldr	r1, [pc, #12]	; (8005e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e56:	5ccb      	ldrb	r3, [r1, r3]
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40023800 	.word	0x40023800
 8005e64:	0800c0a8 	.word	0x0800c0a8

08005e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e6c:	f7ff ffdc 	bl	8005e28 <HAL_RCC_GetHCLKFreq>
 8005e70:	4602      	mov	r2, r0
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	0b5b      	lsrs	r3, r3, #13
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	4903      	ldr	r1, [pc, #12]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e7e:	5ccb      	ldrb	r3, [r1, r3]
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	0800c0a8 	.word	0x0800c0a8

08005e90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d038      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005eb8:	4b68      	ldr	r3, [pc, #416]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ebe:	f7fe f899 	bl	8003ff4 <HAL_GetTick>
 8005ec2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ec6:	f7fe f895 	bl	8003ff4 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e0bd      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ed8:	4b61      	ldr	r3, [pc, #388]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f0      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	071b      	lsls	r3, r3, #28
 8005ef6:	495a      	ldr	r1, [pc, #360]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005efe:	4b57      	ldr	r3, [pc, #348]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f04:	f7fe f876 	bl	8003ff4 <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f0c:	f7fe f872 	bl	8003ff4 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e09a      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f1e:	4b50      	ldr	r3, [pc, #320]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8083 	beq.w	800603e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	4b48      	ldr	r3, [pc, #288]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	4a47      	ldr	r2, [pc, #284]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f46:	6413      	str	r3, [r2, #64]	; 0x40
 8005f48:	4b45      	ldr	r3, [pc, #276]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f54:	4b43      	ldr	r3, [pc, #268]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a42      	ldr	r2, [pc, #264]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f60:	f7fe f848 	bl	8003ff4 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f68:	f7fe f844 	bl	8003ff4 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e06c      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f7a:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f86:	4b36      	ldr	r3, [pc, #216]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02f      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d028      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fa4:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fae:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fb4:	4b2c      	ldr	r3, [pc, #176]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005fba:	4a29      	ldr	r2, [pc, #164]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fc0:	4b27      	ldr	r3, [pc, #156]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d114      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fe f812 	bl	8003ff4 <HAL_GetTick>
 8005fd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd4:	f7fe f80e 	bl	8003ff4 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e034      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fea:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ee      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006002:	d10d      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006004:	4b16      	ldr	r3, [pc, #88]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006018:	4911      	ldr	r1, [pc, #68]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
 800601e:	e005      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006020:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	4a0e      	ldr	r2, [pc, #56]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006026:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800602a:	6093      	str	r3, [r2, #8]
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800603a:	4313      	orrs	r3, r2
 800603c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7d1a      	ldrb	r2, [r3, #20]
 800604e:	4b07      	ldr	r3, [pc, #28]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006050:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	42470068 	.word	0x42470068
 8006060:	40023800 	.word	0x40023800
 8006064:	40007000 	.word	0x40007000
 8006068:	42470e40 	.word	0x42470e40
 800606c:	424711e0 	.word	0x424711e0

08006070 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006076:	f7fd ffbd 	bl	8003ff4 <HAL_GetTick>
 800607a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800607c:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5c      	ldr	r2, [pc, #368]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8006088:	e008      	b.n	800609c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608a:	f7fd ffb3 	bl	8003ff4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e0a7      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800609c:	4b55      	ldr	r3, [pc, #340]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80060a8:	4b52      	ldr	r3, [pc, #328]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a51      	ldr	r2, [pc, #324]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060b4:	f7fd ff9e 	bl	8003ff4 <HAL_GetTick>
 80060b8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80060ba:	4b4e      	ldr	r3, [pc, #312]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060bc:	2200      	movs	r2, #0
 80060be:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c2:	f7fd ff97 	bl	8003ff4 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e089      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80060d8:	4b46      	ldr	r3, [pc, #280]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ee      	bne.n	80060c2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80060e4:	f7fd ff86 	bl	8003ff4 <HAL_GetTick>
 80060e8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a41      	ldr	r2, [pc, #260]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80060f0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80060f4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f8:	f7fd ff7c 	bl	8003ff4 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	; 0x64
 8006104:	d901      	bls.n	800610a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e070      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800610a:	4b3a      	ldr	r3, [pc, #232]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f0      	bne.n	80060f8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006116:	f7fd ff6d 	bl	8003ff4 <HAL_GetTick>
 800611a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800611c:	4b35      	ldr	r3, [pc, #212]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006126:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612a:	f7fd ff63 	bl	8003ff4 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e057      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800613c:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006148:	f7fd ff54 	bl	8003ff4 <HAL_GetTick>
 800614c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800614e:	4b29      	ldr	r3, [pc, #164]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a28      	ldr	r2, [pc, #160]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006158:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800615c:	f7fd ff4a 	bl	8003ff4 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e03e      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800616e:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800617a:	4b1e      	ldr	r3, [pc, #120]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800617c:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <HAL_RCC_DeInit+0x188>)
 800617e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8006180:	4b1c      	ldr	r3, [pc, #112]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006182:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <HAL_RCC_DeInit+0x18c>)
 8006184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8006188:	4b1a      	ldr	r3, [pc, #104]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800618e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006192:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8006194:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 800619a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800619e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061a6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80061aa:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4a10      	ldr	r2, [pc, #64]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061b6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80061b8:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061bc:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c8:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <HAL_RCC_DeInit+0x184>)
 80061ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ce:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_DeInit+0x190>)
 80061d2:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <HAL_RCC_DeInit+0x194>)
 80061d4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_RCC_DeInit+0x198>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fd fec6 	bl	8003f6c <HAL_InitTick>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	04003010 	.word	0x04003010
 80061fc:	20003010 	.word	0x20003010
 8006200:	2000000c 	.word	0x2000000c
 8006204:	00f42400 	.word	0x00f42400
 8006208:	20000270 	.word	0x20000270

0800620c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e083      	b.n	8006326 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7f5b      	ldrb	r3, [r3, #29]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc ff2a 	bl	8003088 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	22ca      	movs	r2, #202	; 0xca
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2253      	movs	r2, #83	; 0x53
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f897 	bl	800637e <RTC_EnterInitMode>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22ff      	movs	r2, #255	; 0xff
 800625c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2204      	movs	r2, #4
 8006262:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e05e      	b.n	8006326 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68d2      	ldr	r2, [r2, #12]
 80062a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	041a      	lsls	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10e      	bne.n	80062f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f829 	bl	800632e <HAL_RTC_WaitForSynchro>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	22ff      	movs	r2, #255	; 0xff
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2204      	movs	r2, #4
 80062ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e018      	b.n	8006326 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22ff      	movs	r2, #255	; 0xff
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006348:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800634a:	f7fd fe53 	bl	8003ff4 <HAL_GetTick>
 800634e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006350:	e009      	b.n	8006366 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006352:	f7fd fe4f 	bl	8003ff4 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006360:	d901      	bls.n	8006366 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e007      	b.n	8006376 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0ee      	beq.n	8006352 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d119      	bne.n	80063cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f04f 32ff 	mov.w	r2, #4294967295
 80063a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063a2:	f7fd fe27 	bl	8003ff4 <HAL_GetTick>
 80063a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063a8:	e009      	b.n	80063be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063aa:	f7fd fe23 	bl	8003ff4 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063b8:	d901      	bls.n	80063be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e007      	b.n	80063ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0ee      	beq.n	80063aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3350      	adds	r3, #80	; 0x50
 80063ec:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3350      	adds	r3, #80	; 0x50
 800641e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e03f      	b.n	80064cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fd f83f 	bl	80034e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	; 0x24
 800646a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc90 	bl	8006da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006492:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e01e      	b.n	8006524 <HAL_UART_DeInit+0x50>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2224      	movs	r2, #36	; 0x24
 80064ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064fc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fd f8c6 	bl	8003690 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af02      	add	r7, sp, #8
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b20      	cmp	r3, #32
 800654a:	f040 8083 	bne.w	8006654 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_UART_Transmit+0x2e>
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e07b      	b.n	8006656 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_UART_Transmit+0x40>
 8006568:	2302      	movs	r3, #2
 800656a:	e074      	b.n	8006656 <HAL_UART_Transmit+0x12a>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2221      	movs	r2, #33	; 0x21
 800657e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006582:	f7fd fd37 	bl	8003ff4 <HAL_GetTick>
 8006586:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800659c:	e042      	b.n	8006624 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d122      	bne.n	80065fc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	2180      	movs	r1, #128	; 0x80
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fa6d 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e042      	b.n	8006656 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	3302      	adds	r3, #2
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	e017      	b.n	8006624 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	3301      	adds	r3, #1
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	e013      	b.n	8006624 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	2180      	movs	r1, #128	; 0x80
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 fa4a 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e01f      	b.n	8006656 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	60ba      	str	r2, [r7, #8]
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1b7      	bne.n	800659e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2200      	movs	r2, #0
 8006636:	2140      	movs	r1, #64	; 0x40
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fa31 	bl	8006aa0 <UART_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e006      	b.n	8006656 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b20      	cmp	r3, #32
 8006678:	d166      	bne.n	8006748 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_UART_Receive_DMA+0x26>
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e05f      	b.n	800674a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_UART_Receive_DMA+0x38>
 8006694:	2302      	movs	r3, #2
 8006696:	e058      	b.n	800674a <HAL_UART_Receive_DMA+0xea>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2222      	movs	r2, #34	; 0x22
 80066b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	4a25      	ldr	r2, [pc, #148]	; (8006754 <HAL_UART_Receive_DMA+0xf4>)
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	4a24      	ldr	r2, [pc, #144]	; (8006758 <HAL_UART_Receive_DMA+0xf8>)
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	4a23      	ldr	r2, [pc, #140]	; (800675c <HAL_UART_Receive_DMA+0xfc>)
 80066d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	2200      	movs	r2, #0
 80066d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	f7fd feff 	bl	80044f4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80066f6:	2300      	movs	r3, #0
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006722:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 0201 	orr.w	r2, r2, #1
 8006732:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006742:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e000      	b.n	800674a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006748:	2302      	movs	r3, #2
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	08006989 	.word	0x08006989
 8006758:	080069f1 	.word	0x080069f1
 800675c:	08006a0d 	.word	0x08006a0d

08006760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006780:	2300      	movs	r3, #0
 8006782:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006784:	2300      	movs	r3, #0
 8006786:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_UART_IRQHandler+0x52>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa78 	bl	8006ca0 <UART_Receive_IT>
      return;
 80067b0:	e0d0      	b.n	8006954 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 80b0 	beq.w	800691a <HAL_UART_IRQHandler+0x1ba>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <HAL_UART_IRQHandler+0x70>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f000 80a5 	beq.w	800691a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_UART_IRQHandler+0x90>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e8:	f043 0201 	orr.w	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_UART_IRQHandler+0xb0>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d005      	beq.n	8006810 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	f043 0202 	orr.w	r2, r3, #2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_UART_IRQHandler+0xd0>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d005      	beq.n	8006830 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	f043 0204 	orr.w	r2, r3, #4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00f      	beq.n	800685a <HAL_UART_IRQHandler+0xfa>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_UART_IRQHandler+0xee>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	f043 0208 	orr.w	r2, r3, #8
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d077      	beq.n	8006952 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b00      	cmp	r3, #0
 800686a:	d007      	beq.n	800687c <HAL_UART_IRQHandler+0x11c>
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa12 	bl	8006ca0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006886:	2b40      	cmp	r3, #64	; 0x40
 8006888:	bf0c      	ite	eq
 800688a:	2301      	moveq	r3, #1
 800688c:	2300      	movne	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <HAL_UART_IRQHandler+0x144>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d031      	beq.n	8006908 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f95b 	bl	8006b60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d123      	bne.n	8006900 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	4a21      	ldr	r2, [pc, #132]	; (800695c <HAL_UART_IRQHandler+0x1fc>)
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fd fe61 	bl	80045a4 <HAL_DMA_Abort_IT>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d016      	beq.n	8006916 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068f2:	4610      	mov	r0, r2
 80068f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f6:	e00e      	b.n	8006916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fc fddf 	bl	80034bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fe:	e00a      	b.n	8006916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fc fddb 	bl	80034bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006906:	e006      	b.n	8006916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fc fdd7 	bl	80034bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006914:	e01d      	b.n	8006952 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006916:	bf00      	nop
    return;
 8006918:	e01b      	b.n	8006952 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_UART_IRQHandler+0x1d6>
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f948 	bl	8006bc4 <UART_Transmit_IT>
    return;
 8006934:	e00e      	b.n	8006954 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_UART_IRQHandler+0x1f4>
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d004      	beq.n	8006954 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f990 	bl	8006c70 <UART_EndTransmit_IT>
    return;
 8006950:	e000      	b.n	8006954 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006952:	bf00      	nop
  }
}
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	08006b9d 	.word	0x08006b9d

08006960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d11e      	bne.n	80069e2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7fc fd74 	bl	80034d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff ffb8 	bl	8006974 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	bf0c      	ite	eq
 8006a2c:	2301      	moveq	r3, #1
 8006a2e:	2300      	movne	r3, #0
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b21      	cmp	r3, #33	; 0x21
 8006a3e:	d108      	bne.n	8006a52 <UART_DMAError+0x46>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f000 f871 	bl	8006b34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	bf0c      	ite	eq
 8006a60:	2301      	moveq	r3, #1
 8006a62:	2300      	movne	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b22      	cmp	r3, #34	; 0x22
 8006a72:	d108      	bne.n	8006a86 <UART_DMAError+0x7a>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 f86d 	bl	8006b60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	f043 0210 	orr.w	r2, r3, #16
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a92:	68b8      	ldr	r0, [r7, #8]
 8006a94:	f7fc fd12 	bl	80034bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab0:	e02c      	b.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d028      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ac0:	f7fd fa98 	bl	8003ff4 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d21d      	bcs.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ade:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e00f      	b.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d0c3      	beq.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b4a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695a      	ldr	r2, [r3, #20]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7fc fc80 	bl	80034bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b21      	cmp	r3, #33	; 0x21
 8006bd6:	d144      	bne.n	8006c62 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be0:	d11a      	bne.n	8006c18 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bf6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]
 8006c0a:	e00e      	b.n	8006c2a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	621a      	str	r2, [r3, #32]
 8006c16:	e008      	b.n	8006c2a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	1c59      	adds	r1, r3, #1
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6211      	str	r1, [r2, #32]
 8006c22:	781a      	ldrb	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4619      	mov	r1, r3
 8006c38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10f      	bne.n	8006c5e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e000      	b.n	8006c64 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006c62:	2302      	movs	r3, #2
  }
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fe65 	bl	8006960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b22      	cmp	r3, #34	; 0x22
 8006cb2:	d171      	bne.n	8006d98 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbc:	d123      	bne.n	8006d06 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10e      	bne.n	8006cea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	1c9a      	adds	r2, r3, #2
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce8:	e029      	b.n	8006d3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	629a      	str	r2, [r3, #40]	; 0x28
 8006d04:	e01b      	b.n	8006d3e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6858      	ldr	r0, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6291      	str	r1, [r2, #40]	; 0x28
 8006d1e:	b2c2      	uxtb	r2, r0
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	e00c      	b.n	8006d3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	b2da      	uxtb	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	1c58      	adds	r0, r3, #1
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	6288      	str	r0, [r1, #40]	; 0x28
 8006d36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d120      	bne.n	8006d94 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0220 	bic.w	r2, r2, #32
 8006d60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fc fba0 	bl	80034d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e002      	b.n	8006d9a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006dbe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dc2:	68d9      	ldr	r1, [r3, #12]
 8006dc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	ea40 0301 	orr.w	r3, r0, r1
 8006dce:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006dea:	69db      	ldr	r3, [r3, #28]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8006df2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006dfe:	f021 010c 	bic.w	r1, r1, #12
 8006e02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e20:	6999      	ldr	r1, [r3, #24]
 8006e22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	ea40 0301 	orr.w	r3, r0, r1
 8006e2c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e38:	f040 824a 	bne.w	80072d0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b96      	ldr	r3, [pc, #600]	; (800709c <UART_SetConfig+0x2f8>)
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d006      	beq.n	8006e56 <UART_SetConfig+0xb2>
 8006e48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b94      	ldr	r3, [pc, #592]	; (80070a0 <UART_SetConfig+0x2fc>)
 8006e50:	429a      	cmp	r2, r3
 8006e52:	f040 8129 	bne.w	80070a8 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e56:	f7ff f807 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8006e5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8006e68:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8006e6c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8006e70:	4622      	mov	r2, r4
 8006e72:	462b      	mov	r3, r5
 8006e74:	1891      	adds	r1, r2, r2
 8006e76:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006e7a:	415b      	adcs	r3, r3
 8006e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e80:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006e84:	4621      	mov	r1, r4
 8006e86:	1851      	adds	r1, r2, r1
 8006e88:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	414b      	adcs	r3, r1
 8006e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	00cb      	lsls	r3, r1, #3
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eaa:	4641      	mov	r1, r8
 8006eac:	00ca      	lsls	r2, r1, #3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8006ebc:	462b      	mov	r3, r5
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	eb42 0303 	adc.w	r3, r2, r3
 8006ec4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8006ec8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006ed4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8006ed8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8006edc:	460b      	mov	r3, r1
 8006ede:	18db      	adds	r3, r3, r3
 8006ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	eb42 0303 	adc.w	r3, r2, r3
 8006eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006eee:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006ef2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8006ef6:	f7fa f82f 	bl	8000f58 <__aeabi_uldivmod>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4b69      	ldr	r3, [pc, #420]	; (80070a4 <UART_SetConfig+0x300>)
 8006f00:	fba3 2302 	umull	r2, r3, r3, r2
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	011c      	lsls	r4, r3, #4
 8006f08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8006f12:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8006f16:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	1891      	adds	r1, r2, r2
 8006f20:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006f24:	415b      	adcs	r3, r3
 8006f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f2a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006f2e:	4641      	mov	r1, r8
 8006f30:	1851      	adds	r1, r2, r1
 8006f32:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8006f36:	4649      	mov	r1, r9
 8006f38:	414b      	adcs	r3, r1
 8006f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8006f4a:	4659      	mov	r1, fp
 8006f4c:	00cb      	lsls	r3, r1, #3
 8006f4e:	4651      	mov	r1, sl
 8006f50:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f54:	4651      	mov	r1, sl
 8006f56:	00ca      	lsls	r2, r1, #3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4642      	mov	r2, r8
 8006f60:	189b      	adds	r3, r3, r2
 8006f62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8006f66:	464b      	mov	r3, r9
 8006f68:	460a      	mov	r2, r1
 8006f6a:	eb42 0303 	adc.w	r3, r2, r3
 8006f6e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8006f72:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006f7e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8006f82:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8006f86:	460b      	mov	r3, r1
 8006f88:	18db      	adds	r3, r3, r3
 8006f8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f8e:	4613      	mov	r3, r2
 8006f90:	eb42 0303 	adc.w	r3, r2, r3
 8006f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f98:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006f9c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8006fa0:	f7f9 ffda 	bl	8000f58 <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <UART_SetConfig+0x300>)
 8006fac:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	2264      	movs	r2, #100	; 0x64
 8006fb4:	fb02 f303 	mul.w	r3, r2, r3
 8006fb8:	1acb      	subs	r3, r1, r3
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006fc0:	4b38      	ldr	r3, [pc, #224]	; (80070a4 <UART_SetConfig+0x300>)
 8006fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fce:	441c      	add	r4, r3
 8006fd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006fda:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8006fde:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	1891      	adds	r1, r2, r2
 8006fe8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8006fec:	415b      	adcs	r3, r3
 8006fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006ff2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	1851      	adds	r1, r2, r1
 8006ffa:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006ffe:	4649      	mov	r1, r9
 8007000:	414b      	adcs	r3, r1
 8007002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8007012:	4659      	mov	r1, fp
 8007014:	00cb      	lsls	r3, r1, #3
 8007016:	4651      	mov	r1, sl
 8007018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701c:	4651      	mov	r1, sl
 800701e:	00ca      	lsls	r2, r1, #3
 8007020:	4610      	mov	r0, r2
 8007022:	4619      	mov	r1, r3
 8007024:	4603      	mov	r3, r0
 8007026:	4642      	mov	r2, r8
 8007028:	189b      	adds	r3, r3, r2
 800702a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800702e:	464b      	mov	r3, r9
 8007030:	460a      	mov	r2, r1
 8007032:	eb42 0303 	adc.w	r3, r2, r3
 8007036:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800703a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8007046:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800704a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800704e:	460b      	mov	r3, r1
 8007050:	18db      	adds	r3, r3, r3
 8007052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007056:	4613      	mov	r3, r2
 8007058:	eb42 0303 	adc.w	r3, r2, r3
 800705c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007060:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8007064:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8007068:	f7f9 ff76 	bl	8000f58 <__aeabi_uldivmod>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <UART_SetConfig+0x300>)
 8007072:	fba3 1302 	umull	r1, r3, r3, r2
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	2164      	movs	r1, #100	; 0x64
 800707a:	fb01 f303 	mul.w	r3, r1, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	3332      	adds	r3, #50	; 0x32
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <UART_SetConfig+0x300>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	095b      	lsrs	r3, r3, #5
 800708c:	f003 0207 	and.w	r2, r3, #7
 8007090:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4422      	add	r2, r4
 8007098:	609a      	str	r2, [r3, #8]
 800709a:	e349      	b.n	8007730 <UART_SetConfig+0x98c>
 800709c:	40011000 	.word	0x40011000
 80070a0:	40011400 	.word	0x40011400
 80070a4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fe feca 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 80070ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070b4:	2200      	movs	r2, #0
 80070b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80070ba:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80070be:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80070c2:	4622      	mov	r2, r4
 80070c4:	462b      	mov	r3, r5
 80070c6:	1891      	adds	r1, r2, r2
 80070c8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80070cc:	415b      	adcs	r3, r3
 80070ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80070d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80070d6:	4621      	mov	r1, r4
 80070d8:	eb12 0a01 	adds.w	sl, r2, r1
 80070dc:	4629      	mov	r1, r5
 80070de:	eb43 0b01 	adc.w	fp, r3, r1
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070f6:	4692      	mov	sl, r2
 80070f8:	469b      	mov	fp, r3
 80070fa:	4623      	mov	r3, r4
 80070fc:	eb1a 0303 	adds.w	r3, sl, r3
 8007100:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007104:	462b      	mov	r3, r5
 8007106:	eb4b 0303 	adc.w	r3, fp, r3
 800710a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800710e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800711a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800711e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8007122:	460b      	mov	r3, r1
 8007124:	18db      	adds	r3, r3, r3
 8007126:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800712a:	4613      	mov	r3, r2
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007134:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007138:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800713c:	f7f9 ff0c 	bl	8000f58 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b61      	ldr	r3, [pc, #388]	; (80072cc <UART_SetConfig+0x528>)
 8007146:	fba3 2302 	umull	r2, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	011c      	lsls	r4, r3, #4
 800714e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007152:	2200      	movs	r2, #0
 8007154:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8007158:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800715c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8007160:	4642      	mov	r2, r8
 8007162:	464b      	mov	r3, r9
 8007164:	1891      	adds	r1, r2, r2
 8007166:	67b9      	str	r1, [r7, #120]	; 0x78
 8007168:	415b      	adcs	r3, r3
 800716a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800716c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007170:	4641      	mov	r1, r8
 8007172:	1851      	adds	r1, r2, r1
 8007174:	6739      	str	r1, [r7, #112]	; 0x70
 8007176:	4649      	mov	r1, r9
 8007178:	414b      	adcs	r3, r1
 800717a:	677b      	str	r3, [r7, #116]	; 0x74
 800717c:	f04f 0200 	mov.w	r2, #0
 8007180:	f04f 0300 	mov.w	r3, #0
 8007184:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8007188:	4659      	mov	r1, fp
 800718a:	00cb      	lsls	r3, r1, #3
 800718c:	4651      	mov	r1, sl
 800718e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007192:	4651      	mov	r1, sl
 8007194:	00ca      	lsls	r2, r1, #3
 8007196:	4610      	mov	r0, r2
 8007198:	4619      	mov	r1, r3
 800719a:	4603      	mov	r3, r0
 800719c:	4642      	mov	r2, r8
 800719e:	189b      	adds	r3, r3, r2
 80071a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80071a4:	464b      	mov	r3, r9
 80071a6:	460a      	mov	r2, r1
 80071a8:	eb42 0303 	adc.w	r3, r2, r3
 80071ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80071b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80071bc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80071c0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80071c4:	460b      	mov	r3, r1
 80071c6:	18db      	adds	r3, r3, r3
 80071c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80071ca:	4613      	mov	r3, r2
 80071cc:	eb42 0303 	adc.w	r3, r2, r3
 80071d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80071d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80071da:	f7f9 febd 	bl	8000f58 <__aeabi_uldivmod>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4611      	mov	r1, r2
 80071e4:	4b39      	ldr	r3, [pc, #228]	; (80072cc <UART_SetConfig+0x528>)
 80071e6:	fba3 2301 	umull	r2, r3, r3, r1
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2264      	movs	r2, #100	; 0x64
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	1acb      	subs	r3, r1, r3
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80071fa:	4b34      	ldr	r3, [pc, #208]	; (80072cc <UART_SetConfig+0x528>)
 80071fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007200:	095b      	lsrs	r3, r3, #5
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007208:	441c      	add	r4, r3
 800720a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800720e:	2200      	movs	r2, #0
 8007210:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8007214:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8007218:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800721c:	4642      	mov	r2, r8
 800721e:	464b      	mov	r3, r9
 8007220:	1891      	adds	r1, r2, r2
 8007222:	6639      	str	r1, [r7, #96]	; 0x60
 8007224:	415b      	adcs	r3, r3
 8007226:	667b      	str	r3, [r7, #100]	; 0x64
 8007228:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800722c:	4641      	mov	r1, r8
 800722e:	1851      	adds	r1, r2, r1
 8007230:	65b9      	str	r1, [r7, #88]	; 0x58
 8007232:	4649      	mov	r1, r9
 8007234:	414b      	adcs	r3, r1
 8007236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8007244:	4659      	mov	r1, fp
 8007246:	00cb      	lsls	r3, r1, #3
 8007248:	4651      	mov	r1, sl
 800724a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800724e:	4651      	mov	r1, sl
 8007250:	00ca      	lsls	r2, r1, #3
 8007252:	4610      	mov	r0, r2
 8007254:	4619      	mov	r1, r3
 8007256:	4603      	mov	r3, r0
 8007258:	4642      	mov	r2, r8
 800725a:	189b      	adds	r3, r3, r2
 800725c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8007260:	464b      	mov	r3, r9
 8007262:	460a      	mov	r2, r1
 8007264:	eb42 0303 	adc.w	r3, r2, r3
 8007268:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800726c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8007278:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800727c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8007280:	460b      	mov	r3, r1
 8007282:	18db      	adds	r3, r3, r3
 8007284:	653b      	str	r3, [r7, #80]	; 0x50
 8007286:	4613      	mov	r3, r2
 8007288:	eb42 0303 	adc.w	r3, r2, r3
 800728c:	657b      	str	r3, [r7, #84]	; 0x54
 800728e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007292:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8007296:	f7f9 fe5f 	bl	8000f58 <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <UART_SetConfig+0x528>)
 80072a0:	fba3 1302 	umull	r1, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2164      	movs	r1, #100	; 0x64
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	3332      	adds	r3, #50	; 0x32
 80072b2:	4a06      	ldr	r2, [pc, #24]	; (80072cc <UART_SetConfig+0x528>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 0207 	and.w	r2, r3, #7
 80072be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4422      	add	r2, r4
 80072c6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80072c8:	e232      	b.n	8007730 <UART_SetConfig+0x98c>
 80072ca:	bf00      	nop
 80072cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	4b8d      	ldr	r3, [pc, #564]	; (800750c <UART_SetConfig+0x768>)
 80072d8:	429a      	cmp	r2, r3
 80072da:	d006      	beq.n	80072ea <UART_SetConfig+0x546>
 80072dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	4b8b      	ldr	r3, [pc, #556]	; (8007510 <UART_SetConfig+0x76c>)
 80072e4:	429a      	cmp	r2, r3
 80072e6:	f040 8117 	bne.w	8007518 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ea:	f7fe fdbd 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 80072ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80072fc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8007300:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8007304:	4622      	mov	r2, r4
 8007306:	462b      	mov	r3, r5
 8007308:	1891      	adds	r1, r2, r2
 800730a:	64b9      	str	r1, [r7, #72]	; 0x48
 800730c:	415b      	adcs	r3, r3
 800730e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007314:	4621      	mov	r1, r4
 8007316:	eb12 0801 	adds.w	r8, r2, r1
 800731a:	4629      	mov	r1, r5
 800731c:	eb43 0901 	adc.w	r9, r3, r1
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800732c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007330:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007334:	4690      	mov	r8, r2
 8007336:	4699      	mov	r9, r3
 8007338:	4623      	mov	r3, r4
 800733a:	eb18 0303 	adds.w	r3, r8, r3
 800733e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8007342:	462b      	mov	r3, r5
 8007344:	eb49 0303 	adc.w	r3, r9, r3
 8007348:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800734c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007358:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8007368:	4629      	mov	r1, r5
 800736a:	008b      	lsls	r3, r1, #2
 800736c:	4621      	mov	r1, r4
 800736e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007372:	4621      	mov	r1, r4
 8007374:	008a      	lsls	r2, r1, #2
 8007376:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800737a:	f7f9 fded 	bl	8000f58 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4b64      	ldr	r3, [pc, #400]	; (8007514 <UART_SetConfig+0x770>)
 8007384:	fba3 2302 	umull	r2, r3, r3, r2
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	011c      	lsls	r4, r3, #4
 800738c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8007396:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800739a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800739e:	4642      	mov	r2, r8
 80073a0:	464b      	mov	r3, r9
 80073a2:	1891      	adds	r1, r2, r2
 80073a4:	6439      	str	r1, [r7, #64]	; 0x40
 80073a6:	415b      	adcs	r3, r3
 80073a8:	647b      	str	r3, [r7, #68]	; 0x44
 80073aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073ae:	4641      	mov	r1, r8
 80073b0:	1851      	adds	r1, r2, r1
 80073b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073b4:	4649      	mov	r1, r9
 80073b6:	414b      	adcs	r3, r1
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80073c6:	4659      	mov	r1, fp
 80073c8:	00cb      	lsls	r3, r1, #3
 80073ca:	4651      	mov	r1, sl
 80073cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d0:	4651      	mov	r1, sl
 80073d2:	00ca      	lsls	r2, r1, #3
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	4603      	mov	r3, r0
 80073da:	4642      	mov	r2, r8
 80073dc:	189b      	adds	r3, r3, r2
 80073de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80073e2:	464b      	mov	r3, r9
 80073e4:	460a      	mov	r2, r1
 80073e6:	eb42 0303 	adc.w	r3, r2, r3
 80073ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80073ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80073fa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800740a:	4649      	mov	r1, r9
 800740c:	008b      	lsls	r3, r1, #2
 800740e:	4641      	mov	r1, r8
 8007410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007414:	4641      	mov	r1, r8
 8007416:	008a      	lsls	r2, r1, #2
 8007418:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800741c:	f7f9 fd9c 	bl	8000f58 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <UART_SetConfig+0x770>)
 8007426:	fba3 1302 	umull	r1, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	2164      	movs	r1, #100	; 0x64
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	3332      	adds	r3, #50	; 0x32
 8007438:	4a36      	ldr	r2, [pc, #216]	; (8007514 <UART_SetConfig+0x770>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007444:	441c      	add	r4, r3
 8007446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800744a:	2200      	movs	r2, #0
 800744c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8007450:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8007454:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	1891      	adds	r1, r2, r2
 800745e:	6339      	str	r1, [r7, #48]	; 0x30
 8007460:	415b      	adcs	r3, r3
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007468:	4641      	mov	r1, r8
 800746a:	1851      	adds	r1, r2, r1
 800746c:	62b9      	str	r1, [r7, #40]	; 0x28
 800746e:	4649      	mov	r1, r9
 8007470:	414b      	adcs	r3, r1
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8007480:	4659      	mov	r1, fp
 8007482:	00cb      	lsls	r3, r1, #3
 8007484:	4651      	mov	r1, sl
 8007486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748a:	4651      	mov	r1, sl
 800748c:	00ca      	lsls	r2, r1, #3
 800748e:	4610      	mov	r0, r2
 8007490:	4619      	mov	r1, r3
 8007492:	4603      	mov	r3, r0
 8007494:	4642      	mov	r2, r8
 8007496:	189b      	adds	r3, r3, r2
 8007498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800749c:	464b      	mov	r3, r9
 800749e:	460a      	mov	r2, r1
 80074a0:	eb42 0303 	adc.w	r3, r2, r3
 80074a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80074a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80074b4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80074c4:	4649      	mov	r1, r9
 80074c6:	008b      	lsls	r3, r1, #2
 80074c8:	4641      	mov	r1, r8
 80074ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ce:	4641      	mov	r1, r8
 80074d0:	008a      	lsls	r2, r1, #2
 80074d2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80074d6:	f7f9 fd3f 	bl	8000f58 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <UART_SetConfig+0x770>)
 80074e0:	fba3 1302 	umull	r1, r3, r3, r2
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	2164      	movs	r1, #100	; 0x64
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	3332      	adds	r3, #50	; 0x32
 80074f2:	4a08      	ldr	r2, [pc, #32]	; (8007514 <UART_SetConfig+0x770>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	095b      	lsrs	r3, r3, #5
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4422      	add	r2, r4
 8007506:	609a      	str	r2, [r3, #8]
 8007508:	e112      	b.n	8007730 <UART_SetConfig+0x98c>
 800750a:	bf00      	nop
 800750c:	40011000 	.word	0x40011000
 8007510:	40011400 	.word	0x40011400
 8007514:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8007518:	f7fe fc92 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 800751c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007520:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007524:	2200      	movs	r2, #0
 8007526:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800752a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800752e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	1891      	adds	r1, r2, r2
 8007538:	6239      	str	r1, [r7, #32]
 800753a:	415b      	adcs	r3, r3
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
 800753e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007542:	4641      	mov	r1, r8
 8007544:	1854      	adds	r4, r2, r1
 8007546:	4649      	mov	r1, r9
 8007548:	eb43 0501 	adc.w	r5, r3, r1
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	f04f 0300 	mov.w	r3, #0
 8007554:	00eb      	lsls	r3, r5, #3
 8007556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800755a:	00e2      	lsls	r2, r4, #3
 800755c:	4614      	mov	r4, r2
 800755e:	461d      	mov	r5, r3
 8007560:	4643      	mov	r3, r8
 8007562:	18e3      	adds	r3, r4, r3
 8007564:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007568:	464b      	mov	r3, r9
 800756a:	eb45 0303 	adc.w	r3, r5, r3
 800756e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007572:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800757e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800758e:	4629      	mov	r1, r5
 8007590:	008b      	lsls	r3, r1, #2
 8007592:	4621      	mov	r1, r4
 8007594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007598:	4621      	mov	r1, r4
 800759a:	008a      	lsls	r2, r1, #2
 800759c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80075a0:	f7f9 fcda 	bl	8000f58 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4b64      	ldr	r3, [pc, #400]	; (800773c <UART_SetConfig+0x998>)
 80075aa:	fba3 2302 	umull	r2, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	011c      	lsls	r4, r3, #4
 80075b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80075b6:	2200      	movs	r2, #0
 80075b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075bc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80075c0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80075c4:	4642      	mov	r2, r8
 80075c6:	464b      	mov	r3, r9
 80075c8:	1891      	adds	r1, r2, r2
 80075ca:	61b9      	str	r1, [r7, #24]
 80075cc:	415b      	adcs	r3, r3
 80075ce:	61fb      	str	r3, [r7, #28]
 80075d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075d4:	4641      	mov	r1, r8
 80075d6:	1851      	adds	r1, r2, r1
 80075d8:	6139      	str	r1, [r7, #16]
 80075da:	4649      	mov	r1, r9
 80075dc:	414b      	adcs	r3, r1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075ec:	4659      	mov	r1, fp
 80075ee:	00cb      	lsls	r3, r1, #3
 80075f0:	4651      	mov	r1, sl
 80075f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f6:	4651      	mov	r1, sl
 80075f8:	00ca      	lsls	r2, r1, #3
 80075fa:	4610      	mov	r0, r2
 80075fc:	4619      	mov	r1, r3
 80075fe:	4603      	mov	r3, r0
 8007600:	4642      	mov	r2, r8
 8007602:	189b      	adds	r3, r3, r2
 8007604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007608:	464b      	mov	r3, r9
 800760a:	460a      	mov	r2, r1
 800760c:	eb42 0303 	adc.w	r3, r2, r3
 8007610:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007614:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007620:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8007630:	4649      	mov	r1, r9
 8007632:	008b      	lsls	r3, r1, #2
 8007634:	4641      	mov	r1, r8
 8007636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763a:	4641      	mov	r1, r8
 800763c:	008a      	lsls	r2, r1, #2
 800763e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8007642:	f7f9 fc89 	bl	8000f58 <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4b3c      	ldr	r3, [pc, #240]	; (800773c <UART_SetConfig+0x998>)
 800764c:	fba3 1302 	umull	r1, r3, r3, r2
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	2164      	movs	r1, #100	; 0x64
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	3332      	adds	r3, #50	; 0x32
 800765e:	4a37      	ldr	r2, [pc, #220]	; (800773c <UART_SetConfig+0x998>)
 8007660:	fba2 2303 	umull	r2, r3, r2, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800766a:	441c      	add	r4, r3
 800766c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007670:	2200      	movs	r2, #0
 8007672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800767a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	1891      	adds	r1, r2, r2
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	415b      	adcs	r3, r3
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800768e:	4641      	mov	r1, r8
 8007690:	1851      	adds	r1, r2, r1
 8007692:	6039      	str	r1, [r7, #0]
 8007694:	4649      	mov	r1, r9
 8007696:	414b      	adcs	r3, r1
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076a6:	4659      	mov	r1, fp
 80076a8:	00cb      	lsls	r3, r1, #3
 80076aa:	4651      	mov	r1, sl
 80076ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076b0:	4651      	mov	r1, sl
 80076b2:	00ca      	lsls	r2, r1, #3
 80076b4:	4610      	mov	r0, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	4603      	mov	r3, r0
 80076ba:	4642      	mov	r2, r8
 80076bc:	189b      	adds	r3, r3, r2
 80076be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076c2:	464b      	mov	r3, r9
 80076c4:	460a      	mov	r2, r1
 80076c6:	eb42 0303 	adc.w	r3, r2, r3
 80076ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076de:	f04f 0200 	mov.w	r2, #0
 80076e2:	f04f 0300 	mov.w	r3, #0
 80076e6:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80076ea:	4649      	mov	r1, r9
 80076ec:	008b      	lsls	r3, r1, #2
 80076ee:	4641      	mov	r1, r8
 80076f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076f4:	4641      	mov	r1, r8
 80076f6:	008a      	lsls	r2, r1, #2
 80076f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80076fc:	f7f9 fc2c 	bl	8000f58 <__aeabi_uldivmod>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4b0d      	ldr	r3, [pc, #52]	; (800773c <UART_SetConfig+0x998>)
 8007706:	fba3 1302 	umull	r1, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	2164      	movs	r1, #100	; 0x64
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	3332      	adds	r3, #50	; 0x32
 8007718:	4a08      	ldr	r2, [pc, #32]	; (800773c <UART_SetConfig+0x998>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	f003 020f 	and.w	r2, r3, #15
 8007724:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4422      	add	r2, r4
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	e7ff      	b.n	8007730 <UART_SetConfig+0x98c>
 8007730:	bf00      	nop
 8007732:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007736:	46bd      	mov	sp, r7
 8007738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800773c:	51eb851f 	.word	0x51eb851f

08007740 <main>:




int main(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  hwInit();
 8007744:	f7fc fba4 	bl	8003e90 <hwInit>

  apInit();
 8007748:	f7f9 fdbe 	bl	80012c8 <apInit>

  apMain();
 800774c:	f7f9 fe08 	bl	8001360 <apMain>

  return 0;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <__errno>:
 8007758:	4b01      	ldr	r3, [pc, #4]	; (8007760 <__errno+0x8>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20000278 	.word	0x20000278

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4d0d      	ldr	r5, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1b64      	subs	r4, r4, r5
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2600      	movs	r6, #0
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4d0b      	ldr	r5, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f004 faf0 	bl	800bd5c <_init>
 800777c:	1b64      	subs	r4, r4, r5
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2600      	movs	r6, #0
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	0800c55c 	.word	0x0800c55c
 80077a0:	0800c55c 	.word	0x0800c55c
 80077a4:	0800c55c 	.word	0x0800c55c
 80077a8:	0800c560 	.word	0x0800c560

080077ac <memcpy>:
 80077ac:	440a      	add	r2, r1
 80077ae:	4291      	cmp	r1, r2
 80077b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80077b4:	d100      	bne.n	80077b8 <memcpy+0xc>
 80077b6:	4770      	bx	lr
 80077b8:	b510      	push	{r4, lr}
 80077ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c2:	4291      	cmp	r1, r2
 80077c4:	d1f9      	bne.n	80077ba <memcpy+0xe>
 80077c6:	bd10      	pop	{r4, pc}

080077c8 <memset>:
 80077c8:	4402      	add	r2, r0
 80077ca:	4603      	mov	r3, r0
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d100      	bne.n	80077d2 <memset+0xa>
 80077d0:	4770      	bx	lr
 80077d2:	f803 1b01 	strb.w	r1, [r3], #1
 80077d6:	e7f9      	b.n	80077cc <memset+0x4>

080077d8 <__cvt>:
 80077d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	ec55 4b10 	vmov	r4, r5, d0
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	460e      	mov	r6, r1
 80077e4:	4619      	mov	r1, r3
 80077e6:	462b      	mov	r3, r5
 80077e8:	bfbb      	ittet	lt
 80077ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077ee:	461d      	movlt	r5, r3
 80077f0:	2300      	movge	r3, #0
 80077f2:	232d      	movlt	r3, #45	; 0x2d
 80077f4:	700b      	strb	r3, [r1, #0]
 80077f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077fc:	4691      	mov	r9, r2
 80077fe:	f023 0820 	bic.w	r8, r3, #32
 8007802:	bfbc      	itt	lt
 8007804:	4622      	movlt	r2, r4
 8007806:	4614      	movlt	r4, r2
 8007808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800780c:	d005      	beq.n	800781a <__cvt+0x42>
 800780e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007812:	d100      	bne.n	8007816 <__cvt+0x3e>
 8007814:	3601      	adds	r6, #1
 8007816:	2102      	movs	r1, #2
 8007818:	e000      	b.n	800781c <__cvt+0x44>
 800781a:	2103      	movs	r1, #3
 800781c:	ab03      	add	r3, sp, #12
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	ab02      	add	r3, sp, #8
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	ec45 4b10 	vmov	d0, r4, r5
 8007828:	4653      	mov	r3, sl
 800782a:	4632      	mov	r2, r6
 800782c:	f001 fc08 	bl	8009040 <_dtoa_r>
 8007830:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007834:	4607      	mov	r7, r0
 8007836:	d102      	bne.n	800783e <__cvt+0x66>
 8007838:	f019 0f01 	tst.w	r9, #1
 800783c:	d022      	beq.n	8007884 <__cvt+0xac>
 800783e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007842:	eb07 0906 	add.w	r9, r7, r6
 8007846:	d110      	bne.n	800786a <__cvt+0x92>
 8007848:	783b      	ldrb	r3, [r7, #0]
 800784a:	2b30      	cmp	r3, #48	; 0x30
 800784c:	d10a      	bne.n	8007864 <__cvt+0x8c>
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	f7f9 fa9f 	bl	8000d98 <__aeabi_dcmpeq>
 800785a:	b918      	cbnz	r0, 8007864 <__cvt+0x8c>
 800785c:	f1c6 0601 	rsb	r6, r6, #1
 8007860:	f8ca 6000 	str.w	r6, [sl]
 8007864:	f8da 3000 	ldr.w	r3, [sl]
 8007868:	4499      	add	r9, r3
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f9 fa91 	bl	8000d98 <__aeabi_dcmpeq>
 8007876:	b108      	cbz	r0, 800787c <__cvt+0xa4>
 8007878:	f8cd 900c 	str.w	r9, [sp, #12]
 800787c:	2230      	movs	r2, #48	; 0x30
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	454b      	cmp	r3, r9
 8007882:	d307      	bcc.n	8007894 <__cvt+0xbc>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007888:	1bdb      	subs	r3, r3, r7
 800788a:	4638      	mov	r0, r7
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	b004      	add	sp, #16
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	1c59      	adds	r1, r3, #1
 8007896:	9103      	str	r1, [sp, #12]
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e7f0      	b.n	800787e <__cvt+0xa6>

0800789c <__exponent>:
 800789c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800789e:	4603      	mov	r3, r0
 80078a0:	2900      	cmp	r1, #0
 80078a2:	bfb8      	it	lt
 80078a4:	4249      	neglt	r1, r1
 80078a6:	f803 2b02 	strb.w	r2, [r3], #2
 80078aa:	bfb4      	ite	lt
 80078ac:	222d      	movlt	r2, #45	; 0x2d
 80078ae:	222b      	movge	r2, #43	; 0x2b
 80078b0:	2909      	cmp	r1, #9
 80078b2:	7042      	strb	r2, [r0, #1]
 80078b4:	dd2a      	ble.n	800790c <__exponent+0x70>
 80078b6:	f10d 0407 	add.w	r4, sp, #7
 80078ba:	46a4      	mov	ip, r4
 80078bc:	270a      	movs	r7, #10
 80078be:	46a6      	mov	lr, r4
 80078c0:	460a      	mov	r2, r1
 80078c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80078c6:	fb07 1516 	mls	r5, r7, r6, r1
 80078ca:	3530      	adds	r5, #48	; 0x30
 80078cc:	2a63      	cmp	r2, #99	; 0x63
 80078ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80078d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078d6:	4631      	mov	r1, r6
 80078d8:	dcf1      	bgt.n	80078be <__exponent+0x22>
 80078da:	3130      	adds	r1, #48	; 0x30
 80078dc:	f1ae 0502 	sub.w	r5, lr, #2
 80078e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078e4:	1c44      	adds	r4, r0, #1
 80078e6:	4629      	mov	r1, r5
 80078e8:	4561      	cmp	r1, ip
 80078ea:	d30a      	bcc.n	8007902 <__exponent+0x66>
 80078ec:	f10d 0209 	add.w	r2, sp, #9
 80078f0:	eba2 020e 	sub.w	r2, r2, lr
 80078f4:	4565      	cmp	r5, ip
 80078f6:	bf88      	it	hi
 80078f8:	2200      	movhi	r2, #0
 80078fa:	4413      	add	r3, r2
 80078fc:	1a18      	subs	r0, r3, r0
 80078fe:	b003      	add	sp, #12
 8007900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007906:	f804 2f01 	strb.w	r2, [r4, #1]!
 800790a:	e7ed      	b.n	80078e8 <__exponent+0x4c>
 800790c:	2330      	movs	r3, #48	; 0x30
 800790e:	3130      	adds	r1, #48	; 0x30
 8007910:	7083      	strb	r3, [r0, #2]
 8007912:	70c1      	strb	r1, [r0, #3]
 8007914:	1d03      	adds	r3, r0, #4
 8007916:	e7f1      	b.n	80078fc <__exponent+0x60>

08007918 <_printf_float>:
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791c:	ed2d 8b02 	vpush	{d8}
 8007920:	b08d      	sub	sp, #52	; 0x34
 8007922:	460c      	mov	r4, r1
 8007924:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007928:	4616      	mov	r6, r2
 800792a:	461f      	mov	r7, r3
 800792c:	4605      	mov	r5, r0
 800792e:	f002 fce5 	bl	800a2fc <_localeconv_r>
 8007932:	f8d0 a000 	ldr.w	sl, [r0]
 8007936:	4650      	mov	r0, sl
 8007938:	f7f8 fdac 	bl	8000494 <strlen>
 800793c:	2300      	movs	r3, #0
 800793e:	930a      	str	r3, [sp, #40]	; 0x28
 8007940:	6823      	ldr	r3, [r4, #0]
 8007942:	9305      	str	r3, [sp, #20]
 8007944:	f8d8 3000 	ldr.w	r3, [r8]
 8007948:	f894 b018 	ldrb.w	fp, [r4, #24]
 800794c:	3307      	adds	r3, #7
 800794e:	f023 0307 	bic.w	r3, r3, #7
 8007952:	f103 0208 	add.w	r2, r3, #8
 8007956:	f8c8 2000 	str.w	r2, [r8]
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007962:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800796a:	9307      	str	r3, [sp, #28]
 800796c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007970:	ee08 0a10 	vmov	s16, r0
 8007974:	4b9f      	ldr	r3, [pc, #636]	; (8007bf4 <_printf_float+0x2dc>)
 8007976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800797a:	f04f 32ff 	mov.w	r2, #4294967295
 800797e:	f7f9 fa3d 	bl	8000dfc <__aeabi_dcmpun>
 8007982:	bb88      	cbnz	r0, 80079e8 <_printf_float+0xd0>
 8007984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007988:	4b9a      	ldr	r3, [pc, #616]	; (8007bf4 <_printf_float+0x2dc>)
 800798a:	f04f 32ff 	mov.w	r2, #4294967295
 800798e:	f7f9 fa17 	bl	8000dc0 <__aeabi_dcmple>
 8007992:	bb48      	cbnz	r0, 80079e8 <_printf_float+0xd0>
 8007994:	2200      	movs	r2, #0
 8007996:	2300      	movs	r3, #0
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f7f9 fa06 	bl	8000dac <__aeabi_dcmplt>
 80079a0:	b110      	cbz	r0, 80079a8 <_printf_float+0x90>
 80079a2:	232d      	movs	r3, #45	; 0x2d
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a8:	4b93      	ldr	r3, [pc, #588]	; (8007bf8 <_printf_float+0x2e0>)
 80079aa:	4894      	ldr	r0, [pc, #592]	; (8007bfc <_printf_float+0x2e4>)
 80079ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079b0:	bf94      	ite	ls
 80079b2:	4698      	movls	r8, r3
 80079b4:	4680      	movhi	r8, r0
 80079b6:	2303      	movs	r3, #3
 80079b8:	6123      	str	r3, [r4, #16]
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	f023 0204 	bic.w	r2, r3, #4
 80079c0:	6022      	str	r2, [r4, #0]
 80079c2:	f04f 0900 	mov.w	r9, #0
 80079c6:	9700      	str	r7, [sp, #0]
 80079c8:	4633      	mov	r3, r6
 80079ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f9d8 	bl	8007d84 <_printf_common>
 80079d4:	3001      	adds	r0, #1
 80079d6:	f040 8090 	bne.w	8007afa <_printf_float+0x1e2>
 80079da:	f04f 30ff 	mov.w	r0, #4294967295
 80079de:	b00d      	add	sp, #52	; 0x34
 80079e0:	ecbd 8b02 	vpop	{d8}
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	4649      	mov	r1, r9
 80079f0:	f7f9 fa04 	bl	8000dfc <__aeabi_dcmpun>
 80079f4:	b140      	cbz	r0, 8007a08 <_printf_float+0xf0>
 80079f6:	464b      	mov	r3, r9
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bfbc      	itt	lt
 80079fc:	232d      	movlt	r3, #45	; 0x2d
 80079fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a02:	487f      	ldr	r0, [pc, #508]	; (8007c00 <_printf_float+0x2e8>)
 8007a04:	4b7f      	ldr	r3, [pc, #508]	; (8007c04 <_printf_float+0x2ec>)
 8007a06:	e7d1      	b.n	80079ac <_printf_float+0x94>
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a0e:	9206      	str	r2, [sp, #24]
 8007a10:	1c5a      	adds	r2, r3, #1
 8007a12:	d13f      	bne.n	8007a94 <_printf_float+0x17c>
 8007a14:	2306      	movs	r3, #6
 8007a16:	6063      	str	r3, [r4, #4]
 8007a18:	9b05      	ldr	r3, [sp, #20]
 8007a1a:	6861      	ldr	r1, [r4, #4]
 8007a1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a20:	2300      	movs	r3, #0
 8007a22:	9303      	str	r3, [sp, #12]
 8007a24:	ab0a      	add	r3, sp, #40	; 0x28
 8007a26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a2a:	ab09      	add	r3, sp, #36	; 0x24
 8007a2c:	ec49 8b10 	vmov	d0, r8, r9
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7ff fecd 	bl	80077d8 <__cvt>
 8007a3e:	9b06      	ldr	r3, [sp, #24]
 8007a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a42:	2b47      	cmp	r3, #71	; 0x47
 8007a44:	4680      	mov	r8, r0
 8007a46:	d108      	bne.n	8007a5a <_printf_float+0x142>
 8007a48:	1cc8      	adds	r0, r1, #3
 8007a4a:	db02      	blt.n	8007a52 <_printf_float+0x13a>
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	4299      	cmp	r1, r3
 8007a50:	dd41      	ble.n	8007ad6 <_printf_float+0x1be>
 8007a52:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a56:	fa5f fb8b 	uxtb.w	fp, fp
 8007a5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a5e:	d820      	bhi.n	8007aa2 <_printf_float+0x18a>
 8007a60:	3901      	subs	r1, #1
 8007a62:	465a      	mov	r2, fp
 8007a64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a68:	9109      	str	r1, [sp, #36]	; 0x24
 8007a6a:	f7ff ff17 	bl	800789c <__exponent>
 8007a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a70:	1813      	adds	r3, r2, r0
 8007a72:	2a01      	cmp	r2, #1
 8007a74:	4681      	mov	r9, r0
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	dc02      	bgt.n	8007a80 <_printf_float+0x168>
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	07d2      	lsls	r2, r2, #31
 8007a7e:	d501      	bpl.n	8007a84 <_printf_float+0x16c>
 8007a80:	3301      	adds	r3, #1
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d09c      	beq.n	80079c6 <_printf_float+0xae>
 8007a8c:	232d      	movs	r3, #45	; 0x2d
 8007a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a92:	e798      	b.n	80079c6 <_printf_float+0xae>
 8007a94:	9a06      	ldr	r2, [sp, #24]
 8007a96:	2a47      	cmp	r2, #71	; 0x47
 8007a98:	d1be      	bne.n	8007a18 <_printf_float+0x100>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1bc      	bne.n	8007a18 <_printf_float+0x100>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e7b9      	b.n	8007a16 <_printf_float+0xfe>
 8007aa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007aa6:	d118      	bne.n	8007ada <_printf_float+0x1c2>
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	6863      	ldr	r3, [r4, #4]
 8007aac:	dd0b      	ble.n	8007ac6 <_printf_float+0x1ae>
 8007aae:	6121      	str	r1, [r4, #16]
 8007ab0:	b913      	cbnz	r3, 8007ab8 <_printf_float+0x1a0>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	07d0      	lsls	r0, r2, #31
 8007ab6:	d502      	bpl.n	8007abe <_printf_float+0x1a6>
 8007ab8:	3301      	adds	r3, #1
 8007aba:	440b      	add	r3, r1
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	e7de      	b.n	8007a84 <_printf_float+0x16c>
 8007ac6:	b913      	cbnz	r3, 8007ace <_printf_float+0x1b6>
 8007ac8:	6822      	ldr	r2, [r4, #0]
 8007aca:	07d2      	lsls	r2, r2, #31
 8007acc:	d501      	bpl.n	8007ad2 <_printf_float+0x1ba>
 8007ace:	3302      	adds	r3, #2
 8007ad0:	e7f4      	b.n	8007abc <_printf_float+0x1a4>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e7f2      	b.n	8007abc <_printf_float+0x1a4>
 8007ad6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007adc:	4299      	cmp	r1, r3
 8007ade:	db05      	blt.n	8007aec <_printf_float+0x1d4>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	6121      	str	r1, [r4, #16]
 8007ae4:	07d8      	lsls	r0, r3, #31
 8007ae6:	d5ea      	bpl.n	8007abe <_printf_float+0x1a6>
 8007ae8:	1c4b      	adds	r3, r1, #1
 8007aea:	e7e7      	b.n	8007abc <_printf_float+0x1a4>
 8007aec:	2900      	cmp	r1, #0
 8007aee:	bfd4      	ite	le
 8007af0:	f1c1 0202 	rsble	r2, r1, #2
 8007af4:	2201      	movgt	r2, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	e7e0      	b.n	8007abc <_printf_float+0x1a4>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	055a      	lsls	r2, r3, #21
 8007afe:	d407      	bmi.n	8007b10 <_printf_float+0x1f8>
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	4642      	mov	r2, r8
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b8      	blx	r7
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	d12c      	bne.n	8007b68 <_printf_float+0x250>
 8007b0e:	e764      	b.n	80079da <_printf_float+0xc2>
 8007b10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b14:	f240 80e0 	bls.w	8007cd8 <_printf_float+0x3c0>
 8007b18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f7f9 f93a 	bl	8000d98 <__aeabi_dcmpeq>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d034      	beq.n	8007b92 <_printf_float+0x27a>
 8007b28:	4a37      	ldr	r2, [pc, #220]	; (8007c08 <_printf_float+0x2f0>)
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4628      	mov	r0, r5
 8007b30:	47b8      	blx	r7
 8007b32:	3001      	adds	r0, #1
 8007b34:	f43f af51 	beq.w	80079da <_printf_float+0xc2>
 8007b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	db02      	blt.n	8007b46 <_printf_float+0x22e>
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	07d8      	lsls	r0, r3, #31
 8007b44:	d510      	bpl.n	8007b68 <_printf_float+0x250>
 8007b46:	ee18 3a10 	vmov	r3, s16
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	f43f af41 	beq.w	80079da <_printf_float+0xc2>
 8007b58:	f04f 0800 	mov.w	r8, #0
 8007b5c:	f104 091a 	add.w	r9, r4, #26
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4543      	cmp	r3, r8
 8007b66:	dc09      	bgt.n	8007b7c <_printf_float+0x264>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	079b      	lsls	r3, r3, #30
 8007b6c:	f100 8105 	bmi.w	8007d7a <_printf_float+0x462>
 8007b70:	68e0      	ldr	r0, [r4, #12]
 8007b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b74:	4298      	cmp	r0, r3
 8007b76:	bfb8      	it	lt
 8007b78:	4618      	movlt	r0, r3
 8007b7a:	e730      	b.n	80079de <_printf_float+0xc6>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	464a      	mov	r2, r9
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af27 	beq.w	80079da <_printf_float+0xc2>
 8007b8c:	f108 0801 	add.w	r8, r8, #1
 8007b90:	e7e6      	b.n	8007b60 <_printf_float+0x248>
 8007b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	dc39      	bgt.n	8007c0c <_printf_float+0x2f4>
 8007b98:	4a1b      	ldr	r2, [pc, #108]	; (8007c08 <_printf_float+0x2f0>)
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	4631      	mov	r1, r6
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	47b8      	blx	r7
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f43f af19 	beq.w	80079da <_printf_float+0xc2>
 8007ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d102      	bne.n	8007bb6 <_printf_float+0x29e>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	07d9      	lsls	r1, r3, #31
 8007bb4:	d5d8      	bpl.n	8007b68 <_printf_float+0x250>
 8007bb6:	ee18 3a10 	vmov	r3, s16
 8007bba:	4652      	mov	r2, sl
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b8      	blx	r7
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	f43f af09 	beq.w	80079da <_printf_float+0xc2>
 8007bc8:	f04f 0900 	mov.w	r9, #0
 8007bcc:	f104 0a1a 	add.w	sl, r4, #26
 8007bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd2:	425b      	negs	r3, r3
 8007bd4:	454b      	cmp	r3, r9
 8007bd6:	dc01      	bgt.n	8007bdc <_printf_float+0x2c4>
 8007bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bda:	e792      	b.n	8007b02 <_printf_float+0x1ea>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	4652      	mov	r2, sl
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f aef7 	beq.w	80079da <_printf_float+0xc2>
 8007bec:	f109 0901 	add.w	r9, r9, #1
 8007bf0:	e7ee      	b.n	8007bd0 <_printf_float+0x2b8>
 8007bf2:	bf00      	nop
 8007bf4:	7fefffff 	.word	0x7fefffff
 8007bf8:	0800c0bc 	.word	0x0800c0bc
 8007bfc:	0800c0c0 	.word	0x0800c0c0
 8007c00:	0800c0c8 	.word	0x0800c0c8
 8007c04:	0800c0c4 	.word	0x0800c0c4
 8007c08:	0800c0cc 	.word	0x0800c0cc
 8007c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c10:	429a      	cmp	r2, r3
 8007c12:	bfa8      	it	ge
 8007c14:	461a      	movge	r2, r3
 8007c16:	2a00      	cmp	r2, #0
 8007c18:	4691      	mov	r9, r2
 8007c1a:	dc37      	bgt.n	8007c8c <_printf_float+0x374>
 8007c1c:	f04f 0b00 	mov.w	fp, #0
 8007c20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c24:	f104 021a 	add.w	r2, r4, #26
 8007c28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c2a:	9305      	str	r3, [sp, #20]
 8007c2c:	eba3 0309 	sub.w	r3, r3, r9
 8007c30:	455b      	cmp	r3, fp
 8007c32:	dc33      	bgt.n	8007c9c <_printf_float+0x384>
 8007c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	db3b      	blt.n	8007cb4 <_printf_float+0x39c>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	07da      	lsls	r2, r3, #31
 8007c40:	d438      	bmi.n	8007cb4 <_printf_float+0x39c>
 8007c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c44:	9a05      	ldr	r2, [sp, #20]
 8007c46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c48:	1a9a      	subs	r2, r3, r2
 8007c4a:	eba3 0901 	sub.w	r9, r3, r1
 8007c4e:	4591      	cmp	r9, r2
 8007c50:	bfa8      	it	ge
 8007c52:	4691      	movge	r9, r2
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	dc35      	bgt.n	8007cc6 <_printf_float+0x3ae>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c62:	f104 0a1a 	add.w	sl, r4, #26
 8007c66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	eba3 0309 	sub.w	r3, r3, r9
 8007c70:	4543      	cmp	r3, r8
 8007c72:	f77f af79 	ble.w	8007b68 <_printf_float+0x250>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f aeaa 	beq.w	80079da <_printf_float+0xc2>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	e7ec      	b.n	8007c66 <_printf_float+0x34e>
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4642      	mov	r2, r8
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	d1c0      	bne.n	8007c1c <_printf_float+0x304>
 8007c9a:	e69e      	b.n	80079da <_printf_float+0xc2>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	9205      	str	r2, [sp, #20]
 8007ca4:	47b8      	blx	r7
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	f43f ae97 	beq.w	80079da <_printf_float+0xc2>
 8007cac:	9a05      	ldr	r2, [sp, #20]
 8007cae:	f10b 0b01 	add.w	fp, fp, #1
 8007cb2:	e7b9      	b.n	8007c28 <_printf_float+0x310>
 8007cb4:	ee18 3a10 	vmov	r3, s16
 8007cb8:	4652      	mov	r2, sl
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d1be      	bne.n	8007c42 <_printf_float+0x32a>
 8007cc4:	e689      	b.n	80079da <_printf_float+0xc2>
 8007cc6:	9a05      	ldr	r2, [sp, #20]
 8007cc8:	464b      	mov	r3, r9
 8007cca:	4442      	add	r2, r8
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	47b8      	blx	r7
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d1c1      	bne.n	8007c5a <_printf_float+0x342>
 8007cd6:	e680      	b.n	80079da <_printf_float+0xc2>
 8007cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cda:	2a01      	cmp	r2, #1
 8007cdc:	dc01      	bgt.n	8007ce2 <_printf_float+0x3ca>
 8007cde:	07db      	lsls	r3, r3, #31
 8007ce0:	d538      	bpl.n	8007d54 <_printf_float+0x43c>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae74 	beq.w	80079da <_printf_float+0xc2>
 8007cf2:	ee18 3a10 	vmov	r3, s16
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f ae6b 	beq.w	80079da <_printf_float+0xc2>
 8007d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f7f9 f844 	bl	8000d98 <__aeabi_dcmpeq>
 8007d10:	b9d8      	cbnz	r0, 8007d4a <_printf_float+0x432>
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	f108 0201 	add.w	r2, r8, #1
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	d10e      	bne.n	8007d42 <_printf_float+0x42a>
 8007d24:	e659      	b.n	80079da <_printf_float+0xc2>
 8007d26:	2301      	movs	r3, #1
 8007d28:	4652      	mov	r2, sl
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f ae52 	beq.w	80079da <_printf_float+0xc2>
 8007d36:	f108 0801 	add.w	r8, r8, #1
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	4543      	cmp	r3, r8
 8007d40:	dcf1      	bgt.n	8007d26 <_printf_float+0x40e>
 8007d42:	464b      	mov	r3, r9
 8007d44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d48:	e6dc      	b.n	8007b04 <_printf_float+0x1ec>
 8007d4a:	f04f 0800 	mov.w	r8, #0
 8007d4e:	f104 0a1a 	add.w	sl, r4, #26
 8007d52:	e7f2      	b.n	8007d3a <_printf_float+0x422>
 8007d54:	2301      	movs	r3, #1
 8007d56:	4642      	mov	r2, r8
 8007d58:	e7df      	b.n	8007d1a <_printf_float+0x402>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	464a      	mov	r2, r9
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	f43f ae38 	beq.w	80079da <_printf_float+0xc2>
 8007d6a:	f108 0801 	add.w	r8, r8, #1
 8007d6e:	68e3      	ldr	r3, [r4, #12]
 8007d70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d72:	1a5b      	subs	r3, r3, r1
 8007d74:	4543      	cmp	r3, r8
 8007d76:	dcf0      	bgt.n	8007d5a <_printf_float+0x442>
 8007d78:	e6fa      	b.n	8007b70 <_printf_float+0x258>
 8007d7a:	f04f 0800 	mov.w	r8, #0
 8007d7e:	f104 0919 	add.w	r9, r4, #25
 8007d82:	e7f4      	b.n	8007d6e <_printf_float+0x456>

08007d84 <_printf_common>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	4616      	mov	r6, r2
 8007d8a:	4699      	mov	r9, r3
 8007d8c:	688a      	ldr	r2, [r1, #8]
 8007d8e:	690b      	ldr	r3, [r1, #16]
 8007d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	bfb8      	it	lt
 8007d98:	4613      	movlt	r3, r2
 8007d9a:	6033      	str	r3, [r6, #0]
 8007d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007da0:	4607      	mov	r7, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	b10a      	cbz	r2, 8007daa <_printf_common+0x26>
 8007da6:	3301      	adds	r3, #1
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	0699      	lsls	r1, r3, #26
 8007dae:	bf42      	ittt	mi
 8007db0:	6833      	ldrmi	r3, [r6, #0]
 8007db2:	3302      	addmi	r3, #2
 8007db4:	6033      	strmi	r3, [r6, #0]
 8007db6:	6825      	ldr	r5, [r4, #0]
 8007db8:	f015 0506 	ands.w	r5, r5, #6
 8007dbc:	d106      	bne.n	8007dcc <_printf_common+0x48>
 8007dbe:	f104 0a19 	add.w	sl, r4, #25
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	6832      	ldr	r2, [r6, #0]
 8007dc6:	1a9b      	subs	r3, r3, r2
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dc26      	bgt.n	8007e1a <_printf_common+0x96>
 8007dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dd0:	1e13      	subs	r3, r2, #0
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	bf18      	it	ne
 8007dd6:	2301      	movne	r3, #1
 8007dd8:	0692      	lsls	r2, r2, #26
 8007dda:	d42b      	bmi.n	8007e34 <_printf_common+0xb0>
 8007ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007de0:	4649      	mov	r1, r9
 8007de2:	4638      	mov	r0, r7
 8007de4:	47c0      	blx	r8
 8007de6:	3001      	adds	r0, #1
 8007de8:	d01e      	beq.n	8007e28 <_printf_common+0xa4>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	68e5      	ldr	r5, [r4, #12]
 8007dee:	6832      	ldr	r2, [r6, #0]
 8007df0:	f003 0306 	and.w	r3, r3, #6
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	bf08      	it	eq
 8007df8:	1aad      	subeq	r5, r5, r2
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	bf0c      	ite	eq
 8007e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e04:	2500      	movne	r5, #0
 8007e06:	4293      	cmp	r3, r2
 8007e08:	bfc4      	itt	gt
 8007e0a:	1a9b      	subgt	r3, r3, r2
 8007e0c:	18ed      	addgt	r5, r5, r3
 8007e0e:	2600      	movs	r6, #0
 8007e10:	341a      	adds	r4, #26
 8007e12:	42b5      	cmp	r5, r6
 8007e14:	d11a      	bne.n	8007e4c <_printf_common+0xc8>
 8007e16:	2000      	movs	r0, #0
 8007e18:	e008      	b.n	8007e2c <_printf_common+0xa8>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	4649      	mov	r1, r9
 8007e20:	4638      	mov	r0, r7
 8007e22:	47c0      	blx	r8
 8007e24:	3001      	adds	r0, #1
 8007e26:	d103      	bne.n	8007e30 <_printf_common+0xac>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e30:	3501      	adds	r5, #1
 8007e32:	e7c6      	b.n	8007dc2 <_printf_common+0x3e>
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	2030      	movs	r0, #48	; 0x30
 8007e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e3e:	4422      	add	r2, r4
 8007e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e48:	3302      	adds	r3, #2
 8007e4a:	e7c7      	b.n	8007ddc <_printf_common+0x58>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	4622      	mov	r2, r4
 8007e50:	4649      	mov	r1, r9
 8007e52:	4638      	mov	r0, r7
 8007e54:	47c0      	blx	r8
 8007e56:	3001      	adds	r0, #1
 8007e58:	d0e6      	beq.n	8007e28 <_printf_common+0xa4>
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7d9      	b.n	8007e12 <_printf_common+0x8e>
	...

08007e60 <_printf_i>:
 8007e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e64:	7e0f      	ldrb	r7, [r1, #24]
 8007e66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e68:	2f78      	cmp	r7, #120	; 0x78
 8007e6a:	4691      	mov	r9, r2
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	469a      	mov	sl, r3
 8007e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e76:	d807      	bhi.n	8007e88 <_printf_i+0x28>
 8007e78:	2f62      	cmp	r7, #98	; 0x62
 8007e7a:	d80a      	bhi.n	8007e92 <_printf_i+0x32>
 8007e7c:	2f00      	cmp	r7, #0
 8007e7e:	f000 80d8 	beq.w	8008032 <_printf_i+0x1d2>
 8007e82:	2f58      	cmp	r7, #88	; 0x58
 8007e84:	f000 80a3 	beq.w	8007fce <_printf_i+0x16e>
 8007e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e90:	e03a      	b.n	8007f08 <_printf_i+0xa8>
 8007e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e96:	2b15      	cmp	r3, #21
 8007e98:	d8f6      	bhi.n	8007e88 <_printf_i+0x28>
 8007e9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ea0 <_printf_i+0x40>)
 8007e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007f0d 	.word	0x08007f0d
 8007ea8:	08007e89 	.word	0x08007e89
 8007eac:	08007e89 	.word	0x08007e89
 8007eb0:	08007e89 	.word	0x08007e89
 8007eb4:	08007e89 	.word	0x08007e89
 8007eb8:	08007f0d 	.word	0x08007f0d
 8007ebc:	08007e89 	.word	0x08007e89
 8007ec0:	08007e89 	.word	0x08007e89
 8007ec4:	08007e89 	.word	0x08007e89
 8007ec8:	08007e89 	.word	0x08007e89
 8007ecc:	08008019 	.word	0x08008019
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007ffb 	.word	0x08007ffb
 8007ed8:	08007e89 	.word	0x08007e89
 8007edc:	08007e89 	.word	0x08007e89
 8007ee0:	0800803b 	.word	0x0800803b
 8007ee4:	08007e89 	.word	0x08007e89
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007e89 	.word	0x08007e89
 8007ef0:	08007e89 	.word	0x08007e89
 8007ef4:	08008003 	.word	0x08008003
 8007ef8:	682b      	ldr	r3, [r5, #0]
 8007efa:	1d1a      	adds	r2, r3, #4
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	602a      	str	r2, [r5, #0]
 8007f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0a3      	b.n	8008054 <_printf_i+0x1f4>
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	6829      	ldr	r1, [r5, #0]
 8007f10:	0606      	lsls	r6, r0, #24
 8007f12:	f101 0304 	add.w	r3, r1, #4
 8007f16:	d50a      	bpl.n	8007f2e <_printf_i+0xce>
 8007f18:	680e      	ldr	r6, [r1, #0]
 8007f1a:	602b      	str	r3, [r5, #0]
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	da03      	bge.n	8007f28 <_printf_i+0xc8>
 8007f20:	232d      	movs	r3, #45	; 0x2d
 8007f22:	4276      	negs	r6, r6
 8007f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f28:	485e      	ldr	r0, [pc, #376]	; (80080a4 <_printf_i+0x244>)
 8007f2a:	230a      	movs	r3, #10
 8007f2c:	e019      	b.n	8007f62 <_printf_i+0x102>
 8007f2e:	680e      	ldr	r6, [r1, #0]
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f36:	bf18      	it	ne
 8007f38:	b236      	sxthne	r6, r6
 8007f3a:	e7ef      	b.n	8007f1c <_printf_i+0xbc>
 8007f3c:	682b      	ldr	r3, [r5, #0]
 8007f3e:	6820      	ldr	r0, [r4, #0]
 8007f40:	1d19      	adds	r1, r3, #4
 8007f42:	6029      	str	r1, [r5, #0]
 8007f44:	0601      	lsls	r1, r0, #24
 8007f46:	d501      	bpl.n	8007f4c <_printf_i+0xec>
 8007f48:	681e      	ldr	r6, [r3, #0]
 8007f4a:	e002      	b.n	8007f52 <_printf_i+0xf2>
 8007f4c:	0646      	lsls	r6, r0, #25
 8007f4e:	d5fb      	bpl.n	8007f48 <_printf_i+0xe8>
 8007f50:	881e      	ldrh	r6, [r3, #0]
 8007f52:	4854      	ldr	r0, [pc, #336]	; (80080a4 <_printf_i+0x244>)
 8007f54:	2f6f      	cmp	r7, #111	; 0x6f
 8007f56:	bf0c      	ite	eq
 8007f58:	2308      	moveq	r3, #8
 8007f5a:	230a      	movne	r3, #10
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f62:	6865      	ldr	r5, [r4, #4]
 8007f64:	60a5      	str	r5, [r4, #8]
 8007f66:	2d00      	cmp	r5, #0
 8007f68:	bfa2      	ittt	ge
 8007f6a:	6821      	ldrge	r1, [r4, #0]
 8007f6c:	f021 0104 	bicge.w	r1, r1, #4
 8007f70:	6021      	strge	r1, [r4, #0]
 8007f72:	b90e      	cbnz	r6, 8007f78 <_printf_i+0x118>
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	d04d      	beq.n	8008014 <_printf_i+0x1b4>
 8007f78:	4615      	mov	r5, r2
 8007f7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007f82:	5dc7      	ldrb	r7, [r0, r7]
 8007f84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f88:	4637      	mov	r7, r6
 8007f8a:	42bb      	cmp	r3, r7
 8007f8c:	460e      	mov	r6, r1
 8007f8e:	d9f4      	bls.n	8007f7a <_printf_i+0x11a>
 8007f90:	2b08      	cmp	r3, #8
 8007f92:	d10b      	bne.n	8007fac <_printf_i+0x14c>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	07de      	lsls	r6, r3, #31
 8007f98:	d508      	bpl.n	8007fac <_printf_i+0x14c>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	4299      	cmp	r1, r3
 8007fa0:	bfde      	ittt	le
 8007fa2:	2330      	movle	r3, #48	; 0x30
 8007fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fa8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fac:	1b52      	subs	r2, r2, r5
 8007fae:	6122      	str	r2, [r4, #16]
 8007fb0:	f8cd a000 	str.w	sl, [sp]
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	aa03      	add	r2, sp, #12
 8007fb8:	4621      	mov	r1, r4
 8007fba:	4640      	mov	r0, r8
 8007fbc:	f7ff fee2 	bl	8007d84 <_printf_common>
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d14c      	bne.n	800805e <_printf_i+0x1fe>
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	b004      	add	sp, #16
 8007fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fce:	4835      	ldr	r0, [pc, #212]	; (80080a4 <_printf_i+0x244>)
 8007fd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fd4:	6829      	ldr	r1, [r5, #0]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fdc:	6029      	str	r1, [r5, #0]
 8007fde:	061d      	lsls	r5, r3, #24
 8007fe0:	d514      	bpl.n	800800c <_printf_i+0x1ac>
 8007fe2:	07df      	lsls	r7, r3, #31
 8007fe4:	bf44      	itt	mi
 8007fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8007fea:	6023      	strmi	r3, [r4, #0]
 8007fec:	b91e      	cbnz	r6, 8007ff6 <_printf_i+0x196>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	f023 0320 	bic.w	r3, r3, #32
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	2310      	movs	r3, #16
 8007ff8:	e7b0      	b.n	8007f5c <_printf_i+0xfc>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	f043 0320 	orr.w	r3, r3, #32
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	2378      	movs	r3, #120	; 0x78
 8008004:	4828      	ldr	r0, [pc, #160]	; (80080a8 <_printf_i+0x248>)
 8008006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800800a:	e7e3      	b.n	8007fd4 <_printf_i+0x174>
 800800c:	0659      	lsls	r1, r3, #25
 800800e:	bf48      	it	mi
 8008010:	b2b6      	uxthmi	r6, r6
 8008012:	e7e6      	b.n	8007fe2 <_printf_i+0x182>
 8008014:	4615      	mov	r5, r2
 8008016:	e7bb      	b.n	8007f90 <_printf_i+0x130>
 8008018:	682b      	ldr	r3, [r5, #0]
 800801a:	6826      	ldr	r6, [r4, #0]
 800801c:	6961      	ldr	r1, [r4, #20]
 800801e:	1d18      	adds	r0, r3, #4
 8008020:	6028      	str	r0, [r5, #0]
 8008022:	0635      	lsls	r5, r6, #24
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	d501      	bpl.n	800802c <_printf_i+0x1cc>
 8008028:	6019      	str	r1, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0x1d2>
 800802c:	0670      	lsls	r0, r6, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0x1c8>
 8008030:	8019      	strh	r1, [r3, #0]
 8008032:	2300      	movs	r3, #0
 8008034:	6123      	str	r3, [r4, #16]
 8008036:	4615      	mov	r5, r2
 8008038:	e7ba      	b.n	8007fb0 <_printf_i+0x150>
 800803a:	682b      	ldr	r3, [r5, #0]
 800803c:	1d1a      	adds	r2, r3, #4
 800803e:	602a      	str	r2, [r5, #0]
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	6862      	ldr	r2, [r4, #4]
 8008044:	2100      	movs	r1, #0
 8008046:	4628      	mov	r0, r5
 8008048:	f7f8 fa32 	bl	80004b0 <memchr>
 800804c:	b108      	cbz	r0, 8008052 <_printf_i+0x1f2>
 800804e:	1b40      	subs	r0, r0, r5
 8008050:	6060      	str	r0, [r4, #4]
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	2300      	movs	r3, #0
 8008058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800805c:	e7a8      	b.n	8007fb0 <_printf_i+0x150>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	462a      	mov	r2, r5
 8008062:	4649      	mov	r1, r9
 8008064:	4640      	mov	r0, r8
 8008066:	47d0      	blx	sl
 8008068:	3001      	adds	r0, #1
 800806a:	d0ab      	beq.n	8007fc4 <_printf_i+0x164>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	079b      	lsls	r3, r3, #30
 8008070:	d413      	bmi.n	800809a <_printf_i+0x23a>
 8008072:	68e0      	ldr	r0, [r4, #12]
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	4298      	cmp	r0, r3
 8008078:	bfb8      	it	lt
 800807a:	4618      	movlt	r0, r3
 800807c:	e7a4      	b.n	8007fc8 <_printf_i+0x168>
 800807e:	2301      	movs	r3, #1
 8008080:	4632      	mov	r2, r6
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	47d0      	blx	sl
 8008088:	3001      	adds	r0, #1
 800808a:	d09b      	beq.n	8007fc4 <_printf_i+0x164>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9903      	ldr	r1, [sp, #12]
 8008092:	1a5b      	subs	r3, r3, r1
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf2      	bgt.n	800807e <_printf_i+0x21e>
 8008098:	e7eb      	b.n	8008072 <_printf_i+0x212>
 800809a:	2500      	movs	r5, #0
 800809c:	f104 0619 	add.w	r6, r4, #25
 80080a0:	e7f5      	b.n	800808e <_printf_i+0x22e>
 80080a2:	bf00      	nop
 80080a4:	0800c0ce 	.word	0x0800c0ce
 80080a8:	0800c0df 	.word	0x0800c0df

080080ac <strcpy>:
 80080ac:	4603      	mov	r3, r0
 80080ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080b2:	f803 2b01 	strb.w	r2, [r3], #1
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d1f9      	bne.n	80080ae <strcpy+0x2>
 80080ba:	4770      	bx	lr

080080bc <sulp>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4604      	mov	r4, r0
 80080c0:	460d      	mov	r5, r1
 80080c2:	ec45 4b10 	vmov	d0, r4, r5
 80080c6:	4616      	mov	r6, r2
 80080c8:	f002 fca8 	bl	800aa1c <__ulp>
 80080cc:	ec51 0b10 	vmov	r0, r1, d0
 80080d0:	b17e      	cbz	r6, 80080f2 <sulp+0x36>
 80080d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dd09      	ble.n	80080f2 <sulp+0x36>
 80080de:	051b      	lsls	r3, r3, #20
 80080e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080e4:	2400      	movs	r4, #0
 80080e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080ea:	4622      	mov	r2, r4
 80080ec:	462b      	mov	r3, r5
 80080ee:	f7f8 fbeb 	bl	80008c8 <__aeabi_dmul>
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	0000      	movs	r0, r0
	...

080080f8 <_strtod_l>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b02 	vpush	{d8}
 8008100:	b09d      	sub	sp, #116	; 0x74
 8008102:	461f      	mov	r7, r3
 8008104:	2300      	movs	r3, #0
 8008106:	9318      	str	r3, [sp, #96]	; 0x60
 8008108:	4ba2      	ldr	r3, [pc, #648]	; (8008394 <_strtod_l+0x29c>)
 800810a:	9213      	str	r2, [sp, #76]	; 0x4c
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9305      	str	r3, [sp, #20]
 8008110:	4604      	mov	r4, r0
 8008112:	4618      	mov	r0, r3
 8008114:	4688      	mov	r8, r1
 8008116:	f7f8 f9bd 	bl	8000494 <strlen>
 800811a:	f04f 0a00 	mov.w	sl, #0
 800811e:	4605      	mov	r5, r0
 8008120:	f04f 0b00 	mov.w	fp, #0
 8008124:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800812a:	781a      	ldrb	r2, [r3, #0]
 800812c:	2a2b      	cmp	r2, #43	; 0x2b
 800812e:	d04e      	beq.n	80081ce <_strtod_l+0xd6>
 8008130:	d83b      	bhi.n	80081aa <_strtod_l+0xb2>
 8008132:	2a0d      	cmp	r2, #13
 8008134:	d834      	bhi.n	80081a0 <_strtod_l+0xa8>
 8008136:	2a08      	cmp	r2, #8
 8008138:	d834      	bhi.n	80081a4 <_strtod_l+0xac>
 800813a:	2a00      	cmp	r2, #0
 800813c:	d03e      	beq.n	80081bc <_strtod_l+0xc4>
 800813e:	2300      	movs	r3, #0
 8008140:	930a      	str	r3, [sp, #40]	; 0x28
 8008142:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008144:	7833      	ldrb	r3, [r6, #0]
 8008146:	2b30      	cmp	r3, #48	; 0x30
 8008148:	f040 80b0 	bne.w	80082ac <_strtod_l+0x1b4>
 800814c:	7873      	ldrb	r3, [r6, #1]
 800814e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008152:	2b58      	cmp	r3, #88	; 0x58
 8008154:	d168      	bne.n	8008228 <_strtod_l+0x130>
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	ab18      	add	r3, sp, #96	; 0x60
 800815c:	9702      	str	r7, [sp, #8]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4a8d      	ldr	r2, [pc, #564]	; (8008398 <_strtod_l+0x2a0>)
 8008162:	ab19      	add	r3, sp, #100	; 0x64
 8008164:	a917      	add	r1, sp, #92	; 0x5c
 8008166:	4620      	mov	r0, r4
 8008168:	f001 fdc0 	bl	8009cec <__gethex>
 800816c:	f010 0707 	ands.w	r7, r0, #7
 8008170:	4605      	mov	r5, r0
 8008172:	d005      	beq.n	8008180 <_strtod_l+0x88>
 8008174:	2f06      	cmp	r7, #6
 8008176:	d12c      	bne.n	80081d2 <_strtod_l+0xda>
 8008178:	3601      	adds	r6, #1
 800817a:	2300      	movs	r3, #0
 800817c:	9617      	str	r6, [sp, #92]	; 0x5c
 800817e:	930a      	str	r3, [sp, #40]	; 0x28
 8008180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 8590 	bne.w	8008ca8 <_strtod_l+0xbb0>
 8008188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818a:	b1eb      	cbz	r3, 80081c8 <_strtod_l+0xd0>
 800818c:	4652      	mov	r2, sl
 800818e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008192:	ec43 2b10 	vmov	d0, r2, r3
 8008196:	b01d      	add	sp, #116	; 0x74
 8008198:	ecbd 8b02 	vpop	{d8}
 800819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a0:	2a20      	cmp	r2, #32
 80081a2:	d1cc      	bne.n	800813e <_strtod_l+0x46>
 80081a4:	3301      	adds	r3, #1
 80081a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081a8:	e7be      	b.n	8008128 <_strtod_l+0x30>
 80081aa:	2a2d      	cmp	r2, #45	; 0x2d
 80081ac:	d1c7      	bne.n	800813e <_strtod_l+0x46>
 80081ae:	2201      	movs	r2, #1
 80081b0:	920a      	str	r2, [sp, #40]	; 0x28
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1c2      	bne.n	8008142 <_strtod_l+0x4a>
 80081bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f040 856e 	bne.w	8008ca4 <_strtod_l+0xbac>
 80081c8:	4652      	mov	r2, sl
 80081ca:	465b      	mov	r3, fp
 80081cc:	e7e1      	b.n	8008192 <_strtod_l+0x9a>
 80081ce:	2200      	movs	r2, #0
 80081d0:	e7ee      	b.n	80081b0 <_strtod_l+0xb8>
 80081d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081d4:	b13a      	cbz	r2, 80081e6 <_strtod_l+0xee>
 80081d6:	2135      	movs	r1, #53	; 0x35
 80081d8:	a81a      	add	r0, sp, #104	; 0x68
 80081da:	f002 fd2a 	bl	800ac32 <__copybits>
 80081de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081e0:	4620      	mov	r0, r4
 80081e2:	f002 f8e9 	bl	800a3b8 <_Bfree>
 80081e6:	3f01      	subs	r7, #1
 80081e8:	2f04      	cmp	r7, #4
 80081ea:	d806      	bhi.n	80081fa <_strtod_l+0x102>
 80081ec:	e8df f007 	tbb	[pc, r7]
 80081f0:	1714030a 	.word	0x1714030a
 80081f4:	0a          	.byte	0x0a
 80081f5:	00          	.byte	0x00
 80081f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80081fa:	0728      	lsls	r0, r5, #28
 80081fc:	d5c0      	bpl.n	8008180 <_strtod_l+0x88>
 80081fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008202:	e7bd      	b.n	8008180 <_strtod_l+0x88>
 8008204:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008208:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800820a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800820e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008212:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008216:	e7f0      	b.n	80081fa <_strtod_l+0x102>
 8008218:	f8df b180 	ldr.w	fp, [pc, #384]	; 800839c <_strtod_l+0x2a4>
 800821c:	e7ed      	b.n	80081fa <_strtod_l+0x102>
 800821e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008222:	f04f 3aff 	mov.w	sl, #4294967295
 8008226:	e7e8      	b.n	80081fa <_strtod_l+0x102>
 8008228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	9217      	str	r2, [sp, #92]	; 0x5c
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d0f9      	beq.n	8008228 <_strtod_l+0x130>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0a3      	beq.n	8008180 <_strtod_l+0x88>
 8008238:	2301      	movs	r3, #1
 800823a:	f04f 0900 	mov.w	r9, #0
 800823e:	9304      	str	r3, [sp, #16]
 8008240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008242:	9308      	str	r3, [sp, #32]
 8008244:	f8cd 901c 	str.w	r9, [sp, #28]
 8008248:	464f      	mov	r7, r9
 800824a:	220a      	movs	r2, #10
 800824c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800824e:	7806      	ldrb	r6, [r0, #0]
 8008250:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008254:	b2d9      	uxtb	r1, r3
 8008256:	2909      	cmp	r1, #9
 8008258:	d92a      	bls.n	80082b0 <_strtod_l+0x1b8>
 800825a:	9905      	ldr	r1, [sp, #20]
 800825c:	462a      	mov	r2, r5
 800825e:	f002 ff9d 	bl	800b19c <strncmp>
 8008262:	b398      	cbz	r0, 80082cc <_strtod_l+0x1d4>
 8008264:	2000      	movs	r0, #0
 8008266:	4632      	mov	r2, r6
 8008268:	463d      	mov	r5, r7
 800826a:	9005      	str	r0, [sp, #20]
 800826c:	4603      	mov	r3, r0
 800826e:	2a65      	cmp	r2, #101	; 0x65
 8008270:	d001      	beq.n	8008276 <_strtod_l+0x17e>
 8008272:	2a45      	cmp	r2, #69	; 0x45
 8008274:	d118      	bne.n	80082a8 <_strtod_l+0x1b0>
 8008276:	b91d      	cbnz	r5, 8008280 <_strtod_l+0x188>
 8008278:	9a04      	ldr	r2, [sp, #16]
 800827a:	4302      	orrs	r2, r0
 800827c:	d09e      	beq.n	80081bc <_strtod_l+0xc4>
 800827e:	2500      	movs	r5, #0
 8008280:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008284:	f108 0201 	add.w	r2, r8, #1
 8008288:	9217      	str	r2, [sp, #92]	; 0x5c
 800828a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800828e:	2a2b      	cmp	r2, #43	; 0x2b
 8008290:	d075      	beq.n	800837e <_strtod_l+0x286>
 8008292:	2a2d      	cmp	r2, #45	; 0x2d
 8008294:	d07b      	beq.n	800838e <_strtod_l+0x296>
 8008296:	f04f 0c00 	mov.w	ip, #0
 800829a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800829e:	2909      	cmp	r1, #9
 80082a0:	f240 8082 	bls.w	80083a8 <_strtod_l+0x2b0>
 80082a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80082a8:	2600      	movs	r6, #0
 80082aa:	e09d      	b.n	80083e8 <_strtod_l+0x2f0>
 80082ac:	2300      	movs	r3, #0
 80082ae:	e7c4      	b.n	800823a <_strtod_l+0x142>
 80082b0:	2f08      	cmp	r7, #8
 80082b2:	bfd8      	it	le
 80082b4:	9907      	ldrle	r1, [sp, #28]
 80082b6:	f100 0001 	add.w	r0, r0, #1
 80082ba:	bfda      	itte	le
 80082bc:	fb02 3301 	mlale	r3, r2, r1, r3
 80082c0:	9307      	strle	r3, [sp, #28]
 80082c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80082c6:	3701      	adds	r7, #1
 80082c8:	9017      	str	r0, [sp, #92]	; 0x5c
 80082ca:	e7bf      	b.n	800824c <_strtod_l+0x154>
 80082cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ce:	195a      	adds	r2, r3, r5
 80082d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80082d2:	5d5a      	ldrb	r2, [r3, r5]
 80082d4:	2f00      	cmp	r7, #0
 80082d6:	d037      	beq.n	8008348 <_strtod_l+0x250>
 80082d8:	9005      	str	r0, [sp, #20]
 80082da:	463d      	mov	r5, r7
 80082dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d912      	bls.n	800830a <_strtod_l+0x212>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7c2      	b.n	800826e <_strtod_l+0x176>
 80082e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80082ee:	785a      	ldrb	r2, [r3, #1]
 80082f0:	3001      	adds	r0, #1
 80082f2:	2a30      	cmp	r2, #48	; 0x30
 80082f4:	d0f8      	beq.n	80082e8 <_strtod_l+0x1f0>
 80082f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	f200 84d9 	bhi.w	8008cb2 <_strtod_l+0xbba>
 8008300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008302:	9005      	str	r0, [sp, #20]
 8008304:	2000      	movs	r0, #0
 8008306:	9308      	str	r3, [sp, #32]
 8008308:	4605      	mov	r5, r0
 800830a:	3a30      	subs	r2, #48	; 0x30
 800830c:	f100 0301 	add.w	r3, r0, #1
 8008310:	d014      	beq.n	800833c <_strtod_l+0x244>
 8008312:	9905      	ldr	r1, [sp, #20]
 8008314:	4419      	add	r1, r3
 8008316:	9105      	str	r1, [sp, #20]
 8008318:	462b      	mov	r3, r5
 800831a:	eb00 0e05 	add.w	lr, r0, r5
 800831e:	210a      	movs	r1, #10
 8008320:	4573      	cmp	r3, lr
 8008322:	d113      	bne.n	800834c <_strtod_l+0x254>
 8008324:	182b      	adds	r3, r5, r0
 8008326:	2b08      	cmp	r3, #8
 8008328:	f105 0501 	add.w	r5, r5, #1
 800832c:	4405      	add	r5, r0
 800832e:	dc1c      	bgt.n	800836a <_strtod_l+0x272>
 8008330:	9907      	ldr	r1, [sp, #28]
 8008332:	230a      	movs	r3, #10
 8008334:	fb03 2301 	mla	r3, r3, r1, r2
 8008338:	9307      	str	r3, [sp, #28]
 800833a:	2300      	movs	r3, #0
 800833c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800833e:	1c51      	adds	r1, r2, #1
 8008340:	9117      	str	r1, [sp, #92]	; 0x5c
 8008342:	7852      	ldrb	r2, [r2, #1]
 8008344:	4618      	mov	r0, r3
 8008346:	e7c9      	b.n	80082dc <_strtod_l+0x1e4>
 8008348:	4638      	mov	r0, r7
 800834a:	e7d2      	b.n	80082f2 <_strtod_l+0x1fa>
 800834c:	2b08      	cmp	r3, #8
 800834e:	dc04      	bgt.n	800835a <_strtod_l+0x262>
 8008350:	9e07      	ldr	r6, [sp, #28]
 8008352:	434e      	muls	r6, r1
 8008354:	9607      	str	r6, [sp, #28]
 8008356:	3301      	adds	r3, #1
 8008358:	e7e2      	b.n	8008320 <_strtod_l+0x228>
 800835a:	f103 0c01 	add.w	ip, r3, #1
 800835e:	f1bc 0f10 	cmp.w	ip, #16
 8008362:	bfd8      	it	le
 8008364:	fb01 f909 	mulle.w	r9, r1, r9
 8008368:	e7f5      	b.n	8008356 <_strtod_l+0x25e>
 800836a:	2d10      	cmp	r5, #16
 800836c:	bfdc      	itt	le
 800836e:	230a      	movle	r3, #10
 8008370:	fb03 2909 	mlale	r9, r3, r9, r2
 8008374:	e7e1      	b.n	800833a <_strtod_l+0x242>
 8008376:	2300      	movs	r3, #0
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	2301      	movs	r3, #1
 800837c:	e77c      	b.n	8008278 <_strtod_l+0x180>
 800837e:	f04f 0c00 	mov.w	ip, #0
 8008382:	f108 0202 	add.w	r2, r8, #2
 8008386:	9217      	str	r2, [sp, #92]	; 0x5c
 8008388:	f898 2002 	ldrb.w	r2, [r8, #2]
 800838c:	e785      	b.n	800829a <_strtod_l+0x1a2>
 800838e:	f04f 0c01 	mov.w	ip, #1
 8008392:	e7f6      	b.n	8008382 <_strtod_l+0x28a>
 8008394:	0800c338 	.word	0x0800c338
 8008398:	0800c0f0 	.word	0x0800c0f0
 800839c:	7ff00000 	.word	0x7ff00000
 80083a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083a2:	1c51      	adds	r1, r2, #1
 80083a4:	9117      	str	r1, [sp, #92]	; 0x5c
 80083a6:	7852      	ldrb	r2, [r2, #1]
 80083a8:	2a30      	cmp	r2, #48	; 0x30
 80083aa:	d0f9      	beq.n	80083a0 <_strtod_l+0x2a8>
 80083ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80083b0:	2908      	cmp	r1, #8
 80083b2:	f63f af79 	bhi.w	80082a8 <_strtod_l+0x1b0>
 80083b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80083ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083bc:	9206      	str	r2, [sp, #24]
 80083be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083c0:	1c51      	adds	r1, r2, #1
 80083c2:	9117      	str	r1, [sp, #92]	; 0x5c
 80083c4:	7852      	ldrb	r2, [r2, #1]
 80083c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80083ca:	2e09      	cmp	r6, #9
 80083cc:	d937      	bls.n	800843e <_strtod_l+0x346>
 80083ce:	9e06      	ldr	r6, [sp, #24]
 80083d0:	1b89      	subs	r1, r1, r6
 80083d2:	2908      	cmp	r1, #8
 80083d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80083d8:	dc02      	bgt.n	80083e0 <_strtod_l+0x2e8>
 80083da:	4576      	cmp	r6, lr
 80083dc:	bfa8      	it	ge
 80083de:	4676      	movge	r6, lr
 80083e0:	f1bc 0f00 	cmp.w	ip, #0
 80083e4:	d000      	beq.n	80083e8 <_strtod_l+0x2f0>
 80083e6:	4276      	negs	r6, r6
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d14d      	bne.n	8008488 <_strtod_l+0x390>
 80083ec:	9904      	ldr	r1, [sp, #16]
 80083ee:	4301      	orrs	r1, r0
 80083f0:	f47f aec6 	bne.w	8008180 <_strtod_l+0x88>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f aee1 	bne.w	80081bc <_strtod_l+0xc4>
 80083fa:	2a69      	cmp	r2, #105	; 0x69
 80083fc:	d027      	beq.n	800844e <_strtod_l+0x356>
 80083fe:	dc24      	bgt.n	800844a <_strtod_l+0x352>
 8008400:	2a49      	cmp	r2, #73	; 0x49
 8008402:	d024      	beq.n	800844e <_strtod_l+0x356>
 8008404:	2a4e      	cmp	r2, #78	; 0x4e
 8008406:	f47f aed9 	bne.w	80081bc <_strtod_l+0xc4>
 800840a:	499f      	ldr	r1, [pc, #636]	; (8008688 <_strtod_l+0x590>)
 800840c:	a817      	add	r0, sp, #92	; 0x5c
 800840e:	f001 fec5 	bl	800a19c <__match>
 8008412:	2800      	cmp	r0, #0
 8008414:	f43f aed2 	beq.w	80081bc <_strtod_l+0xc4>
 8008418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b28      	cmp	r3, #40	; 0x28
 800841e:	d12d      	bne.n	800847c <_strtod_l+0x384>
 8008420:	499a      	ldr	r1, [pc, #616]	; (800868c <_strtod_l+0x594>)
 8008422:	aa1a      	add	r2, sp, #104	; 0x68
 8008424:	a817      	add	r0, sp, #92	; 0x5c
 8008426:	f001 fecd 	bl	800a1c4 <__hexnan>
 800842a:	2805      	cmp	r0, #5
 800842c:	d126      	bne.n	800847c <_strtod_l+0x384>
 800842e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008430:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008434:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008438:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800843c:	e6a0      	b.n	8008180 <_strtod_l+0x88>
 800843e:	210a      	movs	r1, #10
 8008440:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008444:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008448:	e7b9      	b.n	80083be <_strtod_l+0x2c6>
 800844a:	2a6e      	cmp	r2, #110	; 0x6e
 800844c:	e7db      	b.n	8008406 <_strtod_l+0x30e>
 800844e:	4990      	ldr	r1, [pc, #576]	; (8008690 <_strtod_l+0x598>)
 8008450:	a817      	add	r0, sp, #92	; 0x5c
 8008452:	f001 fea3 	bl	800a19c <__match>
 8008456:	2800      	cmp	r0, #0
 8008458:	f43f aeb0 	beq.w	80081bc <_strtod_l+0xc4>
 800845c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800845e:	498d      	ldr	r1, [pc, #564]	; (8008694 <_strtod_l+0x59c>)
 8008460:	3b01      	subs	r3, #1
 8008462:	a817      	add	r0, sp, #92	; 0x5c
 8008464:	9317      	str	r3, [sp, #92]	; 0x5c
 8008466:	f001 fe99 	bl	800a19c <__match>
 800846a:	b910      	cbnz	r0, 8008472 <_strtod_l+0x37a>
 800846c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800846e:	3301      	adds	r3, #1
 8008470:	9317      	str	r3, [sp, #92]	; 0x5c
 8008472:	f8df b230 	ldr.w	fp, [pc, #560]	; 80086a4 <_strtod_l+0x5ac>
 8008476:	f04f 0a00 	mov.w	sl, #0
 800847a:	e681      	b.n	8008180 <_strtod_l+0x88>
 800847c:	4886      	ldr	r0, [pc, #536]	; (8008698 <_strtod_l+0x5a0>)
 800847e:	f002 fe6f 	bl	800b160 <nan>
 8008482:	ec5b ab10 	vmov	sl, fp, d0
 8008486:	e67b      	b.n	8008180 <_strtod_l+0x88>
 8008488:	9b05      	ldr	r3, [sp, #20]
 800848a:	9807      	ldr	r0, [sp, #28]
 800848c:	1af3      	subs	r3, r6, r3
 800848e:	2f00      	cmp	r7, #0
 8008490:	bf08      	it	eq
 8008492:	462f      	moveq	r7, r5
 8008494:	2d10      	cmp	r5, #16
 8008496:	9306      	str	r3, [sp, #24]
 8008498:	46a8      	mov	r8, r5
 800849a:	bfa8      	it	ge
 800849c:	f04f 0810 	movge.w	r8, #16
 80084a0:	f7f8 f998 	bl	80007d4 <__aeabi_ui2d>
 80084a4:	2d09      	cmp	r5, #9
 80084a6:	4682      	mov	sl, r0
 80084a8:	468b      	mov	fp, r1
 80084aa:	dd13      	ble.n	80084d4 <_strtod_l+0x3dc>
 80084ac:	4b7b      	ldr	r3, [pc, #492]	; (800869c <_strtod_l+0x5a4>)
 80084ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084b6:	f7f8 fa07 	bl	80008c8 <__aeabi_dmul>
 80084ba:	4682      	mov	sl, r0
 80084bc:	4648      	mov	r0, r9
 80084be:	468b      	mov	fp, r1
 80084c0:	f7f8 f988 	bl	80007d4 <__aeabi_ui2d>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4650      	mov	r0, sl
 80084ca:	4659      	mov	r1, fp
 80084cc:	f7f8 f846 	bl	800055c <__adddf3>
 80084d0:	4682      	mov	sl, r0
 80084d2:	468b      	mov	fp, r1
 80084d4:	2d0f      	cmp	r5, #15
 80084d6:	dc38      	bgt.n	800854a <_strtod_l+0x452>
 80084d8:	9b06      	ldr	r3, [sp, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f43f ae50 	beq.w	8008180 <_strtod_l+0x88>
 80084e0:	dd24      	ble.n	800852c <_strtod_l+0x434>
 80084e2:	2b16      	cmp	r3, #22
 80084e4:	dc0b      	bgt.n	80084fe <_strtod_l+0x406>
 80084e6:	496d      	ldr	r1, [pc, #436]	; (800869c <_strtod_l+0x5a4>)
 80084e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084f0:	4652      	mov	r2, sl
 80084f2:	465b      	mov	r3, fp
 80084f4:	f7f8 f9e8 	bl	80008c8 <__aeabi_dmul>
 80084f8:	4682      	mov	sl, r0
 80084fa:	468b      	mov	fp, r1
 80084fc:	e640      	b.n	8008180 <_strtod_l+0x88>
 80084fe:	9a06      	ldr	r2, [sp, #24]
 8008500:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008504:	4293      	cmp	r3, r2
 8008506:	db20      	blt.n	800854a <_strtod_l+0x452>
 8008508:	4c64      	ldr	r4, [pc, #400]	; (800869c <_strtod_l+0x5a4>)
 800850a:	f1c5 050f 	rsb	r5, r5, #15
 800850e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851a:	f7f8 f9d5 	bl	80008c8 <__aeabi_dmul>
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	1b5d      	subs	r5, r3, r5
 8008522:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008526:	e9d4 2300 	ldrd	r2, r3, [r4]
 800852a:	e7e3      	b.n	80084f4 <_strtod_l+0x3fc>
 800852c:	9b06      	ldr	r3, [sp, #24]
 800852e:	3316      	adds	r3, #22
 8008530:	db0b      	blt.n	800854a <_strtod_l+0x452>
 8008532:	9b05      	ldr	r3, [sp, #20]
 8008534:	1b9e      	subs	r6, r3, r6
 8008536:	4b59      	ldr	r3, [pc, #356]	; (800869c <_strtod_l+0x5a4>)
 8008538:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800853c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008540:	4650      	mov	r0, sl
 8008542:	4659      	mov	r1, fp
 8008544:	f7f8 faea 	bl	8000b1c <__aeabi_ddiv>
 8008548:	e7d6      	b.n	80084f8 <_strtod_l+0x400>
 800854a:	9b06      	ldr	r3, [sp, #24]
 800854c:	eba5 0808 	sub.w	r8, r5, r8
 8008550:	4498      	add	r8, r3
 8008552:	f1b8 0f00 	cmp.w	r8, #0
 8008556:	dd74      	ble.n	8008642 <_strtod_l+0x54a>
 8008558:	f018 030f 	ands.w	r3, r8, #15
 800855c:	d00a      	beq.n	8008574 <_strtod_l+0x47c>
 800855e:	494f      	ldr	r1, [pc, #316]	; (800869c <_strtod_l+0x5a4>)
 8008560:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008564:	4652      	mov	r2, sl
 8008566:	465b      	mov	r3, fp
 8008568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800856c:	f7f8 f9ac 	bl	80008c8 <__aeabi_dmul>
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	f038 080f 	bics.w	r8, r8, #15
 8008578:	d04f      	beq.n	800861a <_strtod_l+0x522>
 800857a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800857e:	dd22      	ble.n	80085c6 <_strtod_l+0x4ce>
 8008580:	2500      	movs	r5, #0
 8008582:	462e      	mov	r6, r5
 8008584:	9507      	str	r5, [sp, #28]
 8008586:	9505      	str	r5, [sp, #20]
 8008588:	2322      	movs	r3, #34	; 0x22
 800858a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80086a4 <_strtod_l+0x5ac>
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	f04f 0a00 	mov.w	sl, #0
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f43f adf2 	beq.w	8008180 <_strtod_l+0x88>
 800859c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800859e:	4620      	mov	r0, r4
 80085a0:	f001 ff0a 	bl	800a3b8 <_Bfree>
 80085a4:	9905      	ldr	r1, [sp, #20]
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 ff06 	bl	800a3b8 <_Bfree>
 80085ac:	4631      	mov	r1, r6
 80085ae:	4620      	mov	r0, r4
 80085b0:	f001 ff02 	bl	800a3b8 <_Bfree>
 80085b4:	9907      	ldr	r1, [sp, #28]
 80085b6:	4620      	mov	r0, r4
 80085b8:	f001 fefe 	bl	800a3b8 <_Bfree>
 80085bc:	4629      	mov	r1, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 fefa 	bl	800a3b8 <_Bfree>
 80085c4:	e5dc      	b.n	8008180 <_strtod_l+0x88>
 80085c6:	4b36      	ldr	r3, [pc, #216]	; (80086a0 <_strtod_l+0x5a8>)
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	2300      	movs	r3, #0
 80085cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085d0:	4650      	mov	r0, sl
 80085d2:	4659      	mov	r1, fp
 80085d4:	4699      	mov	r9, r3
 80085d6:	f1b8 0f01 	cmp.w	r8, #1
 80085da:	dc21      	bgt.n	8008620 <_strtod_l+0x528>
 80085dc:	b10b      	cbz	r3, 80085e2 <_strtod_l+0x4ea>
 80085de:	4682      	mov	sl, r0
 80085e0:	468b      	mov	fp, r1
 80085e2:	4b2f      	ldr	r3, [pc, #188]	; (80086a0 <_strtod_l+0x5a8>)
 80085e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80085ec:	4652      	mov	r2, sl
 80085ee:	465b      	mov	r3, fp
 80085f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80085f4:	f7f8 f968 	bl	80008c8 <__aeabi_dmul>
 80085f8:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <_strtod_l+0x5ac>)
 80085fa:	460a      	mov	r2, r1
 80085fc:	400b      	ands	r3, r1
 80085fe:	492a      	ldr	r1, [pc, #168]	; (80086a8 <_strtod_l+0x5b0>)
 8008600:	428b      	cmp	r3, r1
 8008602:	4682      	mov	sl, r0
 8008604:	d8bc      	bhi.n	8008580 <_strtod_l+0x488>
 8008606:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800860a:	428b      	cmp	r3, r1
 800860c:	bf86      	itte	hi
 800860e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80086ac <_strtod_l+0x5b4>
 8008612:	f04f 3aff 	movhi.w	sl, #4294967295
 8008616:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800861a:	2300      	movs	r3, #0
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	e084      	b.n	800872a <_strtod_l+0x632>
 8008620:	f018 0f01 	tst.w	r8, #1
 8008624:	d005      	beq.n	8008632 <_strtod_l+0x53a>
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	f7f8 f94c 	bl	80008c8 <__aeabi_dmul>
 8008630:	2301      	movs	r3, #1
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	3208      	adds	r2, #8
 8008636:	f109 0901 	add.w	r9, r9, #1
 800863a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800863e:	9204      	str	r2, [sp, #16]
 8008640:	e7c9      	b.n	80085d6 <_strtod_l+0x4de>
 8008642:	d0ea      	beq.n	800861a <_strtod_l+0x522>
 8008644:	f1c8 0800 	rsb	r8, r8, #0
 8008648:	f018 020f 	ands.w	r2, r8, #15
 800864c:	d00a      	beq.n	8008664 <_strtod_l+0x56c>
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <_strtod_l+0x5a4>)
 8008650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008654:	4650      	mov	r0, sl
 8008656:	4659      	mov	r1, fp
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f8 fa5e 	bl	8000b1c <__aeabi_ddiv>
 8008660:	4682      	mov	sl, r0
 8008662:	468b      	mov	fp, r1
 8008664:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008668:	d0d7      	beq.n	800861a <_strtod_l+0x522>
 800866a:	f1b8 0f1f 	cmp.w	r8, #31
 800866e:	dd1f      	ble.n	80086b0 <_strtod_l+0x5b8>
 8008670:	2500      	movs	r5, #0
 8008672:	462e      	mov	r6, r5
 8008674:	9507      	str	r5, [sp, #28]
 8008676:	9505      	str	r5, [sp, #20]
 8008678:	2322      	movs	r3, #34	; 0x22
 800867a:	f04f 0a00 	mov.w	sl, #0
 800867e:	f04f 0b00 	mov.w	fp, #0
 8008682:	6023      	str	r3, [r4, #0]
 8008684:	e786      	b.n	8008594 <_strtod_l+0x49c>
 8008686:	bf00      	nop
 8008688:	0800c0c9 	.word	0x0800c0c9
 800868c:	0800c104 	.word	0x0800c104
 8008690:	0800c0c1 	.word	0x0800c0c1
 8008694:	0800c244 	.word	0x0800c244
 8008698:	0800c4f0 	.word	0x0800c4f0
 800869c:	0800c3d0 	.word	0x0800c3d0
 80086a0:	0800c3a8 	.word	0x0800c3a8
 80086a4:	7ff00000 	.word	0x7ff00000
 80086a8:	7ca00000 	.word	0x7ca00000
 80086ac:	7fefffff 	.word	0x7fefffff
 80086b0:	f018 0310 	ands.w	r3, r8, #16
 80086b4:	bf18      	it	ne
 80086b6:	236a      	movne	r3, #106	; 0x6a
 80086b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008a68 <_strtod_l+0x970>
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	4650      	mov	r0, sl
 80086c0:	4659      	mov	r1, fp
 80086c2:	2300      	movs	r3, #0
 80086c4:	f018 0f01 	tst.w	r8, #1
 80086c8:	d004      	beq.n	80086d4 <_strtod_l+0x5dc>
 80086ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086ce:	f7f8 f8fb 	bl	80008c8 <__aeabi_dmul>
 80086d2:	2301      	movs	r3, #1
 80086d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80086d8:	f109 0908 	add.w	r9, r9, #8
 80086dc:	d1f2      	bne.n	80086c4 <_strtod_l+0x5cc>
 80086de:	b10b      	cbz	r3, 80086e4 <_strtod_l+0x5ec>
 80086e0:	4682      	mov	sl, r0
 80086e2:	468b      	mov	fp, r1
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	b1c3      	cbz	r3, 800871a <_strtod_l+0x622>
 80086e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	4659      	mov	r1, fp
 80086f4:	dd11      	ble.n	800871a <_strtod_l+0x622>
 80086f6:	2b1f      	cmp	r3, #31
 80086f8:	f340 8124 	ble.w	8008944 <_strtod_l+0x84c>
 80086fc:	2b34      	cmp	r3, #52	; 0x34
 80086fe:	bfde      	ittt	le
 8008700:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008704:	f04f 33ff 	movle.w	r3, #4294967295
 8008708:	fa03 f202 	lslle.w	r2, r3, r2
 800870c:	f04f 0a00 	mov.w	sl, #0
 8008710:	bfcc      	ite	gt
 8008712:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008716:	ea02 0b01 	andle.w	fp, r2, r1
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	4650      	mov	r0, sl
 8008720:	4659      	mov	r1, fp
 8008722:	f7f8 fb39 	bl	8000d98 <__aeabi_dcmpeq>
 8008726:	2800      	cmp	r0, #0
 8008728:	d1a2      	bne.n	8008670 <_strtod_l+0x578>
 800872a:	9b07      	ldr	r3, [sp, #28]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	9908      	ldr	r1, [sp, #32]
 8008730:	462b      	mov	r3, r5
 8008732:	463a      	mov	r2, r7
 8008734:	4620      	mov	r0, r4
 8008736:	f001 fea7 	bl	800a488 <__s2b>
 800873a:	9007      	str	r0, [sp, #28]
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f af1f 	beq.w	8008580 <_strtod_l+0x488>
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	1b9e      	subs	r6, r3, r6
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	bfb4      	ite	lt
 800874c:	4633      	movlt	r3, r6
 800874e:	2300      	movge	r3, #0
 8008750:	930c      	str	r3, [sp, #48]	; 0x30
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	2500      	movs	r5, #0
 8008756:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800875a:	9312      	str	r3, [sp, #72]	; 0x48
 800875c:	462e      	mov	r6, r5
 800875e:	9b07      	ldr	r3, [sp, #28]
 8008760:	4620      	mov	r0, r4
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	f001 fde8 	bl	800a338 <_Balloc>
 8008768:	9005      	str	r0, [sp, #20]
 800876a:	2800      	cmp	r0, #0
 800876c:	f43f af0c 	beq.w	8008588 <_strtod_l+0x490>
 8008770:	9b07      	ldr	r3, [sp, #28]
 8008772:	691a      	ldr	r2, [r3, #16]
 8008774:	3202      	adds	r2, #2
 8008776:	f103 010c 	add.w	r1, r3, #12
 800877a:	0092      	lsls	r2, r2, #2
 800877c:	300c      	adds	r0, #12
 800877e:	f7ff f815 	bl	80077ac <memcpy>
 8008782:	ec4b ab10 	vmov	d0, sl, fp
 8008786:	aa1a      	add	r2, sp, #104	; 0x68
 8008788:	a919      	add	r1, sp, #100	; 0x64
 800878a:	4620      	mov	r0, r4
 800878c:	f002 f9c2 	bl	800ab14 <__d2b>
 8008790:	ec4b ab18 	vmov	d8, sl, fp
 8008794:	9018      	str	r0, [sp, #96]	; 0x60
 8008796:	2800      	cmp	r0, #0
 8008798:	f43f aef6 	beq.w	8008588 <_strtod_l+0x490>
 800879c:	2101      	movs	r1, #1
 800879e:	4620      	mov	r0, r4
 80087a0:	f001 ff0c 	bl	800a5bc <__i2b>
 80087a4:	4606      	mov	r6, r0
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f43f aeee 	beq.w	8008588 <_strtod_l+0x490>
 80087ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087ae:	9904      	ldr	r1, [sp, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	bfab      	itete	ge
 80087b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80087b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80087b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80087ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80087be:	bfac      	ite	ge
 80087c0:	eb03 0902 	addge.w	r9, r3, r2
 80087c4:	1ad7      	sublt	r7, r2, r3
 80087c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80087c8:	eba3 0801 	sub.w	r8, r3, r1
 80087cc:	4490      	add	r8, r2
 80087ce:	4ba1      	ldr	r3, [pc, #644]	; (8008a54 <_strtod_l+0x95c>)
 80087d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087d4:	4598      	cmp	r8, r3
 80087d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087da:	f280 80c7 	bge.w	800896c <_strtod_l+0x874>
 80087de:	eba3 0308 	sub.w	r3, r3, r8
 80087e2:	2b1f      	cmp	r3, #31
 80087e4:	eba2 0203 	sub.w	r2, r2, r3
 80087e8:	f04f 0101 	mov.w	r1, #1
 80087ec:	f300 80b1 	bgt.w	8008952 <_strtod_l+0x85a>
 80087f0:	fa01 f303 	lsl.w	r3, r1, r3
 80087f4:	930d      	str	r3, [sp, #52]	; 0x34
 80087f6:	2300      	movs	r3, #0
 80087f8:	9308      	str	r3, [sp, #32]
 80087fa:	eb09 0802 	add.w	r8, r9, r2
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	45c1      	cmp	r9, r8
 8008802:	4417      	add	r7, r2
 8008804:	441f      	add	r7, r3
 8008806:	464b      	mov	r3, r9
 8008808:	bfa8      	it	ge
 800880a:	4643      	movge	r3, r8
 800880c:	42bb      	cmp	r3, r7
 800880e:	bfa8      	it	ge
 8008810:	463b      	movge	r3, r7
 8008812:	2b00      	cmp	r3, #0
 8008814:	bfc2      	ittt	gt
 8008816:	eba8 0803 	subgt.w	r8, r8, r3
 800881a:	1aff      	subgt	r7, r7, r3
 800881c:	eba9 0903 	subgt.w	r9, r9, r3
 8008820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008822:	2b00      	cmp	r3, #0
 8008824:	dd17      	ble.n	8008856 <_strtod_l+0x75e>
 8008826:	4631      	mov	r1, r6
 8008828:	461a      	mov	r2, r3
 800882a:	4620      	mov	r0, r4
 800882c:	f001 ff86 	bl	800a73c <__pow5mult>
 8008830:	4606      	mov	r6, r0
 8008832:	2800      	cmp	r0, #0
 8008834:	f43f aea8 	beq.w	8008588 <_strtod_l+0x490>
 8008838:	4601      	mov	r1, r0
 800883a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800883c:	4620      	mov	r0, r4
 800883e:	f001 fed3 	bl	800a5e8 <__multiply>
 8008842:	900b      	str	r0, [sp, #44]	; 0x2c
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f ae9f 	beq.w	8008588 <_strtod_l+0x490>
 800884a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800884c:	4620      	mov	r0, r4
 800884e:	f001 fdb3 	bl	800a3b8 <_Bfree>
 8008852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008854:	9318      	str	r3, [sp, #96]	; 0x60
 8008856:	f1b8 0f00 	cmp.w	r8, #0
 800885a:	f300 808c 	bgt.w	8008976 <_strtod_l+0x87e>
 800885e:	9b06      	ldr	r3, [sp, #24]
 8008860:	2b00      	cmp	r3, #0
 8008862:	dd08      	ble.n	8008876 <_strtod_l+0x77e>
 8008864:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008866:	9905      	ldr	r1, [sp, #20]
 8008868:	4620      	mov	r0, r4
 800886a:	f001 ff67 	bl	800a73c <__pow5mult>
 800886e:	9005      	str	r0, [sp, #20]
 8008870:	2800      	cmp	r0, #0
 8008872:	f43f ae89 	beq.w	8008588 <_strtod_l+0x490>
 8008876:	2f00      	cmp	r7, #0
 8008878:	dd08      	ble.n	800888c <_strtod_l+0x794>
 800887a:	9905      	ldr	r1, [sp, #20]
 800887c:	463a      	mov	r2, r7
 800887e:	4620      	mov	r0, r4
 8008880:	f001 ffb6 	bl	800a7f0 <__lshift>
 8008884:	9005      	str	r0, [sp, #20]
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f ae7e 	beq.w	8008588 <_strtod_l+0x490>
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	dd08      	ble.n	80088a4 <_strtod_l+0x7ac>
 8008892:	4631      	mov	r1, r6
 8008894:	464a      	mov	r2, r9
 8008896:	4620      	mov	r0, r4
 8008898:	f001 ffaa 	bl	800a7f0 <__lshift>
 800889c:	4606      	mov	r6, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f ae72 	beq.w	8008588 <_strtod_l+0x490>
 80088a4:	9a05      	ldr	r2, [sp, #20]
 80088a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088a8:	4620      	mov	r0, r4
 80088aa:	f002 f82d 	bl	800a908 <__mdiff>
 80088ae:	4605      	mov	r5, r0
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f43f ae69 	beq.w	8008588 <_strtod_l+0x490>
 80088b6:	68c3      	ldr	r3, [r0, #12]
 80088b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80088ba:	2300      	movs	r3, #0
 80088bc:	60c3      	str	r3, [r0, #12]
 80088be:	4631      	mov	r1, r6
 80088c0:	f002 f806 	bl	800a8d0 <__mcmp>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	da60      	bge.n	800898a <_strtod_l+0x892>
 80088c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ca:	ea53 030a 	orrs.w	r3, r3, sl
 80088ce:	f040 8082 	bne.w	80089d6 <_strtod_l+0x8de>
 80088d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d17d      	bne.n	80089d6 <_strtod_l+0x8de>
 80088da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088de:	0d1b      	lsrs	r3, r3, #20
 80088e0:	051b      	lsls	r3, r3, #20
 80088e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088e6:	d976      	bls.n	80089d6 <_strtod_l+0x8de>
 80088e8:	696b      	ldr	r3, [r5, #20]
 80088ea:	b913      	cbnz	r3, 80088f2 <_strtod_l+0x7fa>
 80088ec:	692b      	ldr	r3, [r5, #16]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	dd71      	ble.n	80089d6 <_strtod_l+0x8de>
 80088f2:	4629      	mov	r1, r5
 80088f4:	2201      	movs	r2, #1
 80088f6:	4620      	mov	r0, r4
 80088f8:	f001 ff7a 	bl	800a7f0 <__lshift>
 80088fc:	4631      	mov	r1, r6
 80088fe:	4605      	mov	r5, r0
 8008900:	f001 ffe6 	bl	800a8d0 <__mcmp>
 8008904:	2800      	cmp	r0, #0
 8008906:	dd66      	ble.n	80089d6 <_strtod_l+0x8de>
 8008908:	9904      	ldr	r1, [sp, #16]
 800890a:	4a53      	ldr	r2, [pc, #332]	; (8008a58 <_strtod_l+0x960>)
 800890c:	465b      	mov	r3, fp
 800890e:	2900      	cmp	r1, #0
 8008910:	f000 8081 	beq.w	8008a16 <_strtod_l+0x91e>
 8008914:	ea02 010b 	and.w	r1, r2, fp
 8008918:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800891c:	dc7b      	bgt.n	8008a16 <_strtod_l+0x91e>
 800891e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008922:	f77f aea9 	ble.w	8008678 <_strtod_l+0x580>
 8008926:	4b4d      	ldr	r3, [pc, #308]	; (8008a5c <_strtod_l+0x964>)
 8008928:	4650      	mov	r0, sl
 800892a:	4659      	mov	r1, fp
 800892c:	2200      	movs	r2, #0
 800892e:	f7f7 ffcb 	bl	80008c8 <__aeabi_dmul>
 8008932:	460b      	mov	r3, r1
 8008934:	4303      	orrs	r3, r0
 8008936:	bf08      	it	eq
 8008938:	2322      	moveq	r3, #34	; 0x22
 800893a:	4682      	mov	sl, r0
 800893c:	468b      	mov	fp, r1
 800893e:	bf08      	it	eq
 8008940:	6023      	streq	r3, [r4, #0]
 8008942:	e62b      	b.n	800859c <_strtod_l+0x4a4>
 8008944:	f04f 32ff 	mov.w	r2, #4294967295
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	ea03 0a0a 	and.w	sl, r3, sl
 8008950:	e6e3      	b.n	800871a <_strtod_l+0x622>
 8008952:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008956:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800895a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800895e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008962:	fa01 f308 	lsl.w	r3, r1, r8
 8008966:	9308      	str	r3, [sp, #32]
 8008968:	910d      	str	r1, [sp, #52]	; 0x34
 800896a:	e746      	b.n	80087fa <_strtod_l+0x702>
 800896c:	2300      	movs	r3, #0
 800896e:	9308      	str	r3, [sp, #32]
 8008970:	2301      	movs	r3, #1
 8008972:	930d      	str	r3, [sp, #52]	; 0x34
 8008974:	e741      	b.n	80087fa <_strtod_l+0x702>
 8008976:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008978:	4642      	mov	r2, r8
 800897a:	4620      	mov	r0, r4
 800897c:	f001 ff38 	bl	800a7f0 <__lshift>
 8008980:	9018      	str	r0, [sp, #96]	; 0x60
 8008982:	2800      	cmp	r0, #0
 8008984:	f47f af6b 	bne.w	800885e <_strtod_l+0x766>
 8008988:	e5fe      	b.n	8008588 <_strtod_l+0x490>
 800898a:	465f      	mov	r7, fp
 800898c:	d16e      	bne.n	8008a6c <_strtod_l+0x974>
 800898e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008994:	b342      	cbz	r2, 80089e8 <_strtod_l+0x8f0>
 8008996:	4a32      	ldr	r2, [pc, #200]	; (8008a60 <_strtod_l+0x968>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d128      	bne.n	80089ee <_strtod_l+0x8f6>
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	4651      	mov	r1, sl
 80089a0:	b1eb      	cbz	r3, 80089de <_strtod_l+0x8e6>
 80089a2:	4b2d      	ldr	r3, [pc, #180]	; (8008a58 <_strtod_l+0x960>)
 80089a4:	403b      	ands	r3, r7
 80089a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	d819      	bhi.n	80089e4 <_strtod_l+0x8ec>
 80089b0:	0d1b      	lsrs	r3, r3, #20
 80089b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	4299      	cmp	r1, r3
 80089bc:	d117      	bne.n	80089ee <_strtod_l+0x8f6>
 80089be:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <_strtod_l+0x96c>)
 80089c0:	429f      	cmp	r7, r3
 80089c2:	d102      	bne.n	80089ca <_strtod_l+0x8d2>
 80089c4:	3101      	adds	r1, #1
 80089c6:	f43f addf 	beq.w	8008588 <_strtod_l+0x490>
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <_strtod_l+0x960>)
 80089cc:	403b      	ands	r3, r7
 80089ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80089d2:	f04f 0a00 	mov.w	sl, #0
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1a4      	bne.n	8008926 <_strtod_l+0x82e>
 80089dc:	e5de      	b.n	800859c <_strtod_l+0x4a4>
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	e7ea      	b.n	80089ba <_strtod_l+0x8c2>
 80089e4:	4613      	mov	r3, r2
 80089e6:	e7e8      	b.n	80089ba <_strtod_l+0x8c2>
 80089e8:	ea53 030a 	orrs.w	r3, r3, sl
 80089ec:	d08c      	beq.n	8008908 <_strtod_l+0x810>
 80089ee:	9b08      	ldr	r3, [sp, #32]
 80089f0:	b1db      	cbz	r3, 8008a2a <_strtod_l+0x932>
 80089f2:	423b      	tst	r3, r7
 80089f4:	d0ef      	beq.n	80089d6 <_strtod_l+0x8de>
 80089f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f8:	9a04      	ldr	r2, [sp, #16]
 80089fa:	4650      	mov	r0, sl
 80089fc:	4659      	mov	r1, fp
 80089fe:	b1c3      	cbz	r3, 8008a32 <_strtod_l+0x93a>
 8008a00:	f7ff fb5c 	bl	80080bc <sulp>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	ec51 0b18 	vmov	r0, r1, d8
 8008a0c:	f7f7 fda6 	bl	800055c <__adddf3>
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	e7df      	b.n	80089d6 <_strtod_l+0x8de>
 8008a16:	4013      	ands	r3, r2
 8008a18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a24:	f04f 3aff 	mov.w	sl, #4294967295
 8008a28:	e7d5      	b.n	80089d6 <_strtod_l+0x8de>
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2c:	ea13 0f0a 	tst.w	r3, sl
 8008a30:	e7e0      	b.n	80089f4 <_strtod_l+0x8fc>
 8008a32:	f7ff fb43 	bl	80080bc <sulp>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	ec51 0b18 	vmov	r0, r1, d8
 8008a3e:	f7f7 fd8b 	bl	8000558 <__aeabi_dsub>
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	4682      	mov	sl, r0
 8008a48:	468b      	mov	fp, r1
 8008a4a:	f7f8 f9a5 	bl	8000d98 <__aeabi_dcmpeq>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d0c1      	beq.n	80089d6 <_strtod_l+0x8de>
 8008a52:	e611      	b.n	8008678 <_strtod_l+0x580>
 8008a54:	fffffc02 	.word	0xfffffc02
 8008a58:	7ff00000 	.word	0x7ff00000
 8008a5c:	39500000 	.word	0x39500000
 8008a60:	000fffff 	.word	0x000fffff
 8008a64:	7fefffff 	.word	0x7fefffff
 8008a68:	0800c118 	.word	0x0800c118
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f002 f8ac 	bl	800abcc <__ratio>
 8008a74:	ec59 8b10 	vmov	r8, r9, d0
 8008a78:	ee10 0a10 	vmov	r0, s0
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f8 f99c 	bl	8000dc0 <__aeabi_dcmple>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d07a      	beq.n	8008b82 <_strtod_l+0xa8a>
 8008a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04a      	beq.n	8008b28 <_strtod_l+0xa30>
 8008a92:	4b95      	ldr	r3, [pc, #596]	; (8008ce8 <_strtod_l+0xbf0>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008ce8 <_strtod_l+0xbf0>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	4b92      	ldr	r3, [pc, #584]	; (8008cec <_strtod_l+0xbf4>)
 8008aa4:	403b      	ands	r3, r7
 8008aa6:	930d      	str	r3, [sp, #52]	; 0x34
 8008aa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aaa:	4b91      	ldr	r3, [pc, #580]	; (8008cf0 <_strtod_l+0xbf8>)
 8008aac:	429a      	cmp	r2, r3
 8008aae:	f040 80b0 	bne.w	8008c12 <_strtod_l+0xb1a>
 8008ab2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ab6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008aba:	ec4b ab10 	vmov	d0, sl, fp
 8008abe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008ac2:	f001 ffab 	bl	800aa1c <__ulp>
 8008ac6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008aca:	ec53 2b10 	vmov	r2, r3, d0
 8008ace:	f7f7 fefb 	bl	80008c8 <__aeabi_dmul>
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	465b      	mov	r3, fp
 8008ad6:	f7f7 fd41 	bl	800055c <__adddf3>
 8008ada:	460b      	mov	r3, r1
 8008adc:	4983      	ldr	r1, [pc, #524]	; (8008cec <_strtod_l+0xbf4>)
 8008ade:	4a85      	ldr	r2, [pc, #532]	; (8008cf4 <_strtod_l+0xbfc>)
 8008ae0:	4019      	ands	r1, r3
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	d960      	bls.n	8008baa <_strtod_l+0xab2>
 8008ae8:	ee18 3a90 	vmov	r3, s17
 8008aec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d104      	bne.n	8008afe <_strtod_l+0xa06>
 8008af4:	ee18 3a10 	vmov	r3, s16
 8008af8:	3301      	adds	r3, #1
 8008afa:	f43f ad45 	beq.w	8008588 <_strtod_l+0x490>
 8008afe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008d00 <_strtod_l+0xc08>
 8008b02:	f04f 3aff 	mov.w	sl, #4294967295
 8008b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f001 fc55 	bl	800a3b8 <_Bfree>
 8008b0e:	9905      	ldr	r1, [sp, #20]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f001 fc51 	bl	800a3b8 <_Bfree>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f001 fc4d 	bl	800a3b8 <_Bfree>
 8008b1e:	4629      	mov	r1, r5
 8008b20:	4620      	mov	r0, r4
 8008b22:	f001 fc49 	bl	800a3b8 <_Bfree>
 8008b26:	e61a      	b.n	800875e <_strtod_l+0x666>
 8008b28:	f1ba 0f00 	cmp.w	sl, #0
 8008b2c:	d11b      	bne.n	8008b66 <_strtod_l+0xa6e>
 8008b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b32:	b9f3      	cbnz	r3, 8008b72 <_strtod_l+0xa7a>
 8008b34:	4b6c      	ldr	r3, [pc, #432]	; (8008ce8 <_strtod_l+0xbf0>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f8 f936 	bl	8000dac <__aeabi_dcmplt>
 8008b40:	b9d0      	cbnz	r0, 8008b78 <_strtod_l+0xa80>
 8008b42:	4640      	mov	r0, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	4b6c      	ldr	r3, [pc, #432]	; (8008cf8 <_strtod_l+0xc00>)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f7f7 febd 	bl	80008c8 <__aeabi_dmul>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	4689      	mov	r9, r1
 8008b52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008b56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008b5a:	9315      	str	r3, [sp, #84]	; 0x54
 8008b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b64:	e79d      	b.n	8008aa2 <_strtod_l+0x9aa>
 8008b66:	f1ba 0f01 	cmp.w	sl, #1
 8008b6a:	d102      	bne.n	8008b72 <_strtod_l+0xa7a>
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	f43f ad83 	beq.w	8008678 <_strtod_l+0x580>
 8008b72:	4b62      	ldr	r3, [pc, #392]	; (8008cfc <_strtod_l+0xc04>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	e78e      	b.n	8008a96 <_strtod_l+0x99e>
 8008b78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008cf8 <_strtod_l+0xc00>
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	e7e7      	b.n	8008b52 <_strtod_l+0xa5a>
 8008b82:	4b5d      	ldr	r3, [pc, #372]	; (8008cf8 <_strtod_l+0xc00>)
 8008b84:	4640      	mov	r0, r8
 8008b86:	4649      	mov	r1, r9
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fe9d 	bl	80008c8 <__aeabi_dmul>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b90:	4680      	mov	r8, r0
 8008b92:	4689      	mov	r9, r1
 8008b94:	b933      	cbnz	r3, 8008ba4 <_strtod_l+0xaac>
 8008b96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b9a:	900e      	str	r0, [sp, #56]	; 0x38
 8008b9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ba2:	e7dd      	b.n	8008b60 <_strtod_l+0xa68>
 8008ba4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008ba8:	e7f9      	b.n	8008b9e <_strtod_l+0xaa6>
 8008baa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008bae:	9b04      	ldr	r3, [sp, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1a8      	bne.n	8008b06 <_strtod_l+0xa0e>
 8008bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bba:	0d1b      	lsrs	r3, r3, #20
 8008bbc:	051b      	lsls	r3, r3, #20
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d1a1      	bne.n	8008b06 <_strtod_l+0xa0e>
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f8 f9df 	bl	8000f88 <__aeabi_d2lz>
 8008bca:	f7f7 fe4f 	bl	800086c <__aeabi_l2d>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 fcbf 	bl	8000558 <__aeabi_dsub>
 8008bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be0:	ea43 030a 	orr.w	r3, r3, sl
 8008be4:	4313      	orrs	r3, r2
 8008be6:	4680      	mov	r8, r0
 8008be8:	4689      	mov	r9, r1
 8008bea:	d055      	beq.n	8008c98 <_strtod_l+0xba0>
 8008bec:	a336      	add	r3, pc, #216	; (adr r3, 8008cc8 <_strtod_l+0xbd0>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f8 f8db 	bl	8000dac <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f47f acd0 	bne.w	800859c <_strtod_l+0x4a4>
 8008bfc:	a334      	add	r3, pc, #208	; (adr r3, 8008cd0 <_strtod_l+0xbd8>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	f7f8 f8ef 	bl	8000de8 <__aeabi_dcmpgt>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f af7b 	beq.w	8008b06 <_strtod_l+0xa0e>
 8008c10:	e4c4      	b.n	800859c <_strtod_l+0x4a4>
 8008c12:	9b04      	ldr	r3, [sp, #16]
 8008c14:	b333      	cbz	r3, 8008c64 <_strtod_l+0xb6c>
 8008c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c1c:	d822      	bhi.n	8008c64 <_strtod_l+0xb6c>
 8008c1e:	a32e      	add	r3, pc, #184	; (adr r3, 8008cd8 <_strtod_l+0xbe0>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	f7f8 f8ca 	bl	8000dc0 <__aeabi_dcmple>
 8008c2c:	b1a0      	cbz	r0, 8008c58 <_strtod_l+0xb60>
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	f7f8 f921 	bl	8000e78 <__aeabi_d2uiz>
 8008c36:	2801      	cmp	r0, #1
 8008c38:	bf38      	it	cc
 8008c3a:	2001      	movcc	r0, #1
 8008c3c:	f7f7 fdca 	bl	80007d4 <__aeabi_ui2d>
 8008c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c42:	4680      	mov	r8, r0
 8008c44:	4689      	mov	r9, r1
 8008c46:	bb23      	cbnz	r3, 8008c92 <_strtod_l+0xb9a>
 8008c48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c4c:	9010      	str	r0, [sp, #64]	; 0x40
 8008c4e:	9311      	str	r3, [sp, #68]	; 0x44
 8008c50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008c54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	9309      	str	r3, [sp, #36]	; 0x24
 8008c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c68:	eeb0 0a48 	vmov.f32	s0, s16
 8008c6c:	eef0 0a68 	vmov.f32	s1, s17
 8008c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c74:	f001 fed2 	bl	800aa1c <__ulp>
 8008c78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c7c:	ec53 2b10 	vmov	r2, r3, d0
 8008c80:	f7f7 fe22 	bl	80008c8 <__aeabi_dmul>
 8008c84:	ec53 2b18 	vmov	r2, r3, d8
 8008c88:	f7f7 fc68 	bl	800055c <__adddf3>
 8008c8c:	4682      	mov	sl, r0
 8008c8e:	468b      	mov	fp, r1
 8008c90:	e78d      	b.n	8008bae <_strtod_l+0xab6>
 8008c92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008c96:	e7db      	b.n	8008c50 <_strtod_l+0xb58>
 8008c98:	a311      	add	r3, pc, #68	; (adr r3, 8008ce0 <_strtod_l+0xbe8>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f8 f885 	bl	8000dac <__aeabi_dcmplt>
 8008ca2:	e7b2      	b.n	8008c0a <_strtod_l+0xb12>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008caa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	f7ff ba6b 	b.w	8008188 <_strtod_l+0x90>
 8008cb2:	2a65      	cmp	r2, #101	; 0x65
 8008cb4:	f43f ab5f 	beq.w	8008376 <_strtod_l+0x27e>
 8008cb8:	2a45      	cmp	r2, #69	; 0x45
 8008cba:	f43f ab5c 	beq.w	8008376 <_strtod_l+0x27e>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f7ff bb94 	b.w	80083ec <_strtod_l+0x2f4>
 8008cc4:	f3af 8000 	nop.w
 8008cc8:	94a03595 	.word	0x94a03595
 8008ccc:	3fdfffff 	.word	0x3fdfffff
 8008cd0:	35afe535 	.word	0x35afe535
 8008cd4:	3fe00000 	.word	0x3fe00000
 8008cd8:	ffc00000 	.word	0xffc00000
 8008cdc:	41dfffff 	.word	0x41dfffff
 8008ce0:	94a03595 	.word	0x94a03595
 8008ce4:	3fcfffff 	.word	0x3fcfffff
 8008ce8:	3ff00000 	.word	0x3ff00000
 8008cec:	7ff00000 	.word	0x7ff00000
 8008cf0:	7fe00000 	.word	0x7fe00000
 8008cf4:	7c9fffff 	.word	0x7c9fffff
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	bff00000 	.word	0xbff00000
 8008d00:	7fefffff 	.word	0x7fefffff

08008d04 <strtof>:
 8008d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d08:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008db8 <strtof+0xb4>
 8008d0c:	4b26      	ldr	r3, [pc, #152]	; (8008da8 <strtof+0xa4>)
 8008d0e:	460a      	mov	r2, r1
 8008d10:	ed2d 8b02 	vpush	{d8}
 8008d14:	4601      	mov	r1, r0
 8008d16:	f8d8 0000 	ldr.w	r0, [r8]
 8008d1a:	f7ff f9ed 	bl	80080f8 <_strtod_l>
 8008d1e:	ec55 4b10 	vmov	r4, r5, d0
 8008d22:	ee10 2a10 	vmov	r2, s0
 8008d26:	ee10 0a10 	vmov	r0, s0
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f8 f865 	bl	8000dfc <__aeabi_dcmpun>
 8008d32:	b190      	cbz	r0, 8008d5a <strtof+0x56>
 8008d34:	2d00      	cmp	r5, #0
 8008d36:	481d      	ldr	r0, [pc, #116]	; (8008dac <strtof+0xa8>)
 8008d38:	da09      	bge.n	8008d4e <strtof+0x4a>
 8008d3a:	f002 fa29 	bl	800b190 <nanf>
 8008d3e:	eeb1 8a40 	vneg.f32	s16, s0
 8008d42:	eeb0 0a48 	vmov.f32	s0, s16
 8008d46:	ecbd 8b02 	vpop	{d8}
 8008d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4e:	ecbd 8b02 	vpop	{d8}
 8008d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	f002 ba1b 	b.w	800b190 <nanf>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	f7f8 f8ab 	bl	8000eb8 <__aeabi_d2f>
 8008d62:	ee08 0a10 	vmov	s16, r0
 8008d66:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008db0 <strtof+0xac>
 8008d6a:	eeb0 7ac8 	vabs.f32	s14, s16
 8008d6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d76:	dde4      	ble.n	8008d42 <strtof+0x3e>
 8008d78:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <strtof+0xb0>)
 8008d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d82:	4620      	mov	r0, r4
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f8 f839 	bl	8000dfc <__aeabi_dcmpun>
 8008d8a:	b940      	cbnz	r0, 8008d9e <strtof+0x9a>
 8008d8c:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <strtof+0xb0>)
 8008d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d92:	4620      	mov	r0, r4
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f8 f813 	bl	8000dc0 <__aeabi_dcmple>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d0d1      	beq.n	8008d42 <strtof+0x3e>
 8008d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8008da2:	2222      	movs	r2, #34	; 0x22
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	e7cc      	b.n	8008d42 <strtof+0x3e>
 8008da8:	200002e0 	.word	0x200002e0
 8008dac:	0800c4f0 	.word	0x0800c4f0
 8008db0:	7f7fffff 	.word	0x7f7fffff
 8008db4:	7fefffff 	.word	0x7fefffff
 8008db8:	20000278 	.word	0x20000278

08008dbc <_strtoul_l.constprop.0>:
 8008dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	4f36      	ldr	r7, [pc, #216]	; (8008e9c <_strtoul_l.constprop.0+0xe0>)
 8008dc2:	4686      	mov	lr, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dcc:	5de6      	ldrb	r6, [r4, r7]
 8008dce:	f016 0608 	ands.w	r6, r6, #8
 8008dd2:	d1f8      	bne.n	8008dc6 <_strtoul_l.constprop.0+0xa>
 8008dd4:	2c2d      	cmp	r4, #45	; 0x2d
 8008dd6:	d12f      	bne.n	8008e38 <_strtoul_l.constprop.0+0x7c>
 8008dd8:	782c      	ldrb	r4, [r5, #0]
 8008dda:	2601      	movs	r6, #1
 8008ddc:	1c85      	adds	r5, r0, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d057      	beq.n	8008e92 <_strtoul_l.constprop.0+0xd6>
 8008de2:	2b10      	cmp	r3, #16
 8008de4:	d109      	bne.n	8008dfa <_strtoul_l.constprop.0+0x3e>
 8008de6:	2c30      	cmp	r4, #48	; 0x30
 8008de8:	d107      	bne.n	8008dfa <_strtoul_l.constprop.0+0x3e>
 8008dea:	7828      	ldrb	r0, [r5, #0]
 8008dec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008df0:	2858      	cmp	r0, #88	; 0x58
 8008df2:	d149      	bne.n	8008e88 <_strtoul_l.constprop.0+0xcc>
 8008df4:	786c      	ldrb	r4, [r5, #1]
 8008df6:	2310      	movs	r3, #16
 8008df8:	3502      	adds	r5, #2
 8008dfa:	f04f 38ff 	mov.w	r8, #4294967295
 8008dfe:	2700      	movs	r7, #0
 8008e00:	fbb8 f8f3 	udiv	r8, r8, r3
 8008e04:	fb03 f908 	mul.w	r9, r3, r8
 8008e08:	ea6f 0909 	mvn.w	r9, r9
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008e12:	f1bc 0f09 	cmp.w	ip, #9
 8008e16:	d814      	bhi.n	8008e42 <_strtoul_l.constprop.0+0x86>
 8008e18:	4664      	mov	r4, ip
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	dd22      	ble.n	8008e64 <_strtoul_l.constprop.0+0xa8>
 8008e1e:	2f00      	cmp	r7, #0
 8008e20:	db1d      	blt.n	8008e5e <_strtoul_l.constprop.0+0xa2>
 8008e22:	4580      	cmp	r8, r0
 8008e24:	d31b      	bcc.n	8008e5e <_strtoul_l.constprop.0+0xa2>
 8008e26:	d101      	bne.n	8008e2c <_strtoul_l.constprop.0+0x70>
 8008e28:	45a1      	cmp	r9, r4
 8008e2a:	db18      	blt.n	8008e5e <_strtoul_l.constprop.0+0xa2>
 8008e2c:	fb00 4003 	mla	r0, r0, r3, r4
 8008e30:	2701      	movs	r7, #1
 8008e32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e36:	e7ea      	b.n	8008e0e <_strtoul_l.constprop.0+0x52>
 8008e38:	2c2b      	cmp	r4, #43	; 0x2b
 8008e3a:	bf04      	itt	eq
 8008e3c:	782c      	ldrbeq	r4, [r5, #0]
 8008e3e:	1c85      	addeq	r5, r0, #2
 8008e40:	e7cd      	b.n	8008dde <_strtoul_l.constprop.0+0x22>
 8008e42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e46:	f1bc 0f19 	cmp.w	ip, #25
 8008e4a:	d801      	bhi.n	8008e50 <_strtoul_l.constprop.0+0x94>
 8008e4c:	3c37      	subs	r4, #55	; 0x37
 8008e4e:	e7e4      	b.n	8008e1a <_strtoul_l.constprop.0+0x5e>
 8008e50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e54:	f1bc 0f19 	cmp.w	ip, #25
 8008e58:	d804      	bhi.n	8008e64 <_strtoul_l.constprop.0+0xa8>
 8008e5a:	3c57      	subs	r4, #87	; 0x57
 8008e5c:	e7dd      	b.n	8008e1a <_strtoul_l.constprop.0+0x5e>
 8008e5e:	f04f 37ff 	mov.w	r7, #4294967295
 8008e62:	e7e6      	b.n	8008e32 <_strtoul_l.constprop.0+0x76>
 8008e64:	2f00      	cmp	r7, #0
 8008e66:	da07      	bge.n	8008e78 <_strtoul_l.constprop.0+0xbc>
 8008e68:	2322      	movs	r3, #34	; 0x22
 8008e6a:	f8ce 3000 	str.w	r3, [lr]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	b932      	cbnz	r2, 8008e82 <_strtoul_l.constprop.0+0xc6>
 8008e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e78:	b106      	cbz	r6, 8008e7c <_strtoul_l.constprop.0+0xc0>
 8008e7a:	4240      	negs	r0, r0
 8008e7c:	2a00      	cmp	r2, #0
 8008e7e:	d0f9      	beq.n	8008e74 <_strtoul_l.constprop.0+0xb8>
 8008e80:	b107      	cbz	r7, 8008e84 <_strtoul_l.constprop.0+0xc8>
 8008e82:	1e69      	subs	r1, r5, #1
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	e7f5      	b.n	8008e74 <_strtoul_l.constprop.0+0xb8>
 8008e88:	2430      	movs	r4, #48	; 0x30
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1b5      	bne.n	8008dfa <_strtoul_l.constprop.0+0x3e>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	e7b3      	b.n	8008dfa <_strtoul_l.constprop.0+0x3e>
 8008e92:	2c30      	cmp	r4, #48	; 0x30
 8008e94:	d0a9      	beq.n	8008dea <_strtoul_l.constprop.0+0x2e>
 8008e96:	230a      	movs	r3, #10
 8008e98:	e7af      	b.n	8008dfa <_strtoul_l.constprop.0+0x3e>
 8008e9a:	bf00      	nop
 8008e9c:	0800c141 	.word	0x0800c141

08008ea0 <strtoul>:
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	460a      	mov	r2, r1
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	4802      	ldr	r0, [pc, #8]	; (8008eb0 <strtoul+0x10>)
 8008ea8:	6800      	ldr	r0, [r0, #0]
 8008eaa:	f7ff bf87 	b.w	8008dbc <_strtoul_l.constprop.0>
 8008eae:	bf00      	nop
 8008eb0:	20000278 	.word	0x20000278

08008eb4 <_vsniprintf_r>:
 8008eb4:	b530      	push	{r4, r5, lr}
 8008eb6:	4614      	mov	r4, r2
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	b09b      	sub	sp, #108	; 0x6c
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	da05      	bge.n	8008ece <_vsniprintf_r+0x1a>
 8008ec2:	238b      	movs	r3, #139	; 0x8b
 8008ec4:	6003      	str	r3, [r0, #0]
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	b01b      	add	sp, #108	; 0x6c
 8008ecc:	bd30      	pop	{r4, r5, pc}
 8008ece:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ed2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ed6:	bf14      	ite	ne
 8008ed8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008edc:	4623      	moveq	r3, r4
 8008ede:	9302      	str	r3, [sp, #8]
 8008ee0:	9305      	str	r3, [sp, #20]
 8008ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ee6:	9100      	str	r1, [sp, #0]
 8008ee8:	9104      	str	r1, [sp, #16]
 8008eea:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008eee:	4669      	mov	r1, sp
 8008ef0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008ef2:	f002 f835 	bl	800af60 <_svfiprintf_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	bfbc      	itt	lt
 8008efa:	238b      	movlt	r3, #139	; 0x8b
 8008efc:	602b      	strlt	r3, [r5, #0]
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	d0e3      	beq.n	8008eca <_vsniprintf_r+0x16>
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e7df      	b.n	8008eca <_vsniprintf_r+0x16>
	...

08008f0c <vsniprintf>:
 8008f0c:	b507      	push	{r0, r1, r2, lr}
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4613      	mov	r3, r2
 8008f12:	460a      	mov	r2, r1
 8008f14:	4601      	mov	r1, r0
 8008f16:	4803      	ldr	r0, [pc, #12]	; (8008f24 <vsniprintf+0x18>)
 8008f18:	6800      	ldr	r0, [r0, #0]
 8008f1a:	f7ff ffcb 	bl	8008eb4 <_vsniprintf_r>
 8008f1e:	b003      	add	sp, #12
 8008f20:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f24:	20000278 	.word	0x20000278

08008f28 <quorem>:
 8008f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	6903      	ldr	r3, [r0, #16]
 8008f2e:	690c      	ldr	r4, [r1, #16]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	4607      	mov	r7, r0
 8008f34:	f2c0 8081 	blt.w	800903a <quorem+0x112>
 8008f38:	3c01      	subs	r4, #1
 8008f3a:	f101 0814 	add.w	r8, r1, #20
 8008f3e:	f100 0514 	add.w	r5, r0, #20
 8008f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f50:	3301      	adds	r3, #1
 8008f52:	429a      	cmp	r2, r3
 8008f54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f60:	d331      	bcc.n	8008fc6 <quorem+0x9e>
 8008f62:	f04f 0e00 	mov.w	lr, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	46ac      	mov	ip, r5
 8008f6a:	46f2      	mov	sl, lr
 8008f6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f70:	b293      	uxth	r3, r2
 8008f72:	fb06 e303 	mla	r3, r6, r3, lr
 8008f76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f80:	f8dc a000 	ldr.w	sl, [ip]
 8008f84:	0c12      	lsrs	r2, r2, #16
 8008f86:	fa13 f38a 	uxtah	r3, r3, sl
 8008f8a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f96:	b292      	uxth	r2, r2
 8008f98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008fa4:	4581      	cmp	r9, r0
 8008fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008faa:	f84c 3b04 	str.w	r3, [ip], #4
 8008fae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fb2:	d2db      	bcs.n	8008f6c <quorem+0x44>
 8008fb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fb8:	b92b      	cbnz	r3, 8008fc6 <quorem+0x9e>
 8008fba:	9b01      	ldr	r3, [sp, #4]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	d32e      	bcc.n	8009022 <quorem+0xfa>
 8008fc4:	613c      	str	r4, [r7, #16]
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f001 fc82 	bl	800a8d0 <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	db24      	blt.n	800901a <quorem+0xf2>
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f04f 0c00 	mov.w	ip, #0
 8008fd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fdc:	f8d0 e000 	ldr.w	lr, [r0]
 8008fe0:	b293      	uxth	r3, r2
 8008fe2:	ebac 0303 	sub.w	r3, ip, r3
 8008fe6:	0c12      	lsrs	r2, r2, #16
 8008fe8:	fa13 f38e 	uxtah	r3, r3, lr
 8008fec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ffa:	45c1      	cmp	r9, r8
 8008ffc:	f840 3b04 	str.w	r3, [r0], #4
 8009000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009004:	d2e8      	bcs.n	8008fd8 <quorem+0xb0>
 8009006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800900a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900e:	b922      	cbnz	r2, 800901a <quorem+0xf2>
 8009010:	3b04      	subs	r3, #4
 8009012:	429d      	cmp	r5, r3
 8009014:	461a      	mov	r2, r3
 8009016:	d30a      	bcc.n	800902e <quorem+0x106>
 8009018:	613c      	str	r4, [r7, #16]
 800901a:	4630      	mov	r0, r6
 800901c:	b003      	add	sp, #12
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	3b04      	subs	r3, #4
 8009026:	2a00      	cmp	r2, #0
 8009028:	d1cc      	bne.n	8008fc4 <quorem+0x9c>
 800902a:	3c01      	subs	r4, #1
 800902c:	e7c7      	b.n	8008fbe <quorem+0x96>
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	3b04      	subs	r3, #4
 8009032:	2a00      	cmp	r2, #0
 8009034:	d1f0      	bne.n	8009018 <quorem+0xf0>
 8009036:	3c01      	subs	r4, #1
 8009038:	e7eb      	b.n	8009012 <quorem+0xea>
 800903a:	2000      	movs	r0, #0
 800903c:	e7ee      	b.n	800901c <quorem+0xf4>
	...

08009040 <_dtoa_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	ed2d 8b04 	vpush	{d8-d9}
 8009048:	ec57 6b10 	vmov	r6, r7, d0
 800904c:	b093      	sub	sp, #76	; 0x4c
 800904e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009050:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009054:	9106      	str	r1, [sp, #24]
 8009056:	ee10 aa10 	vmov	sl, s0
 800905a:	4604      	mov	r4, r0
 800905c:	9209      	str	r2, [sp, #36]	; 0x24
 800905e:	930c      	str	r3, [sp, #48]	; 0x30
 8009060:	46bb      	mov	fp, r7
 8009062:	b975      	cbnz	r5, 8009082 <_dtoa_r+0x42>
 8009064:	2010      	movs	r0, #16
 8009066:	f001 f94d 	bl	800a304 <malloc>
 800906a:	4602      	mov	r2, r0
 800906c:	6260      	str	r0, [r4, #36]	; 0x24
 800906e:	b920      	cbnz	r0, 800907a <_dtoa_r+0x3a>
 8009070:	4ba7      	ldr	r3, [pc, #668]	; (8009310 <_dtoa_r+0x2d0>)
 8009072:	21ea      	movs	r1, #234	; 0xea
 8009074:	48a7      	ldr	r0, [pc, #668]	; (8009314 <_dtoa_r+0x2d4>)
 8009076:	f002 f8b3 	bl	800b1e0 <__assert_func>
 800907a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800907e:	6005      	str	r5, [r0, #0]
 8009080:	60c5      	str	r5, [r0, #12]
 8009082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009084:	6819      	ldr	r1, [r3, #0]
 8009086:	b151      	cbz	r1, 800909e <_dtoa_r+0x5e>
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	604a      	str	r2, [r1, #4]
 800908c:	2301      	movs	r3, #1
 800908e:	4093      	lsls	r3, r2
 8009090:	608b      	str	r3, [r1, #8]
 8009092:	4620      	mov	r0, r4
 8009094:	f001 f990 	bl	800a3b8 <_Bfree>
 8009098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	1e3b      	subs	r3, r7, #0
 80090a0:	bfaa      	itet	ge
 80090a2:	2300      	movge	r3, #0
 80090a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80090a8:	f8c8 3000 	strge.w	r3, [r8]
 80090ac:	4b9a      	ldr	r3, [pc, #616]	; (8009318 <_dtoa_r+0x2d8>)
 80090ae:	bfbc      	itt	lt
 80090b0:	2201      	movlt	r2, #1
 80090b2:	f8c8 2000 	strlt.w	r2, [r8]
 80090b6:	ea33 030b 	bics.w	r3, r3, fp
 80090ba:	d11b      	bne.n	80090f4 <_dtoa_r+0xb4>
 80090bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090be:	f242 730f 	movw	r3, #9999	; 0x270f
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090c8:	4333      	orrs	r3, r6
 80090ca:	f000 8592 	beq.w	8009bf2 <_dtoa_r+0xbb2>
 80090ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090d0:	b963      	cbnz	r3, 80090ec <_dtoa_r+0xac>
 80090d2:	4b92      	ldr	r3, [pc, #584]	; (800931c <_dtoa_r+0x2dc>)
 80090d4:	e022      	b.n	800911c <_dtoa_r+0xdc>
 80090d6:	4b92      	ldr	r3, [pc, #584]	; (8009320 <_dtoa_r+0x2e0>)
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	3308      	adds	r3, #8
 80090dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	b013      	add	sp, #76	; 0x4c
 80090e4:	ecbd 8b04 	vpop	{d8-d9}
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	4b8b      	ldr	r3, [pc, #556]	; (800931c <_dtoa_r+0x2dc>)
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	3303      	adds	r3, #3
 80090f2:	e7f3      	b.n	80090dc <_dtoa_r+0x9c>
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4650      	mov	r0, sl
 80090fa:	4659      	mov	r1, fp
 80090fc:	f7f7 fe4c 	bl	8000d98 <__aeabi_dcmpeq>
 8009100:	ec4b ab19 	vmov	d9, sl, fp
 8009104:	4680      	mov	r8, r0
 8009106:	b158      	cbz	r0, 8009120 <_dtoa_r+0xe0>
 8009108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910a:	2301      	movs	r3, #1
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 856b 	beq.w	8009bec <_dtoa_r+0xbac>
 8009116:	4883      	ldr	r0, [pc, #524]	; (8009324 <_dtoa_r+0x2e4>)
 8009118:	6018      	str	r0, [r3, #0]
 800911a:	1e43      	subs	r3, r0, #1
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	e7df      	b.n	80090e0 <_dtoa_r+0xa0>
 8009120:	ec4b ab10 	vmov	d0, sl, fp
 8009124:	aa10      	add	r2, sp, #64	; 0x40
 8009126:	a911      	add	r1, sp, #68	; 0x44
 8009128:	4620      	mov	r0, r4
 800912a:	f001 fcf3 	bl	800ab14 <__d2b>
 800912e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009132:	ee08 0a10 	vmov	s16, r0
 8009136:	2d00      	cmp	r5, #0
 8009138:	f000 8084 	beq.w	8009244 <_dtoa_r+0x204>
 800913c:	ee19 3a90 	vmov	r3, s19
 8009140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009144:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009148:	4656      	mov	r6, sl
 800914a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800914e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009152:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009156:	4b74      	ldr	r3, [pc, #464]	; (8009328 <_dtoa_r+0x2e8>)
 8009158:	2200      	movs	r2, #0
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 f9fb 	bl	8000558 <__aeabi_dsub>
 8009162:	a365      	add	r3, pc, #404	; (adr r3, 80092f8 <_dtoa_r+0x2b8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fbae 	bl	80008c8 <__aeabi_dmul>
 800916c:	a364      	add	r3, pc, #400	; (adr r3, 8009300 <_dtoa_r+0x2c0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f9f3 	bl	800055c <__adddf3>
 8009176:	4606      	mov	r6, r0
 8009178:	4628      	mov	r0, r5
 800917a:	460f      	mov	r7, r1
 800917c:	f7f7 fb3a 	bl	80007f4 <__aeabi_i2d>
 8009180:	a361      	add	r3, pc, #388	; (adr r3, 8009308 <_dtoa_r+0x2c8>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f7 fb9f 	bl	80008c8 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 f9e3 	bl	800055c <__adddf3>
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	f7f7 fe45 	bl	8000e28 <__aeabi_d2iz>
 800919e:	2200      	movs	r2, #0
 80091a0:	9000      	str	r0, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 fe00 	bl	8000dac <__aeabi_dcmplt>
 80091ac:	b150      	cbz	r0, 80091c4 <_dtoa_r+0x184>
 80091ae:	9800      	ldr	r0, [sp, #0]
 80091b0:	f7f7 fb20 	bl	80007f4 <__aeabi_i2d>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f7 fdee 	bl	8000d98 <__aeabi_dcmpeq>
 80091bc:	b910      	cbnz	r0, 80091c4 <_dtoa_r+0x184>
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	2b16      	cmp	r3, #22
 80091c8:	d85a      	bhi.n	8009280 <_dtoa_r+0x240>
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	4b57      	ldr	r3, [pc, #348]	; (800932c <_dtoa_r+0x2ec>)
 80091ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f7f7 fde7 	bl	8000dac <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d050      	beq.n	8009284 <_dtoa_r+0x244>
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ee:	1b5d      	subs	r5, r3, r5
 80091f0:	1e6b      	subs	r3, r5, #1
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	bf45      	ittet	mi
 80091f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80091fa:	9304      	strmi	r3, [sp, #16]
 80091fc:	2300      	movpl	r3, #0
 80091fe:	2300      	movmi	r3, #0
 8009200:	bf4c      	ite	mi
 8009202:	9305      	strmi	r3, [sp, #20]
 8009204:	9304      	strpl	r3, [sp, #16]
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	db3d      	blt.n	8009288 <_dtoa_r+0x248>
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	9a00      	ldr	r2, [sp, #0]
 8009210:	920a      	str	r2, [sp, #40]	; 0x28
 8009212:	4413      	add	r3, r2
 8009214:	9305      	str	r3, [sp, #20]
 8009216:	2300      	movs	r3, #0
 8009218:	9307      	str	r3, [sp, #28]
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	2b09      	cmp	r3, #9
 800921e:	f200 8089 	bhi.w	8009334 <_dtoa_r+0x2f4>
 8009222:	2b05      	cmp	r3, #5
 8009224:	bfc4      	itt	gt
 8009226:	3b04      	subgt	r3, #4
 8009228:	9306      	strgt	r3, [sp, #24]
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	f1a3 0302 	sub.w	r3, r3, #2
 8009230:	bfcc      	ite	gt
 8009232:	2500      	movgt	r5, #0
 8009234:	2501      	movle	r5, #1
 8009236:	2b03      	cmp	r3, #3
 8009238:	f200 8087 	bhi.w	800934a <_dtoa_r+0x30a>
 800923c:	e8df f003 	tbb	[pc, r3]
 8009240:	59383a2d 	.word	0x59383a2d
 8009244:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009248:	441d      	add	r5, r3
 800924a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800924e:	2b20      	cmp	r3, #32
 8009250:	bfc1      	itttt	gt
 8009252:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009256:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800925a:	fa0b f303 	lslgt.w	r3, fp, r3
 800925e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009262:	bfda      	itte	le
 8009264:	f1c3 0320 	rsble	r3, r3, #32
 8009268:	fa06 f003 	lslle.w	r0, r6, r3
 800926c:	4318      	orrgt	r0, r3
 800926e:	f7f7 fab1 	bl	80007d4 <__aeabi_ui2d>
 8009272:	2301      	movs	r3, #1
 8009274:	4606      	mov	r6, r0
 8009276:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800927a:	3d01      	subs	r5, #1
 800927c:	930e      	str	r3, [sp, #56]	; 0x38
 800927e:	e76a      	b.n	8009156 <_dtoa_r+0x116>
 8009280:	2301      	movs	r3, #1
 8009282:	e7b2      	b.n	80091ea <_dtoa_r+0x1aa>
 8009284:	900b      	str	r0, [sp, #44]	; 0x2c
 8009286:	e7b1      	b.n	80091ec <_dtoa_r+0x1ac>
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	9a00      	ldr	r2, [sp, #0]
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	4253      	negs	r3, r2
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	; 0x28
 8009298:	e7bf      	b.n	800921a <_dtoa_r+0x1da>
 800929a:	2300      	movs	r3, #0
 800929c:	9308      	str	r3, [sp, #32]
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dc55      	bgt.n	8009350 <_dtoa_r+0x310>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092aa:	461a      	mov	r2, r3
 80092ac:	9209      	str	r2, [sp, #36]	; 0x24
 80092ae:	e00c      	b.n	80092ca <_dtoa_r+0x28a>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7f3      	b.n	800929c <_dtoa_r+0x25c>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	4413      	add	r3, r2
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	3301      	adds	r3, #1
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	bfb8      	it	lt
 80092c8:	2301      	movlt	r3, #1
 80092ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092cc:	2200      	movs	r2, #0
 80092ce:	6042      	str	r2, [r0, #4]
 80092d0:	2204      	movs	r2, #4
 80092d2:	f102 0614 	add.w	r6, r2, #20
 80092d6:	429e      	cmp	r6, r3
 80092d8:	6841      	ldr	r1, [r0, #4]
 80092da:	d93d      	bls.n	8009358 <_dtoa_r+0x318>
 80092dc:	4620      	mov	r0, r4
 80092de:	f001 f82b 	bl	800a338 <_Balloc>
 80092e2:	9001      	str	r0, [sp, #4]
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d13b      	bne.n	8009360 <_dtoa_r+0x320>
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <_dtoa_r+0x2f0>)
 80092ea:	4602      	mov	r2, r0
 80092ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092f0:	e6c0      	b.n	8009074 <_dtoa_r+0x34>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7df      	b.n	80092b6 <_dtoa_r+0x276>
 80092f6:	bf00      	nop
 80092f8:	636f4361 	.word	0x636f4361
 80092fc:	3fd287a7 	.word	0x3fd287a7
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	509f79fb 	.word	0x509f79fb
 800930c:	3fd34413 	.word	0x3fd34413
 8009310:	0800c24e 	.word	0x0800c24e
 8009314:	0800c265 	.word	0x0800c265
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800c24a 	.word	0x0800c24a
 8009320:	0800c241 	.word	0x0800c241
 8009324:	0800c0cd 	.word	0x0800c0cd
 8009328:	3ff80000 	.word	0x3ff80000
 800932c:	0800c3d0 	.word	0x0800c3d0
 8009330:	0800c2c0 	.word	0x0800c2c0
 8009334:	2501      	movs	r5, #1
 8009336:	2300      	movs	r3, #0
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9508      	str	r5, [sp, #32]
 800933c:	f04f 33ff 	mov.w	r3, #4294967295
 8009340:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	2312      	movs	r3, #18
 8009348:	e7b0      	b.n	80092ac <_dtoa_r+0x26c>
 800934a:	2301      	movs	r3, #1
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	e7f5      	b.n	800933c <_dtoa_r+0x2fc>
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009356:	e7b8      	b.n	80092ca <_dtoa_r+0x28a>
 8009358:	3101      	adds	r1, #1
 800935a:	6041      	str	r1, [r0, #4]
 800935c:	0052      	lsls	r2, r2, #1
 800935e:	e7b8      	b.n	80092d2 <_dtoa_r+0x292>
 8009360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009362:	9a01      	ldr	r2, [sp, #4]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	2b0e      	cmp	r3, #14
 800936a:	f200 809d 	bhi.w	80094a8 <_dtoa_r+0x468>
 800936e:	2d00      	cmp	r5, #0
 8009370:	f000 809a 	beq.w	80094a8 <_dtoa_r+0x468>
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd32      	ble.n	80093e0 <_dtoa_r+0x3a0>
 800937a:	4ab7      	ldr	r2, [pc, #732]	; (8009658 <_dtoa_r+0x618>)
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009384:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	05d8      	lsls	r0, r3, #23
 800938c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009390:	d516      	bpl.n	80093c0 <_dtoa_r+0x380>
 8009392:	4bb2      	ldr	r3, [pc, #712]	; (800965c <_dtoa_r+0x61c>)
 8009394:	ec51 0b19 	vmov	r0, r1, d9
 8009398:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800939c:	f7f7 fbbe 	bl	8000b1c <__aeabi_ddiv>
 80093a0:	f007 070f 	and.w	r7, r7, #15
 80093a4:	4682      	mov	sl, r0
 80093a6:	468b      	mov	fp, r1
 80093a8:	2503      	movs	r5, #3
 80093aa:	4eac      	ldr	r6, [pc, #688]	; (800965c <_dtoa_r+0x61c>)
 80093ac:	b957      	cbnz	r7, 80093c4 <_dtoa_r+0x384>
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	4650      	mov	r0, sl
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f7 fbb1 	bl	8000b1c <__aeabi_ddiv>
 80093ba:	4682      	mov	sl, r0
 80093bc:	468b      	mov	fp, r1
 80093be:	e028      	b.n	8009412 <_dtoa_r+0x3d2>
 80093c0:	2502      	movs	r5, #2
 80093c2:	e7f2      	b.n	80093aa <_dtoa_r+0x36a>
 80093c4:	07f9      	lsls	r1, r7, #31
 80093c6:	d508      	bpl.n	80093da <_dtoa_r+0x39a>
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093d0:	f7f7 fa7a 	bl	80008c8 <__aeabi_dmul>
 80093d4:	3501      	adds	r5, #1
 80093d6:	4680      	mov	r8, r0
 80093d8:	4689      	mov	r9, r1
 80093da:	107f      	asrs	r7, r7, #1
 80093dc:	3608      	adds	r6, #8
 80093de:	e7e5      	b.n	80093ac <_dtoa_r+0x36c>
 80093e0:	f000 809b 	beq.w	800951a <_dtoa_r+0x4da>
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	4f9d      	ldr	r7, [pc, #628]	; (800965c <_dtoa_r+0x61c>)
 80093e8:	425e      	negs	r6, r3
 80093ea:	4b9b      	ldr	r3, [pc, #620]	; (8009658 <_dtoa_r+0x618>)
 80093ec:	f006 020f 	and.w	r2, r6, #15
 80093f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	ec51 0b19 	vmov	r0, r1, d9
 80093fc:	f7f7 fa64 	bl	80008c8 <__aeabi_dmul>
 8009400:	1136      	asrs	r6, r6, #4
 8009402:	4682      	mov	sl, r0
 8009404:	468b      	mov	fp, r1
 8009406:	2300      	movs	r3, #0
 8009408:	2502      	movs	r5, #2
 800940a:	2e00      	cmp	r6, #0
 800940c:	d17a      	bne.n	8009504 <_dtoa_r+0x4c4>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1d3      	bne.n	80093ba <_dtoa_r+0x37a>
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8082 	beq.w	800951e <_dtoa_r+0x4de>
 800941a:	4b91      	ldr	r3, [pc, #580]	; (8009660 <_dtoa_r+0x620>)
 800941c:	2200      	movs	r2, #0
 800941e:	4650      	mov	r0, sl
 8009420:	4659      	mov	r1, fp
 8009422:	f7f7 fcc3 	bl	8000dac <__aeabi_dcmplt>
 8009426:	2800      	cmp	r0, #0
 8009428:	d079      	beq.n	800951e <_dtoa_r+0x4de>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d076      	beq.n	800951e <_dtoa_r+0x4de>
 8009430:	9b02      	ldr	r3, [sp, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dd36      	ble.n	80094a4 <_dtoa_r+0x464>
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	1e5f      	subs	r7, r3, #1
 800943e:	2200      	movs	r2, #0
 8009440:	4b88      	ldr	r3, [pc, #544]	; (8009664 <_dtoa_r+0x624>)
 8009442:	f7f7 fa41 	bl	80008c8 <__aeabi_dmul>
 8009446:	9e02      	ldr	r6, [sp, #8]
 8009448:	4682      	mov	sl, r0
 800944a:	468b      	mov	fp, r1
 800944c:	3501      	adds	r5, #1
 800944e:	4628      	mov	r0, r5
 8009450:	f7f7 f9d0 	bl	80007f4 <__aeabi_i2d>
 8009454:	4652      	mov	r2, sl
 8009456:	465b      	mov	r3, fp
 8009458:	f7f7 fa36 	bl	80008c8 <__aeabi_dmul>
 800945c:	4b82      	ldr	r3, [pc, #520]	; (8009668 <_dtoa_r+0x628>)
 800945e:	2200      	movs	r2, #0
 8009460:	f7f7 f87c 	bl	800055c <__adddf3>
 8009464:	46d0      	mov	r8, sl
 8009466:	46d9      	mov	r9, fp
 8009468:	4682      	mov	sl, r0
 800946a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800946e:	2e00      	cmp	r6, #0
 8009470:	d158      	bne.n	8009524 <_dtoa_r+0x4e4>
 8009472:	4b7e      	ldr	r3, [pc, #504]	; (800966c <_dtoa_r+0x62c>)
 8009474:	2200      	movs	r2, #0
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f7 f86d 	bl	8000558 <__aeabi_dsub>
 800947e:	4652      	mov	r2, sl
 8009480:	465b      	mov	r3, fp
 8009482:	4680      	mov	r8, r0
 8009484:	4689      	mov	r9, r1
 8009486:	f7f7 fcaf 	bl	8000de8 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f040 8295 	bne.w	80099ba <_dtoa_r+0x97a>
 8009490:	4652      	mov	r2, sl
 8009492:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	f7f7 fc87 	bl	8000dac <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f040 8289 	bne.w	80099b6 <_dtoa_r+0x976>
 80094a4:	ec5b ab19 	vmov	sl, fp, d9
 80094a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f2c0 8148 	blt.w	8009740 <_dtoa_r+0x700>
 80094b0:	9a00      	ldr	r2, [sp, #0]
 80094b2:	2a0e      	cmp	r2, #14
 80094b4:	f300 8144 	bgt.w	8009740 <_dtoa_r+0x700>
 80094b8:	4b67      	ldr	r3, [pc, #412]	; (8009658 <_dtoa_r+0x618>)
 80094ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f280 80d5 	bge.w	8009674 <_dtoa_r+0x634>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f300 80d1 	bgt.w	8009674 <_dtoa_r+0x634>
 80094d2:	f040 826f 	bne.w	80099b4 <_dtoa_r+0x974>
 80094d6:	4b65      	ldr	r3, [pc, #404]	; (800966c <_dtoa_r+0x62c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f9f3 	bl	80008c8 <__aeabi_dmul>
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	f7f7 fc75 	bl	8000dd4 <__aeabi_dcmpge>
 80094ea:	9e03      	ldr	r6, [sp, #12]
 80094ec:	4637      	mov	r7, r6
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f040 8245 	bne.w	800997e <_dtoa_r+0x93e>
 80094f4:	9d01      	ldr	r5, [sp, #4]
 80094f6:	2331      	movs	r3, #49	; 0x31
 80094f8:	f805 3b01 	strb.w	r3, [r5], #1
 80094fc:	9b00      	ldr	r3, [sp, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	e240      	b.n	8009986 <_dtoa_r+0x946>
 8009504:	07f2      	lsls	r2, r6, #31
 8009506:	d505      	bpl.n	8009514 <_dtoa_r+0x4d4>
 8009508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800950c:	f7f7 f9dc 	bl	80008c8 <__aeabi_dmul>
 8009510:	3501      	adds	r5, #1
 8009512:	2301      	movs	r3, #1
 8009514:	1076      	asrs	r6, r6, #1
 8009516:	3708      	adds	r7, #8
 8009518:	e777      	b.n	800940a <_dtoa_r+0x3ca>
 800951a:	2502      	movs	r5, #2
 800951c:	e779      	b.n	8009412 <_dtoa_r+0x3d2>
 800951e:	9f00      	ldr	r7, [sp, #0]
 8009520:	9e03      	ldr	r6, [sp, #12]
 8009522:	e794      	b.n	800944e <_dtoa_r+0x40e>
 8009524:	9901      	ldr	r1, [sp, #4]
 8009526:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <_dtoa_r+0x618>)
 8009528:	4431      	add	r1, r6
 800952a:	910d      	str	r1, [sp, #52]	; 0x34
 800952c:	9908      	ldr	r1, [sp, #32]
 800952e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009532:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009536:	2900      	cmp	r1, #0
 8009538:	d043      	beq.n	80095c2 <_dtoa_r+0x582>
 800953a:	494d      	ldr	r1, [pc, #308]	; (8009670 <_dtoa_r+0x630>)
 800953c:	2000      	movs	r0, #0
 800953e:	f7f7 faed 	bl	8000b1c <__aeabi_ddiv>
 8009542:	4652      	mov	r2, sl
 8009544:	465b      	mov	r3, fp
 8009546:	f7f7 f807 	bl	8000558 <__aeabi_dsub>
 800954a:	9d01      	ldr	r5, [sp, #4]
 800954c:	4682      	mov	sl, r0
 800954e:	468b      	mov	fp, r1
 8009550:	4649      	mov	r1, r9
 8009552:	4640      	mov	r0, r8
 8009554:	f7f7 fc68 	bl	8000e28 <__aeabi_d2iz>
 8009558:	4606      	mov	r6, r0
 800955a:	f7f7 f94b 	bl	80007f4 <__aeabi_i2d>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f6 fff7 	bl	8000558 <__aeabi_dsub>
 800956a:	3630      	adds	r6, #48	; 0x30
 800956c:	f805 6b01 	strb.w	r6, [r5], #1
 8009570:	4652      	mov	r2, sl
 8009572:	465b      	mov	r3, fp
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	f7f7 fc18 	bl	8000dac <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	d163      	bne.n	8009648 <_dtoa_r+0x608>
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	4936      	ldr	r1, [pc, #216]	; (8009660 <_dtoa_r+0x620>)
 8009586:	2000      	movs	r0, #0
 8009588:	f7f6 ffe6 	bl	8000558 <__aeabi_dsub>
 800958c:	4652      	mov	r2, sl
 800958e:	465b      	mov	r3, fp
 8009590:	f7f7 fc0c 	bl	8000dac <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	f040 80b5 	bne.w	8009704 <_dtoa_r+0x6c4>
 800959a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959c:	429d      	cmp	r5, r3
 800959e:	d081      	beq.n	80094a4 <_dtoa_r+0x464>
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <_dtoa_r+0x624>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	4650      	mov	r0, sl
 80095a6:	4659      	mov	r1, fp
 80095a8:	f7f7 f98e 	bl	80008c8 <__aeabi_dmul>
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <_dtoa_r+0x624>)
 80095ae:	4682      	mov	sl, r0
 80095b0:	468b      	mov	fp, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	2200      	movs	r2, #0
 80095b8:	f7f7 f986 	bl	80008c8 <__aeabi_dmul>
 80095bc:	4680      	mov	r8, r0
 80095be:	4689      	mov	r9, r1
 80095c0:	e7c6      	b.n	8009550 <_dtoa_r+0x510>
 80095c2:	4650      	mov	r0, sl
 80095c4:	4659      	mov	r1, fp
 80095c6:	f7f7 f97f 	bl	80008c8 <__aeabi_dmul>
 80095ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095cc:	9d01      	ldr	r5, [sp, #4]
 80095ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	4649      	mov	r1, r9
 80095d6:	4640      	mov	r0, r8
 80095d8:	f7f7 fc26 	bl	8000e28 <__aeabi_d2iz>
 80095dc:	4606      	mov	r6, r0
 80095de:	f7f7 f909 	bl	80007f4 <__aeabi_i2d>
 80095e2:	3630      	adds	r6, #48	; 0x30
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f6 ffb4 	bl	8000558 <__aeabi_dsub>
 80095f0:	f805 6b01 	strb.w	r6, [r5], #1
 80095f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f6:	429d      	cmp	r5, r3
 80095f8:	4680      	mov	r8, r0
 80095fa:	4689      	mov	r9, r1
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	d124      	bne.n	800964c <_dtoa_r+0x60c>
 8009602:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <_dtoa_r+0x630>)
 8009604:	4650      	mov	r0, sl
 8009606:	4659      	mov	r1, fp
 8009608:	f7f6 ffa8 	bl	800055c <__adddf3>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f7 fbe8 	bl	8000de8 <__aeabi_dcmpgt>
 8009618:	2800      	cmp	r0, #0
 800961a:	d173      	bne.n	8009704 <_dtoa_r+0x6c4>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	4913      	ldr	r1, [pc, #76]	; (8009670 <_dtoa_r+0x630>)
 8009622:	2000      	movs	r0, #0
 8009624:	f7f6 ff98 	bl	8000558 <__aeabi_dsub>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4640      	mov	r0, r8
 800962e:	4649      	mov	r1, r9
 8009630:	f7f7 fbbc 	bl	8000dac <__aeabi_dcmplt>
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f af35 	beq.w	80094a4 <_dtoa_r+0x464>
 800963a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800963c:	1e6b      	subs	r3, r5, #1
 800963e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009640:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d0f8      	beq.n	800963a <_dtoa_r+0x5fa>
 8009648:	9700      	str	r7, [sp, #0]
 800964a:	e049      	b.n	80096e0 <_dtoa_r+0x6a0>
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <_dtoa_r+0x624>)
 800964e:	f7f7 f93b 	bl	80008c8 <__aeabi_dmul>
 8009652:	4680      	mov	r8, r0
 8009654:	4689      	mov	r9, r1
 8009656:	e7bd      	b.n	80095d4 <_dtoa_r+0x594>
 8009658:	0800c3d0 	.word	0x0800c3d0
 800965c:	0800c3a8 	.word	0x0800c3a8
 8009660:	3ff00000 	.word	0x3ff00000
 8009664:	40240000 	.word	0x40240000
 8009668:	401c0000 	.word	0x401c0000
 800966c:	40140000 	.word	0x40140000
 8009670:	3fe00000 	.word	0x3fe00000
 8009674:	9d01      	ldr	r5, [sp, #4]
 8009676:	4656      	mov	r6, sl
 8009678:	465f      	mov	r7, fp
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 fa4b 	bl	8000b1c <__aeabi_ddiv>
 8009686:	f7f7 fbcf 	bl	8000e28 <__aeabi_d2iz>
 800968a:	4682      	mov	sl, r0
 800968c:	f7f7 f8b2 	bl	80007f4 <__aeabi_i2d>
 8009690:	4642      	mov	r2, r8
 8009692:	464b      	mov	r3, r9
 8009694:	f7f7 f918 	bl	80008c8 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80096a4:	f7f6 ff58 	bl	8000558 <__aeabi_dsub>
 80096a8:	f805 6b01 	strb.w	r6, [r5], #1
 80096ac:	9e01      	ldr	r6, [sp, #4]
 80096ae:	9f03      	ldr	r7, [sp, #12]
 80096b0:	1bae      	subs	r6, r5, r6
 80096b2:	42b7      	cmp	r7, r6
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	d135      	bne.n	8009726 <_dtoa_r+0x6e6>
 80096ba:	f7f6 ff4f 	bl	800055c <__adddf3>
 80096be:	4642      	mov	r2, r8
 80096c0:	464b      	mov	r3, r9
 80096c2:	4606      	mov	r6, r0
 80096c4:	460f      	mov	r7, r1
 80096c6:	f7f7 fb8f 	bl	8000de8 <__aeabi_dcmpgt>
 80096ca:	b9d0      	cbnz	r0, 8009702 <_dtoa_r+0x6c2>
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f7 fb60 	bl	8000d98 <__aeabi_dcmpeq>
 80096d8:	b110      	cbz	r0, 80096e0 <_dtoa_r+0x6a0>
 80096da:	f01a 0f01 	tst.w	sl, #1
 80096de:	d110      	bne.n	8009702 <_dtoa_r+0x6c2>
 80096e0:	4620      	mov	r0, r4
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	f000 fe67 	bl	800a3b8 <_Bfree>
 80096ea:	2300      	movs	r3, #0
 80096ec:	9800      	ldr	r0, [sp, #0]
 80096ee:	702b      	strb	r3, [r5, #0]
 80096f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096f2:	3001      	adds	r0, #1
 80096f4:	6018      	str	r0, [r3, #0]
 80096f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f43f acf1 	beq.w	80090e0 <_dtoa_r+0xa0>
 80096fe:	601d      	str	r5, [r3, #0]
 8009700:	e4ee      	b.n	80090e0 <_dtoa_r+0xa0>
 8009702:	9f00      	ldr	r7, [sp, #0]
 8009704:	462b      	mov	r3, r5
 8009706:	461d      	mov	r5, r3
 8009708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970c:	2a39      	cmp	r2, #57	; 0x39
 800970e:	d106      	bne.n	800971e <_dtoa_r+0x6de>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d1f7      	bne.n	8009706 <_dtoa_r+0x6c6>
 8009716:	9901      	ldr	r1, [sp, #4]
 8009718:	2230      	movs	r2, #48	; 0x30
 800971a:	3701      	adds	r7, #1
 800971c:	700a      	strb	r2, [r1, #0]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	3201      	adds	r2, #1
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	e790      	b.n	8009648 <_dtoa_r+0x608>
 8009726:	4ba6      	ldr	r3, [pc, #664]	; (80099c0 <_dtoa_r+0x980>)
 8009728:	2200      	movs	r2, #0
 800972a:	f7f7 f8cd 	bl	80008c8 <__aeabi_dmul>
 800972e:	2200      	movs	r2, #0
 8009730:	2300      	movs	r3, #0
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f7f7 fb2f 	bl	8000d98 <__aeabi_dcmpeq>
 800973a:	2800      	cmp	r0, #0
 800973c:	d09d      	beq.n	800967a <_dtoa_r+0x63a>
 800973e:	e7cf      	b.n	80096e0 <_dtoa_r+0x6a0>
 8009740:	9a08      	ldr	r2, [sp, #32]
 8009742:	2a00      	cmp	r2, #0
 8009744:	f000 80d7 	beq.w	80098f6 <_dtoa_r+0x8b6>
 8009748:	9a06      	ldr	r2, [sp, #24]
 800974a:	2a01      	cmp	r2, #1
 800974c:	f300 80ba 	bgt.w	80098c4 <_dtoa_r+0x884>
 8009750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009752:	2a00      	cmp	r2, #0
 8009754:	f000 80b2 	beq.w	80098bc <_dtoa_r+0x87c>
 8009758:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800975c:	9e07      	ldr	r6, [sp, #28]
 800975e:	9d04      	ldr	r5, [sp, #16]
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	441a      	add	r2, r3
 8009764:	9204      	str	r2, [sp, #16]
 8009766:	9a05      	ldr	r2, [sp, #20]
 8009768:	2101      	movs	r1, #1
 800976a:	441a      	add	r2, r3
 800976c:	4620      	mov	r0, r4
 800976e:	9205      	str	r2, [sp, #20]
 8009770:	f000 ff24 	bl	800a5bc <__i2b>
 8009774:	4607      	mov	r7, r0
 8009776:	2d00      	cmp	r5, #0
 8009778:	dd0c      	ble.n	8009794 <_dtoa_r+0x754>
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd09      	ble.n	8009794 <_dtoa_r+0x754>
 8009780:	42ab      	cmp	r3, r5
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	bfa8      	it	ge
 8009786:	462b      	movge	r3, r5
 8009788:	1ad2      	subs	r2, r2, r3
 800978a:	9204      	str	r2, [sp, #16]
 800978c:	9a05      	ldr	r2, [sp, #20]
 800978e:	1aed      	subs	r5, r5, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	b31b      	cbz	r3, 80097e0 <_dtoa_r+0x7a0>
 8009798:	9b08      	ldr	r3, [sp, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80af 	beq.w	80098fe <_dtoa_r+0x8be>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	dd13      	ble.n	80097cc <_dtoa_r+0x78c>
 80097a4:	4639      	mov	r1, r7
 80097a6:	4632      	mov	r2, r6
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 ffc7 	bl	800a73c <__pow5mult>
 80097ae:	ee18 2a10 	vmov	r2, s16
 80097b2:	4601      	mov	r1, r0
 80097b4:	4607      	mov	r7, r0
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 ff16 	bl	800a5e8 <__multiply>
 80097bc:	ee18 1a10 	vmov	r1, s16
 80097c0:	4680      	mov	r8, r0
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fdf8 	bl	800a3b8 <_Bfree>
 80097c8:	ee08 8a10 	vmov	s16, r8
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	1b9a      	subs	r2, r3, r6
 80097d0:	d006      	beq.n	80097e0 <_dtoa_r+0x7a0>
 80097d2:	ee18 1a10 	vmov	r1, s16
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 ffb0 	bl	800a73c <__pow5mult>
 80097dc:	ee08 0a10 	vmov	s16, r0
 80097e0:	2101      	movs	r1, #1
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 feea 	bl	800a5bc <__i2b>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	4606      	mov	r6, r0
 80097ee:	f340 8088 	ble.w	8009902 <_dtoa_r+0x8c2>
 80097f2:	461a      	mov	r2, r3
 80097f4:	4601      	mov	r1, r0
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 ffa0 	bl	800a73c <__pow5mult>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	4606      	mov	r6, r0
 8009802:	f340 8081 	ble.w	8009908 <_dtoa_r+0x8c8>
 8009806:	f04f 0800 	mov.w	r8, #0
 800980a:	6933      	ldr	r3, [r6, #16]
 800980c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009810:	6918      	ldr	r0, [r3, #16]
 8009812:	f000 fe83 	bl	800a51c <__hi0bits>
 8009816:	f1c0 0020 	rsb	r0, r0, #32
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	4418      	add	r0, r3
 800981e:	f010 001f 	ands.w	r0, r0, #31
 8009822:	f000 8092 	beq.w	800994a <_dtoa_r+0x90a>
 8009826:	f1c0 0320 	rsb	r3, r0, #32
 800982a:	2b04      	cmp	r3, #4
 800982c:	f340 808a 	ble.w	8009944 <_dtoa_r+0x904>
 8009830:	f1c0 001c 	rsb	r0, r0, #28
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	4403      	add	r3, r0
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	4403      	add	r3, r0
 800983e:	4405      	add	r5, r0
 8009840:	9305      	str	r3, [sp, #20]
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd07      	ble.n	8009858 <_dtoa_r+0x818>
 8009848:	ee18 1a10 	vmov	r1, s16
 800984c:	461a      	mov	r2, r3
 800984e:	4620      	mov	r0, r4
 8009850:	f000 ffce 	bl	800a7f0 <__lshift>
 8009854:	ee08 0a10 	vmov	s16, r0
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd05      	ble.n	800986a <_dtoa_r+0x82a>
 800985e:	4631      	mov	r1, r6
 8009860:	461a      	mov	r2, r3
 8009862:	4620      	mov	r0, r4
 8009864:	f000 ffc4 	bl	800a7f0 <__lshift>
 8009868:	4606      	mov	r6, r0
 800986a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d06e      	beq.n	800994e <_dtoa_r+0x90e>
 8009870:	ee18 0a10 	vmov	r0, s16
 8009874:	4631      	mov	r1, r6
 8009876:	f001 f82b 	bl	800a8d0 <__mcmp>
 800987a:	2800      	cmp	r0, #0
 800987c:	da67      	bge.n	800994e <_dtoa_r+0x90e>
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	220a      	movs	r2, #10
 800988a:	2300      	movs	r3, #0
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fdb5 	bl	800a3fc <__multadd>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	ee08 0a10 	vmov	s16, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 81b1 	beq.w	8009c00 <_dtoa_r+0xbc0>
 800989e:	2300      	movs	r3, #0
 80098a0:	4639      	mov	r1, r7
 80098a2:	220a      	movs	r2, #10
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fda9 	bl	800a3fc <__multadd>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	4607      	mov	r7, r0
 80098b0:	f300 808e 	bgt.w	80099d0 <_dtoa_r+0x990>
 80098b4:	9b06      	ldr	r3, [sp, #24]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	dc51      	bgt.n	800995e <_dtoa_r+0x91e>
 80098ba:	e089      	b.n	80099d0 <_dtoa_r+0x990>
 80098bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098c2:	e74b      	b.n	800975c <_dtoa_r+0x71c>
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	1e5e      	subs	r6, r3, #1
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	42b3      	cmp	r3, r6
 80098cc:	bfbf      	itttt	lt
 80098ce:	9b07      	ldrlt	r3, [sp, #28]
 80098d0:	9607      	strlt	r6, [sp, #28]
 80098d2:	1af2      	sublt	r2, r6, r3
 80098d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098d6:	bfb6      	itet	lt
 80098d8:	189b      	addlt	r3, r3, r2
 80098da:	1b9e      	subge	r6, r3, r6
 80098dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	bfb8      	it	lt
 80098e2:	2600      	movlt	r6, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfb7      	itett	lt
 80098e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098f0:	1a9d      	sublt	r5, r3, r2
 80098f2:	2300      	movlt	r3, #0
 80098f4:	e734      	b.n	8009760 <_dtoa_r+0x720>
 80098f6:	9e07      	ldr	r6, [sp, #28]
 80098f8:	9d04      	ldr	r5, [sp, #16]
 80098fa:	9f08      	ldr	r7, [sp, #32]
 80098fc:	e73b      	b.n	8009776 <_dtoa_r+0x736>
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	e767      	b.n	80097d2 <_dtoa_r+0x792>
 8009902:	9b06      	ldr	r3, [sp, #24]
 8009904:	2b01      	cmp	r3, #1
 8009906:	dc18      	bgt.n	800993a <_dtoa_r+0x8fa>
 8009908:	f1ba 0f00 	cmp.w	sl, #0
 800990c:	d115      	bne.n	800993a <_dtoa_r+0x8fa>
 800990e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009912:	b993      	cbnz	r3, 800993a <_dtoa_r+0x8fa>
 8009914:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	051b      	lsls	r3, r3, #20
 800991c:	b183      	cbz	r3, 8009940 <_dtoa_r+0x900>
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	3301      	adds	r3, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	9b05      	ldr	r3, [sp, #20]
 8009926:	3301      	adds	r3, #1
 8009928:	9305      	str	r3, [sp, #20]
 800992a:	f04f 0801 	mov.w	r8, #1
 800992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009930:	2b00      	cmp	r3, #0
 8009932:	f47f af6a 	bne.w	800980a <_dtoa_r+0x7ca>
 8009936:	2001      	movs	r0, #1
 8009938:	e76f      	b.n	800981a <_dtoa_r+0x7da>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	e7f6      	b.n	800992e <_dtoa_r+0x8ee>
 8009940:	4698      	mov	r8, r3
 8009942:	e7f4      	b.n	800992e <_dtoa_r+0x8ee>
 8009944:	f43f af7d 	beq.w	8009842 <_dtoa_r+0x802>
 8009948:	4618      	mov	r0, r3
 800994a:	301c      	adds	r0, #28
 800994c:	e772      	b.n	8009834 <_dtoa_r+0x7f4>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc37      	bgt.n	80099c4 <_dtoa_r+0x984>
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	2b02      	cmp	r3, #2
 8009958:	dd34      	ble.n	80099c4 <_dtoa_r+0x984>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	9b02      	ldr	r3, [sp, #8]
 8009960:	b96b      	cbnz	r3, 800997e <_dtoa_r+0x93e>
 8009962:	4631      	mov	r1, r6
 8009964:	2205      	movs	r2, #5
 8009966:	4620      	mov	r0, r4
 8009968:	f000 fd48 	bl	800a3fc <__multadd>
 800996c:	4601      	mov	r1, r0
 800996e:	4606      	mov	r6, r0
 8009970:	ee18 0a10 	vmov	r0, s16
 8009974:	f000 ffac 	bl	800a8d0 <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	f73f adbb 	bgt.w	80094f4 <_dtoa_r+0x4b4>
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	9d01      	ldr	r5, [sp, #4]
 8009982:	43db      	mvns	r3, r3
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	4631      	mov	r1, r6
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fd13 	bl	800a3b8 <_Bfree>
 8009992:	2f00      	cmp	r7, #0
 8009994:	f43f aea4 	beq.w	80096e0 <_dtoa_r+0x6a0>
 8009998:	f1b8 0f00 	cmp.w	r8, #0
 800999c:	d005      	beq.n	80099aa <_dtoa_r+0x96a>
 800999e:	45b8      	cmp	r8, r7
 80099a0:	d003      	beq.n	80099aa <_dtoa_r+0x96a>
 80099a2:	4641      	mov	r1, r8
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fd07 	bl	800a3b8 <_Bfree>
 80099aa:	4639      	mov	r1, r7
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fd03 	bl	800a3b8 <_Bfree>
 80099b2:	e695      	b.n	80096e0 <_dtoa_r+0x6a0>
 80099b4:	2600      	movs	r6, #0
 80099b6:	4637      	mov	r7, r6
 80099b8:	e7e1      	b.n	800997e <_dtoa_r+0x93e>
 80099ba:	9700      	str	r7, [sp, #0]
 80099bc:	4637      	mov	r7, r6
 80099be:	e599      	b.n	80094f4 <_dtoa_r+0x4b4>
 80099c0:	40240000 	.word	0x40240000
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80ca 	beq.w	8009b60 <_dtoa_r+0xb20>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	9302      	str	r3, [sp, #8]
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	dd05      	ble.n	80099e0 <_dtoa_r+0x9a0>
 80099d4:	4639      	mov	r1, r7
 80099d6:	462a      	mov	r2, r5
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 ff09 	bl	800a7f0 <__lshift>
 80099de:	4607      	mov	r7, r0
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	d05b      	beq.n	8009a9e <_dtoa_r+0xa5e>
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fca5 	bl	800a338 <_Balloc>
 80099ee:	4605      	mov	r5, r0
 80099f0:	b928      	cbnz	r0, 80099fe <_dtoa_r+0x9be>
 80099f2:	4b87      	ldr	r3, [pc, #540]	; (8009c10 <_dtoa_r+0xbd0>)
 80099f4:	4602      	mov	r2, r0
 80099f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099fa:	f7ff bb3b 	b.w	8009074 <_dtoa_r+0x34>
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	3202      	adds	r2, #2
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	f107 010c 	add.w	r1, r7, #12
 8009a08:	300c      	adds	r0, #12
 8009a0a:	f7fd fecf 	bl	80077ac <memcpy>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4629      	mov	r1, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 feec 	bl	800a7f0 <__lshift>
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	f103 0901 	add.w	r9, r3, #1
 8009a1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	f00a 0301 	and.w	r3, sl, #1
 8009a2a:	46b8      	mov	r8, r7
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	4607      	mov	r7, r0
 8009a30:	4631      	mov	r1, r6
 8009a32:	ee18 0a10 	vmov	r0, s16
 8009a36:	f7ff fa77 	bl	8008f28 <quorem>
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	9002      	str	r0, [sp, #8]
 8009a3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a42:	ee18 0a10 	vmov	r0, s16
 8009a46:	f000 ff43 	bl	800a8d0 <__mcmp>
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	9003      	str	r0, [sp, #12]
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 ff59 	bl	800a908 <__mdiff>
 8009a56:	68c2      	ldr	r2, [r0, #12]
 8009a58:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	bb02      	cbnz	r2, 8009aa2 <_dtoa_r+0xa62>
 8009a60:	4601      	mov	r1, r0
 8009a62:	ee18 0a10 	vmov	r0, s16
 8009a66:	f000 ff33 	bl	800a8d0 <__mcmp>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	9207      	str	r2, [sp, #28]
 8009a72:	f000 fca1 	bl	800a3b8 <_Bfree>
 8009a76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a7a:	ea43 0102 	orr.w	r1, r3, r2
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	430b      	orrs	r3, r1
 8009a82:	464d      	mov	r5, r9
 8009a84:	d10f      	bne.n	8009aa6 <_dtoa_r+0xa66>
 8009a86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a8a:	d02a      	beq.n	8009ae2 <_dtoa_r+0xaa2>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dd02      	ble.n	8009a98 <_dtoa_r+0xa58>
 8009a92:	9b02      	ldr	r3, [sp, #8]
 8009a94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a98:	f88b a000 	strb.w	sl, [fp]
 8009a9c:	e775      	b.n	800998a <_dtoa_r+0x94a>
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	e7ba      	b.n	8009a18 <_dtoa_r+0x9d8>
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	e7e2      	b.n	8009a6c <_dtoa_r+0xa2c>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db04      	blt.n	8009ab6 <_dtoa_r+0xa76>
 8009aac:	9906      	ldr	r1, [sp, #24]
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	9904      	ldr	r1, [sp, #16]
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	d122      	bne.n	8009afc <_dtoa_r+0xabc>
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	ddee      	ble.n	8009a98 <_dtoa_r+0xa58>
 8009aba:	ee18 1a10 	vmov	r1, s16
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fe95 	bl	800a7f0 <__lshift>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	ee08 0a10 	vmov	s16, r0
 8009acc:	f000 ff00 	bl	800a8d0 <__mcmp>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dc03      	bgt.n	8009adc <_dtoa_r+0xa9c>
 8009ad4:	d1e0      	bne.n	8009a98 <_dtoa_r+0xa58>
 8009ad6:	f01a 0f01 	tst.w	sl, #1
 8009ada:	d0dd      	beq.n	8009a98 <_dtoa_r+0xa58>
 8009adc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ae0:	d1d7      	bne.n	8009a92 <_dtoa_r+0xa52>
 8009ae2:	2339      	movs	r3, #57	; 0x39
 8009ae4:	f88b 3000 	strb.w	r3, [fp]
 8009ae8:	462b      	mov	r3, r5
 8009aea:	461d      	mov	r5, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009af2:	2a39      	cmp	r2, #57	; 0x39
 8009af4:	d071      	beq.n	8009bda <_dtoa_r+0xb9a>
 8009af6:	3201      	adds	r2, #1
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	e746      	b.n	800998a <_dtoa_r+0x94a>
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	dd07      	ble.n	8009b10 <_dtoa_r+0xad0>
 8009b00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b04:	d0ed      	beq.n	8009ae2 <_dtoa_r+0xaa2>
 8009b06:	f10a 0301 	add.w	r3, sl, #1
 8009b0a:	f88b 3000 	strb.w	r3, [fp]
 8009b0e:	e73c      	b.n	800998a <_dtoa_r+0x94a>
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b16:	4599      	cmp	r9, r3
 8009b18:	d047      	beq.n	8009baa <_dtoa_r+0xb6a>
 8009b1a:	ee18 1a10 	vmov	r1, s16
 8009b1e:	2300      	movs	r3, #0
 8009b20:	220a      	movs	r2, #10
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 fc6a 	bl	800a3fc <__multadd>
 8009b28:	45b8      	cmp	r8, r7
 8009b2a:	ee08 0a10 	vmov	s16, r0
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	f04f 020a 	mov.w	r2, #10
 8009b36:	4641      	mov	r1, r8
 8009b38:	4620      	mov	r0, r4
 8009b3a:	d106      	bne.n	8009b4a <_dtoa_r+0xb0a>
 8009b3c:	f000 fc5e 	bl	800a3fc <__multadd>
 8009b40:	4680      	mov	r8, r0
 8009b42:	4607      	mov	r7, r0
 8009b44:	f109 0901 	add.w	r9, r9, #1
 8009b48:	e772      	b.n	8009a30 <_dtoa_r+0x9f0>
 8009b4a:	f000 fc57 	bl	800a3fc <__multadd>
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4680      	mov	r8, r0
 8009b52:	2300      	movs	r3, #0
 8009b54:	220a      	movs	r2, #10
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 fc50 	bl	800a3fc <__multadd>
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	e7f1      	b.n	8009b44 <_dtoa_r+0xb04>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	9302      	str	r3, [sp, #8]
 8009b64:	9d01      	ldr	r5, [sp, #4]
 8009b66:	ee18 0a10 	vmov	r0, s16
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	f7ff f9dc 	bl	8008f28 <quorem>
 8009b70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	f805 ab01 	strb.w	sl, [r5], #1
 8009b7a:	1aea      	subs	r2, r5, r3
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	dd09      	ble.n	8009b96 <_dtoa_r+0xb56>
 8009b82:	ee18 1a10 	vmov	r1, s16
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fc36 	bl	800a3fc <__multadd>
 8009b90:	ee08 0a10 	vmov	s16, r0
 8009b94:	e7e7      	b.n	8009b66 <_dtoa_r+0xb26>
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfc8      	it	gt
 8009b9c:	461d      	movgt	r5, r3
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	bfd8      	it	le
 8009ba2:	2501      	movle	r5, #1
 8009ba4:	441d      	add	r5, r3
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	ee18 1a10 	vmov	r1, s16
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 fe1d 	bl	800a7f0 <__lshift>
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	ee08 0a10 	vmov	s16, r0
 8009bbc:	f000 fe88 	bl	800a8d0 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dc91      	bgt.n	8009ae8 <_dtoa_r+0xaa8>
 8009bc4:	d102      	bne.n	8009bcc <_dtoa_r+0xb8c>
 8009bc6:	f01a 0f01 	tst.w	sl, #1
 8009bca:	d18d      	bne.n	8009ae8 <_dtoa_r+0xaa8>
 8009bcc:	462b      	mov	r3, r5
 8009bce:	461d      	mov	r5, r3
 8009bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd4:	2a30      	cmp	r2, #48	; 0x30
 8009bd6:	d0fa      	beq.n	8009bce <_dtoa_r+0xb8e>
 8009bd8:	e6d7      	b.n	800998a <_dtoa_r+0x94a>
 8009bda:	9a01      	ldr	r2, [sp, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d184      	bne.n	8009aea <_dtoa_r+0xaaa>
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2331      	movs	r3, #49	; 0x31
 8009be8:	7013      	strb	r3, [r2, #0]
 8009bea:	e6ce      	b.n	800998a <_dtoa_r+0x94a>
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <_dtoa_r+0xbd4>)
 8009bee:	f7ff ba95 	b.w	800911c <_dtoa_r+0xdc>
 8009bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f47f aa6e 	bne.w	80090d6 <_dtoa_r+0x96>
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <_dtoa_r+0xbd8>)
 8009bfc:	f7ff ba8e 	b.w	800911c <_dtoa_r+0xdc>
 8009c00:	9b02      	ldr	r3, [sp, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dcae      	bgt.n	8009b64 <_dtoa_r+0xb24>
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	f73f aea8 	bgt.w	800995e <_dtoa_r+0x91e>
 8009c0e:	e7a9      	b.n	8009b64 <_dtoa_r+0xb24>
 8009c10:	0800c2c0 	.word	0x0800c2c0
 8009c14:	0800c0cc 	.word	0x0800c0cc
 8009c18:	0800c241 	.word	0x0800c241

08009c1c <rshift>:
 8009c1c:	6903      	ldr	r3, [r0, #16]
 8009c1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c2a:	f100 0414 	add.w	r4, r0, #20
 8009c2e:	dd45      	ble.n	8009cbc <rshift+0xa0>
 8009c30:	f011 011f 	ands.w	r1, r1, #31
 8009c34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c3c:	d10c      	bne.n	8009c58 <rshift+0x3c>
 8009c3e:	f100 0710 	add.w	r7, r0, #16
 8009c42:	4629      	mov	r1, r5
 8009c44:	42b1      	cmp	r1, r6
 8009c46:	d334      	bcc.n	8009cb2 <rshift+0x96>
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	1eea      	subs	r2, r5, #3
 8009c4e:	4296      	cmp	r6, r2
 8009c50:	bf38      	it	cc
 8009c52:	2300      	movcc	r3, #0
 8009c54:	4423      	add	r3, r4
 8009c56:	e015      	b.n	8009c84 <rshift+0x68>
 8009c58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c5c:	f1c1 0820 	rsb	r8, r1, #32
 8009c60:	40cf      	lsrs	r7, r1
 8009c62:	f105 0e04 	add.w	lr, r5, #4
 8009c66:	46a1      	mov	r9, r4
 8009c68:	4576      	cmp	r6, lr
 8009c6a:	46f4      	mov	ip, lr
 8009c6c:	d815      	bhi.n	8009c9a <rshift+0x7e>
 8009c6e:	1a9a      	subs	r2, r3, r2
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	3a04      	subs	r2, #4
 8009c74:	3501      	adds	r5, #1
 8009c76:	42ae      	cmp	r6, r5
 8009c78:	bf38      	it	cc
 8009c7a:	2200      	movcc	r2, #0
 8009c7c:	18a3      	adds	r3, r4, r2
 8009c7e:	50a7      	str	r7, [r4, r2]
 8009c80:	b107      	cbz	r7, 8009c84 <rshift+0x68>
 8009c82:	3304      	adds	r3, #4
 8009c84:	1b1a      	subs	r2, r3, r4
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c8c:	bf08      	it	eq
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	6102      	str	r2, [r0, #16]
 8009c92:	bf08      	it	eq
 8009c94:	6143      	streq	r3, [r0, #20]
 8009c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	f8dc c000 	ldr.w	ip, [ip]
 8009c9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ca2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ca6:	f849 7b04 	str.w	r7, [r9], #4
 8009caa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cae:	40cf      	lsrs	r7, r1
 8009cb0:	e7da      	b.n	8009c68 <rshift+0x4c>
 8009cb2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cb6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009cba:	e7c3      	b.n	8009c44 <rshift+0x28>
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	e7e1      	b.n	8009c84 <rshift+0x68>

08009cc0 <__hexdig_fun>:
 8009cc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009cc4:	2b09      	cmp	r3, #9
 8009cc6:	d802      	bhi.n	8009cce <__hexdig_fun+0xe>
 8009cc8:	3820      	subs	r0, #32
 8009cca:	b2c0      	uxtb	r0, r0
 8009ccc:	4770      	bx	lr
 8009cce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009cd2:	2b05      	cmp	r3, #5
 8009cd4:	d801      	bhi.n	8009cda <__hexdig_fun+0x1a>
 8009cd6:	3847      	subs	r0, #71	; 0x47
 8009cd8:	e7f7      	b.n	8009cca <__hexdig_fun+0xa>
 8009cda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d801      	bhi.n	8009ce6 <__hexdig_fun+0x26>
 8009ce2:	3827      	subs	r0, #39	; 0x27
 8009ce4:	e7f1      	b.n	8009cca <__hexdig_fun+0xa>
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	4770      	bx	lr
	...

08009cec <__gethex>:
 8009cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	ed2d 8b02 	vpush	{d8}
 8009cf4:	b089      	sub	sp, #36	; 0x24
 8009cf6:	ee08 0a10 	vmov	s16, r0
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	4bb4      	ldr	r3, [pc, #720]	; (8009fd0 <__gethex+0x2e4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	468b      	mov	fp, r1
 8009d06:	4690      	mov	r8, r2
 8009d08:	f7f6 fbc4 	bl	8000494 <strlen>
 8009d0c:	9b01      	ldr	r3, [sp, #4]
 8009d0e:	f8db 2000 	ldr.w	r2, [fp]
 8009d12:	4403      	add	r3, r0
 8009d14:	4682      	mov	sl, r0
 8009d16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	1c93      	adds	r3, r2, #2
 8009d1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009d22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009d26:	32fe      	adds	r2, #254	; 0xfe
 8009d28:	18d1      	adds	r1, r2, r3
 8009d2a:	461f      	mov	r7, r3
 8009d2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d30:	9100      	str	r1, [sp, #0]
 8009d32:	2830      	cmp	r0, #48	; 0x30
 8009d34:	d0f8      	beq.n	8009d28 <__gethex+0x3c>
 8009d36:	f7ff ffc3 	bl	8009cc0 <__hexdig_fun>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d13a      	bne.n	8009db6 <__gethex+0xca>
 8009d40:	9901      	ldr	r1, [sp, #4]
 8009d42:	4652      	mov	r2, sl
 8009d44:	4638      	mov	r0, r7
 8009d46:	f001 fa29 	bl	800b19c <strncmp>
 8009d4a:	4605      	mov	r5, r0
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d168      	bne.n	8009e22 <__gethex+0x136>
 8009d50:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009d54:	eb07 060a 	add.w	r6, r7, sl
 8009d58:	f7ff ffb2 	bl	8009cc0 <__hexdig_fun>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d062      	beq.n	8009e26 <__gethex+0x13a>
 8009d60:	4633      	mov	r3, r6
 8009d62:	7818      	ldrb	r0, [r3, #0]
 8009d64:	2830      	cmp	r0, #48	; 0x30
 8009d66:	461f      	mov	r7, r3
 8009d68:	f103 0301 	add.w	r3, r3, #1
 8009d6c:	d0f9      	beq.n	8009d62 <__gethex+0x76>
 8009d6e:	f7ff ffa7 	bl	8009cc0 <__hexdig_fun>
 8009d72:	2301      	movs	r3, #1
 8009d74:	fab0 f480 	clz	r4, r0
 8009d78:	0964      	lsrs	r4, r4, #5
 8009d7a:	4635      	mov	r5, r6
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	463a      	mov	r2, r7
 8009d80:	4616      	mov	r6, r2
 8009d82:	3201      	adds	r2, #1
 8009d84:	7830      	ldrb	r0, [r6, #0]
 8009d86:	f7ff ff9b 	bl	8009cc0 <__hexdig_fun>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d1f8      	bne.n	8009d80 <__gethex+0x94>
 8009d8e:	9901      	ldr	r1, [sp, #4]
 8009d90:	4652      	mov	r2, sl
 8009d92:	4630      	mov	r0, r6
 8009d94:	f001 fa02 	bl	800b19c <strncmp>
 8009d98:	b980      	cbnz	r0, 8009dbc <__gethex+0xd0>
 8009d9a:	b94d      	cbnz	r5, 8009db0 <__gethex+0xc4>
 8009d9c:	eb06 050a 	add.w	r5, r6, sl
 8009da0:	462a      	mov	r2, r5
 8009da2:	4616      	mov	r6, r2
 8009da4:	3201      	adds	r2, #1
 8009da6:	7830      	ldrb	r0, [r6, #0]
 8009da8:	f7ff ff8a 	bl	8009cc0 <__hexdig_fun>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d1f8      	bne.n	8009da2 <__gethex+0xb6>
 8009db0:	1bad      	subs	r5, r5, r6
 8009db2:	00ad      	lsls	r5, r5, #2
 8009db4:	e004      	b.n	8009dc0 <__gethex+0xd4>
 8009db6:	2400      	movs	r4, #0
 8009db8:	4625      	mov	r5, r4
 8009dba:	e7e0      	b.n	8009d7e <__gethex+0x92>
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	d1f7      	bne.n	8009db0 <__gethex+0xc4>
 8009dc0:	7833      	ldrb	r3, [r6, #0]
 8009dc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009dc6:	2b50      	cmp	r3, #80	; 0x50
 8009dc8:	d13b      	bne.n	8009e42 <__gethex+0x156>
 8009dca:	7873      	ldrb	r3, [r6, #1]
 8009dcc:	2b2b      	cmp	r3, #43	; 0x2b
 8009dce:	d02c      	beq.n	8009e2a <__gethex+0x13e>
 8009dd0:	2b2d      	cmp	r3, #45	; 0x2d
 8009dd2:	d02e      	beq.n	8009e32 <__gethex+0x146>
 8009dd4:	1c71      	adds	r1, r6, #1
 8009dd6:	f04f 0900 	mov.w	r9, #0
 8009dda:	7808      	ldrb	r0, [r1, #0]
 8009ddc:	f7ff ff70 	bl	8009cc0 <__hexdig_fun>
 8009de0:	1e43      	subs	r3, r0, #1
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b18      	cmp	r3, #24
 8009de6:	d82c      	bhi.n	8009e42 <__gethex+0x156>
 8009de8:	f1a0 0210 	sub.w	r2, r0, #16
 8009dec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009df0:	f7ff ff66 	bl	8009cc0 <__hexdig_fun>
 8009df4:	1e43      	subs	r3, r0, #1
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b18      	cmp	r3, #24
 8009dfa:	d91d      	bls.n	8009e38 <__gethex+0x14c>
 8009dfc:	f1b9 0f00 	cmp.w	r9, #0
 8009e00:	d000      	beq.n	8009e04 <__gethex+0x118>
 8009e02:	4252      	negs	r2, r2
 8009e04:	4415      	add	r5, r2
 8009e06:	f8cb 1000 	str.w	r1, [fp]
 8009e0a:	b1e4      	cbz	r4, 8009e46 <__gethex+0x15a>
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bf14      	ite	ne
 8009e12:	2700      	movne	r7, #0
 8009e14:	2706      	moveq	r7, #6
 8009e16:	4638      	mov	r0, r7
 8009e18:	b009      	add	sp, #36	; 0x24
 8009e1a:	ecbd 8b02 	vpop	{d8}
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	463e      	mov	r6, r7
 8009e24:	4625      	mov	r5, r4
 8009e26:	2401      	movs	r4, #1
 8009e28:	e7ca      	b.n	8009dc0 <__gethex+0xd4>
 8009e2a:	f04f 0900 	mov.w	r9, #0
 8009e2e:	1cb1      	adds	r1, r6, #2
 8009e30:	e7d3      	b.n	8009dda <__gethex+0xee>
 8009e32:	f04f 0901 	mov.w	r9, #1
 8009e36:	e7fa      	b.n	8009e2e <__gethex+0x142>
 8009e38:	230a      	movs	r3, #10
 8009e3a:	fb03 0202 	mla	r2, r3, r2, r0
 8009e3e:	3a10      	subs	r2, #16
 8009e40:	e7d4      	b.n	8009dec <__gethex+0x100>
 8009e42:	4631      	mov	r1, r6
 8009e44:	e7df      	b.n	8009e06 <__gethex+0x11a>
 8009e46:	1bf3      	subs	r3, r6, r7
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	2b07      	cmp	r3, #7
 8009e4e:	dc0b      	bgt.n	8009e68 <__gethex+0x17c>
 8009e50:	ee18 0a10 	vmov	r0, s16
 8009e54:	f000 fa70 	bl	800a338 <_Balloc>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	b940      	cbnz	r0, 8009e6e <__gethex+0x182>
 8009e5c:	4b5d      	ldr	r3, [pc, #372]	; (8009fd4 <__gethex+0x2e8>)
 8009e5e:	4602      	mov	r2, r0
 8009e60:	21de      	movs	r1, #222	; 0xde
 8009e62:	485d      	ldr	r0, [pc, #372]	; (8009fd8 <__gethex+0x2ec>)
 8009e64:	f001 f9bc 	bl	800b1e0 <__assert_func>
 8009e68:	3101      	adds	r1, #1
 8009e6a:	105b      	asrs	r3, r3, #1
 8009e6c:	e7ee      	b.n	8009e4c <__gethex+0x160>
 8009e6e:	f100 0914 	add.w	r9, r0, #20
 8009e72:	f04f 0b00 	mov.w	fp, #0
 8009e76:	f1ca 0301 	rsb	r3, sl, #1
 8009e7a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e7e:	f8cd b000 	str.w	fp, [sp]
 8009e82:	9306      	str	r3, [sp, #24]
 8009e84:	42b7      	cmp	r7, r6
 8009e86:	d340      	bcc.n	8009f0a <__gethex+0x21e>
 8009e88:	9802      	ldr	r0, [sp, #8]
 8009e8a:	9b00      	ldr	r3, [sp, #0]
 8009e8c:	f840 3b04 	str.w	r3, [r0], #4
 8009e90:	eba0 0009 	sub.w	r0, r0, r9
 8009e94:	1080      	asrs	r0, r0, #2
 8009e96:	0146      	lsls	r6, r0, #5
 8009e98:	6120      	str	r0, [r4, #16]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fb3e 	bl	800a51c <__hi0bits>
 8009ea0:	1a30      	subs	r0, r6, r0
 8009ea2:	f8d8 6000 	ldr.w	r6, [r8]
 8009ea6:	42b0      	cmp	r0, r6
 8009ea8:	dd63      	ble.n	8009f72 <__gethex+0x286>
 8009eaa:	1b87      	subs	r7, r0, r6
 8009eac:	4639      	mov	r1, r7
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f000 fee2 	bl	800ac78 <__any_on>
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	b1a8      	cbz	r0, 8009ee4 <__gethex+0x1f8>
 8009eb8:	1e7b      	subs	r3, r7, #1
 8009eba:	1159      	asrs	r1, r3, #5
 8009ebc:	f003 021f 	and.w	r2, r3, #31
 8009ec0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ec4:	f04f 0a01 	mov.w	sl, #1
 8009ec8:	fa0a f202 	lsl.w	r2, sl, r2
 8009ecc:	420a      	tst	r2, r1
 8009ece:	d009      	beq.n	8009ee4 <__gethex+0x1f8>
 8009ed0:	4553      	cmp	r3, sl
 8009ed2:	dd05      	ble.n	8009ee0 <__gethex+0x1f4>
 8009ed4:	1eb9      	subs	r1, r7, #2
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 fece 	bl	800ac78 <__any_on>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d145      	bne.n	8009f6c <__gethex+0x280>
 8009ee0:	f04f 0a02 	mov.w	sl, #2
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7ff fe98 	bl	8009c1c <rshift>
 8009eec:	443d      	add	r5, r7
 8009eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	da4c      	bge.n	8009f90 <__gethex+0x2a4>
 8009ef6:	ee18 0a10 	vmov	r0, s16
 8009efa:	4621      	mov	r1, r4
 8009efc:	f000 fa5c 	bl	800a3b8 <_Bfree>
 8009f00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f02:	2300      	movs	r3, #0
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	27a3      	movs	r7, #163	; 0xa3
 8009f08:	e785      	b.n	8009e16 <__gethex+0x12a>
 8009f0a:	1e73      	subs	r3, r6, #1
 8009f0c:	9a05      	ldr	r2, [sp, #20]
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d019      	beq.n	8009f4c <__gethex+0x260>
 8009f18:	f1bb 0f20 	cmp.w	fp, #32
 8009f1c:	d107      	bne.n	8009f2e <__gethex+0x242>
 8009f1e:	9b02      	ldr	r3, [sp, #8]
 8009f20:	9a00      	ldr	r2, [sp, #0]
 8009f22:	f843 2b04 	str.w	r2, [r3], #4
 8009f26:	9302      	str	r3, [sp, #8]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	469b      	mov	fp, r3
 8009f2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009f32:	f7ff fec5 	bl	8009cc0 <__hexdig_fun>
 8009f36:	9b00      	ldr	r3, [sp, #0]
 8009f38:	f000 000f 	and.w	r0, r0, #15
 8009f3c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009f40:	4303      	orrs	r3, r0
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	f10b 0b04 	add.w	fp, fp, #4
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	e00d      	b.n	8009f68 <__gethex+0x27c>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	9a06      	ldr	r2, [sp, #24]
 8009f50:	4413      	add	r3, r2
 8009f52:	42bb      	cmp	r3, r7
 8009f54:	d3e0      	bcc.n	8009f18 <__gethex+0x22c>
 8009f56:	4618      	mov	r0, r3
 8009f58:	9901      	ldr	r1, [sp, #4]
 8009f5a:	9307      	str	r3, [sp, #28]
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	f001 f91d 	bl	800b19c <strncmp>
 8009f62:	9b07      	ldr	r3, [sp, #28]
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d1d7      	bne.n	8009f18 <__gethex+0x22c>
 8009f68:	461e      	mov	r6, r3
 8009f6a:	e78b      	b.n	8009e84 <__gethex+0x198>
 8009f6c:	f04f 0a03 	mov.w	sl, #3
 8009f70:	e7b8      	b.n	8009ee4 <__gethex+0x1f8>
 8009f72:	da0a      	bge.n	8009f8a <__gethex+0x29e>
 8009f74:	1a37      	subs	r7, r6, r0
 8009f76:	4621      	mov	r1, r4
 8009f78:	ee18 0a10 	vmov	r0, s16
 8009f7c:	463a      	mov	r2, r7
 8009f7e:	f000 fc37 	bl	800a7f0 <__lshift>
 8009f82:	1bed      	subs	r5, r5, r7
 8009f84:	4604      	mov	r4, r0
 8009f86:	f100 0914 	add.w	r9, r0, #20
 8009f8a:	f04f 0a00 	mov.w	sl, #0
 8009f8e:	e7ae      	b.n	8009eee <__gethex+0x202>
 8009f90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f94:	42a8      	cmp	r0, r5
 8009f96:	dd72      	ble.n	800a07e <__gethex+0x392>
 8009f98:	1b45      	subs	r5, r0, r5
 8009f9a:	42ae      	cmp	r6, r5
 8009f9c:	dc36      	bgt.n	800a00c <__gethex+0x320>
 8009f9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d02a      	beq.n	8009ffc <__gethex+0x310>
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d02c      	beq.n	800a004 <__gethex+0x318>
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d11c      	bne.n	8009fe8 <__gethex+0x2fc>
 8009fae:	42ae      	cmp	r6, r5
 8009fb0:	d11a      	bne.n	8009fe8 <__gethex+0x2fc>
 8009fb2:	2e01      	cmp	r6, #1
 8009fb4:	d112      	bne.n	8009fdc <__gethex+0x2f0>
 8009fb6:	9a04      	ldr	r2, [sp, #16]
 8009fb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	f8c9 3000 	str.w	r3, [r9]
 8009fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fc8:	2762      	movs	r7, #98	; 0x62
 8009fca:	601c      	str	r4, [r3, #0]
 8009fcc:	e723      	b.n	8009e16 <__gethex+0x12a>
 8009fce:	bf00      	nop
 8009fd0:	0800c338 	.word	0x0800c338
 8009fd4:	0800c2c0 	.word	0x0800c2c0
 8009fd8:	0800c2d1 	.word	0x0800c2d1
 8009fdc:	1e71      	subs	r1, r6, #1
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 fe4a 	bl	800ac78 <__any_on>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d1e6      	bne.n	8009fb6 <__gethex+0x2ca>
 8009fe8:	ee18 0a10 	vmov	r0, s16
 8009fec:	4621      	mov	r1, r4
 8009fee:	f000 f9e3 	bl	800a3b8 <_Bfree>
 8009ff2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	2750      	movs	r7, #80	; 0x50
 8009ffa:	e70c      	b.n	8009e16 <__gethex+0x12a>
 8009ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1f2      	bne.n	8009fe8 <__gethex+0x2fc>
 800a002:	e7d8      	b.n	8009fb6 <__gethex+0x2ca>
 800a004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1d5      	bne.n	8009fb6 <__gethex+0x2ca>
 800a00a:	e7ed      	b.n	8009fe8 <__gethex+0x2fc>
 800a00c:	1e6f      	subs	r7, r5, #1
 800a00e:	f1ba 0f00 	cmp.w	sl, #0
 800a012:	d131      	bne.n	800a078 <__gethex+0x38c>
 800a014:	b127      	cbz	r7, 800a020 <__gethex+0x334>
 800a016:	4639      	mov	r1, r7
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fe2d 	bl	800ac78 <__any_on>
 800a01e:	4682      	mov	sl, r0
 800a020:	117b      	asrs	r3, r7, #5
 800a022:	2101      	movs	r1, #1
 800a024:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a028:	f007 071f 	and.w	r7, r7, #31
 800a02c:	fa01 f707 	lsl.w	r7, r1, r7
 800a030:	421f      	tst	r7, r3
 800a032:	4629      	mov	r1, r5
 800a034:	4620      	mov	r0, r4
 800a036:	bf18      	it	ne
 800a038:	f04a 0a02 	orrne.w	sl, sl, #2
 800a03c:	1b76      	subs	r6, r6, r5
 800a03e:	f7ff fded 	bl	8009c1c <rshift>
 800a042:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a046:	2702      	movs	r7, #2
 800a048:	f1ba 0f00 	cmp.w	sl, #0
 800a04c:	d048      	beq.n	800a0e0 <__gethex+0x3f4>
 800a04e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a052:	2b02      	cmp	r3, #2
 800a054:	d015      	beq.n	800a082 <__gethex+0x396>
 800a056:	2b03      	cmp	r3, #3
 800a058:	d017      	beq.n	800a08a <__gethex+0x39e>
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d109      	bne.n	800a072 <__gethex+0x386>
 800a05e:	f01a 0f02 	tst.w	sl, #2
 800a062:	d006      	beq.n	800a072 <__gethex+0x386>
 800a064:	f8d9 0000 	ldr.w	r0, [r9]
 800a068:	ea4a 0a00 	orr.w	sl, sl, r0
 800a06c:	f01a 0f01 	tst.w	sl, #1
 800a070:	d10e      	bne.n	800a090 <__gethex+0x3a4>
 800a072:	f047 0710 	orr.w	r7, r7, #16
 800a076:	e033      	b.n	800a0e0 <__gethex+0x3f4>
 800a078:	f04f 0a01 	mov.w	sl, #1
 800a07c:	e7d0      	b.n	800a020 <__gethex+0x334>
 800a07e:	2701      	movs	r7, #1
 800a080:	e7e2      	b.n	800a048 <__gethex+0x35c>
 800a082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a084:	f1c3 0301 	rsb	r3, r3, #1
 800a088:	9315      	str	r3, [sp, #84]	; 0x54
 800a08a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0f0      	beq.n	800a072 <__gethex+0x386>
 800a090:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a094:	f104 0314 	add.w	r3, r4, #20
 800a098:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a09c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0ae:	d01c      	beq.n	800a0ea <__gethex+0x3fe>
 800a0b0:	3201      	adds	r2, #1
 800a0b2:	6002      	str	r2, [r0, #0]
 800a0b4:	2f02      	cmp	r7, #2
 800a0b6:	f104 0314 	add.w	r3, r4, #20
 800a0ba:	d13f      	bne.n	800a13c <__gethex+0x450>
 800a0bc:	f8d8 2000 	ldr.w	r2, [r8]
 800a0c0:	3a01      	subs	r2, #1
 800a0c2:	42b2      	cmp	r2, r6
 800a0c4:	d10a      	bne.n	800a0dc <__gethex+0x3f0>
 800a0c6:	1171      	asrs	r1, r6, #5
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0ce:	f006 061f 	and.w	r6, r6, #31
 800a0d2:	fa02 f606 	lsl.w	r6, r2, r6
 800a0d6:	421e      	tst	r6, r3
 800a0d8:	bf18      	it	ne
 800a0da:	4617      	movne	r7, r2
 800a0dc:	f047 0720 	orr.w	r7, r7, #32
 800a0e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0e2:	601c      	str	r4, [r3, #0]
 800a0e4:	9b04      	ldr	r3, [sp, #16]
 800a0e6:	601d      	str	r5, [r3, #0]
 800a0e8:	e695      	b.n	8009e16 <__gethex+0x12a>
 800a0ea:	4299      	cmp	r1, r3
 800a0ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0f0:	d8d8      	bhi.n	800a0a4 <__gethex+0x3b8>
 800a0f2:	68a3      	ldr	r3, [r4, #8]
 800a0f4:	459b      	cmp	fp, r3
 800a0f6:	db19      	blt.n	800a12c <__gethex+0x440>
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	ee18 0a10 	vmov	r0, s16
 800a0fe:	3101      	adds	r1, #1
 800a100:	f000 f91a 	bl	800a338 <_Balloc>
 800a104:	4681      	mov	r9, r0
 800a106:	b918      	cbnz	r0, 800a110 <__gethex+0x424>
 800a108:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <__gethex+0x488>)
 800a10a:	4602      	mov	r2, r0
 800a10c:	2184      	movs	r1, #132	; 0x84
 800a10e:	e6a8      	b.n	8009e62 <__gethex+0x176>
 800a110:	6922      	ldr	r2, [r4, #16]
 800a112:	3202      	adds	r2, #2
 800a114:	f104 010c 	add.w	r1, r4, #12
 800a118:	0092      	lsls	r2, r2, #2
 800a11a:	300c      	adds	r0, #12
 800a11c:	f7fd fb46 	bl	80077ac <memcpy>
 800a120:	4621      	mov	r1, r4
 800a122:	ee18 0a10 	vmov	r0, s16
 800a126:	f000 f947 	bl	800a3b8 <_Bfree>
 800a12a:	464c      	mov	r4, r9
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a134:	6122      	str	r2, [r4, #16]
 800a136:	2201      	movs	r2, #1
 800a138:	615a      	str	r2, [r3, #20]
 800a13a:	e7bb      	b.n	800a0b4 <__gethex+0x3c8>
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	455a      	cmp	r2, fp
 800a140:	dd0b      	ble.n	800a15a <__gethex+0x46e>
 800a142:	2101      	movs	r1, #1
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff fd69 	bl	8009c1c <rshift>
 800a14a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a14e:	3501      	adds	r5, #1
 800a150:	42ab      	cmp	r3, r5
 800a152:	f6ff aed0 	blt.w	8009ef6 <__gethex+0x20a>
 800a156:	2701      	movs	r7, #1
 800a158:	e7c0      	b.n	800a0dc <__gethex+0x3f0>
 800a15a:	f016 061f 	ands.w	r6, r6, #31
 800a15e:	d0fa      	beq.n	800a156 <__gethex+0x46a>
 800a160:	4453      	add	r3, sl
 800a162:	f1c6 0620 	rsb	r6, r6, #32
 800a166:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a16a:	f000 f9d7 	bl	800a51c <__hi0bits>
 800a16e:	42b0      	cmp	r0, r6
 800a170:	dbe7      	blt.n	800a142 <__gethex+0x456>
 800a172:	e7f0      	b.n	800a156 <__gethex+0x46a>
 800a174:	0800c2c0 	.word	0x0800c2c0

0800a178 <L_shift>:
 800a178:	f1c2 0208 	rsb	r2, r2, #8
 800a17c:	0092      	lsls	r2, r2, #2
 800a17e:	b570      	push	{r4, r5, r6, lr}
 800a180:	f1c2 0620 	rsb	r6, r2, #32
 800a184:	6843      	ldr	r3, [r0, #4]
 800a186:	6804      	ldr	r4, [r0, #0]
 800a188:	fa03 f506 	lsl.w	r5, r3, r6
 800a18c:	432c      	orrs	r4, r5
 800a18e:	40d3      	lsrs	r3, r2
 800a190:	6004      	str	r4, [r0, #0]
 800a192:	f840 3f04 	str.w	r3, [r0, #4]!
 800a196:	4288      	cmp	r0, r1
 800a198:	d3f4      	bcc.n	800a184 <L_shift+0xc>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}

0800a19c <__match>:
 800a19c:	b530      	push	{r4, r5, lr}
 800a19e:	6803      	ldr	r3, [r0, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a6:	b914      	cbnz	r4, 800a1ae <__match+0x12>
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	bd30      	pop	{r4, r5, pc}
 800a1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a1b6:	2d19      	cmp	r5, #25
 800a1b8:	bf98      	it	ls
 800a1ba:	3220      	addls	r2, #32
 800a1bc:	42a2      	cmp	r2, r4
 800a1be:	d0f0      	beq.n	800a1a2 <__match+0x6>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e7f3      	b.n	800a1ac <__match+0x10>

0800a1c4 <__hexnan>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	680b      	ldr	r3, [r1, #0]
 800a1ca:	115e      	asrs	r6, r3, #5
 800a1cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1d0:	f013 031f 	ands.w	r3, r3, #31
 800a1d4:	b087      	sub	sp, #28
 800a1d6:	bf18      	it	ne
 800a1d8:	3604      	addne	r6, #4
 800a1da:	2500      	movs	r5, #0
 800a1dc:	1f37      	subs	r7, r6, #4
 800a1de:	4690      	mov	r8, r2
 800a1e0:	6802      	ldr	r2, [r0, #0]
 800a1e2:	9301      	str	r3, [sp, #4]
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1ea:	46b9      	mov	r9, r7
 800a1ec:	463c      	mov	r4, r7
 800a1ee:	9502      	str	r5, [sp, #8]
 800a1f0:	46ab      	mov	fp, r5
 800a1f2:	7851      	ldrb	r1, [r2, #1]
 800a1f4:	1c53      	adds	r3, r2, #1
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	b341      	cbz	r1, 800a24c <__hexnan+0x88>
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	9205      	str	r2, [sp, #20]
 800a1fe:	9104      	str	r1, [sp, #16]
 800a200:	f7ff fd5e 	bl	8009cc0 <__hexdig_fun>
 800a204:	2800      	cmp	r0, #0
 800a206:	d14f      	bne.n	800a2a8 <__hexnan+0xe4>
 800a208:	9904      	ldr	r1, [sp, #16]
 800a20a:	9a05      	ldr	r2, [sp, #20]
 800a20c:	2920      	cmp	r1, #32
 800a20e:	d818      	bhi.n	800a242 <__hexnan+0x7e>
 800a210:	9b02      	ldr	r3, [sp, #8]
 800a212:	459b      	cmp	fp, r3
 800a214:	dd13      	ble.n	800a23e <__hexnan+0x7a>
 800a216:	454c      	cmp	r4, r9
 800a218:	d206      	bcs.n	800a228 <__hexnan+0x64>
 800a21a:	2d07      	cmp	r5, #7
 800a21c:	dc04      	bgt.n	800a228 <__hexnan+0x64>
 800a21e:	462a      	mov	r2, r5
 800a220:	4649      	mov	r1, r9
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff ffa8 	bl	800a178 <L_shift>
 800a228:	4544      	cmp	r4, r8
 800a22a:	d950      	bls.n	800a2ce <__hexnan+0x10a>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f1a4 0904 	sub.w	r9, r4, #4
 800a232:	f844 3c04 	str.w	r3, [r4, #-4]
 800a236:	f8cd b008 	str.w	fp, [sp, #8]
 800a23a:	464c      	mov	r4, r9
 800a23c:	461d      	mov	r5, r3
 800a23e:	9a03      	ldr	r2, [sp, #12]
 800a240:	e7d7      	b.n	800a1f2 <__hexnan+0x2e>
 800a242:	2929      	cmp	r1, #41	; 0x29
 800a244:	d156      	bne.n	800a2f4 <__hexnan+0x130>
 800a246:	3202      	adds	r2, #2
 800a248:	f8ca 2000 	str.w	r2, [sl]
 800a24c:	f1bb 0f00 	cmp.w	fp, #0
 800a250:	d050      	beq.n	800a2f4 <__hexnan+0x130>
 800a252:	454c      	cmp	r4, r9
 800a254:	d206      	bcs.n	800a264 <__hexnan+0xa0>
 800a256:	2d07      	cmp	r5, #7
 800a258:	dc04      	bgt.n	800a264 <__hexnan+0xa0>
 800a25a:	462a      	mov	r2, r5
 800a25c:	4649      	mov	r1, r9
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff ff8a 	bl	800a178 <L_shift>
 800a264:	4544      	cmp	r4, r8
 800a266:	d934      	bls.n	800a2d2 <__hexnan+0x10e>
 800a268:	f1a8 0204 	sub.w	r2, r8, #4
 800a26c:	4623      	mov	r3, r4
 800a26e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a272:	f842 1f04 	str.w	r1, [r2, #4]!
 800a276:	429f      	cmp	r7, r3
 800a278:	d2f9      	bcs.n	800a26e <__hexnan+0xaa>
 800a27a:	1b3b      	subs	r3, r7, r4
 800a27c:	f023 0303 	bic.w	r3, r3, #3
 800a280:	3304      	adds	r3, #4
 800a282:	3401      	adds	r4, #1
 800a284:	3e03      	subs	r6, #3
 800a286:	42b4      	cmp	r4, r6
 800a288:	bf88      	it	hi
 800a28a:	2304      	movhi	r3, #4
 800a28c:	4443      	add	r3, r8
 800a28e:	2200      	movs	r2, #0
 800a290:	f843 2b04 	str.w	r2, [r3], #4
 800a294:	429f      	cmp	r7, r3
 800a296:	d2fb      	bcs.n	800a290 <__hexnan+0xcc>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	b91b      	cbnz	r3, 800a2a4 <__hexnan+0xe0>
 800a29c:	4547      	cmp	r7, r8
 800a29e:	d127      	bne.n	800a2f0 <__hexnan+0x12c>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	2005      	movs	r0, #5
 800a2a6:	e026      	b.n	800a2f6 <__hexnan+0x132>
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	2d08      	cmp	r5, #8
 800a2ac:	f10b 0b01 	add.w	fp, fp, #1
 800a2b0:	dd06      	ble.n	800a2c0 <__hexnan+0xfc>
 800a2b2:	4544      	cmp	r4, r8
 800a2b4:	d9c3      	bls.n	800a23e <__hexnan+0x7a>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2bc:	2501      	movs	r5, #1
 800a2be:	3c04      	subs	r4, #4
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	f000 000f 	and.w	r0, r0, #15
 800a2c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a2ca:	6022      	str	r2, [r4, #0]
 800a2cc:	e7b7      	b.n	800a23e <__hexnan+0x7a>
 800a2ce:	2508      	movs	r5, #8
 800a2d0:	e7b5      	b.n	800a23e <__hexnan+0x7a>
 800a2d2:	9b01      	ldr	r3, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0df      	beq.n	800a298 <__hexnan+0xd4>
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	f1c3 0320 	rsb	r3, r3, #32
 800a2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a2e8:	401a      	ands	r2, r3
 800a2ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800a2ee:	e7d3      	b.n	800a298 <__hexnan+0xd4>
 800a2f0:	3f04      	subs	r7, #4
 800a2f2:	e7d1      	b.n	800a298 <__hexnan+0xd4>
 800a2f4:	2004      	movs	r0, #4
 800a2f6:	b007      	add	sp, #28
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2fc <_localeconv_r>:
 800a2fc:	4800      	ldr	r0, [pc, #0]	; (800a300 <_localeconv_r+0x4>)
 800a2fe:	4770      	bx	lr
 800a300:	200003d0 	.word	0x200003d0

0800a304 <malloc>:
 800a304:	4b02      	ldr	r3, [pc, #8]	; (800a310 <malloc+0xc>)
 800a306:	4601      	mov	r1, r0
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	f000 bd59 	b.w	800adc0 <_malloc_r>
 800a30e:	bf00      	nop
 800a310:	20000278 	.word	0x20000278

0800a314 <__ascii_mbtowc>:
 800a314:	b082      	sub	sp, #8
 800a316:	b901      	cbnz	r1, 800a31a <__ascii_mbtowc+0x6>
 800a318:	a901      	add	r1, sp, #4
 800a31a:	b142      	cbz	r2, 800a32e <__ascii_mbtowc+0x1a>
 800a31c:	b14b      	cbz	r3, 800a332 <__ascii_mbtowc+0x1e>
 800a31e:	7813      	ldrb	r3, [r2, #0]
 800a320:	600b      	str	r3, [r1, #0]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	1e10      	subs	r0, r2, #0
 800a326:	bf18      	it	ne
 800a328:	2001      	movne	r0, #1
 800a32a:	b002      	add	sp, #8
 800a32c:	4770      	bx	lr
 800a32e:	4610      	mov	r0, r2
 800a330:	e7fb      	b.n	800a32a <__ascii_mbtowc+0x16>
 800a332:	f06f 0001 	mvn.w	r0, #1
 800a336:	e7f8      	b.n	800a32a <__ascii_mbtowc+0x16>

0800a338 <_Balloc>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	b976      	cbnz	r6, 800a360 <_Balloc+0x28>
 800a342:	2010      	movs	r0, #16
 800a344:	f7ff ffde 	bl	800a304 <malloc>
 800a348:	4602      	mov	r2, r0
 800a34a:	6260      	str	r0, [r4, #36]	; 0x24
 800a34c:	b920      	cbnz	r0, 800a358 <_Balloc+0x20>
 800a34e:	4b18      	ldr	r3, [pc, #96]	; (800a3b0 <_Balloc+0x78>)
 800a350:	4818      	ldr	r0, [pc, #96]	; (800a3b4 <_Balloc+0x7c>)
 800a352:	2166      	movs	r1, #102	; 0x66
 800a354:	f000 ff44 	bl	800b1e0 <__assert_func>
 800a358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a35c:	6006      	str	r6, [r0, #0]
 800a35e:	60c6      	str	r6, [r0, #12]
 800a360:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a362:	68f3      	ldr	r3, [r6, #12]
 800a364:	b183      	cbz	r3, 800a388 <_Balloc+0x50>
 800a366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a36e:	b9b8      	cbnz	r0, 800a3a0 <_Balloc+0x68>
 800a370:	2101      	movs	r1, #1
 800a372:	fa01 f605 	lsl.w	r6, r1, r5
 800a376:	1d72      	adds	r2, r6, #5
 800a378:	0092      	lsls	r2, r2, #2
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fc9d 	bl	800acba <_calloc_r>
 800a380:	b160      	cbz	r0, 800a39c <_Balloc+0x64>
 800a382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a386:	e00e      	b.n	800a3a6 <_Balloc+0x6e>
 800a388:	2221      	movs	r2, #33	; 0x21
 800a38a:	2104      	movs	r1, #4
 800a38c:	4620      	mov	r0, r4
 800a38e:	f000 fc94 	bl	800acba <_calloc_r>
 800a392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a394:	60f0      	str	r0, [r6, #12]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e4      	bne.n	800a366 <_Balloc+0x2e>
 800a39c:	2000      	movs	r0, #0
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	6802      	ldr	r2, [r0, #0]
 800a3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3ac:	e7f7      	b.n	800a39e <_Balloc+0x66>
 800a3ae:	bf00      	nop
 800a3b0:	0800c24e 	.word	0x0800c24e
 800a3b4:	0800c34c 	.word	0x0800c34c

0800a3b8 <_Bfree>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3bc:	4605      	mov	r5, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	b976      	cbnz	r6, 800a3e0 <_Bfree+0x28>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	f7ff ff9e 	bl	800a304 <malloc>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6268      	str	r0, [r5, #36]	; 0x24
 800a3cc:	b920      	cbnz	r0, 800a3d8 <_Bfree+0x20>
 800a3ce:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <_Bfree+0x3c>)
 800a3d0:	4809      	ldr	r0, [pc, #36]	; (800a3f8 <_Bfree+0x40>)
 800a3d2:	218a      	movs	r1, #138	; 0x8a
 800a3d4:	f000 ff04 	bl	800b1e0 <__assert_func>
 800a3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3dc:	6006      	str	r6, [r0, #0]
 800a3de:	60c6      	str	r6, [r0, #12]
 800a3e0:	b13c      	cbz	r4, 800a3f2 <_Bfree+0x3a>
 800a3e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3e4:	6862      	ldr	r2, [r4, #4]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3ec:	6021      	str	r1, [r4, #0]
 800a3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3f2:	bd70      	pop	{r4, r5, r6, pc}
 800a3f4:	0800c24e 	.word	0x0800c24e
 800a3f8:	0800c34c 	.word	0x0800c34c

0800a3fc <__multadd>:
 800a3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a400:	690d      	ldr	r5, [r1, #16]
 800a402:	4607      	mov	r7, r0
 800a404:	460c      	mov	r4, r1
 800a406:	461e      	mov	r6, r3
 800a408:	f101 0c14 	add.w	ip, r1, #20
 800a40c:	2000      	movs	r0, #0
 800a40e:	f8dc 3000 	ldr.w	r3, [ip]
 800a412:	b299      	uxth	r1, r3
 800a414:	fb02 6101 	mla	r1, r2, r1, r6
 800a418:	0c1e      	lsrs	r6, r3, #16
 800a41a:	0c0b      	lsrs	r3, r1, #16
 800a41c:	fb02 3306 	mla	r3, r2, r6, r3
 800a420:	b289      	uxth	r1, r1
 800a422:	3001      	adds	r0, #1
 800a424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a428:	4285      	cmp	r5, r0
 800a42a:	f84c 1b04 	str.w	r1, [ip], #4
 800a42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a432:	dcec      	bgt.n	800a40e <__multadd+0x12>
 800a434:	b30e      	cbz	r6, 800a47a <__multadd+0x7e>
 800a436:	68a3      	ldr	r3, [r4, #8]
 800a438:	42ab      	cmp	r3, r5
 800a43a:	dc19      	bgt.n	800a470 <__multadd+0x74>
 800a43c:	6861      	ldr	r1, [r4, #4]
 800a43e:	4638      	mov	r0, r7
 800a440:	3101      	adds	r1, #1
 800a442:	f7ff ff79 	bl	800a338 <_Balloc>
 800a446:	4680      	mov	r8, r0
 800a448:	b928      	cbnz	r0, 800a456 <__multadd+0x5a>
 800a44a:	4602      	mov	r2, r0
 800a44c:	4b0c      	ldr	r3, [pc, #48]	; (800a480 <__multadd+0x84>)
 800a44e:	480d      	ldr	r0, [pc, #52]	; (800a484 <__multadd+0x88>)
 800a450:	21b5      	movs	r1, #181	; 0xb5
 800a452:	f000 fec5 	bl	800b1e0 <__assert_func>
 800a456:	6922      	ldr	r2, [r4, #16]
 800a458:	3202      	adds	r2, #2
 800a45a:	f104 010c 	add.w	r1, r4, #12
 800a45e:	0092      	lsls	r2, r2, #2
 800a460:	300c      	adds	r0, #12
 800a462:	f7fd f9a3 	bl	80077ac <memcpy>
 800a466:	4621      	mov	r1, r4
 800a468:	4638      	mov	r0, r7
 800a46a:	f7ff ffa5 	bl	800a3b8 <_Bfree>
 800a46e:	4644      	mov	r4, r8
 800a470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a474:	3501      	adds	r5, #1
 800a476:	615e      	str	r6, [r3, #20]
 800a478:	6125      	str	r5, [r4, #16]
 800a47a:	4620      	mov	r0, r4
 800a47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a480:	0800c2c0 	.word	0x0800c2c0
 800a484:	0800c34c 	.word	0x0800c34c

0800a488 <__s2b>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	460c      	mov	r4, r1
 800a48e:	4615      	mov	r5, r2
 800a490:	461f      	mov	r7, r3
 800a492:	2209      	movs	r2, #9
 800a494:	3308      	adds	r3, #8
 800a496:	4606      	mov	r6, r0
 800a498:	fb93 f3f2 	sdiv	r3, r3, r2
 800a49c:	2100      	movs	r1, #0
 800a49e:	2201      	movs	r2, #1
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	db09      	blt.n	800a4b8 <__s2b+0x30>
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f7ff ff47 	bl	800a338 <_Balloc>
 800a4aa:	b940      	cbnz	r0, 800a4be <__s2b+0x36>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	4b19      	ldr	r3, [pc, #100]	; (800a514 <__s2b+0x8c>)
 800a4b0:	4819      	ldr	r0, [pc, #100]	; (800a518 <__s2b+0x90>)
 800a4b2:	21ce      	movs	r1, #206	; 0xce
 800a4b4:	f000 fe94 	bl	800b1e0 <__assert_func>
 800a4b8:	0052      	lsls	r2, r2, #1
 800a4ba:	3101      	adds	r1, #1
 800a4bc:	e7f0      	b.n	800a4a0 <__s2b+0x18>
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	6143      	str	r3, [r0, #20]
 800a4c2:	2d09      	cmp	r5, #9
 800a4c4:	f04f 0301 	mov.w	r3, #1
 800a4c8:	6103      	str	r3, [r0, #16]
 800a4ca:	dd16      	ble.n	800a4fa <__s2b+0x72>
 800a4cc:	f104 0909 	add.w	r9, r4, #9
 800a4d0:	46c8      	mov	r8, r9
 800a4d2:	442c      	add	r4, r5
 800a4d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4d8:	4601      	mov	r1, r0
 800a4da:	3b30      	subs	r3, #48	; 0x30
 800a4dc:	220a      	movs	r2, #10
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7ff ff8c 	bl	800a3fc <__multadd>
 800a4e4:	45a0      	cmp	r8, r4
 800a4e6:	d1f5      	bne.n	800a4d4 <__s2b+0x4c>
 800a4e8:	f1a5 0408 	sub.w	r4, r5, #8
 800a4ec:	444c      	add	r4, r9
 800a4ee:	1b2d      	subs	r5, r5, r4
 800a4f0:	1963      	adds	r3, r4, r5
 800a4f2:	42bb      	cmp	r3, r7
 800a4f4:	db04      	blt.n	800a500 <__s2b+0x78>
 800a4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4fa:	340a      	adds	r4, #10
 800a4fc:	2509      	movs	r5, #9
 800a4fe:	e7f6      	b.n	800a4ee <__s2b+0x66>
 800a500:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a504:	4601      	mov	r1, r0
 800a506:	3b30      	subs	r3, #48	; 0x30
 800a508:	220a      	movs	r2, #10
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ff76 	bl	800a3fc <__multadd>
 800a510:	e7ee      	b.n	800a4f0 <__s2b+0x68>
 800a512:	bf00      	nop
 800a514:	0800c2c0 	.word	0x0800c2c0
 800a518:	0800c34c 	.word	0x0800c34c

0800a51c <__hi0bits>:
 800a51c:	0c03      	lsrs	r3, r0, #16
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	b9d3      	cbnz	r3, 800a558 <__hi0bits+0x3c>
 800a522:	0400      	lsls	r0, r0, #16
 800a524:	2310      	movs	r3, #16
 800a526:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a52a:	bf04      	itt	eq
 800a52c:	0200      	lsleq	r0, r0, #8
 800a52e:	3308      	addeq	r3, #8
 800a530:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a534:	bf04      	itt	eq
 800a536:	0100      	lsleq	r0, r0, #4
 800a538:	3304      	addeq	r3, #4
 800a53a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a53e:	bf04      	itt	eq
 800a540:	0080      	lsleq	r0, r0, #2
 800a542:	3302      	addeq	r3, #2
 800a544:	2800      	cmp	r0, #0
 800a546:	db05      	blt.n	800a554 <__hi0bits+0x38>
 800a548:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a54c:	f103 0301 	add.w	r3, r3, #1
 800a550:	bf08      	it	eq
 800a552:	2320      	moveq	r3, #32
 800a554:	4618      	mov	r0, r3
 800a556:	4770      	bx	lr
 800a558:	2300      	movs	r3, #0
 800a55a:	e7e4      	b.n	800a526 <__hi0bits+0xa>

0800a55c <__lo0bits>:
 800a55c:	6803      	ldr	r3, [r0, #0]
 800a55e:	f013 0207 	ands.w	r2, r3, #7
 800a562:	4601      	mov	r1, r0
 800a564:	d00b      	beq.n	800a57e <__lo0bits+0x22>
 800a566:	07da      	lsls	r2, r3, #31
 800a568:	d423      	bmi.n	800a5b2 <__lo0bits+0x56>
 800a56a:	0798      	lsls	r0, r3, #30
 800a56c:	bf49      	itett	mi
 800a56e:	085b      	lsrmi	r3, r3, #1
 800a570:	089b      	lsrpl	r3, r3, #2
 800a572:	2001      	movmi	r0, #1
 800a574:	600b      	strmi	r3, [r1, #0]
 800a576:	bf5c      	itt	pl
 800a578:	600b      	strpl	r3, [r1, #0]
 800a57a:	2002      	movpl	r0, #2
 800a57c:	4770      	bx	lr
 800a57e:	b298      	uxth	r0, r3
 800a580:	b9a8      	cbnz	r0, 800a5ae <__lo0bits+0x52>
 800a582:	0c1b      	lsrs	r3, r3, #16
 800a584:	2010      	movs	r0, #16
 800a586:	b2da      	uxtb	r2, r3
 800a588:	b90a      	cbnz	r2, 800a58e <__lo0bits+0x32>
 800a58a:	3008      	adds	r0, #8
 800a58c:	0a1b      	lsrs	r3, r3, #8
 800a58e:	071a      	lsls	r2, r3, #28
 800a590:	bf04      	itt	eq
 800a592:	091b      	lsreq	r3, r3, #4
 800a594:	3004      	addeq	r0, #4
 800a596:	079a      	lsls	r2, r3, #30
 800a598:	bf04      	itt	eq
 800a59a:	089b      	lsreq	r3, r3, #2
 800a59c:	3002      	addeq	r0, #2
 800a59e:	07da      	lsls	r2, r3, #31
 800a5a0:	d403      	bmi.n	800a5aa <__lo0bits+0x4e>
 800a5a2:	085b      	lsrs	r3, r3, #1
 800a5a4:	f100 0001 	add.w	r0, r0, #1
 800a5a8:	d005      	beq.n	800a5b6 <__lo0bits+0x5a>
 800a5aa:	600b      	str	r3, [r1, #0]
 800a5ac:	4770      	bx	lr
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	e7e9      	b.n	800a586 <__lo0bits+0x2a>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	4770      	bx	lr
 800a5b6:	2020      	movs	r0, #32
 800a5b8:	4770      	bx	lr
	...

0800a5bc <__i2b>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	f7ff feb9 	bl	800a338 <_Balloc>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__i2b+0x1a>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <__i2b+0x24>)
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <__i2b+0x28>)
 800a5ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5d2:	f000 fe05 	bl	800b1e0 <__assert_func>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	6144      	str	r4, [r0, #20]
 800a5da:	6103      	str	r3, [r0, #16]
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800c2c0 	.word	0x0800c2c0
 800a5e4:	0800c34c 	.word	0x0800c34c

0800a5e8 <__multiply>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	4691      	mov	r9, r2
 800a5ee:	690a      	ldr	r2, [r1, #16]
 800a5f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	bfb8      	it	lt
 800a5f8:	460b      	movlt	r3, r1
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	bfbc      	itt	lt
 800a5fe:	464c      	movlt	r4, r9
 800a600:	4699      	movlt	r9, r3
 800a602:	6927      	ldr	r7, [r4, #16]
 800a604:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a608:	68a3      	ldr	r3, [r4, #8]
 800a60a:	6861      	ldr	r1, [r4, #4]
 800a60c:	eb07 060a 	add.w	r6, r7, sl
 800a610:	42b3      	cmp	r3, r6
 800a612:	b085      	sub	sp, #20
 800a614:	bfb8      	it	lt
 800a616:	3101      	addlt	r1, #1
 800a618:	f7ff fe8e 	bl	800a338 <_Balloc>
 800a61c:	b930      	cbnz	r0, 800a62c <__multiply+0x44>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b44      	ldr	r3, [pc, #272]	; (800a734 <__multiply+0x14c>)
 800a622:	4845      	ldr	r0, [pc, #276]	; (800a738 <__multiply+0x150>)
 800a624:	f240 115d 	movw	r1, #349	; 0x15d
 800a628:	f000 fdda 	bl	800b1e0 <__assert_func>
 800a62c:	f100 0514 	add.w	r5, r0, #20
 800a630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a634:	462b      	mov	r3, r5
 800a636:	2200      	movs	r2, #0
 800a638:	4543      	cmp	r3, r8
 800a63a:	d321      	bcc.n	800a680 <__multiply+0x98>
 800a63c:	f104 0314 	add.w	r3, r4, #20
 800a640:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a644:	f109 0314 	add.w	r3, r9, #20
 800a648:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a64c:	9202      	str	r2, [sp, #8]
 800a64e:	1b3a      	subs	r2, r7, r4
 800a650:	3a15      	subs	r2, #21
 800a652:	f022 0203 	bic.w	r2, r2, #3
 800a656:	3204      	adds	r2, #4
 800a658:	f104 0115 	add.w	r1, r4, #21
 800a65c:	428f      	cmp	r7, r1
 800a65e:	bf38      	it	cc
 800a660:	2204      	movcc	r2, #4
 800a662:	9201      	str	r2, [sp, #4]
 800a664:	9a02      	ldr	r2, [sp, #8]
 800a666:	9303      	str	r3, [sp, #12]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d80c      	bhi.n	800a686 <__multiply+0x9e>
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	dd03      	ble.n	800a678 <__multiply+0x90>
 800a670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a674:	2b00      	cmp	r3, #0
 800a676:	d05a      	beq.n	800a72e <__multiply+0x146>
 800a678:	6106      	str	r6, [r0, #16]
 800a67a:	b005      	add	sp, #20
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	f843 2b04 	str.w	r2, [r3], #4
 800a684:	e7d8      	b.n	800a638 <__multiply+0x50>
 800a686:	f8b3 a000 	ldrh.w	sl, [r3]
 800a68a:	f1ba 0f00 	cmp.w	sl, #0
 800a68e:	d024      	beq.n	800a6da <__multiply+0xf2>
 800a690:	f104 0e14 	add.w	lr, r4, #20
 800a694:	46a9      	mov	r9, r5
 800a696:	f04f 0c00 	mov.w	ip, #0
 800a69a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a69e:	f8d9 1000 	ldr.w	r1, [r9]
 800a6a2:	fa1f fb82 	uxth.w	fp, r2
 800a6a6:	b289      	uxth	r1, r1
 800a6a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6b4:	4461      	add	r1, ip
 800a6b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6c2:	b289      	uxth	r1, r1
 800a6c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6c8:	4577      	cmp	r7, lr
 800a6ca:	f849 1b04 	str.w	r1, [r9], #4
 800a6ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6d2:	d8e2      	bhi.n	800a69a <__multiply+0xb2>
 800a6d4:	9a01      	ldr	r2, [sp, #4]
 800a6d6:	f845 c002 	str.w	ip, [r5, r2]
 800a6da:	9a03      	ldr	r2, [sp, #12]
 800a6dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	f1b9 0f00 	cmp.w	r9, #0
 800a6e6:	d020      	beq.n	800a72a <__multiply+0x142>
 800a6e8:	6829      	ldr	r1, [r5, #0]
 800a6ea:	f104 0c14 	add.w	ip, r4, #20
 800a6ee:	46ae      	mov	lr, r5
 800a6f0:	f04f 0a00 	mov.w	sl, #0
 800a6f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a6f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a700:	4492      	add	sl, r2
 800a702:	b289      	uxth	r1, r1
 800a704:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a708:	f84e 1b04 	str.w	r1, [lr], #4
 800a70c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a710:	f8be 1000 	ldrh.w	r1, [lr]
 800a714:	0c12      	lsrs	r2, r2, #16
 800a716:	fb09 1102 	mla	r1, r9, r2, r1
 800a71a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a71e:	4567      	cmp	r7, ip
 800a720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a724:	d8e6      	bhi.n	800a6f4 <__multiply+0x10c>
 800a726:	9a01      	ldr	r2, [sp, #4]
 800a728:	50a9      	str	r1, [r5, r2]
 800a72a:	3504      	adds	r5, #4
 800a72c:	e79a      	b.n	800a664 <__multiply+0x7c>
 800a72e:	3e01      	subs	r6, #1
 800a730:	e79c      	b.n	800a66c <__multiply+0x84>
 800a732:	bf00      	nop
 800a734:	0800c2c0 	.word	0x0800c2c0
 800a738:	0800c34c 	.word	0x0800c34c

0800a73c <__pow5mult>:
 800a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a740:	4615      	mov	r5, r2
 800a742:	f012 0203 	ands.w	r2, r2, #3
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	d007      	beq.n	800a75c <__pow5mult+0x20>
 800a74c:	4c25      	ldr	r4, [pc, #148]	; (800a7e4 <__pow5mult+0xa8>)
 800a74e:	3a01      	subs	r2, #1
 800a750:	2300      	movs	r3, #0
 800a752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a756:	f7ff fe51 	bl	800a3fc <__multadd>
 800a75a:	4607      	mov	r7, r0
 800a75c:	10ad      	asrs	r5, r5, #2
 800a75e:	d03d      	beq.n	800a7dc <__pow5mult+0xa0>
 800a760:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a762:	b97c      	cbnz	r4, 800a784 <__pow5mult+0x48>
 800a764:	2010      	movs	r0, #16
 800a766:	f7ff fdcd 	bl	800a304 <malloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6270      	str	r0, [r6, #36]	; 0x24
 800a76e:	b928      	cbnz	r0, 800a77c <__pow5mult+0x40>
 800a770:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <__pow5mult+0xac>)
 800a772:	481e      	ldr	r0, [pc, #120]	; (800a7ec <__pow5mult+0xb0>)
 800a774:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a778:	f000 fd32 	bl	800b1e0 <__assert_func>
 800a77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a780:	6004      	str	r4, [r0, #0]
 800a782:	60c4      	str	r4, [r0, #12]
 800a784:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a78c:	b94c      	cbnz	r4, 800a7a2 <__pow5mult+0x66>
 800a78e:	f240 2171 	movw	r1, #625	; 0x271
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff12 	bl	800a5bc <__i2b>
 800a798:	2300      	movs	r3, #0
 800a79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a79e:	4604      	mov	r4, r0
 800a7a0:	6003      	str	r3, [r0, #0]
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	07eb      	lsls	r3, r5, #31
 800a7a8:	d50a      	bpl.n	800a7c0 <__pow5mult+0x84>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ff1a 	bl	800a5e8 <__multiply>
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff fdfd 	bl	800a3b8 <_Bfree>
 800a7be:	4647      	mov	r7, r8
 800a7c0:	106d      	asrs	r5, r5, #1
 800a7c2:	d00b      	beq.n	800a7dc <__pow5mult+0xa0>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	b938      	cbnz	r0, 800a7d8 <__pow5mult+0x9c>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff ff0b 	bl	800a5e8 <__multiply>
 800a7d2:	6020      	str	r0, [r4, #0]
 800a7d4:	f8c0 9000 	str.w	r9, [r0]
 800a7d8:	4604      	mov	r4, r0
 800a7da:	e7e4      	b.n	800a7a6 <__pow5mult+0x6a>
 800a7dc:	4638      	mov	r0, r7
 800a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e2:	bf00      	nop
 800a7e4:	0800c498 	.word	0x0800c498
 800a7e8:	0800c24e 	.word	0x0800c24e
 800a7ec:	0800c34c 	.word	0x0800c34c

0800a7f0 <__lshift>:
 800a7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	6849      	ldr	r1, [r1, #4]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	4607      	mov	r7, r0
 800a802:	4691      	mov	r9, r2
 800a804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a808:	f108 0601 	add.w	r6, r8, #1
 800a80c:	42b3      	cmp	r3, r6
 800a80e:	db0b      	blt.n	800a828 <__lshift+0x38>
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff fd91 	bl	800a338 <_Balloc>
 800a816:	4605      	mov	r5, r0
 800a818:	b948      	cbnz	r0, 800a82e <__lshift+0x3e>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b2a      	ldr	r3, [pc, #168]	; (800a8c8 <__lshift+0xd8>)
 800a81e:	482b      	ldr	r0, [pc, #172]	; (800a8cc <__lshift+0xdc>)
 800a820:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a824:	f000 fcdc 	bl	800b1e0 <__assert_func>
 800a828:	3101      	adds	r1, #1
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	e7ee      	b.n	800a80c <__lshift+0x1c>
 800a82e:	2300      	movs	r3, #0
 800a830:	f100 0114 	add.w	r1, r0, #20
 800a834:	f100 0210 	add.w	r2, r0, #16
 800a838:	4618      	mov	r0, r3
 800a83a:	4553      	cmp	r3, sl
 800a83c:	db37      	blt.n	800a8ae <__lshift+0xbe>
 800a83e:	6920      	ldr	r0, [r4, #16]
 800a840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a844:	f104 0314 	add.w	r3, r4, #20
 800a848:	f019 091f 	ands.w	r9, r9, #31
 800a84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a850:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a854:	d02f      	beq.n	800a8b6 <__lshift+0xc6>
 800a856:	f1c9 0e20 	rsb	lr, r9, #32
 800a85a:	468a      	mov	sl, r1
 800a85c:	f04f 0c00 	mov.w	ip, #0
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	fa02 f209 	lsl.w	r2, r2, r9
 800a866:	ea42 020c 	orr.w	r2, r2, ip
 800a86a:	f84a 2b04 	str.w	r2, [sl], #4
 800a86e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a872:	4298      	cmp	r0, r3
 800a874:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a878:	d8f2      	bhi.n	800a860 <__lshift+0x70>
 800a87a:	1b03      	subs	r3, r0, r4
 800a87c:	3b15      	subs	r3, #21
 800a87e:	f023 0303 	bic.w	r3, r3, #3
 800a882:	3304      	adds	r3, #4
 800a884:	f104 0215 	add.w	r2, r4, #21
 800a888:	4290      	cmp	r0, r2
 800a88a:	bf38      	it	cc
 800a88c:	2304      	movcc	r3, #4
 800a88e:	f841 c003 	str.w	ip, [r1, r3]
 800a892:	f1bc 0f00 	cmp.w	ip, #0
 800a896:	d001      	beq.n	800a89c <__lshift+0xac>
 800a898:	f108 0602 	add.w	r6, r8, #2
 800a89c:	3e01      	subs	r6, #1
 800a89e:	4638      	mov	r0, r7
 800a8a0:	612e      	str	r6, [r5, #16]
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	f7ff fd88 	bl	800a3b8 <_Bfree>
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	e7c1      	b.n	800a83a <__lshift+0x4a>
 800a8b6:	3904      	subs	r1, #4
 800a8b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c0:	4298      	cmp	r0, r3
 800a8c2:	d8f9      	bhi.n	800a8b8 <__lshift+0xc8>
 800a8c4:	e7ea      	b.n	800a89c <__lshift+0xac>
 800a8c6:	bf00      	nop
 800a8c8:	0800c2c0 	.word	0x0800c2c0
 800a8cc:	0800c34c 	.word	0x0800c34c

0800a8d0 <__mcmp>:
 800a8d0:	b530      	push	{r4, r5, lr}
 800a8d2:	6902      	ldr	r2, [r0, #16]
 800a8d4:	690c      	ldr	r4, [r1, #16]
 800a8d6:	1b12      	subs	r2, r2, r4
 800a8d8:	d10e      	bne.n	800a8f8 <__mcmp+0x28>
 800a8da:	f100 0314 	add.w	r3, r0, #20
 800a8de:	3114      	adds	r1, #20
 800a8e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8f0:	42a5      	cmp	r5, r4
 800a8f2:	d003      	beq.n	800a8fc <__mcmp+0x2c>
 800a8f4:	d305      	bcc.n	800a902 <__mcmp+0x32>
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	bd30      	pop	{r4, r5, pc}
 800a8fc:	4283      	cmp	r3, r0
 800a8fe:	d3f3      	bcc.n	800a8e8 <__mcmp+0x18>
 800a900:	e7fa      	b.n	800a8f8 <__mcmp+0x28>
 800a902:	f04f 32ff 	mov.w	r2, #4294967295
 800a906:	e7f7      	b.n	800a8f8 <__mcmp+0x28>

0800a908 <__mdiff>:
 800a908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	460c      	mov	r4, r1
 800a90e:	4606      	mov	r6, r0
 800a910:	4611      	mov	r1, r2
 800a912:	4620      	mov	r0, r4
 800a914:	4690      	mov	r8, r2
 800a916:	f7ff ffdb 	bl	800a8d0 <__mcmp>
 800a91a:	1e05      	subs	r5, r0, #0
 800a91c:	d110      	bne.n	800a940 <__mdiff+0x38>
 800a91e:	4629      	mov	r1, r5
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff fd09 	bl	800a338 <_Balloc>
 800a926:	b930      	cbnz	r0, 800a936 <__mdiff+0x2e>
 800a928:	4b3a      	ldr	r3, [pc, #232]	; (800aa14 <__mdiff+0x10c>)
 800a92a:	4602      	mov	r2, r0
 800a92c:	f240 2132 	movw	r1, #562	; 0x232
 800a930:	4839      	ldr	r0, [pc, #228]	; (800aa18 <__mdiff+0x110>)
 800a932:	f000 fc55 	bl	800b1e0 <__assert_func>
 800a936:	2301      	movs	r3, #1
 800a938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a93c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a940:	bfa4      	itt	ge
 800a942:	4643      	movge	r3, r8
 800a944:	46a0      	movge	r8, r4
 800a946:	4630      	mov	r0, r6
 800a948:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a94c:	bfa6      	itte	ge
 800a94e:	461c      	movge	r4, r3
 800a950:	2500      	movge	r5, #0
 800a952:	2501      	movlt	r5, #1
 800a954:	f7ff fcf0 	bl	800a338 <_Balloc>
 800a958:	b920      	cbnz	r0, 800a964 <__mdiff+0x5c>
 800a95a:	4b2e      	ldr	r3, [pc, #184]	; (800aa14 <__mdiff+0x10c>)
 800a95c:	4602      	mov	r2, r0
 800a95e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a962:	e7e5      	b.n	800a930 <__mdiff+0x28>
 800a964:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a968:	6926      	ldr	r6, [r4, #16]
 800a96a:	60c5      	str	r5, [r0, #12]
 800a96c:	f104 0914 	add.w	r9, r4, #20
 800a970:	f108 0514 	add.w	r5, r8, #20
 800a974:	f100 0e14 	add.w	lr, r0, #20
 800a978:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a97c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a980:	f108 0210 	add.w	r2, r8, #16
 800a984:	46f2      	mov	sl, lr
 800a986:	2100      	movs	r1, #0
 800a988:	f859 3b04 	ldr.w	r3, [r9], #4
 800a98c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a990:	fa1f f883 	uxth.w	r8, r3
 800a994:	fa11 f18b 	uxtah	r1, r1, fp
 800a998:	0c1b      	lsrs	r3, r3, #16
 800a99a:	eba1 0808 	sub.w	r8, r1, r8
 800a99e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9a6:	fa1f f888 	uxth.w	r8, r8
 800a9aa:	1419      	asrs	r1, r3, #16
 800a9ac:	454e      	cmp	r6, r9
 800a9ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9b2:	f84a 3b04 	str.w	r3, [sl], #4
 800a9b6:	d8e7      	bhi.n	800a988 <__mdiff+0x80>
 800a9b8:	1b33      	subs	r3, r6, r4
 800a9ba:	3b15      	subs	r3, #21
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	3304      	adds	r3, #4
 800a9c2:	3415      	adds	r4, #21
 800a9c4:	42a6      	cmp	r6, r4
 800a9c6:	bf38      	it	cc
 800a9c8:	2304      	movcc	r3, #4
 800a9ca:	441d      	add	r5, r3
 800a9cc:	4473      	add	r3, lr
 800a9ce:	469e      	mov	lr, r3
 800a9d0:	462e      	mov	r6, r5
 800a9d2:	4566      	cmp	r6, ip
 800a9d4:	d30e      	bcc.n	800a9f4 <__mdiff+0xec>
 800a9d6:	f10c 0203 	add.w	r2, ip, #3
 800a9da:	1b52      	subs	r2, r2, r5
 800a9dc:	f022 0203 	bic.w	r2, r2, #3
 800a9e0:	3d03      	subs	r5, #3
 800a9e2:	45ac      	cmp	ip, r5
 800a9e4:	bf38      	it	cc
 800a9e6:	2200      	movcc	r2, #0
 800a9e8:	441a      	add	r2, r3
 800a9ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9ee:	b17b      	cbz	r3, 800aa10 <__mdiff+0x108>
 800a9f0:	6107      	str	r7, [r0, #16]
 800a9f2:	e7a3      	b.n	800a93c <__mdiff+0x34>
 800a9f4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9f8:	fa11 f288 	uxtah	r2, r1, r8
 800a9fc:	1414      	asrs	r4, r2, #16
 800a9fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa02:	b292      	uxth	r2, r2
 800aa04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa08:	f84e 2b04 	str.w	r2, [lr], #4
 800aa0c:	1421      	asrs	r1, r4, #16
 800aa0e:	e7e0      	b.n	800a9d2 <__mdiff+0xca>
 800aa10:	3f01      	subs	r7, #1
 800aa12:	e7ea      	b.n	800a9ea <__mdiff+0xe2>
 800aa14:	0800c2c0 	.word	0x0800c2c0
 800aa18:	0800c34c 	.word	0x0800c34c

0800aa1c <__ulp>:
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	ed8d 0b00 	vstr	d0, [sp]
 800aa22:	9b01      	ldr	r3, [sp, #4]
 800aa24:	4912      	ldr	r1, [pc, #72]	; (800aa70 <__ulp+0x54>)
 800aa26:	4019      	ands	r1, r3
 800aa28:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aa2c:	2900      	cmp	r1, #0
 800aa2e:	dd05      	ble.n	800aa3c <__ulp+0x20>
 800aa30:	2200      	movs	r2, #0
 800aa32:	460b      	mov	r3, r1
 800aa34:	ec43 2b10 	vmov	d0, r2, r3
 800aa38:	b002      	add	sp, #8
 800aa3a:	4770      	bx	lr
 800aa3c:	4249      	negs	r1, r1
 800aa3e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa42:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa46:	f04f 0200 	mov.w	r2, #0
 800aa4a:	f04f 0300 	mov.w	r3, #0
 800aa4e:	da04      	bge.n	800aa5a <__ulp+0x3e>
 800aa50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa54:	fa41 f300 	asr.w	r3, r1, r0
 800aa58:	e7ec      	b.n	800aa34 <__ulp+0x18>
 800aa5a:	f1a0 0114 	sub.w	r1, r0, #20
 800aa5e:	291e      	cmp	r1, #30
 800aa60:	bfda      	itte	le
 800aa62:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa66:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa6a:	2101      	movgt	r1, #1
 800aa6c:	460a      	mov	r2, r1
 800aa6e:	e7e1      	b.n	800aa34 <__ulp+0x18>
 800aa70:	7ff00000 	.word	0x7ff00000

0800aa74 <__b2d>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	6905      	ldr	r5, [r0, #16]
 800aa78:	f100 0714 	add.w	r7, r0, #20
 800aa7c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa80:	1f2e      	subs	r6, r5, #4
 800aa82:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa86:	4620      	mov	r0, r4
 800aa88:	f7ff fd48 	bl	800a51c <__hi0bits>
 800aa8c:	f1c0 0320 	rsb	r3, r0, #32
 800aa90:	280a      	cmp	r0, #10
 800aa92:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab10 <__b2d+0x9c>
 800aa96:	600b      	str	r3, [r1, #0]
 800aa98:	dc14      	bgt.n	800aac4 <__b2d+0x50>
 800aa9a:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa9e:	fa24 f10e 	lsr.w	r1, r4, lr
 800aaa2:	42b7      	cmp	r7, r6
 800aaa4:	ea41 030c 	orr.w	r3, r1, ip
 800aaa8:	bf34      	ite	cc
 800aaaa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aaae:	2100      	movcs	r1, #0
 800aab0:	3015      	adds	r0, #21
 800aab2:	fa04 f000 	lsl.w	r0, r4, r0
 800aab6:	fa21 f10e 	lsr.w	r1, r1, lr
 800aaba:	ea40 0201 	orr.w	r2, r0, r1
 800aabe:	ec43 2b10 	vmov	d0, r2, r3
 800aac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac4:	42b7      	cmp	r7, r6
 800aac6:	bf3a      	itte	cc
 800aac8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aacc:	f1a5 0608 	subcc.w	r6, r5, #8
 800aad0:	2100      	movcs	r1, #0
 800aad2:	380b      	subs	r0, #11
 800aad4:	d017      	beq.n	800ab06 <__b2d+0x92>
 800aad6:	f1c0 0c20 	rsb	ip, r0, #32
 800aada:	fa04 f500 	lsl.w	r5, r4, r0
 800aade:	42be      	cmp	r6, r7
 800aae0:	fa21 f40c 	lsr.w	r4, r1, ip
 800aae4:	ea45 0504 	orr.w	r5, r5, r4
 800aae8:	bf8c      	ite	hi
 800aaea:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aaee:	2400      	movls	r4, #0
 800aaf0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aaf4:	fa01 f000 	lsl.w	r0, r1, r0
 800aaf8:	fa24 f40c 	lsr.w	r4, r4, ip
 800aafc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab00:	ea40 0204 	orr.w	r2, r0, r4
 800ab04:	e7db      	b.n	800aabe <__b2d+0x4a>
 800ab06:	ea44 030c 	orr.w	r3, r4, ip
 800ab0a:	460a      	mov	r2, r1
 800ab0c:	e7d7      	b.n	800aabe <__b2d+0x4a>
 800ab0e:	bf00      	nop
 800ab10:	3ff00000 	.word	0x3ff00000

0800ab14 <__d2b>:
 800ab14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	4689      	mov	r9, r1
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	ec57 6b10 	vmov	r6, r7, d0
 800ab20:	4690      	mov	r8, r2
 800ab22:	f7ff fc09 	bl	800a338 <_Balloc>
 800ab26:	4604      	mov	r4, r0
 800ab28:	b930      	cbnz	r0, 800ab38 <__d2b+0x24>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	4b25      	ldr	r3, [pc, #148]	; (800abc4 <__d2b+0xb0>)
 800ab2e:	4826      	ldr	r0, [pc, #152]	; (800abc8 <__d2b+0xb4>)
 800ab30:	f240 310a 	movw	r1, #778	; 0x30a
 800ab34:	f000 fb54 	bl	800b1e0 <__assert_func>
 800ab38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab40:	bb35      	cbnz	r5, 800ab90 <__d2b+0x7c>
 800ab42:	2e00      	cmp	r6, #0
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	d028      	beq.n	800ab9a <__d2b+0x86>
 800ab48:	4668      	mov	r0, sp
 800ab4a:	9600      	str	r6, [sp, #0]
 800ab4c:	f7ff fd06 	bl	800a55c <__lo0bits>
 800ab50:	9900      	ldr	r1, [sp, #0]
 800ab52:	b300      	cbz	r0, 800ab96 <__d2b+0x82>
 800ab54:	9a01      	ldr	r2, [sp, #4]
 800ab56:	f1c0 0320 	rsb	r3, r0, #32
 800ab5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5e:	430b      	orrs	r3, r1
 800ab60:	40c2      	lsrs	r2, r0
 800ab62:	6163      	str	r3, [r4, #20]
 800ab64:	9201      	str	r2, [sp, #4]
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	61a3      	str	r3, [r4, #24]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bf14      	ite	ne
 800ab6e:	2202      	movne	r2, #2
 800ab70:	2201      	moveq	r2, #1
 800ab72:	6122      	str	r2, [r4, #16]
 800ab74:	b1d5      	cbz	r5, 800abac <__d2b+0x98>
 800ab76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab7a:	4405      	add	r5, r0
 800ab7c:	f8c9 5000 	str.w	r5, [r9]
 800ab80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab84:	f8c8 0000 	str.w	r0, [r8]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	b003      	add	sp, #12
 800ab8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab94:	e7d5      	b.n	800ab42 <__d2b+0x2e>
 800ab96:	6161      	str	r1, [r4, #20]
 800ab98:	e7e5      	b.n	800ab66 <__d2b+0x52>
 800ab9a:	a801      	add	r0, sp, #4
 800ab9c:	f7ff fcde 	bl	800a55c <__lo0bits>
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	6163      	str	r3, [r4, #20]
 800aba4:	2201      	movs	r2, #1
 800aba6:	6122      	str	r2, [r4, #16]
 800aba8:	3020      	adds	r0, #32
 800abaa:	e7e3      	b.n	800ab74 <__d2b+0x60>
 800abac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abb4:	f8c9 0000 	str.w	r0, [r9]
 800abb8:	6918      	ldr	r0, [r3, #16]
 800abba:	f7ff fcaf 	bl	800a51c <__hi0bits>
 800abbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abc2:	e7df      	b.n	800ab84 <__d2b+0x70>
 800abc4:	0800c2c0 	.word	0x0800c2c0
 800abc8:	0800c34c 	.word	0x0800c34c

0800abcc <__ratio>:
 800abcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	4688      	mov	r8, r1
 800abd2:	4669      	mov	r1, sp
 800abd4:	4681      	mov	r9, r0
 800abd6:	f7ff ff4d 	bl	800aa74 <__b2d>
 800abda:	a901      	add	r1, sp, #4
 800abdc:	4640      	mov	r0, r8
 800abde:	ec55 4b10 	vmov	r4, r5, d0
 800abe2:	f7ff ff47 	bl	800aa74 <__b2d>
 800abe6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abea:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abee:	eba3 0c02 	sub.w	ip, r3, r2
 800abf2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abfc:	ec51 0b10 	vmov	r0, r1, d0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bfd6      	itet	le
 800ac04:	460a      	movle	r2, r1
 800ac06:	462a      	movgt	r2, r5
 800ac08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac0c:	468b      	mov	fp, r1
 800ac0e:	462f      	mov	r7, r5
 800ac10:	bfd4      	ite	le
 800ac12:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	ee10 2a10 	vmov	r2, s0
 800ac20:	465b      	mov	r3, fp
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 ff7a 	bl	8000b1c <__aeabi_ddiv>
 800ac28:	ec41 0b10 	vmov	d0, r0, r1
 800ac2c:	b003      	add	sp, #12
 800ac2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac32 <__copybits>:
 800ac32:	3901      	subs	r1, #1
 800ac34:	b570      	push	{r4, r5, r6, lr}
 800ac36:	1149      	asrs	r1, r1, #5
 800ac38:	6914      	ldr	r4, [r2, #16]
 800ac3a:	3101      	adds	r1, #1
 800ac3c:	f102 0314 	add.w	r3, r2, #20
 800ac40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac48:	1f05      	subs	r5, r0, #4
 800ac4a:	42a3      	cmp	r3, r4
 800ac4c:	d30c      	bcc.n	800ac68 <__copybits+0x36>
 800ac4e:	1aa3      	subs	r3, r4, r2
 800ac50:	3b11      	subs	r3, #17
 800ac52:	f023 0303 	bic.w	r3, r3, #3
 800ac56:	3211      	adds	r2, #17
 800ac58:	42a2      	cmp	r2, r4
 800ac5a:	bf88      	it	hi
 800ac5c:	2300      	movhi	r3, #0
 800ac5e:	4418      	add	r0, r3
 800ac60:	2300      	movs	r3, #0
 800ac62:	4288      	cmp	r0, r1
 800ac64:	d305      	bcc.n	800ac72 <__copybits+0x40>
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac6c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac70:	e7eb      	b.n	800ac4a <__copybits+0x18>
 800ac72:	f840 3b04 	str.w	r3, [r0], #4
 800ac76:	e7f4      	b.n	800ac62 <__copybits+0x30>

0800ac78 <__any_on>:
 800ac78:	f100 0214 	add.w	r2, r0, #20
 800ac7c:	6900      	ldr	r0, [r0, #16]
 800ac7e:	114b      	asrs	r3, r1, #5
 800ac80:	4298      	cmp	r0, r3
 800ac82:	b510      	push	{r4, lr}
 800ac84:	db11      	blt.n	800acaa <__any_on+0x32>
 800ac86:	dd0a      	ble.n	800ac9e <__any_on+0x26>
 800ac88:	f011 011f 	ands.w	r1, r1, #31
 800ac8c:	d007      	beq.n	800ac9e <__any_on+0x26>
 800ac8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac92:	fa24 f001 	lsr.w	r0, r4, r1
 800ac96:	fa00 f101 	lsl.w	r1, r0, r1
 800ac9a:	428c      	cmp	r4, r1
 800ac9c:	d10b      	bne.n	800acb6 <__any_on+0x3e>
 800ac9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d803      	bhi.n	800acae <__any_on+0x36>
 800aca6:	2000      	movs	r0, #0
 800aca8:	bd10      	pop	{r4, pc}
 800acaa:	4603      	mov	r3, r0
 800acac:	e7f7      	b.n	800ac9e <__any_on+0x26>
 800acae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acb2:	2900      	cmp	r1, #0
 800acb4:	d0f5      	beq.n	800aca2 <__any_on+0x2a>
 800acb6:	2001      	movs	r0, #1
 800acb8:	e7f6      	b.n	800aca8 <__any_on+0x30>

0800acba <_calloc_r>:
 800acba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acbc:	fba1 2402 	umull	r2, r4, r1, r2
 800acc0:	b94c      	cbnz	r4, 800acd6 <_calloc_r+0x1c>
 800acc2:	4611      	mov	r1, r2
 800acc4:	9201      	str	r2, [sp, #4]
 800acc6:	f000 f87b 	bl	800adc0 <_malloc_r>
 800acca:	9a01      	ldr	r2, [sp, #4]
 800accc:	4605      	mov	r5, r0
 800acce:	b930      	cbnz	r0, 800acde <_calloc_r+0x24>
 800acd0:	4628      	mov	r0, r5
 800acd2:	b003      	add	sp, #12
 800acd4:	bd30      	pop	{r4, r5, pc}
 800acd6:	220c      	movs	r2, #12
 800acd8:	6002      	str	r2, [r0, #0]
 800acda:	2500      	movs	r5, #0
 800acdc:	e7f8      	b.n	800acd0 <_calloc_r+0x16>
 800acde:	4621      	mov	r1, r4
 800ace0:	f7fc fd72 	bl	80077c8 <memset>
 800ace4:	e7f4      	b.n	800acd0 <_calloc_r+0x16>
	...

0800ace8 <_free_r>:
 800ace8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acea:	2900      	cmp	r1, #0
 800acec:	d044      	beq.n	800ad78 <_free_r+0x90>
 800acee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf2:	9001      	str	r0, [sp, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f1a1 0404 	sub.w	r4, r1, #4
 800acfa:	bfb8      	it	lt
 800acfc:	18e4      	addlt	r4, r4, r3
 800acfe:	f000 fab9 	bl	800b274 <__malloc_lock>
 800ad02:	4a1e      	ldr	r2, [pc, #120]	; (800ad7c <_free_r+0x94>)
 800ad04:	9801      	ldr	r0, [sp, #4]
 800ad06:	6813      	ldr	r3, [r2, #0]
 800ad08:	b933      	cbnz	r3, 800ad18 <_free_r+0x30>
 800ad0a:	6063      	str	r3, [r4, #4]
 800ad0c:	6014      	str	r4, [r2, #0]
 800ad0e:	b003      	add	sp, #12
 800ad10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad14:	f000 bab4 	b.w	800b280 <__malloc_unlock>
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	d908      	bls.n	800ad2e <_free_r+0x46>
 800ad1c:	6825      	ldr	r5, [r4, #0]
 800ad1e:	1961      	adds	r1, r4, r5
 800ad20:	428b      	cmp	r3, r1
 800ad22:	bf01      	itttt	eq
 800ad24:	6819      	ldreq	r1, [r3, #0]
 800ad26:	685b      	ldreq	r3, [r3, #4]
 800ad28:	1949      	addeq	r1, r1, r5
 800ad2a:	6021      	streq	r1, [r4, #0]
 800ad2c:	e7ed      	b.n	800ad0a <_free_r+0x22>
 800ad2e:	461a      	mov	r2, r3
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	b10b      	cbz	r3, 800ad38 <_free_r+0x50>
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	d9fa      	bls.n	800ad2e <_free_r+0x46>
 800ad38:	6811      	ldr	r1, [r2, #0]
 800ad3a:	1855      	adds	r5, r2, r1
 800ad3c:	42a5      	cmp	r5, r4
 800ad3e:	d10b      	bne.n	800ad58 <_free_r+0x70>
 800ad40:	6824      	ldr	r4, [r4, #0]
 800ad42:	4421      	add	r1, r4
 800ad44:	1854      	adds	r4, r2, r1
 800ad46:	42a3      	cmp	r3, r4
 800ad48:	6011      	str	r1, [r2, #0]
 800ad4a:	d1e0      	bne.n	800ad0e <_free_r+0x26>
 800ad4c:	681c      	ldr	r4, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	6053      	str	r3, [r2, #4]
 800ad52:	4421      	add	r1, r4
 800ad54:	6011      	str	r1, [r2, #0]
 800ad56:	e7da      	b.n	800ad0e <_free_r+0x26>
 800ad58:	d902      	bls.n	800ad60 <_free_r+0x78>
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	6003      	str	r3, [r0, #0]
 800ad5e:	e7d6      	b.n	800ad0e <_free_r+0x26>
 800ad60:	6825      	ldr	r5, [r4, #0]
 800ad62:	1961      	adds	r1, r4, r5
 800ad64:	428b      	cmp	r3, r1
 800ad66:	bf04      	itt	eq
 800ad68:	6819      	ldreq	r1, [r3, #0]
 800ad6a:	685b      	ldreq	r3, [r3, #4]
 800ad6c:	6063      	str	r3, [r4, #4]
 800ad6e:	bf04      	itt	eq
 800ad70:	1949      	addeq	r1, r1, r5
 800ad72:	6021      	streq	r1, [r4, #0]
 800ad74:	6054      	str	r4, [r2, #4]
 800ad76:	e7ca      	b.n	800ad0e <_free_r+0x26>
 800ad78:	b003      	add	sp, #12
 800ad7a:	bd30      	pop	{r4, r5, pc}
 800ad7c:	2000134c 	.word	0x2000134c

0800ad80 <sbrk_aligned>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4e0e      	ldr	r6, [pc, #56]	; (800adbc <sbrk_aligned+0x3c>)
 800ad84:	460c      	mov	r4, r1
 800ad86:	6831      	ldr	r1, [r6, #0]
 800ad88:	4605      	mov	r5, r0
 800ad8a:	b911      	cbnz	r1, 800ad92 <sbrk_aligned+0x12>
 800ad8c:	f000 f9f0 	bl	800b170 <_sbrk_r>
 800ad90:	6030      	str	r0, [r6, #0]
 800ad92:	4621      	mov	r1, r4
 800ad94:	4628      	mov	r0, r5
 800ad96:	f000 f9eb 	bl	800b170 <_sbrk_r>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d00a      	beq.n	800adb4 <sbrk_aligned+0x34>
 800ad9e:	1cc4      	adds	r4, r0, #3
 800ada0:	f024 0403 	bic.w	r4, r4, #3
 800ada4:	42a0      	cmp	r0, r4
 800ada6:	d007      	beq.n	800adb8 <sbrk_aligned+0x38>
 800ada8:	1a21      	subs	r1, r4, r0
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f9e0 	bl	800b170 <_sbrk_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d101      	bne.n	800adb8 <sbrk_aligned+0x38>
 800adb4:	f04f 34ff 	mov.w	r4, #4294967295
 800adb8:	4620      	mov	r0, r4
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	20001350 	.word	0x20001350

0800adc0 <_malloc_r>:
 800adc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	1ccd      	adds	r5, r1, #3
 800adc6:	f025 0503 	bic.w	r5, r5, #3
 800adca:	3508      	adds	r5, #8
 800adcc:	2d0c      	cmp	r5, #12
 800adce:	bf38      	it	cc
 800add0:	250c      	movcc	r5, #12
 800add2:	2d00      	cmp	r5, #0
 800add4:	4607      	mov	r7, r0
 800add6:	db01      	blt.n	800addc <_malloc_r+0x1c>
 800add8:	42a9      	cmp	r1, r5
 800adda:	d905      	bls.n	800ade8 <_malloc_r+0x28>
 800addc:	230c      	movs	r3, #12
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	2600      	movs	r6, #0
 800ade2:	4630      	mov	r0, r6
 800ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade8:	4e2e      	ldr	r6, [pc, #184]	; (800aea4 <_malloc_r+0xe4>)
 800adea:	f000 fa43 	bl	800b274 <__malloc_lock>
 800adee:	6833      	ldr	r3, [r6, #0]
 800adf0:	461c      	mov	r4, r3
 800adf2:	bb34      	cbnz	r4, 800ae42 <_malloc_r+0x82>
 800adf4:	4629      	mov	r1, r5
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7ff ffc2 	bl	800ad80 <sbrk_aligned>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	4604      	mov	r4, r0
 800ae00:	d14d      	bne.n	800ae9e <_malloc_r+0xde>
 800ae02:	6834      	ldr	r4, [r6, #0]
 800ae04:	4626      	mov	r6, r4
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d140      	bne.n	800ae8c <_malloc_r+0xcc>
 800ae0a:	6823      	ldr	r3, [r4, #0]
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4638      	mov	r0, r7
 800ae10:	eb04 0803 	add.w	r8, r4, r3
 800ae14:	f000 f9ac 	bl	800b170 <_sbrk_r>
 800ae18:	4580      	cmp	r8, r0
 800ae1a:	d13a      	bne.n	800ae92 <_malloc_r+0xd2>
 800ae1c:	6821      	ldr	r1, [r4, #0]
 800ae1e:	3503      	adds	r5, #3
 800ae20:	1a6d      	subs	r5, r5, r1
 800ae22:	f025 0503 	bic.w	r5, r5, #3
 800ae26:	3508      	adds	r5, #8
 800ae28:	2d0c      	cmp	r5, #12
 800ae2a:	bf38      	it	cc
 800ae2c:	250c      	movcc	r5, #12
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4638      	mov	r0, r7
 800ae32:	f7ff ffa5 	bl	800ad80 <sbrk_aligned>
 800ae36:	3001      	adds	r0, #1
 800ae38:	d02b      	beq.n	800ae92 <_malloc_r+0xd2>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	442b      	add	r3, r5
 800ae3e:	6023      	str	r3, [r4, #0]
 800ae40:	e00e      	b.n	800ae60 <_malloc_r+0xa0>
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	1b52      	subs	r2, r2, r5
 800ae46:	d41e      	bmi.n	800ae86 <_malloc_r+0xc6>
 800ae48:	2a0b      	cmp	r2, #11
 800ae4a:	d916      	bls.n	800ae7a <_malloc_r+0xba>
 800ae4c:	1961      	adds	r1, r4, r5
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	6025      	str	r5, [r4, #0]
 800ae52:	bf18      	it	ne
 800ae54:	6059      	strne	r1, [r3, #4]
 800ae56:	6863      	ldr	r3, [r4, #4]
 800ae58:	bf08      	it	eq
 800ae5a:	6031      	streq	r1, [r6, #0]
 800ae5c:	5162      	str	r2, [r4, r5]
 800ae5e:	604b      	str	r3, [r1, #4]
 800ae60:	4638      	mov	r0, r7
 800ae62:	f104 060b 	add.w	r6, r4, #11
 800ae66:	f000 fa0b 	bl	800b280 <__malloc_unlock>
 800ae6a:	f026 0607 	bic.w	r6, r6, #7
 800ae6e:	1d23      	adds	r3, r4, #4
 800ae70:	1af2      	subs	r2, r6, r3
 800ae72:	d0b6      	beq.n	800ade2 <_malloc_r+0x22>
 800ae74:	1b9b      	subs	r3, r3, r6
 800ae76:	50a3      	str	r3, [r4, r2]
 800ae78:	e7b3      	b.n	800ade2 <_malloc_r+0x22>
 800ae7a:	6862      	ldr	r2, [r4, #4]
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	bf0c      	ite	eq
 800ae80:	6032      	streq	r2, [r6, #0]
 800ae82:	605a      	strne	r2, [r3, #4]
 800ae84:	e7ec      	b.n	800ae60 <_malloc_r+0xa0>
 800ae86:	4623      	mov	r3, r4
 800ae88:	6864      	ldr	r4, [r4, #4]
 800ae8a:	e7b2      	b.n	800adf2 <_malloc_r+0x32>
 800ae8c:	4634      	mov	r4, r6
 800ae8e:	6876      	ldr	r6, [r6, #4]
 800ae90:	e7b9      	b.n	800ae06 <_malloc_r+0x46>
 800ae92:	230c      	movs	r3, #12
 800ae94:	603b      	str	r3, [r7, #0]
 800ae96:	4638      	mov	r0, r7
 800ae98:	f000 f9f2 	bl	800b280 <__malloc_unlock>
 800ae9c:	e7a1      	b.n	800ade2 <_malloc_r+0x22>
 800ae9e:	6025      	str	r5, [r4, #0]
 800aea0:	e7de      	b.n	800ae60 <_malloc_r+0xa0>
 800aea2:	bf00      	nop
 800aea4:	2000134c 	.word	0x2000134c

0800aea8 <__ssputs_r>:
 800aea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeac:	688e      	ldr	r6, [r1, #8]
 800aeae:	429e      	cmp	r6, r3
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4690      	mov	r8, r2
 800aeb6:	461f      	mov	r7, r3
 800aeb8:	d838      	bhi.n	800af2c <__ssputs_r+0x84>
 800aeba:	898a      	ldrh	r2, [r1, #12]
 800aebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aec0:	d032      	beq.n	800af28 <__ssputs_r+0x80>
 800aec2:	6825      	ldr	r5, [r4, #0]
 800aec4:	6909      	ldr	r1, [r1, #16]
 800aec6:	eba5 0901 	sub.w	r9, r5, r1
 800aeca:	6965      	ldr	r5, [r4, #20]
 800aecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aed0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aed4:	3301      	adds	r3, #1
 800aed6:	444b      	add	r3, r9
 800aed8:	106d      	asrs	r5, r5, #1
 800aeda:	429d      	cmp	r5, r3
 800aedc:	bf38      	it	cc
 800aede:	461d      	movcc	r5, r3
 800aee0:	0553      	lsls	r3, r2, #21
 800aee2:	d531      	bpl.n	800af48 <__ssputs_r+0xa0>
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7ff ff6b 	bl	800adc0 <_malloc_r>
 800aeea:	4606      	mov	r6, r0
 800aeec:	b950      	cbnz	r0, 800af04 <__ssputs_r+0x5c>
 800aeee:	230c      	movs	r3, #12
 800aef0:	f8ca 3000 	str.w	r3, [sl]
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefa:	81a3      	strh	r3, [r4, #12]
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	6921      	ldr	r1, [r4, #16]
 800af06:	464a      	mov	r2, r9
 800af08:	f7fc fc50 	bl	80077ac <memcpy>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	6126      	str	r6, [r4, #16]
 800af1a:	6165      	str	r5, [r4, #20]
 800af1c:	444e      	add	r6, r9
 800af1e:	eba5 0509 	sub.w	r5, r5, r9
 800af22:	6026      	str	r6, [r4, #0]
 800af24:	60a5      	str	r5, [r4, #8]
 800af26:	463e      	mov	r6, r7
 800af28:	42be      	cmp	r6, r7
 800af2a:	d900      	bls.n	800af2e <__ssputs_r+0x86>
 800af2c:	463e      	mov	r6, r7
 800af2e:	6820      	ldr	r0, [r4, #0]
 800af30:	4632      	mov	r2, r6
 800af32:	4641      	mov	r1, r8
 800af34:	f000 f984 	bl	800b240 <memmove>
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	1b9b      	subs	r3, r3, r6
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	4433      	add	r3, r6
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	2000      	movs	r0, #0
 800af46:	e7db      	b.n	800af00 <__ssputs_r+0x58>
 800af48:	462a      	mov	r2, r5
 800af4a:	f000 f99f 	bl	800b28c <_realloc_r>
 800af4e:	4606      	mov	r6, r0
 800af50:	2800      	cmp	r0, #0
 800af52:	d1e1      	bne.n	800af18 <__ssputs_r+0x70>
 800af54:	6921      	ldr	r1, [r4, #16]
 800af56:	4650      	mov	r0, sl
 800af58:	f7ff fec6 	bl	800ace8 <_free_r>
 800af5c:	e7c7      	b.n	800aeee <__ssputs_r+0x46>
	...

0800af60 <_svfiprintf_r>:
 800af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af64:	4698      	mov	r8, r3
 800af66:	898b      	ldrh	r3, [r1, #12]
 800af68:	061b      	lsls	r3, r3, #24
 800af6a:	b09d      	sub	sp, #116	; 0x74
 800af6c:	4607      	mov	r7, r0
 800af6e:	460d      	mov	r5, r1
 800af70:	4614      	mov	r4, r2
 800af72:	d50e      	bpl.n	800af92 <_svfiprintf_r+0x32>
 800af74:	690b      	ldr	r3, [r1, #16]
 800af76:	b963      	cbnz	r3, 800af92 <_svfiprintf_r+0x32>
 800af78:	2140      	movs	r1, #64	; 0x40
 800af7a:	f7ff ff21 	bl	800adc0 <_malloc_r>
 800af7e:	6028      	str	r0, [r5, #0]
 800af80:	6128      	str	r0, [r5, #16]
 800af82:	b920      	cbnz	r0, 800af8e <_svfiprintf_r+0x2e>
 800af84:	230c      	movs	r3, #12
 800af86:	603b      	str	r3, [r7, #0]
 800af88:	f04f 30ff 	mov.w	r0, #4294967295
 800af8c:	e0d1      	b.n	800b132 <_svfiprintf_r+0x1d2>
 800af8e:	2340      	movs	r3, #64	; 0x40
 800af90:	616b      	str	r3, [r5, #20]
 800af92:	2300      	movs	r3, #0
 800af94:	9309      	str	r3, [sp, #36]	; 0x24
 800af96:	2320      	movs	r3, #32
 800af98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800afa0:	2330      	movs	r3, #48	; 0x30
 800afa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b14c <_svfiprintf_r+0x1ec>
 800afa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afaa:	f04f 0901 	mov.w	r9, #1
 800afae:	4623      	mov	r3, r4
 800afb0:	469a      	mov	sl, r3
 800afb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb6:	b10a      	cbz	r2, 800afbc <_svfiprintf_r+0x5c>
 800afb8:	2a25      	cmp	r2, #37	; 0x25
 800afba:	d1f9      	bne.n	800afb0 <_svfiprintf_r+0x50>
 800afbc:	ebba 0b04 	subs.w	fp, sl, r4
 800afc0:	d00b      	beq.n	800afda <_svfiprintf_r+0x7a>
 800afc2:	465b      	mov	r3, fp
 800afc4:	4622      	mov	r2, r4
 800afc6:	4629      	mov	r1, r5
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff ff6d 	bl	800aea8 <__ssputs_r>
 800afce:	3001      	adds	r0, #1
 800afd0:	f000 80aa 	beq.w	800b128 <_svfiprintf_r+0x1c8>
 800afd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd6:	445a      	add	r2, fp
 800afd8:	9209      	str	r2, [sp, #36]	; 0x24
 800afda:	f89a 3000 	ldrb.w	r3, [sl]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80a2 	beq.w	800b128 <_svfiprintf_r+0x1c8>
 800afe4:	2300      	movs	r3, #0
 800afe6:	f04f 32ff 	mov.w	r2, #4294967295
 800afea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afee:	f10a 0a01 	add.w	sl, sl, #1
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	9307      	str	r3, [sp, #28]
 800aff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800affa:	931a      	str	r3, [sp, #104]	; 0x68
 800affc:	4654      	mov	r4, sl
 800affe:	2205      	movs	r2, #5
 800b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b004:	4851      	ldr	r0, [pc, #324]	; (800b14c <_svfiprintf_r+0x1ec>)
 800b006:	f7f5 fa53 	bl	80004b0 <memchr>
 800b00a:	9a04      	ldr	r2, [sp, #16]
 800b00c:	b9d8      	cbnz	r0, 800b046 <_svfiprintf_r+0xe6>
 800b00e:	06d0      	lsls	r0, r2, #27
 800b010:	bf44      	itt	mi
 800b012:	2320      	movmi	r3, #32
 800b014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b018:	0711      	lsls	r1, r2, #28
 800b01a:	bf44      	itt	mi
 800b01c:	232b      	movmi	r3, #43	; 0x2b
 800b01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b022:	f89a 3000 	ldrb.w	r3, [sl]
 800b026:	2b2a      	cmp	r3, #42	; 0x2a
 800b028:	d015      	beq.n	800b056 <_svfiprintf_r+0xf6>
 800b02a:	9a07      	ldr	r2, [sp, #28]
 800b02c:	4654      	mov	r4, sl
 800b02e:	2000      	movs	r0, #0
 800b030:	f04f 0c0a 	mov.w	ip, #10
 800b034:	4621      	mov	r1, r4
 800b036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b03a:	3b30      	subs	r3, #48	; 0x30
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	d94e      	bls.n	800b0de <_svfiprintf_r+0x17e>
 800b040:	b1b0      	cbz	r0, 800b070 <_svfiprintf_r+0x110>
 800b042:	9207      	str	r2, [sp, #28]
 800b044:	e014      	b.n	800b070 <_svfiprintf_r+0x110>
 800b046:	eba0 0308 	sub.w	r3, r0, r8
 800b04a:	fa09 f303 	lsl.w	r3, r9, r3
 800b04e:	4313      	orrs	r3, r2
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	46a2      	mov	sl, r4
 800b054:	e7d2      	b.n	800affc <_svfiprintf_r+0x9c>
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	1d19      	adds	r1, r3, #4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	9103      	str	r1, [sp, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	bfbb      	ittet	lt
 800b062:	425b      	neglt	r3, r3
 800b064:	f042 0202 	orrlt.w	r2, r2, #2
 800b068:	9307      	strge	r3, [sp, #28]
 800b06a:	9307      	strlt	r3, [sp, #28]
 800b06c:	bfb8      	it	lt
 800b06e:	9204      	strlt	r2, [sp, #16]
 800b070:	7823      	ldrb	r3, [r4, #0]
 800b072:	2b2e      	cmp	r3, #46	; 0x2e
 800b074:	d10c      	bne.n	800b090 <_svfiprintf_r+0x130>
 800b076:	7863      	ldrb	r3, [r4, #1]
 800b078:	2b2a      	cmp	r3, #42	; 0x2a
 800b07a:	d135      	bne.n	800b0e8 <_svfiprintf_r+0x188>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	1d1a      	adds	r2, r3, #4
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	9203      	str	r2, [sp, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	bfb8      	it	lt
 800b088:	f04f 33ff 	movlt.w	r3, #4294967295
 800b08c:	3402      	adds	r4, #2
 800b08e:	9305      	str	r3, [sp, #20]
 800b090:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b15c <_svfiprintf_r+0x1fc>
 800b094:	7821      	ldrb	r1, [r4, #0]
 800b096:	2203      	movs	r2, #3
 800b098:	4650      	mov	r0, sl
 800b09a:	f7f5 fa09 	bl	80004b0 <memchr>
 800b09e:	b140      	cbz	r0, 800b0b2 <_svfiprintf_r+0x152>
 800b0a0:	2340      	movs	r3, #64	; 0x40
 800b0a2:	eba0 000a 	sub.w	r0, r0, sl
 800b0a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	4303      	orrs	r3, r0
 800b0ae:	3401      	adds	r4, #1
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b6:	4826      	ldr	r0, [pc, #152]	; (800b150 <_svfiprintf_r+0x1f0>)
 800b0b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0bc:	2206      	movs	r2, #6
 800b0be:	f7f5 f9f7 	bl	80004b0 <memchr>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d038      	beq.n	800b138 <_svfiprintf_r+0x1d8>
 800b0c6:	4b23      	ldr	r3, [pc, #140]	; (800b154 <_svfiprintf_r+0x1f4>)
 800b0c8:	bb1b      	cbnz	r3, 800b112 <_svfiprintf_r+0x1b2>
 800b0ca:	9b03      	ldr	r3, [sp, #12]
 800b0cc:	3307      	adds	r3, #7
 800b0ce:	f023 0307 	bic.w	r3, r3, #7
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d8:	4433      	add	r3, r6
 800b0da:	9309      	str	r3, [sp, #36]	; 0x24
 800b0dc:	e767      	b.n	800afae <_svfiprintf_r+0x4e>
 800b0de:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	e7a5      	b.n	800b034 <_svfiprintf_r+0xd4>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	3401      	adds	r4, #1
 800b0ec:	9305      	str	r3, [sp, #20]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f04f 0c0a 	mov.w	ip, #10
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0fa:	3a30      	subs	r2, #48	; 0x30
 800b0fc:	2a09      	cmp	r2, #9
 800b0fe:	d903      	bls.n	800b108 <_svfiprintf_r+0x1a8>
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0c5      	beq.n	800b090 <_svfiprintf_r+0x130>
 800b104:	9105      	str	r1, [sp, #20]
 800b106:	e7c3      	b.n	800b090 <_svfiprintf_r+0x130>
 800b108:	fb0c 2101 	mla	r1, ip, r1, r2
 800b10c:	4604      	mov	r4, r0
 800b10e:	2301      	movs	r3, #1
 800b110:	e7f0      	b.n	800b0f4 <_svfiprintf_r+0x194>
 800b112:	ab03      	add	r3, sp, #12
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	462a      	mov	r2, r5
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <_svfiprintf_r+0x1f8>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4638      	mov	r0, r7
 800b11e:	f7fc fbfb 	bl	8007918 <_printf_float>
 800b122:	1c42      	adds	r2, r0, #1
 800b124:	4606      	mov	r6, r0
 800b126:	d1d6      	bne.n	800b0d6 <_svfiprintf_r+0x176>
 800b128:	89ab      	ldrh	r3, [r5, #12]
 800b12a:	065b      	lsls	r3, r3, #25
 800b12c:	f53f af2c 	bmi.w	800af88 <_svfiprintf_r+0x28>
 800b130:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b132:	b01d      	add	sp, #116	; 0x74
 800b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b138:	ab03      	add	r3, sp, #12
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	462a      	mov	r2, r5
 800b13e:	4b06      	ldr	r3, [pc, #24]	; (800b158 <_svfiprintf_r+0x1f8>)
 800b140:	a904      	add	r1, sp, #16
 800b142:	4638      	mov	r0, r7
 800b144:	f7fc fe8c 	bl	8007e60 <_printf_i>
 800b148:	e7eb      	b.n	800b122 <_svfiprintf_r+0x1c2>
 800b14a:	bf00      	nop
 800b14c:	0800c4a4 	.word	0x0800c4a4
 800b150:	0800c4ae 	.word	0x0800c4ae
 800b154:	08007919 	.word	0x08007919
 800b158:	0800aea9 	.word	0x0800aea9
 800b15c:	0800c4aa 	.word	0x0800c4aa

0800b160 <nan>:
 800b160:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b168 <nan+0x8>
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	00000000 	.word	0x00000000
 800b16c:	7ff80000 	.word	0x7ff80000

0800b170 <_sbrk_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d06      	ldr	r5, [pc, #24]	; (800b18c <_sbrk_r+0x1c>)
 800b174:	2300      	movs	r3, #0
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	f7f6 fd90 	bl	8001ca0 <_sbrk>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d102      	bne.n	800b18a <_sbrk_r+0x1a>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	b103      	cbz	r3, 800b18a <_sbrk_r+0x1a>
 800b188:	6023      	str	r3, [r4, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20001354 	.word	0x20001354

0800b190 <nanf>:
 800b190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b198 <nanf+0x8>
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	7fc00000 	.word	0x7fc00000

0800b19c <strncmp>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	b17a      	cbz	r2, 800b1c0 <strncmp+0x24>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	3901      	subs	r1, #1
 800b1a4:	1884      	adds	r4, r0, r2
 800b1a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b1ae:	4290      	cmp	r0, r2
 800b1b0:	d101      	bne.n	800b1b6 <strncmp+0x1a>
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	d101      	bne.n	800b1ba <strncmp+0x1e>
 800b1b6:	1a80      	subs	r0, r0, r2
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d1f3      	bne.n	800b1a6 <strncmp+0xa>
 800b1be:	e7fa      	b.n	800b1b6 <strncmp+0x1a>
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	e7f9      	b.n	800b1b8 <strncmp+0x1c>

0800b1c4 <__ascii_wctomb>:
 800b1c4:	b149      	cbz	r1, 800b1da <__ascii_wctomb+0x16>
 800b1c6:	2aff      	cmp	r2, #255	; 0xff
 800b1c8:	bf85      	ittet	hi
 800b1ca:	238a      	movhi	r3, #138	; 0x8a
 800b1cc:	6003      	strhi	r3, [r0, #0]
 800b1ce:	700a      	strbls	r2, [r1, #0]
 800b1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1d4:	bf98      	it	ls
 800b1d6:	2001      	movls	r0, #1
 800b1d8:	4770      	bx	lr
 800b1da:	4608      	mov	r0, r1
 800b1dc:	4770      	bx	lr
	...

0800b1e0 <__assert_func>:
 800b1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1e2:	4614      	mov	r4, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <__assert_func+0x2c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	68d8      	ldr	r0, [r3, #12]
 800b1ee:	b14c      	cbz	r4, 800b204 <__assert_func+0x24>
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <__assert_func+0x30>)
 800b1f2:	9100      	str	r1, [sp, #0]
 800b1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1f8:	4906      	ldr	r1, [pc, #24]	; (800b214 <__assert_func+0x34>)
 800b1fa:	462b      	mov	r3, r5
 800b1fc:	f000 f80e 	bl	800b21c <fiprintf>
 800b200:	f000 fa8c 	bl	800b71c <abort>
 800b204:	4b04      	ldr	r3, [pc, #16]	; (800b218 <__assert_func+0x38>)
 800b206:	461c      	mov	r4, r3
 800b208:	e7f3      	b.n	800b1f2 <__assert_func+0x12>
 800b20a:	bf00      	nop
 800b20c:	20000278 	.word	0x20000278
 800b210:	0800c4b5 	.word	0x0800c4b5
 800b214:	0800c4c2 	.word	0x0800c4c2
 800b218:	0800c4f0 	.word	0x0800c4f0

0800b21c <fiprintf>:
 800b21c:	b40e      	push	{r1, r2, r3}
 800b21e:	b503      	push	{r0, r1, lr}
 800b220:	4601      	mov	r1, r0
 800b222:	ab03      	add	r3, sp, #12
 800b224:	4805      	ldr	r0, [pc, #20]	; (800b23c <fiprintf+0x20>)
 800b226:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22a:	6800      	ldr	r0, [r0, #0]
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	f000 f885 	bl	800b33c <_vfiprintf_r>
 800b232:	b002      	add	sp, #8
 800b234:	f85d eb04 	ldr.w	lr, [sp], #4
 800b238:	b003      	add	sp, #12
 800b23a:	4770      	bx	lr
 800b23c:	20000278 	.word	0x20000278

0800b240 <memmove>:
 800b240:	4288      	cmp	r0, r1
 800b242:	b510      	push	{r4, lr}
 800b244:	eb01 0402 	add.w	r4, r1, r2
 800b248:	d902      	bls.n	800b250 <memmove+0x10>
 800b24a:	4284      	cmp	r4, r0
 800b24c:	4623      	mov	r3, r4
 800b24e:	d807      	bhi.n	800b260 <memmove+0x20>
 800b250:	1e43      	subs	r3, r0, #1
 800b252:	42a1      	cmp	r1, r4
 800b254:	d008      	beq.n	800b268 <memmove+0x28>
 800b256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b25e:	e7f8      	b.n	800b252 <memmove+0x12>
 800b260:	4402      	add	r2, r0
 800b262:	4601      	mov	r1, r0
 800b264:	428a      	cmp	r2, r1
 800b266:	d100      	bne.n	800b26a <memmove+0x2a>
 800b268:	bd10      	pop	{r4, pc}
 800b26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b272:	e7f7      	b.n	800b264 <memmove+0x24>

0800b274 <__malloc_lock>:
 800b274:	4801      	ldr	r0, [pc, #4]	; (800b27c <__malloc_lock+0x8>)
 800b276:	f000 bc11 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800b27a:	bf00      	nop
 800b27c:	20001358 	.word	0x20001358

0800b280 <__malloc_unlock>:
 800b280:	4801      	ldr	r0, [pc, #4]	; (800b288 <__malloc_unlock+0x8>)
 800b282:	f000 bc0c 	b.w	800ba9e <__retarget_lock_release_recursive>
 800b286:	bf00      	nop
 800b288:	20001358 	.word	0x20001358

0800b28c <_realloc_r>:
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4680      	mov	r8, r0
 800b292:	4614      	mov	r4, r2
 800b294:	460e      	mov	r6, r1
 800b296:	b921      	cbnz	r1, 800b2a2 <_realloc_r+0x16>
 800b298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	4611      	mov	r1, r2
 800b29e:	f7ff bd8f 	b.w	800adc0 <_malloc_r>
 800b2a2:	b92a      	cbnz	r2, 800b2b0 <_realloc_r+0x24>
 800b2a4:	f7ff fd20 	bl	800ace8 <_free_r>
 800b2a8:	4625      	mov	r5, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b0:	f000 fc5c 	bl	800bb6c <_malloc_usable_size_r>
 800b2b4:	4284      	cmp	r4, r0
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	d802      	bhi.n	800b2c0 <_realloc_r+0x34>
 800b2ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2be:	d812      	bhi.n	800b2e6 <_realloc_r+0x5a>
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7ff fd7c 	bl	800adc0 <_malloc_r>
 800b2c8:	4605      	mov	r5, r0
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d0ed      	beq.n	800b2aa <_realloc_r+0x1e>
 800b2ce:	42bc      	cmp	r4, r7
 800b2d0:	4622      	mov	r2, r4
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	bf28      	it	cs
 800b2d6:	463a      	movcs	r2, r7
 800b2d8:	f7fc fa68 	bl	80077ac <memcpy>
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4640      	mov	r0, r8
 800b2e0:	f7ff fd02 	bl	800ace8 <_free_r>
 800b2e4:	e7e1      	b.n	800b2aa <_realloc_r+0x1e>
 800b2e6:	4635      	mov	r5, r6
 800b2e8:	e7df      	b.n	800b2aa <_realloc_r+0x1e>

0800b2ea <__sfputc_r>:
 800b2ea:	6893      	ldr	r3, [r2, #8]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	b410      	push	{r4}
 800b2f2:	6093      	str	r3, [r2, #8]
 800b2f4:	da08      	bge.n	800b308 <__sfputc_r+0x1e>
 800b2f6:	6994      	ldr	r4, [r2, #24]
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	db01      	blt.n	800b300 <__sfputc_r+0x16>
 800b2fc:	290a      	cmp	r1, #10
 800b2fe:	d103      	bne.n	800b308 <__sfputc_r+0x1e>
 800b300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b304:	f000 b94a 	b.w	800b59c <__swbuf_r>
 800b308:	6813      	ldr	r3, [r2, #0]
 800b30a:	1c58      	adds	r0, r3, #1
 800b30c:	6010      	str	r0, [r2, #0]
 800b30e:	7019      	strb	r1, [r3, #0]
 800b310:	4608      	mov	r0, r1
 800b312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <__sfputs_r>:
 800b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b31a:	4606      	mov	r6, r0
 800b31c:	460f      	mov	r7, r1
 800b31e:	4614      	mov	r4, r2
 800b320:	18d5      	adds	r5, r2, r3
 800b322:	42ac      	cmp	r4, r5
 800b324:	d101      	bne.n	800b32a <__sfputs_r+0x12>
 800b326:	2000      	movs	r0, #0
 800b328:	e007      	b.n	800b33a <__sfputs_r+0x22>
 800b32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b32e:	463a      	mov	r2, r7
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ffda 	bl	800b2ea <__sfputc_r>
 800b336:	1c43      	adds	r3, r0, #1
 800b338:	d1f3      	bne.n	800b322 <__sfputs_r+0xa>
 800b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b33c <_vfiprintf_r>:
 800b33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b340:	460d      	mov	r5, r1
 800b342:	b09d      	sub	sp, #116	; 0x74
 800b344:	4614      	mov	r4, r2
 800b346:	4698      	mov	r8, r3
 800b348:	4606      	mov	r6, r0
 800b34a:	b118      	cbz	r0, 800b354 <_vfiprintf_r+0x18>
 800b34c:	6983      	ldr	r3, [r0, #24]
 800b34e:	b90b      	cbnz	r3, 800b354 <_vfiprintf_r+0x18>
 800b350:	f000 fb06 	bl	800b960 <__sinit>
 800b354:	4b89      	ldr	r3, [pc, #548]	; (800b57c <_vfiprintf_r+0x240>)
 800b356:	429d      	cmp	r5, r3
 800b358:	d11b      	bne.n	800b392 <_vfiprintf_r+0x56>
 800b35a:	6875      	ldr	r5, [r6, #4]
 800b35c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35e:	07d9      	lsls	r1, r3, #31
 800b360:	d405      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d402      	bmi.n	800b36e <_vfiprintf_r+0x32>
 800b368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b36a:	f000 fb97 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800b36e:	89ab      	ldrh	r3, [r5, #12]
 800b370:	071b      	lsls	r3, r3, #28
 800b372:	d501      	bpl.n	800b378 <_vfiprintf_r+0x3c>
 800b374:	692b      	ldr	r3, [r5, #16]
 800b376:	b9eb      	cbnz	r3, 800b3b4 <_vfiprintf_r+0x78>
 800b378:	4629      	mov	r1, r5
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f960 	bl	800b640 <__swsetup_r>
 800b380:	b1c0      	cbz	r0, 800b3b4 <_vfiprintf_r+0x78>
 800b382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b384:	07dc      	lsls	r4, r3, #31
 800b386:	d50e      	bpl.n	800b3a6 <_vfiprintf_r+0x6a>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	b01d      	add	sp, #116	; 0x74
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	4b7b      	ldr	r3, [pc, #492]	; (800b580 <_vfiprintf_r+0x244>)
 800b394:	429d      	cmp	r5, r3
 800b396:	d101      	bne.n	800b39c <_vfiprintf_r+0x60>
 800b398:	68b5      	ldr	r5, [r6, #8]
 800b39a:	e7df      	b.n	800b35c <_vfiprintf_r+0x20>
 800b39c:	4b79      	ldr	r3, [pc, #484]	; (800b584 <_vfiprintf_r+0x248>)
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	bf08      	it	eq
 800b3a2:	68f5      	ldreq	r5, [r6, #12]
 800b3a4:	e7da      	b.n	800b35c <_vfiprintf_r+0x20>
 800b3a6:	89ab      	ldrh	r3, [r5, #12]
 800b3a8:	0598      	lsls	r0, r3, #22
 800b3aa:	d4ed      	bmi.n	800b388 <_vfiprintf_r+0x4c>
 800b3ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3ae:	f000 fb76 	bl	800ba9e <__retarget_lock_release_recursive>
 800b3b2:	e7e9      	b.n	800b388 <_vfiprintf_r+0x4c>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b8:	2320      	movs	r3, #32
 800b3ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c2:	2330      	movs	r3, #48	; 0x30
 800b3c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b588 <_vfiprintf_r+0x24c>
 800b3c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3cc:	f04f 0901 	mov.w	r9, #1
 800b3d0:	4623      	mov	r3, r4
 800b3d2:	469a      	mov	sl, r3
 800b3d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d8:	b10a      	cbz	r2, 800b3de <_vfiprintf_r+0xa2>
 800b3da:	2a25      	cmp	r2, #37	; 0x25
 800b3dc:	d1f9      	bne.n	800b3d2 <_vfiprintf_r+0x96>
 800b3de:	ebba 0b04 	subs.w	fp, sl, r4
 800b3e2:	d00b      	beq.n	800b3fc <_vfiprintf_r+0xc0>
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7ff ff94 	bl	800b318 <__sfputs_r>
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	f000 80aa 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b3f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f8:	445a      	add	r2, fp
 800b3fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b3fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80a2 	beq.w	800b54a <_vfiprintf_r+0x20e>
 800b406:	2300      	movs	r3, #0
 800b408:	f04f 32ff 	mov.w	r2, #4294967295
 800b40c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b410:	f10a 0a01 	add.w	sl, sl, #1
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	9307      	str	r3, [sp, #28]
 800b418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b41c:	931a      	str	r3, [sp, #104]	; 0x68
 800b41e:	4654      	mov	r4, sl
 800b420:	2205      	movs	r2, #5
 800b422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b426:	4858      	ldr	r0, [pc, #352]	; (800b588 <_vfiprintf_r+0x24c>)
 800b428:	f7f5 f842 	bl	80004b0 <memchr>
 800b42c:	9a04      	ldr	r2, [sp, #16]
 800b42e:	b9d8      	cbnz	r0, 800b468 <_vfiprintf_r+0x12c>
 800b430:	06d1      	lsls	r1, r2, #27
 800b432:	bf44      	itt	mi
 800b434:	2320      	movmi	r3, #32
 800b436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43a:	0713      	lsls	r3, r2, #28
 800b43c:	bf44      	itt	mi
 800b43e:	232b      	movmi	r3, #43	; 0x2b
 800b440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b444:	f89a 3000 	ldrb.w	r3, [sl]
 800b448:	2b2a      	cmp	r3, #42	; 0x2a
 800b44a:	d015      	beq.n	800b478 <_vfiprintf_r+0x13c>
 800b44c:	9a07      	ldr	r2, [sp, #28]
 800b44e:	4654      	mov	r4, sl
 800b450:	2000      	movs	r0, #0
 800b452:	f04f 0c0a 	mov.w	ip, #10
 800b456:	4621      	mov	r1, r4
 800b458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b45c:	3b30      	subs	r3, #48	; 0x30
 800b45e:	2b09      	cmp	r3, #9
 800b460:	d94e      	bls.n	800b500 <_vfiprintf_r+0x1c4>
 800b462:	b1b0      	cbz	r0, 800b492 <_vfiprintf_r+0x156>
 800b464:	9207      	str	r2, [sp, #28]
 800b466:	e014      	b.n	800b492 <_vfiprintf_r+0x156>
 800b468:	eba0 0308 	sub.w	r3, r0, r8
 800b46c:	fa09 f303 	lsl.w	r3, r9, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	9304      	str	r3, [sp, #16]
 800b474:	46a2      	mov	sl, r4
 800b476:	e7d2      	b.n	800b41e <_vfiprintf_r+0xe2>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	1d19      	adds	r1, r3, #4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	9103      	str	r1, [sp, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	bfbb      	ittet	lt
 800b484:	425b      	neglt	r3, r3
 800b486:	f042 0202 	orrlt.w	r2, r2, #2
 800b48a:	9307      	strge	r3, [sp, #28]
 800b48c:	9307      	strlt	r3, [sp, #28]
 800b48e:	bfb8      	it	lt
 800b490:	9204      	strlt	r2, [sp, #16]
 800b492:	7823      	ldrb	r3, [r4, #0]
 800b494:	2b2e      	cmp	r3, #46	; 0x2e
 800b496:	d10c      	bne.n	800b4b2 <_vfiprintf_r+0x176>
 800b498:	7863      	ldrb	r3, [r4, #1]
 800b49a:	2b2a      	cmp	r3, #42	; 0x2a
 800b49c:	d135      	bne.n	800b50a <_vfiprintf_r+0x1ce>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	bfb8      	it	lt
 800b4aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4ae:	3402      	adds	r4, #2
 800b4b0:	9305      	str	r3, [sp, #20]
 800b4b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b598 <_vfiprintf_r+0x25c>
 800b4b6:	7821      	ldrb	r1, [r4, #0]
 800b4b8:	2203      	movs	r2, #3
 800b4ba:	4650      	mov	r0, sl
 800b4bc:	f7f4 fff8 	bl	80004b0 <memchr>
 800b4c0:	b140      	cbz	r0, 800b4d4 <_vfiprintf_r+0x198>
 800b4c2:	2340      	movs	r3, #64	; 0x40
 800b4c4:	eba0 000a 	sub.w	r0, r0, sl
 800b4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	4303      	orrs	r3, r0
 800b4d0:	3401      	adds	r4, #1
 800b4d2:	9304      	str	r3, [sp, #16]
 800b4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d8:	482c      	ldr	r0, [pc, #176]	; (800b58c <_vfiprintf_r+0x250>)
 800b4da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4de:	2206      	movs	r2, #6
 800b4e0:	f7f4 ffe6 	bl	80004b0 <memchr>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d03f      	beq.n	800b568 <_vfiprintf_r+0x22c>
 800b4e8:	4b29      	ldr	r3, [pc, #164]	; (800b590 <_vfiprintf_r+0x254>)
 800b4ea:	bb1b      	cbnz	r3, 800b534 <_vfiprintf_r+0x1f8>
 800b4ec:	9b03      	ldr	r3, [sp, #12]
 800b4ee:	3307      	adds	r3, #7
 800b4f0:	f023 0307 	bic.w	r3, r3, #7
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	9303      	str	r3, [sp, #12]
 800b4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fa:	443b      	add	r3, r7
 800b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fe:	e767      	b.n	800b3d0 <_vfiprintf_r+0x94>
 800b500:	fb0c 3202 	mla	r2, ip, r2, r3
 800b504:	460c      	mov	r4, r1
 800b506:	2001      	movs	r0, #1
 800b508:	e7a5      	b.n	800b456 <_vfiprintf_r+0x11a>
 800b50a:	2300      	movs	r3, #0
 800b50c:	3401      	adds	r4, #1
 800b50e:	9305      	str	r3, [sp, #20]
 800b510:	4619      	mov	r1, r3
 800b512:	f04f 0c0a 	mov.w	ip, #10
 800b516:	4620      	mov	r0, r4
 800b518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51c:	3a30      	subs	r2, #48	; 0x30
 800b51e:	2a09      	cmp	r2, #9
 800b520:	d903      	bls.n	800b52a <_vfiprintf_r+0x1ee>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0c5      	beq.n	800b4b2 <_vfiprintf_r+0x176>
 800b526:	9105      	str	r1, [sp, #20]
 800b528:	e7c3      	b.n	800b4b2 <_vfiprintf_r+0x176>
 800b52a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b52e:	4604      	mov	r4, r0
 800b530:	2301      	movs	r3, #1
 800b532:	e7f0      	b.n	800b516 <_vfiprintf_r+0x1da>
 800b534:	ab03      	add	r3, sp, #12
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	462a      	mov	r2, r5
 800b53a:	4b16      	ldr	r3, [pc, #88]	; (800b594 <_vfiprintf_r+0x258>)
 800b53c:	a904      	add	r1, sp, #16
 800b53e:	4630      	mov	r0, r6
 800b540:	f7fc f9ea 	bl	8007918 <_printf_float>
 800b544:	4607      	mov	r7, r0
 800b546:	1c78      	adds	r0, r7, #1
 800b548:	d1d6      	bne.n	800b4f8 <_vfiprintf_r+0x1bc>
 800b54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b54c:	07d9      	lsls	r1, r3, #31
 800b54e:	d405      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b550:	89ab      	ldrh	r3, [r5, #12]
 800b552:	059a      	lsls	r2, r3, #22
 800b554:	d402      	bmi.n	800b55c <_vfiprintf_r+0x220>
 800b556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b558:	f000 faa1 	bl	800ba9e <__retarget_lock_release_recursive>
 800b55c:	89ab      	ldrh	r3, [r5, #12]
 800b55e:	065b      	lsls	r3, r3, #25
 800b560:	f53f af12 	bmi.w	800b388 <_vfiprintf_r+0x4c>
 800b564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b566:	e711      	b.n	800b38c <_vfiprintf_r+0x50>
 800b568:	ab03      	add	r3, sp, #12
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	462a      	mov	r2, r5
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <_vfiprintf_r+0x258>)
 800b570:	a904      	add	r1, sp, #16
 800b572:	4630      	mov	r0, r6
 800b574:	f7fc fc74 	bl	8007e60 <_printf_i>
 800b578:	e7e4      	b.n	800b544 <_vfiprintf_r+0x208>
 800b57a:	bf00      	nop
 800b57c:	0800c514 	.word	0x0800c514
 800b580:	0800c534 	.word	0x0800c534
 800b584:	0800c4f4 	.word	0x0800c4f4
 800b588:	0800c4a4 	.word	0x0800c4a4
 800b58c:	0800c4ae 	.word	0x0800c4ae
 800b590:	08007919 	.word	0x08007919
 800b594:	0800b319 	.word	0x0800b319
 800b598:	0800c4aa 	.word	0x0800c4aa

0800b59c <__swbuf_r>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	460e      	mov	r6, r1
 800b5a0:	4614      	mov	r4, r2
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b118      	cbz	r0, 800b5ae <__swbuf_r+0x12>
 800b5a6:	6983      	ldr	r3, [r0, #24]
 800b5a8:	b90b      	cbnz	r3, 800b5ae <__swbuf_r+0x12>
 800b5aa:	f000 f9d9 	bl	800b960 <__sinit>
 800b5ae:	4b21      	ldr	r3, [pc, #132]	; (800b634 <__swbuf_r+0x98>)
 800b5b0:	429c      	cmp	r4, r3
 800b5b2:	d12b      	bne.n	800b60c <__swbuf_r+0x70>
 800b5b4:	686c      	ldr	r4, [r5, #4]
 800b5b6:	69a3      	ldr	r3, [r4, #24]
 800b5b8:	60a3      	str	r3, [r4, #8]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	071a      	lsls	r2, r3, #28
 800b5be:	d52f      	bpl.n	800b620 <__swbuf_r+0x84>
 800b5c0:	6923      	ldr	r3, [r4, #16]
 800b5c2:	b36b      	cbz	r3, 800b620 <__swbuf_r+0x84>
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	6820      	ldr	r0, [r4, #0]
 800b5c8:	1ac0      	subs	r0, r0, r3
 800b5ca:	6963      	ldr	r3, [r4, #20]
 800b5cc:	b2f6      	uxtb	r6, r6
 800b5ce:	4283      	cmp	r3, r0
 800b5d0:	4637      	mov	r7, r6
 800b5d2:	dc04      	bgt.n	800b5de <__swbuf_r+0x42>
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	f000 f92e 	bl	800b838 <_fflush_r>
 800b5dc:	bb30      	cbnz	r0, 800b62c <__swbuf_r+0x90>
 800b5de:	68a3      	ldr	r3, [r4, #8]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	60a3      	str	r3, [r4, #8]
 800b5e4:	6823      	ldr	r3, [r4, #0]
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	701e      	strb	r6, [r3, #0]
 800b5ec:	6963      	ldr	r3, [r4, #20]
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	4283      	cmp	r3, r0
 800b5f2:	d004      	beq.n	800b5fe <__swbuf_r+0x62>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	07db      	lsls	r3, r3, #31
 800b5f8:	d506      	bpl.n	800b608 <__swbuf_r+0x6c>
 800b5fa:	2e0a      	cmp	r6, #10
 800b5fc:	d104      	bne.n	800b608 <__swbuf_r+0x6c>
 800b5fe:	4621      	mov	r1, r4
 800b600:	4628      	mov	r0, r5
 800b602:	f000 f919 	bl	800b838 <_fflush_r>
 800b606:	b988      	cbnz	r0, 800b62c <__swbuf_r+0x90>
 800b608:	4638      	mov	r0, r7
 800b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b60c:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <__swbuf_r+0x9c>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	d101      	bne.n	800b616 <__swbuf_r+0x7a>
 800b612:	68ac      	ldr	r4, [r5, #8]
 800b614:	e7cf      	b.n	800b5b6 <__swbuf_r+0x1a>
 800b616:	4b09      	ldr	r3, [pc, #36]	; (800b63c <__swbuf_r+0xa0>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	bf08      	it	eq
 800b61c:	68ec      	ldreq	r4, [r5, #12]
 800b61e:	e7ca      	b.n	800b5b6 <__swbuf_r+0x1a>
 800b620:	4621      	mov	r1, r4
 800b622:	4628      	mov	r0, r5
 800b624:	f000 f80c 	bl	800b640 <__swsetup_r>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d0cb      	beq.n	800b5c4 <__swbuf_r+0x28>
 800b62c:	f04f 37ff 	mov.w	r7, #4294967295
 800b630:	e7ea      	b.n	800b608 <__swbuf_r+0x6c>
 800b632:	bf00      	nop
 800b634:	0800c514 	.word	0x0800c514
 800b638:	0800c534 	.word	0x0800c534
 800b63c:	0800c4f4 	.word	0x0800c4f4

0800b640 <__swsetup_r>:
 800b640:	4b32      	ldr	r3, [pc, #200]	; (800b70c <__swsetup_r+0xcc>)
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	681d      	ldr	r5, [r3, #0]
 800b646:	4606      	mov	r6, r0
 800b648:	460c      	mov	r4, r1
 800b64a:	b125      	cbz	r5, 800b656 <__swsetup_r+0x16>
 800b64c:	69ab      	ldr	r3, [r5, #24]
 800b64e:	b913      	cbnz	r3, 800b656 <__swsetup_r+0x16>
 800b650:	4628      	mov	r0, r5
 800b652:	f000 f985 	bl	800b960 <__sinit>
 800b656:	4b2e      	ldr	r3, [pc, #184]	; (800b710 <__swsetup_r+0xd0>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d10f      	bne.n	800b67c <__swsetup_r+0x3c>
 800b65c:	686c      	ldr	r4, [r5, #4]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b664:	0719      	lsls	r1, r3, #28
 800b666:	d42c      	bmi.n	800b6c2 <__swsetup_r+0x82>
 800b668:	06dd      	lsls	r5, r3, #27
 800b66a:	d411      	bmi.n	800b690 <__swsetup_r+0x50>
 800b66c:	2309      	movs	r3, #9
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	f04f 30ff 	mov.w	r0, #4294967295
 800b67a:	e03e      	b.n	800b6fa <__swsetup_r+0xba>
 800b67c:	4b25      	ldr	r3, [pc, #148]	; (800b714 <__swsetup_r+0xd4>)
 800b67e:	429c      	cmp	r4, r3
 800b680:	d101      	bne.n	800b686 <__swsetup_r+0x46>
 800b682:	68ac      	ldr	r4, [r5, #8]
 800b684:	e7eb      	b.n	800b65e <__swsetup_r+0x1e>
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <__swsetup_r+0xd8>)
 800b688:	429c      	cmp	r4, r3
 800b68a:	bf08      	it	eq
 800b68c:	68ec      	ldreq	r4, [r5, #12]
 800b68e:	e7e6      	b.n	800b65e <__swsetup_r+0x1e>
 800b690:	0758      	lsls	r0, r3, #29
 800b692:	d512      	bpl.n	800b6ba <__swsetup_r+0x7a>
 800b694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b696:	b141      	cbz	r1, 800b6aa <__swsetup_r+0x6a>
 800b698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b69c:	4299      	cmp	r1, r3
 800b69e:	d002      	beq.n	800b6a6 <__swsetup_r+0x66>
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f7ff fb21 	bl	800ace8 <_free_r>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6063      	str	r3, [r4, #4]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f043 0308 	orr.w	r3, r3, #8
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	b94b      	cbnz	r3, 800b6da <__swsetup_r+0x9a>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d0:	d003      	beq.n	800b6da <__swsetup_r+0x9a>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f000 fa09 	bl	800baec <__smakebuf_r>
 800b6da:	89a0      	ldrh	r0, [r4, #12]
 800b6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e0:	f010 0301 	ands.w	r3, r0, #1
 800b6e4:	d00a      	beq.n	800b6fc <__swsetup_r+0xbc>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	6963      	ldr	r3, [r4, #20]
 800b6ec:	425b      	negs	r3, r3
 800b6ee:	61a3      	str	r3, [r4, #24]
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b943      	cbnz	r3, 800b706 <__swsetup_r+0xc6>
 800b6f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6f8:	d1ba      	bne.n	800b670 <__swsetup_r+0x30>
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	0781      	lsls	r1, r0, #30
 800b6fe:	bf58      	it	pl
 800b700:	6963      	ldrpl	r3, [r4, #20]
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	e7f4      	b.n	800b6f0 <__swsetup_r+0xb0>
 800b706:	2000      	movs	r0, #0
 800b708:	e7f7      	b.n	800b6fa <__swsetup_r+0xba>
 800b70a:	bf00      	nop
 800b70c:	20000278 	.word	0x20000278
 800b710:	0800c514 	.word	0x0800c514
 800b714:	0800c534 	.word	0x0800c534
 800b718:	0800c4f4 	.word	0x0800c4f4

0800b71c <abort>:
 800b71c:	b508      	push	{r3, lr}
 800b71e:	2006      	movs	r0, #6
 800b720:	f000 fa54 	bl	800bbcc <raise>
 800b724:	2001      	movs	r0, #1
 800b726:	f7f6 fa43 	bl	8001bb0 <_exit>
	...

0800b72c <__sflush_r>:
 800b72c:	898a      	ldrh	r2, [r1, #12]
 800b72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b732:	4605      	mov	r5, r0
 800b734:	0710      	lsls	r0, r2, #28
 800b736:	460c      	mov	r4, r1
 800b738:	d458      	bmi.n	800b7ec <__sflush_r+0xc0>
 800b73a:	684b      	ldr	r3, [r1, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	dc05      	bgt.n	800b74c <__sflush_r+0x20>
 800b740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b742:	2b00      	cmp	r3, #0
 800b744:	dc02      	bgt.n	800b74c <__sflush_r+0x20>
 800b746:	2000      	movs	r0, #0
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d0f9      	beq.n	800b746 <__sflush_r+0x1a>
 800b752:	2300      	movs	r3, #0
 800b754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b758:	682f      	ldr	r7, [r5, #0]
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	d032      	beq.n	800b7c4 <__sflush_r+0x98>
 800b75e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	075a      	lsls	r2, r3, #29
 800b764:	d505      	bpl.n	800b772 <__sflush_r+0x46>
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	1ac0      	subs	r0, r0, r3
 800b76a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b76c:	b10b      	cbz	r3, 800b772 <__sflush_r+0x46>
 800b76e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b770:	1ac0      	subs	r0, r0, r3
 800b772:	2300      	movs	r3, #0
 800b774:	4602      	mov	r2, r0
 800b776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b778:	6a21      	ldr	r1, [r4, #32]
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b0      	blx	r6
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	d106      	bne.n	800b792 <__sflush_r+0x66>
 800b784:	6829      	ldr	r1, [r5, #0]
 800b786:	291d      	cmp	r1, #29
 800b788:	d82c      	bhi.n	800b7e4 <__sflush_r+0xb8>
 800b78a:	4a2a      	ldr	r2, [pc, #168]	; (800b834 <__sflush_r+0x108>)
 800b78c:	40ca      	lsrs	r2, r1
 800b78e:	07d6      	lsls	r6, r2, #31
 800b790:	d528      	bpl.n	800b7e4 <__sflush_r+0xb8>
 800b792:	2200      	movs	r2, #0
 800b794:	6062      	str	r2, [r4, #4]
 800b796:	04d9      	lsls	r1, r3, #19
 800b798:	6922      	ldr	r2, [r4, #16]
 800b79a:	6022      	str	r2, [r4, #0]
 800b79c:	d504      	bpl.n	800b7a8 <__sflush_r+0x7c>
 800b79e:	1c42      	adds	r2, r0, #1
 800b7a0:	d101      	bne.n	800b7a6 <__sflush_r+0x7a>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	b903      	cbnz	r3, 800b7a8 <__sflush_r+0x7c>
 800b7a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7aa:	602f      	str	r7, [r5, #0]
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	d0ca      	beq.n	800b746 <__sflush_r+0x1a>
 800b7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d002      	beq.n	800b7be <__sflush_r+0x92>
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	f7ff fa95 	bl	800ace8 <_free_r>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7c2:	e7c1      	b.n	800b748 <__sflush_r+0x1c>
 800b7c4:	6a21      	ldr	r1, [r4, #32]
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	47b0      	blx	r6
 800b7cc:	1c41      	adds	r1, r0, #1
 800b7ce:	d1c7      	bne.n	800b760 <__sflush_r+0x34>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d0c4      	beq.n	800b760 <__sflush_r+0x34>
 800b7d6:	2b1d      	cmp	r3, #29
 800b7d8:	d001      	beq.n	800b7de <__sflush_r+0xb2>
 800b7da:	2b16      	cmp	r3, #22
 800b7dc:	d101      	bne.n	800b7e2 <__sflush_r+0xb6>
 800b7de:	602f      	str	r7, [r5, #0]
 800b7e0:	e7b1      	b.n	800b746 <__sflush_r+0x1a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e8:	81a3      	strh	r3, [r4, #12]
 800b7ea:	e7ad      	b.n	800b748 <__sflush_r+0x1c>
 800b7ec:	690f      	ldr	r7, [r1, #16]
 800b7ee:	2f00      	cmp	r7, #0
 800b7f0:	d0a9      	beq.n	800b746 <__sflush_r+0x1a>
 800b7f2:	0793      	lsls	r3, r2, #30
 800b7f4:	680e      	ldr	r6, [r1, #0]
 800b7f6:	bf08      	it	eq
 800b7f8:	694b      	ldreq	r3, [r1, #20]
 800b7fa:	600f      	str	r7, [r1, #0]
 800b7fc:	bf18      	it	ne
 800b7fe:	2300      	movne	r3, #0
 800b800:	eba6 0807 	sub.w	r8, r6, r7
 800b804:	608b      	str	r3, [r1, #8]
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	dd9c      	ble.n	800b746 <__sflush_r+0x1a>
 800b80c:	6a21      	ldr	r1, [r4, #32]
 800b80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b810:	4643      	mov	r3, r8
 800b812:	463a      	mov	r2, r7
 800b814:	4628      	mov	r0, r5
 800b816:	47b0      	blx	r6
 800b818:	2800      	cmp	r0, #0
 800b81a:	dc06      	bgt.n	800b82a <__sflush_r+0xfe>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e78e      	b.n	800b748 <__sflush_r+0x1c>
 800b82a:	4407      	add	r7, r0
 800b82c:	eba8 0800 	sub.w	r8, r8, r0
 800b830:	e7e9      	b.n	800b806 <__sflush_r+0xda>
 800b832:	bf00      	nop
 800b834:	20400001 	.word	0x20400001

0800b838 <_fflush_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	4605      	mov	r5, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	b913      	cbnz	r3, 800b848 <_fflush_r+0x10>
 800b842:	2500      	movs	r5, #0
 800b844:	4628      	mov	r0, r5
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	b118      	cbz	r0, 800b852 <_fflush_r+0x1a>
 800b84a:	6983      	ldr	r3, [r0, #24]
 800b84c:	b90b      	cbnz	r3, 800b852 <_fflush_r+0x1a>
 800b84e:	f000 f887 	bl	800b960 <__sinit>
 800b852:	4b14      	ldr	r3, [pc, #80]	; (800b8a4 <_fflush_r+0x6c>)
 800b854:	429c      	cmp	r4, r3
 800b856:	d11b      	bne.n	800b890 <_fflush_r+0x58>
 800b858:	686c      	ldr	r4, [r5, #4]
 800b85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d0ef      	beq.n	800b842 <_fflush_r+0xa>
 800b862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b864:	07d0      	lsls	r0, r2, #31
 800b866:	d404      	bmi.n	800b872 <_fflush_r+0x3a>
 800b868:	0599      	lsls	r1, r3, #22
 800b86a:	d402      	bmi.n	800b872 <_fflush_r+0x3a>
 800b86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b86e:	f000 f915 	bl	800ba9c <__retarget_lock_acquire_recursive>
 800b872:	4628      	mov	r0, r5
 800b874:	4621      	mov	r1, r4
 800b876:	f7ff ff59 	bl	800b72c <__sflush_r>
 800b87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b87c:	07da      	lsls	r2, r3, #31
 800b87e:	4605      	mov	r5, r0
 800b880:	d4e0      	bmi.n	800b844 <_fflush_r+0xc>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	059b      	lsls	r3, r3, #22
 800b886:	d4dd      	bmi.n	800b844 <_fflush_r+0xc>
 800b888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88a:	f000 f908 	bl	800ba9e <__retarget_lock_release_recursive>
 800b88e:	e7d9      	b.n	800b844 <_fflush_r+0xc>
 800b890:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <_fflush_r+0x70>)
 800b892:	429c      	cmp	r4, r3
 800b894:	d101      	bne.n	800b89a <_fflush_r+0x62>
 800b896:	68ac      	ldr	r4, [r5, #8]
 800b898:	e7df      	b.n	800b85a <_fflush_r+0x22>
 800b89a:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <_fflush_r+0x74>)
 800b89c:	429c      	cmp	r4, r3
 800b89e:	bf08      	it	eq
 800b8a0:	68ec      	ldreq	r4, [r5, #12]
 800b8a2:	e7da      	b.n	800b85a <_fflush_r+0x22>
 800b8a4:	0800c514 	.word	0x0800c514
 800b8a8:	0800c534 	.word	0x0800c534
 800b8ac:	0800c4f4 	.word	0x0800c4f4

0800b8b0 <std>:
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	b510      	push	{r4, lr}
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8be:	6083      	str	r3, [r0, #8]
 800b8c0:	8181      	strh	r1, [r0, #12]
 800b8c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b8c4:	81c2      	strh	r2, [r0, #14]
 800b8c6:	6183      	str	r3, [r0, #24]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	2208      	movs	r2, #8
 800b8cc:	305c      	adds	r0, #92	; 0x5c
 800b8ce:	f7fb ff7b 	bl	80077c8 <memset>
 800b8d2:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <std+0x38>)
 800b8d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b8d6:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <std+0x3c>)
 800b8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <std+0x40>)
 800b8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <std+0x44>)
 800b8e0:	6224      	str	r4, [r4, #32]
 800b8e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b8e4:	bd10      	pop	{r4, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0800bc05 	.word	0x0800bc05
 800b8ec:	0800bc27 	.word	0x0800bc27
 800b8f0:	0800bc5f 	.word	0x0800bc5f
 800b8f4:	0800bc83 	.word	0x0800bc83

0800b8f8 <_cleanup_r>:
 800b8f8:	4901      	ldr	r1, [pc, #4]	; (800b900 <_cleanup_r+0x8>)
 800b8fa:	f000 b8af 	b.w	800ba5c <_fwalk_reent>
 800b8fe:	bf00      	nop
 800b900:	0800b839 	.word	0x0800b839

0800b904 <__sfmoreglue>:
 800b904:	b570      	push	{r4, r5, r6, lr}
 800b906:	2268      	movs	r2, #104	; 0x68
 800b908:	1e4d      	subs	r5, r1, #1
 800b90a:	4355      	muls	r5, r2
 800b90c:	460e      	mov	r6, r1
 800b90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b912:	f7ff fa55 	bl	800adc0 <_malloc_r>
 800b916:	4604      	mov	r4, r0
 800b918:	b140      	cbz	r0, 800b92c <__sfmoreglue+0x28>
 800b91a:	2100      	movs	r1, #0
 800b91c:	e9c0 1600 	strd	r1, r6, [r0]
 800b920:	300c      	adds	r0, #12
 800b922:	60a0      	str	r0, [r4, #8]
 800b924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b928:	f7fb ff4e 	bl	80077c8 <memset>
 800b92c:	4620      	mov	r0, r4
 800b92e:	bd70      	pop	{r4, r5, r6, pc}

0800b930 <__sfp_lock_acquire>:
 800b930:	4801      	ldr	r0, [pc, #4]	; (800b938 <__sfp_lock_acquire+0x8>)
 800b932:	f000 b8b3 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	20001359 	.word	0x20001359

0800b93c <__sfp_lock_release>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__sfp_lock_release+0x8>)
 800b93e:	f000 b8ae 	b.w	800ba9e <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	20001359 	.word	0x20001359

0800b948 <__sinit_lock_acquire>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__sinit_lock_acquire+0x8>)
 800b94a:	f000 b8a7 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800b94e:	bf00      	nop
 800b950:	2000135a 	.word	0x2000135a

0800b954 <__sinit_lock_release>:
 800b954:	4801      	ldr	r0, [pc, #4]	; (800b95c <__sinit_lock_release+0x8>)
 800b956:	f000 b8a2 	b.w	800ba9e <__retarget_lock_release_recursive>
 800b95a:	bf00      	nop
 800b95c:	2000135a 	.word	0x2000135a

0800b960 <__sinit>:
 800b960:	b510      	push	{r4, lr}
 800b962:	4604      	mov	r4, r0
 800b964:	f7ff fff0 	bl	800b948 <__sinit_lock_acquire>
 800b968:	69a3      	ldr	r3, [r4, #24]
 800b96a:	b11b      	cbz	r3, 800b974 <__sinit+0x14>
 800b96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b970:	f7ff bff0 	b.w	800b954 <__sinit_lock_release>
 800b974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b978:	6523      	str	r3, [r4, #80]	; 0x50
 800b97a:	4b13      	ldr	r3, [pc, #76]	; (800b9c8 <__sinit+0x68>)
 800b97c:	4a13      	ldr	r2, [pc, #76]	; (800b9cc <__sinit+0x6c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	62a2      	str	r2, [r4, #40]	; 0x28
 800b982:	42a3      	cmp	r3, r4
 800b984:	bf04      	itt	eq
 800b986:	2301      	moveq	r3, #1
 800b988:	61a3      	streq	r3, [r4, #24]
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f820 	bl	800b9d0 <__sfp>
 800b990:	6060      	str	r0, [r4, #4]
 800b992:	4620      	mov	r0, r4
 800b994:	f000 f81c 	bl	800b9d0 <__sfp>
 800b998:	60a0      	str	r0, [r4, #8]
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 f818 	bl	800b9d0 <__sfp>
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	60e0      	str	r0, [r4, #12]
 800b9a4:	2104      	movs	r1, #4
 800b9a6:	6860      	ldr	r0, [r4, #4]
 800b9a8:	f7ff ff82 	bl	800b8b0 <std>
 800b9ac:	68a0      	ldr	r0, [r4, #8]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	2109      	movs	r1, #9
 800b9b2:	f7ff ff7d 	bl	800b8b0 <std>
 800b9b6:	68e0      	ldr	r0, [r4, #12]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	2112      	movs	r1, #18
 800b9bc:	f7ff ff78 	bl	800b8b0 <std>
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	61a3      	str	r3, [r4, #24]
 800b9c4:	e7d2      	b.n	800b96c <__sinit+0xc>
 800b9c6:	bf00      	nop
 800b9c8:	0800c0b8 	.word	0x0800c0b8
 800b9cc:	0800b8f9 	.word	0x0800b8f9

0800b9d0 <__sfp>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	f7ff ffac 	bl	800b930 <__sfp_lock_acquire>
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <__sfp+0x84>)
 800b9da:	681e      	ldr	r6, [r3, #0]
 800b9dc:	69b3      	ldr	r3, [r6, #24]
 800b9de:	b913      	cbnz	r3, 800b9e6 <__sfp+0x16>
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f7ff ffbd 	bl	800b960 <__sinit>
 800b9e6:	3648      	adds	r6, #72	; 0x48
 800b9e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	d503      	bpl.n	800b9f8 <__sfp+0x28>
 800b9f0:	6833      	ldr	r3, [r6, #0]
 800b9f2:	b30b      	cbz	r3, 800ba38 <__sfp+0x68>
 800b9f4:	6836      	ldr	r6, [r6, #0]
 800b9f6:	e7f7      	b.n	800b9e8 <__sfp+0x18>
 800b9f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9fc:	b9d5      	cbnz	r5, 800ba34 <__sfp+0x64>
 800b9fe:	4b16      	ldr	r3, [pc, #88]	; (800ba58 <__sfp+0x88>)
 800ba00:	60e3      	str	r3, [r4, #12]
 800ba02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba06:	6665      	str	r5, [r4, #100]	; 0x64
 800ba08:	f000 f847 	bl	800ba9a <__retarget_lock_init_recursive>
 800ba0c:	f7ff ff96 	bl	800b93c <__sfp_lock_release>
 800ba10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba18:	6025      	str	r5, [r4, #0]
 800ba1a:	61a5      	str	r5, [r4, #24]
 800ba1c:	2208      	movs	r2, #8
 800ba1e:	4629      	mov	r1, r5
 800ba20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba24:	f7fb fed0 	bl	80077c8 <memset>
 800ba28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba30:	4620      	mov	r0, r4
 800ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba34:	3468      	adds	r4, #104	; 0x68
 800ba36:	e7d9      	b.n	800b9ec <__sfp+0x1c>
 800ba38:	2104      	movs	r1, #4
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	f7ff ff62 	bl	800b904 <__sfmoreglue>
 800ba40:	4604      	mov	r4, r0
 800ba42:	6030      	str	r0, [r6, #0]
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d1d5      	bne.n	800b9f4 <__sfp+0x24>
 800ba48:	f7ff ff78 	bl	800b93c <__sfp_lock_release>
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	e7ee      	b.n	800ba30 <__sfp+0x60>
 800ba52:	bf00      	nop
 800ba54:	0800c0b8 	.word	0x0800c0b8
 800ba58:	ffff0001 	.word	0xffff0001

0800ba5c <_fwalk_reent>:
 800ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba60:	4606      	mov	r6, r0
 800ba62:	4688      	mov	r8, r1
 800ba64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba68:	2700      	movs	r7, #0
 800ba6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba6e:	f1b9 0901 	subs.w	r9, r9, #1
 800ba72:	d505      	bpl.n	800ba80 <_fwalk_reent+0x24>
 800ba74:	6824      	ldr	r4, [r4, #0]
 800ba76:	2c00      	cmp	r4, #0
 800ba78:	d1f7      	bne.n	800ba6a <_fwalk_reent+0xe>
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba80:	89ab      	ldrh	r3, [r5, #12]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d907      	bls.n	800ba96 <_fwalk_reent+0x3a>
 800ba86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	d003      	beq.n	800ba96 <_fwalk_reent+0x3a>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4630      	mov	r0, r6
 800ba92:	47c0      	blx	r8
 800ba94:	4307      	orrs	r7, r0
 800ba96:	3568      	adds	r5, #104	; 0x68
 800ba98:	e7e9      	b.n	800ba6e <_fwalk_reent+0x12>

0800ba9a <__retarget_lock_init_recursive>:
 800ba9a:	4770      	bx	lr

0800ba9c <__retarget_lock_acquire_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_release_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <__swhatbuf_r>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	460e      	mov	r6, r1
 800baa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa8:	2900      	cmp	r1, #0
 800baaa:	b096      	sub	sp, #88	; 0x58
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	da08      	bge.n	800bac4 <__swhatbuf_r+0x24>
 800bab2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	602a      	str	r2, [r5, #0]
 800baba:	061a      	lsls	r2, r3, #24
 800babc:	d410      	bmi.n	800bae0 <__swhatbuf_r+0x40>
 800babe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac2:	e00e      	b.n	800bae2 <__swhatbuf_r+0x42>
 800bac4:	466a      	mov	r2, sp
 800bac6:	f000 f903 	bl	800bcd0 <_fstat_r>
 800baca:	2800      	cmp	r0, #0
 800bacc:	dbf1      	blt.n	800bab2 <__swhatbuf_r+0x12>
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bad4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bad8:	425a      	negs	r2, r3
 800bada:	415a      	adcs	r2, r3
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	e7ee      	b.n	800babe <__swhatbuf_r+0x1e>
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	2000      	movs	r0, #0
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	b016      	add	sp, #88	; 0x58
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800baec <__smakebuf_r>:
 800baec:	898b      	ldrh	r3, [r1, #12]
 800baee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baf0:	079d      	lsls	r5, r3, #30
 800baf2:	4606      	mov	r6, r0
 800baf4:	460c      	mov	r4, r1
 800baf6:	d507      	bpl.n	800bb08 <__smakebuf_r+0x1c>
 800baf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	6123      	str	r3, [r4, #16]
 800bb00:	2301      	movs	r3, #1
 800bb02:	6163      	str	r3, [r4, #20]
 800bb04:	b002      	add	sp, #8
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	ab01      	add	r3, sp, #4
 800bb0a:	466a      	mov	r2, sp
 800bb0c:	f7ff ffc8 	bl	800baa0 <__swhatbuf_r>
 800bb10:	9900      	ldr	r1, [sp, #0]
 800bb12:	4605      	mov	r5, r0
 800bb14:	4630      	mov	r0, r6
 800bb16:	f7ff f953 	bl	800adc0 <_malloc_r>
 800bb1a:	b948      	cbnz	r0, 800bb30 <__smakebuf_r+0x44>
 800bb1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb20:	059a      	lsls	r2, r3, #22
 800bb22:	d4ef      	bmi.n	800bb04 <__smakebuf_r+0x18>
 800bb24:	f023 0303 	bic.w	r3, r3, #3
 800bb28:	f043 0302 	orr.w	r3, r3, #2
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	e7e3      	b.n	800baf8 <__smakebuf_r+0xc>
 800bb30:	4b0d      	ldr	r3, [pc, #52]	; (800bb68 <__smakebuf_r+0x7c>)
 800bb32:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	6020      	str	r0, [r4, #0]
 800bb38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	9b00      	ldr	r3, [sp, #0]
 800bb40:	6163      	str	r3, [r4, #20]
 800bb42:	9b01      	ldr	r3, [sp, #4]
 800bb44:	6120      	str	r0, [r4, #16]
 800bb46:	b15b      	cbz	r3, 800bb60 <__smakebuf_r+0x74>
 800bb48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 f8d1 	bl	800bcf4 <_isatty_r>
 800bb52:	b128      	cbz	r0, 800bb60 <__smakebuf_r+0x74>
 800bb54:	89a3      	ldrh	r3, [r4, #12]
 800bb56:	f023 0303 	bic.w	r3, r3, #3
 800bb5a:	f043 0301 	orr.w	r3, r3, #1
 800bb5e:	81a3      	strh	r3, [r4, #12]
 800bb60:	89a0      	ldrh	r0, [r4, #12]
 800bb62:	4305      	orrs	r5, r0
 800bb64:	81a5      	strh	r5, [r4, #12]
 800bb66:	e7cd      	b.n	800bb04 <__smakebuf_r+0x18>
 800bb68:	0800b8f9 	.word	0x0800b8f9

0800bb6c <_malloc_usable_size_r>:
 800bb6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb70:	1f18      	subs	r0, r3, #4
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	bfbc      	itt	lt
 800bb76:	580b      	ldrlt	r3, [r1, r0]
 800bb78:	18c0      	addlt	r0, r0, r3
 800bb7a:	4770      	bx	lr

0800bb7c <_raise_r>:
 800bb7c:	291f      	cmp	r1, #31
 800bb7e:	b538      	push	{r3, r4, r5, lr}
 800bb80:	4604      	mov	r4, r0
 800bb82:	460d      	mov	r5, r1
 800bb84:	d904      	bls.n	800bb90 <_raise_r+0x14>
 800bb86:	2316      	movs	r3, #22
 800bb88:	6003      	str	r3, [r0, #0]
 800bb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8e:	bd38      	pop	{r3, r4, r5, pc}
 800bb90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb92:	b112      	cbz	r2, 800bb9a <_raise_r+0x1e>
 800bb94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb98:	b94b      	cbnz	r3, 800bbae <_raise_r+0x32>
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 f830 	bl	800bc00 <_getpid_r>
 800bba0:	462a      	mov	r2, r5
 800bba2:	4601      	mov	r1, r0
 800bba4:	4620      	mov	r0, r4
 800bba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbaa:	f000 b817 	b.w	800bbdc <_kill_r>
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d00a      	beq.n	800bbc8 <_raise_r+0x4c>
 800bbb2:	1c59      	adds	r1, r3, #1
 800bbb4:	d103      	bne.n	800bbbe <_raise_r+0x42>
 800bbb6:	2316      	movs	r3, #22
 800bbb8:	6003      	str	r3, [r0, #0]
 800bbba:	2001      	movs	r0, #1
 800bbbc:	e7e7      	b.n	800bb8e <_raise_r+0x12>
 800bbbe:	2400      	movs	r4, #0
 800bbc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	4798      	blx	r3
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e7e0      	b.n	800bb8e <_raise_r+0x12>

0800bbcc <raise>:
 800bbcc:	4b02      	ldr	r3, [pc, #8]	; (800bbd8 <raise+0xc>)
 800bbce:	4601      	mov	r1, r0
 800bbd0:	6818      	ldr	r0, [r3, #0]
 800bbd2:	f7ff bfd3 	b.w	800bb7c <_raise_r>
 800bbd6:	bf00      	nop
 800bbd8:	20000278 	.word	0x20000278

0800bbdc <_kill_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d07      	ldr	r5, [pc, #28]	; (800bbfc <_kill_r+0x20>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	f7f5 ffd1 	bl	8001b90 <_kill>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d102      	bne.n	800bbf8 <_kill_r+0x1c>
 800bbf2:	682b      	ldr	r3, [r5, #0]
 800bbf4:	b103      	cbz	r3, 800bbf8 <_kill_r+0x1c>
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	bd38      	pop	{r3, r4, r5, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20001354 	.word	0x20001354

0800bc00 <_getpid_r>:
 800bc00:	f7f5 bfbe 	b.w	8001b80 <_getpid>

0800bc04 <__sread>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	460c      	mov	r4, r1
 800bc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc0c:	f000 f894 	bl	800bd38 <_read_r>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	bfab      	itete	ge
 800bc14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc16:	89a3      	ldrhlt	r3, [r4, #12]
 800bc18:	181b      	addge	r3, r3, r0
 800bc1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc1e:	bfac      	ite	ge
 800bc20:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc22:	81a3      	strhlt	r3, [r4, #12]
 800bc24:	bd10      	pop	{r4, pc}

0800bc26 <__swrite>:
 800bc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2a:	461f      	mov	r7, r3
 800bc2c:	898b      	ldrh	r3, [r1, #12]
 800bc2e:	05db      	lsls	r3, r3, #23
 800bc30:	4605      	mov	r5, r0
 800bc32:	460c      	mov	r4, r1
 800bc34:	4616      	mov	r6, r2
 800bc36:	d505      	bpl.n	800bc44 <__swrite+0x1e>
 800bc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc3c:	2302      	movs	r3, #2
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f000 f868 	bl	800bd14 <_lseek_r>
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc4e:	81a3      	strh	r3, [r4, #12]
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	4628      	mov	r0, r5
 800bc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5a:	f000 b817 	b.w	800bc8c <_write_r>

0800bc5e <__sseek>:
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	460c      	mov	r4, r1
 800bc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc66:	f000 f855 	bl	800bd14 <_lseek_r>
 800bc6a:	1c43      	adds	r3, r0, #1
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	bf15      	itete	ne
 800bc70:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc7a:	81a3      	strheq	r3, [r4, #12]
 800bc7c:	bf18      	it	ne
 800bc7e:	81a3      	strhne	r3, [r4, #12]
 800bc80:	bd10      	pop	{r4, pc}

0800bc82 <__sclose>:
 800bc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc86:	f000 b813 	b.w	800bcb0 <_close_r>
	...

0800bc8c <_write_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d07      	ldr	r5, [pc, #28]	; (800bcac <_write_r+0x20>)
 800bc90:	4604      	mov	r4, r0
 800bc92:	4608      	mov	r0, r1
 800bc94:	4611      	mov	r1, r2
 800bc96:	2200      	movs	r2, #0
 800bc98:	602a      	str	r2, [r5, #0]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f7f5 ffaf 	bl	8001bfe <_write>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_write_r+0x1e>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_write_r+0x1e>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	20001354 	.word	0x20001354

0800bcb0 <_close_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d06      	ldr	r5, [pc, #24]	; (800bccc <_close_r+0x1c>)
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	4608      	mov	r0, r1
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	f7f5 ffbb 	bl	8001c36 <_close>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d102      	bne.n	800bcca <_close_r+0x1a>
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	b103      	cbz	r3, 800bcca <_close_r+0x1a>
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	bd38      	pop	{r3, r4, r5, pc}
 800bccc:	20001354 	.word	0x20001354

0800bcd0 <_fstat_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	; (800bcf0 <_fstat_r+0x20>)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4608      	mov	r0, r1
 800bcda:	4611      	mov	r1, r2
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	f7f5 ffb6 	bl	8001c4e <_fstat>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d102      	bne.n	800bcec <_fstat_r+0x1c>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	b103      	cbz	r3, 800bcec <_fstat_r+0x1c>
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	bd38      	pop	{r3, r4, r5, pc}
 800bcee:	bf00      	nop
 800bcf0:	20001354 	.word	0x20001354

0800bcf4 <_isatty_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d06      	ldr	r5, [pc, #24]	; (800bd10 <_isatty_r+0x1c>)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	602b      	str	r3, [r5, #0]
 800bd00:	f7f5 ffb5 	bl	8001c6e <_isatty>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_isatty_r+0x1a>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_isatty_r+0x1a>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20001354 	.word	0x20001354

0800bd14 <_lseek_r>:
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4d07      	ldr	r5, [pc, #28]	; (800bd34 <_lseek_r+0x20>)
 800bd18:	4604      	mov	r4, r0
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	2200      	movs	r2, #0
 800bd20:	602a      	str	r2, [r5, #0]
 800bd22:	461a      	mov	r2, r3
 800bd24:	f7f5 ffae 	bl	8001c84 <_lseek>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_lseek_r+0x1e>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_lseek_r+0x1e>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	20001354 	.word	0x20001354

0800bd38 <_read_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d07      	ldr	r5, [pc, #28]	; (800bd58 <_read_r+0x20>)
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	602a      	str	r2, [r5, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	f7f5 ff3c 	bl	8001bc4 <_read>
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	d102      	bne.n	800bd56 <_read_r+0x1e>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	b103      	cbz	r3, 800bd56 <_read_r+0x1e>
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	bd38      	pop	{r3, r4, r5, pc}
 800bd58:	20001354 	.word	0x20001354

0800bd5c <_init>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	bf00      	nop
 800bd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd62:	bc08      	pop	{r3}
 800bd64:	469e      	mov	lr, r3
 800bd66:	4770      	bx	lr

0800bd68 <_fini>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	bf00      	nop
 800bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6e:	bc08      	pop	{r3}
 800bd70:	469e      	mov	lr, r3
 800bd72:	4770      	bx	lr

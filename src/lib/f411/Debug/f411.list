
f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f0  080067f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080067f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000000c  08006804  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08006804  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001444a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003060  00000000  00000000  00034486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000374e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000387d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018488  00000000  00000000  00039940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015275  00000000  00000000  00051dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094acd  00000000  00000000  0006703d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbb0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  000fbb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080067b0 	.word	0x080067b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080067b0 	.word	0x080067b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_ADC1_Init+0x9c>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC1_Init+0x98>)
 8000504:	2201      	movs	r2, #1
 8000506:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC1_Init+0x98>)
 800050a:	2201      	movs	r2, #1
 800050c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_ADC1_Init+0x98>)
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_ADC1_Init+0xa0>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x98>)
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_ADC1_Init+0x98>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x98>)
 8000538:	2201      	movs	r2, #1
 800053a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <MX_ADC1_Init+0x98>)
 800053e:	f000 ff43 	bl	80013c8 <HAL_ADC_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000548:	f000 fa08 	bl	800095c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054c:	2301      	movs	r3, #1
 800054e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000554:	2307      	movs	r3, #7
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_ADC1_Init+0x98>)
 800055e:	f001 f8d5 	bl	800170c <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000568:	f000 f9f8 	bl	800095c <Error_Handler>
  }

}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000028 	.word	0x20000028
 8000578:	40012000 	.word	0x40012000
 800057c:	0f000001 	.word	0x0f000001

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a33      	ldr	r2, [pc, #204]	; (800066c <HAL_ADC_MspInit+0xec>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d15f      	bne.n	8000662 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b32      	ldr	r3, [pc, #200]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a31      	ldr	r2, [pc, #196]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <HAL_ADC_MspInit+0xf0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4821      	ldr	r0, [pc, #132]	; (8000674 <HAL_ADC_MspInit+0xf4>)
 80005ee:	f001 fee3 	bl	80023b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005f2:	4b21      	ldr	r3, [pc, #132]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <HAL_ADC_MspInit+0xfc>)
 80005f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 800060c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000610:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000618:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 800061c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000620:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000628:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 8000638:	f001 fbb2 	bl	8001da0 <HAL_DMA_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000642:	f000 f98b 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <HAL_ADC_MspInit+0xf8>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2012      	movs	r0, #18
 8000658:	f001 fb6b 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800065c:	2012      	movs	r0, #18
 800065e:	f001 fb84 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40012000 	.word	0x40012000
 8000670:	40023800 	.word	0x40023800
 8000674:	40020000 	.word	0x40020000
 8000678:	20000070 	.word	0x20000070
 800067c:	40026410 	.word	0x40026410

08000680 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b20      	ldr	r3, [pc, #128]	; (800070c <MX_DMA_Init+0x8c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a1f      	ldr	r2, [pc, #124]	; (800070c <MX_DMA_Init+0x8c>)
 8000690:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_DMA_Init+0x8c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2038      	movs	r0, #56	; 0x38
 80006a8:	f001 fb43 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006ac:	2038      	movs	r0, #56	; 0x38
 80006ae:	f001 fb5c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	203a      	movs	r0, #58	; 0x3a
 80006b8:	f001 fb3b 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006bc:	203a      	movs	r0, #58	; 0x3a
 80006be:	f001 fb54 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	203b      	movs	r0, #59	; 0x3b
 80006c8:	f001 fb33 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006cc:	203b      	movs	r0, #59	; 0x3b
 80006ce:	f001 fb4c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2044      	movs	r0, #68	; 0x44
 80006d8:	f001 fb2b 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006dc:	2044      	movs	r0, #68	; 0x44
 80006de:	f001 fb44 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2045      	movs	r0, #69	; 0x45
 80006e8:	f001 fb23 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006ec:	2045      	movs	r0, #69	; 0x45
 80006ee:	f001 fb3c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2046      	movs	r0, #70	; 0x46
 80006f8:	f001 fb1b 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006fc:	2046      	movs	r0, #70	; 0x46
 80006fe:	f001 fb34 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b49      	ldr	r3, [pc, #292]	; (8000850 <MX_GPIO_Init+0x140>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a48      	ldr	r2, [pc, #288]	; (8000850 <MX_GPIO_Init+0x140>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b46      	ldr	r3, [pc, #280]	; (8000850 <MX_GPIO_Init+0x140>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b42      	ldr	r3, [pc, #264]	; (8000850 <MX_GPIO_Init+0x140>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a41      	ldr	r2, [pc, #260]	; (8000850 <MX_GPIO_Init+0x140>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b3f      	ldr	r3, [pc, #252]	; (8000850 <MX_GPIO_Init+0x140>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <MX_GPIO_Init+0x140>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_GPIO_Init+0x140>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b38      	ldr	r3, [pc, #224]	; (8000850 <MX_GPIO_Init+0x140>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <MX_GPIO_Init+0x140>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <MX_GPIO_Init+0x140>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <MX_GPIO_Init+0x140>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	482d      	ldr	r0, [pc, #180]	; (8000854 <MX_GPIO_Init+0x144>)
 800079e:	f001 ff8f 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 80007a2:	2200      	movs	r2, #0
 80007a4:	f641 011c 	movw	r1, #6172	; 0x181c
 80007a8:	482b      	ldr	r0, [pc, #172]	; (8000858 <MX_GPIO_Init+0x148>)
 80007aa:	f001 ff89 	bl	80026c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f244 0119 	movw	r1, #16409	; 0x4019
 80007b4:	4829      	ldr	r0, [pc, #164]	; (800085c <MX_GPIO_Init+0x14c>)
 80007b6:	f001 ff83 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4820      	ldr	r0, [pc, #128]	; (8000854 <MX_GPIO_Init+0x144>)
 80007d4:	f001 fdf0 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d8:	2301      	movs	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <MX_GPIO_Init+0x148>)
 80007ec:	f001 fde4 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_11
 80007f0:	f641 031c 	movw	r3, #6172	; 0x181c
 80007f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_GPIO_Init+0x148>)
 800080a:	f001 fdd5 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4;
 800080e:	f244 0319 	movw	r3, #16409	; 0x4019
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_GPIO_Init+0x14c>)
 8000828:	f001 fdc6 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 800082c:	f243 4304 	movw	r3, #13316	; 0x3404
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_GPIO_Init+0x14c>)
 8000842:	f001 fdb9 	bl	80023b8 <HAL_GPIO_Init>

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40020800 	.word	0x40020800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fd1a 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000868:	f000 f810 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f7ff ff50 	bl	8000710 <MX_GPIO_Init>
  MX_DMA_Init();
 8000870:	f7ff ff06 	bl	8000680 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000874:	f000 fbe8 	bl	8001048 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000878:	f000 f996 	bl	8000ba8 <MX_SPI1_Init>
  MX_TIM3_Init();
 800087c:	f000 fb24 	bl	8000ec8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000880:	f7ff fe2c 	bl	80004dc <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8000884:	f000 f870 	bl	8000968 <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x28>
	...

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	; 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f005 ff80 	bl	80067a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <SystemClock_Config+0xc8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <SystemClock_Config+0xc8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a20      	ldr	r2, [pc, #128]	; (8000958 <SystemClock_Config+0xcc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <SystemClock_Config+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008fc:	2319      	movs	r3, #25
 80008fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000900:	23c0      	movs	r3, #192	; 0xc0
 8000902:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f001 feef 	bl	80026f4 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800091c:	f000 f81e 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2103      	movs	r1, #3
 800093c:	4618      	mov	r0, r3
 800093e:	f002 f947 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000948:	f000 f808 	bl	800095c <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	; 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_SDIO_SD_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 8000998:	f002 fafa 	bl	8002f90 <HAL_SD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80009a2:	f7ff ffdb 	bl	800095c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80009a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_SDIO_SD_Init+0x58>)
 80009ac:	f002 fed2 	bl	8003754 <HAL_SD_ConfigWideBusOperation>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80009b6:	f7ff ffd1 	bl	800095c <Error_Handler>
  }

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000d0 	.word	0x200000d0
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a68      	ldr	r2, [pc, #416]	; (8000b88 <HAL_SD_MspInit+0x1c0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	f040 80ca 	bne.w	8000b80 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	4b66      	ldr	r3, [pc, #408]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a65      	ldr	r2, [pc, #404]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 80009f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
 80009fc:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b5f      	ldr	r3, [pc, #380]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a5e      	ldr	r2, [pc, #376]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b58      	ldr	r3, [pc, #352]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a57      	ldr	r2, [pc, #348]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b55      	ldr	r3, [pc, #340]	; (8000b8c <HAL_SD_MspInit+0x1c4>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000a40:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a52:	230c      	movs	r3, #12
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	484c      	ldr	r0, [pc, #304]	; (8000b90 <HAL_SD_MspInit+0x1c8>)
 8000a5e:	f001 fcab 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8000a62:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a74:	230c      	movs	r3, #12
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4845      	ldr	r0, [pc, #276]	; (8000b94 <HAL_SD_MspInit+0x1cc>)
 8000a80:	f001 fc9a 	bl	80023b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000a86:	4a45      	ldr	r2, [pc, #276]	; (8000b9c <HAL_SD_MspInit+0x1d4>)
 8000a88:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a8a:	4b43      	ldr	r3, [pc, #268]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aa4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ab0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ab6:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ab8:	2220      	movs	r2, #32
 8000aba:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000aca:	2203      	movs	r2, #3
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ad0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ad6:	4b30      	ldr	r3, [pc, #192]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ad8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ade:	482e      	ldr	r0, [pc, #184]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000ae0:	f001 f95e 	bl	8001da0 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000aea:	f7ff ff37 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000af2:	641a      	str	r2, [r3, #64]	; 0x40
 8000af4:	4a28      	ldr	r2, [pc, #160]	; (8000b98 <HAL_SD_MspInit+0x1d0>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <HAL_SD_MspInit+0x1dc>)
 8000afe:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000b00:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b0a:	2240      	movs	r2, #64	; 0x40
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b1a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b22:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b24:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b2a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b2e:	2220      	movs	r2, #32
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b56:	f001 f923 	bl	8001da0 <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8000b60:	f7ff fefc 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b6a:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_SD_MspInit+0x1d8>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2031      	movs	r0, #49	; 0x31
 8000b76:	f001 f8dc 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000b7a:	2031      	movs	r0, #49	; 0x31
 8000b7c:	f001 f8f5 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000b80:	bf00      	nop
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40012c00 	.word	0x40012c00
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40020400 	.word	0x40020400
 8000b98:	20000154 	.word	0x20000154
 8000b9c:	400264a0 	.word	0x400264a0
 8000ba0:	200001b4 	.word	0x200001b4
 8000ba4:	40026458 	.word	0x40026458

08000ba8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bae:	4a18      	ldr	r2, [pc, #96]	; (8000c10 <MX_SPI1_Init+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bf4:	220a      	movs	r2, #10
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_SPI1_Init+0x64>)
 8000bfa:	f003 fa3f 	bl	800407c <HAL_SPI_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c04:	f7ff feaa 	bl	800095c <Error_Handler>
  }

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000214 	.word	0x20000214
 8000c10:	40013000 	.word	0x40013000

08000c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a35      	ldr	r2, [pc, #212]	; (8000d08 <HAL_SPI_MspInit+0xf4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d163      	bne.n	8000cfe <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_SPI_MspInit+0xf8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c6e:	23a0      	movs	r3, #160	; 0xa0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <HAL_SPI_MspInit+0xfc>)
 8000c8a:	f001 fb95 	bl	80023b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_SPI_MspInit+0x104>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000c96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000c9e:	2240      	movs	r2, #64	; 0x40
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cd4:	f001 f864 	bl	8001da0 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000cde:	f7ff fe3d 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000ce6:	649a      	str	r2, [r3, #72]	; 0x48
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_SPI_MspInit+0x100>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2023      	movs	r0, #35	; 0x23
 8000cf4:	f001 f81d 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cf8:	2023      	movs	r0, #35	; 0x23
 8000cfa:	f001 f836 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	2000026c 	.word	0x2000026c
 8000d18:	40026488 	.word	0x40026488

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 fac2 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <ADC_IRQHandler+0x10>)
 8000dc6:	f000 fb42 	bl	800144e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000028 	.word	0x20000028

08000dd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM3_IRQHandler+0x10>)
 8000dda:	f003 fb31 	bl	8004440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200002cc 	.word	0x200002cc

08000de8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <SPI1_IRQHandler+0x10>)
 8000dee:	f003 f9a9 	bl	8004144 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000214 	.word	0x20000214

08000dfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <USART1_IRQHandler+0x10>)
 8000e02:	f004 f8bf 	bl	8004f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000030c 	.word	0x2000030c

08000e10 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <SDIO_IRQHandler+0x10>)
 8000e16:	f002 f94b 	bl	80030b0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000d0 	.word	0x200000d0

08000e24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <DMA2_Stream0_IRQHandler+0x10>)
 8000e2a:	f001 f889 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000070 	.word	0x20000070

08000e38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <DMA2_Stream2_IRQHandler+0x10>)
 8000e3e:	f001 f87f 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200003ac 	.word	0x200003ac

08000e4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <DMA2_Stream3_IRQHandler+0x10>)
 8000e52:	f001 f875 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200001b4 	.word	0x200001b4

08000e60 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <DMA2_Stream5_IRQHandler+0x10>)
 8000e66:	f001 f86b 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000026c 	.word	0x2000026c

08000e74 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <DMA2_Stream6_IRQHandler+0x10>)
 8000e7a:	f001 f861 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000154 	.word	0x20000154

08000e88 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <DMA2_Stream7_IRQHandler+0x10>)
 8000e8e:	f001 f857 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000034c 	.word	0x2000034c

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <SystemInit+0x28>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <SystemInit+0x28>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SystemInit+0x28>)
 8000eb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000ef4:	4a2b      	ldr	r2, [pc, #172]	; (8000fa4 <MX_TIM3_Init+0xdc>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000efa:	2263      	movs	r2, #99	; 0x63
 8000efc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f18:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f1a:	f003 fa31 	bl	8004380 <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000f24:	f7ff fd1a 	bl	800095c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4619      	mov	r1, r3
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f36:	f003 fc27 	bl	8004788 <HAL_TIM_ConfigClockSource>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f40:	f7ff fd0c 	bl	800095c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f44:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f46:	f003 fa46 	bl	80043d6 <HAL_TIM_IC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f50:	f7ff fd04 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f64:	f003 ff3e 	bl	8004de4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000f6e:	f7ff fcf5 	bl	800095c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f76:	2301      	movs	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f82:	463b      	mov	r3, r7
 8000f84:	220c      	movs	r2, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_TIM3_Init+0xd8>)
 8000f8a:	f003 fb61 	bl	8004650 <HAL_TIM_IC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000f94:	f7ff fce2 	bl	800095c <Error_Handler>
  }

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002cc 	.word	0x200002cc
 8000fa4:	40000400 	.word	0x40000400

08000fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_TIM_Base_MspInit+0x94>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d133      	bne.n	8001032 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_TIM_Base_MspInit+0x98>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001012:	2302      	movs	r3, #2
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4809      	ldr	r0, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x9c>)
 800101e:	f001 f9cb 	bl	80023b8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201d      	movs	r0, #29
 8001028:	f000 fe83 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800102c:	201d      	movs	r0, #29
 800102e:	f000 fe9c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	; 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40000400 	.word	0x40000400
 8001040:	40023800 	.word	0x40023800
 8001044:	40020400 	.word	0x40020400

08001048 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_USART1_UART_Init+0x50>)
 8001050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001054:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USART1_UART_Init+0x4c>)
 8001080:	f003 ff32 	bl	8004ee8 <HAL_UART_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108a:	f7ff fc67 	bl	800095c <Error_Handler>
  }

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000030c 	.word	0x2000030c
 8001098:	40011000 	.word	0x40011000

0800109c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a5b      	ldr	r2, [pc, #364]	; (8001228 <HAL_UART_MspInit+0x18c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f040 80b0 	bne.w	8001220 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <HAL_UART_MspInit+0x190>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_UART_MspInit+0x190>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6453      	str	r3, [r2, #68]	; 0x44
 80010d0:	4b56      	ldr	r3, [pc, #344]	; (800122c <HAL_UART_MspInit+0x190>)
 80010d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <HAL_UART_MspInit+0x190>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_UART_MspInit+0x190>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6313      	str	r3, [r2, #48]	; 0x30
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <HAL_UART_MspInit+0x190>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_UART_MspInit+0x190>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_UART_MspInit+0x190>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <HAL_UART_MspInit+0x190>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001126:	2307      	movs	r3, #7
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	483f      	ldr	r0, [pc, #252]	; (8001230 <HAL_UART_MspInit+0x194>)
 8001132:	f001 f941 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001146:	2307      	movs	r3, #7
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4838      	ldr	r0, [pc, #224]	; (8001234 <HAL_UART_MspInit+0x198>)
 8001152:	f001 f931 	bl	80023b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001158:	4a38      	ldr	r2, [pc, #224]	; (800123c <HAL_UART_MspInit+0x1a0>)
 800115a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <HAL_UART_MspInit+0x19c>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001162:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <HAL_UART_MspInit+0x19c>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001176:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_UART_MspInit+0x19c>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_UART_MspInit+0x19c>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001196:	4828      	ldr	r0, [pc, #160]	; (8001238 <HAL_UART_MspInit+0x19c>)
 8001198:	f000 fe02 	bl	8001da0 <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80011a2:	f7ff fbdb 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_UART_MspInit+0x19c>)
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_UART_MspInit+0x19c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011b2:	4b23      	ldr	r3, [pc, #140]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011b4:	4a23      	ldr	r2, [pc, #140]	; (8001244 <HAL_UART_MspInit+0x1a8>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 80011f6:	f000 fdd3 	bl	8001da0 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8001200:	f7ff fbac 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_UART_MspInit+0x1a4>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2025      	movs	r0, #37	; 0x25
 8001216:	f000 fd8c 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800121a:	2025      	movs	r0, #37	; 0x25
 800121c:	f000 fda5 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40011000 	.word	0x40011000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	2000034c 	.word	0x2000034c
 800123c:	400264b8 	.word	0x400264b8
 8001240:	200003ac 	.word	0x200003ac
 8001244:	40026440 	.word	0x40026440

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800124c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800124e:	e003      	b.n	8001258 <LoopCopyDataInit>

08001250 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001252:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001254:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001256:	3104      	adds	r1, #4

08001258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800125c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800125e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001260:	d3f6      	bcc.n	8001250 <CopyDataInit>
  ldr  r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001264:	e002      	b.n	800126c <LoopFillZerobss>

08001266 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001266:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001268:	f842 3b04 	str.w	r3, [r2], #4

0800126c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001270:	d3f9      	bcc.n	8001266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001272:	f7ff fe13 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f005 fa6f 	bl	8006758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff faf1 	bl	8000860 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001284:	080067f8 	.word	0x080067f8
  ldr  r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800128c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001294:	20000410 	.word	0x20000410

08001298 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <DMA1_Stream0_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 fd29 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fd24 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd41 	bl	8001d86 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 fd09 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	2000040c 	.word	0x2000040c

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000040c 	.word	0x2000040c

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e033      	b.n	8001446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff f8ca 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d118      	bne.n	8001438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140e:	f023 0302 	bic.w	r3, r3, #2
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 faa8 	bl	8001970 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
 8001436:	e001      	b.n	800143c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b02      	cmp	r3, #2
 800146a:	bf0c      	ite	eq
 800146c:	2301      	moveq	r3, #1
 800146e:	2300      	movne	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b20      	cmp	r3, #32
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d049      	beq.n	8001524 <HAL_ADC_IRQHandler+0xd6>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d046      	beq.n	8001524 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d12b      	bne.n	8001514 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d127      	bne.n	8001514 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d119      	bne.n	8001514 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0220 	bic.w	r2, r2, #32
 80014ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f8db 	bl	80016d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0212 	mvn.w	r2, #18
 8001522:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b80      	cmp	r3, #128	; 0x80
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d057      	beq.n	8001606 <HAL_ADC_IRQHandler+0x1b8>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d054      	beq.n	8001606 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d139      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12b      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d124      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d11d      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d119      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fab6 	bl	8001b68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 020c 	mvn.w	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	bf0c      	ite	eq
 8001614:	2301      	moveq	r3, #1
 8001616:	2300      	movne	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b40      	cmp	r3, #64	; 0x40
 8001628:	bf0c      	ite	eq
 800162a:	2301      	moveq	r3, #1
 800162c:	2300      	movne	r3, #0
 800162e:	b2db      	uxtb	r3, r3
 8001630:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d017      	beq.n	8001668 <HAL_ADC_IRQHandler+0x21a>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d014      	beq.n	8001668 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10d      	bne.n	8001668 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f843 	bl	80016e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f06f 0201 	mvn.w	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b20      	cmp	r3, #32
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <HAL_ADC_IRQHandler+0x27a>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d012      	beq.n	80016c8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f06f 0220 	mvn.w	r2, #32
 80016b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f81d 	bl	80016f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0220 	mvn.w	r2, #32
 80016c6:	601a      	str	r2, [r3, #0]
  }
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1c>
 8001724:	2302      	movs	r3, #2
 8001726:	e113      	b.n	8001950 <HAL_ADC_ConfigChannel+0x244>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d925      	bls.n	8001784 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	3b1e      	subs	r3, #30
 800174e:	2207      	movs	r2, #7
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43da      	mvns	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	400a      	ands	r2, r1
 800175c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68d9      	ldr	r1, [r3, #12]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	4603      	mov	r3, r0
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4403      	add	r3, r0
 8001776:	3b1e      	subs	r3, #30
 8001778:	409a      	lsls	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	e022      	b.n	80017ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6919      	ldr	r1, [r3, #16]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	2207      	movs	r2, #7
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6919      	ldr	r1, [r3, #16]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4403      	add	r3, r0
 80017c0:	409a      	lsls	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d824      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b05      	subs	r3, #5
 80017e4:	221f      	movs	r2, #31
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	400a      	ands	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b05      	subs	r3, #5
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	e04c      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d824      	bhi.n	800186e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b23      	subs	r3, #35	; 0x23
 8001836:	221f      	movs	r2, #31
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b23      	subs	r3, #35	; 0x23
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
 800186c:	e023      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	3b41      	subs	r3, #65	; 0x41
 8001880:	221f      	movs	r2, #31
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b41      	subs	r3, #65	; 0x41
 80018aa:	fa00 f203 	lsl.w	r2, r0, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_ADC_ConfigChannel+0x250>)
 80018b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a28      	ldr	r2, [pc, #160]	; (8001960 <HAL_ADC_ConfigChannel+0x254>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d10f      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d8>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d10b      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <HAL_ADC_ConfigChannel+0x254>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12b      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x23a>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_ADC_ConfigChannel+0x258>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d003      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x1f4>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b11      	cmp	r3, #17
 80018fe:	d122      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_ADC_ConfigChannel+0x258>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d111      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b11      	ldr	r3, [pc, #68]	; (8001968 <HAL_ADC_ConfigChannel+0x25c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_ADC_ConfigChannel+0x260>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9a      	lsrs	r2, r3, #18
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40012300 	.word	0x40012300
 8001960:	40012000 	.word	0x40012000
 8001964:	10000012 	.word	0x10000012
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83

08001970 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001978:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <ADC_Init+0x1f0>)
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	431a      	orrs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	021a      	lsls	r2, r3, #8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6899      	ldr	r1, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <ADC_Init+0x1f4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6899      	ldr	r1, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	e00f      	b.n	8001a6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0202 	bic.w	r2, r2, #2
 8001a7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7e1b      	ldrb	r3, [r3, #24]
 8001a88:	005a      	lsls	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aaa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	035a      	lsls	r2, r3, #13
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	e007      	b.n	8001ae4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	051a      	lsls	r2, r3, #20
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b26:	025a      	lsls	r2, r3, #9
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	029a      	lsls	r2, r3, #10
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
}
 8001b54:	bf00      	nop
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40012300 	.word	0x40012300
 8001b64:	0f000001 	.word	0x0f000001

08001b68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fadc 	bl	8001368 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e099      	b.n	8001ef0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ddc:	e00f      	b.n	8001dfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dde:	f7ff fac3 	bl	8001368 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d908      	bls.n	8001dfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2203      	movs	r2, #3
 8001df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e078      	b.n	8001ef0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1e8      	bne.n	8001dde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	4b38      	ldr	r3, [pc, #224]	; (8001ef8 <HAL_DMA_Init+0x158>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4313      	orrs	r3, r2
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f023 0307 	bic.w	r3, r3, #7
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d117      	bne.n	8001ec2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fa0b 	bl	80022c0 <DMA_CheckFifoParam>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f9c2 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	223f      	movs	r2, #63	; 0x3f
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	f010803f 	.word	0xf010803f

08001efc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00c      	b.n	8001f34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f4c:	4b8e      	ldr	r3, [pc, #568]	; (8002188 <HAL_DMA_IRQHandler+0x248>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a8e      	ldr	r2, [pc, #568]	; (800218c <HAL_DMA_IRQHandler+0x24c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2208      	movs	r2, #8
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d012      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	f043 0202 	orr.w	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00b      	beq.n	8002018 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2204      	movs	r2, #4
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201c:	2210      	movs	r2, #16
 800201e:	409a      	lsls	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d043      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03c      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2210      	movs	r2, #16
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d018      	beq.n	8002082 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d108      	bne.n	8002070 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e01f      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
 8002080:	e016      	b.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0208 	bic.w	r2, r2, #8
 800209e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2220      	movs	r2, #32
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 808f 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8087 	beq.w	80021e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2220      	movs	r2, #32
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d136      	bne.n	8002158 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0216 	bic.w	r2, r2, #22
 80020f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002108:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_DMA_IRQHandler+0x1da>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002116:	2b00      	cmp	r3, #0
 8002118:	d007      	beq.n	800212a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0208 	bic.w	r2, r2, #8
 8002128:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212e:	223f      	movs	r2, #63	; 0x3f
 8002130:	409a      	lsls	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d07e      	beq.n	800224c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
        }
        return;
 8002156:	e079      	b.n	800224c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	2b00      	cmp	r3, #0
 800217a:	d031      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e02c      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
 8002186:	bf00      	nop
 8002188:	20000000 	.word	0x20000000
 800218c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
 80021a0:	e01e      	b.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10f      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0210 	bic.w	r2, r2, #16
 80021be:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d032      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d022      	beq.n	800223a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2205      	movs	r2, #5
 80021f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	3301      	adds	r3, #1
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	d307      	bcc.n	8002228 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f2      	bne.n	800220c <HAL_DMA_IRQHandler+0x2cc>
 8002226:	e000      	b.n	800222a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002228:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	4798      	blx	r3
 800224a:	e000      	b.n	800224e <HAL_DMA_IRQHandler+0x30e>
        return;
 800224c:	bf00      	nop
    }
  }
}
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b10      	subs	r3, #16
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d909      	bls.n	8002296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
 8002294:	e007      	b.n	80022a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	aaaaaaab 	.word	0xaaaaaaab
 80022bc:	080067e0 	.word	0x080067e0

080022c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d856      	bhi.n	800238e <DMA_CheckFifoParam+0xce>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x28>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800230b 	.word	0x0800230b
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	0800238f 	.word	0x0800238f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d046      	beq.n	8002392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e043      	b.n	8002392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002312:	d140      	bne.n	8002396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e03d      	b.n	8002396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d121      	bne.n	8002368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d837      	bhi.n	800239a <DMA_CheckFifoParam+0xda>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x70>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002347 	.word	0x08002347
 8002338:	08002341 	.word	0x08002341
 800233c:	08002359 	.word	0x08002359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e030      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d025      	beq.n	800239e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e022      	b.n	800239e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002366:	e01c      	b.n	80023a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d903      	bls.n	8002376 <DMA_CheckFifoParam+0xb6>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d003      	beq.n	800237c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002374:	e018      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e015      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e00b      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 800238e:	bf00      	nop
 8002390:	e00a      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e008      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e006      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
    }
  } 
  
  return status; 
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e159      	b.n	8002688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d4:	2201      	movs	r2, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	f040 8148 	bne.w	8002682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d00b      	beq.n	8002412 <HAL_GPIO_Init+0x5a>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002406:	2b11      	cmp	r3, #17
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b12      	cmp	r3, #18
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0xfc>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a2 	beq.w	8002682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a56      	ldr	r2, [pc, #344]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b54      	ldr	r3, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255a:	4a52      	ldr	r2, [pc, #328]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	3302      	adds	r3, #2
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	220f      	movs	r2, #15
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <HAL_GPIO_Init+0x2f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x202>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a48      	ldr	r2, [pc, #288]	; (80026ac <HAL_GPIO_Init+0x2f4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x1fe>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a47      	ldr	r2, [pc, #284]	; (80026b0 <HAL_GPIO_Init+0x2f8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x1fa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <HAL_GPIO_Init+0x2fc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x1f6>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a45      	ldr	r2, [pc, #276]	; (80026b8 <HAL_GPIO_Init+0x300>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x1f2>
 80025a6:	2304      	movs	r3, #4
 80025a8:	e008      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025aa:	2307      	movs	r3, #7
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ae:	2303      	movs	r3, #3
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x204>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	; (80026a4 <HAL_GPIO_Init+0x2ec>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_GPIO_Init+0x304>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002628:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_GPIO_Init+0x304>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002658:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x304>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x304>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea2 	bls.w	80023d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e25e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d075      	beq.n	80027fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002712:	4b88      	ldr	r3, [pc, #544]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d00c      	beq.n	8002738 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002726:	2b08      	cmp	r3, #8
 8002728:	d112      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272a:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05b      	beq.n	80027fc <HAL_RCC_OscConfig+0x108>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d157      	bne.n	80027fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e239      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x74>
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a75      	ldr	r2, [pc, #468]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e01d      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x98>
 8002772:	4b70      	ldr	r3, [pc, #448]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6f      	ldr	r2, [pc, #444]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b6d      	ldr	r3, [pc, #436]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0xb0>
 800278c:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a68      	ldr	r2, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800279e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fddc 	bl	8001368 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fdd8 	bl	8001368 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1fe      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b5b      	ldr	r3, [pc, #364]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0f0      	beq.n	80027b4 <HAL_RCC_OscConfig+0xc0>
 80027d2:	e014      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fdc8 	bl	8001368 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe fdc4 	bl	8001368 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1ea      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	4b51      	ldr	r3, [pc, #324]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0xe8>
 80027fa:	e000      	b.n	80027fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d063      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280a:	4b4a      	ldr	r3, [pc, #296]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b47      	ldr	r3, [pc, #284]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d11c      	bne.n	800285c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d116      	bne.n	800285c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	4b41      	ldr	r3, [pc, #260]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <HAL_RCC_OscConfig+0x152>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e1be      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4937      	ldr	r1, [pc, #220]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	e03a      	b.n	80028d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_OscConfig+0x244>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fd7d 	bl	8001368 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe fd79 	bl	8001368 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e19f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4925      	ldr	r1, [pc, #148]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <HAL_RCC_OscConfig+0x244>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fd5c 	bl	8001368 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b4:	f7fe fd58 	bl	8001368 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e17e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d036      	beq.n	800294c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d016      	beq.n	8002914 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_RCC_OscConfig+0x248>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fd3c 	bl	8001368 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f4:	f7fe fd38 	bl	8001368 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e15e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCC_OscConfig+0x240>)
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x200>
 8002912:	e01b      	b.n	800294c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <HAL_RCC_OscConfig+0x248>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291a:	f7fe fd25 	bl	8001368 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	e00e      	b.n	8002940 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002922:	f7fe fd21 	bl	8001368 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d907      	bls.n	8002940 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e147      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
 8002934:	40023800 	.word	0x40023800
 8002938:	42470000 	.word	0x42470000
 800293c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002940:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ea      	bne.n	8002922 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8097 	beq.w	8002a88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b81      	ldr	r3, [pc, #516]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10f      	bne.n	800298a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a7c      	ldr	r2, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <HAL_RCC_OscConfig+0x474>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d118      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002996:	4b74      	ldr	r3, [pc, #464]	; (8002b68 <HAL_RCC_OscConfig+0x474>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a73      	ldr	r2, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x474>)
 800299c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fce1 	bl	8001368 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7fe fcdd 	bl	8001368 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e103      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_OscConfig+0x474>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x2ea>
 80029d0:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x324>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x30c>
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a5e      	ldr	r2, [pc, #376]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 0304 	orr.w	r3, r3, #4
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	4a5b      	ldr	r2, [pc, #364]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6713      	str	r3, [r2, #112]	; 0x70
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x324>
 8002a00:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0c:	4b55      	ldr	r3, [pc, #340]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4a54      	ldr	r2, [pc, #336]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 0304 	bic.w	r3, r3, #4
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fca2 	bl	8001368 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a28:	f7fe fc9e 	bl	8001368 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0c2      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3e:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0ee      	beq.n	8002a28 <HAL_RCC_OscConfig+0x334>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fc8c 	bl	8001368 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fc88 	bl	8001368 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0ac      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a6a:	4b3e      	ldr	r3, [pc, #248]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1ee      	bne.n	8002a54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a38      	ldr	r2, [pc, #224]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8098 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a92:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d05c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d141      	bne.n	8002b2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fc5c 	bl	8001368 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fc58 	bl	8001368 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e07e      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	491b      	ldr	r1, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b02:	f7fe fc31 	bl	8001368 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b0a:	f7fe fc2d 	bl	8001368 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e053      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x416>
 8002b28:	e04b      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_OscConfig+0x478>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fc1a 	bl	8001368 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fc16 	bl	8001368 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e03c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x444>
 8002b56:	e034      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e02f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_OscConfig+0x4d8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d11c      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10d      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fb52 	bl	8001368 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe fb4e 	bl	8001368 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f821 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fab2 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	080067c8 	.word	0x080067c8
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da0:	b090      	sub	sp, #64	; 0x40
 8002da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
 8002da8:	2300      	movs	r3, #0
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db4:	4b59      	ldr	r3, [pc, #356]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d00d      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x40>
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	f200 80a1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002dd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dd4:	e09b      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd6:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dda:	e098      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ddc:	4b4f      	ldr	r3, [pc, #316]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e04:	2100      	movs	r1, #0
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e08:	fb03 f201 	mul.w	r2, r3, r1
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	4a43      	ldr	r2, [pc, #268]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e16:	fba0 1202 	umull	r1, r2, r0, r2
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e1c:	460a      	mov	r2, r1
 8002e1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	4413      	add	r3, r2
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e28:	2200      	movs	r2, #0
 8002e2a:	61bb      	str	r3, [r7, #24]
 8002e2c:	61fa      	str	r2, [r7, #28]
 8002e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e36:	f7fd f9cf 	bl	80001d8 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e42:	e053      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	617a      	str	r2, [r7, #20]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e56:	f04f 0b00 	mov.w	fp, #0
 8002e5a:	4652      	mov	r2, sl
 8002e5c:	465b      	mov	r3, fp
 8002e5e:	f04f 0000 	mov.w	r0, #0
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	0159      	lsls	r1, r3, #5
 8002e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e6c:	0150      	lsls	r0, r2, #5
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	ebb2 080a 	subs.w	r8, r2, sl
 8002e76:	eb63 090b 	sbc.w	r9, r3, fp
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e92:	eb63 0509 	sbc.w	r5, r3, r9
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	00eb      	lsls	r3, r5, #3
 8002ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea4:	00e2      	lsls	r2, r4, #3
 8002ea6:	4614      	mov	r4, r2
 8002ea8:	461d      	mov	r5, r3
 8002eaa:	eb14 030a 	adds.w	r3, r4, sl
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	eb45 030b 	adc.w	r3, r5, fp
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	60fa      	str	r2, [r7, #12]
 8002edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee0:	f7fd f97a 	bl	80001d8 <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002efc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3740      	adds	r7, #64	; 0x40
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	017d7840 	.word	0x017d7840

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	080067d8 	.word	0x080067d8

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffdc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	080067d8 	.word	0x080067d8

08002f90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e022      	b.n	8002fe8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7fd fd07 	bl	80009c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f814 	bl	8002ff0 <HAL_SD_InitCard>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00a      	b.n	8002fe8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b08e      	sub	sp, #56	; 0x38
 8002ff4:	af04      	add	r7, sp, #16
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800300c:	2376      	movs	r3, #118	; 0x76
 800300e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681d      	ldr	r5, [r3, #0]
 8003014:	466c      	mov	r4, sp
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800301e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003028:	4628      	mov	r0, r5
 800302a:	f002 feb9 	bl	8005da0 <SDIO_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e031      	b.n	80030a4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_SD_InitCard+0xbc>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fef1 	bl	8005e32 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_SD_InitCard+0xbc>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fd54 	bl	8003b04 <SD_PowerON>
 800305c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e013      	b.n	80030a4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fc73 	bl	8003968 <SD_InitCard>
 8003082:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}
 80030ac:	422580a0 	.word	0x422580a0

080030b0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_SD_IRQHandler+0x2e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 ff2a 	bl	8003f30 <SD_Read_IT>
 80030dc:	e165      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 808f 	beq.w	800320c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003106:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800310a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d039      	beq.n	800319a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_SD_IRQHandler+0x8a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d011      	beq.n	800315e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 ff2c 	bl	8005f9c <SDMMC_CmdStopTransfer>
 8003144:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f943 	bl	80033e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f240 523a 	movw	r2, #1338	; 0x53a
 8003166:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d104      	bne.n	800318a <HAL_SD_IRQHandler+0xda>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f920 	bl	80033d0 <HAL_SD_RxCpltCallback>
 8003190:	e10b      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f912 	bl	80033bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003198:	e107      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8102 	beq.w	80033aa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 fef1 	bl	8005f9c <SDMMC_CmdStopTransfer>
 80031ba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f908 	bl	80033e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 80e5 	bne.w	80033aa <HAL_SD_IRQHandler+0x2fa>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 80df 	bne.w	80033aa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0208 	bic.w	r2, r2, #8
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f8d9 	bl	80033bc <HAL_SD_TxCpltCallback>
}
 800320a:	e0ce      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_SD_IRQHandler+0x17c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fed4 	bl	8003fd2 <SD_Write_IT>
 800322a:	e0be      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003232:	f240 233a 	movw	r3, #570	; 0x23a
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80b6 	beq.w	80033aa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	f043 0208 	orr.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	f043 0210 	orr.w	r2, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	f043 0208 	orr.w	r2, r3, #8
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f240 723a 	movw	r2, #1850	; 0x73a
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80032d8:	f023 0302 	bic.w	r3, r3, #2
 80032dc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 fe5a 	bl	8005f9c <SDMMC_CmdStopTransfer>
 80032e8:	4602      	mov	r2, r0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f869 	bl	80033e4 <HAL_SD_ErrorCallback>
}
 8003312:	e04a      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d045      	beq.n	80033aa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <HAL_SD_IRQHandler+0x282>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d011      	beq.n	8003356 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_SD_IRQHandler+0x304>)
 8003338:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fddc 	bl	8001efc <HAL_DMA_Abort_IT>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02f      	beq.n	80033aa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fa9c 	bl	800388c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003354:	e029      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d104      	bne.n	800336a <HAL_SD_IRQHandler+0x2ba>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d011      	beq.n	800338e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <HAL_SD_IRQHandler+0x308>)
 8003370:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fdc0 	bl	8001efc <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fab7 	bl	80038fa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800338c:	e00d      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f828 	bl	80033f8 <HAL_SD_AbortCallback>
}
 80033a8:	e7ff      	b.n	80033aa <HAL_SD_IRQHandler+0x2fa>
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	0800388d 	.word	0x0800388d
 80033b8:	080038fb 	.word	0x080038fb

080033bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341a:	0f9b      	lsrs	r3, r3, #30
 800341c:	b2da      	uxtb	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b2da      	uxtb	r2, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	0e1b      	lsrs	r3, r3, #24
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	b2da      	uxtb	r2, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2da      	uxtb	r2, r3
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b2da      	uxtb	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	b2da      	uxtb	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	b29a      	uxth	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	0bdb      	lsrs	r3, r3, #15
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349c:	0b9b      	lsrs	r3, r3, #14
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ae:	0b5b      	lsrs	r3, r3, #13
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c0:	0b1b      	lsrs	r3, r3, #12
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2200      	movs	r2, #0
 80034d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d163      	bne.n	80035a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e0:	009a      	lsls	r2, r3, #2
 80034e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034ec:	0f92      	lsrs	r2, r2, #30
 80034ee:	431a      	orrs	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f8:	0edb      	lsrs	r3, r3, #27
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	0d5b      	lsrs	r3, r3, #21
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b2da      	uxtb	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	b2da      	uxtb	r2, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003540:	0bdb      	lsrs	r3, r3, #15
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	b2da      	uxtb	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	7e1b      	ldrb	r3, [r3, #24]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	3302      	adds	r3, #2
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800356e:	fb03 f202 	mul.w	r2, r3, r2
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7a1b      	ldrb	r3, [r3, #8]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	2201      	movs	r2, #1
 8003582:	409a      	lsls	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003590:	0a52      	lsrs	r2, r2, #9
 8003592:	fb03 f202 	mul.w	r2, r3, r2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a0:	661a      	str	r2, [r3, #96]	; 0x60
 80035a2:	e031      	b.n	8003608 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d11d      	bne.n	80035e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	3301      	adds	r3, #1
 80035c8:	029a      	lsls	r2, r3, #10
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
 80035e6:	e00f      	b.n	8003608 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_SD_GetCardCSD+0x344>)
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e09d      	b.n	8003744 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	0b9b      	lsrs	r3, r3, #14
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800361e:	09db      	lsrs	r3, r3, #7
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003626:	b2da      	uxtb	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003630:	b2db      	uxtb	r3, r3
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	b2da      	uxtb	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	0fdb      	lsrs	r3, r3, #31
 8003642:	b2da      	uxtb	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	0f5b      	lsrs	r3, r3, #29
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f003 0303 	and.w	r3, r3, #3
 8003654:	b2da      	uxtb	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	0e9b      	lsrs	r3, r3, #26
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	b2da      	uxtb	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	0d9b      	lsrs	r3, r3, #22
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	b2da      	uxtb	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	0d5b      	lsrs	r3, r3, #21
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	b2da      	uxtb	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	0bdb      	lsrs	r3, r3, #15
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	0b9b      	lsrs	r3, r3, #14
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	0b5b      	lsrs	r3, r3, #13
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	0b1b      	lsrs	r3, r3, #12
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003732:	b2da      	uxtb	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	004005ff 	.word	0x004005ff

08003754 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af04      	add	r7, sp, #16
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2203      	movs	r2, #3
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	2b03      	cmp	r3, #3
 800376c:	d02e      	beq.n	80037cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	d106      	bne.n	8003784 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
 8003782:	e029      	b.n	80037d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378a:	d10a      	bne.n	80037a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa6f 	bl	8003c70 <SD_WideBus_Enable>
 8003792:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
 80037a0:	e01a      	b.n	80037d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 faac 	bl	8003d06 <SD_WideBus_Disable>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
 80037bc:	e00c      	b.n	80037d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ca:	e005      	b.n	80037d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e024      	b.n	800383e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681d      	ldr	r5, [r3, #0]
 800381a:	466c      	mov	r4, sp
 800381c:	f107 0318 	add.w	r3, r7, #24
 8003820:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003824:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800382e:	4628      	mov	r0, r5
 8003830:	f002 fab6 	bl	8005da0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	bf00      	nop
 8003848:	004005ff 	.word	0x004005ff

0800384c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9de 	bl	8003c20 <SD_SendStatus>
 8003864:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0a5b      	lsrs	r3, r3, #9
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003882:	693b      	ldr	r3, [r7, #16]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f240 523a 	movw	r2, #1338	; 0x53a
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff ffd1 	bl	800384c <HAL_SD_GetCardState>
 80038aa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d002      	beq.n	80038c6 <SD_DMATxAbort+0x3a>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d10a      	bne.n	80038dc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 fb66 	bl	8005f9c <SDMMC_CmdStopTransfer>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d103      	bne.n	80038ec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fd87 	bl	80033f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80038ea:	e002      	b.n	80038f2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff fd79 	bl	80033e4 <HAL_SD_ErrorCallback>
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003910:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ff9a 	bl	800384c <HAL_SD_GetCardState>
 8003918:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d002      	beq.n	8003934 <SD_DMARxAbort+0x3a>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b05      	cmp	r3, #5
 8003932:	d10a      	bne.n	800394a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f002 fb2f 	bl	8005f9c <SDMMC_CmdStopTransfer>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fd50 	bl	80033f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003958:	e002      	b.n	8003960 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fd42 	bl	80033e4 <HAL_SD_ErrorCallback>
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003968:	b5b0      	push	{r4, r5, r7, lr}
 800396a:	b094      	sub	sp, #80	; 0x50
 800396c:	af04      	add	r7, sp, #16
 800396e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003970:	2301      	movs	r3, #1
 8003972:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f002 fa69 	bl	8005e50 <SDIO_GetPowerState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003984:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003988:	e0b8      	b.n	8003afc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	2b03      	cmp	r3, #3
 8003990:	d02f      	beq.n	80039f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fc0a 	bl	80061b0 <SDMMC_CmdSendCID>
 800399c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800399e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80039a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a6:	e0a9      	b.n	8003afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 fa93 	bl	8005eda <SDIO_GetResponse>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2104      	movs	r1, #4
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 fa8a 	bl	8005eda <SDIO_GetResponse>
 80039c6:	4602      	mov	r2, r0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2108      	movs	r1, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f002 fa81 	bl	8005eda <SDIO_GetResponse>
 80039d8:	4602      	mov	r2, r0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	210c      	movs	r1, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 fa78 	bl	8005eda <SDIO_GetResponse>
 80039ea:	4602      	mov	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d00d      	beq.n	8003a16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f107 020e 	add.w	r2, r7, #14
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f002 fc10 	bl	800622a <SDMMC_CmdSetRelAdd>
 8003a0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <SD_InitCard+0xae>
    {
      return errorstate;
 8003a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a14:	e072      	b.n	8003afc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d036      	beq.n	8003a8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003a1e:	89fb      	ldrh	r3, [r7, #14]
 8003a20:	461a      	mov	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f002 fbda 	bl	80061ec <SDMMC_CmdSendCSD>
 8003a38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a42:	e05b      	b.n	8003afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 fa45 	bl	8005eda <SDIO_GetResponse>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 fa3c 	bl	8005eda <SDIO_GetResponse>
 8003a62:	4602      	mov	r2, r0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f002 fa33 	bl	8005eda <SDIO_GetResponse>
 8003a74:	4602      	mov	r2, r0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	210c      	movs	r1, #12
 8003a80:	4618      	mov	r0, r3
 8003a82:	f002 fa2a 	bl	8005eda <SDIO_GetResponse>
 8003a86:	4602      	mov	r2, r0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2104      	movs	r1, #4
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 fa21 	bl	8005eda <SDIO_GetResponse>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	0d1a      	lsrs	r2, r3, #20
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fcb0 	bl	800340c <HAL_SD_GetCardCSD>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ab2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ab6:	e021      	b.n	8003afc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	041b      	lsls	r3, r3, #16
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	461c      	mov	r4, r3
 8003ac6:	4615      	mov	r5, r2
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	4608      	mov	r0, r1
 8003ace:	f002 fa87 	bl	8005fe0 <SDMMC_CmdSelDesel>
 8003ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <SD_InitCard+0x176>
  {
    return errorstate;
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	e00e      	b.n	8003afc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	466c      	mov	r4, sp
 8003ae6:	f103 0210 	add.w	r2, r3, #16
 8003aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003af0:	3304      	adds	r3, #4
 8003af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af4:	4628      	mov	r0, r5
 8003af6:	f002 f953 	bl	8005da0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3740      	adds	r7, #64	; 0x40
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bdb0      	pop	{r4, r5, r7, pc}

08003b04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 fa82 	bl	8006026 <SDMMC_CmdGoIdleState>
 8003b22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	e072      	b.n	8003c14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 fa95 	bl	8006062 <SDMMC_CmdOperCond>
 8003b38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f002 fa6b 	bl	8006026 <SDMMC_CmdGoIdleState>
 8003b50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	e05b      	b.n	8003c14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d137      	bne.n	8003bda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f002 fa95 	bl	80060a0 <SDMMC_CmdAppCommand>
 8003b76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02d      	beq.n	8003bda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b82:	e047      	b.n	8003c14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 fa88 	bl	80060a0 <SDMMC_CmdAppCommand>
 8003b90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <SD_PowerON+0x98>
    {
      return errorstate;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	e03b      	b.n	8003c14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	491e      	ldr	r1, [pc, #120]	; (8003c1c <SD_PowerON+0x118>)
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f002 fa9e 	bl	80060e4 <SDMMC_CmdAppOperCommand>
 8003ba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003bb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003bb4:	e02e      	b.n	8003c14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 f98c 	bl	8005eda <SDIO_GetResponse>
 8003bc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	0fdb      	lsrs	r3, r3, #31
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <SD_PowerON+0xcc>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <SD_PowerON+0xce>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]

    count++;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d802      	bhi.n	8003bea <SD_PowerON+0xe6>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0cc      	beq.n	8003b84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d902      	bls.n	8003bfa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf8:	e00c      	b.n	8003c14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0a:	e002      	b.n	8003c12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	c1100000 	.word	0xc1100000

08003c20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c34:	e018      	b.n	8003c68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	4619      	mov	r1, r3
 8003c42:	4610      	mov	r0, r2
 8003c44:	f002 fb12 	bl	800626c <SDMMC_CmdSendStatus>
 8003c48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	e009      	b.n	8003c68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 f93d 	bl	8005eda <SDIO_GetResponse>
 8003c60:	4602      	mov	r2, r0
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f002 f927 	bl	8005eda <SDIO_GetResponse>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c96:	d102      	bne.n	8003c9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c9c:	e02f      	b.n	8003cfe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c9e:	f107 030c 	add.w	r3, r7, #12
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f879 	bl	8003d9c <SD_FindSCR>
 8003caa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	e023      	b.n	8003cfe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01c      	beq.n	8003cfa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f002 f9e7 	bl	80060a0 <SDMMC_CmdAppCommand>
 8003cd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	e00f      	b.n	8003cfe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f002 fa20 	bl	800612a <SDMMC_CmdBusWidth>
 8003cea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e003      	b.n	8003cfe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e001      	b.n	8003cfe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f002 f8dc 	bl	8005eda <SDIO_GetResponse>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d2c:	d102      	bne.n	8003d34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d32:	e02f      	b.n	8003d94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003d34:	f107 030c 	add.w	r3, r7, #12
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f82e 	bl	8003d9c <SD_FindSCR>
 8003d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	e023      	b.n	8003d94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5e:	041b      	lsls	r3, r3, #16
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f002 f99c 	bl	80060a0 <SDMMC_CmdAppCommand>
 8003d68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	e00f      	b.n	8003d94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f002 f9d5 	bl	800612a <SDMMC_CmdBusWidth>
 8003d80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	e003      	b.n	8003d94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e001      	b.n	8003d94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b08f      	sub	sp, #60	; 0x3c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003da6:	f7fd fadf 	bl	8001368 <HAL_GetTick>
 8003daa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003db0:	2300      	movs	r3, #0
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2108      	movs	r1, #8
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f002 f8c8 	bl	8005f58 <SDMMC_CmdBlockLength>
 8003dc8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	e0a9      	b.n	8003f28 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f002 f95d 	bl	80060a0 <SDMMC_CmdAppCommand>
 8003de6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df0:	e09a      	b.n	8003f28 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003dfc:	2330      	movs	r3, #48	; 0x30
 8003dfe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e00:	2302      	movs	r3, #2
 8003e02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f107 0210 	add.w	r2, r7, #16
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f002 f872 	bl	8005f00 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f002 f9a4 	bl	800616e <SDMMC_CmdSendSCR>
 8003e26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d022      	beq.n	8003e74 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	e07a      	b.n	8003f28 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f107 0208 	add.w	r2, r7, #8
 8003e4c:	18d4      	adds	r4, r2, r3
 8003e4e:	4608      	mov	r0, r1
 8003e50:	f001 ffd1 	bl	8005df6 <SDIO_ReadFIFO>
 8003e54:	4603      	mov	r3, r0
 8003e56:	6023      	str	r3, [r4, #0]
      index++;
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e5e:	f7fd fa83 	bl	8001368 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d102      	bne.n	8003e74 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e72:	e059      	b.n	8003f28 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e7a:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0d6      	beq.n	8003e32 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2208      	movs	r2, #8
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	e044      	b.n	8003f28 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e037      	b.n	8003f28 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003ece:	2320      	movs	r3, #32
 8003ed0:	e02a      	b.n	8003f28 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	061a      	lsls	r2, r3, #24
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	021b      	lsls	r3, r3, #8
 8003ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ef2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	0e1b      	lsrs	r3, r3, #24
 8003ef8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	601a      	str	r2, [r3, #0]
    scr++;
 8003efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f00:	3304      	adds	r3, #4
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	061a      	lsls	r2, r3, #24
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f10:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f1a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	0e1b      	lsrs	r3, r3, #24
 8003f20:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	373c      	adds	r7, #60	; 0x3c
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03f      	beq.n	8003fca <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	e033      	b.n	8003fb8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 ff4e 	bl	8005df6 <SDIO_ReadFIFO>
 8003f5a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	0e1b      	lsrs	r3, r3, #24
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d9c8      	bls.n	8003f50 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d043      	beq.n	8004074 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	e037      	b.n	8004062 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	3b01      	subs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	021a      	lsls	r2, r3, #8
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	3b01      	subs	r3, #1
 800401a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4313      	orrs	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061a      	lsls	r2, r3, #24
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3b01      	subs	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f107 0208 	add.w	r2, r7, #8
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f001 feda 	bl	8005e10 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3301      	adds	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b07      	cmp	r3, #7
 8004066:	d9c4      	bls.n	8003ff2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004074:	bf00      	nop
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e056      	b.n	800413c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fc fdb3 	bl	8000c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	ea42 0103 	orr.w	r1, r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	f003 0104 	and.w	r1, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10f      	bne.n	8004188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    return;
 8004186:	e0d7      	b.n	8004338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_SPI_IRQHandler+0x66>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	09db      	lsrs	r3, r3, #7
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
    return;
 80041a8:	e0c6      	b.n	8004338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10c      	bne.n	80041d0 <HAL_SPI_IRQHandler+0x8c>
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80b4 	beq.w	8004338 <HAL_SPI_IRQHandler+0x1f4>
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80ad 	beq.w	8004338 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d023      	beq.n	8004232 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d011      	beq.n	800421a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	f043 0204 	orr.w	r2, r3, #4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	e00b      	b.n	8004232 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	693b      	ldr	r3, [r7, #16]
        return;
 8004230:	e082      	b.n	8004338 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d014      	beq.n	8004268 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	f043 0201 	orr.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	f043 0208 	orr.w	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d04f      	beq.n	8004336 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_SPI_IRQHandler+0x17e>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d034      	beq.n	800432c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0203 	bic.w	r2, r2, #3
 80042d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042de:	4a18      	ldr	r2, [pc, #96]	; (8004340 <HAL_SPI_IRQHandler+0x1fc>)
 80042e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fd fe08 	bl	8001efc <HAL_DMA_Abort_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430a:	4a0d      	ldr	r2, [pc, #52]	; (8004340 <HAL_SPI_IRQHandler+0x1fc>)
 800430c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fdf2 	bl	8001efc <HAL_DMA_Abort_IT>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800432a:	e003      	b.n	8004334 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f809 	bl	8004344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004332:	e000      	b.n	8004336 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004334:	bf00      	nop
    return;
 8004336:	bf00      	nop
  }
}
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	08004359 	.word	0x08004359

08004344 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ffe6 	bl	8004344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e01d      	b.n	80043ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fdfe 	bl	8000fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f000 fad8 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e01d      	b.n	8004424 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f815 	bl	800442c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 faad 	bl	8004974 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa58 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa4a 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa5b 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0204 	mvn.w	r2, #4
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2202      	movs	r2, #2
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa2e 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa20 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fa31 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0208 	mvn.w	r2, #8
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa04 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9f6 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa07 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2208      	movs	r2, #8
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9da 	bl	8004938 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9cc 	bl	8004924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9dd 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0201 	mvn.w	r2, #1
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9a6 	bl	8004910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b80      	cmp	r3, #128	; 0x80
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fc72 	bl	8004ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d10e      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d107      	bne.n	800461c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f9a2 	bl	8004960 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d10e      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d107      	bne.n	8004648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0220 	mvn.w	r2, #32
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fc3c 	bl	8004ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004666:	2302      	movs	r3, #2
 8004668:	e08a      	b.n	8004780 <HAL_TIM_IC_ConfigChannel+0x130>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11b      	bne.n	80046b8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f000 f9f0 	bl	8004a74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 020c 	bic.w	r2, r2, #12
 80046a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6999      	ldr	r1, [r3, #24]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	619a      	str	r2, [r3, #24]
 80046b6:	e05a      	b.n	800476e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d11c      	bne.n	80046f8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f000 fa68 	bl	8004ba2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6999      	ldr	r1, [r3, #24]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	021a      	lsls	r2, r3, #8
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
 80046f6:	e03a      	b.n	800476e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11b      	bne.n	8004736 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f000 fab5 	bl	8004c7c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69da      	ldr	r2, [r3, #28]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 020c 	bic.w	r2, r2, #12
 8004720:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69d9      	ldr	r1, [r3, #28]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	61da      	str	r2, [r3, #28]
 8004734:	e01b      	b.n	800476e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f000 fad5 	bl	8004cf4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004758:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69d9      	ldr	r1, [r3, #28]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	021a      	lsls	r2, r3, #8
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_TIM_ConfigClockSource+0x18>
 800479c:	2302      	movs	r3, #2
 800479e:	e0b3      	b.n	8004908 <HAL_TIM_ConfigClockSource+0x180>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d8:	d03e      	beq.n	8004858 <HAL_TIM_ConfigClockSource+0xd0>
 80047da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047de:	f200 8087 	bhi.w	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	f000 8085 	beq.w	80048f4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	d87f      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047f0:	2b70      	cmp	r3, #112	; 0x70
 80047f2:	d01a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xa2>
 80047f4:	2b70      	cmp	r3, #112	; 0x70
 80047f6:	d87b      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 80047f8:	2b60      	cmp	r3, #96	; 0x60
 80047fa:	d050      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x116>
 80047fc:	2b60      	cmp	r3, #96	; 0x60
 80047fe:	d877      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004800:	2b50      	cmp	r3, #80	; 0x50
 8004802:	d03c      	beq.n	800487e <HAL_TIM_ConfigClockSource+0xf6>
 8004804:	2b50      	cmp	r3, #80	; 0x50
 8004806:	d873      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d058      	beq.n	80048be <HAL_TIM_ConfigClockSource+0x136>
 800480c:	2b40      	cmp	r3, #64	; 0x40
 800480e:	d86f      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004810:	2b30      	cmp	r3, #48	; 0x30
 8004812:	d064      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 8004814:	2b30      	cmp	r3, #48	; 0x30
 8004816:	d86b      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004818:	2b20      	cmp	r3, #32
 800481a:	d060      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 800481c:	2b20      	cmp	r3, #32
 800481e:	d867      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05c      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
 8004824:	2b10      	cmp	r3, #16
 8004826:	d05a      	beq.n	80048de <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004828:	e062      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6899      	ldr	r1, [r3, #8]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f000 fab3 	bl	8004da4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800484c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	609a      	str	r2, [r3, #8]
      break;
 8004856:	e04e      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f000 fa9c 	bl	8004da4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800487a:	609a      	str	r2, [r3, #8]
      break;
 800487c:	e03b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	461a      	mov	r2, r3
 800488c:	f000 f95a 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2150      	movs	r1, #80	; 0x50
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fa69 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 800489c:	e02b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	6859      	ldr	r1, [r3, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f000 f9b6 	bl	8004c1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2160      	movs	r1, #96	; 0x60
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa59 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 80048bc:	e01b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6859      	ldr	r1, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f000 f93a 	bl	8004b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2140      	movs	r1, #64	; 0x40
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fa49 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 80048dc:	e00b      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f000 fa40 	bl	8004d6e <TIM_ITRx_SetConfig>
      break;
 80048ee:	e002      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048f0:	bf00      	nop
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <TIM_Base_SetConfig+0xe4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0x38>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0x38>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a31      	ldr	r2, [pc, #196]	; (8004a5c <TIM_Base_SetConfig+0xe8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0x38>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a30      	ldr	r2, [pc, #192]	; (8004a60 <TIM_Base_SetConfig+0xec>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0x38>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	; (8004a64 <TIM_Base_SetConfig+0xf0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <TIM_Base_SetConfig+0xe4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01b      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d017      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <TIM_Base_SetConfig+0xe8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <TIM_Base_SetConfig+0xec>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00f      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a20      	ldr	r2, [pc, #128]	; (8004a64 <TIM_Base_SetConfig+0xf0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00b      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <TIM_Base_SetConfig+0xf4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d007      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <TIM_Base_SetConfig+0xf8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d003      	beq.n	80049fe <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <TIM_Base_SetConfig+0xfc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d108      	bne.n	8004a10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a08      	ldr	r2, [pc, #32]	; (8004a58 <TIM_Base_SetConfig+0xe4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	615a      	str	r2, [r3, #20]
}
 8004a4a:	bf00      	nop
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40000400 	.word	0x40000400
 8004a60:	40000800 	.word	0x40000800
 8004a64:	40000c00 	.word	0x40000c00
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <TIM_TI1_SetConfig+0xbc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <TIM_TI1_SetConfig+0x56>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa8:	d00f      	beq.n	8004aca <TIM_TI1_SetConfig+0x56>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a21      	ldr	r2, [pc, #132]	; (8004b34 <TIM_TI1_SetConfig+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00b      	beq.n	8004aca <TIM_TI1_SetConfig+0x56>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <TIM_TI1_SetConfig+0xc4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <TIM_TI1_SetConfig+0x56>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <TIM_TI1_SetConfig+0xc8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d003      	beq.n	8004aca <TIM_TI1_SetConfig+0x56>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <TIM_TI1_SetConfig+0xcc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <TIM_TI1_SetConfig+0x5a>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <TIM_TI1_SetConfig+0x5c>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e003      	b.n	8004aee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f023 030a 	bic.w	r3, r3, #10
 8004b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 030a 	and.w	r3, r3, #10
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40000400 	.word	0x40000400
 8004b38:	40000800 	.word	0x40000800
 8004b3c:	40000c00 	.word	0x40000c00
 8004b40:	40014000 	.word	0x40014000

08004b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f023 030a 	bic.w	r3, r3, #10
 8004b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 0210 	bic.w	r2, r3, #16
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	031b      	lsls	r3, r3, #12
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 0210 	bic.w	r2, r3, #16
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	031b      	lsls	r3, r3, #12
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	621a      	str	r2, [r3, #32]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cb8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ccc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	621a      	str	r2, [r3, #32]
}
 8004ce8:	bf00      	nop
 8004cea:	371c      	adds	r7, #28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	031b      	lsls	r3, r3, #12
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	031b      	lsls	r3, r3, #12
 8004d4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f043 0307 	orr.w	r3, r3, #7
 8004d90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e050      	b.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e48:	d013      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d10c      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40014000 	.word	0x40014000

08004ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e03f      	b.n	8004f7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc f8c4 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa69 	bl	8005404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x52>
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f996 	bl	8005300 <UART_Receive_IT>
      return;
 8004fd4:	e0d0      	b.n	8005178 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80b0 	beq.w	800513e <HAL_UART_IRQHandler+0x1ba>
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x70>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80a5 	beq.w	800513e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_UART_IRQHandler+0x90>
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	f043 0201 	orr.w	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_UART_IRQHandler+0xb0>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	f043 0202 	orr.w	r2, r3, #2
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_UART_IRQHandler+0xd0>
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00f      	beq.n	800507e <HAL_UART_IRQHandler+0xfa>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_UART_IRQHandler+0xee>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	f043 0208 	orr.w	r2, r3, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d077      	beq.n	8005176 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <HAL_UART_IRQHandler+0x11c>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f930 	bl	8005300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_UART_IRQHandler+0x144>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d031      	beq.n	800512c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f879 	bl	80051c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d123      	bne.n	8005124 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d013      	beq.n	800511c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	4a21      	ldr	r2, [pc, #132]	; (8005180 <HAL_UART_IRQHandler+0x1fc>)
 80050fa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	4618      	mov	r0, r3
 8005102:	f7fc fefb 	bl	8001efc <HAL_DMA_Abort_IT>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d016      	beq.n	800513a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511a:	e00e      	b.n	800513a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f845 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005122:	e00a      	b.n	800513a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f841 	bl	80051ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512a:	e006      	b.n	800513a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f83d 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005138:	e01d      	b.n	8005176 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513a:	bf00      	nop
    return;
 800513c:	e01b      	b.n	8005176 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_UART_IRQHandler+0x1d6>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f866 	bl	8005224 <UART_Transmit_IT>
    return;
 8005158:	e00e      	b.n	8005178 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_UART_IRQHandler+0x1f4>
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8ae 	bl	80052d0 <UART_EndTransmit_IT>
    return;
 8005174:	e000      	b.n	8005178 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005176:	bf00      	nop
  }
}
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	080051fd 	.word	0x080051fd

08005184 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff ffc8 	bl	80051ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521c:	bf00      	nop
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b21      	cmp	r3, #33	; 0x21
 8005236:	d144      	bne.n	80052c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005240:	d11a      	bne.n	8005278 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005256:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	621a      	str	r2, [r3, #32]
 800526a:	e00e      	b.n	800528a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]
 8005276:	e008      	b.n	800528a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6211      	str	r1, [r2, #32]
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29b      	uxth	r3, r3
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4619      	mov	r1, r3
 8005298:	84d1      	strh	r1, [r2, #38]	; 0x26
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10f      	bne.n	80052be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	e000      	b.n	80052c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
  }
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff47 	bl	8005184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b22      	cmp	r3, #34	; 0x22
 8005312:	d171      	bne.n	80053f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d123      	bne.n	8005366 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10e      	bne.n	800534a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	1c9a      	adds	r2, r3, #2
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	629a      	str	r2, [r3, #40]	; 0x28
 8005348:	e029      	b.n	800539e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	b29b      	uxth	r3, r3
 8005352:	b2db      	uxtb	r3, r3
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
 8005364:	e01b      	b.n	800539e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6858      	ldr	r0, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6291      	str	r1, [r2, #40]	; 0x28
 800537e:	b2c2      	uxtb	r2, r0
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e00c      	b.n	800539e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b2da      	uxtb	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	1c58      	adds	r0, r3, #1
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	6288      	str	r0, [r1, #40]	; 0x28
 8005396:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	4619      	mov	r1, r3
 80053ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d120      	bne.n	80053f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0220 	bic.w	r2, r2, #32
 80053c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fed4 	bl	8005198 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e002      	b.n	80053fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800540c:	af00      	add	r7, sp, #0
 800540e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005412:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800541e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005422:	68d9      	ldr	r1, [r3, #12]
 8005424:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	ea40 0301 	orr.w	r3, r0, r1
 800542e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005430:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	431a      	orrs	r2, r3
 8005446:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8005452:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800545e:	f021 010c 	bic.w	r1, r1, #12
 8005462:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800546c:	430b      	orrs	r3, r1
 800546e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005470:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800547c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	ea40 0301 	orr.w	r3, r0, r1
 800548c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005498:	f040 824a 	bne.w	8005930 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800549c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b96      	ldr	r3, [pc, #600]	; (80056fc <UART_SetConfig+0x2f8>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d006      	beq.n	80054b6 <UART_SetConfig+0xb2>
 80054a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b94      	ldr	r3, [pc, #592]	; (8005700 <UART_SetConfig+0x2fc>)
 80054b0:	429a      	cmp	r2, r3
 80054b2:	f040 8129 	bne.w	8005708 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054b6:	f7fd fd57 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 80054ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80054c8:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80054cc:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80054d0:	4622      	mov	r2, r4
 80054d2:	462b      	mov	r3, r5
 80054d4:	1891      	adds	r1, r2, r2
 80054d6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80054da:	415b      	adcs	r3, r3
 80054dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054e0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80054e4:	4621      	mov	r1, r4
 80054e6:	1851      	adds	r1, r2, r1
 80054e8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80054ec:	4629      	mov	r1, r5
 80054ee:	414b      	adcs	r3, r1
 80054f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8005500:	4649      	mov	r1, r9
 8005502:	00cb      	lsls	r3, r1, #3
 8005504:	4641      	mov	r1, r8
 8005506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800550a:	4641      	mov	r1, r8
 800550c:	00ca      	lsls	r2, r1, #3
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	4603      	mov	r3, r0
 8005514:	4622      	mov	r2, r4
 8005516:	189b      	adds	r3, r3, r2
 8005518:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800551c:	462b      	mov	r3, r5
 800551e:	460a      	mov	r2, r1
 8005520:	eb42 0303 	adc.w	r3, r2, r3
 8005524:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005528:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005534:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005538:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800553c:	460b      	mov	r3, r1
 800553e:	18db      	adds	r3, r3, r3
 8005540:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005544:	4613      	mov	r3, r2
 8005546:	eb42 0303 	adc.w	r3, r2, r3
 800554a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800554e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8005552:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8005556:	f7fa fe3f 	bl	80001d8 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4b69      	ldr	r3, [pc, #420]	; (8005704 <UART_SetConfig+0x300>)
 8005560:	fba3 2302 	umull	r2, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	011c      	lsls	r4, r3, #4
 8005568:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800556c:	2200      	movs	r2, #0
 800556e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005572:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005576:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800557a:	4642      	mov	r2, r8
 800557c:	464b      	mov	r3, r9
 800557e:	1891      	adds	r1, r2, r2
 8005580:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005584:	415b      	adcs	r3, r3
 8005586:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800558a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800558e:	4641      	mov	r1, r8
 8005590:	1851      	adds	r1, r2, r1
 8005592:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80055aa:	4659      	mov	r1, fp
 80055ac:	00cb      	lsls	r3, r1, #3
 80055ae:	4651      	mov	r1, sl
 80055b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b4:	4651      	mov	r1, sl
 80055b6:	00ca      	lsls	r2, r1, #3
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	4603      	mov	r3, r0
 80055be:	4642      	mov	r2, r8
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80055c6:	464b      	mov	r3, r9
 80055c8:	460a      	mov	r2, r1
 80055ca:	eb42 0303 	adc.w	r3, r2, r3
 80055ce:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80055d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80055de:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80055e2:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80055e6:	460b      	mov	r3, r1
 80055e8:	18db      	adds	r3, r3, r3
 80055ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055ee:	4613      	mov	r3, r2
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80055fc:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8005600:	f7fa fdea 	bl	80001d8 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4611      	mov	r1, r2
 800560a:	4b3e      	ldr	r3, [pc, #248]	; (8005704 <UART_SetConfig+0x300>)
 800560c:	fba3 2301 	umull	r2, r3, r3, r1
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	2264      	movs	r2, #100	; 0x64
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	1acb      	subs	r3, r1, r3
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005620:	4b38      	ldr	r3, [pc, #224]	; (8005704 <UART_SetConfig+0x300>)
 8005622:	fba3 2302 	umull	r2, r3, r3, r2
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800562e:	441c      	add	r4, r3
 8005630:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800563a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800563e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005642:	4642      	mov	r2, r8
 8005644:	464b      	mov	r3, r9
 8005646:	1891      	adds	r1, r2, r2
 8005648:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800564c:	415b      	adcs	r3, r3
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005652:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8005656:	4641      	mov	r1, r8
 8005658:	1851      	adds	r1, r2, r1
 800565a:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800565e:	4649      	mov	r1, r9
 8005660:	414b      	adcs	r3, r1
 8005662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8005672:	4659      	mov	r1, fp
 8005674:	00cb      	lsls	r3, r1, #3
 8005676:	4651      	mov	r1, sl
 8005678:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800567c:	4651      	mov	r1, sl
 800567e:	00ca      	lsls	r2, r1, #3
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	4603      	mov	r3, r0
 8005686:	4642      	mov	r2, r8
 8005688:	189b      	adds	r3, r3, r2
 800568a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800568e:	464b      	mov	r3, r9
 8005690:	460a      	mov	r2, r1
 8005692:	eb42 0303 	adc.w	r3, r2, r3
 8005696:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800569a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80056a6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80056aa:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80056ae:	460b      	mov	r3, r1
 80056b0:	18db      	adds	r3, r3, r3
 80056b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80056c4:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80056c8:	f7fa fd86 	bl	80001d8 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <UART_SetConfig+0x300>)
 80056d2:	fba3 1302 	umull	r1, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	2164      	movs	r1, #100	; 0x64
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	3332      	adds	r3, #50	; 0x32
 80056e4:	4a07      	ldr	r2, [pc, #28]	; (8005704 <UART_SetConfig+0x300>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f003 0207 	and.w	r2, r3, #7
 80056f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4422      	add	r2, r4
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	e349      	b.n	8005d90 <UART_SetConfig+0x98c>
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005708:	f7fd fc1a 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 800570c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005710:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005714:	2200      	movs	r2, #0
 8005716:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800571a:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800571e:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	1891      	adds	r1, r2, r2
 8005728:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800572c:	415b      	adcs	r3, r3
 800572e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005732:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005736:	4621      	mov	r1, r4
 8005738:	eb12 0a01 	adds.w	sl, r2, r1
 800573c:	4629      	mov	r1, r5
 800573e:	eb43 0b01 	adc.w	fp, r3, r1
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800574e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005756:	4692      	mov	sl, r2
 8005758:	469b      	mov	fp, r3
 800575a:	4623      	mov	r3, r4
 800575c:	eb1a 0303 	adds.w	r3, sl, r3
 8005760:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005764:	462b      	mov	r3, r5
 8005766:	eb4b 0303 	adc.w	r3, fp, r3
 800576a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800576e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800577a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800577e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8005782:	460b      	mov	r3, r1
 8005784:	18db      	adds	r3, r3, r3
 8005786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800578a:	4613      	mov	r3, r2
 800578c:	eb42 0303 	adc.w	r3, r2, r3
 8005790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005794:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005798:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800579c:	f7fa fd1c 	bl	80001d8 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4b61      	ldr	r3, [pc, #388]	; (800592c <UART_SetConfig+0x528>)
 80057a6:	fba3 2302 	umull	r2, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	011c      	lsls	r4, r3, #4
 80057ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80057b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80057bc:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	67b9      	str	r1, [r7, #120]	; 0x78
 80057c8:	415b      	adcs	r3, r3
 80057ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80057d0:	4641      	mov	r1, r8
 80057d2:	1851      	adds	r1, r2, r1
 80057d4:	6739      	str	r1, [r7, #112]	; 0x70
 80057d6:	4649      	mov	r1, r9
 80057d8:	414b      	adcs	r3, r1
 80057da:	677b      	str	r3, [r7, #116]	; 0x74
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80057e8:	4659      	mov	r1, fp
 80057ea:	00cb      	lsls	r3, r1, #3
 80057ec:	4651      	mov	r1, sl
 80057ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f2:	4651      	mov	r1, sl
 80057f4:	00ca      	lsls	r2, r1, #3
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	4642      	mov	r2, r8
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005804:	464b      	mov	r3, r9
 8005806:	460a      	mov	r2, r1
 8005808:	eb42 0303 	adc.w	r3, r2, r3
 800580c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005810:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800581c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005820:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	66bb      	str	r3, [r7, #104]	; 0x68
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005832:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005836:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800583a:	f7fa fccd 	bl	80001d8 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
 8005844:	4b39      	ldr	r3, [pc, #228]	; (800592c <UART_SetConfig+0x528>)
 8005846:	fba3 2301 	umull	r2, r3, r3, r1
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2264      	movs	r2, #100	; 0x64
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800585a:	4b34      	ldr	r3, [pc, #208]	; (800592c <UART_SetConfig+0x528>)
 800585c:	fba3 2302 	umull	r2, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005874:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005878:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	6639      	str	r1, [r7, #96]	; 0x60
 8005884:	415b      	adcs	r3, r3
 8005886:	667b      	str	r3, [r7, #100]	; 0x64
 8005888:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	65b9      	str	r1, [r7, #88]	; 0x58
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80058cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80058d8:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80058dc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	653b      	str	r3, [r7, #80]	; 0x50
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	657b      	str	r3, [r7, #84]	; 0x54
 80058ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80058f6:	f7fa fc6f 	bl	80001d8 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <UART_SetConfig+0x528>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a06      	ldr	r2, [pc, #24]	; (800592c <UART_SetConfig+0x528>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4422      	add	r2, r4
 8005926:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005928:	e232      	b.n	8005d90 <UART_SetConfig+0x98c>
 800592a:	bf00      	nop
 800592c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005930:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b8d      	ldr	r3, [pc, #564]	; (8005b6c <UART_SetConfig+0x768>)
 8005938:	429a      	cmp	r2, r3
 800593a:	d006      	beq.n	800594a <UART_SetConfig+0x546>
 800593c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8b      	ldr	r3, [pc, #556]	; (8005b70 <UART_SetConfig+0x76c>)
 8005944:	429a      	cmp	r2, r3
 8005946:	f040 8117 	bne.w	8005b78 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 800594a:	f7fd fb0d 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 800594e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005952:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800595c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8005960:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005964:	4622      	mov	r2, r4
 8005966:	462b      	mov	r3, r5
 8005968:	1891      	adds	r1, r2, r2
 800596a:	64b9      	str	r1, [r7, #72]	; 0x48
 800596c:	415b      	adcs	r3, r3
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005974:	4621      	mov	r1, r4
 8005976:	eb12 0801 	adds.w	r8, r2, r1
 800597a:	4629      	mov	r1, r5
 800597c:	eb43 0901 	adc.w	r9, r3, r1
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800598c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005994:	4690      	mov	r8, r2
 8005996:	4699      	mov	r9, r3
 8005998:	4623      	mov	r3, r4
 800599a:	eb18 0303 	adds.w	r3, r8, r3
 800599e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80059a2:	462b      	mov	r3, r5
 80059a4:	eb49 0303 	adc.w	r3, r9, r3
 80059a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80059ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80059b8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80059c8:	4629      	mov	r1, r5
 80059ca:	008b      	lsls	r3, r1, #2
 80059cc:	4621      	mov	r1, r4
 80059ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059d2:	4621      	mov	r1, r4
 80059d4:	008a      	lsls	r2, r1, #2
 80059d6:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80059da:	f7fa fbfd 	bl	80001d8 <__aeabi_uldivmod>
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	4b64      	ldr	r3, [pc, #400]	; (8005b74 <UART_SetConfig+0x770>)
 80059e4:	fba3 2302 	umull	r2, r3, r3, r2
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	011c      	lsls	r4, r3, #4
 80059ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80059f6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80059fa:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80059fe:	4642      	mov	r2, r8
 8005a00:	464b      	mov	r3, r9
 8005a02:	1891      	adds	r1, r2, r2
 8005a04:	6439      	str	r1, [r7, #64]	; 0x40
 8005a06:	415b      	adcs	r3, r3
 8005a08:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a0e:	4641      	mov	r1, r8
 8005a10:	1851      	adds	r1, r2, r1
 8005a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a14:	4649      	mov	r1, r9
 8005a16:	414b      	adcs	r3, r1
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a1a:	f04f 0200 	mov.w	r2, #0
 8005a1e:	f04f 0300 	mov.w	r3, #0
 8005a22:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8005a26:	4659      	mov	r1, fp
 8005a28:	00cb      	lsls	r3, r1, #3
 8005a2a:	4651      	mov	r1, sl
 8005a2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a30:	4651      	mov	r1, sl
 8005a32:	00ca      	lsls	r2, r1, #3
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005a42:	464b      	mov	r3, r9
 8005a44:	460a      	mov	r2, r1
 8005a46:	eb42 0303 	adc.w	r3, r2, r3
 8005a4a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005a4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005a5a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	008b      	lsls	r3, r1, #2
 8005a6e:	4641      	mov	r1, r8
 8005a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a74:	4641      	mov	r1, r8
 8005a76:	008a      	lsls	r2, r1, #2
 8005a78:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005a7c:	f7fa fbac 	bl	80001d8 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <UART_SetConfig+0x770>)
 8005a86:	fba3 1302 	umull	r1, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2164      	movs	r1, #100	; 0x64
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	3332      	adds	r3, #50	; 0x32
 8005a98:	4a36      	ldr	r2, [pc, #216]	; (8005b74 <UART_SetConfig+0x770>)
 8005a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa4:	441c      	add	r4, r3
 8005aa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005ab0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005ab4:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	1891      	adds	r1, r2, r2
 8005abe:	6339      	str	r1, [r7, #48]	; 0x30
 8005ac0:	415b      	adcs	r3, r3
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ac8:	4641      	mov	r1, r8
 8005aca:	1851      	adds	r1, r2, r1
 8005acc:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ace:	4649      	mov	r1, r9
 8005ad0:	414b      	adcs	r3, r1
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	00cb      	lsls	r3, r1, #3
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aea:	4651      	mov	r1, sl
 8005aec:	00ca      	lsls	r2, r1, #3
 8005aee:	4610      	mov	r0, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	4642      	mov	r2, r8
 8005af6:	189b      	adds	r3, r3, r2
 8005af8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005afc:	464b      	mov	r3, r9
 8005afe:	460a      	mov	r2, r1
 8005b00:	eb42 0303 	adc.w	r3, r2, r3
 8005b04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005b08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b14:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8005b24:	4649      	mov	r1, r9
 8005b26:	008b      	lsls	r3, r1, #2
 8005b28:	4641      	mov	r1, r8
 8005b2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b2e:	4641      	mov	r1, r8
 8005b30:	008a      	lsls	r2, r1, #2
 8005b32:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005b36:	f7fa fb4f 	bl	80001d8 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <UART_SetConfig+0x770>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <UART_SetConfig+0x770>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4422      	add	r2, r4
 8005b66:	609a      	str	r2, [r3, #8]
 8005b68:	e112      	b.n	8005d90 <UART_SetConfig+0x98c>
 8005b6a:	bf00      	nop
 8005b6c:	40011000 	.word	0x40011000
 8005b70:	40011400 	.word	0x40011400
 8005b74:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b78:	f7fd f9e2 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 8005b7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b8a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005b8e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8005b92:	4642      	mov	r2, r8
 8005b94:	464b      	mov	r3, r9
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	6239      	str	r1, [r7, #32]
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb43 0501 	adc.w	r5, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	00eb      	lsls	r3, r5, #3
 8005bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bba:	00e2      	lsls	r2, r4, #3
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	18e3      	adds	r3, r4, r3
 8005bc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bc8:	464b      	mov	r3, r9
 8005bca:	eb45 0303 	adc.w	r3, r5, r3
 8005bce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bde:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005bee:	4629      	mov	r1, r5
 8005bf0:	008b      	lsls	r3, r1, #2
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	008a      	lsls	r2, r1, #2
 8005bfc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8005c00:	f7fa faea 	bl	80001d8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b64      	ldr	r3, [pc, #400]	; (8005d9c <UART_SetConfig+0x998>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011c      	lsls	r4, r3, #4
 8005c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c1c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005c20:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	61b9      	str	r1, [r7, #24]
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c34:	4641      	mov	r1, r8
 8005c36:	1851      	adds	r1, r2, r1
 8005c38:	6139      	str	r1, [r7, #16]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	00cb      	lsls	r3, r1, #3
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c56:	4651      	mov	r1, sl
 8005c58:	00ca      	lsls	r2, r1, #3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4642      	mov	r2, r8
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c68:	464b      	mov	r3, r9
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c80:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8005c90:	4649      	mov	r1, r9
 8005c92:	008b      	lsls	r3, r1, #2
 8005c94:	4641      	mov	r1, r8
 8005c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	008a      	lsls	r2, r1, #2
 8005c9e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005ca2:	f7fa fa99 	bl	80001d8 <__aeabi_uldivmod>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4b3c      	ldr	r3, [pc, #240]	; (8005d9c <UART_SetConfig+0x998>)
 8005cac:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	2164      	movs	r1, #100	; 0x64
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	3332      	adds	r3, #50	; 0x32
 8005cbe:	4a37      	ldr	r2, [pc, #220]	; (8005d9c <UART_SetConfig+0x998>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cca:	441c      	add	r4, r3
 8005ccc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cda:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005cde:	4642      	mov	r2, r8
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	1891      	adds	r1, r2, r2
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	415b      	adcs	r3, r3
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cee:	4641      	mov	r1, r8
 8005cf0:	1851      	adds	r1, r2, r1
 8005cf2:	6039      	str	r1, [r7, #0]
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	414b      	adcs	r3, r1
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d06:	4659      	mov	r1, fp
 8005d08:	00cb      	lsls	r3, r1, #3
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d10:	4651      	mov	r1, sl
 8005d12:	00ca      	lsls	r2, r1, #3
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	189b      	adds	r3, r3, r2
 8005d1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d22:	464b      	mov	r3, r9
 8005d24:	460a      	mov	r2, r1
 8005d26:	eb42 0303 	adc.w	r3, r2, r3
 8005d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	008b      	lsls	r3, r1, #2
 8005d4e:	4641      	mov	r1, r8
 8005d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d54:	4641      	mov	r1, r8
 8005d56:	008a      	lsls	r2, r1, #2
 8005d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d5c:	f7fa fa3c 	bl	80001d8 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <UART_SetConfig+0x998>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <UART_SetConfig+0x998>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4422      	add	r2, r4
 8005d8c:	609a      	str	r2, [r3, #8]
}
 8005d8e:	e7ff      	b.n	8005d90 <UART_SetConfig+0x98c>
 8005d90:	bf00      	nop
 8005d92:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005d96:	46bd      	mov	sp, r7
 8005d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d9c:	51eb851f 	.word	0x51eb851f

08005da0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005da0:	b084      	sub	sp, #16
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	f107 001c 	add.w	r0, r7, #28
 8005dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005db6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005db8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005dba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005dbe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005dc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005dc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005dca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005dda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	b004      	add	sp, #16
 8005df4:	4770      	bx	lr

08005df6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005e40:	2002      	movs	r0, #2
 8005e42:	f7fb fa9d 	bl	8001380 <HAL_Delay>
  
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0303 	and.w	r3, r3, #3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005e90:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005e96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005ea6:	f023 030f 	bic.w	r3, r3, #15
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	b2db      	uxtb	r3, r3
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	461a      	mov	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
}  
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005f2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005f32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0

}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005f66:	2310      	movs	r3, #16
 8005f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff74 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f88:	2110      	movs	r1, #16
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9b8 	bl	8006300 <SDMMC_GetCmdResp1>
 8005f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f92:	69fb      	ldr	r3, [r7, #28]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fa8:	230c      	movs	r3, #12
 8005faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fba:	f107 0308 	add.w	r3, r7, #8
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ff53 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005fc6:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <SDMMC_CmdStopTransfer+0x40>)
 8005fc8:	210c      	movs	r1, #12
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f998 	bl	8006300 <SDMMC_GetCmdResp1>
 8005fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3720      	adds	r7, #32
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	05f5e100 	.word	0x05f5e100

08005fe0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005ff0:	2307      	movs	r3, #7
 8005ff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ff4:	2340      	movs	r3, #64	; 0x40
 8005ff6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006000:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006002:	f107 0310 	add.w	r3, r7, #16
 8006006:	4619      	mov	r1, r3
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f7ff ff2f 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800600e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006012:	2107      	movs	r1, #7
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f973 	bl	8006300 <SDMMC_GetCmdResp1>
 800601a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b088      	sub	sp, #32
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800603e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006042:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ff0e 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f92d 	bl	80062b0 <SDMMC_GetCmdError>
 8006056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006058:	69fb      	ldr	r3, [r7, #28]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b088      	sub	sp, #32
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800606a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800606e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006070:	2308      	movs	r3, #8
 8006072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006074:	2340      	movs	r3, #64	; 0x40
 8006076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006080:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff feef 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fb16 	bl	80066c0 <SDMMC_GetCmdResp7>
 8006094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006096:	69fb      	ldr	r3, [r7, #28]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3720      	adds	r7, #32
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060ae:	2337      	movs	r3, #55	; 0x37
 80060b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060b2:	2340      	movs	r3, #64	; 0x40
 80060b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fed0 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	2137      	movs	r1, #55	; 0x37
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f914 	bl	8006300 <SDMMC_GetCmdResp1>
 80060d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80060fa:	2329      	movs	r3, #41	; 0x29
 80060fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060fe:	2340      	movs	r3, #64	; 0x40
 8006100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800610c:	f107 0308 	add.w	r3, r7, #8
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff feaa 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fa23 	bl	8006564 <SDMMC_GetCmdResp3>
 800611e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006120:	69fb      	ldr	r3, [r7, #28]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3720      	adds	r7, #32
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b088      	sub	sp, #32
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006138:	2306      	movs	r3, #6
 800613a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800613c:	2340      	movs	r3, #64	; 0x40
 800613e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800614a:	f107 0308 	add.w	r3, r7, #8
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fe8b 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006156:	f241 3288 	movw	r2, #5000	; 0x1388
 800615a:	2106      	movs	r1, #6
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8cf 	bl	8006300 <SDMMC_GetCmdResp1>
 8006162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006164:	69fb      	ldr	r3, [r7, #28]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b088      	sub	sp, #32
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800617a:	2333      	movs	r3, #51	; 0x33
 800617c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006182:	2300      	movs	r3, #0
 8006184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fe6a 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006198:	f241 3288 	movw	r2, #5000	; 0x1388
 800619c:	2133      	movs	r1, #51	; 0x33
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f8ae 	bl	8006300 <SDMMC_GetCmdResp1>
 80061a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061bc:	2302      	movs	r3, #2
 80061be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061c0:	23c0      	movs	r3, #192	; 0xc0
 80061c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fe49 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f97c 	bl	80064d8 <SDMMC_GetCmdResp2>
 80061e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e2:	69fb      	ldr	r3, [r7, #28]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80061fa:	2309      	movs	r3, #9
 80061fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80061fe:	23c0      	movs	r3, #192	; 0xc0
 8006200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800620a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe2a 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f95d 	bl	80064d8 <SDMMC_GetCmdResp2>
 800621e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006220:	69fb      	ldr	r3, [r7, #28]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3720      	adds	r7, #32
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b088      	sub	sp, #32
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006238:	2303      	movs	r3, #3
 800623a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800623c:	2340      	movs	r3, #64	; 0x40
 800623e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006248:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fe0b 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	2103      	movs	r1, #3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f9bc 	bl	80065d8 <SDMMC_GetCmdResp6>
 8006260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800627a:	230d      	movs	r3, #13
 800627c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800627e:	2340      	movs	r3, #64	; 0x40
 8006280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800628a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7ff fdea 	bl	8005e6c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006298:	f241 3288 	movw	r2, #5000	; 0x1388
 800629c:	210d      	movs	r1, #13
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f82e 	bl	8006300 <SDMMC_GetCmdResp1>
 80062a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a6:	69fb      	ldr	r3, [r7, #28]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80062b0:	b490      	push	{r4, r7}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <SDMMC_GetCmdError+0x48>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a0f      	ldr	r2, [pc, #60]	; (80062fc <SDMMC_GetCmdError+0x4c>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	0a5b      	lsrs	r3, r3, #9
 80062c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80062cc:	4623      	mov	r3, r4
 80062ce:	1e5c      	subs	r4, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062d8:	e009      	b.n	80062ee <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f2      	beq.n	80062cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	22c5      	movs	r2, #197	; 0xc5
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc90      	pop	{r4, r7}
 80062f6:	4770      	bx	lr
 80062f8:	20000000 	.word	0x20000000
 80062fc:	10624dd3 	.word	0x10624dd3

08006300 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	460b      	mov	r3, r1
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800630e:	4b6f      	ldr	r3, [pc, #444]	; (80064cc <SDMMC_GetCmdResp1+0x1cc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6f      	ldr	r2, [pc, #444]	; (80064d0 <SDMMC_GetCmdResp1+0x1d0>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	0a5b      	lsrs	r3, r3, #9
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006320:	4623      	mov	r3, r4
 8006322:	1e5c      	subs	r4, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800632c:	e0c9      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0f0      	beq.n	8006320 <SDMMC_GetCmdResp1+0x20>
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1eb      	bne.n	8006320 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2204      	movs	r2, #4
 8006358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800635a:	2304      	movs	r3, #4
 800635c:	e0b1      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006370:	2301      	movs	r3, #1
 8006372:	e0a6      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	22c5      	movs	r2, #197	; 0xc5
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff fda0 	bl	8005ec0 <SDIO_GetCommandResponse>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	4293      	cmp	r3, r2
 8006388:	d001      	beq.n	800638e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800638a:	2301      	movs	r3, #1
 800638c:	e099      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800638e:	2100      	movs	r1, #0
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fda2 	bl	8005eda <SDIO_GetResponse>
 8006396:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4b4e      	ldr	r3, [pc, #312]	; (80064d4 <SDMMC_GetCmdResp1+0x1d4>)
 800639c:	4013      	ands	r3, r2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e08d      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da02      	bge.n	80063b2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b0:	e087      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063bc:	2340      	movs	r3, #64	; 0x40
 80063be:	e080      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	e079      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063dc:	e071      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ec:	e069      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063fc:	e061      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800640c:	e059      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800641c:	e051      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800642c:	e049      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800643c:	e041      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644c:	e039      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800645c:	e031      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800646c:	e029      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006478:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800647c:	e021      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800648c:	e019      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006498:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800649c:	e011      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80064a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064ac:	e009      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064b8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064bc:	e001      	b.n	80064c2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd90      	pop	{r4, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000000 	.word	0x20000000
 80064d0:	10624dd3 	.word	0x10624dd3
 80064d4:	fdffe008 	.word	0xfdffe008

080064d8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80064d8:	b490      	push	{r4, r7}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064e0:	4b1e      	ldr	r3, [pc, #120]	; (800655c <SDMMC_GetCmdResp2+0x84>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1e      	ldr	r2, [pc, #120]	; (8006560 <SDMMC_GetCmdResp2+0x88>)
 80064e6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ea:	0a5b      	lsrs	r3, r3, #9
 80064ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064f4:	4623      	mov	r3, r4
 80064f6:	1e5c      	subs	r4, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006500:	e026      	b.n	8006550 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006506:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <SDMMC_GetCmdResp2+0x1c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1eb      	bne.n	80064f4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2204      	movs	r2, #4
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800652e:	2304      	movs	r3, #4
 8006530:	e00e      	b.n	8006550 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d004      	beq.n	8006548 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006544:	2301      	movs	r3, #1
 8006546:	e003      	b.n	8006550 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	22c5      	movs	r2, #197	; 0xc5
 800654c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bc90      	pop	{r4, r7}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000000 	.word	0x20000000
 8006560:	10624dd3 	.word	0x10624dd3

08006564 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006564:	b490      	push	{r4, r7}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800656c:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <SDMMC_GetCmdResp3+0x6c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a18      	ldr	r2, [pc, #96]	; (80065d4 <SDMMC_GetCmdResp3+0x70>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0a5b      	lsrs	r3, r3, #9
 8006578:	f241 3288 	movw	r2, #5000	; 0x1388
 800657c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006580:	4623      	mov	r3, r4
 8006582:	1e5c      	subs	r4, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800658c:	e01b      	b.n	80065c6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <SDMMC_GetCmdResp3+0x1c>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1eb      	bne.n	8006580 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ba:	2304      	movs	r3, #4
 80065bc:	e003      	b.n	80065c6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	22c5      	movs	r2, #197	; 0xc5
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc90      	pop	{r4, r7}
 80065ce:	4770      	bx	lr
 80065d0:	20000000 	.word	0x20000000
 80065d4:	10624dd3 	.word	0x10624dd3

080065d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	460b      	mov	r3, r1
 80065e2:	607a      	str	r2, [r7, #4]
 80065e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065e6:	4b34      	ldr	r3, [pc, #208]	; (80066b8 <SDMMC_GetCmdResp6+0xe0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a34      	ldr	r2, [pc, #208]	; (80066bc <SDMMC_GetCmdResp6+0xe4>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	0a5b      	lsrs	r3, r3, #9
 80065f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80065fa:	4623      	mov	r3, r4
 80065fc:	1e5c      	subs	r4, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006606:	e052      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0f0      	beq.n	80065fa <SDMMC_GetCmdResp6+0x22>
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1eb      	bne.n	80065fa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2204      	movs	r2, #4
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006634:	2304      	movs	r3, #4
 8006636:	e03a      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800664a:	2301      	movs	r3, #1
 800664c:	e02f      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff fc36 	bl	8005ec0 <SDIO_GetCommandResponse>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	4293      	cmp	r3, r2
 800665c:	d001      	beq.n	8006662 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800665e:	2301      	movs	r3, #1
 8006660:	e025      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22c5      	movs	r2, #197	; 0xc5
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fc35 	bl	8005eda <SDIO_GetResponse>
 8006670:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006686:	2300      	movs	r3, #0
 8006688:	e011      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006698:	e009      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066a8:	e001      	b.n	80066ae <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd90      	pop	{r4, r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000000 	.word	0x20000000
 80066bc:	10624dd3 	.word	0x10624dd3

080066c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80066c0:	b490      	push	{r4, r7}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066c8:	4b21      	ldr	r3, [pc, #132]	; (8006750 <SDMMC_GetCmdResp7+0x90>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a21      	ldr	r2, [pc, #132]	; (8006754 <SDMMC_GetCmdResp7+0x94>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	0a5b      	lsrs	r3, r3, #9
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80066dc:	4623      	mov	r3, r4
 80066de:	1e5c      	subs	r4, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066e8:	e02c      	b.n	8006744 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <SDMMC_GetCmdResp7+0x1c>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1eb      	bne.n	80066dc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2204      	movs	r2, #4
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006716:	2304      	movs	r3, #4
 8006718:	e014      	b.n	8006744 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d004      	beq.n	8006730 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800672c:	2301      	movs	r3, #1
 800672e:	e009      	b.n	8006744 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2240      	movs	r2, #64	; 0x40
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006742:	2300      	movs	r3, #0
  
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bc90      	pop	{r4, r7}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000000 	.word	0x20000000
 8006754:	10624dd3 	.word	0x10624dd3

08006758 <__libc_init_array>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4d0d      	ldr	r5, [pc, #52]	; (8006790 <__libc_init_array+0x38>)
 800675c:	4c0d      	ldr	r4, [pc, #52]	; (8006794 <__libc_init_array+0x3c>)
 800675e:	1b64      	subs	r4, r4, r5
 8006760:	10a4      	asrs	r4, r4, #2
 8006762:	2600      	movs	r6, #0
 8006764:	42a6      	cmp	r6, r4
 8006766:	d109      	bne.n	800677c <__libc_init_array+0x24>
 8006768:	4d0b      	ldr	r5, [pc, #44]	; (8006798 <__libc_init_array+0x40>)
 800676a:	4c0c      	ldr	r4, [pc, #48]	; (800679c <__libc_init_array+0x44>)
 800676c:	f000 f820 	bl	80067b0 <_init>
 8006770:	1b64      	subs	r4, r4, r5
 8006772:	10a4      	asrs	r4, r4, #2
 8006774:	2600      	movs	r6, #0
 8006776:	42a6      	cmp	r6, r4
 8006778:	d105      	bne.n	8006786 <__libc_init_array+0x2e>
 800677a:	bd70      	pop	{r4, r5, r6, pc}
 800677c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006780:	4798      	blx	r3
 8006782:	3601      	adds	r6, #1
 8006784:	e7ee      	b.n	8006764 <__libc_init_array+0xc>
 8006786:	f855 3b04 	ldr.w	r3, [r5], #4
 800678a:	4798      	blx	r3
 800678c:	3601      	adds	r6, #1
 800678e:	e7f2      	b.n	8006776 <__libc_init_array+0x1e>
 8006790:	080067f0 	.word	0x080067f0
 8006794:	080067f0 	.word	0x080067f0
 8006798:	080067f0 	.word	0x080067f0
 800679c:	080067f4 	.word	0x080067f4

080067a0 <memset>:
 80067a0:	4402      	add	r2, r0
 80067a2:	4603      	mov	r3, r0
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d100      	bne.n	80067aa <memset+0xa>
 80067a8:	4770      	bx	lr
 80067aa:	f803 1b01 	strb.w	r1, [r3], #1
 80067ae:	e7f9      	b.n	80067a4 <memset+0x4>

080067b0 <_init>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr

080067bc <_fini>:
 80067bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067be:	bf00      	nop
 80067c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c2:	bc08      	pop	{r3}
 80067c4:	469e      	mov	lr, r3
 80067c6:	4770      	bx	lr

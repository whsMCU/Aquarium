
f411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080064d0  080064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f0  080064f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f8  080064f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000000c  0800650c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  0800650c  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014561  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c16  00000000  00000000  0003459d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  000371b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001168  00000000  00000000  000384a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001845c  00000000  00000000  00039610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc13  00000000  00000000  00051a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094add  00000000  00000000  0006167f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f615c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e6c  00000000  00000000  000f61d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080064b8 	.word	0x080064b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080064b8 	.word	0x080064b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ea:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_ADC1_Init+0x98>)
 80004ec:	4a21      	ldr	r2, [pc, #132]	; (8000574 <MX_ADC1_Init+0x9c>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <MX_ADC1_Init+0x98>)
 80004f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f8:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <MX_ADC1_Init+0x98>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <MX_ADC1_Init+0x98>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_ADC1_Init+0x98>)
 8000506:	2201      	movs	r2, #1
 8000508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050a:	4b19      	ldr	r3, [pc, #100]	; (8000570 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_ADC1_Init+0x98>)
 800051a:	4a17      	ldr	r2, [pc, #92]	; (8000578 <MX_ADC1_Init+0xa0>)
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_ADC1_Init+0x98>)
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_ADC1_Init+0x98>)
 8000526:	2201      	movs	r2, #1
 8000528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_ADC1_Init+0x98>)
 800052c:	2201      	movs	r2, #1
 800052e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_ADC1_Init+0x98>)
 8000534:	2201      	movs	r2, #1
 8000536:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <MX_ADC1_Init+0x98>)
 800053a:	f000 ff3d 	bl	80013b8 <HAL_ADC_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000544:	f000 fa06 	bl	8000954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000548:	2301      	movs	r3, #1
 800054a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800054c:	2301      	movs	r3, #1
 800054e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000550:	2307      	movs	r3, #7
 8000552:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000554:	463b      	mov	r3, r7
 8000556:	4619      	mov	r1, r3
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <MX_ADC1_Init+0x98>)
 800055a:	f001 f8cf 	bl	80016fc <HAL_ADC_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000564:	f000 f9f6 	bl	8000954 <Error_Handler>
  }

}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40012000 	.word	0x40012000
 8000578:	0f000001 	.word	0x0f000001

0800057c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a33      	ldr	r2, [pc, #204]	; (8000668 <HAL_ADC_MspInit+0xec>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d15f      	bne.n	800065e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	4b32      	ldr	r3, [pc, #200]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a6:	4a31      	ldr	r2, [pc, #196]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ac:	6453      	str	r3, [r2, #68]	; 0x44
 80005ae:	4b2f      	ldr	r3, [pc, #188]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a2a      	ldr	r2, [pc, #168]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <HAL_ADC_MspInit+0xf0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005d6:	2302      	movs	r3, #2
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	4821      	ldr	r0, [pc, #132]	; (8000670 <HAL_ADC_MspInit+0xf4>)
 80005ea:	f001 fedb 	bl	80023a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <HAL_ADC_MspInit+0xfc>)
 80005f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000614:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000618:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000624:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000632:	4810      	ldr	r0, [pc, #64]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000634:	f001 fbac 	bl	8001d90 <HAL_DMA_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800063e:	f000 f989 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 8000646:	639a      	str	r2, [r3, #56]	; 0x38
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <HAL_ADC_MspInit+0xf8>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2012      	movs	r0, #18
 8000654:	f001 fb65 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000658:	2012      	movs	r0, #18
 800065a:	f001 fb7e 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	; 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40012000 	.word	0x40012000
 800066c:	40023800 	.word	0x40023800
 8000670:	40020000 	.word	0x40020000
 8000674:	20000070 	.word	0x20000070
 8000678:	40026410 	.word	0x40026410

0800067c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_DMA_Init+0x8c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_DMA_Init+0x8c>)
 800068c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_DMA_Init+0x8c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2038      	movs	r0, #56	; 0x38
 80006a4:	f001 fb3d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80006a8:	2038      	movs	r0, #56	; 0x38
 80006aa:	f001 fb56 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	203a      	movs	r0, #58	; 0x3a
 80006b4:	f001 fb35 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b8:	203a      	movs	r0, #58	; 0x3a
 80006ba:	f001 fb4e 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	203b      	movs	r0, #59	; 0x3b
 80006c4:	f001 fb2d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c8:	203b      	movs	r0, #59	; 0x3b
 80006ca:	f001 fb46 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2044      	movs	r0, #68	; 0x44
 80006d4:	f001 fb25 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006d8:	2044      	movs	r0, #68	; 0x44
 80006da:	f001 fb3e 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2045      	movs	r0, #69	; 0x45
 80006e4:	f001 fb1d 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006e8:	2045      	movs	r0, #69	; 0x45
 80006ea:	f001 fb36 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2046      	movs	r0, #70	; 0x46
 80006f4:	f001 fb15 	bl	8001d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006f8:	2046      	movs	r0, #70	; 0x46
 80006fa:	f001 fb2e 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b48      	ldr	r3, [pc, #288]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a47      	ldr	r2, [pc, #284]	; (8000848 <MX_GPIO_Init+0x13c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b41      	ldr	r3, [pc, #260]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a40      	ldr	r2, [pc, #256]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a39      	ldr	r2, [pc, #228]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b37      	ldr	r3, [pc, #220]	; (8000848 <MX_GPIO_Init+0x13c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_GPIO_Init+0x13c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a32      	ldr	r2, [pc, #200]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_GPIO_Init+0x13c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	482c      	ldr	r0, [pc, #176]	; (800084c <MX_GPIO_Init+0x140>)
 800079a:	f001 ff85 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	211c      	movs	r1, #28
 80007a2:	482b      	ldr	r0, [pc, #172]	; (8000850 <MX_GPIO_Init+0x144>)
 80007a4:	f001 ff80 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f244 0101 	movw	r1, #16385	; 0x4001
 80007ae:	4829      	ldr	r0, [pc, #164]	; (8000854 <MX_GPIO_Init+0x148>)
 80007b0:	f001 ff7a 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	481f      	ldr	r0, [pc, #124]	; (800084c <MX_GPIO_Init+0x140>)
 80007ce:	f001 fde9 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <MX_GPIO_Init+0x144>)
 80007e6:	f001 fddd 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80007ea:	231c      	movs	r3, #28
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4813      	ldr	r0, [pc, #76]	; (8000850 <MX_GPIO_Init+0x144>)
 8000802:	f001 fdcf 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000806:	f244 0301 	movw	r3, #16385	; 0x4001
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_GPIO_Init+0x148>)
 8000820:	f001 fdc0 	bl	80023a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 8000824:	f243 4304 	movw	r3, #13316	; 0x3404
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_GPIO_Init+0x148>)
 800083a:	f001 fdb3 	bl	80023a4 <HAL_GPIO_Init>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fd18 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f810 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff ff52 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000868:	f7ff ff08 	bl	800067c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800086c:	f000 fbe6 	bl	800103c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000870:	f000 f994 	bl	8000b9c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000874:	f000 fb22 	bl	8000ebc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000878:	f7ff fe2e 	bl	80004d8 <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 800087c:	f000 f86e 	bl	800095c <MX_SDIO_SD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x28>
	...

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 fe08 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <SystemClock_Config+0xc8>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a26      	ldr	r2, [pc, #152]	; (800094c <SystemClock_Config+0xc8>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b24      	ldr	r3, [pc, #144]	; (800094c <SystemClock_Config+0xc8>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <SystemClock_Config+0xcc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a20      	ldr	r2, [pc, #128]	; (8000950 <SystemClock_Config+0xcc>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <SystemClock_Config+0xcc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008f4:	2319      	movs	r3, #25
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008f8:	23c0      	movs	r3, #192	; 0xc0
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000900:	2304      	movs	r3, #4
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fee7 	bl	80026dc <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000914:	f000 f81e 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2302      	movs	r3, #2
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2103      	movs	r1, #3
 8000934:	4618      	mov	r0, r3
 8000936:	f002 f941 	bl	8002bbc <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000940:	f000 f808 	bl	8000954 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095a:	e7fe      	b.n	800095a <Error_Handler+0x6>

0800095c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_SDIO_SD_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 800098c:	f002 fae2 	bl	8002f54 <HAL_SD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000996:	f7ff ffdd 	bl	8000954 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800099a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_SDIO_SD_Init+0x58>)
 80009a0:	f002 feba 	bl	8003718 <HAL_SD_ConfigWideBusOperation>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80009aa:	f7ff ffd3 	bl	8000954 <Error_Handler>
  }

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000190 	.word	0x20000190
 80009b8:	40012c00 	.word	0x40012c00

080009bc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a68      	ldr	r2, [pc, #416]	; (8000b7c <HAL_SD_MspInit+0x1c0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	f040 80ca 	bne.w	8000b74 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	4b66      	ldr	r3, [pc, #408]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	4a65      	ldr	r2, [pc, #404]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 80009ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ee:	6453      	str	r3, [r2, #68]	; 0x44
 80009f0:	4b63      	ldr	r3, [pc, #396]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a5e      	ldr	r2, [pc, #376]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b58      	ldr	r3, [pc, #352]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a57      	ldr	r2, [pc, #348]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a22:	f043 0302 	orr.w	r3, r3, #2
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b55      	ldr	r3, [pc, #340]	; (8000b80 <HAL_SD_MspInit+0x1c4>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000a34:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a46:	230c      	movs	r3, #12
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	484c      	ldr	r0, [pc, #304]	; (8000b84 <HAL_SD_MspInit+0x1c8>)
 8000a52:	f001 fca7 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8000a56:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a68:	230c      	movs	r3, #12
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4845      	ldr	r0, [pc, #276]	; (8000b88 <HAL_SD_MspInit+0x1cc>)
 8000a74:	f001 fc96 	bl	80023a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000a78:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a7a:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <HAL_SD_MspInit+0x1d4>)
 8000a7c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000a7e:	4b43      	ldr	r3, [pc, #268]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b3f      	ldr	r3, [pc, #252]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9a:	4b3c      	ldr	r3, [pc, #240]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000aac:	2220      	movs	r2, #32
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000ab8:	2204      	movs	r2, #4
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000abc:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000abe:	2203      	movs	r2, #3
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000ac4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000acc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ad2:	482e      	ldr	r0, [pc, #184]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000ad4:	f001 f95c 	bl	8001d90 <HAL_DMA_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8000ade:	f7ff ff39 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000ae6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ae8:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_SD_MspInit+0x1d0>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000af0:	4a29      	ldr	r2, [pc, #164]	; (8000b98 <HAL_SD_MspInit+0x1dc>)
 8000af2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000afe:	2240      	movs	r2, #64	; 0x40
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b34:	2203      	movs	r2, #3
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b3a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b46:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000b48:	4812      	ldr	r0, [pc, #72]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b4a:	f001 f921 	bl	8001d90 <HAL_DMA_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8000b54:	f7ff fefe 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_SD_MspInit+0x1d8>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2031      	movs	r0, #49	; 0x31
 8000b6a:	f001 f8da 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f001 f8f3 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	200000d0 	.word	0x200000d0
 8000b90:	400264a0 	.word	0x400264a0
 8000b94:	20000130 	.word	0x20000130
 8000b98:	40026458 	.word	0x40026458

08000b9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_SPI1_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_SPI1_Init+0x64>)
 8000bee:	f003 fa27 	bl	8004040 <HAL_SPI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f7ff feac 	bl	8000954 <Error_Handler>
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000214 	.word	0x20000214
 8000c04:	40013000 	.word	0x40013000

08000c08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <HAL_SPI_MspInit+0xf4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d163      	bne.n	8000cf2 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a33      	ldr	r2, [pc, #204]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a2c      	ldr	r2, [pc, #176]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <HAL_SPI_MspInit+0xf8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c72:	2305      	movs	r3, #5
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <HAL_SPI_MspInit+0xfc>)
 8000c7e:	f001 fb91 	bl	80023a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <HAL_SPI_MspInit+0x104>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000c8a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000c92:	2240      	movs	r2, #64	; 0x40
 8000c94:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000caa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cb2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cc6:	4810      	ldr	r0, [pc, #64]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cc8:	f001 f862 	bl	8001d90 <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000cd2:	f7ff fe3f 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cda:	649a      	str	r2, [r3, #72]	; 0x48
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_SPI_MspInit+0x100>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2023      	movs	r0, #35	; 0x23
 8000ce8:	f001 f81b 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000cec:	2023      	movs	r0, #35	; 0x23
 8000cee:	f001 f834 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	2000026c 	.word	0x2000026c
 8000d0c:	40026488 	.word	0x40026488

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 fac2 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <ADC_IRQHandler+0x10>)
 8000dba:	f000 fb40 	bl	800143e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000028 	.word	0x20000028

08000dc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <TIM3_IRQHandler+0x10>)
 8000dce:	f003 fb19 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200002cc 	.word	0x200002cc

08000ddc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <SPI1_IRQHandler+0x10>)
 8000de2:	f003 f991 	bl	8004108 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000214 	.word	0x20000214

08000df0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USART1_IRQHandler+0x10>)
 8000df6:	f004 f89b 	bl	8004f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200003cc 	.word	0x200003cc

08000e04 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <SDIO_IRQHandler+0x10>)
 8000e0a:	f002 f933 	bl	8003074 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000190 	.word	0x20000190

08000e18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA2_Stream0_IRQHandler+0x10>)
 8000e1e:	f001 f887 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000070 	.word	0x20000070

08000e2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DMA2_Stream2_IRQHandler+0x10>)
 8000e32:	f001 f87d 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000036c 	.word	0x2000036c

08000e40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA2_Stream3_IRQHandler+0x10>)
 8000e46:	f001 f873 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000130 	.word	0x20000130

08000e54 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <DMA2_Stream5_IRQHandler+0x10>)
 8000e5a:	f001 f869 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000026c 	.word	0x2000026c

08000e68 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA2_Stream6_IRQHandler+0x10>)
 8000e6e:	f001 f85f 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000d0 	.word	0x200000d0

08000e7c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Stream7_IRQHandler+0x10>)
 8000e82:	f001 f855 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000030c 	.word	0x2000030c

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <SystemInit+0x28>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <SystemInit+0x28>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SystemInit+0x28>)
 8000ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000ee8:	4a2b      	ldr	r2, [pc, #172]	; (8000f98 <MX_TIM3_Init+0xdc>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000eee:	2263      	movs	r2, #99	; 0x63
 8000ef0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f0c:	4821      	ldr	r0, [pc, #132]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f0e:	f003 fa19 	bl	8004344 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000f18:	f7ff fd1c 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f20:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f22:	f107 0318 	add.w	r3, r7, #24
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f2a:	f003 fc0f 	bl	800474c <HAL_TIM_ConfigClockSource>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f34:	f7ff fd0e 	bl	8000954 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f38:	4816      	ldr	r0, [pc, #88]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f3a:	f003 fa2e 	bl	800439a <HAL_TIM_IC_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f7ff fd06 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f58:	f003 ff1a 	bl	8004d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000f62:	f7ff fcf7 	bl	8000954 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	220c      	movs	r2, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM3_Init+0xd8>)
 8000f7e:	f003 fb49 	bl	8004614 <HAL_TIM_IC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000f88:	f7ff fce4 	bl	8000954 <Error_Handler>
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200002cc 	.word	0x200002cc
 8000f98:	40000400 	.word	0x40000400

08000f9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_TIM_Base_MspInit+0x94>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d133      	bne.n	8001026 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_TIM_Base_MspInit+0x98>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001006:	2302      	movs	r3, #2
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <HAL_TIM_Base_MspInit+0x9c>)
 8001012:	f001 f9c7 	bl	80023a4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	201d      	movs	r0, #29
 800101c:	f000 fe81 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001020:	201d      	movs	r0, #29
 8001022:	f000 fe9a 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40000400 	.word	0x40000400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020400 	.word	0x40020400

0800103c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART1_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART1_UART_Init+0x4c>)
 8001074:	f003 ff0e 	bl	8004e94 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f7ff fc69 	bl	8000954 <Error_Handler>
  }

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200003cc 	.word	0x200003cc
 800108c:	40011000 	.word	0x40011000

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a5b      	ldr	r2, [pc, #364]	; (800121c <HAL_UART_MspInit+0x18c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	f040 80b0 	bne.w	8001214 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b52      	ldr	r3, [pc, #328]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a51      	ldr	r2, [pc, #324]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b48      	ldr	r3, [pc, #288]	; (8001220 <HAL_UART_MspInit+0x190>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111a:	2307      	movs	r3, #7
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	483f      	ldr	r0, [pc, #252]	; (8001224 <HAL_UART_MspInit+0x194>)
 8001126:	f001 f93d 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800113a:	2307      	movs	r3, #7
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4838      	ldr	r0, [pc, #224]	; (8001228 <HAL_UART_MspInit+0x198>)
 8001146:	f001 f92d 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800114a:	4b38      	ldr	r3, [pc, #224]	; (800122c <HAL_UART_MspInit+0x19c>)
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <HAL_UART_MspInit+0x1a0>)
 800114e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001152:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001156:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001158:	4b34      	ldr	r3, [pc, #208]	; (800122c <HAL_UART_MspInit+0x19c>)
 800115a:	2240      	movs	r2, #64	; 0x40
 800115c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116c:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_UART_MspInit+0x19c>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001178:	4b2c      	ldr	r3, [pc, #176]	; (800122c <HAL_UART_MspInit+0x19c>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <HAL_UART_MspInit+0x19c>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <HAL_UART_MspInit+0x19c>)
 800118c:	f000 fe00 	bl	8001d90 <HAL_DMA_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001196:	f7ff fbdd 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_UART_MspInit+0x19c>)
 800119e:	631a      	str	r2, [r3, #48]	; 0x30
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_UART_MspInit+0x19c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011a8:	4a23      	ldr	r2, [pc, #140]	; (8001238 <HAL_UART_MspInit+0x1a8>)
 80011aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011e8:	4812      	ldr	r0, [pc, #72]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011ea:	f000 fdd1 	bl	8001d90 <HAL_DMA_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80011f4:	f7ff fbae 	bl	8000954 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_UART_MspInit+0x1a4>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	2025      	movs	r0, #37	; 0x25
 800120a:	f000 fd8a 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800120e:	2025      	movs	r0, #37	; 0x25
 8001210:	f000 fda3 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	; 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40011000 	.word	0x40011000
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	2000030c 	.word	0x2000030c
 8001230:	400264b8 	.word	0x400264b8
 8001234:	2000036c 	.word	0x2000036c
 8001238:	40026440 	.word	0x40026440

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
  ldr  r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800125a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001266:	f7ff fe13 	bl	8000e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f005 f8f9 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff faf3 	bl	8000858 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001278:	08006500 	.word	0x08006500
  ldr  r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001280:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001284:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001288:	20000410 	.word	0x20000410

0800128c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <DMA1_Stream0_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 fd27 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fd24 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd3f 	bl	8001d76 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 fd07 	bl	8001d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	2000040c 	.word	0x2000040c

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	2000040c 	.word	0x2000040c

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_Delay+0x40>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e033      	b.n	8001436 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f8d0 	bl	800057c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 faa8 	bl	8001960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
 8001426:	e001      	b.n	800142c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b084      	sub	sp, #16
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b02      	cmp	r3, #2
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	2b20      	cmp	r3, #32
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d049      	beq.n	8001514 <HAL_ADC_IRQHandler+0xd6>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d046      	beq.n	8001514 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12b      	bne.n	8001504 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d127      	bne.n	8001504 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d119      	bne.n	8001504 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0220 	bic.w	r2, r2, #32
 80014de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f8db 	bl	80016c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f06f 0212 	mvn.w	r2, #18
 8001512:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b04      	cmp	r3, #4
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001534:	2b80      	cmp	r3, #128	; 0x80
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d057      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x1b8>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d054      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d139      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001578:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800158a:	2b00      	cmp	r3, #0
 800158c:	d12b      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001598:	2b00      	cmp	r3, #0
 800159a:	d124      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d11d      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d119      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fab6 	bl	8001b58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f06f 020c 	mvn.w	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001616:	2b40      	cmp	r3, #64	; 0x40
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d017      	beq.n	8001658 <HAL_ADC_IRQHandler+0x21a>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d014      	beq.n	8001658 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10d      	bne.n	8001658 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f843 	bl	80016d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f06f 0201 	mvn.w	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0320 	and.w	r3, r3, #32
 8001662:	2b20      	cmp	r3, #32
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x27a>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f043 0202 	orr.w	r2, r3, #2
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f06f 0220 	mvn.w	r2, #32
 80016a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f81d 	bl	80016e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f06f 0220 	mvn.w	r2, #32
 80016b6:	601a      	str	r2, [r3, #0]
  }
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1c>
 8001714:	2302      	movs	r3, #2
 8001716:	e113      	b.n	8001940 <HAL_ADC_ConfigChannel+0x244>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d925      	bls.n	8001774 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68d9      	ldr	r1, [r3, #12]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68d9      	ldr	r1, [r3, #12]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	4603      	mov	r3, r0
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4403      	add	r3, r0
 8001766:	3b1e      	subs	r3, #30
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	e022      	b.n	80017ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6919      	ldr	r1, [r3, #16]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	2207      	movs	r2, #7
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6919      	ldr	r1, [r3, #16]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4403      	add	r3, r0
 80017b0:	409a      	lsls	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d824      	bhi.n	800180c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b05      	subs	r3, #5
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e04c      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d824      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b23      	subs	r3, #35	; 0x23
 8001826:	221f      	movs	r2, #31
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43da      	mvns	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	400a      	ands	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b23      	subs	r3, #35	; 0x23
 8001850:	fa00 f203 	lsl.w	r2, r0, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
 800185c:	e023      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b41      	subs	r3, #65	; 0x41
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b41      	subs	r3, #65	; 0x41
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_ADC_ConfigChannel+0x250>)
 80018a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a28      	ldr	r2, [pc, #160]	; (8001950 <HAL_ADC_ConfigChannel+0x254>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10f      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d8>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b12      	cmp	r3, #18
 80018ba:	d10b      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_ADC_ConfigChannel+0x254>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12b      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_ADC_ConfigChannel+0x258>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x1f4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d122      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_ADC_ConfigChannel+0x258>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d111      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_ADC_ConfigChannel+0x25c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_ADC_ConfigChannel+0x260>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9a      	lsrs	r2, r3, #18
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001928:	e002      	b.n	8001930 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40012300 	.word	0x40012300
 8001950:	40012000 	.word	0x40012000
 8001954:	10000012 	.word	0x10000012
 8001958:	20000000 	.word	0x20000000
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <ADC_Init+0x1f0>)
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	021a      	lsls	r2, r3, #8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <ADC_Init+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e00f      	b.n	8001a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0202 	bic.w	r2, r2, #2
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
 8001a78:	005a      	lsls	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	035a      	lsls	r2, r3, #13
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	e007      	b.n	8001ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	051a      	lsls	r2, r3, #20
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b16:	025a      	lsls	r2, r3, #9
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	029a      	lsls	r2, r3, #10
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40012300 	.word	0x40012300
 8001b54:	0f000001 	.word	0x0f000001

08001b58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff fade 	bl	800135c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e099      	b.n	8001ee0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dcc:	e00f      	b.n	8001dee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dce:	f7ff fac5 	bl	800135c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d908      	bls.n	8001dee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2220      	movs	r2, #32
 8001de0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2203      	movs	r2, #3
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e078      	b.n	8001ee0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e8      	bne.n	8001dce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <HAL_DMA_Init+0x158>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d107      	bne.n	8001e58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4313      	orrs	r3, r2
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d117      	bne.n	8001eb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00e      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 fa0b 	bl	80022b0 <DMA_CheckFifoParam>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e016      	b.n	8001ee0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f9c2 	bl	8002244 <DMA_CalcBaseAndBitshift>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	223f      	movs	r2, #63	; 0x3f
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	f010803f 	.word	0xf010803f

08001eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d004      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00c      	b.n	8001f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f3c:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_DMA_IRQHandler+0x258>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a92      	ldr	r2, [pc, #584]	; (800218c <HAL_DMA_IRQHandler+0x25c>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a9b      	lsrs	r3, r3, #10
 8001f48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d01a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f88:	2208      	movs	r2, #8
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d012      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fca:	f043 0202 	orr.w	r2, r3, #2
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2210      	movs	r2, #16
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d043      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d03c      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2210      	movs	r2, #16
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d018      	beq.n	8002072 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d024      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
 800205e:	e01f      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01b      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e016      	b.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0208 	bic.w	r2, r2, #8
 800208e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2220      	movs	r2, #32
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 808e 	beq.w	80021ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8086 	beq.w	80021ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	2220      	movs	r2, #32
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d136      	bne.n	8002148 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0216 	bic.w	r2, r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <HAL_DMA_IRQHandler+0x1da>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0208 	bic.w	r2, r2, #8
 8002118:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	223f      	movs	r2, #63	; 0x3f
 8002120:	409a      	lsls	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213a:	2b00      	cmp	r3, #0
 800213c:	d07d      	beq.n	800223a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
        }
        return;
 8002146:	e078      	b.n	800223a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d01c      	beq.n	8002190 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d108      	bne.n	8002176 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	2b00      	cmp	r3, #0
 800216a:	d030      	beq.n	80021ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e02b      	b.n	80021ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d027      	beq.n	80021ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
 8002186:	e022      	b.n	80021ce <HAL_DMA_IRQHandler+0x29e>
 8002188:	20000000 	.word	0x20000000
 800218c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10f      	bne.n	80021be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0210 	bic.w	r2, r2, #16
 80021ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d032      	beq.n	800223c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d022      	beq.n	8002228 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2205      	movs	r2, #5
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	429a      	cmp	r2, r3
 8002204:	d307      	bcc.n	8002216 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f2      	bne.n	80021fa <HAL_DMA_IRQHandler+0x2ca>
 8002214:	e000      	b.n	8002218 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002216:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	4798      	blx	r3
 8002238:	e000      	b.n	800223c <HAL_DMA_IRQHandler+0x30c>
        return;
 800223a:	bf00      	nop
    }
  }
}
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop

08002244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3b10      	subs	r3, #16
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <DMA_CalcBaseAndBitshift+0x68>)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d909      	bls.n	8002286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	1d1a      	adds	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	659a      	str	r2, [r3, #88]	; 0x58
 8002284:	e007      	b.n	8002296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800229a:	4618      	mov	r0, r3
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	aaaaaaab 	.word	0xaaaaaaab
 80022ac:	080064e8 	.word	0x080064e8

080022b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11f      	bne.n	800230a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d855      	bhi.n	800237c <DMA_CheckFifoParam+0xcc>
 80022d0:	a201      	add	r2, pc, #4	; (adr r2, 80022d8 <DMA_CheckFifoParam+0x28>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022e9 	.word	0x080022e9
 80022dc:	080022fb 	.word	0x080022fb
 80022e0:	080022e9 	.word	0x080022e9
 80022e4:	0800237d 	.word	0x0800237d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d045      	beq.n	8002380 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e042      	b.n	8002380 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002302:	d13f      	bne.n	8002384 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e03c      	b.n	8002384 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002312:	d121      	bne.n	8002358 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d836      	bhi.n	8002388 <DMA_CheckFifoParam+0xd8>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <DMA_CheckFifoParam+0x70>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002331 	.word	0x08002331
 8002324:	08002337 	.word	0x08002337
 8002328:	08002331 	.word	0x08002331
 800232c:	08002349 	.word	0x08002349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	73fb      	strb	r3, [r7, #15]
      break;
 8002334:	e02f      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d024      	beq.n	800238c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002346:	e021      	b.n	800238c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002350:	d11e      	bne.n	8002390 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002356:	e01b      	b.n	8002390 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d902      	bls.n	8002364 <DMA_CheckFifoParam+0xb4>
 800235e:	2b03      	cmp	r3, #3
 8002360:	d003      	beq.n	800236a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002362:	e018      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e015      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e00b      	b.n	8002394 <DMA_CheckFifoParam+0xe4>
      break;
 800237c:	bf00      	nop
 800237e:	e00a      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002380:	bf00      	nop
 8002382:	e008      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002384:	bf00      	nop
 8002386:	e006      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002388:	bf00      	nop
 800238a:	e004      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 800238c:	bf00      	nop
 800238e:	e002      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;   
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <DMA_CheckFifoParam+0xe6>
      break;
 8002394:	bf00      	nop
    }
  } 
  
  return status; 
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	e159      	b.n	8002674 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	f040 8148 	bne.w	800266e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d00b      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f2:	2b11      	cmp	r3, #17
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0xfc>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0203 	and.w	r2, r3, #3
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a2 	beq.w	800266e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002532:	4a55      	ldr	r2, [pc, #340]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 8002534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002538:	6453      	str	r3, [r2, #68]	; 0x44
 800253a:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_GPIO_Init+0x2e4>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002546:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_GPIO_Init+0x2e8>)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	089b      	lsrs	r3, r3, #2
 800254c:	3302      	adds	r3, #2
 800254e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	220f      	movs	r2, #15
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <HAL_GPIO_Init+0x2ec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d019      	beq.n	80025a6 <HAL_GPIO_Init+0x202>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a47      	ldr	r2, [pc, #284]	; (8002694 <HAL_GPIO_Init+0x2f0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_GPIO_Init+0x1fe>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a46      	ldr	r2, [pc, #280]	; (8002698 <HAL_GPIO_Init+0x2f4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00d      	beq.n	800259e <HAL_GPIO_Init+0x1fa>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a45      	ldr	r2, [pc, #276]	; (800269c <HAL_GPIO_Init+0x2f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d007      	beq.n	800259a <HAL_GPIO_Init+0x1f6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <HAL_GPIO_Init+0x2fc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d101      	bne.n	8002596 <HAL_GPIO_Init+0x1f2>
 8002592:	2304      	movs	r3, #4
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 8002596:	2307      	movs	r3, #7
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x204>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b8:	4934      	ldr	r1, [pc, #208]	; (800268c <HAL_GPIO_Init+0x2e8>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f0:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_GPIO_Init+0x300>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002644:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <HAL_GPIO_Init+0x300>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002668:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <HAL_GPIO_Init+0x300>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f aea2 	bls.w	80023c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	3724      	adds	r7, #36	; 0x24
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40023800 	.word	0x40023800
 800268c:	40013800 	.word	0x40013800
 8002690:	40020000 	.word	0x40020000
 8002694:	40020400 	.word	0x40020400
 8002698:	40020800 	.word	0x40020800
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e25b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fa:	4ba3      	ldr	r3, [pc, #652]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d00c      	beq.n	8002720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002706:	4ba0      	ldr	r3, [pc, #640]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270e:	2b08      	cmp	r3, #8
 8002710:	d112      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b9d      	ldr	r3, [pc, #628]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800271e:	d10b      	bne.n	8002738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	4b99      	ldr	r3, [pc, #612]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05b      	beq.n	80027e4 <HAL_RCC_OscConfig+0x108>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d157      	bne.n	80027e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e236      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d106      	bne.n	8002750 <HAL_RCC_OscConfig+0x74>
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a90      	ldr	r2, [pc, #576]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x98>
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a8a      	ldr	r2, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a87      	ldr	r2, [pc, #540]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0xb0>
 8002774:	4b84      	ldr	r3, [pc, #528]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a83      	ldr	r2, [pc, #524]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a80      	ldr	r2, [pc, #512]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe fde2 	bl	800135c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fdde 	bl	800135c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1fb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b76      	ldr	r3, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0xc0>
 80027ba:	e014      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fdce 	bl	800135c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe fdca 	bl	800135c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1e7      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0xe8>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d063      	beq.n	80028ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f2:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fe:	4b62      	ldr	r3, [pc, #392]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d11c      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d116      	bne.n	8002844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1bb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4952      	ldr	r1, [pc, #328]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	e03a      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800284c:	4b4f      	ldr	r3, [pc, #316]	; (800298c <HAL_RCC_OscConfig+0x2b0>)
 800284e:	2201      	movs	r2, #1
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002852:	f7fe fd83 	bl	800135c <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285a:	f7fe fd7f 	bl	800135c <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e19c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002878:	4b43      	ldr	r3, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4940      	ldr	r1, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	4313      	orrs	r3, r2
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	e015      	b.n	80028ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288e:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x2b0>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fd62 	bl	800135c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7fe fd5e 	bl	800135c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e17b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_RCC_OscConfig+0x2b4>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d4:	f7fe fd42 	bl	800135c <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028dc:	f7fe fd3e 	bl	800135c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e15b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	4b26      	ldr	r3, [pc, #152]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x200>
 80028fa:	e015      	b.n	8002928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x2b4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002902:	f7fe fd2b 	bl	800135c <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe fd27 	bl	800135c <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e144      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a0 	beq.w	8002a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d121      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_RCC_OscConfig+0x2b8>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7fe fced 	bl	800135c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e011      	b.n	80029aa <HAL_RCC_OscConfig+0x2ce>
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	42470000 	.word	0x42470000
 8002990:	42470e80 	.word	0x42470e80
 8002994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002998:	f7fe fce0 	bl	800135c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0fd      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b81      	ldr	r3, [pc, #516]	; (8002bb0 <HAL_RCC_OscConfig+0x4d4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x2f0>
 80029be:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a7c      	ldr	r2, [pc, #496]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	e01c      	b.n	8002a06 <HAL_RCC_OscConfig+0x32a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	2b05      	cmp	r3, #5
 80029d2:	d10c      	bne.n	80029ee <HAL_RCC_OscConfig+0x312>
 80029d4:	4b77      	ldr	r3, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d8:	4a76      	ldr	r2, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6713      	str	r3, [r2, #112]	; 0x70
 80029e0:	4b74      	ldr	r3, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a73      	ldr	r2, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e00b      	b.n	8002a06 <HAL_RCC_OscConfig+0x32a>
 80029ee:	4b71      	ldr	r3, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	4a70      	ldr	r2, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	; 0x70
 80029fa:	4b6e      	ldr	r3, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a6d      	ldr	r2, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d015      	beq.n	8002a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fca5 	bl	800135c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fca1 	bl	800135c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e0bc      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ee      	beq.n	8002a16 <HAL_RCC_OscConfig+0x33a>
 8002a38:	e014      	b.n	8002a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3a:	f7fe fc8f 	bl	800135c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a40:	e00a      	b.n	8002a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a42:	f7fe fc8b 	bl	800135c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e0a6      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1ee      	bne.n	8002a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b52      	ldr	r3, [pc, #328]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a51      	ldr	r2, [pc, #324]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8092 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 030c 	and.w	r3, r3, #12
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d05c      	beq.n	8002b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d141      	bne.n	8002b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a94:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fc5f 	bl	800135c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fc5b 	bl	800135c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e078      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f0      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	019b      	lsls	r3, r3, #6
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	4933      	ldr	r1, [pc, #204]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fc34 	bl	800135c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fc30 	bl	800135c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e04d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x41c>
 8002b16:	e045      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b18:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <HAL_RCC_OscConfig+0x4dc>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1e:	f7fe fc1d 	bl	800135c <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b26:	f7fe fc19 	bl	800135c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e036      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x44a>
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e029      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d115      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10d      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470060 	.word	0x42470060

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fb56 	bl	800135c <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fb52 	bl	800135c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5cd3      	ldrb	r3, [r2, r3]
 8002d56:	fa21 f303 	lsr.w	r3, r1, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fab6 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	080064d0 	.word	0x080064d0
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d007      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x32>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 808d 	bne.w	8002ece <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002db6:	60bb      	str	r3, [r7, #8]
       break;
 8002db8:	e08c      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dbc:	60bb      	str	r3, [r7, #8]
      break;
 8002dbe:	e089      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dca:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d023      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	f04f 0400 	mov.w	r4, #0
 8002de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	ea03 0501 	and.w	r5, r3, r1
 8002dec:	ea04 0602 	and.w	r6, r4, r2
 8002df0:	4a3d      	ldr	r2, [pc, #244]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002df2:	fb02 f106 	mul.w	r1, r2, r6
 8002df6:	2200      	movs	r2, #0
 8002df8:	fb02 f205 	mul.w	r2, r2, r5
 8002dfc:	440a      	add	r2, r1
 8002dfe:	493a      	ldr	r1, [pc, #232]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e00:	fba5 0101 	umull	r0, r1, r5, r1
 8002e04:	1853      	adds	r3, r2, r1
 8002e06:	4619      	mov	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f04f 0400 	mov.w	r4, #0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7fd f9e1 	bl	80001d8 <__aeabi_uldivmod>
 8002e16:	4603      	mov	r3, r0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	e049      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b30      	ldr	r3, [pc, #192]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	f04f 0400 	mov.w	r4, #0
 8002e28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	ea03 0501 	and.w	r5, r3, r1
 8002e34:	ea04 0602 	and.w	r6, r4, r2
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4632      	mov	r2, r6
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4622      	mov	r2, r4
 8002e50:	1b49      	subs	r1, r1, r5
 8002e52:	eb62 0206 	sbc.w	r2, r2, r6
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	f04f 0400 	mov.w	r4, #0
 8002e5e:	0194      	lsls	r4, r2, #6
 8002e60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e64:	018b      	lsls	r3, r1, #6
 8002e66:	1a5b      	subs	r3, r3, r1
 8002e68:	eb64 0402 	sbc.w	r4, r4, r2
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	00e2      	lsls	r2, r4, #3
 8002e76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e7a:	00d9      	lsls	r1, r3, #3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4614      	mov	r4, r2
 8002e80:	195b      	adds	r3, r3, r5
 8002e82:	eb44 0406 	adc.w	r4, r4, r6
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	02a2      	lsls	r2, r4, #10
 8002e90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e94:	0299      	lsls	r1, r3, #10
 8002e96:	460b      	mov	r3, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	f7fd f996 	bl	80001d8 <__aeabi_uldivmod>
 8002eac:	4603      	mov	r3, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eca:	60bb      	str	r3, [r7, #8]
      break;
 8002ecc:	e002      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ed0:	60bb      	str	r3, [r7, #8]
      break;
 8002ed2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	00f42400 	.word	0x00f42400
 8002ee8:	017d7840 	.word	0x017d7840

08002eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000000 	.word	0x20000000

08002f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f08:	f7ff fff0 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	0a9b      	lsrs	r3, r3, #10
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f1a:	5cd3      	ldrb	r3, [r2, r3]
 8002f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40023800 	.word	0x40023800
 8002f28:	080064e0 	.word	0x080064e0

08002f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f30:	f7ff ffdc 	bl	8002eec <HAL_RCC_GetHCLKFreq>
 8002f34:	4601      	mov	r1, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0b5b      	lsrs	r3, r3, #13
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	080064e0 	.word	0x080064e0

08002f54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e022      	b.n	8002fac <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d105      	bne.n	8002f7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fd fd1f 	bl	80009bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2203      	movs	r2, #3
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f814 	bl	8002fb4 <HAL_SD_InitCard>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e00a      	b.n	8002fac <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b08e      	sub	sp, #56	; 0x38
 8002fb8:	af04      	add	r7, sp, #16
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002fd0:	2376      	movs	r3, #118	; 0x76
 8002fd2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681d      	ldr	r5, [r3, #0]
 8002fd8:	466c      	mov	r4, sp
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fe2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fec:	4628      	mov	r0, r5
 8002fee:	f002 fd5b 	bl	8005aa8 <SDIO_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e031      	b.n	8003068 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <HAL_SD_InitCard+0xbc>)
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fd93 	bl	8005b3a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_SD_InitCard+0xbc>)
 8003016:	2201      	movs	r2, #1
 8003018:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd54 	bl	8003ac8 <SD_PowerON>
 8003020:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e013      	b.n	8003068 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fc73 	bl	800392c <SD_InitCard>
 8003046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3728      	adds	r7, #40	; 0x28
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	422580a0 	.word	0x422580a0

08003074 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_SD_IRQHandler+0x2e>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 ff2a 	bl	8003ef4 <SD_Read_IT>
 80030a0:	e165      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 808f 	beq.w	80031d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80030ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80030ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d039      	beq.n	800315e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <HAL_SD_IRQHandler+0x8a>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fdce 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8003108:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f943 	bl	80033a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f240 523a 	movw	r2, #1338	; 0x53a
 800312a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_SD_IRQHandler+0xda>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f920 	bl	8003394 <HAL_SD_RxCpltCallback>
 8003154:	e10b      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f912 	bl	8003380 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800315c:	e107      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8102 	beq.w	800336e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d011      	beq.n	8003198 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f002 fd93 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 800317e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f908 	bl	80033a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80e5 	bne.w	800336e <HAL_SD_IRQHandler+0x2fa>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80df 	bne.w	800336e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0208 	bic.w	r2, r2, #8
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8d9 	bl	8003380 <HAL_SD_TxCpltCallback>
}
 80031ce:	e0ce      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_SD_IRQHandler+0x17c>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fed4 	bl	8003f96 <SD_Write_IT>
 80031ee:	e0be      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031f6:	f240 233a 	movw	r3, #570	; 0x23a
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80b6 	beq.w	800336e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	f043 0208 	orr.w	r2, r3, #8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	f003 0310 	and.w	r3, r3, #16
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327c:	f043 0208 	orr.w	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f240 723a 	movw	r2, #1850	; 0x73a
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800329c:	f023 0302 	bic.w	r3, r3, #2
 80032a0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 fcfc 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f869 	bl	80033a8 <HAL_SD_ErrorCallback>
}
 80032d6:	e04a      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d045      	beq.n	800336e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <HAL_SD_IRQHandler+0x282>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d011      	beq.n	800331a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_SD_IRQHandler+0x304>)
 80032fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fdf2 	bl	8001eec <HAL_DMA_Abort_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02f      	beq.n	800336e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa9c 	bl	8003850 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003318:	e029      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_SD_IRQHandler+0x2ba>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d011      	beq.n	8003352 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <HAL_SD_IRQHandler+0x308>)
 8003334:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fdd6 	bl	8001eec <HAL_DMA_Abort_IT>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d013      	beq.n	800336e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fab7 	bl	80038be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003350:	e00d      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f828 	bl	80033bc <HAL_SD_AbortCallback>
}
 800336c:	e7ff      	b.n	800336e <HAL_SD_IRQHandler+0x2fa>
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	08003851 	.word	0x08003851
 800337c:	080038bf 	.word	0x080038bf

08003380 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033de:	0f9b      	lsrs	r3, r3, #30
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ea:	0e9b      	lsrs	r3, r3, #26
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fc:	0e1b      	lsrs	r3, r3, #24
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	b2da      	uxtb	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	b2da      	uxtb	r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	b2da      	uxtb	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003426:	b2da      	uxtb	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	0d1b      	lsrs	r3, r3, #20
 8003432:	b29a      	uxth	r2, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800344e:	0bdb      	lsrs	r3, r3, #15
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	0b9b      	lsrs	r3, r3, #14
 8003462:	b2db      	uxtb	r3, r3
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	b2da      	uxtb	r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003472:	0b5b      	lsrs	r3, r3, #13
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	0b1b      	lsrs	r3, r3, #12
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	b2da      	uxtb	r2, r3
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2200      	movs	r2, #0
 8003496:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	2b00      	cmp	r3, #0
 800349e:	d163      	bne.n	8003568 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a4:	009a      	lsls	r2, r3, #2
 80034a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034b0:	0f92      	lsrs	r2, r2, #30
 80034b2:	431a      	orrs	r2, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034bc:	0edb      	lsrs	r3, r3, #27
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ce:	0e1b      	lsrs	r3, r3, #24
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e0:	0d5b      	lsrs	r3, r3, #21
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	0c9b      	lsrs	r3, r3, #18
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003504:	0bdb      	lsrs	r3, r3, #15
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	b2da      	uxtb	r2, r3
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	7e1b      	ldrb	r3, [r3, #24]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	3302      	adds	r3, #2
 8003528:	2201      	movs	r2, #1
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003532:	fb02 f203 	mul.w	r2, r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	7a1b      	ldrb	r3, [r3, #8]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	2201      	movs	r2, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003554:	0a52      	lsrs	r2, r2, #9
 8003556:	fb02 f203 	mul.w	r2, r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003564:	661a      	str	r2, [r3, #96]	; 0x60
 8003566:	e031      	b.n	80035cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	2b01      	cmp	r3, #1
 800356e:	d11d      	bne.n	80035ac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	3301      	adds	r3, #1
 800358c:	029a      	lsls	r2, r3, #10
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	661a      	str	r2, [r3, #96]	; 0x60
 80035aa:	e00f      	b.n	80035cc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a58      	ldr	r2, [pc, #352]	; (8003714 <HAL_SD_GetCardCSD+0x344>)
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e09d      	b.n	8003708 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d0:	0b9b      	lsrs	r3, r3, #14
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e2:	09db      	lsrs	r3, r3, #7
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	0fdb      	lsrs	r3, r3, #31
 8003606:	b2da      	uxtb	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	0f5b      	lsrs	r3, r3, #29
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	b2da      	uxtb	r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	b2da      	uxtb	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	0d9b      	lsrs	r3, r3, #22
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	b2da      	uxtb	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	0d5b      	lsrs	r3, r3, #21
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	0bdb      	lsrs	r3, r3, #15
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	0b9b      	lsrs	r3, r3, #14
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	0b1b      	lsrs	r3, r3, #12
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	0a9b      	lsrs	r3, r3, #10
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	004005ff 	.word	0x004005ff

08003718 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003718:	b5b0      	push	{r4, r5, r7, lr}
 800371a:	b08e      	sub	sp, #56	; 0x38
 800371c:	af04      	add	r7, sp, #16
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	2b03      	cmp	r3, #3
 8003730:	d02e      	beq.n	8003790 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d106      	bne.n	8003748 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
 8003746:	e029      	b.n	800379c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374e:	d10a      	bne.n	8003766 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fa6f 	bl	8003c34 <SD_WideBus_Enable>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	e01a      	b.n	800379c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faac 	bl	8003cca <SD_WideBus_Disable>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
 8003780:	e00c      	b.n	800379c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
 800378e:	e005      	b.n	800379c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a18      	ldr	r2, [pc, #96]	; (800380c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e024      	b.n	8003802 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681d      	ldr	r5, [r3, #0]
 80037de:	466c      	mov	r4, sp
 80037e0:	f107 0318 	add.w	r3, r7, #24
 80037e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f2:	4628      	mov	r0, r5
 80037f4:	f002 f958 	bl	8005aa8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bdb0      	pop	{r4, r5, r7, pc}
 800380a:	bf00      	nop
 800380c:	004005ff 	.word	0x004005ff

08003810 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9de 	bl	8003be4 <SD_SendStatus>
 8003828:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0a5b      	lsrs	r3, r3, #9
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003846:	693b      	ldr	r3, [r7, #16]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f240 523a 	movw	r2, #1338	; 0x53a
 8003866:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff ffd1 	bl	8003810 <HAL_SD_GetCardState>
 800386e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b06      	cmp	r3, #6
 8003882:	d002      	beq.n	800388a <SD_DMATxAbort+0x3a>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b05      	cmp	r3, #5
 8003888:	d10a      	bne.n	80038a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f002 fa08 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff fd87 	bl	80033bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80038ae:	e002      	b.n	80038b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff fd79 	bl	80033a8 <HAL_SD_ErrorCallback>
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff9a 	bl	8003810 <HAL_SD_GetCardState>
 80038dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d002      	beq.n	80038f8 <SD_DMARxAbort+0x3a>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d10a      	bne.n	800390e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 f9d1 	bl	8005ca4 <SDMMC_CmdStopTransfer>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff fd50 	bl	80033bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800391c:	e002      	b.n	8003924 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fd42 	bl	80033a8 <HAL_SD_ErrorCallback>
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800392c:	b5b0      	push	{r4, r5, r7, lr}
 800392e:	b094      	sub	sp, #80	; 0x50
 8003930:	af04      	add	r7, sp, #16
 8003932:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f002 f90b 	bl	8005b58 <SDIO_GetPowerState>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003948:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800394c:	e0b7      	b.n	8003abe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	2b03      	cmp	r3, #3
 8003954:	d02f      	beq.n	80039b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f002 faac 	bl	8005eb8 <SDMMC_CmdSendCID>
 8003960:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <SD_InitCard+0x40>
    {
      return errorstate;
 8003968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396a:	e0a8      	b.n	8003abe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f002 f935 	bl	8005be2 <SDIO_GetResponse>
 8003978:	4602      	mov	r2, r0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2104      	movs	r1, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f002 f92c 	bl	8005be2 <SDIO_GetResponse>
 800398a:	4602      	mov	r2, r0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2108      	movs	r1, #8
 8003996:	4618      	mov	r0, r3
 8003998:	f002 f923 	bl	8005be2 <SDIO_GetResponse>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	210c      	movs	r1, #12
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 f91a 	bl	8005be2 <SDIO_GetResponse>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d00d      	beq.n	80039da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f107 020e 	add.w	r2, r7, #14
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fab2 	bl	8005f32 <SDMMC_CmdSetRelAdd>
 80039ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <SD_InitCard+0xae>
    {
      return errorstate;
 80039d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d8:	e071      	b.n	8003abe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d036      	beq.n	8003a50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039e2:	89fb      	ldrh	r3, [r7, #14]
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f002 fa7c 	bl	8005ef4 <SDMMC_CmdSendCSD>
 80039fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	e05a      	b.n	8003abe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 f8e7 	bl	8005be2 <SDIO_GetResponse>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2104      	movs	r1, #4
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 f8de 	bl	8005be2 <SDIO_GetResponse>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2108      	movs	r1, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f002 f8d5 	bl	8005be2 <SDIO_GetResponse>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	210c      	movs	r1, #12
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 f8cc 	bl	8005be2 <SDIO_GetResponse>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2104      	movs	r1, #4
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 f8c3 	bl	8005be2 <SDIO_GetResponse>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	0d1a      	lsrs	r2, r3, #20
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a64:	f107 0310 	add.w	r3, r7, #16
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fcb0 	bl	80033d0 <HAL_SD_GetCardCSD>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a7a:	e020      	b.n	8003abe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	f04f 0400 	mov.w	r4, #0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	4608      	mov	r0, r1
 8003a90:	f002 f92a 	bl	8005ce8 <SDMMC_CmdSelDesel>
 8003a94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <SD_InitCard+0x174>
  {
    return errorstate;
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9e:	e00e      	b.n	8003abe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681d      	ldr	r5, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	466c      	mov	r4, sp
 8003aa8:	f103 0210 	add.w	r2, r3, #16
 8003aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f001 fff6 	bl	8005aa8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3740      	adds	r7, #64	; 0x40
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ac8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 f924 	bl	8005d2e <SDMMC_CmdGoIdleState>
 8003ae6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	e072      	b.n	8003bd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 f937 	bl	8005d6a <SDMMC_CmdOperCond>
 8003afc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 f90d 	bl	8005d2e <SDMMC_CmdGoIdleState>
 8003b14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e05b      	b.n	8003bd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d137      	bne.n	8003b9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 f937 	bl	8005da8 <SDMMC_CmdAppCommand>
 8003b3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02d      	beq.n	8003b9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b46:	e047      	b.n	8003bd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f002 f92a 	bl	8005da8 <SDMMC_CmdAppCommand>
 8003b54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	e03b      	b.n	8003bd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	491e      	ldr	r1, [pc, #120]	; (8003be0 <SD_PowerON+0x118>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 f940 	bl	8005dec <SDMMC_CmdAppOperCommand>
 8003b6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b78:	e02e      	b.n	8003bd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 f82e 	bl	8005be2 <SDIO_GetResponse>
 8003b86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	0fdb      	lsrs	r3, r3, #31
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <SD_PowerON+0xcc>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <SD_PowerON+0xce>
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]

    count++;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d802      	bhi.n	8003bae <SD_PowerON+0xe6>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0cc      	beq.n	8003b48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d902      	bls.n	8003bbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bbc:	e00c      	b.n	8003bd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8003bce:	e002      	b.n	8003bd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	c1100000 	.word	0xc1100000

08003be4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf8:	e018      	b.n	8003c2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f002 f9b4 	bl	8005f74 <SDMMC_CmdSendStatus>
 8003c0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	e009      	b.n	8003c2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 ffdf 	bl	8005be2 <SDIO_GetResponse>
 8003c24:	4602      	mov	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 ffc9 	bl	8005be2 <SDIO_GetResponse>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5a:	d102      	bne.n	8003c62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c60:	e02f      	b.n	8003cc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f879 	bl	8003d60 <SD_FindSCR>
 8003c6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	e023      	b.n	8003cc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01c      	beq.n	8003cbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8c:	041b      	lsls	r3, r3, #16
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f002 f889 	bl	8005da8 <SDMMC_CmdAppCommand>
 8003c96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	e00f      	b.n	8003cc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2102      	movs	r1, #2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f002 f8c2 	bl	8005e32 <SDMMC_CmdBusWidth>
 8003cae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e003      	b.n	8003cc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e001      	b.n	8003cc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 ff7e 	bl	8005be2 <SDIO_GetResponse>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf0:	d102      	bne.n	8003cf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cf6:	e02f      	b.n	8003d58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f82e 	bl	8003d60 <SD_FindSCR>
 8003d04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e023      	b.n	8003d58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01c      	beq.n	8003d54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f002 f83e 	bl	8005da8 <SDMMC_CmdAppCommand>
 8003d2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	e00f      	b.n	8003d58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f002 f877 	bl	8005e32 <SDMMC_CmdBusWidth>
 8003d44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	e003      	b.n	8003d58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e001      	b.n	8003d58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b08f      	sub	sp, #60	; 0x3c
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d6a:	f7fd faf7 	bl	800135c <HAL_GetTick>
 8003d6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2108      	movs	r1, #8
 8003d86:	4618      	mov	r0, r3
 8003d88:	f001 ff6a 	bl	8005c60 <SDMMC_CmdBlockLength>
 8003d8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	e0a9      	b.n	8003eec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	041b      	lsls	r3, r3, #16
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f001 ffff 	bl	8005da8 <SDMMC_CmdAppCommand>
 8003daa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	e09a      	b.n	8003eec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003dc0:	2330      	movs	r3, #48	; 0x30
 8003dc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f107 0210 	add.w	r2, r7, #16
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 ff14 	bl	8005c08 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f002 f846 	bl	8005e76 <SDMMC_CmdSendSCR>
 8003dea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d022      	beq.n	8003e38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	e07a      	b.n	8003eec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00e      	beq.n	8003e22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6819      	ldr	r1, [r3, #0]
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	f107 0208 	add.w	r2, r7, #8
 8003e10:	18d4      	adds	r4, r2, r3
 8003e12:	4608      	mov	r0, r1
 8003e14:	f001 fe73 	bl	8005afe <SDIO_ReadFIFO>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	6023      	str	r3, [r4, #0]
      index++;
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	3301      	adds	r3, #1
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e22:	f7fd fa9b 	bl	800135c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d102      	bne.n	8003e38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e36:	e059      	b.n	8003eec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3e:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0d6      	beq.n	8003df6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e5e:	2308      	movs	r3, #8
 8003e60:	e044      	b.n	8003eec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2202      	movs	r2, #2
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e037      	b.n	8003eec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003e92:	2320      	movs	r3, #32
 8003e94:	e02a      	b.n	8003eec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	061a      	lsls	r2, r3, #24
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	0e1b      	lsrs	r3, r3, #24
 8003ebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	601a      	str	r2, [r3, #0]
    scr++;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	061a      	lsls	r2, r3, #24
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ed4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ede:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	0e1b      	lsrs	r3, r3, #24
 8003ee4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	373c      	adds	r7, #60	; 0x3c
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd90      	pop	{r4, r7, pc}

08003ef4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03f      	beq.n	8003f8e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e033      	b.n	8003f7c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fdf0 	bl	8005afe <SDIO_ReadFIFO>
 8003f1e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	0e1b      	lsrs	r3, r3, #24
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]
      tmp++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b07      	cmp	r3, #7
 8003f80:	d9c8      	bls.n	8003f14 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d043      	beq.n	8004038 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e037      	b.n	8004026 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	041a      	lsls	r2, r3, #16
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	061a      	lsls	r2, r3, #24
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	3b01      	subs	r3, #1
 800400e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f107 0208 	add.w	r2, r7, #8
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fd7c 	bl	8005b18 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3301      	adds	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b07      	cmp	r3, #7
 800402a:	d9c4      	bls.n	8003fb6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004038:	bf00      	nop
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e056      	b.n	8004100 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fc fdcb 	bl	8000c08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004088:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	ea42 0103 	orr.w	r1, r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f003 0104 	and.w	r1, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	099b      	lsrs	r3, r3, #6
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10f      	bne.n	800414c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	4798      	blx	r3
    return;
 800414a:	e0d8      	b.n	80042fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_SPI_IRQHandler+0x66>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
    return;
 800416c:	e0c7      	b.n	80042fe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_SPI_IRQHandler+0x8c>
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80b5 	beq.w	80042fe <HAL_SPI_IRQHandler+0x1f6>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80ae 	beq.w	80042fe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	099b      	lsrs	r3, r3, #6
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d011      	beq.n	80041de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	e00b      	b.n	80041f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
        return;
 80041f4:	e083      	b.n	80042fe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d014      	beq.n	800422c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0208 	orr.w	r2, r3, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	2b00      	cmp	r3, #0
 8004258:	d050      	beq.n	80042fc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004268:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d104      	bne.n	8004286 <HAL_SPI_IRQHandler+0x17e>
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d034      	beq.n	80042f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0203 	bic.w	r2, r2, #3
 8004294:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_SPI_IRQHandler+0x1fc>)
 80042a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd fe1e 	bl	8001eec <HAL_DMA_Abort_IT>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	4a0d      	ldr	r2, [pc, #52]	; (8004304 <HAL_SPI_IRQHandler+0x1fc>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fd fe08 	bl	8001eec <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80042ee:	e003      	b.n	80042f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f809 	bl	8004308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80042f6:	e000      	b.n	80042fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80042f8:	bf00      	nop
    return;
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
  }
}
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	0800431d 	.word	0x0800431d

08004308 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ffe6 	bl	8004308 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e01d      	b.n	8004392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fe16 	bl	8000f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 facc 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e01d      	b.n	80043e8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f815 	bl	80043f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 faa1 	bl	8004920 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b02      	cmp	r3, #2
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0202 	mvn.w	r2, #2
 8004430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa4b 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa3d 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fa4e 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fa21 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fa13 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fa24 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0208 	mvn.w	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2204      	movs	r2, #4
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f9f7 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9e9 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f9fa 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0210 	mvn.w	r2, #16
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2208      	movs	r2, #8
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f9cd 	bl	80048e2 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f9bf 	bl	80048ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f9d0 	bl	80048f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0201 	mvn.w	r2, #1
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f999 	bl	80048ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b80      	cmp	r3, #128	; 0x80
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fc66 	bl	8004e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d10e      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d107      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f995 	bl	800490a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d10e      	bne.n	800460c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0320 	and.w	r3, r3, #32
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d107      	bne.n	800460c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0220 	mvn.w	r2, #32
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fc30 	bl	8004e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_IC_ConfigChannel+0x1a>
 800462a:	2302      	movs	r3, #2
 800462c:	e08a      	b.n	8004744 <HAL_TIM_IC_ConfigChannel+0x130>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f000 f9e4 	bl	8004a20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020c 	bic.w	r2, r2, #12
 8004666:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	619a      	str	r2, [r3, #24]
 800467a:	e05a      	b.n	8004732 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d11c      	bne.n	80046bc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f000 fa5c 	bl	8004b4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6999      	ldr	r1, [r3, #24]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	021a      	lsls	r2, r3, #8
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
 80046ba:	e03a      	b.n	8004732 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d11b      	bne.n	80046fa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 faa9 	bl	8004c28 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020c 	bic.w	r2, r2, #12
 80046e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	e01b      	b.n	8004732 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f000 fac9 	bl	8004ca0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800471c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIM_ConfigClockSource+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e0a6      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x166>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d067      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x120>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d80b      	bhi.n	80047b8 <HAL_TIM_ConfigClockSource+0x6c>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d073      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d802      	bhi.n	80047ae <HAL_TIM_ConfigClockSource+0x62>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d06f      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80047ac:	e078      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d06c      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
 80047b2:	2b30      	cmp	r3, #48	; 0x30
 80047b4:	d06a      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047b6:	e073      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047b8:	2b70      	cmp	r3, #112	; 0x70
 80047ba:	d00d      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x8c>
 80047bc:	2b70      	cmp	r3, #112	; 0x70
 80047be:	d804      	bhi.n	80047ca <HAL_TIM_ConfigClockSource+0x7e>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d033      	beq.n	800482c <HAL_TIM_ConfigClockSource+0xe0>
 80047c4:	2b60      	cmp	r3, #96	; 0x60
 80047c6:	d041      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047c8:	e06a      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	d066      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x152>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d017      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047d6:	e063      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f000 fab2 	bl	8004d50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
      break;
 8004804:	e04c      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f000 fa9b 	bl	8004d50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004828:	609a      	str	r2, [r3, #8]
      break;
 800482a:	e039      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	461a      	mov	r2, r3
 800483a:	f000 f959 	bl	8004af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2150      	movs	r1, #80	; 0x50
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fa68 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 800484a:	e029      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f9b5 	bl	8004bc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2160      	movs	r1, #96	; 0x60
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fa58 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 800486a:	e019      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f000 f939 	bl	8004af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fa48 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 800488a:	e009      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 fa3f 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 800489c:	e000      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800489e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a34      	ldr	r2, [pc, #208]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d00f      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493e:	d00b      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a31      	ldr	r2, [pc, #196]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <TIM_Base_SetConfig+0xec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d108      	bne.n	800496a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800495e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a25      	ldr	r2, [pc, #148]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01b      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d017      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <TIM_Base_SetConfig+0xe8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <TIM_Base_SetConfig+0xec>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00f      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <TIM_Base_SetConfig+0xf0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00b      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <TIM_Base_SetConfig+0xf4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d007      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <TIM_Base_SetConfig+0xf8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <TIM_Base_SetConfig+0xfc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <TIM_Base_SetConfig+0xe4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d103      	bne.n	80049f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	615a      	str	r2, [r3, #20]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f023 0201 	bic.w	r2, r3, #1
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4a24      	ldr	r2, [pc, #144]	; (8004adc <TIM_TI1_SetConfig+0xbc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <TIM_TI1_SetConfig+0x56>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d00f      	beq.n	8004a76 <TIM_TI1_SetConfig+0x56>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <TIM_TI1_SetConfig+0xc0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00b      	beq.n	8004a76 <TIM_TI1_SetConfig+0x56>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <TIM_TI1_SetConfig+0xc4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d007      	beq.n	8004a76 <TIM_TI1_SetConfig+0x56>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <TIM_TI1_SetConfig+0xc8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <TIM_TI1_SetConfig+0x56>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <TIM_TI1_SetConfig+0xcc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <TIM_TI1_SetConfig+0x5a>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <TIM_TI1_SetConfig+0x5c>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0303 	bic.w	r3, r3, #3
 8004a86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e003      	b.n	8004a9a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f023 030a 	bic.w	r3, r3, #10
 8004ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f003 030a 	and.w	r3, r3, #10
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	bf00      	nop
 8004ad0:	371c      	adds	r7, #28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40014000 	.word	0x40014000

08004af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f023 0201 	bic.w	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f023 030a 	bic.w	r3, r3, #10
 8004b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b087      	sub	sp, #28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f023 0210 	bic.w	r2, r3, #16
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bf2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	031b      	lsls	r3, r3, #12
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 0303 	bic.w	r3, r3, #3
 8004c54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	021b      	lsls	r3, r3, #8
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	031b      	lsls	r3, r3, #12
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	031b      	lsls	r3, r3, #12
 8004cf8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f043 0307 	orr.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e050      	b.n	8004e4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d013      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d10c      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40014000 	.word	0x40014000

08004e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e03f      	b.n	8004f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc f8e8 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa69 	bl	80053b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2220      	movs	r2, #32
 8004f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10d      	bne.n	8004f82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x52>
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f996 	bl	80052ac <UART_Receive_IT>
      return;
 8004f80:	e0d1      	b.n	8005126 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80b0 	beq.w	80050ea <HAL_UART_IRQHandler+0x1ba>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x70>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a5 	beq.w	80050ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x90>
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xb0>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	f043 0202 	orr.w	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_UART_IRQHandler+0xd0>
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff8:	f043 0204 	orr.w	r2, r3, #4
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00f      	beq.n	800502a <HAL_UART_IRQHandler+0xfa>
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <HAL_UART_IRQHandler+0xee>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d078      	beq.n	8005124 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_UART_IRQHandler+0x11c>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f930 	bl	80052ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <HAL_UART_IRQHandler+0x144>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d031      	beq.n	80050d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f879 	bl	800516c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d123      	bne.n	80050d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005096:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_UART_IRQHandler+0x1fc>)
 80050a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fc ff1d 	bl	8001eec <HAL_DMA_Abort_IT>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d016      	beq.n	80050e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050c2:	4610      	mov	r0, r2
 80050c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c6:	e00e      	b.n	80050e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f845 	bl	8005158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ce:	e00a      	b.n	80050e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f841 	bl	8005158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d6:	e006      	b.n	80050e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f83d 	bl	8005158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050e4:	e01e      	b.n	8005124 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e6:	bf00      	nop
    return;
 80050e8:	e01c      	b.n	8005124 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_UART_IRQHandler+0x1d6>
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f866 	bl	80051d0 <UART_Transmit_IT>
    return;
 8005104:	e00f      	b.n	8005126 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_UART_IRQHandler+0x1f6>
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8ae 	bl	800527c <UART_EndTransmit_IT>
    return;
 8005120:	bf00      	nop
 8005122:	e000      	b.n	8005126 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005124:	bf00      	nop
  }
}
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	080051a9 	.word	0x080051a9

08005130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005182:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7ff ffc8 	bl	8005158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b21      	cmp	r3, #33	; 0x21
 80051e2:	d144      	bne.n	800526e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ec:	d11a      	bne.n	8005224 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005202:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	621a      	str	r2, [r3, #32]
 8005216:	e00e      	b.n	8005236 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
 8005222:	e008      	b.n	8005236 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6211      	str	r1, [r2, #32]
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4619      	mov	r1, r3
 8005244:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff47 	bl	8005130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b22      	cmp	r3, #34	; 0x22
 80052be:	d171      	bne.n	80053a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c8:	d123      	bne.n	8005312 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10e      	bne.n	80052f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28
 80052f4:	e029      	b.n	800534a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
 8005310:	e01b      	b.n	800534a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6858      	ldr	r0, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	1c59      	adds	r1, r3, #1
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6291      	str	r1, [r2, #40]	; 0x28
 800532a:	b2c2      	uxtb	r2, r0
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e00c      	b.n	800534a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	1c58      	adds	r0, r3, #1
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	6288      	str	r0, [r1, #40]	; 0x28
 8005342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	4619      	mov	r1, r3
 8005358:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800535a:	2b00      	cmp	r3, #0
 800535c:	d120      	bne.n	80053a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0220 	bic.w	r2, r2, #32
 800536c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800537c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fed4 	bl	8005144 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e002      	b.n	80053a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053f2:	f023 030c 	bic.w	r3, r3, #12
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	430b      	orrs	r3, r1
 80053fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	f040 818b 	bne.w	8005738 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4ac1      	ldr	r2, [pc, #772]	; (800572c <UART_SetConfig+0x37c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d005      	beq.n	8005438 <UART_SetConfig+0x88>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4abf      	ldr	r2, [pc, #764]	; (8005730 <UART_SetConfig+0x380>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f040 80bd 	bne.w	80055b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7fd fd78 	bl	8002f2c <HAL_RCC_GetPCLK2Freq>
 800543c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	461d      	mov	r5, r3
 8005442:	f04f 0600 	mov.w	r6, #0
 8005446:	46a8      	mov	r8, r5
 8005448:	46b1      	mov	r9, r6
 800544a:	eb18 0308 	adds.w	r3, r8, r8
 800544e:	eb49 0409 	adc.w	r4, r9, r9
 8005452:	4698      	mov	r8, r3
 8005454:	46a1      	mov	r9, r4
 8005456:	eb18 0805 	adds.w	r8, r8, r5
 800545a:	eb49 0906 	adc.w	r9, r9, r6
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800546a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800546e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005472:	4688      	mov	r8, r1
 8005474:	4691      	mov	r9, r2
 8005476:	eb18 0005 	adds.w	r0, r8, r5
 800547a:	eb49 0106 	adc.w	r1, r9, r6
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	461d      	mov	r5, r3
 8005484:	f04f 0600 	mov.w	r6, #0
 8005488:	196b      	adds	r3, r5, r5
 800548a:	eb46 0406 	adc.w	r4, r6, r6
 800548e:	461a      	mov	r2, r3
 8005490:	4623      	mov	r3, r4
 8005492:	f7fa fea1 	bl	80001d8 <__aeabi_uldivmod>
 8005496:	4603      	mov	r3, r0
 8005498:	460c      	mov	r4, r1
 800549a:	461a      	mov	r2, r3
 800549c:	4ba5      	ldr	r3, [pc, #660]	; (8005734 <UART_SetConfig+0x384>)
 800549e:	fba3 2302 	umull	r2, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	461d      	mov	r5, r3
 80054ac:	f04f 0600 	mov.w	r6, #0
 80054b0:	46a9      	mov	r9, r5
 80054b2:	46b2      	mov	sl, r6
 80054b4:	eb19 0309 	adds.w	r3, r9, r9
 80054b8:	eb4a 040a 	adc.w	r4, sl, sl
 80054bc:	4699      	mov	r9, r3
 80054be:	46a2      	mov	sl, r4
 80054c0:	eb19 0905 	adds.w	r9, r9, r5
 80054c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80054c8:	f04f 0100 	mov.w	r1, #0
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054dc:	4689      	mov	r9, r1
 80054de:	4692      	mov	sl, r2
 80054e0:	eb19 0005 	adds.w	r0, r9, r5
 80054e4:	eb4a 0106 	adc.w	r1, sl, r6
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	461d      	mov	r5, r3
 80054ee:	f04f 0600 	mov.w	r6, #0
 80054f2:	196b      	adds	r3, r5, r5
 80054f4:	eb46 0406 	adc.w	r4, r6, r6
 80054f8:	461a      	mov	r2, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	f7fa fe6c 	bl	80001d8 <__aeabi_uldivmod>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	461a      	mov	r2, r3
 8005506:	4b8b      	ldr	r3, [pc, #556]	; (8005734 <UART_SetConfig+0x384>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a86      	ldr	r2, [pc, #536]	; (8005734 <UART_SetConfig+0x384>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	005b      	lsls	r3, r3, #1
 8005524:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005528:	4498      	add	r8, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	461d      	mov	r5, r3
 800552e:	f04f 0600 	mov.w	r6, #0
 8005532:	46a9      	mov	r9, r5
 8005534:	46b2      	mov	sl, r6
 8005536:	eb19 0309 	adds.w	r3, r9, r9
 800553a:	eb4a 040a 	adc.w	r4, sl, sl
 800553e:	4699      	mov	r9, r3
 8005540:	46a2      	mov	sl, r4
 8005542:	eb19 0905 	adds.w	r9, r9, r5
 8005546:	eb4a 0a06 	adc.w	sl, sl, r6
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800555a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555e:	4689      	mov	r9, r1
 8005560:	4692      	mov	sl, r2
 8005562:	eb19 0005 	adds.w	r0, r9, r5
 8005566:	eb4a 0106 	adc.w	r1, sl, r6
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	461d      	mov	r5, r3
 8005570:	f04f 0600 	mov.w	r6, #0
 8005574:	196b      	adds	r3, r5, r5
 8005576:	eb46 0406 	adc.w	r4, r6, r6
 800557a:	461a      	mov	r2, r3
 800557c:	4623      	mov	r3, r4
 800557e:	f7fa fe2b 	bl	80001d8 <__aeabi_uldivmod>
 8005582:	4603      	mov	r3, r0
 8005584:	460c      	mov	r4, r1
 8005586:	461a      	mov	r2, r3
 8005588:	4b6a      	ldr	r3, [pc, #424]	; (8005734 <UART_SetConfig+0x384>)
 800558a:	fba3 1302 	umull	r1, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2164      	movs	r1, #100	; 0x64
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a65      	ldr	r2, [pc, #404]	; (8005734 <UART_SetConfig+0x384>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 0207 	and.w	r2, r3, #7
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4442      	add	r2, r8
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	e26f      	b.n	8005a92 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b2:	f7fd fca7 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
 80055b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	461d      	mov	r5, r3
 80055bc:	f04f 0600 	mov.w	r6, #0
 80055c0:	46a8      	mov	r8, r5
 80055c2:	46b1      	mov	r9, r6
 80055c4:	eb18 0308 	adds.w	r3, r8, r8
 80055c8:	eb49 0409 	adc.w	r4, r9, r9
 80055cc:	4698      	mov	r8, r3
 80055ce:	46a1      	mov	r9, r4
 80055d0:	eb18 0805 	adds.w	r8, r8, r5
 80055d4:	eb49 0906 	adc.w	r9, r9, r6
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055ec:	4688      	mov	r8, r1
 80055ee:	4691      	mov	r9, r2
 80055f0:	eb18 0005 	adds.w	r0, r8, r5
 80055f4:	eb49 0106 	adc.w	r1, r9, r6
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	461d      	mov	r5, r3
 80055fe:	f04f 0600 	mov.w	r6, #0
 8005602:	196b      	adds	r3, r5, r5
 8005604:	eb46 0406 	adc.w	r4, r6, r6
 8005608:	461a      	mov	r2, r3
 800560a:	4623      	mov	r3, r4
 800560c:	f7fa fde4 	bl	80001d8 <__aeabi_uldivmod>
 8005610:	4603      	mov	r3, r0
 8005612:	460c      	mov	r4, r1
 8005614:	461a      	mov	r2, r3
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <UART_SetConfig+0x384>)
 8005618:	fba3 2302 	umull	r2, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	461d      	mov	r5, r3
 8005626:	f04f 0600 	mov.w	r6, #0
 800562a:	46a9      	mov	r9, r5
 800562c:	46b2      	mov	sl, r6
 800562e:	eb19 0309 	adds.w	r3, r9, r9
 8005632:	eb4a 040a 	adc.w	r4, sl, sl
 8005636:	4699      	mov	r9, r3
 8005638:	46a2      	mov	sl, r4
 800563a:	eb19 0905 	adds.w	r9, r9, r5
 800563e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005642:	f04f 0100 	mov.w	r1, #0
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800564e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005656:	4689      	mov	r9, r1
 8005658:	4692      	mov	sl, r2
 800565a:	eb19 0005 	adds.w	r0, r9, r5
 800565e:	eb4a 0106 	adc.w	r1, sl, r6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	461d      	mov	r5, r3
 8005668:	f04f 0600 	mov.w	r6, #0
 800566c:	196b      	adds	r3, r5, r5
 800566e:	eb46 0406 	adc.w	r4, r6, r6
 8005672:	461a      	mov	r2, r3
 8005674:	4623      	mov	r3, r4
 8005676:	f7fa fdaf 	bl	80001d8 <__aeabi_uldivmod>
 800567a:	4603      	mov	r3, r0
 800567c:	460c      	mov	r4, r1
 800567e:	461a      	mov	r2, r3
 8005680:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <UART_SetConfig+0x384>)
 8005682:	fba3 1302 	umull	r1, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	3332      	adds	r3, #50	; 0x32
 8005694:	4a27      	ldr	r2, [pc, #156]	; (8005734 <UART_SetConfig+0x384>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056a2:	4498      	add	r8, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	461d      	mov	r5, r3
 80056a8:	f04f 0600 	mov.w	r6, #0
 80056ac:	46a9      	mov	r9, r5
 80056ae:	46b2      	mov	sl, r6
 80056b0:	eb19 0309 	adds.w	r3, r9, r9
 80056b4:	eb4a 040a 	adc.w	r4, sl, sl
 80056b8:	4699      	mov	r9, r3
 80056ba:	46a2      	mov	sl, r4
 80056bc:	eb19 0905 	adds.w	r9, r9, r5
 80056c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056d8:	4689      	mov	r9, r1
 80056da:	4692      	mov	sl, r2
 80056dc:	eb19 0005 	adds.w	r0, r9, r5
 80056e0:	eb4a 0106 	adc.w	r1, sl, r6
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	461d      	mov	r5, r3
 80056ea:	f04f 0600 	mov.w	r6, #0
 80056ee:	196b      	adds	r3, r5, r5
 80056f0:	eb46 0406 	adc.w	r4, r6, r6
 80056f4:	461a      	mov	r2, r3
 80056f6:	4623      	mov	r3, r4
 80056f8:	f7fa fd6e 	bl	80001d8 <__aeabi_uldivmod>
 80056fc:	4603      	mov	r3, r0
 80056fe:	460c      	mov	r4, r1
 8005700:	461a      	mov	r2, r3
 8005702:	4b0c      	ldr	r3, [pc, #48]	; (8005734 <UART_SetConfig+0x384>)
 8005704:	fba3 1302 	umull	r1, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	2164      	movs	r1, #100	; 0x64
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	3332      	adds	r3, #50	; 0x32
 8005716:	4a07      	ldr	r2, [pc, #28]	; (8005734 <UART_SetConfig+0x384>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	f003 0207 	and.w	r2, r3, #7
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4442      	add	r2, r8
 8005728:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800572a:	e1b2      	b.n	8005a92 <UART_SetConfig+0x6e2>
 800572c:	40011000 	.word	0x40011000
 8005730:	40011400 	.word	0x40011400
 8005734:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4ad7      	ldr	r2, [pc, #860]	; (8005a9c <UART_SetConfig+0x6ec>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d005      	beq.n	800574e <UART_SetConfig+0x39e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4ad6      	ldr	r2, [pc, #856]	; (8005aa0 <UART_SetConfig+0x6f0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	f040 80d1 	bne.w	80058f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800574e:	f7fd fbed 	bl	8002f2c <HAL_RCC_GetPCLK2Freq>
 8005752:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	469a      	mov	sl, r3
 8005758:	f04f 0b00 	mov.w	fp, #0
 800575c:	46d0      	mov	r8, sl
 800575e:	46d9      	mov	r9, fp
 8005760:	eb18 0308 	adds.w	r3, r8, r8
 8005764:	eb49 0409 	adc.w	r4, r9, r9
 8005768:	4698      	mov	r8, r3
 800576a:	46a1      	mov	r9, r4
 800576c:	eb18 080a 	adds.w	r8, r8, sl
 8005770:	eb49 090b 	adc.w	r9, r9, fp
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	f04f 0200 	mov.w	r2, #0
 800577c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005780:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005784:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005788:	4688      	mov	r8, r1
 800578a:	4691      	mov	r9, r2
 800578c:	eb1a 0508 	adds.w	r5, sl, r8
 8005790:	eb4b 0609 	adc.w	r6, fp, r9
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4619      	mov	r1, r3
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	f04f 0400 	mov.w	r4, #0
 80057a6:	0094      	lsls	r4, r2, #2
 80057a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ac:	008b      	lsls	r3, r1, #2
 80057ae:	461a      	mov	r2, r3
 80057b0:	4623      	mov	r3, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	4631      	mov	r1, r6
 80057b6:	f7fa fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80057ba:	4603      	mov	r3, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	461a      	mov	r2, r3
 80057c0:	4bb8      	ldr	r3, [pc, #736]	; (8005aa4 <UART_SetConfig+0x6f4>)
 80057c2:	fba3 2302 	umull	r2, r3, r3, r2
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	469b      	mov	fp, r3
 80057d0:	f04f 0c00 	mov.w	ip, #0
 80057d4:	46d9      	mov	r9, fp
 80057d6:	46e2      	mov	sl, ip
 80057d8:	eb19 0309 	adds.w	r3, r9, r9
 80057dc:	eb4a 040a 	adc.w	r4, sl, sl
 80057e0:	4699      	mov	r9, r3
 80057e2:	46a2      	mov	sl, r4
 80057e4:	eb19 090b 	adds.w	r9, r9, fp
 80057e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005800:	4689      	mov	r9, r1
 8005802:	4692      	mov	sl, r2
 8005804:	eb1b 0509 	adds.w	r5, fp, r9
 8005808:	eb4c 060a 	adc.w	r6, ip, sl
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4619      	mov	r1, r3
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	0094      	lsls	r4, r2, #2
 8005820:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	461a      	mov	r2, r3
 8005828:	4623      	mov	r3, r4
 800582a:	4628      	mov	r0, r5
 800582c:	4631      	mov	r1, r6
 800582e:	f7fa fcd3 	bl	80001d8 <__aeabi_uldivmod>
 8005832:	4603      	mov	r3, r0
 8005834:	460c      	mov	r4, r1
 8005836:	461a      	mov	r2, r3
 8005838:	4b9a      	ldr	r3, [pc, #616]	; (8005aa4 <UART_SetConfig+0x6f4>)
 800583a:	fba3 1302 	umull	r1, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	2164      	movs	r1, #100	; 0x64
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	3332      	adds	r3, #50	; 0x32
 800584c:	4a95      	ldr	r2, [pc, #596]	; (8005aa4 <UART_SetConfig+0x6f4>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005858:	4498      	add	r8, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	469b      	mov	fp, r3
 800585e:	f04f 0c00 	mov.w	ip, #0
 8005862:	46d9      	mov	r9, fp
 8005864:	46e2      	mov	sl, ip
 8005866:	eb19 0309 	adds.w	r3, r9, r9
 800586a:	eb4a 040a 	adc.w	r4, sl, sl
 800586e:	4699      	mov	r9, r3
 8005870:	46a2      	mov	sl, r4
 8005872:	eb19 090b 	adds.w	r9, r9, fp
 8005876:	eb4a 0a0c 	adc.w	sl, sl, ip
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005886:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800588a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800588e:	4689      	mov	r9, r1
 8005890:	4692      	mov	sl, r2
 8005892:	eb1b 0509 	adds.w	r5, fp, r9
 8005896:	eb4c 060a 	adc.w	r6, ip, sl
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	0094      	lsls	r4, r2, #2
 80058ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058b2:	008b      	lsls	r3, r1, #2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	4631      	mov	r1, r6
 80058bc:	f7fa fc8c 	bl	80001d8 <__aeabi_uldivmod>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b77      	ldr	r3, [pc, #476]	; (8005aa4 <UART_SetConfig+0x6f4>)
 80058c8:	fba3 1302 	umull	r1, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	2164      	movs	r1, #100	; 0x64
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	3332      	adds	r3, #50	; 0x32
 80058da:	4a72      	ldr	r2, [pc, #456]	; (8005aa4 <UART_SetConfig+0x6f4>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	f003 020f 	and.w	r2, r3, #15
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4442      	add	r2, r8
 80058ec:	609a      	str	r2, [r3, #8]
 80058ee:	e0d0      	b.n	8005a92 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80058f0:	f7fd fb08 	bl	8002f04 <HAL_RCC_GetPCLK1Freq>
 80058f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	469a      	mov	sl, r3
 80058fa:	f04f 0b00 	mov.w	fp, #0
 80058fe:	46d0      	mov	r8, sl
 8005900:	46d9      	mov	r9, fp
 8005902:	eb18 0308 	adds.w	r3, r8, r8
 8005906:	eb49 0409 	adc.w	r4, r9, r9
 800590a:	4698      	mov	r8, r3
 800590c:	46a1      	mov	r9, r4
 800590e:	eb18 080a 	adds.w	r8, r8, sl
 8005912:	eb49 090b 	adc.w	r9, r9, fp
 8005916:	f04f 0100 	mov.w	r1, #0
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005922:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005926:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800592a:	4688      	mov	r8, r1
 800592c:	4691      	mov	r9, r2
 800592e:	eb1a 0508 	adds.w	r5, sl, r8
 8005932:	eb4b 0609 	adc.w	r6, fp, r9
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	4619      	mov	r1, r3
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	0094      	lsls	r4, r2, #2
 800594a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800594e:	008b      	lsls	r3, r1, #2
 8005950:	461a      	mov	r2, r3
 8005952:	4623      	mov	r3, r4
 8005954:	4628      	mov	r0, r5
 8005956:	4631      	mov	r1, r6
 8005958:	f7fa fc3e 	bl	80001d8 <__aeabi_uldivmod>
 800595c:	4603      	mov	r3, r0
 800595e:	460c      	mov	r4, r1
 8005960:	461a      	mov	r2, r3
 8005962:	4b50      	ldr	r3, [pc, #320]	; (8005aa4 <UART_SetConfig+0x6f4>)
 8005964:	fba3 2302 	umull	r2, r3, r3, r2
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	469b      	mov	fp, r3
 8005972:	f04f 0c00 	mov.w	ip, #0
 8005976:	46d9      	mov	r9, fp
 8005978:	46e2      	mov	sl, ip
 800597a:	eb19 0309 	adds.w	r3, r9, r9
 800597e:	eb4a 040a 	adc.w	r4, sl, sl
 8005982:	4699      	mov	r9, r3
 8005984:	46a2      	mov	sl, r4
 8005986:	eb19 090b 	adds.w	r9, r9, fp
 800598a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800598e:	f04f 0100 	mov.w	r1, #0
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800599a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800599e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059a2:	4689      	mov	r9, r1
 80059a4:	4692      	mov	sl, r2
 80059a6:	eb1b 0509 	adds.w	r5, fp, r9
 80059aa:	eb4c 060a 	adc.w	r6, ip, sl
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	4619      	mov	r1, r3
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	f04f 0400 	mov.w	r4, #0
 80059c0:	0094      	lsls	r4, r2, #2
 80059c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059c6:	008b      	lsls	r3, r1, #2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	4631      	mov	r1, r6
 80059d0:	f7fa fc02 	bl	80001d8 <__aeabi_uldivmod>
 80059d4:	4603      	mov	r3, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	461a      	mov	r2, r3
 80059da:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <UART_SetConfig+0x6f4>)
 80059dc:	fba3 1302 	umull	r1, r3, r3, r2
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	2164      	movs	r1, #100	; 0x64
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	3332      	adds	r3, #50	; 0x32
 80059ee:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <UART_SetConfig+0x6f4>)
 80059f0:	fba2 2303 	umull	r2, r3, r2, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fa:	4498      	add	r8, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	469b      	mov	fp, r3
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	46d9      	mov	r9, fp
 8005a06:	46e2      	mov	sl, ip
 8005a08:	eb19 0309 	adds.w	r3, r9, r9
 8005a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a10:	4699      	mov	r9, r3
 8005a12:	46a2      	mov	sl, r4
 8005a14:	eb19 090b 	adds.w	r9, r9, fp
 8005a18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a1c:	f04f 0100 	mov.w	r1, #0
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a30:	4689      	mov	r9, r1
 8005a32:	4692      	mov	sl, r2
 8005a34:	eb1b 0509 	adds.w	r5, fp, r9
 8005a38:	eb4c 060a 	adc.w	r6, ip, sl
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	4619      	mov	r1, r3
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	0094      	lsls	r4, r2, #2
 8005a50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	461a      	mov	r2, r3
 8005a58:	4623      	mov	r3, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	f7fa fbbb 	bl	80001d8 <__aeabi_uldivmod>
 8005a62:	4603      	mov	r3, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	461a      	mov	r2, r3
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <UART_SetConfig+0x6f4>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <UART_SetConfig+0x6f4>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4442      	add	r2, r8
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	e7ff      	b.n	8005a92 <UART_SetConfig+0x6e2>
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b480      	push	{r7}
 8005aac:	b085      	sub	sp, #20
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 001c 	add.w	r0, r7, #28
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005abe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005ac2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ac6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005aca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005ace:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005ad2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	b004      	add	sp, #16
 8005afc:	4770      	bx	lr

08005afe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2203      	movs	r2, #3
 8005b46:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005b48:	2002      	movs	r0, #2
 8005b4a:	f7fb fc13 	bl	8001374 <HAL_Delay>
  
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0303 	and.w	r3, r3, #3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005bae:	f023 030f 	bic.w	r3, r3, #15
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	b2db      	uxtb	r3, r3
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b085      	sub	sp, #20
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
}  
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005c34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005c3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0

}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005c6e:	2310      	movs	r3, #16
 8005c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005c72:	2340      	movs	r3, #64	; 0x40
 8005c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ff74 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c90:	2110      	movs	r1, #16
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9b8 	bl	8006008 <SDMMC_GetCmdResp1>
 8005c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005cb0:	230c      	movs	r3, #12
 8005cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff53 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005cce:	4a05      	ldr	r2, [pc, #20]	; (8005ce4 <SDMMC_CmdStopTransfer+0x40>)
 8005cd0:	210c      	movs	r1, #12
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f998 	bl	8006008 <SDMMC_GetCmdResp1>
 8005cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	05f5e100 	.word	0x05f5e100

08005ce8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005cf8:	2307      	movs	r3, #7
 8005cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	4619      	mov	r1, r3
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f7ff ff2f 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1a:	2107      	movs	r1, #7
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f973 	bl	8006008 <SDMMC_GetCmdResp1>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	; 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b088      	sub	sp, #32
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff ff0e 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f92d 	bl	8005fb8 <SDMMC_GetCmdError>
 8005d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d60:	69fb      	ldr	r3, [r7, #28]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b088      	sub	sp, #32
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005d72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005d78:	2308      	movs	r3, #8
 8005d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff feef 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fb16 	bl	80063c8 <SDMMC_GetCmdResp7>
 8005d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005db6:	2337      	movs	r3, #55	; 0x37
 8005db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dc8:	f107 0308 	add.w	r3, r7, #8
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff fed0 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	2137      	movs	r1, #55	; 0x37
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f914 	bl	8006008 <SDMMC_GetCmdResp1>
 8005de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e02:	2329      	movs	r3, #41	; 0x29
 8005e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff feaa 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fa23 	bl	800626c <SDMMC_GetCmdResp3>
 8005e26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e28:	69fb      	ldr	r3, [r7, #28]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b088      	sub	sp, #32
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005e40:	2306      	movs	r3, #6
 8005e42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fe8b 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e62:	2106      	movs	r1, #6
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f8cf 	bl	8006008 <SDMMC_GetCmdResp1>
 8005e6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005e82:	2333      	movs	r3, #51	; 0x33
 8005e84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e86:	2340      	movs	r3, #64	; 0x40
 8005e88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fe6a 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea4:	2133      	movs	r1, #51	; 0x33
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8ae 	bl	8006008 <SDMMC_GetCmdResp1>
 8005eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eae:	69fb      	ldr	r3, [r7, #28]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005ec8:	23c0      	movs	r3, #192	; 0xc0
 8005eca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fe49 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f97c 	bl	80061e0 <SDMMC_GetCmdResp2>
 8005ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eea:	69fb      	ldr	r3, [r7, #28]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005f02:	2309      	movs	r3, #9
 8005f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005f06:	23c0      	movs	r3, #192	; 0xc0
 8005f08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fe2a 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f95d 	bl	80061e0 <SDMMC_GetCmdResp2>
 8005f26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f28:	69fb      	ldr	r3, [r7, #28]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b088      	sub	sp, #32
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f40:	2303      	movs	r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fe0b 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	2103      	movs	r1, #3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9bc 	bl	80062e0 <SDMMC_GetCmdResp6>
 8005f68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005f82:	230d      	movs	r3, #13
 8005f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f86:	2340      	movs	r3, #64	; 0x40
 8005f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff fdea 	bl	8005b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	210d      	movs	r1, #13
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82e 	bl	8006008 <SDMMC_GetCmdResp1>
 8005fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fae:	69fb      	ldr	r3, [r7, #28]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005fb8:	b490      	push	{r4, r7}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <SDMMC_GetCmdError+0x48>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0f      	ldr	r2, [pc, #60]	; (8006004 <SDMMC_GetCmdError+0x4c>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0a5b      	lsrs	r3, r3, #9
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005fd4:	4623      	mov	r3, r4
 8005fd6:	1e5c      	subs	r4, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fe0:	e009      	b.n	8005ff6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f2      	beq.n	8005fd4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	22c5      	movs	r2, #197	; 0xc5
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc90      	pop	{r4, r7}
 8005ffe:	4770      	bx	lr
 8006000:	20000000 	.word	0x20000000
 8006004:	10624dd3 	.word	0x10624dd3

08006008 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006016:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <SDMMC_GetCmdResp1+0x1cc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a6f      	ldr	r2, [pc, #444]	; (80061d8 <SDMMC_GetCmdResp1+0x1d0>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	0a5b      	lsrs	r3, r3, #9
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006028:	4623      	mov	r3, r4
 800602a:	1e5c      	subs	r4, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006030:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006034:	e0c9      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <SDMMC_GetCmdResp1+0x20>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1eb      	bne.n	8006028 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2204      	movs	r2, #4
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006062:	2304      	movs	r3, #4
 8006064:	e0b1      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006078:	2301      	movs	r3, #1
 800607a:	e0a6      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22c5      	movs	r2, #197	; 0xc5
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fda0 	bl	8005bc8 <SDIO_GetCommandResponse>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	4293      	cmp	r3, r2
 8006090:	d001      	beq.n	8006096 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006092:	2301      	movs	r3, #1
 8006094:	e099      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006096:	2100      	movs	r1, #0
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fda2 	bl	8005be2 <SDIO_GetResponse>
 800609e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4b4e      	ldr	r3, [pc, #312]	; (80061dc <SDMMC_GetCmdResp1+0x1d4>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e08d      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da02      	bge.n	80060ba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80060b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b8:	e087      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	e080      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	e079      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e4:	e071      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060f4:	e069      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006104:	e061      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006114:	e059      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006124:	e051      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006134:	e049      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006140:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006144:	e041      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006154:	e039      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006164:	e031      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006170:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006174:	e029      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006180:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006184:	e021      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006190:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006194:	e019      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80061a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061a4:	e011      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80061b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80061b4:	e009      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80061c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061c4:	e001      	b.n	80061ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80061c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000000 	.word	0x20000000
 80061d8:	10624dd3 	.word	0x10624dd3
 80061dc:	fdffe008 	.word	0xfdffe008

080061e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80061e0:	b490      	push	{r4, r7}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <SDMMC_GetCmdResp2+0x84>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <SDMMC_GetCmdResp2+0x88>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a5b      	lsrs	r3, r3, #9
 80061f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80061fc:	4623      	mov	r3, r4
 80061fe:	1e5c      	subs	r4, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006208:	e026      	b.n	8006258 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <SDMMC_GetCmdResp2+0x1c>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1eb      	bne.n	80061fc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2204      	movs	r2, #4
 8006234:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006236:	2304      	movs	r3, #4
 8006238:	e00e      	b.n	8006258 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800624c:	2301      	movs	r3, #1
 800624e:	e003      	b.n	8006258 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	22c5      	movs	r2, #197	; 0xc5
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bc90      	pop	{r4, r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000000 	.word	0x20000000
 8006268:	10624dd3 	.word	0x10624dd3

0800626c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800626c:	b490      	push	{r4, r7}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006274:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <SDMMC_GetCmdResp3+0x6c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a18      	ldr	r2, [pc, #96]	; (80062dc <SDMMC_GetCmdResp3+0x70>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	0a5b      	lsrs	r3, r3, #9
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006288:	4623      	mov	r3, r4
 800628a:	1e5c      	subs	r4, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d102      	bne.n	8006296 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006294:	e01b      	b.n	80062ce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800629a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <SDMMC_GetCmdResp3+0x1c>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1eb      	bne.n	8006288 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d004      	beq.n	80062c6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2204      	movs	r2, #4
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062c2:	2304      	movs	r3, #4
 80062c4:	e003      	b.n	80062ce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	22c5      	movs	r2, #197	; 0xc5
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc90      	pop	{r4, r7}
 80062d6:	4770      	bx	lr
 80062d8:	20000000 	.word	0x20000000
 80062dc:	10624dd3 	.word	0x10624dd3

080062e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	460b      	mov	r3, r1
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062ee:	4b34      	ldr	r3, [pc, #208]	; (80063c0 <SDMMC_GetCmdResp6+0xe0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a34      	ldr	r2, [pc, #208]	; (80063c4 <SDMMC_GetCmdResp6+0xe4>)
 80062f4:	fba2 2303 	umull	r2, r3, r2, r3
 80062f8:	0a5b      	lsrs	r3, r3, #9
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006302:	4623      	mov	r3, r4
 8006304:	1e5c      	subs	r4, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d102      	bne.n	8006310 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800630a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800630e:	e052      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <SDMMC_GetCmdResp6+0x22>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1eb      	bne.n	8006302 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2204      	movs	r2, #4
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800633c:	2304      	movs	r3, #4
 800633e:	e03a      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006352:	2301      	movs	r3, #1
 8006354:	e02f      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff fc36 	bl	8005bc8 <SDIO_GetCommandResponse>
 800635c:	4603      	mov	r3, r0
 800635e:	461a      	mov	r2, r3
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	4293      	cmp	r3, r2
 8006364:	d001      	beq.n	800636a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006366:	2301      	movs	r3, #1
 8006368:	e025      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	22c5      	movs	r2, #197	; 0xc5
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006370:	2100      	movs	r1, #0
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f7ff fc35 	bl	8005be2 <SDIO_GetResponse>
 8006378:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	b29a      	uxth	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800638e:	2300      	movs	r3, #0
 8006390:	e011      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800639c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063a0:	e009      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063b0:	e001      	b.n	80063b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd90      	pop	{r4, r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000000 	.word	0x20000000
 80063c4:	10624dd3 	.word	0x10624dd3

080063c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80063c8:	b490      	push	{r4, r7}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063d0:	4b21      	ldr	r3, [pc, #132]	; (8006458 <SDMMC_GetCmdResp7+0x90>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a21      	ldr	r2, [pc, #132]	; (800645c <SDMMC_GetCmdResp7+0x94>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0a5b      	lsrs	r3, r3, #9
 80063dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80063e4:	4623      	mov	r3, r4
 80063e6:	1e5c      	subs	r4, r3, #1
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80063f0:	e02c      	b.n	800644c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <SDMMC_GetCmdResp7+0x1c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1eb      	bne.n	80063e4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2204      	movs	r2, #4
 800641c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800641e:	2304      	movs	r3, #4
 8006420:	e014      	b.n	800644c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006434:	2301      	movs	r3, #1
 8006436:	e009      	b.n	800644c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2240      	movs	r2, #64	; 0x40
 8006448:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800644a:	2300      	movs	r3, #0
  
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bc90      	pop	{r4, r7}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4e0d      	ldr	r6, [pc, #52]	; (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	; (800649c <__libc_init_array+0x3c>)
 8006466:	1ba4      	subs	r4, r4, r6
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2500      	movs	r5, #0
 800646c:	42a5      	cmp	r5, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4e0b      	ldr	r6, [pc, #44]	; (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	; (80064a4 <__libc_init_array+0x44>)
 8006474:	f000 f820 	bl	80064b8 <_init>
 8006478:	1ba4      	subs	r4, r4, r6
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2500      	movs	r5, #0
 800647e:	42a5      	cmp	r5, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006488:	4798      	blx	r3
 800648a:	3501      	adds	r5, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006492:	4798      	blx	r3
 8006494:	3501      	adds	r5, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	080064f8 	.word	0x080064f8
 800649c:	080064f8 	.word	0x080064f8
 80064a0:	080064f8 	.word	0x080064f8
 80064a4:	080064fc 	.word	0x080064fc

080064a8 <memset>:
 80064a8:	4402      	add	r2, r0
 80064aa:	4603      	mov	r3, r0
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	f803 1b01 	strb.w	r1, [r3], #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
